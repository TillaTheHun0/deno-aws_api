// Autogenerated API client for: Amazon Pinpoint Email Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class PinpointEmail {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(PinpointEmail.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-07-26",
    "endpointPrefix": "email",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Pinpoint Email",
    "serviceFullName": "Amazon Pinpoint Email Service",
    "serviceId": "Pinpoint Email",
    "signatureVersion": "v4",
    "signingName": "ses",
    "uid": "pinpoint-email-2018-07-26"
  };

  async createConfigurationSet(
    {abortSignal, ...params}: RequestConfig & CreateConfigurationSetRequest,
  ): Promise<CreateConfigurationSetResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationSetName: params["ConfigurationSetName"],
      TrackingOptions: fromTrackingOptions(params["TrackingOptions"]),
      DeliveryOptions: fromDeliveryOptions(params["DeliveryOptions"]),
      ReputationOptions: fromReputationOptions(params["ReputationOptions"]),
      SendingOptions: fromSendingOptions(params["SendingOptions"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationSet",
      requestUri: "/v1/email/configuration-sets",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & CreateConfigurationSetEventDestinationRequest,
  ): Promise<CreateConfigurationSetEventDestinationResponse> {
    const body: jsonP.JSONObject = {
      EventDestinationName: params["EventDestinationName"],
      EventDestination: fromEventDestinationDefinition(params["EventDestination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationSetEventDestination",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDedicatedIpPool(
    {abortSignal, ...params}: RequestConfig & CreateDedicatedIpPoolRequest,
  ): Promise<CreateDedicatedIpPoolResponse> {
    const body: jsonP.JSONObject = {
      PoolName: params["PoolName"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDedicatedIpPool",
      requestUri: "/v1/email/dedicated-ip-pools",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDeliverabilityTestReport(
    {abortSignal, ...params}: RequestConfig & CreateDeliverabilityTestReportRequest,
  ): Promise<CreateDeliverabilityTestReportResponse> {
    const body: jsonP.JSONObject = {
      ReportName: params["ReportName"],
      FromEmailAddress: params["FromEmailAddress"],
      Content: fromEmailContent(params["Content"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeliverabilityTestReport",
      requestUri: "/v1/email/deliverability-dashboard/test",
    });
    return jsonP.readObj({
      required: {
        "ReportId": "s",
        "DeliverabilityTestStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeliverabilityTestStatus>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async createEmailIdentity(
    {abortSignal, ...params}: RequestConfig & CreateEmailIdentityRequest,
  ): Promise<CreateEmailIdentityResponse> {
    const body: jsonP.JSONObject = {
      EmailIdentity: params["EmailIdentity"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEmailIdentity",
      requestUri: "/v1/email/identities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityType": (x: jsonP.JSONValue) => cmnP.readEnum<IdentityType>(x),
        "VerifiedForSendingStatus": "b",
        "DkimAttributes": toDkimAttributes,
      },
    }, await resp.json());
  }

  async deleteConfigurationSet(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationSetRequest,
  ): Promise<DeleteConfigurationSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationSetEventDestinationRequest,
  ): Promise<DeleteConfigurationSetEventDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationSetEventDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations/${params["EventDestinationName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDedicatedIpPool(
    {abortSignal, ...params}: RequestConfig & DeleteDedicatedIpPoolRequest,
  ): Promise<DeleteDedicatedIpPoolResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDedicatedIpPool",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/email/dedicated-ip-pools/${params["PoolName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEmailIdentity(
    {abortSignal, ...params}: RequestConfig & DeleteEmailIdentityRequest,
  ): Promise<DeleteEmailIdentityResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEmailIdentity",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/email/identities/${params["EmailIdentity"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccount(
    {abortSignal, ...params}: RequestConfig & GetAccountRequest = {},
  ): Promise<GetAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccount",
      method: "GET",
      requestUri: "/v1/email/account",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SendQuota": toSendQuota,
        "SendingEnabled": "b",
        "DedicatedIpAutoWarmupEnabled": "b",
        "EnforcementStatus": "s",
        "ProductionAccessEnabled": "b",
      },
    }, await resp.json());
  }

  async getBlacklistReports(
    {abortSignal, ...params}: RequestConfig & GetBlacklistReportsRequest,
  ): Promise<GetBlacklistReportsResponse> {
    const query = new URLSearchParams;
    for (const item of params["BlacklistItemNames"]) {
      query.append("BlacklistItemNames", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetBlacklistReports",
      method: "GET",
      requestUri: "/v1/email/deliverability-dashboard/blacklist-report",
    });
    return jsonP.readObj({
      required: {
        "BlacklistReport": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toBlacklistEntry) : [], x),
      },
      optional: {},
    }, await resp.json());
  }

  async getConfigurationSet(
    {abortSignal, ...params}: RequestConfig & GetConfigurationSetRequest,
  ): Promise<GetConfigurationSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfigurationSet",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationSetName": "s",
        "TrackingOptions": toTrackingOptions,
        "DeliveryOptions": toDeliveryOptions,
        "ReputationOptions": toReputationOptions,
        "SendingOptions": toSendingOptions,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async getConfigurationSetEventDestinations(
    {abortSignal, ...params}: RequestConfig & GetConfigurationSetEventDestinationsRequest,
  ): Promise<GetConfigurationSetEventDestinationsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfigurationSetEventDestinations",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventDestinations": [toEventDestination],
      },
    }, await resp.json());
  }

  async getDedicatedIp(
    {abortSignal, ...params}: RequestConfig & GetDedicatedIpRequest,
  ): Promise<GetDedicatedIpResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDedicatedIp",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/dedicated-ips/${params["Ip"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedIp": toDedicatedIp,
      },
    }, await resp.json());
  }

  async getDedicatedIps(
    {abortSignal, ...params}: RequestConfig & GetDedicatedIpsRequest = {},
  ): Promise<GetDedicatedIpsResponse> {
    const query = new URLSearchParams;
    if (params["PoolName"] != null) query.set("PoolName", params["PoolName"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDedicatedIps",
      method: "GET",
      requestUri: "/v1/email/dedicated-ips",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedIps": [toDedicatedIp],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getDeliverabilityDashboardOptions(
    {abortSignal, ...params}: RequestConfig & GetDeliverabilityDashboardOptionsRequest = {},
  ): Promise<GetDeliverabilityDashboardOptionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeliverabilityDashboardOptions",
      method: "GET",
      requestUri: "/v1/email/deliverability-dashboard",
    });
    return jsonP.readObj({
      required: {
        "DashboardEnabled": "b",
      },
      optional: {
        "SubscriptionExpiryDate": "d",
        "AccountStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeliverabilityDashboardAccountStatus>(x),
        "ActiveSubscribedDomains": [toDomainDeliverabilityTrackingOption],
        "PendingExpirationSubscribedDomains": [toDomainDeliverabilityTrackingOption],
      },
    }, await resp.json());
  }

  async getDeliverabilityTestReport(
    {abortSignal, ...params}: RequestConfig & GetDeliverabilityTestReportRequest,
  ): Promise<GetDeliverabilityTestReportResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeliverabilityTestReport",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/deliverability-dashboard/test-reports/${params["ReportId"]}`,
    });
    return jsonP.readObj({
      required: {
        "DeliverabilityTestReport": toDeliverabilityTestReport,
        "OverallPlacement": toPlacementStatistics,
        "IspPlacements": [toIspPlacement],
      },
      optional: {
        "Message": "s",
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async getDomainDeliverabilityCampaign(
    {abortSignal, ...params}: RequestConfig & GetDomainDeliverabilityCampaignRequest,
  ): Promise<GetDomainDeliverabilityCampaignResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDomainDeliverabilityCampaign",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/deliverability-dashboard/campaigns/${params["CampaignId"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainDeliverabilityCampaign": toDomainDeliverabilityCampaign,
      },
      optional: {},
    }, await resp.json());
  }

  async getDomainStatisticsReport(
    {abortSignal, ...params}: RequestConfig & GetDomainStatisticsReportRequest,
  ): Promise<GetDomainStatisticsReportResponse> {
    const query = new URLSearchParams;
    query.set("StartDate", cmnP.serializeDate_iso8601(params["StartDate"]) ?? "");
    query.set("EndDate", cmnP.serializeDate_iso8601(params["EndDate"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDomainStatisticsReport",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/deliverability-dashboard/statistics-report/${params["Domain"]}`,
    });
    return jsonP.readObj({
      required: {
        "OverallVolume": toOverallVolume,
        "DailyVolumes": [toDailyVolume],
      },
      optional: {},
    }, await resp.json());
  }

  async getEmailIdentity(
    {abortSignal, ...params}: RequestConfig & GetEmailIdentityRequest,
  ): Promise<GetEmailIdentityResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEmailIdentity",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/identities/${params["EmailIdentity"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityType": (x: jsonP.JSONValue) => cmnP.readEnum<IdentityType>(x),
        "FeedbackForwardingStatus": "b",
        "VerifiedForSendingStatus": "b",
        "DkimAttributes": toDkimAttributes,
        "MailFromAttributes": toMailFromAttributes,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listConfigurationSets(
    {abortSignal, ...params}: RequestConfig & ListConfigurationSetsRequest = {},
  ): Promise<ListConfigurationSetsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigurationSets",
      method: "GET",
      requestUri: "/v1/email/configuration-sets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationSets": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDedicatedIpPools(
    {abortSignal, ...params}: RequestConfig & ListDedicatedIpPoolsRequest = {},
  ): Promise<ListDedicatedIpPoolsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDedicatedIpPools",
      method: "GET",
      requestUri: "/v1/email/dedicated-ip-pools",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedIpPools": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeliverabilityTestReports(
    {abortSignal, ...params}: RequestConfig & ListDeliverabilityTestReportsRequest = {},
  ): Promise<ListDeliverabilityTestReportsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeliverabilityTestReports",
      method: "GET",
      requestUri: "/v1/email/deliverability-dashboard/test-reports",
    });
    return jsonP.readObj({
      required: {
        "DeliverabilityTestReports": [toDeliverabilityTestReport],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDomainDeliverabilityCampaigns(
    {abortSignal, ...params}: RequestConfig & ListDomainDeliverabilityCampaignsRequest,
  ): Promise<ListDomainDeliverabilityCampaignsResponse> {
    const query = new URLSearchParams;
    query.set("StartDate", cmnP.serializeDate_iso8601(params["StartDate"]) ?? "");
    query.set("EndDate", cmnP.serializeDate_iso8601(params["EndDate"]) ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDomainDeliverabilityCampaigns",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/email/deliverability-dashboard/domains/${params["SubscribedDomain"]}/campaigns`,
    });
    return jsonP.readObj({
      required: {
        "DomainDeliverabilityCampaigns": [toDomainDeliverabilityCampaign],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEmailIdentities(
    {abortSignal, ...params}: RequestConfig & ListEmailIdentitiesRequest = {},
  ): Promise<ListEmailIdentitiesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEmailIdentities",
      method: "GET",
      requestUri: "/v1/email/identities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EmailIdentities": [toIdentityInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("ResourceArn", params["ResourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/v1/email/tags",
    });
    return jsonP.readObj({
      required: {
        "Tags": [toTag],
      },
      optional: {},
    }, await resp.json());
  }

  async putAccountDedicatedIpWarmupAttributes(
    {abortSignal, ...params}: RequestConfig & PutAccountDedicatedIpWarmupAttributesRequest = {},
  ): Promise<PutAccountDedicatedIpWarmupAttributesResponse> {
    const body: jsonP.JSONObject = {
      AutoWarmupEnabled: params["AutoWarmupEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccountDedicatedIpWarmupAttributes",
      method: "PUT",
      requestUri: "/v1/email/account/dedicated-ips/warmup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAccountSendingAttributes(
    {abortSignal, ...params}: RequestConfig & PutAccountSendingAttributesRequest = {},
  ): Promise<PutAccountSendingAttributesResponse> {
    const body: jsonP.JSONObject = {
      SendingEnabled: params["SendingEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccountSendingAttributes",
      method: "PUT",
      requestUri: "/v1/email/account/sending",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetDeliveryOptions(
    {abortSignal, ...params}: RequestConfig & PutConfigurationSetDeliveryOptionsRequest,
  ): Promise<PutConfigurationSetDeliveryOptionsResponse> {
    const body: jsonP.JSONObject = {
      TlsPolicy: params["TlsPolicy"],
      SendingPoolName: params["SendingPoolName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetDeliveryOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/delivery-options`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetReputationOptions(
    {abortSignal, ...params}: RequestConfig & PutConfigurationSetReputationOptionsRequest,
  ): Promise<PutConfigurationSetReputationOptionsResponse> {
    const body: jsonP.JSONObject = {
      ReputationMetricsEnabled: params["ReputationMetricsEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetReputationOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/reputation-options`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetSendingOptions(
    {abortSignal, ...params}: RequestConfig & PutConfigurationSetSendingOptionsRequest,
  ): Promise<PutConfigurationSetSendingOptionsResponse> {
    const body: jsonP.JSONObject = {
      SendingEnabled: params["SendingEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetSendingOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/sending`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetTrackingOptions(
    {abortSignal, ...params}: RequestConfig & PutConfigurationSetTrackingOptionsRequest,
  ): Promise<PutConfigurationSetTrackingOptionsResponse> {
    const body: jsonP.JSONObject = {
      CustomRedirectDomain: params["CustomRedirectDomain"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetTrackingOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/tracking-options`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putDedicatedIpInPool(
    {abortSignal, ...params}: RequestConfig & PutDedicatedIpInPoolRequest,
  ): Promise<PutDedicatedIpInPoolResponse> {
    const body: jsonP.JSONObject = {
      DestinationPoolName: params["DestinationPoolName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDedicatedIpInPool",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/dedicated-ips/${params["Ip"]}/pool`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putDedicatedIpWarmupAttributes(
    {abortSignal, ...params}: RequestConfig & PutDedicatedIpWarmupAttributesRequest,
  ): Promise<PutDedicatedIpWarmupAttributesResponse> {
    const body: jsonP.JSONObject = {
      WarmupPercentage: params["WarmupPercentage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDedicatedIpWarmupAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/dedicated-ips/${params["Ip"]}/warmup`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putDeliverabilityDashboardOption(
    {abortSignal, ...params}: RequestConfig & PutDeliverabilityDashboardOptionRequest,
  ): Promise<PutDeliverabilityDashboardOptionResponse> {
    const body: jsonP.JSONObject = {
      DashboardEnabled: params["DashboardEnabled"],
      SubscribedDomains: params["SubscribedDomains"]?.map(x => fromDomainDeliverabilityTrackingOption(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDeliverabilityDashboardOption",
      method: "PUT",
      requestUri: "/v1/email/deliverability-dashboard",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEmailIdentityDkimAttributes(
    {abortSignal, ...params}: RequestConfig & PutEmailIdentityDkimAttributesRequest,
  ): Promise<PutEmailIdentityDkimAttributesResponse> {
    const body: jsonP.JSONObject = {
      SigningEnabled: params["SigningEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityDkimAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/identities/${params["EmailIdentity"]}/dkim`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEmailIdentityFeedbackAttributes(
    {abortSignal, ...params}: RequestConfig & PutEmailIdentityFeedbackAttributesRequest,
  ): Promise<PutEmailIdentityFeedbackAttributesResponse> {
    const body: jsonP.JSONObject = {
      EmailForwardingEnabled: params["EmailForwardingEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityFeedbackAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/identities/${params["EmailIdentity"]}/feedback`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEmailIdentityMailFromAttributes(
    {abortSignal, ...params}: RequestConfig & PutEmailIdentityMailFromAttributesRequest,
  ): Promise<PutEmailIdentityMailFromAttributesResponse> {
    const body: jsonP.JSONObject = {
      MailFromDomain: params["MailFromDomain"],
      BehaviorOnMxFailure: params["BehaviorOnMxFailure"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityMailFromAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/identities/${params["EmailIdentity"]}/mail-from`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async sendEmail(
    {abortSignal, ...params}: RequestConfig & SendEmailRequest,
  ): Promise<SendEmailResponse> {
    const body: jsonP.JSONObject = {
      FromEmailAddress: params["FromEmailAddress"],
      Destination: fromDestination(params["Destination"]),
      ReplyToAddresses: params["ReplyToAddresses"],
      FeedbackForwardingEmailAddress: params["FeedbackForwardingEmailAddress"],
      Content: fromEmailContent(params["Content"]),
      EmailTags: params["EmailTags"]?.map(x => fromMessageTag(x)),
      ConfigurationSetName: params["ConfigurationSetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendEmail",
      requestUri: "/v1/email/outbound-emails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/v1/email/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    query.set("ResourceArn", params["ResourceArn"]?.toString() ?? "");
    for (const item of params["TagKeys"]) {
      query.append("TagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: "/v1/email/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & UpdateConfigurationSetEventDestinationRequest,
  ): Promise<UpdateConfigurationSetEventDestinationResponse> {
    const body: jsonP.JSONObject = {
      EventDestination: fromEventDestinationDefinition(params["EventDestination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfigurationSetEventDestination",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations/${params["EventDestinationName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateConfigurationSetRequest {
  ConfigurationSetName: string;
  TrackingOptions?: TrackingOptions | null;
  DeliveryOptions?: DeliveryOptions | null;
  ReputationOptions?: ReputationOptions | null;
  SendingOptions?: SendingOptions | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateConfigurationSetEventDestinationRequest {
  ConfigurationSetName: string;
  EventDestinationName: string;
  EventDestination: EventDestinationDefinition;
}

// refs: 1 - tags: named, input
export interface CreateDedicatedIpPoolRequest {
  PoolName: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDeliverabilityTestReportRequest {
  ReportName?: string | null;
  FromEmailAddress: string;
  Content: EmailContent;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateEmailIdentityRequest {
  EmailIdentity: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationSetRequest {
  ConfigurationSetName: string;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationSetEventDestinationRequest {
  ConfigurationSetName: string;
  EventDestinationName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDedicatedIpPoolRequest {
  PoolName: string;
}

// refs: 1 - tags: named, input
export interface DeleteEmailIdentityRequest {
  EmailIdentity: string;
}

// refs: 1 - tags: named, input
export interface GetAccountRequest {
}

// refs: 1 - tags: named, input
export interface GetBlacklistReportsRequest {
  BlacklistItemNames: string[];
}

// refs: 1 - tags: named, input
export interface GetConfigurationSetRequest {
  ConfigurationSetName: string;
}

// refs: 1 - tags: named, input
export interface GetConfigurationSetEventDestinationsRequest {
  ConfigurationSetName: string;
}

// refs: 1 - tags: named, input
export interface GetDedicatedIpRequest {
  Ip: string;
}

// refs: 1 - tags: named, input
export interface GetDedicatedIpsRequest {
  PoolName?: string | null;
  NextToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface GetDeliverabilityDashboardOptionsRequest {
}

// refs: 1 - tags: named, input
export interface GetDeliverabilityTestReportRequest {
  ReportId: string;
}

// refs: 1 - tags: named, input
export interface GetDomainDeliverabilityCampaignRequest {
  CampaignId: string;
}

// refs: 1 - tags: named, input
export interface GetDomainStatisticsReportRequest {
  Domain: string;
  StartDate: Date | number;
  EndDate: Date | number;
}

// refs: 1 - tags: named, input
export interface GetEmailIdentityRequest {
  EmailIdentity: string;
}

// refs: 1 - tags: named, input
export interface ListConfigurationSetsRequest {
  NextToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDedicatedIpPoolsRequest {
  NextToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDeliverabilityTestReportsRequest {
  NextToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDomainDeliverabilityCampaignsRequest {
  StartDate: Date | number;
  EndDate: Date | number;
  SubscribedDomain: string;
  NextToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListEmailIdentitiesRequest {
  NextToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutAccountDedicatedIpWarmupAttributesRequest {
  AutoWarmupEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutAccountSendingAttributesRequest {
  SendingEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutConfigurationSetDeliveryOptionsRequest {
  ConfigurationSetName: string;
  TlsPolicy?: TlsPolicy | null;
  SendingPoolName?: string | null;
}

// refs: 1 - tags: named, input
export interface PutConfigurationSetReputationOptionsRequest {
  ConfigurationSetName: string;
  ReputationMetricsEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutConfigurationSetSendingOptionsRequest {
  ConfigurationSetName: string;
  SendingEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutConfigurationSetTrackingOptionsRequest {
  ConfigurationSetName: string;
  CustomRedirectDomain?: string | null;
}

// refs: 1 - tags: named, input
export interface PutDedicatedIpInPoolRequest {
  Ip: string;
  DestinationPoolName: string;
}

// refs: 1 - tags: named, input
export interface PutDedicatedIpWarmupAttributesRequest {
  Ip: string;
  WarmupPercentage: number;
}

// refs: 1 - tags: named, input
export interface PutDeliverabilityDashboardOptionRequest {
  DashboardEnabled: boolean;
  SubscribedDomains?: DomainDeliverabilityTrackingOption[] | null;
}

// refs: 1 - tags: named, input
export interface PutEmailIdentityDkimAttributesRequest {
  EmailIdentity: string;
  SigningEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutEmailIdentityFeedbackAttributesRequest {
  EmailIdentity: string;
  EmailForwardingEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutEmailIdentityMailFromAttributesRequest {
  EmailIdentity: string;
  MailFromDomain?: string | null;
  BehaviorOnMxFailure?: BehaviorOnMxFailure | null;
}

// refs: 1 - tags: named, input
export interface SendEmailRequest {
  FromEmailAddress?: string | null;
  Destination: Destination;
  ReplyToAddresses?: string[] | null;
  FeedbackForwardingEmailAddress?: string | null;
  Content: EmailContent;
  EmailTags?: MessageTag[] | null;
  ConfigurationSetName?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateConfigurationSetEventDestinationRequest {
  ConfigurationSetName: string;
  EventDestinationName: string;
  EventDestination: EventDestinationDefinition;
}

// refs: 1 - tags: named, output
export interface CreateConfigurationSetResponse {
}

// refs: 1 - tags: named, output
export interface CreateConfigurationSetEventDestinationResponse {
}

// refs: 1 - tags: named, output
export interface CreateDedicatedIpPoolResponse {
}

// refs: 1 - tags: named, output
export interface CreateDeliverabilityTestReportResponse {
  ReportId: string;
  DeliverabilityTestStatus: DeliverabilityTestStatus;
}

// refs: 1 - tags: named, output
export interface CreateEmailIdentityResponse {
  IdentityType?: IdentityType | null;
  VerifiedForSendingStatus?: boolean | null;
  DkimAttributes?: DkimAttributes | null;
}

// refs: 1 - tags: named, output
export interface DeleteConfigurationSetResponse {
}

// refs: 1 - tags: named, output
export interface DeleteConfigurationSetEventDestinationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDedicatedIpPoolResponse {
}

// refs: 1 - tags: named, output
export interface DeleteEmailIdentityResponse {
}

// refs: 1 - tags: named, output
export interface GetAccountResponse {
  SendQuota?: SendQuota | null;
  SendingEnabled?: boolean | null;
  DedicatedIpAutoWarmupEnabled?: boolean | null;
  EnforcementStatus?: string | null;
  ProductionAccessEnabled?: boolean | null;
}

// refs: 1 - tags: named, output
export interface GetBlacklistReportsResponse {
  BlacklistReport: { [key: string]: BlacklistEntry[] | null | undefined };
}

// refs: 1 - tags: named, output
export interface GetConfigurationSetResponse {
  ConfigurationSetName?: string | null;
  TrackingOptions?: TrackingOptions | null;
  DeliveryOptions?: DeliveryOptions | null;
  ReputationOptions?: ReputationOptions | null;
  SendingOptions?: SendingOptions | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface GetConfigurationSetEventDestinationsResponse {
  EventDestinations?: EventDestination[] | null;
}

// refs: 1 - tags: named, output
export interface GetDedicatedIpResponse {
  DedicatedIp?: DedicatedIp | null;
}

// refs: 1 - tags: named, output
export interface GetDedicatedIpsResponse {
  DedicatedIps?: DedicatedIp[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDeliverabilityDashboardOptionsResponse {
  DashboardEnabled: boolean;
  SubscriptionExpiryDate?: Date | number | null;
  AccountStatus?: DeliverabilityDashboardAccountStatus | null;
  ActiveSubscribedDomains?: DomainDeliverabilityTrackingOption[] | null;
  PendingExpirationSubscribedDomains?: DomainDeliverabilityTrackingOption[] | null;
}

// refs: 1 - tags: named, output
export interface GetDeliverabilityTestReportResponse {
  DeliverabilityTestReport: DeliverabilityTestReport;
  OverallPlacement: PlacementStatistics;
  IspPlacements: IspPlacement[];
  Message?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface GetDomainDeliverabilityCampaignResponse {
  DomainDeliverabilityCampaign: DomainDeliverabilityCampaign;
}

// refs: 1 - tags: named, output
export interface GetDomainStatisticsReportResponse {
  OverallVolume: OverallVolume;
  DailyVolumes: DailyVolume[];
}

// refs: 1 - tags: named, output
export interface GetEmailIdentityResponse {
  IdentityType?: IdentityType | null;
  FeedbackForwardingStatus?: boolean | null;
  VerifiedForSendingStatus?: boolean | null;
  DkimAttributes?: DkimAttributes | null;
  MailFromAttributes?: MailFromAttributes | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListConfigurationSetsResponse {
  ConfigurationSets?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDedicatedIpPoolsResponse {
  DedicatedIpPools?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeliverabilityTestReportsResponse {
  DeliverabilityTestReports: DeliverabilityTestReport[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDomainDeliverabilityCampaignsResponse {
  DomainDeliverabilityCampaigns: DomainDeliverabilityCampaign[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEmailIdentitiesResponse {
  EmailIdentities?: IdentityInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags: Tag[];
}

// refs: 1 - tags: named, output
export interface PutAccountDedicatedIpWarmupAttributesResponse {
}

// refs: 1 - tags: named, output
export interface PutAccountSendingAttributesResponse {
}

// refs: 1 - tags: named, output
export interface PutConfigurationSetDeliveryOptionsResponse {
}

// refs: 1 - tags: named, output
export interface PutConfigurationSetReputationOptionsResponse {
}

// refs: 1 - tags: named, output
export interface PutConfigurationSetSendingOptionsResponse {
}

// refs: 1 - tags: named, output
export interface PutConfigurationSetTrackingOptionsResponse {
}

// refs: 1 - tags: named, output
export interface PutDedicatedIpInPoolResponse {
}

// refs: 1 - tags: named, output
export interface PutDedicatedIpWarmupAttributesResponse {
}

// refs: 1 - tags: named, output
export interface PutDeliverabilityDashboardOptionResponse {
}

// refs: 1 - tags: named, output
export interface PutEmailIdentityDkimAttributesResponse {
}

// refs: 1 - tags: named, output
export interface PutEmailIdentityFeedbackAttributesResponse {
}

// refs: 1 - tags: named, output
export interface PutEmailIdentityMailFromAttributesResponse {
}

// refs: 1 - tags: named, output
export interface SendEmailResponse {
  MessageId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateConfigurationSetEventDestinationResponse {
}

// refs: 2 - tags: input, named, interface, output
export interface TrackingOptions {
  CustomRedirectDomain: string;
}
function fromTrackingOptions(input?: TrackingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CustomRedirectDomain: input["CustomRedirectDomain"],
  }
}
function toTrackingOptions(root: jsonP.JSONValue): TrackingOptions {
  return jsonP.readObj({
    required: {
      "CustomRedirectDomain": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DeliveryOptions {
  TlsPolicy?: TlsPolicy | null;
  SendingPoolName?: string | null;
}
function fromDeliveryOptions(input?: DeliveryOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TlsPolicy: input["TlsPolicy"],
    SendingPoolName: input["SendingPoolName"],
  }
}
function toDeliveryOptions(root: jsonP.JSONValue): DeliveryOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "TlsPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<TlsPolicy>(x),
      "SendingPoolName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type TlsPolicy =
| "REQUIRE"
| "OPTIONAL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ReputationOptions {
  ReputationMetricsEnabled?: boolean | null;
  LastFreshStart?: Date | number | null;
}
function fromReputationOptions(input?: ReputationOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReputationMetricsEnabled: input["ReputationMetricsEnabled"],
    LastFreshStart: jsonP.serializeDate_unixTimestamp(input["LastFreshStart"]),
  }
}
function toReputationOptions(root: jsonP.JSONValue): ReputationOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReputationMetricsEnabled": "b",
      "LastFreshStart": "d",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SendingOptions {
  SendingEnabled?: boolean | null;
}
function fromSendingOptions(input?: SendingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SendingEnabled: input["SendingEnabled"],
  }
}
function toSendingOptions(root: jsonP.JSONValue): SendingOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "SendingEnabled": "b",
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface EventDestinationDefinition {
  Enabled?: boolean | null;
  MatchingEventTypes?: EventType[] | null;
  KinesisFirehoseDestination?: KinesisFirehoseDestination | null;
  CloudWatchDestination?: CloudWatchDestination | null;
  SnsDestination?: SnsDestination | null;
  PinpointDestination?: PinpointDestination | null;
}
function fromEventDestinationDefinition(input?: EventDestinationDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
    MatchingEventTypes: input["MatchingEventTypes"],
    KinesisFirehoseDestination: fromKinesisFirehoseDestination(input["KinesisFirehoseDestination"]),
    CloudWatchDestination: fromCloudWatchDestination(input["CloudWatchDestination"]),
    SnsDestination: fromSnsDestination(input["SnsDestination"]),
    PinpointDestination: fromPinpointDestination(input["PinpointDestination"]),
  }
}

// refs: 3 - tags: input, named, enum, output
export type EventType =
| "SEND"
| "REJECT"
| "BOUNCE"
| "COMPLAINT"
| "DELIVERY"
| "OPEN"
| "CLICK"
| "RENDERING_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface KinesisFirehoseDestination {
  IamRoleArn: string;
  DeliveryStreamArn: string;
}
function fromKinesisFirehoseDestination(input?: KinesisFirehoseDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IamRoleArn: input["IamRoleArn"],
    DeliveryStreamArn: input["DeliveryStreamArn"],
  }
}
function toKinesisFirehoseDestination(root: jsonP.JSONValue): KinesisFirehoseDestination {
  return jsonP.readObj({
    required: {
      "IamRoleArn": "s",
      "DeliveryStreamArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CloudWatchDestination {
  DimensionConfigurations: CloudWatchDimensionConfiguration[];
}
function fromCloudWatchDestination(input?: CloudWatchDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DimensionConfigurations: input["DimensionConfigurations"]?.map(x => fromCloudWatchDimensionConfiguration(x)),
  }
}
function toCloudWatchDestination(root: jsonP.JSONValue): CloudWatchDestination {
  return jsonP.readObj({
    required: {
      "DimensionConfigurations": [toCloudWatchDimensionConfiguration],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CloudWatchDimensionConfiguration {
  DimensionName: string;
  DimensionValueSource: DimensionValueSource;
  DefaultDimensionValue: string;
}
function fromCloudWatchDimensionConfiguration(input?: CloudWatchDimensionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DimensionName: input["DimensionName"],
    DimensionValueSource: input["DimensionValueSource"],
    DefaultDimensionValue: input["DefaultDimensionValue"],
  }
}
function toCloudWatchDimensionConfiguration(root: jsonP.JSONValue): CloudWatchDimensionConfiguration {
  return jsonP.readObj({
    required: {
      "DimensionName": "s",
      "DimensionValueSource": (x: jsonP.JSONValue) => cmnP.readEnum<DimensionValueSource>(x),
      "DefaultDimensionValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DimensionValueSource =
| "MESSAGE_TAG"
| "EMAIL_HEADER"
| "LINK_TAG"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SnsDestination {
  TopicArn: string;
}
function fromSnsDestination(input?: SnsDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TopicArn: input["TopicArn"],
  }
}
function toSnsDestination(root: jsonP.JSONValue): SnsDestination {
  return jsonP.readObj({
    required: {
      "TopicArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface PinpointDestination {
  ApplicationArn?: string | null;
}
function fromPinpointDestination(input?: PinpointDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApplicationArn: input["ApplicationArn"],
  }
}
function toPinpointDestination(root: jsonP.JSONValue): PinpointDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationArn": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface EmailContent {
  Simple?: Message | null;
  Raw?: RawMessage | null;
  Template?: Template | null;
}
function fromEmailContent(input?: EmailContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Simple: fromMessage(input["Simple"]),
    Raw: fromRawMessage(input["Raw"]),
    Template: fromTemplate(input["Template"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface Message {
  Subject: Content;
  Body: Body;
}
function fromMessage(input?: Message | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Subject: fromContent(input["Subject"]),
    Body: fromBody(input["Body"]),
  }
}

// refs: 6 - tags: input, named, interface
export interface Content {
  Data: string;
  Charset?: string | null;
}
function fromContent(input?: Content | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: input["Data"],
    Charset: input["Charset"],
  }
}

// refs: 2 - tags: input, named, interface
export interface Body {
  Text?: Content | null;
  Html?: Content | null;
}
function fromBody(input?: Body | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Text: fromContent(input["Text"]),
    Html: fromContent(input["Html"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface RawMessage {
  Data: Uint8Array | string;
}
function fromRawMessage(input?: RawMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: jsonP.serializeBlob(input["Data"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface Template {
  TemplateArn?: string | null;
  TemplateData?: string | null;
}
function fromTemplate(input?: Template | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TemplateArn: input["TemplateArn"],
    TemplateData: input["TemplateData"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface DomainDeliverabilityTrackingOption {
  Domain?: string | null;
  SubscriptionStartDate?: Date | number | null;
  InboxPlacementTrackingOption?: InboxPlacementTrackingOption | null;
}
function fromDomainDeliverabilityTrackingOption(input?: DomainDeliverabilityTrackingOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Domain: input["Domain"],
    SubscriptionStartDate: jsonP.serializeDate_unixTimestamp(input["SubscriptionStartDate"]),
    InboxPlacementTrackingOption: fromInboxPlacementTrackingOption(input["InboxPlacementTrackingOption"]),
  }
}
function toDomainDeliverabilityTrackingOption(root: jsonP.JSONValue): DomainDeliverabilityTrackingOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "Domain": "s",
      "SubscriptionStartDate": "d",
      "InboxPlacementTrackingOption": toInboxPlacementTrackingOption,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface InboxPlacementTrackingOption {
  Global?: boolean | null;
  TrackedIsps?: string[] | null;
}
function fromInboxPlacementTrackingOption(input?: InboxPlacementTrackingOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Global: input["Global"],
    TrackedIsps: input["TrackedIsps"],
  }
}
function toInboxPlacementTrackingOption(root: jsonP.JSONValue): InboxPlacementTrackingOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "Global": "b",
      "TrackedIsps": ["s"],
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type BehaviorOnMxFailure =
| "USE_DEFAULT_VALUE"
| "REJECT_MESSAGE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface Destination {
  ToAddresses?: string[] | null;
  CcAddresses?: string[] | null;
  BccAddresses?: string[] | null;
}
function fromDestination(input?: Destination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ToAddresses: input["ToAddresses"],
    CcAddresses: input["CcAddresses"],
    BccAddresses: input["BccAddresses"],
  }
}

// refs: 1 - tags: input, named, interface
export interface MessageTag {
  Name: string;
  Value: string;
}
function fromMessageTag(input?: MessageTag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}

// refs: 3 - tags: output, named, enum
export type DeliverabilityTestStatus =
| "IN_PROGRESS"
| "COMPLETED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type IdentityType =
| "EMAIL_ADDRESS"
| "DOMAIN"
| "MANAGED_DOMAIN"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface DkimAttributes {
  SigningEnabled?: boolean | null;
  Status?: DkimStatus | null;
  Tokens?: string[] | null;
}
function toDkimAttributes(root: jsonP.JSONValue): DkimAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "SigningEnabled": "b",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DkimStatus>(x),
      "Tokens": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DkimStatus =
| "PENDING"
| "SUCCESS"
| "FAILED"
| "TEMPORARY_FAILURE"
| "NOT_STARTED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface SendQuota {
  Max24HourSend?: number | null;
  MaxSendRate?: number | null;
  SentLast24Hours?: number | null;
}
function toSendQuota(root: jsonP.JSONValue): SendQuota {
  return jsonP.readObj({
    required: {},
    optional: {
      "Max24HourSend": "n",
      "MaxSendRate": "n",
      "SentLast24Hours": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BlacklistEntry {
  RblName?: string | null;
  ListingTime?: Date | number | null;
  Description?: string | null;
}
function toBlacklistEntry(root: jsonP.JSONValue): BlacklistEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "RblName": "s",
      "ListingTime": "d",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventDestination {
  Name: string;
  Enabled?: boolean | null;
  MatchingEventTypes: EventType[];
  KinesisFirehoseDestination?: KinesisFirehoseDestination | null;
  CloudWatchDestination?: CloudWatchDestination | null;
  SnsDestination?: SnsDestination | null;
  PinpointDestination?: PinpointDestination | null;
}
function toEventDestination(root: jsonP.JSONValue): EventDestination {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "MatchingEventTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<EventType>(x)],
    },
    optional: {
      "Enabled": "b",
      "KinesisFirehoseDestination": toKinesisFirehoseDestination,
      "CloudWatchDestination": toCloudWatchDestination,
      "SnsDestination": toSnsDestination,
      "PinpointDestination": toPinpointDestination,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DedicatedIp {
  Ip: string;
  WarmupStatus: WarmupStatus;
  WarmupPercentage: number;
  PoolName?: string | null;
}
function toDedicatedIp(root: jsonP.JSONValue): DedicatedIp {
  return jsonP.readObj({
    required: {
      "Ip": "s",
      "WarmupStatus": (x: jsonP.JSONValue) => cmnP.readEnum<WarmupStatus>(x),
      "WarmupPercentage": "n",
    },
    optional: {
      "PoolName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type WarmupStatus =
| "IN_PROGRESS"
| "DONE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type DeliverabilityDashboardAccountStatus =
| "ACTIVE"
| "PENDING_EXPIRATION"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface DeliverabilityTestReport {
  ReportId?: string | null;
  ReportName?: string | null;
  Subject?: string | null;
  FromEmailAddress?: string | null;
  CreateDate?: Date | number | null;
  DeliverabilityTestStatus?: DeliverabilityTestStatus | null;
}
function toDeliverabilityTestReport(root: jsonP.JSONValue): DeliverabilityTestReport {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReportId": "s",
      "ReportName": "s",
      "Subject": "s",
      "FromEmailAddress": "s",
      "CreateDate": "d",
      "DeliverabilityTestStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeliverabilityTestStatus>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PlacementStatistics {
  InboxPercentage?: number | null;
  SpamPercentage?: number | null;
  MissingPercentage?: number | null;
  SpfPercentage?: number | null;
  DkimPercentage?: number | null;
}
function toPlacementStatistics(root: jsonP.JSONValue): PlacementStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "InboxPercentage": "n",
      "SpamPercentage": "n",
      "MissingPercentage": "n",
      "SpfPercentage": "n",
      "DkimPercentage": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IspPlacement {
  IspName?: string | null;
  PlacementStatistics?: PlacementStatistics | null;
}
function toIspPlacement(root: jsonP.JSONValue): IspPlacement {
  return jsonP.readObj({
    required: {},
    optional: {
      "IspName": "s",
      "PlacementStatistics": toPlacementStatistics,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DomainDeliverabilityCampaign {
  CampaignId?: string | null;
  ImageUrl?: string | null;
  Subject?: string | null;
  FromAddress?: string | null;
  SendingIps?: string[] | null;
  FirstSeenDateTime?: Date | number | null;
  LastSeenDateTime?: Date | number | null;
  InboxCount?: number | null;
  SpamCount?: number | null;
  ReadRate?: number | null;
  DeleteRate?: number | null;
  ReadDeleteRate?: number | null;
  ProjectedVolume?: number | null;
  Esps?: string[] | null;
}
function toDomainDeliverabilityCampaign(root: jsonP.JSONValue): DomainDeliverabilityCampaign {
  return jsonP.readObj({
    required: {},
    optional: {
      "CampaignId": "s",
      "ImageUrl": "s",
      "Subject": "s",
      "FromAddress": "s",
      "SendingIps": ["s"],
      "FirstSeenDateTime": "d",
      "LastSeenDateTime": "d",
      "InboxCount": "n",
      "SpamCount": "n",
      "ReadRate": "n",
      "DeleteRate": "n",
      "ReadDeleteRate": "n",
      "ProjectedVolume": "n",
      "Esps": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OverallVolume {
  VolumeStatistics?: VolumeStatistics | null;
  ReadRatePercent?: number | null;
  DomainIspPlacements?: DomainIspPlacement[] | null;
}
function toOverallVolume(root: jsonP.JSONValue): OverallVolume {
  return jsonP.readObj({
    required: {},
    optional: {
      "VolumeStatistics": toVolumeStatistics,
      "ReadRatePercent": "n",
      "DomainIspPlacements": [toDomainIspPlacement],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface VolumeStatistics {
  InboxRawCount?: number | null;
  SpamRawCount?: number | null;
  ProjectedInbox?: number | null;
  ProjectedSpam?: number | null;
}
function toVolumeStatistics(root: jsonP.JSONValue): VolumeStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "InboxRawCount": "n",
      "SpamRawCount": "n",
      "ProjectedInbox": "n",
      "ProjectedSpam": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DomainIspPlacement {
  IspName?: string | null;
  InboxRawCount?: number | null;
  SpamRawCount?: number | null;
  InboxPercentage?: number | null;
  SpamPercentage?: number | null;
}
function toDomainIspPlacement(root: jsonP.JSONValue): DomainIspPlacement {
  return jsonP.readObj({
    required: {},
    optional: {
      "IspName": "s",
      "InboxRawCount": "n",
      "SpamRawCount": "n",
      "InboxPercentage": "n",
      "SpamPercentage": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DailyVolume {
  StartDate?: Date | number | null;
  VolumeStatistics?: VolumeStatistics | null;
  DomainIspPlacements?: DomainIspPlacement[] | null;
}
function toDailyVolume(root: jsonP.JSONValue): DailyVolume {
  return jsonP.readObj({
    required: {},
    optional: {
      "StartDate": "d",
      "VolumeStatistics": toVolumeStatistics,
      "DomainIspPlacements": [toDomainIspPlacement],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MailFromAttributes {
  MailFromDomain: string;
  MailFromDomainStatus: MailFromDomainStatus;
  BehaviorOnMxFailure: BehaviorOnMxFailure;
}
function toMailFromAttributes(root: jsonP.JSONValue): MailFromAttributes {
  return jsonP.readObj({
    required: {
      "MailFromDomain": "s",
      "MailFromDomainStatus": (x: jsonP.JSONValue) => cmnP.readEnum<MailFromDomainStatus>(x),
      "BehaviorOnMxFailure": (x: jsonP.JSONValue) => cmnP.readEnum<BehaviorOnMxFailure>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type MailFromDomainStatus =
| "PENDING"
| "SUCCESS"
| "FAILED"
| "TEMPORARY_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface IdentityInfo {
  IdentityType?: IdentityType | null;
  IdentityName?: string | null;
  SendingEnabled?: boolean | null;
}
function toIdentityInfo(root: jsonP.JSONValue): IdentityInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityType": (x: jsonP.JSONValue) => cmnP.readEnum<IdentityType>(x),
      "IdentityName": "s",
      "SendingEnabled": "b",
    },
  }, root);
}
