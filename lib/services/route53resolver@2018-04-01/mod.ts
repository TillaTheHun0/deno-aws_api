// Autogenerated API client for: Amazon Route 53 Resolver

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Route53Resolver {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Route53Resolver.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-04-01",
    "endpointPrefix": "route53resolver",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Route53Resolver",
    "serviceFullName": "Amazon Route 53 Resolver",
    "serviceId": "Route53Resolver",
    "signatureVersion": "v4",
    "targetPrefix": "Route53Resolver",
    "uid": "route53resolver-2018-04-01"
  };

  async associateResolverEndpointIpAddress(
    {abortSignal, ...params}: RequestConfig & AssociateResolverEndpointIpAddressRequest,
  ): Promise<AssociateResolverEndpointIpAddressResponse> {
    const body: jsonP.JSONObject = {
      ResolverEndpointId: params["ResolverEndpointId"],
      IpAddress: fromIpAddressUpdate(params["IpAddress"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateResolverEndpointIpAddress",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverEndpoint": toResolverEndpoint,
      },
    }, await resp.json());
  }

  async associateResolverQueryLogConfig(
    {abortSignal, ...params}: RequestConfig & AssociateResolverQueryLogConfigRequest,
  ): Promise<AssociateResolverQueryLogConfigResponse> {
    const body: jsonP.JSONObject = {
      ResolverQueryLogConfigId: params["ResolverQueryLogConfigId"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateResolverQueryLogConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverQueryLogConfigAssociation": toResolverQueryLogConfigAssociation,
      },
    }, await resp.json());
  }

  async associateResolverRule(
    {abortSignal, ...params}: RequestConfig & AssociateResolverRuleRequest,
  ): Promise<AssociateResolverRuleResponse> {
    const body: jsonP.JSONObject = {
      ResolverRuleId: params["ResolverRuleId"],
      Name: params["Name"],
      VPCId: params["VPCId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateResolverRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRuleAssociation": toResolverRuleAssociation,
      },
    }, await resp.json());
  }

  async createResolverEndpoint(
    {abortSignal, ...params}: RequestConfig & CreateResolverEndpointRequest,
  ): Promise<CreateResolverEndpointResponse> {
    const body: jsonP.JSONObject = {
      CreatorRequestId: params["CreatorRequestId"],
      Name: params["Name"],
      SecurityGroupIds: params["SecurityGroupIds"],
      Direction: params["Direction"],
      IpAddresses: params["IpAddresses"]?.map(x => fromIpAddressRequest(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResolverEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverEndpoint": toResolverEndpoint,
      },
    }, await resp.json());
  }

  async createResolverQueryLogConfig(
    {abortSignal, ...params}: RequestConfig & CreateResolverQueryLogConfigRequest,
  ): Promise<CreateResolverQueryLogConfigResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DestinationArn: params["DestinationArn"],
      CreatorRequestId: params["CreatorRequestId"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResolverQueryLogConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverQueryLogConfig": toResolverQueryLogConfig,
      },
    }, await resp.json());
  }

  async createResolverRule(
    {abortSignal, ...params}: RequestConfig & CreateResolverRuleRequest,
  ): Promise<CreateResolverRuleResponse> {
    const body: jsonP.JSONObject = {
      CreatorRequestId: params["CreatorRequestId"],
      Name: params["Name"],
      RuleType: params["RuleType"],
      DomainName: params["DomainName"],
      TargetIps: params["TargetIps"]?.map(x => fromTargetAddress(x)),
      ResolverEndpointId: params["ResolverEndpointId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResolverRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRule": toResolverRule,
      },
    }, await resp.json());
  }

  async deleteResolverEndpoint(
    {abortSignal, ...params}: RequestConfig & DeleteResolverEndpointRequest,
  ): Promise<DeleteResolverEndpointResponse> {
    const body: jsonP.JSONObject = {
      ResolverEndpointId: params["ResolverEndpointId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResolverEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverEndpoint": toResolverEndpoint,
      },
    }, await resp.json());
  }

  async deleteResolverQueryLogConfig(
    {abortSignal, ...params}: RequestConfig & DeleteResolverQueryLogConfigRequest,
  ): Promise<DeleteResolverQueryLogConfigResponse> {
    const body: jsonP.JSONObject = {
      ResolverQueryLogConfigId: params["ResolverQueryLogConfigId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResolverQueryLogConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverQueryLogConfig": toResolverQueryLogConfig,
      },
    }, await resp.json());
  }

  async deleteResolverRule(
    {abortSignal, ...params}: RequestConfig & DeleteResolverRuleRequest,
  ): Promise<DeleteResolverRuleResponse> {
    const body: jsonP.JSONObject = {
      ResolverRuleId: params["ResolverRuleId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResolverRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRule": toResolverRule,
      },
    }, await resp.json());
  }

  async disassociateResolverEndpointIpAddress(
    {abortSignal, ...params}: RequestConfig & DisassociateResolverEndpointIpAddressRequest,
  ): Promise<DisassociateResolverEndpointIpAddressResponse> {
    const body: jsonP.JSONObject = {
      ResolverEndpointId: params["ResolverEndpointId"],
      IpAddress: fromIpAddressUpdate(params["IpAddress"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateResolverEndpointIpAddress",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverEndpoint": toResolverEndpoint,
      },
    }, await resp.json());
  }

  async disassociateResolverQueryLogConfig(
    {abortSignal, ...params}: RequestConfig & DisassociateResolverQueryLogConfigRequest,
  ): Promise<DisassociateResolverQueryLogConfigResponse> {
    const body: jsonP.JSONObject = {
      ResolverQueryLogConfigId: params["ResolverQueryLogConfigId"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateResolverQueryLogConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverQueryLogConfigAssociation": toResolverQueryLogConfigAssociation,
      },
    }, await resp.json());
  }

  async disassociateResolverRule(
    {abortSignal, ...params}: RequestConfig & DisassociateResolverRuleRequest,
  ): Promise<DisassociateResolverRuleResponse> {
    const body: jsonP.JSONObject = {
      VPCId: params["VPCId"],
      ResolverRuleId: params["ResolverRuleId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateResolverRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRuleAssociation": toResolverRuleAssociation,
      },
    }, await resp.json());
  }

  async getResolverDnssecConfig(
    {abortSignal, ...params}: RequestConfig & GetResolverDnssecConfigRequest,
  ): Promise<GetResolverDnssecConfigResponse> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverDnssecConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverDNSSECConfig": toResolverDnssecConfig,
      },
    }, await resp.json());
  }

  async getResolverEndpoint(
    {abortSignal, ...params}: RequestConfig & GetResolverEndpointRequest,
  ): Promise<GetResolverEndpointResponse> {
    const body: jsonP.JSONObject = {
      ResolverEndpointId: params["ResolverEndpointId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverEndpoint": toResolverEndpoint,
      },
    }, await resp.json());
  }

  async getResolverQueryLogConfig(
    {abortSignal, ...params}: RequestConfig & GetResolverQueryLogConfigRequest,
  ): Promise<GetResolverQueryLogConfigResponse> {
    const body: jsonP.JSONObject = {
      ResolverQueryLogConfigId: params["ResolverQueryLogConfigId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverQueryLogConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverQueryLogConfig": toResolverQueryLogConfig,
      },
    }, await resp.json());
  }

  async getResolverQueryLogConfigAssociation(
    {abortSignal, ...params}: RequestConfig & GetResolverQueryLogConfigAssociationRequest,
  ): Promise<GetResolverQueryLogConfigAssociationResponse> {
    const body: jsonP.JSONObject = {
      ResolverQueryLogConfigAssociationId: params["ResolverQueryLogConfigAssociationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverQueryLogConfigAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverQueryLogConfigAssociation": toResolverQueryLogConfigAssociation,
      },
    }, await resp.json());
  }

  async getResolverQueryLogConfigPolicy(
    {abortSignal, ...params}: RequestConfig & GetResolverQueryLogConfigPolicyRequest,
  ): Promise<GetResolverQueryLogConfigPolicyResponse> {
    const body: jsonP.JSONObject = {
      Arn: params["Arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverQueryLogConfigPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverQueryLogConfigPolicy": "s",
      },
    }, await resp.json());
  }

  async getResolverRule(
    {abortSignal, ...params}: RequestConfig & GetResolverRuleRequest,
  ): Promise<GetResolverRuleResponse> {
    const body: jsonP.JSONObject = {
      ResolverRuleId: params["ResolverRuleId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRule": toResolverRule,
      },
    }, await resp.json());
  }

  async getResolverRuleAssociation(
    {abortSignal, ...params}: RequestConfig & GetResolverRuleAssociationRequest,
  ): Promise<GetResolverRuleAssociationResponse> {
    const body: jsonP.JSONObject = {
      ResolverRuleAssociationId: params["ResolverRuleAssociationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverRuleAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRuleAssociation": toResolverRuleAssociation,
      },
    }, await resp.json());
  }

  async getResolverRulePolicy(
    {abortSignal, ...params}: RequestConfig & GetResolverRulePolicyRequest,
  ): Promise<GetResolverRulePolicyResponse> {
    const body: jsonP.JSONObject = {
      Arn: params["Arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResolverRulePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRulePolicy": "s",
      },
    }, await resp.json());
  }

  async listResolverDnssecConfigs(
    {abortSignal, ...params}: RequestConfig & ListResolverDnssecConfigsRequest = {},
  ): Promise<ListResolverDnssecConfigsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResolverDnssecConfigs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "ResolverDnssecConfigs": [toResolverDnssecConfig],
      },
    }, await resp.json());
  }

  async listResolverEndpointIpAddresses(
    {abortSignal, ...params}: RequestConfig & ListResolverEndpointIpAddressesRequest,
  ): Promise<ListResolverEndpointIpAddressesResponse> {
    const body: jsonP.JSONObject = {
      ResolverEndpointId: params["ResolverEndpointId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResolverEndpointIpAddresses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MaxResults": "n",
        "IpAddresses": [toIpAddressResponse],
      },
    }, await resp.json());
  }

  async listResolverEndpoints(
    {abortSignal, ...params}: RequestConfig & ListResolverEndpointsRequest = {},
  ): Promise<ListResolverEndpointsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResolverEndpoints",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MaxResults": "n",
        "ResolverEndpoints": [toResolverEndpoint],
      },
    }, await resp.json());
  }

  async listResolverQueryLogConfigAssociations(
    {abortSignal, ...params}: RequestConfig & ListResolverQueryLogConfigAssociationsRequest = {},
  ): Promise<ListResolverQueryLogConfigAssociationsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResolverQueryLogConfigAssociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "TotalCount": "n",
        "TotalFilteredCount": "n",
        "ResolverQueryLogConfigAssociations": [toResolverQueryLogConfigAssociation],
      },
    }, await resp.json());
  }

  async listResolverQueryLogConfigs(
    {abortSignal, ...params}: RequestConfig & ListResolverQueryLogConfigsRequest = {},
  ): Promise<ListResolverQueryLogConfigsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResolverQueryLogConfigs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "TotalCount": "n",
        "TotalFilteredCount": "n",
        "ResolverQueryLogConfigs": [toResolverQueryLogConfig],
      },
    }, await resp.json());
  }

  async listResolverRuleAssociations(
    {abortSignal, ...params}: RequestConfig & ListResolverRuleAssociationsRequest = {},
  ): Promise<ListResolverRuleAssociationsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResolverRuleAssociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MaxResults": "n",
        "ResolverRuleAssociations": [toResolverRuleAssociation],
      },
    }, await resp.json());
  }

  async listResolverRules(
    {abortSignal, ...params}: RequestConfig & ListResolverRulesRequest = {},
  ): Promise<ListResolverRulesResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResolverRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MaxResults": "n",
        "ResolverRules": [toResolverRule],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putResolverQueryLogConfigPolicy(
    {abortSignal, ...params}: RequestConfig & PutResolverQueryLogConfigPolicyRequest,
  ): Promise<PutResolverQueryLogConfigPolicyResponse> {
    const body: jsonP.JSONObject = {
      Arn: params["Arn"],
      ResolverQueryLogConfigPolicy: params["ResolverQueryLogConfigPolicy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResolverQueryLogConfigPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ReturnValue": "b",
      },
    }, await resp.json());
  }

  async putResolverRulePolicy(
    {abortSignal, ...params}: RequestConfig & PutResolverRulePolicyRequest,
  ): Promise<PutResolverRulePolicyResponse> {
    const body: jsonP.JSONObject = {
      Arn: params["Arn"],
      ResolverRulePolicy: params["ResolverRulePolicy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResolverRulePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ReturnValue": "b",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateResolverDnssecConfig(
    {abortSignal, ...params}: RequestConfig & UpdateResolverDnssecConfigRequest,
  ): Promise<UpdateResolverDnssecConfigResponse> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      Validation: params["Validation"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResolverDnssecConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverDNSSECConfig": toResolverDnssecConfig,
      },
    }, await resp.json());
  }

  async updateResolverEndpoint(
    {abortSignal, ...params}: RequestConfig & UpdateResolverEndpointRequest,
  ): Promise<UpdateResolverEndpointResponse> {
    const body: jsonP.JSONObject = {
      ResolverEndpointId: params["ResolverEndpointId"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResolverEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverEndpoint": toResolverEndpoint,
      },
    }, await resp.json());
  }

  async updateResolverRule(
    {abortSignal, ...params}: RequestConfig & UpdateResolverRuleRequest,
  ): Promise<UpdateResolverRuleResponse> {
    const body: jsonP.JSONObject = {
      ResolverRuleId: params["ResolverRuleId"],
      Config: fromResolverRuleConfig(params["Config"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResolverRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResolverRule": toResolverRule,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateResolverEndpointIpAddressRequest {
  ResolverEndpointId: string;
  IpAddress: IpAddressUpdate;
}

// refs: 1 - tags: named, input
export interface AssociateResolverQueryLogConfigRequest {
  ResolverQueryLogConfigId: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface AssociateResolverRuleRequest {
  ResolverRuleId: string;
  Name?: string | null;
  VPCId: string;
}

// refs: 1 - tags: named, input
export interface CreateResolverEndpointRequest {
  CreatorRequestId: string;
  Name?: string | null;
  SecurityGroupIds: string[];
  Direction: ResolverEndpointDirection;
  IpAddresses: IpAddressRequest[];
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateResolverQueryLogConfigRequest {
  Name: string;
  DestinationArn: string;
  CreatorRequestId: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateResolverRuleRequest {
  CreatorRequestId: string;
  Name?: string | null;
  RuleType: RuleTypeOption;
  DomainName: string;
  TargetIps?: TargetAddress[] | null;
  ResolverEndpointId?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteResolverEndpointRequest {
  ResolverEndpointId: string;
}

// refs: 1 - tags: named, input
export interface DeleteResolverQueryLogConfigRequest {
  ResolverQueryLogConfigId: string;
}

// refs: 1 - tags: named, input
export interface DeleteResolverRuleRequest {
  ResolverRuleId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateResolverEndpointIpAddressRequest {
  ResolverEndpointId: string;
  IpAddress: IpAddressUpdate;
}

// refs: 1 - tags: named, input
export interface DisassociateResolverQueryLogConfigRequest {
  ResolverQueryLogConfigId: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateResolverRuleRequest {
  VPCId: string;
  ResolverRuleId: string;
}

// refs: 1 - tags: named, input
export interface GetResolverDnssecConfigRequest {
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface GetResolverEndpointRequest {
  ResolverEndpointId: string;
}

// refs: 1 - tags: named, input
export interface GetResolverQueryLogConfigRequest {
  ResolverQueryLogConfigId: string;
}

// refs: 1 - tags: named, input
export interface GetResolverQueryLogConfigAssociationRequest {
  ResolverQueryLogConfigAssociationId: string;
}

// refs: 1 - tags: named, input
export interface GetResolverQueryLogConfigPolicyRequest {
  Arn: string;
}

// refs: 1 - tags: named, input
export interface GetResolverRuleRequest {
  ResolverRuleId: string;
}

// refs: 1 - tags: named, input
export interface GetResolverRuleAssociationRequest {
  ResolverRuleAssociationId: string;
}

// refs: 1 - tags: named, input
export interface GetResolverRulePolicyRequest {
  Arn: string;
}

// refs: 1 - tags: named, input
export interface ListResolverDnssecConfigsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListResolverEndpointIpAddressesRequest {
  ResolverEndpointId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListResolverEndpointsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListResolverQueryLogConfigAssociationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
  SortBy?: string | null;
  SortOrder?: SortOrder | null;
}

// refs: 1 - tags: named, input
export interface ListResolverQueryLogConfigsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
  SortBy?: string | null;
  SortOrder?: SortOrder | null;
}

// refs: 1 - tags: named, input
export interface ListResolverRuleAssociationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListResolverRulesRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PutResolverQueryLogConfigPolicyRequest {
  Arn: string;
  ResolverQueryLogConfigPolicy: string;
}

// refs: 1 - tags: named, input
export interface PutResolverRulePolicyRequest {
  Arn: string;
  ResolverRulePolicy: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateResolverDnssecConfigRequest {
  ResourceId: string;
  Validation: Validation;
}

// refs: 1 - tags: named, input
export interface UpdateResolverEndpointRequest {
  ResolverEndpointId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateResolverRuleRequest {
  ResolverRuleId: string;
  Config: ResolverRuleConfig;
}

// refs: 1 - tags: named, output
export interface AssociateResolverEndpointIpAddressResponse {
  ResolverEndpoint?: ResolverEndpoint | null;
}

// refs: 1 - tags: named, output
export interface AssociateResolverQueryLogConfigResponse {
  ResolverQueryLogConfigAssociation?: ResolverQueryLogConfigAssociation | null;
}

// refs: 1 - tags: named, output
export interface AssociateResolverRuleResponse {
  ResolverRuleAssociation?: ResolverRuleAssociation | null;
}

// refs: 1 - tags: named, output
export interface CreateResolverEndpointResponse {
  ResolverEndpoint?: ResolverEndpoint | null;
}

// refs: 1 - tags: named, output
export interface CreateResolverQueryLogConfigResponse {
  ResolverQueryLogConfig?: ResolverQueryLogConfig | null;
}

// refs: 1 - tags: named, output
export interface CreateResolverRuleResponse {
  ResolverRule?: ResolverRule | null;
}

// refs: 1 - tags: named, output
export interface DeleteResolverEndpointResponse {
  ResolverEndpoint?: ResolverEndpoint | null;
}

// refs: 1 - tags: named, output
export interface DeleteResolverQueryLogConfigResponse {
  ResolverQueryLogConfig?: ResolverQueryLogConfig | null;
}

// refs: 1 - tags: named, output
export interface DeleteResolverRuleResponse {
  ResolverRule?: ResolverRule | null;
}

// refs: 1 - tags: named, output
export interface DisassociateResolverEndpointIpAddressResponse {
  ResolverEndpoint?: ResolverEndpoint | null;
}

// refs: 1 - tags: named, output
export interface DisassociateResolverQueryLogConfigResponse {
  ResolverQueryLogConfigAssociation?: ResolverQueryLogConfigAssociation | null;
}

// refs: 1 - tags: named, output
export interface DisassociateResolverRuleResponse {
  ResolverRuleAssociation?: ResolverRuleAssociation | null;
}

// refs: 1 - tags: named, output
export interface GetResolverDnssecConfigResponse {
  ResolverDNSSECConfig?: ResolverDnssecConfig | null;
}

// refs: 1 - tags: named, output
export interface GetResolverEndpointResponse {
  ResolverEndpoint?: ResolverEndpoint | null;
}

// refs: 1 - tags: named, output
export interface GetResolverQueryLogConfigResponse {
  ResolverQueryLogConfig?: ResolverQueryLogConfig | null;
}

// refs: 1 - tags: named, output
export interface GetResolverQueryLogConfigAssociationResponse {
  ResolverQueryLogConfigAssociation?: ResolverQueryLogConfigAssociation | null;
}

// refs: 1 - tags: named, output
export interface GetResolverQueryLogConfigPolicyResponse {
  ResolverQueryLogConfigPolicy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResolverRuleResponse {
  ResolverRule?: ResolverRule | null;
}

// refs: 1 - tags: named, output
export interface GetResolverRuleAssociationResponse {
  ResolverRuleAssociation?: ResolverRuleAssociation | null;
}

// refs: 1 - tags: named, output
export interface GetResolverRulePolicyResponse {
  ResolverRulePolicy?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResolverDnssecConfigsResponse {
  NextToken?: string | null;
  ResolverDnssecConfigs?: ResolverDnssecConfig[] | null;
}

// refs: 1 - tags: named, output
export interface ListResolverEndpointIpAddressesResponse {
  NextToken?: string | null;
  MaxResults?: number | null;
  IpAddresses?: IpAddressResponse[] | null;
}

// refs: 1 - tags: named, output
export interface ListResolverEndpointsResponse {
  NextToken?: string | null;
  MaxResults?: number | null;
  ResolverEndpoints?: ResolverEndpoint[] | null;
}

// refs: 1 - tags: named, output
export interface ListResolverQueryLogConfigAssociationsResponse {
  NextToken?: string | null;
  TotalCount?: number | null;
  TotalFilteredCount?: number | null;
  ResolverQueryLogConfigAssociations?: ResolverQueryLogConfigAssociation[] | null;
}

// refs: 1 - tags: named, output
export interface ListResolverQueryLogConfigsResponse {
  NextToken?: string | null;
  TotalCount?: number | null;
  TotalFilteredCount?: number | null;
  ResolverQueryLogConfigs?: ResolverQueryLogConfig[] | null;
}

// refs: 1 - tags: named, output
export interface ListResolverRuleAssociationsResponse {
  NextToken?: string | null;
  MaxResults?: number | null;
  ResolverRuleAssociations?: ResolverRuleAssociation[] | null;
}

// refs: 1 - tags: named, output
export interface ListResolverRulesResponse {
  NextToken?: string | null;
  MaxResults?: number | null;
  ResolverRules?: ResolverRule[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutResolverQueryLogConfigPolicyResponse {
  ReturnValue?: boolean | null;
}

// refs: 1 - tags: named, output
export interface PutResolverRulePolicyResponse {
  ReturnValue?: boolean | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateResolverDnssecConfigResponse {
  ResolverDNSSECConfig?: ResolverDnssecConfig | null;
}

// refs: 1 - tags: named, output
export interface UpdateResolverEndpointResponse {
  ResolverEndpoint?: ResolverEndpoint | null;
}

// refs: 1 - tags: named, output
export interface UpdateResolverRuleResponse {
  ResolverRule?: ResolverRule | null;
}

// refs: 2 - tags: input, named, interface
export interface IpAddressUpdate {
  IpId?: string | null;
  SubnetId?: string | null;
  Ip?: string | null;
}
function fromIpAddressUpdate(input?: IpAddressUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IpId: input["IpId"],
    SubnetId: input["SubnetId"],
    Ip: input["Ip"],
  }
}

// refs: 8 - tags: input, named, enum, output
export type ResolverEndpointDirection =
| "INBOUND"
| "OUTBOUND"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface IpAddressRequest {
  SubnetId: string;
  Ip?: string | null;
}
function fromIpAddressRequest(input?: IpAddressRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetId: input["SubnetId"],
    Ip: input["Ip"],
  }
}

// refs: 5 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type RuleTypeOption =
| "FORWARD"
| "SYSTEM"
| "RECURSIVE"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface TargetAddress {
  Ip: string;
  Port?: number | null;
}
function fromTargetAddress(input?: TargetAddress | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Ip: input["Ip"],
    Port: input["Port"],
  }
}
function toTargetAddress(root: jsonP.JSONValue): TargetAddress {
  return jsonP.readObj({
    required: {
      "Ip": "s",
    },
    optional: {
      "Port": "n",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface
export interface Filter {
  Name?: string | null;
  Values?: string[] | null;
}
function fromFilter(input?: Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 2 - tags: input, named, enum
export type SortOrder =
| "ASCENDING"
| "DESCENDING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type Validation =
| "ENABLE"
| "DISABLE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ResolverRuleConfig {
  Name?: string | null;
  TargetIps?: TargetAddress[] | null;
  ResolverEndpointId?: string | null;
}
function fromResolverRuleConfig(input?: ResolverRuleConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    TargetIps: input["TargetIps"]?.map(x => fromTargetAddress(x)),
    ResolverEndpointId: input["ResolverEndpointId"],
  }
}

// refs: 7 - tags: output, named, interface
export interface ResolverEndpoint {
  Id?: string | null;
  CreatorRequestId?: string | null;
  Arn?: string | null;
  Name?: string | null;
  SecurityGroupIds?: string[] | null;
  Direction?: ResolverEndpointDirection | null;
  IpAddressCount?: number | null;
  HostVPCId?: string | null;
  Status?: ResolverEndpointStatus | null;
  StatusMessage?: string | null;
  CreationTime?: string | null;
  ModificationTime?: string | null;
}
function toResolverEndpoint(root: jsonP.JSONValue): ResolverEndpoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "CreatorRequestId": "s",
      "Arn": "s",
      "Name": "s",
      "SecurityGroupIds": ["s"],
      "Direction": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverEndpointDirection>(x),
      "IpAddressCount": "n",
      "HostVPCId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverEndpointStatus>(x),
      "StatusMessage": "s",
      "CreationTime": "s",
      "ModificationTime": "s",
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type ResolverEndpointStatus =
| "CREATING"
| "OPERATIONAL"
| "UPDATING"
| "AUTO_RECOVERING"
| "ACTION_NEEDED"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ResolverQueryLogConfigAssociation {
  Id?: string | null;
  ResolverQueryLogConfigId?: string | null;
  ResourceId?: string | null;
  Status?: ResolverQueryLogConfigAssociationStatus | null;
  Error?: ResolverQueryLogConfigAssociationError | null;
  ErrorMessage?: string | null;
  CreationTime?: string | null;
}
function toResolverQueryLogConfigAssociation(root: jsonP.JSONValue): ResolverQueryLogConfigAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ResolverQueryLogConfigId": "s",
      "ResourceId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverQueryLogConfigAssociationStatus>(x),
      "Error": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverQueryLogConfigAssociationError>(x),
      "ErrorMessage": "s",
      "CreationTime": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type ResolverQueryLogConfigAssociationStatus =
| "CREATING"
| "ACTIVE"
| "ACTION_NEEDED"
| "DELETING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, enum
export type ResolverQueryLogConfigAssociationError =
| "NONE"
| "DESTINATION_NOT_FOUND"
| "ACCESS_DENIED"
| "INTERNAL_SERVICE_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ResolverRuleAssociation {
  Id?: string | null;
  ResolverRuleId?: string | null;
  Name?: string | null;
  VPCId?: string | null;
  Status?: ResolverRuleAssociationStatus | null;
  StatusMessage?: string | null;
}
function toResolverRuleAssociation(root: jsonP.JSONValue): ResolverRuleAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ResolverRuleId": "s",
      "Name": "s",
      "VPCId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverRuleAssociationStatus>(x),
      "StatusMessage": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type ResolverRuleAssociationStatus =
| "CREATING"
| "COMPLETE"
| "DELETING"
| "FAILED"
| "OVERRIDDEN"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ResolverQueryLogConfig {
  Id?: string | null;
  OwnerId?: string | null;
  Status?: ResolverQueryLogConfigStatus | null;
  ShareStatus?: ShareStatus | null;
  AssociationCount?: number | null;
  Arn?: string | null;
  Name?: string | null;
  DestinationArn?: string | null;
  CreatorRequestId?: string | null;
  CreationTime?: string | null;
}
function toResolverQueryLogConfig(root: jsonP.JSONValue): ResolverQueryLogConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "OwnerId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverQueryLogConfigStatus>(x),
      "ShareStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ShareStatus>(x),
      "AssociationCount": "n",
      "Arn": "s",
      "Name": "s",
      "DestinationArn": "s",
      "CreatorRequestId": "s",
      "CreationTime": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type ResolverQueryLogConfigStatus =
| "CREATING"
| "CREATED"
| "DELETING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: output, named, enum
export type ShareStatus =
| "NOT_SHARED"
| "SHARED_WITH_ME"
| "SHARED_BY_ME"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface ResolverRule {
  Id?: string | null;
  CreatorRequestId?: string | null;
  Arn?: string | null;
  DomainName?: string | null;
  Status?: ResolverRuleStatus | null;
  StatusMessage?: string | null;
  RuleType?: RuleTypeOption | null;
  Name?: string | null;
  TargetIps?: TargetAddress[] | null;
  ResolverEndpointId?: string | null;
  OwnerId?: string | null;
  ShareStatus?: ShareStatus | null;
  CreationTime?: string | null;
  ModificationTime?: string | null;
}
function toResolverRule(root: jsonP.JSONValue): ResolverRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "CreatorRequestId": "s",
      "Arn": "s",
      "DomainName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverRuleStatus>(x),
      "StatusMessage": "s",
      "RuleType": (x: jsonP.JSONValue) => cmnP.readEnum<RuleTypeOption>(x),
      "Name": "s",
      "TargetIps": [toTargetAddress],
      "ResolverEndpointId": "s",
      "OwnerId": "s",
      "ShareStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ShareStatus>(x),
      "CreationTime": "s",
      "ModificationTime": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type ResolverRuleStatus =
| "COMPLETE"
| "DELETING"
| "UPDATING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface ResolverDnssecConfig {
  Id?: string | null;
  OwnerId?: string | null;
  ResourceId?: string | null;
  ValidationStatus?: ResolverDNSSECValidationStatus | null;
}
function toResolverDnssecConfig(root: jsonP.JSONValue): ResolverDnssecConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "OwnerId": "s",
      "ResourceId": "s",
      "ValidationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResolverDNSSECValidationStatus>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ResolverDNSSECValidationStatus =
| "ENABLING"
| "ENABLED"
| "DISABLING"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface IpAddressResponse {
  IpId?: string | null;
  SubnetId?: string | null;
  Ip?: string | null;
  Status?: IpAddressStatus | null;
  StatusMessage?: string | null;
  CreationTime?: string | null;
  ModificationTime?: string | null;
}
function toIpAddressResponse(root: jsonP.JSONValue): IpAddressResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "IpId": "s",
      "SubnetId": "s",
      "Ip": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<IpAddressStatus>(x),
      "StatusMessage": "s",
      "CreationTime": "s",
      "ModificationTime": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type IpAddressStatus =
| "CREATING"
| "FAILED_CREATION"
| "ATTACHING"
| "ATTACHED"
| "REMAP_DETACHING"
| "REMAP_ATTACHING"
| "DETACHING"
| "FAILED_RESOURCE_GONE"
| "DELETING"
| "DELETE_FAILED_FAS_EXPIRED"
| cmnP.UnexpectedEnumValue;
