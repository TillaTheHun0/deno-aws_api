// Autogenerated API client for: AmazonMQ

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class MQ {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MQ.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-11-27",
    "endpointPrefix": "mq",
    "signingName": "mq",
    "serviceFullName": "AmazonMQ",
    "serviceId": "mq",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "mq-2017-11-27",
    "signatureVersion": "v4"
  };

  async createBroker(
    {abortSignal, ...params}: RequestConfig & CreateBrokerRequest = {},
  ): Promise<CreateBrokerResponse> {
    const body: jsonP.JSONObject = {
      authenticationStrategy: params["AuthenticationStrategy"],
      autoMinorVersionUpgrade: params["AutoMinorVersionUpgrade"],
      brokerName: params["BrokerName"],
      configuration: fromConfigurationId(params["Configuration"]),
      creatorRequestId: params["CreatorRequestId"] ?? generateIdemptToken(),
      deploymentMode: params["DeploymentMode"],
      encryptionOptions: fromEncryptionOptions(params["EncryptionOptions"]),
      engineType: params["EngineType"],
      engineVersion: params["EngineVersion"],
      hostInstanceType: params["HostInstanceType"],
      ldapServerMetadata: fromLdapServerMetadataInput(params["LdapServerMetadata"]),
      logs: fromLogs(params["Logs"]),
      maintenanceWindowStartTime: fromWeeklyStartTime(params["MaintenanceWindowStartTime"]),
      publiclyAccessible: params["PubliclyAccessible"],
      securityGroups: params["SecurityGroups"],
      storageType: params["StorageType"],
      subnetIds: params["SubnetIds"],
      tags: params["Tags"],
      users: params["Users"]?.map(x => fromUser(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBroker",
      requestUri: "/v1/brokers",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BrokerArn": "s",
        "BrokerId": "s",
      },
    }, await resp.json());
  }

  async createConfiguration(
    {abortSignal, ...params}: RequestConfig & CreateConfigurationRequest = {},
  ): Promise<CreateConfigurationResponse> {
    const body: jsonP.JSONObject = {
      authenticationStrategy: params["AuthenticationStrategy"],
      engineType: params["EngineType"],
      engineVersion: params["EngineVersion"],
      name: params["Name"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfiguration",
      requestUri: "/v1/configurations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "AuthenticationStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationStrategy>(x),
        "Created": "d",
        "Id": "s",
        "LatestRevision": toConfigurationRevision,
        "Name": "s",
      },
    }, await resp.json());
  }

  async createTags(
    {abortSignal, ...params}: RequestConfig & CreateTagsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTags",
      requestUri: cmnP.encodePath`/v1/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & CreateUserRequest,
  ): Promise<CreateUserResponse> {
    const body: jsonP.JSONObject = {
      consoleAccess: params["ConsoleAccess"],
      groups: params["Groups"],
      password: params["Password"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}/users/${params["Username"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteBroker(
    {abortSignal, ...params}: RequestConfig & DeleteBrokerRequest,
  ): Promise<DeleteBrokerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBroker",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BrokerId": "s",
      },
    }, await resp.json());
  }

  async deleteTags(
    {abortSignal, ...params}: RequestConfig & DeleteTagsRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteTags",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<DeleteUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUser",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}/users/${params["Username"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeBroker(
    {abortSignal, ...params}: RequestConfig & DescribeBrokerRequest,
  ): Promise<DescribeBrokerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBroker",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuthenticationStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationStrategy>(x),
        "AutoMinorVersionUpgrade": "b",
        "BrokerArn": "s",
        "BrokerId": "s",
        "BrokerInstances": [toBrokerInstance],
        "BrokerName": "s",
        "BrokerState": (x: jsonP.JSONValue) => cmnP.readEnum<BrokerState>(x),
        "Configurations": toConfigurations,
        "Created": "d",
        "DeploymentMode": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentMode>(x),
        "EncryptionOptions": toEncryptionOptions,
        "EngineType": (x: jsonP.JSONValue) => cmnP.readEnum<EngineType>(x),
        "EngineVersion": "s",
        "HostInstanceType": "s",
        "LdapServerMetadata": toLdapServerMetadataOutput,
        "Logs": toLogsSummary,
        "MaintenanceWindowStartTime": toWeeklyStartTime,
        "PendingAuthenticationStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationStrategy>(x),
        "PendingEngineVersion": "s",
        "PendingHostInstanceType": "s",
        "PendingLdapServerMetadata": toLdapServerMetadataOutput,
        "PendingSecurityGroups": ["s"],
        "PubliclyAccessible": "b",
        "SecurityGroups": ["s"],
        "StorageType": (x: jsonP.JSONValue) => cmnP.readEnum<BrokerStorageType>(x),
        "SubnetIds": ["s"],
        "Tags": x => jsonP.readMap(String, String, x),
        "Users": [toUserSummary],
      },
    }, await resp.json());
  }

  async describeBrokerEngineTypes(
    {abortSignal, ...params}: RequestConfig & DescribeBrokerEngineTypesRequest = {},
  ): Promise<DescribeBrokerEngineTypesResponse> {
    const query = new URLSearchParams;
    if (params["EngineType"] != null) query.set("engineType", params["EngineType"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeBrokerEngineTypes",
      method: "GET",
      requestUri: "/v1/broker-engine-types",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BrokerEngineTypes": [toBrokerEngineType],
        "MaxResults": "n",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBrokerInstanceOptions(
    {abortSignal, ...params}: RequestConfig & DescribeBrokerInstanceOptionsRequest = {},
  ): Promise<DescribeBrokerInstanceOptionsResponse> {
    const query = new URLSearchParams;
    if (params["EngineType"] != null) query.set("engineType", params["EngineType"]?.toString() ?? "");
    if (params["HostInstanceType"] != null) query.set("hostInstanceType", params["HostInstanceType"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["StorageType"] != null) query.set("storageType", params["StorageType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeBrokerInstanceOptions",
      method: "GET",
      requestUri: "/v1/broker-instance-options",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BrokerInstanceOptions": [toBrokerInstanceOption],
        "MaxResults": "n",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationRequest,
  ): Promise<DescribeConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/configurations/${params["ConfigurationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "AuthenticationStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationStrategy>(x),
        "Created": "d",
        "Description": "s",
        "EngineType": (x: jsonP.JSONValue) => cmnP.readEnum<EngineType>(x),
        "EngineVersion": "s",
        "Id": "s",
        "LatestRevision": toConfigurationRevision,
        "Name": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeConfigurationRevision(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationRevisionRequest,
  ): Promise<DescribeConfigurationRevisionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeConfigurationRevision",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/configurations/${params["ConfigurationId"]}/revisions/${params["ConfigurationRevision"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationId": "s",
        "Created": "d",
        "Data": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & DescribeUserRequest,
  ): Promise<DescribeUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUser",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}/users/${params["Username"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BrokerId": "s",
        "ConsoleAccess": "b",
        "Groups": ["s"],
        "Pending": toUserPendingChanges,
        "Username": "s",
      },
    }, await resp.json());
  }

  async listBrokers(
    {abortSignal, ...params}: RequestConfig & ListBrokersRequest = {},
  ): Promise<ListBrokersResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBrokers",
      method: "GET",
      requestUri: "/v1/brokers",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BrokerSummaries": [toBrokerSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConfigurationRevisions(
    {abortSignal, ...params}: RequestConfig & ListConfigurationRevisionsRequest,
  ): Promise<ListConfigurationRevisionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigurationRevisions",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/configurations/${params["ConfigurationId"]}/revisions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationId": "s",
        "MaxResults": "n",
        "NextToken": "s",
        "Revisions": [toConfigurationRevision],
      },
    }, await resp.json());
  }

  async listConfigurations(
    {abortSignal, ...params}: RequestConfig & ListConfigurationsRequest = {},
  ): Promise<ListConfigurationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigurations",
      method: "GET",
      requestUri: "/v1/configurations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Configurations": [toConfiguration],
        "MaxResults": "n",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & ListTagsRequest,
  ): Promise<ListTagsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTags",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & ListUsersRequest,
  ): Promise<ListUsersResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUsers",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}/users`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BrokerId": "s",
        "MaxResults": "n",
        "NextToken": "s",
        "Users": [toUserSummary],
      },
    }, await resp.json());
  }

  async rebootBroker(
    {abortSignal, ...params}: RequestConfig & RebootBrokerRequest,
  ): Promise<RebootBrokerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RebootBroker",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}/reboot`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateBroker(
    {abortSignal, ...params}: RequestConfig & UpdateBrokerRequest,
  ): Promise<UpdateBrokerResponse> {
    const body: jsonP.JSONObject = {
      authenticationStrategy: params["AuthenticationStrategy"],
      autoMinorVersionUpgrade: params["AutoMinorVersionUpgrade"],
      configuration: fromConfigurationId(params["Configuration"]),
      engineVersion: params["EngineVersion"],
      hostInstanceType: params["HostInstanceType"],
      ldapServerMetadata: fromLdapServerMetadataInput(params["LdapServerMetadata"]),
      logs: fromLogs(params["Logs"]),
      securityGroups: params["SecurityGroups"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBroker",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuthenticationStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationStrategy>(x),
        "AutoMinorVersionUpgrade": "b",
        "BrokerId": "s",
        "Configuration": toConfigurationId,
        "EngineVersion": "s",
        "HostInstanceType": "s",
        "LdapServerMetadata": toLdapServerMetadataOutput,
        "Logs": toLogs,
        "SecurityGroups": ["s"],
      },
    }, await resp.json());
  }

  async updateConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateConfigurationRequest,
  ): Promise<UpdateConfigurationResponse> {
    const body: jsonP.JSONObject = {
      data: params["Data"],
      description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/configurations/${params["ConfigurationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Created": "d",
        "Id": "s",
        "LatestRevision": toConfigurationRevision,
        "Name": "s",
        "Warnings": [toSanitizationWarning],
      },
    }, await resp.json());
  }

  async updateUser(
    {abortSignal, ...params}: RequestConfig & UpdateUserRequest,
  ): Promise<UpdateUserResponse> {
    const body: jsonP.JSONObject = {
      consoleAccess: params["ConsoleAccess"],
      groups: params["Groups"],
      password: params["Password"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUser",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/brokers/${params["BrokerId"]}/users/${params["Username"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateBrokerRequest {
  AuthenticationStrategy?: AuthenticationStrategy | null;
  AutoMinorVersionUpgrade?: boolean | null;
  BrokerName?: string | null;
  Configuration?: ConfigurationId | null;
  CreatorRequestId?: string | null;
  DeploymentMode?: DeploymentMode | null;
  EncryptionOptions?: EncryptionOptions | null;
  EngineType?: EngineType | null;
  EngineVersion?: string | null;
  HostInstanceType?: string | null;
  LdapServerMetadata?: LdapServerMetadataInput | null;
  Logs?: Logs | null;
  MaintenanceWindowStartTime?: WeeklyStartTime | null;
  PubliclyAccessible?: boolean | null;
  SecurityGroups?: string[] | null;
  StorageType?: BrokerStorageType | null;
  SubnetIds?: string[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Users?: User[] | null;
}

// refs: 1 - tags: named, input
export interface CreateConfigurationRequest {
  AuthenticationStrategy?: AuthenticationStrategy | null;
  EngineType?: EngineType | null;
  EngineVersion?: string | null;
  Name?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateTagsRequest {
  ResourceArn: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateUserRequest {
  BrokerId: string;
  ConsoleAccess?: boolean | null;
  Groups?: string[] | null;
  Password?: string | null;
  Username: string;
}

// refs: 1 - tags: named, input
export interface DeleteBrokerRequest {
  BrokerId: string;
}

// refs: 1 - tags: named, input
export interface DeleteTagsRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  BrokerId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface DescribeBrokerRequest {
  BrokerId: string;
}

// refs: 1 - tags: named, input
export interface DescribeBrokerEngineTypesRequest {
  EngineType?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBrokerInstanceOptionsRequest {
  EngineType?: string | null;
  HostInstanceType?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  StorageType?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationRequest {
  ConfigurationId: string;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationRevisionRequest {
  ConfigurationId: string;
  ConfigurationRevision: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserRequest {
  BrokerId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface ListBrokersRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConfigurationRevisionsRequest {
  ConfigurationId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConfigurationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListUsersRequest {
  BrokerId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface RebootBrokerRequest {
  BrokerId: string;
}

// refs: 1 - tags: named, input
export interface UpdateBrokerRequest {
  AuthenticationStrategy?: AuthenticationStrategy | null;
  AutoMinorVersionUpgrade?: boolean | null;
  BrokerId: string;
  Configuration?: ConfigurationId | null;
  EngineVersion?: string | null;
  HostInstanceType?: string | null;
  LdapServerMetadata?: LdapServerMetadataInput | null;
  Logs?: Logs | null;
  SecurityGroups?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateConfigurationRequest {
  ConfigurationId: string;
  Data?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserRequest {
  BrokerId: string;
  ConsoleAccess?: boolean | null;
  Groups?: string[] | null;
  Password?: string | null;
  Username: string;
}

// refs: 1 - tags: named, output
export interface CreateBrokerResponse {
  BrokerArn?: string | null;
  BrokerId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateConfigurationResponse {
  Arn?: string | null;
  AuthenticationStrategy?: AuthenticationStrategy | null;
  Created?: Date | number | null;
  Id?: string | null;
  LatestRevision?: ConfigurationRevision | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateUserResponse {
}

// refs: 1 - tags: named, output
export interface DeleteBrokerResponse {
  BrokerId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteUserResponse {
}

// refs: 1 - tags: named, output
export interface DescribeBrokerResponse {
  AuthenticationStrategy?: AuthenticationStrategy | null;
  AutoMinorVersionUpgrade?: boolean | null;
  BrokerArn?: string | null;
  BrokerId?: string | null;
  BrokerInstances?: BrokerInstance[] | null;
  BrokerName?: string | null;
  BrokerState?: BrokerState | null;
  Configurations?: Configurations | null;
  Created?: Date | number | null;
  DeploymentMode?: DeploymentMode | null;
  EncryptionOptions?: EncryptionOptions | null;
  EngineType?: EngineType | null;
  EngineVersion?: string | null;
  HostInstanceType?: string | null;
  LdapServerMetadata?: LdapServerMetadataOutput | null;
  Logs?: LogsSummary | null;
  MaintenanceWindowStartTime?: WeeklyStartTime | null;
  PendingAuthenticationStrategy?: AuthenticationStrategy | null;
  PendingEngineVersion?: string | null;
  PendingHostInstanceType?: string | null;
  PendingLdapServerMetadata?: LdapServerMetadataOutput | null;
  PendingSecurityGroups?: string[] | null;
  PubliclyAccessible?: boolean | null;
  SecurityGroups?: string[] | null;
  StorageType?: BrokerStorageType | null;
  SubnetIds?: string[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Users?: UserSummary[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeBrokerEngineTypesResponse {
  BrokerEngineTypes?: BrokerEngineType[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBrokerInstanceOptionsResponse {
  BrokerInstanceOptions?: BrokerInstanceOption[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigurationResponse {
  Arn?: string | null;
  AuthenticationStrategy?: AuthenticationStrategy | null;
  Created?: Date | number | null;
  Description?: string | null;
  EngineType?: EngineType | null;
  EngineVersion?: string | null;
  Id?: string | null;
  LatestRevision?: ConfigurationRevision | null;
  Name?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigurationRevisionResponse {
  ConfigurationId?: string | null;
  Created?: Date | number | null;
  Data?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserResponse {
  BrokerId?: string | null;
  ConsoleAccess?: boolean | null;
  Groups?: string[] | null;
  Pending?: UserPendingChanges | null;
  Username?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBrokersResponse {
  BrokerSummaries?: BrokerSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListConfigurationRevisionsResponse {
  ConfigurationId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  Revisions?: ConfigurationRevision[] | null;
}

// refs: 1 - tags: named, output
export interface ListConfigurationsResponse {
  Configurations?: Configuration[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListUsersResponse {
  BrokerId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  Users?: UserSummary[] | null;
}

// refs: 1 - tags: named, output
export interface RebootBrokerResponse {
}

// refs: 1 - tags: named, output
export interface UpdateBrokerResponse {
  AuthenticationStrategy?: AuthenticationStrategy | null;
  AutoMinorVersionUpgrade?: boolean | null;
  BrokerId?: string | null;
  Configuration?: ConfigurationId | null;
  EngineVersion?: string | null;
  HostInstanceType?: string | null;
  LdapServerMetadata?: LdapServerMetadataOutput | null;
  Logs?: Logs | null;
  SecurityGroups?: string[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateConfigurationResponse {
  Arn?: string | null;
  Created?: Date | number | null;
  Id?: string | null;
  LatestRevision?: ConfigurationRevision | null;
  Name?: string | null;
  Warnings?: SanitizationWarning[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateUserResponse {
}

// refs: 9 - tags: input, named, enum, output
export type AuthenticationStrategy =
| "SIMPLE"
| "LDAP"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface ConfigurationId {
  Id?: string | null;
  Revision?: number | null;
}
function fromConfigurationId(input?: ConfigurationId | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["Id"],
    revision: input["Revision"],
  }
}
function toConfigurationId(root: jsonP.JSONValue): ConfigurationId {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Revision": "n",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type DeploymentMode =
| "SINGLE_INSTANCE"
| "ACTIVE_STANDBY_MULTI_AZ"
| "CLUSTER_MULTI_AZ"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface EncryptionOptions {
  KmsKeyId?: string | null;
  UseAwsOwnedKey: boolean;
}
function fromEncryptionOptions(input?: EncryptionOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    kmsKeyId: input["KmsKeyId"],
    useAwsOwnedKey: input["UseAwsOwnedKey"],
  }
}
function toEncryptionOptions(root: jsonP.JSONValue): EncryptionOptions {
  return jsonP.readObj({
    required: {
      "UseAwsOwnedKey": "b",
    },
    optional: {
      "KmsKeyId": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type EngineType =
| "ACTIVEMQ"
| "RABBITMQ"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface LdapServerMetadataInput {
  Hosts?: string[] | null;
  RoleBase?: string | null;
  RoleName?: string | null;
  RoleSearchMatching?: string | null;
  RoleSearchSubtree?: boolean | null;
  ServiceAccountPassword?: string | null;
  ServiceAccountUsername?: string | null;
  UserBase?: string | null;
  UserRoleName?: string | null;
  UserSearchMatching?: string | null;
  UserSearchSubtree?: boolean | null;
}
function fromLdapServerMetadataInput(input?: LdapServerMetadataInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    hosts: input["Hosts"],
    roleBase: input["RoleBase"],
    roleName: input["RoleName"],
    roleSearchMatching: input["RoleSearchMatching"],
    roleSearchSubtree: input["RoleSearchSubtree"],
    serviceAccountPassword: input["ServiceAccountPassword"],
    serviceAccountUsername: input["ServiceAccountUsername"],
    userBase: input["UserBase"],
    userRoleName: input["UserRoleName"],
    userSearchMatching: input["UserSearchMatching"],
    userSearchSubtree: input["UserSearchSubtree"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface Logs {
  Audit?: boolean | null;
  General?: boolean | null;
}
function fromLogs(input?: Logs | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    audit: input["Audit"],
    general: input["General"],
  }
}
function toLogs(root: jsonP.JSONValue): Logs {
  return jsonP.readObj({
    required: {},
    optional: {
      "Audit": "b",
      "General": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface WeeklyStartTime {
  DayOfWeek?: DayOfWeek | null;
  TimeOfDay?: string | null;
  TimeZone?: string | null;
}
function fromWeeklyStartTime(input?: WeeklyStartTime | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dayOfWeek: input["DayOfWeek"],
    timeOfDay: input["TimeOfDay"],
    timeZone: input["TimeZone"],
  }
}
function toWeeklyStartTime(root: jsonP.JSONValue): WeeklyStartTime {
  return jsonP.readObj({
    required: {},
    optional: {
      "DayOfWeek": (x: jsonP.JSONValue) => cmnP.readEnum<DayOfWeek>(x),
      "TimeOfDay": "s",
      "TimeZone": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type DayOfWeek =
| "MONDAY"
| "TUESDAY"
| "WEDNESDAY"
| "THURSDAY"
| "FRIDAY"
| "SATURDAY"
| "SUNDAY"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type BrokerStorageType =
| "EBS"
| "EFS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface User {
  ConsoleAccess?: boolean | null;
  Groups?: string[] | null;
  Password?: string | null;
  Username?: string | null;
}
function fromUser(input?: User | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    consoleAccess: input["ConsoleAccess"],
    groups: input["Groups"],
    password: input["Password"],
    username: input["Username"],
  }
}

// refs: 5 - tags: output, named, interface
export interface ConfigurationRevision {
  Created?: Date | number | null;
  Description?: string | null;
  Revision?: number | null;
}
function toConfigurationRevision(root: jsonP.JSONValue): ConfigurationRevision {
  return jsonP.readObj({
    required: {},
    optional: {
      "Created": "d",
      "Description": "s",
      "Revision": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BrokerInstance {
  ConsoleURL?: string | null;
  Endpoints?: string[] | null;
  IpAddress?: string | null;
}
function toBrokerInstance(root: jsonP.JSONValue): BrokerInstance {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConsoleURL": "s",
      "Endpoints": ["s"],
      "IpAddress": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type BrokerState =
| "CREATION_IN_PROGRESS"
| "CREATION_FAILED"
| "DELETION_IN_PROGRESS"
| "RUNNING"
| "REBOOT_IN_PROGRESS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Configurations {
  Current?: ConfigurationId | null;
  History?: ConfigurationId[] | null;
  Pending?: ConfigurationId | null;
}
function toConfigurations(root: jsonP.JSONValue): Configurations {
  return jsonP.readObj({
    required: {},
    optional: {
      "Current": toConfigurationId,
      "History": [toConfigurationId],
      "Pending": toConfigurationId,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface LdapServerMetadataOutput {
  Hosts?: string[] | null;
  RoleBase?: string | null;
  RoleName?: string | null;
  RoleSearchMatching?: string | null;
  RoleSearchSubtree?: boolean | null;
  ServiceAccountUsername?: string | null;
  UserBase?: string | null;
  UserRoleName?: string | null;
  UserSearchMatching?: string | null;
  UserSearchSubtree?: boolean | null;
}
function toLdapServerMetadataOutput(root: jsonP.JSONValue): LdapServerMetadataOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "Hosts": ["s"],
      "RoleBase": "s",
      "RoleName": "s",
      "RoleSearchMatching": "s",
      "RoleSearchSubtree": "b",
      "ServiceAccountUsername": "s",
      "UserBase": "s",
      "UserRoleName": "s",
      "UserSearchMatching": "s",
      "UserSearchSubtree": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LogsSummary {
  Audit?: boolean | null;
  AuditLogGroup?: string | null;
  General?: boolean | null;
  GeneralLogGroup?: string | null;
  Pending?: PendingLogs | null;
}
function toLogsSummary(root: jsonP.JSONValue): LogsSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Audit": "b",
      "AuditLogGroup": "s",
      "General": "b",
      "GeneralLogGroup": "s",
      "Pending": toPendingLogs,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PendingLogs {
  Audit?: boolean | null;
  General?: boolean | null;
}
function toPendingLogs(root: jsonP.JSONValue): PendingLogs {
  return jsonP.readObj({
    required: {},
    optional: {
      "Audit": "b",
      "General": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface UserSummary {
  PendingChange?: ChangeType | null;
  Username?: string | null;
}
function toUserSummary(root: jsonP.JSONValue): UserSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "PendingChange": (x: jsonP.JSONValue) => cmnP.readEnum<ChangeType>(x),
      "Username": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ChangeType =
| "CREATE"
| "UPDATE"
| "DELETE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BrokerEngineType {
  EngineType?: EngineType | null;
  EngineVersions?: EngineVersion[] | null;
}
function toBrokerEngineType(root: jsonP.JSONValue): BrokerEngineType {
  return jsonP.readObj({
    required: {},
    optional: {
      "EngineType": (x: jsonP.JSONValue) => cmnP.readEnum<EngineType>(x),
      "EngineVersions": [toEngineVersion],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EngineVersion {
  Name?: string | null;
}
function toEngineVersion(root: jsonP.JSONValue): EngineVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BrokerInstanceOption {
  AvailabilityZones?: AvailabilityZone[] | null;
  EngineType?: EngineType | null;
  HostInstanceType?: string | null;
  StorageType?: BrokerStorageType | null;
  SupportedDeploymentModes?: DeploymentMode[] | null;
  SupportedEngineVersions?: string[] | null;
}
function toBrokerInstanceOption(root: jsonP.JSONValue): BrokerInstanceOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "AvailabilityZones": [toAvailabilityZone],
      "EngineType": (x: jsonP.JSONValue) => cmnP.readEnum<EngineType>(x),
      "HostInstanceType": "s",
      "StorageType": (x: jsonP.JSONValue) => cmnP.readEnum<BrokerStorageType>(x),
      "SupportedDeploymentModes": [(x: jsonP.JSONValue) => cmnP.readEnum<DeploymentMode>(x)],
      "SupportedEngineVersions": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AvailabilityZone {
  Name?: string | null;
}
function toAvailabilityZone(root: jsonP.JSONValue): AvailabilityZone {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserPendingChanges {
  ConsoleAccess?: boolean | null;
  Groups?: string[] | null;
  PendingChange?: ChangeType | null;
}
function toUserPendingChanges(root: jsonP.JSONValue): UserPendingChanges {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConsoleAccess": "b",
      "Groups": ["s"],
      "PendingChange": (x: jsonP.JSONValue) => cmnP.readEnum<ChangeType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BrokerSummary {
  BrokerArn?: string | null;
  BrokerId?: string | null;
  BrokerName?: string | null;
  BrokerState?: BrokerState | null;
  Created?: Date | number | null;
  DeploymentMode?: DeploymentMode | null;
  EngineType?: EngineType | null;
  HostInstanceType?: string | null;
}
function toBrokerSummary(root: jsonP.JSONValue): BrokerSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "BrokerArn": "s",
      "BrokerId": "s",
      "BrokerName": "s",
      "BrokerState": (x: jsonP.JSONValue) => cmnP.readEnum<BrokerState>(x),
      "Created": "d",
      "DeploymentMode": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentMode>(x),
      "EngineType": (x: jsonP.JSONValue) => cmnP.readEnum<EngineType>(x),
      "HostInstanceType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Configuration {
  Arn?: string | null;
  AuthenticationStrategy?: AuthenticationStrategy | null;
  Created?: Date | number | null;
  Description?: string | null;
  EngineType?: EngineType | null;
  EngineVersion?: string | null;
  Id?: string | null;
  LatestRevision?: ConfigurationRevision | null;
  Name?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toConfiguration(root: jsonP.JSONValue): Configuration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "AuthenticationStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationStrategy>(x),
      "Created": "d",
      "Description": "s",
      "EngineType": (x: jsonP.JSONValue) => cmnP.readEnum<EngineType>(x),
      "EngineVersion": "s",
      "Id": "s",
      "LatestRevision": toConfigurationRevision,
      "Name": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SanitizationWarning {
  AttributeName?: string | null;
  ElementName?: string | null;
  Reason?: SanitizationWarningReason | null;
}
function toSanitizationWarning(root: jsonP.JSONValue): SanitizationWarning {
  return jsonP.readObj({
    required: {},
    optional: {
      "AttributeName": "s",
      "ElementName": "s",
      "Reason": (x: jsonP.JSONValue) => cmnP.readEnum<SanitizationWarningReason>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SanitizationWarningReason =
| "DISALLOWED_ELEMENT_REMOVED"
| "DISALLOWED_ATTRIBUTE_REMOVED"
| "INVALID_ATTRIBUTE_VALUE_REMOVED"
| cmnP.UnexpectedEnumValue;
