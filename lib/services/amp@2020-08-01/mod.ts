// Autogenerated API client for: Amazon Prometheus Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Amp {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Amp.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-08-01",
    "endpointPrefix": "aps",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Prometheus Service",
    "serviceId": "amp",
    "signatureVersion": "v4",
    "signingName": "aps",
    "uid": "amp-2020-08-01"
  };

  async createWorkspace(
    {abortSignal, ...params}: RequestConfig & s.CreateWorkspaceRequest = {},
  ): Promise<s.CreateWorkspaceResponse> {
    const body: jsonP.JSONObject = {
      alias: params["alias"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorkspace",
      requestUri: "/workspaces",
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {
        "arn": "s",
        "status": toWorkspaceStatus,
        "workspaceId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteWorkspace(
    {abortSignal, ...params}: RequestConfig & s.DeleteWorkspaceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteWorkspace",
      method: "DELETE",
      requestUri: cmnP.encodePath`/workspaces/${params["workspaceId"]}`,
      responseCode: 202,
    });
  }

  async describeWorkspace(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspaceRequest,
  ): Promise<s.DescribeWorkspaceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeWorkspace",
      method: "GET",
      requestUri: cmnP.encodePath`/workspaces/${params["workspaceId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "workspace": toWorkspaceDescription,
      },
      optional: {},
    }, await resp.json());
  }

  async listWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.ListWorkspacesRequest = {},
  ): Promise<s.ListWorkspacesResponse> {
    const query = new URLSearchParams;
    if (params["alias"] != null) query.set("alias", params["alias"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWorkspaces",
      method: "GET",
      requestUri: "/workspaces",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "workspaces": [toWorkspaceSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async updateWorkspaceAlias(
    {abortSignal, ...params}: RequestConfig & s.UpdateWorkspaceAliasRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      alias: params["alias"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorkspaceAlias",
      requestUri: cmnP.encodePath`/workspaces/${params["workspaceId"]}/alias`,
      responseCode: 204,
    });
  }

}

function toWorkspaceStatus(root: jsonP.JSONValue): s.WorkspaceStatus {
  return jsonP.readObj({
    required: {
      "statusCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkspaceStatusCode>(x),
    },
    optional: {},
  }, root);
}

function toWorkspaceDescription(root: jsonP.JSONValue): s.WorkspaceDescription {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "createdAt": "d",
      "status": toWorkspaceStatus,
      "workspaceId": "s",
    },
    optional: {
      "alias": "s",
      "prometheusEndpoint": "s",
    },
  }, root);
}

function toWorkspaceSummary(root: jsonP.JSONValue): s.WorkspaceSummary {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "createdAt": "d",
      "status": toWorkspaceStatus,
      "workspaceId": "s",
    },
    optional: {
      "alias": "s",
    },
  }, root);
}
