// Autogenerated API client for: AWS Lambda

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Lambda {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Lambda.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2014-11-11",
    "endpointPrefix": "lambda",
    "serviceFullName": "AWS Lambda",
    "serviceId": "Lambda",
    "signatureVersion": "v4",
    "protocol": "rest-json",
    "uid": "lambda-2014-11-11"
  };

  async addEventSource(
    {abortSignal, ...params}: RequestConfig & s.AddEventSourceRequest,
  ): Promise<s.EventSourceConfiguration> {
    const body: jsonP.JSONObject = {
      EventSource: params["EventSource"],
      FunctionName: params["FunctionName"],
      Role: params["Role"],
      BatchSize: params["BatchSize"],
      Parameters: params["Parameters"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddEventSource",
      requestUri: "/2014-11-13/event-source-mappings/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UUID": "s",
        "BatchSize": "n",
        "EventSource": "s",
        "FunctionName": "s",
        "Parameters": x => jsonP.readMap(String, String, x),
        "Role": "s",
        "LastModified": "d",
        "IsActive": "b",
        "Status": "s",
      },
    }, await resp.json());
  }

  async deleteFunction(
    {abortSignal, ...params}: RequestConfig & s.DeleteFunctionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFunction",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}`,
      responseCode: 204,
    });
  }

  async getEventSource(
    {abortSignal, ...params}: RequestConfig & s.GetEventSourceRequest,
  ): Promise<s.EventSourceConfiguration> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEventSource",
      method: "GET",
      requestUri: cmnP.encodePath`/2014-11-13/event-source-mappings/${params["UUID"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UUID": "s",
        "BatchSize": "n",
        "EventSource": "s",
        "FunctionName": "s",
        "Parameters": x => jsonP.readMap(String, String, x),
        "Role": "s",
        "LastModified": "d",
        "IsActive": "b",
        "Status": "s",
      },
    }, await resp.json());
  }

  async getFunction(
    {abortSignal, ...params}: RequestConfig & s.GetFunctionRequest,
  ): Promise<s.GetFunctionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFunction",
      method: "GET",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Configuration": toFunctionConfiguration,
        "Code": toFunctionCodeLocation,
      },
    }, await resp.json());
  }

  async getFunctionConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetFunctionConfigurationRequest,
  ): Promise<s.FunctionConfiguration> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFunctionConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}/configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FunctionName": "s",
        "FunctionARN": "s",
        "ConfigurationId": "s",
        "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<s.Runtime>(x),
        "Role": "s",
        "Handler": "s",
        "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.Mode>(x),
        "CodeSize": "n",
        "Description": "s",
        "Timeout": "n",
        "MemorySize": "n",
        "LastModified": "d",
      },
    }, await resp.json());
  }

  async invokeAsync(
    {abortSignal, ...params}: RequestConfig & s.InvokeAsyncRequest,
  ): Promise<s.InvokeAsyncResponse> {
    const body = typeof params["InvokeArgs"] === 'string' ? new TextEncoder().encode(params["InvokeArgs"]) : params["InvokeArgs"];
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InvokeAsync",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}/invoke-async/`,
      responseCode: 202,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
    };
  }

  async listEventSources(
    {abortSignal, ...params}: RequestConfig & s.ListEventSourcesRequest = {},
  ): Promise<s.ListEventSourcesResponse> {
    const query = new URLSearchParams;
    if (params["EventSourceArn"] != null) query.set("EventSource", params["EventSourceArn"]?.toString() ?? "");
    if (params["FunctionName"] != null) query.set("FunctionName", params["FunctionName"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("Marker", params["Marker"]?.toString() ?? "");
    if (params["MaxItems"] != null) query.set("MaxItems", params["MaxItems"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEventSources",
      method: "GET",
      requestUri: "/2014-11-13/event-source-mappings/",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "EventSources": [toEventSourceConfiguration],
      },
    }, await resp.json());
  }

  async listFunctions(
    {abortSignal, ...params}: RequestConfig & s.ListFunctionsRequest = {},
  ): Promise<s.ListFunctionsResponse> {
    const query = new URLSearchParams;
    if (params["Marker"] != null) query.set("Marker", params["Marker"]?.toString() ?? "");
    if (params["MaxItems"] != null) query.set("MaxItems", params["MaxItems"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFunctions",
      method: "GET",
      requestUri: "/2014-11-13/functions/",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "Functions": [toFunctionConfiguration],
      },
    }, await resp.json());
  }

  async removeEventSource(
    {abortSignal, ...params}: RequestConfig & s.RemoveEventSourceRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveEventSource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2014-11-13/event-source-mappings/${params["UUID"]}`,
      responseCode: 204,
    });
  }

  async updateFunctionConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateFunctionConfigurationRequest,
  ): Promise<s.FunctionConfiguration> {
    const query = new URLSearchParams;
    if (params["Role"] != null) query.set("Role", params["Role"]?.toString() ?? "");
    if (params["Handler"] != null) query.set("Handler", params["Handler"]?.toString() ?? "");
    if (params["Description"] != null) query.set("Description", params["Description"]?.toString() ?? "");
    if (params["Timeout"] != null) query.set("Timeout", params["Timeout"]?.toString() ?? "");
    if (params["MemorySize"] != null) query.set("MemorySize", params["MemorySize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UpdateFunctionConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}/configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FunctionName": "s",
        "FunctionARN": "s",
        "ConfigurationId": "s",
        "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<s.Runtime>(x),
        "Role": "s",
        "Handler": "s",
        "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.Mode>(x),
        "CodeSize": "n",
        "Description": "s",
        "Timeout": "n",
        "MemorySize": "n",
        "LastModified": "d",
      },
    }, await resp.json());
  }

  async uploadFunction(
    {abortSignal, ...params}: RequestConfig & s.UploadFunctionRequest,
  ): Promise<s.FunctionConfiguration> {
    const body = typeof params["FunctionZip"] === 'string' ? new TextEncoder().encode(params["FunctionZip"]) : params["FunctionZip"];
    const query = new URLSearchParams;
    query.set("Runtime", params["Runtime"]?.toString() ?? "");
    query.set("Role", params["Role"]?.toString() ?? "");
    query.set("Handler", params["Handler"]?.toString() ?? "");
    query.set("Mode", params["Mode"]?.toString() ?? "");
    if (params["Description"] != null) query.set("Description", params["Description"]?.toString() ?? "");
    if (params["Timeout"] != null) query.set("Timeout", params["Timeout"]?.toString() ?? "");
    if (params["MemorySize"] != null) query.set("MemorySize", params["MemorySize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UploadFunction",
      method: "PUT",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FunctionName": "s",
        "FunctionARN": "s",
        "ConfigurationId": "s",
        "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<s.Runtime>(x),
        "Role": "s",
        "Handler": "s",
        "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.Mode>(x),
        "CodeSize": "n",
        "Description": "s",
        "Timeout": "n",
        "MemorySize": "n",
        "LastModified": "d",
      },
    }, await resp.json());
  }

}

function toEventSourceConfiguration(root: jsonP.JSONValue): s.EventSourceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "UUID": "s",
      "BatchSize": "n",
      "EventSource": "s",
      "FunctionName": "s",
      "Parameters": x => jsonP.readMap(String, String, x),
      "Role": "s",
      "LastModified": "d",
      "IsActive": "b",
      "Status": "s",
    },
  }, root);
}

function toFunctionConfiguration(root: jsonP.JSONValue): s.FunctionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "FunctionName": "s",
      "FunctionARN": "s",
      "ConfigurationId": "s",
      "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<s.Runtime>(x),
      "Role": "s",
      "Handler": "s",
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.Mode>(x),
      "CodeSize": "n",
      "Description": "s",
      "Timeout": "n",
      "MemorySize": "n",
      "LastModified": "d",
    },
  }, root);
}

function toFunctionCodeLocation(root: jsonP.JSONValue): s.FunctionCodeLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "RepositoryType": "s",
      "Location": "s",
    },
  }, root);
}
