// Autogenerated API client for: AWS Lambda

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Lambda {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Lambda.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-11-11",
    "endpointPrefix": "lambda",
    "serviceFullName": "AWS Lambda",
    "serviceId": "Lambda",
    "signatureVersion": "v4",
    "protocol": "rest-json",
    "uid": "lambda-2014-11-11"
  };

  async addEventSource(
    {abortSignal, ...params}: RequestConfig & AddEventSourceRequest,
  ): Promise<EventSourceConfiguration> {
    const body: jsonP.JSONObject = params ? {
      EventSource: params["EventSource"],
      FunctionName: params["FunctionName"],
      Role: params["Role"],
      BatchSize: params["BatchSize"],
      Parameters: params["Parameters"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddEventSource",
      requestUri: "/2014-11-13/event-source-mappings/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "UUID": "s",
          "BatchSize": "n",
          "EventSource": "s",
          "FunctionName": "s",
          "Parameters": x => jsonP.readMap(String, String, x),
          "Role": "s",
          "LastModified": "d",
          "IsActive": "b",
          "Status": "s",
        },
      }, await resp.json()),
  };
  }

  async deleteFunction(
    {abortSignal, ...params}: RequestConfig & DeleteFunctionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFunction",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}`,
      responseCode: 204,
    });
  }

  async getEventSource(
    {abortSignal, ...params}: RequestConfig & GetEventSourceRequest,
  ): Promise<EventSourceConfiguration> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEventSource",
      method: "GET",
      requestUri: cmnP.encodePath`/2014-11-13/event-source-mappings/${params["UUID"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "UUID": "s",
          "BatchSize": "n",
          "EventSource": "s",
          "FunctionName": "s",
          "Parameters": x => jsonP.readMap(String, String, x),
          "Role": "s",
          "LastModified": "d",
          "IsActive": "b",
          "Status": "s",
        },
      }, await resp.json()),
  };
  }

  async getFunction(
    {abortSignal, ...params}: RequestConfig & GetFunctionRequest,
  ): Promise<GetFunctionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFunction",
      method: "GET",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Configuration": toFunctionConfiguration,
          "Code": toFunctionCodeLocation,
        },
      }, await resp.json()),
  };
  }

  async getFunctionConfiguration(
    {abortSignal, ...params}: RequestConfig & GetFunctionConfigurationRequest,
  ): Promise<FunctionConfiguration> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFunctionConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}/configuration`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FunctionName": "s",
          "FunctionARN": "s",
          "ConfigurationId": "s",
          "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<Runtime>(x),
          "Role": "s",
          "Handler": "s",
          "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<Mode>(x),
          "CodeSize": "n",
          "Description": "s",
          "Timeout": "n",
          "MemorySize": "n",
          "LastModified": "d",
        },
      }, await resp.json()),
  };
  }

  async invokeAsync(
    {abortSignal, ...params}: RequestConfig & InvokeAsyncRequest,
  ): Promise<InvokeAsyncResponse> {
    const body = typeof params["InvokeArgs"] === 'string' ? new TextEncoder().encode(params["InvokeArgs"]) : params["InvokeArgs"];
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InvokeAsync",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}/invoke-async/`,
      responseCode: 202,
    });
  return {
    Status: resp.status,
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async listEventSources(
    {abortSignal, ...params}: RequestConfig & ListEventSourcesRequest = {},
  ): Promise<ListEventSourcesResponse> {
    const query = new URLSearchParams;
    if (params["EventSourceArn"] != null) query.set("EventSource", params["EventSourceArn"]?.toString() ?? "");
    if (params["FunctionName"] != null) query.set("FunctionName", params["FunctionName"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("Marker", params["Marker"]?.toString() ?? "");
    if (params["MaxItems"] != null) query.set("MaxItems", params["MaxItems"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEventSources",
      method: "GET",
      requestUri: "/2014-11-13/event-source-mappings/",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextMarker": "s",
          "EventSources": [toEventSourceConfiguration],
        },
      }, await resp.json()),
  };
  }

  async listFunctions(
    {abortSignal, ...params}: RequestConfig & ListFunctionsRequest = {},
  ): Promise<ListFunctionsResponse> {
    const query = new URLSearchParams;
    if (params["Marker"] != null) query.set("Marker", params["Marker"]?.toString() ?? "");
    if (params["MaxItems"] != null) query.set("MaxItems", params["MaxItems"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFunctions",
      method: "GET",
      requestUri: "/2014-11-13/functions/",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextMarker": "s",
          "Functions": [toFunctionConfiguration],
        },
      }, await resp.json()),
  };
  }

  async removeEventSource(
    {abortSignal, ...params}: RequestConfig & RemoveEventSourceRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveEventSource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2014-11-13/event-source-mappings/${params["UUID"]}`,
      responseCode: 204,
    });
  }

  async updateFunctionConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateFunctionConfigurationRequest,
  ): Promise<FunctionConfiguration> {
    const query = new URLSearchParams;
    if (params["Role"] != null) query.set("Role", params["Role"]?.toString() ?? "");
    if (params["Handler"] != null) query.set("Handler", params["Handler"]?.toString() ?? "");
    if (params["Description"] != null) query.set("Description", params["Description"]?.toString() ?? "");
    if (params["Timeout"] != null) query.set("Timeout", params["Timeout"]?.toString() ?? "");
    if (params["MemorySize"] != null) query.set("MemorySize", params["MemorySize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UpdateFunctionConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}/configuration`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FunctionName": "s",
          "FunctionARN": "s",
          "ConfigurationId": "s",
          "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<Runtime>(x),
          "Role": "s",
          "Handler": "s",
          "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<Mode>(x),
          "CodeSize": "n",
          "Description": "s",
          "Timeout": "n",
          "MemorySize": "n",
          "LastModified": "d",
        },
      }, await resp.json()),
  };
  }

  async uploadFunction(
    {abortSignal, ...params}: RequestConfig & UploadFunctionRequest,
  ): Promise<FunctionConfiguration> {
    const query = new URLSearchParams;
    query.set("Runtime", params["Runtime"]?.toString() ?? "");
    query.set("Role", params["Role"]?.toString() ?? "");
    query.set("Handler", params["Handler"]?.toString() ?? "");
    query.set("Mode", params["Mode"]?.toString() ?? "");
    if (params["Description"] != null) query.set("Description", params["Description"]?.toString() ?? "");
    if (params["Timeout"] != null) query.set("Timeout", params["Timeout"]?.toString() ?? "");
    if (params["MemorySize"] != null) query.set("MemorySize", params["MemorySize"]?.toString() ?? "");
    const body = typeof params["FunctionZip"] === 'string' ? new TextEncoder().encode(params["FunctionZip"]) : params["FunctionZip"];
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UploadFunction",
      method: "PUT",
      requestUri: cmnP.encodePath`/2014-11-13/functions/${params["FunctionName"]}`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FunctionName": "s",
          "FunctionARN": "s",
          "ConfigurationId": "s",
          "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<Runtime>(x),
          "Role": "s",
          "Handler": "s",
          "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<Mode>(x),
          "CodeSize": "n",
          "Description": "s",
          "Timeout": "n",
          "MemorySize": "n",
          "LastModified": "d",
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface AddEventSourceRequest {
  EventSource: string;
  FunctionName: string;
  Role: string;
  BatchSize?: number | null;
  Parameters?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteFunctionRequest {
  FunctionName: string;
}

// refs: 1 - tags: named, input
export interface GetEventSourceRequest {
  UUID: string;
}

// refs: 1 - tags: named, input
export interface GetFunctionRequest {
  FunctionName: string;
}

// refs: 1 - tags: named, input
export interface GetFunctionConfigurationRequest {
  FunctionName: string;
}

// refs: 1 - tags: named, input
export interface InvokeAsyncRequest {
  FunctionName: string;
  InvokeArgs: Uint8Array | string;
}

// refs: 1 - tags: named, input
export interface ListEventSourcesRequest {
  EventSourceArn?: string | null;
  FunctionName?: string | null;
  Marker?: string | null;
  MaxItems?: number | null;
}

// refs: 1 - tags: named, input
export interface ListFunctionsRequest {
  Marker?: string | null;
  MaxItems?: number | null;
}

// refs: 1 - tags: named, input
export interface RemoveEventSourceRequest {
  UUID: string;
}

// refs: 1 - tags: named, input
export interface UpdateFunctionConfigurationRequest {
  FunctionName: string;
  Role?: string | null;
  Handler?: string | null;
  Description?: string | null;
  Timeout?: number | null;
  MemorySize?: number | null;
}

// refs: 1 - tags: named, input
export interface UploadFunctionRequest {
  FunctionName: string;
  FunctionZip: Uint8Array | string;
  Runtime: Runtime;
  Role: string;
  Handler: string;
  Mode: Mode;
  Description?: string | null;
  Timeout?: number | null;
  MemorySize?: number | null;
}

// refs: 2 - tags: named, output, interface
export interface EventSourceConfiguration {
  UUID?: string | null;
  BatchSize?: number | null;
  EventSource?: string | null;
  FunctionName?: string | null;
  Parameters?: { [key: string]: string | null | undefined } | null;
  Role?: string | null;
  LastModified?: Date | number | null;
  IsActive?: boolean | null;
  Status?: string | null;
}
function toEventSourceConfiguration(root: jsonP.JSONValue): EventSourceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "UUID": "s",
      "BatchSize": "n",
      "EventSource": "s",
      "FunctionName": "s",
      "Parameters": x => jsonP.readMap(String, String, x),
      "Role": "s",
      "LastModified": "d",
      "IsActive": "b",
      "Status": "s",
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface GetFunctionResponse {
  Configuration?: FunctionConfiguration | null;
  Code?: FunctionCodeLocation | null;
}

// refs: 3 - tags: output, named, interface
export interface FunctionConfiguration {
  FunctionName?: string | null;
  FunctionARN?: string | null;
  ConfigurationId?: string | null;
  Runtime?: Runtime | null;
  Role?: string | null;
  Handler?: string | null;
  Mode?: Mode | null;
  CodeSize?: number | null;
  Description?: string | null;
  Timeout?: number | null;
  MemorySize?: number | null;
  LastModified?: Date | number | null;
}
function toFunctionConfiguration(root: jsonP.JSONValue): FunctionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "FunctionName": "s",
      "FunctionARN": "s",
      "ConfigurationId": "s",
      "Runtime": (x: jsonP.JSONValue) => cmnP.readEnum<Runtime>(x),
      "Role": "s",
      "Handler": "s",
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<Mode>(x),
      "CodeSize": "n",
      "Description": "s",
      "Timeout": "n",
      "MemorySize": "n",
      "LastModified": "d",
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface InvokeAsyncResponse {
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListEventSourcesResponse {
  NextMarker?: string | null;
  EventSources?: EventSourceConfiguration[] | null;
}

// refs: 1 - tags: named, output
export interface ListFunctionsResponse {
  NextMarker?: string | null;
  Functions?: FunctionConfiguration[] | null;
}

// refs: 4 - tags: input, named, enum, output
export type Runtime =
| "nodejs"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type Mode =
| "event"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface FunctionCodeLocation {
  RepositoryType?: string | null;
  Location?: string | null;
}
function toFunctionCodeLocation(root: jsonP.JSONValue): FunctionCodeLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "RepositoryType": "s",
      "Location": "s",
    },
  }, root);
}
