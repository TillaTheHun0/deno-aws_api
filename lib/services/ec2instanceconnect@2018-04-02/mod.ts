// Autogenerated API client for: AWS EC2 Instance Connect

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class EC2InstanceConnect {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(EC2InstanceConnect.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-04-02",
    "endpointPrefix": "ec2-instance-connect",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "EC2 Instance Connect",
    "serviceFullName": "AWS EC2 Instance Connect",
    "serviceId": "EC2 Instance Connect",
    "signatureVersion": "v4",
    "targetPrefix": "AWSEC2InstanceConnectService",
    "uid": "ec2-instance-connect-2018-04-02"
  };

  async sendSSHPublicKey(
    {abortSignal, ...params}: RequestConfig & s.SendSSHPublicKeyRequest,
  ): Promise<s.SendSSHPublicKeyResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      InstanceOSUser: params["InstanceOSUser"],
      SSHPublicKey: params["SSHPublicKey"],
      AvailabilityZone: params["AvailabilityZone"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendSSHPublicKey",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RequestId": "s",
        "Success": "b",
      },
    }, await resp.json());
  }

}

