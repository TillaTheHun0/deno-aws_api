// Autogenerated API client for: AWS IoT Core Device Advisor

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class IotDeviceAdvisor {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IotDeviceAdvisor.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-09-18",
    "endpointPrefix": "api.iotdeviceadvisor",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AWSIoTDeviceAdvisor",
    "serviceFullName": "AWS IoT Core Device Advisor",
    "serviceId": "IotDeviceAdvisor",
    "signatureVersion": "v4",
    "signingName": "iotdeviceadvisor",
    "uid": "iotdeviceadvisor-2020-09-18"
  };

  async createSuiteDefinition(
    {abortSignal, ...params}: RequestConfig & CreateSuiteDefinitionRequest = {},
  ): Promise<CreateSuiteDefinitionResponse> {
    const body: jsonP.JSONObject = {
      suiteDefinitionConfiguration: fromSuiteDefinitionConfiguration(params["suiteDefinitionConfiguration"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSuiteDefinition",
      requestUri: "/suiteDefinitions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suiteDefinitionId": "s",
        "suiteDefinitionArn": "s",
        "suiteDefinitionName": "s",
        "createdAt": "d",
      },
    }, await resp.json());
  }

  async deleteSuiteDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteSuiteDefinitionRequest,
  ): Promise<DeleteSuiteDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSuiteDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/suiteDefinitions/${params["suiteDefinitionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getSuiteDefinition(
    {abortSignal, ...params}: RequestConfig & GetSuiteDefinitionRequest,
  ): Promise<GetSuiteDefinitionResponse> {
    const query = new URLSearchParams;
    if (params["suiteDefinitionVersion"] != null) query.set("suiteDefinitionVersion", params["suiteDefinitionVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSuiteDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/suiteDefinitions/${params["suiteDefinitionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suiteDefinitionId": "s",
        "suiteDefinitionArn": "s",
        "suiteDefinitionVersion": "s",
        "latestVersion": "s",
        "suiteDefinitionConfiguration": toSuiteDefinitionConfiguration,
        "createdAt": "d",
        "lastModifiedAt": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getSuiteRun(
    {abortSignal, ...params}: RequestConfig & GetSuiteRunRequest,
  ): Promise<GetSuiteRunResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSuiteRun",
      method: "GET",
      requestUri: cmnP.encodePath`/suiteDefinitions/${params["suiteDefinitionId"]}/suiteRuns/${params["suiteRunId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suiteDefinitionId": "s",
        "suiteDefinitionVersion": "s",
        "suiteRunId": "s",
        "suiteRunArn": "s",
        "suiteRunConfiguration": toSuiteRunConfiguration,
        "testResult": toTestResult,
        "startTime": "d",
        "endTime": "d",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<SuiteRunStatus>(x),
        "errorReason": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getSuiteRunReport(
    {abortSignal, ...params}: RequestConfig & GetSuiteRunReportRequest,
  ): Promise<GetSuiteRunReportResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSuiteRunReport",
      method: "GET",
      requestUri: cmnP.encodePath`/suiteDefinitions/${params["suiteDefinitionId"]}/suiteRuns/${params["suiteRunId"]}/report`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "qualificationReportDownloadUrl": "s",
      },
    }, await resp.json());
  }

  async listSuiteDefinitions(
    {abortSignal, ...params}: RequestConfig & ListSuiteDefinitionsRequest = {},
  ): Promise<ListSuiteDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSuiteDefinitions",
      method: "GET",
      requestUri: "/suiteDefinitions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suiteDefinitionInformationList": [toSuiteDefinitionInformation],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSuiteRuns(
    {abortSignal, ...params}: RequestConfig & ListSuiteRunsRequest = {},
  ): Promise<ListSuiteRunsResponse> {
    const query = new URLSearchParams;
    if (params["suiteDefinitionId"] != null) query.set("suiteDefinitionId", params["suiteDefinitionId"]?.toString() ?? "");
    if (params["suiteDefinitionVersion"] != null) query.set("suiteDefinitionVersion", params["suiteDefinitionVersion"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSuiteRuns",
      method: "GET",
      requestUri: "/suiteRuns",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suiteRunsList": [toSuiteRunInformation],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listTestCases(
    {abortSignal, ...params}: RequestConfig & ListTestCasesRequest = {},
  ): Promise<ListTestCasesResponse> {
    const query = new URLSearchParams;
    if (params["intendedForQualification"] != null) query.set("intendedForQualification", params["intendedForQualification"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTestCases",
      method: "GET",
      requestUri: "/testCases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "categories": [toTestCaseCategory],
        "rootGroupConfiguration": x => jsonP.readMap(String, String, x),
        "groupConfiguration": x => jsonP.readMap(String, String, x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async startSuiteRun(
    {abortSignal, ...params}: RequestConfig & StartSuiteRunRequest,
  ): Promise<StartSuiteRunResponse> {
    const body: jsonP.JSONObject = {
      suiteDefinitionVersion: params["suiteDefinitionVersion"],
      suiteRunConfiguration: fromSuiteRunConfiguration(params["suiteRunConfiguration"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSuiteRun",
      requestUri: cmnP.encodePath`/suiteDefinitions/${params["suiteDefinitionId"]}/suiteRuns`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suiteRunId": "s",
        "suiteRunArn": "s",
        "createdAt": "d",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSuiteDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateSuiteDefinitionRequest,
  ): Promise<UpdateSuiteDefinitionResponse> {
    const body: jsonP.JSONObject = {
      suiteDefinitionConfiguration: fromSuiteDefinitionConfiguration(params["suiteDefinitionConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSuiteDefinition",
      method: "PATCH",
      requestUri: cmnP.encodePath`/suiteDefinitions/${params["suiteDefinitionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suiteDefinitionId": "s",
        "suiteDefinitionArn": "s",
        "suiteDefinitionName": "s",
        "suiteDefinitionVersion": "s",
        "createdAt": "d",
        "lastUpdatedAt": "d",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateSuiteDefinitionRequest {
  suiteDefinitionConfiguration?: SuiteDefinitionConfiguration | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteSuiteDefinitionRequest {
  suiteDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetSuiteDefinitionRequest {
  suiteDefinitionId: string;
  suiteDefinitionVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSuiteRunRequest {
  suiteDefinitionId: string;
  suiteRunId: string;
}

// refs: 1 - tags: named, input
export interface GetSuiteRunReportRequest {
  suiteDefinitionId: string;
  suiteRunId: string;
}

// refs: 1 - tags: named, input
export interface ListSuiteDefinitionsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSuiteRunsRequest {
  suiteDefinitionId?: string | null;
  suiteDefinitionVersion?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListTestCasesRequest {
  intendedForQualification?: boolean | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StartSuiteRunRequest {
  suiteDefinitionId: string;
  suiteDefinitionVersion?: string | null;
  suiteRunConfiguration?: SuiteRunConfiguration | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateSuiteDefinitionRequest {
  suiteDefinitionId: string;
  suiteDefinitionConfiguration?: SuiteDefinitionConfiguration | null;
}

// refs: 1 - tags: named, output
export interface CreateSuiteDefinitionResponse {
  suiteDefinitionId?: string | null;
  suiteDefinitionArn?: string | null;
  suiteDefinitionName?: string | null;
  createdAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DeleteSuiteDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface GetSuiteDefinitionResponse {
  suiteDefinitionId?: string | null;
  suiteDefinitionArn?: string | null;
  suiteDefinitionVersion?: string | null;
  latestVersion?: string | null;
  suiteDefinitionConfiguration?: SuiteDefinitionConfiguration | null;
  createdAt?: Date | number | null;
  lastModifiedAt?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetSuiteRunResponse {
  suiteDefinitionId?: string | null;
  suiteDefinitionVersion?: string | null;
  suiteRunId?: string | null;
  suiteRunArn?: string | null;
  suiteRunConfiguration?: SuiteRunConfiguration | null;
  testResult?: TestResult | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  status?: SuiteRunStatus | null;
  errorReason?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetSuiteRunReportResponse {
  qualificationReportDownloadUrl?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSuiteDefinitionsResponse {
  suiteDefinitionInformationList?: SuiteDefinitionInformation[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSuiteRunsResponse {
  suiteRunsList?: SuiteRunInformation[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListTestCasesResponse {
  categories?: TestCaseCategory[] | null;
  rootGroupConfiguration?: { [key: string]: string | null | undefined } | null;
  groupConfiguration?: { [key: string]: string | null | undefined } | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartSuiteRunResponse {
  suiteRunId?: string | null;
  suiteRunArn?: string | null;
  createdAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateSuiteDefinitionResponse {
  suiteDefinitionId?: string | null;
  suiteDefinitionArn?: string | null;
  suiteDefinitionName?: string | null;
  suiteDefinitionVersion?: string | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
}

// refs: 3 - tags: input, named, interface, output
export interface SuiteDefinitionConfiguration {
  suiteDefinitionName?: string | null;
  devices?: DeviceUnderTest[] | null;
  intendedForQualification?: boolean | null;
  rootGroup?: string | null;
  devicePermissionRoleArn?: string | null;
}
function fromSuiteDefinitionConfiguration(input?: SuiteDefinitionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    suiteDefinitionName: input["suiteDefinitionName"],
    devices: input["devices"]?.map(x => fromDeviceUnderTest(x)),
    intendedForQualification: input["intendedForQualification"],
    rootGroup: input["rootGroup"],
    devicePermissionRoleArn: input["devicePermissionRoleArn"],
  }
}
function toSuiteDefinitionConfiguration(root: jsonP.JSONValue): SuiteDefinitionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "suiteDefinitionName": "s",
      "devices": [toDeviceUnderTest],
      "intendedForQualification": "b",
      "rootGroup": "s",
      "devicePermissionRoleArn": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface DeviceUnderTest {
  thingArn?: string | null;
  certificateArn?: string | null;
}
function fromDeviceUnderTest(input?: DeviceUnderTest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    thingArn: input["thingArn"],
    certificateArn: input["certificateArn"],
  }
}
function toDeviceUnderTest(root: jsonP.JSONValue): DeviceUnderTest {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingArn": "s",
      "certificateArn": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SuiteRunConfiguration {
  primaryDevice?: DeviceUnderTest | null;
  secondaryDevice?: DeviceUnderTest | null;
  selectedTestList?: string[] | null;
}
function fromSuiteRunConfiguration(input?: SuiteRunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    primaryDevice: fromDeviceUnderTest(input["primaryDevice"]),
    secondaryDevice: fromDeviceUnderTest(input["secondaryDevice"]),
    selectedTestList: input["selectedTestList"],
  }
}
function toSuiteRunConfiguration(root: jsonP.JSONValue): SuiteRunConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "primaryDevice": toDeviceUnderTest,
      "secondaryDevice": toDeviceUnderTest,
      "selectedTestList": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TestResult {
  groups?: GroupResult[] | null;
}
function toTestResult(root: jsonP.JSONValue): TestResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "groups": [toGroupResult],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GroupResult {
  groupId?: string | null;
  groupName?: string | null;
  tests?: TestCaseRun[] | null;
}
function toGroupResult(root: jsonP.JSONValue): GroupResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "groupId": "s",
      "groupName": "s",
      "tests": [toTestCaseRun],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TestCaseRun {
  testCaseRunId?: string | null;
  testCaseDefinitionId?: string | null;
  testCaseDefinitionName?: string | null;
  status?: Status | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  logUrl?: string | null;
  warnings?: string | null;
  failure?: string | null;
}
function toTestCaseRun(root: jsonP.JSONValue): TestCaseRun {
  return jsonP.readObj({
    required: {},
    optional: {
      "testCaseRunId": "s",
      "testCaseDefinitionId": "s",
      "testCaseDefinitionName": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      "startTime": "d",
      "endTime": "d",
      "logUrl": "s",
      "warnings": "s",
      "failure": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Status =
| "PASS"
| "FAIL"
| "CANCELED"
| "PENDING"
| "RUNNING"
| "PASS_WITH_WARNINGS"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type SuiteRunStatus =
| "PASS"
| "FAIL"
| "CANCELED"
| "PENDING"
| "RUNNING"
| "PASS_WITH_WARNINGS"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface SuiteDefinitionInformation {
  suiteDefinitionId?: string | null;
  suiteDefinitionName?: string | null;
  defaultDevices?: DeviceUnderTest[] | null;
  intendedForQualification?: boolean | null;
  createdAt?: Date | number | null;
}
function toSuiteDefinitionInformation(root: jsonP.JSONValue): SuiteDefinitionInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "suiteDefinitionId": "s",
      "suiteDefinitionName": "s",
      "defaultDevices": [toDeviceUnderTest],
      "intendedForQualification": "b",
      "createdAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SuiteRunInformation {
  suiteDefinitionId?: string | null;
  suiteDefinitionVersion?: string | null;
  suiteDefinitionName?: string | null;
  suiteRunId?: string | null;
  createdAt?: Date | number | null;
  startedAt?: Date | number | null;
  endAt?: Date | number | null;
  status?: SuiteRunStatus | null;
  passed?: number | null;
  failed?: number | null;
}
function toSuiteRunInformation(root: jsonP.JSONValue): SuiteRunInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "suiteDefinitionId": "s",
      "suiteDefinitionVersion": "s",
      "suiteDefinitionName": "s",
      "suiteRunId": "s",
      "createdAt": "d",
      "startedAt": "d",
      "endAt": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<SuiteRunStatus>(x),
      "passed": "n",
      "failed": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TestCaseCategory {
  name?: string | null;
  tests?: TestCase[] | null;
}
function toTestCaseCategory(root: jsonP.JSONValue): TestCaseCategory {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "tests": [toTestCase],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TestCase {
  name?: string | null;
  configuration?: { [key: string]: string | null | undefined } | null;
  test?: TestCaseDefinition | null;
}
function toTestCase(root: jsonP.JSONValue): TestCase {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "configuration": x => jsonP.readMap(String, String, x),
      "test": toTestCaseDefinition,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TestCaseDefinition {
  id?: string | null;
  testCaseVersion?: string | null;
}
function toTestCaseDefinition(root: jsonP.JSONValue): TestCaseDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "testCaseVersion": "s",
    },
  }, root);
}
