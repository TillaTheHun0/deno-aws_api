// Autogenerated API client for: Amazon FSx

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class FSx {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(FSx.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-03-01",
    "endpointPrefix": "fsx",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon FSx",
    "serviceId": "FSx",
    "signatureVersion": "v4",
    "signingName": "fsx",
    "targetPrefix": "AWSSimbaAPIService_v20180301",
    "uid": "fsx-2018-03-01"
  };

  async associateFileSystemAliases(
    {abortSignal, ...params}: RequestConfig & AssociateFileSystemAliasesRequest,
  ): Promise<AssociateFileSystemAliasesResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      FileSystemId: params["FileSystemId"],
      Aliases: params["Aliases"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateFileSystemAliases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Aliases": [toAlias],
      },
    }, await resp.json());
  }

  async cancelDataRepositoryTask(
    {abortSignal, ...params}: RequestConfig & CancelDataRepositoryTaskRequest,
  ): Promise<CancelDataRepositoryTaskResponse> {
    const body: jsonP.JSONObject = {
      TaskId: params["TaskId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelDataRepositoryTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<DataRepositoryTaskLifecycle>(x),
        "TaskId": "s",
      },
    }, await resp.json());
  }

  async createBackup(
    {abortSignal, ...params}: RequestConfig & CreateBackupRequest,
  ): Promise<CreateBackupResponse> {
    const body: jsonP.JSONObject = {
      FileSystemId: params["FileSystemId"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Backup": toBackup,
      },
    }, await resp.json());
  }

  async createDataRepositoryTask(
    {abortSignal, ...params}: RequestConfig & CreateDataRepositoryTaskRequest,
  ): Promise<CreateDataRepositoryTaskResponse> {
    const body: jsonP.JSONObject = {
      Type: params["Type"],
      Paths: params["Paths"],
      FileSystemId: params["FileSystemId"],
      Report: fromCompletionReport(params["Report"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataRepositoryTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DataRepositoryTask": toDataRepositoryTask,
      },
    }, await resp.json());
  }

  async createFileSystem(
    {abortSignal, ...params}: RequestConfig & CreateFileSystemRequest,
  ): Promise<CreateFileSystemResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      FileSystemType: params["FileSystemType"],
      StorageCapacity: params["StorageCapacity"],
      StorageType: params["StorageType"],
      SubnetIds: params["SubnetIds"],
      SecurityGroupIds: params["SecurityGroupIds"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      KmsKeyId: params["KmsKeyId"],
      WindowsConfiguration: fromCreateFileSystemWindowsConfiguration(params["WindowsConfiguration"]),
      LustreConfiguration: fromCreateFileSystemLustreConfiguration(params["LustreConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFileSystem",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FileSystem": toFileSystem,
      },
    }, await resp.json());
  }

  async createFileSystemFromBackup(
    {abortSignal, ...params}: RequestConfig & CreateFileSystemFromBackupRequest,
  ): Promise<CreateFileSystemFromBackupResponse> {
    const body: jsonP.JSONObject = {
      BackupId: params["BackupId"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      SubnetIds: params["SubnetIds"],
      SecurityGroupIds: params["SecurityGroupIds"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      WindowsConfiguration: fromCreateFileSystemWindowsConfiguration(params["WindowsConfiguration"]),
      LustreConfiguration: fromCreateFileSystemLustreConfiguration(params["LustreConfiguration"]),
      StorageType: params["StorageType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFileSystemFromBackup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FileSystem": toFileSystem,
      },
    }, await resp.json());
  }

  async deleteBackup(
    {abortSignal, ...params}: RequestConfig & DeleteBackupRequest,
  ): Promise<DeleteBackupResponse> {
    const body: jsonP.JSONObject = {
      BackupId: params["BackupId"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBackup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupId": "s",
        "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<BackupLifecycle>(x),
      },
    }, await resp.json());
  }

  async deleteFileSystem(
    {abortSignal, ...params}: RequestConfig & DeleteFileSystemRequest,
  ): Promise<DeleteFileSystemResponse> {
    const body: jsonP.JSONObject = {
      FileSystemId: params["FileSystemId"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      WindowsConfiguration: fromDeleteFileSystemWindowsConfiguration(params["WindowsConfiguration"]),
      LustreConfiguration: fromDeleteFileSystemLustreConfiguration(params["LustreConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFileSystem",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FileSystemId": "s",
        "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<FileSystemLifecycle>(x),
        "WindowsResponse": toDeleteFileSystemWindowsResponse,
        "LustreResponse": toDeleteFileSystemLustreResponse,
      },
    }, await resp.json());
  }

  async describeBackups(
    {abortSignal, ...params}: RequestConfig & DescribeBackupsRequest = {},
  ): Promise<DescribeBackupsResponse> {
    const body: jsonP.JSONObject = {
      BackupIds: params["BackupIds"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBackups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Backups": [toBackup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeDataRepositoryTasks(
    {abortSignal, ...params}: RequestConfig & DescribeDataRepositoryTasksRequest = {},
  ): Promise<DescribeDataRepositoryTasksResponse> {
    const body: jsonP.JSONObject = {
      TaskIds: params["TaskIds"],
      Filters: params["Filters"]?.map(x => fromDataRepositoryTaskFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDataRepositoryTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DataRepositoryTasks": [toDataRepositoryTask],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeFileSystemAliases(
    {abortSignal, ...params}: RequestConfig & DescribeFileSystemAliasesRequest,
  ): Promise<DescribeFileSystemAliasesResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      FileSystemId: params["FileSystemId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFileSystemAliases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Aliases": [toAlias],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeFileSystems(
    {abortSignal, ...params}: RequestConfig & DescribeFileSystemsRequest = {},
  ): Promise<DescribeFileSystemsResponse> {
    const body: jsonP.JSONObject = {
      FileSystemIds: params["FileSystemIds"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFileSystems",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FileSystems": [toFileSystem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async disassociateFileSystemAliases(
    {abortSignal, ...params}: RequestConfig & DisassociateFileSystemAliasesRequest,
  ): Promise<DisassociateFileSystemAliasesResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      FileSystemId: params["FileSystemId"],
      Aliases: params["Aliases"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateFileSystemAliases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Aliases": [toAlias],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFileSystem(
    {abortSignal, ...params}: RequestConfig & UpdateFileSystemRequest,
  ): Promise<UpdateFileSystemResponse> {
    const body: jsonP.JSONObject = {
      FileSystemId: params["FileSystemId"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      StorageCapacity: params["StorageCapacity"],
      WindowsConfiguration: fromUpdateFileSystemWindowsConfiguration(params["WindowsConfiguration"]),
      LustreConfiguration: fromUpdateFileSystemLustreConfiguration(params["LustreConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFileSystem",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FileSystem": toFileSystem,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateFileSystemAliasesRequest {
  ClientRequestToken?: string | null;
  FileSystemId: string;
  Aliases: string[];
}

// refs: 1 - tags: named, input
export interface CancelDataRepositoryTaskRequest {
  TaskId: string;
}

// refs: 1 - tags: named, input
export interface CreateBackupRequest {
  FileSystemId: string;
  ClientRequestToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDataRepositoryTaskRequest {
  Type: DataRepositoryTaskType;
  Paths?: string[] | null;
  FileSystemId: string;
  Report: CompletionReport;
  ClientRequestToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateFileSystemRequest {
  ClientRequestToken?: string | null;
  FileSystemType: FileSystemType;
  StorageCapacity: number;
  StorageType?: StorageType | null;
  SubnetIds: string[];
  SecurityGroupIds?: string[] | null;
  Tags?: Tag[] | null;
  KmsKeyId?: string | null;
  WindowsConfiguration?: CreateFileSystemWindowsConfiguration | null;
  LustreConfiguration?: CreateFileSystemLustreConfiguration | null;
}

// refs: 1 - tags: named, input
export interface CreateFileSystemFromBackupRequest {
  BackupId: string;
  ClientRequestToken?: string | null;
  SubnetIds: string[];
  SecurityGroupIds?: string[] | null;
  Tags?: Tag[] | null;
  WindowsConfiguration?: CreateFileSystemWindowsConfiguration | null;
  LustreConfiguration?: CreateFileSystemLustreConfiguration | null;
  StorageType?: StorageType | null;
}

// refs: 1 - tags: named, input
export interface DeleteBackupRequest {
  BackupId: string;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteFileSystemRequest {
  FileSystemId: string;
  ClientRequestToken?: string | null;
  WindowsConfiguration?: DeleteFileSystemWindowsConfiguration | null;
  LustreConfiguration?: DeleteFileSystemLustreConfiguration | null;
}

// refs: 1 - tags: named, input
export interface DescribeBackupsRequest {
  BackupIds?: string[] | null;
  Filters?: Filter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDataRepositoryTasksRequest {
  TaskIds?: string[] | null;
  Filters?: DataRepositoryTaskFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFileSystemAliasesRequest {
  ClientRequestToken?: string | null;
  FileSystemId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFileSystemsRequest {
  FileSystemIds?: string[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateFileSystemAliasesRequest {
  ClientRequestToken?: string | null;
  FileSystemId: string;
  Aliases: string[];
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateFileSystemRequest {
  FileSystemId: string;
  ClientRequestToken?: string | null;
  StorageCapacity?: number | null;
  WindowsConfiguration?: UpdateFileSystemWindowsConfiguration | null;
  LustreConfiguration?: UpdateFileSystemLustreConfiguration | null;
}

// refs: 1 - tags: named, output
export interface AssociateFileSystemAliasesResponse {
  Aliases?: Alias[] | null;
}

// refs: 1 - tags: named, output
export interface CancelDataRepositoryTaskResponse {
  Lifecycle?: DataRepositoryTaskLifecycle | null;
  TaskId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBackupResponse {
  Backup?: Backup | null;
}

// refs: 1 - tags: named, output
export interface CreateDataRepositoryTaskResponse {
  DataRepositoryTask?: DataRepositoryTask | null;
}

// refs: 1 - tags: named, output
export interface CreateFileSystemResponse {
  FileSystem?: FileSystem | null;
}

// refs: 1 - tags: named, output
export interface CreateFileSystemFromBackupResponse {
  FileSystem?: FileSystem | null;
}

// refs: 1 - tags: named, output
export interface DeleteBackupResponse {
  BackupId?: string | null;
  Lifecycle?: BackupLifecycle | null;
}

// refs: 1 - tags: named, output
export interface DeleteFileSystemResponse {
  FileSystemId?: string | null;
  Lifecycle?: FileSystemLifecycle | null;
  WindowsResponse?: DeleteFileSystemWindowsResponse | null;
  LustreResponse?: DeleteFileSystemLustreResponse | null;
}

// refs: 1 - tags: named, output
export interface DescribeBackupsResponse {
  Backups?: Backup[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDataRepositoryTasksResponse {
  DataRepositoryTasks?: DataRepositoryTask[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeFileSystemAliasesResponse {
  Aliases?: Alias[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeFileSystemsResponse {
  FileSystems?: FileSystem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisassociateFileSystemAliasesResponse {
  Aliases?: Alias[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateFileSystemResponse {
  FileSystem?: FileSystem | null;
}

// refs: 20 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DataRepositoryTaskType =
| "EXPORT_TO_REPOSITORY"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface CompletionReport {
  Enabled: boolean;
  Path?: string | null;
  Format?: ReportFormat | null;
  Scope?: ReportScope | null;
}
function fromCompletionReport(input?: CompletionReport | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
    Path: input["Path"],
    Format: input["Format"],
    Scope: input["Scope"],
  }
}
function toCompletionReport(root: jsonP.JSONValue): CompletionReport {
  return jsonP.readObj({
    required: {
      "Enabled": "b",
    },
    optional: {
      "Path": "s",
      "Format": (x: jsonP.JSONValue) => cmnP.readEnum<ReportFormat>(x),
      "Scope": (x: jsonP.JSONValue) => cmnP.readEnum<ReportScope>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ReportFormat =
| "REPORT_CSV_20191124"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ReportScope =
| "FAILED_FILES_ONLY"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type FileSystemType =
| "WINDOWS"
| "LUSTRE"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, enum, output
export type StorageType =
| "SSD"
| "HDD"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface CreateFileSystemWindowsConfiguration {
  ActiveDirectoryId?: string | null;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryConfiguration | null;
  DeploymentType?: WindowsDeploymentType | null;
  PreferredSubnetId?: string | null;
  ThroughputCapacity: number;
  WeeklyMaintenanceStartTime?: string | null;
  DailyAutomaticBackupStartTime?: string | null;
  AutomaticBackupRetentionDays?: number | null;
  CopyTagsToBackups?: boolean | null;
  Aliases?: string[] | null;
}
function fromCreateFileSystemWindowsConfiguration(input?: CreateFileSystemWindowsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ActiveDirectoryId: input["ActiveDirectoryId"],
    SelfManagedActiveDirectoryConfiguration: fromSelfManagedActiveDirectoryConfiguration(input["SelfManagedActiveDirectoryConfiguration"]),
    DeploymentType: input["DeploymentType"],
    PreferredSubnetId: input["PreferredSubnetId"],
    ThroughputCapacity: input["ThroughputCapacity"],
    WeeklyMaintenanceStartTime: input["WeeklyMaintenanceStartTime"],
    DailyAutomaticBackupStartTime: input["DailyAutomaticBackupStartTime"],
    AutomaticBackupRetentionDays: input["AutomaticBackupRetentionDays"],
    CopyTagsToBackups: input["CopyTagsToBackups"],
    Aliases: input["Aliases"],
  }
}

// refs: 2 - tags: input, named, interface
export interface SelfManagedActiveDirectoryConfiguration {
  DomainName: string;
  OrganizationalUnitDistinguishedName?: string | null;
  FileSystemAdministratorsGroup?: string | null;
  UserName: string;
  Password: string;
  DnsIps: string[];
}
function fromSelfManagedActiveDirectoryConfiguration(input?: SelfManagedActiveDirectoryConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DomainName: input["DomainName"],
    OrganizationalUnitDistinguishedName: input["OrganizationalUnitDistinguishedName"],
    FileSystemAdministratorsGroup: input["FileSystemAdministratorsGroup"],
    UserName: input["UserName"],
    Password: input["Password"],
    DnsIps: input["DnsIps"],
  }
}

// refs: 8 - tags: input, named, enum, output
export type WindowsDeploymentType =
| "MULTI_AZ_1"
| "SINGLE_AZ_1"
| "SINGLE_AZ_2"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface CreateFileSystemLustreConfiguration {
  WeeklyMaintenanceStartTime?: string | null;
  ImportPath?: string | null;
  ExportPath?: string | null;
  ImportedFileChunkSize?: number | null;
  DeploymentType?: LustreDeploymentType | null;
  AutoImportPolicy?: AutoImportPolicyType | null;
  PerUnitStorageThroughput?: number | null;
  DailyAutomaticBackupStartTime?: string | null;
  AutomaticBackupRetentionDays?: number | null;
  CopyTagsToBackups?: boolean | null;
  DriveCacheType?: DriveCacheType | null;
}
function fromCreateFileSystemLustreConfiguration(input?: CreateFileSystemLustreConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WeeklyMaintenanceStartTime: input["WeeklyMaintenanceStartTime"],
    ImportPath: input["ImportPath"],
    ExportPath: input["ExportPath"],
    ImportedFileChunkSize: input["ImportedFileChunkSize"],
    DeploymentType: input["DeploymentType"],
    AutoImportPolicy: input["AutoImportPolicy"],
    PerUnitStorageThroughput: input["PerUnitStorageThroughput"],
    DailyAutomaticBackupStartTime: input["DailyAutomaticBackupStartTime"],
    AutomaticBackupRetentionDays: input["AutomaticBackupRetentionDays"],
    CopyTagsToBackups: input["CopyTagsToBackups"],
    DriveCacheType: input["DriveCacheType"],
  }
}

// refs: 8 - tags: input, named, enum, output
export type LustreDeploymentType =
| "SCRATCH_1"
| "SCRATCH_2"
| "PERSISTENT_1"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type AutoImportPolicyType =
| "NONE"
| "NEW"
| "NEW_CHANGED"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, enum, output
export type DriveCacheType =
| "NONE"
| "READ"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DeleteFileSystemWindowsConfiguration {
  SkipFinalBackup?: boolean | null;
  FinalBackupTags?: Tag[] | null;
}
function fromDeleteFileSystemWindowsConfiguration(input?: DeleteFileSystemWindowsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SkipFinalBackup: input["SkipFinalBackup"],
    FinalBackupTags: input["FinalBackupTags"]?.map(x => fromTag(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface DeleteFileSystemLustreConfiguration {
  SkipFinalBackup?: boolean | null;
  FinalBackupTags?: Tag[] | null;
}
function fromDeleteFileSystemLustreConfiguration(input?: DeleteFileSystemLustreConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SkipFinalBackup: input["SkipFinalBackup"],
    FinalBackupTags: input["FinalBackupTags"]?.map(x => fromTag(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface Filter {
  Name?: FilterName | null;
  Values?: string[] | null;
}
function fromFilter(input?: Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type FilterName =
| "file-system-id"
| "backup-type"
| "file-system-type"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DataRepositoryTaskFilter {
  Name?: DataRepositoryTaskFilterName | null;
  Values?: string[] | null;
}
function fromDataRepositoryTaskFilter(input?: DataRepositoryTaskFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type DataRepositoryTaskFilterName =
| "file-system-id"
| "task-lifecycle"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateFileSystemWindowsConfiguration {
  WeeklyMaintenanceStartTime?: string | null;
  DailyAutomaticBackupStartTime?: string | null;
  AutomaticBackupRetentionDays?: number | null;
  ThroughputCapacity?: number | null;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryConfigurationUpdates | null;
}
function fromUpdateFileSystemWindowsConfiguration(input?: UpdateFileSystemWindowsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WeeklyMaintenanceStartTime: input["WeeklyMaintenanceStartTime"],
    DailyAutomaticBackupStartTime: input["DailyAutomaticBackupStartTime"],
    AutomaticBackupRetentionDays: input["AutomaticBackupRetentionDays"],
    ThroughputCapacity: input["ThroughputCapacity"],
    SelfManagedActiveDirectoryConfiguration: fromSelfManagedActiveDirectoryConfigurationUpdates(input["SelfManagedActiveDirectoryConfiguration"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface SelfManagedActiveDirectoryConfigurationUpdates {
  UserName?: string | null;
  Password?: string | null;
  DnsIps?: string[] | null;
}
function fromSelfManagedActiveDirectoryConfigurationUpdates(input?: SelfManagedActiveDirectoryConfigurationUpdates | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserName: input["UserName"],
    Password: input["Password"],
    DnsIps: input["DnsIps"],
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateFileSystemLustreConfiguration {
  WeeklyMaintenanceStartTime?: string | null;
  DailyAutomaticBackupStartTime?: string | null;
  AutomaticBackupRetentionDays?: number | null;
  AutoImportPolicy?: AutoImportPolicyType | null;
}
function fromUpdateFileSystemLustreConfiguration(input?: UpdateFileSystemLustreConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WeeklyMaintenanceStartTime: input["WeeklyMaintenanceStartTime"],
    DailyAutomaticBackupStartTime: input["DailyAutomaticBackupStartTime"],
    AutomaticBackupRetentionDays: input["AutomaticBackupRetentionDays"],
    AutoImportPolicy: input["AutoImportPolicy"],
  }
}

// refs: 9 - tags: output, named, interface
export interface Alias {
  Name?: string | null;
  Lifecycle?: AliasLifecycle | null;
}
function toAlias(root: jsonP.JSONValue): Alias {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<AliasLifecycle>(x),
    },
  }, root);
}

// refs: 9 - tags: output, named, enum
export type AliasLifecycle =
| "AVAILABLE"
| "CREATING"
| "DELETING"
| "CREATE_FAILED"
| "DELETE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type DataRepositoryTaskLifecycle =
| "PENDING"
| "EXECUTING"
| "FAILED"
| "SUCCEEDED"
| "CANCELED"
| "CANCELING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Backup {
  BackupId: string;
  Lifecycle: BackupLifecycle;
  FailureDetails?: BackupFailureDetails | null;
  Type: BackupType;
  ProgressPercent?: number | null;
  CreationTime: Date | number;
  KmsKeyId?: string | null;
  ResourceARN?: string | null;
  Tags?: Tag[] | null;
  FileSystem: FileSystem;
  DirectoryInformation?: ActiveDirectoryBackupAttributes | null;
}
function toBackup(root: jsonP.JSONValue): Backup {
  return jsonP.readObj({
    required: {
      "BackupId": "s",
      "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<BackupLifecycle>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<BackupType>(x),
      "CreationTime": "d",
      "FileSystem": toFileSystem,
    },
    optional: {
      "FailureDetails": toBackupFailureDetails,
      "ProgressPercent": "n",
      "KmsKeyId": "s",
      "ResourceARN": "s",
      "Tags": [toTag],
      "DirectoryInformation": toActiveDirectoryBackupAttributes,
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type BackupLifecycle =
| "AVAILABLE"
| "CREATING"
| "TRANSFERRING"
| "DELETED"
| "FAILED"
| "PENDING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface BackupFailureDetails {
  Message?: string | null;
}
function toBackupFailureDetails(root: jsonP.JSONValue): BackupFailureDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type BackupType =
| "AUTOMATIC"
| "USER_INITIATED"
| "AWS_BACKUP"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: output, named, interface, recursed
export interface FileSystem {
  OwnerId?: string | null;
  CreationTime?: Date | number | null;
  FileSystemId?: string | null;
  FileSystemType?: FileSystemType | null;
  Lifecycle?: FileSystemLifecycle | null;
  FailureDetails?: FileSystemFailureDetails | null;
  StorageCapacity?: number | null;
  StorageType?: StorageType | null;
  VpcId?: string | null;
  SubnetIds?: string[] | null;
  NetworkInterfaceIds?: string[] | null;
  DNSName?: string | null;
  KmsKeyId?: string | null;
  ResourceARN?: string | null;
  Tags?: Tag[] | null;
  WindowsConfiguration?: WindowsFileSystemConfiguration | null;
  LustreConfiguration?: LustreFileSystemConfiguration | null;
  AdministrativeActions?: AdministrativeAction[] | null;
}
function toFileSystem(root: jsonP.JSONValue): FileSystem {
  return jsonP.readObj({
    required: {},
    optional: {
      "OwnerId": "s",
      "CreationTime": "d",
      "FileSystemId": "s",
      "FileSystemType": (x: jsonP.JSONValue) => cmnP.readEnum<FileSystemType>(x),
      "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<FileSystemLifecycle>(x),
      "FailureDetails": toFileSystemFailureDetails,
      "StorageCapacity": "n",
      "StorageType": (x: jsonP.JSONValue) => cmnP.readEnum<StorageType>(x),
      "VpcId": "s",
      "SubnetIds": ["s"],
      "NetworkInterfaceIds": ["s"],
      "DNSName": "s",
      "KmsKeyId": "s",
      "ResourceARN": "s",
      "Tags": [toTag],
      "WindowsConfiguration": toWindowsFileSystemConfiguration,
      "LustreConfiguration": toLustreFileSystemConfiguration,
      "AdministrativeActions": [toAdministrativeAction],
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type FileSystemLifecycle =
| "AVAILABLE"
| "CREATING"
| "FAILED"
| "DELETING"
| "MISCONFIGURED"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface FileSystemFailureDetails {
  Message?: string | null;
}
function toFileSystemFailureDetails(root: jsonP.JSONValue): FileSystemFailureDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface WindowsFileSystemConfiguration {
  ActiveDirectoryId?: string | null;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryAttributes | null;
  DeploymentType?: WindowsDeploymentType | null;
  RemoteAdministrationEndpoint?: string | null;
  PreferredSubnetId?: string | null;
  PreferredFileServerIp?: string | null;
  ThroughputCapacity?: number | null;
  MaintenanceOperationsInProgress?: FileSystemMaintenanceOperation[] | null;
  WeeklyMaintenanceStartTime?: string | null;
  DailyAutomaticBackupStartTime?: string | null;
  AutomaticBackupRetentionDays?: number | null;
  CopyTagsToBackups?: boolean | null;
  Aliases?: Alias[] | null;
}
function toWindowsFileSystemConfiguration(root: jsonP.JSONValue): WindowsFileSystemConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ActiveDirectoryId": "s",
      "SelfManagedActiveDirectoryConfiguration": toSelfManagedActiveDirectoryAttributes,
      "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<WindowsDeploymentType>(x),
      "RemoteAdministrationEndpoint": "s",
      "PreferredSubnetId": "s",
      "PreferredFileServerIp": "s",
      "ThroughputCapacity": "n",
      "MaintenanceOperationsInProgress": [(x: jsonP.JSONValue) => cmnP.readEnum<FileSystemMaintenanceOperation>(x)],
      "WeeklyMaintenanceStartTime": "s",
      "DailyAutomaticBackupStartTime": "s",
      "AutomaticBackupRetentionDays": "n",
      "CopyTagsToBackups": "b",
      "Aliases": [toAlias],
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface SelfManagedActiveDirectoryAttributes {
  DomainName?: string | null;
  OrganizationalUnitDistinguishedName?: string | null;
  FileSystemAdministratorsGroup?: string | null;
  UserName?: string | null;
  DnsIps?: string[] | null;
}
function toSelfManagedActiveDirectoryAttributes(root: jsonP.JSONValue): SelfManagedActiveDirectoryAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "DomainName": "s",
      "OrganizationalUnitDistinguishedName": "s",
      "FileSystemAdministratorsGroup": "s",
      "UserName": "s",
      "DnsIps": ["s"],
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type FileSystemMaintenanceOperation =
| "PATCHING"
| "BACKING_UP"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface LustreFileSystemConfiguration {
  WeeklyMaintenanceStartTime?: string | null;
  DataRepositoryConfiguration?: DataRepositoryConfiguration | null;
  DeploymentType?: LustreDeploymentType | null;
  PerUnitStorageThroughput?: number | null;
  MountName?: string | null;
  DailyAutomaticBackupStartTime?: string | null;
  AutomaticBackupRetentionDays?: number | null;
  CopyTagsToBackups?: boolean | null;
  DriveCacheType?: DriveCacheType | null;
}
function toLustreFileSystemConfiguration(root: jsonP.JSONValue): LustreFileSystemConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "WeeklyMaintenanceStartTime": "s",
      "DataRepositoryConfiguration": toDataRepositoryConfiguration,
      "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<LustreDeploymentType>(x),
      "PerUnitStorageThroughput": "n",
      "MountName": "s",
      "DailyAutomaticBackupStartTime": "s",
      "AutomaticBackupRetentionDays": "n",
      "CopyTagsToBackups": "b",
      "DriveCacheType": (x: jsonP.JSONValue) => cmnP.readEnum<DriveCacheType>(x),
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface DataRepositoryConfiguration {
  Lifecycle?: DataRepositoryLifecycle | null;
  ImportPath?: string | null;
  ExportPath?: string | null;
  ImportedFileChunkSize?: number | null;
  AutoImportPolicy?: AutoImportPolicyType | null;
  FailureDetails?: DataRepositoryFailureDetails | null;
}
function toDataRepositoryConfiguration(root: jsonP.JSONValue): DataRepositoryConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<DataRepositoryLifecycle>(x),
      "ImportPath": "s",
      "ExportPath": "s",
      "ImportedFileChunkSize": "n",
      "AutoImportPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<AutoImportPolicyType>(x),
      "FailureDetails": toDataRepositoryFailureDetails,
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type DataRepositoryLifecycle =
| "CREATING"
| "AVAILABLE"
| "MISCONFIGURED"
| "UPDATING"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface DataRepositoryFailureDetails {
  Message?: string | null;
}
function toDataRepositoryFailureDetails(root: jsonP.JSONValue): DataRepositoryFailureDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface, recursive
export interface AdministrativeAction {
  AdministrativeActionType?: AdministrativeActionType | null;
  ProgressPercent?: number | null;
  RequestTime?: Date | number | null;
  Status?: Status | null;
  TargetFileSystemValues?: FileSystem | null;
  FailureDetails?: AdministrativeActionFailureDetails | null;
}
function toAdministrativeAction(root: jsonP.JSONValue): AdministrativeAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdministrativeActionType": (x: jsonP.JSONValue) => cmnP.readEnum<AdministrativeActionType>(x),
      "ProgressPercent": "n",
      "RequestTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      "TargetFileSystemValues": toFileSystem,
      "FailureDetails": toAdministrativeActionFailureDetails,
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type AdministrativeActionType =
| "FILE_SYSTEM_UPDATE"
| "STORAGE_OPTIMIZATION"
| "FILE_SYSTEM_ALIAS_ASSOCIATION"
| "FILE_SYSTEM_ALIAS_DISASSOCIATION"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type Status =
| "FAILED"
| "IN_PROGRESS"
| "PENDING"
| "COMPLETED"
| "UPDATED_OPTIMIZING"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface AdministrativeActionFailureDetails {
  Message?: string | null;
}
function toAdministrativeActionFailureDetails(root: jsonP.JSONValue): AdministrativeActionFailureDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ActiveDirectoryBackupAttributes {
  DomainName?: string | null;
  ActiveDirectoryId?: string | null;
}
function toActiveDirectoryBackupAttributes(root: jsonP.JSONValue): ActiveDirectoryBackupAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "DomainName": "s",
      "ActiveDirectoryId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DataRepositoryTask {
  TaskId: string;
  Lifecycle: DataRepositoryTaskLifecycle;
  Type: DataRepositoryTaskType;
  CreationTime: Date | number;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  ResourceARN?: string | null;
  Tags?: Tag[] | null;
  FileSystemId: string;
  Paths?: string[] | null;
  FailureDetails?: DataRepositoryTaskFailureDetails | null;
  Status?: DataRepositoryTaskStatus | null;
  Report?: CompletionReport | null;
}
function toDataRepositoryTask(root: jsonP.JSONValue): DataRepositoryTask {
  return jsonP.readObj({
    required: {
      "TaskId": "s",
      "Lifecycle": (x: jsonP.JSONValue) => cmnP.readEnum<DataRepositoryTaskLifecycle>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DataRepositoryTaskType>(x),
      "CreationTime": "d",
      "FileSystemId": "s",
    },
    optional: {
      "StartTime": "d",
      "EndTime": "d",
      "ResourceARN": "s",
      "Tags": [toTag],
      "Paths": ["s"],
      "FailureDetails": toDataRepositoryTaskFailureDetails,
      "Status": toDataRepositoryTaskStatus,
      "Report": toCompletionReport,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DataRepositoryTaskFailureDetails {
  Message?: string | null;
}
function toDataRepositoryTaskFailureDetails(root: jsonP.JSONValue): DataRepositoryTaskFailureDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DataRepositoryTaskStatus {
  TotalCount?: number | null;
  SucceededCount?: number | null;
  FailedCount?: number | null;
  LastUpdatedTime?: Date | number | null;
}
function toDataRepositoryTaskStatus(root: jsonP.JSONValue): DataRepositoryTaskStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "TotalCount": "n",
      "SucceededCount": "n",
      "FailedCount": "n",
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeleteFileSystemWindowsResponse {
  FinalBackupId?: string | null;
  FinalBackupTags?: Tag[] | null;
}
function toDeleteFileSystemWindowsResponse(root: jsonP.JSONValue): DeleteFileSystemWindowsResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "FinalBackupId": "s",
      "FinalBackupTags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeleteFileSystemLustreResponse {
  FinalBackupId?: string | null;
  FinalBackupTags?: Tag[] | null;
}
function toDeleteFileSystemLustreResponse(root: jsonP.JSONValue): DeleteFileSystemLustreResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "FinalBackupId": "s",
      "FinalBackupTags": [toTag],
    },
  }, root);
}
