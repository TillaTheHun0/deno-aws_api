// Autogenerated API client for: AWS Marketplace Entitlement Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class MarketplaceEntitlementService {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MarketplaceEntitlementService.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-01-11",
    "endpointPrefix": "entitlement.marketplace",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Marketplace Entitlement Service",
    "serviceId": "Marketplace Entitlement Service",
    "signatureVersion": "v4",
    "signingName": "aws-marketplace",
    "targetPrefix": "AWSMPEntitlementService",
    "uid": "entitlement.marketplace-2017-01-11"
  };

  async getEntitlements(
    {abortSignal, ...params}: RequestConfig & s.GetEntitlementsRequest,
  ): Promise<s.GetEntitlementsResult> {
    const body: jsonP.JSONObject = {
      ProductCode: params["ProductCode"],
      Filter: params["Filter"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEntitlements",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Entitlements": [toEntitlement],
        "NextToken": "s",
      },
    }, await resp.json());
  }

}

function toEntitlement(root: jsonP.JSONValue): s.Entitlement {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProductCode": "s",
      "Dimension": "s",
      "CustomerIdentifier": "s",
      "Value": toEntitlementValue,
      "ExpirationDate": "d",
    },
  }, root);
}

function toEntitlementValue(root: jsonP.JSONValue): s.EntitlementValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "IntegerValue": "n",
      "DoubleValue": "n",
      "BooleanValue": "b",
      "StringValue": "s",
    },
  }, root);
}
