// Autogenerated API client for: Amazon WorkSpaces

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class WorkSpaces {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WorkSpaces.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2015-04-08",
    "endpointPrefix": "workspaces",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon WorkSpaces",
    "serviceId": "WorkSpaces",
    "signatureVersion": "v4",
    "targetPrefix": "WorkspacesService",
    "uid": "workspaces-2015-04-08"
  };

  async associateConnectionAlias(
    {abortSignal, ...params}: RequestConfig & s.AssociateConnectionAliasRequest,
  ): Promise<s.AssociateConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConnectionIdentifier": "s",
      },
    }, await resp.json());
  }

  async associateIpGroups(
    {abortSignal, ...params}: RequestConfig & s.AssociateIpGroupsRequest,
  ): Promise<s.AssociateIpGroupsResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
      GroupIds: params["GroupIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateIpGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async authorizeIpRules(
    {abortSignal, ...params}: RequestConfig & s.AuthorizeIpRulesRequest,
  ): Promise<s.AuthorizeIpRulesResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
      UserRules: params["UserRules"]?.map(x => fromIpRuleItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AuthorizeIpRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async copyWorkspaceImage(
    {abortSignal, ...params}: RequestConfig & s.CopyWorkspaceImageRequest,
  ): Promise<s.CopyWorkspaceImageResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      SourceImageId: params["SourceImageId"],
      SourceRegion: params["SourceRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyWorkspaceImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageId": "s",
      },
    }, await resp.json());
  }

  async createConnectionAlias(
    {abortSignal, ...params}: RequestConfig & s.CreateConnectionAliasRequest,
  ): Promise<s.CreateConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      ConnectionString: params["ConnectionString"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AliasId": "s",
      },
    }, await resp.json());
  }

  async createIpGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateIpGroupRequest,
  ): Promise<s.CreateIpGroupResult> {
    const body: jsonP.JSONObject = {
      GroupName: params["GroupName"],
      GroupDesc: params["GroupDesc"],
      UserRules: params["UserRules"]?.map(x => fromIpRuleItem(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIpGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async createTags(
    {abortSignal, ...params}: RequestConfig & s.CreateTagsRequest,
  ): Promise<s.CreateTagsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.CreateWorkspacesRequest,
  ): Promise<s.CreateWorkspacesResult> {
    const body: jsonP.JSONObject = {
      Workspaces: params["Workspaces"]?.map(x => fromWorkspaceRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedCreateWorkspaceRequest],
        "PendingRequests": [toWorkspace],
      },
    }, await resp.json());
  }

  async deleteConnectionAlias(
    {abortSignal, ...params}: RequestConfig & s.DeleteConnectionAliasRequest,
  ): Promise<s.DeleteConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteIpGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteIpGroupRequest,
  ): Promise<s.DeleteIpGroupResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIpGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTags(
    {abortSignal, ...params}: RequestConfig & s.DeleteTagsRequest,
  ): Promise<s.DeleteTagsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWorkspaceImage(
    {abortSignal, ...params}: RequestConfig & s.DeleteWorkspaceImageRequest,
  ): Promise<s.DeleteWorkspaceImageResult> {
    const body: jsonP.JSONObject = {
      ImageId: params["ImageId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteWorkspaceImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterWorkspaceDirectory(
    {abortSignal, ...params}: RequestConfig & s.DeregisterWorkspaceDirectoryRequest,
  ): Promise<s.DeregisterWorkspaceDirectoryResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterWorkspaceDirectory",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAccount(
    {abortSignal, ...params}: RequestConfig & s.DescribeAccountRequest = {},
  ): Promise<s.DescribeAccountResult> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedTenancySupport": (x: jsonP.JSONValue) => cmnP.readEnum<s.DedicatedTenancySupportResultEnum>(x),
        "DedicatedTenancyManagementCidrRange": "s",
      },
    }, await resp.json());
  }

  async describeAccountModifications(
    {abortSignal, ...params}: RequestConfig & s.DescribeAccountModificationsRequest = {},
  ): Promise<s.DescribeAccountModificationsResult> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountModifications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountModifications": [toAccountModification],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeClientProperties(
    {abortSignal, ...params}: RequestConfig & s.DescribeClientPropertiesRequest,
  ): Promise<s.DescribeClientPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceIds: params["ResourceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeClientProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClientPropertiesList": [toClientPropertiesResult],
      },
    }, await resp.json());
  }

  async describeConnectionAliasPermissions(
    {abortSignal, ...params}: RequestConfig & s.DescribeConnectionAliasPermissionsRequest,
  ): Promise<s.DescribeConnectionAliasPermissionsResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectionAliasPermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AliasId": "s",
        "ConnectionAliasPermissions": [toConnectionAliasPermission],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConnectionAliases(
    {abortSignal, ...params}: RequestConfig & s.DescribeConnectionAliasesRequest = {},
  ): Promise<s.DescribeConnectionAliasesResult> {
    const body: jsonP.JSONObject = {
      AliasIds: params["AliasIds"],
      ResourceId: params["ResourceId"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectionAliases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConnectionAliases": [toConnectionAlias],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeIpGroups(
    {abortSignal, ...params}: RequestConfig & s.DescribeIpGroupsRequest = {},
  ): Promise<s.DescribeIpGroupsResult> {
    const body: jsonP.JSONObject = {
      GroupIds: params["GroupIds"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIpGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Result": [toWorkspacesIpGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeTags(
    {abortSignal, ...params}: RequestConfig & s.DescribeTagsRequest,
  ): Promise<s.DescribeTagsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagList": [toTag],
      },
    }, await resp.json());
  }

  async describeWorkspaceBundles(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspaceBundlesRequest = {},
  ): Promise<s.DescribeWorkspaceBundlesResult> {
    const body: jsonP.JSONObject = {
      BundleIds: params["BundleIds"],
      Owner: params["Owner"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceBundles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bundles": [toWorkspaceBundle],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceDirectories(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspaceDirectoriesRequest = {},
  ): Promise<s.DescribeWorkspaceDirectoriesResult> {
    const body: jsonP.JSONObject = {
      DirectoryIds: params["DirectoryIds"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceDirectories",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Directories": [toWorkspaceDirectory],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceImagePermissions(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspaceImagePermissionsRequest,
  ): Promise<s.DescribeWorkspaceImagePermissionsResult> {
    const body: jsonP.JSONObject = {
      ImageId: params["ImageId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceImagePermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageId": "s",
        "ImagePermissions": [toImagePermission],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceImages(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspaceImagesRequest = {},
  ): Promise<s.DescribeWorkspaceImagesResult> {
    const body: jsonP.JSONObject = {
      ImageIds: params["ImageIds"],
      ImageType: params["ImageType"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceImages",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Images": [toWorkspaceImage],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceSnapshots(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspaceSnapshotsRequest,
  ): Promise<s.DescribeWorkspaceSnapshotsResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RebuildSnapshots": [toSnapshot],
        "RestoreSnapshots": [toSnapshot],
      },
    }, await resp.json());
  }

  async describeWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspacesRequest = {},
  ): Promise<s.DescribeWorkspacesResult> {
    const body: jsonP.JSONObject = {
      WorkspaceIds: params["WorkspaceIds"],
      DirectoryId: params["DirectoryId"],
      UserName: params["UserName"],
      BundleId: params["BundleId"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Workspaces": [toWorkspace],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspacesConnectionStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeWorkspacesConnectionStatusRequest = {},
  ): Promise<s.DescribeWorkspacesConnectionStatusResult> {
    const body: jsonP.JSONObject = {
      WorkspaceIds: params["WorkspaceIds"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspacesConnectionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkspacesConnectionStatus": [toWorkspaceConnectionStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async disassociateConnectionAlias(
    {abortSignal, ...params}: RequestConfig & s.DisassociateConnectionAliasRequest,
  ): Promise<s.DisassociateConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateIpGroups(
    {abortSignal, ...params}: RequestConfig & s.DisassociateIpGroupsRequest,
  ): Promise<s.DisassociateIpGroupsResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
      GroupIds: params["GroupIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateIpGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async importWorkspaceImage(
    {abortSignal, ...params}: RequestConfig & s.ImportWorkspaceImageRequest,
  ): Promise<s.ImportWorkspaceImageResult> {
    const body: jsonP.JSONObject = {
      Ec2ImageId: params["Ec2ImageId"],
      IngestionProcess: params["IngestionProcess"],
      ImageName: params["ImageName"],
      ImageDescription: params["ImageDescription"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      Applications: params["Applications"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportWorkspaceImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageId": "s",
      },
    }, await resp.json());
  }

  async listAvailableManagementCidrRanges(
    {abortSignal, ...params}: RequestConfig & s.ListAvailableManagementCidrRangesRequest,
  ): Promise<s.ListAvailableManagementCidrRangesResult> {
    const body: jsonP.JSONObject = {
      ManagementCidrRangeConstraint: params["ManagementCidrRangeConstraint"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAvailableManagementCidrRanges",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ManagementCidrRanges": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async migrateWorkspace(
    {abortSignal, ...params}: RequestConfig & s.MigrateWorkspaceRequest,
  ): Promise<s.MigrateWorkspaceResult> {
    const body: jsonP.JSONObject = {
      SourceWorkspaceId: params["SourceWorkspaceId"],
      BundleId: params["BundleId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MigrateWorkspace",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SourceWorkspaceId": "s",
        "TargetWorkspaceId": "s",
      },
    }, await resp.json());
  }

  async modifyAccount(
    {abortSignal, ...params}: RequestConfig & s.ModifyAccountRequest = {},
  ): Promise<s.ModifyAccountResult> {
    const body: jsonP.JSONObject = {
      DedicatedTenancySupport: params["DedicatedTenancySupport"],
      DedicatedTenancyManagementCidrRange: params["DedicatedTenancyManagementCidrRange"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyClientProperties(
    {abortSignal, ...params}: RequestConfig & s.ModifyClientPropertiesRequest,
  ): Promise<s.ModifyClientPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      ClientProperties: fromClientProperties(params["ClientProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyClientProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifySelfservicePermissions(
    {abortSignal, ...params}: RequestConfig & s.ModifySelfservicePermissionsRequest,
  ): Promise<s.ModifySelfservicePermissionsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      SelfservicePermissions: fromSelfservicePermissions(params["SelfservicePermissions"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifySelfservicePermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceAccessProperties(
    {abortSignal, ...params}: RequestConfig & s.ModifyWorkspaceAccessPropertiesRequest,
  ): Promise<s.ModifyWorkspaceAccessPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      WorkspaceAccessProperties: fromWorkspaceAccessProperties(params["WorkspaceAccessProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceAccessProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceCreationProperties(
    {abortSignal, ...params}: RequestConfig & s.ModifyWorkspaceCreationPropertiesRequest,
  ): Promise<s.ModifyWorkspaceCreationPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      WorkspaceCreationProperties: fromWorkspaceCreationProperties(params["WorkspaceCreationProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceCreationProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceProperties(
    {abortSignal, ...params}: RequestConfig & s.ModifyWorkspacePropertiesRequest,
  ): Promise<s.ModifyWorkspacePropertiesResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
      WorkspaceProperties: fromWorkspaceProperties(params["WorkspaceProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceState(
    {abortSignal, ...params}: RequestConfig & s.ModifyWorkspaceStateRequest,
  ): Promise<s.ModifyWorkspaceStateResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
      WorkspaceState: params["WorkspaceState"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceState",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async rebootWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.RebootWorkspacesRequest,
  ): Promise<s.RebootWorkspacesResult> {
    const body: jsonP.JSONObject = {
      RebootWorkspaceRequests: params["RebootWorkspaceRequests"]?.map(x => fromRebootRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebootWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async rebuildWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.RebuildWorkspacesRequest,
  ): Promise<s.RebuildWorkspacesResult> {
    const body: jsonP.JSONObject = {
      RebuildWorkspaceRequests: params["RebuildWorkspaceRequests"]?.map(x => fromRebuildRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebuildWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async registerWorkspaceDirectory(
    {abortSignal, ...params}: RequestConfig & s.RegisterWorkspaceDirectoryRequest,
  ): Promise<s.RegisterWorkspaceDirectoryResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
      SubnetIds: params["SubnetIds"],
      EnableWorkDocs: params["EnableWorkDocs"],
      EnableSelfService: params["EnableSelfService"],
      Tenancy: params["Tenancy"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterWorkspaceDirectory",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async restoreWorkspace(
    {abortSignal, ...params}: RequestConfig & s.RestoreWorkspaceRequest,
  ): Promise<s.RestoreWorkspaceResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreWorkspace",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async revokeIpRules(
    {abortSignal, ...params}: RequestConfig & s.RevokeIpRulesRequest,
  ): Promise<s.RevokeIpRulesResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
      UserRules: params["UserRules"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RevokeIpRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.StartWorkspacesRequest,
  ): Promise<s.StartWorkspacesResult> {
    const body: jsonP.JSONObject = {
      StartWorkspaceRequests: params["StartWorkspaceRequests"]?.map(x => fromStartRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async stopWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.StopWorkspacesRequest,
  ): Promise<s.StopWorkspacesResult> {
    const body: jsonP.JSONObject = {
      StopWorkspaceRequests: params["StopWorkspaceRequests"]?.map(x => fromStopRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async terminateWorkspaces(
    {abortSignal, ...params}: RequestConfig & s.TerminateWorkspacesRequest,
  ): Promise<s.TerminateWorkspacesResult> {
    const body: jsonP.JSONObject = {
      TerminateWorkspaceRequests: params["TerminateWorkspaceRequests"]?.map(x => fromTerminateRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async updateConnectionAliasPermission(
    {abortSignal, ...params}: RequestConfig & s.UpdateConnectionAliasPermissionRequest,
  ): Promise<s.UpdateConnectionAliasPermissionResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
      ConnectionAliasPermission: fromConnectionAliasPermission(params["ConnectionAliasPermission"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectionAliasPermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRulesOfIpGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateRulesOfIpGroupRequest,
  ): Promise<s.UpdateRulesOfIpGroupResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
      UserRules: params["UserRules"]?.map(x => fromIpRuleItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRulesOfIpGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateWorkspaceImagePermission(
    {abortSignal, ...params}: RequestConfig & s.UpdateWorkspaceImagePermissionRequest,
  ): Promise<s.UpdateWorkspaceImagePermissionResult> {
    const body: jsonP.JSONObject = {
      ImageId: params["ImageId"],
      AllowCopyImage: params["AllowCopyImage"],
      SharedAccountId: params["SharedAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorkspaceImagePermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromIpRuleItem(input?: s.IpRuleItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ipRule: input["ipRule"],
    ruleDesc: input["ruleDesc"],
  }
}
function toIpRuleItem(root: jsonP.JSONValue): s.IpRuleItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ipRule": "s",
      "ruleDesc": "s",
    },
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

function fromWorkspaceRequest(input?: s.WorkspaceRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DirectoryId: input["DirectoryId"],
    UserName: input["UserName"],
    BundleId: input["BundleId"],
    VolumeEncryptionKey: input["VolumeEncryptionKey"],
    UserVolumeEncryptionEnabled: input["UserVolumeEncryptionEnabled"],
    RootVolumeEncryptionEnabled: input["RootVolumeEncryptionEnabled"],
    WorkspaceProperties: fromWorkspaceProperties(input["WorkspaceProperties"]),
    Tags: input["Tags"]?.map(x => fromTag(x)),
  }
}
function toWorkspaceRequest(root: jsonP.JSONValue): s.WorkspaceRequest {
  return jsonP.readObj({
    required: {
      "DirectoryId": "s",
      "UserName": "s",
      "BundleId": "s",
    },
    optional: {
      "VolumeEncryptionKey": "s",
      "UserVolumeEncryptionEnabled": "b",
      "RootVolumeEncryptionEnabled": "b",
      "WorkspaceProperties": toWorkspaceProperties,
      "Tags": [toTag],
    },
  }, root);
}

function fromWorkspaceProperties(input?: s.WorkspaceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RunningMode: input["RunningMode"],
    RunningModeAutoStopTimeoutInMinutes: input["RunningModeAutoStopTimeoutInMinutes"],
    RootVolumeSizeGib: input["RootVolumeSizeGib"],
    UserVolumeSizeGib: input["UserVolumeSizeGib"],
    ComputeTypeName: input["ComputeTypeName"],
  }
}
function toWorkspaceProperties(root: jsonP.JSONValue): s.WorkspaceProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "RunningMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.RunningMode>(x),
      "RunningModeAutoStopTimeoutInMinutes": "n",
      "RootVolumeSizeGib": "n",
      "UserVolumeSizeGib": "n",
      "ComputeTypeName": (x: jsonP.JSONValue) => cmnP.readEnum<s.Compute>(x),
    },
  }, root);
}

function fromClientProperties(input?: s.ClientProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReconnectEnabled: input["ReconnectEnabled"],
  }
}
function toClientProperties(root: jsonP.JSONValue): s.ClientProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReconnectEnabled": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReconnectEnum>(x),
    },
  }, root);
}

function fromSelfservicePermissions(input?: s.SelfservicePermissions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RestartWorkspace: input["RestartWorkspace"],
    IncreaseVolumeSize: input["IncreaseVolumeSize"],
    ChangeComputeType: input["ChangeComputeType"],
    SwitchRunningMode: input["SwitchRunningMode"],
    RebuildWorkspace: input["RebuildWorkspace"],
  }
}
function toSelfservicePermissions(root: jsonP.JSONValue): s.SelfservicePermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "RestartWorkspace": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReconnectEnum>(x),
      "IncreaseVolumeSize": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReconnectEnum>(x),
      "ChangeComputeType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReconnectEnum>(x),
      "SwitchRunningMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReconnectEnum>(x),
      "RebuildWorkspace": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReconnectEnum>(x),
    },
  }, root);
}

function fromWorkspaceAccessProperties(input?: s.WorkspaceAccessProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeviceTypeWindows: input["DeviceTypeWindows"],
    DeviceTypeOsx: input["DeviceTypeOsx"],
    DeviceTypeWeb: input["DeviceTypeWeb"],
    DeviceTypeIos: input["DeviceTypeIos"],
    DeviceTypeAndroid: input["DeviceTypeAndroid"],
    DeviceTypeChromeOs: input["DeviceTypeChromeOs"],
    DeviceTypeZeroClient: input["DeviceTypeZeroClient"],
  }
}
function toWorkspaceAccessProperties(root: jsonP.JSONValue): s.WorkspaceAccessProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceTypeWindows": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessPropertyValue>(x),
      "DeviceTypeOsx": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessPropertyValue>(x),
      "DeviceTypeWeb": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessPropertyValue>(x),
      "DeviceTypeIos": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessPropertyValue>(x),
      "DeviceTypeAndroid": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessPropertyValue>(x),
      "DeviceTypeChromeOs": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessPropertyValue>(x),
      "DeviceTypeZeroClient": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessPropertyValue>(x),
    },
  }, root);
}

function fromWorkspaceCreationProperties(input?: s.WorkspaceCreationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EnableWorkDocs: input["EnableWorkDocs"],
    EnableInternetAccess: input["EnableInternetAccess"],
    DefaultOu: input["DefaultOu"],
    CustomSecurityGroupId: input["CustomSecurityGroupId"],
    UserEnabledAsLocalAdministrator: input["UserEnabledAsLocalAdministrator"],
    EnableMaintenanceMode: input["EnableMaintenanceMode"],
  }
}

function fromRebootRequest(input?: s.RebootRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

function fromRebuildRequest(input?: s.RebuildRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

function fromStartRequest(input?: s.StartRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

function fromStopRequest(input?: s.StopRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

function fromTerminateRequest(input?: s.TerminateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

function fromConnectionAliasPermission(input?: s.ConnectionAliasPermission | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SharedAccountId: input["SharedAccountId"],
    AllowAssociation: input["AllowAssociation"],
  }
}
function toConnectionAliasPermission(root: jsonP.JSONValue): s.ConnectionAliasPermission {
  return jsonP.readObj({
    required: {
      "SharedAccountId": "s",
      "AllowAssociation": "b",
    },
    optional: {},
  }, root);
}

function toFailedCreateWorkspaceRequest(root: jsonP.JSONValue): s.FailedCreateWorkspaceRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceRequest": toWorkspaceRequest,
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

function toWorkspace(root: jsonP.JSONValue): s.Workspace {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceId": "s",
      "DirectoryId": "s",
      "UserName": "s",
      "IpAddress": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkspaceState>(x),
      "BundleId": "s",
      "SubnetId": "s",
      "ErrorMessage": "s",
      "ErrorCode": "s",
      "ComputerName": "s",
      "VolumeEncryptionKey": "s",
      "UserVolumeEncryptionEnabled": "b",
      "RootVolumeEncryptionEnabled": "b",
      "WorkspaceProperties": toWorkspaceProperties,
      "ModificationStates": [toModificationState],
    },
  }, root);
}

function toModificationState(root: jsonP.JSONValue): s.ModificationState {
  return jsonP.readObj({
    required: {},
    optional: {
      "Resource": (x: jsonP.JSONValue) => cmnP.readEnum<s.ModificationResourceEnum>(x),
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.ModificationStateEnum>(x),
    },
  }, root);
}

function toAccountModification(root: jsonP.JSONValue): s.AccountModification {
  return jsonP.readObj({
    required: {},
    optional: {
      "ModificationState": (x: jsonP.JSONValue) => cmnP.readEnum<s.DedicatedTenancyModificationStateEnum>(x),
      "DedicatedTenancySupport": (x: jsonP.JSONValue) => cmnP.readEnum<s.DedicatedTenancySupportResultEnum>(x),
      "DedicatedTenancyManagementCidrRange": "s",
      "StartTime": "d",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

function toClientPropertiesResult(root: jsonP.JSONValue): s.ClientPropertiesResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "ClientProperties": toClientProperties,
    },
  }, root);
}

function toConnectionAlias(root: jsonP.JSONValue): s.ConnectionAlias {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConnectionString": "s",
      "AliasId": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectionAliasState>(x),
      "OwnerAccountId": "s",
      "Associations": [toConnectionAliasAssociation],
    },
  }, root);
}

function toConnectionAliasAssociation(root: jsonP.JSONValue): s.ConnectionAliasAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssociationStatus>(x),
      "AssociatedAccountId": "s",
      "ResourceId": "s",
      "ConnectionIdentifier": "s",
    },
  }, root);
}

function toWorkspacesIpGroup(root: jsonP.JSONValue): s.WorkspacesIpGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "groupId": "s",
      "groupName": "s",
      "groupDesc": "s",
      "userRules": [toIpRuleItem],
    },
  }, root);
}

function toWorkspaceBundle(root: jsonP.JSONValue): s.WorkspaceBundle {
  return jsonP.readObj({
    required: {},
    optional: {
      "BundleId": "s",
      "Name": "s",
      "Owner": "s",
      "Description": "s",
      "ImageId": "s",
      "RootStorage": toRootStorage,
      "UserStorage": toUserStorage,
      "ComputeType": toComputeType,
      "LastUpdatedTime": "d",
    },
  }, root);
}

function toRootStorage(root: jsonP.JSONValue): s.RootStorage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Capacity": "s",
    },
  }, root);
}

function toUserStorage(root: jsonP.JSONValue): s.UserStorage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Capacity": "s",
    },
  }, root);
}

function toComputeType(root: jsonP.JSONValue): s.ComputeType {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<s.Compute>(x),
    },
  }, root);
}

function toWorkspaceDirectory(root: jsonP.JSONValue): s.WorkspaceDirectory {
  return jsonP.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "Alias": "s",
      "DirectoryName": "s",
      "RegistrationCode": "s",
      "SubnetIds": ["s"],
      "DnsIpAddresses": ["s"],
      "CustomerUserName": "s",
      "IamRoleId": "s",
      "DirectoryType": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkspaceDirectoryType>(x),
      "WorkspaceSecurityGroupId": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkspaceDirectoryState>(x),
      "WorkspaceCreationProperties": toDefaultWorkspaceCreationProperties,
      "ipGroupIds": ["s"],
      "WorkspaceAccessProperties": toWorkspaceAccessProperties,
      "Tenancy": (x: jsonP.JSONValue) => cmnP.readEnum<s.Tenancy>(x),
      "SelfservicePermissions": toSelfservicePermissions,
    },
  }, root);
}

function toDefaultWorkspaceCreationProperties(root: jsonP.JSONValue): s.DefaultWorkspaceCreationProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "EnableWorkDocs": "b",
      "EnableInternetAccess": "b",
      "DefaultOu": "s",
      "CustomSecurityGroupId": "s",
      "UserEnabledAsLocalAdministrator": "b",
      "EnableMaintenanceMode": "b",
    },
  }, root);
}

function toImagePermission(root: jsonP.JSONValue): s.ImagePermission {
  return jsonP.readObj({
    required: {},
    optional: {
      "SharedAccountId": "s",
    },
  }, root);
}

function toWorkspaceImage(root: jsonP.JSONValue): s.WorkspaceImage {
  return jsonP.readObj({
    required: {},
    optional: {
      "ImageId": "s",
      "Name": "s",
      "Description": "s",
      "OperatingSystem": toOperatingSystem,
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkspaceImageState>(x),
      "RequiredTenancy": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkspaceImageRequiredTenancy>(x),
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "Created": "d",
      "OwnerAccountId": "s",
    },
  }, root);
}

function toOperatingSystem(root: jsonP.JSONValue): s.OperatingSystem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.OperatingSystemType>(x),
    },
  }, root);
}

function toSnapshot(root: jsonP.JSONValue): s.Snapshot {
  return jsonP.readObj({
    required: {},
    optional: {
      "SnapshotTime": "d",
    },
  }, root);
}

function toWorkspaceConnectionStatus(root: jsonP.JSONValue): s.WorkspaceConnectionStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceId": "s",
      "ConnectionState": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectionState>(x),
      "ConnectionStateCheckTimestamp": "d",
      "LastKnownUserConnectionTimestamp": "d",
    },
  }, root);
}

function toFailedWorkspaceChangeRequest(root: jsonP.JSONValue): s.FailedWorkspaceChangeRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}
