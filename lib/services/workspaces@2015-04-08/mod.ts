// Autogenerated API client for: Amazon WorkSpaces

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class WorkSpaces {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WorkSpaces.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-04-08",
    "endpointPrefix": "workspaces",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon WorkSpaces",
    "serviceId": "WorkSpaces",
    "signatureVersion": "v4",
    "targetPrefix": "WorkspacesService",
    "uid": "workspaces-2015-04-08"
  };

  async associateConnectionAlias(
    {abortSignal, ...params}: RequestConfig & AssociateConnectionAliasRequest,
  ): Promise<AssociateConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConnectionIdentifier": "s",
      },
    }, await resp.json());
  }

  async associateIpGroups(
    {abortSignal, ...params}: RequestConfig & AssociateIpGroupsRequest,
  ): Promise<AssociateIpGroupsResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
      GroupIds: params["GroupIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateIpGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async authorizeIpRules(
    {abortSignal, ...params}: RequestConfig & AuthorizeIpRulesRequest,
  ): Promise<AuthorizeIpRulesResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
      UserRules: params["UserRules"]?.map(x => fromIpRuleItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AuthorizeIpRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async copyWorkspaceImage(
    {abortSignal, ...params}: RequestConfig & CopyWorkspaceImageRequest,
  ): Promise<CopyWorkspaceImageResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      SourceImageId: params["SourceImageId"],
      SourceRegion: params["SourceRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyWorkspaceImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageId": "s",
      },
    }, await resp.json());
  }

  async createConnectionAlias(
    {abortSignal, ...params}: RequestConfig & CreateConnectionAliasRequest,
  ): Promise<CreateConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      ConnectionString: params["ConnectionString"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AliasId": "s",
      },
    }, await resp.json());
  }

  async createIpGroup(
    {abortSignal, ...params}: RequestConfig & CreateIpGroupRequest,
  ): Promise<CreateIpGroupResult> {
    const body: jsonP.JSONObject = {
      GroupName: params["GroupName"],
      GroupDesc: params["GroupDesc"],
      UserRules: params["UserRules"]?.map(x => fromIpRuleItem(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIpGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async createTags(
    {abortSignal, ...params}: RequestConfig & CreateTagsRequest,
  ): Promise<CreateTagsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createWorkspaces(
    {abortSignal, ...params}: RequestConfig & CreateWorkspacesRequest,
  ): Promise<CreateWorkspacesResult> {
    const body: jsonP.JSONObject = {
      Workspaces: params["Workspaces"]?.map(x => fromWorkspaceRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedCreateWorkspaceRequest],
        "PendingRequests": [toWorkspace],
      },
    }, await resp.json());
  }

  async deleteConnectionAlias(
    {abortSignal, ...params}: RequestConfig & DeleteConnectionAliasRequest,
  ): Promise<DeleteConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteIpGroup(
    {abortSignal, ...params}: RequestConfig & DeleteIpGroupRequest,
  ): Promise<DeleteIpGroupResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIpGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTags(
    {abortSignal, ...params}: RequestConfig & DeleteTagsRequest,
  ): Promise<DeleteTagsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWorkspaceImage(
    {abortSignal, ...params}: RequestConfig & DeleteWorkspaceImageRequest,
  ): Promise<DeleteWorkspaceImageResult> {
    const body: jsonP.JSONObject = {
      ImageId: params["ImageId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteWorkspaceImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterWorkspaceDirectory(
    {abortSignal, ...params}: RequestConfig & DeregisterWorkspaceDirectoryRequest,
  ): Promise<DeregisterWorkspaceDirectoryResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterWorkspaceDirectory",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAccount(
    {abortSignal, ...params}: RequestConfig & DescribeAccountRequest = {},
  ): Promise<DescribeAccountResult> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedTenancySupport": (x: jsonP.JSONValue) => cmnP.readEnum<DedicatedTenancySupportResultEnum>(x),
        "DedicatedTenancyManagementCidrRange": "s",
      },
    }, await resp.json());
  }

  async describeAccountModifications(
    {abortSignal, ...params}: RequestConfig & DescribeAccountModificationsRequest = {},
  ): Promise<DescribeAccountModificationsResult> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountModifications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountModifications": [toAccountModification],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeClientProperties(
    {abortSignal, ...params}: RequestConfig & DescribeClientPropertiesRequest,
  ): Promise<DescribeClientPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceIds: params["ResourceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeClientProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClientPropertiesList": [toClientPropertiesResult],
      },
    }, await resp.json());
  }

  async describeConnectionAliasPermissions(
    {abortSignal, ...params}: RequestConfig & DescribeConnectionAliasPermissionsRequest,
  ): Promise<DescribeConnectionAliasPermissionsResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectionAliasPermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AliasId": "s",
        "ConnectionAliasPermissions": [toConnectionAliasPermission],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConnectionAliases(
    {abortSignal, ...params}: RequestConfig & DescribeConnectionAliasesRequest = {},
  ): Promise<DescribeConnectionAliasesResult> {
    const body: jsonP.JSONObject = {
      AliasIds: params["AliasIds"],
      ResourceId: params["ResourceId"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectionAliases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConnectionAliases": [toConnectionAlias],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeIpGroups(
    {abortSignal, ...params}: RequestConfig & DescribeIpGroupsRequest = {},
  ): Promise<DescribeIpGroupsResult> {
    const body: jsonP.JSONObject = {
      GroupIds: params["GroupIds"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIpGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Result": [toWorkspacesIpGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeTags(
    {abortSignal, ...params}: RequestConfig & DescribeTagsRequest,
  ): Promise<DescribeTagsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagList": [toTag],
      },
    }, await resp.json());
  }

  async describeWorkspaceBundles(
    {abortSignal, ...params}: RequestConfig & DescribeWorkspaceBundlesRequest = {},
  ): Promise<DescribeWorkspaceBundlesResult> {
    const body: jsonP.JSONObject = {
      BundleIds: params["BundleIds"],
      Owner: params["Owner"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceBundles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bundles": [toWorkspaceBundle],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceDirectories(
    {abortSignal, ...params}: RequestConfig & DescribeWorkspaceDirectoriesRequest = {},
  ): Promise<DescribeWorkspaceDirectoriesResult> {
    const body: jsonP.JSONObject = {
      DirectoryIds: params["DirectoryIds"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceDirectories",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Directories": [toWorkspaceDirectory],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceImagePermissions(
    {abortSignal, ...params}: RequestConfig & DescribeWorkspaceImagePermissionsRequest,
  ): Promise<DescribeWorkspaceImagePermissionsResult> {
    const body: jsonP.JSONObject = {
      ImageId: params["ImageId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceImagePermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageId": "s",
        "ImagePermissions": [toImagePermission],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceImages(
    {abortSignal, ...params}: RequestConfig & DescribeWorkspaceImagesRequest = {},
  ): Promise<DescribeWorkspaceImagesResult> {
    const body: jsonP.JSONObject = {
      ImageIds: params["ImageIds"],
      ImageType: params["ImageType"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceImages",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Images": [toWorkspaceImage],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspaceSnapshots(
    {abortSignal, ...params}: RequestConfig & DescribeWorkspaceSnapshotsRequest,
  ): Promise<DescribeWorkspaceSnapshotsResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaceSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RebuildSnapshots": [toSnapshot],
        "RestoreSnapshots": [toSnapshot],
      },
    }, await resp.json());
  }

  async describeWorkspaces(
    {abortSignal, ...params}: RequestConfig & DescribeWorkspacesRequest = {},
  ): Promise<DescribeWorkspacesResult> {
    const body: jsonP.JSONObject = {
      WorkspaceIds: params["WorkspaceIds"],
      DirectoryId: params["DirectoryId"],
      UserName: params["UserName"],
      BundleId: params["BundleId"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Workspaces": [toWorkspace],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeWorkspacesConnectionStatus(
    {abortSignal, ...params}: RequestConfig & DescribeWorkspacesConnectionStatusRequest = {},
  ): Promise<DescribeWorkspacesConnectionStatusResult> {
    const body: jsonP.JSONObject = {
      WorkspaceIds: params["WorkspaceIds"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkspacesConnectionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkspacesConnectionStatus": [toWorkspaceConnectionStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async disassociateConnectionAlias(
    {abortSignal, ...params}: RequestConfig & DisassociateConnectionAliasRequest,
  ): Promise<DisassociateConnectionAliasResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateConnectionAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateIpGroups(
    {abortSignal, ...params}: RequestConfig & DisassociateIpGroupsRequest,
  ): Promise<DisassociateIpGroupsResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
      GroupIds: params["GroupIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateIpGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async importWorkspaceImage(
    {abortSignal, ...params}: RequestConfig & ImportWorkspaceImageRequest,
  ): Promise<ImportWorkspaceImageResult> {
    const body: jsonP.JSONObject = {
      Ec2ImageId: params["Ec2ImageId"],
      IngestionProcess: params["IngestionProcess"],
      ImageName: params["ImageName"],
      ImageDescription: params["ImageDescription"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      Applications: params["Applications"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportWorkspaceImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageId": "s",
      },
    }, await resp.json());
  }

  async listAvailableManagementCidrRanges(
    {abortSignal, ...params}: RequestConfig & ListAvailableManagementCidrRangesRequest,
  ): Promise<ListAvailableManagementCidrRangesResult> {
    const body: jsonP.JSONObject = {
      ManagementCidrRangeConstraint: params["ManagementCidrRangeConstraint"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAvailableManagementCidrRanges",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ManagementCidrRanges": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async migrateWorkspace(
    {abortSignal, ...params}: RequestConfig & MigrateWorkspaceRequest,
  ): Promise<MigrateWorkspaceResult> {
    const body: jsonP.JSONObject = {
      SourceWorkspaceId: params["SourceWorkspaceId"],
      BundleId: params["BundleId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MigrateWorkspace",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SourceWorkspaceId": "s",
        "TargetWorkspaceId": "s",
      },
    }, await resp.json());
  }

  async modifyAccount(
    {abortSignal, ...params}: RequestConfig & ModifyAccountRequest = {},
  ): Promise<ModifyAccountResult> {
    const body: jsonP.JSONObject = {
      DedicatedTenancySupport: params["DedicatedTenancySupport"],
      DedicatedTenancyManagementCidrRange: params["DedicatedTenancyManagementCidrRange"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyClientProperties(
    {abortSignal, ...params}: RequestConfig & ModifyClientPropertiesRequest,
  ): Promise<ModifyClientPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      ClientProperties: fromClientProperties(params["ClientProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyClientProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifySelfservicePermissions(
    {abortSignal, ...params}: RequestConfig & ModifySelfservicePermissionsRequest,
  ): Promise<ModifySelfservicePermissionsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      SelfservicePermissions: fromSelfservicePermissions(params["SelfservicePermissions"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifySelfservicePermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceAccessProperties(
    {abortSignal, ...params}: RequestConfig & ModifyWorkspaceAccessPropertiesRequest,
  ): Promise<ModifyWorkspaceAccessPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      WorkspaceAccessProperties: fromWorkspaceAccessProperties(params["WorkspaceAccessProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceAccessProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceCreationProperties(
    {abortSignal, ...params}: RequestConfig & ModifyWorkspaceCreationPropertiesRequest,
  ): Promise<ModifyWorkspaceCreationPropertiesResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      WorkspaceCreationProperties: fromWorkspaceCreationProperties(params["WorkspaceCreationProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceCreationProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceProperties(
    {abortSignal, ...params}: RequestConfig & ModifyWorkspacePropertiesRequest,
  ): Promise<ModifyWorkspacePropertiesResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
      WorkspaceProperties: fromWorkspaceProperties(params["WorkspaceProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async modifyWorkspaceState(
    {abortSignal, ...params}: RequestConfig & ModifyWorkspaceStateRequest,
  ): Promise<ModifyWorkspaceStateResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
      WorkspaceState: params["WorkspaceState"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyWorkspaceState",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async rebootWorkspaces(
    {abortSignal, ...params}: RequestConfig & RebootWorkspacesRequest,
  ): Promise<RebootWorkspacesResult> {
    const body: jsonP.JSONObject = {
      RebootWorkspaceRequests: params["RebootWorkspaceRequests"]?.map(x => fromRebootRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebootWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async rebuildWorkspaces(
    {abortSignal, ...params}: RequestConfig & RebuildWorkspacesRequest,
  ): Promise<RebuildWorkspacesResult> {
    const body: jsonP.JSONObject = {
      RebuildWorkspaceRequests: params["RebuildWorkspaceRequests"]?.map(x => fromRebuildRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebuildWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async registerWorkspaceDirectory(
    {abortSignal, ...params}: RequestConfig & RegisterWorkspaceDirectoryRequest,
  ): Promise<RegisterWorkspaceDirectoryResult> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
      SubnetIds: params["SubnetIds"],
      EnableWorkDocs: params["EnableWorkDocs"],
      EnableSelfService: params["EnableSelfService"],
      Tenancy: params["Tenancy"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterWorkspaceDirectory",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async restoreWorkspace(
    {abortSignal, ...params}: RequestConfig & RestoreWorkspaceRequest,
  ): Promise<RestoreWorkspaceResult> {
    const body: jsonP.JSONObject = {
      WorkspaceId: params["WorkspaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreWorkspace",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async revokeIpRules(
    {abortSignal, ...params}: RequestConfig & RevokeIpRulesRequest,
  ): Promise<RevokeIpRulesResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
      UserRules: params["UserRules"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RevokeIpRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startWorkspaces(
    {abortSignal, ...params}: RequestConfig & StartWorkspacesRequest,
  ): Promise<StartWorkspacesResult> {
    const body: jsonP.JSONObject = {
      StartWorkspaceRequests: params["StartWorkspaceRequests"]?.map(x => fromStartRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async stopWorkspaces(
    {abortSignal, ...params}: RequestConfig & StopWorkspacesRequest,
  ): Promise<StopWorkspacesResult> {
    const body: jsonP.JSONObject = {
      StopWorkspaceRequests: params["StopWorkspaceRequests"]?.map(x => fromStopRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async terminateWorkspaces(
    {abortSignal, ...params}: RequestConfig & TerminateWorkspacesRequest,
  ): Promise<TerminateWorkspacesResult> {
    const body: jsonP.JSONObject = {
      TerminateWorkspaceRequests: params["TerminateWorkspaceRequests"]?.map(x => fromTerminateRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateWorkspaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedRequests": [toFailedWorkspaceChangeRequest],
      },
    }, await resp.json());
  }

  async updateConnectionAliasPermission(
    {abortSignal, ...params}: RequestConfig & UpdateConnectionAliasPermissionRequest,
  ): Promise<UpdateConnectionAliasPermissionResult> {
    const body: jsonP.JSONObject = {
      AliasId: params["AliasId"],
      ConnectionAliasPermission: fromConnectionAliasPermission(params["ConnectionAliasPermission"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectionAliasPermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRulesOfIpGroup(
    {abortSignal, ...params}: RequestConfig & UpdateRulesOfIpGroupRequest,
  ): Promise<UpdateRulesOfIpGroupResult> {
    const body: jsonP.JSONObject = {
      GroupId: params["GroupId"],
      UserRules: params["UserRules"]?.map(x => fromIpRuleItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRulesOfIpGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateWorkspaceImagePermission(
    {abortSignal, ...params}: RequestConfig & UpdateWorkspaceImagePermissionRequest,
  ): Promise<UpdateWorkspaceImagePermissionResult> {
    const body: jsonP.JSONObject = {
      ImageId: params["ImageId"],
      AllowCopyImage: params["AllowCopyImage"],
      SharedAccountId: params["SharedAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorkspaceImagePermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateConnectionAliasRequest {
  AliasId: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface AssociateIpGroupsRequest {
  DirectoryId: string;
  GroupIds: string[];
}

// refs: 1 - tags: named, input
export interface AuthorizeIpRulesRequest {
  GroupId: string;
  UserRules: IpRuleItem[];
}

// refs: 1 - tags: named, input
export interface CopyWorkspaceImageRequest {
  Name: string;
  Description?: string | null;
  SourceImageId: string;
  SourceRegion: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateConnectionAliasRequest {
  ConnectionString: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateIpGroupRequest {
  GroupName: string;
  GroupDesc?: string | null;
  UserRules?: IpRuleItem[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTagsRequest {
  ResourceId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface CreateWorkspacesRequest {
  Workspaces: WorkspaceRequest[];
}

// refs: 1 - tags: named, input
export interface DeleteConnectionAliasRequest {
  AliasId: string;
}

// refs: 1 - tags: named, input
export interface DeleteIpGroupRequest {
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface DeleteTagsRequest {
  ResourceId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface DeleteWorkspaceImageRequest {
  ImageId: string;
}

// refs: 1 - tags: named, input
export interface DeregisterWorkspaceDirectoryRequest {
  DirectoryId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAccountRequest {
}

// refs: 1 - tags: named, input
export interface DescribeAccountModificationsRequest {
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeClientPropertiesRequest {
  ResourceIds: string[];
}

// refs: 1 - tags: named, input
export interface DescribeConnectionAliasPermissionsRequest {
  AliasId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeConnectionAliasesRequest {
  AliasIds?: string[] | null;
  ResourceId?: string | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeIpGroupsRequest {
  GroupIds?: string[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeTagsRequest {
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeWorkspaceBundlesRequest {
  BundleIds?: string[] | null;
  Owner?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeWorkspaceDirectoriesRequest {
  DirectoryIds?: string[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeWorkspaceImagePermissionsRequest {
  ImageId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeWorkspaceImagesRequest {
  ImageIds?: string[] | null;
  ImageType?: ImageType | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeWorkspaceSnapshotsRequest {
  WorkspaceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeWorkspacesRequest {
  WorkspaceIds?: string[] | null;
  DirectoryId?: string | null;
  UserName?: string | null;
  BundleId?: string | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeWorkspacesConnectionStatusRequest {
  WorkspaceIds?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateConnectionAliasRequest {
  AliasId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateIpGroupsRequest {
  DirectoryId: string;
  GroupIds: string[];
}

// refs: 1 - tags: named, input
export interface ImportWorkspaceImageRequest {
  Ec2ImageId: string;
  IngestionProcess: WorkspaceImageIngestionProcess;
  ImageName: string;
  ImageDescription: string;
  Tags?: Tag[] | null;
  Applications?: Application[] | null;
}

// refs: 1 - tags: named, input
export interface ListAvailableManagementCidrRangesRequest {
  ManagementCidrRangeConstraint: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface MigrateWorkspaceRequest {
  SourceWorkspaceId: string;
  BundleId: string;
}

// refs: 1 - tags: named, input
export interface ModifyAccountRequest {
  DedicatedTenancySupport?: DedicatedTenancySupportEnum | null;
  DedicatedTenancyManagementCidrRange?: string | null;
}

// refs: 1 - tags: named, input
export interface ModifyClientPropertiesRequest {
  ResourceId: string;
  ClientProperties: ClientProperties;
}

// refs: 1 - tags: named, input
export interface ModifySelfservicePermissionsRequest {
  ResourceId: string;
  SelfservicePermissions: SelfservicePermissions;
}

// refs: 1 - tags: named, input
export interface ModifyWorkspaceAccessPropertiesRequest {
  ResourceId: string;
  WorkspaceAccessProperties: WorkspaceAccessProperties;
}

// refs: 1 - tags: named, input
export interface ModifyWorkspaceCreationPropertiesRequest {
  ResourceId: string;
  WorkspaceCreationProperties: WorkspaceCreationProperties;
}

// refs: 1 - tags: named, input
export interface ModifyWorkspacePropertiesRequest {
  WorkspaceId: string;
  WorkspaceProperties: WorkspaceProperties;
}

// refs: 1 - tags: named, input
export interface ModifyWorkspaceStateRequest {
  WorkspaceId: string;
  WorkspaceState: TargetWorkspaceState;
}

// refs: 1 - tags: named, input
export interface RebootWorkspacesRequest {
  RebootWorkspaceRequests: RebootRequest[];
}

// refs: 1 - tags: named, input
export interface RebuildWorkspacesRequest {
  RebuildWorkspaceRequests: RebuildRequest[];
}

// refs: 1 - tags: named, input
export interface RegisterWorkspaceDirectoryRequest {
  DirectoryId: string;
  SubnetIds?: string[] | null;
  EnableWorkDocs: boolean;
  EnableSelfService?: boolean | null;
  Tenancy?: Tenancy | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface RestoreWorkspaceRequest {
  WorkspaceId: string;
}

// refs: 1 - tags: named, input
export interface RevokeIpRulesRequest {
  GroupId: string;
  UserRules: string[];
}

// refs: 1 - tags: named, input
export interface StartWorkspacesRequest {
  StartWorkspaceRequests: StartRequest[];
}

// refs: 1 - tags: named, input
export interface StopWorkspacesRequest {
  StopWorkspaceRequests: StopRequest[];
}

// refs: 1 - tags: named, input
export interface TerminateWorkspacesRequest {
  TerminateWorkspaceRequests: TerminateRequest[];
}

// refs: 1 - tags: named, input
export interface UpdateConnectionAliasPermissionRequest {
  AliasId: string;
  ConnectionAliasPermission: ConnectionAliasPermission;
}

// refs: 1 - tags: named, input
export interface UpdateRulesOfIpGroupRequest {
  GroupId: string;
  UserRules: IpRuleItem[];
}

// refs: 1 - tags: named, input
export interface UpdateWorkspaceImagePermissionRequest {
  ImageId: string;
  AllowCopyImage: boolean;
  SharedAccountId: string;
}

// refs: 1 - tags: named, output
export interface AssociateConnectionAliasResult {
  ConnectionIdentifier?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateIpGroupsResult {
}

// refs: 1 - tags: named, output
export interface AuthorizeIpRulesResult {
}

// refs: 1 - tags: named, output
export interface CopyWorkspaceImageResult {
  ImageId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateConnectionAliasResult {
  AliasId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateIpGroupResult {
  GroupId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTagsResult {
}

// refs: 1 - tags: named, output
export interface CreateWorkspacesResult {
  FailedRequests?: FailedCreateWorkspaceRequest[] | null;
  PendingRequests?: Workspace[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteConnectionAliasResult {
}

// refs: 1 - tags: named, output
export interface DeleteIpGroupResult {
}

// refs: 1 - tags: named, output
export interface DeleteTagsResult {
}

// refs: 1 - tags: named, output
export interface DeleteWorkspaceImageResult {
}

// refs: 1 - tags: named, output
export interface DeregisterWorkspaceDirectoryResult {
}

// refs: 1 - tags: named, output
export interface DescribeAccountResult {
  DedicatedTenancySupport?: DedicatedTenancySupportResultEnum | null;
  DedicatedTenancyManagementCidrRange?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAccountModificationsResult {
  AccountModifications?: AccountModification[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeClientPropertiesResult {
  ClientPropertiesList?: ClientPropertiesResult[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeConnectionAliasPermissionsResult {
  AliasId?: string | null;
  ConnectionAliasPermissions?: ConnectionAliasPermission[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConnectionAliasesResult {
  ConnectionAliases?: ConnectionAlias[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeIpGroupsResult {
  Result?: WorkspacesIpGroup[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTagsResult {
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkspaceBundlesResult {
  Bundles?: WorkspaceBundle[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkspaceDirectoriesResult {
  Directories?: WorkspaceDirectory[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkspaceImagePermissionsResult {
  ImageId?: string | null;
  ImagePermissions?: ImagePermission[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkspaceImagesResult {
  Images?: WorkspaceImage[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkspaceSnapshotsResult {
  RebuildSnapshots?: Snapshot[] | null;
  RestoreSnapshots?: Snapshot[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkspacesResult {
  Workspaces?: Workspace[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkspacesConnectionStatusResult {
  WorkspacesConnectionStatus?: WorkspaceConnectionStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisassociateConnectionAliasResult {
}

// refs: 1 - tags: named, output
export interface DisassociateIpGroupsResult {
}

// refs: 1 - tags: named, output
export interface ImportWorkspaceImageResult {
  ImageId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAvailableManagementCidrRangesResult {
  ManagementCidrRanges?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface MigrateWorkspaceResult {
  SourceWorkspaceId?: string | null;
  TargetWorkspaceId?: string | null;
}

// refs: 1 - tags: named, output
export interface ModifyAccountResult {
}

// refs: 1 - tags: named, output
export interface ModifyClientPropertiesResult {
}

// refs: 1 - tags: named, output
export interface ModifySelfservicePermissionsResult {
}

// refs: 1 - tags: named, output
export interface ModifyWorkspaceAccessPropertiesResult {
}

// refs: 1 - tags: named, output
export interface ModifyWorkspaceCreationPropertiesResult {
}

// refs: 1 - tags: named, output
export interface ModifyWorkspacePropertiesResult {
}

// refs: 1 - tags: named, output
export interface ModifyWorkspaceStateResult {
}

// refs: 1 - tags: named, output
export interface RebootWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[] | null;
}

// refs: 1 - tags: named, output
export interface RebuildWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[] | null;
}

// refs: 1 - tags: named, output
export interface RegisterWorkspaceDirectoryResult {
}

// refs: 1 - tags: named, output
export interface RestoreWorkspaceResult {
}

// refs: 1 - tags: named, output
export interface RevokeIpRulesResult {
}

// refs: 1 - tags: named, output
export interface StartWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[] | null;
}

// refs: 1 - tags: named, output
export interface StopWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[] | null;
}

// refs: 1 - tags: named, output
export interface TerminateWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateConnectionAliasPermissionResult {
}

// refs: 1 - tags: named, output
export interface UpdateRulesOfIpGroupResult {
}

// refs: 1 - tags: named, output
export interface UpdateWorkspaceImagePermissionResult {
}

// refs: 4 - tags: input, named, interface, output
export interface IpRuleItem {
  ipRule?: string | null;
  ruleDesc?: string | null;
}
function fromIpRuleItem(input?: IpRuleItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ipRule: input["ipRule"],
    ruleDesc: input["ruleDesc"],
  }
}
function toIpRuleItem(root: jsonP.JSONValue): IpRuleItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ipRule": "s",
      "ruleDesc": "s",
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface WorkspaceRequest {
  DirectoryId: string;
  UserName: string;
  BundleId: string;
  VolumeEncryptionKey?: string | null;
  UserVolumeEncryptionEnabled?: boolean | null;
  RootVolumeEncryptionEnabled?: boolean | null;
  WorkspaceProperties?: WorkspaceProperties | null;
  Tags?: Tag[] | null;
}
function fromWorkspaceRequest(input?: WorkspaceRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DirectoryId: input["DirectoryId"],
    UserName: input["UserName"],
    BundleId: input["BundleId"],
    VolumeEncryptionKey: input["VolumeEncryptionKey"],
    UserVolumeEncryptionEnabled: input["UserVolumeEncryptionEnabled"],
    RootVolumeEncryptionEnabled: input["RootVolumeEncryptionEnabled"],
    WorkspaceProperties: fromWorkspaceProperties(input["WorkspaceProperties"]),
    Tags: input["Tags"]?.map(x => fromTag(x)),
  }
}
function toWorkspaceRequest(root: jsonP.JSONValue): WorkspaceRequest {
  return jsonP.readObj({
    required: {
      "DirectoryId": "s",
      "UserName": "s",
      "BundleId": "s",
    },
    optional: {
      "VolumeEncryptionKey": "s",
      "UserVolumeEncryptionEnabled": "b",
      "RootVolumeEncryptionEnabled": "b",
      "WorkspaceProperties": toWorkspaceProperties,
      "Tags": [toTag],
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface WorkspaceProperties {
  RunningMode?: RunningMode | null;
  RunningModeAutoStopTimeoutInMinutes?: number | null;
  RootVolumeSizeGib?: number | null;
  UserVolumeSizeGib?: number | null;
  ComputeTypeName?: Compute | null;
}
function fromWorkspaceProperties(input?: WorkspaceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RunningMode: input["RunningMode"],
    RunningModeAutoStopTimeoutInMinutes: input["RunningModeAutoStopTimeoutInMinutes"],
    RootVolumeSizeGib: input["RootVolumeSizeGib"],
    UserVolumeSizeGib: input["UserVolumeSizeGib"],
    ComputeTypeName: input["ComputeTypeName"],
  }
}
function toWorkspaceProperties(root: jsonP.JSONValue): WorkspaceProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "RunningMode": (x: jsonP.JSONValue) => cmnP.readEnum<RunningMode>(x),
      "RunningModeAutoStopTimeoutInMinutes": "n",
      "RootVolumeSizeGib": "n",
      "UserVolumeSizeGib": "n",
      "ComputeTypeName": (x: jsonP.JSONValue) => cmnP.readEnum<Compute>(x),
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type RunningMode =
| "AUTO_STOP"
| "ALWAYS_ON"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type Compute =
| "VALUE"
| "STANDARD"
| "PERFORMANCE"
| "POWER"
| "GRAPHICS"
| "POWERPRO"
| "GRAPHICSPRO"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ImageType =
| "OWNED"
| "SHARED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type WorkspaceImageIngestionProcess =
| "BYOL_REGULAR"
| "BYOL_GRAPHICS"
| "BYOL_GRAPHICSPRO"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type Application =
| "Microsoft_Office_2016"
| "Microsoft_Office_2019"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type DedicatedTenancySupportEnum =
| "ENABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ClientProperties {
  ReconnectEnabled?: ReconnectEnum | null;
}
function fromClientProperties(input?: ClientProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReconnectEnabled: input["ReconnectEnabled"],
  }
}
function toClientProperties(root: jsonP.JSONValue): ClientProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReconnectEnabled": (x: jsonP.JSONValue) => cmnP.readEnum<ReconnectEnum>(x),
    },
  }, root);
}

// refs: 12 - tags: input, named, enum, output
export type ReconnectEnum =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface SelfservicePermissions {
  RestartWorkspace?: ReconnectEnum | null;
  IncreaseVolumeSize?: ReconnectEnum | null;
  ChangeComputeType?: ReconnectEnum | null;
  SwitchRunningMode?: ReconnectEnum | null;
  RebuildWorkspace?: ReconnectEnum | null;
}
function fromSelfservicePermissions(input?: SelfservicePermissions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RestartWorkspace: input["RestartWorkspace"],
    IncreaseVolumeSize: input["IncreaseVolumeSize"],
    ChangeComputeType: input["ChangeComputeType"],
    SwitchRunningMode: input["SwitchRunningMode"],
    RebuildWorkspace: input["RebuildWorkspace"],
  }
}
function toSelfservicePermissions(root: jsonP.JSONValue): SelfservicePermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "RestartWorkspace": (x: jsonP.JSONValue) => cmnP.readEnum<ReconnectEnum>(x),
      "IncreaseVolumeSize": (x: jsonP.JSONValue) => cmnP.readEnum<ReconnectEnum>(x),
      "ChangeComputeType": (x: jsonP.JSONValue) => cmnP.readEnum<ReconnectEnum>(x),
      "SwitchRunningMode": (x: jsonP.JSONValue) => cmnP.readEnum<ReconnectEnum>(x),
      "RebuildWorkspace": (x: jsonP.JSONValue) => cmnP.readEnum<ReconnectEnum>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface WorkspaceAccessProperties {
  DeviceTypeWindows?: AccessPropertyValue | null;
  DeviceTypeOsx?: AccessPropertyValue | null;
  DeviceTypeWeb?: AccessPropertyValue | null;
  DeviceTypeIos?: AccessPropertyValue | null;
  DeviceTypeAndroid?: AccessPropertyValue | null;
  DeviceTypeChromeOs?: AccessPropertyValue | null;
  DeviceTypeZeroClient?: AccessPropertyValue | null;
}
function fromWorkspaceAccessProperties(input?: WorkspaceAccessProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeviceTypeWindows: input["DeviceTypeWindows"],
    DeviceTypeOsx: input["DeviceTypeOsx"],
    DeviceTypeWeb: input["DeviceTypeWeb"],
    DeviceTypeIos: input["DeviceTypeIos"],
    DeviceTypeAndroid: input["DeviceTypeAndroid"],
    DeviceTypeChromeOs: input["DeviceTypeChromeOs"],
    DeviceTypeZeroClient: input["DeviceTypeZeroClient"],
  }
}
function toWorkspaceAccessProperties(root: jsonP.JSONValue): WorkspaceAccessProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceTypeWindows": (x: jsonP.JSONValue) => cmnP.readEnum<AccessPropertyValue>(x),
      "DeviceTypeOsx": (x: jsonP.JSONValue) => cmnP.readEnum<AccessPropertyValue>(x),
      "DeviceTypeWeb": (x: jsonP.JSONValue) => cmnP.readEnum<AccessPropertyValue>(x),
      "DeviceTypeIos": (x: jsonP.JSONValue) => cmnP.readEnum<AccessPropertyValue>(x),
      "DeviceTypeAndroid": (x: jsonP.JSONValue) => cmnP.readEnum<AccessPropertyValue>(x),
      "DeviceTypeChromeOs": (x: jsonP.JSONValue) => cmnP.readEnum<AccessPropertyValue>(x),
      "DeviceTypeZeroClient": (x: jsonP.JSONValue) => cmnP.readEnum<AccessPropertyValue>(x),
    },
  }, root);
}

// refs: 14 - tags: input, named, enum, output
export type AccessPropertyValue =
| "ALLOW"
| "DENY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface WorkspaceCreationProperties {
  EnableWorkDocs?: boolean | null;
  EnableInternetAccess?: boolean | null;
  DefaultOu?: string | null;
  CustomSecurityGroupId?: string | null;
  UserEnabledAsLocalAdministrator?: boolean | null;
  EnableMaintenanceMode?: boolean | null;
}
function fromWorkspaceCreationProperties(input?: WorkspaceCreationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EnableWorkDocs: input["EnableWorkDocs"],
    EnableInternetAccess: input["EnableInternetAccess"],
    DefaultOu: input["DefaultOu"],
    CustomSecurityGroupId: input["CustomSecurityGroupId"],
    UserEnabledAsLocalAdministrator: input["UserEnabledAsLocalAdministrator"],
    EnableMaintenanceMode: input["EnableMaintenanceMode"],
  }
}

// refs: 1 - tags: input, named, enum
export type TargetWorkspaceState =
| "AVAILABLE"
| "ADMIN_MAINTENANCE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface RebootRequest {
  WorkspaceId: string;
}
function fromRebootRequest(input?: RebootRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface RebuildRequest {
  WorkspaceId: string;
}
function fromRebuildRequest(input?: RebuildRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type Tenancy =
| "DEDICATED"
| "SHARED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface StartRequest {
  WorkspaceId?: string | null;
}
function fromStartRequest(input?: StartRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface StopRequest {
  WorkspaceId?: string | null;
}
function fromStopRequest(input?: StopRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface TerminateRequest {
  WorkspaceId: string;
}
function fromTerminateRequest(input?: TerminateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkspaceId: input["WorkspaceId"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface ConnectionAliasPermission {
  SharedAccountId: string;
  AllowAssociation: boolean;
}
function fromConnectionAliasPermission(input?: ConnectionAliasPermission | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SharedAccountId: input["SharedAccountId"],
    AllowAssociation: input["AllowAssociation"],
  }
}
function toConnectionAliasPermission(root: jsonP.JSONValue): ConnectionAliasPermission {
  return jsonP.readObj({
    required: {
      "SharedAccountId": "s",
      "AllowAssociation": "b",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FailedCreateWorkspaceRequest {
  WorkspaceRequest?: WorkspaceRequest | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toFailedCreateWorkspaceRequest(root: jsonP.JSONValue): FailedCreateWorkspaceRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceRequest": toWorkspaceRequest,
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Workspace {
  WorkspaceId?: string | null;
  DirectoryId?: string | null;
  UserName?: string | null;
  IpAddress?: string | null;
  State?: WorkspaceState | null;
  BundleId?: string | null;
  SubnetId?: string | null;
  ErrorMessage?: string | null;
  ErrorCode?: string | null;
  ComputerName?: string | null;
  VolumeEncryptionKey?: string | null;
  UserVolumeEncryptionEnabled?: boolean | null;
  RootVolumeEncryptionEnabled?: boolean | null;
  WorkspaceProperties?: WorkspaceProperties | null;
  ModificationStates?: ModificationState[] | null;
}
function toWorkspace(root: jsonP.JSONValue): Workspace {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceId": "s",
      "DirectoryId": "s",
      "UserName": "s",
      "IpAddress": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<WorkspaceState>(x),
      "BundleId": "s",
      "SubnetId": "s",
      "ErrorMessage": "s",
      "ErrorCode": "s",
      "ComputerName": "s",
      "VolumeEncryptionKey": "s",
      "UserVolumeEncryptionEnabled": "b",
      "RootVolumeEncryptionEnabled": "b",
      "WorkspaceProperties": toWorkspaceProperties,
      "ModificationStates": [toModificationState],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type WorkspaceState =
| "PENDING"
| "AVAILABLE"
| "IMPAIRED"
| "UNHEALTHY"
| "REBOOTING"
| "STARTING"
| "REBUILDING"
| "RESTORING"
| "MAINTENANCE"
| "ADMIN_MAINTENANCE"
| "TERMINATING"
| "TERMINATED"
| "SUSPENDED"
| "UPDATING"
| "STOPPING"
| "STOPPED"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ModificationState {
  Resource?: ModificationResourceEnum | null;
  State?: ModificationStateEnum | null;
}
function toModificationState(root: jsonP.JSONValue): ModificationState {
  return jsonP.readObj({
    required: {},
    optional: {
      "Resource": (x: jsonP.JSONValue) => cmnP.readEnum<ModificationResourceEnum>(x),
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<ModificationStateEnum>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ModificationResourceEnum =
| "ROOT_VOLUME"
| "USER_VOLUME"
| "COMPUTE_TYPE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type ModificationStateEnum =
| "UPDATE_INITIATED"
| "UPDATE_IN_PROGRESS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type DedicatedTenancySupportResultEnum =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AccountModification {
  ModificationState?: DedicatedTenancyModificationStateEnum | null;
  DedicatedTenancySupport?: DedicatedTenancySupportResultEnum | null;
  DedicatedTenancyManagementCidrRange?: string | null;
  StartTime?: Date | number | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toAccountModification(root: jsonP.JSONValue): AccountModification {
  return jsonP.readObj({
    required: {},
    optional: {
      "ModificationState": (x: jsonP.JSONValue) => cmnP.readEnum<DedicatedTenancyModificationStateEnum>(x),
      "DedicatedTenancySupport": (x: jsonP.JSONValue) => cmnP.readEnum<DedicatedTenancySupportResultEnum>(x),
      "DedicatedTenancyManagementCidrRange": "s",
      "StartTime": "d",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DedicatedTenancyModificationStateEnum =
| "PENDING"
| "COMPLETED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ClientPropertiesResult {
  ResourceId?: string | null;
  ClientProperties?: ClientProperties | null;
}
function toClientPropertiesResult(root: jsonP.JSONValue): ClientPropertiesResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "ClientProperties": toClientProperties,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConnectionAlias {
  ConnectionString?: string | null;
  AliasId?: string | null;
  State?: ConnectionAliasState | null;
  OwnerAccountId?: string | null;
  Associations?: ConnectionAliasAssociation[] | null;
}
function toConnectionAlias(root: jsonP.JSONValue): ConnectionAlias {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConnectionString": "s",
      "AliasId": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionAliasState>(x),
      "OwnerAccountId": "s",
      "Associations": [toConnectionAliasAssociation],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ConnectionAliasState =
| "CREATING"
| "CREATED"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConnectionAliasAssociation {
  AssociationStatus?: AssociationStatus | null;
  AssociatedAccountId?: string | null;
  ResourceId?: string | null;
  ConnectionIdentifier?: string | null;
}
function toConnectionAliasAssociation(root: jsonP.JSONValue): ConnectionAliasAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationStatus>(x),
      "AssociatedAccountId": "s",
      "ResourceId": "s",
      "ConnectionIdentifier": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AssociationStatus =
| "NOT_ASSOCIATED"
| "ASSOCIATED_WITH_OWNER_ACCOUNT"
| "ASSOCIATED_WITH_SHARED_ACCOUNT"
| "PENDING_ASSOCIATION"
| "PENDING_DISASSOCIATION"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface WorkspacesIpGroup {
  groupId?: string | null;
  groupName?: string | null;
  groupDesc?: string | null;
  userRules?: IpRuleItem[] | null;
}
function toWorkspacesIpGroup(root: jsonP.JSONValue): WorkspacesIpGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "groupId": "s",
      "groupName": "s",
      "groupDesc": "s",
      "userRules": [toIpRuleItem],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkspaceBundle {
  BundleId?: string | null;
  Name?: string | null;
  Owner?: string | null;
  Description?: string | null;
  ImageId?: string | null;
  RootStorage?: RootStorage | null;
  UserStorage?: UserStorage | null;
  ComputeType?: ComputeType | null;
  LastUpdatedTime?: Date | number | null;
}
function toWorkspaceBundle(root: jsonP.JSONValue): WorkspaceBundle {
  return jsonP.readObj({
    required: {},
    optional: {
      "BundleId": "s",
      "Name": "s",
      "Owner": "s",
      "Description": "s",
      "ImageId": "s",
      "RootStorage": toRootStorage,
      "UserStorage": toUserStorage,
      "ComputeType": toComputeType,
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RootStorage {
  Capacity?: string | null;
}
function toRootStorage(root: jsonP.JSONValue): RootStorage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Capacity": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserStorage {
  Capacity?: string | null;
}
function toUserStorage(root: jsonP.JSONValue): UserStorage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Capacity": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComputeType {
  Name?: Compute | null;
}
function toComputeType(root: jsonP.JSONValue): ComputeType {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<Compute>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkspaceDirectory {
  DirectoryId?: string | null;
  Alias?: string | null;
  DirectoryName?: string | null;
  RegistrationCode?: string | null;
  SubnetIds?: string[] | null;
  DnsIpAddresses?: string[] | null;
  CustomerUserName?: string | null;
  IamRoleId?: string | null;
  DirectoryType?: WorkspaceDirectoryType | null;
  WorkspaceSecurityGroupId?: string | null;
  State?: WorkspaceDirectoryState | null;
  WorkspaceCreationProperties?: DefaultWorkspaceCreationProperties | null;
  ipGroupIds?: string[] | null;
  WorkspaceAccessProperties?: WorkspaceAccessProperties | null;
  Tenancy?: Tenancy | null;
  SelfservicePermissions?: SelfservicePermissions | null;
}
function toWorkspaceDirectory(root: jsonP.JSONValue): WorkspaceDirectory {
  return jsonP.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "Alias": "s",
      "DirectoryName": "s",
      "RegistrationCode": "s",
      "SubnetIds": ["s"],
      "DnsIpAddresses": ["s"],
      "CustomerUserName": "s",
      "IamRoleId": "s",
      "DirectoryType": (x: jsonP.JSONValue) => cmnP.readEnum<WorkspaceDirectoryType>(x),
      "WorkspaceSecurityGroupId": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<WorkspaceDirectoryState>(x),
      "WorkspaceCreationProperties": toDefaultWorkspaceCreationProperties,
      "ipGroupIds": ["s"],
      "WorkspaceAccessProperties": toWorkspaceAccessProperties,
      "Tenancy": (x: jsonP.JSONValue) => cmnP.readEnum<Tenancy>(x),
      "SelfservicePermissions": toSelfservicePermissions,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type WorkspaceDirectoryType =
| "SIMPLE_AD"
| "AD_CONNECTOR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type WorkspaceDirectoryState =
| "REGISTERING"
| "REGISTERED"
| "DEREGISTERING"
| "DEREGISTERED"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DefaultWorkspaceCreationProperties {
  EnableWorkDocs?: boolean | null;
  EnableInternetAccess?: boolean | null;
  DefaultOu?: string | null;
  CustomSecurityGroupId?: string | null;
  UserEnabledAsLocalAdministrator?: boolean | null;
  EnableMaintenanceMode?: boolean | null;
}
function toDefaultWorkspaceCreationProperties(root: jsonP.JSONValue): DefaultWorkspaceCreationProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "EnableWorkDocs": "b",
      "EnableInternetAccess": "b",
      "DefaultOu": "s",
      "CustomSecurityGroupId": "s",
      "UserEnabledAsLocalAdministrator": "b",
      "EnableMaintenanceMode": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ImagePermission {
  SharedAccountId?: string | null;
}
function toImagePermission(root: jsonP.JSONValue): ImagePermission {
  return jsonP.readObj({
    required: {},
    optional: {
      "SharedAccountId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkspaceImage {
  ImageId?: string | null;
  Name?: string | null;
  Description?: string | null;
  OperatingSystem?: OperatingSystem | null;
  State?: WorkspaceImageState | null;
  RequiredTenancy?: WorkspaceImageRequiredTenancy | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
  Created?: Date | number | null;
  OwnerAccountId?: string | null;
}
function toWorkspaceImage(root: jsonP.JSONValue): WorkspaceImage {
  return jsonP.readObj({
    required: {},
    optional: {
      "ImageId": "s",
      "Name": "s",
      "Description": "s",
      "OperatingSystem": toOperatingSystem,
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<WorkspaceImageState>(x),
      "RequiredTenancy": (x: jsonP.JSONValue) => cmnP.readEnum<WorkspaceImageRequiredTenancy>(x),
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "Created": "d",
      "OwnerAccountId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OperatingSystem {
  Type?: OperatingSystemType | null;
}
function toOperatingSystem(root: jsonP.JSONValue): OperatingSystem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<OperatingSystemType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type OperatingSystemType =
| "WINDOWS"
| "LINUX"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type WorkspaceImageState =
| "AVAILABLE"
| "PENDING"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type WorkspaceImageRequiredTenancy =
| "DEFAULT"
| "DEDICATED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Snapshot {
  SnapshotTime?: Date | number | null;
}
function toSnapshot(root: jsonP.JSONValue): Snapshot {
  return jsonP.readObj({
    required: {},
    optional: {
      "SnapshotTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkspaceConnectionStatus {
  WorkspaceId?: string | null;
  ConnectionState?: ConnectionState | null;
  ConnectionStateCheckTimestamp?: Date | number | null;
  LastKnownUserConnectionTimestamp?: Date | number | null;
}
function toWorkspaceConnectionStatus(root: jsonP.JSONValue): WorkspaceConnectionStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceId": "s",
      "ConnectionState": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionState>(x),
      "ConnectionStateCheckTimestamp": "d",
      "LastKnownUserConnectionTimestamp": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ConnectionState =
| "CONNECTED"
| "DISCONNECTED"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface FailedWorkspaceChangeRequest {
  WorkspaceId?: string | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toFailedWorkspaceChangeRequest(root: jsonP.JSONValue): FailedWorkspaceChangeRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkspaceId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}
