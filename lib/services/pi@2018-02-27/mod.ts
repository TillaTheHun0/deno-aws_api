// Autogenerated API client for: AWS Performance Insights

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class PI {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(PI.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-02-27",
    "endpointPrefix": "pi",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWS PI",
    "serviceFullName": "AWS Performance Insights",
    "serviceId": "PI",
    "signatureVersion": "v4",
    "signingName": "pi",
    "targetPrefix": "PerformanceInsightsv20180227",
    "uid": "pi-2018-02-27"
  };

  async describeDimensionKeys(
    {abortSignal, ...params}: RequestConfig & DescribeDimensionKeysRequest,
  ): Promise<DescribeDimensionKeysResponse> {
    const body: jsonP.JSONObject = params ? {
      ServiceType: params["ServiceType"],
      Identifier: params["Identifier"],
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      Metric: params["Metric"],
      PeriodInSeconds: params["PeriodInSeconds"],
      GroupBy: fromDimensionGroup(params["GroupBy"]),
      PartitionBy: fromDimensionGroup(params["PartitionBy"]),
      Filter: params["Filter"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDimensionKeys",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AlignedStartTime": "d",
        "AlignedEndTime": "d",
        "PartitionKeys": [toResponsePartitionKey],
        "Keys": [toDimensionKeyDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceMetrics(
    {abortSignal, ...params}: RequestConfig & GetResourceMetricsRequest,
  ): Promise<GetResourceMetricsResponse> {
    const body: jsonP.JSONObject = params ? {
      ServiceType: params["ServiceType"],
      Identifier: params["Identifier"],
      MetricQueries: params["MetricQueries"]?.map(x => fromMetricQuery(x)),
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      PeriodInSeconds: params["PeriodInSeconds"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceMetrics",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AlignedStartTime": "d",
        "AlignedEndTime": "d",
        "Identifier": "s",
        "MetricList": [toMetricKeyDataPoints],
        "NextToken": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DescribeDimensionKeysRequest {
  ServiceType: ServiceType;
  Identifier: string;
  StartTime: Date | number;
  EndTime: Date | number;
  Metric: string;
  PeriodInSeconds?: number | null;
  GroupBy: DimensionGroup;
  PartitionBy?: DimensionGroup | null;
  Filter?: { [key: string]: string | null | undefined } | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetResourceMetricsRequest {
  ServiceType: ServiceType;
  Identifier: string;
  MetricQueries: MetricQuery[];
  StartTime: Date | number;
  EndTime: Date | number;
  PeriodInSeconds?: number | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDimensionKeysResponse {
  AlignedStartTime?: Date | number | null;
  AlignedEndTime?: Date | number | null;
  PartitionKeys?: ResponsePartitionKey[] | null;
  Keys?: DimensionKeyDescription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourceMetricsResponse {
  AlignedStartTime?: Date | number | null;
  AlignedEndTime?: Date | number | null;
  Identifier?: string | null;
  MetricList?: MetricKeyDataPoints[] | null;
  NextToken?: string | null;
}

// refs: 2 - tags: input, named, enum
export type ServiceType =
| "RDS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface
export interface DimensionGroup {
  Group: string;
  Dimensions?: string[] | null;
  Limit?: number | null;
}
function fromDimensionGroup(input?: DimensionGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Group: input["Group"],
    Dimensions: input["Dimensions"],
    Limit: input["Limit"],
  }
}

// refs: 1 - tags: input, named, interface
export interface MetricQuery {
  Metric: string;
  GroupBy?: DimensionGroup | null;
  Filter?: { [key: string]: string | null | undefined } | null;
}
function fromMetricQuery(input?: MetricQuery | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Metric: input["Metric"],
    GroupBy: fromDimensionGroup(input["GroupBy"]),
    Filter: input["Filter"],
  }
}

// refs: 1 - tags: output, named, interface
export interface ResponsePartitionKey {
  Dimensions: { [key: string]: string | null | undefined };
}
function toResponsePartitionKey(root: jsonP.JSONValue): ResponsePartitionKey {
  return jsonP.readObj({
    required: {
      "Dimensions": x => jsonP.readMap(String, String, x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DimensionKeyDescription {
  Dimensions?: { [key: string]: string | null | undefined } | null;
  Total?: number | null;
  Partitions?: number[] | null;
}
function toDimensionKeyDescription(root: jsonP.JSONValue): DimensionKeyDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "Dimensions": x => jsonP.readMap(String, String, x),
      "Total": "n",
      "Partitions": ["n"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MetricKeyDataPoints {
  Key?: ResponseResourceMetricKey | null;
  DataPoints?: DataPoint[] | null;
}
function toMetricKeyDataPoints(root: jsonP.JSONValue): MetricKeyDataPoints {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": toResponseResourceMetricKey,
      "DataPoints": [toDataPoint],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResponseResourceMetricKey {
  Metric: string;
  Dimensions?: { [key: string]: string | null | undefined } | null;
}
function toResponseResourceMetricKey(root: jsonP.JSONValue): ResponseResourceMetricKey {
  return jsonP.readObj({
    required: {
      "Metric": "s",
    },
    optional: {
      "Dimensions": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataPoint {
  Timestamp: Date | number;
  Value: number;
}
function toDataPoint(root: jsonP.JSONValue): DataPoint {
  return jsonP.readObj({
    required: {
      "Timestamp": "d",
      "Value": "n",
    },
    optional: {},
  }, root);
}
