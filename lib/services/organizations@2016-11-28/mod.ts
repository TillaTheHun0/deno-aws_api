// Autogenerated API client for: AWS Organizations

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class Organizations {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Organizations.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-11-28",
    "endpointPrefix": "organizations",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Organizations",
    "serviceFullName": "AWS Organizations",
    "serviceId": "Organizations",
    "signatureVersion": "v4",
    "targetPrefix": "AWSOrganizationsV20161128",
    "uid": "organizations-2016-11-28"
  };

  async acceptHandshake(
    {abortSignal, ...params}: RequestConfig & AcceptHandshakeRequest,
  ): Promise<AcceptHandshakeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptHandshake",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async attachPolicy(
    {abortSignal, ...params}: RequestConfig & AttachPolicyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachPolicy",
    });
  }

  async cancelHandshake(
    {abortSignal, ...params}: RequestConfig & CancelHandshakeRequest,
  ): Promise<CancelHandshakeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelHandshake",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async createAccount(
    {abortSignal, ...params}: RequestConfig & CreateAccountRequest,
  ): Promise<CreateAccountResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccount",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CreateAccountStatus": toCreateAccountStatus,
      },
    }, await resp.json());
  }

  async createGovCloudAccount(
    {abortSignal, ...params}: RequestConfig & CreateGovCloudAccountRequest,
  ): Promise<CreateGovCloudAccountResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGovCloudAccount",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CreateAccountStatus": toCreateAccountStatus,
      },
    }, await resp.json());
  }

  async createOrganization(
    {abortSignal, ...params}: RequestConfig & CreateOrganizationRequest = {},
  ): Promise<CreateOrganizationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Organization": toOrganization,
      },
    }, await resp.json());
  }

  async createOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & CreateOrganizationalUnitRequest,
  ): Promise<CreateOrganizationalUnitResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOrganizationalUnit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationalUnit": toOrganizationalUnit,
      },
    }, await resp.json());
  }

  async createPolicy(
    {abortSignal, ...params}: RequestConfig & CreatePolicyRequest,
  ): Promise<CreatePolicyResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
      },
    }, await resp.json());
  }

  async declineHandshake(
    {abortSignal, ...params}: RequestConfig & DeclineHandshakeRequest,
  ): Promise<DeclineHandshakeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeclineHandshake",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async deleteOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<void> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteOrganization",
    });
  }

  async deleteOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & DeleteOrganizationalUnitRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganizationalUnit",
    });
  }

  async deletePolicy(
    {abortSignal, ...params}: RequestConfig & DeletePolicyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePolicy",
    });
  }

  async deregisterDelegatedAdministrator(
    {abortSignal, ...params}: RequestConfig & DeregisterDelegatedAdministratorRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterDelegatedAdministrator",
    });
  }

  async describeAccount(
    {abortSignal, ...params}: RequestConfig & DescribeAccountRequest,
  ): Promise<DescribeAccountResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccount",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async describeCreateAccountStatus(
    {abortSignal, ...params}: RequestConfig & DescribeCreateAccountStatusRequest,
  ): Promise<DescribeCreateAccountStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCreateAccountStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CreateAccountStatus": toCreateAccountStatus,
      },
    }, await resp.json());
  }

  async describeEffectivePolicy(
    {abortSignal, ...params}: RequestConfig & DescribeEffectivePolicyRequest,
  ): Promise<DescribeEffectivePolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEffectivePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EffectivePolicy": toEffectivePolicy,
      },
    }, await resp.json());
  }

  async describeHandshake(
    {abortSignal, ...params}: RequestConfig & DescribeHandshakeRequest,
  ): Promise<DescribeHandshakeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeHandshake",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async describeOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<DescribeOrganizationResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Organization": toOrganization,
      },
    }, await resp.json());
  }

  async describeOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationalUnitRequest,
  ): Promise<DescribeOrganizationalUnitResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationalUnit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationalUnit": toOrganizationalUnit,
      },
    }, await resp.json());
  }

  async describePolicy(
    {abortSignal, ...params}: RequestConfig & DescribePolicyRequest,
  ): Promise<DescribePolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
      },
    }, await resp.json());
  }

  async detachPolicy(
    {abortSignal, ...params}: RequestConfig & DetachPolicyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachPolicy",
    });
  }

  async disableAWSServiceAccess(
    {abortSignal, ...params}: RequestConfig & DisableAWSServiceAccessRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableAWSServiceAccess",
    });
  }

  async disablePolicyType(
    {abortSignal, ...params}: RequestConfig & DisablePolicyTypeRequest,
  ): Promise<DisablePolicyTypeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisablePolicyType",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Root": toRoot,
      },
    }, await resp.json());
  }

  async enableAWSServiceAccess(
    {abortSignal, ...params}: RequestConfig & EnableAWSServiceAccessRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableAWSServiceAccess",
    });
  }

  async enableAllFeatures(
    {abortSignal, ...params}: RequestConfig & EnableAllFeaturesRequest = {},
  ): Promise<EnableAllFeaturesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableAllFeatures",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async enablePolicyType(
    {abortSignal, ...params}: RequestConfig & EnablePolicyTypeRequest,
  ): Promise<EnablePolicyTypeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnablePolicyType",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Root": toRoot,
      },
    }, await resp.json());
  }

  async inviteAccountToOrganization(
    {abortSignal, ...params}: RequestConfig & InviteAccountToOrganizationRequest,
  ): Promise<InviteAccountToOrganizationResponse> {
    const body: JSONObject = {...params,
    Target: fromHandshakeParty(params["Target"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InviteAccountToOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async leaveOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<void> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "LeaveOrganization",
    });
  }

  async listAWSServiceAccessForOrganization(
    {abortSignal, ...params}: RequestConfig & ListAWSServiceAccessForOrganizationRequest = {},
  ): Promise<ListAWSServiceAccessForOrganizationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAWSServiceAccessForOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EnabledServicePrincipals": [toEnabledServicePrincipal],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccounts(
    {abortSignal, ...params}: RequestConfig & ListAccountsRequest = {},
  ): Promise<ListAccountsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccounts",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Accounts": [toAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountsForParent(
    {abortSignal, ...params}: RequestConfig & ListAccountsForParentRequest,
  ): Promise<ListAccountsForParentResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountsForParent",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Accounts": [toAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listChildren(
    {abortSignal, ...params}: RequestConfig & ListChildrenRequest,
  ): Promise<ListChildrenResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListChildren",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Children": [toChild],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCreateAccountStatus(
    {abortSignal, ...params}: RequestConfig & ListCreateAccountStatusRequest = {},
  ): Promise<ListCreateAccountStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCreateAccountStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CreateAccountStatuses": [toCreateAccountStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDelegatedAdministrators(
    {abortSignal, ...params}: RequestConfig & ListDelegatedAdministratorsRequest = {},
  ): Promise<ListDelegatedAdministratorsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDelegatedAdministrators",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DelegatedAdministrators": [toDelegatedAdministrator],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDelegatedServicesForAccount(
    {abortSignal, ...params}: RequestConfig & ListDelegatedServicesForAccountRequest,
  ): Promise<ListDelegatedServicesForAccountResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDelegatedServicesForAccount",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DelegatedServices": [toDelegatedService],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHandshakesForAccount(
    {abortSignal, ...params}: RequestConfig & ListHandshakesForAccountRequest = {},
  ): Promise<ListHandshakesForAccountResponse> {
    const body: JSONObject = {...params,
    Filter: fromHandshakeFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListHandshakesForAccount",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshakes": [toHandshake],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHandshakesForOrganization(
    {abortSignal, ...params}: RequestConfig & ListHandshakesForOrganizationRequest = {},
  ): Promise<ListHandshakesForOrganizationResponse> {
    const body: JSONObject = {...params,
    Filter: fromHandshakeFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListHandshakesForOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Handshakes": [toHandshake],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizationalUnitsForParent(
    {abortSignal, ...params}: RequestConfig & ListOrganizationalUnitsForParentRequest,
  ): Promise<ListOrganizationalUnitsForParentResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOrganizationalUnitsForParent",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationalUnits": [toOrganizationalUnit],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listParents(
    {abortSignal, ...params}: RequestConfig & ListParentsRequest,
  ): Promise<ListParentsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListParents",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Parents": [toParent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPolicies(
    {abortSignal, ...params}: RequestConfig & ListPoliciesRequest,
  ): Promise<ListPoliciesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPolicies",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policies": [toPolicySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPoliciesForTarget(
    {abortSignal, ...params}: RequestConfig & ListPoliciesForTargetRequest,
  ): Promise<ListPoliciesForTargetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPoliciesForTarget",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policies": [toPolicySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRoots(
    {abortSignal, ...params}: RequestConfig & ListRootsRequest = {},
  ): Promise<ListRootsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRoots",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Roots": [toRoot],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTargetsForPolicy(
    {abortSignal, ...params}: RequestConfig & ListTargetsForPolicyRequest,
  ): Promise<ListTargetsForPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTargetsForPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Targets": [toPolicyTargetSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async moveAccount(
    {abortSignal, ...params}: RequestConfig & MoveAccountRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MoveAccount",
    });
  }

  async registerDelegatedAdministrator(
    {abortSignal, ...params}: RequestConfig & RegisterDelegatedAdministratorRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDelegatedAdministrator",
    });
  }

  async removeAccountFromOrganization(
    {abortSignal, ...params}: RequestConfig & RemoveAccountFromOrganizationRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveAccountFromOrganization",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

  async updateOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & UpdateOrganizationalUnitRequest,
  ): Promise<UpdateOrganizationalUnitResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateOrganizationalUnit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationalUnit": toOrganizationalUnit,
      },
    }, await resp.json());
  }

  async updatePolicy(
    {abortSignal, ...params}: RequestConfig & UpdatePolicyRequest,
  ): Promise<UpdatePolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcceptHandshakeRequest {
  HandshakeId: string;
}

// refs: 1 - tags: named, input
export interface AttachPolicyRequest {
  PolicyId: string;
  TargetId: string;
}

// refs: 1 - tags: named, input
export interface CancelHandshakeRequest {
  HandshakeId: string;
}

// refs: 1 - tags: named, input
export interface CreateAccountRequest {
  Email: string;
  AccountName: string;
  RoleName?: string | null;
  IamUserAccessToBilling?: IAMUserAccessToBilling | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateGovCloudAccountRequest {
  Email: string;
  AccountName: string;
  RoleName?: string | null;
  IamUserAccessToBilling?: IAMUserAccessToBilling | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateOrganizationRequest {
  FeatureSet?: OrganizationFeatureSet | null;
}

// refs: 1 - tags: named, input
export interface CreateOrganizationalUnitRequest {
  ParentId: string;
  Name: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreatePolicyRequest {
  Content: string;
  Description: string;
  Name: string;
  Type: PolicyType;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeclineHandshakeRequest {
  HandshakeId: string;
}

// refs: 1 - tags: named, input
export interface DeleteOrganizationalUnitRequest {
  OrganizationalUnitId: string;
}

// refs: 1 - tags: named, input
export interface DeletePolicyRequest {
  PolicyId: string;
}

// refs: 1 - tags: named, input
export interface DeregisterDelegatedAdministratorRequest {
  AccountId: string;
  ServicePrincipal: string;
}

// refs: 1 - tags: named, input
export interface DescribeAccountRequest {
  AccountId: string;
}

// refs: 1 - tags: named, input
export interface DescribeCreateAccountStatusRequest {
  CreateAccountRequestId: string;
}

// refs: 1 - tags: named, input
export interface DescribeEffectivePolicyRequest {
  PolicyType: EffectivePolicyType;
  TargetId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeHandshakeRequest {
  HandshakeId: string;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationalUnitRequest {
  OrganizationalUnitId: string;
}

// refs: 1 - tags: named, input
export interface DescribePolicyRequest {
  PolicyId: string;
}

// refs: 1 - tags: named, input
export interface DetachPolicyRequest {
  PolicyId: string;
  TargetId: string;
}

// refs: 1 - tags: named, input
export interface DisableAWSServiceAccessRequest {
  ServicePrincipal: string;
}

// refs: 1 - tags: named, input
export interface DisablePolicyTypeRequest {
  RootId: string;
  PolicyType: PolicyType;
}

// refs: 1 - tags: named, input
export interface EnableAWSServiceAccessRequest {
  ServicePrincipal: string;
}

// refs: 1 - tags: named, input
export interface EnableAllFeaturesRequest {
}

// refs: 1 - tags: named, input
export interface EnablePolicyTypeRequest {
  RootId: string;
  PolicyType: PolicyType;
}

// refs: 1 - tags: named, input
export interface InviteAccountToOrganizationRequest {
  Target: HandshakeParty;
  Notes?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface ListAWSServiceAccessForOrganizationRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAccountsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAccountsForParentRequest {
  ParentId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListChildrenRequest {
  ParentId: string;
  ChildType: ChildType;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListCreateAccountStatusRequest {
  States?: CreateAccountState[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDelegatedAdministratorsRequest {
  ServicePrincipal?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDelegatedServicesForAccountRequest {
  AccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListHandshakesForAccountRequest {
  Filter?: HandshakeFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListHandshakesForOrganizationRequest {
  Filter?: HandshakeFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListOrganizationalUnitsForParentRequest {
  ParentId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListParentsRequest {
  ChildId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPoliciesRequest {
  Filter: PolicyType;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPoliciesForTargetRequest {
  TargetId: string;
  Filter: PolicyType;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRootsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceId: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTargetsForPolicyRequest {
  PolicyId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface MoveAccountRequest {
  AccountId: string;
  SourceParentId: string;
  DestinationParentId: string;
}

// refs: 1 - tags: named, input
export interface RegisterDelegatedAdministratorRequest {
  AccountId: string;
  ServicePrincipal: string;
}

// refs: 1 - tags: named, input
export interface RemoveAccountFromOrganizationRequest {
  AccountId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateOrganizationalUnitRequest {
  OrganizationalUnitId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdatePolicyRequest {
  PolicyId: string;
  Name?: string | null;
  Description?: string | null;
  Content?: string | null;
}

// refs: 1 - tags: named, output
export interface AcceptHandshakeResponse {
  Handshake?: Handshake | null;
}

// refs: 1 - tags: named, output
export interface CancelHandshakeResponse {
  Handshake?: Handshake | null;
}

// refs: 1 - tags: named, output
export interface CreateAccountResponse {
  CreateAccountStatus?: CreateAccountStatus | null;
}

// refs: 1 - tags: named, output
export interface CreateGovCloudAccountResponse {
  CreateAccountStatus?: CreateAccountStatus | null;
}

// refs: 1 - tags: named, output
export interface CreateOrganizationResponse {
  Organization?: Organization | null;
}

// refs: 1 - tags: named, output
export interface CreateOrganizationalUnitResponse {
  OrganizationalUnit?: OrganizationalUnit | null;
}

// refs: 1 - tags: named, output
export interface CreatePolicyResponse {
  Policy?: Policy | null;
}

// refs: 1 - tags: named, output
export interface DeclineHandshakeResponse {
  Handshake?: Handshake | null;
}

// refs: 1 - tags: named, output
export interface DescribeAccountResponse {
  Account?: Account | null;
}

// refs: 1 - tags: named, output
export interface DescribeCreateAccountStatusResponse {
  CreateAccountStatus?: CreateAccountStatus | null;
}

// refs: 1 - tags: named, output
export interface DescribeEffectivePolicyResponse {
  EffectivePolicy?: EffectivePolicy | null;
}

// refs: 1 - tags: named, output
export interface DescribeHandshakeResponse {
  Handshake?: Handshake | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationResponse {
  Organization?: Organization | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationalUnitResponse {
  OrganizationalUnit?: OrganizationalUnit | null;
}

// refs: 1 - tags: named, output
export interface DescribePolicyResponse {
  Policy?: Policy | null;
}

// refs: 1 - tags: named, output
export interface DisablePolicyTypeResponse {
  Root?: Root | null;
}

// refs: 1 - tags: named, output
export interface EnableAllFeaturesResponse {
  Handshake?: Handshake | null;
}

// refs: 1 - tags: named, output
export interface EnablePolicyTypeResponse {
  Root?: Root | null;
}

// refs: 1 - tags: named, output
export interface InviteAccountToOrganizationResponse {
  Handshake?: Handshake | null;
}

// refs: 1 - tags: named, output
export interface ListAWSServiceAccessForOrganizationResponse {
  EnabledServicePrincipals?: EnabledServicePrincipal[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAccountsResponse {
  Accounts?: Account[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAccountsForParentResponse {
  Accounts?: Account[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListChildrenResponse {
  Children?: Child[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCreateAccountStatusResponse {
  CreateAccountStatuses?: CreateAccountStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDelegatedAdministratorsResponse {
  DelegatedAdministrators?: DelegatedAdministrator[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDelegatedServicesForAccountResponse {
  DelegatedServices?: DelegatedService[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListHandshakesForAccountResponse {
  Handshakes?: Handshake[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListHandshakesForOrganizationResponse {
  Handshakes?: Handshake[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOrganizationalUnitsForParentResponse {
  OrganizationalUnits?: OrganizationalUnit[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListParentsResponse {
  Parents?: Parent[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPoliciesResponse {
  Policies?: PolicySummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPoliciesForTargetResponse {
  Policies?: PolicySummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRootsResponse {
  Roots?: Root[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTargetsForPolicyResponse {
  Targets?: PolicyTargetSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateOrganizationalUnitResponse {
  OrganizationalUnit?: OrganizationalUnit | null;
}

// refs: 1 - tags: named, output
export interface UpdatePolicyResponse {
  Policy?: Policy | null;
}

// refs: 2 - tags: input, named, enum
export type IAMUserAccessToBilling =
| "ALLOW"
| "DENY"
;


// refs: 7 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type OrganizationFeatureSet =
| "ALL"
| "CONSOLIDATED_BILLING"
;

function toOrganizationFeatureSet(root: JSONValue): OrganizationFeatureSet | null {
  return ( false
    || root == "ALL"
    || root == "CONSOLIDATED_BILLING"
  ) ? root : null;
}

// refs: 15 - tags: input, named, enum, output
export type PolicyType =
| "SERVICE_CONTROL_POLICY"
| "TAG_POLICY"
| "BACKUP_POLICY"
| "AISERVICES_OPT_OUT_POLICY"
;

function toPolicyType(root: JSONValue): PolicyType | null {
  return ( false
    || root == "SERVICE_CONTROL_POLICY"
    || root == "TAG_POLICY"
    || root == "BACKUP_POLICY"
    || root == "AISERVICES_OPT_OUT_POLICY"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type EffectivePolicyType =
| "TAG_POLICY"
| "BACKUP_POLICY"
| "AISERVICES_OPT_OUT_POLICY"
;

function toEffectivePolicyType(root: JSONValue): EffectivePolicyType | null {
  return ( false
    || root == "TAG_POLICY"
    || root == "BACKUP_POLICY"
    || root == "AISERVICES_OPT_OUT_POLICY"
  ) ? root : null;
}

// refs: 9 - tags: input, named, interface, output
export interface HandshakeParty {
  Id: string;
  Type: HandshakePartyType;
}
function fromHandshakeParty(input?: HandshakeParty | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toHandshakeParty(root: JSONValue): HandshakeParty {
  return prt.readObj({
    required: {
      "Id": "s",
      "Type": toHandshakePartyType,
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type HandshakePartyType =
| "ACCOUNT"
| "ORGANIZATION"
| "EMAIL"
;

function toHandshakePartyType(root: JSONValue): HandshakePartyType | null {
  return ( false
    || root == "ACCOUNT"
    || root == "ORGANIZATION"
    || root == "EMAIL"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type ChildType =
| "ACCOUNT"
| "ORGANIZATIONAL_UNIT"
;

function toChildType(root: JSONValue): ChildType | null {
  return ( false
    || root == "ACCOUNT"
    || root == "ORGANIZATIONAL_UNIT"
  ) ? root : null;
}

// refs: 5 - tags: input, named, enum, output
export type CreateAccountState =
| "IN_PROGRESS"
| "SUCCEEDED"
| "FAILED"
;

function toCreateAccountState(root: JSONValue): CreateAccountState | null {
  return ( false
    || root == "IN_PROGRESS"
    || root == "SUCCEEDED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface
export interface HandshakeFilter {
  ActionType?: ActionType | null;
  ParentHandshakeId?: string | null;
}
function fromHandshakeFilter(input?: HandshakeFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 10 - tags: input, named, enum, output
export type ActionType =
| "INVITE"
| "ENABLE_ALL_FEATURES"
| "APPROVE_ALL_FEATURES"
| "ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE"
;

function toActionType(root: JSONValue): ActionType | null {
  return ( false
    || root == "INVITE"
    || root == "ENABLE_ALL_FEATURES"
    || root == "APPROVE_ALL_FEATURES"
    || root == "ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE"
  ) ? root : null;
}

// refs: 8 - tags: output, named, interface
export interface Handshake {
  Id?: string | null;
  Arn?: string | null;
  Parties?: HandshakeParty[] | null;
  State?: HandshakeState | null;
  RequestedTimestamp?: Date | number | null;
  ExpirationTimestamp?: Date | number | null;
  Action?: ActionType | null;
  Resources?: HandshakeResource[] | null;
}
function toHandshake(root: JSONValue): Handshake {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Parties": [toHandshakeParty],
      "State": toHandshakeState,
      "RequestedTimestamp": "d",
      "ExpirationTimestamp": "d",
      "Action": toActionType,
      "Resources": [toHandshakeResource],
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type HandshakeState =
| "REQUESTED"
| "OPEN"
| "CANCELED"
| "ACCEPTED"
| "DECLINED"
| "EXPIRED"
;
function toHandshakeState(root: JSONValue): HandshakeState | null {
  return ( false
    || root == "REQUESTED"
    || root == "OPEN"
    || root == "CANCELED"
    || root == "ACCEPTED"
    || root == "DECLINED"
    || root == "EXPIRED"
  ) ? root : null;
}

// refs: 8 - tags: output, named, interface, recursive
export interface HandshakeResource {
  Value?: string | null;
  Type?: HandshakeResourceType | null;
  Resources?: HandshakeResource[] | null;
}
function toHandshakeResource(root: JSONValue): HandshakeResource {
  return prt.readObj({
    required: {},
    optional: {
      "Value": "s",
      "Type": toHandshakeResourceType,
      "Resources": [toHandshakeResource],
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type HandshakeResourceType =
| "ACCOUNT"
| "ORGANIZATION"
| "ORGANIZATION_FEATURE_SET"
| "EMAIL"
| "MASTER_EMAIL"
| "MASTER_NAME"
| "NOTES"
| "PARENT_HANDSHAKE"
;
function toHandshakeResourceType(root: JSONValue): HandshakeResourceType | null {
  return ( false
    || root == "ACCOUNT"
    || root == "ORGANIZATION"
    || root == "ORGANIZATION_FEATURE_SET"
    || root == "EMAIL"
    || root == "MASTER_EMAIL"
    || root == "MASTER_NAME"
    || root == "NOTES"
    || root == "PARENT_HANDSHAKE"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface CreateAccountStatus {
  Id?: string | null;
  AccountName?: string | null;
  State?: CreateAccountState | null;
  RequestedTimestamp?: Date | number | null;
  CompletedTimestamp?: Date | number | null;
  AccountId?: string | null;
  GovCloudAccountId?: string | null;
  FailureReason?: CreateAccountFailureReason | null;
}
function toCreateAccountStatus(root: JSONValue): CreateAccountStatus {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "AccountName": "s",
      "State": toCreateAccountState,
      "RequestedTimestamp": "d",
      "CompletedTimestamp": "d",
      "AccountId": "s",
      "GovCloudAccountId": "s",
      "FailureReason": toCreateAccountFailureReason,
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type CreateAccountFailureReason =
| "ACCOUNT_LIMIT_EXCEEDED"
| "EMAIL_ALREADY_EXISTS"
| "INVALID_ADDRESS"
| "INVALID_EMAIL"
| "CONCURRENT_ACCOUNT_MODIFICATION"
| "INTERNAL_FAILURE"
| "GOVCLOUD_ACCOUNT_ALREADY_EXISTS"
| "MISSING_BUSINESS_VALIDATION"
| "MISSING_PAYMENT_INSTRUMENT"
;
function toCreateAccountFailureReason(root: JSONValue): CreateAccountFailureReason | null {
  return ( false
    || root == "ACCOUNT_LIMIT_EXCEEDED"
    || root == "EMAIL_ALREADY_EXISTS"
    || root == "INVALID_ADDRESS"
    || root == "INVALID_EMAIL"
    || root == "CONCURRENT_ACCOUNT_MODIFICATION"
    || root == "INTERNAL_FAILURE"
    || root == "GOVCLOUD_ACCOUNT_ALREADY_EXISTS"
    || root == "MISSING_BUSINESS_VALIDATION"
    || root == "MISSING_PAYMENT_INSTRUMENT"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface Organization {
  Id?: string | null;
  Arn?: string | null;
  FeatureSet?: OrganizationFeatureSet | null;
  MasterAccountArn?: string | null;
  MasterAccountId?: string | null;
  MasterAccountEmail?: string | null;
  AvailablePolicyTypes?: PolicyTypeSummary[] | null;
}
function toOrganization(root: JSONValue): Organization {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "FeatureSet": toOrganizationFeatureSet,
      "MasterAccountArn": "s",
      "MasterAccountId": "s",
      "MasterAccountEmail": "s",
      "AvailablePolicyTypes": [toPolicyTypeSummary],
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface PolicyTypeSummary {
  Type?: PolicyType | null;
  Status?: PolicyTypeStatus | null;
}
function toPolicyTypeSummary(root: JSONValue): PolicyTypeSummary {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toPolicyType,
      "Status": toPolicyTypeStatus,
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type PolicyTypeStatus =
| "ENABLED"
| "PENDING_ENABLE"
| "PENDING_DISABLE"
;
function toPolicyTypeStatus(root: JSONValue): PolicyTypeStatus | null {
  return ( false
    || root == "ENABLED"
    || root == "PENDING_ENABLE"
    || root == "PENDING_DISABLE"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface OrganizationalUnit {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
}
function toOrganizationalUnit(root: JSONValue): OrganizationalUnit {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Policy {
  PolicySummary?: PolicySummary | null;
  Content?: string | null;
}
function toPolicy(root: JSONValue): Policy {
  return prt.readObj({
    required: {},
    optional: {
      "PolicySummary": toPolicySummary,
      "Content": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface PolicySummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
  Description?: string | null;
  Type?: PolicyType | null;
  AwsManaged?: boolean | null;
}
function toPolicySummary(root: JSONValue): PolicySummary {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "Description": "s",
      "Type": toPolicyType,
      "AwsManaged": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Account {
  Id?: string | null;
  Arn?: string | null;
  Email?: string | null;
  Name?: string | null;
  Status?: AccountStatus | null;
  JoinedMethod?: AccountJoinedMethod | null;
  JoinedTimestamp?: Date | number | null;
}
function toAccount(root: JSONValue): Account {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Email": "s",
      "Name": "s",
      "Status": toAccountStatus,
      "JoinedMethod": toAccountJoinedMethod,
      "JoinedTimestamp": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type AccountStatus =
| "ACTIVE"
| "SUSPENDED"
;
function toAccountStatus(root: JSONValue): AccountStatus | null {
  return ( false
    || root == "ACTIVE"
    || root == "SUSPENDED"
  ) ? root : null;
}

// refs: 4 - tags: output, named, enum
export type AccountJoinedMethod =
| "INVITED"
| "CREATED"
;
function toAccountJoinedMethod(root: JSONValue): AccountJoinedMethod | null {
  return ( false
    || root == "INVITED"
    || root == "CREATED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface EffectivePolicy {
  PolicyContent?: string | null;
  LastUpdatedTimestamp?: Date | number | null;
  TargetId?: string | null;
  PolicyType?: EffectivePolicyType | null;
}
function toEffectivePolicy(root: JSONValue): EffectivePolicy {
  return prt.readObj({
    required: {},
    optional: {
      "PolicyContent": "s",
      "LastUpdatedTimestamp": "d",
      "TargetId": "s",
      "PolicyType": toEffectivePolicyType,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Root {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
  PolicyTypes?: PolicyTypeSummary[] | null;
}
function toRoot(root: JSONValue): Root {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "PolicyTypes": [toPolicyTypeSummary],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EnabledServicePrincipal {
  ServicePrincipal?: string | null;
  DateEnabled?: Date | number | null;
}
function toEnabledServicePrincipal(root: JSONValue): EnabledServicePrincipal {
  return prt.readObj({
    required: {},
    optional: {
      "ServicePrincipal": "s",
      "DateEnabled": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Child {
  Id?: string | null;
  Type?: ChildType | null;
}
function toChild(root: JSONValue): Child {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Type": toChildType,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DelegatedAdministrator {
  Id?: string | null;
  Arn?: string | null;
  Email?: string | null;
  Name?: string | null;
  Status?: AccountStatus | null;
  JoinedMethod?: AccountJoinedMethod | null;
  JoinedTimestamp?: Date | number | null;
  DelegationEnabledDate?: Date | number | null;
}
function toDelegatedAdministrator(root: JSONValue): DelegatedAdministrator {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Email": "s",
      "Name": "s",
      "Status": toAccountStatus,
      "JoinedMethod": toAccountJoinedMethod,
      "JoinedTimestamp": "d",
      "DelegationEnabledDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DelegatedService {
  ServicePrincipal?: string | null;
  DelegationEnabledDate?: Date | number | null;
}
function toDelegatedService(root: JSONValue): DelegatedService {
  return prt.readObj({
    required: {},
    optional: {
      "ServicePrincipal": "s",
      "DelegationEnabledDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Parent {
  Id?: string | null;
  Type?: ParentType | null;
}
function toParent(root: JSONValue): Parent {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Type": toParentType,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ParentType =
| "ROOT"
| "ORGANIZATIONAL_UNIT"
;
function toParentType(root: JSONValue): ParentType | null {
  return ( false
    || root == "ROOT"
    || root == "ORGANIZATIONAL_UNIT"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface PolicyTargetSummary {
  TargetId?: string | null;
  Arn?: string | null;
  Name?: string | null;
  Type?: TargetType | null;
}
function toPolicyTargetSummary(root: JSONValue): PolicyTargetSummary {
  return prt.readObj({
    required: {},
    optional: {
      "TargetId": "s",
      "Arn": "s",
      "Name": "s",
      "Type": toTargetType,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type TargetType =
| "ACCOUNT"
| "ORGANIZATIONAL_UNIT"
| "ROOT"
;
function toTargetType(root: JSONValue): TargetType | null {
  return ( false
    || root == "ACCOUNT"
    || root == "ORGANIZATIONAL_UNIT"
    || root == "ROOT"
  ) ? root : null;
}
