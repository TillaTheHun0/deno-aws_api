// Autogenerated API client for: AWS Organizations

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Organizations {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Organizations.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2016-11-28",
    "endpointPrefix": "organizations",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Organizations",
    "serviceFullName": "AWS Organizations",
    "serviceId": "Organizations",
    "signatureVersion": "v4",
    "targetPrefix": "AWSOrganizationsV20161128",
    "uid": "organizations-2016-11-28"
  };

  async acceptHandshake(
    {abortSignal, ...params}: RequestConfig & s.AcceptHandshakeRequest,
  ): Promise<s.AcceptHandshakeResponse> {
    const body: jsonP.JSONObject = {
      HandshakeId: params["HandshakeId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptHandshake",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async attachPolicy(
    {abortSignal, ...params}: RequestConfig & s.AttachPolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      TargetId: params["TargetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachPolicy",
    });
  }

  async cancelHandshake(
    {abortSignal, ...params}: RequestConfig & s.CancelHandshakeRequest,
  ): Promise<s.CancelHandshakeResponse> {
    const body: jsonP.JSONObject = {
      HandshakeId: params["HandshakeId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelHandshake",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async createAccount(
    {abortSignal, ...params}: RequestConfig & s.CreateAccountRequest,
  ): Promise<s.CreateAccountResponse> {
    const body: jsonP.JSONObject = {
      Email: params["Email"],
      AccountName: params["AccountName"],
      RoleName: params["RoleName"],
      IamUserAccessToBilling: params["IamUserAccessToBilling"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreateAccountStatus": toCreateAccountStatus,
      },
    }, await resp.json());
  }

  async createGovCloudAccount(
    {abortSignal, ...params}: RequestConfig & s.CreateGovCloudAccountRequest,
  ): Promise<s.CreateGovCloudAccountResponse> {
    const body: jsonP.JSONObject = {
      Email: params["Email"],
      AccountName: params["AccountName"],
      RoleName: params["RoleName"],
      IamUserAccessToBilling: params["IamUserAccessToBilling"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGovCloudAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreateAccountStatus": toCreateAccountStatus,
      },
    }, await resp.json());
  }

  async createOrganization(
    {abortSignal, ...params}: RequestConfig & s.CreateOrganizationRequest = {},
  ): Promise<s.CreateOrganizationResponse> {
    const body: jsonP.JSONObject = {
      FeatureSet: params["FeatureSet"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Organization": toOrganization,
      },
    }, await resp.json());
  }

  async createOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & s.CreateOrganizationalUnitRequest,
  ): Promise<s.CreateOrganizationalUnitResponse> {
    const body: jsonP.JSONObject = {
      ParentId: params["ParentId"],
      Name: params["Name"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOrganizationalUnit",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationalUnit": toOrganizationalUnit,
      },
    }, await resp.json());
  }

  async createPolicy(
    {abortSignal, ...params}: RequestConfig & s.CreatePolicyRequest,
  ): Promise<s.CreatePolicyResponse> {
    const body: jsonP.JSONObject = {
      Content: params["Content"],
      Description: params["Description"],
      Name: params["Name"],
      Type: params["Type"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
      },
    }, await resp.json());
  }

  async declineHandshake(
    {abortSignal, ...params}: RequestConfig & s.DeclineHandshakeRequest,
  ): Promise<s.DeclineHandshakeResponse> {
    const body: jsonP.JSONObject = {
      HandshakeId: params["HandshakeId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeclineHandshake",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async deleteOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<void> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteOrganization",
    });
  }

  async deleteOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & s.DeleteOrganizationalUnitRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      OrganizationalUnitId: params["OrganizationalUnitId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganizationalUnit",
    });
  }

  async deletePolicy(
    {abortSignal, ...params}: RequestConfig & s.DeletePolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePolicy",
    });
  }

  async deregisterDelegatedAdministrator(
    {abortSignal, ...params}: RequestConfig & s.DeregisterDelegatedAdministratorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
      ServicePrincipal: params["ServicePrincipal"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterDelegatedAdministrator",
    });
  }

  async describeAccount(
    {abortSignal, ...params}: RequestConfig & s.DescribeAccountRequest,
  ): Promise<s.DescribeAccountResponse> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async describeCreateAccountStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeCreateAccountStatusRequest,
  ): Promise<s.DescribeCreateAccountStatusResponse> {
    const body: jsonP.JSONObject = {
      CreateAccountRequestId: params["CreateAccountRequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCreateAccountStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreateAccountStatus": toCreateAccountStatus,
      },
    }, await resp.json());
  }

  async describeEffectivePolicy(
    {abortSignal, ...params}: RequestConfig & s.DescribeEffectivePolicyRequest,
  ): Promise<s.DescribeEffectivePolicyResponse> {
    const body: jsonP.JSONObject = {
      PolicyType: params["PolicyType"],
      TargetId: params["TargetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEffectivePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EffectivePolicy": toEffectivePolicy,
      },
    }, await resp.json());
  }

  async describeHandshake(
    {abortSignal, ...params}: RequestConfig & s.DescribeHandshakeRequest,
  ): Promise<s.DescribeHandshakeResponse> {
    const body: jsonP.JSONObject = {
      HandshakeId: params["HandshakeId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeHandshake",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async describeOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<s.DescribeOrganizationResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Organization": toOrganization,
      },
    }, await resp.json());
  }

  async describeOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & s.DescribeOrganizationalUnitRequest,
  ): Promise<s.DescribeOrganizationalUnitResponse> {
    const body: jsonP.JSONObject = {
      OrganizationalUnitId: params["OrganizationalUnitId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationalUnit",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationalUnit": toOrganizationalUnit,
      },
    }, await resp.json());
  }

  async describePolicy(
    {abortSignal, ...params}: RequestConfig & s.DescribePolicyRequest,
  ): Promise<s.DescribePolicyResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
      },
    }, await resp.json());
  }

  async detachPolicy(
    {abortSignal, ...params}: RequestConfig & s.DetachPolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      TargetId: params["TargetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachPolicy",
    });
  }

  async disableAWSServiceAccess(
    {abortSignal, ...params}: RequestConfig & s.DisableAWSServiceAccessRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ServicePrincipal: params["ServicePrincipal"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableAWSServiceAccess",
    });
  }

  async disablePolicyType(
    {abortSignal, ...params}: RequestConfig & s.DisablePolicyTypeRequest,
  ): Promise<s.DisablePolicyTypeResponse> {
    const body: jsonP.JSONObject = {
      RootId: params["RootId"],
      PolicyType: params["PolicyType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisablePolicyType",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Root": toRoot,
      },
    }, await resp.json());
  }

  async enableAWSServiceAccess(
    {abortSignal, ...params}: RequestConfig & s.EnableAWSServiceAccessRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ServicePrincipal: params["ServicePrincipal"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableAWSServiceAccess",
    });
  }

  async enableAllFeatures(
    {abortSignal, ...params}: RequestConfig & s.EnableAllFeaturesRequest = {},
  ): Promise<s.EnableAllFeaturesResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableAllFeatures",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async enablePolicyType(
    {abortSignal, ...params}: RequestConfig & s.EnablePolicyTypeRequest,
  ): Promise<s.EnablePolicyTypeResponse> {
    const body: jsonP.JSONObject = {
      RootId: params["RootId"],
      PolicyType: params["PolicyType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnablePolicyType",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Root": toRoot,
      },
    }, await resp.json());
  }

  async inviteAccountToOrganization(
    {abortSignal, ...params}: RequestConfig & s.InviteAccountToOrganizationRequest,
  ): Promise<s.InviteAccountToOrganizationResponse> {
    const body: jsonP.JSONObject = {
      Target: fromHandshakeParty(params["Target"]),
      Notes: params["Notes"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InviteAccountToOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshake": toHandshake,
      },
    }, await resp.json());
  }

  async leaveOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<void> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "LeaveOrganization",
    });
  }

  async listAWSServiceAccessForOrganization(
    {abortSignal, ...params}: RequestConfig & s.ListAWSServiceAccessForOrganizationRequest = {},
  ): Promise<s.ListAWSServiceAccessForOrganizationResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAWSServiceAccessForOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EnabledServicePrincipals": [toEnabledServicePrincipal],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccounts(
    {abortSignal, ...params}: RequestConfig & s.ListAccountsRequest = {},
  ): Promise<s.ListAccountsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accounts": [toAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountsForParent(
    {abortSignal, ...params}: RequestConfig & s.ListAccountsForParentRequest,
  ): Promise<s.ListAccountsForParentResponse> {
    const body: jsonP.JSONObject = {
      ParentId: params["ParentId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountsForParent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accounts": [toAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listChildren(
    {abortSignal, ...params}: RequestConfig & s.ListChildrenRequest,
  ): Promise<s.ListChildrenResponse> {
    const body: jsonP.JSONObject = {
      ParentId: params["ParentId"],
      ChildType: params["ChildType"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListChildren",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Children": [toChild],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCreateAccountStatus(
    {abortSignal, ...params}: RequestConfig & s.ListCreateAccountStatusRequest = {},
  ): Promise<s.ListCreateAccountStatusResponse> {
    const body: jsonP.JSONObject = {
      States: params["States"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCreateAccountStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreateAccountStatuses": [toCreateAccountStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDelegatedAdministrators(
    {abortSignal, ...params}: RequestConfig & s.ListDelegatedAdministratorsRequest = {},
  ): Promise<s.ListDelegatedAdministratorsResponse> {
    const body: jsonP.JSONObject = {
      ServicePrincipal: params["ServicePrincipal"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDelegatedAdministrators",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DelegatedAdministrators": [toDelegatedAdministrator],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDelegatedServicesForAccount(
    {abortSignal, ...params}: RequestConfig & s.ListDelegatedServicesForAccountRequest,
  ): Promise<s.ListDelegatedServicesForAccountResponse> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDelegatedServicesForAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DelegatedServices": [toDelegatedService],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHandshakesForAccount(
    {abortSignal, ...params}: RequestConfig & s.ListHandshakesForAccountRequest = {},
  ): Promise<s.ListHandshakesForAccountResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromHandshakeFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListHandshakesForAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshakes": [toHandshake],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHandshakesForOrganization(
    {abortSignal, ...params}: RequestConfig & s.ListHandshakesForOrganizationRequest = {},
  ): Promise<s.ListHandshakesForOrganizationResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromHandshakeFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListHandshakesForOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Handshakes": [toHandshake],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizationalUnitsForParent(
    {abortSignal, ...params}: RequestConfig & s.ListOrganizationalUnitsForParentRequest,
  ): Promise<s.ListOrganizationalUnitsForParentResponse> {
    const body: jsonP.JSONObject = {
      ParentId: params["ParentId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOrganizationalUnitsForParent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationalUnits": [toOrganizationalUnit],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listParents(
    {abortSignal, ...params}: RequestConfig & s.ListParentsRequest,
  ): Promise<s.ListParentsResponse> {
    const body: jsonP.JSONObject = {
      ChildId: params["ChildId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListParents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Parents": [toParent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPolicies(
    {abortSignal, ...params}: RequestConfig & s.ListPoliciesRequest,
  ): Promise<s.ListPoliciesResponse> {
    const body: jsonP.JSONObject = {
      Filter: params["Filter"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPolicies",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policies": [toPolicySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPoliciesForTarget(
    {abortSignal, ...params}: RequestConfig & s.ListPoliciesForTargetRequest,
  ): Promise<s.ListPoliciesForTargetResponse> {
    const body: jsonP.JSONObject = {
      TargetId: params["TargetId"],
      Filter: params["Filter"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPoliciesForTarget",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policies": [toPolicySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRoots(
    {abortSignal, ...params}: RequestConfig & s.ListRootsRequest = {},
  ): Promise<s.ListRootsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRoots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Roots": [toRoot],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTargetsForPolicy(
    {abortSignal, ...params}: RequestConfig & s.ListTargetsForPolicyRequest,
  ): Promise<s.ListTargetsForPolicyResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTargetsForPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Targets": [toPolicyTargetSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async moveAccount(
    {abortSignal, ...params}: RequestConfig & s.MoveAccountRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
      SourceParentId: params["SourceParentId"],
      DestinationParentId: params["DestinationParentId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MoveAccount",
    });
  }

  async registerDelegatedAdministrator(
    {abortSignal, ...params}: RequestConfig & s.RegisterDelegatedAdministratorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
      ServicePrincipal: params["ServicePrincipal"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDelegatedAdministrator",
    });
  }

  async removeAccountFromOrganization(
    {abortSignal, ...params}: RequestConfig & s.RemoveAccountFromOrganizationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveAccountFromOrganization",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

  async updateOrganizationalUnit(
    {abortSignal, ...params}: RequestConfig & s.UpdateOrganizationalUnitRequest,
  ): Promise<s.UpdateOrganizationalUnitResponse> {
    const body: jsonP.JSONObject = {
      OrganizationalUnitId: params["OrganizationalUnitId"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateOrganizationalUnit",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationalUnit": toOrganizationalUnit,
      },
    }, await resp.json());
  }

  async updatePolicy(
    {abortSignal, ...params}: RequestConfig & s.UpdatePolicyRequest,
  ): Promise<s.UpdatePolicyResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      Name: params["Name"],
      Description: params["Description"],
      Content: params["Content"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
      },
    }, await resp.json());
  }

}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromHandshakeParty(input?: s.HandshakeParty | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Type: input["Type"],
  }
}
function toHandshakeParty(root: jsonP.JSONValue): s.HandshakeParty {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.HandshakePartyType>(x),
    },
    optional: {},
  }, root);
}

function fromHandshakeFilter(input?: s.HandshakeFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ActionType: input["ActionType"],
    ParentHandshakeId: input["ParentHandshakeId"],
  }
}

function toHandshake(root: jsonP.JSONValue): s.Handshake {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Parties": [toHandshakeParty],
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.HandshakeState>(x),
      "RequestedTimestamp": "d",
      "ExpirationTimestamp": "d",
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<s.ActionType>(x),
      "Resources": [toHandshakeResource],
    },
  }, root);
}

function toHandshakeResource(root: jsonP.JSONValue): s.HandshakeResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.HandshakeResourceType>(x),
      "Resources": [toHandshakeResource],
    },
  }, root);
}

function toCreateAccountStatus(root: jsonP.JSONValue): s.CreateAccountStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "AccountName": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.CreateAccountState>(x),
      "RequestedTimestamp": "d",
      "CompletedTimestamp": "d",
      "AccountId": "s",
      "GovCloudAccountId": "s",
      "FailureReason": (x: jsonP.JSONValue) => cmnP.readEnum<s.CreateAccountFailureReason>(x),
    },
  }, root);
}

function toOrganization(root: jsonP.JSONValue): s.Organization {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "FeatureSet": (x: jsonP.JSONValue) => cmnP.readEnum<s.OrganizationFeatureSet>(x),
      "MasterAccountArn": "s",
      "MasterAccountId": "s",
      "MasterAccountEmail": "s",
      "AvailablePolicyTypes": [toPolicyTypeSummary],
    },
  }, root);
}

function toPolicyTypeSummary(root: jsonP.JSONValue): s.PolicyTypeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.PolicyType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.PolicyTypeStatus>(x),
    },
  }, root);
}

function toOrganizationalUnit(root: jsonP.JSONValue): s.OrganizationalUnit {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toPolicy(root: jsonP.JSONValue): s.Policy {
  return jsonP.readObj({
    required: {},
    optional: {
      "PolicySummary": toPolicySummary,
      "Content": "s",
    },
  }, root);
}

function toPolicySummary(root: jsonP.JSONValue): s.PolicySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "Description": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.PolicyType>(x),
      "AwsManaged": "b",
    },
  }, root);
}

function toAccount(root: jsonP.JSONValue): s.Account {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Email": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountStatus>(x),
      "JoinedMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountJoinedMethod>(x),
      "JoinedTimestamp": "d",
    },
  }, root);
}

function toEffectivePolicy(root: jsonP.JSONValue): s.EffectivePolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "PolicyContent": "s",
      "LastUpdatedTimestamp": "d",
      "TargetId": "s",
      "PolicyType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EffectivePolicyType>(x),
    },
  }, root);
}

function toRoot(root: jsonP.JSONValue): s.Root {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "PolicyTypes": [toPolicyTypeSummary],
    },
  }, root);
}

function toEnabledServicePrincipal(root: jsonP.JSONValue): s.EnabledServicePrincipal {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServicePrincipal": "s",
      "DateEnabled": "d",
    },
  }, root);
}

function toChild(root: jsonP.JSONValue): s.Child {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChildType>(x),
    },
  }, root);
}

function toDelegatedAdministrator(root: jsonP.JSONValue): s.DelegatedAdministrator {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Email": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountStatus>(x),
      "JoinedMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountJoinedMethod>(x),
      "JoinedTimestamp": "d",
      "DelegationEnabledDate": "d",
    },
  }, root);
}

function toDelegatedService(root: jsonP.JSONValue): s.DelegatedService {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServicePrincipal": "s",
      "DelegationEnabledDate": "d",
    },
  }, root);
}

function toParent(root: jsonP.JSONValue): s.Parent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ParentType>(x),
    },
  }, root);
}

function toPolicyTargetSummary(root: jsonP.JSONValue): s.PolicyTargetSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "TargetId": "s",
      "Arn": "s",
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.TargetType>(x),
    },
  }, root);
}
