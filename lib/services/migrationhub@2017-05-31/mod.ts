// Autogenerated API client for: AWS Migration Hub

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class MigrationHub {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MigrationHub.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-05-31",
    "endpointPrefix": "mgh",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Migration Hub",
    "serviceId": "Migration Hub",
    "signatureVersion": "v4",
    "targetPrefix": "AWSMigrationHub",
    "uid": "AWSMigrationHub-2017-05-31"
  };

  async associateCreatedArtifact(
    {abortSignal, ...params}: RequestConfig & s.AssociateCreatedArtifactRequest,
  ): Promise<s.AssociateCreatedArtifactResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      CreatedArtifact: fromCreatedArtifact(params["CreatedArtifact"]),
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateCreatedArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDiscoveredResource(
    {abortSignal, ...params}: RequestConfig & s.AssociateDiscoveredResourceRequest,
  ): Promise<s.AssociateDiscoveredResourceResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      DiscoveredResource: fromDiscoveredResource(params["DiscoveredResource"]),
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDiscoveredResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createProgressUpdateStream(
    {abortSignal, ...params}: RequestConfig & s.CreateProgressUpdateStreamRequest,
  ): Promise<s.CreateProgressUpdateStreamResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStreamName: params["ProgressUpdateStreamName"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProgressUpdateStream",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProgressUpdateStream(
    {abortSignal, ...params}: RequestConfig & s.DeleteProgressUpdateStreamRequest,
  ): Promise<s.DeleteProgressUpdateStreamResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStreamName: params["ProgressUpdateStreamName"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProgressUpdateStream",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeApplicationState(
    {abortSignal, ...params}: RequestConfig & s.DescribeApplicationStateRequest,
  ): Promise<s.DescribeApplicationStateResult> {
    const body: jsonP.JSONObject = {
      ApplicationId: params["ApplicationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplicationState",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ApplicationStatus>(x),
        "LastUpdatedTime": "d",
      },
    }, await resp.json());
  }

  async describeMigrationTask(
    {abortSignal, ...params}: RequestConfig & s.DescribeMigrationTaskRequest,
  ): Promise<s.DescribeMigrationTaskResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMigrationTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MigrationTask": toMigrationTask,
      },
    }, await resp.json());
  }

  async disassociateCreatedArtifact(
    {abortSignal, ...params}: RequestConfig & s.DisassociateCreatedArtifactRequest,
  ): Promise<s.DisassociateCreatedArtifactResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      CreatedArtifactName: params["CreatedArtifactName"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateCreatedArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDiscoveredResource(
    {abortSignal, ...params}: RequestConfig & s.DisassociateDiscoveredResourceRequest,
  ): Promise<s.DisassociateDiscoveredResourceResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      ConfigurationId: params["ConfigurationId"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDiscoveredResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async importMigrationTask(
    {abortSignal, ...params}: RequestConfig & s.ImportMigrationTaskRequest,
  ): Promise<s.ImportMigrationTaskResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportMigrationTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async listApplicationStates(
    {abortSignal, ...params}: RequestConfig & s.ListApplicationStatesRequest = {},
  ): Promise<s.ListApplicationStatesResult> {
    const body: jsonP.JSONObject = {
      ApplicationIds: params["ApplicationIds"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplicationStates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationStateList": [toApplicationState],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCreatedArtifacts(
    {abortSignal, ...params}: RequestConfig & s.ListCreatedArtifactsRequest,
  ): Promise<s.ListCreatedArtifactsResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCreatedArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "CreatedArtifactList": [toCreatedArtifact],
      },
    }, await resp.json());
  }

  async listDiscoveredResources(
    {abortSignal, ...params}: RequestConfig & s.ListDiscoveredResourcesRequest,
  ): Promise<s.ListDiscoveredResourcesResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDiscoveredResources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "DiscoveredResourceList": [toDiscoveredResource],
      },
    }, await resp.json());
  }

  async listMigrationTasks(
    {abortSignal, ...params}: RequestConfig & s.ListMigrationTasksRequest = {},
  ): Promise<s.ListMigrationTasksResult> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      ResourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMigrationTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MigrationTaskSummaryList": [toMigrationTaskSummary],
      },
    }, await resp.json());
  }

  async listProgressUpdateStreams(
    {abortSignal, ...params}: RequestConfig & s.ListProgressUpdateStreamsRequest = {},
  ): Promise<s.ListProgressUpdateStreamsResult> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProgressUpdateStreams",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProgressUpdateStreamSummaryList": [toProgressUpdateStreamSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async notifyApplicationState(
    {abortSignal, ...params}: RequestConfig & s.NotifyApplicationStateRequest,
  ): Promise<s.NotifyApplicationStateResult> {
    const body: jsonP.JSONObject = {
      ApplicationId: params["ApplicationId"],
      Status: params["Status"],
      UpdateDateTime: jsonP.serializeDate_unixTimestamp(params["UpdateDateTime"]),
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "NotifyApplicationState",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async notifyMigrationTaskState(
    {abortSignal, ...params}: RequestConfig & s.NotifyMigrationTaskStateRequest,
  ): Promise<s.NotifyMigrationTaskStateResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      Task: fromTask(params["Task"]),
      UpdateDateTime: jsonP.serializeDate_unixTimestamp(params["UpdateDateTime"]),
      NextUpdateSeconds: params["NextUpdateSeconds"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "NotifyMigrationTaskState",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putResourceAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutResourceAttributesRequest,
  ): Promise<s.PutResourceAttributesResult> {
    const body: jsonP.JSONObject = {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      ResourceAttributeList: params["ResourceAttributeList"]?.map(x => fromResourceAttribute(x)),
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResourceAttributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromCreatedArtifact(input?: s.CreatedArtifact | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Description: input["Description"],
  }
}
function toCreatedArtifact(root: jsonP.JSONValue): s.CreatedArtifact {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Description": "s",
    },
  }, root);
}

function fromDiscoveredResource(input?: s.DiscoveredResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationId: input["ConfigurationId"],
    Description: input["Description"],
  }
}
function toDiscoveredResource(root: jsonP.JSONValue): s.DiscoveredResource {
  return jsonP.readObj({
    required: {
      "ConfigurationId": "s",
    },
    optional: {
      "Description": "s",
    },
  }, root);
}

function fromTask(input?: s.Task | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Status: input["Status"],
    StatusDetail: input["StatusDetail"],
    ProgressPercent: input["ProgressPercent"],
  }
}
function toTask(root: jsonP.JSONValue): s.Task {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
    },
    optional: {
      "StatusDetail": "s",
      "ProgressPercent": "n",
    },
  }, root);
}

function fromResourceAttribute(input?: s.ResourceAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Value: input["Value"],
  }
}
function toResourceAttribute(root: jsonP.JSONValue): s.ResourceAttribute {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceAttributeType>(x),
      "Value": "s",
    },
    optional: {},
  }, root);
}

function toMigrationTask(root: jsonP.JSONValue): s.MigrationTask {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProgressUpdateStream": "s",
      "MigrationTaskName": "s",
      "Task": toTask,
      "UpdateDateTime": "d",
      "ResourceAttributeList": [toResourceAttribute],
    },
  }, root);
}

function toApplicationState(root: jsonP.JSONValue): s.ApplicationState {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ApplicationStatus>(x),
      "LastUpdatedTime": "d",
    },
  }, root);
}

function toMigrationTaskSummary(root: jsonP.JSONValue): s.MigrationTaskSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProgressUpdateStream": "s",
      "MigrationTaskName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      "ProgressPercent": "n",
      "StatusDetail": "s",
      "UpdateDateTime": "d",
    },
  }, root);
}

function toProgressUpdateStreamSummary(root: jsonP.JSONValue): s.ProgressUpdateStreamSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProgressUpdateStreamName": "s",
    },
  }, root);
}
