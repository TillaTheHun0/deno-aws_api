// Autogenerated API client for: Amazon Managed Blockchain

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class ManagedBlockchain {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ManagedBlockchain.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-09-24",
    "endpointPrefix": "managedblockchain",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "ManagedBlockchain",
    "serviceFullName": "Amazon Managed Blockchain",
    "serviceId": "ManagedBlockchain",
    "signatureVersion": "v4",
    "signingName": "managedblockchain",
    "uid": "managedblockchain-2018-09-24"
  };

  async createMember(
    {abortSignal, ...params}: RequestConfig & CreateMemberInput,
  ): Promise<CreateMemberOutput> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      InvitationId: params["InvitationId"],
      MemberConfiguration: fromMemberConfiguration(params["MemberConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMember",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MemberId": "s",
      },
    }, await resp.json());
  }

  async createNetwork(
    {abortSignal, ...params}: RequestConfig & CreateNetworkInput,
  ): Promise<CreateNetworkOutput> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Name: params["Name"],
      Description: params["Description"],
      Framework: params["Framework"],
      FrameworkVersion: params["FrameworkVersion"],
      FrameworkConfiguration: fromNetworkFrameworkConfiguration(params["FrameworkConfiguration"]),
      VotingPolicy: fromVotingPolicy(params["VotingPolicy"]),
      MemberConfiguration: fromMemberConfiguration(params["MemberConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNetwork",
      requestUri: "/networks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NetworkId": "s",
        "MemberId": "s",
      },
    }, await resp.json());
  }

  async createNode(
    {abortSignal, ...params}: RequestConfig & CreateNodeInput,
  ): Promise<CreateNodeOutput> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      NodeConfiguration: fromNodeConfiguration(params["NodeConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNode",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}/nodes`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NodeId": "s",
      },
    }, await resp.json());
  }

  async createProposal(
    {abortSignal, ...params}: RequestConfig & CreateProposalInput,
  ): Promise<CreateProposalOutput> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      MemberId: params["MemberId"],
      Actions: fromProposalActions(params["Actions"]),
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProposal",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/proposals`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProposalId": "s",
      },
    }, await resp.json());
  }

  async deleteMember(
    {abortSignal, ...params}: RequestConfig & DeleteMemberInput,
  ): Promise<DeleteMemberOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMember",
      method: "DELETE",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteNode(
    {abortSignal, ...params}: RequestConfig & DeleteNodeInput,
  ): Promise<DeleteNodeOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteNode",
      method: "DELETE",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}/nodes/${params["NodeId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getMember(
    {abortSignal, ...params}: RequestConfig & GetMemberInput,
  ): Promise<GetMemberOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMember",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Member": toMember,
      },
    }, await resp.json());
  }

  async getNetwork(
    {abortSignal, ...params}: RequestConfig & GetNetworkInput,
  ): Promise<GetNetworkOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetNetwork",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Network": toNetwork,
      },
    }, await resp.json());
  }

  async getNode(
    {abortSignal, ...params}: RequestConfig & GetNodeInput,
  ): Promise<GetNodeOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetNode",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}/nodes/${params["NodeId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Node": toNode,
      },
    }, await resp.json());
  }

  async getProposal(
    {abortSignal, ...params}: RequestConfig & GetProposalInput,
  ): Promise<GetProposalOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetProposal",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/proposals/${params["ProposalId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Proposal": toProposal,
      },
    }, await resp.json());
  }

  async listInvitations(
    {abortSignal, ...params}: RequestConfig & ListInvitationsInput = {},
  ): Promise<ListInvitationsOutput> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInvitations",
      method: "GET",
      requestUri: "/invitations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Invitations": [toInvitation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMembers(
    {abortSignal, ...params}: RequestConfig & ListMembersInput,
  ): Promise<ListMembersOutput> {
    const query = new URLSearchParams;
    if (params["Name"] != null) query.set("name", params["Name"]?.toString() ?? "");
    if (params["Status"] != null) query.set("status", params["Status"]?.toString() ?? "");
    if (params["IsOwned"] != null) query.set("isOwned", params["IsOwned"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMembers",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Members": [toMemberSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listNetworks(
    {abortSignal, ...params}: RequestConfig & ListNetworksInput = {},
  ): Promise<ListNetworksOutput> {
    const query = new URLSearchParams;
    if (params["Name"] != null) query.set("name", params["Name"]?.toString() ?? "");
    if (params["Framework"] != null) query.set("framework", params["Framework"]?.toString() ?? "");
    if (params["Status"] != null) query.set("status", params["Status"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListNetworks",
      method: "GET",
      requestUri: "/networks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Networks": [toNetworkSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listNodes(
    {abortSignal, ...params}: RequestConfig & ListNodesInput,
  ): Promise<ListNodesOutput> {
    const query = new URLSearchParams;
    if (params["Status"] != null) query.set("status", params["Status"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListNodes",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}/nodes`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Nodes": [toNodeSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProposalVotes(
    {abortSignal, ...params}: RequestConfig & ListProposalVotesInput,
  ): Promise<ListProposalVotesOutput> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProposalVotes",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/proposals/${params["ProposalId"]}/votes`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProposalVotes": [toVoteSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProposals(
    {abortSignal, ...params}: RequestConfig & ListProposalsInput,
  ): Promise<ListProposalsOutput> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProposals",
      method: "GET",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/proposals`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Proposals": [toProposalSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async rejectInvitation(
    {abortSignal, ...params}: RequestConfig & RejectInvitationInput,
  ): Promise<RejectInvitationOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RejectInvitation",
      method: "DELETE",
      requestUri: cmnP.encodePath`/invitations/${params["InvitationId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateMember(
    {abortSignal, ...params}: RequestConfig & UpdateMemberInput,
  ): Promise<UpdateMemberOutput> {
    const body: jsonP.JSONObject = {
      LogPublishingConfiguration: fromMemberLogPublishingConfiguration(params["LogPublishingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMember",
      method: "PATCH",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateNode(
    {abortSignal, ...params}: RequestConfig & UpdateNodeInput,
  ): Promise<UpdateNodeOutput> {
    const body: jsonP.JSONObject = {
      LogPublishingConfiguration: fromNodeLogPublishingConfiguration(params["LogPublishingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNode",
      method: "PATCH",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/members/${params["MemberId"]}/nodes/${params["NodeId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async voteOnProposal(
    {abortSignal, ...params}: RequestConfig & VoteOnProposalInput,
  ): Promise<VoteOnProposalOutput> {
    const body: jsonP.JSONObject = {
      VoterMemberId: params["VoterMemberId"],
      Vote: params["Vote"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "VoteOnProposal",
      requestUri: cmnP.encodePath`/networks/${params["NetworkId"]}/proposals/${params["ProposalId"]}/votes`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateMemberInput {
  ClientRequestToken: string;
  InvitationId: string;
  NetworkId: string;
  MemberConfiguration: MemberConfiguration;
}

// refs: 1 - tags: named, input
export interface CreateNetworkInput {
  ClientRequestToken: string;
  Name: string;
  Description?: string | null;
  Framework: Framework;
  FrameworkVersion: string;
  FrameworkConfiguration?: NetworkFrameworkConfiguration | null;
  VotingPolicy: VotingPolicy;
  MemberConfiguration: MemberConfiguration;
}

// refs: 1 - tags: named, input
export interface CreateNodeInput {
  ClientRequestToken: string;
  NetworkId: string;
  MemberId: string;
  NodeConfiguration: NodeConfiguration;
}

// refs: 1 - tags: named, input
export interface CreateProposalInput {
  ClientRequestToken: string;
  NetworkId: string;
  MemberId: string;
  Actions: ProposalActions;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteMemberInput {
  NetworkId: string;
  MemberId: string;
}

// refs: 1 - tags: named, input
export interface DeleteNodeInput {
  NetworkId: string;
  MemberId: string;
  NodeId: string;
}

// refs: 1 - tags: named, input
export interface GetMemberInput {
  NetworkId: string;
  MemberId: string;
}

// refs: 1 - tags: named, input
export interface GetNetworkInput {
  NetworkId: string;
}

// refs: 1 - tags: named, input
export interface GetNodeInput {
  NetworkId: string;
  MemberId: string;
  NodeId: string;
}

// refs: 1 - tags: named, input
export interface GetProposalInput {
  NetworkId: string;
  ProposalId: string;
}

// refs: 1 - tags: named, input
export interface ListInvitationsInput {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListMembersInput {
  NetworkId: string;
  Name?: string | null;
  Status?: MemberStatus | null;
  IsOwned?: boolean | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListNetworksInput {
  Name?: string | null;
  Framework?: Framework | null;
  Status?: NetworkStatus | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListNodesInput {
  NetworkId: string;
  MemberId: string;
  Status?: NodeStatus | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProposalVotesInput {
  NetworkId: string;
  ProposalId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProposalsInput {
  NetworkId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface RejectInvitationInput {
  InvitationId: string;
}

// refs: 1 - tags: named, input
export interface UpdateMemberInput {
  NetworkId: string;
  MemberId: string;
  LogPublishingConfiguration?: MemberLogPublishingConfiguration | null;
}

// refs: 1 - tags: named, input
export interface UpdateNodeInput {
  NetworkId: string;
  MemberId: string;
  NodeId: string;
  LogPublishingConfiguration?: NodeLogPublishingConfiguration | null;
}

// refs: 1 - tags: named, input
export interface VoteOnProposalInput {
  NetworkId: string;
  ProposalId: string;
  VoterMemberId: string;
  Vote: VoteValue;
}

// refs: 1 - tags: named, output
export interface CreateMemberOutput {
  MemberId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateNetworkOutput {
  NetworkId?: string | null;
  MemberId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateNodeOutput {
  NodeId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateProposalOutput {
  ProposalId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteMemberOutput {
}

// refs: 1 - tags: named, output
export interface DeleteNodeOutput {
}

// refs: 1 - tags: named, output
export interface GetMemberOutput {
  Member?: Member | null;
}

// refs: 1 - tags: named, output
export interface GetNetworkOutput {
  Network?: Network | null;
}

// refs: 1 - tags: named, output
export interface GetNodeOutput {
  Node?: Node | null;
}

// refs: 1 - tags: named, output
export interface GetProposalOutput {
  Proposal?: Proposal | null;
}

// refs: 1 - tags: named, output
export interface ListInvitationsOutput {
  Invitations?: Invitation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMembersOutput {
  Members?: MemberSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListNetworksOutput {
  Networks?: NetworkSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListNodesOutput {
  Nodes?: NodeSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProposalVotesOutput {
  ProposalVotes?: VoteSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProposalsOutput {
  Proposals?: ProposalSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RejectInvitationOutput {
}

// refs: 1 - tags: named, output
export interface UpdateMemberOutput {
}

// refs: 1 - tags: named, output
export interface UpdateNodeOutput {
}

// refs: 1 - tags: named, output
export interface VoteOnProposalOutput {
}

// refs: 2 - tags: input, named, interface
export interface MemberConfiguration {
  Name: string;
  Description?: string | null;
  FrameworkConfiguration: MemberFrameworkConfiguration;
  LogPublishingConfiguration?: MemberLogPublishingConfiguration | null;
}
function fromMemberConfiguration(input?: MemberConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Description: input["Description"],
    FrameworkConfiguration: fromMemberFrameworkConfiguration(input["FrameworkConfiguration"]),
    LogPublishingConfiguration: fromMemberLogPublishingConfiguration(input["LogPublishingConfiguration"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface MemberFrameworkConfiguration {
  Fabric?: MemberFabricConfiguration | null;
}
function fromMemberFrameworkConfiguration(input?: MemberFrameworkConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Fabric: fromMemberFabricConfiguration(input["Fabric"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface MemberFabricConfiguration {
  AdminUsername: string;
  AdminPassword: string;
}
function fromMemberFabricConfiguration(input?: MemberFabricConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdminUsername: input["AdminUsername"],
    AdminPassword: input["AdminPassword"],
  }
}

// refs: 4 - tags: input, named, interface, output
export interface MemberLogPublishingConfiguration {
  Fabric?: MemberFabricLogPublishingConfiguration | null;
}
function fromMemberLogPublishingConfiguration(input?: MemberLogPublishingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Fabric: fromMemberFabricLogPublishingConfiguration(input["Fabric"]),
  }
}
function toMemberLogPublishingConfiguration(root: jsonP.JSONValue): MemberLogPublishingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Fabric": toMemberFabricLogPublishingConfiguration,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MemberFabricLogPublishingConfiguration {
  CaLogs?: LogConfigurations | null;
}
function fromMemberFabricLogPublishingConfiguration(input?: MemberFabricLogPublishingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CaLogs: fromLogConfigurations(input["CaLogs"]),
  }
}
function toMemberFabricLogPublishingConfiguration(root: jsonP.JSONValue): MemberFabricLogPublishingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "CaLogs": toLogConfigurations,
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface LogConfigurations {
  Cloudwatch?: LogConfiguration | null;
}
function fromLogConfigurations(input?: LogConfigurations | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Cloudwatch: fromLogConfiguration(input["Cloudwatch"]),
  }
}
function toLogConfigurations(root: jsonP.JSONValue): LogConfigurations {
  return jsonP.readObj({
    required: {},
    optional: {
      "Cloudwatch": toLogConfiguration,
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface LogConfiguration {
  Enabled?: boolean | null;
}
function fromLogConfiguration(input?: LogConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
  }
}
function toLogConfiguration(root: jsonP.JSONValue): LogConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Enabled": "b",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type Framework =
| "HYPERLEDGER_FABRIC"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface NetworkFrameworkConfiguration {
  Fabric?: NetworkFabricConfiguration | null;
}
function fromNetworkFrameworkConfiguration(input?: NetworkFrameworkConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Fabric: fromNetworkFabricConfiguration(input["Fabric"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface NetworkFabricConfiguration {
  Edition: Edition;
}
function fromNetworkFabricConfiguration(input?: NetworkFabricConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Edition: input["Edition"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type Edition =
| "STARTER"
| "STANDARD"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface VotingPolicy {
  ApprovalThresholdPolicy?: ApprovalThresholdPolicy | null;
}
function fromVotingPolicy(input?: VotingPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApprovalThresholdPolicy: fromApprovalThresholdPolicy(input["ApprovalThresholdPolicy"]),
  }
}
function toVotingPolicy(root: jsonP.JSONValue): VotingPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApprovalThresholdPolicy": toApprovalThresholdPolicy,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ApprovalThresholdPolicy {
  ThresholdPercentage?: number | null;
  ProposalDurationInHours?: number | null;
  ThresholdComparator?: ThresholdComparator | null;
}
function fromApprovalThresholdPolicy(input?: ApprovalThresholdPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ThresholdPercentage: input["ThresholdPercentage"],
    ProposalDurationInHours: input["ProposalDurationInHours"],
    ThresholdComparator: input["ThresholdComparator"],
  }
}
function toApprovalThresholdPolicy(root: jsonP.JSONValue): ApprovalThresholdPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "ThresholdPercentage": "n",
      "ProposalDurationInHours": "n",
      "ThresholdComparator": (x: jsonP.JSONValue) => cmnP.readEnum<ThresholdComparator>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ThresholdComparator =
| "GREATER_THAN"
| "GREATER_THAN_OR_EQUAL_TO"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface NodeConfiguration {
  InstanceType: string;
  AvailabilityZone: string;
  LogPublishingConfiguration?: NodeLogPublishingConfiguration | null;
  StateDB?: StateDBType | null;
}
function fromNodeConfiguration(input?: NodeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InstanceType: input["InstanceType"],
    AvailabilityZone: input["AvailabilityZone"],
    LogPublishingConfiguration: fromNodeLogPublishingConfiguration(input["LogPublishingConfiguration"]),
    StateDB: input["StateDB"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface NodeLogPublishingConfiguration {
  Fabric?: NodeFabricLogPublishingConfiguration | null;
}
function fromNodeLogPublishingConfiguration(input?: NodeLogPublishingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Fabric: fromNodeFabricLogPublishingConfiguration(input["Fabric"]),
  }
}
function toNodeLogPublishingConfiguration(root: jsonP.JSONValue): NodeLogPublishingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Fabric": toNodeFabricLogPublishingConfiguration,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface NodeFabricLogPublishingConfiguration {
  ChaincodeLogs?: LogConfigurations | null;
  PeerLogs?: LogConfigurations | null;
}
function fromNodeFabricLogPublishingConfiguration(input?: NodeFabricLogPublishingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ChaincodeLogs: fromLogConfigurations(input["ChaincodeLogs"]),
    PeerLogs: fromLogConfigurations(input["PeerLogs"]),
  }
}
function toNodeFabricLogPublishingConfiguration(root: jsonP.JSONValue): NodeFabricLogPublishingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChaincodeLogs": toLogConfigurations,
      "PeerLogs": toLogConfigurations,
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type StateDBType =
| "LevelDB"
| "CouchDB"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ProposalActions {
  Invitations?: InviteAction[] | null;
  Removals?: RemoveAction[] | null;
}
function fromProposalActions(input?: ProposalActions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Invitations: input["Invitations"]?.map(x => fromInviteAction(x)),
    Removals: input["Removals"]?.map(x => fromRemoveAction(x)),
  }
}
function toProposalActions(root: jsonP.JSONValue): ProposalActions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Invitations": [toInviteAction],
      "Removals": [toRemoveAction],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface InviteAction {
  Principal: string;
}
function fromInviteAction(input?: InviteAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Principal: input["Principal"],
  }
}
function toInviteAction(root: jsonP.JSONValue): InviteAction {
  return jsonP.readObj({
    required: {
      "Principal": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface RemoveAction {
  MemberId: string;
}
function fromRemoveAction(input?: RemoveAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MemberId: input["MemberId"],
  }
}
function toRemoveAction(root: jsonP.JSONValue): RemoveAction {
  return jsonP.readObj({
    required: {
      "MemberId": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type MemberStatus =
| "CREATING"
| "AVAILABLE"
| "CREATE_FAILED"
| "UPDATING"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type NetworkStatus =
| "CREATING"
| "AVAILABLE"
| "CREATE_FAILED"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type NodeStatus =
| "CREATING"
| "AVAILABLE"
| "CREATE_FAILED"
| "UPDATING"
| "DELETING"
| "DELETED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type VoteValue =
| "YES"
| "NO"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Member {
  NetworkId?: string | null;
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  FrameworkAttributes?: MemberFrameworkAttributes | null;
  LogPublishingConfiguration?: MemberLogPublishingConfiguration | null;
  Status?: MemberStatus | null;
  CreationDate?: Date | number | null;
}
function toMember(root: jsonP.JSONValue): Member {
  return jsonP.readObj({
    required: {},
    optional: {
      "NetworkId": "s",
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "FrameworkAttributes": toMemberFrameworkAttributes,
      "LogPublishingConfiguration": toMemberLogPublishingConfiguration,
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MemberStatus>(x),
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MemberFrameworkAttributes {
  Fabric?: MemberFabricAttributes | null;
}
function toMemberFrameworkAttributes(root: jsonP.JSONValue): MemberFrameworkAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "Fabric": toMemberFabricAttributes,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MemberFabricAttributes {
  AdminUsername?: string | null;
  CaEndpoint?: string | null;
}
function toMemberFabricAttributes(root: jsonP.JSONValue): MemberFabricAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdminUsername": "s",
      "CaEndpoint": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Network {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  Framework?: Framework | null;
  FrameworkVersion?: string | null;
  FrameworkAttributes?: NetworkFrameworkAttributes | null;
  VpcEndpointServiceName?: string | null;
  VotingPolicy?: VotingPolicy | null;
  Status?: NetworkStatus | null;
  CreationDate?: Date | number | null;
}
function toNetwork(root: jsonP.JSONValue): Network {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "Framework": (x: jsonP.JSONValue) => cmnP.readEnum<Framework>(x),
      "FrameworkVersion": "s",
      "FrameworkAttributes": toNetworkFrameworkAttributes,
      "VpcEndpointServiceName": "s",
      "VotingPolicy": toVotingPolicy,
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<NetworkStatus>(x),
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkFrameworkAttributes {
  Fabric?: NetworkFabricAttributes | null;
}
function toNetworkFrameworkAttributes(root: jsonP.JSONValue): NetworkFrameworkAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "Fabric": toNetworkFabricAttributes,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkFabricAttributes {
  OrderingServiceEndpoint?: string | null;
  Edition?: Edition | null;
}
function toNetworkFabricAttributes(root: jsonP.JSONValue): NetworkFabricAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "OrderingServiceEndpoint": "s",
      "Edition": (x: jsonP.JSONValue) => cmnP.readEnum<Edition>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Node {
  NetworkId?: string | null;
  MemberId?: string | null;
  Id?: string | null;
  InstanceType?: string | null;
  AvailabilityZone?: string | null;
  FrameworkAttributes?: NodeFrameworkAttributes | null;
  LogPublishingConfiguration?: NodeLogPublishingConfiguration | null;
  StateDB?: StateDBType | null;
  Status?: NodeStatus | null;
  CreationDate?: Date | number | null;
}
function toNode(root: jsonP.JSONValue): Node {
  return jsonP.readObj({
    required: {},
    optional: {
      "NetworkId": "s",
      "MemberId": "s",
      "Id": "s",
      "InstanceType": "s",
      "AvailabilityZone": "s",
      "FrameworkAttributes": toNodeFrameworkAttributes,
      "LogPublishingConfiguration": toNodeLogPublishingConfiguration,
      "StateDB": (x: jsonP.JSONValue) => cmnP.readEnum<StateDBType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<NodeStatus>(x),
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NodeFrameworkAttributes {
  Fabric?: NodeFabricAttributes | null;
}
function toNodeFrameworkAttributes(root: jsonP.JSONValue): NodeFrameworkAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "Fabric": toNodeFabricAttributes,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NodeFabricAttributes {
  PeerEndpoint?: string | null;
  PeerEventEndpoint?: string | null;
}
function toNodeFabricAttributes(root: jsonP.JSONValue): NodeFabricAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "PeerEndpoint": "s",
      "PeerEventEndpoint": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Proposal {
  ProposalId?: string | null;
  NetworkId?: string | null;
  Description?: string | null;
  Actions?: ProposalActions | null;
  ProposedByMemberId?: string | null;
  ProposedByMemberName?: string | null;
  Status?: ProposalStatus | null;
  CreationDate?: Date | number | null;
  ExpirationDate?: Date | number | null;
  YesVoteCount?: number | null;
  NoVoteCount?: number | null;
  OutstandingVoteCount?: number | null;
}
function toProposal(root: jsonP.JSONValue): Proposal {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProposalId": "s",
      "NetworkId": "s",
      "Description": "s",
      "Actions": toProposalActions,
      "ProposedByMemberId": "s",
      "ProposedByMemberName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ProposalStatus>(x),
      "CreationDate": "d",
      "ExpirationDate": "d",
      "YesVoteCount": "n",
      "NoVoteCount": "n",
      "OutstandingVoteCount": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ProposalStatus =
| "IN_PROGRESS"
| "APPROVED"
| "REJECTED"
| "EXPIRED"
| "ACTION_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Invitation {
  InvitationId?: string | null;
  CreationDate?: Date | number | null;
  ExpirationDate?: Date | number | null;
  Status?: InvitationStatus | null;
  NetworkSummary?: NetworkSummary | null;
}
function toInvitation(root: jsonP.JSONValue): Invitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "InvitationId": "s",
      "CreationDate": "d",
      "ExpirationDate": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<InvitationStatus>(x),
      "NetworkSummary": toNetworkSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type InvitationStatus =
| "PENDING"
| "ACCEPTED"
| "ACCEPTING"
| "REJECTED"
| "EXPIRED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface NetworkSummary {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  Framework?: Framework | null;
  FrameworkVersion?: string | null;
  Status?: NetworkStatus | null;
  CreationDate?: Date | number | null;
}
function toNetworkSummary(root: jsonP.JSONValue): NetworkSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "Framework": (x: jsonP.JSONValue) => cmnP.readEnum<Framework>(x),
      "FrameworkVersion": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<NetworkStatus>(x),
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MemberSummary {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  Status?: MemberStatus | null;
  CreationDate?: Date | number | null;
  IsOwned?: boolean | null;
}
function toMemberSummary(root: jsonP.JSONValue): MemberSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MemberStatus>(x),
      "CreationDate": "d",
      "IsOwned": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NodeSummary {
  Id?: string | null;
  Status?: NodeStatus | null;
  CreationDate?: Date | number | null;
  AvailabilityZone?: string | null;
  InstanceType?: string | null;
}
function toNodeSummary(root: jsonP.JSONValue): NodeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<NodeStatus>(x),
      "CreationDate": "d",
      "AvailabilityZone": "s",
      "InstanceType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VoteSummary {
  Vote?: VoteValue | null;
  MemberName?: string | null;
  MemberId?: string | null;
}
function toVoteSummary(root: jsonP.JSONValue): VoteSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Vote": (x: jsonP.JSONValue) => cmnP.readEnum<VoteValue>(x),
      "MemberName": "s",
      "MemberId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProposalSummary {
  ProposalId?: string | null;
  Description?: string | null;
  ProposedByMemberId?: string | null;
  ProposedByMemberName?: string | null;
  Status?: ProposalStatus | null;
  CreationDate?: Date | number | null;
  ExpirationDate?: Date | number | null;
}
function toProposalSummary(root: jsonP.JSONValue): ProposalSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProposalId": "s",
      "Description": "s",
      "ProposedByMemberId": "s",
      "ProposedByMemberName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ProposalStatus>(x),
      "CreationDate": "d",
      "ExpirationDate": "d",
    },
  }, root);
}
