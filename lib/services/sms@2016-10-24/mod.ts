// Autogenerated API client for: AWS Server Migration Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class SMS {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SMS.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-10-24",
    "endpointPrefix": "sms",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "SMS",
    "serviceFullName": "AWS Server Migration Service",
    "serviceId": "SMS",
    "signatureVersion": "v4",
    "targetPrefix": "AWSServerMigrationService_V2016_10_24",
    "uid": "sms-2016-10-24"
  };

  async createApp(
    {abortSignal, ...params}: RequestConfig & CreateAppRequest = {},
  ): Promise<CreateAppResponse> {
    const body: JSONObject = {...params,
    serverGroups: params["serverGroups"]?.map(x => fromServerGroup(x)),
    tags: params["tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApp",
    });
    return prt.readObj({
      required: {},
      optional: {
        "appSummary": toAppSummary,
        "serverGroups": [toServerGroup],
        "tags": [toTag],
      },
    }, await resp.json());
  }

  async createReplicationJob(
    {abortSignal, ...params}: RequestConfig & CreateReplicationJobRequest,
  ): Promise<CreateReplicationJobResponse> {
    const body: JSONObject = {...params,
    seedReplicationTime: prt.serializeDate_unixTimestamp(params["seedReplicationTime"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateReplicationJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "replicationJobId": "s",
      },
    }, await resp.json());
  }

  async deleteApp(
    {abortSignal, ...params}: RequestConfig & DeleteAppRequest = {},
  ): Promise<DeleteAppResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApp",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAppLaunchConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteAppLaunchConfigurationRequest = {},
  ): Promise<DeleteAppLaunchConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAppLaunchConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAppReplicationConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteAppReplicationConfigurationRequest = {},
  ): Promise<DeleteAppReplicationConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAppReplicationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAppValidationConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteAppValidationConfigurationRequest,
  ): Promise<DeleteAppValidationConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAppValidationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteReplicationJob(
    {abortSignal, ...params}: RequestConfig & DeleteReplicationJobRequest,
  ): Promise<DeleteReplicationJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteReplicationJob",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteServerCatalog(
    {abortSignal, ...params}: RequestConfig & DeleteServerCatalogRequest = {},
  ): Promise<DeleteServerCatalogResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteServerCatalog",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateConnector(
    {abortSignal, ...params}: RequestConfig & DisassociateConnectorRequest,
  ): Promise<DisassociateConnectorResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateConnector",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async generateChangeSet(
    {abortSignal, ...params}: RequestConfig & GenerateChangeSetRequest = {},
  ): Promise<GenerateChangeSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateChangeSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "s3Location": toS3Location,
      },
    }, await resp.json());
  }

  async generateTemplate(
    {abortSignal, ...params}: RequestConfig & GenerateTemplateRequest = {},
  ): Promise<GenerateTemplateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "s3Location": toS3Location,
      },
    }, await resp.json());
  }

  async getApp(
    {abortSignal, ...params}: RequestConfig & GetAppRequest = {},
  ): Promise<GetAppResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetApp",
    });
    return prt.readObj({
      required: {},
      optional: {
        "appSummary": toAppSummary,
        "serverGroups": [toServerGroup],
        "tags": [toTag],
      },
    }, await resp.json());
  }

  async getAppLaunchConfiguration(
    {abortSignal, ...params}: RequestConfig & GetAppLaunchConfigurationRequest = {},
  ): Promise<GetAppLaunchConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAppLaunchConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {
        "appId": "s",
        "roleName": "s",
        "autoLaunch": "b",
        "serverGroupLaunchConfigurations": [toServerGroupLaunchConfiguration],
      },
    }, await resp.json());
  }

  async getAppReplicationConfiguration(
    {abortSignal, ...params}: RequestConfig & GetAppReplicationConfigurationRequest = {},
  ): Promise<GetAppReplicationConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAppReplicationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {
        "serverGroupReplicationConfigurations": [toServerGroupReplicationConfiguration],
      },
    }, await resp.json());
  }

  async getAppValidationConfiguration(
    {abortSignal, ...params}: RequestConfig & GetAppValidationConfigurationRequest,
  ): Promise<GetAppValidationConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAppValidationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {
        "appValidationConfigurations": [toAppValidationConfiguration],
        "serverGroupValidationConfigurations": [toServerGroupValidationConfiguration],
      },
    }, await resp.json());
  }

  async getAppValidationOutput(
    {abortSignal, ...params}: RequestConfig & GetAppValidationOutputRequest,
  ): Promise<GetAppValidationOutputResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAppValidationOutput",
    });
    return prt.readObj({
      required: {},
      optional: {
        "validationOutputList": [toValidationOutput],
      },
    }, await resp.json());
  }

  async getConnectors(
    {abortSignal, ...params}: RequestConfig & GetConnectorsRequest = {},
  ): Promise<GetConnectorsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConnectors",
    });
    return prt.readObj({
      required: {},
      optional: {
        "connectorList": [toConnector],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getReplicationJobs(
    {abortSignal, ...params}: RequestConfig & GetReplicationJobsRequest = {},
  ): Promise<GetReplicationJobsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetReplicationJobs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "replicationJobList": [toReplicationJob],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getReplicationRuns(
    {abortSignal, ...params}: RequestConfig & GetReplicationRunsRequest,
  ): Promise<GetReplicationRunsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetReplicationRuns",
    });
    return prt.readObj({
      required: {},
      optional: {
        "replicationJob": toReplicationJob,
        "replicationRunList": [toReplicationRun],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getServers(
    {abortSignal, ...params}: RequestConfig & GetServersRequest = {},
  ): Promise<GetServersResponse> {
    const body: JSONObject = {...params,
    vmServerAddressList: params["vmServerAddressList"]?.map(x => fromVmServerAddress(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetServers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "lastModifiedOn": "d",
        "serverCatalogStatus": toServerCatalogStatus,
        "serverList": [toServer],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async importAppCatalog(
    {abortSignal, ...params}: RequestConfig & ImportAppCatalogRequest = {},
  ): Promise<ImportAppCatalogResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportAppCatalog",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async importServerCatalog(
    {abortSignal, ...params}: RequestConfig & ImportServerCatalogRequest = {},
  ): Promise<ImportServerCatalogResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportServerCatalog",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async launchApp(
    {abortSignal, ...params}: RequestConfig & LaunchAppRequest = {},
  ): Promise<LaunchAppResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "LaunchApp",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async listApps(
    {abortSignal, ...params}: RequestConfig & ListAppsRequest = {},
  ): Promise<ListAppsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApps",
    });
    return prt.readObj({
      required: {},
      optional: {
        "apps": [toAppSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async notifyAppValidationOutput(
    {abortSignal, ...params}: RequestConfig & NotifyAppValidationOutputRequest,
  ): Promise<NotifyAppValidationOutputResponse> {
    const body: JSONObject = {...params,
    notificationContext: fromNotificationContext(params["notificationContext"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "NotifyAppValidationOutput",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAppLaunchConfiguration(
    {abortSignal, ...params}: RequestConfig & PutAppLaunchConfigurationRequest = {},
  ): Promise<PutAppLaunchConfigurationResponse> {
    const body: JSONObject = {...params,
    serverGroupLaunchConfigurations: params["serverGroupLaunchConfigurations"]?.map(x => fromServerGroupLaunchConfiguration(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAppLaunchConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAppReplicationConfiguration(
    {abortSignal, ...params}: RequestConfig & PutAppReplicationConfigurationRequest = {},
  ): Promise<PutAppReplicationConfigurationResponse> {
    const body: JSONObject = {...params,
    serverGroupReplicationConfigurations: params["serverGroupReplicationConfigurations"]?.map(x => fromServerGroupReplicationConfiguration(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAppReplicationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAppValidationConfiguration(
    {abortSignal, ...params}: RequestConfig & PutAppValidationConfigurationRequest,
  ): Promise<PutAppValidationConfigurationResponse> {
    const body: JSONObject = {...params,
    appValidationConfigurations: params["appValidationConfigurations"]?.map(x => fromAppValidationConfiguration(x)),
    serverGroupValidationConfigurations: params["serverGroupValidationConfigurations"]?.map(x => fromServerGroupValidationConfiguration(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAppValidationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startAppReplication(
    {abortSignal, ...params}: RequestConfig & StartAppReplicationRequest = {},
  ): Promise<StartAppReplicationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartAppReplication",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startOnDemandAppReplication(
    {abortSignal, ...params}: RequestConfig & StartOnDemandAppReplicationRequest,
  ): Promise<StartOnDemandAppReplicationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartOnDemandAppReplication",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startOnDemandReplicationRun(
    {abortSignal, ...params}: RequestConfig & StartOnDemandReplicationRunRequest,
  ): Promise<StartOnDemandReplicationRunResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartOnDemandReplicationRun",
    });
    return prt.readObj({
      required: {},
      optional: {
        "replicationRunId": "s",
      },
    }, await resp.json());
  }

  async stopAppReplication(
    {abortSignal, ...params}: RequestConfig & StopAppReplicationRequest = {},
  ): Promise<StopAppReplicationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopAppReplication",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async terminateApp(
    {abortSignal, ...params}: RequestConfig & TerminateAppRequest = {},
  ): Promise<TerminateAppResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateApp",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateApp(
    {abortSignal, ...params}: RequestConfig & UpdateAppRequest = {},
  ): Promise<UpdateAppResponse> {
    const body: JSONObject = {...params,
    serverGroups: params["serverGroups"]?.map(x => fromServerGroup(x)),
    tags: params["tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApp",
    });
    return prt.readObj({
      required: {},
      optional: {
        "appSummary": toAppSummary,
        "serverGroups": [toServerGroup],
        "tags": [toTag],
      },
    }, await resp.json());
  }

  async updateReplicationJob(
    {abortSignal, ...params}: RequestConfig & UpdateReplicationJobRequest,
  ): Promise<UpdateReplicationJobResponse> {
    const body: JSONObject = {...params,
    nextReplicationRunStartTime: prt.serializeDate_unixTimestamp(params["nextReplicationRunStartTime"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateReplicationJob",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateAppRequest {
  name?: string | null;
  description?: string | null;
  roleName?: string | null;
  clientToken?: string | null;
  serverGroups?: ServerGroup[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateReplicationJobRequest {
  serverId: string;
  seedReplicationTime: Date | number;
  frequency?: number | null;
  runOnce?: boolean | null;
  licenseType?: LicenseType | null;
  roleName?: string | null;
  description?: string | null;
  numberOfRecentAmisToKeep?: number | null;
  encrypted?: boolean | null;
  kmsKeyId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteAppRequest {
  appId?: string | null;
  forceStopAppReplication?: boolean | null;
  forceTerminateApp?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteAppLaunchConfigurationRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteAppReplicationConfigurationRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteAppValidationConfigurationRequest {
  appId: string;
}

// refs: 1 - tags: named, input
export interface DeleteReplicationJobRequest {
  replicationJobId: string;
}

// refs: 1 - tags: named, input
export interface DeleteServerCatalogRequest {
}

// refs: 1 - tags: named, input
export interface DisassociateConnectorRequest {
  connectorId: string;
}

// refs: 1 - tags: named, input
export interface GenerateChangeSetRequest {
  appId?: string | null;
  changesetFormat?: OutputFormat | null;
}

// refs: 1 - tags: named, input
export interface GenerateTemplateRequest {
  appId?: string | null;
  templateFormat?: OutputFormat | null;
}

// refs: 1 - tags: named, input
export interface GetAppRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAppLaunchConfigurationRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAppReplicationConfigurationRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAppValidationConfigurationRequest {
  appId: string;
}

// refs: 1 - tags: named, input
export interface GetAppValidationOutputRequest {
  appId: string;
}

// refs: 1 - tags: named, input
export interface GetConnectorsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetReplicationJobsRequest {
  replicationJobId?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetReplicationRunsRequest {
  replicationJobId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetServersRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  vmServerAddressList?: VmServerAddress[] | null;
}

// refs: 1 - tags: named, input
export interface ImportAppCatalogRequest {
  roleName?: string | null;
}

// refs: 1 - tags: named, input
export interface ImportServerCatalogRequest {
}

// refs: 1 - tags: named, input
export interface LaunchAppRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAppsRequest {
  appIds?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface NotifyAppValidationOutputRequest {
  appId: string;
  notificationContext?: NotificationContext | null;
}

// refs: 1 - tags: named, input
export interface PutAppLaunchConfigurationRequest {
  appId?: string | null;
  roleName?: string | null;
  autoLaunch?: boolean | null;
  serverGroupLaunchConfigurations?: ServerGroupLaunchConfiguration[] | null;
}

// refs: 1 - tags: named, input
export interface PutAppReplicationConfigurationRequest {
  appId?: string | null;
  serverGroupReplicationConfigurations?: ServerGroupReplicationConfiguration[] | null;
}

// refs: 1 - tags: named, input
export interface PutAppValidationConfigurationRequest {
  appId: string;
  appValidationConfigurations?: AppValidationConfiguration[] | null;
  serverGroupValidationConfigurations?: ServerGroupValidationConfiguration[] | null;
}

// refs: 1 - tags: named, input
export interface StartAppReplicationRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface StartOnDemandAppReplicationRequest {
  appId: string;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface StartOnDemandReplicationRunRequest {
  replicationJobId: string;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface StopAppReplicationRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface TerminateAppRequest {
  appId?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAppRequest {
  appId?: string | null;
  name?: string | null;
  description?: string | null;
  roleName?: string | null;
  serverGroups?: ServerGroup[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateReplicationJobRequest {
  replicationJobId: string;
  frequency?: number | null;
  nextReplicationRunStartTime?: Date | number | null;
  licenseType?: LicenseType | null;
  roleName?: string | null;
  description?: string | null;
  numberOfRecentAmisToKeep?: number | null;
  encrypted?: boolean | null;
  kmsKeyId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateAppResponse {
  appSummary?: AppSummary | null;
  serverGroups?: ServerGroup[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface CreateReplicationJobResponse {
  replicationJobId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteAppResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAppLaunchConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAppReplicationConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAppValidationConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteReplicationJobResponse {
}

// refs: 1 - tags: named, output
export interface DeleteServerCatalogResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateConnectorResponse {
}

// refs: 1 - tags: named, output
export interface GenerateChangeSetResponse {
  s3Location?: S3Location | null;
}

// refs: 1 - tags: named, output
export interface GenerateTemplateResponse {
  s3Location?: S3Location | null;
}

// refs: 1 - tags: named, output
export interface GetAppResponse {
  appSummary?: AppSummary | null;
  serverGroups?: ServerGroup[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface GetAppLaunchConfigurationResponse {
  appId?: string | null;
  roleName?: string | null;
  autoLaunch?: boolean | null;
  serverGroupLaunchConfigurations?: ServerGroupLaunchConfiguration[] | null;
}

// refs: 1 - tags: named, output
export interface GetAppReplicationConfigurationResponse {
  serverGroupReplicationConfigurations?: ServerGroupReplicationConfiguration[] | null;
}

// refs: 1 - tags: named, output
export interface GetAppValidationConfigurationResponse {
  appValidationConfigurations?: AppValidationConfiguration[] | null;
  serverGroupValidationConfigurations?: ServerGroupValidationConfiguration[] | null;
}

// refs: 1 - tags: named, output
export interface GetAppValidationOutputResponse {
  validationOutputList?: ValidationOutput[] | null;
}

// refs: 1 - tags: named, output
export interface GetConnectorsResponse {
  connectorList?: Connector[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetReplicationJobsResponse {
  replicationJobList?: ReplicationJob[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetReplicationRunsResponse {
  replicationJob?: ReplicationJob | null;
  replicationRunList?: ReplicationRun[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetServersResponse {
  lastModifiedOn?: Date | number | null;
  serverCatalogStatus?: ServerCatalogStatus | null;
  serverList?: Server[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ImportAppCatalogResponse {
}

// refs: 1 - tags: named, output
export interface ImportServerCatalogResponse {
}

// refs: 1 - tags: named, output
export interface LaunchAppResponse {
}

// refs: 1 - tags: named, output
export interface ListAppsResponse {
  apps?: AppSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface NotifyAppValidationOutputResponse {
}

// refs: 1 - tags: named, output
export interface PutAppLaunchConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface PutAppReplicationConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface PutAppValidationConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface StartAppReplicationResponse {
}

// refs: 1 - tags: named, output
export interface StartOnDemandAppReplicationResponse {
}

// refs: 1 - tags: named, output
export interface StartOnDemandReplicationRunResponse {
  replicationRunId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopAppReplicationResponse {
}

// refs: 1 - tags: named, output
export interface TerminateAppResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAppResponse {
  appSummary?: AppSummary | null;
  serverGroups?: ServerGroup[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateReplicationJobResponse {
}

// refs: 5 - tags: input, named, interface, output
export interface ServerGroup {
  serverGroupId?: string | null;
  name?: string | null;
  serverList?: Server[] | null;
}
function fromServerGroup(input?: ServerGroup | null): JSONValue {
  if (!input) return input;
  return {...input,
    serverList: input["serverList"]?.map(x => fromServer(x)),
  }
}
function toServerGroup(root: JSONValue): ServerGroup {
  return prt.readObj({
    required: {},
    optional: {
      "serverGroupId": "s",
      "name": "s",
      "serverList": [toServer],
    },
  }, root);
}

// refs: 13 - tags: input, named, interface, output
export interface Server {
  serverId?: string | null;
  serverType?: ServerType | null;
  vmServer?: VmServer | null;
  replicationJobId?: string | null;
  replicationJobTerminated?: boolean | null;
}
function fromServer(input?: Server | null): JSONValue {
  if (!input) return input;
  return {...input,
    vmServer: fromVmServer(input["vmServer"]),
  }
}
function toServer(root: JSONValue): Server {
  return prt.readObj({
    required: {},
    optional: {
      "serverId": "s",
      "serverType": toServerType,
      "vmServer": toVmServer,
      "replicationJobId": "s",
      "replicationJobTerminated": "b",
    },
  }, root);
}

// refs: 15 - tags: input, named, enum, output
export type ServerType =
| "VIRTUAL_MACHINE"
;

function toServerType(root: JSONValue): ServerType | null {
  return ( false
    || root == "VIRTUAL_MACHINE"
  ) ? root : null;
}

// refs: 15 - tags: input, named, interface, output
export interface VmServer {
  vmServerAddress?: VmServerAddress | null;
  vmName?: string | null;
  vmManagerName?: string | null;
  vmManagerType?: VmManagerType | null;
  vmPath?: string | null;
}
function fromVmServer(input?: VmServer | null): JSONValue {
  if (!input) return input;
  return {...input,
    vmServerAddress: fromVmServerAddress(input["vmServerAddress"]),
  }
}
function toVmServer(root: JSONValue): VmServer {
  return prt.readObj({
    required: {},
    optional: {
      "vmServerAddress": toVmServerAddress,
      "vmName": "s",
      "vmManagerName": "s",
      "vmManagerType": toVmManagerType,
      "vmPath": "s",
    },
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface VmServerAddress {
  vmManagerId?: string | null;
  vmId?: string | null;
}
function fromVmServerAddress(input?: VmServerAddress | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toVmServerAddress(root: JSONValue): VmServerAddress {
  return prt.readObj({
    required: {},
    optional: {
      "vmManagerId": "s",
      "vmId": "s",
    },
  }, root);
}

// refs: 16 - tags: input, named, enum, output
export type VmManagerType =
| "VSPHERE"
| "SCVMM"
| "HYPERV-MANAGER"
;

function toVmManagerType(root: JSONValue): VmManagerType | null {
  return ( false
    || root == "VSPHERE"
    || root == "SCVMM"
    || root == "HYPERV-MANAGER"
  ) ? root : null;
}

// refs: 5 - tags: input, named, interface, output
export interface Tag {
  key?: string | null;
  value?: string | null;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {},
    optional: {
      "key": "s",
      "value": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type LicenseType =
| "AWS"
| "BYOL"
;

function toLicenseType(root: JSONValue): LicenseType | null {
  return ( false
    || root == "AWS"
    || root == "BYOL"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum
export type OutputFormat =
| "JSON"
| "YAML"
;


// refs: 1 - tags: input, named, interface
export interface NotificationContext {
  validationId?: string | null;
  status?: ValidationStatus | null;
  statusMessage?: string | null;
}
function fromNotificationContext(input?: NotificationContext | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, enum, output
export type ValidationStatus =
| "READY_FOR_VALIDATION"
| "PENDING"
| "IN_PROGRESS"
| "SUCCEEDED"
| "FAILED"
;

function toValidationStatus(root: JSONValue): ValidationStatus | null {
  return ( false
    || root == "READY_FOR_VALIDATION"
    || root == "PENDING"
    || root == "IN_PROGRESS"
    || root == "SUCCEEDED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface ServerGroupLaunchConfiguration {
  serverGroupId?: string | null;
  launchOrder?: number | null;
  serverLaunchConfigurations?: ServerLaunchConfiguration[] | null;
}
function fromServerGroupLaunchConfiguration(input?: ServerGroupLaunchConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    serverLaunchConfigurations: input["serverLaunchConfigurations"]?.map(x => fromServerLaunchConfiguration(x)),
  }
}
function toServerGroupLaunchConfiguration(root: JSONValue): ServerGroupLaunchConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "serverGroupId": "s",
      "launchOrder": "n",
      "serverLaunchConfigurations": [toServerLaunchConfiguration],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ServerLaunchConfiguration {
  server?: Server | null;
  logicalId?: string | null;
  vpc?: string | null;
  subnet?: string | null;
  securityGroup?: string | null;
  ec2KeyName?: string | null;
  userData?: UserData | null;
  instanceType?: string | null;
  associatePublicIpAddress?: boolean | null;
  iamInstanceProfileName?: string | null;
  configureScript?: S3Location | null;
  configureScriptType?: ScriptType | null;
}
function fromServerLaunchConfiguration(input?: ServerLaunchConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    server: fromServer(input["server"]),
    userData: fromUserData(input["userData"]),
    configureScript: fromS3Location(input["configureScript"]),
  }
}
function toServerLaunchConfiguration(root: JSONValue): ServerLaunchConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "server": toServer,
      "logicalId": "s",
      "vpc": "s",
      "subnet": "s",
      "securityGroup": "s",
      "ec2KeyName": "s",
      "userData": toUserData,
      "instanceType": "s",
      "associatePublicIpAddress": "b",
      "iamInstanceProfileName": "s",
      "configureScript": toS3Location,
      "configureScriptType": toScriptType,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface UserData {
  s3Location?: S3Location | null;
}
function fromUserData(input?: UserData | null): JSONValue {
  if (!input) return input;
  return {...input,
    s3Location: fromS3Location(input["s3Location"]),
  }
}
function toUserData(root: JSONValue): UserData {
  return prt.readObj({
    required: {},
    optional: {
      "s3Location": toS3Location,
    },
  }, root);
}

// refs: 11 - tags: input, named, interface, output
export interface S3Location {
  bucket?: string | null;
  key?: string | null;
}
function fromS3Location(input?: S3Location | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toS3Location(root: JSONValue): S3Location {
  return prt.readObj({
    required: {},
    optional: {
      "bucket": "s",
      "key": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type ScriptType =
| "SHELL_SCRIPT"
| "POWERSHELL_SCRIPT"
;

function toScriptType(root: JSONValue): ScriptType | null {
  return ( false
    || root == "SHELL_SCRIPT"
    || root == "POWERSHELL_SCRIPT"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface ServerGroupReplicationConfiguration {
  serverGroupId?: string | null;
  serverReplicationConfigurations?: ServerReplicationConfiguration[] | null;
}
function fromServerGroupReplicationConfiguration(input?: ServerGroupReplicationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    serverReplicationConfigurations: input["serverReplicationConfigurations"]?.map(x => fromServerReplicationConfiguration(x)),
  }
}
function toServerGroupReplicationConfiguration(root: JSONValue): ServerGroupReplicationConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "serverGroupId": "s",
      "serverReplicationConfigurations": [toServerReplicationConfiguration],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ServerReplicationConfiguration {
  server?: Server | null;
  serverReplicationParameters?: ServerReplicationParameters | null;
}
function fromServerReplicationConfiguration(input?: ServerReplicationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    server: fromServer(input["server"]),
    serverReplicationParameters: fromServerReplicationParameters(input["serverReplicationParameters"]),
  }
}
function toServerReplicationConfiguration(root: JSONValue): ServerReplicationConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "server": toServer,
      "serverReplicationParameters": toServerReplicationParameters,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ServerReplicationParameters {
  seedTime?: Date | number | null;
  frequency?: number | null;
  runOnce?: boolean | null;
  licenseType?: LicenseType | null;
  numberOfRecentAmisToKeep?: number | null;
  encrypted?: boolean | null;
  kmsKeyId?: string | null;
}
function fromServerReplicationParameters(input?: ServerReplicationParameters | null): JSONValue {
  if (!input) return input;
  return {...input,
    seedTime: prt.serializeDate_unixTimestamp(input["seedTime"]),
  }
}
function toServerReplicationParameters(root: JSONValue): ServerReplicationParameters {
  return prt.readObj({
    required: {},
    optional: {
      "seedTime": "d",
      "frequency": "n",
      "runOnce": "b",
      "licenseType": toLicenseType,
      "numberOfRecentAmisToKeep": "n",
      "encrypted": "b",
      "kmsKeyId": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AppValidationConfiguration {
  validationId?: string | null;
  name?: string | null;
  appValidationStrategy?: AppValidationStrategy | null;
  ssmValidationParameters?: SSMValidationParameters | null;
}
function fromAppValidationConfiguration(input?: AppValidationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    ssmValidationParameters: fromSSMValidationParameters(input["ssmValidationParameters"]),
  }
}
function toAppValidationConfiguration(root: JSONValue): AppValidationConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "validationId": "s",
      "name": "s",
      "appValidationStrategy": toAppValidationStrategy,
      "ssmValidationParameters": toSSMValidationParameters,
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type AppValidationStrategy =
| "SSM"
;

function toAppValidationStrategy(root: JSONValue): AppValidationStrategy | null {
  return ( false
    || root == "SSM"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface SSMValidationParameters {
  source?: Source | null;
  instanceId?: string | null;
  scriptType?: ScriptType | null;
  command?: string | null;
  executionTimeoutSeconds?: number | null;
  outputS3BucketName?: string | null;
}
function fromSSMValidationParameters(input?: SSMValidationParameters | null): JSONValue {
  if (!input) return input;
  return {...input,
    source: fromSource(input["source"]),
  }
}
function toSSMValidationParameters(root: JSONValue): SSMValidationParameters {
  return prt.readObj({
    required: {},
    optional: {
      "source": toSource,
      "instanceId": "s",
      "scriptType": toScriptType,
      "command": "s",
      "executionTimeoutSeconds": "n",
      "outputS3BucketName": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface Source {
  s3Location?: S3Location | null;
}
function fromSource(input?: Source | null): JSONValue {
  if (!input) return input;
  return {...input,
    s3Location: fromS3Location(input["s3Location"]),
  }
}
function toSource(root: JSONValue): Source {
  return prt.readObj({
    required: {},
    optional: {
      "s3Location": toS3Location,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ServerGroupValidationConfiguration {
  serverGroupId?: string | null;
  serverValidationConfigurations?: ServerValidationConfiguration[] | null;
}
function fromServerGroupValidationConfiguration(input?: ServerGroupValidationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    serverValidationConfigurations: input["serverValidationConfigurations"]?.map(x => fromServerValidationConfiguration(x)),
  }
}
function toServerGroupValidationConfiguration(root: JSONValue): ServerGroupValidationConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "serverGroupId": "s",
      "serverValidationConfigurations": [toServerValidationConfiguration],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ServerValidationConfiguration {
  server?: Server | null;
  validationId?: string | null;
  name?: string | null;
  serverValidationStrategy?: ServerValidationStrategy | null;
  userDataValidationParameters?: UserDataValidationParameters | null;
}
function fromServerValidationConfiguration(input?: ServerValidationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    server: fromServer(input["server"]),
    userDataValidationParameters: fromUserDataValidationParameters(input["userDataValidationParameters"]),
  }
}
function toServerValidationConfiguration(root: JSONValue): ServerValidationConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "server": toServer,
      "validationId": "s",
      "name": "s",
      "serverValidationStrategy": toServerValidationStrategy,
      "userDataValidationParameters": toUserDataValidationParameters,
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ServerValidationStrategy =
| "USERDATA"
;

function toServerValidationStrategy(root: JSONValue): ServerValidationStrategy | null {
  return ( false
    || root == "USERDATA"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface UserDataValidationParameters {
  source?: Source | null;
  scriptType?: ScriptType | null;
}
function fromUserDataValidationParameters(input?: UserDataValidationParameters | null): JSONValue {
  if (!input) return input;
  return {...input,
    source: fromSource(input["source"]),
  }
}
function toUserDataValidationParameters(root: JSONValue): UserDataValidationParameters {
  return prt.readObj({
    required: {},
    optional: {
      "source": toSource,
      "scriptType": toScriptType,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface AppSummary {
  appId?: string | null;
  importedAppId?: string | null;
  name?: string | null;
  description?: string | null;
  status?: AppStatus | null;
  statusMessage?: string | null;
  replicationConfigurationStatus?: AppReplicationConfigurationStatus | null;
  replicationStatus?: AppReplicationStatus | null;
  replicationStatusMessage?: string | null;
  latestReplicationTime?: Date | number | null;
  launchConfigurationStatus?: AppLaunchConfigurationStatus | null;
  launchStatus?: AppLaunchStatus | null;
  launchStatusMessage?: string | null;
  launchDetails?: LaunchDetails | null;
  creationTime?: Date | number | null;
  lastModified?: Date | number | null;
  roleName?: string | null;
  totalServerGroups?: number | null;
  totalServers?: number | null;
}
function toAppSummary(root: JSONValue): AppSummary {
  return prt.readObj({
    required: {},
    optional: {
      "appId": "s",
      "importedAppId": "s",
      "name": "s",
      "description": "s",
      "status": toAppStatus,
      "statusMessage": "s",
      "replicationConfigurationStatus": toAppReplicationConfigurationStatus,
      "replicationStatus": toAppReplicationStatus,
      "replicationStatusMessage": "s",
      "latestReplicationTime": "d",
      "launchConfigurationStatus": toAppLaunchConfigurationStatus,
      "launchStatus": toAppLaunchStatus,
      "launchStatusMessage": "s",
      "launchDetails": toLaunchDetails,
      "creationTime": "d",
      "lastModified": "d",
      "roleName": "s",
      "totalServerGroups": "n",
      "totalServers": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type AppStatus =
| "CREATING"
| "ACTIVE"
| "UPDATING"
| "DELETING"
| "DELETED"
| "DELETE_FAILED"
;
function toAppStatus(root: JSONValue): AppStatus | null {
  return ( false
    || root == "CREATING"
    || root == "ACTIVE"
    || root == "UPDATING"
    || root == "DELETING"
    || root == "DELETED"
    || root == "DELETE_FAILED"
  ) ? root : null;
}

// refs: 4 - tags: output, named, enum
export type AppReplicationConfigurationStatus =
| "NOT_CONFIGURED"
| "CONFIGURED"
;
function toAppReplicationConfigurationStatus(root: JSONValue): AppReplicationConfigurationStatus | null {
  return ( false
    || root == "NOT_CONFIGURED"
    || root == "CONFIGURED"
  ) ? root : null;
}

// refs: 4 - tags: output, named, enum
export type AppReplicationStatus =
| "READY_FOR_CONFIGURATION"
| "CONFIGURATION_IN_PROGRESS"
| "CONFIGURATION_INVALID"
| "READY_FOR_REPLICATION"
| "VALIDATION_IN_PROGRESS"
| "REPLICATION_PENDING"
| "REPLICATION_IN_PROGRESS"
| "REPLICATED"
| "PARTIALLY_REPLICATED"
| "DELTA_REPLICATION_IN_PROGRESS"
| "DELTA_REPLICATED"
| "DELTA_REPLICATION_FAILED"
| "REPLICATION_FAILED"
| "REPLICATION_STOPPING"
| "REPLICATION_STOP_FAILED"
| "REPLICATION_STOPPED"
;
function toAppReplicationStatus(root: JSONValue): AppReplicationStatus | null {
  return ( false
    || root == "READY_FOR_CONFIGURATION"
    || root == "CONFIGURATION_IN_PROGRESS"
    || root == "CONFIGURATION_INVALID"
    || root == "READY_FOR_REPLICATION"
    || root == "VALIDATION_IN_PROGRESS"
    || root == "REPLICATION_PENDING"
    || root == "REPLICATION_IN_PROGRESS"
    || root == "REPLICATED"
    || root == "PARTIALLY_REPLICATED"
    || root == "DELTA_REPLICATION_IN_PROGRESS"
    || root == "DELTA_REPLICATED"
    || root == "DELTA_REPLICATION_FAILED"
    || root == "REPLICATION_FAILED"
    || root == "REPLICATION_STOPPING"
    || root == "REPLICATION_STOP_FAILED"
    || root == "REPLICATION_STOPPED"
  ) ? root : null;
}

// refs: 4 - tags: output, named, enum
export type AppLaunchConfigurationStatus =
| "NOT_CONFIGURED"
| "CONFIGURED"
;
function toAppLaunchConfigurationStatus(root: JSONValue): AppLaunchConfigurationStatus | null {
  return ( false
    || root == "NOT_CONFIGURED"
    || root == "CONFIGURED"
  ) ? root : null;
}

// refs: 4 - tags: output, named, enum
export type AppLaunchStatus =
| "READY_FOR_CONFIGURATION"
| "CONFIGURATION_IN_PROGRESS"
| "CONFIGURATION_INVALID"
| "READY_FOR_LAUNCH"
| "VALIDATION_IN_PROGRESS"
| "LAUNCH_PENDING"
| "LAUNCH_IN_PROGRESS"
| "LAUNCHED"
| "PARTIALLY_LAUNCHED"
| "DELTA_LAUNCH_IN_PROGRESS"
| "DELTA_LAUNCH_FAILED"
| "LAUNCH_FAILED"
| "TERMINATE_IN_PROGRESS"
| "TERMINATE_FAILED"
| "TERMINATED"
;
function toAppLaunchStatus(root: JSONValue): AppLaunchStatus | null {
  return ( false
    || root == "READY_FOR_CONFIGURATION"
    || root == "CONFIGURATION_IN_PROGRESS"
    || root == "CONFIGURATION_INVALID"
    || root == "READY_FOR_LAUNCH"
    || root == "VALIDATION_IN_PROGRESS"
    || root == "LAUNCH_PENDING"
    || root == "LAUNCH_IN_PROGRESS"
    || root == "LAUNCHED"
    || root == "PARTIALLY_LAUNCHED"
    || root == "DELTA_LAUNCH_IN_PROGRESS"
    || root == "DELTA_LAUNCH_FAILED"
    || root == "LAUNCH_FAILED"
    || root == "TERMINATE_IN_PROGRESS"
    || root == "TERMINATE_FAILED"
    || root == "TERMINATED"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface LaunchDetails {
  latestLaunchTime?: Date | number | null;
  stackName?: string | null;
  stackId?: string | null;
}
function toLaunchDetails(root: JSONValue): LaunchDetails {
  return prt.readObj({
    required: {},
    optional: {
      "latestLaunchTime": "d",
      "stackName": "s",
      "stackId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ValidationOutput {
  validationId?: string | null;
  name?: string | null;
  status?: ValidationStatus | null;
  statusMessage?: string | null;
  latestValidationTime?: Date | number | null;
  appValidationOutput?: AppValidationOutput | null;
  serverValidationOutput?: ServerValidationOutput | null;
}
function toValidationOutput(root: JSONValue): ValidationOutput {
  return prt.readObj({
    required: {},
    optional: {
      "validationId": "s",
      "name": "s",
      "status": toValidationStatus,
      "statusMessage": "s",
      "latestValidationTime": "d",
      "appValidationOutput": toAppValidationOutput,
      "serverValidationOutput": toServerValidationOutput,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AppValidationOutput {
  ssmOutput?: SSMOutput | null;
}
function toAppValidationOutput(root: JSONValue): AppValidationOutput {
  return prt.readObj({
    required: {},
    optional: {
      "ssmOutput": toSSMOutput,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SSMOutput {
  s3Location?: S3Location | null;
}
function toSSMOutput(root: JSONValue): SSMOutput {
  return prt.readObj({
    required: {},
    optional: {
      "s3Location": toS3Location,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ServerValidationOutput {
  server?: Server | null;
}
function toServerValidationOutput(root: JSONValue): ServerValidationOutput {
  return prt.readObj({
    required: {},
    optional: {
      "server": toServer,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Connector {
  connectorId?: string | null;
  version?: string | null;
  status?: ConnectorStatus | null;
  capabilityList?: ConnectorCapability[] | null;
  vmManagerName?: string | null;
  vmManagerType?: VmManagerType | null;
  vmManagerId?: string | null;
  ipAddress?: string | null;
  macAddress?: string | null;
  associatedOn?: Date | number | null;
}
function toConnector(root: JSONValue): Connector {
  return prt.readObj({
    required: {},
    optional: {
      "connectorId": "s",
      "version": "s",
      "status": toConnectorStatus,
      "capabilityList": [toConnectorCapability],
      "vmManagerName": "s",
      "vmManagerType": toVmManagerType,
      "vmManagerId": "s",
      "ipAddress": "s",
      "macAddress": "s",
      "associatedOn": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ConnectorStatus =
| "HEALTHY"
| "UNHEALTHY"
;
function toConnectorStatus(root: JSONValue): ConnectorStatus | null {
  return ( false
    || root == "HEALTHY"
    || root == "UNHEALTHY"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type ConnectorCapability =
| "VSPHERE"
| "SCVMM"
| "HYPERV-MANAGER"
| "SNAPSHOT_BATCHING"
| "SMS_OPTIMIZED"
;
function toConnectorCapability(root: JSONValue): ConnectorCapability | null {
  return ( false
    || root == "VSPHERE"
    || root == "SCVMM"
    || root == "HYPERV-MANAGER"
    || root == "SNAPSHOT_BATCHING"
    || root == "SMS_OPTIMIZED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface ReplicationJob {
  replicationJobId?: string | null;
  serverId?: string | null;
  serverType?: ServerType | null;
  vmServer?: VmServer | null;
  seedReplicationTime?: Date | number | null;
  frequency?: number | null;
  runOnce?: boolean | null;
  nextReplicationRunStartTime?: Date | number | null;
  licenseType?: LicenseType | null;
  roleName?: string | null;
  latestAmiId?: string | null;
  state?: ReplicationJobState | null;
  statusMessage?: string | null;
  description?: string | null;
  numberOfRecentAmisToKeep?: number | null;
  encrypted?: boolean | null;
  kmsKeyId?: string | null;
  replicationRunList?: ReplicationRun[] | null;
}
function toReplicationJob(root: JSONValue): ReplicationJob {
  return prt.readObj({
    required: {},
    optional: {
      "replicationJobId": "s",
      "serverId": "s",
      "serverType": toServerType,
      "vmServer": toVmServer,
      "seedReplicationTime": "d",
      "frequency": "n",
      "runOnce": "b",
      "nextReplicationRunStartTime": "d",
      "licenseType": toLicenseType,
      "roleName": "s",
      "latestAmiId": "s",
      "state": toReplicationJobState,
      "statusMessage": "s",
      "description": "s",
      "numberOfRecentAmisToKeep": "n",
      "encrypted": "b",
      "kmsKeyId": "s",
      "replicationRunList": [toReplicationRun],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ReplicationJobState =
| "PENDING"
| "ACTIVE"
| "FAILED"
| "DELETING"
| "DELETED"
| "COMPLETED"
| "PAUSED_ON_FAILURE"
| "FAILING"
;
function toReplicationJobState(root: JSONValue): ReplicationJobState | null {
  return ( false
    || root == "PENDING"
    || root == "ACTIVE"
    || root == "FAILED"
    || root == "DELETING"
    || root == "DELETED"
    || root == "COMPLETED"
    || root == "PAUSED_ON_FAILURE"
    || root == "FAILING"
  ) ? root : null;
}

// refs: 3 - tags: output, named, interface
export interface ReplicationRun {
  replicationRunId?: string | null;
  state?: ReplicationRunState | null;
  type?: ReplicationRunType | null;
  stageDetails?: ReplicationRunStageDetails | null;
  statusMessage?: string | null;
  amiId?: string | null;
  scheduledStartTime?: Date | number | null;
  completedTime?: Date | number | null;
  description?: string | null;
  encrypted?: boolean | null;
  kmsKeyId?: string | null;
}
function toReplicationRun(root: JSONValue): ReplicationRun {
  return prt.readObj({
    required: {},
    optional: {
      "replicationRunId": "s",
      "state": toReplicationRunState,
      "type": toReplicationRunType,
      "stageDetails": toReplicationRunStageDetails,
      "statusMessage": "s",
      "amiId": "s",
      "scheduledStartTime": "d",
      "completedTime": "d",
      "description": "s",
      "encrypted": "b",
      "kmsKeyId": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ReplicationRunState =
| "PENDING"
| "MISSED"
| "ACTIVE"
| "FAILED"
| "COMPLETED"
| "DELETING"
| "DELETED"
;
function toReplicationRunState(root: JSONValue): ReplicationRunState | null {
  return ( false
    || root == "PENDING"
    || root == "MISSED"
    || root == "ACTIVE"
    || root == "FAILED"
    || root == "COMPLETED"
    || root == "DELETING"
    || root == "DELETED"
  ) ? root : null;
}

// refs: 3 - tags: output, named, enum
export type ReplicationRunType =
| "ON_DEMAND"
| "AUTOMATIC"
;
function toReplicationRunType(root: JSONValue): ReplicationRunType | null {
  return ( false
    || root == "ON_DEMAND"
    || root == "AUTOMATIC"
  ) ? root : null;
}

// refs: 3 - tags: output, named, interface
export interface ReplicationRunStageDetails {
  stage?: string | null;
  stageProgress?: string | null;
}
function toReplicationRunStageDetails(root: JSONValue): ReplicationRunStageDetails {
  return prt.readObj({
    required: {},
    optional: {
      "stage": "s",
      "stageProgress": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ServerCatalogStatus =
| "NOT_IMPORTED"
| "IMPORTING"
| "AVAILABLE"
| "DELETED"
| "EXPIRED"
;
function toServerCatalogStatus(root: JSONValue): ServerCatalogStatus | null {
  return ( false
    || root == "NOT_IMPORTED"
    || root == "IMPORTING"
    || root == "AVAILABLE"
    || root == "DELETED"
    || root == "EXPIRED"
  ) ? root : null;
}
