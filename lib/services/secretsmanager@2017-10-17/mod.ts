// Autogenerated API client for: AWS Secrets Manager

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class SecretsManager {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SecretsManager.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-10-17",
    "endpointPrefix": "secretsmanager",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Secrets Manager",
    "serviceId": "Secrets Manager",
    "signatureVersion": "v4",
    "signingName": "secretsmanager",
    "targetPrefix": "secretsmanager",
    "uid": "secretsmanager-2017-10-17"
  };

  async cancelRotateSecret(
    {abortSignal, ...params}: RequestConfig & CancelRotateSecretRequest,
  ): Promise<CancelRotateSecretResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelRotateSecret",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "VersionId": "s",
      },
    }, await resp.json());
  }

  async createSecret(
    {abortSignal, ...params}: RequestConfig & CreateSecretRequest,
  ): Promise<CreateSecretResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    SecretBinary: prt.serializeBlob(params["SecretBinary"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSecret",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "VersionId": "s",
      },
    }, await resp.json());
  }

  async deleteResourcePolicy(
    {abortSignal, ...params}: RequestConfig & DeleteResourcePolicyRequest,
  ): Promise<DeleteResourcePolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResourcePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async deleteSecret(
    {abortSignal, ...params}: RequestConfig & DeleteSecretRequest,
  ): Promise<DeleteSecretResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSecret",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "DeletionDate": "d",
      },
    }, await resp.json());
  }

  async describeSecret(
    {abortSignal, ...params}: RequestConfig & DescribeSecretRequest,
  ): Promise<DescribeSecretResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSecret",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "Description": "s",
        "KmsKeyId": "s",
        "RotationEnabled": "b",
        "RotationLambdaARN": "s",
        "RotationRules": toRotationRulesType,
        "LastRotatedDate": "d",
        "LastChangedDate": "d",
        "LastAccessedDate": "d",
        "DeletedDate": "d",
        "Tags": [toTag],
        "VersionIdsToStages": x => prt.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
        "OwningService": "s",
        "CreatedDate": "d",
      },
    }, await resp.json());
  }

  async getRandomPassword(
    {abortSignal, ...params}: RequestConfig & GetRandomPasswordRequest = {},
  ): Promise<GetRandomPasswordResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRandomPassword",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RandomPassword": "s",
      },
    }, await resp.json());
  }

  async getResourcePolicy(
    {abortSignal, ...params}: RequestConfig & GetResourcePolicyRequest,
  ): Promise<GetResourcePolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourcePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "ResourcePolicy": "s",
      },
    }, await resp.json());
  }

  async getSecretValue(
    {abortSignal, ...params}: RequestConfig & GetSecretValueRequest,
  ): Promise<GetSecretValueResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSecretValue",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "VersionId": "s",
        "SecretBinary": "a",
        "SecretString": "s",
        "VersionStages": ["s"],
        "CreatedDate": "d",
      },
    }, await resp.json());
  }

  async listSecretVersionIds(
    {abortSignal, ...params}: RequestConfig & ListSecretVersionIdsRequest,
  ): Promise<ListSecretVersionIdsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSecretVersionIds",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Versions": [toSecretVersionsListEntry],
        "NextToken": "s",
        "ARN": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async listSecrets(
    {abortSignal, ...params}: RequestConfig & ListSecretsRequest = {},
  ): Promise<ListSecretsResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSecrets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SecretList": [toSecretListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putResourcePolicy(
    {abortSignal, ...params}: RequestConfig & PutResourcePolicyRequest,
  ): Promise<PutResourcePolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResourcePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async putSecretValue(
    {abortSignal, ...params}: RequestConfig & PutSecretValueRequest,
  ): Promise<PutSecretValueResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    SecretBinary: prt.serializeBlob(params["SecretBinary"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutSecretValue",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "VersionId": "s",
        "VersionStages": ["s"],
      },
    }, await resp.json());
  }

  async restoreSecret(
    {abortSignal, ...params}: RequestConfig & RestoreSecretRequest,
  ): Promise<RestoreSecretResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreSecret",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async rotateSecret(
    {abortSignal, ...params}: RequestConfig & RotateSecretRequest,
  ): Promise<RotateSecretResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    RotationRules: fromRotationRulesType(params["RotationRules"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RotateSecret",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "VersionId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

  async updateSecret(
    {abortSignal, ...params}: RequestConfig & UpdateSecretRequest,
  ): Promise<UpdateSecretResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    SecretBinary: prt.serializeBlob(params["SecretBinary"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSecret",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
        "VersionId": "s",
      },
    }, await resp.json());
  }

  async updateSecretVersionStage(
    {abortSignal, ...params}: RequestConfig & UpdateSecretVersionStageRequest,
  ): Promise<UpdateSecretVersionStageResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSecretVersionStage",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ARN": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async validateResourcePolicy(
    {abortSignal, ...params}: RequestConfig & ValidateResourcePolicyRequest,
  ): Promise<ValidateResourcePolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ValidateResourcePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PolicyValidationPassed": "b",
        "ValidationErrors": [toValidationErrorsEntry],
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CancelRotateSecretRequest {
  SecretId: string;
}

// refs: 1 - tags: named, input
export interface CreateSecretRequest {
  Name: string;
  ClientRequestToken?: string | null;
  Description?: string | null;
  KmsKeyId?: string | null;
  SecretBinary?: Uint8Array | string | null;
  SecretString?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteResourcePolicyRequest {
  SecretId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSecretRequest {
  SecretId: string;
  RecoveryWindowInDays?: number | null;
  ForceDeleteWithoutRecovery?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeSecretRequest {
  SecretId: string;
}

// refs: 1 - tags: named, input
export interface GetRandomPasswordRequest {
  PasswordLength?: number | null;
  ExcludeCharacters?: string | null;
  ExcludeNumbers?: boolean | null;
  ExcludePunctuation?: boolean | null;
  ExcludeUppercase?: boolean | null;
  ExcludeLowercase?: boolean | null;
  IncludeSpace?: boolean | null;
  RequireEachIncludedType?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetResourcePolicyRequest {
  SecretId: string;
}

// refs: 1 - tags: named, input
export interface GetSecretValueRequest {
  SecretId: string;
  VersionId?: string | null;
  VersionStage?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSecretVersionIdsRequest {
  SecretId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  IncludeDeprecated?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListSecretsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
  SortOrder?: SortOrderType | null;
}

// refs: 1 - tags: named, input
export interface PutResourcePolicyRequest {
  SecretId: string;
  ResourcePolicy: string;
  BlockPublicPolicy?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutSecretValueRequest {
  SecretId: string;
  ClientRequestToken?: string | null;
  SecretBinary?: Uint8Array | string | null;
  SecretString?: string | null;
  VersionStages?: string[] | null;
}

// refs: 1 - tags: named, input
export interface RestoreSecretRequest {
  SecretId: string;
}

// refs: 1 - tags: named, input
export interface RotateSecretRequest {
  SecretId: string;
  ClientRequestToken?: string | null;
  RotationLambdaARN?: string | null;
  RotationRules?: RotationRulesType | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  SecretId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  SecretId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateSecretRequest {
  SecretId: string;
  ClientRequestToken?: string | null;
  Description?: string | null;
  KmsKeyId?: string | null;
  SecretBinary?: Uint8Array | string | null;
  SecretString?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateSecretVersionStageRequest {
  SecretId: string;
  VersionStage: string;
  RemoveFromVersionId?: string | null;
  MoveToVersionId?: string | null;
}

// refs: 1 - tags: named, input
export interface ValidateResourcePolicyRequest {
  SecretId?: string | null;
  ResourcePolicy: string;
}

// refs: 1 - tags: named, output
export interface CancelRotateSecretResponse {
  ARN?: string | null;
  Name?: string | null;
  VersionId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSecretResponse {
  ARN?: string | null;
  Name?: string | null;
  VersionId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteResourcePolicyResponse {
  ARN?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteSecretResponse {
  ARN?: string | null;
  Name?: string | null;
  DeletionDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeSecretResponse {
  ARN?: string | null;
  Name?: string | null;
  Description?: string | null;
  KmsKeyId?: string | null;
  RotationEnabled?: boolean | null;
  RotationLambdaARN?: string | null;
  RotationRules?: RotationRulesType | null;
  LastRotatedDate?: Date | number | null;
  LastChangedDate?: Date | number | null;
  LastAccessedDate?: Date | number | null;
  DeletedDate?: Date | number | null;
  Tags?: Tag[] | null;
  VersionIdsToStages?: { [key: string]: string[] } | null;
  OwningService?: string | null;
  CreatedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetRandomPasswordResponse {
  RandomPassword?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourcePolicyResponse {
  ARN?: string | null;
  Name?: string | null;
  ResourcePolicy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSecretValueResponse {
  ARN?: string | null;
  Name?: string | null;
  VersionId?: string | null;
  SecretBinary?: Uint8Array | string | null;
  SecretString?: string | null;
  VersionStages?: string[] | null;
  CreatedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface ListSecretVersionIdsResponse {
  Versions?: SecretVersionsListEntry[] | null;
  NextToken?: string | null;
  ARN?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSecretsResponse {
  SecretList?: SecretListEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutResourcePolicyResponse {
  ARN?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface PutSecretValueResponse {
  ARN?: string | null;
  Name?: string | null;
  VersionId?: string | null;
  VersionStages?: string[] | null;
}

// refs: 1 - tags: named, output
export interface RestoreSecretResponse {
  ARN?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface RotateSecretResponse {
  ARN?: string | null;
  Name?: string | null;
  VersionId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSecretResponse {
  ARN?: string | null;
  Name?: string | null;
  VersionId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSecretVersionStageResponse {
  ARN?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface ValidateResourcePolicyResponse {
  PolicyValidationPassed?: boolean | null;
  ValidationErrors?: ValidationErrorsEntry[] | null;
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface Filter {
  Key?: FilterNameStringType | null;
  Values?: string[] | null;
}
function fromFilter(input?: Filter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type FilterNameStringType =
| "description"
| "name"
| "tag-key"
| "tag-value"
| "all"
;


// refs: 1 - tags: input, named, enum
export type SortOrderType =
| "asc"
| "desc"
;


// refs: 3 - tags: input, named, interface, output
export interface RotationRulesType {
  AutomaticallyAfterDays?: number | null;
}
function fromRotationRulesType(input?: RotationRulesType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRotationRulesType(root: JSONValue): RotationRulesType {
  return prt.readObj({
    required: {},
    optional: {
      "AutomaticallyAfterDays": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecretVersionsListEntry {
  VersionId?: string | null;
  VersionStages?: string[] | null;
  LastAccessedDate?: Date | number | null;
  CreatedDate?: Date | number | null;
}
function toSecretVersionsListEntry(root: JSONValue): SecretVersionsListEntry {
  return prt.readObj({
    required: {},
    optional: {
      "VersionId": "s",
      "VersionStages": ["s"],
      "LastAccessedDate": "d",
      "CreatedDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecretListEntry {
  ARN?: string | null;
  Name?: string | null;
  Description?: string | null;
  KmsKeyId?: string | null;
  RotationEnabled?: boolean | null;
  RotationLambdaARN?: string | null;
  RotationRules?: RotationRulesType | null;
  LastRotatedDate?: Date | number | null;
  LastChangedDate?: Date | number | null;
  LastAccessedDate?: Date | number | null;
  DeletedDate?: Date | number | null;
  Tags?: Tag[] | null;
  SecretVersionsToStages?: { [key: string]: string[] } | null;
  OwningService?: string | null;
  CreatedDate?: Date | number | null;
}
function toSecretListEntry(root: JSONValue): SecretListEntry {
  return prt.readObj({
    required: {},
    optional: {
      "ARN": "s",
      "Name": "s",
      "Description": "s",
      "KmsKeyId": "s",
      "RotationEnabled": "b",
      "RotationLambdaARN": "s",
      "RotationRules": toRotationRulesType,
      "LastRotatedDate": "d",
      "LastChangedDate": "d",
      "LastAccessedDate": "d",
      "DeletedDate": "d",
      "Tags": [toTag],
      "SecretVersionsToStages": x => prt.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "OwningService": "s",
      "CreatedDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ValidationErrorsEntry {
  CheckName?: string | null;
  ErrorMessage?: string | null;
}
function toValidationErrorsEntry(root: JSONValue): ValidationErrorsEntry {
  return prt.readObj({
    required: {},
    optional: {
      "CheckName": "s",
      "ErrorMessage": "s",
    },
  }, root);
}
