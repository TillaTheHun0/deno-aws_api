// Autogenerated API client for: AWS OpsWorks CM

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class OpsWorksCM {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(OpsWorksCM.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-11-01",
    "endpointPrefix": "opsworks-cm",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "OpsWorksCM",
    "serviceFullName": "AWS OpsWorks CM",
    "serviceId": "OpsWorksCM",
    "signatureVersion": "v4",
    "signingName": "opsworks-cm",
    "targetPrefix": "OpsWorksCM_V2016_11_01",
    "uid": "opsworkscm-2016-11-01"
  };

  async associateNode(
    {abortSignal, ...params}: RequestConfig & AssociateNodeRequest,
  ): Promise<AssociateNodeResponse> {
    const body: JSONObject = {...params,
    EngineAttributes: params["EngineAttributes"]?.map(x => fromEngineAttribute(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateNode",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NodeAssociationStatusToken": "s",
      },
    }, await resp.json());
  }

  async createBackup(
    {abortSignal, ...params}: RequestConfig & CreateBackupRequest,
  ): Promise<CreateBackupResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Backup": toBackup,
      },
    }, await resp.json());
  }

  async createServer(
    {abortSignal, ...params}: RequestConfig & CreateServerRequest,
  ): Promise<CreateServerResponse> {
    const body: JSONObject = {...params,
    EngineAttributes: params["EngineAttributes"]?.map(x => fromEngineAttribute(x)),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateServer",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Server": toServer,
      },
    }, await resp.json());
  }

  async deleteBackup(
    {abortSignal, ...params}: RequestConfig & DeleteBackupRequest,
  ): Promise<DeleteBackupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBackup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteServer(
    {abortSignal, ...params}: RequestConfig & DeleteServerRequest,
  ): Promise<DeleteServerResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteServer",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAccountAttributes(
    {abortSignal, ...params}: RequestConfig & DescribeAccountAttributesRequest = {},
  ): Promise<DescribeAccountAttributesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Attributes": [toAccountAttribute],
      },
    }, await resp.json());
  }

  async describeBackups(
    {abortSignal, ...params}: RequestConfig & DescribeBackupsRequest = {},
  ): Promise<DescribeBackupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBackups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Backups": [toBackup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeEvents(
    {abortSignal, ...params}: RequestConfig & DescribeEventsRequest,
  ): Promise<DescribeEventsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEvents",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ServerEvents": [toServerEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeNodeAssociationStatus(
    {abortSignal, ...params}: RequestConfig & DescribeNodeAssociationStatusRequest,
  ): Promise<DescribeNodeAssociationStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeNodeAssociationStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NodeAssociationStatus": toNodeAssociationStatus,
        "EngineAttributes": [toEngineAttribute],
      },
    }, await resp.json());
  }

  async describeServers(
    {abortSignal, ...params}: RequestConfig & DescribeServersRequest = {},
  ): Promise<DescribeServersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeServers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Servers": [toServer],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async disassociateNode(
    {abortSignal, ...params}: RequestConfig & DisassociateNodeRequest,
  ): Promise<DisassociateNodeResponse> {
    const body: JSONObject = {...params,
    EngineAttributes: params["EngineAttributes"]?.map(x => fromEngineAttribute(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateNode",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NodeAssociationStatusToken": "s",
      },
    }, await resp.json());
  }

  async exportServerEngineAttribute(
    {abortSignal, ...params}: RequestConfig & ExportServerEngineAttributeRequest,
  ): Promise<ExportServerEngineAttributeResponse> {
    const body: JSONObject = {...params,
    InputAttributes: params["InputAttributes"]?.map(x => fromEngineAttribute(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExportServerEngineAttribute",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EngineAttribute": toEngineAttribute,
        "ServerName": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async restoreServer(
    {abortSignal, ...params}: RequestConfig & RestoreServerRequest,
  ): Promise<RestoreServerResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreServer",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startMaintenance(
    {abortSignal, ...params}: RequestConfig & StartMaintenanceRequest,
  ): Promise<StartMaintenanceResponse> {
    const body: JSONObject = {...params,
    EngineAttributes: params["EngineAttributes"]?.map(x => fromEngineAttribute(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartMaintenance",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Server": toServer,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateServer(
    {abortSignal, ...params}: RequestConfig & UpdateServerRequest,
  ): Promise<UpdateServerResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateServer",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Server": toServer,
      },
    }, await resp.json());
  }

  async updateServerEngineAttributes(
    {abortSignal, ...params}: RequestConfig & UpdateServerEngineAttributesRequest,
  ): Promise<UpdateServerEngineAttributesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateServerEngineAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Server": toServer,
      },
    }, await resp.json());
  }

  // Resource State Waiters

  /**
   * Wait until node is associated or disassociated.
   * Checks state up to 15 times, 15 seconds apart (about 4 minutes max wait time).
   */
  async waitForNodeAssociated(
    params: RequestConfig & DescribeNodeAssociationStatusRequest,
  ): Promise<DescribeNodeAssociationStatusResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state NodeAssociated';
    for (let i = 0; i < 15; i++) {
      const resp = await this.describeNodeAssociationStatus(params);
      const field = resp["NodeAssociationStatus"];
      if (field === "SUCCESS") return resp;
      if (field === "FAILED") throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 15000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface AssociateNodeRequest {
  ServerName: string;
  NodeName: string;
  EngineAttributes: EngineAttribute[];
}

// refs: 1 - tags: named, input
export interface CreateBackupRequest {
  ServerName: string;
  Description?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateServerRequest {
  AssociatePublicIpAddress?: boolean | null;
  CustomDomain?: string | null;
  CustomCertificate?: string | null;
  CustomPrivateKey?: string | null;
  DisableAutomatedBackup?: boolean | null;
  Engine: string;
  EngineModel?: string | null;
  EngineVersion?: string | null;
  EngineAttributes?: EngineAttribute[] | null;
  BackupRetentionCount?: number | null;
  ServerName: string;
  InstanceProfileArn: string;
  InstanceType: string;
  KeyPair?: string | null;
  PreferredMaintenanceWindow?: string | null;
  PreferredBackupWindow?: string | null;
  SecurityGroupIds?: string[] | null;
  ServiceRoleArn: string;
  SubnetIds?: string[] | null;
  Tags?: Tag[] | null;
  BackupId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteBackupRequest {
  BackupId: string;
}

// refs: 1 - tags: named, input
export interface DeleteServerRequest {
  ServerName: string;
}

// refs: 1 - tags: named, input
export interface DescribeAccountAttributesRequest {
}

// refs: 1 - tags: named, input
export interface DescribeBackupsRequest {
  BackupId?: string | null;
  ServerName?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventsRequest {
  ServerName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeNodeAssociationStatusRequest {
  NodeAssociationStatusToken: string;
  ServerName: string;
}

// refs: 1 - tags: named, input
export interface DescribeServersRequest {
  ServerName?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DisassociateNodeRequest {
  ServerName: string;
  NodeName: string;
  EngineAttributes?: EngineAttribute[] | null;
}

// refs: 1 - tags: named, input
export interface ExportServerEngineAttributeRequest {
  ExportAttributeName: string;
  ServerName: string;
  InputAttributes?: EngineAttribute[] | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface RestoreServerRequest {
  BackupId: string;
  ServerName: string;
  InstanceType?: string | null;
  KeyPair?: string | null;
}

// refs: 1 - tags: named, input
export interface StartMaintenanceRequest {
  ServerName: string;
  EngineAttributes?: EngineAttribute[] | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateServerRequest {
  DisableAutomatedBackup?: boolean | null;
  BackupRetentionCount?: number | null;
  ServerName: string;
  PreferredMaintenanceWindow?: string | null;
  PreferredBackupWindow?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateServerEngineAttributesRequest {
  ServerName: string;
  AttributeName: string;
  AttributeValue?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateNodeResponse {
  NodeAssociationStatusToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBackupResponse {
  Backup?: Backup | null;
}

// refs: 1 - tags: named, output
export interface CreateServerResponse {
  Server?: Server | null;
}

// refs: 1 - tags: named, output
export interface DeleteBackupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteServerResponse {
}

// refs: 1 - tags: named, output
export interface DescribeAccountAttributesResponse {
  Attributes?: AccountAttribute[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeBackupsResponse {
  Backups?: Backup[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventsResponse {
  ServerEvents?: ServerEvent[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeNodeAssociationStatusResponse {
  NodeAssociationStatus?: NodeAssociationStatus | null;
  EngineAttributes?: EngineAttribute[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeServersResponse {
  Servers?: Server[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisassociateNodeResponse {
  NodeAssociationStatusToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ExportServerEngineAttributeResponse {
  EngineAttribute?: EngineAttribute | null;
  ServerName?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RestoreServerResponse {
}

// refs: 1 - tags: named, output
export interface StartMaintenanceResponse {
  Server?: Server | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateServerResponse {
  Server?: Server | null;
}

// refs: 1 - tags: named, output
export interface UpdateServerEngineAttributesResponse {
  Server?: Server | null;
}

// refs: 12 - tags: input, named, interface, output
export interface EngineAttribute {
  Name?: string | null;
  Value?: string | null;
}
function fromEngineAttribute(input?: EngineAttribute | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toEngineAttribute(root: JSONValue): EngineAttribute {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Backup {
  BackupArn?: string | null;
  BackupId?: string | null;
  BackupType?: BackupType | null;
  CreatedAt?: Date | number | null;
  Description?: string | null;
  Engine?: string | null;
  EngineModel?: string | null;
  EngineVersion?: string | null;
  InstanceProfileArn?: string | null;
  InstanceType?: string | null;
  KeyPair?: string | null;
  PreferredBackupWindow?: string | null;
  PreferredMaintenanceWindow?: string | null;
  S3DataSize?: number | null;
  S3DataUrl?: string | null;
  S3LogUrl?: string | null;
  SecurityGroupIds?: string[] | null;
  ServerName?: string | null;
  ServiceRoleArn?: string | null;
  Status?: BackupStatus | null;
  StatusDescription?: string | null;
  SubnetIds?: string[] | null;
  ToolsVersion?: string | null;
  UserArn?: string | null;
}
function toBackup(root: JSONValue): Backup {
  return prt.readObj({
    required: {},
    optional: {
      "BackupArn": "s",
      "BackupId": "s",
      "BackupType": toBackupType,
      "CreatedAt": "d",
      "Description": "s",
      "Engine": "s",
      "EngineModel": "s",
      "EngineVersion": "s",
      "InstanceProfileArn": "s",
      "InstanceType": "s",
      "KeyPair": "s",
      "PreferredBackupWindow": "s",
      "PreferredMaintenanceWindow": "s",
      "S3DataSize": "n",
      "S3DataUrl": "s",
      "S3LogUrl": "s",
      "SecurityGroupIds": ["s"],
      "ServerName": "s",
      "ServiceRoleArn": "s",
      "Status": toBackupStatus,
      "StatusDescription": "s",
      "SubnetIds": ["s"],
      "ToolsVersion": "s",
      "UserArn": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type BackupType =
| "AUTOMATED"
| "MANUAL"
;
function toBackupType(root: JSONValue): BackupType | null {
  return ( false
    || root == "AUTOMATED"
    || root == "MANUAL"
  ) ? root : null;
}

// refs: 2 - tags: output, named, enum
export type BackupStatus =
| "IN_PROGRESS"
| "OK"
| "FAILED"
| "DELETING"
;
function toBackupStatus(root: JSONValue): BackupStatus | null {
  return ( false
    || root == "IN_PROGRESS"
    || root == "OK"
    || root == "FAILED"
    || root == "DELETING"
  ) ? root : null;
}

// refs: 5 - tags: output, named, interface
export interface Server {
  AssociatePublicIpAddress?: boolean | null;
  BackupRetentionCount?: number | null;
  ServerName?: string | null;
  CreatedAt?: Date | number | null;
  CloudFormationStackArn?: string | null;
  CustomDomain?: string | null;
  DisableAutomatedBackup?: boolean | null;
  Endpoint?: string | null;
  Engine?: string | null;
  EngineModel?: string | null;
  EngineAttributes?: EngineAttribute[] | null;
  EngineVersion?: string | null;
  InstanceProfileArn?: string | null;
  InstanceType?: string | null;
  KeyPair?: string | null;
  MaintenanceStatus?: MaintenanceStatus | null;
  PreferredMaintenanceWindow?: string | null;
  PreferredBackupWindow?: string | null;
  SecurityGroupIds?: string[] | null;
  ServiceRoleArn?: string | null;
  Status?: ServerStatus | null;
  StatusReason?: string | null;
  SubnetIds?: string[] | null;
  ServerArn?: string | null;
}
function toServer(root: JSONValue): Server {
  return prt.readObj({
    required: {},
    optional: {
      "AssociatePublicIpAddress": "b",
      "BackupRetentionCount": "n",
      "ServerName": "s",
      "CreatedAt": "d",
      "CloudFormationStackArn": "s",
      "CustomDomain": "s",
      "DisableAutomatedBackup": "b",
      "Endpoint": "s",
      "Engine": "s",
      "EngineModel": "s",
      "EngineAttributes": [toEngineAttribute],
      "EngineVersion": "s",
      "InstanceProfileArn": "s",
      "InstanceType": "s",
      "KeyPair": "s",
      "MaintenanceStatus": toMaintenanceStatus,
      "PreferredMaintenanceWindow": "s",
      "PreferredBackupWindow": "s",
      "SecurityGroupIds": ["s"],
      "ServiceRoleArn": "s",
      "Status": toServerStatus,
      "StatusReason": "s",
      "SubnetIds": ["s"],
      "ServerArn": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type MaintenanceStatus =
| "SUCCESS"
| "FAILED"
;
function toMaintenanceStatus(root: JSONValue): MaintenanceStatus | null {
  return ( false
    || root == "SUCCESS"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 5 - tags: output, named, enum
export type ServerStatus =
| "BACKING_UP"
| "CONNECTION_LOST"
| "CREATING"
| "DELETING"
| "MODIFYING"
| "FAILED"
| "HEALTHY"
| "RUNNING"
| "RESTORING"
| "SETUP"
| "UNDER_MAINTENANCE"
| "UNHEALTHY"
| "TERMINATED"
;
function toServerStatus(root: JSONValue): ServerStatus | null {
  return ( false
    || root == "BACKING_UP"
    || root == "CONNECTION_LOST"
    || root == "CREATING"
    || root == "DELETING"
    || root == "MODIFYING"
    || root == "FAILED"
    || root == "HEALTHY"
    || root == "RUNNING"
    || root == "RESTORING"
    || root == "SETUP"
    || root == "UNDER_MAINTENANCE"
    || root == "UNHEALTHY"
    || root == "TERMINATED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface AccountAttribute {
  Name?: string | null;
  Maximum?: number | null;
  Used?: number | null;
}
function toAccountAttribute(root: JSONValue): AccountAttribute {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Maximum": "n",
      "Used": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ServerEvent {
  CreatedAt?: Date | number | null;
  ServerName?: string | null;
  Message?: string | null;
  LogUrl?: string | null;
}
function toServerEvent(root: JSONValue): ServerEvent {
  return prt.readObj({
    required: {},
    optional: {
      "CreatedAt": "d",
      "ServerName": "s",
      "Message": "s",
      "LogUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type NodeAssociationStatus =
| "SUCCESS"
| "FAILED"
| "IN_PROGRESS"
;
function toNodeAssociationStatus(root: JSONValue): NodeAssociationStatus | null {
  return ( false
    || root == "SUCCESS"
    || root == "FAILED"
    || root == "IN_PROGRESS"
  ) ? root : null;
}
