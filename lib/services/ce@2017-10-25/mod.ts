// Autogenerated API client for: AWS Cost Explorer Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class CostExplorer {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CostExplorer.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-10-25",
    "endpointPrefix": "ce",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWS Cost Explorer",
    "serviceFullName": "AWS Cost Explorer Service",
    "serviceId": "Cost Explorer",
    "signatureVersion": "v4",
    "signingName": "ce",
    "targetPrefix": "AWSInsightsIndexService",
    "uid": "ce-2017-10-25"
  };

  async createAnomalyMonitor(
    {abortSignal, ...params}: RequestConfig & CreateAnomalyMonitorRequest,
  ): Promise<CreateAnomalyMonitorResponse> {
    const body: JSONObject = {...params,
    AnomalyMonitor: fromAnomalyMonitor(params["AnomalyMonitor"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAnomalyMonitor",
    });
    return prt.readObj({
      required: {
        "MonitorArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createAnomalySubscription(
    {abortSignal, ...params}: RequestConfig & CreateAnomalySubscriptionRequest,
  ): Promise<CreateAnomalySubscriptionResponse> {
    const body: JSONObject = {...params,
    AnomalySubscription: fromAnomalySubscription(params["AnomalySubscription"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAnomalySubscription",
    });
    return prt.readObj({
      required: {
        "SubscriptionArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createCostCategoryDefinition(
    {abortSignal, ...params}: RequestConfig & CreateCostCategoryDefinitionRequest,
  ): Promise<CreateCostCategoryDefinitionResponse> {
    const body: JSONObject = {...params,
    Rules: params["Rules"]?.map(x => fromCostCategoryRule(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCostCategoryDefinition",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CostCategoryArn": "s",
        "EffectiveStart": "s",
      },
    }, await resp.json());
  }

  async deleteAnomalyMonitor(
    {abortSignal, ...params}: RequestConfig & DeleteAnomalyMonitorRequest,
  ): Promise<DeleteAnomalyMonitorResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAnomalyMonitor",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAnomalySubscription(
    {abortSignal, ...params}: RequestConfig & DeleteAnomalySubscriptionRequest,
  ): Promise<DeleteAnomalySubscriptionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAnomalySubscription",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteCostCategoryDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteCostCategoryDefinitionRequest,
  ): Promise<DeleteCostCategoryDefinitionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCostCategoryDefinition",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CostCategoryArn": "s",
        "EffectiveEnd": "s",
      },
    }, await resp.json());
  }

  async describeCostCategoryDefinition(
    {abortSignal, ...params}: RequestConfig & DescribeCostCategoryDefinitionRequest,
  ): Promise<DescribeCostCategoryDefinitionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCostCategoryDefinition",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CostCategory": toCostCategory,
      },
    }, await resp.json());
  }

  async getAnomalies(
    {abortSignal, ...params}: RequestConfig & GetAnomaliesRequest,
  ): Promise<GetAnomaliesResponse> {
    const body: JSONObject = {...params,
    DateInterval: fromAnomalyDateInterval(params["DateInterval"]),
    TotalImpact: fromTotalImpactFilter(params["TotalImpact"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAnomalies",
    });
    return prt.readObj({
      required: {
        "Anomalies": [toAnomaly],
      },
      optional: {
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getAnomalyMonitors(
    {abortSignal, ...params}: RequestConfig & GetAnomalyMonitorsRequest = {},
  ): Promise<GetAnomalyMonitorsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAnomalyMonitors",
    });
    return prt.readObj({
      required: {
        "AnomalyMonitors": [toAnomalyMonitor],
      },
      optional: {
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getAnomalySubscriptions(
    {abortSignal, ...params}: RequestConfig & GetAnomalySubscriptionsRequest = {},
  ): Promise<GetAnomalySubscriptionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAnomalySubscriptions",
    });
    return prt.readObj({
      required: {
        "AnomalySubscriptions": [toAnomalySubscription],
      },
      optional: {
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getCostAndUsage(
    {abortSignal, ...params}: RequestConfig & GetCostAndUsageRequest,
  ): Promise<GetCostAndUsageResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    Filter: fromExpression(params["Filter"]),
    GroupBy: params["GroupBy"]?.map(x => fromGroupDefinition(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCostAndUsage",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextPageToken": "s",
        "GroupDefinitions": [toGroupDefinition],
        "ResultsByTime": [toResultByTime],
      },
    }, await resp.json());
  }

  async getCostAndUsageWithResources(
    {abortSignal, ...params}: RequestConfig & GetCostAndUsageWithResourcesRequest,
  ): Promise<GetCostAndUsageWithResourcesResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    Filter: fromExpression(params["Filter"]),
    GroupBy: params["GroupBy"]?.map(x => fromGroupDefinition(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCostAndUsageWithResources",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextPageToken": "s",
        "GroupDefinitions": [toGroupDefinition],
        "ResultsByTime": [toResultByTime],
      },
    }, await resp.json());
  }

  async getCostForecast(
    {abortSignal, ...params}: RequestConfig & GetCostForecastRequest,
  ): Promise<GetCostForecastResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCostForecast",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Total": toMetricValue,
        "ForecastResultsByTime": [toForecastResult],
      },
    }, await resp.json());
  }

  async getDimensionValues(
    {abortSignal, ...params}: RequestConfig & GetDimensionValuesRequest,
  ): Promise<GetDimensionValuesResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDimensionValues",
    });
    return prt.readObj({
      required: {
        "DimensionValues": [toDimensionValuesWithAttributes],
        "ReturnSize": "n",
        "TotalSize": "n",
      },
      optional: {
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getReservationCoverage(
    {abortSignal, ...params}: RequestConfig & GetReservationCoverageRequest,
  ): Promise<GetReservationCoverageResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    GroupBy: params["GroupBy"]?.map(x => fromGroupDefinition(x)),
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetReservationCoverage",
    });
    return prt.readObj({
      required: {
        "CoveragesByTime": [toCoverageByTime],
      },
      optional: {
        "Total": toCoverage,
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getReservationPurchaseRecommendation(
    {abortSignal, ...params}: RequestConfig & GetReservationPurchaseRecommendationRequest,
  ): Promise<GetReservationPurchaseRecommendationResponse> {
    const body: JSONObject = {...params,
    ServiceSpecification: fromServiceSpecification(params["ServiceSpecification"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetReservationPurchaseRecommendation",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Metadata": toReservationPurchaseRecommendationMetadata,
        "Recommendations": [toReservationPurchaseRecommendation],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getReservationUtilization(
    {abortSignal, ...params}: RequestConfig & GetReservationUtilizationRequest,
  ): Promise<GetReservationUtilizationResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    GroupBy: params["GroupBy"]?.map(x => fromGroupDefinition(x)),
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetReservationUtilization",
    });
    return prt.readObj({
      required: {
        "UtilizationsByTime": [toUtilizationByTime],
      },
      optional: {
        "Total": toReservationAggregates,
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getRightsizingRecommendation(
    {abortSignal, ...params}: RequestConfig & GetRightsizingRecommendationRequest,
  ): Promise<GetRightsizingRecommendationResponse> {
    const body: JSONObject = {...params,
    Filter: fromExpression(params["Filter"]),
    Configuration: fromRightsizingRecommendationConfiguration(params["Configuration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRightsizingRecommendation",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Metadata": toRightsizingRecommendationMetadata,
        "Summary": toRightsizingRecommendationSummary,
        "RightsizingRecommendations": [toRightsizingRecommendation],
        "NextPageToken": "s",
        "Configuration": toRightsizingRecommendationConfiguration,
      },
    }, await resp.json());
  }

  async getSavingsPlansCoverage(
    {abortSignal, ...params}: RequestConfig & GetSavingsPlansCoverageRequest,
  ): Promise<GetSavingsPlansCoverageResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    GroupBy: params["GroupBy"]?.map(x => fromGroupDefinition(x)),
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSavingsPlansCoverage",
    });
    return prt.readObj({
      required: {
        "SavingsPlansCoverages": [toSavingsPlansCoverage],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getSavingsPlansPurchaseRecommendation(
    {abortSignal, ...params}: RequestConfig & GetSavingsPlansPurchaseRecommendationRequest,
  ): Promise<GetSavingsPlansPurchaseRecommendationResponse> {
    const body: JSONObject = {...params,
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSavingsPlansPurchaseRecommendation",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Metadata": toSavingsPlansPurchaseRecommendationMetadata,
        "SavingsPlansPurchaseRecommendation": toSavingsPlansPurchaseRecommendation,
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getSavingsPlansUtilization(
    {abortSignal, ...params}: RequestConfig & GetSavingsPlansUtilizationRequest,
  ): Promise<GetSavingsPlansUtilizationResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSavingsPlansUtilization",
    });
    return prt.readObj({
      required: {
        "Total": toSavingsPlansUtilizationAggregates,
      },
      optional: {
        "SavingsPlansUtilizationsByTime": [toSavingsPlansUtilizationByTime],
      },
    }, await resp.json());
  }

  async getSavingsPlansUtilizationDetails(
    {abortSignal, ...params}: RequestConfig & GetSavingsPlansUtilizationDetailsRequest,
  ): Promise<GetSavingsPlansUtilizationDetailsResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSavingsPlansUtilizationDetails",
    });
    return prt.readObj({
      required: {
        "SavingsPlansUtilizationDetails": [toSavingsPlansUtilizationDetail],
        "TimePeriod": toDateInterval,
      },
      optional: {
        "Total": toSavingsPlansUtilizationAggregates,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getTags(
    {abortSignal, ...params}: RequestConfig & GetTagsRequest,
  ): Promise<GetTagsResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTags",
    });
    return prt.readObj({
      required: {
        "Tags": ["s"],
        "ReturnSize": "n",
        "TotalSize": "n",
      },
      optional: {
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async getUsageForecast(
    {abortSignal, ...params}: RequestConfig & GetUsageForecastRequest,
  ): Promise<GetUsageForecastResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromDateInterval(params["TimePeriod"]),
    Filter: fromExpression(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUsageForecast",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Total": toMetricValue,
        "ForecastResultsByTime": [toForecastResult],
      },
    }, await resp.json());
  }

  async listCostCategoryDefinitions(
    {abortSignal, ...params}: RequestConfig & ListCostCategoryDefinitionsRequest = {},
  ): Promise<ListCostCategoryDefinitionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCostCategoryDefinitions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CostCategoryReferences": [toCostCategoryReference],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async provideAnomalyFeedback(
    {abortSignal, ...params}: RequestConfig & ProvideAnomalyFeedbackRequest,
  ): Promise<ProvideAnomalyFeedbackResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ProvideAnomalyFeedback",
    });
    return prt.readObj({
      required: {
        "AnomalyId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateAnomalyMonitor(
    {abortSignal, ...params}: RequestConfig & UpdateAnomalyMonitorRequest,
  ): Promise<UpdateAnomalyMonitorResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAnomalyMonitor",
    });
    return prt.readObj({
      required: {
        "MonitorArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateAnomalySubscription(
    {abortSignal, ...params}: RequestConfig & UpdateAnomalySubscriptionRequest,
  ): Promise<UpdateAnomalySubscriptionResponse> {
    const body: JSONObject = {...params,
    Subscribers: params["Subscribers"]?.map(x => fromSubscriber(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAnomalySubscription",
    });
    return prt.readObj({
      required: {
        "SubscriptionArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateCostCategoryDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateCostCategoryDefinitionRequest,
  ): Promise<UpdateCostCategoryDefinitionResponse> {
    const body: JSONObject = {...params,
    Rules: params["Rules"]?.map(x => fromCostCategoryRule(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCostCategoryDefinition",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CostCategoryArn": "s",
        "EffectiveStart": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateAnomalyMonitorRequest {
  AnomalyMonitor: AnomalyMonitor;
}

// refs: 1 - tags: named, input
export interface CreateAnomalySubscriptionRequest {
  AnomalySubscription: AnomalySubscription;
}

// refs: 1 - tags: named, input
export interface CreateCostCategoryDefinitionRequest {
  Name: string;
  RuleVersion: CostCategoryRuleVersion;
  Rules: CostCategoryRule[];
}

// refs: 1 - tags: named, input
export interface DeleteAnomalyMonitorRequest {
  MonitorArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteAnomalySubscriptionRequest {
  SubscriptionArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteCostCategoryDefinitionRequest {
  CostCategoryArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeCostCategoryDefinitionRequest {
  CostCategoryArn: string;
  EffectiveOn?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAnomaliesRequest {
  MonitorArn?: string | null;
  DateInterval: AnomalyDateInterval;
  Feedback?: AnomalyFeedbackType | null;
  TotalImpact?: TotalImpactFilter | null;
  NextPageToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetAnomalyMonitorsRequest {
  MonitorArnList?: string[] | null;
  NextPageToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetAnomalySubscriptionsRequest {
  SubscriptionArnList?: string[] | null;
  MonitorArn?: string | null;
  NextPageToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetCostAndUsageRequest {
  TimePeriod: DateInterval;
  Granularity?: Granularity | null;
  Filter?: Expression | null;
  Metrics: string[];
  GroupBy?: GroupDefinition[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCostAndUsageWithResourcesRequest {
  TimePeriod: DateInterval;
  Granularity?: Granularity | null;
  Filter: Expression;
  Metrics?: string[] | null;
  GroupBy?: GroupDefinition[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCostForecastRequest {
  TimePeriod: DateInterval;
  Metric: Metric;
  Granularity: Granularity;
  Filter?: Expression | null;
  PredictionIntervalLevel?: number | null;
}

// refs: 1 - tags: named, input
export interface GetDimensionValuesRequest {
  SearchString?: string | null;
  TimePeriod: DateInterval;
  Dimension: Dimension;
  Context?: Context | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetReservationCoverageRequest {
  TimePeriod: DateInterval;
  GroupBy?: GroupDefinition[] | null;
  Granularity?: Granularity | null;
  Filter?: Expression | null;
  Metrics?: string[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetReservationPurchaseRecommendationRequest {
  AccountId?: string | null;
  Service: string;
  AccountScope?: AccountScope | null;
  LookbackPeriodInDays?: LookbackPeriodInDays | null;
  TermInYears?: TermInYears | null;
  PaymentOption?: PaymentOption | null;
  ServiceSpecification?: ServiceSpecification | null;
  PageSize?: number | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetReservationUtilizationRequest {
  TimePeriod: DateInterval;
  GroupBy?: GroupDefinition[] | null;
  Granularity?: Granularity | null;
  Filter?: Expression | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRightsizingRecommendationRequest {
  Filter?: Expression | null;
  Configuration?: RightsizingRecommendationConfiguration | null;
  Service: string;
  PageSize?: number | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSavingsPlansCoverageRequest {
  TimePeriod: DateInterval;
  GroupBy?: GroupDefinition[] | null;
  Granularity?: Granularity | null;
  Filter?: Expression | null;
  Metrics?: string[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetSavingsPlansPurchaseRecommendationRequest {
  SavingsPlansType: SupportedSavingsPlansType;
  TermInYears: TermInYears;
  PaymentOption: PaymentOption;
  AccountScope?: AccountScope | null;
  NextPageToken?: string | null;
  PageSize?: number | null;
  LookbackPeriodInDays: LookbackPeriodInDays;
  Filter?: Expression | null;
}

// refs: 1 - tags: named, input
export interface GetSavingsPlansUtilizationRequest {
  TimePeriod: DateInterval;
  Granularity?: Granularity | null;
  Filter?: Expression | null;
}

// refs: 1 - tags: named, input
export interface GetSavingsPlansUtilizationDetailsRequest {
  TimePeriod: DateInterval;
  Filter?: Expression | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetTagsRequest {
  SearchString?: string | null;
  TimePeriod: DateInterval;
  TagKey?: string | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetUsageForecastRequest {
  TimePeriod: DateInterval;
  Metric: Metric;
  Granularity: Granularity;
  Filter?: Expression | null;
  PredictionIntervalLevel?: number | null;
}

// refs: 1 - tags: named, input
export interface ListCostCategoryDefinitionsRequest {
  EffectiveOn?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ProvideAnomalyFeedbackRequest {
  AnomalyId: string;
  Feedback: AnomalyFeedbackType;
}

// refs: 1 - tags: named, input
export interface UpdateAnomalyMonitorRequest {
  MonitorArn: string;
  MonitorName?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAnomalySubscriptionRequest {
  SubscriptionArn: string;
  Threshold?: number | null;
  Frequency?: AnomalySubscriptionFrequency | null;
  MonitorArnList?: string[] | null;
  Subscribers?: Subscriber[] | null;
  SubscriptionName?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateCostCategoryDefinitionRequest {
  CostCategoryArn: string;
  RuleVersion: CostCategoryRuleVersion;
  Rules: CostCategoryRule[];
}

// refs: 1 - tags: named, output
export interface CreateAnomalyMonitorResponse {
  MonitorArn: string;
}

// refs: 1 - tags: named, output
export interface CreateAnomalySubscriptionResponse {
  SubscriptionArn: string;
}

// refs: 1 - tags: named, output
export interface CreateCostCategoryDefinitionResponse {
  CostCategoryArn?: string | null;
  EffectiveStart?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteAnomalyMonitorResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAnomalySubscriptionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteCostCategoryDefinitionResponse {
  CostCategoryArn?: string | null;
  EffectiveEnd?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeCostCategoryDefinitionResponse {
  CostCategory?: CostCategory | null;
}

// refs: 1 - tags: named, output
export interface GetAnomaliesResponse {
  Anomalies: Anomaly[];
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAnomalyMonitorsResponse {
  AnomalyMonitors: AnomalyMonitor[];
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAnomalySubscriptionsResponse {
  AnomalySubscriptions: AnomalySubscription[];
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCostAndUsageResponse {
  NextPageToken?: string | null;
  GroupDefinitions?: GroupDefinition[] | null;
  ResultsByTime?: ResultByTime[] | null;
}

// refs: 1 - tags: named, output
export interface GetCostAndUsageWithResourcesResponse {
  NextPageToken?: string | null;
  GroupDefinitions?: GroupDefinition[] | null;
  ResultsByTime?: ResultByTime[] | null;
}

// refs: 1 - tags: named, output
export interface GetCostForecastResponse {
  Total?: MetricValue | null;
  ForecastResultsByTime?: ForecastResult[] | null;
}

// refs: 1 - tags: named, output
export interface GetDimensionValuesResponse {
  DimensionValues: DimensionValuesWithAttributes[];
  ReturnSize: number;
  TotalSize: number;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetReservationCoverageResponse {
  CoveragesByTime: CoverageByTime[];
  Total?: Coverage | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetReservationPurchaseRecommendationResponse {
  Metadata?: ReservationPurchaseRecommendationMetadata | null;
  Recommendations?: ReservationPurchaseRecommendation[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetReservationUtilizationResponse {
  UtilizationsByTime: UtilizationByTime[];
  Total?: ReservationAggregates | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRightsizingRecommendationResponse {
  Metadata?: RightsizingRecommendationMetadata | null;
  Summary?: RightsizingRecommendationSummary | null;
  RightsizingRecommendations?: RightsizingRecommendation[] | null;
  NextPageToken?: string | null;
  Configuration?: RightsizingRecommendationConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetSavingsPlansCoverageResponse {
  SavingsPlansCoverages: SavingsPlansCoverage[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSavingsPlansPurchaseRecommendationResponse {
  Metadata?: SavingsPlansPurchaseRecommendationMetadata | null;
  SavingsPlansPurchaseRecommendation?: SavingsPlansPurchaseRecommendation | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSavingsPlansUtilizationResponse {
  SavingsPlansUtilizationsByTime?: SavingsPlansUtilizationByTime[] | null;
  Total: SavingsPlansUtilizationAggregates;
}

// refs: 1 - tags: named, output
export interface GetSavingsPlansUtilizationDetailsResponse {
  SavingsPlansUtilizationDetails: SavingsPlansUtilizationDetail[];
  Total?: SavingsPlansUtilizationAggregates | null;
  TimePeriod: DateInterval;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetTagsResponse {
  NextPageToken?: string | null;
  Tags: string[];
  ReturnSize: number;
  TotalSize: number;
}

// refs: 1 - tags: named, output
export interface GetUsageForecastResponse {
  Total?: MetricValue | null;
  ForecastResultsByTime?: ForecastResult[] | null;
}

// refs: 1 - tags: named, output
export interface ListCostCategoryDefinitionsResponse {
  CostCategoryReferences?: CostCategoryReference[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ProvideAnomalyFeedbackResponse {
  AnomalyId: string;
}

// refs: 1 - tags: named, output
export interface UpdateAnomalyMonitorResponse {
  MonitorArn: string;
}

// refs: 1 - tags: named, output
export interface UpdateAnomalySubscriptionResponse {
  SubscriptionArn: string;
}

// refs: 1 - tags: named, output
export interface UpdateCostCategoryDefinitionResponse {
  CostCategoryArn?: string | null;
  EffectiveStart?: string | null;
}

// refs: 2 - tags: input, named, interface, output
export interface AnomalyMonitor {
  MonitorArn?: string | null;
  MonitorName: string;
  CreationDate?: string | null;
  LastUpdatedDate?: string | null;
  LastEvaluatedDate?: string | null;
  MonitorType: MonitorType;
  MonitorDimension?: MonitorDimension | null;
  MonitorSpecification?: Expression | null;
  DimensionalValueCount?: number | null;
}
function fromAnomalyMonitor(input?: AnomalyMonitor | null): JSONValue {
  if (!input) return input;
  return {...input,
    MonitorSpecification: fromExpression(input["MonitorSpecification"]),
  }
}
function toAnomalyMonitor(root: JSONValue): AnomalyMonitor {
  return prt.readObj({
    required: {
      "MonitorName": "s",
      "MonitorType": toMonitorType,
    },
    optional: {
      "MonitorArn": "s",
      "CreationDate": "s",
      "LastUpdatedDate": "s",
      "LastEvaluatedDate": "s",
      "MonitorDimension": toMonitorDimension,
      "MonitorSpecification": toExpression,
      "DimensionalValueCount": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type MonitorType =
| "DIMENSIONAL"
| "CUSTOM"
;

function toMonitorType(root: JSONValue): MonitorType | null {
  return ( false
    || root == "DIMENSIONAL"
    || root == "CUSTOM"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type MonitorDimension =
| "SERVICE"
;

function toMonitorDimension(root: JSONValue): MonitorDimension | null {
  return ( false
    || root == "SERVICE"
  ) ? root : null;
}

// refs: 64 - tags: input, named, interface, recursed, recursive, output
export interface Expression {
  Or?: Expression[] | null;
  And?: Expression[] | null;
  Not?: Expression | null;
  Dimensions?: DimensionValues | null;
  Tags?: TagValues | null;
  CostCategories?: CostCategoryValues | null;
}
function fromExpression(input?: Expression | null): JSONValue {
  if (!input) return input;
  return {...input,
    Or: input["Or"]?.map(x => fromExpression(x)),
    And: input["And"]?.map(x => fromExpression(x)),
    Not: fromExpression(input["Not"]),
    Dimensions: fromDimensionValues(input["Dimensions"]),
    Tags: fromTagValues(input["Tags"]),
    CostCategories: fromCostCategoryValues(input["CostCategories"]),
  }
}
function toExpression(root: JSONValue): Expression {
  return prt.readObj({
    required: {},
    optional: {
      "Or": [toExpression],
      "And": [toExpression],
      "Not": toExpression,
      "Dimensions": toDimensionValues,
      "Tags": toTagValues,
      "CostCategories": toCostCategoryValues,
    },
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface DimensionValues {
  Key?: Dimension | null;
  Values?: string[] | null;
  MatchOptions?: MatchOption[] | null;
}
function fromDimensionValues(input?: DimensionValues | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toDimensionValues(root: JSONValue): DimensionValues {
  return prt.readObj({
    required: {},
    optional: {
      "Key": toDimension,
      "Values": ["s"],
      "MatchOptions": [toMatchOption],
    },
  }, root);
}

// refs: 17 - tags: input, named, enum, output
export type Dimension =
| "AZ"
| "INSTANCE_TYPE"
| "LINKED_ACCOUNT"
| "LINKED_ACCOUNT_NAME"
| "OPERATION"
| "PURCHASE_TYPE"
| "REGION"
| "SERVICE"
| "SERVICE_CODE"
| "USAGE_TYPE"
| "USAGE_TYPE_GROUP"
| "RECORD_TYPE"
| "OPERATING_SYSTEM"
| "TENANCY"
| "SCOPE"
| "PLATFORM"
| "SUBSCRIPTION_ID"
| "LEGAL_ENTITY_NAME"
| "DEPLOYMENT_OPTION"
| "DATABASE_ENGINE"
| "CACHE_ENGINE"
| "INSTANCE_TYPE_FAMILY"
| "BILLING_ENTITY"
| "RESERVATION_ID"
| "RESOURCE_ID"
| "RIGHTSIZING_TYPE"
| "SAVINGS_PLANS_TYPE"
| "SAVINGS_PLAN_ARN"
| "PAYMENT_OPTION"
;

function toDimension(root: JSONValue): Dimension | null {
  return ( false
    || root == "AZ"
    || root == "INSTANCE_TYPE"
    || root == "LINKED_ACCOUNT"
    || root == "LINKED_ACCOUNT_NAME"
    || root == "OPERATION"
    || root == "PURCHASE_TYPE"
    || root == "REGION"
    || root == "SERVICE"
    || root == "SERVICE_CODE"
    || root == "USAGE_TYPE"
    || root == "USAGE_TYPE_GROUP"
    || root == "RECORD_TYPE"
    || root == "OPERATING_SYSTEM"
    || root == "TENANCY"
    || root == "SCOPE"
    || root == "PLATFORM"
    || root == "SUBSCRIPTION_ID"
    || root == "LEGAL_ENTITY_NAME"
    || root == "DEPLOYMENT_OPTION"
    || root == "DATABASE_ENGINE"
    || root == "CACHE_ENGINE"
    || root == "INSTANCE_TYPE_FAMILY"
    || root == "BILLING_ENTITY"
    || root == "RESERVATION_ID"
    || root == "RESOURCE_ID"
    || root == "RIGHTSIZING_TYPE"
    || root == "SAVINGS_PLANS_TYPE"
    || root == "SAVINGS_PLAN_ARN"
    || root == "PAYMENT_OPTION"
  ) ? root : null;
}

// refs: 33 - tags: input, named, enum, output
export type MatchOption =
| "EQUALS"
| "STARTS_WITH"
| "ENDS_WITH"
| "CONTAINS"
| "CASE_SENSITIVE"
| "CASE_INSENSITIVE"
;

function toMatchOption(root: JSONValue): MatchOption | null {
  return ( false
    || root == "EQUALS"
    || root == "STARTS_WITH"
    || root == "ENDS_WITH"
    || root == "CONTAINS"
    || root == "CASE_SENSITIVE"
    || root == "CASE_INSENSITIVE"
  ) ? root : null;
}

// refs: 17 - tags: input, named, interface, output
export interface TagValues {
  Key?: string | null;
  Values?: string[] | null;
  MatchOptions?: MatchOption[] | null;
}
function fromTagValues(input?: TagValues | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTagValues(root: JSONValue): TagValues {
  return prt.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Values": ["s"],
      "MatchOptions": [toMatchOption],
    },
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface CostCategoryValues {
  Key?: string | null;
  Values?: string[] | null;
}
function fromCostCategoryValues(input?: CostCategoryValues | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCostCategoryValues(root: JSONValue): CostCategoryValues {
  return prt.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Values": ["s"],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AnomalySubscription {
  SubscriptionArn?: string | null;
  AccountId?: string | null;
  MonitorArnList: string[];
  Subscribers: Subscriber[];
  Threshold: number;
  Frequency: AnomalySubscriptionFrequency;
  SubscriptionName: string;
}
function fromAnomalySubscription(input?: AnomalySubscription | null): JSONValue {
  if (!input) return input;
  return {...input,
    Subscribers: input["Subscribers"]?.map(x => fromSubscriber(x)),
  }
}
function toAnomalySubscription(root: JSONValue): AnomalySubscription {
  return prt.readObj({
    required: {
      "MonitorArnList": ["s"],
      "Subscribers": [toSubscriber],
      "Threshold": "n",
      "Frequency": toAnomalySubscriptionFrequency,
      "SubscriptionName": "s",
    },
    optional: {
      "SubscriptionArn": "s",
      "AccountId": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Subscriber {
  Address?: string | null;
  Type?: SubscriberType | null;
  Status?: SubscriberStatus | null;
}
function fromSubscriber(input?: Subscriber | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSubscriber(root: JSONValue): Subscriber {
  return prt.readObj({
    required: {},
    optional: {
      "Address": "s",
      "Type": toSubscriberType,
      "Status": toSubscriberStatus,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type SubscriberType =
| "EMAIL"
| "SNS"
;

function toSubscriberType(root: JSONValue): SubscriberType | null {
  return ( false
    || root == "EMAIL"
    || root == "SNS"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type SubscriberStatus =
| "CONFIRMED"
| "DECLINED"
;

function toSubscriberStatus(root: JSONValue): SubscriberStatus | null {
  return ( false
    || root == "CONFIRMED"
    || root == "DECLINED"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type AnomalySubscriptionFrequency =
| "DAILY"
| "IMMEDIATE"
| "WEEKLY"
;

function toAnomalySubscriptionFrequency(root: JSONValue): AnomalySubscriptionFrequency | null {
  return ( false
    || root == "DAILY"
    || root == "IMMEDIATE"
    || root == "WEEKLY"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type CostCategoryRuleVersion =
| "CostCategoryExpression.v1"
;

function toCostCategoryRuleVersion(root: JSONValue): CostCategoryRuleVersion | null {
  return ( false
    || root == "CostCategoryExpression.v1"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface CostCategoryRule {
  Value: string;
  Rule: Expression;
}
function fromCostCategoryRule(input?: CostCategoryRule | null): JSONValue {
  if (!input) return input;
  return {...input,
    Rule: fromExpression(input["Rule"]),
  }
}
function toCostCategoryRule(root: JSONValue): CostCategoryRule {
  return prt.readObj({
    required: {
      "Value": "s",
      "Rule": toExpression,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface AnomalyDateInterval {
  StartDate: string;
  EndDate?: string | null;
}
function fromAnomalyDateInterval(input?: AnomalyDateInterval | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, enum, output
export type AnomalyFeedbackType =
| "YES"
| "NO"
| "PLANNED_ACTIVITY"
;

function toAnomalyFeedbackType(root: JSONValue): AnomalyFeedbackType | null {
  return ( false
    || root == "YES"
    || root == "NO"
    || root == "PLANNED_ACTIVITY"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface TotalImpactFilter {
  NumericOperator: NumericOperator;
  StartValue: number;
  EndValue?: number | null;
}
function fromTotalImpactFilter(input?: TotalImpactFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type NumericOperator =
| "EQUAL"
| "GREATER_THAN_OR_EQUAL"
| "LESS_THAN_OR_EQUAL"
| "GREATER_THAN"
| "LESS_THAN"
| "BETWEEN"
;


// refs: 20 - tags: input, named, interface, output
export interface DateInterval {
  Start: string;
  End: string;
}
function fromDateInterval(input?: DateInterval | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toDateInterval(root: JSONValue): DateInterval {
  return prt.readObj({
    required: {
      "Start": "s",
      "End": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, enum
export type Granularity =
| "DAILY"
| "MONTHLY"
| "HOURLY"
;


// refs: 7 - tags: input, named, interface, output
export interface GroupDefinition {
  Type?: GroupDefinitionType | null;
  Key?: string | null;
}
function fromGroupDefinition(input?: GroupDefinition | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toGroupDefinition(root: JSONValue): GroupDefinition {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toGroupDefinitionType,
      "Key": "s",
    },
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type GroupDefinitionType =
| "DIMENSION"
| "TAG"
| "COST_CATEGORY"
;

function toGroupDefinitionType(root: JSONValue): GroupDefinitionType | null {
  return ( false
    || root == "DIMENSION"
    || root == "TAG"
    || root == "COST_CATEGORY"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum
export type Metric =
| "BLENDED_COST"
| "UNBLENDED_COST"
| "AMORTIZED_COST"
| "NET_UNBLENDED_COST"
| "NET_AMORTIZED_COST"
| "USAGE_QUANTITY"
| "NORMALIZED_USAGE_AMOUNT"
;


// refs: 1 - tags: input, named, enum
export type Context =
| "COST_AND_USAGE"
| "RESERVATIONS"
| "SAVINGS_PLANS"
;


// refs: 4 - tags: input, named, enum, output
export type AccountScope =
| "PAYER"
| "LINKED"
;

function toAccountScope(root: JSONValue): AccountScope | null {
  return ( false
    || root == "PAYER"
    || root == "LINKED"
  ) ? root : null;
}

// refs: 5 - tags: input, named, enum, output
export type LookbackPeriodInDays =
| "SEVEN_DAYS"
| "THIRTY_DAYS"
| "SIXTY_DAYS"
;

function toLookbackPeriodInDays(root: JSONValue): LookbackPeriodInDays | null {
  return ( false
    || root == "SEVEN_DAYS"
    || root == "THIRTY_DAYS"
    || root == "SIXTY_DAYS"
  ) ? root : null;
}

// refs: 4 - tags: input, named, enum, output
export type TermInYears =
| "ONE_YEAR"
| "THREE_YEARS"
;

function toTermInYears(root: JSONValue): TermInYears | null {
  return ( false
    || root == "ONE_YEAR"
    || root == "THREE_YEARS"
  ) ? root : null;
}

// refs: 4 - tags: input, named, enum, output
export type PaymentOption =
| "NO_UPFRONT"
| "PARTIAL_UPFRONT"
| "ALL_UPFRONT"
| "LIGHT_UTILIZATION"
| "MEDIUM_UTILIZATION"
| "HEAVY_UTILIZATION"
;

function toPaymentOption(root: JSONValue): PaymentOption | null {
  return ( false
    || root == "NO_UPFRONT"
    || root == "PARTIAL_UPFRONT"
    || root == "ALL_UPFRONT"
    || root == "LIGHT_UTILIZATION"
    || root == "MEDIUM_UTILIZATION"
    || root == "HEAVY_UTILIZATION"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface ServiceSpecification {
  EC2Specification?: EC2Specification | null;
}
function fromServiceSpecification(input?: ServiceSpecification | null): JSONValue {
  if (!input) return input;
  return {...input,
    EC2Specification: fromEC2Specification(input["EC2Specification"]),
  }
}
function toServiceSpecification(root: JSONValue): ServiceSpecification {
  return prt.readObj({
    required: {},
    optional: {
      "EC2Specification": toEC2Specification,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface EC2Specification {
  OfferingClass?: OfferingClass | null;
}
function fromEC2Specification(input?: EC2Specification | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toEC2Specification(root: JSONValue): EC2Specification {
  return prt.readObj({
    required: {},
    optional: {
      "OfferingClass": toOfferingClass,
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type OfferingClass =
| "STANDARD"
| "CONVERTIBLE"
;

function toOfferingClass(root: JSONValue): OfferingClass | null {
  return ( false
    || root == "STANDARD"
    || root == "CONVERTIBLE"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface RightsizingRecommendationConfiguration {
  RecommendationTarget: RecommendationTarget;
  BenefitsConsidered: boolean;
}
function fromRightsizingRecommendationConfiguration(input?: RightsizingRecommendationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRightsizingRecommendationConfiguration(root: JSONValue): RightsizingRecommendationConfiguration {
  return prt.readObj({
    required: {
      "RecommendationTarget": toRecommendationTarget,
      "BenefitsConsidered": "b",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type RecommendationTarget =
| "SAME_INSTANCE_FAMILY"
| "CROSS_INSTANCE_FAMILY"
;

function toRecommendationTarget(root: JSONValue): RecommendationTarget | null {
  return ( false
    || root == "SAME_INSTANCE_FAMILY"
    || root == "CROSS_INSTANCE_FAMILY"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type SupportedSavingsPlansType =
| "COMPUTE_SP"
| "EC2_INSTANCE_SP"
;

function toSupportedSavingsPlansType(root: JSONValue): SupportedSavingsPlansType | null {
  return ( false
    || root == "COMPUTE_SP"
    || root == "EC2_INSTANCE_SP"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface CostCategory {
  CostCategoryArn: string;
  EffectiveStart: string;
  EffectiveEnd?: string | null;
  Name: string;
  RuleVersion: CostCategoryRuleVersion;
  Rules: CostCategoryRule[];
}
function toCostCategory(root: JSONValue): CostCategory {
  return prt.readObj({
    required: {
      "CostCategoryArn": "s",
      "EffectiveStart": "s",
      "Name": "s",
      "RuleVersion": toCostCategoryRuleVersion,
      "Rules": [toCostCategoryRule],
    },
    optional: {
      "EffectiveEnd": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Anomaly {
  AnomalyId: string;
  AnomalyStartDate?: string | null;
  AnomalyEndDate?: string | null;
  DimensionValue?: string | null;
  RootCauses?: RootCause[] | null;
  AnomalyScore: AnomalyScore;
  Impact: Impact;
  MonitorArn: string;
  Feedback?: AnomalyFeedbackType | null;
}
function toAnomaly(root: JSONValue): Anomaly {
  return prt.readObj({
    required: {
      "AnomalyId": "s",
      "AnomalyScore": toAnomalyScore,
      "Impact": toImpact,
      "MonitorArn": "s",
    },
    optional: {
      "AnomalyStartDate": "s",
      "AnomalyEndDate": "s",
      "DimensionValue": "s",
      "RootCauses": [toRootCause],
      "Feedback": toAnomalyFeedbackType,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RootCause {
  Service?: string | null;
  Region?: string | null;
  LinkedAccount?: string | null;
  UsageType?: string | null;
}
function toRootCause(root: JSONValue): RootCause {
  return prt.readObj({
    required: {},
    optional: {
      "Service": "s",
      "Region": "s",
      "LinkedAccount": "s",
      "UsageType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AnomalyScore {
  MaxScore: number;
  CurrentScore: number;
}
function toAnomalyScore(root: JSONValue): AnomalyScore {
  return prt.readObj({
    required: {
      "MaxScore": "n",
      "CurrentScore": "n",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Impact {
  MaxImpact: number;
  TotalImpact?: number | null;
}
function toImpact(root: JSONValue): Impact {
  return prt.readObj({
    required: {
      "MaxImpact": "n",
    },
    optional: {
      "TotalImpact": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ResultByTime {
  TimePeriod?: DateInterval | null;
  Total?: { [key: string]: MetricValue } | null;
  Groups?: Group[] | null;
  Estimated?: boolean | null;
}
function toResultByTime(root: JSONValue): ResultByTime {
  return prt.readObj({
    required: {},
    optional: {
      "TimePeriod": toDateInterval,
      "Total": x => prt.readMap(String, toMetricValue, x),
      "Groups": [toGroup],
      "Estimated": "b",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface MetricValue {
  Amount?: string | null;
  Unit?: string | null;
}
function toMetricValue(root: JSONValue): MetricValue {
  return prt.readObj({
    required: {},
    optional: {
      "Amount": "s",
      "Unit": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Group {
  Keys?: string[] | null;
  Metrics?: { [key: string]: MetricValue } | null;
}
function toGroup(root: JSONValue): Group {
  return prt.readObj({
    required: {},
    optional: {
      "Keys": ["s"],
      "Metrics": x => prt.readMap(String, toMetricValue, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ForecastResult {
  TimePeriod?: DateInterval | null;
  MeanValue?: string | null;
  PredictionIntervalLowerBound?: string | null;
  PredictionIntervalUpperBound?: string | null;
}
function toForecastResult(root: JSONValue): ForecastResult {
  return prt.readObj({
    required: {},
    optional: {
      "TimePeriod": toDateInterval,
      "MeanValue": "s",
      "PredictionIntervalLowerBound": "s",
      "PredictionIntervalUpperBound": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DimensionValuesWithAttributes {
  Value?: string | null;
  Attributes?: { [key: string]: string } | null;
}
function toDimensionValuesWithAttributes(root: JSONValue): DimensionValuesWithAttributes {
  return prt.readObj({
    required: {},
    optional: {
      "Value": "s",
      "Attributes": x => prt.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CoverageByTime {
  TimePeriod?: DateInterval | null;
  Groups?: ReservationCoverageGroup[] | null;
  Total?: Coverage | null;
}
function toCoverageByTime(root: JSONValue): CoverageByTime {
  return prt.readObj({
    required: {},
    optional: {
      "TimePeriod": toDateInterval,
      "Groups": [toReservationCoverageGroup],
      "Total": toCoverage,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReservationCoverageGroup {
  Attributes?: { [key: string]: string } | null;
  Coverage?: Coverage | null;
}
function toReservationCoverageGroup(root: JSONValue): ReservationCoverageGroup {
  return prt.readObj({
    required: {},
    optional: {
      "Attributes": x => prt.readMap(String, String, x),
      "Coverage": toCoverage,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Coverage {
  CoverageHours?: CoverageHours | null;
  CoverageNormalizedUnits?: CoverageNormalizedUnits | null;
  CoverageCost?: CoverageCost | null;
}
function toCoverage(root: JSONValue): Coverage {
  return prt.readObj({
    required: {},
    optional: {
      "CoverageHours": toCoverageHours,
      "CoverageNormalizedUnits": toCoverageNormalizedUnits,
      "CoverageCost": toCoverageCost,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CoverageHours {
  OnDemandHours?: string | null;
  ReservedHours?: string | null;
  TotalRunningHours?: string | null;
  CoverageHoursPercentage?: string | null;
}
function toCoverageHours(root: JSONValue): CoverageHours {
  return prt.readObj({
    required: {},
    optional: {
      "OnDemandHours": "s",
      "ReservedHours": "s",
      "TotalRunningHours": "s",
      "CoverageHoursPercentage": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CoverageNormalizedUnits {
  OnDemandNormalizedUnits?: string | null;
  ReservedNormalizedUnits?: string | null;
  TotalRunningNormalizedUnits?: string | null;
  CoverageNormalizedUnitsPercentage?: string | null;
}
function toCoverageNormalizedUnits(root: JSONValue): CoverageNormalizedUnits {
  return prt.readObj({
    required: {},
    optional: {
      "OnDemandNormalizedUnits": "s",
      "ReservedNormalizedUnits": "s",
      "TotalRunningNormalizedUnits": "s",
      "CoverageNormalizedUnitsPercentage": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CoverageCost {
  OnDemandCost?: string | null;
}
function toCoverageCost(root: JSONValue): CoverageCost {
  return prt.readObj({
    required: {},
    optional: {
      "OnDemandCost": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReservationPurchaseRecommendationMetadata {
  RecommendationId?: string | null;
  GenerationTimestamp?: string | null;
}
function toReservationPurchaseRecommendationMetadata(root: JSONValue): ReservationPurchaseRecommendationMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "RecommendationId": "s",
      "GenerationTimestamp": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReservationPurchaseRecommendation {
  AccountScope?: AccountScope | null;
  LookbackPeriodInDays?: LookbackPeriodInDays | null;
  TermInYears?: TermInYears | null;
  PaymentOption?: PaymentOption | null;
  ServiceSpecification?: ServiceSpecification | null;
  RecommendationDetails?: ReservationPurchaseRecommendationDetail[] | null;
  RecommendationSummary?: ReservationPurchaseRecommendationSummary | null;
}
function toReservationPurchaseRecommendation(root: JSONValue): ReservationPurchaseRecommendation {
  return prt.readObj({
    required: {},
    optional: {
      "AccountScope": toAccountScope,
      "LookbackPeriodInDays": toLookbackPeriodInDays,
      "TermInYears": toTermInYears,
      "PaymentOption": toPaymentOption,
      "ServiceSpecification": toServiceSpecification,
      "RecommendationDetails": [toReservationPurchaseRecommendationDetail],
      "RecommendationSummary": toReservationPurchaseRecommendationSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReservationPurchaseRecommendationDetail {
  AccountId?: string | null;
  InstanceDetails?: InstanceDetails | null;
  RecommendedNumberOfInstancesToPurchase?: string | null;
  RecommendedNormalizedUnitsToPurchase?: string | null;
  MinimumNumberOfInstancesUsedPerHour?: string | null;
  MinimumNormalizedUnitsUsedPerHour?: string | null;
  MaximumNumberOfInstancesUsedPerHour?: string | null;
  MaximumNormalizedUnitsUsedPerHour?: string | null;
  AverageNumberOfInstancesUsedPerHour?: string | null;
  AverageNormalizedUnitsUsedPerHour?: string | null;
  AverageUtilization?: string | null;
  EstimatedBreakEvenInMonths?: string | null;
  CurrencyCode?: string | null;
  EstimatedMonthlySavingsAmount?: string | null;
  EstimatedMonthlySavingsPercentage?: string | null;
  EstimatedMonthlyOnDemandCost?: string | null;
  EstimatedReservationCostForLookbackPeriod?: string | null;
  UpfrontCost?: string | null;
  RecurringStandardMonthlyCost?: string | null;
}
function toReservationPurchaseRecommendationDetail(root: JSONValue): ReservationPurchaseRecommendationDetail {
  return prt.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "InstanceDetails": toInstanceDetails,
      "RecommendedNumberOfInstancesToPurchase": "s",
      "RecommendedNormalizedUnitsToPurchase": "s",
      "MinimumNumberOfInstancesUsedPerHour": "s",
      "MinimumNormalizedUnitsUsedPerHour": "s",
      "MaximumNumberOfInstancesUsedPerHour": "s",
      "MaximumNormalizedUnitsUsedPerHour": "s",
      "AverageNumberOfInstancesUsedPerHour": "s",
      "AverageNormalizedUnitsUsedPerHour": "s",
      "AverageUtilization": "s",
      "EstimatedBreakEvenInMonths": "s",
      "CurrencyCode": "s",
      "EstimatedMonthlySavingsAmount": "s",
      "EstimatedMonthlySavingsPercentage": "s",
      "EstimatedMonthlyOnDemandCost": "s",
      "EstimatedReservationCostForLookbackPeriod": "s",
      "UpfrontCost": "s",
      "RecurringStandardMonthlyCost": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceDetails {
  EC2InstanceDetails?: EC2InstanceDetails | null;
  RDSInstanceDetails?: RDSInstanceDetails | null;
  RedshiftInstanceDetails?: RedshiftInstanceDetails | null;
  ElastiCacheInstanceDetails?: ElastiCacheInstanceDetails | null;
  ESInstanceDetails?: ESInstanceDetails | null;
}
function toInstanceDetails(root: JSONValue): InstanceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "EC2InstanceDetails": toEC2InstanceDetails,
      "RDSInstanceDetails": toRDSInstanceDetails,
      "RedshiftInstanceDetails": toRedshiftInstanceDetails,
      "ElastiCacheInstanceDetails": toElastiCacheInstanceDetails,
      "ESInstanceDetails": toESInstanceDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EC2InstanceDetails {
  Family?: string | null;
  InstanceType?: string | null;
  Region?: string | null;
  AvailabilityZone?: string | null;
  Platform?: string | null;
  Tenancy?: string | null;
  CurrentGeneration?: boolean | null;
  SizeFlexEligible?: boolean | null;
}
function toEC2InstanceDetails(root: JSONValue): EC2InstanceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "Family": "s",
      "InstanceType": "s",
      "Region": "s",
      "AvailabilityZone": "s",
      "Platform": "s",
      "Tenancy": "s",
      "CurrentGeneration": "b",
      "SizeFlexEligible": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RDSInstanceDetails {
  Family?: string | null;
  InstanceType?: string | null;
  Region?: string | null;
  DatabaseEngine?: string | null;
  DatabaseEdition?: string | null;
  DeploymentOption?: string | null;
  LicenseModel?: string | null;
  CurrentGeneration?: boolean | null;
  SizeFlexEligible?: boolean | null;
}
function toRDSInstanceDetails(root: JSONValue): RDSInstanceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "Family": "s",
      "InstanceType": "s",
      "Region": "s",
      "DatabaseEngine": "s",
      "DatabaseEdition": "s",
      "DeploymentOption": "s",
      "LicenseModel": "s",
      "CurrentGeneration": "b",
      "SizeFlexEligible": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RedshiftInstanceDetails {
  Family?: string | null;
  NodeType?: string | null;
  Region?: string | null;
  CurrentGeneration?: boolean | null;
  SizeFlexEligible?: boolean | null;
}
function toRedshiftInstanceDetails(root: JSONValue): RedshiftInstanceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "Family": "s",
      "NodeType": "s",
      "Region": "s",
      "CurrentGeneration": "b",
      "SizeFlexEligible": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ElastiCacheInstanceDetails {
  Family?: string | null;
  NodeType?: string | null;
  Region?: string | null;
  ProductDescription?: string | null;
  CurrentGeneration?: boolean | null;
  SizeFlexEligible?: boolean | null;
}
function toElastiCacheInstanceDetails(root: JSONValue): ElastiCacheInstanceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "Family": "s",
      "NodeType": "s",
      "Region": "s",
      "ProductDescription": "s",
      "CurrentGeneration": "b",
      "SizeFlexEligible": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ESInstanceDetails {
  InstanceClass?: string | null;
  InstanceSize?: string | null;
  Region?: string | null;
  CurrentGeneration?: boolean | null;
  SizeFlexEligible?: boolean | null;
}
function toESInstanceDetails(root: JSONValue): ESInstanceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "InstanceClass": "s",
      "InstanceSize": "s",
      "Region": "s",
      "CurrentGeneration": "b",
      "SizeFlexEligible": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReservationPurchaseRecommendationSummary {
  TotalEstimatedMonthlySavingsAmount?: string | null;
  TotalEstimatedMonthlySavingsPercentage?: string | null;
  CurrencyCode?: string | null;
}
function toReservationPurchaseRecommendationSummary(root: JSONValue): ReservationPurchaseRecommendationSummary {
  return prt.readObj({
    required: {},
    optional: {
      "TotalEstimatedMonthlySavingsAmount": "s",
      "TotalEstimatedMonthlySavingsPercentage": "s",
      "CurrencyCode": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UtilizationByTime {
  TimePeriod?: DateInterval | null;
  Groups?: ReservationUtilizationGroup[] | null;
  Total?: ReservationAggregates | null;
}
function toUtilizationByTime(root: JSONValue): UtilizationByTime {
  return prt.readObj({
    required: {},
    optional: {
      "TimePeriod": toDateInterval,
      "Groups": [toReservationUtilizationGroup],
      "Total": toReservationAggregates,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReservationUtilizationGroup {
  Key?: string | null;
  Value?: string | null;
  Attributes?: { [key: string]: string } | null;
  Utilization?: ReservationAggregates | null;
}
function toReservationUtilizationGroup(root: JSONValue): ReservationUtilizationGroup {
  return prt.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
      "Attributes": x => prt.readMap(String, String, x),
      "Utilization": toReservationAggregates,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ReservationAggregates {
  UtilizationPercentage?: string | null;
  UtilizationPercentageInUnits?: string | null;
  PurchasedHours?: string | null;
  PurchasedUnits?: string | null;
  TotalActualHours?: string | null;
  TotalActualUnits?: string | null;
  UnusedHours?: string | null;
  UnusedUnits?: string | null;
  OnDemandCostOfRIHoursUsed?: string | null;
  NetRISavings?: string | null;
  TotalPotentialRISavings?: string | null;
  AmortizedUpfrontFee?: string | null;
  AmortizedRecurringFee?: string | null;
  TotalAmortizedFee?: string | null;
}
function toReservationAggregates(root: JSONValue): ReservationAggregates {
  return prt.readObj({
    required: {},
    optional: {
      "UtilizationPercentage": "s",
      "UtilizationPercentageInUnits": "s",
      "PurchasedHours": "s",
      "PurchasedUnits": "s",
      "TotalActualHours": "s",
      "TotalActualUnits": "s",
      "UnusedHours": "s",
      "UnusedUnits": "s",
      "OnDemandCostOfRIHoursUsed": "s",
      "NetRISavings": "s",
      "TotalPotentialRISavings": "s",
      "AmortizedUpfrontFee": "s",
      "AmortizedRecurringFee": "s",
      "TotalAmortizedFee": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RightsizingRecommendationMetadata {
  RecommendationId?: string | null;
  GenerationTimestamp?: string | null;
  LookbackPeriodInDays?: LookbackPeriodInDays | null;
}
function toRightsizingRecommendationMetadata(root: JSONValue): RightsizingRecommendationMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "RecommendationId": "s",
      "GenerationTimestamp": "s",
      "LookbackPeriodInDays": toLookbackPeriodInDays,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RightsizingRecommendationSummary {
  TotalRecommendationCount?: string | null;
  EstimatedTotalMonthlySavingsAmount?: string | null;
  SavingsCurrencyCode?: string | null;
  SavingsPercentage?: string | null;
}
function toRightsizingRecommendationSummary(root: JSONValue): RightsizingRecommendationSummary {
  return prt.readObj({
    required: {},
    optional: {
      "TotalRecommendationCount": "s",
      "EstimatedTotalMonthlySavingsAmount": "s",
      "SavingsCurrencyCode": "s",
      "SavingsPercentage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RightsizingRecommendation {
  AccountId?: string | null;
  CurrentInstance?: CurrentInstance | null;
  RightsizingType?: RightsizingType | null;
  ModifyRecommendationDetail?: ModifyRecommendationDetail | null;
  TerminateRecommendationDetail?: TerminateRecommendationDetail | null;
}
function toRightsizingRecommendation(root: JSONValue): RightsizingRecommendation {
  return prt.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "CurrentInstance": toCurrentInstance,
      "RightsizingType": toRightsizingType,
      "ModifyRecommendationDetail": toModifyRecommendationDetail,
      "TerminateRecommendationDetail": toTerminateRecommendationDetail,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CurrentInstance {
  ResourceId?: string | null;
  InstanceName?: string | null;
  Tags?: TagValues[] | null;
  ResourceDetails?: ResourceDetails | null;
  ResourceUtilization?: ResourceUtilization | null;
  ReservationCoveredHoursInLookbackPeriod?: string | null;
  SavingsPlansCoveredHoursInLookbackPeriod?: string | null;
  OnDemandHoursInLookbackPeriod?: string | null;
  TotalRunningHoursInLookbackPeriod?: string | null;
  MonthlyCost?: string | null;
  CurrencyCode?: string | null;
}
function toCurrentInstance(root: JSONValue): CurrentInstance {
  return prt.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "InstanceName": "s",
      "Tags": [toTagValues],
      "ResourceDetails": toResourceDetails,
      "ResourceUtilization": toResourceUtilization,
      "ReservationCoveredHoursInLookbackPeriod": "s",
      "SavingsPlansCoveredHoursInLookbackPeriod": "s",
      "OnDemandHoursInLookbackPeriod": "s",
      "TotalRunningHoursInLookbackPeriod": "s",
      "MonthlyCost": "s",
      "CurrencyCode": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ResourceDetails {
  EC2ResourceDetails?: EC2ResourceDetails | null;
}
function toResourceDetails(root: JSONValue): ResourceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "EC2ResourceDetails": toEC2ResourceDetails,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EC2ResourceDetails {
  HourlyOnDemandRate?: string | null;
  InstanceType?: string | null;
  Platform?: string | null;
  Region?: string | null;
  Sku?: string | null;
  Memory?: string | null;
  NetworkPerformance?: string | null;
  Storage?: string | null;
  Vcpu?: string | null;
}
function toEC2ResourceDetails(root: JSONValue): EC2ResourceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "HourlyOnDemandRate": "s",
      "InstanceType": "s",
      "Platform": "s",
      "Region": "s",
      "Sku": "s",
      "Memory": "s",
      "NetworkPerformance": "s",
      "Storage": "s",
      "Vcpu": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ResourceUtilization {
  EC2ResourceUtilization?: EC2ResourceUtilization | null;
}
function toResourceUtilization(root: JSONValue): ResourceUtilization {
  return prt.readObj({
    required: {},
    optional: {
      "EC2ResourceUtilization": toEC2ResourceUtilization,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EC2ResourceUtilization {
  MaxCpuUtilizationPercentage?: string | null;
  MaxMemoryUtilizationPercentage?: string | null;
  MaxStorageUtilizationPercentage?: string | null;
}
function toEC2ResourceUtilization(root: JSONValue): EC2ResourceUtilization {
  return prt.readObj({
    required: {},
    optional: {
      "MaxCpuUtilizationPercentage": "s",
      "MaxMemoryUtilizationPercentage": "s",
      "MaxStorageUtilizationPercentage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RightsizingType =
| "TERMINATE"
| "MODIFY"
;
function toRightsizingType(root: JSONValue): RightsizingType | null {
  return ( false
    || root == "TERMINATE"
    || root == "MODIFY"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ModifyRecommendationDetail {
  TargetInstances?: TargetInstance[] | null;
}
function toModifyRecommendationDetail(root: JSONValue): ModifyRecommendationDetail {
  return prt.readObj({
    required: {},
    optional: {
      "TargetInstances": [toTargetInstance],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TargetInstance {
  EstimatedMonthlyCost?: string | null;
  EstimatedMonthlySavings?: string | null;
  CurrencyCode?: string | null;
  DefaultTargetInstance?: boolean | null;
  ResourceDetails?: ResourceDetails | null;
  ExpectedResourceUtilization?: ResourceUtilization | null;
}
function toTargetInstance(root: JSONValue): TargetInstance {
  return prt.readObj({
    required: {},
    optional: {
      "EstimatedMonthlyCost": "s",
      "EstimatedMonthlySavings": "s",
      "CurrencyCode": "s",
      "DefaultTargetInstance": "b",
      "ResourceDetails": toResourceDetails,
      "ExpectedResourceUtilization": toResourceUtilization,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TerminateRecommendationDetail {
  EstimatedMonthlySavings?: string | null;
  CurrencyCode?: string | null;
}
function toTerminateRecommendationDetail(root: JSONValue): TerminateRecommendationDetail {
  return prt.readObj({
    required: {},
    optional: {
      "EstimatedMonthlySavings": "s",
      "CurrencyCode": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansCoverage {
  Attributes?: { [key: string]: string } | null;
  Coverage?: SavingsPlansCoverageData | null;
  TimePeriod?: DateInterval | null;
}
function toSavingsPlansCoverage(root: JSONValue): SavingsPlansCoverage {
  return prt.readObj({
    required: {},
    optional: {
      "Attributes": x => prt.readMap(String, String, x),
      "Coverage": toSavingsPlansCoverageData,
      "TimePeriod": toDateInterval,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansCoverageData {
  SpendCoveredBySavingsPlans?: string | null;
  OnDemandCost?: string | null;
  TotalCost?: string | null;
  CoveragePercentage?: string | null;
}
function toSavingsPlansCoverageData(root: JSONValue): SavingsPlansCoverageData {
  return prt.readObj({
    required: {},
    optional: {
      "SpendCoveredBySavingsPlans": "s",
      "OnDemandCost": "s",
      "TotalCost": "s",
      "CoveragePercentage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansPurchaseRecommendationMetadata {
  RecommendationId?: string | null;
  GenerationTimestamp?: string | null;
}
function toSavingsPlansPurchaseRecommendationMetadata(root: JSONValue): SavingsPlansPurchaseRecommendationMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "RecommendationId": "s",
      "GenerationTimestamp": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansPurchaseRecommendation {
  AccountScope?: AccountScope | null;
  SavingsPlansType?: SupportedSavingsPlansType | null;
  TermInYears?: TermInYears | null;
  PaymentOption?: PaymentOption | null;
  LookbackPeriodInDays?: LookbackPeriodInDays | null;
  SavingsPlansPurchaseRecommendationDetails?: SavingsPlansPurchaseRecommendationDetail[] | null;
  SavingsPlansPurchaseRecommendationSummary?: SavingsPlansPurchaseRecommendationSummary | null;
}
function toSavingsPlansPurchaseRecommendation(root: JSONValue): SavingsPlansPurchaseRecommendation {
  return prt.readObj({
    required: {},
    optional: {
      "AccountScope": toAccountScope,
      "SavingsPlansType": toSupportedSavingsPlansType,
      "TermInYears": toTermInYears,
      "PaymentOption": toPaymentOption,
      "LookbackPeriodInDays": toLookbackPeriodInDays,
      "SavingsPlansPurchaseRecommendationDetails": [toSavingsPlansPurchaseRecommendationDetail],
      "SavingsPlansPurchaseRecommendationSummary": toSavingsPlansPurchaseRecommendationSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansPurchaseRecommendationDetail {
  SavingsPlansDetails?: SavingsPlansDetails | null;
  AccountId?: string | null;
  UpfrontCost?: string | null;
  EstimatedROI?: string | null;
  CurrencyCode?: string | null;
  EstimatedSPCost?: string | null;
  EstimatedOnDemandCost?: string | null;
  EstimatedOnDemandCostWithCurrentCommitment?: string | null;
  EstimatedSavingsAmount?: string | null;
  EstimatedSavingsPercentage?: string | null;
  HourlyCommitmentToPurchase?: string | null;
  EstimatedAverageUtilization?: string | null;
  EstimatedMonthlySavingsAmount?: string | null;
  CurrentMinimumHourlyOnDemandSpend?: string | null;
  CurrentMaximumHourlyOnDemandSpend?: string | null;
  CurrentAverageHourlyOnDemandSpend?: string | null;
}
function toSavingsPlansPurchaseRecommendationDetail(root: JSONValue): SavingsPlansPurchaseRecommendationDetail {
  return prt.readObj({
    required: {},
    optional: {
      "SavingsPlansDetails": toSavingsPlansDetails,
      "AccountId": "s",
      "UpfrontCost": "s",
      "EstimatedROI": "s",
      "CurrencyCode": "s",
      "EstimatedSPCost": "s",
      "EstimatedOnDemandCost": "s",
      "EstimatedOnDemandCostWithCurrentCommitment": "s",
      "EstimatedSavingsAmount": "s",
      "EstimatedSavingsPercentage": "s",
      "HourlyCommitmentToPurchase": "s",
      "EstimatedAverageUtilization": "s",
      "EstimatedMonthlySavingsAmount": "s",
      "CurrentMinimumHourlyOnDemandSpend": "s",
      "CurrentMaximumHourlyOnDemandSpend": "s",
      "CurrentAverageHourlyOnDemandSpend": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansDetails {
  Region?: string | null;
  InstanceFamily?: string | null;
  OfferingId?: string | null;
}
function toSavingsPlansDetails(root: JSONValue): SavingsPlansDetails {
  return prt.readObj({
    required: {},
    optional: {
      "Region": "s",
      "InstanceFamily": "s",
      "OfferingId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansPurchaseRecommendationSummary {
  EstimatedROI?: string | null;
  CurrencyCode?: string | null;
  EstimatedTotalCost?: string | null;
  CurrentOnDemandSpend?: string | null;
  EstimatedSavingsAmount?: string | null;
  TotalRecommendationCount?: string | null;
  DailyCommitmentToPurchase?: string | null;
  HourlyCommitmentToPurchase?: string | null;
  EstimatedSavingsPercentage?: string | null;
  EstimatedMonthlySavingsAmount?: string | null;
  EstimatedOnDemandCostWithCurrentCommitment?: string | null;
}
function toSavingsPlansPurchaseRecommendationSummary(root: JSONValue): SavingsPlansPurchaseRecommendationSummary {
  return prt.readObj({
    required: {},
    optional: {
      "EstimatedROI": "s",
      "CurrencyCode": "s",
      "EstimatedTotalCost": "s",
      "CurrentOnDemandSpend": "s",
      "EstimatedSavingsAmount": "s",
      "TotalRecommendationCount": "s",
      "DailyCommitmentToPurchase": "s",
      "HourlyCommitmentToPurchase": "s",
      "EstimatedSavingsPercentage": "s",
      "EstimatedMonthlySavingsAmount": "s",
      "EstimatedOnDemandCostWithCurrentCommitment": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansUtilizationByTime {
  TimePeriod: DateInterval;
  Utilization: SavingsPlansUtilization;
  Savings?: SavingsPlansSavings | null;
  AmortizedCommitment?: SavingsPlansAmortizedCommitment | null;
}
function toSavingsPlansUtilizationByTime(root: JSONValue): SavingsPlansUtilizationByTime {
  return prt.readObj({
    required: {
      "TimePeriod": toDateInterval,
      "Utilization": toSavingsPlansUtilization,
    },
    optional: {
      "Savings": toSavingsPlansSavings,
      "AmortizedCommitment": toSavingsPlansAmortizedCommitment,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface SavingsPlansUtilization {
  TotalCommitment?: string | null;
  UsedCommitment?: string | null;
  UnusedCommitment?: string | null;
  UtilizationPercentage?: string | null;
}
function toSavingsPlansUtilization(root: JSONValue): SavingsPlansUtilization {
  return prt.readObj({
    required: {},
    optional: {
      "TotalCommitment": "s",
      "UsedCommitment": "s",
      "UnusedCommitment": "s",
      "UtilizationPercentage": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface SavingsPlansSavings {
  NetSavings?: string | null;
  OnDemandCostEquivalent?: string | null;
}
function toSavingsPlansSavings(root: JSONValue): SavingsPlansSavings {
  return prt.readObj({
    required: {},
    optional: {
      "NetSavings": "s",
      "OnDemandCostEquivalent": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface SavingsPlansAmortizedCommitment {
  AmortizedRecurringCommitment?: string | null;
  AmortizedUpfrontCommitment?: string | null;
  TotalAmortizedCommitment?: string | null;
}
function toSavingsPlansAmortizedCommitment(root: JSONValue): SavingsPlansAmortizedCommitment {
  return prt.readObj({
    required: {},
    optional: {
      "AmortizedRecurringCommitment": "s",
      "AmortizedUpfrontCommitment": "s",
      "TotalAmortizedCommitment": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SavingsPlansUtilizationAggregates {
  Utilization: SavingsPlansUtilization;
  Savings?: SavingsPlansSavings | null;
  AmortizedCommitment?: SavingsPlansAmortizedCommitment | null;
}
function toSavingsPlansUtilizationAggregates(root: JSONValue): SavingsPlansUtilizationAggregates {
  return prt.readObj({
    required: {
      "Utilization": toSavingsPlansUtilization,
    },
    optional: {
      "Savings": toSavingsPlansSavings,
      "AmortizedCommitment": toSavingsPlansAmortizedCommitment,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SavingsPlansUtilizationDetail {
  SavingsPlanArn?: string | null;
  Attributes?: { [key: string]: string } | null;
  Utilization?: SavingsPlansUtilization | null;
  Savings?: SavingsPlansSavings | null;
  AmortizedCommitment?: SavingsPlansAmortizedCommitment | null;
}
function toSavingsPlansUtilizationDetail(root: JSONValue): SavingsPlansUtilizationDetail {
  return prt.readObj({
    required: {},
    optional: {
      "SavingsPlanArn": "s",
      "Attributes": x => prt.readMap(String, String, x),
      "Utilization": toSavingsPlansUtilization,
      "Savings": toSavingsPlansSavings,
      "AmortizedCommitment": toSavingsPlansAmortizedCommitment,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CostCategoryReference {
  CostCategoryArn?: string | null;
  Name?: string | null;
  EffectiveStart?: string | null;
  EffectiveEnd?: string | null;
  NumberOfRules?: number | null;
}
function toCostCategoryReference(root: JSONValue): CostCategoryReference {
  return prt.readObj({
    required: {},
    optional: {
      "CostCategoryArn": "s",
      "Name": "s",
      "EffectiveStart": "s",
      "EffectiveEnd": "s",
      "NumberOfRules": "n",
    },
  }, root);
}
