// Autogenerated API client for: Amazon Connect Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Connect {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Connect.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-08-08",
    "endpointPrefix": "connect",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon Connect",
    "serviceFullName": "Amazon Connect Service",
    "serviceId": "Connect",
    "signatureVersion": "v4",
    "signingName": "connect",
    "uid": "connect-2017-08-08"
  };

  async associateApprovedOrigin(
    {abortSignal, ...params}: RequestConfig & AssociateApprovedOriginRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Origin: params["Origin"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateApprovedOrigin",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/approved-origin`,
    });
  }

  async associateInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & AssociateInstanceStorageConfigRequest,
  ): Promise<AssociateInstanceStorageConfigResponse> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      StorageConfig: fromInstanceStorageConfig(params["StorageConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateInstanceStorageConfig",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationId": "s",
      },
    }, await resp.json());
  }

  async associateLambdaFunction(
    {abortSignal, ...params}: RequestConfig & AssociateLambdaFunctionRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      FunctionArn: params["FunctionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateLambdaFunction",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lambda-function`,
    });
  }

  async associateLexBot(
    {abortSignal, ...params}: RequestConfig & AssociateLexBotRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LexBot: fromLexBot(params["LexBot"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateLexBot",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lex-bot`,
    });
  }

  async associateQueueQuickConnects(
    {abortSignal, ...params}: RequestConfig & AssociateQueueQuickConnectsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QuickConnectIds: params["QuickConnectIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateQueueQuickConnects",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/associate-quick-connects`,
    });
  }

  async associateRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & AssociateRoutingProfileQueuesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QueueConfigs: params["QueueConfigs"]?.map(x => fromRoutingProfileQueueConfig(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateRoutingProfileQueues",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/associate-queues`,
    });
  }

  async associateSecurityKey(
    {abortSignal, ...params}: RequestConfig & AssociateSecurityKeyRequest,
  ): Promise<AssociateSecurityKeyResponse> {
    const body: jsonP.JSONObject = {
      Key: params["Key"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSecurityKey",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/security-key`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationId": "s",
      },
    }, await resp.json());
  }

  async createContactFlow(
    {abortSignal, ...params}: RequestConfig & CreateContactFlowRequest,
  ): Promise<CreateContactFlowResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Type: params["Type"],
      Description: params["Description"],
      Content: params["Content"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContactFlow",
      method: "PUT",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactFlowId": "s",
        "ContactFlowArn": "s",
      },
    }, await resp.json());
  }

  async createInstance(
    {abortSignal, ...params}: RequestConfig & CreateInstanceRequest,
  ): Promise<CreateInstanceResponse> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"],
      IdentityManagementType: params["IdentityManagementType"],
      InstanceAlias: params["InstanceAlias"],
      DirectoryId: params["DirectoryId"],
      InboundCallsEnabled: params["InboundCallsEnabled"],
      OutboundCallsEnabled: params["OutboundCallsEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstance",
      method: "PUT",
      requestUri: "/instance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Arn": "s",
      },
    }, await resp.json());
  }

  async createIntegrationAssociation(
    {abortSignal, ...params}: RequestConfig & CreateIntegrationAssociationRequest,
  ): Promise<CreateIntegrationAssociationResponse> {
    const body: jsonP.JSONObject = {
      IntegrationType: params["IntegrationType"],
      IntegrationArn: params["IntegrationArn"],
      SourceApplicationUrl: params["SourceApplicationUrl"],
      SourceApplicationName: params["SourceApplicationName"],
      SourceType: params["SourceType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIntegrationAssociation",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IntegrationAssociationId": "s",
        "IntegrationAssociationArn": "s",
      },
    }, await resp.json());
  }

  async createQueue(
    {abortSignal, ...params}: RequestConfig & CreateQueueRequest,
  ): Promise<CreateQueueResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      OutboundCallerConfig: fromOutboundCallerConfig(params["OutboundCallerConfig"]),
      HoursOfOperationId: params["HoursOfOperationId"],
      MaxContacts: params["MaxContacts"],
      QuickConnectIds: params["QuickConnectIds"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateQueue",
      method: "PUT",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QueueArn": "s",
        "QueueId": "s",
      },
    }, await resp.json());
  }

  async createQuickConnect(
    {abortSignal, ...params}: RequestConfig & CreateQuickConnectRequest,
  ): Promise<CreateQuickConnectResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      QuickConnectConfig: fromQuickConnectConfig(params["QuickConnectConfig"]),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateQuickConnect",
      method: "PUT",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QuickConnectARN": "s",
        "QuickConnectId": "s",
      },
    }, await resp.json());
  }

  async createRoutingProfile(
    {abortSignal, ...params}: RequestConfig & CreateRoutingProfileRequest,
  ): Promise<CreateRoutingProfileResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      DefaultOutboundQueueId: params["DefaultOutboundQueueId"],
      QueueConfigs: params["QueueConfigs"]?.map(x => fromRoutingProfileQueueConfig(x)),
      MediaConcurrencies: params["MediaConcurrencies"]?.map(x => fromMediaConcurrency(x)),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoutingProfile",
      method: "PUT",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoutingProfileArn": "s",
        "RoutingProfileId": "s",
      },
    }, await resp.json());
  }

  async createUseCase(
    {abortSignal, ...params}: RequestConfig & CreateUseCaseRequest,
  ): Promise<CreateUseCaseResponse> {
    const body: jsonP.JSONObject = {
      UseCaseType: params["UseCaseType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUseCase",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}/use-cases`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UseCaseId": "s",
        "UseCaseArn": "s",
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & CreateUserRequest,
  ): Promise<CreateUserResponse> {
    const body: jsonP.JSONObject = {
      Username: params["Username"],
      Password: params["Password"],
      IdentityInfo: fromUserIdentityInfo(params["IdentityInfo"]),
      PhoneConfig: fromUserPhoneConfig(params["PhoneConfig"]),
      DirectoryUserId: params["DirectoryUserId"],
      SecurityProfileIds: params["SecurityProfileIds"],
      RoutingProfileId: params["RoutingProfileId"],
      HierarchyGroupId: params["HierarchyGroupId"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
      method: "PUT",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserId": "s",
        "UserArn": "s",
      },
    }, await resp.json());
  }

  async createUserHierarchyGroup(
    {abortSignal, ...params}: RequestConfig & CreateUserHierarchyGroupRequest,
  ): Promise<CreateUserHierarchyGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ParentGroupId: params["ParentGroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUserHierarchyGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HierarchyGroupId": "s",
        "HierarchyGroupArn": "s",
      },
    }, await resp.json());
  }

  async deleteInstance(
    {abortSignal, ...params}: RequestConfig & DeleteInstanceRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteInstance",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}`,
    });
  }

  async deleteIntegrationAssociation(
    {abortSignal, ...params}: RequestConfig & DeleteIntegrationAssociationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIntegrationAssociation",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}`,
    });
  }

  async deleteQuickConnect(
    {abortSignal, ...params}: RequestConfig & DeleteQuickConnectRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteQuickConnect",
      method: "DELETE",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}`,
    });
  }

  async deleteUseCase(
    {abortSignal, ...params}: RequestConfig & DeleteUseCaseRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUseCase",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}/use-cases/${params["UseCaseId"]}`,
    });
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUser",
      method: "DELETE",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}`,
    });
  }

  async deleteUserHierarchyGroup(
    {abortSignal, ...params}: RequestConfig & DeleteUserHierarchyGroupRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUserHierarchyGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}/${params["HierarchyGroupId"]}`,
    });
  }

  async describeContactFlow(
    {abortSignal, ...params}: RequestConfig & DescribeContactFlowRequest,
  ): Promise<DescribeContactFlowResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeContactFlow",
      method: "GET",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}/${params["ContactFlowId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactFlow": toContactFlow,
      },
    }, await resp.json());
  }

  async describeHoursOfOperation(
    {abortSignal, ...params}: RequestConfig & DescribeHoursOfOperationRequest,
  ): Promise<DescribeHoursOfOperationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeHoursOfOperation",
      method: "GET",
      requestUri: cmnP.encodePath`/hours-of-operations/${params["InstanceId"]}/${params["HoursOfOperationId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HoursOfOperation": toHoursOfOperation,
      },
    }, await resp.json());
  }

  async describeInstance(
    {abortSignal, ...params}: RequestConfig & DescribeInstanceRequest,
  ): Promise<DescribeInstanceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeInstance",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Instance": toInstance,
      },
    }, await resp.json());
  }

  async describeInstanceAttribute(
    {abortSignal, ...params}: RequestConfig & DescribeInstanceAttributeRequest,
  ): Promise<DescribeInstanceAttributeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeInstanceAttribute",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/attribute/${params["AttributeType"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attribute": toAttribute,
      },
    }, await resp.json());
  }

  async describeInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & DescribeInstanceStorageConfigRequest,
  ): Promise<DescribeInstanceStorageConfigResponse> {
    const query = new URLSearchParams;
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeInstanceStorageConfig",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config/${params["AssociationId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StorageConfig": toInstanceStorageConfig,
      },
    }, await resp.json());
  }

  async describeQueue(
    {abortSignal, ...params}: RequestConfig & DescribeQueueRequest,
  ): Promise<DescribeQueueResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeQueue",
      method: "GET",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Queue": toQueue,
      },
    }, await resp.json());
  }

  async describeQuickConnect(
    {abortSignal, ...params}: RequestConfig & DescribeQuickConnectRequest,
  ): Promise<DescribeQuickConnectResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeQuickConnect",
      method: "GET",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QuickConnect": toQuickConnect,
      },
    }, await resp.json());
  }

  async describeRoutingProfile(
    {abortSignal, ...params}: RequestConfig & DescribeRoutingProfileRequest,
  ): Promise<DescribeRoutingProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRoutingProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoutingProfile": toRoutingProfile,
      },
    }, await resp.json());
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & DescribeUserRequest,
  ): Promise<DescribeUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUser",
      method: "GET",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async describeUserHierarchyGroup(
    {abortSignal, ...params}: RequestConfig & DescribeUserHierarchyGroupRequest,
  ): Promise<DescribeUserHierarchyGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUserHierarchyGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}/${params["HierarchyGroupId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HierarchyGroup": toHierarchyGroup,
      },
    }, await resp.json());
  }

  async describeUserHierarchyStructure(
    {abortSignal, ...params}: RequestConfig & DescribeUserHierarchyStructureRequest,
  ): Promise<DescribeUserHierarchyStructureResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUserHierarchyStructure",
      method: "GET",
      requestUri: cmnP.encodePath`/user-hierarchy-structure/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HierarchyStructure": toHierarchyStructure,
      },
    }, await resp.json());
  }

  async disassociateApprovedOrigin(
    {abortSignal, ...params}: RequestConfig & DisassociateApprovedOriginRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("origin", params["Origin"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateApprovedOrigin",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/approved-origin`,
    });
  }

  async disassociateInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & DisassociateInstanceStorageConfigRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateInstanceStorageConfig",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config/${params["AssociationId"]}`,
    });
  }

  async disassociateLambdaFunction(
    {abortSignal, ...params}: RequestConfig & DisassociateLambdaFunctionRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("functionArn", params["FunctionArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateLambdaFunction",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lambda-function`,
    });
  }

  async disassociateLexBot(
    {abortSignal, ...params}: RequestConfig & DisassociateLexBotRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("botName", params["BotName"]?.toString() ?? "");
    query.set("lexRegion", params["LexRegion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateLexBot",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lex-bot`,
    });
  }

  async disassociateQueueQuickConnects(
    {abortSignal, ...params}: RequestConfig & DisassociateQueueQuickConnectsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QuickConnectIds: params["QuickConnectIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateQueueQuickConnects",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/disassociate-quick-connects`,
    });
  }

  async disassociateRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & DisassociateRoutingProfileQueuesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QueueReferences: params["QueueReferences"]?.map(x => fromRoutingProfileQueueReference(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateRoutingProfileQueues",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/disassociate-queues`,
    });
  }

  async disassociateSecurityKey(
    {abortSignal, ...params}: RequestConfig & DisassociateSecurityKeyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateSecurityKey",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/security-key/${params["AssociationId"]}`,
    });
  }

  async getContactAttributes(
    {abortSignal, ...params}: RequestConfig & GetContactAttributesRequest,
  ): Promise<GetContactAttributesResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetContactAttributes",
      method: "GET",
      requestUri: cmnP.encodePath`/contact/attributes/${params["InstanceId"]}/${params["InitialContactId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attributes": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getCurrentMetricData(
    {abortSignal, ...params}: RequestConfig & GetCurrentMetricDataRequest,
  ): Promise<GetCurrentMetricDataResponse> {
    const body: jsonP.JSONObject = {
      Filters: fromFilters(params["Filters"]),
      Groupings: params["Groupings"],
      CurrentMetrics: params["CurrentMetrics"]?.map(x => fromCurrentMetric(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCurrentMetricData",
      requestUri: cmnP.encodePath`/metrics/current/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MetricResults": [toCurrentMetricResult],
        "DataSnapshotTime": "d",
      },
    }, await resp.json());
  }

  async getFederationToken(
    {abortSignal, ...params}: RequestConfig & GetFederationTokenRequest,
  ): Promise<GetFederationTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFederationToken",
      method: "GET",
      requestUri: cmnP.encodePath`/user/federate/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Credentials": toCredentials,
      },
    }, await resp.json());
  }

  async getMetricData(
    {abortSignal, ...params}: RequestConfig & GetMetricDataRequest,
  ): Promise<GetMetricDataResponse> {
    const body: jsonP.JSONObject = {
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      Filters: fromFilters(params["Filters"]),
      Groupings: params["Groupings"],
      HistoricalMetrics: params["HistoricalMetrics"]?.map(x => fromHistoricalMetric(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMetricData",
      requestUri: cmnP.encodePath`/metrics/historical/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MetricResults": [toHistoricalMetricResult],
      },
    }, await resp.json());
  }

  async listApprovedOrigins(
    {abortSignal, ...params}: RequestConfig & ListApprovedOriginsRequest,
  ): Promise<ListApprovedOriginsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListApprovedOrigins",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/approved-origins`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Origins": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listContactFlows(
    {abortSignal, ...params}: RequestConfig & ListContactFlowsRequest,
  ): Promise<ListContactFlowsResponse> {
    const query = new URLSearchParams;
    for (const item of params["ContactFlowTypes"] ?? []) {
      query.append("contactFlowTypes", item?.toString() ?? "");
    }
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListContactFlows",
      method: "GET",
      requestUri: cmnP.encodePath`/contact-flows-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactFlowSummaryList": [toContactFlowSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHoursOfOperations(
    {abortSignal, ...params}: RequestConfig & ListHoursOfOperationsRequest,
  ): Promise<ListHoursOfOperationsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListHoursOfOperations",
      method: "GET",
      requestUri: cmnP.encodePath`/hours-of-operations-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HoursOfOperationSummaryList": [toHoursOfOperationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstanceAttributes(
    {abortSignal, ...params}: RequestConfig & ListInstanceAttributesRequest,
  ): Promise<ListInstanceAttributesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInstanceAttributes",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/attributes`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attributes": [toAttribute],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstanceStorageConfigs(
    {abortSignal, ...params}: RequestConfig & ListInstanceStorageConfigsRequest,
  ): Promise<ListInstanceStorageConfigsResponse> {
    const query = new URLSearchParams;
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInstanceStorageConfigs",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-configs`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StorageConfigs": [toInstanceStorageConfig],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstances(
    {abortSignal, ...params}: RequestConfig & ListInstancesRequest = {},
  ): Promise<ListInstancesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInstances",
      method: "GET",
      requestUri: "/instance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InstanceSummaryList": [toInstanceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIntegrationAssociations(
    {abortSignal, ...params}: RequestConfig & ListIntegrationAssociationsRequest,
  ): Promise<ListIntegrationAssociationsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIntegrationAssociations",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IntegrationAssociationSummaryList": [toIntegrationAssociationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLambdaFunctions(
    {abortSignal, ...params}: RequestConfig & ListLambdaFunctionsRequest,
  ): Promise<ListLambdaFunctionsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLambdaFunctions",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lambda-functions`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LambdaFunctions": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLexBots(
    {abortSignal, ...params}: RequestConfig & ListLexBotsRequest,
  ): Promise<ListLexBotsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLexBots",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lex-bots`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LexBots": [toLexBot],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPhoneNumbers(
    {abortSignal, ...params}: RequestConfig & ListPhoneNumbersRequest,
  ): Promise<ListPhoneNumbersResponse> {
    const query = new URLSearchParams;
    for (const item of params["PhoneNumberTypes"] ?? []) {
      query.append("phoneNumberTypes", item?.toString() ?? "");
    }
    for (const item of params["PhoneNumberCountryCodes"] ?? []) {
      query.append("phoneNumberCountryCodes", item?.toString() ?? "");
    }
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPhoneNumbers",
      method: "GET",
      requestUri: cmnP.encodePath`/phone-numbers-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberSummaryList": [toPhoneNumberSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPrompts(
    {abortSignal, ...params}: RequestConfig & ListPromptsRequest,
  ): Promise<ListPromptsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPrompts",
      method: "GET",
      requestUri: cmnP.encodePath`/prompts-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PromptSummaryList": [toPromptSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listQueueQuickConnects(
    {abortSignal, ...params}: RequestConfig & ListQueueQuickConnectsRequest,
  ): Promise<ListQueueQuickConnectsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListQueueQuickConnects",
      method: "GET",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/quick-connects`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "QuickConnectSummaryList": [toQuickConnectSummary],
      },
    }, await resp.json());
  }

  async listQueues(
    {abortSignal, ...params}: RequestConfig & ListQueuesRequest,
  ): Promise<ListQueuesResponse> {
    const query = new URLSearchParams;
    for (const item of params["QueueTypes"] ?? []) {
      query.append("queueTypes", item?.toString() ?? "");
    }
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListQueues",
      method: "GET",
      requestUri: cmnP.encodePath`/queues-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QueueSummaryList": [toQueueSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listQuickConnects(
    {abortSignal, ...params}: RequestConfig & ListQuickConnectsRequest,
  ): Promise<ListQuickConnectsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    for (const item of params["QuickConnectTypes"] ?? []) {
      query.append("QuickConnectTypes", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListQuickConnects",
      method: "GET",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QuickConnectSummaryList": [toQuickConnectSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & ListRoutingProfileQueuesRequest,
  ): Promise<ListRoutingProfileQueuesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRoutingProfileQueues",
      method: "GET",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/queues`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "RoutingProfileQueueConfigSummaryList": [toRoutingProfileQueueConfigSummary],
      },
    }, await resp.json());
  }

  async listRoutingProfiles(
    {abortSignal, ...params}: RequestConfig & ListRoutingProfilesRequest,
  ): Promise<ListRoutingProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRoutingProfiles",
      method: "GET",
      requestUri: cmnP.encodePath`/routing-profiles-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoutingProfileSummaryList": [toRoutingProfileSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSecurityKeys(
    {abortSignal, ...params}: RequestConfig & ListSecurityKeysRequest,
  ): Promise<ListSecurityKeysResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSecurityKeys",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/security-keys`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SecurityKeys": [toSecurityKey],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSecurityProfiles(
    {abortSignal, ...params}: RequestConfig & ListSecurityProfilesRequest,
  ): Promise<ListSecurityProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSecurityProfiles",
      method: "GET",
      requestUri: cmnP.encodePath`/security-profiles-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SecurityProfileSummaryList": [toSecurityProfileSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listUseCases(
    {abortSignal, ...params}: RequestConfig & ListUseCasesRequest,
  ): Promise<ListUseCasesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUseCases",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}/use-cases`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UseCaseSummaryList": [toUseCase],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUserHierarchyGroups(
    {abortSignal, ...params}: RequestConfig & ListUserHierarchyGroupsRequest,
  ): Promise<ListUserHierarchyGroupsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUserHierarchyGroups",
      method: "GET",
      requestUri: cmnP.encodePath`/user-hierarchy-groups-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserHierarchyGroupSummaryList": [toHierarchyGroupSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & ListUsersRequest,
  ): Promise<ListUsersResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUsers",
      method: "GET",
      requestUri: cmnP.encodePath`/users-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserSummaryList": [toUserSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async resumeContactRecording(
    {abortSignal, ...params}: RequestConfig & ResumeContactRecordingRequest,
  ): Promise<ResumeContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResumeContactRecording",
      requestUri: "/contact/resume-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startChatContact(
    {abortSignal, ...params}: RequestConfig & StartChatContactRequest,
  ): Promise<StartChatContactResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactFlowId: params["ContactFlowId"],
      Attributes: params["Attributes"],
      ParticipantDetails: fromParticipantDetails(params["ParticipantDetails"]),
      InitialMessage: fromChatMessage(params["InitialMessage"]),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartChatContact",
      method: "PUT",
      requestUri: "/contact/chat",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactId": "s",
        "ParticipantId": "s",
        "ParticipantToken": "s",
      },
    }, await resp.json());
  }

  async startContactRecording(
    {abortSignal, ...params}: RequestConfig & StartContactRecordingRequest,
  ): Promise<StartContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
      VoiceRecordingConfiguration: fromVoiceRecordingConfiguration(params["VoiceRecordingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartContactRecording",
      requestUri: "/contact/start-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startOutboundVoiceContact(
    {abortSignal, ...params}: RequestConfig & StartOutboundVoiceContactRequest,
  ): Promise<StartOutboundVoiceContactResponse> {
    const body: jsonP.JSONObject = {
      DestinationPhoneNumber: params["DestinationPhoneNumber"],
      ContactFlowId: params["ContactFlowId"],
      InstanceId: params["InstanceId"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      SourcePhoneNumber: params["SourcePhoneNumber"],
      QueueId: params["QueueId"],
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartOutboundVoiceContact",
      method: "PUT",
      requestUri: "/contact/outbound-voice",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactId": "s",
      },
    }, await resp.json());
  }

  async startTaskContact(
    {abortSignal, ...params}: RequestConfig & StartTaskContactRequest,
  ): Promise<StartTaskContactResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      PreviousContactId: params["PreviousContactId"],
      ContactFlowId: params["ContactFlowId"],
      Attributes: params["Attributes"],
      Name: params["Name"],
      References: jsonP.serializeMap(params["References"], x => fromReference(x)),
      Description: params["Description"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartTaskContact",
      method: "PUT",
      requestUri: "/contact/task",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactId": "s",
      },
    }, await resp.json());
  }

  async stopContact(
    {abortSignal, ...params}: RequestConfig & StopContactRequest,
  ): Promise<StopContactResponse> {
    const body: jsonP.JSONObject = {
      ContactId: params["ContactId"],
      InstanceId: params["InstanceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopContact",
      requestUri: "/contact/stop",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopContactRecording(
    {abortSignal, ...params}: RequestConfig & StopContactRecordingRequest,
  ): Promise<StopContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopContactRecording",
      requestUri: "/contact/stop-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async suspendContactRecording(
    {abortSignal, ...params}: RequestConfig & SuspendContactRecordingRequest,
  ): Promise<SuspendContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SuspendContactRecording",
      requestUri: "/contact/suspend-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
  }

  async updateContactAttributes(
    {abortSignal, ...params}: RequestConfig & UpdateContactAttributesRequest,
  ): Promise<UpdateContactAttributesResponse> {
    const body: jsonP.JSONObject = {
      InitialContactId: params["InitialContactId"],
      InstanceId: params["InstanceId"],
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContactAttributes",
      requestUri: "/contact/attributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateContactFlowContent(
    {abortSignal, ...params}: RequestConfig & UpdateContactFlowContentRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Content: params["Content"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContactFlowContent",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}/${params["ContactFlowId"]}/content`,
    });
  }

  async updateContactFlowName(
    {abortSignal, ...params}: RequestConfig & UpdateContactFlowNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContactFlowName",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}/${params["ContactFlowId"]}/name`,
    });
  }

  async updateInstanceAttribute(
    {abortSignal, ...params}: RequestConfig & UpdateInstanceAttributeRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Value: params["Value"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateInstanceAttribute",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/attribute/${params["AttributeType"]}`,
    });
  }

  async updateInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & UpdateInstanceStorageConfigRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      StorageConfig: fromInstanceStorageConfig(params["StorageConfig"]),
    };
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateInstanceStorageConfig",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config/${params["AssociationId"]}`,
    });
  }

  async updateQueueHoursOfOperation(
    {abortSignal, ...params}: RequestConfig & UpdateQueueHoursOfOperationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      HoursOfOperationId: params["HoursOfOperationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueHoursOfOperation",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/hours-of-operation`,
    });
  }

  async updateQueueMaxContacts(
    {abortSignal, ...params}: RequestConfig & UpdateQueueMaxContactsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      MaxContacts: params["MaxContacts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueMaxContacts",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/max-contacts`,
    });
  }

  async updateQueueName(
    {abortSignal, ...params}: RequestConfig & UpdateQueueNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueName",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/name`,
    });
  }

  async updateQueueOutboundCallerConfig(
    {abortSignal, ...params}: RequestConfig & UpdateQueueOutboundCallerConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      OutboundCallerConfig: fromOutboundCallerConfig(params["OutboundCallerConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueOutboundCallerConfig",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/outbound-caller-config`,
    });
  }

  async updateQueueStatus(
    {abortSignal, ...params}: RequestConfig & UpdateQueueStatusRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Status: params["Status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueStatus",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/status`,
    });
  }

  async updateQuickConnectConfig(
    {abortSignal, ...params}: RequestConfig & UpdateQuickConnectConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QuickConnectConfig: fromQuickConnectConfig(params["QuickConnectConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQuickConnectConfig",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}/config`,
    });
  }

  async updateQuickConnectName(
    {abortSignal, ...params}: RequestConfig & UpdateQuickConnectNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQuickConnectName",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}/name`,
    });
  }

  async updateRoutingProfileConcurrency(
    {abortSignal, ...params}: RequestConfig & UpdateRoutingProfileConcurrencyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      MediaConcurrencies: params["MediaConcurrencies"]?.map(x => fromMediaConcurrency(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileConcurrency",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/concurrency`,
    });
  }

  async updateRoutingProfileDefaultOutboundQueue(
    {abortSignal, ...params}: RequestConfig & UpdateRoutingProfileDefaultOutboundQueueRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      DefaultOutboundQueueId: params["DefaultOutboundQueueId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileDefaultOutboundQueue",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/default-outbound-queue`,
    });
  }

  async updateRoutingProfileName(
    {abortSignal, ...params}: RequestConfig & UpdateRoutingProfileNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileName",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/name`,
    });
  }

  async updateRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & UpdateRoutingProfileQueuesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QueueConfigs: params["QueueConfigs"]?.map(x => fromRoutingProfileQueueConfig(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileQueues",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/queues`,
    });
  }

  async updateUserHierarchy(
    {abortSignal, ...params}: RequestConfig & UpdateUserHierarchyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      HierarchyGroupId: params["HierarchyGroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserHierarchy",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/hierarchy`,
    });
  }

  async updateUserHierarchyGroupName(
    {abortSignal, ...params}: RequestConfig & UpdateUserHierarchyGroupNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserHierarchyGroupName",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}/${params["HierarchyGroupId"]}/name`,
    });
  }

  async updateUserHierarchyStructure(
    {abortSignal, ...params}: RequestConfig & UpdateUserHierarchyStructureRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      HierarchyStructure: fromHierarchyStructureUpdate(params["HierarchyStructure"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserHierarchyStructure",
      requestUri: cmnP.encodePath`/user-hierarchy-structure/${params["InstanceId"]}`,
    });
  }

  async updateUserIdentityInfo(
    {abortSignal, ...params}: RequestConfig & UpdateUserIdentityInfoRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityInfo: fromUserIdentityInfo(params["IdentityInfo"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserIdentityInfo",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/identity-info`,
    });
  }

  async updateUserPhoneConfig(
    {abortSignal, ...params}: RequestConfig & UpdateUserPhoneConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      PhoneConfig: fromUserPhoneConfig(params["PhoneConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserPhoneConfig",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/phone-config`,
    });
  }

  async updateUserRoutingProfile(
    {abortSignal, ...params}: RequestConfig & UpdateUserRoutingProfileRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      RoutingProfileId: params["RoutingProfileId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserRoutingProfile",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/routing-profile`,
    });
  }

  async updateUserSecurityProfiles(
    {abortSignal, ...params}: RequestConfig & UpdateUserSecurityProfilesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      SecurityProfileIds: params["SecurityProfileIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserSecurityProfiles",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/security-profiles`,
    });
  }

}

// refs: 1 - tags: named, input
export interface AssociateApprovedOriginRequest {
  InstanceId: string;
  Origin: string;
}

// refs: 1 - tags: named, input
export interface AssociateInstanceStorageConfigRequest {
  InstanceId: string;
  ResourceType: InstanceStorageResourceType;
  StorageConfig: InstanceStorageConfig;
}

// refs: 1 - tags: named, input
export interface AssociateLambdaFunctionRequest {
  InstanceId: string;
  FunctionArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateLexBotRequest {
  InstanceId: string;
  LexBot: LexBot;
}

// refs: 1 - tags: named, input
export interface AssociateQueueQuickConnectsRequest {
  InstanceId: string;
  QueueId: string;
  QuickConnectIds: string[];
}

// refs: 1 - tags: named, input
export interface AssociateRoutingProfileQueuesRequest {
  InstanceId: string;
  RoutingProfileId: string;
  QueueConfigs: RoutingProfileQueueConfig[];
}

// refs: 1 - tags: named, input
export interface AssociateSecurityKeyRequest {
  InstanceId: string;
  Key: string;
}

// refs: 1 - tags: named, input
export interface CreateContactFlowRequest {
  InstanceId: string;
  Name: string;
  Type: ContactFlowType;
  Description?: string | null;
  Content: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateInstanceRequest {
  ClientToken?: string | null;
  IdentityManagementType: DirectoryType;
  InstanceAlias?: string | null;
  DirectoryId?: string | null;
  InboundCallsEnabled: boolean;
  OutboundCallsEnabled: boolean;
}

// refs: 1 - tags: named, input
export interface CreateIntegrationAssociationRequest {
  InstanceId: string;
  IntegrationType: IntegrationType;
  IntegrationArn: string;
  SourceApplicationUrl: string;
  SourceApplicationName: string;
  SourceType: SourceType;
}

// refs: 1 - tags: named, input
export interface CreateQueueRequest {
  InstanceId: string;
  Name: string;
  Description?: string | null;
  OutboundCallerConfig?: OutboundCallerConfig | null;
  HoursOfOperationId: string;
  MaxContacts?: number | null;
  QuickConnectIds?: string[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateQuickConnectRequest {
  InstanceId: string;
  Name: string;
  Description?: string | null;
  QuickConnectConfig: QuickConnectConfig;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateRoutingProfileRequest {
  InstanceId: string;
  Name: string;
  Description: string;
  DefaultOutboundQueueId: string;
  QueueConfigs?: RoutingProfileQueueConfig[] | null;
  MediaConcurrencies: MediaConcurrency[];
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateUseCaseRequest {
  InstanceId: string;
  IntegrationAssociationId: string;
  UseCaseType: UseCaseType;
}

// refs: 1 - tags: named, input
export interface CreateUserRequest {
  Username: string;
  Password?: string | null;
  IdentityInfo?: UserIdentityInfo | null;
  PhoneConfig: UserPhoneConfig;
  DirectoryUserId?: string | null;
  SecurityProfileIds: string[];
  RoutingProfileId: string;
  HierarchyGroupId?: string | null;
  InstanceId: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateUserHierarchyGroupRequest {
  Name: string;
  ParentGroupId?: string | null;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DeleteInstanceRequest {
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DeleteIntegrationAssociationRequest {
  InstanceId: string;
  IntegrationAssociationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteQuickConnectRequest {
  InstanceId: string;
  QuickConnectId: string;
}

// refs: 1 - tags: named, input
export interface DeleteUseCaseRequest {
  InstanceId: string;
  IntegrationAssociationId: string;
  UseCaseId: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  InstanceId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserHierarchyGroupRequest {
  HierarchyGroupId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeContactFlowRequest {
  InstanceId: string;
  ContactFlowId: string;
}

// refs: 1 - tags: named, input
export interface DescribeHoursOfOperationRequest {
  InstanceId: string;
  HoursOfOperationId: string;
}

// refs: 1 - tags: named, input
export interface DescribeInstanceRequest {
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeInstanceAttributeRequest {
  InstanceId: string;
  AttributeType: InstanceAttributeType;
}

// refs: 1 - tags: named, input
export interface DescribeInstanceStorageConfigRequest {
  InstanceId: string;
  AssociationId: string;
  ResourceType: InstanceStorageResourceType;
}

// refs: 1 - tags: named, input
export interface DescribeQueueRequest {
  InstanceId: string;
  QueueId: string;
}

// refs: 1 - tags: named, input
export interface DescribeQuickConnectRequest {
  InstanceId: string;
  QuickConnectId: string;
}

// refs: 1 - tags: named, input
export interface DescribeRoutingProfileRequest {
  InstanceId: string;
  RoutingProfileId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserRequest {
  UserId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserHierarchyGroupRequest {
  HierarchyGroupId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserHierarchyStructureRequest {
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateApprovedOriginRequest {
  InstanceId: string;
  Origin: string;
}

// refs: 1 - tags: named, input
export interface DisassociateInstanceStorageConfigRequest {
  InstanceId: string;
  AssociationId: string;
  ResourceType: InstanceStorageResourceType;
}

// refs: 1 - tags: named, input
export interface DisassociateLambdaFunctionRequest {
  InstanceId: string;
  FunctionArn: string;
}

// refs: 1 - tags: named, input
export interface DisassociateLexBotRequest {
  InstanceId: string;
  BotName: string;
  LexRegion: string;
}

// refs: 1 - tags: named, input
export interface DisassociateQueueQuickConnectsRequest {
  InstanceId: string;
  QueueId: string;
  QuickConnectIds: string[];
}

// refs: 1 - tags: named, input
export interface DisassociateRoutingProfileQueuesRequest {
  InstanceId: string;
  RoutingProfileId: string;
  QueueReferences: RoutingProfileQueueReference[];
}

// refs: 1 - tags: named, input
export interface DisassociateSecurityKeyRequest {
  InstanceId: string;
  AssociationId: string;
}

// refs: 1 - tags: named, input
export interface GetContactAttributesRequest {
  InstanceId: string;
  InitialContactId: string;
}

// refs: 1 - tags: named, input
export interface GetCurrentMetricDataRequest {
  InstanceId: string;
  Filters: Filters;
  Groupings?: Grouping[] | null;
  CurrentMetrics: CurrentMetric[];
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetFederationTokenRequest {
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface GetMetricDataRequest {
  InstanceId: string;
  StartTime: Date | number;
  EndTime: Date | number;
  Filters: Filters;
  Groupings?: Grouping[] | null;
  HistoricalMetrics: HistoricalMetric[];
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListApprovedOriginsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListContactFlowsRequest {
  InstanceId: string;
  ContactFlowTypes?: ContactFlowType[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListHoursOfOperationsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListInstanceAttributesRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListInstanceStorageConfigsRequest {
  InstanceId: string;
  ResourceType: InstanceStorageResourceType;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListInstancesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIntegrationAssociationsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLambdaFunctionsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLexBotsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPhoneNumbersRequest {
  InstanceId: string;
  PhoneNumberTypes?: PhoneNumberType[] | null;
  PhoneNumberCountryCodes?: PhoneNumberCountryCode[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPromptsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListQueueQuickConnectsRequest {
  InstanceId: string;
  QueueId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListQueuesRequest {
  InstanceId: string;
  QueueTypes?: QueueType[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListQuickConnectsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  QuickConnectTypes?: QuickConnectType[] | null;
}

// refs: 1 - tags: named, input
export interface ListRoutingProfileQueuesRequest {
  InstanceId: string;
  RoutingProfileId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRoutingProfilesRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSecurityKeysRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSecurityProfilesRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListUseCasesRequest {
  InstanceId: string;
  IntegrationAssociationId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListUserHierarchyGroupsRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListUsersRequest {
  InstanceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ResumeContactRecordingRequest {
  InstanceId: string;
  ContactId: string;
  InitialContactId: string;
}

// refs: 1 - tags: named, input
export interface StartChatContactRequest {
  InstanceId: string;
  ContactFlowId: string;
  Attributes?: { [key: string]: string | null | undefined } | null;
  ParticipantDetails: ParticipantDetails;
  InitialMessage?: ChatMessage | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StartContactRecordingRequest {
  InstanceId: string;
  ContactId: string;
  InitialContactId: string;
  VoiceRecordingConfiguration: VoiceRecordingConfiguration;
}

// refs: 1 - tags: named, input
export interface StartOutboundVoiceContactRequest {
  DestinationPhoneNumber: string;
  ContactFlowId: string;
  InstanceId: string;
  ClientToken?: string | null;
  SourcePhoneNumber?: string | null;
  QueueId?: string | null;
  Attributes?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface StartTaskContactRequest {
  InstanceId: string;
  PreviousContactId?: string | null;
  ContactFlowId: string;
  Attributes?: { [key: string]: string | null | undefined } | null;
  Name: string;
  References?: { [key: string]: Reference | null | undefined } | null;
  Description?: string | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StopContactRequest {
  ContactId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface StopContactRecordingRequest {
  InstanceId: string;
  ContactId: string;
  InitialContactId: string;
}

// refs: 1 - tags: named, input
export interface SuspendContactRecordingRequest {
  InstanceId: string;
  ContactId: string;
  InitialContactId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateContactAttributesRequest {
  InitialContactId: string;
  InstanceId: string;
  Attributes: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UpdateContactFlowContentRequest {
  InstanceId: string;
  ContactFlowId: string;
  Content: string;
}

// refs: 1 - tags: named, input
export interface UpdateContactFlowNameRequest {
  InstanceId: string;
  ContactFlowId: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateInstanceAttributeRequest {
  InstanceId: string;
  AttributeType: InstanceAttributeType;
  Value: string;
}

// refs: 1 - tags: named, input
export interface UpdateInstanceStorageConfigRequest {
  InstanceId: string;
  AssociationId: string;
  ResourceType: InstanceStorageResourceType;
  StorageConfig: InstanceStorageConfig;
}

// refs: 1 - tags: named, input
export interface UpdateQueueHoursOfOperationRequest {
  InstanceId: string;
  QueueId: string;
  HoursOfOperationId: string;
}

// refs: 1 - tags: named, input
export interface UpdateQueueMaxContactsRequest {
  InstanceId: string;
  QueueId: string;
  MaxContacts: number;
}

// refs: 1 - tags: named, input
export interface UpdateQueueNameRequest {
  InstanceId: string;
  QueueId: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateQueueOutboundCallerConfigRequest {
  InstanceId: string;
  QueueId: string;
  OutboundCallerConfig: OutboundCallerConfig;
}

// refs: 1 - tags: named, input
export interface UpdateQueueStatusRequest {
  InstanceId: string;
  QueueId: string;
  Status: QueueStatus;
}

// refs: 1 - tags: named, input
export interface UpdateQuickConnectConfigRequest {
  InstanceId: string;
  QuickConnectId: string;
  QuickConnectConfig: QuickConnectConfig;
}

// refs: 1 - tags: named, input
export interface UpdateQuickConnectNameRequest {
  InstanceId: string;
  QuickConnectId: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRoutingProfileConcurrencyRequest {
  InstanceId: string;
  RoutingProfileId: string;
  MediaConcurrencies: MediaConcurrency[];
}

// refs: 1 - tags: named, input
export interface UpdateRoutingProfileDefaultOutboundQueueRequest {
  InstanceId: string;
  RoutingProfileId: string;
  DefaultOutboundQueueId: string;
}

// refs: 1 - tags: named, input
export interface UpdateRoutingProfileNameRequest {
  InstanceId: string;
  RoutingProfileId: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRoutingProfileQueuesRequest {
  InstanceId: string;
  RoutingProfileId: string;
  QueueConfigs: RoutingProfileQueueConfig[];
}

// refs: 1 - tags: named, input
export interface UpdateUserHierarchyRequest {
  HierarchyGroupId?: string | null;
  UserId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface UpdateUserHierarchyGroupNameRequest {
  Name: string;
  HierarchyGroupId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface UpdateUserHierarchyStructureRequest {
  HierarchyStructure: HierarchyStructureUpdate;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface UpdateUserIdentityInfoRequest {
  IdentityInfo: UserIdentityInfo;
  UserId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface UpdateUserPhoneConfigRequest {
  PhoneConfig: UserPhoneConfig;
  UserId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface UpdateUserRoutingProfileRequest {
  RoutingProfileId: string;
  UserId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface UpdateUserSecurityProfilesRequest {
  SecurityProfileIds: string[];
  UserId: string;
  InstanceId: string;
}

// refs: 1 - tags: named, output
export interface AssociateInstanceStorageConfigResponse {
  AssociationId?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateSecurityKeyResponse {
  AssociationId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateContactFlowResponse {
  ContactFlowId?: string | null;
  ContactFlowArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateInstanceResponse {
  Id?: string | null;
  Arn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateIntegrationAssociationResponse {
  IntegrationAssociationId?: string | null;
  IntegrationAssociationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateQueueResponse {
  QueueArn?: string | null;
  QueueId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateQuickConnectResponse {
  QuickConnectARN?: string | null;
  QuickConnectId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRoutingProfileResponse {
  RoutingProfileArn?: string | null;
  RoutingProfileId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateUseCaseResponse {
  UseCaseId?: string | null;
  UseCaseArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateUserResponse {
  UserId?: string | null;
  UserArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateUserHierarchyGroupResponse {
  HierarchyGroupId?: string | null;
  HierarchyGroupArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeContactFlowResponse {
  ContactFlow?: ContactFlow | null;
}

// refs: 1 - tags: named, output
export interface DescribeHoursOfOperationResponse {
  HoursOfOperation?: HoursOfOperation | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstanceResponse {
  Instance?: Instance | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstanceAttributeResponse {
  Attribute?: Attribute | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstanceStorageConfigResponse {
  StorageConfig?: InstanceStorageConfig | null;
}

// refs: 1 - tags: named, output
export interface DescribeQueueResponse {
  Queue?: Queue | null;
}

// refs: 1 - tags: named, output
export interface DescribeQuickConnectResponse {
  QuickConnect?: QuickConnect | null;
}

// refs: 1 - tags: named, output
export interface DescribeRoutingProfileResponse {
  RoutingProfile?: RoutingProfile | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserHierarchyGroupResponse {
  HierarchyGroup?: HierarchyGroup | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserHierarchyStructureResponse {
  HierarchyStructure?: HierarchyStructure | null;
}

// refs: 1 - tags: named, output
export interface GetContactAttributesResponse {
  Attributes?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetCurrentMetricDataResponse {
  NextToken?: string | null;
  MetricResults?: CurrentMetricResult[] | null;
  DataSnapshotTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetFederationTokenResponse {
  Credentials?: Credentials | null;
}

// refs: 1 - tags: named, output
export interface GetMetricDataResponse {
  NextToken?: string | null;
  MetricResults?: HistoricalMetricResult[] | null;
}

// refs: 1 - tags: named, output
export interface ListApprovedOriginsResponse {
  Origins?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListContactFlowsResponse {
  ContactFlowSummaryList?: ContactFlowSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListHoursOfOperationsResponse {
  HoursOfOperationSummaryList?: HoursOfOperationSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInstanceAttributesResponse {
  Attributes?: Attribute[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInstanceStorageConfigsResponse {
  StorageConfigs?: InstanceStorageConfig[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInstancesResponse {
  InstanceSummaryList?: InstanceSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIntegrationAssociationsResponse {
  IntegrationAssociationSummaryList?: IntegrationAssociationSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLambdaFunctionsResponse {
  LambdaFunctions?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLexBotsResponse {
  LexBots?: LexBot[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPhoneNumbersResponse {
  PhoneNumberSummaryList?: PhoneNumberSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPromptsResponse {
  PromptSummaryList?: PromptSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListQueueQuickConnectsResponse {
  NextToken?: string | null;
  QuickConnectSummaryList?: QuickConnectSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListQueuesResponse {
  QueueSummaryList?: QueueSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListQuickConnectsResponse {
  QuickConnectSummaryList?: QuickConnectSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRoutingProfileQueuesResponse {
  NextToken?: string | null;
  RoutingProfileQueueConfigSummaryList?: RoutingProfileQueueConfigSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListRoutingProfilesResponse {
  RoutingProfileSummaryList?: RoutingProfileSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSecurityKeysResponse {
  SecurityKeys?: SecurityKey[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSecurityProfilesResponse {
  SecurityProfileSummaryList?: SecurityProfileSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListUseCasesResponse {
  UseCaseSummaryList?: UseCase[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUserHierarchyGroupsResponse {
  UserHierarchyGroupSummaryList?: HierarchyGroupSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUsersResponse {
  UserSummaryList?: UserSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ResumeContactRecordingResponse {
}

// refs: 1 - tags: named, output
export interface StartChatContactResponse {
  ContactId?: string | null;
  ParticipantId?: string | null;
  ParticipantToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartContactRecordingResponse {
}

// refs: 1 - tags: named, output
export interface StartOutboundVoiceContactResponse {
  ContactId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartTaskContactResponse {
  ContactId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopContactResponse {
}

// refs: 1 - tags: named, output
export interface StopContactRecordingResponse {
}

// refs: 1 - tags: named, output
export interface SuspendContactRecordingResponse {
}

// refs: 1 - tags: named, output
export interface UpdateContactAttributesResponse {
}

// refs: 5 - tags: input, named, enum
export type InstanceStorageResourceType =
| "CHAT_TRANSCRIPTS"
| "CALL_RECORDINGS"
| "SCHEDULED_REPORTS"
| "MEDIA_STREAMS"
| "CONTACT_TRACE_RECORDS"
| "AGENT_EVENTS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface InstanceStorageConfig {
  AssociationId?: string | null;
  StorageType: StorageType;
  S3Config?: S3Config | null;
  KinesisVideoStreamConfig?: KinesisVideoStreamConfig | null;
  KinesisStreamConfig?: KinesisStreamConfig | null;
  KinesisFirehoseConfig?: KinesisFirehoseConfig | null;
}
function fromInstanceStorageConfig(input?: InstanceStorageConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssociationId: input["AssociationId"],
    StorageType: input["StorageType"],
    S3Config: fromS3Config(input["S3Config"]),
    KinesisVideoStreamConfig: fromKinesisVideoStreamConfig(input["KinesisVideoStreamConfig"]),
    KinesisStreamConfig: fromKinesisStreamConfig(input["KinesisStreamConfig"]),
    KinesisFirehoseConfig: fromKinesisFirehoseConfig(input["KinesisFirehoseConfig"]),
  }
}
function toInstanceStorageConfig(root: jsonP.JSONValue): InstanceStorageConfig {
  return jsonP.readObj({
    required: {
      "StorageType": (x: jsonP.JSONValue) => cmnP.readEnum<StorageType>(x),
    },
    optional: {
      "AssociationId": "s",
      "S3Config": toS3Config,
      "KinesisVideoStreamConfig": toKinesisVideoStreamConfig,
      "KinesisStreamConfig": toKinesisStreamConfig,
      "KinesisFirehoseConfig": toKinesisFirehoseConfig,
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type StorageType =
| "S3"
| "KINESIS_VIDEO_STREAM"
| "KINESIS_STREAM"
| "KINESIS_FIREHOSE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface S3Config {
  BucketName: string;
  BucketPrefix: string;
  EncryptionConfig?: EncryptionConfig | null;
}
function fromS3Config(input?: S3Config | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketName: input["BucketName"],
    BucketPrefix: input["BucketPrefix"],
    EncryptionConfig: fromEncryptionConfig(input["EncryptionConfig"]),
  }
}
function toS3Config(root: jsonP.JSONValue): S3Config {
  return jsonP.readObj({
    required: {
      "BucketName": "s",
      "BucketPrefix": "s",
    },
    optional: {
      "EncryptionConfig": toEncryptionConfig,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface EncryptionConfig {
  EncryptionType: EncryptionType;
  KeyId: string;
}
function fromEncryptionConfig(input?: EncryptionConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EncryptionType: input["EncryptionType"],
    KeyId: input["KeyId"],
  }
}
function toEncryptionConfig(root: jsonP.JSONValue): EncryptionConfig {
  return jsonP.readObj({
    required: {
      "EncryptionType": (x: jsonP.JSONValue) => cmnP.readEnum<EncryptionType>(x),
      "KeyId": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type EncryptionType =
| "KMS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface KinesisVideoStreamConfig {
  Prefix: string;
  RetentionPeriodHours: number;
  EncryptionConfig: EncryptionConfig;
}
function fromKinesisVideoStreamConfig(input?: KinesisVideoStreamConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Prefix: input["Prefix"],
    RetentionPeriodHours: input["RetentionPeriodHours"],
    EncryptionConfig: fromEncryptionConfig(input["EncryptionConfig"]),
  }
}
function toKinesisVideoStreamConfig(root: jsonP.JSONValue): KinesisVideoStreamConfig {
  return jsonP.readObj({
    required: {
      "Prefix": "s",
      "RetentionPeriodHours": "n",
      "EncryptionConfig": toEncryptionConfig,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface KinesisStreamConfig {
  StreamArn: string;
}
function fromKinesisStreamConfig(input?: KinesisStreamConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StreamArn: input["StreamArn"],
  }
}
function toKinesisStreamConfig(root: jsonP.JSONValue): KinesisStreamConfig {
  return jsonP.readObj({
    required: {
      "StreamArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface KinesisFirehoseConfig {
  FirehoseArn: string;
}
function fromKinesisFirehoseConfig(input?: KinesisFirehoseConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FirehoseArn: input["FirehoseArn"],
  }
}
function toKinesisFirehoseConfig(root: jsonP.JSONValue): KinesisFirehoseConfig {
  return jsonP.readObj({
    required: {
      "FirehoseArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface LexBot {
  Name?: string | null;
  LexRegion?: string | null;
}
function fromLexBot(input?: LexBot | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    LexRegion: input["LexRegion"],
  }
}
function toLexBot(root: jsonP.JSONValue): LexBot {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "LexRegion": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface
export interface RoutingProfileQueueConfig {
  QueueReference: RoutingProfileQueueReference;
  Priority: number;
  Delay: number;
}
function fromRoutingProfileQueueConfig(input?: RoutingProfileQueueConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueueReference: fromRoutingProfileQueueReference(input["QueueReference"]),
    Priority: input["Priority"],
    Delay: input["Delay"],
  }
}

// refs: 4 - tags: input, named, interface
export interface RoutingProfileQueueReference {
  QueueId: string;
  Channel: Channel;
}
function fromRoutingProfileQueueReference(input?: RoutingProfileQueueReference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueueId: input["QueueId"],
    Channel: input["Channel"],
  }
}

// refs: 12 - tags: input, named, enum, output
export type Channel =
| "VOICE"
| "CHAT"
| "TASK"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type ContactFlowType =
| "CONTACT_FLOW"
| "CUSTOMER_QUEUE"
| "CUSTOMER_HOLD"
| "CUSTOMER_WHISPER"
| "AGENT_HOLD"
| "AGENT_WHISPER"
| "OUTBOUND_WHISPER"
| "AGENT_TRANSFER"
| "QUEUE_TRANSFER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type DirectoryType =
| "SAML"
| "CONNECT_MANAGED"
| "EXISTING_DIRECTORY"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type IntegrationType =
| "EVENT"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type SourceType =
| "SALESFORCE"
| "ZENDESK"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface OutboundCallerConfig {
  OutboundCallerIdName?: string | null;
  OutboundCallerIdNumberId?: string | null;
  OutboundFlowId?: string | null;
}
function fromOutboundCallerConfig(input?: OutboundCallerConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OutboundCallerIdName: input["OutboundCallerIdName"],
    OutboundCallerIdNumberId: input["OutboundCallerIdNumberId"],
    OutboundFlowId: input["OutboundFlowId"],
  }
}
function toOutboundCallerConfig(root: jsonP.JSONValue): OutboundCallerConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutboundCallerIdName": "s",
      "OutboundCallerIdNumberId": "s",
      "OutboundFlowId": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface QuickConnectConfig {
  QuickConnectType: QuickConnectType;
  UserConfig?: UserQuickConnectConfig | null;
  QueueConfig?: QueueQuickConnectConfig | null;
  PhoneConfig?: PhoneNumberQuickConnectConfig | null;
}
function fromQuickConnectConfig(input?: QuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QuickConnectType: input["QuickConnectType"],
    UserConfig: fromUserQuickConnectConfig(input["UserConfig"]),
    QueueConfig: fromQueueQuickConnectConfig(input["QueueConfig"]),
    PhoneConfig: fromPhoneNumberQuickConnectConfig(input["PhoneConfig"]),
  }
}
function toQuickConnectConfig(root: jsonP.JSONValue): QuickConnectConfig {
  return jsonP.readObj({
    required: {
      "QuickConnectType": (x: jsonP.JSONValue) => cmnP.readEnum<QuickConnectType>(x),
    },
    optional: {
      "UserConfig": toUserQuickConnectConfig,
      "QueueConfig": toQueueQuickConnectConfig,
      "PhoneConfig": toPhoneNumberQuickConnectConfig,
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type QuickConnectType =
| "USER"
| "QUEUE"
| "PHONE_NUMBER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface UserQuickConnectConfig {
  UserId: string;
  ContactFlowId: string;
}
function fromUserQuickConnectConfig(input?: UserQuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserId: input["UserId"],
    ContactFlowId: input["ContactFlowId"],
  }
}
function toUserQuickConnectConfig(root: jsonP.JSONValue): UserQuickConnectConfig {
  return jsonP.readObj({
    required: {
      "UserId": "s",
      "ContactFlowId": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface QueueQuickConnectConfig {
  QueueId: string;
  ContactFlowId: string;
}
function fromQueueQuickConnectConfig(input?: QueueQuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueueId: input["QueueId"],
    ContactFlowId: input["ContactFlowId"],
  }
}
function toQueueQuickConnectConfig(root: jsonP.JSONValue): QueueQuickConnectConfig {
  return jsonP.readObj({
    required: {
      "QueueId": "s",
      "ContactFlowId": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface PhoneNumberQuickConnectConfig {
  PhoneNumber: string;
}
function fromPhoneNumberQuickConnectConfig(input?: PhoneNumberQuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PhoneNumber: input["PhoneNumber"],
  }
}
function toPhoneNumberQuickConnectConfig(root: jsonP.JSONValue): PhoneNumberQuickConnectConfig {
  return jsonP.readObj({
    required: {
      "PhoneNumber": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface MediaConcurrency {
  Channel: Channel;
  Concurrency: number;
}
function fromMediaConcurrency(input?: MediaConcurrency | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Channel: input["Channel"],
    Concurrency: input["Concurrency"],
  }
}
function toMediaConcurrency(root: jsonP.JSONValue): MediaConcurrency {
  return jsonP.readObj({
    required: {
      "Channel": (x: jsonP.JSONValue) => cmnP.readEnum<Channel>(x),
      "Concurrency": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type UseCaseType =
| "RULES_EVALUATION"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface UserIdentityInfo {
  FirstName?: string | null;
  LastName?: string | null;
  Email?: string | null;
}
function fromUserIdentityInfo(input?: UserIdentityInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FirstName: input["FirstName"],
    LastName: input["LastName"],
    Email: input["Email"],
  }
}
function toUserIdentityInfo(root: jsonP.JSONValue): UserIdentityInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "FirstName": "s",
      "LastName": "s",
      "Email": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface UserPhoneConfig {
  PhoneType: PhoneType;
  AutoAccept?: boolean | null;
  AfterContactWorkTimeLimit?: number | null;
  DeskPhoneNumber?: string | null;
}
function fromUserPhoneConfig(input?: UserPhoneConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PhoneType: input["PhoneType"],
    AutoAccept: input["AutoAccept"],
    AfterContactWorkTimeLimit: input["AfterContactWorkTimeLimit"],
    DeskPhoneNumber: input["DeskPhoneNumber"],
  }
}
function toUserPhoneConfig(root: jsonP.JSONValue): UserPhoneConfig {
  return jsonP.readObj({
    required: {
      "PhoneType": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneType>(x),
    },
    optional: {
      "AutoAccept": "b",
      "AfterContactWorkTimeLimit": "n",
      "DeskPhoneNumber": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type PhoneType =
| "SOFT_PHONE"
| "DESK_PHONE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type InstanceAttributeType =
| "INBOUND_CALLS"
| "OUTBOUND_CALLS"
| "CONTACTFLOW_LOGS"
| "CONTACT_LENS"
| "AUTO_RESOLVE_BEST_VOICES"
| "USE_CUSTOM_TTS_VOICES"
| "EARLY_MEDIA"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface Filters {
  Queues?: string[] | null;
  Channels?: Channel[] | null;
}
function fromFilters(input?: Filters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Queues: input["Queues"],
    Channels: input["Channels"],
  }
}

// refs: 2 - tags: input, named, enum
export type Grouping =
| "QUEUE"
| "CHANNEL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface CurrentMetric {
  Name?: CurrentMetricName | null;
  Unit?: Unit | null;
}
function fromCurrentMetric(input?: CurrentMetric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Unit: input["Unit"],
  }
}
function toCurrentMetric(root: jsonP.JSONValue): CurrentMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<CurrentMetricName>(x),
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<Unit>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type CurrentMetricName =
| "AGENTS_ONLINE"
| "AGENTS_AVAILABLE"
| "AGENTS_ON_CALL"
| "AGENTS_NON_PRODUCTIVE"
| "AGENTS_AFTER_CONTACT_WORK"
| "AGENTS_ERROR"
| "AGENTS_STAFFED"
| "CONTACTS_IN_QUEUE"
| "OLDEST_CONTACT_AGE"
| "CONTACTS_SCHEDULED"
| "AGENTS_ON_CONTACT"
| "SLOTS_ACTIVE"
| "SLOTS_AVAILABLE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type Unit =
| "SECONDS"
| "COUNT"
| "PERCENT"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface HistoricalMetric {
  Name?: HistoricalMetricName | null;
  Threshold?: Threshold | null;
  Statistic?: Statistic | null;
  Unit?: Unit | null;
}
function fromHistoricalMetric(input?: HistoricalMetric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Threshold: fromThreshold(input["Threshold"]),
    Statistic: input["Statistic"],
    Unit: input["Unit"],
  }
}
function toHistoricalMetric(root: jsonP.JSONValue): HistoricalMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<HistoricalMetricName>(x),
      "Threshold": toThreshold,
      "Statistic": (x: jsonP.JSONValue) => cmnP.readEnum<Statistic>(x),
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<Unit>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type HistoricalMetricName =
| "CONTACTS_QUEUED"
| "CONTACTS_HANDLED"
| "CONTACTS_ABANDONED"
| "CONTACTS_CONSULTED"
| "CONTACTS_AGENT_HUNG_UP_FIRST"
| "CONTACTS_HANDLED_INCOMING"
| "CONTACTS_HANDLED_OUTBOUND"
| "CONTACTS_HOLD_ABANDONS"
| "CONTACTS_TRANSFERRED_IN"
| "CONTACTS_TRANSFERRED_OUT"
| "CONTACTS_TRANSFERRED_IN_FROM_QUEUE"
| "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE"
| "CONTACTS_MISSED"
| "CALLBACK_CONTACTS_HANDLED"
| "API_CONTACTS_HANDLED"
| "OCCUPANCY"
| "HANDLE_TIME"
| "AFTER_CONTACT_WORK_TIME"
| "QUEUED_TIME"
| "ABANDON_TIME"
| "QUEUE_ANSWER_TIME"
| "HOLD_TIME"
| "INTERACTION_TIME"
| "INTERACTION_AND_HOLD_TIME"
| "SERVICE_LEVEL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface Threshold {
  Comparison?: Comparison | null;
  ThresholdValue?: number | null;
}
function fromThreshold(input?: Threshold | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Comparison: input["Comparison"],
    ThresholdValue: input["ThresholdValue"],
  }
}
function toThreshold(root: jsonP.JSONValue): Threshold {
  return jsonP.readObj({
    required: {},
    optional: {
      "Comparison": (x: jsonP.JSONValue) => cmnP.readEnum<Comparison>(x),
      "ThresholdValue": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type Comparison =
| "LT"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type Statistic =
| "SUM"
| "MAX"
| "AVG"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type PhoneNumberType =
| "TOLL_FREE"
| "DID"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type PhoneNumberCountryCode =
| "AF"
| "AL"
| "DZ"
| "AS"
| "AD"
| "AO"
| "AI"
| "AQ"
| "AG"
| "AR"
| "AM"
| "AW"
| "AU"
| "AT"
| "AZ"
| "BS"
| "BH"
| "BD"
| "BB"
| "BY"
| "BE"
| "BZ"
| "BJ"
| "BM"
| "BT"
| "BO"
| "BA"
| "BW"
| "BR"
| "IO"
| "VG"
| "BN"
| "BG"
| "BF"
| "BI"
| "KH"
| "CM"
| "CA"
| "CV"
| "KY"
| "CF"
| "TD"
| "CL"
| "CN"
| "CX"
| "CC"
| "CO"
| "KM"
| "CK"
| "CR"
| "HR"
| "CU"
| "CW"
| "CY"
| "CZ"
| "CD"
| "DK"
| "DJ"
| "DM"
| "DO"
| "TL"
| "EC"
| "EG"
| "SV"
| "GQ"
| "ER"
| "EE"
| "ET"
| "FK"
| "FO"
| "FJ"
| "FI"
| "FR"
| "PF"
| "GA"
| "GM"
| "GE"
| "DE"
| "GH"
| "GI"
| "GR"
| "GL"
| "GD"
| "GU"
| "GT"
| "GG"
| "GN"
| "GW"
| "GY"
| "HT"
| "HN"
| "HK"
| "HU"
| "IS"
| "IN"
| "ID"
| "IR"
| "IQ"
| "IE"
| "IM"
| "IL"
| "IT"
| "CI"
| "JM"
| "JP"
| "JE"
| "JO"
| "KZ"
| "KE"
| "KI"
| "KW"
| "KG"
| "LA"
| "LV"
| "LB"
| "LS"
| "LR"
| "LY"
| "LI"
| "LT"
| "LU"
| "MO"
| "MK"
| "MG"
| "MW"
| "MY"
| "MV"
| "ML"
| "MT"
| "MH"
| "MR"
| "MU"
| "YT"
| "MX"
| "FM"
| "MD"
| "MC"
| "MN"
| "ME"
| "MS"
| "MA"
| "MZ"
| "MM"
| "NA"
| "NR"
| "NP"
| "NL"
| "AN"
| "NC"
| "NZ"
| "NI"
| "NE"
| "NG"
| "NU"
| "KP"
| "MP"
| "NO"
| "OM"
| "PK"
| "PW"
| "PA"
| "PG"
| "PY"
| "PE"
| "PH"
| "PN"
| "PL"
| "PT"
| "PR"
| "QA"
| "CG"
| "RE"
| "RO"
| "RU"
| "RW"
| "BL"
| "SH"
| "KN"
| "LC"
| "MF"
| "PM"
| "VC"
| "WS"
| "SM"
| "ST"
| "SA"
| "SN"
| "RS"
| "SC"
| "SL"
| "SG"
| "SX"
| "SK"
| "SI"
| "SB"
| "SO"
| "ZA"
| "KR"
| "ES"
| "LK"
| "SD"
| "SR"
| "SJ"
| "SZ"
| "SE"
| "CH"
| "SY"
| "TW"
| "TJ"
| "TZ"
| "TH"
| "TG"
| "TK"
| "TO"
| "TT"
| "TN"
| "TR"
| "TM"
| "TC"
| "TV"
| "VI"
| "UG"
| "UA"
| "AE"
| "GB"
| "US"
| "UY"
| "UZ"
| "VU"
| "VA"
| "VE"
| "VN"
| "WF"
| "EH"
| "YE"
| "ZM"
| "ZW"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type QueueType =
| "STANDARD"
| "AGENT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ParticipantDetails {
  DisplayName: string;
}
function fromParticipantDetails(input?: ParticipantDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DisplayName: input["DisplayName"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ChatMessage {
  ContentType: string;
  Content: string;
}
function fromChatMessage(input?: ChatMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ContentType: input["ContentType"],
    Content: input["Content"],
  }
}

// refs: 1 - tags: input, named, interface
export interface VoiceRecordingConfiguration {
  VoiceRecordingTrack?: VoiceRecordingTrack | null;
}
function fromVoiceRecordingConfiguration(input?: VoiceRecordingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VoiceRecordingTrack: input["VoiceRecordingTrack"],
  }
}

// refs: 1 - tags: input, named, enum
export type VoiceRecordingTrack =
| "FROM_AGENT"
| "TO_AGENT"
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface Reference {
  Value: string;
  Type: ReferenceType;
}
function fromReference(input?: Reference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Value: input["Value"],
    Type: input["Type"],
  }
}

// refs: 1 - tags: input, named, enum
export type ReferenceType =
| "URL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type QueueStatus =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface HierarchyStructureUpdate {
  LevelOne?: HierarchyLevelUpdate | null;
  LevelTwo?: HierarchyLevelUpdate | null;
  LevelThree?: HierarchyLevelUpdate | null;
  LevelFour?: HierarchyLevelUpdate | null;
  LevelFive?: HierarchyLevelUpdate | null;
}
function fromHierarchyStructureUpdate(input?: HierarchyStructureUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LevelOne: fromHierarchyLevelUpdate(input["LevelOne"]),
    LevelTwo: fromHierarchyLevelUpdate(input["LevelTwo"]),
    LevelThree: fromHierarchyLevelUpdate(input["LevelThree"]),
    LevelFour: fromHierarchyLevelUpdate(input["LevelFour"]),
    LevelFive: fromHierarchyLevelUpdate(input["LevelFive"]),
  }
}

// refs: 5 - tags: input, named, interface
export interface HierarchyLevelUpdate {
  Name: string;
}
function fromHierarchyLevelUpdate(input?: HierarchyLevelUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
  }
}

// refs: 1 - tags: output, named, interface
export interface ContactFlow {
  Arn?: string | null;
  Id?: string | null;
  Name?: string | null;
  Type?: ContactFlowType | null;
  Description?: string | null;
  Content?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toContactFlow(root: jsonP.JSONValue): ContactFlow {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ContactFlowType>(x),
      "Description": "s",
      "Content": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HoursOfOperation {
  HoursOfOperationId?: string | null;
  HoursOfOperationArn?: string | null;
  Name?: string | null;
  Description?: string | null;
  TimeZone?: string | null;
  Config?: HoursOfOperationConfig[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toHoursOfOperation(root: jsonP.JSONValue): HoursOfOperation {
  return jsonP.readObj({
    required: {},
    optional: {
      "HoursOfOperationId": "s",
      "HoursOfOperationArn": "s",
      "Name": "s",
      "Description": "s",
      "TimeZone": "s",
      "Config": [toHoursOfOperationConfig],
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HoursOfOperationConfig {
  Day?: HoursOfOperationDays | null;
  StartTime?: HoursOfOperationTimeSlice | null;
  EndTime?: HoursOfOperationTimeSlice | null;
}
function toHoursOfOperationConfig(root: jsonP.JSONValue): HoursOfOperationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Day": (x: jsonP.JSONValue) => cmnP.readEnum<HoursOfOperationDays>(x),
      "StartTime": toHoursOfOperationTimeSlice,
      "EndTime": toHoursOfOperationTimeSlice,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type HoursOfOperationDays =
| "SUNDAY"
| "MONDAY"
| "TUESDAY"
| "WEDNESDAY"
| "THURSDAY"
| "FRIDAY"
| "SATURDAY"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface HoursOfOperationTimeSlice {
  Hours?: number | null;
  Minutes?: number | null;
}
function toHoursOfOperationTimeSlice(root: jsonP.JSONValue): HoursOfOperationTimeSlice {
  return jsonP.readObj({
    required: {},
    optional: {
      "Hours": "n",
      "Minutes": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Instance {
  Id?: string | null;
  Arn?: string | null;
  IdentityManagementType?: DirectoryType | null;
  InstanceAlias?: string | null;
  CreatedTime?: Date | number | null;
  ServiceRole?: string | null;
  InstanceStatus?: InstanceStatus | null;
  StatusReason?: InstanceStatusReason | null;
  InboundCallsEnabled?: boolean | null;
  OutboundCallsEnabled?: boolean | null;
}
function toInstance(root: jsonP.JSONValue): Instance {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "IdentityManagementType": (x: jsonP.JSONValue) => cmnP.readEnum<DirectoryType>(x),
      "InstanceAlias": "s",
      "CreatedTime": "d",
      "ServiceRole": "s",
      "InstanceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceStatus>(x),
      "StatusReason": toInstanceStatusReason,
      "InboundCallsEnabled": "b",
      "OutboundCallsEnabled": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type InstanceStatus =
| "CREATION_IN_PROGRESS"
| "ACTIVE"
| "CREATION_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface InstanceStatusReason {
  Message?: string | null;
}
function toInstanceStatusReason(root: jsonP.JSONValue): InstanceStatusReason {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Attribute {
  AttributeType?: InstanceAttributeType | null;
  Value?: string | null;
}
function toAttribute(root: jsonP.JSONValue): Attribute {
  return jsonP.readObj({
    required: {},
    optional: {
      "AttributeType": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceAttributeType>(x),
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Queue {
  Name?: string | null;
  QueueArn?: string | null;
  QueueId?: string | null;
  Description?: string | null;
  OutboundCallerConfig?: OutboundCallerConfig | null;
  HoursOfOperationId?: string | null;
  MaxContacts?: number | null;
  Status?: QueueStatus | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toQueue(root: jsonP.JSONValue): Queue {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "QueueArn": "s",
      "QueueId": "s",
      "Description": "s",
      "OutboundCallerConfig": toOutboundCallerConfig,
      "HoursOfOperationId": "s",
      "MaxContacts": "n",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<QueueStatus>(x),
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface QuickConnect {
  QuickConnectARN?: string | null;
  QuickConnectId?: string | null;
  Name?: string | null;
  Description?: string | null;
  QuickConnectConfig?: QuickConnectConfig | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toQuickConnect(root: jsonP.JSONValue): QuickConnect {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuickConnectARN": "s",
      "QuickConnectId": "s",
      "Name": "s",
      "Description": "s",
      "QuickConnectConfig": toQuickConnectConfig,
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RoutingProfile {
  InstanceId?: string | null;
  Name?: string | null;
  RoutingProfileArn?: string | null;
  RoutingProfileId?: string | null;
  Description?: string | null;
  MediaConcurrencies?: MediaConcurrency[] | null;
  DefaultOutboundQueueId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toRoutingProfile(root: jsonP.JSONValue): RoutingProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "InstanceId": "s",
      "Name": "s",
      "RoutingProfileArn": "s",
      "RoutingProfileId": "s",
      "Description": "s",
      "MediaConcurrencies": [toMediaConcurrency],
      "DefaultOutboundQueueId": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface User {
  Id?: string | null;
  Arn?: string | null;
  Username?: string | null;
  IdentityInfo?: UserIdentityInfo | null;
  PhoneConfig?: UserPhoneConfig | null;
  DirectoryUserId?: string | null;
  SecurityProfileIds?: string[] | null;
  RoutingProfileId?: string | null;
  HierarchyGroupId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toUser(root: jsonP.JSONValue): User {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Username": "s",
      "IdentityInfo": toUserIdentityInfo,
      "PhoneConfig": toUserPhoneConfig,
      "DirectoryUserId": "s",
      "SecurityProfileIds": ["s"],
      "RoutingProfileId": "s",
      "HierarchyGroupId": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HierarchyGroup {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
  LevelId?: string | null;
  HierarchyPath?: HierarchyPath | null;
}
function toHierarchyGroup(root: jsonP.JSONValue): HierarchyGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "LevelId": "s",
      "HierarchyPath": toHierarchyPath,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HierarchyPath {
  LevelOne?: HierarchyGroupSummary | null;
  LevelTwo?: HierarchyGroupSummary | null;
  LevelThree?: HierarchyGroupSummary | null;
  LevelFour?: HierarchyGroupSummary | null;
  LevelFive?: HierarchyGroupSummary | null;
}
function toHierarchyPath(root: jsonP.JSONValue): HierarchyPath {
  return jsonP.readObj({
    required: {},
    optional: {
      "LevelOne": toHierarchyGroupSummary,
      "LevelTwo": toHierarchyGroupSummary,
      "LevelThree": toHierarchyGroupSummary,
      "LevelFour": toHierarchyGroupSummary,
      "LevelFive": toHierarchyGroupSummary,
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface HierarchyGroupSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
}
function toHierarchyGroupSummary(root: jsonP.JSONValue): HierarchyGroupSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HierarchyStructure {
  LevelOne?: HierarchyLevel | null;
  LevelTwo?: HierarchyLevel | null;
  LevelThree?: HierarchyLevel | null;
  LevelFour?: HierarchyLevel | null;
  LevelFive?: HierarchyLevel | null;
}
function toHierarchyStructure(root: jsonP.JSONValue): HierarchyStructure {
  return jsonP.readObj({
    required: {},
    optional: {
      "LevelOne": toHierarchyLevel,
      "LevelTwo": toHierarchyLevel,
      "LevelThree": toHierarchyLevel,
      "LevelFour": toHierarchyLevel,
      "LevelFive": toHierarchyLevel,
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface HierarchyLevel {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
}
function toHierarchyLevel(root: jsonP.JSONValue): HierarchyLevel {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CurrentMetricResult {
  Dimensions?: Dimensions | null;
  Collections?: CurrentMetricData[] | null;
}
function toCurrentMetricResult(root: jsonP.JSONValue): CurrentMetricResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Dimensions": toDimensions,
      "Collections": [toCurrentMetricData],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Dimensions {
  Queue?: QueueReference | null;
  Channel?: Channel | null;
}
function toDimensions(root: jsonP.JSONValue): Dimensions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Queue": toQueueReference,
      "Channel": (x: jsonP.JSONValue) => cmnP.readEnum<Channel>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface QueueReference {
  Id?: string | null;
  Arn?: string | null;
}
function toQueueReference(root: jsonP.JSONValue): QueueReference {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CurrentMetricData {
  Metric?: CurrentMetric | null;
  Value?: number | null;
}
function toCurrentMetricData(root: jsonP.JSONValue): CurrentMetricData {
  return jsonP.readObj({
    required: {},
    optional: {
      "Metric": toCurrentMetric,
      "Value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Credentials {
  AccessToken?: string | null;
  AccessTokenExpiration?: Date | number | null;
  RefreshToken?: string | null;
  RefreshTokenExpiration?: Date | number | null;
}
function toCredentials(root: jsonP.JSONValue): Credentials {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessToken": "s",
      "AccessTokenExpiration": "d",
      "RefreshToken": "s",
      "RefreshTokenExpiration": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HistoricalMetricResult {
  Dimensions?: Dimensions | null;
  Collections?: HistoricalMetricData[] | null;
}
function toHistoricalMetricResult(root: jsonP.JSONValue): HistoricalMetricResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Dimensions": toDimensions,
      "Collections": [toHistoricalMetricData],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HistoricalMetricData {
  Metric?: HistoricalMetric | null;
  Value?: number | null;
}
function toHistoricalMetricData(root: jsonP.JSONValue): HistoricalMetricData {
  return jsonP.readObj({
    required: {},
    optional: {
      "Metric": toHistoricalMetric,
      "Value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ContactFlowSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
  ContactFlowType?: ContactFlowType | null;
}
function toContactFlowSummary(root: jsonP.JSONValue): ContactFlowSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "ContactFlowType": (x: jsonP.JSONValue) => cmnP.readEnum<ContactFlowType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HoursOfOperationSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
}
function toHoursOfOperationSummary(root: jsonP.JSONValue): HoursOfOperationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceSummary {
  Id?: string | null;
  Arn?: string | null;
  IdentityManagementType?: DirectoryType | null;
  InstanceAlias?: string | null;
  CreatedTime?: Date | number | null;
  ServiceRole?: string | null;
  InstanceStatus?: InstanceStatus | null;
  InboundCallsEnabled?: boolean | null;
  OutboundCallsEnabled?: boolean | null;
}
function toInstanceSummary(root: jsonP.JSONValue): InstanceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "IdentityManagementType": (x: jsonP.JSONValue) => cmnP.readEnum<DirectoryType>(x),
      "InstanceAlias": "s",
      "CreatedTime": "d",
      "ServiceRole": "s",
      "InstanceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceStatus>(x),
      "InboundCallsEnabled": "b",
      "OutboundCallsEnabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IntegrationAssociationSummary {
  IntegrationAssociationId?: string | null;
  IntegrationAssociationArn?: string | null;
  InstanceId?: string | null;
  IntegrationType?: IntegrationType | null;
  IntegrationArn?: string | null;
  SourceApplicationUrl?: string | null;
  SourceApplicationName?: string | null;
  SourceType?: SourceType | null;
}
function toIntegrationAssociationSummary(root: jsonP.JSONValue): IntegrationAssociationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "IntegrationAssociationId": "s",
      "IntegrationAssociationArn": "s",
      "InstanceId": "s",
      "IntegrationType": (x: jsonP.JSONValue) => cmnP.readEnum<IntegrationType>(x),
      "IntegrationArn": "s",
      "SourceApplicationUrl": "s",
      "SourceApplicationName": "s",
      "SourceType": (x: jsonP.JSONValue) => cmnP.readEnum<SourceType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PhoneNumberSummary {
  Id?: string | null;
  Arn?: string | null;
  PhoneNumber?: string | null;
  PhoneNumberType?: PhoneNumberType | null;
  PhoneNumberCountryCode?: PhoneNumberCountryCode | null;
}
function toPhoneNumberSummary(root: jsonP.JSONValue): PhoneNumberSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "PhoneNumber": "s",
      "PhoneNumberType": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberType>(x),
      "PhoneNumberCountryCode": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberCountryCode>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PromptSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
}
function toPromptSummary(root: jsonP.JSONValue): PromptSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface QuickConnectSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
  QuickConnectType?: QuickConnectType | null;
}
function toQuickConnectSummary(root: jsonP.JSONValue): QuickConnectSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "QuickConnectType": (x: jsonP.JSONValue) => cmnP.readEnum<QuickConnectType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface QueueSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
  QueueType?: QueueType | null;
}
function toQueueSummary(root: jsonP.JSONValue): QueueSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "QueueType": (x: jsonP.JSONValue) => cmnP.readEnum<QueueType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RoutingProfileQueueConfigSummary {
  QueueId: string;
  QueueArn: string;
  QueueName: string;
  Priority: number;
  Delay: number;
  Channel: Channel;
}
function toRoutingProfileQueueConfigSummary(root: jsonP.JSONValue): RoutingProfileQueueConfigSummary {
  return jsonP.readObj({
    required: {
      "QueueId": "s",
      "QueueArn": "s",
      "QueueName": "s",
      "Priority": "n",
      "Delay": "n",
      "Channel": (x: jsonP.JSONValue) => cmnP.readEnum<Channel>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RoutingProfileSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
}
function toRoutingProfileSummary(root: jsonP.JSONValue): RoutingProfileSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecurityKey {
  AssociationId?: string | null;
  Key?: string | null;
  CreationTime?: Date | number | null;
}
function toSecurityKey(root: jsonP.JSONValue): SecurityKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationId": "s",
      "Key": "s",
      "CreationTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecurityProfileSummary {
  Id?: string | null;
  Arn?: string | null;
  Name?: string | null;
}
function toSecurityProfileSummary(root: jsonP.JSONValue): SecurityProfileSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UseCase {
  UseCaseId?: string | null;
  UseCaseArn?: string | null;
  UseCaseType?: UseCaseType | null;
}
function toUseCase(root: jsonP.JSONValue): UseCase {
  return jsonP.readObj({
    required: {},
    optional: {
      "UseCaseId": "s",
      "UseCaseArn": "s",
      "UseCaseType": (x: jsonP.JSONValue) => cmnP.readEnum<UseCaseType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserSummary {
  Id?: string | null;
  Arn?: string | null;
  Username?: string | null;
}
function toUserSummary(root: jsonP.JSONValue): UserSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Username": "s",
    },
  }, root);
}
