// Autogenerated API client for: Amazon Connect Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Connect {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Connect.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-08-08",
    "endpointPrefix": "connect",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon Connect",
    "serviceFullName": "Amazon Connect Service",
    "serviceId": "Connect",
    "signatureVersion": "v4",
    "signingName": "connect",
    "uid": "connect-2017-08-08"
  };

  async associateApprovedOrigin(
    {abortSignal, ...params}: RequestConfig & s.AssociateApprovedOriginRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Origin: params["Origin"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateApprovedOrigin",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/approved-origin`,
    });
  }

  async associateInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & s.AssociateInstanceStorageConfigRequest,
  ): Promise<s.AssociateInstanceStorageConfigResponse> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      StorageConfig: fromInstanceStorageConfig(params["StorageConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateInstanceStorageConfig",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationId": "s",
      },
    }, await resp.json());
  }

  async associateLambdaFunction(
    {abortSignal, ...params}: RequestConfig & s.AssociateLambdaFunctionRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      FunctionArn: params["FunctionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateLambdaFunction",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lambda-function`,
    });
  }

  async associateLexBot(
    {abortSignal, ...params}: RequestConfig & s.AssociateLexBotRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LexBot: fromLexBot(params["LexBot"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateLexBot",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lex-bot`,
    });
  }

  async associateQueueQuickConnects(
    {abortSignal, ...params}: RequestConfig & s.AssociateQueueQuickConnectsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QuickConnectIds: params["QuickConnectIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateQueueQuickConnects",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/associate-quick-connects`,
    });
  }

  async associateRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & s.AssociateRoutingProfileQueuesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QueueConfigs: params["QueueConfigs"]?.map(x => fromRoutingProfileQueueConfig(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateRoutingProfileQueues",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/associate-queues`,
    });
  }

  async associateSecurityKey(
    {abortSignal, ...params}: RequestConfig & s.AssociateSecurityKeyRequest,
  ): Promise<s.AssociateSecurityKeyResponse> {
    const body: jsonP.JSONObject = {
      Key: params["Key"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSecurityKey",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/security-key`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationId": "s",
      },
    }, await resp.json());
  }

  async createContactFlow(
    {abortSignal, ...params}: RequestConfig & s.CreateContactFlowRequest,
  ): Promise<s.CreateContactFlowResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Type: params["Type"],
      Description: params["Description"],
      Content: params["Content"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContactFlow",
      method: "PUT",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactFlowId": "s",
        "ContactFlowArn": "s",
      },
    }, await resp.json());
  }

  async createInstance(
    {abortSignal, ...params}: RequestConfig & s.CreateInstanceRequest,
  ): Promise<s.CreateInstanceResponse> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"],
      IdentityManagementType: params["IdentityManagementType"],
      InstanceAlias: params["InstanceAlias"],
      DirectoryId: params["DirectoryId"],
      InboundCallsEnabled: params["InboundCallsEnabled"],
      OutboundCallsEnabled: params["OutboundCallsEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstance",
      method: "PUT",
      requestUri: "/instance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Arn": "s",
      },
    }, await resp.json());
  }

  async createIntegrationAssociation(
    {abortSignal, ...params}: RequestConfig & s.CreateIntegrationAssociationRequest,
  ): Promise<s.CreateIntegrationAssociationResponse> {
    const body: jsonP.JSONObject = {
      IntegrationType: params["IntegrationType"],
      IntegrationArn: params["IntegrationArn"],
      SourceApplicationUrl: params["SourceApplicationUrl"],
      SourceApplicationName: params["SourceApplicationName"],
      SourceType: params["SourceType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIntegrationAssociation",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IntegrationAssociationId": "s",
        "IntegrationAssociationArn": "s",
      },
    }, await resp.json());
  }

  async createQueue(
    {abortSignal, ...params}: RequestConfig & s.CreateQueueRequest,
  ): Promise<s.CreateQueueResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      OutboundCallerConfig: fromOutboundCallerConfig(params["OutboundCallerConfig"]),
      HoursOfOperationId: params["HoursOfOperationId"],
      MaxContacts: params["MaxContacts"],
      QuickConnectIds: params["QuickConnectIds"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateQueue",
      method: "PUT",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QueueArn": "s",
        "QueueId": "s",
      },
    }, await resp.json());
  }

  async createQuickConnect(
    {abortSignal, ...params}: RequestConfig & s.CreateQuickConnectRequest,
  ): Promise<s.CreateQuickConnectResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      QuickConnectConfig: fromQuickConnectConfig(params["QuickConnectConfig"]),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateQuickConnect",
      method: "PUT",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QuickConnectARN": "s",
        "QuickConnectId": "s",
      },
    }, await resp.json());
  }

  async createRoutingProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateRoutingProfileRequest,
  ): Promise<s.CreateRoutingProfileResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      DefaultOutboundQueueId: params["DefaultOutboundQueueId"],
      QueueConfigs: params["QueueConfigs"]?.map(x => fromRoutingProfileQueueConfig(x)),
      MediaConcurrencies: params["MediaConcurrencies"]?.map(x => fromMediaConcurrency(x)),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoutingProfile",
      method: "PUT",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoutingProfileArn": "s",
        "RoutingProfileId": "s",
      },
    }, await resp.json());
  }

  async createUseCase(
    {abortSignal, ...params}: RequestConfig & s.CreateUseCaseRequest,
  ): Promise<s.CreateUseCaseResponse> {
    const body: jsonP.JSONObject = {
      UseCaseType: params["UseCaseType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUseCase",
      method: "PUT",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}/use-cases`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UseCaseId": "s",
        "UseCaseArn": "s",
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & s.CreateUserRequest,
  ): Promise<s.CreateUserResponse> {
    const body: jsonP.JSONObject = {
      Username: params["Username"],
      Password: params["Password"],
      IdentityInfo: fromUserIdentityInfo(params["IdentityInfo"]),
      PhoneConfig: fromUserPhoneConfig(params["PhoneConfig"]),
      DirectoryUserId: params["DirectoryUserId"],
      SecurityProfileIds: params["SecurityProfileIds"],
      RoutingProfileId: params["RoutingProfileId"],
      HierarchyGroupId: params["HierarchyGroupId"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
      method: "PUT",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserId": "s",
        "UserArn": "s",
      },
    }, await resp.json());
  }

  async createUserHierarchyGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateUserHierarchyGroupRequest,
  ): Promise<s.CreateUserHierarchyGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ParentGroupId: params["ParentGroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUserHierarchyGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HierarchyGroupId": "s",
        "HierarchyGroupArn": "s",
      },
    }, await resp.json());
  }

  async deleteInstance(
    {abortSignal, ...params}: RequestConfig & s.DeleteInstanceRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteInstance",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}`,
    });
  }

  async deleteIntegrationAssociation(
    {abortSignal, ...params}: RequestConfig & s.DeleteIntegrationAssociationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIntegrationAssociation",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}`,
    });
  }

  async deleteQuickConnect(
    {abortSignal, ...params}: RequestConfig & s.DeleteQuickConnectRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteQuickConnect",
      method: "DELETE",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}`,
    });
  }

  async deleteUseCase(
    {abortSignal, ...params}: RequestConfig & s.DeleteUseCaseRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUseCase",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}/use-cases/${params["UseCaseId"]}`,
    });
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & s.DeleteUserRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUser",
      method: "DELETE",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}`,
    });
  }

  async deleteUserHierarchyGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteUserHierarchyGroupRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUserHierarchyGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}/${params["HierarchyGroupId"]}`,
    });
  }

  async describeContactFlow(
    {abortSignal, ...params}: RequestConfig & s.DescribeContactFlowRequest,
  ): Promise<s.DescribeContactFlowResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeContactFlow",
      method: "GET",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}/${params["ContactFlowId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactFlow": toContactFlow,
      },
    }, await resp.json());
  }

  async describeHoursOfOperation(
    {abortSignal, ...params}: RequestConfig & s.DescribeHoursOfOperationRequest,
  ): Promise<s.DescribeHoursOfOperationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeHoursOfOperation",
      method: "GET",
      requestUri: cmnP.encodePath`/hours-of-operations/${params["InstanceId"]}/${params["HoursOfOperationId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HoursOfOperation": toHoursOfOperation,
      },
    }, await resp.json());
  }

  async describeInstance(
    {abortSignal, ...params}: RequestConfig & s.DescribeInstanceRequest,
  ): Promise<s.DescribeInstanceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeInstance",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Instance": toInstance,
      },
    }, await resp.json());
  }

  async describeInstanceAttribute(
    {abortSignal, ...params}: RequestConfig & s.DescribeInstanceAttributeRequest,
  ): Promise<s.DescribeInstanceAttributeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeInstanceAttribute",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/attribute/${params["AttributeType"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attribute": toAttribute,
      },
    }, await resp.json());
  }

  async describeInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & s.DescribeInstanceStorageConfigRequest,
  ): Promise<s.DescribeInstanceStorageConfigResponse> {
    const query = new URLSearchParams;
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeInstanceStorageConfig",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config/${params["AssociationId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StorageConfig": toInstanceStorageConfig,
      },
    }, await resp.json());
  }

  async describeQueue(
    {abortSignal, ...params}: RequestConfig & s.DescribeQueueRequest,
  ): Promise<s.DescribeQueueResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeQueue",
      method: "GET",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Queue": toQueue,
      },
    }, await resp.json());
  }

  async describeQuickConnect(
    {abortSignal, ...params}: RequestConfig & s.DescribeQuickConnectRequest,
  ): Promise<s.DescribeQuickConnectResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeQuickConnect",
      method: "GET",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QuickConnect": toQuickConnect,
      },
    }, await resp.json());
  }

  async describeRoutingProfile(
    {abortSignal, ...params}: RequestConfig & s.DescribeRoutingProfileRequest,
  ): Promise<s.DescribeRoutingProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRoutingProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoutingProfile": toRoutingProfile,
      },
    }, await resp.json());
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & s.DescribeUserRequest,
  ): Promise<s.DescribeUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUser",
      method: "GET",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async describeUserHierarchyGroup(
    {abortSignal, ...params}: RequestConfig & s.DescribeUserHierarchyGroupRequest,
  ): Promise<s.DescribeUserHierarchyGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUserHierarchyGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}/${params["HierarchyGroupId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HierarchyGroup": toHierarchyGroup,
      },
    }, await resp.json());
  }

  async describeUserHierarchyStructure(
    {abortSignal, ...params}: RequestConfig & s.DescribeUserHierarchyStructureRequest,
  ): Promise<s.DescribeUserHierarchyStructureResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUserHierarchyStructure",
      method: "GET",
      requestUri: cmnP.encodePath`/user-hierarchy-structure/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HierarchyStructure": toHierarchyStructure,
      },
    }, await resp.json());
  }

  async disassociateApprovedOrigin(
    {abortSignal, ...params}: RequestConfig & s.DisassociateApprovedOriginRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("origin", params["Origin"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateApprovedOrigin",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/approved-origin`,
    });
  }

  async disassociateInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & s.DisassociateInstanceStorageConfigRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateInstanceStorageConfig",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config/${params["AssociationId"]}`,
    });
  }

  async disassociateLambdaFunction(
    {abortSignal, ...params}: RequestConfig & s.DisassociateLambdaFunctionRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("functionArn", params["FunctionArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateLambdaFunction",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lambda-function`,
    });
  }

  async disassociateLexBot(
    {abortSignal, ...params}: RequestConfig & s.DisassociateLexBotRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("botName", params["BotName"]?.toString() ?? "");
    query.set("lexRegion", params["LexRegion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateLexBot",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lex-bot`,
    });
  }

  async disassociateQueueQuickConnects(
    {abortSignal, ...params}: RequestConfig & s.DisassociateQueueQuickConnectsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QuickConnectIds: params["QuickConnectIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateQueueQuickConnects",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/disassociate-quick-connects`,
    });
  }

  async disassociateRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & s.DisassociateRoutingProfileQueuesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QueueReferences: params["QueueReferences"]?.map(x => fromRoutingProfileQueueReference(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateRoutingProfileQueues",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/disassociate-queues`,
    });
  }

  async disassociateSecurityKey(
    {abortSignal, ...params}: RequestConfig & s.DisassociateSecurityKeyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateSecurityKey",
      method: "DELETE",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/security-key/${params["AssociationId"]}`,
    });
  }

  async getContactAttributes(
    {abortSignal, ...params}: RequestConfig & s.GetContactAttributesRequest,
  ): Promise<s.GetContactAttributesResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetContactAttributes",
      method: "GET",
      requestUri: cmnP.encodePath`/contact/attributes/${params["InstanceId"]}/${params["InitialContactId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attributes": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getCurrentMetricData(
    {abortSignal, ...params}: RequestConfig & s.GetCurrentMetricDataRequest,
  ): Promise<s.GetCurrentMetricDataResponse> {
    const body: jsonP.JSONObject = {
      Filters: fromFilters(params["Filters"]),
      Groupings: params["Groupings"],
      CurrentMetrics: params["CurrentMetrics"]?.map(x => fromCurrentMetric(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCurrentMetricData",
      requestUri: cmnP.encodePath`/metrics/current/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MetricResults": [toCurrentMetricResult],
        "DataSnapshotTime": "d",
      },
    }, await resp.json());
  }

  async getFederationToken(
    {abortSignal, ...params}: RequestConfig & s.GetFederationTokenRequest,
  ): Promise<s.GetFederationTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFederationToken",
      method: "GET",
      requestUri: cmnP.encodePath`/user/federate/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Credentials": toCredentials,
      },
    }, await resp.json());
  }

  async getMetricData(
    {abortSignal, ...params}: RequestConfig & s.GetMetricDataRequest,
  ): Promise<s.GetMetricDataResponse> {
    const body: jsonP.JSONObject = {
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      Filters: fromFilters(params["Filters"]),
      Groupings: params["Groupings"],
      HistoricalMetrics: params["HistoricalMetrics"]?.map(x => fromHistoricalMetric(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMetricData",
      requestUri: cmnP.encodePath`/metrics/historical/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MetricResults": [toHistoricalMetricResult],
      },
    }, await resp.json());
  }

  async listApprovedOrigins(
    {abortSignal, ...params}: RequestConfig & s.ListApprovedOriginsRequest,
  ): Promise<s.ListApprovedOriginsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListApprovedOrigins",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/approved-origins`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Origins": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listContactFlows(
    {abortSignal, ...params}: RequestConfig & s.ListContactFlowsRequest,
  ): Promise<s.ListContactFlowsResponse> {
    const query = new URLSearchParams;
    for (const item of params["ContactFlowTypes"] ?? []) {
      query.append("contactFlowTypes", item?.toString() ?? "");
    }
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListContactFlows",
      method: "GET",
      requestUri: cmnP.encodePath`/contact-flows-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactFlowSummaryList": [toContactFlowSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHoursOfOperations(
    {abortSignal, ...params}: RequestConfig & s.ListHoursOfOperationsRequest,
  ): Promise<s.ListHoursOfOperationsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListHoursOfOperations",
      method: "GET",
      requestUri: cmnP.encodePath`/hours-of-operations-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HoursOfOperationSummaryList": [toHoursOfOperationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstanceAttributes(
    {abortSignal, ...params}: RequestConfig & s.ListInstanceAttributesRequest,
  ): Promise<s.ListInstanceAttributesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInstanceAttributes",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/attributes`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attributes": [toAttribute],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstanceStorageConfigs(
    {abortSignal, ...params}: RequestConfig & s.ListInstanceStorageConfigsRequest,
  ): Promise<s.ListInstanceStorageConfigsResponse> {
    const query = new URLSearchParams;
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInstanceStorageConfigs",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-configs`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StorageConfigs": [toInstanceStorageConfig],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstances(
    {abortSignal, ...params}: RequestConfig & s.ListInstancesRequest = {},
  ): Promise<s.ListInstancesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInstances",
      method: "GET",
      requestUri: "/instance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InstanceSummaryList": [toInstanceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIntegrationAssociations(
    {abortSignal, ...params}: RequestConfig & s.ListIntegrationAssociationsRequest,
  ): Promise<s.ListIntegrationAssociationsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIntegrationAssociations",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IntegrationAssociationSummaryList": [toIntegrationAssociationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLambdaFunctions(
    {abortSignal, ...params}: RequestConfig & s.ListLambdaFunctionsRequest,
  ): Promise<s.ListLambdaFunctionsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLambdaFunctions",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lambda-functions`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LambdaFunctions": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLexBots(
    {abortSignal, ...params}: RequestConfig & s.ListLexBotsRequest,
  ): Promise<s.ListLexBotsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLexBots",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/lex-bots`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LexBots": [toLexBot],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPhoneNumbers(
    {abortSignal, ...params}: RequestConfig & s.ListPhoneNumbersRequest,
  ): Promise<s.ListPhoneNumbersResponse> {
    const query = new URLSearchParams;
    for (const item of params["PhoneNumberTypes"] ?? []) {
      query.append("phoneNumberTypes", item?.toString() ?? "");
    }
    for (const item of params["PhoneNumberCountryCodes"] ?? []) {
      query.append("phoneNumberCountryCodes", item?.toString() ?? "");
    }
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPhoneNumbers",
      method: "GET",
      requestUri: cmnP.encodePath`/phone-numbers-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberSummaryList": [toPhoneNumberSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPrompts(
    {abortSignal, ...params}: RequestConfig & s.ListPromptsRequest,
  ): Promise<s.ListPromptsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPrompts",
      method: "GET",
      requestUri: cmnP.encodePath`/prompts-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PromptSummaryList": [toPromptSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listQueueQuickConnects(
    {abortSignal, ...params}: RequestConfig & s.ListQueueQuickConnectsRequest,
  ): Promise<s.ListQueueQuickConnectsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListQueueQuickConnects",
      method: "GET",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/quick-connects`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "QuickConnectSummaryList": [toQuickConnectSummary],
      },
    }, await resp.json());
  }

  async listQueues(
    {abortSignal, ...params}: RequestConfig & s.ListQueuesRequest,
  ): Promise<s.ListQueuesResponse> {
    const query = new URLSearchParams;
    for (const item of params["QueueTypes"] ?? []) {
      query.append("queueTypes", item?.toString() ?? "");
    }
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListQueues",
      method: "GET",
      requestUri: cmnP.encodePath`/queues-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QueueSummaryList": [toQueueSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listQuickConnects(
    {abortSignal, ...params}: RequestConfig & s.ListQuickConnectsRequest,
  ): Promise<s.ListQuickConnectsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    for (const item of params["QuickConnectTypes"] ?? []) {
      query.append("QuickConnectTypes", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListQuickConnects",
      method: "GET",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QuickConnectSummaryList": [toQuickConnectSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & s.ListRoutingProfileQueuesRequest,
  ): Promise<s.ListRoutingProfileQueuesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRoutingProfileQueues",
      method: "GET",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/queues`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "RoutingProfileQueueConfigSummaryList": [toRoutingProfileQueueConfigSummary],
      },
    }, await resp.json());
  }

  async listRoutingProfiles(
    {abortSignal, ...params}: RequestConfig & s.ListRoutingProfilesRequest,
  ): Promise<s.ListRoutingProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRoutingProfiles",
      method: "GET",
      requestUri: cmnP.encodePath`/routing-profiles-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoutingProfileSummaryList": [toRoutingProfileSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSecurityKeys(
    {abortSignal, ...params}: RequestConfig & s.ListSecurityKeysRequest,
  ): Promise<s.ListSecurityKeysResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSecurityKeys",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/security-keys`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SecurityKeys": [toSecurityKey],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSecurityProfiles(
    {abortSignal, ...params}: RequestConfig & s.ListSecurityProfilesRequest,
  ): Promise<s.ListSecurityProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSecurityProfiles",
      method: "GET",
      requestUri: cmnP.encodePath`/security-profiles-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SecurityProfileSummaryList": [toSecurityProfileSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listUseCases(
    {abortSignal, ...params}: RequestConfig & s.ListUseCasesRequest,
  ): Promise<s.ListUseCasesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUseCases",
      method: "GET",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/integration-associations/${params["IntegrationAssociationId"]}/use-cases`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UseCaseSummaryList": [toUseCase],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUserHierarchyGroups(
    {abortSignal, ...params}: RequestConfig & s.ListUserHierarchyGroupsRequest,
  ): Promise<s.ListUserHierarchyGroupsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUserHierarchyGroups",
      method: "GET",
      requestUri: cmnP.encodePath`/user-hierarchy-groups-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserHierarchyGroupSummaryList": [toHierarchyGroupSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & s.ListUsersRequest,
  ): Promise<s.ListUsersResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUsers",
      method: "GET",
      requestUri: cmnP.encodePath`/users-summary/${params["InstanceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserSummaryList": [toUserSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async resumeContactRecording(
    {abortSignal, ...params}: RequestConfig & s.ResumeContactRecordingRequest,
  ): Promise<s.ResumeContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResumeContactRecording",
      requestUri: "/contact/resume-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startChatContact(
    {abortSignal, ...params}: RequestConfig & s.StartChatContactRequest,
  ): Promise<s.StartChatContactResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactFlowId: params["ContactFlowId"],
      Attributes: params["Attributes"],
      ParticipantDetails: fromParticipantDetails(params["ParticipantDetails"]),
      InitialMessage: fromChatMessage(params["InitialMessage"]),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartChatContact",
      method: "PUT",
      requestUri: "/contact/chat",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactId": "s",
        "ParticipantId": "s",
        "ParticipantToken": "s",
      },
    }, await resp.json());
  }

  async startContactRecording(
    {abortSignal, ...params}: RequestConfig & s.StartContactRecordingRequest,
  ): Promise<s.StartContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
      VoiceRecordingConfiguration: fromVoiceRecordingConfiguration(params["VoiceRecordingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartContactRecording",
      requestUri: "/contact/start-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startOutboundVoiceContact(
    {abortSignal, ...params}: RequestConfig & s.StartOutboundVoiceContactRequest,
  ): Promise<s.StartOutboundVoiceContactResponse> {
    const body: jsonP.JSONObject = {
      DestinationPhoneNumber: params["DestinationPhoneNumber"],
      ContactFlowId: params["ContactFlowId"],
      InstanceId: params["InstanceId"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      SourcePhoneNumber: params["SourcePhoneNumber"],
      QueueId: params["QueueId"],
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartOutboundVoiceContact",
      method: "PUT",
      requestUri: "/contact/outbound-voice",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactId": "s",
      },
    }, await resp.json());
  }

  async startTaskContact(
    {abortSignal, ...params}: RequestConfig & s.StartTaskContactRequest,
  ): Promise<s.StartTaskContactResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      PreviousContactId: params["PreviousContactId"],
      ContactFlowId: params["ContactFlowId"],
      Attributes: params["Attributes"],
      Name: params["Name"],
      References: jsonP.serializeMap(params["References"], x => fromReference(x)),
      Description: params["Description"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartTaskContact",
      method: "PUT",
      requestUri: "/contact/task",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactId": "s",
      },
    }, await resp.json());
  }

  async stopContact(
    {abortSignal, ...params}: RequestConfig & s.StopContactRequest,
  ): Promise<s.StopContactResponse> {
    const body: jsonP.JSONObject = {
      ContactId: params["ContactId"],
      InstanceId: params["InstanceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopContact",
      requestUri: "/contact/stop",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopContactRecording(
    {abortSignal, ...params}: RequestConfig & s.StopContactRecordingRequest,
  ): Promise<s.StopContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopContactRecording",
      requestUri: "/contact/stop-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async suspendContactRecording(
    {abortSignal, ...params}: RequestConfig & s.SuspendContactRecordingRequest,
  ): Promise<s.SuspendContactRecordingResponse> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      ContactId: params["ContactId"],
      InitialContactId: params["InitialContactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SuspendContactRecording",
      requestUri: "/contact/suspend-recording",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
  }

  async updateContactAttributes(
    {abortSignal, ...params}: RequestConfig & s.UpdateContactAttributesRequest,
  ): Promise<s.UpdateContactAttributesResponse> {
    const body: jsonP.JSONObject = {
      InitialContactId: params["InitialContactId"],
      InstanceId: params["InstanceId"],
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContactAttributes",
      requestUri: "/contact/attributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateContactFlowContent(
    {abortSignal, ...params}: RequestConfig & s.UpdateContactFlowContentRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Content: params["Content"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContactFlowContent",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}/${params["ContactFlowId"]}/content`,
    });
  }

  async updateContactFlowName(
    {abortSignal, ...params}: RequestConfig & s.UpdateContactFlowNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContactFlowName",
      requestUri: cmnP.encodePath`/contact-flows/${params["InstanceId"]}/${params["ContactFlowId"]}/name`,
    });
  }

  async updateInstanceAttribute(
    {abortSignal, ...params}: RequestConfig & s.UpdateInstanceAttributeRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Value: params["Value"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateInstanceAttribute",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/attribute/${params["AttributeType"]}`,
    });
  }

  async updateInstanceStorageConfig(
    {abortSignal, ...params}: RequestConfig & s.UpdateInstanceStorageConfigRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      StorageConfig: fromInstanceStorageConfig(params["StorageConfig"]),
    };
    query.set("resourceType", params["ResourceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateInstanceStorageConfig",
      requestUri: cmnP.encodePath`/instance/${params["InstanceId"]}/storage-config/${params["AssociationId"]}`,
    });
  }

  async updateQueueHoursOfOperation(
    {abortSignal, ...params}: RequestConfig & s.UpdateQueueHoursOfOperationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      HoursOfOperationId: params["HoursOfOperationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueHoursOfOperation",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/hours-of-operation`,
    });
  }

  async updateQueueMaxContacts(
    {abortSignal, ...params}: RequestConfig & s.UpdateQueueMaxContactsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      MaxContacts: params["MaxContacts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueMaxContacts",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/max-contacts`,
    });
  }

  async updateQueueName(
    {abortSignal, ...params}: RequestConfig & s.UpdateQueueNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueName",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/name`,
    });
  }

  async updateQueueOutboundCallerConfig(
    {abortSignal, ...params}: RequestConfig & s.UpdateQueueOutboundCallerConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      OutboundCallerConfig: fromOutboundCallerConfig(params["OutboundCallerConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueOutboundCallerConfig",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/outbound-caller-config`,
    });
  }

  async updateQueueStatus(
    {abortSignal, ...params}: RequestConfig & s.UpdateQueueStatusRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Status: params["Status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQueueStatus",
      requestUri: cmnP.encodePath`/queues/${params["InstanceId"]}/${params["QueueId"]}/status`,
    });
  }

  async updateQuickConnectConfig(
    {abortSignal, ...params}: RequestConfig & s.UpdateQuickConnectConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QuickConnectConfig: fromQuickConnectConfig(params["QuickConnectConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQuickConnectConfig",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}/config`,
    });
  }

  async updateQuickConnectName(
    {abortSignal, ...params}: RequestConfig & s.UpdateQuickConnectNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateQuickConnectName",
      requestUri: cmnP.encodePath`/quick-connects/${params["InstanceId"]}/${params["QuickConnectId"]}/name`,
    });
  }

  async updateRoutingProfileConcurrency(
    {abortSignal, ...params}: RequestConfig & s.UpdateRoutingProfileConcurrencyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      MediaConcurrencies: params["MediaConcurrencies"]?.map(x => fromMediaConcurrency(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileConcurrency",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/concurrency`,
    });
  }

  async updateRoutingProfileDefaultOutboundQueue(
    {abortSignal, ...params}: RequestConfig & s.UpdateRoutingProfileDefaultOutboundQueueRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      DefaultOutboundQueueId: params["DefaultOutboundQueueId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileDefaultOutboundQueue",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/default-outbound-queue`,
    });
  }

  async updateRoutingProfileName(
    {abortSignal, ...params}: RequestConfig & s.UpdateRoutingProfileNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileName",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/name`,
    });
  }

  async updateRoutingProfileQueues(
    {abortSignal, ...params}: RequestConfig & s.UpdateRoutingProfileQueuesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      QueueConfigs: params["QueueConfigs"]?.map(x => fromRoutingProfileQueueConfig(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoutingProfileQueues",
      requestUri: cmnP.encodePath`/routing-profiles/${params["InstanceId"]}/${params["RoutingProfileId"]}/queues`,
    });
  }

  async updateUserHierarchy(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserHierarchyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      HierarchyGroupId: params["HierarchyGroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserHierarchy",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/hierarchy`,
    });
  }

  async updateUserHierarchyGroupName(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserHierarchyGroupNameRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserHierarchyGroupName",
      requestUri: cmnP.encodePath`/user-hierarchy-groups/${params["InstanceId"]}/${params["HierarchyGroupId"]}/name`,
    });
  }

  async updateUserHierarchyStructure(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserHierarchyStructureRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      HierarchyStructure: fromHierarchyStructureUpdate(params["HierarchyStructure"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserHierarchyStructure",
      requestUri: cmnP.encodePath`/user-hierarchy-structure/${params["InstanceId"]}`,
    });
  }

  async updateUserIdentityInfo(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserIdentityInfoRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityInfo: fromUserIdentityInfo(params["IdentityInfo"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserIdentityInfo",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/identity-info`,
    });
  }

  async updateUserPhoneConfig(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserPhoneConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      PhoneConfig: fromUserPhoneConfig(params["PhoneConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserPhoneConfig",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/phone-config`,
    });
  }

  async updateUserRoutingProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserRoutingProfileRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      RoutingProfileId: params["RoutingProfileId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserRoutingProfile",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/routing-profile`,
    });
  }

  async updateUserSecurityProfiles(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserSecurityProfilesRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      SecurityProfileIds: params["SecurityProfileIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserSecurityProfiles",
      requestUri: cmnP.encodePath`/users/${params["InstanceId"]}/${params["UserId"]}/security-profiles`,
    });
  }

}

function fromInstanceStorageConfig(input?: s.InstanceStorageConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssociationId: input["AssociationId"],
    StorageType: input["StorageType"],
    S3Config: fromS3Config(input["S3Config"]),
    KinesisVideoStreamConfig: fromKinesisVideoStreamConfig(input["KinesisVideoStreamConfig"]),
    KinesisStreamConfig: fromKinesisStreamConfig(input["KinesisStreamConfig"]),
    KinesisFirehoseConfig: fromKinesisFirehoseConfig(input["KinesisFirehoseConfig"]),
  }
}
function toInstanceStorageConfig(root: jsonP.JSONValue): s.InstanceStorageConfig {
  return jsonP.readObj({
    required: {
      "StorageType": (x: jsonP.JSONValue) => cmnP.readEnum<s.StorageType>(x),
    },
    optional: {
      "AssociationId": "s",
      "S3Config": toS3Config,
      "KinesisVideoStreamConfig": toKinesisVideoStreamConfig,
      "KinesisStreamConfig": toKinesisStreamConfig,
      "KinesisFirehoseConfig": toKinesisFirehoseConfig,
    },
  }, root);
}

function fromS3Config(input?: s.S3Config | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketName: input["BucketName"],
    BucketPrefix: input["BucketPrefix"],
    EncryptionConfig: fromEncryptionConfig(input["EncryptionConfig"]),
  }
}
function toS3Config(root: jsonP.JSONValue): s.S3Config {
  return jsonP.readObj({
    required: {
      "BucketName": "s",
      "BucketPrefix": "s",
    },
    optional: {
      "EncryptionConfig": toEncryptionConfig,
    },
  }, root);
}

function fromEncryptionConfig(input?: s.EncryptionConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EncryptionType: input["EncryptionType"],
    KeyId: input["KeyId"],
  }
}
function toEncryptionConfig(root: jsonP.JSONValue): s.EncryptionConfig {
  return jsonP.readObj({
    required: {
      "EncryptionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EncryptionType>(x),
      "KeyId": "s",
    },
    optional: {},
  }, root);
}

function fromKinesisVideoStreamConfig(input?: s.KinesisVideoStreamConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Prefix: input["Prefix"],
    RetentionPeriodHours: input["RetentionPeriodHours"],
    EncryptionConfig: fromEncryptionConfig(input["EncryptionConfig"]),
  }
}
function toKinesisVideoStreamConfig(root: jsonP.JSONValue): s.KinesisVideoStreamConfig {
  return jsonP.readObj({
    required: {
      "Prefix": "s",
      "RetentionPeriodHours": "n",
      "EncryptionConfig": toEncryptionConfig,
    },
    optional: {},
  }, root);
}

function fromKinesisStreamConfig(input?: s.KinesisStreamConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StreamArn: input["StreamArn"],
  }
}
function toKinesisStreamConfig(root: jsonP.JSONValue): s.KinesisStreamConfig {
  return jsonP.readObj({
    required: {
      "StreamArn": "s",
    },
    optional: {},
  }, root);
}

function fromKinesisFirehoseConfig(input?: s.KinesisFirehoseConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FirehoseArn: input["FirehoseArn"],
  }
}
function toKinesisFirehoseConfig(root: jsonP.JSONValue): s.KinesisFirehoseConfig {
  return jsonP.readObj({
    required: {
      "FirehoseArn": "s",
    },
    optional: {},
  }, root);
}

function fromLexBot(input?: s.LexBot | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    LexRegion: input["LexRegion"],
  }
}
function toLexBot(root: jsonP.JSONValue): s.LexBot {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "LexRegion": "s",
    },
  }, root);
}

function fromRoutingProfileQueueConfig(input?: s.RoutingProfileQueueConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueueReference: fromRoutingProfileQueueReference(input["QueueReference"]),
    Priority: input["Priority"],
    Delay: input["Delay"],
  }
}

function fromRoutingProfileQueueReference(input?: s.RoutingProfileQueueReference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueueId: input["QueueId"],
    Channel: input["Channel"],
  }
}

function fromOutboundCallerConfig(input?: s.OutboundCallerConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OutboundCallerIdName: input["OutboundCallerIdName"],
    OutboundCallerIdNumberId: input["OutboundCallerIdNumberId"],
    OutboundFlowId: input["OutboundFlowId"],
  }
}
function toOutboundCallerConfig(root: jsonP.JSONValue): s.OutboundCallerConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutboundCallerIdName": "s",
      "OutboundCallerIdNumberId": "s",
      "OutboundFlowId": "s",
    },
  }, root);
}

function fromQuickConnectConfig(input?: s.QuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QuickConnectType: input["QuickConnectType"],
    UserConfig: fromUserQuickConnectConfig(input["UserConfig"]),
    QueueConfig: fromQueueQuickConnectConfig(input["QueueConfig"]),
    PhoneConfig: fromPhoneNumberQuickConnectConfig(input["PhoneConfig"]),
  }
}
function toQuickConnectConfig(root: jsonP.JSONValue): s.QuickConnectConfig {
  return jsonP.readObj({
    required: {
      "QuickConnectType": (x: jsonP.JSONValue) => cmnP.readEnum<s.QuickConnectType>(x),
    },
    optional: {
      "UserConfig": toUserQuickConnectConfig,
      "QueueConfig": toQueueQuickConnectConfig,
      "PhoneConfig": toPhoneNumberQuickConnectConfig,
    },
  }, root);
}

function fromUserQuickConnectConfig(input?: s.UserQuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserId: input["UserId"],
    ContactFlowId: input["ContactFlowId"],
  }
}
function toUserQuickConnectConfig(root: jsonP.JSONValue): s.UserQuickConnectConfig {
  return jsonP.readObj({
    required: {
      "UserId": "s",
      "ContactFlowId": "s",
    },
    optional: {},
  }, root);
}

function fromQueueQuickConnectConfig(input?: s.QueueQuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueueId: input["QueueId"],
    ContactFlowId: input["ContactFlowId"],
  }
}
function toQueueQuickConnectConfig(root: jsonP.JSONValue): s.QueueQuickConnectConfig {
  return jsonP.readObj({
    required: {
      "QueueId": "s",
      "ContactFlowId": "s",
    },
    optional: {},
  }, root);
}

function fromPhoneNumberQuickConnectConfig(input?: s.PhoneNumberQuickConnectConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PhoneNumber: input["PhoneNumber"],
  }
}
function toPhoneNumberQuickConnectConfig(root: jsonP.JSONValue): s.PhoneNumberQuickConnectConfig {
  return jsonP.readObj({
    required: {
      "PhoneNumber": "s",
    },
    optional: {},
  }, root);
}

function fromMediaConcurrency(input?: s.MediaConcurrency | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Channel: input["Channel"],
    Concurrency: input["Concurrency"],
  }
}
function toMediaConcurrency(root: jsonP.JSONValue): s.MediaConcurrency {
  return jsonP.readObj({
    required: {
      "Channel": (x: jsonP.JSONValue) => cmnP.readEnum<s.Channel>(x),
      "Concurrency": "n",
    },
    optional: {},
  }, root);
}

function fromUserIdentityInfo(input?: s.UserIdentityInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FirstName: input["FirstName"],
    LastName: input["LastName"],
    Email: input["Email"],
  }
}
function toUserIdentityInfo(root: jsonP.JSONValue): s.UserIdentityInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "FirstName": "s",
      "LastName": "s",
      "Email": "s",
    },
  }, root);
}

function fromUserPhoneConfig(input?: s.UserPhoneConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PhoneType: input["PhoneType"],
    AutoAccept: input["AutoAccept"],
    AfterContactWorkTimeLimit: input["AfterContactWorkTimeLimit"],
    DeskPhoneNumber: input["DeskPhoneNumber"],
  }
}
function toUserPhoneConfig(root: jsonP.JSONValue): s.UserPhoneConfig {
  return jsonP.readObj({
    required: {
      "PhoneType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneType>(x),
    },
    optional: {
      "AutoAccept": "b",
      "AfterContactWorkTimeLimit": "n",
      "DeskPhoneNumber": "s",
    },
  }, root);
}

function fromFilters(input?: s.Filters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Queues: input["Queues"],
    Channels: input["Channels"],
  }
}

function fromCurrentMetric(input?: s.CurrentMetric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Unit: input["Unit"],
  }
}
function toCurrentMetric(root: jsonP.JSONValue): s.CurrentMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<s.CurrentMetricName>(x),
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.Unit>(x),
    },
  }, root);
}

function fromHistoricalMetric(input?: s.HistoricalMetric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Threshold: fromThreshold(input["Threshold"]),
    Statistic: input["Statistic"],
    Unit: input["Unit"],
  }
}
function toHistoricalMetric(root: jsonP.JSONValue): s.HistoricalMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<s.HistoricalMetricName>(x),
      "Threshold": toThreshold,
      "Statistic": (x: jsonP.JSONValue) => cmnP.readEnum<s.Statistic>(x),
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.Unit>(x),
    },
  }, root);
}

function fromThreshold(input?: s.Threshold | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Comparison: input["Comparison"],
    ThresholdValue: input["ThresholdValue"],
  }
}
function toThreshold(root: jsonP.JSONValue): s.Threshold {
  return jsonP.readObj({
    required: {},
    optional: {
      "Comparison": (x: jsonP.JSONValue) => cmnP.readEnum<s.Comparison>(x),
      "ThresholdValue": "n",
    },
  }, root);
}

function fromParticipantDetails(input?: s.ParticipantDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DisplayName: input["DisplayName"],
  }
}

function fromChatMessage(input?: s.ChatMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ContentType: input["ContentType"],
    Content: input["Content"],
  }
}

function fromVoiceRecordingConfiguration(input?: s.VoiceRecordingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VoiceRecordingTrack: input["VoiceRecordingTrack"],
  }
}

function fromReference(input?: s.Reference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Value: input["Value"],
    Type: input["Type"],
  }
}

function fromHierarchyStructureUpdate(input?: s.HierarchyStructureUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LevelOne: fromHierarchyLevelUpdate(input["LevelOne"]),
    LevelTwo: fromHierarchyLevelUpdate(input["LevelTwo"]),
    LevelThree: fromHierarchyLevelUpdate(input["LevelThree"]),
    LevelFour: fromHierarchyLevelUpdate(input["LevelFour"]),
    LevelFive: fromHierarchyLevelUpdate(input["LevelFive"]),
  }
}

function fromHierarchyLevelUpdate(input?: s.HierarchyLevelUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
  }
}

function toContactFlow(root: jsonP.JSONValue): s.ContactFlow {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ContactFlowType>(x),
      "Description": "s",
      "Content": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toHoursOfOperation(root: jsonP.JSONValue): s.HoursOfOperation {
  return jsonP.readObj({
    required: {},
    optional: {
      "HoursOfOperationId": "s",
      "HoursOfOperationArn": "s",
      "Name": "s",
      "Description": "s",
      "TimeZone": "s",
      "Config": [toHoursOfOperationConfig],
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toHoursOfOperationConfig(root: jsonP.JSONValue): s.HoursOfOperationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Day": (x: jsonP.JSONValue) => cmnP.readEnum<s.HoursOfOperationDays>(x),
      "StartTime": toHoursOfOperationTimeSlice,
      "EndTime": toHoursOfOperationTimeSlice,
    },
  }, root);
}

function toHoursOfOperationTimeSlice(root: jsonP.JSONValue): s.HoursOfOperationTimeSlice {
  return jsonP.readObj({
    required: {},
    optional: {
      "Hours": "n",
      "Minutes": "n",
    },
  }, root);
}

function toInstance(root: jsonP.JSONValue): s.Instance {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "IdentityManagementType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DirectoryType>(x),
      "InstanceAlias": "s",
      "CreatedTime": "d",
      "ServiceRole": "s",
      "InstanceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.InstanceStatus>(x),
      "StatusReason": toInstanceStatusReason,
      "InboundCallsEnabled": "b",
      "OutboundCallsEnabled": "b",
    },
  }, root);
}

function toInstanceStatusReason(root: jsonP.JSONValue): s.InstanceStatusReason {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
    },
  }, root);
}

function toAttribute(root: jsonP.JSONValue): s.Attribute {
  return jsonP.readObj({
    required: {},
    optional: {
      "AttributeType": (x: jsonP.JSONValue) => cmnP.readEnum<s.InstanceAttributeType>(x),
      "Value": "s",
    },
  }, root);
}

function toQueue(root: jsonP.JSONValue): s.Queue {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "QueueArn": "s",
      "QueueId": "s",
      "Description": "s",
      "OutboundCallerConfig": toOutboundCallerConfig,
      "HoursOfOperationId": "s",
      "MaxContacts": "n",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.QueueStatus>(x),
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toQuickConnect(root: jsonP.JSONValue): s.QuickConnect {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuickConnectARN": "s",
      "QuickConnectId": "s",
      "Name": "s",
      "Description": "s",
      "QuickConnectConfig": toQuickConnectConfig,
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toRoutingProfile(root: jsonP.JSONValue): s.RoutingProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "InstanceId": "s",
      "Name": "s",
      "RoutingProfileArn": "s",
      "RoutingProfileId": "s",
      "Description": "s",
      "MediaConcurrencies": [toMediaConcurrency],
      "DefaultOutboundQueueId": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toUser(root: jsonP.JSONValue): s.User {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Username": "s",
      "IdentityInfo": toUserIdentityInfo,
      "PhoneConfig": toUserPhoneConfig,
      "DirectoryUserId": "s",
      "SecurityProfileIds": ["s"],
      "RoutingProfileId": "s",
      "HierarchyGroupId": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toHierarchyGroup(root: jsonP.JSONValue): s.HierarchyGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "LevelId": "s",
      "HierarchyPath": toHierarchyPath,
    },
  }, root);
}

function toHierarchyPath(root: jsonP.JSONValue): s.HierarchyPath {
  return jsonP.readObj({
    required: {},
    optional: {
      "LevelOne": toHierarchyGroupSummary,
      "LevelTwo": toHierarchyGroupSummary,
      "LevelThree": toHierarchyGroupSummary,
      "LevelFour": toHierarchyGroupSummary,
      "LevelFive": toHierarchyGroupSummary,
    },
  }, root);
}

function toHierarchyGroupSummary(root: jsonP.JSONValue): s.HierarchyGroupSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toHierarchyStructure(root: jsonP.JSONValue): s.HierarchyStructure {
  return jsonP.readObj({
    required: {},
    optional: {
      "LevelOne": toHierarchyLevel,
      "LevelTwo": toHierarchyLevel,
      "LevelThree": toHierarchyLevel,
      "LevelFour": toHierarchyLevel,
      "LevelFive": toHierarchyLevel,
    },
  }, root);
}

function toHierarchyLevel(root: jsonP.JSONValue): s.HierarchyLevel {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toCurrentMetricResult(root: jsonP.JSONValue): s.CurrentMetricResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Dimensions": toDimensions,
      "Collections": [toCurrentMetricData],
    },
  }, root);
}

function toDimensions(root: jsonP.JSONValue): s.Dimensions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Queue": toQueueReference,
      "Channel": (x: jsonP.JSONValue) => cmnP.readEnum<s.Channel>(x),
    },
  }, root);
}

function toQueueReference(root: jsonP.JSONValue): s.QueueReference {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
    },
  }, root);
}

function toCurrentMetricData(root: jsonP.JSONValue): s.CurrentMetricData {
  return jsonP.readObj({
    required: {},
    optional: {
      "Metric": toCurrentMetric,
      "Value": "n",
    },
  }, root);
}

function toCredentials(root: jsonP.JSONValue): s.Credentials {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessToken": "s",
      "AccessTokenExpiration": "d",
      "RefreshToken": "s",
      "RefreshTokenExpiration": "d",
    },
  }, root);
}

function toHistoricalMetricResult(root: jsonP.JSONValue): s.HistoricalMetricResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Dimensions": toDimensions,
      "Collections": [toHistoricalMetricData],
    },
  }, root);
}

function toHistoricalMetricData(root: jsonP.JSONValue): s.HistoricalMetricData {
  return jsonP.readObj({
    required: {},
    optional: {
      "Metric": toHistoricalMetric,
      "Value": "n",
    },
  }, root);
}

function toContactFlowSummary(root: jsonP.JSONValue): s.ContactFlowSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "ContactFlowType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ContactFlowType>(x),
    },
  }, root);
}

function toHoursOfOperationSummary(root: jsonP.JSONValue): s.HoursOfOperationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toInstanceSummary(root: jsonP.JSONValue): s.InstanceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "IdentityManagementType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DirectoryType>(x),
      "InstanceAlias": "s",
      "CreatedTime": "d",
      "ServiceRole": "s",
      "InstanceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.InstanceStatus>(x),
      "InboundCallsEnabled": "b",
      "OutboundCallsEnabled": "b",
    },
  }, root);
}

function toIntegrationAssociationSummary(root: jsonP.JSONValue): s.IntegrationAssociationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "IntegrationAssociationId": "s",
      "IntegrationAssociationArn": "s",
      "InstanceId": "s",
      "IntegrationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IntegrationType>(x),
      "IntegrationArn": "s",
      "SourceApplicationUrl": "s",
      "SourceApplicationName": "s",
      "SourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SourceType>(x),
    },
  }, root);
}

function toPhoneNumberSummary(root: jsonP.JSONValue): s.PhoneNumberSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "PhoneNumber": "s",
      "PhoneNumberType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberType>(x),
      "PhoneNumberCountryCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberCountryCode>(x),
    },
  }, root);
}

function toPromptSummary(root: jsonP.JSONValue): s.PromptSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toQuickConnectSummary(root: jsonP.JSONValue): s.QuickConnectSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "QuickConnectType": (x: jsonP.JSONValue) => cmnP.readEnum<s.QuickConnectType>(x),
    },
  }, root);
}

function toQueueSummary(root: jsonP.JSONValue): s.QueueSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
      "QueueType": (x: jsonP.JSONValue) => cmnP.readEnum<s.QueueType>(x),
    },
  }, root);
}

function toRoutingProfileQueueConfigSummary(root: jsonP.JSONValue): s.RoutingProfileQueueConfigSummary {
  return jsonP.readObj({
    required: {
      "QueueId": "s",
      "QueueArn": "s",
      "QueueName": "s",
      "Priority": "n",
      "Delay": "n",
      "Channel": (x: jsonP.JSONValue) => cmnP.readEnum<s.Channel>(x),
    },
    optional: {},
  }, root);
}

function toRoutingProfileSummary(root: jsonP.JSONValue): s.RoutingProfileSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toSecurityKey(root: jsonP.JSONValue): s.SecurityKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationId": "s",
      "Key": "s",
      "CreationTime": "d",
    },
  }, root);
}

function toSecurityProfileSummary(root: jsonP.JSONValue): s.SecurityProfileSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toUseCase(root: jsonP.JSONValue): s.UseCase {
  return jsonP.readObj({
    required: {},
    optional: {
      "UseCaseId": "s",
      "UseCaseArn": "s",
      "UseCaseType": (x: jsonP.JSONValue) => cmnP.readEnum<s.UseCaseType>(x),
    },
  }, root);
}

function toUserSummary(root: jsonP.JSONValue): s.UserSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Arn": "s",
      "Username": "s",
    },
  }, root);
}
