// Autogenerated API client for: Amazon Cognito Sync

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CognitoSync {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CognitoSync.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2014-06-30",
    "endpointPrefix": "cognito-sync",
    "jsonVersion": "1.1",
    "serviceFullName": "Amazon Cognito Sync",
    "serviceId": "Cognito Sync",
    "signatureVersion": "v4",
    "protocol": "rest-json",
    "uid": "cognito-sync-2014-06-30"
  };

  async bulkPublish(
    {abortSignal, ...params}: RequestConfig & s.BulkPublishRequest,
  ): Promise<s.BulkPublishResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "BulkPublish",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/bulkpublish`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
      },
    }, await resp.json());
  }

  async deleteDataset(
    {abortSignal, ...params}: RequestConfig & s.DeleteDatasetRequest,
  ): Promise<s.DeleteDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDataset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Dataset": toDataset,
      },
    }, await resp.json());
  }

  async describeDataset(
    {abortSignal, ...params}: RequestConfig & s.DescribeDatasetRequest,
  ): Promise<s.DescribeDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDataset",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Dataset": toDataset,
      },
    }, await resp.json());
  }

  async describeIdentityPoolUsage(
    {abortSignal, ...params}: RequestConfig & s.DescribeIdentityPoolUsageRequest,
  ): Promise<s.DescribeIdentityPoolUsageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIdentityPoolUsage",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolUsage": toIdentityPoolUsage,
      },
    }, await resp.json());
  }

  async describeIdentityUsage(
    {abortSignal, ...params}: RequestConfig & s.DescribeIdentityUsageRequest,
  ): Promise<s.DescribeIdentityUsageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIdentityUsage",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityUsage": toIdentityUsage,
      },
    }, await resp.json());
  }

  async getBulkPublishDetails(
    {abortSignal, ...params}: RequestConfig & s.GetBulkPublishDetailsRequest,
  ): Promise<s.GetBulkPublishDetailsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBulkPublishDetails",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/getBulkPublishDetails`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "BulkPublishStartTime": "d",
        "BulkPublishCompleteTime": "d",
        "BulkPublishStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.BulkPublishStatus>(x),
        "FailureMessage": "s",
      },
    }, await resp.json());
  }

  async getCognitoEvents(
    {abortSignal, ...params}: RequestConfig & s.GetCognitoEventsRequest,
  ): Promise<s.GetCognitoEventsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCognitoEvents",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/events`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Events": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getIdentityPoolConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetIdentityPoolConfigurationRequest,
  ): Promise<s.GetIdentityPoolConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetIdentityPoolConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "PushSync": toPushSync,
        "CognitoStreams": toCognitoStreams,
      },
    }, await resp.json());
  }

  async listDatasets(
    {abortSignal, ...params}: RequestConfig & s.ListDatasetsRequest,
  ): Promise<s.ListDatasetsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDatasets",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Datasets": [toDataset],
        "Count": "n",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIdentityPoolUsage(
    {abortSignal, ...params}: RequestConfig & s.ListIdentityPoolUsageRequest = {},
  ): Promise<s.ListIdentityPoolUsageResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIdentityPoolUsage",
      method: "GET",
      requestUri: "/identitypools",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolUsages": [toIdentityPoolUsage],
        "MaxResults": "n",
        "Count": "n",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRecords(
    {abortSignal, ...params}: RequestConfig & s.ListRecordsRequest,
  ): Promise<s.ListRecordsResponse> {
    const query = new URLSearchParams;
    if (params["LastSyncCount"] != null) query.set("lastSyncCount", params["LastSyncCount"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["SyncSessionToken"] != null) query.set("syncSessionToken", params["SyncSessionToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRecords",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}/records`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Records": [toRecord],
        "NextToken": "s",
        "Count": "n",
        "DatasetSyncCount": "n",
        "LastModifiedBy": "s",
        "MergedDatasetNames": ["s"],
        "DatasetExists": "b",
        "DatasetDeletedAfterRequestedSyncCount": "b",
        "SyncSessionToken": "s",
      },
    }, await resp.json());
  }

  async registerDevice(
    {abortSignal, ...params}: RequestConfig & s.RegisterDeviceRequest,
  ): Promise<s.RegisterDeviceResponse> {
    const body: jsonP.JSONObject = {
      Platform: params["Platform"],
      Token: params["Token"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDevice",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identity/${params["IdentityId"]}/device`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceId": "s",
      },
    }, await resp.json());
  }

  async setCognitoEvents(
    {abortSignal, ...params}: RequestConfig & s.SetCognitoEventsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Events: params["Events"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetCognitoEvents",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/events`,
      responseCode: 200,
    });
  }

  async setIdentityPoolConfiguration(
    {abortSignal, ...params}: RequestConfig & s.SetIdentityPoolConfigurationRequest,
  ): Promise<s.SetIdentityPoolConfigurationResponse> {
    const body: jsonP.JSONObject = {
      PushSync: fromPushSync(params["PushSync"]),
      CognitoStreams: fromCognitoStreams(params["CognitoStreams"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetIdentityPoolConfiguration",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "PushSync": toPushSync,
        "CognitoStreams": toCognitoStreams,
      },
    }, await resp.json());
  }

  async subscribeToDataset(
    {abortSignal, ...params}: RequestConfig & s.SubscribeToDatasetRequest,
  ): Promise<s.SubscribeToDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "SubscribeToDataset",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}/subscriptions/${params["DeviceId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async unsubscribeFromDataset(
    {abortSignal, ...params}: RequestConfig & s.UnsubscribeFromDatasetRequest,
  ): Promise<s.UnsubscribeFromDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "UnsubscribeFromDataset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}/subscriptions/${params["DeviceId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRecords(
    {abortSignal, ...params}: RequestConfig & s.UpdateRecordsRequest,
  ): Promise<s.UpdateRecordsResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      DeviceId: params["DeviceId"],
      RecordPatches: params["RecordPatches"]?.map(x => fromRecordPatch(x)),
      SyncSessionToken: params["SyncSessionToken"],
    };
    if (params["ClientContext"] != null) headers.append("x-amz-Client-Context", params["ClientContext"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateRecords",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Records": [toRecord],
      },
    }, await resp.json());
  }

}

function fromPushSync(input?: s.PushSync | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApplicationArns: input["ApplicationArns"],
    RoleArn: input["RoleArn"],
  }
}
function toPushSync(root: jsonP.JSONValue): s.PushSync {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationArns": ["s"],
      "RoleArn": "s",
    },
  }, root);
}

function fromCognitoStreams(input?: s.CognitoStreams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StreamName: input["StreamName"],
    RoleArn: input["RoleArn"],
    StreamingStatus: input["StreamingStatus"],
  }
}
function toCognitoStreams(root: jsonP.JSONValue): s.CognitoStreams {
  return jsonP.readObj({
    required: {},
    optional: {
      "StreamName": "s",
      "RoleArn": "s",
      "StreamingStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.StreamingStatus>(x),
    },
  }, root);
}

function fromRecordPatch(input?: s.RecordPatch | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Op: input["Op"],
    Key: input["Key"],
    Value: input["Value"],
    SyncCount: input["SyncCount"],
    DeviceLastModifiedDate: jsonP.serializeDate_unixTimestamp(input["DeviceLastModifiedDate"]),
  }
}

function toDataset(root: jsonP.JSONValue): s.Dataset {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "DatasetName": "s",
      "CreationDate": "d",
      "LastModifiedDate": "d",
      "LastModifiedBy": "s",
      "DataStorage": "n",
      "NumRecords": "n",
    },
  }, root);
}

function toIdentityPoolUsage(root: jsonP.JSONValue): s.IdentityPoolUsage {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityPoolId": "s",
      "SyncSessionsCount": "n",
      "DataStorage": "n",
      "LastModifiedDate": "d",
    },
  }, root);
}

function toIdentityUsage(root: jsonP.JSONValue): s.IdentityUsage {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "IdentityPoolId": "s",
      "LastModifiedDate": "d",
      "DatasetCount": "n",
      "DataStorage": "n",
    },
  }, root);
}

function toRecord(root: jsonP.JSONValue): s.Record {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
      "SyncCount": "n",
      "LastModifiedDate": "d",
      "LastModifiedBy": "s",
      "DeviceLastModifiedDate": "d",
    },
  }, root);
}
