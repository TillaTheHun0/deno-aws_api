// Autogenerated API client for: Amazon Location Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Location {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Location.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-11-19",
    "endpointPrefix": "geo",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Location Service",
    "serviceId": "Location",
    "signatureVersion": "v4",
    "signingName": "geo",
    "uid": "location-2020-11-19"
  };

  async associateTrackerConsumer(
    {abortSignal, ...params}: RequestConfig & AssociateTrackerConsumerRequest,
  ): Promise<AssociateTrackerConsumerResponse> {
    const body: jsonP.JSONObject = {
      ConsumerArn: params["ConsumerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateTrackerConsumer",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}/consumers`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchDeleteGeofence(
    {abortSignal, ...params}: RequestConfig & BatchDeleteGeofenceRequest,
  ): Promise<BatchDeleteGeofenceResponse> {
    const body: jsonP.JSONObject = {
      GeofenceIds: params["GeofenceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeleteGeofence",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}/delete-geofences`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "Errors": [toBatchDeleteGeofenceError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchEvaluateGeofences(
    {abortSignal, ...params}: RequestConfig & BatchEvaluateGeofencesRequest,
  ): Promise<BatchEvaluateGeofencesResponse> {
    const body: jsonP.JSONObject = {
      DevicePositionUpdates: params["DevicePositionUpdates"]?.map(x => fromDevicePositionUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchEvaluateGeofences",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}/positions`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "Errors": [toBatchEvaluateGeofencesError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchGetDevicePosition(
    {abortSignal, ...params}: RequestConfig & BatchGetDevicePositionRequest,
  ): Promise<BatchGetDevicePositionResponse> {
    const body: jsonP.JSONObject = {
      DeviceIds: params["DeviceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetDevicePosition",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}/get-positions`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "DevicePositions": [toDevicePosition],
        "Errors": [toBatchGetDevicePositionError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchPutGeofence(
    {abortSignal, ...params}: RequestConfig & BatchPutGeofenceRequest,
  ): Promise<BatchPutGeofenceResponse> {
    const body: jsonP.JSONObject = {
      Entries: params["Entries"]?.map(x => fromBatchPutGeofenceRequestEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchPutGeofence",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}/put-geofences`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "Errors": [toBatchPutGeofenceError],
        "Successes": [toBatchPutGeofenceSuccess],
      },
      optional: {},
    }, await resp.json());
  }

  async batchUpdateDevicePosition(
    {abortSignal, ...params}: RequestConfig & BatchUpdateDevicePositionRequest,
  ): Promise<BatchUpdateDevicePositionResponse> {
    const body: jsonP.JSONObject = {
      Updates: params["Updates"]?.map(x => fromDevicePositionUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchUpdateDevicePosition",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}/positions`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "Errors": [toBatchUpdateDevicePositionError],
      },
      optional: {},
    }, await resp.json());
  }

  async createGeofenceCollection(
    {abortSignal, ...params}: RequestConfig & CreateGeofenceCollectionRequest,
  ): Promise<CreateGeofenceCollectionResponse> {
    const body: jsonP.JSONObject = {
      CollectionName: params["CollectionName"],
      Description: params["Description"],
      PricingPlan: params["PricingPlan"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGeofenceCollection",
      requestUri: "/geofencing/v0/collections",
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "CollectionArn": "s",
        "CollectionName": "s",
        "CreateTime": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async createMap(
    {abortSignal, ...params}: RequestConfig & CreateMapRequest,
  ): Promise<CreateMapResponse> {
    const body: jsonP.JSONObject = {
      Configuration: fromMapConfiguration(params["Configuration"]),
      Description: params["Description"],
      MapName: params["MapName"],
      PricingPlan: params["PricingPlan"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMap",
      requestUri: "/maps/v0/maps",
      responseCode: 200,
      hostPrefix: `maps.`,
    });
    return jsonP.readObj({
      required: {
        "CreateTime": "d",
        "MapArn": "s",
        "MapName": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createPlaceIndex(
    {abortSignal, ...params}: RequestConfig & CreatePlaceIndexRequest,
  ): Promise<CreatePlaceIndexResponse> {
    const body: jsonP.JSONObject = {
      DataSource: params["DataSource"],
      DataSourceConfiguration: fromDataSourceConfiguration(params["DataSourceConfiguration"]),
      Description: params["Description"],
      IndexName: params["IndexName"],
      PricingPlan: params["PricingPlan"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePlaceIndex",
      requestUri: "/places/v0/indexes",
      responseCode: 200,
      hostPrefix: `places.`,
    });
    return jsonP.readObj({
      required: {
        "CreateTime": "d",
        "IndexArn": "s",
        "IndexName": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createTracker(
    {abortSignal, ...params}: RequestConfig & CreateTrackerRequest,
  ): Promise<CreateTrackerResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      PricingPlan: params["PricingPlan"],
      TrackerName: params["TrackerName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTracker",
      requestUri: "/tracking/v0/trackers",
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "CreateTime": "d",
        "TrackerArn": "s",
        "TrackerName": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteGeofenceCollection(
    {abortSignal, ...params}: RequestConfig & DeleteGeofenceCollectionRequest,
  ): Promise<DeleteGeofenceCollectionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGeofenceCollection",
      method: "DELETE",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteMap(
    {abortSignal, ...params}: RequestConfig & DeleteMapRequest,
  ): Promise<DeleteMapResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMap",
      method: "DELETE",
      requestUri: cmnP.encodePath`/maps/v0/maps/${params["MapName"]}`,
      responseCode: 200,
      hostPrefix: `maps.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePlaceIndex(
    {abortSignal, ...params}: RequestConfig & DeletePlaceIndexRequest,
  ): Promise<DeletePlaceIndexResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePlaceIndex",
      method: "DELETE",
      requestUri: cmnP.encodePath`/places/v0/indexes/${params["IndexName"]}`,
      responseCode: 200,
      hostPrefix: `places.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTracker(
    {abortSignal, ...params}: RequestConfig & DeleteTrackerRequest,
  ): Promise<DeleteTrackerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteTracker",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeGeofenceCollection(
    {abortSignal, ...params}: RequestConfig & DescribeGeofenceCollectionRequest,
  ): Promise<DescribeGeofenceCollectionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeGeofenceCollection",
      method: "GET",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "CollectionArn": "s",
        "CollectionName": "s",
        "CreateTime": "d",
        "Description": "s",
        "UpdateTime": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async describeMap(
    {abortSignal, ...params}: RequestConfig & DescribeMapRequest,
  ): Promise<DescribeMapResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeMap",
      method: "GET",
      requestUri: cmnP.encodePath`/maps/v0/maps/${params["MapName"]}`,
      responseCode: 200,
      hostPrefix: `maps.`,
    });
    return jsonP.readObj({
      required: {
        "Configuration": toMapConfiguration,
        "CreateTime": "d",
        "DataSource": "s",
        "Description": "s",
        "MapArn": "s",
        "MapName": "s",
        "UpdateTime": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async describePlaceIndex(
    {abortSignal, ...params}: RequestConfig & DescribePlaceIndexRequest,
  ): Promise<DescribePlaceIndexResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePlaceIndex",
      method: "GET",
      requestUri: cmnP.encodePath`/places/v0/indexes/${params["IndexName"]}`,
      responseCode: 200,
      hostPrefix: `places.`,
    });
    return jsonP.readObj({
      required: {
        "CreateTime": "d",
        "DataSource": "s",
        "DataSourceConfiguration": toDataSourceConfiguration,
        "Description": "s",
        "IndexArn": "s",
        "IndexName": "s",
        "UpdateTime": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async describeTracker(
    {abortSignal, ...params}: RequestConfig & DescribeTrackerRequest,
  ): Promise<DescribeTrackerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeTracker",
      method: "GET",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "CreateTime": "d",
        "Description": "s",
        "TrackerArn": "s",
        "TrackerName": "s",
        "UpdateTime": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async disassociateTrackerConsumer(
    {abortSignal, ...params}: RequestConfig & DisassociateTrackerConsumerRequest,
  ): Promise<DisassociateTrackerConsumerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateTrackerConsumer",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}/consumers/${params["ConsumerArn"]}`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getDevicePosition(
    {abortSignal, ...params}: RequestConfig & GetDevicePositionRequest,
  ): Promise<GetDevicePositionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDevicePosition",
      method: "GET",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}/devices/${params["DeviceId"]}/positions/latest`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "Position": ["n"],
        "ReceivedTime": "d",
        "SampleTime": "d",
      },
      optional: {
        "DeviceId": "s",
      },
    }, await resp.json());
  }

  async getDevicePositionHistory(
    {abortSignal, ...params}: RequestConfig & GetDevicePositionHistoryRequest,
  ): Promise<GetDevicePositionHistoryResponse> {
    const body: jsonP.JSONObject = {
      EndTimeExclusive: jsonP.serializeDate_iso8601(params["EndTimeExclusive"]),
      NextToken: params["NextToken"],
      StartTimeInclusive: jsonP.serializeDate_iso8601(params["StartTimeInclusive"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevicePositionHistory",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}/devices/${params["DeviceId"]}/list-positions`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "DevicePositions": [toDevicePosition],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getGeofence(
    {abortSignal, ...params}: RequestConfig & GetGeofenceRequest,
  ): Promise<GetGeofenceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGeofence",
      method: "GET",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}/geofences/${params["GeofenceId"]}`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "CreateTime": "d",
        "GeofenceId": "s",
        "Geometry": toGeofenceGeometry,
        "Status": "s",
        "UpdateTime": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async getMapGlyphs(
    {abortSignal, ...params}: RequestConfig & GetMapGlyphsRequest,
  ): Promise<GetMapGlyphsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMapGlyphs",
      method: "GET",
      requestUri: cmnP.encodePath`/maps/v0/maps/${params["MapName"]}/glyphs/${params["FontStack"]}/${params["FontUnicodeRange"]}`,
      responseCode: 200,
      hostPrefix: `maps.`,
    });
  return {
    ContentType: resp.headers.get("Content-Type"),
    Blob: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async getMapSprites(
    {abortSignal, ...params}: RequestConfig & GetMapSpritesRequest,
  ): Promise<GetMapSpritesResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMapSprites",
      method: "GET",
      requestUri: cmnP.encodePath`/maps/v0/maps/${params["MapName"]}/sprites/${params["FileName"]}`,
      responseCode: 200,
      hostPrefix: `maps.`,
    });
  return {
    ContentType: resp.headers.get("Content-Type"),
    Blob: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async getMapStyleDescriptor(
    {abortSignal, ...params}: RequestConfig & GetMapStyleDescriptorRequest,
  ): Promise<GetMapStyleDescriptorResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMapStyleDescriptor",
      method: "GET",
      requestUri: cmnP.encodePath`/maps/v0/maps/${params["MapName"]}/style-descriptor`,
      responseCode: 200,
      hostPrefix: `maps.`,
    });
  return {
    ContentType: resp.headers.get("Content-Type"),
    Blob: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async getMapTile(
    {abortSignal, ...params}: RequestConfig & GetMapTileRequest,
  ): Promise<GetMapTileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMapTile",
      method: "GET",
      requestUri: cmnP.encodePath`/maps/v0/maps/${params["MapName"]}/tiles/${params["Z"]}/${params["X"]}/${params["Y"]}`,
      responseCode: 200,
      hostPrefix: `maps.`,
    });
  return {
    ContentType: resp.headers.get("Content-Type"),
    Blob: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async listGeofenceCollections(
    {abortSignal, ...params}: RequestConfig & ListGeofenceCollectionsRequest = {},
  ): Promise<ListGeofenceCollectionsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGeofenceCollections",
      requestUri: "/geofencing/v0/list-collections",
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "Entries": [toListGeofenceCollectionsResponseEntry],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGeofences(
    {abortSignal, ...params}: RequestConfig & ListGeofencesRequest,
  ): Promise<ListGeofencesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGeofences",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}/list-geofences`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "Entries": [toListGeofenceResponseEntry],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMaps(
    {abortSignal, ...params}: RequestConfig & ListMapsRequest = {},
  ): Promise<ListMapsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMaps",
      requestUri: "/maps/v0/list-maps",
      responseCode: 200,
      hostPrefix: `maps.`,
    });
    return jsonP.readObj({
      required: {
        "Entries": [toListMapsResponseEntry],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPlaceIndexes(
    {abortSignal, ...params}: RequestConfig & ListPlaceIndexesRequest = {},
  ): Promise<ListPlaceIndexesResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPlaceIndexes",
      requestUri: "/places/v0/list-indexes",
      responseCode: 200,
      hostPrefix: `places.`,
    });
    return jsonP.readObj({
      required: {
        "Entries": [toListPlaceIndexesResponseEntry],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTrackerConsumers(
    {abortSignal, ...params}: RequestConfig & ListTrackerConsumersRequest,
  ): Promise<ListTrackerConsumersResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTrackerConsumers",
      requestUri: cmnP.encodePath`/tracking/v0/trackers/${params["TrackerName"]}/list-consumers`,
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "ConsumerArns": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTrackers(
    {abortSignal, ...params}: RequestConfig & ListTrackersRequest = {},
  ): Promise<ListTrackersResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTrackers",
      requestUri: "/tracking/v0/list-trackers",
      responseCode: 200,
      hostPrefix: `tracking.`,
    });
    return jsonP.readObj({
      required: {
        "Entries": [toListTrackersResponseEntry],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putGeofence(
    {abortSignal, ...params}: RequestConfig & PutGeofenceRequest,
  ): Promise<PutGeofenceResponse> {
    const body: jsonP.JSONObject = {
      Geometry: fromGeofenceGeometry(params["Geometry"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutGeofence",
      method: "PUT",
      requestUri: cmnP.encodePath`/geofencing/v0/collections/${params["CollectionName"]}/geofences/${params["GeofenceId"]}`,
      responseCode: 200,
      hostPrefix: `geofencing.`,
    });
    return jsonP.readObj({
      required: {
        "CreateTime": "d",
        "GeofenceId": "s",
        "UpdateTime": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async searchPlaceIndexForPosition(
    {abortSignal, ...params}: RequestConfig & SearchPlaceIndexForPositionRequest,
  ): Promise<SearchPlaceIndexForPositionResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      Position: params["Position"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchPlaceIndexForPosition",
      requestUri: cmnP.encodePath`/places/v0/indexes/${params["IndexName"]}/search/position`,
      responseCode: 200,
      hostPrefix: `places.`,
    });
    return jsonP.readObj({
      required: {
        "Results": [toSearchForPositionResult],
        "Summary": toSearchPlaceIndexForPositionSummary,
      },
      optional: {},
    }, await resp.json());
  }

  async searchPlaceIndexForText(
    {abortSignal, ...params}: RequestConfig & SearchPlaceIndexForTextRequest,
  ): Promise<SearchPlaceIndexForTextResponse> {
    const body: jsonP.JSONObject = {
      BiasPosition: params["BiasPosition"],
      FilterBBox: params["FilterBBox"],
      FilterCountries: params["FilterCountries"],
      MaxResults: params["MaxResults"],
      Text: params["Text"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchPlaceIndexForText",
      requestUri: cmnP.encodePath`/places/v0/indexes/${params["IndexName"]}/search/text`,
      responseCode: 200,
      hostPrefix: `places.`,
    });
    return jsonP.readObj({
      required: {
        "Results": [toSearchForTextResult],
        "Summary": toSearchPlaceIndexForTextSummary,
      },
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateTrackerConsumerRequest {
  ConsumerArn: string;
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface BatchDeleteGeofenceRequest {
  CollectionName: string;
  GeofenceIds: string[];
}

// refs: 1 - tags: named, input
export interface BatchEvaluateGeofencesRequest {
  CollectionName: string;
  DevicePositionUpdates: DevicePositionUpdate[];
}

// refs: 1 - tags: named, input
export interface BatchGetDevicePositionRequest {
  DeviceIds: string[];
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface BatchPutGeofenceRequest {
  CollectionName: string;
  Entries: BatchPutGeofenceRequestEntry[];
}

// refs: 1 - tags: named, input
export interface BatchUpdateDevicePositionRequest {
  TrackerName: string;
  Updates: DevicePositionUpdate[];
}

// refs: 1 - tags: named, input
export interface CreateGeofenceCollectionRequest {
  CollectionName: string;
  Description?: string | null;
  PricingPlan: PricingPlan;
}

// refs: 1 - tags: named, input
export interface CreateMapRequest {
  Configuration: MapConfiguration;
  Description?: string | null;
  MapName: string;
  PricingPlan: PricingPlan;
}

// refs: 1 - tags: named, input
export interface CreatePlaceIndexRequest {
  DataSource: string;
  DataSourceConfiguration?: DataSourceConfiguration | null;
  Description?: string | null;
  IndexName: string;
  PricingPlan: PricingPlan;
}

// refs: 1 - tags: named, input
export interface CreateTrackerRequest {
  Description?: string | null;
  PricingPlan: PricingPlan;
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface DeleteGeofenceCollectionRequest {
  CollectionName: string;
}

// refs: 1 - tags: named, input
export interface DeleteMapRequest {
  MapName: string;
}

// refs: 1 - tags: named, input
export interface DeletePlaceIndexRequest {
  IndexName: string;
}

// refs: 1 - tags: named, input
export interface DeleteTrackerRequest {
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface DescribeGeofenceCollectionRequest {
  CollectionName: string;
}

// refs: 1 - tags: named, input
export interface DescribeMapRequest {
  MapName: string;
}

// refs: 1 - tags: named, input
export interface DescribePlaceIndexRequest {
  IndexName: string;
}

// refs: 1 - tags: named, input
export interface DescribeTrackerRequest {
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface DisassociateTrackerConsumerRequest {
  ConsumerArn: string;
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface GetDevicePositionRequest {
  DeviceId: string;
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface GetDevicePositionHistoryRequest {
  DeviceId: string;
  EndTimeExclusive?: Date | number | null;
  NextToken?: string | null;
  StartTimeInclusive?: Date | number | null;
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface GetGeofenceRequest {
  CollectionName: string;
  GeofenceId: string;
}

// refs: 1 - tags: named, input
export interface GetMapGlyphsRequest {
  FontStack: string;
  FontUnicodeRange: string;
  MapName: string;
}

// refs: 1 - tags: named, input
export interface GetMapSpritesRequest {
  FileName: string;
  MapName: string;
}

// refs: 1 - tags: named, input
export interface GetMapStyleDescriptorRequest {
  MapName: string;
}

// refs: 1 - tags: named, input
export interface GetMapTileRequest {
  MapName: string;
  X: string;
  Y: string;
  Z: string;
}

// refs: 1 - tags: named, input
export interface ListGeofenceCollectionsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGeofencesRequest {
  CollectionName: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListMapsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPlaceIndexesRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTrackerConsumersRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  TrackerName: string;
}

// refs: 1 - tags: named, input
export interface ListTrackersRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PutGeofenceRequest {
  CollectionName: string;
  GeofenceId: string;
  Geometry: GeofenceGeometry;
}

// refs: 1 - tags: named, input
export interface SearchPlaceIndexForPositionRequest {
  IndexName: string;
  MaxResults?: number | null;
  Position: number[];
}

// refs: 1 - tags: named, input
export interface SearchPlaceIndexForTextRequest {
  BiasPosition?: number[] | null;
  FilterBBox?: number[] | null;
  FilterCountries?: string[] | null;
  IndexName: string;
  MaxResults?: number | null;
  Text: string;
}

// refs: 1 - tags: named, output
export interface AssociateTrackerConsumerResponse {
}

// refs: 1 - tags: named, output
export interface BatchDeleteGeofenceResponse {
  Errors: BatchDeleteGeofenceError[];
}

// refs: 1 - tags: named, output
export interface BatchEvaluateGeofencesResponse {
  Errors: BatchEvaluateGeofencesError[];
}

// refs: 1 - tags: named, output
export interface BatchGetDevicePositionResponse {
  DevicePositions: DevicePosition[];
  Errors: BatchGetDevicePositionError[];
}

// refs: 1 - tags: named, output
export interface BatchPutGeofenceResponse {
  Errors: BatchPutGeofenceError[];
  Successes: BatchPutGeofenceSuccess[];
}

// refs: 1 - tags: named, output
export interface BatchUpdateDevicePositionResponse {
  Errors: BatchUpdateDevicePositionError[];
}

// refs: 1 - tags: named, output
export interface CreateGeofenceCollectionResponse {
  CollectionArn: string;
  CollectionName: string;
  CreateTime: Date | number;
}

// refs: 1 - tags: named, output
export interface CreateMapResponse {
  CreateTime: Date | number;
  MapArn: string;
  MapName: string;
}

// refs: 1 - tags: named, output
export interface CreatePlaceIndexResponse {
  CreateTime: Date | number;
  IndexArn: string;
  IndexName: string;
}

// refs: 1 - tags: named, output
export interface CreateTrackerResponse {
  CreateTime: Date | number;
  TrackerArn: string;
  TrackerName: string;
}

// refs: 1 - tags: named, output
export interface DeleteGeofenceCollectionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteMapResponse {
}

// refs: 1 - tags: named, output
export interface DeletePlaceIndexResponse {
}

// refs: 1 - tags: named, output
export interface DeleteTrackerResponse {
}

// refs: 1 - tags: named, output
export interface DescribeGeofenceCollectionResponse {
  CollectionArn: string;
  CollectionName: string;
  CreateTime: Date | number;
  Description: string;
  UpdateTime: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribeMapResponse {
  Configuration: MapConfiguration;
  CreateTime: Date | number;
  DataSource: string;
  Description: string;
  MapArn: string;
  MapName: string;
  UpdateTime: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribePlaceIndexResponse {
  CreateTime: Date | number;
  DataSource: string;
  DataSourceConfiguration: DataSourceConfiguration;
  Description: string;
  IndexArn: string;
  IndexName: string;
  UpdateTime: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribeTrackerResponse {
  CreateTime: Date | number;
  Description: string;
  TrackerArn: string;
  TrackerName: string;
  UpdateTime: Date | number;
}

// refs: 1 - tags: named, output
export interface DisassociateTrackerConsumerResponse {
}

// refs: 1 - tags: named, output
export interface GetDevicePositionResponse {
  DeviceId?: string | null;
  Position: number[];
  ReceivedTime: Date | number;
  SampleTime: Date | number;
}

// refs: 1 - tags: named, output
export interface GetDevicePositionHistoryResponse {
  DevicePositions: DevicePosition[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetGeofenceResponse {
  CreateTime: Date | number;
  GeofenceId: string;
  Geometry: GeofenceGeometry;
  Status: string;
  UpdateTime: Date | number;
}

// refs: 1 - tags: named, output
export interface GetMapGlyphsResponse {
  Blob?: Uint8Array | string | null;
  ContentType?: string | null;
}

// refs: 1 - tags: named, output
export interface GetMapSpritesResponse {
  Blob?: Uint8Array | string | null;
  ContentType?: string | null;
}

// refs: 1 - tags: named, output
export interface GetMapStyleDescriptorResponse {
  Blob?: Uint8Array | string | null;
  ContentType?: string | null;
}

// refs: 1 - tags: named, output
export interface GetMapTileResponse {
  Blob?: Uint8Array | string | null;
  ContentType?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGeofenceCollectionsResponse {
  Entries: ListGeofenceCollectionsResponseEntry[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGeofencesResponse {
  Entries: ListGeofenceResponseEntry[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMapsResponse {
  Entries: ListMapsResponseEntry[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPlaceIndexesResponse {
  Entries: ListPlaceIndexesResponseEntry[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTrackerConsumersResponse {
  ConsumerArns: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTrackersResponse {
  Entries: ListTrackersResponseEntry[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutGeofenceResponse {
  CreateTime: Date | number;
  GeofenceId: string;
  UpdateTime: Date | number;
}

// refs: 1 - tags: named, output
export interface SearchPlaceIndexForPositionResponse {
  Results: SearchForPositionResult[];
  Summary: SearchPlaceIndexForPositionSummary;
}

// refs: 1 - tags: named, output
export interface SearchPlaceIndexForTextResponse {
  Results: SearchForTextResult[];
  Summary: SearchPlaceIndexForTextSummary;
}

// refs: 2 - tags: input, named, interface
export interface DevicePositionUpdate {
  DeviceId: string;
  Position: number[];
  SampleTime: Date | number;
}
function fromDevicePositionUpdate(input?: DevicePositionUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeviceId: input["DeviceId"],
    Position: input["Position"],
    SampleTime: jsonP.serializeDate_iso8601(input["SampleTime"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface BatchPutGeofenceRequestEntry {
  GeofenceId: string;
  Geometry: GeofenceGeometry;
}
function fromBatchPutGeofenceRequestEntry(input?: BatchPutGeofenceRequestEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GeofenceId: input["GeofenceId"],
    Geometry: fromGeofenceGeometry(input["Geometry"]),
  }
}

// refs: 4 - tags: input, named, interface, output
export interface GeofenceGeometry {
  Polygon?: number[][][] | null;
}
function fromGeofenceGeometry(input?: GeofenceGeometry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Polygon: input["Polygon"],
  }
}
function toGeofenceGeometry(root: jsonP.JSONValue): GeofenceGeometry {
  return jsonP.readObj({
    required: {},
    optional: {
      "Polygon": [x => jsonP.readList(l => Array.isArray(l) ? l.map(Number) : [], x)],
    },
  }, root);
}

// refs: 4 - tags: input, named, enum
export type PricingPlan =
| "RequestBasedUsage"
| "MobileAssetTracking"
| "MobileAssetManagement"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface MapConfiguration {
  Style: string;
}
function fromMapConfiguration(input?: MapConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Style: input["Style"],
  }
}
function toMapConfiguration(root: jsonP.JSONValue): MapConfiguration {
  return jsonP.readObj({
    required: {
      "Style": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DataSourceConfiguration {
  IntendedUse?: IntendedUse | null;
}
function fromDataSourceConfiguration(input?: DataSourceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IntendedUse: input["IntendedUse"],
  }
}
function toDataSourceConfiguration(root: jsonP.JSONValue): DataSourceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "IntendedUse": (x: jsonP.JSONValue) => cmnP.readEnum<IntendedUse>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type IntendedUse =
| "SingleUse"
| "Storage"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchDeleteGeofenceError {
  Error: BatchItemError;
  GeofenceId: string;
}
function toBatchDeleteGeofenceError(root: jsonP.JSONValue): BatchDeleteGeofenceError {
  return jsonP.readObj({
    required: {
      "Error": toBatchItemError,
      "GeofenceId": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface BatchItemError {
  Code?: BatchItemErrorCode | null;
  Message?: string | null;
}
function toBatchItemError(root: jsonP.JSONValue): BatchItemError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": (x: jsonP.JSONValue) => cmnP.readEnum<BatchItemErrorCode>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type BatchItemErrorCode =
| "AccessDeniedError"
| "ConflictError"
| "InternalServerError"
| "ResourceNotFoundError"
| "ThrottlingError"
| "ValidationError"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchEvaluateGeofencesError {
  DeviceId: string;
  Error: BatchItemError;
  SampleTime: Date | number;
}
function toBatchEvaluateGeofencesError(root: jsonP.JSONValue): BatchEvaluateGeofencesError {
  return jsonP.readObj({
    required: {
      "DeviceId": "s",
      "Error": toBatchItemError,
      "SampleTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DevicePosition {
  DeviceId?: string | null;
  Position: number[];
  ReceivedTime: Date | number;
  SampleTime: Date | number;
}
function toDevicePosition(root: jsonP.JSONValue): DevicePosition {
  return jsonP.readObj({
    required: {
      "Position": ["n"],
      "ReceivedTime": "d",
      "SampleTime": "d",
    },
    optional: {
      "DeviceId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchGetDevicePositionError {
  DeviceId: string;
  Error: BatchItemError;
}
function toBatchGetDevicePositionError(root: jsonP.JSONValue): BatchGetDevicePositionError {
  return jsonP.readObj({
    required: {
      "DeviceId": "s",
      "Error": toBatchItemError,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchPutGeofenceError {
  Error: BatchItemError;
  GeofenceId: string;
}
function toBatchPutGeofenceError(root: jsonP.JSONValue): BatchPutGeofenceError {
  return jsonP.readObj({
    required: {
      "Error": toBatchItemError,
      "GeofenceId": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchPutGeofenceSuccess {
  CreateTime: Date | number;
  GeofenceId: string;
  UpdateTime: Date | number;
}
function toBatchPutGeofenceSuccess(root: jsonP.JSONValue): BatchPutGeofenceSuccess {
  return jsonP.readObj({
    required: {
      "CreateTime": "d",
      "GeofenceId": "s",
      "UpdateTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchUpdateDevicePositionError {
  DeviceId: string;
  Error: BatchItemError;
  SampleTime: Date | number;
}
function toBatchUpdateDevicePositionError(root: jsonP.JSONValue): BatchUpdateDevicePositionError {
  return jsonP.readObj({
    required: {
      "DeviceId": "s",
      "Error": toBatchItemError,
      "SampleTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListGeofenceCollectionsResponseEntry {
  CollectionName: string;
  CreateTime: Date | number;
  Description: string;
  UpdateTime: Date | number;
}
function toListGeofenceCollectionsResponseEntry(root: jsonP.JSONValue): ListGeofenceCollectionsResponseEntry {
  return jsonP.readObj({
    required: {
      "CollectionName": "s",
      "CreateTime": "d",
      "Description": "s",
      "UpdateTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListGeofenceResponseEntry {
  CreateTime: Date | number;
  GeofenceId: string;
  Geometry: GeofenceGeometry;
  Status: string;
  UpdateTime: Date | number;
}
function toListGeofenceResponseEntry(root: jsonP.JSONValue): ListGeofenceResponseEntry {
  return jsonP.readObj({
    required: {
      "CreateTime": "d",
      "GeofenceId": "s",
      "Geometry": toGeofenceGeometry,
      "Status": "s",
      "UpdateTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListMapsResponseEntry {
  CreateTime: Date | number;
  DataSource: string;
  Description: string;
  MapName: string;
  UpdateTime: Date | number;
}
function toListMapsResponseEntry(root: jsonP.JSONValue): ListMapsResponseEntry {
  return jsonP.readObj({
    required: {
      "CreateTime": "d",
      "DataSource": "s",
      "Description": "s",
      "MapName": "s",
      "UpdateTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListPlaceIndexesResponseEntry {
  CreateTime: Date | number;
  DataSource: string;
  Description: string;
  IndexName: string;
  UpdateTime: Date | number;
}
function toListPlaceIndexesResponseEntry(root: jsonP.JSONValue): ListPlaceIndexesResponseEntry {
  return jsonP.readObj({
    required: {
      "CreateTime": "d",
      "DataSource": "s",
      "Description": "s",
      "IndexName": "s",
      "UpdateTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListTrackersResponseEntry {
  CreateTime: Date | number;
  Description: string;
  TrackerName: string;
  UpdateTime: Date | number;
}
function toListTrackersResponseEntry(root: jsonP.JSONValue): ListTrackersResponseEntry {
  return jsonP.readObj({
    required: {
      "CreateTime": "d",
      "Description": "s",
      "TrackerName": "s",
      "UpdateTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SearchForPositionResult {
  Place: Place;
}
function toSearchForPositionResult(root: jsonP.JSONValue): SearchForPositionResult {
  return jsonP.readObj({
    required: {
      "Place": toPlace,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Place {
  AddressNumber?: string | null;
  Country?: string | null;
  Geometry: PlaceGeometry;
  Label?: string | null;
  Municipality?: string | null;
  Neighborhood?: string | null;
  PostalCode?: string | null;
  Region?: string | null;
  Street?: string | null;
  SubRegion?: string | null;
}
function toPlace(root: jsonP.JSONValue): Place {
  return jsonP.readObj({
    required: {
      "Geometry": toPlaceGeometry,
    },
    optional: {
      "AddressNumber": "s",
      "Country": "s",
      "Label": "s",
      "Municipality": "s",
      "Neighborhood": "s",
      "PostalCode": "s",
      "Region": "s",
      "Street": "s",
      "SubRegion": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PlaceGeometry {
  Point?: number[] | null;
}
function toPlaceGeometry(root: jsonP.JSONValue): PlaceGeometry {
  return jsonP.readObj({
    required: {},
    optional: {
      "Point": ["n"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SearchPlaceIndexForPositionSummary {
  DataSource: string;
  MaxResults?: number | null;
  Position: number[];
}
function toSearchPlaceIndexForPositionSummary(root: jsonP.JSONValue): SearchPlaceIndexForPositionSummary {
  return jsonP.readObj({
    required: {
      "DataSource": "s",
      "Position": ["n"],
    },
    optional: {
      "MaxResults": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SearchForTextResult {
  Place: Place;
}
function toSearchForTextResult(root: jsonP.JSONValue): SearchForTextResult {
  return jsonP.readObj({
    required: {
      "Place": toPlace,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SearchPlaceIndexForTextSummary {
  BiasPosition?: number[] | null;
  DataSource: string;
  FilterBBox?: number[] | null;
  FilterCountries?: string[] | null;
  MaxResults?: number | null;
  ResultBBox?: number[] | null;
  Text: string;
}
function toSearchPlaceIndexForTextSummary(root: jsonP.JSONValue): SearchPlaceIndexForTextSummary {
  return jsonP.readObj({
    required: {
      "DataSource": "s",
      "Text": "s",
    },
    optional: {
      "BiasPosition": ["n"],
      "FilterBBox": ["n"],
      "FilterCountries": ["s"],
      "MaxResults": "n",
      "ResultBBox": ["n"],
    },
  }, root);
}
