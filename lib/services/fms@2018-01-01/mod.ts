// Autogenerated API client for: Firewall Management Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class FMS {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(FMS.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-01-01",
    "endpointPrefix": "fms",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "FMS",
    "serviceFullName": "Firewall Management Service",
    "serviceId": "FMS",
    "signatureVersion": "v4",
    "targetPrefix": "AWSFMS_20180101",
    "uid": "fms-2018-01-01"
  };

  async associateAdminAccount(
    {abortSignal, ...params}: RequestConfig & AssociateAdminAccountRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AdminAccount: params["AdminAccount"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateAdminAccount",
    });
  }

  async deleteAppsList(
    {abortSignal, ...params}: RequestConfig & DeleteAppsListRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ListId: params["ListId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAppsList",
    });
  }

  async deleteNotificationChannel(
    {abortSignal, ...params}: RequestConfig & DeleteNotificationChannelRequest = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNotificationChannel",
    });
  }

  async deletePolicy(
    {abortSignal, ...params}: RequestConfig & DeletePolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      DeleteAllPolicyResources: params["DeleteAllPolicyResources"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePolicy",
    });
  }

  async deleteProtocolsList(
    {abortSignal, ...params}: RequestConfig & DeleteProtocolsListRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ListId: params["ListId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProtocolsList",
    });
  }

  async disassociateAdminAccount(
    {abortSignal, ...params}: RequestConfig & DisassociateAdminAccountRequest = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateAdminAccount",
    });
  }

  async getAdminAccount(
    {abortSignal, ...params}: RequestConfig & GetAdminAccountRequest = {},
  ): Promise<GetAdminAccountResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAdminAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AdminAccount": "s",
        "RoleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AccountRoleStatus>(x),
      },
    }, await resp.json());
  }

  async getAppsList(
    {abortSignal, ...params}: RequestConfig & GetAppsListRequest,
  ): Promise<GetAppsListResponse> {
    const body: jsonP.JSONObject = {
      ListId: params["ListId"],
      DefaultList: params["DefaultList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAppsList",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppsList": toAppsListData,
        "AppsListArn": "s",
      },
    }, await resp.json());
  }

  async getComplianceDetail(
    {abortSignal, ...params}: RequestConfig & GetComplianceDetailRequest,
  ): Promise<GetComplianceDetailResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      MemberAccount: params["MemberAccount"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceDetail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PolicyComplianceDetail": toPolicyComplianceDetail,
      },
    }, await resp.json());
  }

  async getNotificationChannel(
    {abortSignal, ...params}: RequestConfig & GetNotificationChannelRequest = {},
  ): Promise<GetNotificationChannelResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetNotificationChannel",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SnsTopicArn": "s",
        "SnsRoleName": "s",
      },
    }, await resp.json());
  }

  async getPolicy(
    {abortSignal, ...params}: RequestConfig & GetPolicyRequest,
  ): Promise<GetPolicyResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
        "PolicyArn": "s",
      },
    }, await resp.json());
  }

  async getProtectionStatus(
    {abortSignal, ...params}: RequestConfig & GetProtectionStatusRequest,
  ): Promise<GetProtectionStatusResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      MemberAccountId: params["MemberAccountId"],
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProtectionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AdminAccountId": "s",
        "ServiceType": (x: jsonP.JSONValue) => cmnP.readEnum<SecurityServiceType>(x),
        "Data": "s",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getProtocolsList(
    {abortSignal, ...params}: RequestConfig & GetProtocolsListRequest,
  ): Promise<GetProtocolsListResponse> {
    const body: jsonP.JSONObject = {
      ListId: params["ListId"],
      DefaultList: params["DefaultList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProtocolsList",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProtocolsList": toProtocolsListData,
        "ProtocolsListArn": "s",
      },
    }, await resp.json());
  }

  async getViolationDetails(
    {abortSignal, ...params}: RequestConfig & GetViolationDetailsRequest,
  ): Promise<GetViolationDetailsResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      MemberAccount: params["MemberAccount"],
      ResourceId: params["ResourceId"],
      ResourceType: params["ResourceType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetViolationDetails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ViolationDetail": toViolationDetail,
      },
    }, await resp.json());
  }

  async listAppsLists(
    {abortSignal, ...params}: RequestConfig & ListAppsListsRequest,
  ): Promise<ListAppsListsResponse> {
    const body: jsonP.JSONObject = {
      DefaultLists: params["DefaultLists"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAppsLists",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppsLists": [toAppsListDataSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listComplianceStatus(
    {abortSignal, ...params}: RequestConfig & ListComplianceStatusRequest,
  ): Promise<ListComplianceStatusResponse> {
    const body: jsonP.JSONObject = {
      PolicyId: params["PolicyId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListComplianceStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PolicyComplianceStatusList": [toPolicyComplianceStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMemberAccounts(
    {abortSignal, ...params}: RequestConfig & ListMemberAccountsRequest = {},
  ): Promise<ListMemberAccountsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMemberAccounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MemberAccounts": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPolicies(
    {abortSignal, ...params}: RequestConfig & ListPoliciesRequest = {},
  ): Promise<ListPoliciesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPolicies",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PolicyList": [toPolicySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProtocolsLists(
    {abortSignal, ...params}: RequestConfig & ListProtocolsListsRequest,
  ): Promise<ListProtocolsListsResponse> {
    const body: jsonP.JSONObject = {
      DefaultLists: params["DefaultLists"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProtocolsLists",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProtocolsLists": [toProtocolsListDataSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagList": [toTag],
      },
    }, await resp.json());
  }

  async putAppsList(
    {abortSignal, ...params}: RequestConfig & PutAppsListRequest,
  ): Promise<PutAppsListResponse> {
    const body: jsonP.JSONObject = {
      AppsList: fromAppsListData(params["AppsList"]),
      TagList: params["TagList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAppsList",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppsList": toAppsListData,
        "AppsListArn": "s",
      },
    }, await resp.json());
  }

  async putNotificationChannel(
    {abortSignal, ...params}: RequestConfig & PutNotificationChannelRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      SnsTopicArn: params["SnsTopicArn"],
      SnsRoleName: params["SnsRoleName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutNotificationChannel",
    });
  }

  async putPolicy(
    {abortSignal, ...params}: RequestConfig & PutPolicyRequest,
  ): Promise<PutPolicyResponse> {
    const body: jsonP.JSONObject = {
      Policy: fromPolicy(params["Policy"]),
      TagList: params["TagList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": toPolicy,
        "PolicyArn": "s",
      },
    }, await resp.json());
  }

  async putProtocolsList(
    {abortSignal, ...params}: RequestConfig & PutProtocolsListRequest,
  ): Promise<PutProtocolsListResponse> {
    const body: jsonP.JSONObject = {
      ProtocolsList: fromProtocolsListData(params["ProtocolsList"]),
      TagList: params["TagList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutProtocolsList",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProtocolsList": toProtocolsListData,
        "ProtocolsListArn": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagList: params["TagList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateAdminAccountRequest {
  AdminAccount: string;
}

// refs: 1 - tags: named, input
export interface DeleteAppsListRequest {
  ListId: string;
}

// refs: 1 - tags: named, input
export interface DeleteNotificationChannelRequest {
}

// refs: 1 - tags: named, input
export interface DeletePolicyRequest {
  PolicyId: string;
  DeleteAllPolicyResources?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteProtocolsListRequest {
  ListId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateAdminAccountRequest {
}

// refs: 1 - tags: named, input
export interface GetAdminAccountRequest {
}

// refs: 1 - tags: named, input
export interface GetAppsListRequest {
  ListId: string;
  DefaultList?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetComplianceDetailRequest {
  PolicyId: string;
  MemberAccount: string;
}

// refs: 1 - tags: named, input
export interface GetNotificationChannelRequest {
}

// refs: 1 - tags: named, input
export interface GetPolicyRequest {
  PolicyId: string;
}

// refs: 1 - tags: named, input
export interface GetProtectionStatusRequest {
  PolicyId: string;
  MemberAccountId?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetProtocolsListRequest {
  ListId: string;
  DefaultList?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetViolationDetailsRequest {
  PolicyId: string;
  MemberAccount: string;
  ResourceId: string;
  ResourceType: string;
}

// refs: 1 - tags: named, input
export interface ListAppsListsRequest {
  DefaultLists?: boolean | null;
  NextToken?: string | null;
  MaxResults: number;
}

// refs: 1 - tags: named, input
export interface ListComplianceStatusRequest {
  PolicyId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListMemberAccountsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPoliciesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListProtocolsListsRequest {
  DefaultLists?: boolean | null;
  NextToken?: string | null;
  MaxResults: number;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutAppsListRequest {
  AppsList: AppsListData;
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutNotificationChannelRequest {
  SnsTopicArn: string;
  SnsRoleName: string;
}

// refs: 1 - tags: named, input
export interface PutPolicyRequest {
  Policy: Policy;
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutProtocolsListRequest {
  ProtocolsList: ProtocolsListData;
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  TagList: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, output
export interface GetAdminAccountResponse {
  AdminAccount?: string | null;
  RoleStatus?: AccountRoleStatus | null;
}

// refs: 1 - tags: named, output
export interface GetAppsListResponse {
  AppsList?: AppsListData | null;
  AppsListArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetComplianceDetailResponse {
  PolicyComplianceDetail?: PolicyComplianceDetail | null;
}

// refs: 1 - tags: named, output
export interface GetNotificationChannelResponse {
  SnsTopicArn?: string | null;
  SnsRoleName?: string | null;
}

// refs: 1 - tags: named, output
export interface GetPolicyResponse {
  Policy?: Policy | null;
  PolicyArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetProtectionStatusResponse {
  AdminAccountId?: string | null;
  ServiceType?: SecurityServiceType | null;
  Data?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetProtocolsListResponse {
  ProtocolsList?: ProtocolsListData | null;
  ProtocolsListArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetViolationDetailsResponse {
  ViolationDetail?: ViolationDetail | null;
}

// refs: 1 - tags: named, output
export interface ListAppsListsResponse {
  AppsLists?: AppsListDataSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListComplianceStatusResponse {
  PolicyComplianceStatusList?: PolicyComplianceStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMemberAccountsResponse {
  MemberAccounts?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPoliciesResponse {
  PolicyList?: PolicySummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProtocolsListsResponse {
  ProtocolsLists?: ProtocolsListDataSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface PutAppsListResponse {
  AppsList?: AppsListData | null;
  AppsListArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutPolicyResponse {
  Policy?: Policy | null;
  PolicyArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutProtocolsListResponse {
  ProtocolsList?: ProtocolsListData | null;
  ProtocolsListArn?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 3 - tags: input, named, interface, output
export interface AppsListData {
  ListId?: string | null;
  ListName: string;
  ListUpdateToken?: string | null;
  CreateTime?: Date | number | null;
  LastUpdateTime?: Date | number | null;
  AppsList: App[];
  PreviousAppsList?: { [key: string]: App[] | null | undefined } | null;
}
function fromAppsListData(input?: AppsListData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ListId: input["ListId"],
    ListName: input["ListName"],
    ListUpdateToken: input["ListUpdateToken"],
    CreateTime: jsonP.serializeDate_unixTimestamp(input["CreateTime"]),
    LastUpdateTime: jsonP.serializeDate_unixTimestamp(input["LastUpdateTime"]),
    AppsList: input["AppsList"]?.map(x => fromApp(x)),
    PreviousAppsList: jsonP.serializeMap(input["PreviousAppsList"], x => x?.map(fromApp)),
  }
}
function toAppsListData(root: jsonP.JSONValue): AppsListData {
  return jsonP.readObj({
    required: {
      "ListName": "s",
      "AppsList": [toApp],
    },
    optional: {
      "ListId": "s",
      "ListUpdateToken": "s",
      "CreateTime": "d",
      "LastUpdateTime": "d",
      "PreviousAppsList": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toApp) : [], x),
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface App {
  AppName: string;
  Protocol: string;
  Port: number;
}
function fromApp(input?: App | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppName: input["AppName"],
    Protocol: input["Protocol"],
    Port: input["Port"],
  }
}
function toApp(root: jsonP.JSONValue): App {
  return jsonP.readObj({
    required: {
      "AppName": "s",
      "Protocol": "s",
      "Port": "n",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Policy {
  PolicyId?: string | null;
  PolicyName: string;
  PolicyUpdateToken?: string | null;
  SecurityServicePolicyData: SecurityServicePolicyData;
  ResourceType: string;
  ResourceTypeList?: string[] | null;
  ResourceTags?: ResourceTag[] | null;
  ExcludeResourceTags: boolean;
  RemediationEnabled: boolean;
  IncludeMap?: { [key in CustomerPolicyScopeIdType]: string[] | null | undefined } | null;
  ExcludeMap?: { [key in CustomerPolicyScopeIdType]: string[] | null | undefined } | null;
}
function fromPolicy(input?: Policy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PolicyId: input["PolicyId"],
    PolicyName: input["PolicyName"],
    PolicyUpdateToken: input["PolicyUpdateToken"],
    SecurityServicePolicyData: fromSecurityServicePolicyData(input["SecurityServicePolicyData"]),
    ResourceType: input["ResourceType"],
    ResourceTypeList: input["ResourceTypeList"],
    ResourceTags: input["ResourceTags"]?.map(x => fromResourceTag(x)),
    ExcludeResourceTags: input["ExcludeResourceTags"],
    RemediationEnabled: input["RemediationEnabled"],
    IncludeMap: input["IncludeMap"],
    ExcludeMap: input["ExcludeMap"],
  }
}
function toPolicy(root: jsonP.JSONValue): Policy {
  return jsonP.readObj({
    required: {
      "PolicyName": "s",
      "SecurityServicePolicyData": toSecurityServicePolicyData,
      "ResourceType": "s",
      "ExcludeResourceTags": "b",
      "RemediationEnabled": "b",
    },
    optional: {
      "PolicyId": "s",
      "PolicyUpdateToken": "s",
      "ResourceTypeList": ["s"],
      "ResourceTags": [toResourceTag],
      "IncludeMap": x => jsonP.readMap(x => cmnP.readEnumReq<CustomerPolicyScopeIdType>(x), l => Array.isArray(l) ? l.map(String) : [], x),
      "ExcludeMap": x => jsonP.readMap(x => cmnP.readEnumReq<CustomerPolicyScopeIdType>(x), l => Array.isArray(l) ? l.map(String) : [], x),
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SecurityServicePolicyData {
  Type: SecurityServiceType;
  ManagedServiceData?: string | null;
}
function fromSecurityServicePolicyData(input?: SecurityServicePolicyData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    ManagedServiceData: input["ManagedServiceData"],
  }
}
function toSecurityServicePolicyData(root: jsonP.JSONValue): SecurityServicePolicyData {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<SecurityServiceType>(x),
    },
    optional: {
      "ManagedServiceData": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type SecurityServiceType =
| "WAF"
| "WAFV2"
| "SHIELD_ADVANCED"
| "SECURITY_GROUPS_COMMON"
| "SECURITY_GROUPS_CONTENT_AUDIT"
| "SECURITY_GROUPS_USAGE_AUDIT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ResourceTag {
  Key: string;
  Value?: string | null;
}
function fromResourceTag(input?: ResourceTag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toResourceTag(root: jsonP.JSONValue): ResourceTag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type CustomerPolicyScopeIdType =
| "ACCOUNT"
| "ORG_UNIT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ProtocolsListData {
  ListId?: string | null;
  ListName: string;
  ListUpdateToken?: string | null;
  CreateTime?: Date | number | null;
  LastUpdateTime?: Date | number | null;
  ProtocolsList: string[];
  PreviousProtocolsList?: { [key: string]: string[] | null | undefined } | null;
}
function fromProtocolsListData(input?: ProtocolsListData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ListId: input["ListId"],
    ListName: input["ListName"],
    ListUpdateToken: input["ListUpdateToken"],
    CreateTime: jsonP.serializeDate_unixTimestamp(input["CreateTime"]),
    LastUpdateTime: jsonP.serializeDate_unixTimestamp(input["LastUpdateTime"]),
    ProtocolsList: input["ProtocolsList"],
    PreviousProtocolsList: input["PreviousProtocolsList"],
  }
}
function toProtocolsListData(root: jsonP.JSONValue): ProtocolsListData {
  return jsonP.readObj({
    required: {
      "ListName": "s",
      "ProtocolsList": ["s"],
    },
    optional: {
      "ListId": "s",
      "ListUpdateToken": "s",
      "CreateTime": "d",
      "LastUpdateTime": "d",
      "PreviousProtocolsList": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AccountRoleStatus =
| "READY"
| "CREATING"
| "PENDING_DELETION"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface PolicyComplianceDetail {
  PolicyOwner?: string | null;
  PolicyId?: string | null;
  MemberAccount?: string | null;
  Violators?: ComplianceViolator[] | null;
  EvaluationLimitExceeded?: boolean | null;
  ExpiredAt?: Date | number | null;
  IssueInfoMap?: { [key in DependentServiceName]: string | null | undefined } | null;
}
function toPolicyComplianceDetail(root: jsonP.JSONValue): PolicyComplianceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "PolicyOwner": "s",
      "PolicyId": "s",
      "MemberAccount": "s",
      "Violators": [toComplianceViolator],
      "EvaluationLimitExceeded": "b",
      "ExpiredAt": "d",
      "IssueInfoMap": x => jsonP.readMap(x => cmnP.readEnumReq<DependentServiceName>(x), String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComplianceViolator {
  ResourceId?: string | null;
  ViolationReason?: ViolationReason | null;
  ResourceType?: string | null;
}
function toComplianceViolator(root: jsonP.JSONValue): ComplianceViolator {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "ViolationReason": (x: jsonP.JSONValue) => cmnP.readEnum<ViolationReason>(x),
      "ResourceType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ViolationReason =
| "WEB_ACL_MISSING_RULE_GROUP"
| "RESOURCE_MISSING_WEB_ACL"
| "RESOURCE_INCORRECT_WEB_ACL"
| "RESOURCE_MISSING_SHIELD_PROTECTION"
| "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION"
| "RESOURCE_MISSING_SECURITY_GROUP"
| "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP"
| "SECURITY_GROUP_UNUSED"
| "SECURITY_GROUP_REDUNDANT"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type DependentServiceName =
| "AWSCONFIG"
| "AWSWAF"
| "AWSSHIELD_ADVANCED"
| "AWSVPC"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ViolationDetail {
  PolicyId: string;
  MemberAccount: string;
  ResourceId: string;
  ResourceType: string;
  ResourceViolations: ResourceViolation[];
  ResourceTags?: Tag[] | null;
  ResourceDescription?: string | null;
}
function toViolationDetail(root: jsonP.JSONValue): ViolationDetail {
  return jsonP.readObj({
    required: {
      "PolicyId": "s",
      "MemberAccount": "s",
      "ResourceId": "s",
      "ResourceType": "s",
      "ResourceViolations": [toResourceViolation],
    },
    optional: {
      "ResourceTags": [toTag],
      "ResourceDescription": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceViolation {
  AwsVPCSecurityGroupViolation?: AwsVPCSecurityGroupViolation | null;
  AwsEc2NetworkInterfaceViolation?: AwsEc2NetworkInterfaceViolation | null;
  AwsEc2InstanceViolation?: AwsEc2InstanceViolation | null;
}
function toResourceViolation(root: jsonP.JSONValue): ResourceViolation {
  return jsonP.readObj({
    required: {},
    optional: {
      "AwsVPCSecurityGroupViolation": toAwsVPCSecurityGroupViolation,
      "AwsEc2NetworkInterfaceViolation": toAwsEc2NetworkInterfaceViolation,
      "AwsEc2InstanceViolation": toAwsEc2InstanceViolation,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AwsVPCSecurityGroupViolation {
  ViolationTarget?: string | null;
  ViolationTargetDescription?: string | null;
  PartialMatches?: PartialMatch[] | null;
  PossibleSecurityGroupRemediationActions?: SecurityGroupRemediationAction[] | null;
}
function toAwsVPCSecurityGroupViolation(root: jsonP.JSONValue): AwsVPCSecurityGroupViolation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ViolationTarget": "s",
      "ViolationTargetDescription": "s",
      "PartialMatches": [toPartialMatch],
      "PossibleSecurityGroupRemediationActions": [toSecurityGroupRemediationAction],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PartialMatch {
  Reference?: string | null;
  TargetViolationReasons?: string[] | null;
}
function toPartialMatch(root: jsonP.JSONValue): PartialMatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "Reference": "s",
      "TargetViolationReasons": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecurityGroupRemediationAction {
  RemediationActionType?: RemediationActionType | null;
  Description?: string | null;
  RemediationResult?: SecurityGroupRuleDescription | null;
  IsDefaultAction?: boolean | null;
}
function toSecurityGroupRemediationAction(root: jsonP.JSONValue): SecurityGroupRemediationAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "RemediationActionType": (x: jsonP.JSONValue) => cmnP.readEnum<RemediationActionType>(x),
      "Description": "s",
      "RemediationResult": toSecurityGroupRuleDescription,
      "IsDefaultAction": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RemediationActionType =
| "REMOVE"
| "MODIFY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface SecurityGroupRuleDescription {
  IPV4Range?: string | null;
  IPV6Range?: string | null;
  PrefixListId?: string | null;
  Protocol?: string | null;
  FromPort?: number | null;
  ToPort?: number | null;
}
function toSecurityGroupRuleDescription(root: jsonP.JSONValue): SecurityGroupRuleDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "IPV4Range": "s",
      "IPV6Range": "s",
      "PrefixListId": "s",
      "Protocol": "s",
      "FromPort": "n",
      "ToPort": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AwsEc2NetworkInterfaceViolation {
  ViolationTarget?: string | null;
  ViolatingSecurityGroups?: string[] | null;
}
function toAwsEc2NetworkInterfaceViolation(root: jsonP.JSONValue): AwsEc2NetworkInterfaceViolation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ViolationTarget": "s",
      "ViolatingSecurityGroups": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AwsEc2InstanceViolation {
  ViolationTarget?: string | null;
  AwsEc2NetworkInterfaceViolations?: AwsEc2NetworkInterfaceViolation[] | null;
}
function toAwsEc2InstanceViolation(root: jsonP.JSONValue): AwsEc2InstanceViolation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ViolationTarget": "s",
      "AwsEc2NetworkInterfaceViolations": [toAwsEc2NetworkInterfaceViolation],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AppsListDataSummary {
  ListArn?: string | null;
  ListId?: string | null;
  ListName?: string | null;
  AppsList?: App[] | null;
}
function toAppsListDataSummary(root: jsonP.JSONValue): AppsListDataSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ListArn": "s",
      "ListId": "s",
      "ListName": "s",
      "AppsList": [toApp],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PolicyComplianceStatus {
  PolicyOwner?: string | null;
  PolicyId?: string | null;
  PolicyName?: string | null;
  MemberAccount?: string | null;
  EvaluationResults?: EvaluationResult[] | null;
  LastUpdated?: Date | number | null;
  IssueInfoMap?: { [key in DependentServiceName]: string | null | undefined } | null;
}
function toPolicyComplianceStatus(root: jsonP.JSONValue): PolicyComplianceStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "PolicyOwner": "s",
      "PolicyId": "s",
      "PolicyName": "s",
      "MemberAccount": "s",
      "EvaluationResults": [toEvaluationResult],
      "LastUpdated": "d",
      "IssueInfoMap": x => jsonP.readMap(x => cmnP.readEnumReq<DependentServiceName>(x), String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EvaluationResult {
  ComplianceStatus?: PolicyComplianceStatusType | null;
  ViolatorCount?: number | null;
  EvaluationLimitExceeded?: boolean | null;
}
function toEvaluationResult(root: jsonP.JSONValue): EvaluationResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PolicyComplianceStatusType>(x),
      "ViolatorCount": "n",
      "EvaluationLimitExceeded": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type PolicyComplianceStatusType =
| "COMPLIANT"
| "NON_COMPLIANT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface PolicySummary {
  PolicyArn?: string | null;
  PolicyId?: string | null;
  PolicyName?: string | null;
  ResourceType?: string | null;
  SecurityServiceType?: SecurityServiceType | null;
  RemediationEnabled?: boolean | null;
}
function toPolicySummary(root: jsonP.JSONValue): PolicySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "PolicyArn": "s",
      "PolicyId": "s",
      "PolicyName": "s",
      "ResourceType": "s",
      "SecurityServiceType": (x: jsonP.JSONValue) => cmnP.readEnum<SecurityServiceType>(x),
      "RemediationEnabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProtocolsListDataSummary {
  ListArn?: string | null;
  ListId?: string | null;
  ListName?: string | null;
  ProtocolsList?: string[] | null;
}
function toProtocolsListDataSummary(root: jsonP.JSONValue): ProtocolsListDataSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ListArn": "s",
      "ListId": "s",
      "ListName": "s",
      "ProtocolsList": ["s"],
    },
  }, root);
}
