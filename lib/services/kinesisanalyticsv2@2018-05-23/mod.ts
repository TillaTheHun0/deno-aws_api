// Autogenerated API client for: Amazon Kinesis Analytics

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class KinesisAnalyticsV2 {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(KinesisAnalyticsV2.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-05-23",
    "endpointPrefix": "kinesisanalytics",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Kinesis Analytics V2",
    "serviceFullName": "Amazon Kinesis Analytics",
    "serviceId": "Kinesis Analytics V2",
    "signatureVersion": "v4",
    "signingName": "kinesisanalytics",
    "targetPrefix": "KinesisAnalytics_20180523",
    "uid": "kinesisanalyticsv2-2018-05-23"
  };

  async addApplicationCloudWatchLoggingOption(
    {abortSignal, ...params}: RequestConfig & AddApplicationCloudWatchLoggingOptionRequest,
  ): Promise<AddApplicationCloudWatchLoggingOptionResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      CloudWatchLoggingOption: fromCloudWatchLoggingOption(params["CloudWatchLoggingOption"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationCloudWatchLoggingOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "CloudWatchLoggingOptionDescriptions": [toCloudWatchLoggingOptionDescription],
      },
    }, await resp.json());
  }

  async addApplicationInput(
    {abortSignal, ...params}: RequestConfig & AddApplicationInputRequest,
  ): Promise<AddApplicationInputResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      Input: fromInput(params["Input"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationInput",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "InputDescriptions": [toInputDescription],
      },
    }, await resp.json());
  }

  async addApplicationInputProcessingConfiguration(
    {abortSignal, ...params}: RequestConfig & AddApplicationInputProcessingConfigurationRequest,
  ): Promise<AddApplicationInputProcessingConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      InputId: params["InputId"],
      InputProcessingConfiguration: fromInputProcessingConfiguration(params["InputProcessingConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationInputProcessingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "InputId": "s",
        "InputProcessingConfigurationDescription": toInputProcessingConfigurationDescription,
      },
    }, await resp.json());
  }

  async addApplicationOutput(
    {abortSignal, ...params}: RequestConfig & AddApplicationOutputRequest,
  ): Promise<AddApplicationOutputResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      Output: fromOutput(params["Output"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationOutput",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "OutputDescriptions": [toOutputDescription],
      },
    }, await resp.json());
  }

  async addApplicationReferenceDataSource(
    {abortSignal, ...params}: RequestConfig & AddApplicationReferenceDataSourceRequest,
  ): Promise<AddApplicationReferenceDataSourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      ReferenceDataSource: fromReferenceDataSource(params["ReferenceDataSource"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationReferenceDataSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "ReferenceDataSourceDescriptions": [toReferenceDataSourceDescription],
      },
    }, await resp.json());
  }

  async addApplicationVpcConfiguration(
    {abortSignal, ...params}: RequestConfig & AddApplicationVpcConfigurationRequest,
  ): Promise<AddApplicationVpcConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      VpcConfiguration: fromVpcConfiguration(params["VpcConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationVpcConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "VpcConfigurationDescription": toVpcConfigurationDescription,
      },
    }, await resp.json());
  }

  async createApplication(
    {abortSignal, ...params}: RequestConfig & CreateApplicationRequest,
  ): Promise<CreateApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      ApplicationDescription: params["ApplicationDescription"],
      RuntimeEnvironment: params["RuntimeEnvironment"],
      ServiceExecutionRole: params["ServiceExecutionRole"],
      ApplicationConfiguration: fromApplicationConfiguration(params["ApplicationConfiguration"]),
      CloudWatchLoggingOptions: params["CloudWatchLoggingOptions"]?.map(x => fromCloudWatchLoggingOption(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
    });
    return jsonP.readObj({
      required: {
        "ApplicationDetail": toApplicationDetail,
      },
      optional: {},
    }, await resp.json());
  }

  async createApplicationSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateApplicationSnapshotRequest,
  ): Promise<CreateApplicationSnapshotResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      SnapshotName: params["SnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplicationSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationRequest,
  ): Promise<DeleteApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CreateTimestamp: jsonP.serializeDate_unixTimestamp(params["CreateTimestamp"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteApplicationCloudWatchLoggingOption(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationCloudWatchLoggingOptionRequest,
  ): Promise<DeleteApplicationCloudWatchLoggingOptionResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      CloudWatchLoggingOptionId: params["CloudWatchLoggingOptionId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationCloudWatchLoggingOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "CloudWatchLoggingOptionDescriptions": [toCloudWatchLoggingOptionDescription],
      },
    }, await resp.json());
  }

  async deleteApplicationInputProcessingConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationInputProcessingConfigurationRequest,
  ): Promise<DeleteApplicationInputProcessingConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      InputId: params["InputId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationInputProcessingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async deleteApplicationOutput(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationOutputRequest,
  ): Promise<DeleteApplicationOutputResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      OutputId: params["OutputId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationOutput",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async deleteApplicationReferenceDataSource(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationReferenceDataSourceRequest,
  ): Promise<DeleteApplicationReferenceDataSourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      ReferenceId: params["ReferenceId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationReferenceDataSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async deleteApplicationSnapshot(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationSnapshotRequest,
  ): Promise<DeleteApplicationSnapshotResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      SnapshotName: params["SnapshotName"],
      SnapshotCreationTimestamp: jsonP.serializeDate_unixTimestamp(params["SnapshotCreationTimestamp"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteApplicationVpcConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationVpcConfigurationRequest,
  ): Promise<DeleteApplicationVpcConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      VpcConfigurationId: params["VpcConfigurationId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationVpcConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async describeApplication(
    {abortSignal, ...params}: RequestConfig & DescribeApplicationRequest,
  ): Promise<DescribeApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      IncludeAdditionalDetails: params["IncludeAdditionalDetails"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplication",
    });
    return jsonP.readObj({
      required: {
        "ApplicationDetail": toApplicationDetail,
      },
      optional: {},
    }, await resp.json());
  }

  async describeApplicationSnapshot(
    {abortSignal, ...params}: RequestConfig & DescribeApplicationSnapshotRequest,
  ): Promise<DescribeApplicationSnapshotResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      SnapshotName: params["SnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplicationSnapshot",
    });
    return jsonP.readObj({
      required: {
        "SnapshotDetails": toSnapshotDetails,
      },
      optional: {},
    }, await resp.json());
  }

  async discoverInputSchema(
    {abortSignal, ...params}: RequestConfig & DiscoverInputSchemaRequest,
  ): Promise<DiscoverInputSchemaResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceARN: params["ResourceARN"],
      ServiceExecutionRole: params["ServiceExecutionRole"],
      InputStartingPositionConfiguration: fromInputStartingPositionConfiguration(params["InputStartingPositionConfiguration"]),
      S3Configuration: fromS3Configuration(params["S3Configuration"]),
      InputProcessingConfiguration: fromInputProcessingConfiguration(params["InputProcessingConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DiscoverInputSchema",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InputSchema": toSourceSchema,
        "ParsedInputRecords": [x => jsonP.readList(String, x)],
        "ProcessedInputRecords": ["s"],
        "RawInputRecords": ["s"],
      },
    }, await resp.json());
  }

  async listApplicationSnapshots(
    {abortSignal, ...params}: RequestConfig & ListApplicationSnapshotsRequest,
  ): Promise<ListApplicationSnapshotsResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplicationSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SnapshotSummaries": [toSnapshotDetails],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listApplications(
    {abortSignal, ...params}: RequestConfig & ListApplicationsRequest = {},
  ): Promise<ListApplicationsResponse> {
    const body: jsonP.JSONObject = params ? {
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplications",
    });
    return jsonP.readObj({
      required: {
        "ApplicationSummaries": [toApplicationSummary],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceARN: params["ResourceARN"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async startApplication(
    {abortSignal, ...params}: RequestConfig & StartApplicationRequest,
  ): Promise<StartApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      RunConfiguration: fromRunConfiguration(params["RunConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopApplication(
    {abortSignal, ...params}: RequestConfig & StopApplicationRequest,
  ): Promise<StopApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      Force: params["Force"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & UpdateApplicationRequest,
  ): Promise<UpdateApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      ApplicationConfigurationUpdate: fromApplicationConfigurationUpdate(params["ApplicationConfigurationUpdate"]),
      ServiceExecutionRoleUpdate: params["ServiceExecutionRoleUpdate"],
      RunConfigurationUpdate: fromRunConfigurationUpdate(params["RunConfigurationUpdate"]),
      CloudWatchLoggingOptionUpdates: params["CloudWatchLoggingOptionUpdates"]?.map(x => fromCloudWatchLoggingOptionUpdate(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
    });
    return jsonP.readObj({
      required: {
        "ApplicationDetail": toApplicationDetail,
      },
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AddApplicationCloudWatchLoggingOptionRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  CloudWatchLoggingOption: CloudWatchLoggingOption;
}

// refs: 1 - tags: named, input
export interface AddApplicationInputRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  Input: Input;
}

// refs: 1 - tags: named, input
export interface AddApplicationInputProcessingConfigurationRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  InputId: string;
  InputProcessingConfiguration: InputProcessingConfiguration;
}

// refs: 1 - tags: named, input
export interface AddApplicationOutputRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  Output: Output;
}

// refs: 1 - tags: named, input
export interface AddApplicationReferenceDataSourceRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  ReferenceDataSource: ReferenceDataSource;
}

// refs: 1 - tags: named, input
export interface AddApplicationVpcConfigurationRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  VpcConfiguration: VpcConfiguration;
}

// refs: 1 - tags: named, input
export interface CreateApplicationRequest {
  ApplicationName: string;
  ApplicationDescription?: string | null;
  RuntimeEnvironment: RuntimeEnvironment;
  ServiceExecutionRole: string;
  ApplicationConfiguration?: ApplicationConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOption[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateApplicationSnapshotRequest {
  ApplicationName: string;
  SnapshotName: string;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationRequest {
  ApplicationName: string;
  CreateTimestamp: Date | number;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationCloudWatchLoggingOptionRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  CloudWatchLoggingOptionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationInputProcessingConfigurationRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  InputId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationOutputRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  OutputId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationReferenceDataSourceRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  ReferenceId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationSnapshotRequest {
  ApplicationName: string;
  SnapshotName: string;
  SnapshotCreationTimestamp: Date | number;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationVpcConfigurationRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  VpcConfigurationId: string;
}

// refs: 1 - tags: named, input
export interface DescribeApplicationRequest {
  ApplicationName: string;
  IncludeAdditionalDetails?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeApplicationSnapshotRequest {
  ApplicationName: string;
  SnapshotName: string;
}

// refs: 1 - tags: named, input
export interface DiscoverInputSchemaRequest {
  ResourceARN?: string | null;
  ServiceExecutionRole: string;
  InputStartingPositionConfiguration?: InputStartingPositionConfiguration | null;
  S3Configuration?: S3Configuration | null;
  InputProcessingConfiguration?: InputProcessingConfiguration | null;
}

// refs: 1 - tags: named, input
export interface ListApplicationSnapshotsRequest {
  ApplicationName: string;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListApplicationsRequest {
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface StartApplicationRequest {
  ApplicationName: string;
  RunConfiguration: RunConfiguration;
}

// refs: 1 - tags: named, input
export interface StopApplicationRequest {
  ApplicationName: string;
  Force?: boolean | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateApplicationRequest {
  ApplicationName: string;
  CurrentApplicationVersionId: number;
  ApplicationConfigurationUpdate?: ApplicationConfigurationUpdate | null;
  ServiceExecutionRoleUpdate?: string | null;
  RunConfigurationUpdate?: RunConfigurationUpdate | null;
  CloudWatchLoggingOptionUpdates?: CloudWatchLoggingOptionUpdate[] | null;
}

// refs: 1 - tags: named, output
export interface AddApplicationCloudWatchLoggingOptionResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
  CloudWatchLoggingOptionDescriptions?: CloudWatchLoggingOptionDescription[] | null;
}

// refs: 1 - tags: named, output
export interface AddApplicationInputResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
  InputDescriptions?: InputDescription[] | null;
}

// refs: 1 - tags: named, output
export interface AddApplicationInputProcessingConfigurationResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
  InputId?: string | null;
  InputProcessingConfigurationDescription?: InputProcessingConfigurationDescription | null;
}

// refs: 1 - tags: named, output
export interface AddApplicationOutputResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
  OutputDescriptions?: OutputDescription[] | null;
}

// refs: 1 - tags: named, output
export interface AddApplicationReferenceDataSourceResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
  ReferenceDataSourceDescriptions?: ReferenceDataSourceDescription[] | null;
}

// refs: 1 - tags: named, output
export interface AddApplicationVpcConfigurationResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
  VpcConfigurationDescription?: VpcConfigurationDescription | null;
}

// refs: 1 - tags: named, output
export interface CreateApplicationResponse {
  ApplicationDetail: ApplicationDetail;
}

// refs: 1 - tags: named, output
export interface CreateApplicationSnapshotResponse {
}

// refs: 1 - tags: named, output
export interface DeleteApplicationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteApplicationCloudWatchLoggingOptionResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
  CloudWatchLoggingOptionDescriptions?: CloudWatchLoggingOptionDescription[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteApplicationInputProcessingConfigurationResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteApplicationOutputResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteApplicationReferenceDataSourceResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteApplicationSnapshotResponse {
}

// refs: 1 - tags: named, output
export interface DeleteApplicationVpcConfigurationResponse {
  ApplicationARN?: string | null;
  ApplicationVersionId?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeApplicationResponse {
  ApplicationDetail: ApplicationDetail;
}

// refs: 1 - tags: named, output
export interface DescribeApplicationSnapshotResponse {
  SnapshotDetails: SnapshotDetails;
}

// refs: 1 - tags: named, output
export interface DiscoverInputSchemaResponse {
  InputSchema?: SourceSchema | null;
  ParsedInputRecords?: string[][] | null;
  ProcessedInputRecords?: string[] | null;
  RawInputRecords?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ListApplicationSnapshotsResponse {
  SnapshotSummaries?: SnapshotDetails[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListApplicationsResponse {
  ApplicationSummaries: ApplicationSummary[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface StartApplicationResponse {
}

// refs: 1 - tags: named, output
export interface StopApplicationResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateApplicationResponse {
  ApplicationDetail: ApplicationDetail;
}

// refs: 2 - tags: input, named, interface
export interface CloudWatchLoggingOption {
  LogStreamARN: string;
}
function fromCloudWatchLoggingOption(input?: CloudWatchLoggingOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LogStreamARN: input["LogStreamARN"],
  }
}

// refs: 2 - tags: input, named, interface
export interface Input {
  NamePrefix: string;
  InputProcessingConfiguration?: InputProcessingConfiguration | null;
  KinesisStreamsInput?: KinesisStreamsInput | null;
  KinesisFirehoseInput?: KinesisFirehoseInput | null;
  InputParallelism?: InputParallelism | null;
  InputSchema: SourceSchema;
}
function fromInput(input?: Input | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NamePrefix: input["NamePrefix"],
    InputProcessingConfiguration: fromInputProcessingConfiguration(input["InputProcessingConfiguration"]),
    KinesisStreamsInput: fromKinesisStreamsInput(input["KinesisStreamsInput"]),
    KinesisFirehoseInput: fromKinesisFirehoseInput(input["KinesisFirehoseInput"]),
    InputParallelism: fromInputParallelism(input["InputParallelism"]),
    InputSchema: fromSourceSchema(input["InputSchema"]),
  }
}

// refs: 4 - tags: input, named, interface
export interface InputProcessingConfiguration {
  InputLambdaProcessor: InputLambdaProcessor;
}
function fromInputProcessingConfiguration(input?: InputProcessingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputLambdaProcessor: fromInputLambdaProcessor(input["InputLambdaProcessor"]),
  }
}

// refs: 4 - tags: input, named, interface
export interface InputLambdaProcessor {
  ResourceARN: string;
}
function fromInputLambdaProcessor(input?: InputLambdaProcessor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

// refs: 2 - tags: input, named, interface
export interface KinesisStreamsInput {
  ResourceARN: string;
}
function fromKinesisStreamsInput(input?: KinesisStreamsInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

// refs: 2 - tags: input, named, interface
export interface KinesisFirehoseInput {
  ResourceARN: string;
}
function fromKinesisFirehoseInput(input?: KinesisFirehoseInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

// refs: 6 - tags: input, named, interface, output
export interface InputParallelism {
  Count?: number | null;
}
function fromInputParallelism(input?: InputParallelism | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Count: input["Count"],
  }
}
function toInputParallelism(root: jsonP.JSONValue): InputParallelism {
  return jsonP.readObj({
    required: {},
    optional: {
      "Count": "n",
    },
  }, root);
}

// refs: 14 - tags: input, named, interface, output
export interface SourceSchema {
  RecordFormat: RecordFormat;
  RecordEncoding?: string | null;
  RecordColumns: RecordColumn[];
}
function fromSourceSchema(input?: SourceSchema | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormat: fromRecordFormat(input["RecordFormat"]),
    RecordEncoding: input["RecordEncoding"],
    RecordColumns: input["RecordColumns"]?.map(x => fromRecordColumn(x)),
  }
}
function toSourceSchema(root: jsonP.JSONValue): SourceSchema {
  return jsonP.readObj({
    required: {
      "RecordFormat": toRecordFormat,
      "RecordColumns": [toRecordColumn],
    },
    optional: {
      "RecordEncoding": "s",
    },
  }, root);
}

// refs: 15 - tags: input, named, interface, output
export interface RecordFormat {
  RecordFormatType: RecordFormatType;
  MappingParameters?: MappingParameters | null;
}
function fromRecordFormat(input?: RecordFormat | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormatType: input["RecordFormatType"],
    MappingParameters: fromMappingParameters(input["MappingParameters"]),
  }
}
function toRecordFormat(root: jsonP.JSONValue): RecordFormat {
  return jsonP.readObj({
    required: {
      "RecordFormatType": (x: jsonP.JSONValue) => cmnP.readEnum<RecordFormatType>(x),
    },
    optional: {
      "MappingParameters": toMappingParameters,
    },
  }, root);
}

// refs: 22 - tags: input, named, enum, output
export type RecordFormatType =
| "JSON"
| "CSV"
| cmnP.UnexpectedEnumValue;

// refs: 15 - tags: input, named, interface, output
export interface MappingParameters {
  JSONMappingParameters?: JSONMappingParameters | null;
  CSVMappingParameters?: CSVMappingParameters | null;
}
function fromMappingParameters(input?: MappingParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JSONMappingParameters: fromJSONMappingParameters(input["JSONMappingParameters"]),
    CSVMappingParameters: fromCSVMappingParameters(input["CSVMappingParameters"]),
  }
}
function toMappingParameters(root: jsonP.JSONValue): MappingParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "JSONMappingParameters": toJSONMappingParameters,
      "CSVMappingParameters": toCSVMappingParameters,
    },
  }, root);
}

// refs: 15 - tags: input, named, interface, output
export interface JSONMappingParameters {
  RecordRowPath: string;
}
function fromJSONMappingParameters(input?: JSONMappingParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordRowPath: input["RecordRowPath"],
  }
}
function toJSONMappingParameters(root: jsonP.JSONValue): JSONMappingParameters {
  return jsonP.readObj({
    required: {
      "RecordRowPath": "s",
    },
    optional: {},
  }, root);
}

// refs: 15 - tags: input, named, interface, output
export interface CSVMappingParameters {
  RecordRowDelimiter: string;
  RecordColumnDelimiter: string;
}
function fromCSVMappingParameters(input?: CSVMappingParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordRowDelimiter: input["RecordRowDelimiter"],
    RecordColumnDelimiter: input["RecordColumnDelimiter"],
  }
}
function toCSVMappingParameters(root: jsonP.JSONValue): CSVMappingParameters {
  return jsonP.readObj({
    required: {
      "RecordRowDelimiter": "s",
      "RecordColumnDelimiter": "s",
    },
    optional: {},
  }, root);
}

// refs: 15 - tags: input, named, interface, output
export interface RecordColumn {
  Name: string;
  Mapping?: string | null;
  SqlType: string;
}
function fromRecordColumn(input?: RecordColumn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Mapping: input["Mapping"],
    SqlType: input["SqlType"],
  }
}
function toRecordColumn(root: jsonP.JSONValue): RecordColumn {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "SqlType": "s",
    },
    optional: {
      "Mapping": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface Output {
  Name: string;
  KinesisStreamsOutput?: KinesisStreamsOutput | null;
  KinesisFirehoseOutput?: KinesisFirehoseOutput | null;
  LambdaOutput?: LambdaOutput | null;
  DestinationSchema: DestinationSchema;
}
function fromOutput(input?: Output | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    KinesisStreamsOutput: fromKinesisStreamsOutput(input["KinesisStreamsOutput"]),
    KinesisFirehoseOutput: fromKinesisFirehoseOutput(input["KinesisFirehoseOutput"]),
    LambdaOutput: fromLambdaOutput(input["LambdaOutput"]),
    DestinationSchema: fromDestinationSchema(input["DestinationSchema"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface KinesisStreamsOutput {
  ResourceARN: string;
}
function fromKinesisStreamsOutput(input?: KinesisStreamsOutput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

// refs: 2 - tags: input, named, interface
export interface KinesisFirehoseOutput {
  ResourceARN: string;
}
function fromKinesisFirehoseOutput(input?: KinesisFirehoseOutput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

// refs: 2 - tags: input, named, interface
export interface LambdaOutput {
  ResourceARN: string;
}
function fromLambdaOutput(input?: LambdaOutput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

// refs: 7 - tags: input, named, interface, output
export interface DestinationSchema {
  RecordFormatType: RecordFormatType;
}
function fromDestinationSchema(input?: DestinationSchema | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormatType: input["RecordFormatType"],
  }
}
function toDestinationSchema(root: jsonP.JSONValue): DestinationSchema {
  return jsonP.readObj({
    required: {
      "RecordFormatType": (x: jsonP.JSONValue) => cmnP.readEnum<RecordFormatType>(x),
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface ReferenceDataSource {
  TableName: string;
  S3ReferenceDataSource?: S3ReferenceDataSource | null;
  ReferenceSchema: SourceSchema;
}
function fromReferenceDataSource(input?: ReferenceDataSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TableName: input["TableName"],
    S3ReferenceDataSource: fromS3ReferenceDataSource(input["S3ReferenceDataSource"]),
    ReferenceSchema: fromSourceSchema(input["ReferenceSchema"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface S3ReferenceDataSource {
  BucketARN?: string | null;
  FileKey?: string | null;
}
function fromS3ReferenceDataSource(input?: S3ReferenceDataSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARN: input["BucketARN"],
    FileKey: input["FileKey"],
  }
}

// refs: 2 - tags: input, named, interface
export interface VpcConfiguration {
  SubnetIds: string[];
  SecurityGroupIds: string[];
}
function fromVpcConfiguration(input?: VpcConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIds: input["SubnetIds"],
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}

// refs: 5 - tags: input, named, enum, output
export type RuntimeEnvironment =
| "SQL-1_0"
| "FLINK-1_6"
| "FLINK-1_8"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ApplicationConfiguration {
  SqlApplicationConfiguration?: SqlApplicationConfiguration | null;
  FlinkApplicationConfiguration?: FlinkApplicationConfiguration | null;
  EnvironmentProperties?: EnvironmentProperties | null;
  ApplicationCodeConfiguration: ApplicationCodeConfiguration;
  ApplicationSnapshotConfiguration?: ApplicationSnapshotConfiguration | null;
  VpcConfigurations?: VpcConfiguration[] | null;
}
function fromApplicationConfiguration(input?: ApplicationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SqlApplicationConfiguration: fromSqlApplicationConfiguration(input["SqlApplicationConfiguration"]),
    FlinkApplicationConfiguration: fromFlinkApplicationConfiguration(input["FlinkApplicationConfiguration"]),
    EnvironmentProperties: fromEnvironmentProperties(input["EnvironmentProperties"]),
    ApplicationCodeConfiguration: fromApplicationCodeConfiguration(input["ApplicationCodeConfiguration"]),
    ApplicationSnapshotConfiguration: fromApplicationSnapshotConfiguration(input["ApplicationSnapshotConfiguration"]),
    VpcConfigurations: input["VpcConfigurations"]?.map(x => fromVpcConfiguration(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface SqlApplicationConfiguration {
  Inputs?: Input[] | null;
  Outputs?: Output[] | null;
  ReferenceDataSources?: ReferenceDataSource[] | null;
}
function fromSqlApplicationConfiguration(input?: SqlApplicationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Inputs: input["Inputs"]?.map(x => fromInput(x)),
    Outputs: input["Outputs"]?.map(x => fromOutput(x)),
    ReferenceDataSources: input["ReferenceDataSources"]?.map(x => fromReferenceDataSource(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface FlinkApplicationConfiguration {
  CheckpointConfiguration?: CheckpointConfiguration | null;
  MonitoringConfiguration?: MonitoringConfiguration | null;
  ParallelismConfiguration?: ParallelismConfiguration | null;
}
function fromFlinkApplicationConfiguration(input?: FlinkApplicationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CheckpointConfiguration: fromCheckpointConfiguration(input["CheckpointConfiguration"]),
    MonitoringConfiguration: fromMonitoringConfiguration(input["MonitoringConfiguration"]),
    ParallelismConfiguration: fromParallelismConfiguration(input["ParallelismConfiguration"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface CheckpointConfiguration {
  ConfigurationType: ConfigurationType;
  CheckpointingEnabled?: boolean | null;
  CheckpointInterval?: number | null;
  MinPauseBetweenCheckpoints?: number | null;
}
function fromCheckpointConfiguration(input?: CheckpointConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationType: input["ConfigurationType"],
    CheckpointingEnabled: input["CheckpointingEnabled"],
    CheckpointInterval: input["CheckpointInterval"],
    MinPauseBetweenCheckpoints: input["MinPauseBetweenCheckpoints"],
  }
}

// refs: 15 - tags: input, named, enum, output
export type ConfigurationType =
| "DEFAULT"
| "CUSTOM"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface MonitoringConfiguration {
  ConfigurationType: ConfigurationType;
  MetricsLevel?: MetricsLevel | null;
  LogLevel?: LogLevel | null;
}
function fromMonitoringConfiguration(input?: MonitoringConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationType: input["ConfigurationType"],
    MetricsLevel: input["MetricsLevel"],
    LogLevel: input["LogLevel"],
  }
}

// refs: 5 - tags: input, named, enum, output
export type MetricsLevel =
| "APPLICATION"
| "TASK"
| "OPERATOR"
| "PARALLELISM"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type LogLevel =
| "INFO"
| "WARN"
| "ERROR"
| "DEBUG"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ParallelismConfiguration {
  ConfigurationType: ConfigurationType;
  Parallelism?: number | null;
  ParallelismPerKPU?: number | null;
  AutoScalingEnabled?: boolean | null;
}
function fromParallelismConfiguration(input?: ParallelismConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationType: input["ConfigurationType"],
    Parallelism: input["Parallelism"],
    ParallelismPerKPU: input["ParallelismPerKPU"],
    AutoScalingEnabled: input["AutoScalingEnabled"],
  }
}

// refs: 1 - tags: input, named, interface
export interface EnvironmentProperties {
  PropertyGroups: PropertyGroup[];
}
function fromEnvironmentProperties(input?: EnvironmentProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PropertyGroups: input["PropertyGroups"]?.map(x => fromPropertyGroup(x)),
  }
}

// refs: 5 - tags: input, named, interface, output
export interface PropertyGroup {
  PropertyGroupId: string;
  PropertyMap: { [key: string]: string | null | undefined };
}
function fromPropertyGroup(input?: PropertyGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PropertyGroupId: input["PropertyGroupId"],
    PropertyMap: input["PropertyMap"],
  }
}
function toPropertyGroup(root: jsonP.JSONValue): PropertyGroup {
  return jsonP.readObj({
    required: {
      "PropertyGroupId": "s",
      "PropertyMap": x => jsonP.readMap(String, String, x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ApplicationCodeConfiguration {
  CodeContent?: CodeContent | null;
  CodeContentType: CodeContentType;
}
function fromApplicationCodeConfiguration(input?: ApplicationCodeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CodeContent: fromCodeContent(input["CodeContent"]),
    CodeContentType: input["CodeContentType"],
  }
}

// refs: 1 - tags: input, named, interface
export interface CodeContent {
  TextContent?: string | null;
  ZipFileContent?: Uint8Array | string | null;
  S3ContentLocation?: S3ContentLocation | null;
}
function fromCodeContent(input?: CodeContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TextContent: input["TextContent"],
    ZipFileContent: jsonP.serializeBlob(input["ZipFileContent"]),
    S3ContentLocation: fromS3ContentLocation(input["S3ContentLocation"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface S3ContentLocation {
  BucketARN: string;
  FileKey: string;
  ObjectVersion?: string | null;
}
function fromS3ContentLocation(input?: S3ContentLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARN: input["BucketARN"],
    FileKey: input["FileKey"],
    ObjectVersion: input["ObjectVersion"],
  }
}

// refs: 5 - tags: input, named, enum, output
export type CodeContentType =
| "PLAINTEXT"
| "ZIPFILE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ApplicationSnapshotConfiguration {
  SnapshotsEnabled: boolean;
}
function fromApplicationSnapshotConfiguration(input?: ApplicationSnapshotConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnapshotsEnabled: input["SnapshotsEnabled"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface InputStartingPositionConfiguration {
  InputStartingPosition?: InputStartingPosition | null;
}
function fromInputStartingPositionConfiguration(input?: InputStartingPositionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputStartingPosition: input["InputStartingPosition"],
  }
}
function toInputStartingPositionConfiguration(root: jsonP.JSONValue): InputStartingPositionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputStartingPosition": (x: jsonP.JSONValue) => cmnP.readEnum<InputStartingPosition>(x),
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type InputStartingPosition =
| "NOW"
| "TRIM_HORIZON"
| "LAST_STOPPED_POINT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface S3Configuration {
  BucketARN: string;
  FileKey: string;
}
function fromS3Configuration(input?: S3Configuration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARN: input["BucketARN"],
    FileKey: input["FileKey"],
  }
}

// refs: 1 - tags: input, named, interface
export interface RunConfiguration {
  FlinkRunConfiguration?: FlinkRunConfiguration | null;
  SqlRunConfigurations?: SqlRunConfiguration[] | null;
  ApplicationRestoreConfiguration?: ApplicationRestoreConfiguration | null;
}
function fromRunConfiguration(input?: RunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FlinkRunConfiguration: fromFlinkRunConfiguration(input["FlinkRunConfiguration"]),
    SqlRunConfigurations: input["SqlRunConfigurations"]?.map(x => fromSqlRunConfiguration(x)),
    ApplicationRestoreConfiguration: fromApplicationRestoreConfiguration(input["ApplicationRestoreConfiguration"]),
  }
}

// refs: 5 - tags: input, named, interface, output
export interface FlinkRunConfiguration {
  AllowNonRestoredState?: boolean | null;
}
function fromFlinkRunConfiguration(input?: FlinkRunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AllowNonRestoredState: input["AllowNonRestoredState"],
  }
}
function toFlinkRunConfiguration(root: jsonP.JSONValue): FlinkRunConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowNonRestoredState": "b",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface SqlRunConfiguration {
  InputId: string;
  InputStartingPositionConfiguration: InputStartingPositionConfiguration;
}
function fromSqlRunConfiguration(input?: SqlRunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputId: input["InputId"],
    InputStartingPositionConfiguration: fromInputStartingPositionConfiguration(input["InputStartingPositionConfiguration"]),
  }
}

// refs: 5 - tags: input, named, interface, output
export interface ApplicationRestoreConfiguration {
  ApplicationRestoreType: ApplicationRestoreType;
  SnapshotName?: string | null;
}
function fromApplicationRestoreConfiguration(input?: ApplicationRestoreConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApplicationRestoreType: input["ApplicationRestoreType"],
    SnapshotName: input["SnapshotName"],
  }
}
function toApplicationRestoreConfiguration(root: jsonP.JSONValue): ApplicationRestoreConfiguration {
  return jsonP.readObj({
    required: {
      "ApplicationRestoreType": (x: jsonP.JSONValue) => cmnP.readEnum<ApplicationRestoreType>(x),
    },
    optional: {
      "SnapshotName": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type ApplicationRestoreType =
| "SKIP_RESTORE_FROM_SNAPSHOT"
| "RESTORE_FROM_LATEST_SNAPSHOT"
| "RESTORE_FROM_CUSTOM_SNAPSHOT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ApplicationConfigurationUpdate {
  SqlApplicationConfigurationUpdate?: SqlApplicationConfigurationUpdate | null;
  ApplicationCodeConfigurationUpdate?: ApplicationCodeConfigurationUpdate | null;
  FlinkApplicationConfigurationUpdate?: FlinkApplicationConfigurationUpdate | null;
  EnvironmentPropertyUpdates?: EnvironmentPropertyUpdates | null;
  ApplicationSnapshotConfigurationUpdate?: ApplicationSnapshotConfigurationUpdate | null;
  VpcConfigurationUpdates?: VpcConfigurationUpdate[] | null;
}
function fromApplicationConfigurationUpdate(input?: ApplicationConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SqlApplicationConfigurationUpdate: fromSqlApplicationConfigurationUpdate(input["SqlApplicationConfigurationUpdate"]),
    ApplicationCodeConfigurationUpdate: fromApplicationCodeConfigurationUpdate(input["ApplicationCodeConfigurationUpdate"]),
    FlinkApplicationConfigurationUpdate: fromFlinkApplicationConfigurationUpdate(input["FlinkApplicationConfigurationUpdate"]),
    EnvironmentPropertyUpdates: fromEnvironmentPropertyUpdates(input["EnvironmentPropertyUpdates"]),
    ApplicationSnapshotConfigurationUpdate: fromApplicationSnapshotConfigurationUpdate(input["ApplicationSnapshotConfigurationUpdate"]),
    VpcConfigurationUpdates: input["VpcConfigurationUpdates"]?.map(x => fromVpcConfigurationUpdate(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface SqlApplicationConfigurationUpdate {
  InputUpdates?: InputUpdate[] | null;
  OutputUpdates?: OutputUpdate[] | null;
  ReferenceDataSourceUpdates?: ReferenceDataSourceUpdate[] | null;
}
function fromSqlApplicationConfigurationUpdate(input?: SqlApplicationConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputUpdates: input["InputUpdates"]?.map(x => fromInputUpdate(x)),
    OutputUpdates: input["OutputUpdates"]?.map(x => fromOutputUpdate(x)),
    ReferenceDataSourceUpdates: input["ReferenceDataSourceUpdates"]?.map(x => fromReferenceDataSourceUpdate(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface InputUpdate {
  InputId: string;
  NamePrefixUpdate?: string | null;
  InputProcessingConfigurationUpdate?: InputProcessingConfigurationUpdate | null;
  KinesisStreamsInputUpdate?: KinesisStreamsInputUpdate | null;
  KinesisFirehoseInputUpdate?: KinesisFirehoseInputUpdate | null;
  InputSchemaUpdate?: InputSchemaUpdate | null;
  InputParallelismUpdate?: InputParallelismUpdate | null;
}
function fromInputUpdate(input?: InputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputId: input["InputId"],
    NamePrefixUpdate: input["NamePrefixUpdate"],
    InputProcessingConfigurationUpdate: fromInputProcessingConfigurationUpdate(input["InputProcessingConfigurationUpdate"]),
    KinesisStreamsInputUpdate: fromKinesisStreamsInputUpdate(input["KinesisStreamsInputUpdate"]),
    KinesisFirehoseInputUpdate: fromKinesisFirehoseInputUpdate(input["KinesisFirehoseInputUpdate"]),
    InputSchemaUpdate: fromInputSchemaUpdate(input["InputSchemaUpdate"]),
    InputParallelismUpdate: fromInputParallelismUpdate(input["InputParallelismUpdate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface InputProcessingConfigurationUpdate {
  InputLambdaProcessorUpdate: InputLambdaProcessorUpdate;
}
function fromInputProcessingConfigurationUpdate(input?: InputProcessingConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputLambdaProcessorUpdate: fromInputLambdaProcessorUpdate(input["InputLambdaProcessorUpdate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface InputLambdaProcessorUpdate {
  ResourceARNUpdate: string;
}
function fromInputLambdaProcessorUpdate(input?: InputLambdaProcessorUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface KinesisStreamsInputUpdate {
  ResourceARNUpdate: string;
}
function fromKinesisStreamsInputUpdate(input?: KinesisStreamsInputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface KinesisFirehoseInputUpdate {
  ResourceARNUpdate: string;
}
function fromKinesisFirehoseInputUpdate(input?: KinesisFirehoseInputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface InputSchemaUpdate {
  RecordFormatUpdate?: RecordFormat | null;
  RecordEncodingUpdate?: string | null;
  RecordColumnUpdates?: RecordColumn[] | null;
}
function fromInputSchemaUpdate(input?: InputSchemaUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormatUpdate: fromRecordFormat(input["RecordFormatUpdate"]),
    RecordEncodingUpdate: input["RecordEncodingUpdate"],
    RecordColumnUpdates: input["RecordColumnUpdates"]?.map(x => fromRecordColumn(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface InputParallelismUpdate {
  CountUpdate: number;
}
function fromInputParallelismUpdate(input?: InputParallelismUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CountUpdate: input["CountUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface OutputUpdate {
  OutputId: string;
  NameUpdate?: string | null;
  KinesisStreamsOutputUpdate?: KinesisStreamsOutputUpdate | null;
  KinesisFirehoseOutputUpdate?: KinesisFirehoseOutputUpdate | null;
  LambdaOutputUpdate?: LambdaOutputUpdate | null;
  DestinationSchemaUpdate?: DestinationSchema | null;
}
function fromOutputUpdate(input?: OutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OutputId: input["OutputId"],
    NameUpdate: input["NameUpdate"],
    KinesisStreamsOutputUpdate: fromKinesisStreamsOutputUpdate(input["KinesisStreamsOutputUpdate"]),
    KinesisFirehoseOutputUpdate: fromKinesisFirehoseOutputUpdate(input["KinesisFirehoseOutputUpdate"]),
    LambdaOutputUpdate: fromLambdaOutputUpdate(input["LambdaOutputUpdate"]),
    DestinationSchemaUpdate: fromDestinationSchema(input["DestinationSchemaUpdate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface KinesisStreamsOutputUpdate {
  ResourceARNUpdate: string;
}
function fromKinesisStreamsOutputUpdate(input?: KinesisStreamsOutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface KinesisFirehoseOutputUpdate {
  ResourceARNUpdate: string;
}
function fromKinesisFirehoseOutputUpdate(input?: KinesisFirehoseOutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface LambdaOutputUpdate {
  ResourceARNUpdate: string;
}
function fromLambdaOutputUpdate(input?: LambdaOutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ReferenceDataSourceUpdate {
  ReferenceId: string;
  TableNameUpdate?: string | null;
  S3ReferenceDataSourceUpdate?: S3ReferenceDataSourceUpdate | null;
  ReferenceSchemaUpdate?: SourceSchema | null;
}
function fromReferenceDataSourceUpdate(input?: ReferenceDataSourceUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReferenceId: input["ReferenceId"],
    TableNameUpdate: input["TableNameUpdate"],
    S3ReferenceDataSourceUpdate: fromS3ReferenceDataSourceUpdate(input["S3ReferenceDataSourceUpdate"]),
    ReferenceSchemaUpdate: fromSourceSchema(input["ReferenceSchemaUpdate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface S3ReferenceDataSourceUpdate {
  BucketARNUpdate?: string | null;
  FileKeyUpdate?: string | null;
}
function fromS3ReferenceDataSourceUpdate(input?: S3ReferenceDataSourceUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARNUpdate: input["BucketARNUpdate"],
    FileKeyUpdate: input["FileKeyUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ApplicationCodeConfigurationUpdate {
  CodeContentTypeUpdate?: CodeContentType | null;
  CodeContentUpdate?: CodeContentUpdate | null;
}
function fromApplicationCodeConfigurationUpdate(input?: ApplicationCodeConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CodeContentTypeUpdate: input["CodeContentTypeUpdate"],
    CodeContentUpdate: fromCodeContentUpdate(input["CodeContentUpdate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface CodeContentUpdate {
  TextContentUpdate?: string | null;
  ZipFileContentUpdate?: Uint8Array | string | null;
  S3ContentLocationUpdate?: S3ContentLocationUpdate | null;
}
function fromCodeContentUpdate(input?: CodeContentUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TextContentUpdate: input["TextContentUpdate"],
    ZipFileContentUpdate: jsonP.serializeBlob(input["ZipFileContentUpdate"]),
    S3ContentLocationUpdate: fromS3ContentLocationUpdate(input["S3ContentLocationUpdate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface S3ContentLocationUpdate {
  BucketARNUpdate?: string | null;
  FileKeyUpdate?: string | null;
  ObjectVersionUpdate?: string | null;
}
function fromS3ContentLocationUpdate(input?: S3ContentLocationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARNUpdate: input["BucketARNUpdate"],
    FileKeyUpdate: input["FileKeyUpdate"],
    ObjectVersionUpdate: input["ObjectVersionUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface FlinkApplicationConfigurationUpdate {
  CheckpointConfigurationUpdate?: CheckpointConfigurationUpdate | null;
  MonitoringConfigurationUpdate?: MonitoringConfigurationUpdate | null;
  ParallelismConfigurationUpdate?: ParallelismConfigurationUpdate | null;
}
function fromFlinkApplicationConfigurationUpdate(input?: FlinkApplicationConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CheckpointConfigurationUpdate: fromCheckpointConfigurationUpdate(input["CheckpointConfigurationUpdate"]),
    MonitoringConfigurationUpdate: fromMonitoringConfigurationUpdate(input["MonitoringConfigurationUpdate"]),
    ParallelismConfigurationUpdate: fromParallelismConfigurationUpdate(input["ParallelismConfigurationUpdate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface CheckpointConfigurationUpdate {
  ConfigurationTypeUpdate?: ConfigurationType | null;
  CheckpointingEnabledUpdate?: boolean | null;
  CheckpointIntervalUpdate?: number | null;
  MinPauseBetweenCheckpointsUpdate?: number | null;
}
function fromCheckpointConfigurationUpdate(input?: CheckpointConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationTypeUpdate: input["ConfigurationTypeUpdate"],
    CheckpointingEnabledUpdate: input["CheckpointingEnabledUpdate"],
    CheckpointIntervalUpdate: input["CheckpointIntervalUpdate"],
    MinPauseBetweenCheckpointsUpdate: input["MinPauseBetweenCheckpointsUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface MonitoringConfigurationUpdate {
  ConfigurationTypeUpdate?: ConfigurationType | null;
  MetricsLevelUpdate?: MetricsLevel | null;
  LogLevelUpdate?: LogLevel | null;
}
function fromMonitoringConfigurationUpdate(input?: MonitoringConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationTypeUpdate: input["ConfigurationTypeUpdate"],
    MetricsLevelUpdate: input["MetricsLevelUpdate"],
    LogLevelUpdate: input["LogLevelUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ParallelismConfigurationUpdate {
  ConfigurationTypeUpdate?: ConfigurationType | null;
  ParallelismUpdate?: number | null;
  ParallelismPerKPUUpdate?: number | null;
  AutoScalingEnabledUpdate?: boolean | null;
}
function fromParallelismConfigurationUpdate(input?: ParallelismConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationTypeUpdate: input["ConfigurationTypeUpdate"],
    ParallelismUpdate: input["ParallelismUpdate"],
    ParallelismPerKPUUpdate: input["ParallelismPerKPUUpdate"],
    AutoScalingEnabledUpdate: input["AutoScalingEnabledUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface EnvironmentPropertyUpdates {
  PropertyGroups: PropertyGroup[];
}
function fromEnvironmentPropertyUpdates(input?: EnvironmentPropertyUpdates | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PropertyGroups: input["PropertyGroups"]?.map(x => fromPropertyGroup(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface ApplicationSnapshotConfigurationUpdate {
  SnapshotsEnabledUpdate: boolean;
}
function fromApplicationSnapshotConfigurationUpdate(input?: ApplicationSnapshotConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnapshotsEnabledUpdate: input["SnapshotsEnabledUpdate"],
  }
}

// refs: 1 - tags: input, named, interface
export interface VpcConfigurationUpdate {
  VpcConfigurationId: string;
  SubnetIdUpdates?: string[] | null;
  SecurityGroupIdUpdates?: string[] | null;
}
function fromVpcConfigurationUpdate(input?: VpcConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VpcConfigurationId: input["VpcConfigurationId"],
    SubnetIdUpdates: input["SubnetIdUpdates"],
    SecurityGroupIdUpdates: input["SecurityGroupIdUpdates"],
  }
}

// refs: 1 - tags: input, named, interface
export interface RunConfigurationUpdate {
  FlinkRunConfiguration?: FlinkRunConfiguration | null;
  ApplicationRestoreConfiguration?: ApplicationRestoreConfiguration | null;
}
function fromRunConfigurationUpdate(input?: RunConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FlinkRunConfiguration: fromFlinkRunConfiguration(input["FlinkRunConfiguration"]),
    ApplicationRestoreConfiguration: fromApplicationRestoreConfiguration(input["ApplicationRestoreConfiguration"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface CloudWatchLoggingOptionUpdate {
  CloudWatchLoggingOptionId: string;
  LogStreamARNUpdate?: string | null;
}
function fromCloudWatchLoggingOptionUpdate(input?: CloudWatchLoggingOptionUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CloudWatchLoggingOptionId: input["CloudWatchLoggingOptionId"],
    LogStreamARNUpdate: input["LogStreamARNUpdate"],
  }
}

// refs: 5 - tags: output, named, interface
export interface CloudWatchLoggingOptionDescription {
  CloudWatchLoggingOptionId?: string | null;
  LogStreamARN: string;
  RoleARN?: string | null;
}
function toCloudWatchLoggingOptionDescription(root: jsonP.JSONValue): CloudWatchLoggingOptionDescription {
  return jsonP.readObj({
    required: {
      "LogStreamARN": "s",
    },
    optional: {
      "CloudWatchLoggingOptionId": "s",
      "RoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface InputDescription {
  InputId?: string | null;
  NamePrefix?: string | null;
  InAppStreamNames?: string[] | null;
  InputProcessingConfigurationDescription?: InputProcessingConfigurationDescription | null;
  KinesisStreamsInputDescription?: KinesisStreamsInputDescription | null;
  KinesisFirehoseInputDescription?: KinesisFirehoseInputDescription | null;
  InputSchema?: SourceSchema | null;
  InputParallelism?: InputParallelism | null;
  InputStartingPositionConfiguration?: InputStartingPositionConfiguration | null;
}
function toInputDescription(root: jsonP.JSONValue): InputDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputId": "s",
      "NamePrefix": "s",
      "InAppStreamNames": ["s"],
      "InputProcessingConfigurationDescription": toInputProcessingConfigurationDescription,
      "KinesisStreamsInputDescription": toKinesisStreamsInputDescription,
      "KinesisFirehoseInputDescription": toKinesisFirehoseInputDescription,
      "InputSchema": toSourceSchema,
      "InputParallelism": toInputParallelism,
      "InputStartingPositionConfiguration": toInputStartingPositionConfiguration,
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface InputProcessingConfigurationDescription {
  InputLambdaProcessorDescription?: InputLambdaProcessorDescription | null;
}
function toInputProcessingConfigurationDescription(root: jsonP.JSONValue): InputProcessingConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputLambdaProcessorDescription": toInputLambdaProcessorDescription,
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface InputLambdaProcessorDescription {
  ResourceARN: string;
  RoleARN?: string | null;
}
function toInputLambdaProcessorDescription(root: jsonP.JSONValue): InputLambdaProcessorDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface KinesisStreamsInputDescription {
  ResourceARN: string;
  RoleARN?: string | null;
}
function toKinesisStreamsInputDescription(root: jsonP.JSONValue): KinesisStreamsInputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface KinesisFirehoseInputDescription {
  ResourceARN: string;
  RoleARN?: string | null;
}
function toKinesisFirehoseInputDescription(root: jsonP.JSONValue): KinesisFirehoseInputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface OutputDescription {
  OutputId?: string | null;
  Name?: string | null;
  KinesisStreamsOutputDescription?: KinesisStreamsOutputDescription | null;
  KinesisFirehoseOutputDescription?: KinesisFirehoseOutputDescription | null;
  LambdaOutputDescription?: LambdaOutputDescription | null;
  DestinationSchema?: DestinationSchema | null;
}
function toOutputDescription(root: jsonP.JSONValue): OutputDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutputId": "s",
      "Name": "s",
      "KinesisStreamsOutputDescription": toKinesisStreamsOutputDescription,
      "KinesisFirehoseOutputDescription": toKinesisFirehoseOutputDescription,
      "LambdaOutputDescription": toLambdaOutputDescription,
      "DestinationSchema": toDestinationSchema,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface KinesisStreamsOutputDescription {
  ResourceARN: string;
  RoleARN?: string | null;
}
function toKinesisStreamsOutputDescription(root: jsonP.JSONValue): KinesisStreamsOutputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface KinesisFirehoseOutputDescription {
  ResourceARN: string;
  RoleARN?: string | null;
}
function toKinesisFirehoseOutputDescription(root: jsonP.JSONValue): KinesisFirehoseOutputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface LambdaOutputDescription {
  ResourceARN: string;
  RoleARN?: string | null;
}
function toLambdaOutputDescription(root: jsonP.JSONValue): LambdaOutputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ReferenceDataSourceDescription {
  ReferenceId: string;
  TableName: string;
  S3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription;
  ReferenceSchema?: SourceSchema | null;
}
function toReferenceDataSourceDescription(root: jsonP.JSONValue): ReferenceDataSourceDescription {
  return jsonP.readObj({
    required: {
      "ReferenceId": "s",
      "TableName": "s",
      "S3ReferenceDataSourceDescription": toS3ReferenceDataSourceDescription,
    },
    optional: {
      "ReferenceSchema": toSourceSchema,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface S3ReferenceDataSourceDescription {
  BucketARN: string;
  FileKey: string;
  ReferenceRoleARN?: string | null;
}
function toS3ReferenceDataSourceDescription(root: jsonP.JSONValue): S3ReferenceDataSourceDescription {
  return jsonP.readObj({
    required: {
      "BucketARN": "s",
      "FileKey": "s",
    },
    optional: {
      "ReferenceRoleARN": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface VpcConfigurationDescription {
  VpcConfigurationId: string;
  VpcId: string;
  SubnetIds: string[];
  SecurityGroupIds: string[];
}
function toVpcConfigurationDescription(root: jsonP.JSONValue): VpcConfigurationDescription {
  return jsonP.readObj({
    required: {
      "VpcConfigurationId": "s",
      "VpcId": "s",
      "SubnetIds": ["s"],
      "SecurityGroupIds": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ApplicationDetail {
  ApplicationARN: string;
  ApplicationDescription?: string | null;
  ApplicationName: string;
  RuntimeEnvironment: RuntimeEnvironment;
  ServiceExecutionRole?: string | null;
  ApplicationStatus: ApplicationStatus;
  ApplicationVersionId: number;
  CreateTimestamp?: Date | number | null;
  LastUpdateTimestamp?: Date | number | null;
  ApplicationConfigurationDescription?: ApplicationConfigurationDescription | null;
  CloudWatchLoggingOptionDescriptions?: CloudWatchLoggingOptionDescription[] | null;
}
function toApplicationDetail(root: jsonP.JSONValue): ApplicationDetail {
  return jsonP.readObj({
    required: {
      "ApplicationARN": "s",
      "ApplicationName": "s",
      "RuntimeEnvironment": (x: jsonP.JSONValue) => cmnP.readEnum<RuntimeEnvironment>(x),
      "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ApplicationStatus>(x),
      "ApplicationVersionId": "n",
    },
    optional: {
      "ApplicationDescription": "s",
      "ServiceExecutionRole": "s",
      "CreateTimestamp": "d",
      "LastUpdateTimestamp": "d",
      "ApplicationConfigurationDescription": toApplicationConfigurationDescription,
      "CloudWatchLoggingOptionDescriptions": [toCloudWatchLoggingOptionDescription],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type ApplicationStatus =
| "DELETING"
| "STARTING"
| "STOPPING"
| "READY"
| "RUNNING"
| "UPDATING"
| "AUTOSCALING"
| "FORCE_STOPPING"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface ApplicationConfigurationDescription {
  SqlApplicationConfigurationDescription?: SqlApplicationConfigurationDescription | null;
  ApplicationCodeConfigurationDescription?: ApplicationCodeConfigurationDescription | null;
  RunConfigurationDescription?: RunConfigurationDescription | null;
  FlinkApplicationConfigurationDescription?: FlinkApplicationConfigurationDescription | null;
  EnvironmentPropertyDescriptions?: EnvironmentPropertyDescriptions | null;
  ApplicationSnapshotConfigurationDescription?: ApplicationSnapshotConfigurationDescription | null;
  VpcConfigurationDescriptions?: VpcConfigurationDescription[] | null;
}
function toApplicationConfigurationDescription(root: jsonP.JSONValue): ApplicationConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "SqlApplicationConfigurationDescription": toSqlApplicationConfigurationDescription,
      "ApplicationCodeConfigurationDescription": toApplicationCodeConfigurationDescription,
      "RunConfigurationDescription": toRunConfigurationDescription,
      "FlinkApplicationConfigurationDescription": toFlinkApplicationConfigurationDescription,
      "EnvironmentPropertyDescriptions": toEnvironmentPropertyDescriptions,
      "ApplicationSnapshotConfigurationDescription": toApplicationSnapshotConfigurationDescription,
      "VpcConfigurationDescriptions": [toVpcConfigurationDescription],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface SqlApplicationConfigurationDescription {
  InputDescriptions?: InputDescription[] | null;
  OutputDescriptions?: OutputDescription[] | null;
  ReferenceDataSourceDescriptions?: ReferenceDataSourceDescription[] | null;
}
function toSqlApplicationConfigurationDescription(root: jsonP.JSONValue): SqlApplicationConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputDescriptions": [toInputDescription],
      "OutputDescriptions": [toOutputDescription],
      "ReferenceDataSourceDescriptions": [toReferenceDataSourceDescription],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ApplicationCodeConfigurationDescription {
  CodeContentType: CodeContentType;
  CodeContentDescription?: CodeContentDescription | null;
}
function toApplicationCodeConfigurationDescription(root: jsonP.JSONValue): ApplicationCodeConfigurationDescription {
  return jsonP.readObj({
    required: {
      "CodeContentType": (x: jsonP.JSONValue) => cmnP.readEnum<CodeContentType>(x),
    },
    optional: {
      "CodeContentDescription": toCodeContentDescription,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CodeContentDescription {
  TextContent?: string | null;
  CodeMD5?: string | null;
  CodeSize?: number | null;
  S3ApplicationCodeLocationDescription?: S3ApplicationCodeLocationDescription | null;
}
function toCodeContentDescription(root: jsonP.JSONValue): CodeContentDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "TextContent": "s",
      "CodeMD5": "s",
      "CodeSize": "n",
      "S3ApplicationCodeLocationDescription": toS3ApplicationCodeLocationDescription,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface S3ApplicationCodeLocationDescription {
  BucketARN: string;
  FileKey: string;
  ObjectVersion?: string | null;
}
function toS3ApplicationCodeLocationDescription(root: jsonP.JSONValue): S3ApplicationCodeLocationDescription {
  return jsonP.readObj({
    required: {
      "BucketARN": "s",
      "FileKey": "s",
    },
    optional: {
      "ObjectVersion": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface RunConfigurationDescription {
  ApplicationRestoreConfigurationDescription?: ApplicationRestoreConfiguration | null;
  FlinkRunConfigurationDescription?: FlinkRunConfiguration | null;
}
function toRunConfigurationDescription(root: jsonP.JSONValue): RunConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationRestoreConfigurationDescription": toApplicationRestoreConfiguration,
      "FlinkRunConfigurationDescription": toFlinkRunConfiguration,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface FlinkApplicationConfigurationDescription {
  CheckpointConfigurationDescription?: CheckpointConfigurationDescription | null;
  MonitoringConfigurationDescription?: MonitoringConfigurationDescription | null;
  ParallelismConfigurationDescription?: ParallelismConfigurationDescription | null;
  JobPlanDescription?: string | null;
}
function toFlinkApplicationConfigurationDescription(root: jsonP.JSONValue): FlinkApplicationConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "CheckpointConfigurationDescription": toCheckpointConfigurationDescription,
      "MonitoringConfigurationDescription": toMonitoringConfigurationDescription,
      "ParallelismConfigurationDescription": toParallelismConfigurationDescription,
      "JobPlanDescription": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CheckpointConfigurationDescription {
  ConfigurationType?: ConfigurationType | null;
  CheckpointingEnabled?: boolean | null;
  CheckpointInterval?: number | null;
  MinPauseBetweenCheckpoints?: number | null;
}
function toCheckpointConfigurationDescription(root: jsonP.JSONValue): CheckpointConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationType>(x),
      "CheckpointingEnabled": "b",
      "CheckpointInterval": "n",
      "MinPauseBetweenCheckpoints": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface MonitoringConfigurationDescription {
  ConfigurationType?: ConfigurationType | null;
  MetricsLevel?: MetricsLevel | null;
  LogLevel?: LogLevel | null;
}
function toMonitoringConfigurationDescription(root: jsonP.JSONValue): MonitoringConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationType>(x),
      "MetricsLevel": (x: jsonP.JSONValue) => cmnP.readEnum<MetricsLevel>(x),
      "LogLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LogLevel>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ParallelismConfigurationDescription {
  ConfigurationType?: ConfigurationType | null;
  Parallelism?: number | null;
  ParallelismPerKPU?: number | null;
  CurrentParallelism?: number | null;
  AutoScalingEnabled?: boolean | null;
}
function toParallelismConfigurationDescription(root: jsonP.JSONValue): ParallelismConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationType>(x),
      "Parallelism": "n",
      "ParallelismPerKPU": "n",
      "CurrentParallelism": "n",
      "AutoScalingEnabled": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface EnvironmentPropertyDescriptions {
  PropertyGroupDescriptions?: PropertyGroup[] | null;
}
function toEnvironmentPropertyDescriptions(root: jsonP.JSONValue): EnvironmentPropertyDescriptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "PropertyGroupDescriptions": [toPropertyGroup],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ApplicationSnapshotConfigurationDescription {
  SnapshotsEnabled: boolean;
}
function toApplicationSnapshotConfigurationDescription(root: jsonP.JSONValue): ApplicationSnapshotConfigurationDescription {
  return jsonP.readObj({
    required: {
      "SnapshotsEnabled": "b",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SnapshotDetails {
  SnapshotName: string;
  SnapshotStatus: SnapshotStatus;
  ApplicationVersionId: number;
  SnapshotCreationTimestamp?: Date | number | null;
}
function toSnapshotDetails(root: jsonP.JSONValue): SnapshotDetails {
  return jsonP.readObj({
    required: {
      "SnapshotName": "s",
      "SnapshotStatus": (x: jsonP.JSONValue) => cmnP.readEnum<SnapshotStatus>(x),
      "ApplicationVersionId": "n",
    },
    optional: {
      "SnapshotCreationTimestamp": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type SnapshotStatus =
| "CREATING"
| "READY"
| "DELETING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ApplicationSummary {
  ApplicationName: string;
  ApplicationARN: string;
  ApplicationStatus: ApplicationStatus;
  ApplicationVersionId: number;
  RuntimeEnvironment: RuntimeEnvironment;
}
function toApplicationSummary(root: jsonP.JSONValue): ApplicationSummary {
  return jsonP.readObj({
    required: {
      "ApplicationName": "s",
      "ApplicationARN": "s",
      "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ApplicationStatus>(x),
      "ApplicationVersionId": "n",
      "RuntimeEnvironment": (x: jsonP.JSONValue) => cmnP.readEnum<RuntimeEnvironment>(x),
    },
    optional: {},
  }, root);
}
