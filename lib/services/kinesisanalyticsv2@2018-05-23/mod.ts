// Autogenerated API client for: Amazon Kinesis Analytics

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as Base64 from "https://deno.land/std@0.91.0/encoding/base64.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";
function serializeBlob(input: string | Uint8Array | null | undefined) {
  if (input == null) return input;
  return Base64.encode(input);
}

export default class KinesisAnalyticsV2 {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(KinesisAnalyticsV2.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-05-23",
    "endpointPrefix": "kinesisanalytics",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Kinesis Analytics V2",
    "serviceFullName": "Amazon Kinesis Analytics",
    "serviceId": "Kinesis Analytics V2",
    "signatureVersion": "v4",
    "signingName": "kinesisanalytics",
    "targetPrefix": "KinesisAnalytics_20180523",
    "uid": "kinesisanalyticsv2-2018-05-23"
  };

  async addApplicationCloudWatchLoggingOption(
    {abortSignal, ...params}: RequestConfig & s.AddApplicationCloudWatchLoggingOptionRequest,
  ): Promise<s.AddApplicationCloudWatchLoggingOptionResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      CloudWatchLoggingOption: fromCloudWatchLoggingOption(params["CloudWatchLoggingOption"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationCloudWatchLoggingOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "CloudWatchLoggingOptionDescriptions": [toCloudWatchLoggingOptionDescription],
      },
    }, await resp.json());
  }

  async addApplicationInput(
    {abortSignal, ...params}: RequestConfig & s.AddApplicationInputRequest,
  ): Promise<s.AddApplicationInputResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      Input: fromInput(params["Input"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationInput",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "InputDescriptions": [toInputDescription],
      },
    }, await resp.json());
  }

  async addApplicationInputProcessingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.AddApplicationInputProcessingConfigurationRequest,
  ): Promise<s.AddApplicationInputProcessingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      InputId: params["InputId"],
      InputProcessingConfiguration: fromInputProcessingConfiguration(params["InputProcessingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationInputProcessingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "InputId": "s",
        "InputProcessingConfigurationDescription": toInputProcessingConfigurationDescription,
      },
    }, await resp.json());
  }

  async addApplicationOutput(
    {abortSignal, ...params}: RequestConfig & s.AddApplicationOutputRequest,
  ): Promise<s.AddApplicationOutputResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      Output: fromOutput(params["Output"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationOutput",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "OutputDescriptions": [toOutputDescription],
      },
    }, await resp.json());
  }

  async addApplicationReferenceDataSource(
    {abortSignal, ...params}: RequestConfig & s.AddApplicationReferenceDataSourceRequest,
  ): Promise<s.AddApplicationReferenceDataSourceResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      ReferenceDataSource: fromReferenceDataSource(params["ReferenceDataSource"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationReferenceDataSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "ReferenceDataSourceDescriptions": [toReferenceDataSourceDescription],
      },
    }, await resp.json());
  }

  async addApplicationVpcConfiguration(
    {abortSignal, ...params}: RequestConfig & s.AddApplicationVpcConfigurationRequest,
  ): Promise<s.AddApplicationVpcConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      VpcConfiguration: fromVpcConfiguration(params["VpcConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddApplicationVpcConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "VpcConfigurationDescription": toVpcConfigurationDescription,
      },
    }, await resp.json());
  }

  async createApplication(
    {abortSignal, ...params}: RequestConfig & s.CreateApplicationRequest,
  ): Promise<s.CreateApplicationResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      ApplicationDescription: params["ApplicationDescription"],
      RuntimeEnvironment: params["RuntimeEnvironment"],
      ServiceExecutionRole: params["ServiceExecutionRole"],
      ApplicationConfiguration: fromApplicationConfiguration(params["ApplicationConfiguration"]),
      CloudWatchLoggingOptions: params["CloudWatchLoggingOptions"]?.map(x => fromCloudWatchLoggingOption(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
    });
    return jsonP.readObj({
      required: {
        "ApplicationDetail": toApplicationDetail,
      },
      optional: {},
    }, await resp.json());
  }

  async createApplicationPresignedUrl(
    {abortSignal, ...params}: RequestConfig & s.CreateApplicationPresignedUrlRequest,
  ): Promise<s.CreateApplicationPresignedUrlResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      UrlType: params["UrlType"],
      SessionExpirationDurationInSeconds: params["SessionExpirationDurationInSeconds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplicationPresignedUrl",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuthorizedUrl": "s",
      },
    }, await resp.json());
  }

  async createApplicationSnapshot(
    {abortSignal, ...params}: RequestConfig & s.CreateApplicationSnapshotRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      SnapshotName: params["SnapshotName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplicationSnapshot",
    });
    await resp.text();
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CreateTimestamp: jsonP.serializeDate_unixTimestamp(params["CreateTimestamp"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplication",
    });
    await resp.text();
  }

  async deleteApplicationCloudWatchLoggingOption(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationCloudWatchLoggingOptionRequest,
  ): Promise<s.DeleteApplicationCloudWatchLoggingOptionResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      CloudWatchLoggingOptionId: params["CloudWatchLoggingOptionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationCloudWatchLoggingOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
        "CloudWatchLoggingOptionDescriptions": [toCloudWatchLoggingOptionDescription],
      },
    }, await resp.json());
  }

  async deleteApplicationInputProcessingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationInputProcessingConfigurationRequest,
  ): Promise<s.DeleteApplicationInputProcessingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      InputId: params["InputId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationInputProcessingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async deleteApplicationOutput(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationOutputRequest,
  ): Promise<s.DeleteApplicationOutputResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      OutputId: params["OutputId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationOutput",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async deleteApplicationReferenceDataSource(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationReferenceDataSourceRequest,
  ): Promise<s.DeleteApplicationReferenceDataSourceResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      ReferenceId: params["ReferenceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationReferenceDataSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async deleteApplicationSnapshot(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationSnapshotRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      SnapshotName: params["SnapshotName"],
      SnapshotCreationTimestamp: jsonP.serializeDate_unixTimestamp(params["SnapshotCreationTimestamp"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationSnapshot",
    });
    await resp.text();
  }

  async deleteApplicationVpcConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationVpcConfigurationRequest,
  ): Promise<s.DeleteApplicationVpcConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      VpcConfigurationId: params["VpcConfigurationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationVpcConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationARN": "s",
        "ApplicationVersionId": "n",
      },
    }, await resp.json());
  }

  async describeApplication(
    {abortSignal, ...params}: RequestConfig & s.DescribeApplicationRequest,
  ): Promise<s.DescribeApplicationResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      IncludeAdditionalDetails: params["IncludeAdditionalDetails"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplication",
    });
    return jsonP.readObj({
      required: {
        "ApplicationDetail": toApplicationDetail,
      },
      optional: {},
    }, await resp.json());
  }

  async describeApplicationSnapshot(
    {abortSignal, ...params}: RequestConfig & s.DescribeApplicationSnapshotRequest,
  ): Promise<s.DescribeApplicationSnapshotResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      SnapshotName: params["SnapshotName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplicationSnapshot",
    });
    return jsonP.readObj({
      required: {
        "SnapshotDetails": toSnapshotDetails,
      },
      optional: {},
    }, await resp.json());
  }

  async discoverInputSchema(
    {abortSignal, ...params}: RequestConfig & s.DiscoverInputSchemaRequest,
  ): Promise<s.DiscoverInputSchemaResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      ServiceExecutionRole: params["ServiceExecutionRole"],
      InputStartingPositionConfiguration: fromInputStartingPositionConfiguration(params["InputStartingPositionConfiguration"]),
      S3Configuration: fromS3Configuration(params["S3Configuration"]),
      InputProcessingConfiguration: fromInputProcessingConfiguration(params["InputProcessingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DiscoverInputSchema",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InputSchema": toSourceSchema,
        "ParsedInputRecords": [x => jsonP.readList(String, x)],
        "ProcessedInputRecords": ["s"],
        "RawInputRecords": ["s"],
      },
    }, await resp.json());
  }

  async listApplicationSnapshots(
    {abortSignal, ...params}: RequestConfig & s.ListApplicationSnapshotsRequest,
  ): Promise<s.ListApplicationSnapshotsResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplicationSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SnapshotSummaries": [toSnapshotDetails],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listApplications(
    {abortSignal, ...params}: RequestConfig & s.ListApplicationsRequest = {},
  ): Promise<s.ListApplicationsResponse> {
    const body: jsonP.JSONObject = {
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplications",
    });
    return jsonP.readObj({
      required: {
        "ApplicationSummaries": [toApplicationSummary],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async startApplication(
    {abortSignal, ...params}: RequestConfig & s.StartApplicationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      RunConfiguration: fromRunConfiguration(params["RunConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartApplication",
    });
    await resp.text();
  }

  async stopApplication(
    {abortSignal, ...params}: RequestConfig & s.StopApplicationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      Force: params["Force"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopApplication",
    });
    await resp.text();
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    await resp.text();
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & s.UpdateApplicationRequest,
  ): Promise<s.UpdateApplicationResponse> {
    const body: jsonP.JSONObject = {
      ApplicationName: params["ApplicationName"],
      CurrentApplicationVersionId: params["CurrentApplicationVersionId"],
      ApplicationConfigurationUpdate: fromApplicationConfigurationUpdate(params["ApplicationConfigurationUpdate"]),
      ServiceExecutionRoleUpdate: params["ServiceExecutionRoleUpdate"],
      RunConfigurationUpdate: fromRunConfigurationUpdate(params["RunConfigurationUpdate"]),
      CloudWatchLoggingOptionUpdates: params["CloudWatchLoggingOptionUpdates"]?.map(x => fromCloudWatchLoggingOptionUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
    });
    return jsonP.readObj({
      required: {
        "ApplicationDetail": toApplicationDetail,
      },
      optional: {},
    }, await resp.json());
  }

}

function fromCloudWatchLoggingOption(input?: s.CloudWatchLoggingOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LogStreamARN: input["LogStreamARN"],
  }
}

function fromInput(input?: s.Input | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NamePrefix: input["NamePrefix"],
    InputProcessingConfiguration: fromInputProcessingConfiguration(input["InputProcessingConfiguration"]),
    KinesisStreamsInput: fromKinesisStreamsInput(input["KinesisStreamsInput"]),
    KinesisFirehoseInput: fromKinesisFirehoseInput(input["KinesisFirehoseInput"]),
    InputParallelism: fromInputParallelism(input["InputParallelism"]),
    InputSchema: fromSourceSchema(input["InputSchema"]),
  }
}

function fromInputProcessingConfiguration(input?: s.InputProcessingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputLambdaProcessor: fromInputLambdaProcessor(input["InputLambdaProcessor"]),
  }
}

function fromInputLambdaProcessor(input?: s.InputLambdaProcessor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

function fromKinesisStreamsInput(input?: s.KinesisStreamsInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

function fromKinesisFirehoseInput(input?: s.KinesisFirehoseInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

function fromInputParallelism(input?: s.InputParallelism | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Count: input["Count"],
  }
}
function toInputParallelism(root: jsonP.JSONValue): s.InputParallelism {
  return jsonP.readObj({
    required: {},
    optional: {
      "Count": "n",
    },
  }, root);
}

function fromSourceSchema(input?: s.SourceSchema | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormat: fromRecordFormat(input["RecordFormat"]),
    RecordEncoding: input["RecordEncoding"],
    RecordColumns: input["RecordColumns"]?.map(x => fromRecordColumn(x)),
  }
}
function toSourceSchema(root: jsonP.JSONValue): s.SourceSchema {
  return jsonP.readObj({
    required: {
      "RecordFormat": toRecordFormat,
      "RecordColumns": [toRecordColumn],
    },
    optional: {
      "RecordEncoding": "s",
    },
  }, root);
}

function fromRecordFormat(input?: s.RecordFormat | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormatType: input["RecordFormatType"],
    MappingParameters: fromMappingParameters(input["MappingParameters"]),
  }
}
function toRecordFormat(root: jsonP.JSONValue): s.RecordFormat {
  return jsonP.readObj({
    required: {
      "RecordFormatType": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecordFormatType>(x),
    },
    optional: {
      "MappingParameters": toMappingParameters,
    },
  }, root);
}

function fromMappingParameters(input?: s.MappingParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JSONMappingParameters: fromJSONMappingParameters(input["JSONMappingParameters"]),
    CSVMappingParameters: fromCSVMappingParameters(input["CSVMappingParameters"]),
  }
}
function toMappingParameters(root: jsonP.JSONValue): s.MappingParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "JSONMappingParameters": toJSONMappingParameters,
      "CSVMappingParameters": toCSVMappingParameters,
    },
  }, root);
}

function fromJSONMappingParameters(input?: s.JSONMappingParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordRowPath: input["RecordRowPath"],
  }
}
function toJSONMappingParameters(root: jsonP.JSONValue): s.JSONMappingParameters {
  return jsonP.readObj({
    required: {
      "RecordRowPath": "s",
    },
    optional: {},
  }, root);
}

function fromCSVMappingParameters(input?: s.CSVMappingParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordRowDelimiter: input["RecordRowDelimiter"],
    RecordColumnDelimiter: input["RecordColumnDelimiter"],
  }
}
function toCSVMappingParameters(root: jsonP.JSONValue): s.CSVMappingParameters {
  return jsonP.readObj({
    required: {
      "RecordRowDelimiter": "s",
      "RecordColumnDelimiter": "s",
    },
    optional: {},
  }, root);
}

function fromRecordColumn(input?: s.RecordColumn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Mapping: input["Mapping"],
    SqlType: input["SqlType"],
  }
}
function toRecordColumn(root: jsonP.JSONValue): s.RecordColumn {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "SqlType": "s",
    },
    optional: {
      "Mapping": "s",
    },
  }, root);
}

function fromOutput(input?: s.Output | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    KinesisStreamsOutput: fromKinesisStreamsOutput(input["KinesisStreamsOutput"]),
    KinesisFirehoseOutput: fromKinesisFirehoseOutput(input["KinesisFirehoseOutput"]),
    LambdaOutput: fromLambdaOutput(input["LambdaOutput"]),
    DestinationSchema: fromDestinationSchema(input["DestinationSchema"]),
  }
}

function fromKinesisStreamsOutput(input?: s.KinesisStreamsOutput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

function fromKinesisFirehoseOutput(input?: s.KinesisFirehoseOutput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

function fromLambdaOutput(input?: s.LambdaOutput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARN: input["ResourceARN"],
  }
}

function fromDestinationSchema(input?: s.DestinationSchema | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormatType: input["RecordFormatType"],
  }
}
function toDestinationSchema(root: jsonP.JSONValue): s.DestinationSchema {
  return jsonP.readObj({
    required: {
      "RecordFormatType": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecordFormatType>(x),
    },
    optional: {},
  }, root);
}

function fromReferenceDataSource(input?: s.ReferenceDataSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TableName: input["TableName"],
    S3ReferenceDataSource: fromS3ReferenceDataSource(input["S3ReferenceDataSource"]),
    ReferenceSchema: fromSourceSchema(input["ReferenceSchema"]),
  }
}

function fromS3ReferenceDataSource(input?: s.S3ReferenceDataSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARN: input["BucketARN"],
    FileKey: input["FileKey"],
  }
}

function fromVpcConfiguration(input?: s.VpcConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIds: input["SubnetIds"],
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}

function fromApplicationConfiguration(input?: s.ApplicationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SqlApplicationConfiguration: fromSqlApplicationConfiguration(input["SqlApplicationConfiguration"]),
    FlinkApplicationConfiguration: fromFlinkApplicationConfiguration(input["FlinkApplicationConfiguration"]),
    EnvironmentProperties: fromEnvironmentProperties(input["EnvironmentProperties"]),
    ApplicationCodeConfiguration: fromApplicationCodeConfiguration(input["ApplicationCodeConfiguration"]),
    ApplicationSnapshotConfiguration: fromApplicationSnapshotConfiguration(input["ApplicationSnapshotConfiguration"]),
    VpcConfigurations: input["VpcConfigurations"]?.map(x => fromVpcConfiguration(x)),
  }
}

function fromSqlApplicationConfiguration(input?: s.SqlApplicationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Inputs: input["Inputs"]?.map(x => fromInput(x)),
    Outputs: input["Outputs"]?.map(x => fromOutput(x)),
    ReferenceDataSources: input["ReferenceDataSources"]?.map(x => fromReferenceDataSource(x)),
  }
}

function fromFlinkApplicationConfiguration(input?: s.FlinkApplicationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CheckpointConfiguration: fromCheckpointConfiguration(input["CheckpointConfiguration"]),
    MonitoringConfiguration: fromMonitoringConfiguration(input["MonitoringConfiguration"]),
    ParallelismConfiguration: fromParallelismConfiguration(input["ParallelismConfiguration"]),
  }
}

function fromCheckpointConfiguration(input?: s.CheckpointConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationType: input["ConfigurationType"],
    CheckpointingEnabled: input["CheckpointingEnabled"],
    CheckpointInterval: input["CheckpointInterval"],
    MinPauseBetweenCheckpoints: input["MinPauseBetweenCheckpoints"],
  }
}

function fromMonitoringConfiguration(input?: s.MonitoringConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationType: input["ConfigurationType"],
    MetricsLevel: input["MetricsLevel"],
    LogLevel: input["LogLevel"],
  }
}

function fromParallelismConfiguration(input?: s.ParallelismConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationType: input["ConfigurationType"],
    Parallelism: input["Parallelism"],
    ParallelismPerKPU: input["ParallelismPerKPU"],
    AutoScalingEnabled: input["AutoScalingEnabled"],
  }
}

function fromEnvironmentProperties(input?: s.EnvironmentProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PropertyGroups: input["PropertyGroups"]?.map(x => fromPropertyGroup(x)),
  }
}

function fromPropertyGroup(input?: s.PropertyGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PropertyGroupId: input["PropertyGroupId"],
    PropertyMap: input["PropertyMap"],
  }
}
function toPropertyGroup(root: jsonP.JSONValue): s.PropertyGroup {
  return jsonP.readObj({
    required: {
      "PropertyGroupId": "s",
      "PropertyMap": x => jsonP.readMap(String, String, x),
    },
    optional: {},
  }, root);
}

function fromApplicationCodeConfiguration(input?: s.ApplicationCodeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CodeContent: fromCodeContent(input["CodeContent"]),
    CodeContentType: input["CodeContentType"],
  }
}

function fromCodeContent(input?: s.CodeContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TextContent: input["TextContent"],
    ZipFileContent: serializeBlob(input["ZipFileContent"]),
    S3ContentLocation: fromS3ContentLocation(input["S3ContentLocation"]),
  }
}

function fromS3ContentLocation(input?: s.S3ContentLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARN: input["BucketARN"],
    FileKey: input["FileKey"],
    ObjectVersion: input["ObjectVersion"],
  }
}

function fromApplicationSnapshotConfiguration(input?: s.ApplicationSnapshotConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnapshotsEnabled: input["SnapshotsEnabled"],
  }
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

function fromInputStartingPositionConfiguration(input?: s.InputStartingPositionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputStartingPosition: input["InputStartingPosition"],
  }
}
function toInputStartingPositionConfiguration(root: jsonP.JSONValue): s.InputStartingPositionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputStartingPosition": (x: jsonP.JSONValue) => cmnP.readEnum<s.InputStartingPosition>(x),
    },
  }, root);
}

function fromS3Configuration(input?: s.S3Configuration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARN: input["BucketARN"],
    FileKey: input["FileKey"],
  }
}

function fromRunConfiguration(input?: s.RunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FlinkRunConfiguration: fromFlinkRunConfiguration(input["FlinkRunConfiguration"]),
    SqlRunConfigurations: input["SqlRunConfigurations"]?.map(x => fromSqlRunConfiguration(x)),
    ApplicationRestoreConfiguration: fromApplicationRestoreConfiguration(input["ApplicationRestoreConfiguration"]),
  }
}

function fromFlinkRunConfiguration(input?: s.FlinkRunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AllowNonRestoredState: input["AllowNonRestoredState"],
  }
}
function toFlinkRunConfiguration(root: jsonP.JSONValue): s.FlinkRunConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowNonRestoredState": "b",
    },
  }, root);
}

function fromSqlRunConfiguration(input?: s.SqlRunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputId: input["InputId"],
    InputStartingPositionConfiguration: fromInputStartingPositionConfiguration(input["InputStartingPositionConfiguration"]),
  }
}

function fromApplicationRestoreConfiguration(input?: s.ApplicationRestoreConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApplicationRestoreType: input["ApplicationRestoreType"],
    SnapshotName: input["SnapshotName"],
  }
}
function toApplicationRestoreConfiguration(root: jsonP.JSONValue): s.ApplicationRestoreConfiguration {
  return jsonP.readObj({
    required: {
      "ApplicationRestoreType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ApplicationRestoreType>(x),
    },
    optional: {
      "SnapshotName": "s",
    },
  }, root);
}

function fromApplicationConfigurationUpdate(input?: s.ApplicationConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SqlApplicationConfigurationUpdate: fromSqlApplicationConfigurationUpdate(input["SqlApplicationConfigurationUpdate"]),
    ApplicationCodeConfigurationUpdate: fromApplicationCodeConfigurationUpdate(input["ApplicationCodeConfigurationUpdate"]),
    FlinkApplicationConfigurationUpdate: fromFlinkApplicationConfigurationUpdate(input["FlinkApplicationConfigurationUpdate"]),
    EnvironmentPropertyUpdates: fromEnvironmentPropertyUpdates(input["EnvironmentPropertyUpdates"]),
    ApplicationSnapshotConfigurationUpdate: fromApplicationSnapshotConfigurationUpdate(input["ApplicationSnapshotConfigurationUpdate"]),
    VpcConfigurationUpdates: input["VpcConfigurationUpdates"]?.map(x => fromVpcConfigurationUpdate(x)),
  }
}

function fromSqlApplicationConfigurationUpdate(input?: s.SqlApplicationConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputUpdates: input["InputUpdates"]?.map(x => fromInputUpdate(x)),
    OutputUpdates: input["OutputUpdates"]?.map(x => fromOutputUpdate(x)),
    ReferenceDataSourceUpdates: input["ReferenceDataSourceUpdates"]?.map(x => fromReferenceDataSourceUpdate(x)),
  }
}

function fromInputUpdate(input?: s.InputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputId: input["InputId"],
    NamePrefixUpdate: input["NamePrefixUpdate"],
    InputProcessingConfigurationUpdate: fromInputProcessingConfigurationUpdate(input["InputProcessingConfigurationUpdate"]),
    KinesisStreamsInputUpdate: fromKinesisStreamsInputUpdate(input["KinesisStreamsInputUpdate"]),
    KinesisFirehoseInputUpdate: fromKinesisFirehoseInputUpdate(input["KinesisFirehoseInputUpdate"]),
    InputSchemaUpdate: fromInputSchemaUpdate(input["InputSchemaUpdate"]),
    InputParallelismUpdate: fromInputParallelismUpdate(input["InputParallelismUpdate"]),
  }
}

function fromInputProcessingConfigurationUpdate(input?: s.InputProcessingConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputLambdaProcessorUpdate: fromInputLambdaProcessorUpdate(input["InputLambdaProcessorUpdate"]),
  }
}

function fromInputLambdaProcessorUpdate(input?: s.InputLambdaProcessorUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

function fromKinesisStreamsInputUpdate(input?: s.KinesisStreamsInputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

function fromKinesisFirehoseInputUpdate(input?: s.KinesisFirehoseInputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

function fromInputSchemaUpdate(input?: s.InputSchemaUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RecordFormatUpdate: fromRecordFormat(input["RecordFormatUpdate"]),
    RecordEncodingUpdate: input["RecordEncodingUpdate"],
    RecordColumnUpdates: input["RecordColumnUpdates"]?.map(x => fromRecordColumn(x)),
  }
}

function fromInputParallelismUpdate(input?: s.InputParallelismUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CountUpdate: input["CountUpdate"],
  }
}

function fromOutputUpdate(input?: s.OutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OutputId: input["OutputId"],
    NameUpdate: input["NameUpdate"],
    KinesisStreamsOutputUpdate: fromKinesisStreamsOutputUpdate(input["KinesisStreamsOutputUpdate"]),
    KinesisFirehoseOutputUpdate: fromKinesisFirehoseOutputUpdate(input["KinesisFirehoseOutputUpdate"]),
    LambdaOutputUpdate: fromLambdaOutputUpdate(input["LambdaOutputUpdate"]),
    DestinationSchemaUpdate: fromDestinationSchema(input["DestinationSchemaUpdate"]),
  }
}

function fromKinesisStreamsOutputUpdate(input?: s.KinesisStreamsOutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

function fromKinesisFirehoseOutputUpdate(input?: s.KinesisFirehoseOutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

function fromLambdaOutputUpdate(input?: s.LambdaOutputUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceARNUpdate: input["ResourceARNUpdate"],
  }
}

function fromReferenceDataSourceUpdate(input?: s.ReferenceDataSourceUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReferenceId: input["ReferenceId"],
    TableNameUpdate: input["TableNameUpdate"],
    S3ReferenceDataSourceUpdate: fromS3ReferenceDataSourceUpdate(input["S3ReferenceDataSourceUpdate"]),
    ReferenceSchemaUpdate: fromSourceSchema(input["ReferenceSchemaUpdate"]),
  }
}

function fromS3ReferenceDataSourceUpdate(input?: s.S3ReferenceDataSourceUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARNUpdate: input["BucketARNUpdate"],
    FileKeyUpdate: input["FileKeyUpdate"],
  }
}

function fromApplicationCodeConfigurationUpdate(input?: s.ApplicationCodeConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CodeContentTypeUpdate: input["CodeContentTypeUpdate"],
    CodeContentUpdate: fromCodeContentUpdate(input["CodeContentUpdate"]),
  }
}

function fromCodeContentUpdate(input?: s.CodeContentUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TextContentUpdate: input["TextContentUpdate"],
    ZipFileContentUpdate: serializeBlob(input["ZipFileContentUpdate"]),
    S3ContentLocationUpdate: fromS3ContentLocationUpdate(input["S3ContentLocationUpdate"]),
  }
}

function fromS3ContentLocationUpdate(input?: s.S3ContentLocationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketARNUpdate: input["BucketARNUpdate"],
    FileKeyUpdate: input["FileKeyUpdate"],
    ObjectVersionUpdate: input["ObjectVersionUpdate"],
  }
}

function fromFlinkApplicationConfigurationUpdate(input?: s.FlinkApplicationConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CheckpointConfigurationUpdate: fromCheckpointConfigurationUpdate(input["CheckpointConfigurationUpdate"]),
    MonitoringConfigurationUpdate: fromMonitoringConfigurationUpdate(input["MonitoringConfigurationUpdate"]),
    ParallelismConfigurationUpdate: fromParallelismConfigurationUpdate(input["ParallelismConfigurationUpdate"]),
  }
}

function fromCheckpointConfigurationUpdate(input?: s.CheckpointConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationTypeUpdate: input["ConfigurationTypeUpdate"],
    CheckpointingEnabledUpdate: input["CheckpointingEnabledUpdate"],
    CheckpointIntervalUpdate: input["CheckpointIntervalUpdate"],
    MinPauseBetweenCheckpointsUpdate: input["MinPauseBetweenCheckpointsUpdate"],
  }
}

function fromMonitoringConfigurationUpdate(input?: s.MonitoringConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationTypeUpdate: input["ConfigurationTypeUpdate"],
    MetricsLevelUpdate: input["MetricsLevelUpdate"],
    LogLevelUpdate: input["LogLevelUpdate"],
  }
}

function fromParallelismConfigurationUpdate(input?: s.ParallelismConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationTypeUpdate: input["ConfigurationTypeUpdate"],
    ParallelismUpdate: input["ParallelismUpdate"],
    ParallelismPerKPUUpdate: input["ParallelismPerKPUUpdate"],
    AutoScalingEnabledUpdate: input["AutoScalingEnabledUpdate"],
  }
}

function fromEnvironmentPropertyUpdates(input?: s.EnvironmentPropertyUpdates | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PropertyGroups: input["PropertyGroups"]?.map(x => fromPropertyGroup(x)),
  }
}

function fromApplicationSnapshotConfigurationUpdate(input?: s.ApplicationSnapshotConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnapshotsEnabledUpdate: input["SnapshotsEnabledUpdate"],
  }
}

function fromVpcConfigurationUpdate(input?: s.VpcConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VpcConfigurationId: input["VpcConfigurationId"],
    SubnetIdUpdates: input["SubnetIdUpdates"],
    SecurityGroupIdUpdates: input["SecurityGroupIdUpdates"],
  }
}

function fromRunConfigurationUpdate(input?: s.RunConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FlinkRunConfiguration: fromFlinkRunConfiguration(input["FlinkRunConfiguration"]),
    ApplicationRestoreConfiguration: fromApplicationRestoreConfiguration(input["ApplicationRestoreConfiguration"]),
  }
}

function fromCloudWatchLoggingOptionUpdate(input?: s.CloudWatchLoggingOptionUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CloudWatchLoggingOptionId: input["CloudWatchLoggingOptionId"],
    LogStreamARNUpdate: input["LogStreamARNUpdate"],
  }
}

function toCloudWatchLoggingOptionDescription(root: jsonP.JSONValue): s.CloudWatchLoggingOptionDescription {
  return jsonP.readObj({
    required: {
      "LogStreamARN": "s",
    },
    optional: {
      "CloudWatchLoggingOptionId": "s",
      "RoleARN": "s",
    },
  }, root);
}

function toInputDescription(root: jsonP.JSONValue): s.InputDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputId": "s",
      "NamePrefix": "s",
      "InAppStreamNames": ["s"],
      "InputProcessingConfigurationDescription": toInputProcessingConfigurationDescription,
      "KinesisStreamsInputDescription": toKinesisStreamsInputDescription,
      "KinesisFirehoseInputDescription": toKinesisFirehoseInputDescription,
      "InputSchema": toSourceSchema,
      "InputParallelism": toInputParallelism,
      "InputStartingPositionConfiguration": toInputStartingPositionConfiguration,
    },
  }, root);
}

function toInputProcessingConfigurationDescription(root: jsonP.JSONValue): s.InputProcessingConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputLambdaProcessorDescription": toInputLambdaProcessorDescription,
    },
  }, root);
}

function toInputLambdaProcessorDescription(root: jsonP.JSONValue): s.InputLambdaProcessorDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

function toKinesisStreamsInputDescription(root: jsonP.JSONValue): s.KinesisStreamsInputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

function toKinesisFirehoseInputDescription(root: jsonP.JSONValue): s.KinesisFirehoseInputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

function toOutputDescription(root: jsonP.JSONValue): s.OutputDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutputId": "s",
      "Name": "s",
      "KinesisStreamsOutputDescription": toKinesisStreamsOutputDescription,
      "KinesisFirehoseOutputDescription": toKinesisFirehoseOutputDescription,
      "LambdaOutputDescription": toLambdaOutputDescription,
      "DestinationSchema": toDestinationSchema,
    },
  }, root);
}

function toKinesisStreamsOutputDescription(root: jsonP.JSONValue): s.KinesisStreamsOutputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

function toKinesisFirehoseOutputDescription(root: jsonP.JSONValue): s.KinesisFirehoseOutputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

function toLambdaOutputDescription(root: jsonP.JSONValue): s.LambdaOutputDescription {
  return jsonP.readObj({
    required: {
      "ResourceARN": "s",
    },
    optional: {
      "RoleARN": "s",
    },
  }, root);
}

function toReferenceDataSourceDescription(root: jsonP.JSONValue): s.ReferenceDataSourceDescription {
  return jsonP.readObj({
    required: {
      "ReferenceId": "s",
      "TableName": "s",
      "S3ReferenceDataSourceDescription": toS3ReferenceDataSourceDescription,
    },
    optional: {
      "ReferenceSchema": toSourceSchema,
    },
  }, root);
}

function toS3ReferenceDataSourceDescription(root: jsonP.JSONValue): s.S3ReferenceDataSourceDescription {
  return jsonP.readObj({
    required: {
      "BucketARN": "s",
      "FileKey": "s",
    },
    optional: {
      "ReferenceRoleARN": "s",
    },
  }, root);
}

function toVpcConfigurationDescription(root: jsonP.JSONValue): s.VpcConfigurationDescription {
  return jsonP.readObj({
    required: {
      "VpcConfigurationId": "s",
      "VpcId": "s",
      "SubnetIds": ["s"],
      "SecurityGroupIds": ["s"],
    },
    optional: {},
  }, root);
}

function toApplicationDetail(root: jsonP.JSONValue): s.ApplicationDetail {
  return jsonP.readObj({
    required: {
      "ApplicationARN": "s",
      "ApplicationName": "s",
      "RuntimeEnvironment": (x: jsonP.JSONValue) => cmnP.readEnum<s.RuntimeEnvironment>(x),
      "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ApplicationStatus>(x),
      "ApplicationVersionId": "n",
    },
    optional: {
      "ApplicationDescription": "s",
      "ServiceExecutionRole": "s",
      "CreateTimestamp": "d",
      "LastUpdateTimestamp": "d",
      "ApplicationConfigurationDescription": toApplicationConfigurationDescription,
      "CloudWatchLoggingOptionDescriptions": [toCloudWatchLoggingOptionDescription],
    },
  }, root);
}

function toApplicationConfigurationDescription(root: jsonP.JSONValue): s.ApplicationConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "SqlApplicationConfigurationDescription": toSqlApplicationConfigurationDescription,
      "ApplicationCodeConfigurationDescription": toApplicationCodeConfigurationDescription,
      "RunConfigurationDescription": toRunConfigurationDescription,
      "FlinkApplicationConfigurationDescription": toFlinkApplicationConfigurationDescription,
      "EnvironmentPropertyDescriptions": toEnvironmentPropertyDescriptions,
      "ApplicationSnapshotConfigurationDescription": toApplicationSnapshotConfigurationDescription,
      "VpcConfigurationDescriptions": [toVpcConfigurationDescription],
    },
  }, root);
}

function toSqlApplicationConfigurationDescription(root: jsonP.JSONValue): s.SqlApplicationConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "InputDescriptions": [toInputDescription],
      "OutputDescriptions": [toOutputDescription],
      "ReferenceDataSourceDescriptions": [toReferenceDataSourceDescription],
    },
  }, root);
}

function toApplicationCodeConfigurationDescription(root: jsonP.JSONValue): s.ApplicationCodeConfigurationDescription {
  return jsonP.readObj({
    required: {
      "CodeContentType": (x: jsonP.JSONValue) => cmnP.readEnum<s.CodeContentType>(x),
    },
    optional: {
      "CodeContentDescription": toCodeContentDescription,
    },
  }, root);
}

function toCodeContentDescription(root: jsonP.JSONValue): s.CodeContentDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "TextContent": "s",
      "CodeMD5": "s",
      "CodeSize": "n",
      "S3ApplicationCodeLocationDescription": toS3ApplicationCodeLocationDescription,
    },
  }, root);
}

function toS3ApplicationCodeLocationDescription(root: jsonP.JSONValue): s.S3ApplicationCodeLocationDescription {
  return jsonP.readObj({
    required: {
      "BucketARN": "s",
      "FileKey": "s",
    },
    optional: {
      "ObjectVersion": "s",
    },
  }, root);
}

function toRunConfigurationDescription(root: jsonP.JSONValue): s.RunConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationRestoreConfigurationDescription": toApplicationRestoreConfiguration,
      "FlinkRunConfigurationDescription": toFlinkRunConfiguration,
    },
  }, root);
}

function toFlinkApplicationConfigurationDescription(root: jsonP.JSONValue): s.FlinkApplicationConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "CheckpointConfigurationDescription": toCheckpointConfigurationDescription,
      "MonitoringConfigurationDescription": toMonitoringConfigurationDescription,
      "ParallelismConfigurationDescription": toParallelismConfigurationDescription,
      "JobPlanDescription": "s",
    },
  }, root);
}

function toCheckpointConfigurationDescription(root: jsonP.JSONValue): s.CheckpointConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationType>(x),
      "CheckpointingEnabled": "b",
      "CheckpointInterval": "n",
      "MinPauseBetweenCheckpoints": "n",
    },
  }, root);
}

function toMonitoringConfigurationDescription(root: jsonP.JSONValue): s.MonitoringConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationType>(x),
      "MetricsLevel": (x: jsonP.JSONValue) => cmnP.readEnum<s.MetricsLevel>(x),
      "LogLevel": (x: jsonP.JSONValue) => cmnP.readEnum<s.LogLevel>(x),
    },
  }, root);
}

function toParallelismConfigurationDescription(root: jsonP.JSONValue): s.ParallelismConfigurationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationType>(x),
      "Parallelism": "n",
      "ParallelismPerKPU": "n",
      "CurrentParallelism": "n",
      "AutoScalingEnabled": "b",
    },
  }, root);
}

function toEnvironmentPropertyDescriptions(root: jsonP.JSONValue): s.EnvironmentPropertyDescriptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "PropertyGroupDescriptions": [toPropertyGroup],
    },
  }, root);
}

function toApplicationSnapshotConfigurationDescription(root: jsonP.JSONValue): s.ApplicationSnapshotConfigurationDescription {
  return jsonP.readObj({
    required: {
      "SnapshotsEnabled": "b",
    },
    optional: {},
  }, root);
}

function toSnapshotDetails(root: jsonP.JSONValue): s.SnapshotDetails {
  return jsonP.readObj({
    required: {
      "SnapshotName": "s",
      "SnapshotStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.SnapshotStatus>(x),
      "ApplicationVersionId": "n",
    },
    optional: {
      "SnapshotCreationTimestamp": "d",
    },
  }, root);
}

function toApplicationSummary(root: jsonP.JSONValue): s.ApplicationSummary {
  return jsonP.readObj({
    required: {
      "ApplicationName": "s",
      "ApplicationARN": "s",
      "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ApplicationStatus>(x),
      "ApplicationVersionId": "n",
      "RuntimeEnvironment": (x: jsonP.JSONValue) => cmnP.readEnum<s.RuntimeEnvironment>(x),
    },
    optional: {},
  }, root);
}
