// Autogenerated API client for: AWS Migration Hub

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MigrationHub {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MigrationHub.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-05-31",
    "endpointPrefix": "mgh",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Migration Hub",
    "serviceId": "Migration Hub",
    "signatureVersion": "v4",
    "targetPrefix": "AWSMigrationHub",
    "uid": "AWSMigrationHub-2017-05-31"
  };

  async associateCreatedArtifact(
    {abortSignal, ...params}: RequestConfig & AssociateCreatedArtifactRequest,
  ): Promise<AssociateCreatedArtifactResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      CreatedArtifact: fromCreatedArtifact(params["CreatedArtifact"]),
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateCreatedArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDiscoveredResource(
    {abortSignal, ...params}: RequestConfig & AssociateDiscoveredResourceRequest,
  ): Promise<AssociateDiscoveredResourceResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      DiscoveredResource: fromDiscoveredResource(params["DiscoveredResource"]),
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDiscoveredResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createProgressUpdateStream(
    {abortSignal, ...params}: RequestConfig & CreateProgressUpdateStreamRequest,
  ): Promise<CreateProgressUpdateStreamResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStreamName: params["ProgressUpdateStreamName"],
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProgressUpdateStream",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProgressUpdateStream(
    {abortSignal, ...params}: RequestConfig & DeleteProgressUpdateStreamRequest,
  ): Promise<DeleteProgressUpdateStreamResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStreamName: params["ProgressUpdateStreamName"],
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProgressUpdateStream",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeApplicationState(
    {abortSignal, ...params}: RequestConfig & DescribeApplicationStateRequest,
  ): Promise<DescribeApplicationStateResult> {
    const body: jsonP.JSONObject = params ? {
      ApplicationId: params["ApplicationId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplicationState",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ApplicationStatus>(x),
        "LastUpdatedTime": "d",
      },
    }, await resp.json());
  }

  async describeMigrationTask(
    {abortSignal, ...params}: RequestConfig & DescribeMigrationTaskRequest,
  ): Promise<DescribeMigrationTaskResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMigrationTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MigrationTask": toMigrationTask,
      },
    }, await resp.json());
  }

  async disassociateCreatedArtifact(
    {abortSignal, ...params}: RequestConfig & DisassociateCreatedArtifactRequest,
  ): Promise<DisassociateCreatedArtifactResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      CreatedArtifactName: params["CreatedArtifactName"],
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateCreatedArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDiscoveredResource(
    {abortSignal, ...params}: RequestConfig & DisassociateDiscoveredResourceRequest,
  ): Promise<DisassociateDiscoveredResourceResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      ConfigurationId: params["ConfigurationId"],
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDiscoveredResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async importMigrationTask(
    {abortSignal, ...params}: RequestConfig & ImportMigrationTaskRequest,
  ): Promise<ImportMigrationTaskResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportMigrationTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async listApplicationStates(
    {abortSignal, ...params}: RequestConfig & ListApplicationStatesRequest = {},
  ): Promise<ListApplicationStatesResult> {
    const body: jsonP.JSONObject = params ? {
      ApplicationIds: params["ApplicationIds"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplicationStates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationStateList": [toApplicationState],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCreatedArtifacts(
    {abortSignal, ...params}: RequestConfig & ListCreatedArtifactsRequest,
  ): Promise<ListCreatedArtifactsResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCreatedArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "CreatedArtifactList": [toCreatedArtifact],
      },
    }, await resp.json());
  }

  async listDiscoveredResources(
    {abortSignal, ...params}: RequestConfig & ListDiscoveredResourcesRequest,
  ): Promise<ListDiscoveredResourcesResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDiscoveredResources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "DiscoveredResourceList": [toDiscoveredResource],
      },
    }, await resp.json());
  }

  async listMigrationTasks(
    {abortSignal, ...params}: RequestConfig & ListMigrationTasksRequest = {},
  ): Promise<ListMigrationTasksResult> {
    const body: jsonP.JSONObject = params ? {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      ResourceName: params["ResourceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMigrationTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "MigrationTaskSummaryList": [toMigrationTaskSummary],
      },
    }, await resp.json());
  }

  async listProgressUpdateStreams(
    {abortSignal, ...params}: RequestConfig & ListProgressUpdateStreamsRequest = {},
  ): Promise<ListProgressUpdateStreamsResult> {
    const body: jsonP.JSONObject = params ? {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProgressUpdateStreams",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProgressUpdateStreamSummaryList": [toProgressUpdateStreamSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async notifyApplicationState(
    {abortSignal, ...params}: RequestConfig & NotifyApplicationStateRequest,
  ): Promise<NotifyApplicationStateResult> {
    const body: jsonP.JSONObject = params ? {
      ApplicationId: params["ApplicationId"],
      Status: params["Status"],
      UpdateDateTime: jsonP.serializeDate_unixTimestamp(params["UpdateDateTime"]),
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "NotifyApplicationState",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async notifyMigrationTaskState(
    {abortSignal, ...params}: RequestConfig & NotifyMigrationTaskStateRequest,
  ): Promise<NotifyMigrationTaskStateResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      Task: fromTask(params["Task"]),
      UpdateDateTime: jsonP.serializeDate_unixTimestamp(params["UpdateDateTime"]),
      NextUpdateSeconds: params["NextUpdateSeconds"],
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "NotifyMigrationTaskState",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putResourceAttributes(
    {abortSignal, ...params}: RequestConfig & PutResourceAttributesRequest,
  ): Promise<PutResourceAttributesResult> {
    const body: jsonP.JSONObject = params ? {
      ProgressUpdateStream: params["ProgressUpdateStream"],
      MigrationTaskName: params["MigrationTaskName"],
      ResourceAttributeList: params["ResourceAttributeList"]?.map(x => fromResourceAttribute(x)),
      DryRun: params["DryRun"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResourceAttributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateCreatedArtifactRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  CreatedArtifact: CreatedArtifact;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AssociateDiscoveredResourceRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  DiscoveredResource: DiscoveredResource;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateProgressUpdateStreamRequest {
  ProgressUpdateStreamName: string;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteProgressUpdateStreamRequest {
  ProgressUpdateStreamName: string;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeApplicationStateRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DescribeMigrationTaskRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
}

// refs: 1 - tags: named, input
export interface DisassociateCreatedArtifactRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  CreatedArtifactName: string;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DisassociateDiscoveredResourceRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  ConfigurationId: string;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ImportMigrationTaskRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListApplicationStatesRequest {
  ApplicationIds?: string[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListCreatedArtifactsRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDiscoveredResourcesRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListMigrationTasksRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  ResourceName?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProgressUpdateStreamsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface NotifyApplicationStateRequest {
  ApplicationId: string;
  Status: ApplicationStatus;
  UpdateDateTime?: Date | number | null;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface NotifyMigrationTaskStateRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  Task: Task;
  UpdateDateTime: Date | number;
  NextUpdateSeconds: number;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutResourceAttributesRequest {
  ProgressUpdateStream: string;
  MigrationTaskName: string;
  ResourceAttributeList: ResourceAttribute[];
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, output
export interface AssociateCreatedArtifactResult {
}

// refs: 1 - tags: named, output
export interface AssociateDiscoveredResourceResult {
}

// refs: 1 - tags: named, output
export interface CreateProgressUpdateStreamResult {
}

// refs: 1 - tags: named, output
export interface DeleteProgressUpdateStreamResult {
}

// refs: 1 - tags: named, output
export interface DescribeApplicationStateResult {
  ApplicationStatus?: ApplicationStatus | null;
  LastUpdatedTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeMigrationTaskResult {
  MigrationTask?: MigrationTask | null;
}

// refs: 1 - tags: named, output
export interface DisassociateCreatedArtifactResult {
}

// refs: 1 - tags: named, output
export interface DisassociateDiscoveredResourceResult {
}

// refs: 1 - tags: named, output
export interface ImportMigrationTaskResult {
}

// refs: 1 - tags: named, output
export interface ListApplicationStatesResult {
  ApplicationStateList?: ApplicationState[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCreatedArtifactsResult {
  NextToken?: string | null;
  CreatedArtifactList?: CreatedArtifact[] | null;
}

// refs: 1 - tags: named, output
export interface ListDiscoveredResourcesResult {
  NextToken?: string | null;
  DiscoveredResourceList?: DiscoveredResource[] | null;
}

// refs: 1 - tags: named, output
export interface ListMigrationTasksResult {
  NextToken?: string | null;
  MigrationTaskSummaryList?: MigrationTaskSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListProgressUpdateStreamsResult {
  ProgressUpdateStreamSummaryList?: ProgressUpdateStreamSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface NotifyApplicationStateResult {
}

// refs: 1 - tags: named, output
export interface NotifyMigrationTaskStateResult {
}

// refs: 1 - tags: named, output
export interface PutResourceAttributesResult {
}

// refs: 2 - tags: input, named, interface, output
export interface CreatedArtifact {
  Name: string;
  Description?: string | null;
}
function fromCreatedArtifact(input?: CreatedArtifact | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Description: input["Description"],
  }
}
function toCreatedArtifact(root: jsonP.JSONValue): CreatedArtifact {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Description": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DiscoveredResource {
  ConfigurationId: string;
  Description?: string | null;
}
function fromDiscoveredResource(input?: DiscoveredResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationId: input["ConfigurationId"],
    Description: input["Description"],
  }
}
function toDiscoveredResource(root: jsonP.JSONValue): DiscoveredResource {
  return jsonP.readObj({
    required: {
      "ConfigurationId": "s",
    },
    optional: {
      "Description": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ApplicationStatus =
| "NOT_STARTED"
| "IN_PROGRESS"
| "COMPLETED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface Task {
  Status: Status;
  StatusDetail?: string | null;
  ProgressPercent?: number | null;
}
function fromTask(input?: Task | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Status: input["Status"],
    StatusDetail: input["StatusDetail"],
    ProgressPercent: input["ProgressPercent"],
  }
}
function toTask(root: jsonP.JSONValue): Task {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
    },
    optional: {
      "StatusDetail": "s",
      "ProgressPercent": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type Status =
| "NOT_STARTED"
| "IN_PROGRESS"
| "FAILED"
| "COMPLETED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ResourceAttribute {
  Type: ResourceAttributeType;
  Value: string;
}
function fromResourceAttribute(input?: ResourceAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Value: input["Value"],
  }
}
function toResourceAttribute(root: jsonP.JSONValue): ResourceAttribute {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceAttributeType>(x),
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ResourceAttributeType =
| "IPV4_ADDRESS"
| "IPV6_ADDRESS"
| "MAC_ADDRESS"
| "FQDN"
| "VM_MANAGER_ID"
| "VM_MANAGED_OBJECT_REFERENCE"
| "VM_NAME"
| "VM_PATH"
| "BIOS_ID"
| "MOTHERBOARD_SERIAL_NUMBER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface MigrationTask {
  ProgressUpdateStream?: string | null;
  MigrationTaskName?: string | null;
  Task?: Task | null;
  UpdateDateTime?: Date | number | null;
  ResourceAttributeList?: ResourceAttribute[] | null;
}
function toMigrationTask(root: jsonP.JSONValue): MigrationTask {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProgressUpdateStream": "s",
      "MigrationTaskName": "s",
      "Task": toTask,
      "UpdateDateTime": "d",
      "ResourceAttributeList": [toResourceAttribute],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ApplicationState {
  ApplicationId?: string | null;
  ApplicationStatus?: ApplicationStatus | null;
  LastUpdatedTime?: Date | number | null;
}
function toApplicationState(root: jsonP.JSONValue): ApplicationState {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "ApplicationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ApplicationStatus>(x),
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MigrationTaskSummary {
  ProgressUpdateStream?: string | null;
  MigrationTaskName?: string | null;
  Status?: Status | null;
  ProgressPercent?: number | null;
  StatusDetail?: string | null;
  UpdateDateTime?: Date | number | null;
}
function toMigrationTaskSummary(root: jsonP.JSONValue): MigrationTaskSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProgressUpdateStream": "s",
      "MigrationTaskName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      "ProgressPercent": "n",
      "StatusDetail": "s",
      "UpdateDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProgressUpdateStreamSummary {
  ProgressUpdateStreamName?: string | null;
}
function toProgressUpdateStreamSummary(root: jsonP.JSONValue): ProgressUpdateStreamSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProgressUpdateStreamName": "s",
    },
  }, root);
}
