// Autogenerated API client for: AWS Network Firewall

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class NetworkFirewall {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(NetworkFirewall.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-11-12",
    "endpointPrefix": "network-firewall",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "Network Firewall",
    "serviceFullName": "AWS Network Firewall",
    "serviceId": "Network Firewall",
    "signatureVersion": "v4",
    "signingName": "network-firewall",
    "targetPrefix": "NetworkFirewall_20201112",
    "uid": "network-firewall-2020-11-12"
  };

  async associateFirewallPolicy(
    {abortSignal, ...params}: RequestConfig & AssociateFirewallPolicyRequest,
  ): Promise<AssociateFirewallPolicyResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      FirewallPolicyArn: params["FirewallPolicyArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateFirewallPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FirewallArn": "s",
        "FirewallName": "s",
        "FirewallPolicyArn": "s",
        "UpdateToken": "s",
      },
    }, await resp.json());
  }

  async associateSubnets(
    {abortSignal, ...params}: RequestConfig & AssociateSubnetsRequest,
  ): Promise<AssociateSubnetsResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      SubnetMappings: params["SubnetMappings"]?.map(x => fromSubnetMapping(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSubnets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FirewallArn": "s",
        "FirewallName": "s",
        "SubnetMappings": [toSubnetMapping],
        "UpdateToken": "s",
      },
    }, await resp.json());
  }

  async createFirewall(
    {abortSignal, ...params}: RequestConfig & CreateFirewallRequest,
  ): Promise<CreateFirewallResponse> {
    const body: jsonP.JSONObject = {
      FirewallName: params["FirewallName"],
      FirewallPolicyArn: params["FirewallPolicyArn"],
      VpcId: params["VpcId"],
      SubnetMappings: params["SubnetMappings"]?.map(x => fromSubnetMapping(x)),
      DeleteProtection: params["DeleteProtection"],
      SubnetChangeProtection: params["SubnetChangeProtection"],
      FirewallPolicyChangeProtection: params["FirewallPolicyChangeProtection"],
      Description: params["Description"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFirewall",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Firewall": toFirewall,
        "FirewallStatus": toFirewallStatus,
      },
    }, await resp.json());
  }

  async createFirewallPolicy(
    {abortSignal, ...params}: RequestConfig & CreateFirewallPolicyRequest,
  ): Promise<CreateFirewallPolicyResponse> {
    const body: jsonP.JSONObject = {
      FirewallPolicyName: params["FirewallPolicyName"],
      FirewallPolicy: fromFirewallPolicy(params["FirewallPolicy"]),
      Description: params["Description"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFirewallPolicy",
    });
    return jsonP.readObj({
      required: {
        "UpdateToken": "s",
        "FirewallPolicyResponse": toFirewallPolicyResponse,
      },
      optional: {},
    }, await resp.json());
  }

  async createRuleGroup(
    {abortSignal, ...params}: RequestConfig & CreateRuleGroupRequest,
  ): Promise<CreateRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      RuleGroupName: params["RuleGroupName"],
      RuleGroup: fromRuleGroup(params["RuleGroup"]),
      Rules: params["Rules"],
      Type: params["Type"],
      Description: params["Description"],
      Capacity: params["Capacity"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRuleGroup",
    });
    return jsonP.readObj({
      required: {
        "UpdateToken": "s",
        "RuleGroupResponse": toRuleGroupResponse,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteFirewall(
    {abortSignal, ...params}: RequestConfig & DeleteFirewallRequest = {},
  ): Promise<DeleteFirewallResponse> {
    const body: jsonP.JSONObject = {
      FirewallName: params["FirewallName"],
      FirewallArn: params["FirewallArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFirewall",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Firewall": toFirewall,
        "FirewallStatus": toFirewallStatus,
      },
    }, await resp.json());
  }

  async deleteFirewallPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteFirewallPolicyRequest = {},
  ): Promise<DeleteFirewallPolicyResponse> {
    const body: jsonP.JSONObject = {
      FirewallPolicyName: params["FirewallPolicyName"],
      FirewallPolicyArn: params["FirewallPolicyArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFirewallPolicy",
    });
    return jsonP.readObj({
      required: {
        "FirewallPolicyResponse": toFirewallPolicyResponse,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteResourcePolicy(
    {abortSignal, ...params}: RequestConfig & DeleteResourcePolicyRequest,
  ): Promise<DeleteResourcePolicyResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResourcePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRuleGroup(
    {abortSignal, ...params}: RequestConfig & DeleteRuleGroupRequest = {},
  ): Promise<DeleteRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      RuleGroupName: params["RuleGroupName"],
      RuleGroupArn: params["RuleGroupArn"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRuleGroup",
    });
    return jsonP.readObj({
      required: {
        "RuleGroupResponse": toRuleGroupResponse,
      },
      optional: {},
    }, await resp.json());
  }

  async describeFirewall(
    {abortSignal, ...params}: RequestConfig & DescribeFirewallRequest = {},
  ): Promise<DescribeFirewallResponse> {
    const body: jsonP.JSONObject = {
      FirewallName: params["FirewallName"],
      FirewallArn: params["FirewallArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFirewall",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UpdateToken": "s",
        "Firewall": toFirewall,
        "FirewallStatus": toFirewallStatus,
      },
    }, await resp.json());
  }

  async describeFirewallPolicy(
    {abortSignal, ...params}: RequestConfig & DescribeFirewallPolicyRequest = {},
  ): Promise<DescribeFirewallPolicyResponse> {
    const body: jsonP.JSONObject = {
      FirewallPolicyName: params["FirewallPolicyName"],
      FirewallPolicyArn: params["FirewallPolicyArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFirewallPolicy",
    });
    return jsonP.readObj({
      required: {
        "UpdateToken": "s",
        "FirewallPolicyResponse": toFirewallPolicyResponse,
      },
      optional: {
        "FirewallPolicy": toFirewallPolicy,
      },
    }, await resp.json());
  }

  async describeLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeLoggingConfigurationRequest = {},
  ): Promise<DescribeLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLoggingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FirewallArn": "s",
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async describeResourcePolicy(
    {abortSignal, ...params}: RequestConfig & DescribeResourcePolicyRequest,
  ): Promise<DescribeResourcePolicyResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeResourcePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": "s",
      },
    }, await resp.json());
  }

  async describeRuleGroup(
    {abortSignal, ...params}: RequestConfig & DescribeRuleGroupRequest = {},
  ): Promise<DescribeRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      RuleGroupName: params["RuleGroupName"],
      RuleGroupArn: params["RuleGroupArn"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRuleGroup",
    });
    return jsonP.readObj({
      required: {
        "UpdateToken": "s",
        "RuleGroupResponse": toRuleGroupResponse,
      },
      optional: {
        "RuleGroup": toRuleGroup,
      },
    }, await resp.json());
  }

  async disassociateSubnets(
    {abortSignal, ...params}: RequestConfig & DisassociateSubnetsRequest,
  ): Promise<DisassociateSubnetsResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      SubnetIds: params["SubnetIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSubnets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FirewallArn": "s",
        "FirewallName": "s",
        "SubnetMappings": [toSubnetMapping],
        "UpdateToken": "s",
      },
    }, await resp.json());
  }

  async listFirewallPolicies(
    {abortSignal, ...params}: RequestConfig & ListFirewallPoliciesRequest = {},
  ): Promise<ListFirewallPoliciesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFirewallPolicies",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "FirewallPolicies": [toFirewallPolicyMetadata],
      },
    }, await resp.json());
  }

  async listFirewalls(
    {abortSignal, ...params}: RequestConfig & ListFirewallsRequest = {},
  ): Promise<ListFirewallsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      VpcIds: params["VpcIds"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFirewalls",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Firewalls": [toFirewallMetadata],
      },
    }, await resp.json());
  }

  async listRuleGroups(
    {abortSignal, ...params}: RequestConfig & ListRuleGroupsRequest = {},
  ): Promise<ListRuleGroupsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRuleGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "RuleGroups": [toRuleGroupMetadata],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async putResourcePolicy(
    {abortSignal, ...params}: RequestConfig & PutResourcePolicyRequest,
  ): Promise<PutResourcePolicyResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Policy: params["Policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResourcePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFirewallDeleteProtection(
    {abortSignal, ...params}: RequestConfig & UpdateFirewallDeleteProtectionRequest,
  ): Promise<UpdateFirewallDeleteProtectionResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      DeleteProtection: params["DeleteProtection"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFirewallDeleteProtection",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FirewallArn": "s",
        "FirewallName": "s",
        "DeleteProtection": "b",
        "UpdateToken": "s",
      },
    }, await resp.json());
  }

  async updateFirewallDescription(
    {abortSignal, ...params}: RequestConfig & UpdateFirewallDescriptionRequest = {},
  ): Promise<UpdateFirewallDescriptionResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFirewallDescription",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FirewallArn": "s",
        "FirewallName": "s",
        "Description": "s",
        "UpdateToken": "s",
      },
    }, await resp.json());
  }

  async updateFirewallPolicy(
    {abortSignal, ...params}: RequestConfig & UpdateFirewallPolicyRequest,
  ): Promise<UpdateFirewallPolicyResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallPolicyArn: params["FirewallPolicyArn"],
      FirewallPolicyName: params["FirewallPolicyName"],
      FirewallPolicy: fromFirewallPolicy(params["FirewallPolicy"]),
      Description: params["Description"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFirewallPolicy",
    });
    return jsonP.readObj({
      required: {
        "UpdateToken": "s",
        "FirewallPolicyResponse": toFirewallPolicyResponse,
      },
      optional: {},
    }, await resp.json());
  }

  async updateFirewallPolicyChangeProtection(
    {abortSignal, ...params}: RequestConfig & UpdateFirewallPolicyChangeProtectionRequest,
  ): Promise<UpdateFirewallPolicyChangeProtectionResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      FirewallPolicyChangeProtection: params["FirewallPolicyChangeProtection"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFirewallPolicyChangeProtection",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UpdateToken": "s",
        "FirewallArn": "s",
        "FirewallName": "s",
        "FirewallPolicyChangeProtection": "b",
      },
    }, await resp.json());
  }

  async updateLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateLoggingConfigurationRequest = {},
  ): Promise<UpdateLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      LoggingConfiguration: fromLoggingConfiguration(params["LoggingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLoggingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FirewallArn": "s",
        "FirewallName": "s",
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async updateRuleGroup(
    {abortSignal, ...params}: RequestConfig & UpdateRuleGroupRequest,
  ): Promise<UpdateRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      RuleGroupArn: params["RuleGroupArn"],
      RuleGroupName: params["RuleGroupName"],
      RuleGroup: fromRuleGroup(params["RuleGroup"]),
      Rules: params["Rules"],
      Type: params["Type"],
      Description: params["Description"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRuleGroup",
    });
    return jsonP.readObj({
      required: {
        "UpdateToken": "s",
        "RuleGroupResponse": toRuleGroupResponse,
      },
      optional: {},
    }, await resp.json());
  }

  async updateSubnetChangeProtection(
    {abortSignal, ...params}: RequestConfig & UpdateSubnetChangeProtectionRequest,
  ): Promise<UpdateSubnetChangeProtectionResponse> {
    const body: jsonP.JSONObject = {
      UpdateToken: params["UpdateToken"],
      FirewallArn: params["FirewallArn"],
      FirewallName: params["FirewallName"],
      SubnetChangeProtection: params["SubnetChangeProtection"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSubnetChangeProtection",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UpdateToken": "s",
        "FirewallArn": "s",
        "FirewallName": "s",
        "SubnetChangeProtection": "b",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateFirewallPolicyRequest {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  FirewallPolicyArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateSubnetsRequest {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  SubnetMappings: SubnetMapping[];
}

// refs: 1 - tags: named, input
export interface CreateFirewallRequest {
  FirewallName: string;
  FirewallPolicyArn: string;
  VpcId: string;
  SubnetMappings: SubnetMapping[];
  DeleteProtection?: boolean | null;
  SubnetChangeProtection?: boolean | null;
  FirewallPolicyChangeProtection?: boolean | null;
  Description?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateFirewallPolicyRequest {
  FirewallPolicyName: string;
  FirewallPolicy: FirewallPolicy;
  Description?: string | null;
  Tags?: Tag[] | null;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateRuleGroupRequest {
  RuleGroupName: string;
  RuleGroup?: RuleGroup | null;
  Rules?: string | null;
  Type: RuleGroupType;
  Description?: string | null;
  Capacity: number;
  Tags?: Tag[] | null;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteFirewallRequest {
  FirewallName?: string | null;
  FirewallArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteFirewallPolicyRequest {
  FirewallPolicyName?: string | null;
  FirewallPolicyArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteResourcePolicyRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteRuleGroupRequest {
  RuleGroupName?: string | null;
  RuleGroupArn?: string | null;
  Type?: RuleGroupType | null;
}

// refs: 1 - tags: named, input
export interface DescribeFirewallRequest {
  FirewallName?: string | null;
  FirewallArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFirewallPolicyRequest {
  FirewallPolicyName?: string | null;
  FirewallPolicyArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeLoggingConfigurationRequest {
  FirewallArn?: string | null;
  FirewallName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeResourcePolicyRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeRuleGroupRequest {
  RuleGroupName?: string | null;
  RuleGroupArn?: string | null;
  Type?: RuleGroupType | null;
}

// refs: 1 - tags: named, input
export interface DisassociateSubnetsRequest {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  SubnetIds: string[];
}

// refs: 1 - tags: named, input
export interface ListFirewallPoliciesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListFirewallsRequest {
  NextToken?: string | null;
  VpcIds?: string[] | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRuleGroupsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutResourcePolicyRequest {
  ResourceArn: string;
  Policy: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateFirewallDeleteProtectionRequest {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  DeleteProtection: boolean;
}

// refs: 1 - tags: named, input
export interface UpdateFirewallDescriptionRequest {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateFirewallPolicyRequest {
  UpdateToken: string;
  FirewallPolicyArn?: string | null;
  FirewallPolicyName?: string | null;
  FirewallPolicy: FirewallPolicy;
  Description?: string | null;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateFirewallPolicyChangeProtectionRequest {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  FirewallPolicyChangeProtection: boolean;
}

// refs: 1 - tags: named, input
export interface UpdateLoggingConfigurationRequest {
  FirewallArn?: string | null;
  FirewallName?: string | null;
  LoggingConfiguration?: LoggingConfiguration | null;
}

// refs: 1 - tags: named, input
export interface UpdateRuleGroupRequest {
  UpdateToken: string;
  RuleGroupArn?: string | null;
  RuleGroupName?: string | null;
  RuleGroup?: RuleGroup | null;
  Rules?: string | null;
  Type?: RuleGroupType | null;
  Description?: string | null;
  DryRun?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateSubnetChangeProtectionRequest {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  SubnetChangeProtection: boolean;
}

// refs: 1 - tags: named, output
export interface AssociateFirewallPolicyResponse {
  FirewallArn?: string | null;
  FirewallName?: string | null;
  FirewallPolicyArn?: string | null;
  UpdateToken?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateSubnetsResponse {
  FirewallArn?: string | null;
  FirewallName?: string | null;
  SubnetMappings?: SubnetMapping[] | null;
  UpdateToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateFirewallResponse {
  Firewall?: Firewall | null;
  FirewallStatus?: FirewallStatus | null;
}

// refs: 1 - tags: named, output
export interface CreateFirewallPolicyResponse {
  UpdateToken: string;
  FirewallPolicyResponse: FirewallPolicyResponse;
}

// refs: 1 - tags: named, output
export interface CreateRuleGroupResponse {
  UpdateToken: string;
  RuleGroupResponse: RuleGroupResponse;
}

// refs: 1 - tags: named, output
export interface DeleteFirewallResponse {
  Firewall?: Firewall | null;
  FirewallStatus?: FirewallStatus | null;
}

// refs: 1 - tags: named, output
export interface DeleteFirewallPolicyResponse {
  FirewallPolicyResponse: FirewallPolicyResponse;
}

// refs: 1 - tags: named, output
export interface DeleteResourcePolicyResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRuleGroupResponse {
  RuleGroupResponse: RuleGroupResponse;
}

// refs: 1 - tags: named, output
export interface DescribeFirewallResponse {
  UpdateToken?: string | null;
  Firewall?: Firewall | null;
  FirewallStatus?: FirewallStatus | null;
}

// refs: 1 - tags: named, output
export interface DescribeFirewallPolicyResponse {
  UpdateToken: string;
  FirewallPolicyResponse: FirewallPolicyResponse;
  FirewallPolicy?: FirewallPolicy | null;
}

// refs: 1 - tags: named, output
export interface DescribeLoggingConfigurationResponse {
  FirewallArn?: string | null;
  LoggingConfiguration?: LoggingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface DescribeResourcePolicyResponse {
  Policy?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRuleGroupResponse {
  UpdateToken: string;
  RuleGroup?: RuleGroup | null;
  RuleGroupResponse: RuleGroupResponse;
}

// refs: 1 - tags: named, output
export interface DisassociateSubnetsResponse {
  FirewallArn?: string | null;
  FirewallName?: string | null;
  SubnetMappings?: SubnetMapping[] | null;
  UpdateToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFirewallPoliciesResponse {
  NextToken?: string | null;
  FirewallPolicies?: FirewallPolicyMetadata[] | null;
}

// refs: 1 - tags: named, output
export interface ListFirewallsResponse {
  NextToken?: string | null;
  Firewalls?: FirewallMetadata[] | null;
}

// refs: 1 - tags: named, output
export interface ListRuleGroupsResponse {
  NextToken?: string | null;
  RuleGroups?: RuleGroupMetadata[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  NextToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface PutResourcePolicyResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateFirewallDeleteProtectionResponse {
  FirewallArn?: string | null;
  FirewallName?: string | null;
  DeleteProtection?: boolean | null;
  UpdateToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateFirewallDescriptionResponse {
  FirewallArn?: string | null;
  FirewallName?: string | null;
  Description?: string | null;
  UpdateToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateFirewallPolicyResponse {
  UpdateToken: string;
  FirewallPolicyResponse: FirewallPolicyResponse;
}

// refs: 1 - tags: named, output
export interface UpdateFirewallPolicyChangeProtectionResponse {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  FirewallPolicyChangeProtection?: boolean | null;
}

// refs: 1 - tags: named, output
export interface UpdateLoggingConfigurationResponse {
  FirewallArn?: string | null;
  FirewallName?: string | null;
  LoggingConfiguration?: LoggingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface UpdateRuleGroupResponse {
  UpdateToken: string;
  RuleGroupResponse: RuleGroupResponse;
}

// refs: 1 - tags: named, output
export interface UpdateSubnetChangeProtectionResponse {
  UpdateToken?: string | null;
  FirewallArn?: string | null;
  FirewallName?: string | null;
  SubnetChangeProtection?: boolean | null;
}

// refs: 7 - tags: input, named, interface, output
export interface SubnetMapping {
  SubnetId: string;
}
function fromSubnetMapping(input?: SubnetMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetId: input["SubnetId"],
  }
}
function toSubnetMapping(root: jsonP.JSONValue): SubnetMapping {
  return jsonP.readObj({
    required: {
      "SubnetId": "s",
    },
    optional: {},
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface FirewallPolicy {
  StatelessRuleGroupReferences?: StatelessRuleGroupReference[] | null;
  StatelessDefaultActions: string[];
  StatelessFragmentDefaultActions: string[];
  StatelessCustomActions?: CustomAction[] | null;
  StatefulRuleGroupReferences?: StatefulRuleGroupReference[] | null;
}
function fromFirewallPolicy(input?: FirewallPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StatelessRuleGroupReferences: input["StatelessRuleGroupReferences"]?.map(x => fromStatelessRuleGroupReference(x)),
    StatelessDefaultActions: input["StatelessDefaultActions"],
    StatelessFragmentDefaultActions: input["StatelessFragmentDefaultActions"],
    StatelessCustomActions: input["StatelessCustomActions"]?.map(x => fromCustomAction(x)),
    StatefulRuleGroupReferences: input["StatefulRuleGroupReferences"]?.map(x => fromStatefulRuleGroupReference(x)),
  }
}
function toFirewallPolicy(root: jsonP.JSONValue): FirewallPolicy {
  return jsonP.readObj({
    required: {
      "StatelessDefaultActions": ["s"],
      "StatelessFragmentDefaultActions": ["s"],
    },
    optional: {
      "StatelessRuleGroupReferences": [toStatelessRuleGroupReference],
      "StatelessCustomActions": [toCustomAction],
      "StatefulRuleGroupReferences": [toStatefulRuleGroupReference],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface StatelessRuleGroupReference {
  ResourceArn: string;
  Priority: number;
}
function fromStatelessRuleGroupReference(input?: StatelessRuleGroupReference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceArn: input["ResourceArn"],
    Priority: input["Priority"],
  }
}
function toStatelessRuleGroupReference(root: jsonP.JSONValue): StatelessRuleGroupReference {
  return jsonP.readObj({
    required: {
      "ResourceArn": "s",
      "Priority": "n",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface CustomAction {
  ActionName: string;
  ActionDefinition: ActionDefinition;
}
function fromCustomAction(input?: CustomAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ActionName: input["ActionName"],
    ActionDefinition: fromActionDefinition(input["ActionDefinition"]),
  }
}
function toCustomAction(root: jsonP.JSONValue): CustomAction {
  return jsonP.readObj({
    required: {
      "ActionName": "s",
      "ActionDefinition": toActionDefinition,
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface ActionDefinition {
  PublishMetricAction?: PublishMetricAction | null;
}
function fromActionDefinition(input?: ActionDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PublishMetricAction: fromPublishMetricAction(input["PublishMetricAction"]),
  }
}
function toActionDefinition(root: jsonP.JSONValue): ActionDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "PublishMetricAction": toPublishMetricAction,
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface PublishMetricAction {
  Dimensions: Dimension[];
}
function fromPublishMetricAction(input?: PublishMetricAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimensions: input["Dimensions"]?.map(x => fromDimension(x)),
  }
}
function toPublishMetricAction(root: jsonP.JSONValue): PublishMetricAction {
  return jsonP.readObj({
    required: {
      "Dimensions": [toDimension],
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Dimension {
  Value: string;
}
function fromDimension(input?: Dimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Value: input["Value"],
  }
}
function toDimension(root: jsonP.JSONValue): Dimension {
  return jsonP.readObj({
    required: {
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface StatefulRuleGroupReference {
  ResourceArn: string;
}
function fromStatefulRuleGroupReference(input?: StatefulRuleGroupReference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceArn: input["ResourceArn"],
  }
}
function toStatefulRuleGroupReference(root: jsonP.JSONValue): StatefulRuleGroupReference {
  return jsonP.readObj({
    required: {
      "ResourceArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RuleGroup {
  RuleVariables?: RuleVariables | null;
  RulesSource: RulesSource;
}
function fromRuleGroup(input?: RuleGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RuleVariables: fromRuleVariables(input["RuleVariables"]),
    RulesSource: fromRulesSource(input["RulesSource"]),
  }
}
function toRuleGroup(root: jsonP.JSONValue): RuleGroup {
  return jsonP.readObj({
    required: {
      "RulesSource": toRulesSource,
    },
    optional: {
      "RuleVariables": toRuleVariables,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RuleVariables {
  IPSets?: { [key: string]: IPSet | null | undefined } | null;
  PortSets?: { [key: string]: PortSet | null | undefined } | null;
}
function fromRuleVariables(input?: RuleVariables | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IPSets: jsonP.serializeMap(input["IPSets"], x => fromIPSet(x)),
    PortSets: jsonP.serializeMap(input["PortSets"], x => fromPortSet(x)),
  }
}
function toRuleVariables(root: jsonP.JSONValue): RuleVariables {
  return jsonP.readObj({
    required: {},
    optional: {
      "IPSets": x => jsonP.readMap(String, toIPSet, x),
      "PortSets": x => jsonP.readMap(String, toPortSet, x),
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface IPSet {
  Definition: string[];
}
function fromIPSet(input?: IPSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Definition: input["Definition"],
  }
}
function toIPSet(root: jsonP.JSONValue): IPSet {
  return jsonP.readObj({
    required: {
      "Definition": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface PortSet {
  Definition?: string[] | null;
}
function fromPortSet(input?: PortSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Definition: input["Definition"],
  }
}
function toPortSet(root: jsonP.JSONValue): PortSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "Definition": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RulesSource {
  RulesString?: string | null;
  RulesSourceList?: RulesSourceList | null;
  StatefulRules?: StatefulRule[] | null;
  StatelessRulesAndCustomActions?: StatelessRulesAndCustomActions | null;
}
function fromRulesSource(input?: RulesSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RulesString: input["RulesString"],
    RulesSourceList: fromRulesSourceList(input["RulesSourceList"]),
    StatefulRules: input["StatefulRules"]?.map(x => fromStatefulRule(x)),
    StatelessRulesAndCustomActions: fromStatelessRulesAndCustomActions(input["StatelessRulesAndCustomActions"]),
  }
}
function toRulesSource(root: jsonP.JSONValue): RulesSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "RulesString": "s",
      "RulesSourceList": toRulesSourceList,
      "StatefulRules": [toStatefulRule],
      "StatelessRulesAndCustomActions": toStatelessRulesAndCustomActions,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RulesSourceList {
  Targets: string[];
  TargetTypes: TargetType[];
  GeneratedRulesType: GeneratedRulesType;
}
function fromRulesSourceList(input?: RulesSourceList | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Targets: input["Targets"],
    TargetTypes: input["TargetTypes"],
    GeneratedRulesType: input["GeneratedRulesType"],
  }
}
function toRulesSourceList(root: jsonP.JSONValue): RulesSourceList {
  return jsonP.readObj({
    required: {
      "Targets": ["s"],
      "TargetTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<TargetType>(x)],
      "GeneratedRulesType": (x: jsonP.JSONValue) => cmnP.readEnum<GeneratedRulesType>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type TargetType =
| "TLS_SNI"
| "HTTP_HOST"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type GeneratedRulesType =
| "ALLOWLIST"
| "DENYLIST"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface StatefulRule {
  Action: StatefulAction;
  Header: Header;
  RuleOptions: RuleOption[];
}
function fromStatefulRule(input?: StatefulRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Header: fromHeader(input["Header"]),
    RuleOptions: input["RuleOptions"]?.map(x => fromRuleOption(x)),
  }
}
function toStatefulRule(root: jsonP.JSONValue): StatefulRule {
  return jsonP.readObj({
    required: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<StatefulAction>(x),
      "Header": toHeader,
      "RuleOptions": [toRuleOption],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type StatefulAction =
| "PASS"
| "DROP"
| "ALERT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface Header {
  Protocol: StatefulRuleProtocol;
  Source: string;
  SourcePort: string;
  Direction: StatefulRuleDirection;
  Destination: string;
  DestinationPort: string;
}
function fromHeader(input?: Header | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Protocol: input["Protocol"],
    Source: input["Source"],
    SourcePort: input["SourcePort"],
    Direction: input["Direction"],
    Destination: input["Destination"],
    DestinationPort: input["DestinationPort"],
  }
}
function toHeader(root: jsonP.JSONValue): Header {
  return jsonP.readObj({
    required: {
      "Protocol": (x: jsonP.JSONValue) => cmnP.readEnum<StatefulRuleProtocol>(x),
      "Source": "s",
      "SourcePort": "s",
      "Direction": (x: jsonP.JSONValue) => cmnP.readEnum<StatefulRuleDirection>(x),
      "Destination": "s",
      "DestinationPort": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type StatefulRuleProtocol =
| "IP"
| "TCP"
| "UDP"
| "ICMP"
| "HTTP"
| "FTP"
| "TLS"
| "SMB"
| "DNS"
| "DCERPC"
| "SSH"
| "SMTP"
| "IMAP"
| "MSN"
| "KRB5"
| "IKEV2"
| "TFTP"
| "NTP"
| "DHCP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type StatefulRuleDirection =
| "FORWARD"
| "ANY"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface RuleOption {
  Keyword: string;
  Settings?: string[] | null;
}
function fromRuleOption(input?: RuleOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Keyword: input["Keyword"],
    Settings: input["Settings"],
  }
}
function toRuleOption(root: jsonP.JSONValue): RuleOption {
  return jsonP.readObj({
    required: {
      "Keyword": "s",
    },
    optional: {
      "Settings": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface StatelessRulesAndCustomActions {
  StatelessRules: StatelessRule[];
  CustomActions?: CustomAction[] | null;
}
function fromStatelessRulesAndCustomActions(input?: StatelessRulesAndCustomActions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StatelessRules: input["StatelessRules"]?.map(x => fromStatelessRule(x)),
    CustomActions: input["CustomActions"]?.map(x => fromCustomAction(x)),
  }
}
function toStatelessRulesAndCustomActions(root: jsonP.JSONValue): StatelessRulesAndCustomActions {
  return jsonP.readObj({
    required: {
      "StatelessRules": [toStatelessRule],
    },
    optional: {
      "CustomActions": [toCustomAction],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface StatelessRule {
  RuleDefinition: RuleDefinition;
  Priority: number;
}
function fromStatelessRule(input?: StatelessRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RuleDefinition: fromRuleDefinition(input["RuleDefinition"]),
    Priority: input["Priority"],
  }
}
function toStatelessRule(root: jsonP.JSONValue): StatelessRule {
  return jsonP.readObj({
    required: {
      "RuleDefinition": toRuleDefinition,
      "Priority": "n",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RuleDefinition {
  MatchAttributes: MatchAttributes;
  Actions: string[];
}
function fromRuleDefinition(input?: RuleDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MatchAttributes: fromMatchAttributes(input["MatchAttributes"]),
    Actions: input["Actions"],
  }
}
function toRuleDefinition(root: jsonP.JSONValue): RuleDefinition {
  return jsonP.readObj({
    required: {
      "MatchAttributes": toMatchAttributes,
      "Actions": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface MatchAttributes {
  Sources?: Address[] | null;
  Destinations?: Address[] | null;
  SourcePorts?: PortRange[] | null;
  DestinationPorts?: PortRange[] | null;
  Protocols?: number[] | null;
  TCPFlags?: TCPFlagField[] | null;
}
function fromMatchAttributes(input?: MatchAttributes | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Sources: input["Sources"]?.map(x => fromAddress(x)),
    Destinations: input["Destinations"]?.map(x => fromAddress(x)),
    SourcePorts: input["SourcePorts"]?.map(x => fromPortRange(x)),
    DestinationPorts: input["DestinationPorts"]?.map(x => fromPortRange(x)),
    Protocols: input["Protocols"],
    TCPFlags: input["TCPFlags"]?.map(x => fromTCPFlagField(x)),
  }
}
function toMatchAttributes(root: jsonP.JSONValue): MatchAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "Sources": [toAddress],
      "Destinations": [toAddress],
      "SourcePorts": [toPortRange],
      "DestinationPorts": [toPortRange],
      "Protocols": ["n"],
      "TCPFlags": [toTCPFlagField],
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Address {
  AddressDefinition: string;
}
function fromAddress(input?: Address | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AddressDefinition: input["AddressDefinition"],
  }
}
function toAddress(root: jsonP.JSONValue): Address {
  return jsonP.readObj({
    required: {
      "AddressDefinition": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface PortRange {
  FromPort: number;
  ToPort: number;
}
function fromPortRange(input?: PortRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromPort: input["FromPort"],
    ToPort: input["ToPort"],
  }
}
function toPortRange(root: jsonP.JSONValue): PortRange {
  return jsonP.readObj({
    required: {
      "FromPort": "n",
      "ToPort": "n",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TCPFlagField {
  Flags: TCPFlag[];
  Masks?: TCPFlag[] | null;
}
function fromTCPFlagField(input?: TCPFlagField | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Flags: input["Flags"],
    Masks: input["Masks"],
  }
}
function toTCPFlagField(root: jsonP.JSONValue): TCPFlagField {
  return jsonP.readObj({
    required: {
      "Flags": [(x: jsonP.JSONValue) => cmnP.readEnum<TCPFlag>(x)],
    },
    optional: {
      "Masks": [(x: jsonP.JSONValue) => cmnP.readEnum<TCPFlag>(x)],
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type TCPFlag =
| "FIN"
| "SYN"
| "RST"
| "PSH"
| "ACK"
| "URG"
| "ECE"
| "CWR"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, enum, output
export type RuleGroupType =
| "STATELESS"
| "STATEFUL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface LoggingConfiguration {
  LogDestinationConfigs: LogDestinationConfig[];
}
function fromLoggingConfiguration(input?: LoggingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LogDestinationConfigs: input["LogDestinationConfigs"]?.map(x => fromLogDestinationConfig(x)),
  }
}
function toLoggingConfiguration(root: jsonP.JSONValue): LoggingConfiguration {
  return jsonP.readObj({
    required: {
      "LogDestinationConfigs": [toLogDestinationConfig],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface LogDestinationConfig {
  LogType: LogType;
  LogDestinationType: LogDestinationType;
  LogDestination: { [key: string]: string | null | undefined };
}
function fromLogDestinationConfig(input?: LogDestinationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LogType: input["LogType"],
    LogDestinationType: input["LogDestinationType"],
    LogDestination: input["LogDestination"],
  }
}
function toLogDestinationConfig(root: jsonP.JSONValue): LogDestinationConfig {
  return jsonP.readObj({
    required: {
      "LogType": (x: jsonP.JSONValue) => cmnP.readEnum<LogType>(x),
      "LogDestinationType": (x: jsonP.JSONValue) => cmnP.readEnum<LogDestinationType>(x),
      "LogDestination": x => jsonP.readMap(String, String, x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type LogType =
| "ALERT"
| "FLOW"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type LogDestinationType =
| "S3"
| "CloudWatchLogs"
| "KinesisDataFirehose"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface Firewall {
  FirewallName?: string | null;
  FirewallArn?: string | null;
  FirewallPolicyArn: string;
  VpcId: string;
  SubnetMappings: SubnetMapping[];
  DeleteProtection?: boolean | null;
  SubnetChangeProtection?: boolean | null;
  FirewallPolicyChangeProtection?: boolean | null;
  Description?: string | null;
  FirewallId: string;
  Tags?: Tag[] | null;
}
function toFirewall(root: jsonP.JSONValue): Firewall {
  return jsonP.readObj({
    required: {
      "FirewallPolicyArn": "s",
      "VpcId": "s",
      "SubnetMappings": [toSubnetMapping],
      "FirewallId": "s",
    },
    optional: {
      "FirewallName": "s",
      "FirewallArn": "s",
      "DeleteProtection": "b",
      "SubnetChangeProtection": "b",
      "FirewallPolicyChangeProtection": "b",
      "Description": "s",
      "Tags": [toTag],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface FirewallStatus {
  Status: FirewallStatusValue;
  ConfigurationSyncStateSummary: ConfigurationSyncState;
  SyncStates?: { [key: string]: SyncState | null | undefined } | null;
}
function toFirewallStatus(root: jsonP.JSONValue): FirewallStatus {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<FirewallStatusValue>(x),
      "ConfigurationSyncStateSummary": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationSyncState>(x),
    },
    optional: {
      "SyncStates": x => jsonP.readMap(String, toSyncState, x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type FirewallStatusValue =
| "PROVISIONING"
| "DELETING"
| "READY"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type ConfigurationSyncState =
| "PENDING"
| "IN_SYNC"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface SyncState {
  Attachment?: Attachment | null;
  Config?: { [key: string]: PerObjectStatus | null | undefined } | null;
}
function toSyncState(root: jsonP.JSONValue): SyncState {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attachment": toAttachment,
      "Config": x => jsonP.readMap(String, toPerObjectStatus, x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Attachment {
  SubnetId?: string | null;
  EndpointId?: string | null;
  Status?: AttachmentStatus | null;
}
function toAttachment(root: jsonP.JSONValue): Attachment {
  return jsonP.readObj({
    required: {},
    optional: {
      "SubnetId": "s",
      "EndpointId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<AttachmentStatus>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type AttachmentStatus =
| "CREATING"
| "DELETING"
| "SCALING"
| "READY"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface PerObjectStatus {
  SyncStatus?: PerObjectSyncStatus | null;
}
function toPerObjectStatus(root: jsonP.JSONValue): PerObjectStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "SyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PerObjectSyncStatus>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type PerObjectSyncStatus =
| "PENDING"
| "IN_SYNC"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface FirewallPolicyResponse {
  FirewallPolicyName: string;
  FirewallPolicyArn: string;
  FirewallPolicyId: string;
  Description?: string | null;
  FirewallPolicyStatus?: ResourceStatus | null;
  Tags?: Tag[] | null;
}
function toFirewallPolicyResponse(root: jsonP.JSONValue): FirewallPolicyResponse {
  return jsonP.readObj({
    required: {
      "FirewallPolicyName": "s",
      "FirewallPolicyArn": "s",
      "FirewallPolicyId": "s",
    },
    optional: {
      "Description": "s",
      "FirewallPolicyStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "Tags": [toTag],
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type ResourceStatus =
| "ACTIVE"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface RuleGroupResponse {
  RuleGroupArn: string;
  RuleGroupName: string;
  RuleGroupId: string;
  Description?: string | null;
  Type?: RuleGroupType | null;
  Capacity?: number | null;
  RuleGroupStatus?: ResourceStatus | null;
  Tags?: Tag[] | null;
}
function toRuleGroupResponse(root: jsonP.JSONValue): RuleGroupResponse {
  return jsonP.readObj({
    required: {
      "RuleGroupArn": "s",
      "RuleGroupName": "s",
      "RuleGroupId": "s",
    },
    optional: {
      "Description": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<RuleGroupType>(x),
      "Capacity": "n",
      "RuleGroupStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "Tags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FirewallPolicyMetadata {
  Name?: string | null;
  Arn?: string | null;
}
function toFirewallPolicyMetadata(root: jsonP.JSONValue): FirewallPolicyMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FirewallMetadata {
  FirewallName?: string | null;
  FirewallArn?: string | null;
}
function toFirewallMetadata(root: jsonP.JSONValue): FirewallMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "FirewallName": "s",
      "FirewallArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RuleGroupMetadata {
  Name?: string | null;
  Arn?: string | null;
}
function toRuleGroupMetadata(root: jsonP.JSONValue): RuleGroupMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
    },
  }, root);
}
