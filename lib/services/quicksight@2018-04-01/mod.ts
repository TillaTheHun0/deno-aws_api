// Autogenerated API client for: Amazon QuickSight

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class QuickSight {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(QuickSight.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-04-01",
    "endpointPrefix": "quicksight",
    "jsonVersion": "1.0",
    "protocol": "rest-json",
    "serviceFullName": "Amazon QuickSight",
    "serviceId": "QuickSight",
    "signatureVersion": "v4",
    "uid": "quicksight-2018-04-01"
  };

  async cancelIngestion(
    {abortSignal, ...params}: RequestConfig & CancelIngestionRequest,
  ): Promise<CancelIngestionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelIngestion",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}/ingestions/${params["IngestionId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "IngestionId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createAccountCustomization(
    {abortSignal, ...params}: RequestConfig & CreateAccountCustomizationRequest,
  ): Promise<CreateAccountCustomizationResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      AccountCustomization: fromAccountCustomization(params["AccountCustomization"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    if (params["Namespace"] != null) query.set("namespace", params["Namespace"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "CreateAccountCustomization",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/customizations`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AwsAccountId": "s",
          "Namespace": "s",
          "AccountCustomization": toAccountCustomization,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createAnalysis(
    {abortSignal, ...params}: RequestConfig & CreateAnalysisRequest,
  ): Promise<CreateAnalysisResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Parameters: fromParameters(params["Parameters"]),
      Permissions: params["Permissions"]?.map(x => fromResourcePermission(x)),
      SourceEntity: fromAnalysisSourceEntity(params["SourceEntity"]),
      ThemeArn: params["ThemeArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAnalysis",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/analyses/${params["AnalysisId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AnalysisId": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createDashboard(
    {abortSignal, ...params}: RequestConfig & CreateDashboardRequest,
  ): Promise<CreateDashboardResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Parameters: fromParameters(params["Parameters"]),
      Permissions: params["Permissions"]?.map(x => fromResourcePermission(x)),
      SourceEntity: fromDashboardSourceEntity(params["SourceEntity"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      VersionDescription: params["VersionDescription"],
      DashboardPublishOptions: fromDashboardPublishOptions(params["DashboardPublishOptions"]),
      ThemeArn: params["ThemeArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDashboard",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "VersionArn": "s",
          "DashboardId": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createDataSet(
    {abortSignal, ...params}: RequestConfig & CreateDataSetRequest,
  ): Promise<CreateDataSetResponse> {
    const body: jsonP.JSONObject = {
      DataSetId: params["DataSetId"],
      Name: params["Name"],
      PhysicalTableMap: jsonP.serializeMap(params["PhysicalTableMap"], x => fromPhysicalTable(x)),
      LogicalTableMap: jsonP.serializeMap(params["LogicalTableMap"], x => fromLogicalTable(x)),
      ImportMode: params["ImportMode"],
      ColumnGroups: params["ColumnGroups"]?.map(x => fromColumnGroup(x)),
      Permissions: params["Permissions"]?.map(x => fromResourcePermission(x)),
      RowLevelPermissionDataSet: fromRowLevelPermissionDataSet(params["RowLevelPermissionDataSet"]),
      ColumnLevelPermissionRules: params["ColumnLevelPermissionRules"]?.map(x => fromColumnLevelPermissionRule(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataSet",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "DataSetId": "s",
          "IngestionArn": "s",
          "IngestionId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createDataSource(
    {abortSignal, ...params}: RequestConfig & CreateDataSourceRequest,
  ): Promise<CreateDataSourceResponse> {
    const body: jsonP.JSONObject = {
      DataSourceId: params["DataSourceId"],
      Name: params["Name"],
      Type: params["Type"],
      DataSourceParameters: fromDataSourceParameters(params["DataSourceParameters"]),
      Credentials: fromDataSourceCredentials(params["Credentials"]),
      Permissions: params["Permissions"]?.map(x => fromResourcePermission(x)),
      VpcConnectionProperties: fromVpcConnectionProperties(params["VpcConnectionProperties"]),
      SslProperties: fromSslProperties(params["SslProperties"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataSource",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sources`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "DataSourceId": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createGroup(
    {abortSignal, ...params}: RequestConfig & CreateGroupRequest,
  ): Promise<CreateGroupResponse> {
    const body: jsonP.JSONObject = {
      GroupName: params["GroupName"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGroup",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Group": toGroup,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createGroupMembership(
    {abortSignal, ...params}: RequestConfig & CreateGroupMembershipRequest,
  ): Promise<CreateGroupMembershipResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateGroupMembership",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups/${params["GroupName"]}/members/${params["MemberName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "GroupMember": toGroupMember,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createIAMPolicyAssignment(
    {abortSignal, ...params}: RequestConfig & CreateIAMPolicyAssignmentRequest,
  ): Promise<CreateIAMPolicyAssignmentResponse> {
    const body: jsonP.JSONObject = {
      AssignmentName: params["AssignmentName"],
      AssignmentStatus: params["AssignmentStatus"],
      PolicyArn: params["PolicyArn"],
      Identities: params["Identities"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIAMPolicyAssignment",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/iam-policy-assignments/`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AssignmentName": "s",
          "AssignmentId": "s",
          "AssignmentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AssignmentStatus>(x),
          "PolicyArn": "s",
          "Identities": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createIngestion(
    {abortSignal, ...params}: RequestConfig & CreateIngestionRequest,
  ): Promise<CreateIngestionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateIngestion",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}/ingestions/${params["IngestionId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "IngestionId": "s",
          "IngestionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<IngestionStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createNamespace(
    {abortSignal, ...params}: RequestConfig & CreateNamespaceRequest,
  ): Promise<CreateNamespaceResponse> {
    const body: jsonP.JSONObject = {
      Namespace: params["Namespace"],
      IdentityStore: params["IdentityStore"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNamespace",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "Name": "s",
          "CapacityRegion": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<NamespaceStatus>(x),
          "IdentityStore": (x: jsonP.JSONValue) => cmnP.readEnum<IdentityStore>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createTemplate(
    {abortSignal, ...params}: RequestConfig & CreateTemplateRequest,
  ): Promise<CreateTemplateResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Permissions: params["Permissions"]?.map(x => fromResourcePermission(x)),
      SourceEntity: fromTemplateSourceEntity(params["SourceEntity"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      VersionDescription: params["VersionDescription"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTemplate",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "VersionArn": "s",
          "TemplateId": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createTemplateAlias(
    {abortSignal, ...params}: RequestConfig & CreateTemplateAliasRequest,
  ): Promise<CreateTemplateAliasResponse> {
    const body: jsonP.JSONObject = {
      TemplateVersionNumber: params["TemplateVersionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTemplateAlias",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateAlias": toTemplateAlias,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createTheme(
    {abortSignal, ...params}: RequestConfig & CreateThemeRequest,
  ): Promise<CreateThemeResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      BaseThemeId: params["BaseThemeId"],
      VersionDescription: params["VersionDescription"],
      Configuration: fromThemeConfiguration(params["Configuration"]),
      Permissions: params["Permissions"]?.map(x => fromResourcePermission(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTheme",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "VersionArn": "s",
          "ThemeId": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async createThemeAlias(
    {abortSignal, ...params}: RequestConfig & CreateThemeAliasRequest,
  ): Promise<CreateThemeAliasResponse> {
    const body: jsonP.JSONObject = {
      ThemeVersionNumber: params["ThemeVersionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThemeAlias",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeAlias": toThemeAlias,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteAccountCustomization(
    {abortSignal, ...params}: RequestConfig & DeleteAccountCustomizationRequest,
  ): Promise<DeleteAccountCustomizationResponse> {
    const query = new URLSearchParams;
    if (params["Namespace"] != null) query.set("namespace", params["Namespace"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAccountCustomization",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/customizations`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteAnalysis(
    {abortSignal, ...params}: RequestConfig & DeleteAnalysisRequest,
  ): Promise<DeleteAnalysisResponse> {
    const query = new URLSearchParams;
    if (params["RecoveryWindowInDays"] != null) query.set("recovery-window-in-days", params["RecoveryWindowInDays"]?.toString() ?? "");
    if (params["ForceDeleteWithoutRecovery"] != null) query.set("force-delete-without-recovery", params["ForceDeleteWithoutRecovery"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAnalysis",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/analyses/${params["AnalysisId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AnalysisId": "s",
          "DeletionTime": "d",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteDashboard(
    {abortSignal, ...params}: RequestConfig & DeleteDashboardRequest,
  ): Promise<DeleteDashboardResponse> {
    const query = new URLSearchParams;
    if (params["VersionNumber"] != null) query.set("version-number", params["VersionNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteDashboard",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "DashboardId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteDataSet(
    {abortSignal, ...params}: RequestConfig & DeleteDataSetRequest,
  ): Promise<DeleteDataSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDataSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "DataSetId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteDataSource(
    {abortSignal, ...params}: RequestConfig & DeleteDataSourceRequest,
  ): Promise<DeleteDataSourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDataSource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sources/${params["DataSourceId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "DataSourceId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteGroup(
    {abortSignal, ...params}: RequestConfig & DeleteGroupRequest,
  ): Promise<DeleteGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups/${params["GroupName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteGroupMembership(
    {abortSignal, ...params}: RequestConfig & DeleteGroupMembershipRequest,
  ): Promise<DeleteGroupMembershipResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGroupMembership",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups/${params["GroupName"]}/members/${params["MemberName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteIAMPolicyAssignment(
    {abortSignal, ...params}: RequestConfig & DeleteIAMPolicyAssignmentRequest,
  ): Promise<DeleteIAMPolicyAssignmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIAMPolicyAssignment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespace/${params["Namespace"]}/iam-policy-assignments/${params["AssignmentName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AssignmentName": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteNamespace(
    {abortSignal, ...params}: RequestConfig & DeleteNamespaceRequest,
  ): Promise<DeleteNamespaceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteNamespace",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteTemplateRequest,
  ): Promise<DeleteTemplateResponse> {
    const query = new URLSearchParams;
    if (params["VersionNumber"] != null) query.set("version-number", params["VersionNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
          "Arn": "s",
          "TemplateId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteTemplateAlias(
    {abortSignal, ...params}: RequestConfig & DeleteTemplateAliasRequest,
  ): Promise<DeleteTemplateAliasResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteTemplateAlias",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateId": "s",
          "AliasName": "s",
          "Arn": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteTheme(
    {abortSignal, ...params}: RequestConfig & DeleteThemeRequest,
  ): Promise<DeleteThemeResponse> {
    const query = new URLSearchParams;
    if (params["VersionNumber"] != null) query.set("version-number", params["VersionNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteTheme",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "RequestId": "s",
          "ThemeId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteThemeAlias(
    {abortSignal, ...params}: RequestConfig & DeleteThemeAliasRequest,
  ): Promise<DeleteThemeAliasResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteThemeAlias",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AliasName": "s",
          "Arn": "s",
          "RequestId": "s",
          "ThemeId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<DeleteUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUser",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/users/${params["UserName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async deleteUserByPrincipalId(
    {abortSignal, ...params}: RequestConfig & DeleteUserByPrincipalIdRequest,
  ): Promise<DeleteUserByPrincipalIdResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUserByPrincipalId",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/user-principals/${params["PrincipalId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeAccountCustomization(
    {abortSignal, ...params}: RequestConfig & DescribeAccountCustomizationRequest,
  ): Promise<DescribeAccountCustomizationResponse> {
    const query = new URLSearchParams;
    if (params["Namespace"] != null) query.set("namespace", params["Namespace"]?.toString() ?? "");
    if (params["Resolved"] != null) query.set("resolved", params["Resolved"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeAccountCustomization",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/customizations`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AwsAccountId": "s",
          "Namespace": "s",
          "AccountCustomization": toAccountCustomization,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeAccountSettings(
    {abortSignal, ...params}: RequestConfig & DescribeAccountSettingsRequest,
  ): Promise<DescribeAccountSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAccountSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/settings`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AccountSettings": toAccountSettings,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeAnalysis(
    {abortSignal, ...params}: RequestConfig & DescribeAnalysisRequest,
  ): Promise<DescribeAnalysisResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAnalysis",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/analyses/${params["AnalysisId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Analysis": toAnalysis,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeAnalysisPermissions(
    {abortSignal, ...params}: RequestConfig & DescribeAnalysisPermissionsRequest,
  ): Promise<DescribeAnalysisPermissionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAnalysisPermissions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/analyses/${params["AnalysisId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AnalysisId": "s",
          "AnalysisArn": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeDashboard(
    {abortSignal, ...params}: RequestConfig & DescribeDashboardRequest,
  ): Promise<DescribeDashboardResponse> {
    const query = new URLSearchParams;
    if (params["VersionNumber"] != null) query.set("version-number", params["VersionNumber"]?.toString() ?? "");
    if (params["AliasName"] != null) query.set("alias-name", params["AliasName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeDashboard",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Dashboard": toDashboard,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeDashboardPermissions(
    {abortSignal, ...params}: RequestConfig & DescribeDashboardPermissionsRequest,
  ): Promise<DescribeDashboardPermissionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDashboardPermissions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DashboardId": "s",
          "DashboardArn": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeDataSet(
    {abortSignal, ...params}: RequestConfig & DescribeDataSetRequest,
  ): Promise<DescribeDataSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDataSet",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSet": toDataSet,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeDataSetPermissions(
    {abortSignal, ...params}: RequestConfig & DescribeDataSetPermissionsRequest,
  ): Promise<DescribeDataSetPermissionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDataSetPermissions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSetArn": "s",
          "DataSetId": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeDataSource(
    {abortSignal, ...params}: RequestConfig & DescribeDataSourceRequest,
  ): Promise<DescribeDataSourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDataSource",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sources/${params["DataSourceId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSource": toDataSource,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeDataSourcePermissions(
    {abortSignal, ...params}: RequestConfig & DescribeDataSourcePermissionsRequest,
  ): Promise<DescribeDataSourcePermissionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDataSourcePermissions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sources/${params["DataSourceId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSourceArn": "s",
          "DataSourceId": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeGroup(
    {abortSignal, ...params}: RequestConfig & DescribeGroupRequest,
  ): Promise<DescribeGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups/${params["GroupName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Group": toGroup,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeIAMPolicyAssignment(
    {abortSignal, ...params}: RequestConfig & DescribeIAMPolicyAssignmentRequest,
  ): Promise<DescribeIAMPolicyAssignmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIAMPolicyAssignment",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/iam-policy-assignments/${params["AssignmentName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "IAMPolicyAssignment": toIAMPolicyAssignment,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeIngestion(
    {abortSignal, ...params}: RequestConfig & DescribeIngestionRequest,
  ): Promise<DescribeIngestionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIngestion",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}/ingestions/${params["IngestionId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Ingestion": toIngestion,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeNamespace(
    {abortSignal, ...params}: RequestConfig & DescribeNamespaceRequest,
  ): Promise<DescribeNamespaceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeNamespace",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Namespace": toNamespaceInfoV2,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeTemplate(
    {abortSignal, ...params}: RequestConfig & DescribeTemplateRequest,
  ): Promise<DescribeTemplateResponse> {
    const query = new URLSearchParams;
    if (params["VersionNumber"] != null) query.set("version-number", params["VersionNumber"]?.toString() ?? "");
    if (params["AliasName"] != null) query.set("alias-name", params["AliasName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Template": toTemplate,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeTemplateAlias(
    {abortSignal, ...params}: RequestConfig & DescribeTemplateAliasRequest,
  ): Promise<DescribeTemplateAliasResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeTemplateAlias",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateAlias": toTemplateAlias,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeTemplatePermissions(
    {abortSignal, ...params}: RequestConfig & DescribeTemplatePermissionsRequest,
  ): Promise<DescribeTemplatePermissionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeTemplatePermissions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateId": "s",
          "TemplateArn": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeTheme(
    {abortSignal, ...params}: RequestConfig & DescribeThemeRequest,
  ): Promise<DescribeThemeResponse> {
    const query = new URLSearchParams;
    if (params["VersionNumber"] != null) query.set("version-number", params["VersionNumber"]?.toString() ?? "");
    if (params["AliasName"] != null) query.set("alias-name", params["AliasName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeTheme",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Theme": toTheme,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeThemeAlias(
    {abortSignal, ...params}: RequestConfig & DescribeThemeAliasRequest,
  ): Promise<DescribeThemeAliasResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeThemeAlias",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeAlias": toThemeAlias,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeThemePermissions(
    {abortSignal, ...params}: RequestConfig & DescribeThemePermissionsRequest,
  ): Promise<DescribeThemePermissionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeThemePermissions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeId": "s",
          "ThemeArn": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & DescribeUserRequest,
  ): Promise<DescribeUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeUser",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/users/${params["UserName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "User": toUser,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async getDashboardEmbedUrl(
    {abortSignal, ...params}: RequestConfig & GetDashboardEmbedUrlRequest,
  ): Promise<GetDashboardEmbedUrlResponse> {
    const query = new URLSearchParams;
    query.set("creds-type", params["IdentityType"]?.toString() ?? "");
    if (params["SessionLifetimeInMinutes"] != null) query.set("session-lifetime", params["SessionLifetimeInMinutes"]?.toString() ?? "");
    if (params["UndoRedoDisabled"] != null) query.set("undo-redo-disabled", params["UndoRedoDisabled"]?.toString() ?? "");
    if (params["ResetDisabled"] != null) query.set("reset-disabled", params["ResetDisabled"]?.toString() ?? "");
    if (params["StatePersistenceEnabled"] != null) query.set("state-persistence-enabled", params["StatePersistenceEnabled"]?.toString() ?? "");
    if (params["UserArn"] != null) query.set("user-arn", params["UserArn"]?.toString() ?? "");
    if (params["Namespace"] != null) query.set("namespace", params["Namespace"]?.toString() ?? "");
    for (const item of params["AdditionalDashboardIds"] ?? []) {
      query.append("additional-dashboard-ids", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDashboardEmbedUrl",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}/embed-url`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "EmbedUrl": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async getSessionEmbedUrl(
    {abortSignal, ...params}: RequestConfig & GetSessionEmbedUrlRequest,
  ): Promise<GetSessionEmbedUrlResponse> {
    const query = new URLSearchParams;
    if (params["EntryPoint"] != null) query.set("entry-point", params["EntryPoint"]?.toString() ?? "");
    if (params["SessionLifetimeInMinutes"] != null) query.set("session-lifetime", params["SessionLifetimeInMinutes"]?.toString() ?? "");
    if (params["UserArn"] != null) query.set("user-arn", params["UserArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSessionEmbedUrl",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/session-embed-url`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "EmbedUrl": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listAnalyses(
    {abortSignal, ...params}: RequestConfig & ListAnalysesRequest,
  ): Promise<ListAnalysesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAnalyses",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/analyses`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AnalysisSummaryList": [toAnalysisSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listDashboardVersions(
    {abortSignal, ...params}: RequestConfig & ListDashboardVersionsRequest,
  ): Promise<ListDashboardVersionsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDashboardVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}/versions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DashboardVersionSummaryList": [toDashboardVersionSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listDashboards(
    {abortSignal, ...params}: RequestConfig & ListDashboardsRequest,
  ): Promise<ListDashboardsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDashboards",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DashboardSummaryList": [toDashboardSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listDataSets(
    {abortSignal, ...params}: RequestConfig & ListDataSetsRequest,
  ): Promise<ListDataSetsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDataSets",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSetSummaries": [toDataSetSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listDataSources(
    {abortSignal, ...params}: RequestConfig & ListDataSourcesRequest,
  ): Promise<ListDataSourcesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDataSources",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sources`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSources": [toDataSource],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listGroupMemberships(
    {abortSignal, ...params}: RequestConfig & ListGroupMembershipsRequest,
  ): Promise<ListGroupMembershipsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGroupMemberships",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups/${params["GroupName"]}/members`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "GroupMemberList": [toGroupMember],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & ListGroupsRequest,
  ): Promise<ListGroupsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGroups",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "GroupList": [toGroup],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listIAMPolicyAssignments(
    {abortSignal, ...params}: RequestConfig & ListIAMPolicyAssignmentsRequest,
  ): Promise<ListIAMPolicyAssignmentsResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      AssignmentStatus: params["AssignmentStatus"],
    };
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListIAMPolicyAssignments",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/iam-policy-assignments`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "IAMPolicyAssignments": [toIAMPolicyAssignmentSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listIAMPolicyAssignmentsForUser(
    {abortSignal, ...params}: RequestConfig & ListIAMPolicyAssignmentsForUserRequest,
  ): Promise<ListIAMPolicyAssignmentsForUserResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIAMPolicyAssignmentsForUser",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/users/${params["UserName"]}/iam-policy-assignments`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ActiveAssignments": [toActiveIAMPolicyAssignment],
          "RequestId": "s",
          "NextToken": "s",
        },
      }, await resp.json()),
    };
  }

  async listIngestions(
    {abortSignal, ...params}: RequestConfig & ListIngestionsRequest,
  ): Promise<ListIngestionsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIngestions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}/ingestions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Ingestions": [toIngestion],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listNamespaces(
    {abortSignal, ...params}: RequestConfig & ListNamespacesRequest,
  ): Promise<ListNamespacesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListNamespaces",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Namespaces": [toNamespaceInfoV2],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/resources/${params["ResourceArn"]}/tags`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Tags": [toTag],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listTemplateAliases(
    {abortSignal, ...params}: RequestConfig & ListTemplateAliasesRequest,
  ): Promise<ListTemplateAliasesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-result", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTemplateAliases",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/aliases`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateAliasList": [toTemplateAlias],
          "RequestId": "s",
          "NextToken": "s",
        },
      }, await resp.json()),
    };
  }

  async listTemplateVersions(
    {abortSignal, ...params}: RequestConfig & ListTemplateVersionsRequest,
  ): Promise<ListTemplateVersionsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTemplateVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/versions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateVersionSummaryList": [toTemplateVersionSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listTemplates(
    {abortSignal, ...params}: RequestConfig & ListTemplatesRequest,
  ): Promise<ListTemplatesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-result", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTemplates",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateSummaryList": [toTemplateSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listThemeAliases(
    {abortSignal, ...params}: RequestConfig & ListThemeAliasesRequest,
  ): Promise<ListThemeAliasesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-result", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThemeAliases",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/aliases`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeAliasList": [toThemeAlias],
          "RequestId": "s",
          "NextToken": "s",
        },
      }, await resp.json()),
    };
  }

  async listThemeVersions(
    {abortSignal, ...params}: RequestConfig & ListThemeVersionsRequest,
  ): Promise<ListThemeVersionsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThemeVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/versions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeVersionSummaryList": [toThemeVersionSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listThemes(
    {abortSignal, ...params}: RequestConfig & ListThemesRequest,
  ): Promise<ListThemesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["Type"] != null) query.set("type", params["Type"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThemes",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeSummaryList": [toThemeSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listUserGroups(
    {abortSignal, ...params}: RequestConfig & ListUserGroupsRequest,
  ): Promise<ListUserGroupsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUserGroups",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/users/${params["UserName"]}/groups`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "GroupList": [toGroup],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & ListUsersRequest,
  ): Promise<ListUsersResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUsers",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/users`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "UserList": [toUser],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async registerUser(
    {abortSignal, ...params}: RequestConfig & RegisterUserRequest,
  ): Promise<RegisterUserResponse> {
    const body: jsonP.JSONObject = {
      IdentityType: params["IdentityType"],
      Email: params["Email"],
      UserRole: params["UserRole"],
      IamArn: params["IamArn"],
      SessionName: params["SessionName"],
      UserName: params["UserName"],
      CustomPermissionsName: params["CustomPermissionsName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterUser",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/users`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "User": toUser,
          "UserInvitationUrl": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async restoreAnalysis(
    {abortSignal, ...params}: RequestConfig & RestoreAnalysisRequest,
  ): Promise<RestoreAnalysisResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RestoreAnalysis",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/restore/analyses/${params["AnalysisId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AnalysisId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async searchAnalyses(
    {abortSignal, ...params}: RequestConfig & SearchAnalysesRequest,
  ): Promise<SearchAnalysesResponse> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromAnalysisSearchFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchAnalyses",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/search/analyses`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AnalysisSummaryList": [toAnalysisSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async searchDashboards(
    {abortSignal, ...params}: RequestConfig & SearchDashboardsRequest,
  ): Promise<SearchDashboardsResponse> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromDashboardSearchFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchDashboards",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/search/dashboards`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DashboardSummaryList": [toDashboardSummary],
          "NextToken": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/resources/${params["ResourceArn"]}/tags`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("keys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/resources/${params["ResourceArn"]}/tags`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateAccountCustomization(
    {abortSignal, ...params}: RequestConfig & UpdateAccountCustomizationRequest,
  ): Promise<UpdateAccountCustomizationResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      AccountCustomization: fromAccountCustomization(params["AccountCustomization"]),
    };
    if (params["Namespace"] != null) query.set("namespace", params["Namespace"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateAccountCustomization",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/customizations`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AwsAccountId": "s",
          "Namespace": "s",
          "AccountCustomization": toAccountCustomization,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateAccountSettings(
    {abortSignal, ...params}: RequestConfig & UpdateAccountSettingsRequest,
  ): Promise<UpdateAccountSettingsResponse> {
    const body: jsonP.JSONObject = {
      DefaultNamespace: params["DefaultNamespace"],
      NotificationEmail: params["NotificationEmail"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccountSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/settings`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateAnalysis(
    {abortSignal, ...params}: RequestConfig & UpdateAnalysisRequest,
  ): Promise<UpdateAnalysisResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Parameters: fromParameters(params["Parameters"]),
      SourceEntity: fromAnalysisSourceEntity(params["SourceEntity"]),
      ThemeArn: params["ThemeArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAnalysis",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/analyses/${params["AnalysisId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AnalysisId": "s",
          "UpdateStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateAnalysisPermissions(
    {abortSignal, ...params}: RequestConfig & UpdateAnalysisPermissionsRequest,
  ): Promise<UpdateAnalysisPermissionsResponse> {
    const body: jsonP.JSONObject = {
      GrantPermissions: params["GrantPermissions"]?.map(x => fromResourcePermission(x)),
      RevokePermissions: params["RevokePermissions"]?.map(x => fromResourcePermission(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAnalysisPermissions",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/analyses/${params["AnalysisId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AnalysisArn": "s",
          "AnalysisId": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateDashboard(
    {abortSignal, ...params}: RequestConfig & UpdateDashboardRequest,
  ): Promise<UpdateDashboardResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      SourceEntity: fromDashboardSourceEntity(params["SourceEntity"]),
      Parameters: fromParameters(params["Parameters"]),
      VersionDescription: params["VersionDescription"],
      DashboardPublishOptions: fromDashboardPublishOptions(params["DashboardPublishOptions"]),
      ThemeArn: params["ThemeArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDashboard",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "VersionArn": "s",
        "DashboardId": "s",
        "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
        "Status": "n",
        "RequestId": "s",
      },
    }, await resp.json());
  }

  async updateDashboardPermissions(
    {abortSignal, ...params}: RequestConfig & UpdateDashboardPermissionsRequest,
  ): Promise<UpdateDashboardPermissionsResponse> {
    const body: jsonP.JSONObject = {
      GrantPermissions: params["GrantPermissions"]?.map(x => fromResourcePermission(x)),
      RevokePermissions: params["RevokePermissions"]?.map(x => fromResourcePermission(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDashboardPermissions",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DashboardArn": "s",
          "DashboardId": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateDashboardPublishedVersion(
    {abortSignal, ...params}: RequestConfig & UpdateDashboardPublishedVersionRequest,
  ): Promise<UpdateDashboardPublishedVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "UpdateDashboardPublishedVersion",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/dashboards/${params["DashboardId"]}/versions/${params["VersionNumber"].toString()}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DashboardId": "s",
          "DashboardArn": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateDataSet(
    {abortSignal, ...params}: RequestConfig & UpdateDataSetRequest,
  ): Promise<UpdateDataSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      PhysicalTableMap: jsonP.serializeMap(params["PhysicalTableMap"], x => fromPhysicalTable(x)),
      LogicalTableMap: jsonP.serializeMap(params["LogicalTableMap"], x => fromLogicalTable(x)),
      ImportMode: params["ImportMode"],
      ColumnGroups: params["ColumnGroups"]?.map(x => fromColumnGroup(x)),
      RowLevelPermissionDataSet: fromRowLevelPermissionDataSet(params["RowLevelPermissionDataSet"]),
      ColumnLevelPermissionRules: params["ColumnLevelPermissionRules"]?.map(x => fromColumnLevelPermissionRule(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSet",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "DataSetId": "s",
          "IngestionArn": "s",
          "IngestionId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateDataSetPermissions(
    {abortSignal, ...params}: RequestConfig & UpdateDataSetPermissionsRequest,
  ): Promise<UpdateDataSetPermissionsResponse> {
    const body: jsonP.JSONObject = {
      GrantPermissions: params["GrantPermissions"]?.map(x => fromResourcePermission(x)),
      RevokePermissions: params["RevokePermissions"]?.map(x => fromResourcePermission(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSetPermissions",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sets/${params["DataSetId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSetArn": "s",
          "DataSetId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateDataSource(
    {abortSignal, ...params}: RequestConfig & UpdateDataSourceRequest,
  ): Promise<UpdateDataSourceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DataSourceParameters: fromDataSourceParameters(params["DataSourceParameters"]),
      Credentials: fromDataSourceCredentials(params["Credentials"]),
      VpcConnectionProperties: fromVpcConnectionProperties(params["VpcConnectionProperties"]),
      SslProperties: fromSslProperties(params["SslProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSource",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sources/${params["DataSourceId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "DataSourceId": "s",
          "UpdateStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateDataSourcePermissions(
    {abortSignal, ...params}: RequestConfig & UpdateDataSourcePermissionsRequest,
  ): Promise<UpdateDataSourcePermissionsResponse> {
    const body: jsonP.JSONObject = {
      GrantPermissions: params["GrantPermissions"]?.map(x => fromResourcePermission(x)),
      RevokePermissions: params["RevokePermissions"]?.map(x => fromResourcePermission(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSourcePermissions",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/data-sources/${params["DataSourceId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "DataSourceArn": "s",
          "DataSourceId": "s",
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateGroup(
    {abortSignal, ...params}: RequestConfig & UpdateGroupRequest,
  ): Promise<UpdateGroupResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/groups/${params["GroupName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "Group": toGroup,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateIAMPolicyAssignment(
    {abortSignal, ...params}: RequestConfig & UpdateIAMPolicyAssignmentRequest,
  ): Promise<UpdateIAMPolicyAssignmentResponse> {
    const body: jsonP.JSONObject = {
      AssignmentStatus: params["AssignmentStatus"],
      PolicyArn: params["PolicyArn"],
      Identities: params["Identities"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIAMPolicyAssignment",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/iam-policy-assignments/${params["AssignmentName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "AssignmentName": "s",
          "AssignmentId": "s",
          "PolicyArn": "s",
          "Identities": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
          "AssignmentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AssignmentStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateTemplateRequest,
  ): Promise<UpdateTemplateResponse> {
    const body: jsonP.JSONObject = {
      SourceEntity: fromTemplateSourceEntity(params["SourceEntity"]),
      VersionDescription: params["VersionDescription"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTemplate",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateId": "s",
          "Arn": "s",
          "VersionArn": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateTemplateAlias(
    {abortSignal, ...params}: RequestConfig & UpdateTemplateAliasRequest,
  ): Promise<UpdateTemplateAliasResponse> {
    const body: jsonP.JSONObject = {
      TemplateVersionNumber: params["TemplateVersionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTemplateAlias",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateAlias": toTemplateAlias,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateTemplatePermissions(
    {abortSignal, ...params}: RequestConfig & UpdateTemplatePermissionsRequest,
  ): Promise<UpdateTemplatePermissionsResponse> {
    const body: jsonP.JSONObject = {
      GrantPermissions: params["GrantPermissions"]?.map(x => fromResourcePermission(x)),
      RevokePermissions: params["RevokePermissions"]?.map(x => fromResourcePermission(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTemplatePermissions",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/templates/${params["TemplateId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "TemplateId": "s",
          "TemplateArn": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateTheme(
    {abortSignal, ...params}: RequestConfig & UpdateThemeRequest,
  ): Promise<UpdateThemeResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      BaseThemeId: params["BaseThemeId"],
      VersionDescription: params["VersionDescription"],
      Configuration: fromThemeConfiguration(params["Configuration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTheme",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeId": "s",
          "Arn": "s",
          "VersionArn": "s",
          "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateThemeAlias(
    {abortSignal, ...params}: RequestConfig & UpdateThemeAliasRequest,
  ): Promise<UpdateThemeAliasResponse> {
    const body: jsonP.JSONObject = {
      ThemeVersionNumber: params["ThemeVersionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThemeAlias",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/aliases/${params["AliasName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeAlias": toThemeAlias,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateThemePermissions(
    {abortSignal, ...params}: RequestConfig & UpdateThemePermissionsRequest,
  ): Promise<UpdateThemePermissionsResponse> {
    const body: jsonP.JSONObject = {
      GrantPermissions: params["GrantPermissions"]?.map(x => fromResourcePermission(x)),
      RevokePermissions: params["RevokePermissions"]?.map(x => fromResourcePermission(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThemePermissions",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/themes/${params["ThemeId"]}/permissions`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "ThemeId": "s",
          "ThemeArn": "s",
          "Permissions": [toResourcePermission],
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

  async updateUser(
    {abortSignal, ...params}: RequestConfig & UpdateUserRequest,
  ): Promise<UpdateUserResponse> {
    const body: jsonP.JSONObject = {
      Email: params["Email"],
      Role: params["Role"],
      CustomPermissionsName: params["CustomPermissionsName"],
      UnapplyCustomPermissions: params["UnapplyCustomPermissions"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUser",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AwsAccountId"]}/namespaces/${params["Namespace"]}/users/${params["UserName"]}`,
    });
    return {
      Status: resp.status,
      ...jsonP.readObj({
        required: {},
        optional: {
          "User": toUser,
          "RequestId": "s",
        },
      }, await resp.json()),
    };
  }

}

// refs: 1 - tags: named, input
export interface CancelIngestionRequest {
  AwsAccountId: string;
  DataSetId: string;
  IngestionId: string;
}

// refs: 1 - tags: named, input
export interface CreateAccountCustomizationRequest {
  AwsAccountId: string;
  Namespace?: string | null;
  AccountCustomization: AccountCustomization;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateAnalysisRequest {
  AwsAccountId: string;
  AnalysisId: string;
  Name: string;
  Parameters?: Parameters | null;
  Permissions?: ResourcePermission[] | null;
  SourceEntity: AnalysisSourceEntity;
  ThemeArn?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDashboardRequest {
  AwsAccountId: string;
  DashboardId: string;
  Name: string;
  Parameters?: Parameters | null;
  Permissions?: ResourcePermission[] | null;
  SourceEntity: DashboardSourceEntity;
  Tags?: Tag[] | null;
  VersionDescription?: string | null;
  DashboardPublishOptions?: DashboardPublishOptions | null;
  ThemeArn?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDataSetRequest {
  AwsAccountId: string;
  DataSetId: string;
  Name: string;
  PhysicalTableMap: { [key: string]: PhysicalTable | null | undefined };
  LogicalTableMap?: { [key: string]: LogicalTable | null | undefined } | null;
  ImportMode: DataSetImportMode;
  ColumnGroups?: ColumnGroup[] | null;
  Permissions?: ResourcePermission[] | null;
  RowLevelPermissionDataSet?: RowLevelPermissionDataSet | null;
  ColumnLevelPermissionRules?: ColumnLevelPermissionRule[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDataSourceRequest {
  AwsAccountId: string;
  DataSourceId: string;
  Name: string;
  Type: DataSourceType;
  DataSourceParameters?: DataSourceParameters | null;
  Credentials?: DataSourceCredentials | null;
  Permissions?: ResourcePermission[] | null;
  VpcConnectionProperties?: VpcConnectionProperties | null;
  SslProperties?: SslProperties | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateGroupRequest {
  GroupName: string;
  Description?: string | null;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface CreateGroupMembershipRequest {
  MemberName: string;
  GroupName: string;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface CreateIAMPolicyAssignmentRequest {
  AwsAccountId: string;
  AssignmentName: string;
  AssignmentStatus: AssignmentStatus;
  PolicyArn?: string | null;
  Identities?: { [key: string]: string[] | null | undefined } | null;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface CreateIngestionRequest {
  DataSetId: string;
  IngestionId: string;
  AwsAccountId: string;
}

// refs: 1 - tags: named, input
export interface CreateNamespaceRequest {
  AwsAccountId: string;
  Namespace: string;
  IdentityStore: IdentityStore;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTemplateRequest {
  AwsAccountId: string;
  TemplateId: string;
  Name?: string | null;
  Permissions?: ResourcePermission[] | null;
  SourceEntity: TemplateSourceEntity;
  Tags?: Tag[] | null;
  VersionDescription?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateTemplateAliasRequest {
  AwsAccountId: string;
  TemplateId: string;
  AliasName: string;
  TemplateVersionNumber: number;
}

// refs: 1 - tags: named, input
export interface CreateThemeRequest {
  AwsAccountId: string;
  ThemeId: string;
  Name: string;
  BaseThemeId: string;
  VersionDescription?: string | null;
  Configuration: ThemeConfiguration;
  Permissions?: ResourcePermission[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateThemeAliasRequest {
  AwsAccountId: string;
  ThemeId: string;
  AliasName: string;
  ThemeVersionNumber: number;
}

// refs: 1 - tags: named, input
export interface DeleteAccountCustomizationRequest {
  AwsAccountId: string;
  Namespace?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteAnalysisRequest {
  AwsAccountId: string;
  AnalysisId: string;
  RecoveryWindowInDays?: number | null;
  ForceDeleteWithoutRecovery?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteDashboardRequest {
  AwsAccountId: string;
  DashboardId: string;
  VersionNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteDataSetRequest {
  AwsAccountId: string;
  DataSetId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDataSourceRequest {
  AwsAccountId: string;
  DataSourceId: string;
}

// refs: 1 - tags: named, input
export interface DeleteGroupRequest {
  GroupName: string;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DeleteGroupMembershipRequest {
  MemberName: string;
  GroupName: string;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DeleteIAMPolicyAssignmentRequest {
  AwsAccountId: string;
  AssignmentName: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DeleteNamespaceRequest {
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DeleteTemplateRequest {
  AwsAccountId: string;
  TemplateId: string;
  VersionNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteTemplateAliasRequest {
  AwsAccountId: string;
  TemplateId: string;
  AliasName: string;
}

// refs: 1 - tags: named, input
export interface DeleteThemeRequest {
  AwsAccountId: string;
  ThemeId: string;
  VersionNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteThemeAliasRequest {
  AwsAccountId: string;
  ThemeId: string;
  AliasName: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  UserName: string;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserByPrincipalIdRequest {
  PrincipalId: string;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DescribeAccountCustomizationRequest {
  AwsAccountId: string;
  Namespace?: string | null;
  Resolved?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeAccountSettingsRequest {
  AwsAccountId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAnalysisRequest {
  AwsAccountId: string;
  AnalysisId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAnalysisPermissionsRequest {
  AwsAccountId: string;
  AnalysisId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDashboardRequest {
  AwsAccountId: string;
  DashboardId: string;
  VersionNumber?: number | null;
  AliasName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDashboardPermissionsRequest {
  AwsAccountId: string;
  DashboardId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDataSetRequest {
  AwsAccountId: string;
  DataSetId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDataSetPermissionsRequest {
  AwsAccountId: string;
  DataSetId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDataSourceRequest {
  AwsAccountId: string;
  DataSourceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDataSourcePermissionsRequest {
  AwsAccountId: string;
  DataSourceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeGroupRequest {
  GroupName: string;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DescribeIAMPolicyAssignmentRequest {
  AwsAccountId: string;
  AssignmentName: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DescribeIngestionRequest {
  AwsAccountId: string;
  DataSetId: string;
  IngestionId: string;
}

// refs: 1 - tags: named, input
export interface DescribeNamespaceRequest {
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface DescribeTemplateRequest {
  AwsAccountId: string;
  TemplateId: string;
  VersionNumber?: number | null;
  AliasName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeTemplateAliasRequest {
  AwsAccountId: string;
  TemplateId: string;
  AliasName: string;
}

// refs: 1 - tags: named, input
export interface DescribeTemplatePermissionsRequest {
  AwsAccountId: string;
  TemplateId: string;
}

// refs: 1 - tags: named, input
export interface DescribeThemeRequest {
  AwsAccountId: string;
  ThemeId: string;
  VersionNumber?: number | null;
  AliasName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeThemeAliasRequest {
  AwsAccountId: string;
  ThemeId: string;
  AliasName: string;
}

// refs: 1 - tags: named, input
export interface DescribeThemePermissionsRequest {
  AwsAccountId: string;
  ThemeId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserRequest {
  UserName: string;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface GetDashboardEmbedUrlRequest {
  AwsAccountId: string;
  DashboardId: string;
  IdentityType: EmbeddingIdentityType;
  SessionLifetimeInMinutes?: number | null;
  UndoRedoDisabled?: boolean | null;
  ResetDisabled?: boolean | null;
  StatePersistenceEnabled?: boolean | null;
  UserArn?: string | null;
  Namespace?: string | null;
  AdditionalDashboardIds?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GetSessionEmbedUrlRequest {
  AwsAccountId: string;
  EntryPoint?: string | null;
  SessionLifetimeInMinutes?: number | null;
  UserArn?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAnalysesRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDashboardVersionsRequest {
  AwsAccountId: string;
  DashboardId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDashboardsRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDataSetsRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDataSourcesRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListGroupMembershipsRequest {
  GroupName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface ListGroupsRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface ListIAMPolicyAssignmentsRequest {
  AwsAccountId: string;
  AssignmentStatus?: AssignmentStatus | null;
  Namespace: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIAMPolicyAssignmentsForUserRequest {
  AwsAccountId: string;
  UserName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface ListIngestionsRequest {
  DataSetId: string;
  NextToken?: string | null;
  AwsAccountId: string;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListNamespacesRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListTemplateAliasesRequest {
  AwsAccountId: string;
  TemplateId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTemplateVersionsRequest {
  AwsAccountId: string;
  TemplateId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTemplatesRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListThemeAliasesRequest {
  AwsAccountId: string;
  ThemeId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListThemeVersionsRequest {
  AwsAccountId: string;
  ThemeId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListThemesRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  Type?: ThemeType | null;
}

// refs: 1 - tags: named, input
export interface ListUserGroupsRequest {
  UserName: string;
  AwsAccountId: string;
  Namespace: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListUsersRequest {
  AwsAccountId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface RegisterUserRequest {
  IdentityType: IdentityType;
  Email: string;
  UserRole: UserRole;
  IamArn?: string | null;
  SessionName?: string | null;
  AwsAccountId: string;
  Namespace: string;
  UserName?: string | null;
  CustomPermissionsName?: string | null;
}

// refs: 1 - tags: named, input
export interface RestoreAnalysisRequest {
  AwsAccountId: string;
  AnalysisId: string;
}

// refs: 1 - tags: named, input
export interface SearchAnalysesRequest {
  AwsAccountId: string;
  Filters: AnalysisSearchFilter[];
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchDashboardsRequest {
  AwsAccountId: string;
  Filters: DashboardSearchFilter[];
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAccountCustomizationRequest {
  AwsAccountId: string;
  Namespace?: string | null;
  AccountCustomization: AccountCustomization;
}

// refs: 1 - tags: named, input
export interface UpdateAccountSettingsRequest {
  AwsAccountId: string;
  DefaultNamespace: string;
  NotificationEmail?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAnalysisRequest {
  AwsAccountId: string;
  AnalysisId: string;
  Name: string;
  Parameters?: Parameters | null;
  SourceEntity: AnalysisSourceEntity;
  ThemeArn?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAnalysisPermissionsRequest {
  AwsAccountId: string;
  AnalysisId: string;
  GrantPermissions?: ResourcePermission[] | null;
  RevokePermissions?: ResourcePermission[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateDashboardRequest {
  AwsAccountId: string;
  DashboardId: string;
  Name: string;
  SourceEntity: DashboardSourceEntity;
  Parameters?: Parameters | null;
  VersionDescription?: string | null;
  DashboardPublishOptions?: DashboardPublishOptions | null;
  ThemeArn?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDashboardPermissionsRequest {
  AwsAccountId: string;
  DashboardId: string;
  GrantPermissions?: ResourcePermission[] | null;
  RevokePermissions?: ResourcePermission[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateDashboardPublishedVersionRequest {
  AwsAccountId: string;
  DashboardId: string;
  VersionNumber: number;
}

// refs: 1 - tags: named, input
export interface UpdateDataSetRequest {
  AwsAccountId: string;
  DataSetId: string;
  Name: string;
  PhysicalTableMap: { [key: string]: PhysicalTable | null | undefined };
  LogicalTableMap?: { [key: string]: LogicalTable | null | undefined } | null;
  ImportMode: DataSetImportMode;
  ColumnGroups?: ColumnGroup[] | null;
  RowLevelPermissionDataSet?: RowLevelPermissionDataSet | null;
  ColumnLevelPermissionRules?: ColumnLevelPermissionRule[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateDataSetPermissionsRequest {
  AwsAccountId: string;
  DataSetId: string;
  GrantPermissions?: ResourcePermission[] | null;
  RevokePermissions?: ResourcePermission[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateDataSourceRequest {
  AwsAccountId: string;
  DataSourceId: string;
  Name: string;
  DataSourceParameters?: DataSourceParameters | null;
  Credentials?: DataSourceCredentials | null;
  VpcConnectionProperties?: VpcConnectionProperties | null;
  SslProperties?: SslProperties | null;
}

// refs: 1 - tags: named, input
export interface UpdateDataSourcePermissionsRequest {
  AwsAccountId: string;
  DataSourceId: string;
  GrantPermissions?: ResourcePermission[] | null;
  RevokePermissions?: ResourcePermission[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateGroupRequest {
  GroupName: string;
  Description?: string | null;
  AwsAccountId: string;
  Namespace: string;
}

// refs: 1 - tags: named, input
export interface UpdateIAMPolicyAssignmentRequest {
  AwsAccountId: string;
  AssignmentName: string;
  Namespace: string;
  AssignmentStatus?: AssignmentStatus | null;
  PolicyArn?: string | null;
  Identities?: { [key: string]: string[] | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UpdateTemplateRequest {
  AwsAccountId: string;
  TemplateId: string;
  SourceEntity: TemplateSourceEntity;
  VersionDescription?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateTemplateAliasRequest {
  AwsAccountId: string;
  TemplateId: string;
  AliasName: string;
  TemplateVersionNumber: number;
}

// refs: 1 - tags: named, input
export interface UpdateTemplatePermissionsRequest {
  AwsAccountId: string;
  TemplateId: string;
  GrantPermissions?: ResourcePermission[] | null;
  RevokePermissions?: ResourcePermission[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateThemeRequest {
  AwsAccountId: string;
  ThemeId: string;
  Name?: string | null;
  BaseThemeId: string;
  VersionDescription?: string | null;
  Configuration?: ThemeConfiguration | null;
}

// refs: 1 - tags: named, input
export interface UpdateThemeAliasRequest {
  AwsAccountId: string;
  ThemeId: string;
  AliasName: string;
  ThemeVersionNumber: number;
}

// refs: 1 - tags: named, input
export interface UpdateThemePermissionsRequest {
  AwsAccountId: string;
  ThemeId: string;
  GrantPermissions?: ResourcePermission[] | null;
  RevokePermissions?: ResourcePermission[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserRequest {
  UserName: string;
  AwsAccountId: string;
  Namespace: string;
  Email: string;
  Role: UserRole;
  CustomPermissionsName?: string | null;
  UnapplyCustomPermissions?: boolean | null;
}

// refs: 1 - tags: named, output
export interface CancelIngestionResponse {
  Arn?: string | null;
  IngestionId?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateAccountCustomizationResponse {
  Arn?: string | null;
  AwsAccountId?: string | null;
  Namespace?: string | null;
  AccountCustomization?: AccountCustomization | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateAnalysisResponse {
  Arn?: string | null;
  AnalysisId?: string | null;
  CreationStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDashboardResponse {
  Arn?: string | null;
  VersionArn?: string | null;
  DashboardId?: string | null;
  CreationStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDataSetResponse {
  Arn?: string | null;
  DataSetId?: string | null;
  IngestionArn?: string | null;
  IngestionId?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateDataSourceResponse {
  Arn?: string | null;
  DataSourceId?: string | null;
  CreationStatus?: ResourceStatus | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateGroupResponse {
  Group?: Group | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateGroupMembershipResponse {
  GroupMember?: GroupMember | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateIAMPolicyAssignmentResponse {
  AssignmentName?: string | null;
  AssignmentId?: string | null;
  AssignmentStatus?: AssignmentStatus | null;
  PolicyArn?: string | null;
  Identities?: { [key: string]: string[] | null | undefined } | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateIngestionResponse {
  Arn?: string | null;
  IngestionId?: string | null;
  IngestionStatus?: IngestionStatus | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateNamespaceResponse {
  Arn?: string | null;
  Name?: string | null;
  CapacityRegion?: string | null;
  CreationStatus?: NamespaceStatus | null;
  IdentityStore?: IdentityStore | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateTemplateResponse {
  Arn?: string | null;
  VersionArn?: string | null;
  TemplateId?: string | null;
  CreationStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTemplateAliasResponse {
  TemplateAlias?: TemplateAlias | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateThemeResponse {
  Arn?: string | null;
  VersionArn?: string | null;
  ThemeId?: string | null;
  CreationStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateThemeAliasResponse {
  ThemeAlias?: ThemeAlias | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteAccountCustomizationResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteAnalysisResponse {
  Status?: number | null;
  Arn?: string | null;
  AnalysisId?: string | null;
  DeletionTime?: Date | number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteDashboardResponse {
  Status?: number | null;
  Arn?: string | null;
  DashboardId?: string | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteDataSetResponse {
  Arn?: string | null;
  DataSetId?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteDataSourceResponse {
  Arn?: string | null;
  DataSourceId?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteGroupResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteGroupMembershipResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteIAMPolicyAssignmentResponse {
  AssignmentName?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteNamespaceResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteTemplateResponse {
  RequestId?: string | null;
  Arn?: string | null;
  TemplateId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteTemplateAliasResponse {
  Status?: number | null;
  TemplateId?: string | null;
  AliasName?: string | null;
  Arn?: string | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteThemeResponse {
  Arn?: string | null;
  RequestId?: string | null;
  Status?: number | null;
  ThemeId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteThemeAliasResponse {
  AliasName?: string | null;
  Arn?: string | null;
  RequestId?: string | null;
  Status?: number | null;
  ThemeId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteUserResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteUserByPrincipalIdResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeAccountCustomizationResponse {
  Arn?: string | null;
  AwsAccountId?: string | null;
  Namespace?: string | null;
  AccountCustomization?: AccountCustomization | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeAccountSettingsResponse {
  AccountSettings?: AccountSettings | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeAnalysisResponse {
  Analysis?: Analysis | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAnalysisPermissionsResponse {
  AnalysisId?: string | null;
  AnalysisArn?: string | null;
  Permissions?: ResourcePermission[] | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDashboardResponse {
  Dashboard?: Dashboard | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDashboardPermissionsResponse {
  DashboardId?: string | null;
  DashboardArn?: string | null;
  Permissions?: ResourcePermission[] | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDataSetResponse {
  DataSet?: DataSet | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeDataSetPermissionsResponse {
  DataSetArn?: string | null;
  DataSetId?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeDataSourceResponse {
  DataSource?: DataSource | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeDataSourcePermissionsResponse {
  DataSourceArn?: string | null;
  DataSourceId?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeGroupResponse {
  Group?: Group | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeIAMPolicyAssignmentResponse {
  IAMPolicyAssignment?: IAMPolicyAssignment | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeIngestionResponse {
  Ingestion?: Ingestion | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeNamespaceResponse {
  Namespace?: NamespaceInfoV2 | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeTemplateResponse {
  Template?: Template | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTemplateAliasResponse {
  TemplateAlias?: TemplateAlias | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTemplatePermissionsResponse {
  TemplateId?: string | null;
  TemplateArn?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeThemeResponse {
  Theme?: Theme | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeThemeAliasResponse {
  ThemeAlias?: ThemeAlias | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeThemePermissionsResponse {
  ThemeId?: string | null;
  ThemeArn?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserResponse {
  User?: User | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface GetDashboardEmbedUrlResponse {
  EmbedUrl?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSessionEmbedUrlResponse {
  EmbedUrl?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAnalysesResponse {
  AnalysisSummaryList?: AnalysisSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDashboardVersionsResponse {
  DashboardVersionSummaryList?: DashboardVersionSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDashboardsResponse {
  DashboardSummaryList?: DashboardSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDataSetsResponse {
  DataSetSummaries?: DataSetSummary[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListDataSourcesResponse {
  DataSources?: DataSource[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListGroupMembershipsResponse {
  GroupMemberList?: GroupMember[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListGroupsResponse {
  GroupList?: Group[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListIAMPolicyAssignmentsResponse {
  IAMPolicyAssignments?: IAMPolicyAssignmentSummary[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListIAMPolicyAssignmentsForUserResponse {
  ActiveAssignments?: ActiveIAMPolicyAssignment[] | null;
  RequestId?: string | null;
  NextToken?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListIngestionsResponse {
  Ingestions?: Ingestion[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListNamespacesResponse {
  Namespaces?: NamespaceInfoV2[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListTemplateAliasesResponse {
  TemplateAliasList?: TemplateAlias[] | null;
  Status?: number | null;
  RequestId?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTemplateVersionsResponse {
  TemplateVersionSummaryList?: TemplateVersionSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTemplatesResponse {
  TemplateSummaryList?: TemplateSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThemeAliasesResponse {
  ThemeAliasList?: ThemeAlias[] | null;
  Status?: number | null;
  RequestId?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThemeVersionsResponse {
  ThemeVersionSummaryList?: ThemeVersionSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThemesResponse {
  ThemeSummaryList?: ThemeSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUserGroupsResponse {
  GroupList?: Group[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface ListUsersResponse {
  UserList?: User[] | null;
  NextToken?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface RegisterUserResponse {
  User?: User | null;
  UserInvitationUrl?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface RestoreAnalysisResponse {
  Status?: number | null;
  Arn?: string | null;
  AnalysisId?: string | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchAnalysesResponse {
  AnalysisSummaryList?: AnalysisSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchDashboardsResponse {
  DashboardSummaryList?: DashboardSummary[] | null;
  NextToken?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateAccountCustomizationResponse {
  Arn?: string | null;
  AwsAccountId?: string | null;
  Namespace?: string | null;
  AccountCustomization?: AccountCustomization | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateAccountSettingsResponse {
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateAnalysisResponse {
  Arn?: string | null;
  AnalysisId?: string | null;
  UpdateStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateAnalysisPermissionsResponse {
  AnalysisArn?: string | null;
  AnalysisId?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDashboardResponse {
  Arn?: string | null;
  VersionArn?: string | null;
  DashboardId?: string | null;
  CreationStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateDashboardPermissionsResponse {
  DashboardArn?: string | null;
  DashboardId?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDashboardPublishedVersionResponse {
  DashboardId?: string | null;
  DashboardArn?: string | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateDataSetResponse {
  Arn?: string | null;
  DataSetId?: string | null;
  IngestionArn?: string | null;
  IngestionId?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDataSetPermissionsResponse {
  DataSetArn?: string | null;
  DataSetId?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDataSourceResponse {
  Arn?: string | null;
  DataSourceId?: string | null;
  UpdateStatus?: ResourceStatus | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDataSourcePermissionsResponse {
  DataSourceArn?: string | null;
  DataSourceId?: string | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateGroupResponse {
  Group?: Group | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateIAMPolicyAssignmentResponse {
  AssignmentName?: string | null;
  AssignmentId?: string | null;
  PolicyArn?: string | null;
  Identities?: { [key: string]: string[] | null | undefined } | null;
  AssignmentStatus?: AssignmentStatus | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateTemplateResponse {
  TemplateId?: string | null;
  Arn?: string | null;
  VersionArn?: string | null;
  CreationStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateTemplateAliasResponse {
  TemplateAlias?: TemplateAlias | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateTemplatePermissionsResponse {
  TemplateId?: string | null;
  TemplateArn?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateThemeResponse {
  ThemeId?: string | null;
  Arn?: string | null;
  VersionArn?: string | null;
  CreationStatus?: ResourceStatus | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateThemeAliasResponse {
  ThemeAlias?: ThemeAlias | null;
  Status?: number | null;
  RequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateThemePermissionsResponse {
  ThemeId?: string | null;
  ThemeArn?: string | null;
  Permissions?: ResourcePermission[] | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateUserResponse {
  User?: User | null;
  RequestId?: string | null;
  Status?: number | null;
}

// refs: 5 - tags: input, named, interface, output
export interface AccountCustomization {
  DefaultTheme?: string | null;
}
function fromAccountCustomization(input?: AccountCustomization | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DefaultTheme: input["DefaultTheme"],
  }
}
function toAccountCustomization(root: jsonP.JSONValue): AccountCustomization {
  return jsonP.readObj({
    required: {},
    optional: {
      "DefaultTheme": "s",
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface
export interface Parameters {
  StringParameters?: StringParameter[] | null;
  IntegerParameters?: IntegerParameter[] | null;
  DecimalParameters?: DecimalParameter[] | null;
  DateTimeParameters?: DateTimeParameter[] | null;
}
function fromParameters(input?: Parameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StringParameters: input["StringParameters"]?.map(x => fromStringParameter(x)),
    IntegerParameters: input["IntegerParameters"]?.map(x => fromIntegerParameter(x)),
    DecimalParameters: input["DecimalParameters"]?.map(x => fromDecimalParameter(x)),
    DateTimeParameters: input["DateTimeParameters"]?.map(x => fromDateTimeParameter(x)),
  }
}

// refs: 4 - tags: input, named, interface
export interface StringParameter {
  Name: string;
  Values: string[];
}
function fromStringParameter(input?: StringParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 4 - tags: input, named, interface
export interface IntegerParameter {
  Name: string;
  Values: number[];
}
function fromIntegerParameter(input?: IntegerParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 4 - tags: input, named, interface
export interface DecimalParameter {
  Name: string;
  Values: number[];
}
function fromDecimalParameter(input?: DecimalParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 4 - tags: input, named, interface
export interface DateTimeParameter {
  Name: string;
  Values: (Date | number)[];
}
function fromDateTimeParameter(input?: DateTimeParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"]?.map(x => jsonP.serializeDate_unixTimestamp(x)),
  }
}

// refs: 28 - tags: input, named, interface, output
export interface ResourcePermission {
  Principal: string;
  Actions: string[];
}
function fromResourcePermission(input?: ResourcePermission | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Principal: input["Principal"],
    Actions: input["Actions"],
  }
}
function toResourcePermission(root: jsonP.JSONValue): ResourcePermission {
  return jsonP.readObj({
    required: {
      "Principal": "s",
      "Actions": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface AnalysisSourceEntity {
  SourceTemplate?: AnalysisSourceTemplate | null;
}
function fromAnalysisSourceEntity(input?: AnalysisSourceEntity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SourceTemplate: fromAnalysisSourceTemplate(input["SourceTemplate"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface AnalysisSourceTemplate {
  DataSetReferences: DataSetReference[];
  Arn: string;
}
function fromAnalysisSourceTemplate(input?: AnalysisSourceTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSetReferences: input["DataSetReferences"]?.map(x => fromDataSetReference(x)),
    Arn: input["Arn"],
  }
}

// refs: 6 - tags: input, named, interface
export interface DataSetReference {
  DataSetPlaceholder: string;
  DataSetArn: string;
}
function fromDataSetReference(input?: DataSetReference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSetPlaceholder: input["DataSetPlaceholder"],
    DataSetArn: input["DataSetArn"],
  }
}

// refs: 2 - tags: input, named, interface
export interface DashboardSourceEntity {
  SourceTemplate?: DashboardSourceTemplate | null;
}
function fromDashboardSourceEntity(input?: DashboardSourceEntity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SourceTemplate: fromDashboardSourceTemplate(input["SourceTemplate"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface DashboardSourceTemplate {
  DataSetReferences: DataSetReference[];
  Arn: string;
}
function fromDashboardSourceTemplate(input?: DashboardSourceTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSetReferences: input["DataSetReferences"]?.map(x => fromDataSetReference(x)),
    Arn: input["Arn"],
  }
}

// refs: 2 - tags: input, named, interface
export interface DashboardPublishOptions {
  AdHocFilteringOption?: AdHocFilteringOption | null;
  ExportToCSVOption?: ExportToCSVOption | null;
  SheetControlsOption?: SheetControlsOption | null;
}
function fromDashboardPublishOptions(input?: DashboardPublishOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdHocFilteringOption: fromAdHocFilteringOption(input["AdHocFilteringOption"]),
    ExportToCSVOption: fromExportToCSVOption(input["ExportToCSVOption"]),
    SheetControlsOption: fromSheetControlsOption(input["SheetControlsOption"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface AdHocFilteringOption {
  AvailabilityStatus?: DashboardBehavior | null;
}
function fromAdHocFilteringOption(input?: AdHocFilteringOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AvailabilityStatus: input["AvailabilityStatus"],
  }
}

// refs: 4 - tags: input, named, enum
export type DashboardBehavior =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ExportToCSVOption {
  AvailabilityStatus?: DashboardBehavior | null;
}
function fromExportToCSVOption(input?: ExportToCSVOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AvailabilityStatus: input["AvailabilityStatus"],
  }
}

// refs: 2 - tags: input, named, interface
export interface SheetControlsOption {
  VisibilityState?: DashboardUIState | null;
}
function fromSheetControlsOption(input?: SheetControlsOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VisibilityState: input["VisibilityState"],
  }
}

// refs: 2 - tags: input, named, enum
export type DashboardUIState =
| "EXPANDED"
| "COLLAPSED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface PhysicalTable {
  RelationalTable?: RelationalTable | null;
  CustomSql?: CustomSql | null;
  S3Source?: S3Source | null;
}
function fromPhysicalTable(input?: PhysicalTable | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RelationalTable: fromRelationalTable(input["RelationalTable"]),
    CustomSql: fromCustomSql(input["CustomSql"]),
    S3Source: fromS3Source(input["S3Source"]),
  }
}
function toPhysicalTable(root: jsonP.JSONValue): PhysicalTable {
  return jsonP.readObj({
    required: {},
    optional: {
      "RelationalTable": toRelationalTable,
      "CustomSql": toCustomSql,
      "S3Source": toS3Source,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RelationalTable {
  DataSourceArn: string;
  Catalog?: string | null;
  Schema?: string | null;
  Name: string;
  InputColumns: InputColumn[];
}
function fromRelationalTable(input?: RelationalTable | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceArn: input["DataSourceArn"],
    Catalog: input["Catalog"],
    Schema: input["Schema"],
    Name: input["Name"],
    InputColumns: input["InputColumns"]?.map(x => fromInputColumn(x)),
  }
}
function toRelationalTable(root: jsonP.JSONValue): RelationalTable {
  return jsonP.readObj({
    required: {
      "DataSourceArn": "s",
      "Name": "s",
      "InputColumns": [toInputColumn],
    },
    optional: {
      "Catalog": "s",
      "Schema": "s",
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface InputColumn {
  Name: string;
  Type: InputColumnDataType;
}
function fromInputColumn(input?: InputColumn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Type: input["Type"],
  }
}
function toInputColumn(root: jsonP.JSONValue): InputColumn {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<InputColumnDataType>(x),
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type InputColumnDataType =
| "STRING"
| "INTEGER"
| "DECIMAL"
| "DATETIME"
| "BIT"
| "BOOLEAN"
| "JSON"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface CustomSql {
  DataSourceArn: string;
  Name: string;
  SqlQuery: string;
  Columns?: InputColumn[] | null;
}
function fromCustomSql(input?: CustomSql | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceArn: input["DataSourceArn"],
    Name: input["Name"],
    SqlQuery: input["SqlQuery"],
    Columns: input["Columns"]?.map(x => fromInputColumn(x)),
  }
}
function toCustomSql(root: jsonP.JSONValue): CustomSql {
  return jsonP.readObj({
    required: {
      "DataSourceArn": "s",
      "Name": "s",
      "SqlQuery": "s",
    },
    optional: {
      "Columns": [toInputColumn],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3Source {
  DataSourceArn: string;
  UploadSettings?: UploadSettings | null;
  InputColumns: InputColumn[];
}
function fromS3Source(input?: S3Source | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceArn: input["DataSourceArn"],
    UploadSettings: fromUploadSettings(input["UploadSettings"]),
    InputColumns: input["InputColumns"]?.map(x => fromInputColumn(x)),
  }
}
function toS3Source(root: jsonP.JSONValue): S3Source {
  return jsonP.readObj({
    required: {
      "DataSourceArn": "s",
      "InputColumns": [toInputColumn],
    },
    optional: {
      "UploadSettings": toUploadSettings,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface UploadSettings {
  Format?: FileFormat | null;
  StartFromRow?: number | null;
  ContainsHeader?: boolean | null;
  TextQualifier?: TextQualifier | null;
  Delimiter?: string | null;
}
function fromUploadSettings(input?: UploadSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Format: input["Format"],
    StartFromRow: input["StartFromRow"],
    ContainsHeader: input["ContainsHeader"],
    TextQualifier: input["TextQualifier"],
    Delimiter: input["Delimiter"],
  }
}
function toUploadSettings(root: jsonP.JSONValue): UploadSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "Format": (x: jsonP.JSONValue) => cmnP.readEnum<FileFormat>(x),
      "StartFromRow": "n",
      "ContainsHeader": "b",
      "TextQualifier": (x: jsonP.JSONValue) => cmnP.readEnum<TextQualifier>(x),
      "Delimiter": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type FileFormat =
| "CSV"
| "TSV"
| "CLF"
| "ELF"
| "XLSX"
| "JSON"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type TextQualifier =
| "DOUBLE_QUOTE"
| "SINGLE_QUOTE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface LogicalTable {
  Alias: string;
  DataTransforms?: TransformOperation[] | null;
  Source: LogicalTableSource;
}
function fromLogicalTable(input?: LogicalTable | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Alias: input["Alias"],
    DataTransforms: input["DataTransforms"]?.map(x => fromTransformOperation(x)),
    Source: fromLogicalTableSource(input["Source"]),
  }
}
function toLogicalTable(root: jsonP.JSONValue): LogicalTable {
  return jsonP.readObj({
    required: {
      "Alias": "s",
      "Source": toLogicalTableSource,
    },
    optional: {
      "DataTransforms": [toTransformOperation],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TransformOperation {
  ProjectOperation?: ProjectOperation | null;
  FilterOperation?: FilterOperation | null;
  CreateColumnsOperation?: CreateColumnsOperation | null;
  RenameColumnOperation?: RenameColumnOperation | null;
  CastColumnTypeOperation?: CastColumnTypeOperation | null;
  TagColumnOperation?: TagColumnOperation | null;
}
function fromTransformOperation(input?: TransformOperation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ProjectOperation: fromProjectOperation(input["ProjectOperation"]),
    FilterOperation: fromFilterOperation(input["FilterOperation"]),
    CreateColumnsOperation: fromCreateColumnsOperation(input["CreateColumnsOperation"]),
    RenameColumnOperation: fromRenameColumnOperation(input["RenameColumnOperation"]),
    CastColumnTypeOperation: fromCastColumnTypeOperation(input["CastColumnTypeOperation"]),
    TagColumnOperation: fromTagColumnOperation(input["TagColumnOperation"]),
  }
}
function toTransformOperation(root: jsonP.JSONValue): TransformOperation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProjectOperation": toProjectOperation,
      "FilterOperation": toFilterOperation,
      "CreateColumnsOperation": toCreateColumnsOperation,
      "RenameColumnOperation": toRenameColumnOperation,
      "CastColumnTypeOperation": toCastColumnTypeOperation,
      "TagColumnOperation": toTagColumnOperation,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ProjectOperation {
  ProjectedColumns: string[];
}
function fromProjectOperation(input?: ProjectOperation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ProjectedColumns: input["ProjectedColumns"],
  }
}
function toProjectOperation(root: jsonP.JSONValue): ProjectOperation {
  return jsonP.readObj({
    required: {
      "ProjectedColumns": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface FilterOperation {
  ConditionExpression: string;
}
function fromFilterOperation(input?: FilterOperation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConditionExpression: input["ConditionExpression"],
  }
}
function toFilterOperation(root: jsonP.JSONValue): FilterOperation {
  return jsonP.readObj({
    required: {
      "ConditionExpression": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CreateColumnsOperation {
  Columns: CalculatedColumn[];
}
function fromCreateColumnsOperation(input?: CreateColumnsOperation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Columns: input["Columns"]?.map(x => fromCalculatedColumn(x)),
  }
}
function toCreateColumnsOperation(root: jsonP.JSONValue): CreateColumnsOperation {
  return jsonP.readObj({
    required: {
      "Columns": [toCalculatedColumn],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CalculatedColumn {
  ColumnName: string;
  ColumnId: string;
  Expression: string;
}
function fromCalculatedColumn(input?: CalculatedColumn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ColumnName: input["ColumnName"],
    ColumnId: input["ColumnId"],
    Expression: input["Expression"],
  }
}
function toCalculatedColumn(root: jsonP.JSONValue): CalculatedColumn {
  return jsonP.readObj({
    required: {
      "ColumnName": "s",
      "ColumnId": "s",
      "Expression": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RenameColumnOperation {
  ColumnName: string;
  NewColumnName: string;
}
function fromRenameColumnOperation(input?: RenameColumnOperation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ColumnName: input["ColumnName"],
    NewColumnName: input["NewColumnName"],
  }
}
function toRenameColumnOperation(root: jsonP.JSONValue): RenameColumnOperation {
  return jsonP.readObj({
    required: {
      "ColumnName": "s",
      "NewColumnName": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CastColumnTypeOperation {
  ColumnName: string;
  NewColumnType: ColumnDataType;
  Format?: string | null;
}
function fromCastColumnTypeOperation(input?: CastColumnTypeOperation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ColumnName: input["ColumnName"],
    NewColumnType: input["NewColumnType"],
    Format: input["Format"],
  }
}
function toCastColumnTypeOperation(root: jsonP.JSONValue): CastColumnTypeOperation {
  return jsonP.readObj({
    required: {
      "ColumnName": "s",
      "NewColumnType": (x: jsonP.JSONValue) => cmnP.readEnum<ColumnDataType>(x),
    },
    optional: {
      "Format": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ColumnDataType =
| "STRING"
| "INTEGER"
| "DECIMAL"
| "DATETIME"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface TagColumnOperation {
  ColumnName: string;
  Tags: ColumnTag[];
}
function fromTagColumnOperation(input?: TagColumnOperation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ColumnName: input["ColumnName"],
    Tags: input["Tags"]?.map(x => fromColumnTag(x)),
  }
}
function toTagColumnOperation(root: jsonP.JSONValue): TagColumnOperation {
  return jsonP.readObj({
    required: {
      "ColumnName": "s",
      "Tags": [toColumnTag],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ColumnTag {
  ColumnGeographicRole?: GeoSpatialDataRole | null;
  ColumnDescription?: ColumnDescription | null;
}
function fromColumnTag(input?: ColumnTag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ColumnGeographicRole: input["ColumnGeographicRole"],
    ColumnDescription: fromColumnDescription(input["ColumnDescription"]),
  }
}
function toColumnTag(root: jsonP.JSONValue): ColumnTag {
  return jsonP.readObj({
    required: {},
    optional: {
      "ColumnGeographicRole": (x: jsonP.JSONValue) => cmnP.readEnum<GeoSpatialDataRole>(x),
      "ColumnDescription": toColumnDescription,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type GeoSpatialDataRole =
| "COUNTRY"
| "STATE"
| "COUNTY"
| "CITY"
| "POSTCODE"
| "LONGITUDE"
| "LATITUDE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ColumnDescription {
  Text?: string | null;
}
function fromColumnDescription(input?: ColumnDescription | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Text: input["Text"],
  }
}
function toColumnDescription(root: jsonP.JSONValue): ColumnDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "Text": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface LogicalTableSource {
  JoinInstruction?: JoinInstruction | null;
  PhysicalTableId?: string | null;
}
function fromLogicalTableSource(input?: LogicalTableSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JoinInstruction: fromJoinInstruction(input["JoinInstruction"]),
    PhysicalTableId: input["PhysicalTableId"],
  }
}
function toLogicalTableSource(root: jsonP.JSONValue): LogicalTableSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "JoinInstruction": toJoinInstruction,
      "PhysicalTableId": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface JoinInstruction {
  LeftOperand: string;
  RightOperand: string;
  LeftJoinKeyProperties?: JoinKeyProperties | null;
  RightJoinKeyProperties?: JoinKeyProperties | null;
  Type: JoinType;
  OnClause: string;
}
function fromJoinInstruction(input?: JoinInstruction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LeftOperand: input["LeftOperand"],
    RightOperand: input["RightOperand"],
    LeftJoinKeyProperties: fromJoinKeyProperties(input["LeftJoinKeyProperties"]),
    RightJoinKeyProperties: fromJoinKeyProperties(input["RightJoinKeyProperties"]),
    Type: input["Type"],
    OnClause: input["OnClause"],
  }
}
function toJoinInstruction(root: jsonP.JSONValue): JoinInstruction {
  return jsonP.readObj({
    required: {
      "LeftOperand": "s",
      "RightOperand": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<JoinType>(x),
      "OnClause": "s",
    },
    optional: {
      "LeftJoinKeyProperties": toJoinKeyProperties,
      "RightJoinKeyProperties": toJoinKeyProperties,
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface JoinKeyProperties {
  UniqueKey?: boolean | null;
}
function fromJoinKeyProperties(input?: JoinKeyProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UniqueKey: input["UniqueKey"],
  }
}
function toJoinKeyProperties(root: jsonP.JSONValue): JoinKeyProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "UniqueKey": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type JoinType =
| "INNER"
| "OUTER"
| "LEFT"
| "RIGHT"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type DataSetImportMode =
| "SPICE"
| "DIRECT_QUERY"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ColumnGroup {
  GeoSpatialColumnGroup?: GeoSpatialColumnGroup | null;
}
function fromColumnGroup(input?: ColumnGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GeoSpatialColumnGroup: fromGeoSpatialColumnGroup(input["GeoSpatialColumnGroup"]),
  }
}
function toColumnGroup(root: jsonP.JSONValue): ColumnGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "GeoSpatialColumnGroup": toGeoSpatialColumnGroup,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface GeoSpatialColumnGroup {
  Name: string;
  CountryCode: GeoSpatialCountryCode;
  Columns: string[];
}
function fromGeoSpatialColumnGroup(input?: GeoSpatialColumnGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    CountryCode: input["CountryCode"],
    Columns: input["Columns"],
  }
}
function toGeoSpatialColumnGroup(root: jsonP.JSONValue): GeoSpatialColumnGroup {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "CountryCode": (x: jsonP.JSONValue) => cmnP.readEnum<GeoSpatialCountryCode>(x),
      "Columns": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type GeoSpatialCountryCode =
| "US"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface RowLevelPermissionDataSet {
  Namespace?: string | null;
  Arn: string;
  PermissionPolicy: RowLevelPermissionPolicy;
}
function fromRowLevelPermissionDataSet(input?: RowLevelPermissionDataSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Namespace: input["Namespace"],
    Arn: input["Arn"],
    PermissionPolicy: input["PermissionPolicy"],
  }
}
function toRowLevelPermissionDataSet(root: jsonP.JSONValue): RowLevelPermissionDataSet {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "PermissionPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<RowLevelPermissionPolicy>(x),
    },
    optional: {
      "Namespace": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type RowLevelPermissionPolicy =
| "GRANT_ACCESS"
| "DENY_ACCESS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ColumnLevelPermissionRule {
  Principals?: string[] | null;
  ColumnNames?: string[] | null;
}
function fromColumnLevelPermissionRule(input?: ColumnLevelPermissionRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Principals: input["Principals"],
    ColumnNames: input["ColumnNames"],
  }
}
function toColumnLevelPermissionRule(root: jsonP.JSONValue): ColumnLevelPermissionRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "Principals": ["s"],
      "ColumnNames": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DataSourceType =
| "ADOBE_ANALYTICS"
| "AMAZON_ELASTICSEARCH"
| "ATHENA"
| "AURORA"
| "AURORA_POSTGRESQL"
| "AWS_IOT_ANALYTICS"
| "GITHUB"
| "JIRA"
| "MARIADB"
| "MYSQL"
| "ORACLE"
| "POSTGRESQL"
| "PRESTO"
| "REDSHIFT"
| "S3"
| "SALESFORCE"
| "SERVICENOW"
| "SNOWFLAKE"
| "SPARK"
| "SQLSERVER"
| "TERADATA"
| "TWITTER"
| "TIMESTREAM"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface DataSourceParameters {
  AmazonElasticsearchParameters?: AmazonElasticsearchParameters | null;
  AthenaParameters?: AthenaParameters | null;
  AuroraParameters?: AuroraParameters | null;
  AuroraPostgreSqlParameters?: AuroraPostgreSqlParameters | null;
  AwsIotAnalyticsParameters?: AwsIotAnalyticsParameters | null;
  JiraParameters?: JiraParameters | null;
  MariaDbParameters?: MariaDbParameters | null;
  MySqlParameters?: MySqlParameters | null;
  OracleParameters?: OracleParameters | null;
  PostgreSqlParameters?: PostgreSqlParameters | null;
  PrestoParameters?: PrestoParameters | null;
  RdsParameters?: RdsParameters | null;
  RedshiftParameters?: RedshiftParameters | null;
  S3Parameters?: S3Parameters | null;
  ServiceNowParameters?: ServiceNowParameters | null;
  SnowflakeParameters?: SnowflakeParameters | null;
  SparkParameters?: SparkParameters | null;
  SqlServerParameters?: SqlServerParameters | null;
  TeradataParameters?: TeradataParameters | null;
  TwitterParameters?: TwitterParameters | null;
}
function fromDataSourceParameters(input?: DataSourceParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AmazonElasticsearchParameters: fromAmazonElasticsearchParameters(input["AmazonElasticsearchParameters"]),
    AthenaParameters: fromAthenaParameters(input["AthenaParameters"]),
    AuroraParameters: fromAuroraParameters(input["AuroraParameters"]),
    AuroraPostgreSqlParameters: fromAuroraPostgreSqlParameters(input["AuroraPostgreSqlParameters"]),
    AwsIotAnalyticsParameters: fromAwsIotAnalyticsParameters(input["AwsIotAnalyticsParameters"]),
    JiraParameters: fromJiraParameters(input["JiraParameters"]),
    MariaDbParameters: fromMariaDbParameters(input["MariaDbParameters"]),
    MySqlParameters: fromMySqlParameters(input["MySqlParameters"]),
    OracleParameters: fromOracleParameters(input["OracleParameters"]),
    PostgreSqlParameters: fromPostgreSqlParameters(input["PostgreSqlParameters"]),
    PrestoParameters: fromPrestoParameters(input["PrestoParameters"]),
    RdsParameters: fromRdsParameters(input["RdsParameters"]),
    RedshiftParameters: fromRedshiftParameters(input["RedshiftParameters"]),
    S3Parameters: fromS3Parameters(input["S3Parameters"]),
    ServiceNowParameters: fromServiceNowParameters(input["ServiceNowParameters"]),
    SnowflakeParameters: fromSnowflakeParameters(input["SnowflakeParameters"]),
    SparkParameters: fromSparkParameters(input["SparkParameters"]),
    SqlServerParameters: fromSqlServerParameters(input["SqlServerParameters"]),
    TeradataParameters: fromTeradataParameters(input["TeradataParameters"]),
    TwitterParameters: fromTwitterParameters(input["TwitterParameters"]),
  }
}
function toDataSourceParameters(root: jsonP.JSONValue): DataSourceParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmazonElasticsearchParameters": toAmazonElasticsearchParameters,
      "AthenaParameters": toAthenaParameters,
      "AuroraParameters": toAuroraParameters,
      "AuroraPostgreSqlParameters": toAuroraPostgreSqlParameters,
      "AwsIotAnalyticsParameters": toAwsIotAnalyticsParameters,
      "JiraParameters": toJiraParameters,
      "MariaDbParameters": toMariaDbParameters,
      "MySqlParameters": toMySqlParameters,
      "OracleParameters": toOracleParameters,
      "PostgreSqlParameters": toPostgreSqlParameters,
      "PrestoParameters": toPrestoParameters,
      "RdsParameters": toRdsParameters,
      "RedshiftParameters": toRedshiftParameters,
      "S3Parameters": toS3Parameters,
      "ServiceNowParameters": toServiceNowParameters,
      "SnowflakeParameters": toSnowflakeParameters,
      "SparkParameters": toSparkParameters,
      "SqlServerParameters": toSqlServerParameters,
      "TeradataParameters": toTeradataParameters,
      "TwitterParameters": toTwitterParameters,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface AmazonElasticsearchParameters {
  Domain: string;
}
function fromAmazonElasticsearchParameters(input?: AmazonElasticsearchParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Domain: input["Domain"],
  }
}
function toAmazonElasticsearchParameters(root: jsonP.JSONValue): AmazonElasticsearchParameters {
  return jsonP.readObj({
    required: {
      "Domain": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface AthenaParameters {
  WorkGroup?: string | null;
}
function fromAthenaParameters(input?: AthenaParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WorkGroup: input["WorkGroup"],
  }
}
function toAthenaParameters(root: jsonP.JSONValue): AthenaParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkGroup": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface AuroraParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromAuroraParameters(input?: AuroraParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toAuroraParameters(root: jsonP.JSONValue): AuroraParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface AuroraPostgreSqlParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromAuroraPostgreSqlParameters(input?: AuroraPostgreSqlParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toAuroraPostgreSqlParameters(root: jsonP.JSONValue): AuroraPostgreSqlParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface AwsIotAnalyticsParameters {
  DataSetName: string;
}
function fromAwsIotAnalyticsParameters(input?: AwsIotAnalyticsParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSetName: input["DataSetName"],
  }
}
function toAwsIotAnalyticsParameters(root: jsonP.JSONValue): AwsIotAnalyticsParameters {
  return jsonP.readObj({
    required: {
      "DataSetName": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface JiraParameters {
  SiteBaseUrl: string;
}
function fromJiraParameters(input?: JiraParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SiteBaseUrl: input["SiteBaseUrl"],
  }
}
function toJiraParameters(root: jsonP.JSONValue): JiraParameters {
  return jsonP.readObj({
    required: {
      "SiteBaseUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface MariaDbParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromMariaDbParameters(input?: MariaDbParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toMariaDbParameters(root: jsonP.JSONValue): MariaDbParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface MySqlParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromMySqlParameters(input?: MySqlParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toMySqlParameters(root: jsonP.JSONValue): MySqlParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface OracleParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromOracleParameters(input?: OracleParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toOracleParameters(root: jsonP.JSONValue): OracleParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface PostgreSqlParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromPostgreSqlParameters(input?: PostgreSqlParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toPostgreSqlParameters(root: jsonP.JSONValue): PostgreSqlParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface PrestoParameters {
  Host: string;
  Port: number;
  Catalog: string;
}
function fromPrestoParameters(input?: PrestoParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Catalog: input["Catalog"],
  }
}
function toPrestoParameters(root: jsonP.JSONValue): PrestoParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Catalog": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface RdsParameters {
  InstanceId: string;
  Database: string;
}
function fromRdsParameters(input?: RdsParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InstanceId: input["InstanceId"],
    Database: input["Database"],
  }
}
function toRdsParameters(root: jsonP.JSONValue): RdsParameters {
  return jsonP.readObj({
    required: {
      "InstanceId": "s",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface RedshiftParameters {
  Host?: string | null;
  Port?: number | null;
  Database: string;
  ClusterId?: string | null;
}
function fromRedshiftParameters(input?: RedshiftParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
    ClusterId: input["ClusterId"],
  }
}
function toRedshiftParameters(root: jsonP.JSONValue): RedshiftParameters {
  return jsonP.readObj({
    required: {
      "Database": "s",
    },
    optional: {
      "Host": "s",
      "Port": "n",
      "ClusterId": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface S3Parameters {
  ManifestFileLocation: ManifestFileLocation;
}
function fromS3Parameters(input?: S3Parameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ManifestFileLocation: fromManifestFileLocation(input["ManifestFileLocation"]),
  }
}
function toS3Parameters(root: jsonP.JSONValue): S3Parameters {
  return jsonP.readObj({
    required: {
      "ManifestFileLocation": toManifestFileLocation,
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface ManifestFileLocation {
  Bucket: string;
  Key: string;
}
function fromManifestFileLocation(input?: ManifestFileLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Bucket: input["Bucket"],
    Key: input["Key"],
  }
}
function toManifestFileLocation(root: jsonP.JSONValue): ManifestFileLocation {
  return jsonP.readObj({
    required: {
      "Bucket": "s",
      "Key": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface ServiceNowParameters {
  SiteBaseUrl: string;
}
function fromServiceNowParameters(input?: ServiceNowParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SiteBaseUrl: input["SiteBaseUrl"],
  }
}
function toServiceNowParameters(root: jsonP.JSONValue): ServiceNowParameters {
  return jsonP.readObj({
    required: {
      "SiteBaseUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface SnowflakeParameters {
  Host: string;
  Database: string;
  Warehouse: string;
}
function fromSnowflakeParameters(input?: SnowflakeParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Database: input["Database"],
    Warehouse: input["Warehouse"],
  }
}
function toSnowflakeParameters(root: jsonP.JSONValue): SnowflakeParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Database": "s",
      "Warehouse": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface SparkParameters {
  Host: string;
  Port: number;
}
function fromSparkParameters(input?: SparkParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
  }
}
function toSparkParameters(root: jsonP.JSONValue): SparkParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface SqlServerParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromSqlServerParameters(input?: SqlServerParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toSqlServerParameters(root: jsonP.JSONValue): SqlServerParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface TeradataParameters {
  Host: string;
  Port: number;
  Database: string;
}
function fromTeradataParameters(input?: TeradataParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Database: input["Database"],
  }
}
function toTeradataParameters(root: jsonP.JSONValue): TeradataParameters {
  return jsonP.readObj({
    required: {
      "Host": "s",
      "Port": "n",
      "Database": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface TwitterParameters {
  Query: string;
  MaxRows: number;
}
function fromTwitterParameters(input?: TwitterParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Query: input["Query"],
    MaxRows: input["MaxRows"],
  }
}
function toTwitterParameters(root: jsonP.JSONValue): TwitterParameters {
  return jsonP.readObj({
    required: {
      "Query": "s",
      "MaxRows": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface DataSourceCredentials {
  CredentialPair?: CredentialPair | null;
  CopySourceArn?: string | null;
}
function fromDataSourceCredentials(input?: DataSourceCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CredentialPair: fromCredentialPair(input["CredentialPair"]),
    CopySourceArn: input["CopySourceArn"],
  }
}

// refs: 2 - tags: input, named, interface
export interface CredentialPair {
  Username: string;
  Password: string;
  AlternateDataSourceParameters?: DataSourceParameters[] | null;
}
function fromCredentialPair(input?: CredentialPair | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Username: input["Username"],
    Password: input["Password"],
    AlternateDataSourceParameters: input["AlternateDataSourceParameters"]?.map(x => fromDataSourceParameters(x)),
  }
}

// refs: 4 - tags: input, named, interface, output
export interface VpcConnectionProperties {
  VpcConnectionArn: string;
}
function fromVpcConnectionProperties(input?: VpcConnectionProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VpcConnectionArn: input["VpcConnectionArn"],
  }
}
function toVpcConnectionProperties(root: jsonP.JSONValue): VpcConnectionProperties {
  return jsonP.readObj({
    required: {
      "VpcConnectionArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface SslProperties {
  DisableSsl?: boolean | null;
}
function fromSslProperties(input?: SslProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DisableSsl: input["DisableSsl"],
  }
}
function toSslProperties(root: jsonP.JSONValue): SslProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "DisableSsl": "b",
    },
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type AssignmentStatus =
| "ENABLED"
| "DRAFT"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type IdentityStore =
| "QUICKSIGHT"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface TemplateSourceEntity {
  SourceAnalysis?: TemplateSourceAnalysis | null;
  SourceTemplate?: TemplateSourceTemplate | null;
}
function fromTemplateSourceEntity(input?: TemplateSourceEntity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SourceAnalysis: fromTemplateSourceAnalysis(input["SourceAnalysis"]),
    SourceTemplate: fromTemplateSourceTemplate(input["SourceTemplate"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface TemplateSourceAnalysis {
  Arn: string;
  DataSetReferences: DataSetReference[];
}
function fromTemplateSourceAnalysis(input?: TemplateSourceAnalysis | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Arn: input["Arn"],
    DataSetReferences: input["DataSetReferences"]?.map(x => fromDataSetReference(x)),
  }
}

// refs: 2 - tags: input, named, interface
export interface TemplateSourceTemplate {
  Arn: string;
}
function fromTemplateSourceTemplate(input?: TemplateSourceTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Arn: input["Arn"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface ThemeConfiguration {
  DataColorPalette?: DataColorPalette | null;
  UIColorPalette?: UIColorPalette | null;
  Sheet?: SheetStyle | null;
}
function fromThemeConfiguration(input?: ThemeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataColorPalette: fromDataColorPalette(input["DataColorPalette"]),
    UIColorPalette: fromUIColorPalette(input["UIColorPalette"]),
    Sheet: fromSheetStyle(input["Sheet"]),
  }
}
function toThemeConfiguration(root: jsonP.JSONValue): ThemeConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataColorPalette": toDataColorPalette,
      "UIColorPalette": toUIColorPalette,
      "Sheet": toSheetStyle,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DataColorPalette {
  Colors?: string[] | null;
  MinMaxGradient?: string[] | null;
  EmptyFillColor?: string | null;
}
function fromDataColorPalette(input?: DataColorPalette | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Colors: input["Colors"],
    MinMaxGradient: input["MinMaxGradient"],
    EmptyFillColor: input["EmptyFillColor"],
  }
}
function toDataColorPalette(root: jsonP.JSONValue): DataColorPalette {
  return jsonP.readObj({
    required: {},
    optional: {
      "Colors": ["s"],
      "MinMaxGradient": ["s"],
      "EmptyFillColor": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface UIColorPalette {
  PrimaryForeground?: string | null;
  PrimaryBackground?: string | null;
  SecondaryForeground?: string | null;
  SecondaryBackground?: string | null;
  Accent?: string | null;
  AccentForeground?: string | null;
  Danger?: string | null;
  DangerForeground?: string | null;
  Warning?: string | null;
  WarningForeground?: string | null;
  Success?: string | null;
  SuccessForeground?: string | null;
  Dimension?: string | null;
  DimensionForeground?: string | null;
  Measure?: string | null;
  MeasureForeground?: string | null;
}
function fromUIColorPalette(input?: UIColorPalette | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PrimaryForeground: input["PrimaryForeground"],
    PrimaryBackground: input["PrimaryBackground"],
    SecondaryForeground: input["SecondaryForeground"],
    SecondaryBackground: input["SecondaryBackground"],
    Accent: input["Accent"],
    AccentForeground: input["AccentForeground"],
    Danger: input["Danger"],
    DangerForeground: input["DangerForeground"],
    Warning: input["Warning"],
    WarningForeground: input["WarningForeground"],
    Success: input["Success"],
    SuccessForeground: input["SuccessForeground"],
    Dimension: input["Dimension"],
    DimensionForeground: input["DimensionForeground"],
    Measure: input["Measure"],
    MeasureForeground: input["MeasureForeground"],
  }
}
function toUIColorPalette(root: jsonP.JSONValue): UIColorPalette {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrimaryForeground": "s",
      "PrimaryBackground": "s",
      "SecondaryForeground": "s",
      "SecondaryBackground": "s",
      "Accent": "s",
      "AccentForeground": "s",
      "Danger": "s",
      "DangerForeground": "s",
      "Warning": "s",
      "WarningForeground": "s",
      "Success": "s",
      "SuccessForeground": "s",
      "Dimension": "s",
      "DimensionForeground": "s",
      "Measure": "s",
      "MeasureForeground": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SheetStyle {
  Tile?: TileStyle | null;
  TileLayout?: TileLayoutStyle | null;
}
function fromSheetStyle(input?: SheetStyle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Tile: fromTileStyle(input["Tile"]),
    TileLayout: fromTileLayoutStyle(input["TileLayout"]),
  }
}
function toSheetStyle(root: jsonP.JSONValue): SheetStyle {
  return jsonP.readObj({
    required: {},
    optional: {
      "Tile": toTileStyle,
      "TileLayout": toTileLayoutStyle,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TileStyle {
  Border?: BorderStyle | null;
}
function fromTileStyle(input?: TileStyle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Border: fromBorderStyle(input["Border"]),
  }
}
function toTileStyle(root: jsonP.JSONValue): TileStyle {
  return jsonP.readObj({
    required: {},
    optional: {
      "Border": toBorderStyle,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface BorderStyle {
  Show?: boolean | null;
}
function fromBorderStyle(input?: BorderStyle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Show: input["Show"],
  }
}
function toBorderStyle(root: jsonP.JSONValue): BorderStyle {
  return jsonP.readObj({
    required: {},
    optional: {
      "Show": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TileLayoutStyle {
  Gutter?: GutterStyle | null;
  Margin?: MarginStyle | null;
}
function fromTileLayoutStyle(input?: TileLayoutStyle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Gutter: fromGutterStyle(input["Gutter"]),
    Margin: fromMarginStyle(input["Margin"]),
  }
}
function toTileLayoutStyle(root: jsonP.JSONValue): TileLayoutStyle {
  return jsonP.readObj({
    required: {},
    optional: {
      "Gutter": toGutterStyle,
      "Margin": toMarginStyle,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface GutterStyle {
  Show?: boolean | null;
}
function fromGutterStyle(input?: GutterStyle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Show: input["Show"],
  }
}
function toGutterStyle(root: jsonP.JSONValue): GutterStyle {
  return jsonP.readObj({
    required: {},
    optional: {
      "Show": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface MarginStyle {
  Show?: boolean | null;
}
function fromMarginStyle(input?: MarginStyle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Show: input["Show"],
  }
}
function toMarginStyle(root: jsonP.JSONValue): MarginStyle {
  return jsonP.readObj({
    required: {},
    optional: {
      "Show": "b",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type EmbeddingIdentityType =
| "IAM"
| "QUICKSIGHT"
| "ANONYMOUS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ThemeType =
| "QUICKSIGHT"
| "CUSTOM"
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type IdentityType =
| "IAM"
| "QUICKSIGHT"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type UserRole =
| "ADMIN"
| "AUTHOR"
| "READER"
| "RESTRICTED_AUTHOR"
| "RESTRICTED_READER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AnalysisSearchFilter {
  Operator?: FilterOperator | null;
  Name?: AnalysisFilterAttribute | null;
  Value?: string | null;
}
function fromAnalysisSearchFilter(input?: AnalysisSearchFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Operator: input["Operator"],
    Name: input["Name"],
    Value: input["Value"],
  }
}

// refs: 2 - tags: input, named, enum
export type FilterOperator =
| "StringEquals"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type AnalysisFilterAttribute =
| "QUICKSIGHT_USER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DashboardSearchFilter {
  Operator: FilterOperator;
  Name?: DashboardFilterAttribute | null;
  Value?: string | null;
}
function fromDashboardSearchFilter(input?: DashboardSearchFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Operator: input["Operator"],
    Name: input["Name"],
    Value: input["Value"],
  }
}

// refs: 1 - tags: input, named, enum
export type DashboardFilterAttribute =
| "QUICKSIGHT_USER"
| cmnP.UnexpectedEnumValue;

// refs: 21 - tags: output, named, enum
export type ResourceStatus =
| "CREATION_IN_PROGRESS"
| "CREATION_SUCCESSFUL"
| "CREATION_FAILED"
| "UPDATE_IN_PROGRESS"
| "UPDATE_SUCCESSFUL"
| "UPDATE_FAILED"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface Group {
  Arn?: string | null;
  GroupName?: string | null;
  Description?: string | null;
  PrincipalId?: string | null;
}
function toGroup(root: jsonP.JSONValue): Group {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "GroupName": "s",
      "Description": "s",
      "PrincipalId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface GroupMember {
  Arn?: string | null;
  MemberName?: string | null;
}
function toGroupMember(root: jsonP.JSONValue): GroupMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "MemberName": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type IngestionStatus =
| "INITIALIZED"
| "QUEUED"
| "RUNNING"
| "FAILED"
| "COMPLETED"
| "CANCELLED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type NamespaceStatus =
| "CREATED"
| "CREATING"
| "DELETING"
| "RETRYABLE_FAILURE"
| "NON_RETRYABLE_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface TemplateAlias {
  AliasName?: string | null;
  Arn?: string | null;
  TemplateVersionNumber?: number | null;
}
function toTemplateAlias(root: jsonP.JSONValue): TemplateAlias {
  return jsonP.readObj({
    required: {},
    optional: {
      "AliasName": "s",
      "Arn": "s",
      "TemplateVersionNumber": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ThemeAlias {
  Arn?: string | null;
  AliasName?: string | null;
  ThemeVersionNumber?: number | null;
}
function toThemeAlias(root: jsonP.JSONValue): ThemeAlias {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "AliasName": "s",
      "ThemeVersionNumber": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccountSettings {
  AccountName?: string | null;
  Edition?: Edition | null;
  DefaultNamespace?: string | null;
  NotificationEmail?: string | null;
}
function toAccountSettings(root: jsonP.JSONValue): AccountSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountName": "s",
      "Edition": (x: jsonP.JSONValue) => cmnP.readEnum<Edition>(x),
      "DefaultNamespace": "s",
      "NotificationEmail": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Edition =
| "STANDARD"
| "ENTERPRISE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Analysis {
  AnalysisId?: string | null;
  Arn?: string | null;
  Name?: string | null;
  Status?: ResourceStatus | null;
  Errors?: AnalysisError[] | null;
  DataSetArns?: string[] | null;
  ThemeArn?: string | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
  Sheets?: Sheet[] | null;
}
function toAnalysis(root: jsonP.JSONValue): Analysis {
  return jsonP.readObj({
    required: {},
    optional: {
      "AnalysisId": "s",
      "Arn": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "Errors": [toAnalysisError],
      "DataSetArns": ["s"],
      "ThemeArn": "s",
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
      "Sheets": [toSheet],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AnalysisError {
  Type?: AnalysisErrorType | null;
  Message?: string | null;
}
function toAnalysisError(root: jsonP.JSONValue): AnalysisError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<AnalysisErrorType>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AnalysisErrorType =
| "ACCESS_DENIED"
| "SOURCE_NOT_FOUND"
| "DATA_SET_NOT_FOUND"
| "INTERNAL_FAILURE"
| "PARAMETER_VALUE_INCOMPATIBLE"
| "PARAMETER_TYPE_INVALID"
| "PARAMETER_NOT_FOUND"
| "COLUMN_TYPE_MISMATCH"
| "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
| "COLUMN_REPLACEMENT_MISSING"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface Sheet {
  SheetId?: string | null;
  Name?: string | null;
}
function toSheet(root: jsonP.JSONValue): Sheet {
  return jsonP.readObj({
    required: {},
    optional: {
      "SheetId": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Dashboard {
  DashboardId?: string | null;
  Arn?: string | null;
  Name?: string | null;
  Version?: DashboardVersion | null;
  CreatedTime?: Date | number | null;
  LastPublishedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
}
function toDashboard(root: jsonP.JSONValue): Dashboard {
  return jsonP.readObj({
    required: {},
    optional: {
      "DashboardId": "s",
      "Arn": "s",
      "Name": "s",
      "Version": toDashboardVersion,
      "CreatedTime": "d",
      "LastPublishedTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DashboardVersion {
  CreatedTime?: Date | number | null;
  Errors?: DashboardError[] | null;
  VersionNumber?: number | null;
  Status?: ResourceStatus | null;
  Arn?: string | null;
  SourceEntityArn?: string | null;
  DataSetArns?: string[] | null;
  Description?: string | null;
  ThemeArn?: string | null;
  Sheets?: Sheet[] | null;
}
function toDashboardVersion(root: jsonP.JSONValue): DashboardVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedTime": "d",
      "Errors": [toDashboardError],
      "VersionNumber": "n",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "Arn": "s",
      "SourceEntityArn": "s",
      "DataSetArns": ["s"],
      "Description": "s",
      "ThemeArn": "s",
      "Sheets": [toSheet],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DashboardError {
  Type?: DashboardErrorType | null;
  Message?: string | null;
}
function toDashboardError(root: jsonP.JSONValue): DashboardError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DashboardErrorType>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DashboardErrorType =
| "ACCESS_DENIED"
| "SOURCE_NOT_FOUND"
| "DATA_SET_NOT_FOUND"
| "INTERNAL_FAILURE"
| "PARAMETER_VALUE_INCOMPATIBLE"
| "PARAMETER_TYPE_INVALID"
| "PARAMETER_NOT_FOUND"
| "COLUMN_TYPE_MISMATCH"
| "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
| "COLUMN_REPLACEMENT_MISSING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DataSet {
  Arn?: string | null;
  DataSetId?: string | null;
  Name?: string | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
  PhysicalTableMap?: { [key: string]: PhysicalTable | null | undefined } | null;
  LogicalTableMap?: { [key: string]: LogicalTable | null | undefined } | null;
  OutputColumns?: OutputColumn[] | null;
  ImportMode?: DataSetImportMode | null;
  ConsumedSpiceCapacityInBytes?: number | null;
  ColumnGroups?: ColumnGroup[] | null;
  RowLevelPermissionDataSet?: RowLevelPermissionDataSet | null;
  ColumnLevelPermissionRules?: ColumnLevelPermissionRule[] | null;
}
function toDataSet(root: jsonP.JSONValue): DataSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "DataSetId": "s",
      "Name": "s",
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
      "PhysicalTableMap": x => jsonP.readMap(String, toPhysicalTable, x),
      "LogicalTableMap": x => jsonP.readMap(String, toLogicalTable, x),
      "OutputColumns": [toOutputColumn],
      "ImportMode": (x: jsonP.JSONValue) => cmnP.readEnum<DataSetImportMode>(x),
      "ConsumedSpiceCapacityInBytes": "n",
      "ColumnGroups": [toColumnGroup],
      "RowLevelPermissionDataSet": toRowLevelPermissionDataSet,
      "ColumnLevelPermissionRules": [toColumnLevelPermissionRule],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OutputColumn {
  Name?: string | null;
  Description?: string | null;
  Type?: ColumnDataType | null;
}
function toOutputColumn(root: jsonP.JSONValue): OutputColumn {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Description": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ColumnDataType>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DataSource {
  Arn?: string | null;
  DataSourceId?: string | null;
  Name?: string | null;
  Type?: DataSourceType | null;
  Status?: ResourceStatus | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
  DataSourceParameters?: DataSourceParameters | null;
  AlternateDataSourceParameters?: DataSourceParameters[] | null;
  VpcConnectionProperties?: VpcConnectionProperties | null;
  SslProperties?: SslProperties | null;
  ErrorInfo?: DataSourceErrorInfo | null;
}
function toDataSource(root: jsonP.JSONValue): DataSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "DataSourceId": "s",
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
      "DataSourceParameters": toDataSourceParameters,
      "AlternateDataSourceParameters": [toDataSourceParameters],
      "VpcConnectionProperties": toVpcConnectionProperties,
      "SslProperties": toSslProperties,
      "ErrorInfo": toDataSourceErrorInfo,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DataSourceErrorInfo {
  Type?: DataSourceErrorInfoType | null;
  Message?: string | null;
}
function toDataSourceErrorInfo(root: jsonP.JSONValue): DataSourceErrorInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceErrorInfoType>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DataSourceErrorInfoType =
| "ACCESS_DENIED"
| "COPY_SOURCE_NOT_FOUND"
| "TIMEOUT"
| "ENGINE_VERSION_NOT_SUPPORTED"
| "UNKNOWN_HOST"
| "GENERIC_SQL_FAILURE"
| "CONFLICT"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface IAMPolicyAssignment {
  AwsAccountId?: string | null;
  AssignmentId?: string | null;
  AssignmentName?: string | null;
  PolicyArn?: string | null;
  Identities?: { [key: string]: string[] | null | undefined } | null;
  AssignmentStatus?: AssignmentStatus | null;
}
function toIAMPolicyAssignment(root: jsonP.JSONValue): IAMPolicyAssignment {
  return jsonP.readObj({
    required: {},
    optional: {
      "AwsAccountId": "s",
      "AssignmentId": "s",
      "AssignmentName": "s",
      "PolicyArn": "s",
      "Identities": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "AssignmentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AssignmentStatus>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Ingestion {
  Arn: string;
  IngestionId?: string | null;
  IngestionStatus: IngestionStatus;
  ErrorInfo?: ErrorInfo | null;
  RowInfo?: RowInfo | null;
  QueueInfo?: QueueInfo | null;
  CreatedTime: Date | number;
  IngestionTimeInSeconds?: number | null;
  IngestionSizeInBytes?: number | null;
  RequestSource?: IngestionRequestSource | null;
  RequestType?: IngestionRequestType | null;
}
function toIngestion(root: jsonP.JSONValue): Ingestion {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "IngestionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<IngestionStatus>(x),
      "CreatedTime": "d",
    },
    optional: {
      "IngestionId": "s",
      "ErrorInfo": toErrorInfo,
      "RowInfo": toRowInfo,
      "QueueInfo": toQueueInfo,
      "IngestionTimeInSeconds": "n",
      "IngestionSizeInBytes": "n",
      "RequestSource": (x: jsonP.JSONValue) => cmnP.readEnum<IngestionRequestSource>(x),
      "RequestType": (x: jsonP.JSONValue) => cmnP.readEnum<IngestionRequestType>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ErrorInfo {
  Type?: IngestionErrorType | null;
  Message?: string | null;
}
function toErrorInfo(root: jsonP.JSONValue): ErrorInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<IngestionErrorType>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type IngestionErrorType =
| "FAILURE_TO_ASSUME_ROLE"
| "INGESTION_SUPERSEDED"
| "INGESTION_CANCELED"
| "DATA_SET_DELETED"
| "DATA_SET_NOT_SPICE"
| "S3_UPLOADED_FILE_DELETED"
| "S3_MANIFEST_ERROR"
| "DATA_TOLERANCE_EXCEPTION"
| "SPICE_TABLE_NOT_FOUND"
| "DATA_SET_SIZE_LIMIT_EXCEEDED"
| "ROW_SIZE_LIMIT_EXCEEDED"
| "ACCOUNT_CAPACITY_LIMIT_EXCEEDED"
| "CUSTOMER_ERROR"
| "DATA_SOURCE_NOT_FOUND"
| "IAM_ROLE_NOT_AVAILABLE"
| "CONNECTION_FAILURE"
| "SQL_TABLE_NOT_FOUND"
| "PERMISSION_DENIED"
| "SSL_CERTIFICATE_VALIDATION_FAILURE"
| "OAUTH_TOKEN_FAILURE"
| "SOURCE_API_LIMIT_EXCEEDED_FAILURE"
| "PASSWORD_AUTHENTICATION_FAILURE"
| "SQL_SCHEMA_MISMATCH_ERROR"
| "INVALID_DATE_FORMAT"
| "INVALID_DATAPREP_SYNTAX"
| "SOURCE_RESOURCE_LIMIT_EXCEEDED"
| "SQL_INVALID_PARAMETER_VALUE"
| "QUERY_TIMEOUT"
| "SQL_NUMERIC_OVERFLOW"
| "UNRESOLVABLE_HOST"
| "UNROUTABLE_HOST"
| "SQL_EXCEPTION"
| "S3_FILE_INACCESSIBLE"
| "IOT_FILE_NOT_FOUND"
| "IOT_DATA_SET_FILE_EMPTY"
| "INVALID_DATA_SOURCE_CONFIG"
| "DATA_SOURCE_AUTH_FAILED"
| "DATA_SOURCE_CONNECTION_FAILED"
| "FAILURE_TO_PROCESS_JSON_FILE"
| "INTERNAL_SERVICE_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface RowInfo {
  RowsIngested?: number | null;
  RowsDropped?: number | null;
}
function toRowInfo(root: jsonP.JSONValue): RowInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "RowsIngested": "n",
      "RowsDropped": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface QueueInfo {
  WaitingOnIngestion: string;
  QueuedIngestion: string;
}
function toQueueInfo(root: jsonP.JSONValue): QueueInfo {
  return jsonP.readObj({
    required: {
      "WaitingOnIngestion": "s",
      "QueuedIngestion": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type IngestionRequestSource =
| "MANUAL"
| "SCHEDULED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type IngestionRequestType =
| "INITIAL_INGESTION"
| "EDIT"
| "INCREMENTAL_REFRESH"
| "FULL_REFRESH"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface NamespaceInfoV2 {
  Name?: string | null;
  Arn?: string | null;
  CapacityRegion?: string | null;
  CreationStatus?: NamespaceStatus | null;
  IdentityStore?: IdentityStore | null;
  NamespaceError?: NamespaceError | null;
}
function toNamespaceInfoV2(root: jsonP.JSONValue): NamespaceInfoV2 {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
      "CapacityRegion": "s",
      "CreationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<NamespaceStatus>(x),
      "IdentityStore": (x: jsonP.JSONValue) => cmnP.readEnum<IdentityStore>(x),
      "NamespaceError": toNamespaceError,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface NamespaceError {
  Type?: NamespaceErrorType | null;
  Message?: string | null;
}
function toNamespaceError(root: jsonP.JSONValue): NamespaceError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<NamespaceErrorType>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type NamespaceErrorType =
| "PERMISSION_DENIED"
| "INTERNAL_SERVICE_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Template {
  Arn?: string | null;
  Name?: string | null;
  Version?: TemplateVersion | null;
  TemplateId?: string | null;
  LastUpdatedTime?: Date | number | null;
  CreatedTime?: Date | number | null;
}
function toTemplate(root: jsonP.JSONValue): Template {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Version": toTemplateVersion,
      "TemplateId": "s",
      "LastUpdatedTime": "d",
      "CreatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateVersion {
  CreatedTime?: Date | number | null;
  Errors?: TemplateError[] | null;
  VersionNumber?: number | null;
  Status?: ResourceStatus | null;
  DataSetConfigurations?: DataSetConfiguration[] | null;
  Description?: string | null;
  SourceEntityArn?: string | null;
  ThemeArn?: string | null;
  Sheets?: Sheet[] | null;
}
function toTemplateVersion(root: jsonP.JSONValue): TemplateVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedTime": "d",
      "Errors": [toTemplateError],
      "VersionNumber": "n",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "DataSetConfigurations": [toDataSetConfiguration],
      "Description": "s",
      "SourceEntityArn": "s",
      "ThemeArn": "s",
      "Sheets": [toSheet],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateError {
  Type?: TemplateErrorType | null;
  Message?: string | null;
}
function toTemplateError(root: jsonP.JSONValue): TemplateError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateErrorType>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type TemplateErrorType =
| "SOURCE_NOT_FOUND"
| "DATA_SET_NOT_FOUND"
| "INTERNAL_FAILURE"
| "ACCESS_DENIED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DataSetConfiguration {
  Placeholder?: string | null;
  DataSetSchema?: DataSetSchema | null;
  ColumnGroupSchemaList?: ColumnGroupSchema[] | null;
}
function toDataSetConfiguration(root: jsonP.JSONValue): DataSetConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Placeholder": "s",
      "DataSetSchema": toDataSetSchema,
      "ColumnGroupSchemaList": [toColumnGroupSchema],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataSetSchema {
  ColumnSchemaList?: ColumnSchema[] | null;
}
function toDataSetSchema(root: jsonP.JSONValue): DataSetSchema {
  return jsonP.readObj({
    required: {},
    optional: {
      "ColumnSchemaList": [toColumnSchema],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ColumnSchema {
  Name?: string | null;
  DataType?: string | null;
  GeographicRole?: string | null;
}
function toColumnSchema(root: jsonP.JSONValue): ColumnSchema {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "DataType": "s",
      "GeographicRole": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ColumnGroupSchema {
  Name?: string | null;
  ColumnGroupColumnSchemaList?: ColumnGroupColumnSchema[] | null;
}
function toColumnGroupSchema(root: jsonP.JSONValue): ColumnGroupSchema {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "ColumnGroupColumnSchemaList": [toColumnGroupColumnSchema],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ColumnGroupColumnSchema {
  Name?: string | null;
}
function toColumnGroupColumnSchema(root: jsonP.JSONValue): ColumnGroupColumnSchema {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Theme {
  Arn?: string | null;
  Name?: string | null;
  ThemeId?: string | null;
  Version?: ThemeVersion | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
  Type?: ThemeType | null;
}
function toTheme(root: jsonP.JSONValue): Theme {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "ThemeId": "s",
      "Version": toThemeVersion,
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ThemeType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThemeVersion {
  VersionNumber?: number | null;
  Arn?: string | null;
  Description?: string | null;
  BaseThemeId?: string | null;
  CreatedTime?: Date | number | null;
  Configuration?: ThemeConfiguration | null;
  Errors?: ThemeError[] | null;
  Status?: ResourceStatus | null;
}
function toThemeVersion(root: jsonP.JSONValue): ThemeVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "VersionNumber": "n",
      "Arn": "s",
      "Description": "s",
      "BaseThemeId": "s",
      "CreatedTime": "d",
      "Configuration": toThemeConfiguration,
      "Errors": [toThemeError],
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThemeError {
  Type?: ThemeErrorType | null;
  Message?: string | null;
}
function toThemeError(root: jsonP.JSONValue): ThemeError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ThemeErrorType>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ThemeErrorType =
| "INTERNAL_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface User {
  Arn?: string | null;
  UserName?: string | null;
  Email?: string | null;
  Role?: UserRole | null;
  IdentityType?: IdentityType | null;
  Active?: boolean | null;
  PrincipalId?: string | null;
  CustomPermissionsName?: string | null;
}
function toUser(root: jsonP.JSONValue): User {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "UserName": "s",
      "Email": "s",
      "Role": (x: jsonP.JSONValue) => cmnP.readEnum<UserRole>(x),
      "IdentityType": (x: jsonP.JSONValue) => cmnP.readEnum<IdentityType>(x),
      "Active": "b",
      "PrincipalId": "s",
      "CustomPermissionsName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AnalysisSummary {
  Arn?: string | null;
  AnalysisId?: string | null;
  Name?: string | null;
  Status?: ResourceStatus | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
}
function toAnalysisSummary(root: jsonP.JSONValue): AnalysisSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "AnalysisId": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DashboardVersionSummary {
  Arn?: string | null;
  CreatedTime?: Date | number | null;
  VersionNumber?: number | null;
  Status?: ResourceStatus | null;
  SourceEntityArn?: string | null;
  Description?: string | null;
}
function toDashboardVersionSummary(root: jsonP.JSONValue): DashboardVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreatedTime": "d",
      "VersionNumber": "n",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "SourceEntityArn": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DashboardSummary {
  Arn?: string | null;
  DashboardId?: string | null;
  Name?: string | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
  PublishedVersionNumber?: number | null;
  LastPublishedTime?: Date | number | null;
}
function toDashboardSummary(root: jsonP.JSONValue): DashboardSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "DashboardId": "s",
      "Name": "s",
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
      "PublishedVersionNumber": "n",
      "LastPublishedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataSetSummary {
  Arn?: string | null;
  DataSetId?: string | null;
  Name?: string | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
  ImportMode?: DataSetImportMode | null;
  RowLevelPermissionDataSet?: RowLevelPermissionDataSet | null;
  ColumnLevelPermissionRulesApplied?: boolean | null;
}
function toDataSetSummary(root: jsonP.JSONValue): DataSetSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "DataSetId": "s",
      "Name": "s",
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
      "ImportMode": (x: jsonP.JSONValue) => cmnP.readEnum<DataSetImportMode>(x),
      "RowLevelPermissionDataSet": toRowLevelPermissionDataSet,
      "ColumnLevelPermissionRulesApplied": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IAMPolicyAssignmentSummary {
  AssignmentName?: string | null;
  AssignmentStatus?: AssignmentStatus | null;
}
function toIAMPolicyAssignmentSummary(root: jsonP.JSONValue): IAMPolicyAssignmentSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssignmentName": "s",
      "AssignmentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AssignmentStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActiveIAMPolicyAssignment {
  AssignmentName?: string | null;
  PolicyArn?: string | null;
}
function toActiveIAMPolicyAssignment(root: jsonP.JSONValue): ActiveIAMPolicyAssignment {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssignmentName": "s",
      "PolicyArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateVersionSummary {
  Arn?: string | null;
  VersionNumber?: number | null;
  CreatedTime?: Date | number | null;
  Status?: ResourceStatus | null;
  Description?: string | null;
}
function toTemplateVersionSummary(root: jsonP.JSONValue): TemplateVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "VersionNumber": "n",
      "CreatedTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateSummary {
  Arn?: string | null;
  TemplateId?: string | null;
  Name?: string | null;
  LatestVersionNumber?: number | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
}
function toTemplateSummary(root: jsonP.JSONValue): TemplateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "TemplateId": "s",
      "Name": "s",
      "LatestVersionNumber": "n",
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThemeVersionSummary {
  VersionNumber?: number | null;
  Arn?: string | null;
  Description?: string | null;
  CreatedTime?: Date | number | null;
  Status?: ResourceStatus | null;
}
function toThemeVersionSummary(root: jsonP.JSONValue): ThemeVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "VersionNumber": "n",
      "Arn": "s",
      "Description": "s",
      "CreatedTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThemeSummary {
  Arn?: string | null;
  Name?: string | null;
  ThemeId?: string | null;
  LatestVersionNumber?: number | null;
  CreatedTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
}
function toThemeSummary(root: jsonP.JSONValue): ThemeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "ThemeId": "s",
      "LatestVersionNumber": "n",
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}
