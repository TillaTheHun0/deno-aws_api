// Autogenerated API client for: Amazon CloudWatch Application Insights

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class ApplicationInsights {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ApplicationInsights.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-11-25",
    "endpointPrefix": "applicationinsights",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Application Insights",
    "serviceFullName": "Amazon CloudWatch Application Insights",
    "serviceId": "Application Insights",
    "signatureVersion": "v4",
    "signingName": "applicationinsights",
    "targetPrefix": "EC2WindowsBarleyService",
    "uid": "application-insights-2018-11-25"
  };

  async createApplication(
    {abortSignal, ...params}: RequestConfig & s.CreateApplicationRequest,
  ): Promise<s.CreateApplicationResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      OpsCenterEnabled: params["OpsCenterEnabled"],
      CWEMonitorEnabled: params["CWEMonitorEnabled"],
      OpsItemSNSTopicArn: params["OpsItemSNSTopicArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfo": toApplicationInfo,
      },
    }, await resp.json());
  }

  async createComponent(
    {abortSignal, ...params}: RequestConfig & s.CreateComponentRequest,
  ): Promise<s.CreateComponentResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      ResourceList: params["ResourceList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createLogPattern(
    {abortSignal, ...params}: RequestConfig & s.CreateLogPatternRequest,
  ): Promise<s.CreateLogPatternResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
      Pattern: params["Pattern"],
      Rank: params["Rank"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LogPattern": toLogPattern,
        "ResourceGroupName": "s",
      },
    }, await resp.json());
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationRequest,
  ): Promise<s.DeleteApplicationResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteComponent(
    {abortSignal, ...params}: RequestConfig & s.DeleteComponentRequest,
  ): Promise<s.DeleteComponentResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLogPattern(
    {abortSignal, ...params}: RequestConfig & s.DeleteLogPatternRequest,
  ): Promise<s.DeleteLogPatternResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeApplication(
    {abortSignal, ...params}: RequestConfig & s.DescribeApplicationRequest,
  ): Promise<s.DescribeApplicationResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfo": toApplicationInfo,
      },
    }, await resp.json());
  }

  async describeComponent(
    {abortSignal, ...params}: RequestConfig & s.DescribeComponentRequest,
  ): Promise<s.DescribeComponentResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationComponent": toApplicationComponent,
        "ResourceList": ["s"],
      },
    }, await resp.json());
  }

  async describeComponentConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeComponentConfigurationRequest,
  ): Promise<s.DescribeComponentConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComponentConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Monitor": "b",
        "Tier": (x: jsonP.JSONValue) => cmnP.readEnum<s.Tier>(x),
        "ComponentConfiguration": "s",
      },
    }, await resp.json());
  }

  async describeComponentConfigurationRecommendation(
    {abortSignal, ...params}: RequestConfig & s.DescribeComponentConfigurationRecommendationRequest,
  ): Promise<s.DescribeComponentConfigurationRecommendationResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      Tier: params["Tier"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComponentConfigurationRecommendation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComponentConfiguration": "s",
      },
    }, await resp.json());
  }

  async describeLogPattern(
    {abortSignal, ...params}: RequestConfig & s.DescribeLogPatternRequest,
  ): Promise<s.DescribeLogPatternResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPattern": toLogPattern,
      },
    }, await resp.json());
  }

  async describeObservation(
    {abortSignal, ...params}: RequestConfig & s.DescribeObservationRequest,
  ): Promise<s.DescribeObservationResponse> {
    const body: jsonP.JSONObject = {
      ObservationId: params["ObservationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeObservation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Observation": toObservation,
      },
    }, await resp.json());
  }

  async describeProblem(
    {abortSignal, ...params}: RequestConfig & s.DescribeProblemRequest,
  ): Promise<s.DescribeProblemResponse> {
    const body: jsonP.JSONObject = {
      ProblemId: params["ProblemId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProblem",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Problem": toProblem,
      },
    }, await resp.json());
  }

  async describeProblemObservations(
    {abortSignal, ...params}: RequestConfig & s.DescribeProblemObservationsRequest,
  ): Promise<s.DescribeProblemObservationsResponse> {
    const body: jsonP.JSONObject = {
      ProblemId: params["ProblemId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProblemObservations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RelatedObservations": toRelatedObservations,
      },
    }, await resp.json());
  }

  async listApplications(
    {abortSignal, ...params}: RequestConfig & s.ListApplicationsRequest = {},
  ): Promise<s.ListApplicationsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfoList": [toApplicationInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listComponents(
    {abortSignal, ...params}: RequestConfig & s.ListComponentsRequest,
  ): Promise<s.ListComponentsResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListComponents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationComponentList": [toApplicationComponent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConfigurationHistory(
    {abortSignal, ...params}: RequestConfig & s.ListConfigurationHistoryRequest = {},
  ): Promise<s.ListConfigurationHistoryResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      EventStatus: params["EventStatus"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConfigurationHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventList": [toConfigurationEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLogPatternSets(
    {abortSignal, ...params}: RequestConfig & s.ListLogPatternSetsRequest,
  ): Promise<s.ListLogPatternSetsResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLogPatternSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPatternSets": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLogPatterns(
    {abortSignal, ...params}: RequestConfig & s.ListLogPatternsRequest,
  ): Promise<s.ListLogPatternsResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLogPatterns",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPatterns": [toLogPattern],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProblems(
    {abortSignal, ...params}: RequestConfig & s.ListProblemsRequest = {},
  ): Promise<s.ListProblemsResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProblems",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProblemList": [toProblem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & s.UpdateApplicationRequest,
  ): Promise<s.UpdateApplicationResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      OpsCenterEnabled: params["OpsCenterEnabled"],
      CWEMonitorEnabled: params["CWEMonitorEnabled"],
      OpsItemSNSTopicArn: params["OpsItemSNSTopicArn"],
      RemoveSNSTopic: params["RemoveSNSTopic"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfo": toApplicationInfo,
      },
    }, await resp.json());
  }

  async updateComponent(
    {abortSignal, ...params}: RequestConfig & s.UpdateComponentRequest,
  ): Promise<s.UpdateComponentResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      NewComponentName: params["NewComponentName"],
      ResourceList: params["ResourceList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateComponentConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateComponentConfigurationRequest,
  ): Promise<s.UpdateComponentConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      Monitor: params["Monitor"],
      Tier: params["Tier"],
      ComponentConfiguration: params["ComponentConfiguration"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateComponentConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateLogPattern(
    {abortSignal, ...params}: RequestConfig & s.UpdateLogPatternRequest,
  ): Promise<s.UpdateLogPatternResponse> {
    const body: jsonP.JSONObject = {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
      Pattern: params["Pattern"],
      Rank: params["Rank"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPattern": toLogPattern,
      },
    }, await resp.json());
  }

}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function toApplicationInfo(root: jsonP.JSONValue): s.ApplicationInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceGroupName": "s",
      "LifeCycle": "s",
      "OpsItemSNSTopicArn": "s",
      "OpsCenterEnabled": "b",
      "CWEMonitorEnabled": "b",
      "Remarks": "s",
    },
  }, root);
}

function toLogPattern(root: jsonP.JSONValue): s.LogPattern {
  return jsonP.readObj({
    required: {},
    optional: {
      "PatternSetName": "s",
      "PatternName": "s",
      "Pattern": "s",
      "Rank": "n",
    },
  }, root);
}

function toApplicationComponent(root: jsonP.JSONValue): s.ApplicationComponent {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComponentName": "s",
      "ComponentRemarks": "s",
      "ResourceType": "s",
      "OsType": (x: jsonP.JSONValue) => cmnP.readEnum<s.OsType>(x),
      "Tier": (x: jsonP.JSONValue) => cmnP.readEnum<s.Tier>(x),
      "Monitor": "b",
      "DetectedWorkload": x => jsonP.readMap(x => cmnP.readEnumReq<s.Tier>(x), y => jsonP.readMap(String, String, y)!, x),
    },
  }, root);
}

function toObservation(root: jsonP.JSONValue): s.Observation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "StartTime": "d",
      "EndTime": "d",
      "SourceType": "s",
      "SourceARN": "s",
      "LogGroup": "s",
      "LineTime": "d",
      "LogText": "s",
      "LogFilter": (x: jsonP.JSONValue) => cmnP.readEnum<s.LogFilter>(x),
      "MetricNamespace": "s",
      "MetricName": "s",
      "Unit": "s",
      "Value": "n",
      "CloudWatchEventId": "s",
      "CloudWatchEventSource": (x: jsonP.JSONValue) => cmnP.readEnum<s.CloudWatchEventSource>(x),
      "CloudWatchEventDetailType": "s",
      "HealthEventArn": "s",
      "HealthService": "s",
      "HealthEventTypeCode": "s",
      "HealthEventTypeCategory": "s",
      "HealthEventDescription": "s",
      "CodeDeployDeploymentId": "s",
      "CodeDeployDeploymentGroup": "s",
      "CodeDeployState": "s",
      "CodeDeployApplication": "s",
      "CodeDeployInstanceGroupId": "s",
      "Ec2State": "s",
      "RdsEventCategories": "s",
      "RdsEventMessage": "s",
      "S3EventName": "s",
      "StatesExecutionArn": "s",
      "StatesArn": "s",
      "StatesStatus": "s",
      "StatesInput": "s",
      "EbsEvent": "s",
      "EbsResult": "s",
      "EbsCause": "s",
      "EbsRequestId": "s",
      "XRayFaultPercent": "n",
      "XRayThrottlePercent": "n",
      "XRayErrorPercent": "n",
      "XRayRequestCount": "n",
      "XRayRequestAverageLatency": "n",
      "XRayNodeName": "s",
      "XRayNodeType": "s",
    },
  }, root);
}

function toProblem(root: jsonP.JSONValue): s.Problem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Title": "s",
      "Insights": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      "AffectedResource": "s",
      "StartTime": "d",
      "EndTime": "d",
      "SeverityLevel": (x: jsonP.JSONValue) => cmnP.readEnum<s.SeverityLevel>(x),
      "ResourceGroupName": "s",
      "Feedback": x => jsonP.readMap(x => cmnP.readEnumReq<s.FeedbackKey>(x), y => cmnP.readEnum<s.FeedbackValue>(y), x),
    },
  }, root);
}

function toRelatedObservations(root: jsonP.JSONValue): s.RelatedObservations {
  return jsonP.readObj({
    required: {},
    optional: {
      "ObservationList": [toObservation],
    },
  }, root);
}

function toConfigurationEvent(root: jsonP.JSONValue): s.ConfigurationEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "MonitoredResourceARN": "s",
      "EventStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationEventStatus>(x),
      "EventResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationEventResourceType>(x),
      "EventTime": "d",
      "EventDetail": "s",
      "EventResourceName": "s",
    },
  }, root);
}
