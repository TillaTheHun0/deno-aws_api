// Autogenerated API client for: Amazon Pinpoint SMS and Voice Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class PinpointSMSVoice {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(PinpointSMSVoice.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-09-05",
    "endpointPrefix": "sms-voice.pinpoint",
    "signingName": "sms-voice",
    "serviceAbbreviation": "Pinpoint SMS Voice",
    "serviceFullName": "Amazon Pinpoint SMS and Voice Service",
    "serviceId": "Pinpoint SMS Voice",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "pinpoint-sms-voice-2018-09-05",
    "signatureVersion": "v4"
  };

  async createConfigurationSet(
    {abortSignal, ...params}: RequestConfig & CreateConfigurationSetRequest = {},
  ): Promise<CreateConfigurationSetResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationSetName: params["ConfigurationSetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationSet",
      requestUri: "/v1/sms-voice/configuration-sets",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & CreateConfigurationSetEventDestinationRequest,
  ): Promise<CreateConfigurationSetEventDestinationResponse> {
    const body: jsonP.JSONObject = {
      EventDestination: fromEventDestinationDefinition(params["EventDestination"]),
      EventDestinationName: params["EventDestinationName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationSetEventDestination",
      requestUri: cmnP.encodePath`/v1/sms-voice/configuration-sets/${params["ConfigurationSetName"]}/event-destinations`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteConfigurationSet(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationSetRequest,
  ): Promise<DeleteConfigurationSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/sms-voice/configuration-sets/${params["ConfigurationSetName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationSetEventDestinationRequest,
  ): Promise<DeleteConfigurationSetEventDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationSetEventDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/sms-voice/configuration-sets/${params["ConfigurationSetName"]}/event-destinations/${params["EventDestinationName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getConfigurationSetEventDestinations(
    {abortSignal, ...params}: RequestConfig & GetConfigurationSetEventDestinationsRequest,
  ): Promise<GetConfigurationSetEventDestinationsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfigurationSetEventDestinations",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/sms-voice/configuration-sets/${params["ConfigurationSetName"]}/event-destinations`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventDestinations": [toEventDestination],
      },
    }, await resp.json());
  }

  async listConfigurationSets(
    {abortSignal, ...params}: RequestConfig & ListConfigurationSetsRequest = {},
  ): Promise<ListConfigurationSetsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigurationSets",
      method: "GET",
      requestUri: "/v1/sms-voice/configuration-sets",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationSets": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async sendVoiceMessage(
    {abortSignal, ...params}: RequestConfig & SendVoiceMessageRequest = {},
  ): Promise<SendVoiceMessageResponse> {
    const body: jsonP.JSONObject = {
      CallerId: params["CallerId"],
      ConfigurationSetName: params["ConfigurationSetName"],
      Content: fromVoiceMessageContent(params["Content"]),
      DestinationPhoneNumber: params["DestinationPhoneNumber"],
      OriginationPhoneNumber: params["OriginationPhoneNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendVoiceMessage",
      requestUri: "/v1/sms-voice/voice/message",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async updateConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & UpdateConfigurationSetEventDestinationRequest,
  ): Promise<UpdateConfigurationSetEventDestinationResponse> {
    const body: jsonP.JSONObject = {
      EventDestination: fromEventDestinationDefinition(params["EventDestination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfigurationSetEventDestination",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/sms-voice/configuration-sets/${params["ConfigurationSetName"]}/event-destinations/${params["EventDestinationName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateConfigurationSetRequest {
  ConfigurationSetName?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateConfigurationSetEventDestinationRequest {
  ConfigurationSetName: string;
  EventDestination?: EventDestinationDefinition | null;
  EventDestinationName?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationSetRequest {
  ConfigurationSetName: string;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationSetEventDestinationRequest {
  ConfigurationSetName: string;
  EventDestinationName: string;
}

// refs: 1 - tags: named, input
export interface GetConfigurationSetEventDestinationsRequest {
  ConfigurationSetName: string;
}

// refs: 1 - tags: named, input
export interface ListConfigurationSetsRequest {
  NextToken?: string | null;
  PageSize?: string | null;
}

// refs: 1 - tags: named, input
export interface SendVoiceMessageRequest {
  CallerId?: string | null;
  ConfigurationSetName?: string | null;
  Content?: VoiceMessageContent | null;
  DestinationPhoneNumber?: string | null;
  OriginationPhoneNumber?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateConfigurationSetEventDestinationRequest {
  ConfigurationSetName: string;
  EventDestination?: EventDestinationDefinition | null;
  EventDestinationName: string;
}

// refs: 1 - tags: named, output
export interface CreateConfigurationSetResponse {
}

// refs: 1 - tags: named, output
export interface CreateConfigurationSetEventDestinationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteConfigurationSetResponse {
}

// refs: 1 - tags: named, output
export interface DeleteConfigurationSetEventDestinationResponse {
}

// refs: 1 - tags: named, output
export interface GetConfigurationSetEventDestinationsResponse {
  EventDestinations?: EventDestination[] | null;
}

// refs: 1 - tags: named, output
export interface ListConfigurationSetsResponse {
  ConfigurationSets?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SendVoiceMessageResponse {
  MessageId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateConfigurationSetEventDestinationResponse {
}

// refs: 2 - tags: input, named, interface
export interface EventDestinationDefinition {
  CloudWatchLogsDestination?: CloudWatchLogsDestination | null;
  Enabled?: boolean | null;
  KinesisFirehoseDestination?: KinesisFirehoseDestination | null;
  MatchingEventTypes?: EventType[] | null;
  SnsDestination?: SnsDestination | null;
}
function fromEventDestinationDefinition(input?: EventDestinationDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CloudWatchLogsDestination: fromCloudWatchLogsDestination(input["CloudWatchLogsDestination"]),
    Enabled: input["Enabled"],
    KinesisFirehoseDestination: fromKinesisFirehoseDestination(input["KinesisFirehoseDestination"]),
    MatchingEventTypes: input["MatchingEventTypes"],
    SnsDestination: fromSnsDestination(input["SnsDestination"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface CloudWatchLogsDestination {
  IamRoleArn?: string | null;
  LogGroupArn?: string | null;
}
function fromCloudWatchLogsDestination(input?: CloudWatchLogsDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IamRoleArn: input["IamRoleArn"],
    LogGroupArn: input["LogGroupArn"],
  }
}
function toCloudWatchLogsDestination(root: jsonP.JSONValue): CloudWatchLogsDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "IamRoleArn": "s",
      "LogGroupArn": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface KinesisFirehoseDestination {
  DeliveryStreamArn?: string | null;
  IamRoleArn?: string | null;
}
function fromKinesisFirehoseDestination(input?: KinesisFirehoseDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeliveryStreamArn: input["DeliveryStreamArn"],
    IamRoleArn: input["IamRoleArn"],
  }
}
function toKinesisFirehoseDestination(root: jsonP.JSONValue): KinesisFirehoseDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeliveryStreamArn": "s",
      "IamRoleArn": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type EventType =
| "INITIATED_CALL"
| "RINGING"
| "ANSWERED"
| "COMPLETED_CALL"
| "BUSY"
| "FAILED"
| "NO_ANSWER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SnsDestination {
  TopicArn?: string | null;
}
function fromSnsDestination(input?: SnsDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TopicArn: input["TopicArn"],
  }
}
function toSnsDestination(root: jsonP.JSONValue): SnsDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "TopicArn": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface VoiceMessageContent {
  CallInstructionsMessage?: CallInstructionsMessageType | null;
  PlainTextMessage?: PlainTextMessageType | null;
  SSMLMessage?: SSMLMessageType | null;
}
function fromVoiceMessageContent(input?: VoiceMessageContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CallInstructionsMessage: fromCallInstructionsMessageType(input["CallInstructionsMessage"]),
    PlainTextMessage: fromPlainTextMessageType(input["PlainTextMessage"]),
    SSMLMessage: fromSSMLMessageType(input["SSMLMessage"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface CallInstructionsMessageType {
  Text?: string | null;
}
function fromCallInstructionsMessageType(input?: CallInstructionsMessageType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Text: input["Text"],
  }
}

// refs: 1 - tags: input, named, interface
export interface PlainTextMessageType {
  LanguageCode?: string | null;
  Text?: string | null;
  VoiceId?: string | null;
}
function fromPlainTextMessageType(input?: PlainTextMessageType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LanguageCode: input["LanguageCode"],
    Text: input["Text"],
    VoiceId: input["VoiceId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface SSMLMessageType {
  LanguageCode?: string | null;
  Text?: string | null;
  VoiceId?: string | null;
}
function fromSSMLMessageType(input?: SSMLMessageType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LanguageCode: input["LanguageCode"],
    Text: input["Text"],
    VoiceId: input["VoiceId"],
  }
}

// refs: 1 - tags: output, named, interface
export interface EventDestination {
  CloudWatchLogsDestination?: CloudWatchLogsDestination | null;
  Enabled?: boolean | null;
  KinesisFirehoseDestination?: KinesisFirehoseDestination | null;
  MatchingEventTypes?: EventType[] | null;
  Name?: string | null;
  SnsDestination?: SnsDestination | null;
}
function toEventDestination(root: jsonP.JSONValue): EventDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "CloudWatchLogsDestination": toCloudWatchLogsDestination,
      "Enabled": "b",
      "KinesisFirehoseDestination": toKinesisFirehoseDestination,
      "MatchingEventTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<EventType>(x)],
      "Name": "s",
      "SnsDestination": toSnsDestination,
    },
  }, root);
}
