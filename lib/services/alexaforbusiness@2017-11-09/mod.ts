// Autogenerated API client for: Alexa For Business

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class AlexaForBusiness {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AlexaForBusiness.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-11-09",
    "endpointPrefix": "a4b",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Alexa For Business",
    "serviceId": "Alexa For Business",
    "signatureVersion": "v4",
    "targetPrefix": "AlexaForBusiness",
    "uid": "alexaforbusiness-2017-11-09"
  };

  async approveSkill(
    {abortSignal, ...params}: RequestConfig & ApproveSkillRequest,
  ): Promise<ApproveSkillResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ApproveSkill",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateContactWithAddressBook(
    {abortSignal, ...params}: RequestConfig & AssociateContactWithAddressBookRequest,
  ): Promise<AssociateContactWithAddressBookResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateContactWithAddressBook",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDeviceWithNetworkProfile(
    {abortSignal, ...params}: RequestConfig & AssociateDeviceWithNetworkProfileRequest,
  ): Promise<AssociateDeviceWithNetworkProfileResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDeviceWithNetworkProfile",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDeviceWithRoom(
    {abortSignal, ...params}: RequestConfig & AssociateDeviceWithRoomRequest = {},
  ): Promise<AssociateDeviceWithRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDeviceWithRoom",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateSkillGroupWithRoom(
    {abortSignal, ...params}: RequestConfig & AssociateSkillGroupWithRoomRequest = {},
  ): Promise<AssociateSkillGroupWithRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSkillGroupWithRoom",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateSkillWithSkillGroup(
    {abortSignal, ...params}: RequestConfig & AssociateSkillWithSkillGroupRequest,
  ): Promise<AssociateSkillWithSkillGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSkillWithSkillGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateSkillWithUsers(
    {abortSignal, ...params}: RequestConfig & AssociateSkillWithUsersRequest,
  ): Promise<AssociateSkillWithUsersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSkillWithUsers",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAddressBook(
    {abortSignal, ...params}: RequestConfig & CreateAddressBookRequest,
  ): Promise<CreateAddressBookResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAddressBook",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AddressBookArn": "s",
      },
    }, await resp.json());
  }

  async createBusinessReportSchedule(
    {abortSignal, ...params}: RequestConfig & CreateBusinessReportScheduleRequest,
  ): Promise<CreateBusinessReportScheduleResponse> {
    const body: JSONObject = {...params,
    ContentRange: fromBusinessReportContentRange(params["ContentRange"]),
    Recurrence: fromBusinessReportRecurrence(params["Recurrence"]),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBusinessReportSchedule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ScheduleArn": "s",
      },
    }, await resp.json());
  }

  async createConferenceProvider(
    {abortSignal, ...params}: RequestConfig & CreateConferenceProviderRequest,
  ): Promise<CreateConferenceProviderResponse> {
    const body: JSONObject = {...params,
    IPDialIn: fromIPDialIn(params["IPDialIn"]),
    PSTNDialIn: fromPSTNDialIn(params["PSTNDialIn"]),
    MeetingSetting: fromMeetingSetting(params["MeetingSetting"]),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConferenceProvider",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ConferenceProviderArn": "s",
      },
    }, await resp.json());
  }

  async createContact(
    {abortSignal, ...params}: RequestConfig & CreateContactRequest,
  ): Promise<CreateContactResponse> {
    const body: JSONObject = {...params,
    PhoneNumbers: params["PhoneNumbers"]?.map(x => fromPhoneNumber(x)),
    SipAddresses: params["SipAddresses"]?.map(x => fromSipAddress(x)),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContact",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ContactArn": "s",
      },
    }, await resp.json());
  }

  async createGatewayGroup(
    {abortSignal, ...params}: RequestConfig & CreateGatewayGroupRequest,
  ): Promise<CreateGatewayGroupResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGatewayGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayGroupArn": "s",
      },
    }, await resp.json());
  }

  async createNetworkProfile(
    {abortSignal, ...params}: RequestConfig & CreateNetworkProfileRequest,
  ): Promise<CreateNetworkProfileResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNetworkProfile",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NetworkProfileArn": "s",
      },
    }, await resp.json());
  }

  async createProfile(
    {abortSignal, ...params}: RequestConfig & CreateProfileRequest,
  ): Promise<CreateProfileResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    MeetingRoomConfiguration: fromCreateMeetingRoomConfiguration(params["MeetingRoomConfiguration"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProfile",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ProfileArn": "s",
      },
    }, await resp.json());
  }

  async createRoom(
    {abortSignal, ...params}: RequestConfig & CreateRoomRequest,
  ): Promise<CreateRoomResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoom",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RoomArn": "s",
      },
    }, await resp.json());
  }

  async createSkillGroup(
    {abortSignal, ...params}: RequestConfig & CreateSkillGroupRequest,
  ): Promise<CreateSkillGroupResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSkillGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SkillGroupArn": "s",
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & CreateUserRequest,
  ): Promise<CreateUserResponse> {
    const body: JSONObject = {...params,
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserArn": "s",
      },
    }, await resp.json());
  }

  async deleteAddressBook(
    {abortSignal, ...params}: RequestConfig & DeleteAddressBookRequest,
  ): Promise<DeleteAddressBookResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAddressBook",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteBusinessReportSchedule(
    {abortSignal, ...params}: RequestConfig & DeleteBusinessReportScheduleRequest,
  ): Promise<DeleteBusinessReportScheduleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBusinessReportSchedule",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteConferenceProvider(
    {abortSignal, ...params}: RequestConfig & DeleteConferenceProviderRequest,
  ): Promise<DeleteConferenceProviderResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConferenceProvider",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteContact(
    {abortSignal, ...params}: RequestConfig & DeleteContactRequest,
  ): Promise<DeleteContactResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteContact",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDevice(
    {abortSignal, ...params}: RequestConfig & DeleteDeviceRequest,
  ): Promise<DeleteDeviceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDevice",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDeviceUsageData(
    {abortSignal, ...params}: RequestConfig & DeleteDeviceUsageDataRequest,
  ): Promise<DeleteDeviceUsageDataResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDeviceUsageData",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGatewayGroup(
    {abortSignal, ...params}: RequestConfig & DeleteGatewayGroupRequest,
  ): Promise<DeleteGatewayGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGatewayGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteNetworkProfile(
    {abortSignal, ...params}: RequestConfig & DeleteNetworkProfileRequest,
  ): Promise<DeleteNetworkProfileResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNetworkProfile",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProfile(
    {abortSignal, ...params}: RequestConfig & DeleteProfileRequest = {},
  ): Promise<DeleteProfileResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfile",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRoom(
    {abortSignal, ...params}: RequestConfig & DeleteRoomRequest = {},
  ): Promise<DeleteRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRoom",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRoomSkillParameter(
    {abortSignal, ...params}: RequestConfig & DeleteRoomSkillParameterRequest,
  ): Promise<DeleteRoomSkillParameterResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRoomSkillParameter",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSkillAuthorization(
    {abortSignal, ...params}: RequestConfig & DeleteSkillAuthorizationRequest,
  ): Promise<DeleteSkillAuthorizationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSkillAuthorization",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSkillGroup(
    {abortSignal, ...params}: RequestConfig & DeleteSkillGroupRequest = {},
  ): Promise<DeleteSkillGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSkillGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<DeleteUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUser",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateContactFromAddressBook(
    {abortSignal, ...params}: RequestConfig & DisassociateContactFromAddressBookRequest,
  ): Promise<DisassociateContactFromAddressBookResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateContactFromAddressBook",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDeviceFromRoom(
    {abortSignal, ...params}: RequestConfig & DisassociateDeviceFromRoomRequest = {},
  ): Promise<DisassociateDeviceFromRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDeviceFromRoom",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateSkillFromSkillGroup(
    {abortSignal, ...params}: RequestConfig & DisassociateSkillFromSkillGroupRequest,
  ): Promise<DisassociateSkillFromSkillGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSkillFromSkillGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateSkillFromUsers(
    {abortSignal, ...params}: RequestConfig & DisassociateSkillFromUsersRequest,
  ): Promise<DisassociateSkillFromUsersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSkillFromUsers",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateSkillGroupFromRoom(
    {abortSignal, ...params}: RequestConfig & DisassociateSkillGroupFromRoomRequest = {},
  ): Promise<DisassociateSkillGroupFromRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSkillGroupFromRoom",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async forgetSmartHomeAppliances(
    {abortSignal, ...params}: RequestConfig & ForgetSmartHomeAppliancesRequest,
  ): Promise<ForgetSmartHomeAppliancesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ForgetSmartHomeAppliances",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAddressBook(
    {abortSignal, ...params}: RequestConfig & GetAddressBookRequest,
  ): Promise<GetAddressBookResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAddressBook",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AddressBook": toAddressBook,
      },
    }, await resp.json());
  }

  async getConferencePreference(
    {abortSignal, ...params}: RequestConfig & GetConferencePreferenceRequest = {},
  ): Promise<GetConferencePreferenceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConferencePreference",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Preference": toConferencePreference,
      },
    }, await resp.json());
  }

  async getConferenceProvider(
    {abortSignal, ...params}: RequestConfig & GetConferenceProviderRequest,
  ): Promise<GetConferenceProviderResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConferenceProvider",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ConferenceProvider": toConferenceProvider,
      },
    }, await resp.json());
  }

  async getContact(
    {abortSignal, ...params}: RequestConfig & GetContactRequest,
  ): Promise<GetContactResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetContact",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Contact": toContact,
      },
    }, await resp.json());
  }

  async getDevice(
    {abortSignal, ...params}: RequestConfig & GetDeviceRequest = {},
  ): Promise<GetDeviceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevice",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Device": toDevice,
      },
    }, await resp.json());
  }

  async getGateway(
    {abortSignal, ...params}: RequestConfig & GetGatewayRequest,
  ): Promise<GetGatewayResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGateway",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Gateway": toGateway,
      },
    }, await resp.json());
  }

  async getGatewayGroup(
    {abortSignal, ...params}: RequestConfig & GetGatewayGroupRequest,
  ): Promise<GetGatewayGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGatewayGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayGroup": toGatewayGroup,
      },
    }, await resp.json());
  }

  async getInvitationConfiguration(
    {abortSignal, ...params}: RequestConfig & GetInvitationConfigurationRequest = {},
  ): Promise<GetInvitationConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInvitationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationName": "s",
        "ContactEmail": "s",
        "PrivateSkillIds": ["s"],
      },
    }, await resp.json());
  }

  async getNetworkProfile(
    {abortSignal, ...params}: RequestConfig & GetNetworkProfileRequest,
  ): Promise<GetNetworkProfileResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetNetworkProfile",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NetworkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async getProfile(
    {abortSignal, ...params}: RequestConfig & GetProfileRequest = {},
  ): Promise<GetProfileResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProfile",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Profile": toProfile,
      },
    }, await resp.json());
  }

  async getRoom(
    {abortSignal, ...params}: RequestConfig & GetRoomRequest = {},
  ): Promise<GetRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRoom",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async getRoomSkillParameter(
    {abortSignal, ...params}: RequestConfig & GetRoomSkillParameterRequest,
  ): Promise<GetRoomSkillParameterResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRoomSkillParameter",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RoomSkillParameter": toRoomSkillParameter,
      },
    }, await resp.json());
  }

  async getSkillGroup(
    {abortSignal, ...params}: RequestConfig & GetSkillGroupRequest = {},
  ): Promise<GetSkillGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSkillGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SkillGroup": toSkillGroup,
      },
    }, await resp.json());
  }

  async listBusinessReportSchedules(
    {abortSignal, ...params}: RequestConfig & ListBusinessReportSchedulesRequest = {},
  ): Promise<ListBusinessReportSchedulesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBusinessReportSchedules",
    });
    return prt.readObj({
      required: {},
      optional: {
        "BusinessReportSchedules": [toBusinessReportSchedule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConferenceProviders(
    {abortSignal, ...params}: RequestConfig & ListConferenceProvidersRequest = {},
  ): Promise<ListConferenceProvidersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConferenceProviders",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ConferenceProviders": [toConferenceProvider],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeviceEvents(
    {abortSignal, ...params}: RequestConfig & ListDeviceEventsRequest,
  ): Promise<ListDeviceEventsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDeviceEvents",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DeviceEvents": [toDeviceEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGatewayGroups(
    {abortSignal, ...params}: RequestConfig & ListGatewayGroupsRequest = {},
  ): Promise<ListGatewayGroupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGatewayGroups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayGroups": [toGatewayGroupSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGateways(
    {abortSignal, ...params}: RequestConfig & ListGatewaysRequest = {},
  ): Promise<ListGatewaysResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGateways",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Gateways": [toGatewaySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSkills(
    {abortSignal, ...params}: RequestConfig & ListSkillsRequest = {},
  ): Promise<ListSkillsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSkills",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SkillSummaries": [toSkillSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSkillsStoreCategories(
    {abortSignal, ...params}: RequestConfig & ListSkillsStoreCategoriesRequest = {},
  ): Promise<ListSkillsStoreCategoriesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSkillsStoreCategories",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CategoryList": [toCategory],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSkillsStoreSkillsByCategory(
    {abortSignal, ...params}: RequestConfig & ListSkillsStoreSkillsByCategoryRequest,
  ): Promise<ListSkillsStoreSkillsByCategoryResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSkillsStoreSkillsByCategory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SkillsStoreSkills": [toSkillsStoreSkill],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSmartHomeAppliances(
    {abortSignal, ...params}: RequestConfig & ListSmartHomeAppliancesRequest,
  ): Promise<ListSmartHomeAppliancesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSmartHomeAppliances",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SmartHomeAppliances": [toSmartHomeAppliance],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & ListTagsRequest,
  ): Promise<ListTagsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTags",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putConferencePreference(
    {abortSignal, ...params}: RequestConfig & PutConferencePreferenceRequest,
  ): Promise<PutConferencePreferenceResponse> {
    const body: JSONObject = {...params,
    ConferencePreference: fromConferencePreference(params["ConferencePreference"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConferencePreference",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putInvitationConfiguration(
    {abortSignal, ...params}: RequestConfig & PutInvitationConfigurationRequest,
  ): Promise<PutInvitationConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInvitationConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putRoomSkillParameter(
    {abortSignal, ...params}: RequestConfig & PutRoomSkillParameterRequest,
  ): Promise<PutRoomSkillParameterResponse> {
    const body: JSONObject = {...params,
    RoomSkillParameter: fromRoomSkillParameter(params["RoomSkillParameter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRoomSkillParameter",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putSkillAuthorization(
    {abortSignal, ...params}: RequestConfig & PutSkillAuthorizationRequest,
  ): Promise<PutSkillAuthorizationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutSkillAuthorization",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async registerAVSDevice(
    {abortSignal, ...params}: RequestConfig & RegisterAVSDeviceRequest,
  ): Promise<RegisterAVSDeviceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterAVSDevice",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DeviceArn": "s",
      },
    }, await resp.json());
  }

  async rejectSkill(
    {abortSignal, ...params}: RequestConfig & RejectSkillRequest,
  ): Promise<RejectSkillResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectSkill",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async resolveRoom(
    {abortSignal, ...params}: RequestConfig & ResolveRoomRequest,
  ): Promise<ResolveRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResolveRoom",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RoomArn": "s",
        "RoomName": "s",
        "RoomSkillParameters": [toRoomSkillParameter],
      },
    }, await resp.json());
  }

  async revokeInvitation(
    {abortSignal, ...params}: RequestConfig & RevokeInvitationRequest = {},
  ): Promise<RevokeInvitationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RevokeInvitation",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async searchAddressBooks(
    {abortSignal, ...params}: RequestConfig & SearchAddressBooksRequest = {},
  ): Promise<SearchAddressBooksResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchAddressBooks",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AddressBooks": [toAddressBookData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchContacts(
    {abortSignal, ...params}: RequestConfig & SearchContactsRequest = {},
  ): Promise<SearchContactsResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchContacts",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Contacts": [toContactData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchDevices(
    {abortSignal, ...params}: RequestConfig & SearchDevicesRequest = {},
  ): Promise<SearchDevicesResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchDevices",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Devices": [toDeviceData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchNetworkProfiles(
    {abortSignal, ...params}: RequestConfig & SearchNetworkProfilesRequest = {},
  ): Promise<SearchNetworkProfilesResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchNetworkProfiles",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NetworkProfiles": [toNetworkProfileData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchProfiles(
    {abortSignal, ...params}: RequestConfig & SearchProfilesRequest = {},
  ): Promise<SearchProfilesResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProfiles",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Profiles": [toProfileData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchRooms(
    {abortSignal, ...params}: RequestConfig & SearchRoomsRequest = {},
  ): Promise<SearchRoomsResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchRooms",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Rooms": [toRoomData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchSkillGroups(
    {abortSignal, ...params}: RequestConfig & SearchSkillGroupsRequest = {},
  ): Promise<SearchSkillGroupsResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchSkillGroups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SkillGroups": [toSkillGroupData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchUsers(
    {abortSignal, ...params}: RequestConfig & SearchUsersRequest = {},
  ): Promise<SearchUsersResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
    SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchUsers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Users": [toUserData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async sendAnnouncement(
    {abortSignal, ...params}: RequestConfig & SendAnnouncementRequest,
  ): Promise<SendAnnouncementResponse> {
    const body: JSONObject = {...params,
    RoomFilters: params["RoomFilters"]?.map(x => fromFilter(x)),
    Content: fromContent(params["Content"]),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendAnnouncement",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AnnouncementArn": "s",
      },
    }, await resp.json());
  }

  async sendInvitation(
    {abortSignal, ...params}: RequestConfig & SendInvitationRequest = {},
  ): Promise<SendInvitationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendInvitation",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startDeviceSync(
    {abortSignal, ...params}: RequestConfig & StartDeviceSyncRequest,
  ): Promise<StartDeviceSyncResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDeviceSync",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startSmartHomeApplianceDiscovery(
    {abortSignal, ...params}: RequestConfig & StartSmartHomeApplianceDiscoveryRequest,
  ): Promise<StartSmartHomeApplianceDiscoveryResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSmartHomeApplianceDiscovery",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAddressBook(
    {abortSignal, ...params}: RequestConfig & UpdateAddressBookRequest,
  ): Promise<UpdateAddressBookResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAddressBook",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateBusinessReportSchedule(
    {abortSignal, ...params}: RequestConfig & UpdateBusinessReportScheduleRequest,
  ): Promise<UpdateBusinessReportScheduleResponse> {
    const body: JSONObject = {...params,
    Recurrence: fromBusinessReportRecurrence(params["Recurrence"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBusinessReportSchedule",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateConferenceProvider(
    {abortSignal, ...params}: RequestConfig & UpdateConferenceProviderRequest,
  ): Promise<UpdateConferenceProviderResponse> {
    const body: JSONObject = {...params,
    IPDialIn: fromIPDialIn(params["IPDialIn"]),
    PSTNDialIn: fromPSTNDialIn(params["PSTNDialIn"]),
    MeetingSetting: fromMeetingSetting(params["MeetingSetting"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConferenceProvider",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateContact(
    {abortSignal, ...params}: RequestConfig & UpdateContactRequest,
  ): Promise<UpdateContactResponse> {
    const body: JSONObject = {...params,
    PhoneNumbers: params["PhoneNumbers"]?.map(x => fromPhoneNumber(x)),
    SipAddresses: params["SipAddresses"]?.map(x => fromSipAddress(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContact",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDevice(
    {abortSignal, ...params}: RequestConfig & UpdateDeviceRequest = {},
  ): Promise<UpdateDeviceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDevice",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGateway(
    {abortSignal, ...params}: RequestConfig & UpdateGatewayRequest,
  ): Promise<UpdateGatewayResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGateway",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGatewayGroup(
    {abortSignal, ...params}: RequestConfig & UpdateGatewayGroupRequest,
  ): Promise<UpdateGatewayGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGatewayGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateNetworkProfile(
    {abortSignal, ...params}: RequestConfig & UpdateNetworkProfileRequest,
  ): Promise<UpdateNetworkProfileResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNetworkProfile",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateProfile(
    {abortSignal, ...params}: RequestConfig & UpdateProfileRequest = {},
  ): Promise<UpdateProfileResponse> {
    const body: JSONObject = {...params,
    MeetingRoomConfiguration: fromUpdateMeetingRoomConfiguration(params["MeetingRoomConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProfile",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRoom(
    {abortSignal, ...params}: RequestConfig & UpdateRoomRequest = {},
  ): Promise<UpdateRoomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoom",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSkillGroup(
    {abortSignal, ...params}: RequestConfig & UpdateSkillGroupRequest = {},
  ): Promise<UpdateSkillGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSkillGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface ApproveSkillRequest {
  SkillId: string;
}

// refs: 1 - tags: named, input
export interface AssociateContactWithAddressBookRequest {
  ContactArn: string;
  AddressBookArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateDeviceWithNetworkProfileRequest {
  DeviceArn: string;
  NetworkProfileArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateDeviceWithRoomRequest {
  DeviceArn?: string | null;
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateSkillGroupWithRoomRequest {
  SkillGroupArn?: string | null;
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateSkillWithSkillGroupRequest {
  SkillGroupArn?: string | null;
  SkillId: string;
}

// refs: 1 - tags: named, input
export interface AssociateSkillWithUsersRequest {
  SkillId: string;
}

// refs: 1 - tags: named, input
export interface CreateAddressBookRequest {
  Name: string;
  Description?: string | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateBusinessReportScheduleRequest {
  ScheduleName?: string | null;
  S3BucketName?: string | null;
  S3KeyPrefix?: string | null;
  Format: BusinessReportFormat;
  ContentRange: BusinessReportContentRange;
  Recurrence?: BusinessReportRecurrence | null;
  ClientRequestToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateConferenceProviderRequest {
  ConferenceProviderName: string;
  ConferenceProviderType: ConferenceProviderType;
  IPDialIn?: IPDialIn | null;
  PSTNDialIn?: PSTNDialIn | null;
  MeetingSetting: MeetingSetting;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateContactRequest {
  DisplayName?: string | null;
  FirstName: string;
  LastName?: string | null;
  PhoneNumber?: string | null;
  PhoneNumbers?: PhoneNumber[] | null;
  SipAddresses?: SipAddress[] | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateGatewayGroupRequest {
  Name: string;
  Description?: string | null;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface CreateNetworkProfileRequest {
  NetworkProfileName: string;
  Description?: string | null;
  Ssid: string;
  SecurityType: NetworkSecurityType;
  EapMethod?: NetworkEapMethod | null;
  CurrentPassword?: string | null;
  NextPassword?: string | null;
  CertificateAuthorityArn?: string | null;
  TrustAnchors?: string[] | null;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface CreateProfileRequest {
  ProfileName: string;
  Timezone: string;
  Address: string;
  DistanceUnit: DistanceUnit;
  TemperatureUnit: TemperatureUnit;
  WakeWord: WakeWord;
  Locale?: string | null;
  ClientRequestToken?: string | null;
  SetupModeDisabled?: boolean | null;
  MaxVolumeLimit?: number | null;
  PSTNEnabled?: boolean | null;
  MeetingRoomConfiguration?: CreateMeetingRoomConfiguration | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateRoomRequest {
  RoomName: string;
  Description?: string | null;
  ProfileArn?: string | null;
  ProviderCalendarId?: string | null;
  ClientRequestToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateSkillGroupRequest {
  SkillGroupName: string;
  Description?: string | null;
  ClientRequestToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateUserRequest {
  UserId: string;
  FirstName?: string | null;
  LastName?: string | null;
  Email?: string | null;
  ClientRequestToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteAddressBookRequest {
  AddressBookArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteBusinessReportScheduleRequest {
  ScheduleArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteConferenceProviderRequest {
  ConferenceProviderArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteContactRequest {
  ContactArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteDeviceRequest {
  DeviceArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteDeviceUsageDataRequest {
  DeviceArn: string;
  DeviceUsageType: DeviceUsageType;
}

// refs: 1 - tags: named, input
export interface DeleteGatewayGroupRequest {
  GatewayGroupArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteNetworkProfileRequest {
  NetworkProfileArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteProfileRequest {
  ProfileArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteRoomRequest {
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteRoomSkillParameterRequest {
  RoomArn?: string | null;
  SkillId: string;
  ParameterKey: string;
}

// refs: 1 - tags: named, input
export interface DeleteSkillAuthorizationRequest {
  SkillId: string;
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteSkillGroupRequest {
  SkillGroupArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  UserArn?: string | null;
  EnrollmentId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateContactFromAddressBookRequest {
  ContactArn: string;
  AddressBookArn: string;
}

// refs: 1 - tags: named, input
export interface DisassociateDeviceFromRoomRequest {
  DeviceArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateSkillFromSkillGroupRequest {
  SkillGroupArn?: string | null;
  SkillId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateSkillFromUsersRequest {
  SkillId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateSkillGroupFromRoomRequest {
  SkillGroupArn?: string | null;
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface ForgetSmartHomeAppliancesRequest {
  RoomArn: string;
}

// refs: 1 - tags: named, input
export interface GetAddressBookRequest {
  AddressBookArn: string;
}

// refs: 1 - tags: named, input
export interface GetConferencePreferenceRequest {
}

// refs: 1 - tags: named, input
export interface GetConferenceProviderRequest {
  ConferenceProviderArn: string;
}

// refs: 1 - tags: named, input
export interface GetContactRequest {
  ContactArn: string;
}

// refs: 1 - tags: named, input
export interface GetDeviceRequest {
  DeviceArn?: string | null;
}

// refs: 1 - tags: named, input
export interface GetGatewayRequest {
  GatewayArn: string;
}

// refs: 1 - tags: named, input
export interface GetGatewayGroupRequest {
  GatewayGroupArn: string;
}

// refs: 1 - tags: named, input
export interface GetInvitationConfigurationRequest {
}

// refs: 1 - tags: named, input
export interface GetNetworkProfileRequest {
  NetworkProfileArn: string;
}

// refs: 1 - tags: named, input
export interface GetProfileRequest {
  ProfileArn?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRoomRequest {
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRoomSkillParameterRequest {
  RoomArn?: string | null;
  SkillId: string;
  ParameterKey: string;
}

// refs: 1 - tags: named, input
export interface GetSkillGroupRequest {
  SkillGroupArn?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBusinessReportSchedulesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListConferenceProvidersRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDeviceEventsRequest {
  DeviceArn: string;
  EventType?: DeviceEventType | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListGatewayGroupsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListGatewaysRequest {
  GatewayGroupArn?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSkillsRequest {
  SkillGroupArn?: string | null;
  EnablementType?: EnablementTypeFilter | null;
  SkillType?: SkillTypeFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSkillsStoreCategoriesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSkillsStoreSkillsByCategoryRequest {
  CategoryId: number;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSmartHomeAppliancesRequest {
  RoomArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsRequest {
  Arn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface PutConferencePreferenceRequest {
  ConferencePreference: ConferencePreference;
}

// refs: 1 - tags: named, input
export interface PutInvitationConfigurationRequest {
  OrganizationName: string;
  ContactEmail?: string | null;
  PrivateSkillIds?: string[] | null;
}

// refs: 1 - tags: named, input
export interface PutRoomSkillParameterRequest {
  RoomArn?: string | null;
  SkillId: string;
  RoomSkillParameter: RoomSkillParameter;
}

// refs: 1 - tags: named, input
export interface PutSkillAuthorizationRequest {
  AuthorizationResult: { [key: string]: string };
  SkillId: string;
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface RegisterAVSDeviceRequest {
  ClientId: string;
  UserCode: string;
  ProductId: string;
  DeviceSerialNumber?: string | null;
  AmazonId: string;
  RoomArn?: string | null;
}

// refs: 1 - tags: named, input
export interface RejectSkillRequest {
  SkillId: string;
}

// refs: 1 - tags: named, input
export interface ResolveRoomRequest {
  UserId: string;
  SkillId: string;
}

// refs: 1 - tags: named, input
export interface RevokeInvitationRequest {
  UserArn?: string | null;
  EnrollmentId?: string | null;
}

// refs: 1 - tags: named, input
export interface SearchAddressBooksRequest {
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchContactsRequest {
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchDevicesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
}

// refs: 1 - tags: named, input
export interface SearchNetworkProfilesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
}

// refs: 1 - tags: named, input
export interface SearchProfilesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
}

// refs: 1 - tags: named, input
export interface SearchRoomsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
}

// refs: 1 - tags: named, input
export interface SearchSkillGroupsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
}

// refs: 1 - tags: named, input
export interface SearchUsersRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  Filters?: Filter[] | null;
  SortCriteria?: Sort[] | null;
}

// refs: 1 - tags: named, input
export interface SendAnnouncementRequest {
  RoomFilters: Filter[];
  Content: Content;
  TimeToLiveInSeconds?: number | null;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface SendInvitationRequest {
  UserArn?: string | null;
}

// refs: 1 - tags: named, input
export interface StartDeviceSyncRequest {
  RoomArn?: string | null;
  DeviceArn?: string | null;
  Features: Feature[];
}

// refs: 1 - tags: named, input
export interface StartSmartHomeApplianceDiscoveryRequest {
  RoomArn: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  Arn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  Arn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAddressBookRequest {
  AddressBookArn: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateBusinessReportScheduleRequest {
  ScheduleArn: string;
  S3BucketName?: string | null;
  S3KeyPrefix?: string | null;
  Format?: BusinessReportFormat | null;
  ScheduleName?: string | null;
  Recurrence?: BusinessReportRecurrence | null;
}

// refs: 1 - tags: named, input
export interface UpdateConferenceProviderRequest {
  ConferenceProviderArn: string;
  ConferenceProviderType: ConferenceProviderType;
  IPDialIn?: IPDialIn | null;
  PSTNDialIn?: PSTNDialIn | null;
  MeetingSetting: MeetingSetting;
}

// refs: 1 - tags: named, input
export interface UpdateContactRequest {
  ContactArn: string;
  DisplayName?: string | null;
  FirstName?: string | null;
  LastName?: string | null;
  PhoneNumber?: string | null;
  PhoneNumbers?: PhoneNumber[] | null;
  SipAddresses?: SipAddress[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateDeviceRequest {
  DeviceArn?: string | null;
  DeviceName?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGatewayRequest {
  GatewayArn: string;
  Name?: string | null;
  Description?: string | null;
  SoftwareVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGatewayGroupRequest {
  GatewayGroupArn: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateNetworkProfileRequest {
  NetworkProfileArn: string;
  NetworkProfileName?: string | null;
  Description?: string | null;
  CurrentPassword?: string | null;
  NextPassword?: string | null;
  CertificateAuthorityArn?: string | null;
  TrustAnchors?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateProfileRequest {
  ProfileArn?: string | null;
  ProfileName?: string | null;
  IsDefault?: boolean | null;
  Timezone?: string | null;
  Address?: string | null;
  DistanceUnit?: DistanceUnit | null;
  TemperatureUnit?: TemperatureUnit | null;
  WakeWord?: WakeWord | null;
  Locale?: string | null;
  SetupModeDisabled?: boolean | null;
  MaxVolumeLimit?: number | null;
  PSTNEnabled?: boolean | null;
  MeetingRoomConfiguration?: UpdateMeetingRoomConfiguration | null;
}

// refs: 1 - tags: named, input
export interface UpdateRoomRequest {
  RoomArn?: string | null;
  RoomName?: string | null;
  Description?: string | null;
  ProviderCalendarId?: string | null;
  ProfileArn?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateSkillGroupRequest {
  SkillGroupArn?: string | null;
  SkillGroupName?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface ApproveSkillResponse {
}

// refs: 1 - tags: named, output
export interface AssociateContactWithAddressBookResponse {
}

// refs: 1 - tags: named, output
export interface AssociateDeviceWithNetworkProfileResponse {
}

// refs: 1 - tags: named, output
export interface AssociateDeviceWithRoomResponse {
}

// refs: 1 - tags: named, output
export interface AssociateSkillGroupWithRoomResponse {
}

// refs: 1 - tags: named, output
export interface AssociateSkillWithSkillGroupResponse {
}

// refs: 1 - tags: named, output
export interface AssociateSkillWithUsersResponse {
}

// refs: 1 - tags: named, output
export interface CreateAddressBookResponse {
  AddressBookArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBusinessReportScheduleResponse {
  ScheduleArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateConferenceProviderResponse {
  ConferenceProviderArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateContactResponse {
  ContactArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateGatewayGroupResponse {
  GatewayGroupArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateNetworkProfileResponse {
  NetworkProfileArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateProfileResponse {
  ProfileArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRoomResponse {
  RoomArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSkillGroupResponse {
  SkillGroupArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateUserResponse {
  UserArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteAddressBookResponse {
}

// refs: 1 - tags: named, output
export interface DeleteBusinessReportScheduleResponse {
}

// refs: 1 - tags: named, output
export interface DeleteConferenceProviderResponse {
}

// refs: 1 - tags: named, output
export interface DeleteContactResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDeviceResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDeviceUsageDataResponse {
}

// refs: 1 - tags: named, output
export interface DeleteGatewayGroupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteNetworkProfileResponse {
}

// refs: 1 - tags: named, output
export interface DeleteProfileResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRoomResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRoomSkillParameterResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSkillAuthorizationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSkillGroupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteUserResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateContactFromAddressBookResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateDeviceFromRoomResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateSkillFromSkillGroupResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateSkillFromUsersResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateSkillGroupFromRoomResponse {
}

// refs: 1 - tags: named, output
export interface ForgetSmartHomeAppliancesResponse {
}

// refs: 1 - tags: named, output
export interface GetAddressBookResponse {
  AddressBook?: AddressBook | null;
}

// refs: 1 - tags: named, output
export interface GetConferencePreferenceResponse {
  Preference?: ConferencePreference | null;
}

// refs: 1 - tags: named, output
export interface GetConferenceProviderResponse {
  ConferenceProvider?: ConferenceProvider | null;
}

// refs: 1 - tags: named, output
export interface GetContactResponse {
  Contact?: Contact | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceResponse {
  Device?: Device | null;
}

// refs: 1 - tags: named, output
export interface GetGatewayResponse {
  Gateway?: Gateway | null;
}

// refs: 1 - tags: named, output
export interface GetGatewayGroupResponse {
  GatewayGroup?: GatewayGroup | null;
}

// refs: 1 - tags: named, output
export interface GetInvitationConfigurationResponse {
  OrganizationName?: string | null;
  ContactEmail?: string | null;
  PrivateSkillIds?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetNetworkProfileResponse {
  NetworkProfile?: NetworkProfile | null;
}

// refs: 1 - tags: named, output
export interface GetProfileResponse {
  Profile?: Profile | null;
}

// refs: 1 - tags: named, output
export interface GetRoomResponse {
  Room?: Room | null;
}

// refs: 1 - tags: named, output
export interface GetRoomSkillParameterResponse {
  RoomSkillParameter?: RoomSkillParameter | null;
}

// refs: 1 - tags: named, output
export interface GetSkillGroupResponse {
  SkillGroup?: SkillGroup | null;
}

// refs: 1 - tags: named, output
export interface ListBusinessReportSchedulesResponse {
  BusinessReportSchedules?: BusinessReportSchedule[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListConferenceProvidersResponse {
  ConferenceProviders?: ConferenceProvider[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeviceEventsResponse {
  DeviceEvents?: DeviceEvent[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGatewayGroupsResponse {
  GatewayGroups?: GatewayGroupSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGatewaysResponse {
  Gateways?: GatewaySummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSkillsResponse {
  SkillSummaries?: SkillSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSkillsStoreCategoriesResponse {
  CategoryList?: Category[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSkillsStoreSkillsByCategoryResponse {
  SkillsStoreSkills?: SkillsStoreSkill[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSmartHomeAppliancesResponse {
  SmartHomeAppliances?: SmartHomeAppliance[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutConferencePreferenceResponse {
}

// refs: 1 - tags: named, output
export interface PutInvitationConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface PutRoomSkillParameterResponse {
}

// refs: 1 - tags: named, output
export interface PutSkillAuthorizationResponse {
}

// refs: 1 - tags: named, output
export interface RegisterAVSDeviceResponse {
  DeviceArn?: string | null;
}

// refs: 1 - tags: named, output
export interface RejectSkillResponse {
}

// refs: 1 - tags: named, output
export interface ResolveRoomResponse {
  RoomArn?: string | null;
  RoomName?: string | null;
  RoomSkillParameters?: RoomSkillParameter[] | null;
}

// refs: 1 - tags: named, output
export interface RevokeInvitationResponse {
}

// refs: 1 - tags: named, output
export interface SearchAddressBooksResponse {
  AddressBooks?: AddressBookData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SearchContactsResponse {
  Contacts?: ContactData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SearchDevicesResponse {
  Devices?: DeviceData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SearchNetworkProfilesResponse {
  NetworkProfiles?: NetworkProfileData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SearchProfilesResponse {
  Profiles?: ProfileData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SearchRoomsResponse {
  Rooms?: RoomData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SearchSkillGroupsResponse {
  SkillGroups?: SkillGroupData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SearchUsersResponse {
  Users?: UserData[] | null;
  NextToken?: string | null;
  TotalCount?: number | null;
}

// refs: 1 - tags: named, output
export interface SendAnnouncementResponse {
  AnnouncementArn?: string | null;
}

// refs: 1 - tags: named, output
export interface SendInvitationResponse {
}

// refs: 1 - tags: named, output
export interface StartDeviceSyncResponse {
}

// refs: 1 - tags: named, output
export interface StartSmartHomeApplianceDiscoveryResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAddressBookResponse {
}

// refs: 1 - tags: named, output
export interface UpdateBusinessReportScheduleResponse {
}

// refs: 1 - tags: named, output
export interface UpdateConferenceProviderResponse {
}

// refs: 1 - tags: named, output
export interface UpdateContactResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDeviceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateGatewayResponse {
}

// refs: 1 - tags: named, output
export interface UpdateGatewayGroupResponse {
}

// refs: 1 - tags: named, output
export interface UpdateNetworkProfileResponse {
}

// refs: 1 - tags: named, output
export interface UpdateProfileResponse {
}

// refs: 1 - tags: named, output
export interface UpdateRoomResponse {
}

// refs: 1 - tags: named, output
export interface UpdateSkillGroupResponse {
}

// refs: 3 - tags: input, named, enum, output
export type BusinessReportFormat =
| "CSV"
| "CSV_ZIP"
;

function toBusinessReportFormat(root: JSONValue): BusinessReportFormat | null {
  return ( false
    || root == "CSV"
    || root == "CSV_ZIP"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface BusinessReportContentRange {
  Interval: BusinessReportInterval;
}
function fromBusinessReportContentRange(input?: BusinessReportContentRange | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toBusinessReportContentRange(root: JSONValue): BusinessReportContentRange {
  return prt.readObj({
    required: {
      "Interval": toBusinessReportInterval,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type BusinessReportInterval =
| "ONE_DAY"
| "ONE_WEEK"
| "THIRTY_DAYS"
;

function toBusinessReportInterval(root: JSONValue): BusinessReportInterval | null {
  return ( false
    || root == "ONE_DAY"
    || root == "ONE_WEEK"
    || root == "THIRTY_DAYS"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface BusinessReportRecurrence {
  StartDate?: string | null;
}
function fromBusinessReportRecurrence(input?: BusinessReportRecurrence | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toBusinessReportRecurrence(root: JSONValue): BusinessReportRecurrence {
  return prt.readObj({
    required: {},
    optional: {
      "StartDate": "s",
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ConferenceProviderType =
| "CHIME"
| "BLUEJEANS"
| "FUZE"
| "GOOGLE_HANGOUTS"
| "POLYCOM"
| "RINGCENTRAL"
| "SKYPE_FOR_BUSINESS"
| "WEBEX"
| "ZOOM"
| "CUSTOM"
;

function toConferenceProviderType(root: JSONValue): ConferenceProviderType | null {
  return ( false
    || root == "CHIME"
    || root == "BLUEJEANS"
    || root == "FUZE"
    || root == "GOOGLE_HANGOUTS"
    || root == "POLYCOM"
    || root == "RINGCENTRAL"
    || root == "SKYPE_FOR_BUSINESS"
    || root == "WEBEX"
    || root == "ZOOM"
    || root == "CUSTOM"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface IPDialIn {
  Endpoint: string;
  CommsProtocol: CommsProtocol;
}
function fromIPDialIn(input?: IPDialIn | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toIPDialIn(root: JSONValue): IPDialIn {
  return prt.readObj({
    required: {
      "Endpoint": "s",
      "CommsProtocol": toCommsProtocol,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type CommsProtocol =
| "SIP"
| "SIPS"
| "H323"
;

function toCommsProtocol(root: JSONValue): CommsProtocol | null {
  return ( false
    || root == "SIP"
    || root == "SIPS"
    || root == "H323"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface PSTNDialIn {
  CountryCode: string;
  PhoneNumber: string;
  OneClickIdDelay: string;
  OneClickPinDelay: string;
}
function fromPSTNDialIn(input?: PSTNDialIn | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toPSTNDialIn(root: JSONValue): PSTNDialIn {
  return prt.readObj({
    required: {
      "CountryCode": "s",
      "PhoneNumber": "s",
      "OneClickIdDelay": "s",
      "OneClickPinDelay": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MeetingSetting {
  RequirePin: RequirePin;
}
function fromMeetingSetting(input?: MeetingSetting | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toMeetingSetting(root: JSONValue): MeetingSetting {
  return prt.readObj({
    required: {
      "RequirePin": toRequirePin,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type RequirePin =
| "YES"
| "NO"
| "OPTIONAL"
;

function toRequirePin(root: JSONValue): RequirePin | null {
  return ( false
    || root == "YES"
    || root == "NO"
    || root == "OPTIONAL"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface PhoneNumber {
  Number: string;
  Type: PhoneNumberType;
}
function fromPhoneNumber(input?: PhoneNumber | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toPhoneNumber(root: JSONValue): PhoneNumber {
  return prt.readObj({
    required: {
      "Number": "s",
      "Type": toPhoneNumberType,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type PhoneNumberType =
| "MOBILE"
| "WORK"
| "HOME"
;

function toPhoneNumberType(root: JSONValue): PhoneNumberType | null {
  return ( false
    || root == "MOBILE"
    || root == "WORK"
    || root == "HOME"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface SipAddress {
  Uri: string;
  Type: SipType;
}
function fromSipAddress(input?: SipAddress | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSipAddress(root: JSONValue): SipAddress {
  return prt.readObj({
    required: {
      "Uri": "s",
      "Type": toSipType,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type SipType =
| "WORK"
;

function toSipType(root: JSONValue): SipType | null {
  return ( false
    || root == "WORK"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type NetworkSecurityType =
| "OPEN"
| "WEP"
| "WPA_PSK"
| "WPA2_PSK"
| "WPA2_ENTERPRISE"
;

function toNetworkSecurityType(root: JSONValue): NetworkSecurityType | null {
  return ( false
    || root == "OPEN"
    || root == "WEP"
    || root == "WPA_PSK"
    || root == "WPA2_PSK"
    || root == "WPA2_ENTERPRISE"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type NetworkEapMethod =
| "EAP_TLS"
;

function toNetworkEapMethod(root: JSONValue): NetworkEapMethod | null {
  return ( false
    || root == "EAP_TLS"
  ) ? root : null;
}

// refs: 4 - tags: input, named, enum, output
export type DistanceUnit =
| "METRIC"
| "IMPERIAL"
;

function toDistanceUnit(root: JSONValue): DistanceUnit | null {
  return ( false
    || root == "METRIC"
    || root == "IMPERIAL"
  ) ? root : null;
}

// refs: 4 - tags: input, named, enum, output
export type TemperatureUnit =
| "FAHRENHEIT"
| "CELSIUS"
;

function toTemperatureUnit(root: JSONValue): TemperatureUnit | null {
  return ( false
    || root == "FAHRENHEIT"
    || root == "CELSIUS"
  ) ? root : null;
}

// refs: 4 - tags: input, named, enum, output
export type WakeWord =
| "ALEXA"
| "AMAZON"
| "ECHO"
| "COMPUTER"
;

function toWakeWord(root: JSONValue): WakeWord | null {
  return ( false
    || root == "ALEXA"
    || root == "AMAZON"
    || root == "ECHO"
    || root == "COMPUTER"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface CreateMeetingRoomConfiguration {
  RoomUtilizationMetricsEnabled?: boolean | null;
  EndOfMeetingReminder?: CreateEndOfMeetingReminder | null;
  InstantBooking?: CreateInstantBooking | null;
  RequireCheckIn?: CreateRequireCheckIn | null;
}
function fromCreateMeetingRoomConfiguration(input?: CreateMeetingRoomConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    EndOfMeetingReminder: fromCreateEndOfMeetingReminder(input["EndOfMeetingReminder"]),
    InstantBooking: fromCreateInstantBooking(input["InstantBooking"]),
    RequireCheckIn: fromCreateRequireCheckIn(input["RequireCheckIn"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface CreateEndOfMeetingReminder {
  ReminderAtMinutes: number[];
  ReminderType: EndOfMeetingReminderType;
  Enabled: boolean;
}
function fromCreateEndOfMeetingReminder(input?: CreateEndOfMeetingReminder | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, enum, output
export type EndOfMeetingReminderType =
| "ANNOUNCEMENT_TIME_CHECK"
| "ANNOUNCEMENT_VARIABLE_TIME_LEFT"
| "CHIME"
| "KNOCK"
;

function toEndOfMeetingReminderType(root: JSONValue): EndOfMeetingReminderType | null {
  return ( false
    || root == "ANNOUNCEMENT_TIME_CHECK"
    || root == "ANNOUNCEMENT_VARIABLE_TIME_LEFT"
    || root == "CHIME"
    || root == "KNOCK"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface CreateInstantBooking {
  DurationInMinutes: number;
  Enabled: boolean;
}
function fromCreateInstantBooking(input?: CreateInstantBooking | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface CreateRequireCheckIn {
  ReleaseAfterMinutes: number;
  Enabled: boolean;
}
function fromCreateRequireCheckIn(input?: CreateRequireCheckIn | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type DeviceUsageType =
| "VOICE"
;


// refs: 2 - tags: input, named, enum, output
export type DeviceEventType =
| "CONNECTION_STATUS"
| "DEVICE_STATUS"
;

function toDeviceEventType(root: JSONValue): DeviceEventType | null {
  return ( false
    || root == "CONNECTION_STATUS"
    || root == "DEVICE_STATUS"
  ) ? root : null;
}

// refs: 1 - tags: input, named, enum
export type EnablementTypeFilter =
| "ENABLED"
| "PENDING"
;


// refs: 1 - tags: input, named, enum
export type SkillTypeFilter =
| "PUBLIC"
| "PRIVATE"
| "ALL"
;


// refs: 2 - tags: input, named, interface, output
export interface ConferencePreference {
  DefaultConferenceProviderArn?: string | null;
}
function fromConferencePreference(input?: ConferencePreference | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toConferencePreference(root: JSONValue): ConferencePreference {
  return prt.readObj({
    required: {},
    optional: {
      "DefaultConferenceProviderArn": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RoomSkillParameter {
  ParameterKey: string;
  ParameterValue: string;
}
function fromRoomSkillParameter(input?: RoomSkillParameter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRoomSkillParameter(root: JSONValue): RoomSkillParameter {
  return prt.readObj({
    required: {
      "ParameterKey": "s",
      "ParameterValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface
export interface Filter {
  Key: string;
  Values: string[];
}
function fromFilter(input?: Filter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 8 - tags: input, named, interface
export interface Sort {
  Key: string;
  Value: SortValue;
}
function fromSort(input?: Sort | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 8 - tags: input, named, enum
export type SortValue =
| "ASC"
| "DESC"
;


// refs: 1 - tags: input, named, interface
export interface Content {
  TextList?: Text[] | null;
  SsmlList?: Ssml[] | null;
  AudioList?: Audio[] | null;
}
function fromContent(input?: Content | null): JSONValue {
  if (!input) return input;
  return {...input,
    TextList: input["TextList"]?.map(x => fromText(x)),
    SsmlList: input["SsmlList"]?.map(x => fromSsml(x)),
    AudioList: input["AudioList"]?.map(x => fromAudio(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface Text {
  Locale: Locale;
  Value: string;
}
function fromText(input?: Text | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, enum
export type Locale =
| "en-US"
;


// refs: 1 - tags: input, named, interface
export interface Ssml {
  Locale: Locale;
  Value: string;
}
function fromSsml(input?: Ssml | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface Audio {
  Locale: Locale;
  Location: string;
}
function fromAudio(input?: Audio | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, enum, output
export type Feature =
| "BLUETOOTH"
| "VOLUME"
| "NOTIFICATIONS"
| "LISTS"
| "SKILLS"
| "NETWORK_PROFILE"
| "SETTINGS"
| "ALL"
;

function toFeature(root: JSONValue): Feature | null {
  return ( false
    || root == "BLUETOOTH"
    || root == "VOLUME"
    || root == "NOTIFICATIONS"
    || root == "LISTS"
    || root == "SKILLS"
    || root == "NETWORK_PROFILE"
    || root == "SETTINGS"
    || root == "ALL"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface UpdateMeetingRoomConfiguration {
  RoomUtilizationMetricsEnabled?: boolean | null;
  EndOfMeetingReminder?: UpdateEndOfMeetingReminder | null;
  InstantBooking?: UpdateInstantBooking | null;
  RequireCheckIn?: UpdateRequireCheckIn | null;
}
function fromUpdateMeetingRoomConfiguration(input?: UpdateMeetingRoomConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    EndOfMeetingReminder: fromUpdateEndOfMeetingReminder(input["EndOfMeetingReminder"]),
    InstantBooking: fromUpdateInstantBooking(input["InstantBooking"]),
    RequireCheckIn: fromUpdateRequireCheckIn(input["RequireCheckIn"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateEndOfMeetingReminder {
  ReminderAtMinutes?: number[] | null;
  ReminderType?: EndOfMeetingReminderType | null;
  Enabled?: boolean | null;
}
function fromUpdateEndOfMeetingReminder(input?: UpdateEndOfMeetingReminder | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateInstantBooking {
  DurationInMinutes?: number | null;
  Enabled?: boolean | null;
}
function fromUpdateInstantBooking(input?: UpdateInstantBooking | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateRequireCheckIn {
  ReleaseAfterMinutes?: number | null;
  Enabled?: boolean | null;
}
function fromUpdateRequireCheckIn(input?: UpdateRequireCheckIn | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: output, named, interface
export interface AddressBook {
  AddressBookArn?: string | null;
  Name?: string | null;
  Description?: string | null;
}
function toAddressBook(root: JSONValue): AddressBook {
  return prt.readObj({
    required: {},
    optional: {
      "AddressBookArn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ConferenceProvider {
  Arn?: string | null;
  Name?: string | null;
  Type?: ConferenceProviderType | null;
  IPDialIn?: IPDialIn | null;
  PSTNDialIn?: PSTNDialIn | null;
  MeetingSetting?: MeetingSetting | null;
}
function toConferenceProvider(root: JSONValue): ConferenceProvider {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Type": toConferenceProviderType,
      "IPDialIn": toIPDialIn,
      "PSTNDialIn": toPSTNDialIn,
      "MeetingSetting": toMeetingSetting,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Contact {
  ContactArn?: string | null;
  DisplayName?: string | null;
  FirstName?: string | null;
  LastName?: string | null;
  PhoneNumber?: string | null;
  PhoneNumbers?: PhoneNumber[] | null;
  SipAddresses?: SipAddress[] | null;
}
function toContact(root: JSONValue): Contact {
  return prt.readObj({
    required: {},
    optional: {
      "ContactArn": "s",
      "DisplayName": "s",
      "FirstName": "s",
      "LastName": "s",
      "PhoneNumber": "s",
      "PhoneNumbers": [toPhoneNumber],
      "SipAddresses": [toSipAddress],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Device {
  DeviceArn?: string | null;
  DeviceSerialNumber?: string | null;
  DeviceType?: string | null;
  DeviceName?: string | null;
  SoftwareVersion?: string | null;
  MacAddress?: string | null;
  RoomArn?: string | null;
  DeviceStatus?: DeviceStatus | null;
  DeviceStatusInfo?: DeviceStatusInfo | null;
  NetworkProfileInfo?: DeviceNetworkProfileInfo | null;
}
function toDevice(root: JSONValue): Device {
  return prt.readObj({
    required: {},
    optional: {
      "DeviceArn": "s",
      "DeviceSerialNumber": "s",
      "DeviceType": "s",
      "DeviceName": "s",
      "SoftwareVersion": "s",
      "MacAddress": "s",
      "RoomArn": "s",
      "DeviceStatus": toDeviceStatus,
      "DeviceStatusInfo": toDeviceStatusInfo,
      "NetworkProfileInfo": toDeviceNetworkProfileInfo,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DeviceStatus =
| "READY"
| "PENDING"
| "WAS_OFFLINE"
| "DEREGISTERED"
| "FAILED"
;
function toDeviceStatus(root: JSONValue): DeviceStatus | null {
  return ( false
    || root == "READY"
    || root == "PENDING"
    || root == "WAS_OFFLINE"
    || root == "DEREGISTERED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface DeviceStatusInfo {
  DeviceStatusDetails?: DeviceStatusDetail[] | null;
  ConnectionStatus?: ConnectionStatus | null;
  ConnectionStatusUpdatedTime?: Date | number | null;
}
function toDeviceStatusInfo(root: JSONValue): DeviceStatusInfo {
  return prt.readObj({
    required: {},
    optional: {
      "DeviceStatusDetails": [toDeviceStatusDetail],
      "ConnectionStatus": toConnectionStatus,
      "ConnectionStatusUpdatedTime": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DeviceStatusDetail {
  Feature?: Feature | null;
  Code?: DeviceStatusDetailCode | null;
}
function toDeviceStatusDetail(root: JSONValue): DeviceStatusDetail {
  return prt.readObj({
    required: {},
    optional: {
      "Feature": toFeature,
      "Code": toDeviceStatusDetailCode,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DeviceStatusDetailCode =
| "DEVICE_SOFTWARE_UPDATE_NEEDED"
| "DEVICE_WAS_OFFLINE"
| "CREDENTIALS_ACCESS_FAILURE"
| "TLS_VERSION_MISMATCH"
| "ASSOCIATION_REJECTION"
| "AUTHENTICATION_FAILURE"
| "DHCP_FAILURE"
| "INTERNET_UNAVAILABLE"
| "DNS_FAILURE"
| "UNKNOWN_FAILURE"
| "CERTIFICATE_ISSUING_LIMIT_EXCEEDED"
| "INVALID_CERTIFICATE_AUTHORITY"
| "NETWORK_PROFILE_NOT_FOUND"
| "INVALID_PASSWORD_STATE"
| "PASSWORD_NOT_FOUND"
| "PASSWORD_MANAGER_ACCESS_DENIED"
| "CERTIFICATE_AUTHORITY_ACCESS_DENIED"
;
function toDeviceStatusDetailCode(root: JSONValue): DeviceStatusDetailCode | null {
  return ( false
    || root == "DEVICE_SOFTWARE_UPDATE_NEEDED"
    || root == "DEVICE_WAS_OFFLINE"
    || root == "CREDENTIALS_ACCESS_FAILURE"
    || root == "TLS_VERSION_MISMATCH"
    || root == "ASSOCIATION_REJECTION"
    || root == "AUTHENTICATION_FAILURE"
    || root == "DHCP_FAILURE"
    || root == "INTERNET_UNAVAILABLE"
    || root == "DNS_FAILURE"
    || root == "UNKNOWN_FAILURE"
    || root == "CERTIFICATE_ISSUING_LIMIT_EXCEEDED"
    || root == "INVALID_CERTIFICATE_AUTHORITY"
    || root == "NETWORK_PROFILE_NOT_FOUND"
    || root == "INVALID_PASSWORD_STATE"
    || root == "PASSWORD_NOT_FOUND"
    || root == "PASSWORD_MANAGER_ACCESS_DENIED"
    || root == "CERTIFICATE_AUTHORITY_ACCESS_DENIED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, enum
export type ConnectionStatus =
| "ONLINE"
| "OFFLINE"
;
function toConnectionStatus(root: JSONValue): ConnectionStatus | null {
  return ( false
    || root == "ONLINE"
    || root == "OFFLINE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface DeviceNetworkProfileInfo {
  NetworkProfileArn?: string | null;
  CertificateArn?: string | null;
  CertificateExpirationTime?: Date | number | null;
}
function toDeviceNetworkProfileInfo(root: JSONValue): DeviceNetworkProfileInfo {
  return prt.readObj({
    required: {},
    optional: {
      "NetworkProfileArn": "s",
      "CertificateArn": "s",
      "CertificateExpirationTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Gateway {
  Arn?: string | null;
  Name?: string | null;
  Description?: string | null;
  GatewayGroupArn?: string | null;
  SoftwareVersion?: string | null;
}
function toGateway(root: JSONValue): Gateway {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
      "GatewayGroupArn": "s",
      "SoftwareVersion": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GatewayGroup {
  Arn?: string | null;
  Name?: string | null;
  Description?: string | null;
}
function toGatewayGroup(root: JSONValue): GatewayGroup {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkProfile {
  NetworkProfileArn?: string | null;
  NetworkProfileName?: string | null;
  Description?: string | null;
  Ssid?: string | null;
  SecurityType?: NetworkSecurityType | null;
  EapMethod?: NetworkEapMethod | null;
  CurrentPassword?: string | null;
  NextPassword?: string | null;
  CertificateAuthorityArn?: string | null;
  TrustAnchors?: string[] | null;
}
function toNetworkProfile(root: JSONValue): NetworkProfile {
  return prt.readObj({
    required: {},
    optional: {
      "NetworkProfileArn": "s",
      "NetworkProfileName": "s",
      "Description": "s",
      "Ssid": "s",
      "SecurityType": toNetworkSecurityType,
      "EapMethod": toNetworkEapMethod,
      "CurrentPassword": "s",
      "NextPassword": "s",
      "CertificateAuthorityArn": "s",
      "TrustAnchors": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Profile {
  ProfileArn?: string | null;
  ProfileName?: string | null;
  IsDefault?: boolean | null;
  Address?: string | null;
  Timezone?: string | null;
  DistanceUnit?: DistanceUnit | null;
  TemperatureUnit?: TemperatureUnit | null;
  WakeWord?: WakeWord | null;
  Locale?: string | null;
  SetupModeDisabled?: boolean | null;
  MaxVolumeLimit?: number | null;
  PSTNEnabled?: boolean | null;
  AddressBookArn?: string | null;
  MeetingRoomConfiguration?: MeetingRoomConfiguration | null;
}
function toProfile(root: JSONValue): Profile {
  return prt.readObj({
    required: {},
    optional: {
      "ProfileArn": "s",
      "ProfileName": "s",
      "IsDefault": "b",
      "Address": "s",
      "Timezone": "s",
      "DistanceUnit": toDistanceUnit,
      "TemperatureUnit": toTemperatureUnit,
      "WakeWord": toWakeWord,
      "Locale": "s",
      "SetupModeDisabled": "b",
      "MaxVolumeLimit": "n",
      "PSTNEnabled": "b",
      "AddressBookArn": "s",
      "MeetingRoomConfiguration": toMeetingRoomConfiguration,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MeetingRoomConfiguration {
  RoomUtilizationMetricsEnabled?: boolean | null;
  EndOfMeetingReminder?: EndOfMeetingReminder | null;
  InstantBooking?: InstantBooking | null;
  RequireCheckIn?: RequireCheckIn | null;
}
function toMeetingRoomConfiguration(root: JSONValue): MeetingRoomConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "RoomUtilizationMetricsEnabled": "b",
      "EndOfMeetingReminder": toEndOfMeetingReminder,
      "InstantBooking": toInstantBooking,
      "RequireCheckIn": toRequireCheckIn,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EndOfMeetingReminder {
  ReminderAtMinutes?: number[] | null;
  ReminderType?: EndOfMeetingReminderType | null;
  Enabled?: boolean | null;
}
function toEndOfMeetingReminder(root: JSONValue): EndOfMeetingReminder {
  return prt.readObj({
    required: {},
    optional: {
      "ReminderAtMinutes": ["n"],
      "ReminderType": toEndOfMeetingReminderType,
      "Enabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstantBooking {
  DurationInMinutes?: number | null;
  Enabled?: boolean | null;
}
function toInstantBooking(root: JSONValue): InstantBooking {
  return prt.readObj({
    required: {},
    optional: {
      "DurationInMinutes": "n",
      "Enabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RequireCheckIn {
  ReleaseAfterMinutes?: number | null;
  Enabled?: boolean | null;
}
function toRequireCheckIn(root: JSONValue): RequireCheckIn {
  return prt.readObj({
    required: {},
    optional: {
      "ReleaseAfterMinutes": "n",
      "Enabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Room {
  RoomArn?: string | null;
  RoomName?: string | null;
  Description?: string | null;
  ProviderCalendarId?: string | null;
  ProfileArn?: string | null;
}
function toRoom(root: JSONValue): Room {
  return prt.readObj({
    required: {},
    optional: {
      "RoomArn": "s",
      "RoomName": "s",
      "Description": "s",
      "ProviderCalendarId": "s",
      "ProfileArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SkillGroup {
  SkillGroupArn?: string | null;
  SkillGroupName?: string | null;
  Description?: string | null;
}
function toSkillGroup(root: JSONValue): SkillGroup {
  return prt.readObj({
    required: {},
    optional: {
      "SkillGroupArn": "s",
      "SkillGroupName": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BusinessReportSchedule {
  ScheduleArn?: string | null;
  ScheduleName?: string | null;
  S3BucketName?: string | null;
  S3KeyPrefix?: string | null;
  Format?: BusinessReportFormat | null;
  ContentRange?: BusinessReportContentRange | null;
  Recurrence?: BusinessReportRecurrence | null;
  LastBusinessReport?: BusinessReport | null;
}
function toBusinessReportSchedule(root: JSONValue): BusinessReportSchedule {
  return prt.readObj({
    required: {},
    optional: {
      "ScheduleArn": "s",
      "ScheduleName": "s",
      "S3BucketName": "s",
      "S3KeyPrefix": "s",
      "Format": toBusinessReportFormat,
      "ContentRange": toBusinessReportContentRange,
      "Recurrence": toBusinessReportRecurrence,
      "LastBusinessReport": toBusinessReport,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BusinessReport {
  Status?: BusinessReportStatus | null;
  FailureCode?: BusinessReportFailureCode | null;
  S3Location?: BusinessReportS3Location | null;
  DeliveryTime?: Date | number | null;
  DownloadUrl?: string | null;
}
function toBusinessReport(root: JSONValue): BusinessReport {
  return prt.readObj({
    required: {},
    optional: {
      "Status": toBusinessReportStatus,
      "FailureCode": toBusinessReportFailureCode,
      "S3Location": toBusinessReportS3Location,
      "DeliveryTime": "d",
      "DownloadUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type BusinessReportStatus =
| "RUNNING"
| "SUCCEEDED"
| "FAILED"
;
function toBusinessReportStatus(root: JSONValue): BusinessReportStatus | null {
  return ( false
    || root == "RUNNING"
    || root == "SUCCEEDED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type BusinessReportFailureCode =
| "ACCESS_DENIED"
| "NO_SUCH_BUCKET"
| "INTERNAL_FAILURE"
;
function toBusinessReportFailureCode(root: JSONValue): BusinessReportFailureCode | null {
  return ( false
    || root == "ACCESS_DENIED"
    || root == "NO_SUCH_BUCKET"
    || root == "INTERNAL_FAILURE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface BusinessReportS3Location {
  Path?: string | null;
  BucketName?: string | null;
}
function toBusinessReportS3Location(root: JSONValue): BusinessReportS3Location {
  return prt.readObj({
    required: {},
    optional: {
      "Path": "s",
      "BucketName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeviceEvent {
  Type?: DeviceEventType | null;
  Value?: string | null;
  Timestamp?: Date | number | null;
}
function toDeviceEvent(root: JSONValue): DeviceEvent {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toDeviceEventType,
      "Value": "s",
      "Timestamp": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GatewayGroupSummary {
  Arn?: string | null;
  Name?: string | null;
  Description?: string | null;
}
function toGatewayGroupSummary(root: JSONValue): GatewayGroupSummary {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GatewaySummary {
  Arn?: string | null;
  Name?: string | null;
  Description?: string | null;
  GatewayGroupArn?: string | null;
  SoftwareVersion?: string | null;
}
function toGatewaySummary(root: JSONValue): GatewaySummary {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
      "GatewayGroupArn": "s",
      "SoftwareVersion": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SkillSummary {
  SkillId?: string | null;
  SkillName?: string | null;
  SupportsLinking?: boolean | null;
  EnablementType?: EnablementType | null;
  SkillType?: SkillType | null;
}
function toSkillSummary(root: JSONValue): SkillSummary {
  return prt.readObj({
    required: {},
    optional: {
      "SkillId": "s",
      "SkillName": "s",
      "SupportsLinking": "b",
      "EnablementType": toEnablementType,
      "SkillType": toSkillType,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EnablementType =
| "ENABLED"
| "PENDING"
;
function toEnablementType(root: JSONValue): EnablementType | null {
  return ( false
    || root == "ENABLED"
    || root == "PENDING"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type SkillType =
| "PUBLIC"
| "PRIVATE"
;
function toSkillType(root: JSONValue): SkillType | null {
  return ( false
    || root == "PUBLIC"
    || root == "PRIVATE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Category {
  CategoryId?: number | null;
  CategoryName?: string | null;
}
function toCategory(root: JSONValue): Category {
  return prt.readObj({
    required: {},
    optional: {
      "CategoryId": "n",
      "CategoryName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SkillsStoreSkill {
  SkillId?: string | null;
  SkillName?: string | null;
  ShortDescription?: string | null;
  IconUrl?: string | null;
  SampleUtterances?: string[] | null;
  SkillDetails?: SkillDetails | null;
  SupportsLinking?: boolean | null;
}
function toSkillsStoreSkill(root: JSONValue): SkillsStoreSkill {
  return prt.readObj({
    required: {},
    optional: {
      "SkillId": "s",
      "SkillName": "s",
      "ShortDescription": "s",
      "IconUrl": "s",
      "SampleUtterances": ["s"],
      "SkillDetails": toSkillDetails,
      "SupportsLinking": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SkillDetails {
  ProductDescription?: string | null;
  InvocationPhrase?: string | null;
  ReleaseDate?: string | null;
  EndUserLicenseAgreement?: string | null;
  GenericKeywords?: string[] | null;
  BulletPoints?: string[] | null;
  NewInThisVersionBulletPoints?: string[] | null;
  SkillTypes?: string[] | null;
  Reviews?: { [key: string]: string } | null;
  DeveloperInfo?: DeveloperInfo | null;
}
function toSkillDetails(root: JSONValue): SkillDetails {
  return prt.readObj({
    required: {},
    optional: {
      "ProductDescription": "s",
      "InvocationPhrase": "s",
      "ReleaseDate": "s",
      "EndUserLicenseAgreement": "s",
      "GenericKeywords": ["s"],
      "BulletPoints": ["s"],
      "NewInThisVersionBulletPoints": ["s"],
      "SkillTypes": ["s"],
      "Reviews": x => prt.readMap(String, String, x),
      "DeveloperInfo": toDeveloperInfo,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeveloperInfo {
  DeveloperName?: string | null;
  PrivacyPolicy?: string | null;
  Email?: string | null;
  Url?: string | null;
}
function toDeveloperInfo(root: JSONValue): DeveloperInfo {
  return prt.readObj({
    required: {},
    optional: {
      "DeveloperName": "s",
      "PrivacyPolicy": "s",
      "Email": "s",
      "Url": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SmartHomeAppliance {
  FriendlyName?: string | null;
  Description?: string | null;
  ManufacturerName?: string | null;
}
function toSmartHomeAppliance(root: JSONValue): SmartHomeAppliance {
  return prt.readObj({
    required: {},
    optional: {
      "FriendlyName": "s",
      "Description": "s",
      "ManufacturerName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AddressBookData {
  AddressBookArn?: string | null;
  Name?: string | null;
  Description?: string | null;
}
function toAddressBookData(root: JSONValue): AddressBookData {
  return prt.readObj({
    required: {},
    optional: {
      "AddressBookArn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ContactData {
  ContactArn?: string | null;
  DisplayName?: string | null;
  FirstName?: string | null;
  LastName?: string | null;
  PhoneNumber?: string | null;
  PhoneNumbers?: PhoneNumber[] | null;
  SipAddresses?: SipAddress[] | null;
}
function toContactData(root: JSONValue): ContactData {
  return prt.readObj({
    required: {},
    optional: {
      "ContactArn": "s",
      "DisplayName": "s",
      "FirstName": "s",
      "LastName": "s",
      "PhoneNumber": "s",
      "PhoneNumbers": [toPhoneNumber],
      "SipAddresses": [toSipAddress],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeviceData {
  DeviceArn?: string | null;
  DeviceSerialNumber?: string | null;
  DeviceType?: string | null;
  DeviceName?: string | null;
  SoftwareVersion?: string | null;
  MacAddress?: string | null;
  DeviceStatus?: DeviceStatus | null;
  NetworkProfileArn?: string | null;
  NetworkProfileName?: string | null;
  RoomArn?: string | null;
  RoomName?: string | null;
  DeviceStatusInfo?: DeviceStatusInfo | null;
  CreatedTime?: Date | number | null;
}
function toDeviceData(root: JSONValue): DeviceData {
  return prt.readObj({
    required: {},
    optional: {
      "DeviceArn": "s",
      "DeviceSerialNumber": "s",
      "DeviceType": "s",
      "DeviceName": "s",
      "SoftwareVersion": "s",
      "MacAddress": "s",
      "DeviceStatus": toDeviceStatus,
      "NetworkProfileArn": "s",
      "NetworkProfileName": "s",
      "RoomArn": "s",
      "RoomName": "s",
      "DeviceStatusInfo": toDeviceStatusInfo,
      "CreatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkProfileData {
  NetworkProfileArn?: string | null;
  NetworkProfileName?: string | null;
  Description?: string | null;
  Ssid?: string | null;
  SecurityType?: NetworkSecurityType | null;
  EapMethod?: NetworkEapMethod | null;
  CertificateAuthorityArn?: string | null;
}
function toNetworkProfileData(root: JSONValue): NetworkProfileData {
  return prt.readObj({
    required: {},
    optional: {
      "NetworkProfileArn": "s",
      "NetworkProfileName": "s",
      "Description": "s",
      "Ssid": "s",
      "SecurityType": toNetworkSecurityType,
      "EapMethod": toNetworkEapMethod,
      "CertificateAuthorityArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProfileData {
  ProfileArn?: string | null;
  ProfileName?: string | null;
  IsDefault?: boolean | null;
  Address?: string | null;
  Timezone?: string | null;
  DistanceUnit?: DistanceUnit | null;
  TemperatureUnit?: TemperatureUnit | null;
  WakeWord?: WakeWord | null;
  Locale?: string | null;
}
function toProfileData(root: JSONValue): ProfileData {
  return prt.readObj({
    required: {},
    optional: {
      "ProfileArn": "s",
      "ProfileName": "s",
      "IsDefault": "b",
      "Address": "s",
      "Timezone": "s",
      "DistanceUnit": toDistanceUnit,
      "TemperatureUnit": toTemperatureUnit,
      "WakeWord": toWakeWord,
      "Locale": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RoomData {
  RoomArn?: string | null;
  RoomName?: string | null;
  Description?: string | null;
  ProviderCalendarId?: string | null;
  ProfileArn?: string | null;
  ProfileName?: string | null;
}
function toRoomData(root: JSONValue): RoomData {
  return prt.readObj({
    required: {},
    optional: {
      "RoomArn": "s",
      "RoomName": "s",
      "Description": "s",
      "ProviderCalendarId": "s",
      "ProfileArn": "s",
      "ProfileName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SkillGroupData {
  SkillGroupArn?: string | null;
  SkillGroupName?: string | null;
  Description?: string | null;
}
function toSkillGroupData(root: JSONValue): SkillGroupData {
  return prt.readObj({
    required: {},
    optional: {
      "SkillGroupArn": "s",
      "SkillGroupName": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserData {
  UserArn?: string | null;
  FirstName?: string | null;
  LastName?: string | null;
  Email?: string | null;
  EnrollmentStatus?: EnrollmentStatus | null;
  EnrollmentId?: string | null;
}
function toUserData(root: JSONValue): UserData {
  return prt.readObj({
    required: {},
    optional: {
      "UserArn": "s",
      "FirstName": "s",
      "LastName": "s",
      "Email": "s",
      "EnrollmentStatus": toEnrollmentStatus,
      "EnrollmentId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EnrollmentStatus =
| "INITIALIZED"
| "PENDING"
| "REGISTERED"
| "DISASSOCIATING"
| "DEREGISTERING"
;
function toEnrollmentStatus(root: JSONValue): EnrollmentStatus | null {
  return ( false
    || root == "INITIALIZED"
    || root == "PENDING"
    || root == "REGISTERED"
    || root == "DISASSOCIATING"
    || root == "DEREGISTERING"
  ) ? root : null;
}
