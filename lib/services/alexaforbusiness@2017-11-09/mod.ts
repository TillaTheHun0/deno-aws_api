// Autogenerated API client for: Alexa For Business

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class AlexaForBusiness {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AlexaForBusiness.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-11-09",
    "endpointPrefix": "a4b",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Alexa For Business",
    "serviceId": "Alexa For Business",
    "signatureVersion": "v4",
    "targetPrefix": "AlexaForBusiness",
    "uid": "alexaforbusiness-2017-11-09"
  };

  async approveSkill(
    {abortSignal, ...params}: RequestConfig & s.ApproveSkillRequest,
  ): Promise<s.ApproveSkillResponse> {
    const body: jsonP.JSONObject = {
      SkillId: params["SkillId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ApproveSkill",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateContactWithAddressBook(
    {abortSignal, ...params}: RequestConfig & s.AssociateContactWithAddressBookRequest,
  ): Promise<s.AssociateContactWithAddressBookResponse> {
    const body: jsonP.JSONObject = {
      ContactArn: params["ContactArn"],
      AddressBookArn: params["AddressBookArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateContactWithAddressBook",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDeviceWithNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.AssociateDeviceWithNetworkProfileRequest,
  ): Promise<s.AssociateDeviceWithNetworkProfileResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
      NetworkProfileArn: params["NetworkProfileArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDeviceWithNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDeviceWithRoom(
    {abortSignal, ...params}: RequestConfig & s.AssociateDeviceWithRoomRequest = {},
  ): Promise<s.AssociateDeviceWithRoomResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDeviceWithRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateSkillGroupWithRoom(
    {abortSignal, ...params}: RequestConfig & s.AssociateSkillGroupWithRoomRequest = {},
  ): Promise<s.AssociateSkillGroupWithRoomResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSkillGroupWithRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateSkillWithSkillGroup(
    {abortSignal, ...params}: RequestConfig & s.AssociateSkillWithSkillGroupRequest,
  ): Promise<s.AssociateSkillWithSkillGroupResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
      SkillId: params["SkillId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSkillWithSkillGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateSkillWithUsers(
    {abortSignal, ...params}: RequestConfig & s.AssociateSkillWithUsersRequest,
  ): Promise<s.AssociateSkillWithUsersResponse> {
    const body: jsonP.JSONObject = {
      SkillId: params["SkillId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSkillWithUsers",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAddressBook(
    {abortSignal, ...params}: RequestConfig & s.CreateAddressBookRequest,
  ): Promise<s.CreateAddressBookResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAddressBook",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AddressBookArn": "s",
      },
    }, await resp.json());
  }

  async createBusinessReportSchedule(
    {abortSignal, ...params}: RequestConfig & s.CreateBusinessReportScheduleRequest,
  ): Promise<s.CreateBusinessReportScheduleResponse> {
    const body: jsonP.JSONObject = {
      ScheduleName: params["ScheduleName"],
      S3BucketName: params["S3BucketName"],
      S3KeyPrefix: params["S3KeyPrefix"],
      Format: params["Format"],
      ContentRange: fromBusinessReportContentRange(params["ContentRange"]),
      Recurrence: fromBusinessReportRecurrence(params["Recurrence"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBusinessReportSchedule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ScheduleArn": "s",
      },
    }, await resp.json());
  }

  async createConferenceProvider(
    {abortSignal, ...params}: RequestConfig & s.CreateConferenceProviderRequest,
  ): Promise<s.CreateConferenceProviderResponse> {
    const body: jsonP.JSONObject = {
      ConferenceProviderName: params["ConferenceProviderName"],
      ConferenceProviderType: params["ConferenceProviderType"],
      IPDialIn: fromIPDialIn(params["IPDialIn"]),
      PSTNDialIn: fromPSTNDialIn(params["PSTNDialIn"]),
      MeetingSetting: fromMeetingSetting(params["MeetingSetting"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConferenceProvider",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConferenceProviderArn": "s",
      },
    }, await resp.json());
  }

  async createContact(
    {abortSignal, ...params}: RequestConfig & s.CreateContactRequest,
  ): Promise<s.CreateContactResponse> {
    const body: jsonP.JSONObject = {
      DisplayName: params["DisplayName"],
      FirstName: params["FirstName"],
      LastName: params["LastName"],
      PhoneNumber: params["PhoneNumber"],
      PhoneNumbers: params["PhoneNumbers"]?.map(x => fromPhoneNumber(x)),
      SipAddresses: params["SipAddresses"]?.map(x => fromSipAddress(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactArn": "s",
      },
    }, await resp.json());
  }

  async createGatewayGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateGatewayGroupRequest,
  ): Promise<s.CreateGatewayGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGatewayGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GatewayGroupArn": "s",
      },
    }, await resp.json());
  }

  async createNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateNetworkProfileRequest,
  ): Promise<s.CreateNetworkProfileResponse> {
    const body: jsonP.JSONObject = {
      NetworkProfileName: params["NetworkProfileName"],
      Description: params["Description"],
      Ssid: params["Ssid"],
      SecurityType: params["SecurityType"],
      EapMethod: params["EapMethod"],
      CurrentPassword: params["CurrentPassword"],
      NextPassword: params["NextPassword"],
      CertificateAuthorityArn: params["CertificateAuthorityArn"],
      TrustAnchors: params["TrustAnchors"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NetworkProfileArn": "s",
      },
    }, await resp.json());
  }

  async createProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateProfileRequest,
  ): Promise<s.CreateProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileName: params["ProfileName"],
      Timezone: params["Timezone"],
      Address: params["Address"],
      DistanceUnit: params["DistanceUnit"],
      TemperatureUnit: params["TemperatureUnit"],
      WakeWord: params["WakeWord"],
      Locale: params["Locale"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      SetupModeDisabled: params["SetupModeDisabled"],
      MaxVolumeLimit: params["MaxVolumeLimit"],
      PSTNEnabled: params["PSTNEnabled"],
      MeetingRoomConfiguration: fromCreateMeetingRoomConfiguration(params["MeetingRoomConfiguration"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProfileArn": "s",
      },
    }, await resp.json());
  }

  async createRoom(
    {abortSignal, ...params}: RequestConfig & s.CreateRoomRequest,
  ): Promise<s.CreateRoomResponse> {
    const body: jsonP.JSONObject = {
      RoomName: params["RoomName"],
      Description: params["Description"],
      ProfileArn: params["ProfileArn"],
      ProviderCalendarId: params["ProviderCalendarId"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomArn": "s",
      },
    }, await resp.json());
  }

  async createSkillGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateSkillGroupRequest,
  ): Promise<s.CreateSkillGroupResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupName: params["SkillGroupName"],
      Description: params["Description"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSkillGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SkillGroupArn": "s",
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & s.CreateUserRequest,
  ): Promise<s.CreateUserResponse> {
    const body: jsonP.JSONObject = {
      UserId: params["UserId"],
      FirstName: params["FirstName"],
      LastName: params["LastName"],
      Email: params["Email"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserArn": "s",
      },
    }, await resp.json());
  }

  async deleteAddressBook(
    {abortSignal, ...params}: RequestConfig & s.DeleteAddressBookRequest,
  ): Promise<s.DeleteAddressBookResponse> {
    const body: jsonP.JSONObject = {
      AddressBookArn: params["AddressBookArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAddressBook",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteBusinessReportSchedule(
    {abortSignal, ...params}: RequestConfig & s.DeleteBusinessReportScheduleRequest,
  ): Promise<s.DeleteBusinessReportScheduleResponse> {
    const body: jsonP.JSONObject = {
      ScheduleArn: params["ScheduleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBusinessReportSchedule",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteConferenceProvider(
    {abortSignal, ...params}: RequestConfig & s.DeleteConferenceProviderRequest,
  ): Promise<s.DeleteConferenceProviderResponse> {
    const body: jsonP.JSONObject = {
      ConferenceProviderArn: params["ConferenceProviderArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConferenceProvider",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteContact(
    {abortSignal, ...params}: RequestConfig & s.DeleteContactRequest,
  ): Promise<s.DeleteContactResponse> {
    const body: jsonP.JSONObject = {
      ContactArn: params["ContactArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteContact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDevice(
    {abortSignal, ...params}: RequestConfig & s.DeleteDeviceRequest,
  ): Promise<s.DeleteDeviceResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDevice",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDeviceUsageData(
    {abortSignal, ...params}: RequestConfig & s.DeleteDeviceUsageDataRequest,
  ): Promise<s.DeleteDeviceUsageDataResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
      DeviceUsageType: params["DeviceUsageType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDeviceUsageData",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGatewayGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteGatewayGroupRequest,
  ): Promise<s.DeleteGatewayGroupResponse> {
    const body: jsonP.JSONObject = {
      GatewayGroupArn: params["GatewayGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGatewayGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteNetworkProfileRequest,
  ): Promise<s.DeleteNetworkProfileResponse> {
    const body: jsonP.JSONObject = {
      NetworkProfileArn: params["NetworkProfileArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteProfileRequest = {},
  ): Promise<s.DeleteProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileArn: params["ProfileArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRoom(
    {abortSignal, ...params}: RequestConfig & s.DeleteRoomRequest = {},
  ): Promise<s.DeleteRoomResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRoomSkillParameter(
    {abortSignal, ...params}: RequestConfig & s.DeleteRoomSkillParameterRequest,
  ): Promise<s.DeleteRoomSkillParameterResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
      SkillId: params["SkillId"],
      ParameterKey: params["ParameterKey"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRoomSkillParameter",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSkillAuthorization(
    {abortSignal, ...params}: RequestConfig & s.DeleteSkillAuthorizationRequest,
  ): Promise<s.DeleteSkillAuthorizationResponse> {
    const body: jsonP.JSONObject = {
      SkillId: params["SkillId"],
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSkillAuthorization",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSkillGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteSkillGroupRequest = {},
  ): Promise<s.DeleteSkillGroupResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSkillGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & s.DeleteUserRequest,
  ): Promise<s.DeleteUserResponse> {
    const body: jsonP.JSONObject = {
      UserArn: params["UserArn"],
      EnrollmentId: params["EnrollmentId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateContactFromAddressBook(
    {abortSignal, ...params}: RequestConfig & s.DisassociateContactFromAddressBookRequest,
  ): Promise<s.DisassociateContactFromAddressBookResponse> {
    const body: jsonP.JSONObject = {
      ContactArn: params["ContactArn"],
      AddressBookArn: params["AddressBookArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateContactFromAddressBook",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDeviceFromRoom(
    {abortSignal, ...params}: RequestConfig & s.DisassociateDeviceFromRoomRequest = {},
  ): Promise<s.DisassociateDeviceFromRoomResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDeviceFromRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateSkillFromSkillGroup(
    {abortSignal, ...params}: RequestConfig & s.DisassociateSkillFromSkillGroupRequest,
  ): Promise<s.DisassociateSkillFromSkillGroupResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
      SkillId: params["SkillId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSkillFromSkillGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateSkillFromUsers(
    {abortSignal, ...params}: RequestConfig & s.DisassociateSkillFromUsersRequest,
  ): Promise<s.DisassociateSkillFromUsersResponse> {
    const body: jsonP.JSONObject = {
      SkillId: params["SkillId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSkillFromUsers",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateSkillGroupFromRoom(
    {abortSignal, ...params}: RequestConfig & s.DisassociateSkillGroupFromRoomRequest = {},
  ): Promise<s.DisassociateSkillGroupFromRoomResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSkillGroupFromRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async forgetSmartHomeAppliances(
    {abortSignal, ...params}: RequestConfig & s.ForgetSmartHomeAppliancesRequest,
  ): Promise<s.ForgetSmartHomeAppliancesResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ForgetSmartHomeAppliances",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAddressBook(
    {abortSignal, ...params}: RequestConfig & s.GetAddressBookRequest,
  ): Promise<s.GetAddressBookResponse> {
    const body: jsonP.JSONObject = {
      AddressBookArn: params["AddressBookArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAddressBook",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AddressBook": toAddressBook,
      },
    }, await resp.json());
  }

  async getConferencePreference(
    {abortSignal, ...params}: RequestConfig & s.GetConferencePreferenceRequest = {},
  ): Promise<s.GetConferencePreferenceResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConferencePreference",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Preference": toConferencePreference,
      },
    }, await resp.json());
  }

  async getConferenceProvider(
    {abortSignal, ...params}: RequestConfig & s.GetConferenceProviderRequest,
  ): Promise<s.GetConferenceProviderResponse> {
    const body: jsonP.JSONObject = {
      ConferenceProviderArn: params["ConferenceProviderArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConferenceProvider",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConferenceProvider": toConferenceProvider,
      },
    }, await resp.json());
  }

  async getContact(
    {abortSignal, ...params}: RequestConfig & s.GetContactRequest,
  ): Promise<s.GetContactResponse> {
    const body: jsonP.JSONObject = {
      ContactArn: params["ContactArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetContact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Contact": toContact,
      },
    }, await resp.json());
  }

  async getDevice(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceRequest = {},
  ): Promise<s.GetDeviceResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevice",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Device": toDevice,
      },
    }, await resp.json());
  }

  async getGateway(
    {abortSignal, ...params}: RequestConfig & s.GetGatewayRequest,
  ): Promise<s.GetGatewayResponse> {
    const body: jsonP.JSONObject = {
      GatewayArn: params["GatewayArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGateway",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Gateway": toGateway,
      },
    }, await resp.json());
  }

  async getGatewayGroup(
    {abortSignal, ...params}: RequestConfig & s.GetGatewayGroupRequest,
  ): Promise<s.GetGatewayGroupResponse> {
    const body: jsonP.JSONObject = {
      GatewayGroupArn: params["GatewayGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGatewayGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GatewayGroup": toGatewayGroup,
      },
    }, await resp.json());
  }

  async getInvitationConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetInvitationConfigurationRequest = {},
  ): Promise<s.GetInvitationConfigurationResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInvitationConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationName": "s",
        "ContactEmail": "s",
        "PrivateSkillIds": ["s"],
      },
    }, await resp.json());
  }

  async getNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.GetNetworkProfileRequest,
  ): Promise<s.GetNetworkProfileResponse> {
    const body: jsonP.JSONObject = {
      NetworkProfileArn: params["NetworkProfileArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NetworkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async getProfile(
    {abortSignal, ...params}: RequestConfig & s.GetProfileRequest = {},
  ): Promise<s.GetProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileArn: params["ProfileArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Profile": toProfile,
      },
    }, await resp.json());
  }

  async getRoom(
    {abortSignal, ...params}: RequestConfig & s.GetRoomRequest = {},
  ): Promise<s.GetRoomResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async getRoomSkillParameter(
    {abortSignal, ...params}: RequestConfig & s.GetRoomSkillParameterRequest,
  ): Promise<s.GetRoomSkillParameterResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
      SkillId: params["SkillId"],
      ParameterKey: params["ParameterKey"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRoomSkillParameter",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomSkillParameter": toRoomSkillParameter,
      },
    }, await resp.json());
  }

  async getSkillGroup(
    {abortSignal, ...params}: RequestConfig & s.GetSkillGroupRequest = {},
  ): Promise<s.GetSkillGroupResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSkillGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SkillGroup": toSkillGroup,
      },
    }, await resp.json());
  }

  async listBusinessReportSchedules(
    {abortSignal, ...params}: RequestConfig & s.ListBusinessReportSchedulesRequest = {},
  ): Promise<s.ListBusinessReportSchedulesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBusinessReportSchedules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BusinessReportSchedules": [toBusinessReportSchedule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConferenceProviders(
    {abortSignal, ...params}: RequestConfig & s.ListConferenceProvidersRequest = {},
  ): Promise<s.ListConferenceProvidersResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConferenceProviders",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConferenceProviders": [toConferenceProvider],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeviceEvents(
    {abortSignal, ...params}: RequestConfig & s.ListDeviceEventsRequest,
  ): Promise<s.ListDeviceEventsResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
      EventType: params["EventType"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDeviceEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceEvents": [toDeviceEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGatewayGroups(
    {abortSignal, ...params}: RequestConfig & s.ListGatewayGroupsRequest = {},
  ): Promise<s.ListGatewayGroupsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGatewayGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GatewayGroups": [toGatewayGroupSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGateways(
    {abortSignal, ...params}: RequestConfig & s.ListGatewaysRequest = {},
  ): Promise<s.ListGatewaysResponse> {
    const body: jsonP.JSONObject = {
      GatewayGroupArn: params["GatewayGroupArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGateways",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Gateways": [toGatewaySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSkills(
    {abortSignal, ...params}: RequestConfig & s.ListSkillsRequest = {},
  ): Promise<s.ListSkillsResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
      EnablementType: params["EnablementType"],
      SkillType: params["SkillType"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSkills",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SkillSummaries": [toSkillSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSkillsStoreCategories(
    {abortSignal, ...params}: RequestConfig & s.ListSkillsStoreCategoriesRequest = {},
  ): Promise<s.ListSkillsStoreCategoriesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSkillsStoreCategories",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CategoryList": [toCategory],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSkillsStoreSkillsByCategory(
    {abortSignal, ...params}: RequestConfig & s.ListSkillsStoreSkillsByCategoryRequest,
  ): Promise<s.ListSkillsStoreSkillsByCategoryResponse> {
    const body: jsonP.JSONObject = {
      CategoryId: params["CategoryId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSkillsStoreSkillsByCategory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SkillsStoreSkills": [toSkillsStoreSkill],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSmartHomeAppliances(
    {abortSignal, ...params}: RequestConfig & s.ListSmartHomeAppliancesRequest,
  ): Promise<s.ListSmartHomeAppliancesResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSmartHomeAppliances",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SmartHomeAppliances": [toSmartHomeAppliance],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & s.ListTagsRequest,
  ): Promise<s.ListTagsResponse> {
    const body: jsonP.JSONObject = {
      Arn: params["Arn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putConferencePreference(
    {abortSignal, ...params}: RequestConfig & s.PutConferencePreferenceRequest,
  ): Promise<s.PutConferencePreferenceResponse> {
    const body: jsonP.JSONObject = {
      ConferencePreference: fromConferencePreference(params["ConferencePreference"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConferencePreference",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putInvitationConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutInvitationConfigurationRequest,
  ): Promise<s.PutInvitationConfigurationResponse> {
    const body: jsonP.JSONObject = {
      OrganizationName: params["OrganizationName"],
      ContactEmail: params["ContactEmail"],
      PrivateSkillIds: params["PrivateSkillIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInvitationConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putRoomSkillParameter(
    {abortSignal, ...params}: RequestConfig & s.PutRoomSkillParameterRequest,
  ): Promise<s.PutRoomSkillParameterResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
      SkillId: params["SkillId"],
      RoomSkillParameter: fromRoomSkillParameter(params["RoomSkillParameter"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRoomSkillParameter",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putSkillAuthorization(
    {abortSignal, ...params}: RequestConfig & s.PutSkillAuthorizationRequest,
  ): Promise<s.PutSkillAuthorizationResponse> {
    const body: jsonP.JSONObject = {
      AuthorizationResult: params["AuthorizationResult"],
      SkillId: params["SkillId"],
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutSkillAuthorization",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async registerAVSDevice(
    {abortSignal, ...params}: RequestConfig & s.RegisterAVSDeviceRequest,
  ): Promise<s.RegisterAVSDeviceResponse> {
    const body: jsonP.JSONObject = {
      ClientId: params["ClientId"],
      UserCode: params["UserCode"],
      ProductId: params["ProductId"],
      DeviceSerialNumber: params["DeviceSerialNumber"],
      AmazonId: params["AmazonId"],
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterAVSDevice",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceArn": "s",
      },
    }, await resp.json());
  }

  async rejectSkill(
    {abortSignal, ...params}: RequestConfig & s.RejectSkillRequest,
  ): Promise<s.RejectSkillResponse> {
    const body: jsonP.JSONObject = {
      SkillId: params["SkillId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectSkill",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async resolveRoom(
    {abortSignal, ...params}: RequestConfig & s.ResolveRoomRequest,
  ): Promise<s.ResolveRoomResponse> {
    const body: jsonP.JSONObject = {
      UserId: params["UserId"],
      SkillId: params["SkillId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResolveRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomArn": "s",
        "RoomName": "s",
        "RoomSkillParameters": [toRoomSkillParameter],
      },
    }, await resp.json());
  }

  async revokeInvitation(
    {abortSignal, ...params}: RequestConfig & s.RevokeInvitationRequest = {},
  ): Promise<s.RevokeInvitationResponse> {
    const body: jsonP.JSONObject = {
      UserArn: params["UserArn"],
      EnrollmentId: params["EnrollmentId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RevokeInvitation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async searchAddressBooks(
    {abortSignal, ...params}: RequestConfig & s.SearchAddressBooksRequest = {},
  ): Promise<s.SearchAddressBooksResponse> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchAddressBooks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AddressBooks": [toAddressBookData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchContacts(
    {abortSignal, ...params}: RequestConfig & s.SearchContactsRequest = {},
  ): Promise<s.SearchContactsResponse> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchContacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Contacts": [toContactData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchDevices(
    {abortSignal, ...params}: RequestConfig & s.SearchDevicesRequest = {},
  ): Promise<s.SearchDevicesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchDevices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Devices": [toDeviceData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchNetworkProfiles(
    {abortSignal, ...params}: RequestConfig & s.SearchNetworkProfilesRequest = {},
  ): Promise<s.SearchNetworkProfilesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchNetworkProfiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NetworkProfiles": [toNetworkProfileData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchProfiles(
    {abortSignal, ...params}: RequestConfig & s.SearchProfilesRequest = {},
  ): Promise<s.SearchProfilesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProfiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Profiles": [toProfileData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchRooms(
    {abortSignal, ...params}: RequestConfig & s.SearchRoomsRequest = {},
  ): Promise<s.SearchRoomsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchRooms",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rooms": [toRoomData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchSkillGroups(
    {abortSignal, ...params}: RequestConfig & s.SearchSkillGroupsRequest = {},
  ): Promise<s.SearchSkillGroupsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchSkillGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SkillGroups": [toSkillGroupData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async searchUsers(
    {abortSignal, ...params}: RequestConfig & s.SearchUsersRequest = {},
  ): Promise<s.SearchUsersResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      SortCriteria: params["SortCriteria"]?.map(x => fromSort(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchUsers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Users": [toUserData],
        "NextToken": "s",
        "TotalCount": "n",
      },
    }, await resp.json());
  }

  async sendAnnouncement(
    {abortSignal, ...params}: RequestConfig & s.SendAnnouncementRequest,
  ): Promise<s.SendAnnouncementResponse> {
    const body: jsonP.JSONObject = {
      RoomFilters: params["RoomFilters"]?.map(x => fromFilter(x)),
      Content: fromContent(params["Content"]),
      TimeToLiveInSeconds: params["TimeToLiveInSeconds"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendAnnouncement",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnnouncementArn": "s",
      },
    }, await resp.json());
  }

  async sendInvitation(
    {abortSignal, ...params}: RequestConfig & s.SendInvitationRequest = {},
  ): Promise<s.SendInvitationResponse> {
    const body: jsonP.JSONObject = {
      UserArn: params["UserArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendInvitation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startDeviceSync(
    {abortSignal, ...params}: RequestConfig & s.StartDeviceSyncRequest,
  ): Promise<s.StartDeviceSyncResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
      DeviceArn: params["DeviceArn"],
      Features: params["Features"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDeviceSync",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startSmartHomeApplianceDiscovery(
    {abortSignal, ...params}: RequestConfig & s.StartSmartHomeApplianceDiscoveryRequest,
  ): Promise<s.StartSmartHomeApplianceDiscoveryResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSmartHomeApplianceDiscovery",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      Arn: params["Arn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      Arn: params["Arn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAddressBook(
    {abortSignal, ...params}: RequestConfig & s.UpdateAddressBookRequest,
  ): Promise<s.UpdateAddressBookResponse> {
    const body: jsonP.JSONObject = {
      AddressBookArn: params["AddressBookArn"],
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAddressBook",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateBusinessReportSchedule(
    {abortSignal, ...params}: RequestConfig & s.UpdateBusinessReportScheduleRequest,
  ): Promise<s.UpdateBusinessReportScheduleResponse> {
    const body: jsonP.JSONObject = {
      ScheduleArn: params["ScheduleArn"],
      S3BucketName: params["S3BucketName"],
      S3KeyPrefix: params["S3KeyPrefix"],
      Format: params["Format"],
      ScheduleName: params["ScheduleName"],
      Recurrence: fromBusinessReportRecurrence(params["Recurrence"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBusinessReportSchedule",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateConferenceProvider(
    {abortSignal, ...params}: RequestConfig & s.UpdateConferenceProviderRequest,
  ): Promise<s.UpdateConferenceProviderResponse> {
    const body: jsonP.JSONObject = {
      ConferenceProviderArn: params["ConferenceProviderArn"],
      ConferenceProviderType: params["ConferenceProviderType"],
      IPDialIn: fromIPDialIn(params["IPDialIn"]),
      PSTNDialIn: fromPSTNDialIn(params["PSTNDialIn"]),
      MeetingSetting: fromMeetingSetting(params["MeetingSetting"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConferenceProvider",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateContact(
    {abortSignal, ...params}: RequestConfig & s.UpdateContactRequest,
  ): Promise<s.UpdateContactResponse> {
    const body: jsonP.JSONObject = {
      ContactArn: params["ContactArn"],
      DisplayName: params["DisplayName"],
      FirstName: params["FirstName"],
      LastName: params["LastName"],
      PhoneNumber: params["PhoneNumber"],
      PhoneNumbers: params["PhoneNumbers"]?.map(x => fromPhoneNumber(x)),
      SipAddresses: params["SipAddresses"]?.map(x => fromSipAddress(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDevice(
    {abortSignal, ...params}: RequestConfig & s.UpdateDeviceRequest = {},
  ): Promise<s.UpdateDeviceResponse> {
    const body: jsonP.JSONObject = {
      DeviceArn: params["DeviceArn"],
      DeviceName: params["DeviceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDevice",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGateway(
    {abortSignal, ...params}: RequestConfig & s.UpdateGatewayRequest,
  ): Promise<s.UpdateGatewayResponse> {
    const body: jsonP.JSONObject = {
      GatewayArn: params["GatewayArn"],
      Name: params["Name"],
      Description: params["Description"],
      SoftwareVersion: params["SoftwareVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGateway",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGatewayGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateGatewayGroupRequest,
  ): Promise<s.UpdateGatewayGroupResponse> {
    const body: jsonP.JSONObject = {
      GatewayGroupArn: params["GatewayGroupArn"],
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGatewayGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateNetworkProfileRequest,
  ): Promise<s.UpdateNetworkProfileResponse> {
    const body: jsonP.JSONObject = {
      NetworkProfileArn: params["NetworkProfileArn"],
      NetworkProfileName: params["NetworkProfileName"],
      Description: params["Description"],
      CurrentPassword: params["CurrentPassword"],
      NextPassword: params["NextPassword"],
      CertificateAuthorityArn: params["CertificateAuthorityArn"],
      TrustAnchors: params["TrustAnchors"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateProfileRequest = {},
  ): Promise<s.UpdateProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileArn: params["ProfileArn"],
      ProfileName: params["ProfileName"],
      IsDefault: params["IsDefault"],
      Timezone: params["Timezone"],
      Address: params["Address"],
      DistanceUnit: params["DistanceUnit"],
      TemperatureUnit: params["TemperatureUnit"],
      WakeWord: params["WakeWord"],
      Locale: params["Locale"],
      SetupModeDisabled: params["SetupModeDisabled"],
      MaxVolumeLimit: params["MaxVolumeLimit"],
      PSTNEnabled: params["PSTNEnabled"],
      MeetingRoomConfiguration: fromUpdateMeetingRoomConfiguration(params["MeetingRoomConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRoom(
    {abortSignal, ...params}: RequestConfig & s.UpdateRoomRequest = {},
  ): Promise<s.UpdateRoomResponse> {
    const body: jsonP.JSONObject = {
      RoomArn: params["RoomArn"],
      RoomName: params["RoomName"],
      Description: params["Description"],
      ProviderCalendarId: params["ProviderCalendarId"],
      ProfileArn: params["ProfileArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoom",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSkillGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateSkillGroupRequest = {},
  ): Promise<s.UpdateSkillGroupResponse> {
    const body: jsonP.JSONObject = {
      SkillGroupArn: params["SkillGroupArn"],
      SkillGroupName: params["SkillGroupName"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSkillGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromBusinessReportContentRange(input?: s.BusinessReportContentRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Interval: input["Interval"],
  }
}
function toBusinessReportContentRange(root: jsonP.JSONValue): s.BusinessReportContentRange {
  return jsonP.readObj({
    required: {
      "Interval": (x: jsonP.JSONValue) => cmnP.readEnum<s.BusinessReportInterval>(x),
    },
    optional: {},
  }, root);
}

function fromBusinessReportRecurrence(input?: s.BusinessReportRecurrence | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StartDate: input["StartDate"],
  }
}
function toBusinessReportRecurrence(root: jsonP.JSONValue): s.BusinessReportRecurrence {
  return jsonP.readObj({
    required: {},
    optional: {
      "StartDate": "s",
    },
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromIPDialIn(input?: s.IPDialIn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Endpoint: input["Endpoint"],
    CommsProtocol: input["CommsProtocol"],
  }
}
function toIPDialIn(root: jsonP.JSONValue): s.IPDialIn {
  return jsonP.readObj({
    required: {
      "Endpoint": "s",
      "CommsProtocol": (x: jsonP.JSONValue) => cmnP.readEnum<s.CommsProtocol>(x),
    },
    optional: {},
  }, root);
}

function fromPSTNDialIn(input?: s.PSTNDialIn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CountryCode: input["CountryCode"],
    PhoneNumber: input["PhoneNumber"],
    OneClickIdDelay: input["OneClickIdDelay"],
    OneClickPinDelay: input["OneClickPinDelay"],
  }
}
function toPSTNDialIn(root: jsonP.JSONValue): s.PSTNDialIn {
  return jsonP.readObj({
    required: {
      "CountryCode": "s",
      "PhoneNumber": "s",
      "OneClickIdDelay": "s",
      "OneClickPinDelay": "s",
    },
    optional: {},
  }, root);
}

function fromMeetingSetting(input?: s.MeetingSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RequirePin: input["RequirePin"],
  }
}
function toMeetingSetting(root: jsonP.JSONValue): s.MeetingSetting {
  return jsonP.readObj({
    required: {
      "RequirePin": (x: jsonP.JSONValue) => cmnP.readEnum<s.RequirePin>(x),
    },
    optional: {},
  }, root);
}

function fromPhoneNumber(input?: s.PhoneNumber | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Number: input["Number"],
    Type: input["Type"],
  }
}
function toPhoneNumber(root: jsonP.JSONValue): s.PhoneNumber {
  return jsonP.readObj({
    required: {
      "Number": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberType>(x),
    },
    optional: {},
  }, root);
}

function fromSipAddress(input?: s.SipAddress | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Uri: input["Uri"],
    Type: input["Type"],
  }
}
function toSipAddress(root: jsonP.JSONValue): s.SipAddress {
  return jsonP.readObj({
    required: {
      "Uri": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.SipType>(x),
    },
    optional: {},
  }, root);
}

function fromCreateMeetingRoomConfiguration(input?: s.CreateMeetingRoomConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoomUtilizationMetricsEnabled: input["RoomUtilizationMetricsEnabled"],
    EndOfMeetingReminder: fromCreateEndOfMeetingReminder(input["EndOfMeetingReminder"]),
    InstantBooking: fromCreateInstantBooking(input["InstantBooking"]),
    RequireCheckIn: fromCreateRequireCheckIn(input["RequireCheckIn"]),
  }
}

function fromCreateEndOfMeetingReminder(input?: s.CreateEndOfMeetingReminder | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReminderAtMinutes: input["ReminderAtMinutes"],
    ReminderType: input["ReminderType"],
    Enabled: input["Enabled"],
  }
}

function fromCreateInstantBooking(input?: s.CreateInstantBooking | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DurationInMinutes: input["DurationInMinutes"],
    Enabled: input["Enabled"],
  }
}

function fromCreateRequireCheckIn(input?: s.CreateRequireCheckIn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReleaseAfterMinutes: input["ReleaseAfterMinutes"],
    Enabled: input["Enabled"],
  }
}

function fromConferencePreference(input?: s.ConferencePreference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DefaultConferenceProviderArn: input["DefaultConferenceProviderArn"],
  }
}
function toConferencePreference(root: jsonP.JSONValue): s.ConferencePreference {
  return jsonP.readObj({
    required: {},
    optional: {
      "DefaultConferenceProviderArn": "s",
    },
  }, root);
}

function fromRoomSkillParameter(input?: s.RoomSkillParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ParameterKey: input["ParameterKey"],
    ParameterValue: input["ParameterValue"],
  }
}
function toRoomSkillParameter(root: jsonP.JSONValue): s.RoomSkillParameter {
  return jsonP.readObj({
    required: {
      "ParameterKey": "s",
      "ParameterValue": "s",
    },
    optional: {},
  }, root);
}

function fromFilter(input?: s.Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

function fromSort(input?: s.Sort | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

function fromContent(input?: s.Content | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TextList: input["TextList"]?.map(x => fromText(x)),
    SsmlList: input["SsmlList"]?.map(x => fromSsml(x)),
    AudioList: input["AudioList"]?.map(x => fromAudio(x)),
  }
}

function fromText(input?: s.Text | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Locale: input["Locale"],
    Value: input["Value"],
  }
}

function fromSsml(input?: s.Ssml | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Locale: input["Locale"],
    Value: input["Value"],
  }
}

function fromAudio(input?: s.Audio | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Locale: input["Locale"],
    Location: input["Location"],
  }
}

function fromUpdateMeetingRoomConfiguration(input?: s.UpdateMeetingRoomConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoomUtilizationMetricsEnabled: input["RoomUtilizationMetricsEnabled"],
    EndOfMeetingReminder: fromUpdateEndOfMeetingReminder(input["EndOfMeetingReminder"]),
    InstantBooking: fromUpdateInstantBooking(input["InstantBooking"]),
    RequireCheckIn: fromUpdateRequireCheckIn(input["RequireCheckIn"]),
  }
}

function fromUpdateEndOfMeetingReminder(input?: s.UpdateEndOfMeetingReminder | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReminderAtMinutes: input["ReminderAtMinutes"],
    ReminderType: input["ReminderType"],
    Enabled: input["Enabled"],
  }
}

function fromUpdateInstantBooking(input?: s.UpdateInstantBooking | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DurationInMinutes: input["DurationInMinutes"],
    Enabled: input["Enabled"],
  }
}

function fromUpdateRequireCheckIn(input?: s.UpdateRequireCheckIn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReleaseAfterMinutes: input["ReleaseAfterMinutes"],
    Enabled: input["Enabled"],
  }
}

function toAddressBook(root: jsonP.JSONValue): s.AddressBook {
  return jsonP.readObj({
    required: {},
    optional: {
      "AddressBookArn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

function toConferenceProvider(root: jsonP.JSONValue): s.ConferenceProvider {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConferenceProviderType>(x),
      "IPDialIn": toIPDialIn,
      "PSTNDialIn": toPSTNDialIn,
      "MeetingSetting": toMeetingSetting,
    },
  }, root);
}

function toContact(root: jsonP.JSONValue): s.Contact {
  return jsonP.readObj({
    required: {},
    optional: {
      "ContactArn": "s",
      "DisplayName": "s",
      "FirstName": "s",
      "LastName": "s",
      "PhoneNumber": "s",
      "PhoneNumbers": [toPhoneNumber],
      "SipAddresses": [toSipAddress],
    },
  }, root);
}

function toDevice(root: jsonP.JSONValue): s.Device {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceArn": "s",
      "DeviceSerialNumber": "s",
      "DeviceType": "s",
      "DeviceName": "s",
      "SoftwareVersion": "s",
      "MacAddress": "s",
      "RoomArn": "s",
      "DeviceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceStatus>(x),
      "DeviceStatusInfo": toDeviceStatusInfo,
      "NetworkProfileInfo": toDeviceNetworkProfileInfo,
    },
  }, root);
}

function toDeviceStatusInfo(root: jsonP.JSONValue): s.DeviceStatusInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceStatusDetails": [toDeviceStatusDetail],
      "ConnectionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectionStatus>(x),
      "ConnectionStatusUpdatedTime": "d",
    },
  }, root);
}

function toDeviceStatusDetail(root: jsonP.JSONValue): s.DeviceStatusDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Feature": (x: jsonP.JSONValue) => cmnP.readEnum<s.Feature>(x),
      "Code": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceStatusDetailCode>(x),
    },
  }, root);
}

function toDeviceNetworkProfileInfo(root: jsonP.JSONValue): s.DeviceNetworkProfileInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "NetworkProfileArn": "s",
      "CertificateArn": "s",
      "CertificateExpirationTime": "d",
    },
  }, root);
}

function toGateway(root: jsonP.JSONValue): s.Gateway {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
      "GatewayGroupArn": "s",
      "SoftwareVersion": "s",
    },
  }, root);
}

function toGatewayGroup(root: jsonP.JSONValue): s.GatewayGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

function toNetworkProfile(root: jsonP.JSONValue): s.NetworkProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "NetworkProfileArn": "s",
      "NetworkProfileName": "s",
      "Description": "s",
      "Ssid": "s",
      "SecurityType": (x: jsonP.JSONValue) => cmnP.readEnum<s.NetworkSecurityType>(x),
      "EapMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.NetworkEapMethod>(x),
      "CurrentPassword": "s",
      "NextPassword": "s",
      "CertificateAuthorityArn": "s",
      "TrustAnchors": ["s"],
    },
  }, root);
}

function toProfile(root: jsonP.JSONValue): s.Profile {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProfileArn": "s",
      "ProfileName": "s",
      "IsDefault": "b",
      "Address": "s",
      "Timezone": "s",
      "DistanceUnit": (x: jsonP.JSONValue) => cmnP.readEnum<s.DistanceUnit>(x),
      "TemperatureUnit": (x: jsonP.JSONValue) => cmnP.readEnum<s.TemperatureUnit>(x),
      "WakeWord": (x: jsonP.JSONValue) => cmnP.readEnum<s.WakeWord>(x),
      "Locale": "s",
      "SetupModeDisabled": "b",
      "MaxVolumeLimit": "n",
      "PSTNEnabled": "b",
      "AddressBookArn": "s",
      "MeetingRoomConfiguration": toMeetingRoomConfiguration,
    },
  }, root);
}

function toMeetingRoomConfiguration(root: jsonP.JSONValue): s.MeetingRoomConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomUtilizationMetricsEnabled": "b",
      "EndOfMeetingReminder": toEndOfMeetingReminder,
      "InstantBooking": toInstantBooking,
      "RequireCheckIn": toRequireCheckIn,
    },
  }, root);
}

function toEndOfMeetingReminder(root: jsonP.JSONValue): s.EndOfMeetingReminder {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReminderAtMinutes": ["n"],
      "ReminderType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EndOfMeetingReminderType>(x),
      "Enabled": "b",
    },
  }, root);
}

function toInstantBooking(root: jsonP.JSONValue): s.InstantBooking {
  return jsonP.readObj({
    required: {},
    optional: {
      "DurationInMinutes": "n",
      "Enabled": "b",
    },
  }, root);
}

function toRequireCheckIn(root: jsonP.JSONValue): s.RequireCheckIn {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReleaseAfterMinutes": "n",
      "Enabled": "b",
    },
  }, root);
}

function toRoom(root: jsonP.JSONValue): s.Room {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomArn": "s",
      "RoomName": "s",
      "Description": "s",
      "ProviderCalendarId": "s",
      "ProfileArn": "s",
    },
  }, root);
}

function toSkillGroup(root: jsonP.JSONValue): s.SkillGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "SkillGroupArn": "s",
      "SkillGroupName": "s",
      "Description": "s",
    },
  }, root);
}

function toBusinessReportSchedule(root: jsonP.JSONValue): s.BusinessReportSchedule {
  return jsonP.readObj({
    required: {},
    optional: {
      "ScheduleArn": "s",
      "ScheduleName": "s",
      "S3BucketName": "s",
      "S3KeyPrefix": "s",
      "Format": (x: jsonP.JSONValue) => cmnP.readEnum<s.BusinessReportFormat>(x),
      "ContentRange": toBusinessReportContentRange,
      "Recurrence": toBusinessReportRecurrence,
      "LastBusinessReport": toBusinessReport,
    },
  }, root);
}

function toBusinessReport(root: jsonP.JSONValue): s.BusinessReport {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.BusinessReportStatus>(x),
      "FailureCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.BusinessReportFailureCode>(x),
      "S3Location": toBusinessReportS3Location,
      "DeliveryTime": "d",
      "DownloadUrl": "s",
    },
  }, root);
}

function toBusinessReportS3Location(root: jsonP.JSONValue): s.BusinessReportS3Location {
  return jsonP.readObj({
    required: {},
    optional: {
      "Path": "s",
      "BucketName": "s",
    },
  }, root);
}

function toDeviceEvent(root: jsonP.JSONValue): s.DeviceEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceEventType>(x),
      "Value": "s",
      "Timestamp": "d",
    },
  }, root);
}

function toGatewayGroupSummary(root: jsonP.JSONValue): s.GatewayGroupSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

function toGatewaySummary(root: jsonP.JSONValue): s.GatewaySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Description": "s",
      "GatewayGroupArn": "s",
      "SoftwareVersion": "s",
    },
  }, root);
}

function toSkillSummary(root: jsonP.JSONValue): s.SkillSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "SkillId": "s",
      "SkillName": "s",
      "SupportsLinking": "b",
      "EnablementType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EnablementType>(x),
      "SkillType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SkillType>(x),
    },
  }, root);
}

function toCategory(root: jsonP.JSONValue): s.Category {
  return jsonP.readObj({
    required: {},
    optional: {
      "CategoryId": "n",
      "CategoryName": "s",
    },
  }, root);
}

function toSkillsStoreSkill(root: jsonP.JSONValue): s.SkillsStoreSkill {
  return jsonP.readObj({
    required: {},
    optional: {
      "SkillId": "s",
      "SkillName": "s",
      "ShortDescription": "s",
      "IconUrl": "s",
      "SampleUtterances": ["s"],
      "SkillDetails": toSkillDetails,
      "SupportsLinking": "b",
    },
  }, root);
}

function toSkillDetails(root: jsonP.JSONValue): s.SkillDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProductDescription": "s",
      "InvocationPhrase": "s",
      "ReleaseDate": "s",
      "EndUserLicenseAgreement": "s",
      "GenericKeywords": ["s"],
      "BulletPoints": ["s"],
      "NewInThisVersionBulletPoints": ["s"],
      "SkillTypes": ["s"],
      "Reviews": x => jsonP.readMap(String, String, x),
      "DeveloperInfo": toDeveloperInfo,
    },
  }, root);
}

function toDeveloperInfo(root: jsonP.JSONValue): s.DeveloperInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeveloperName": "s",
      "PrivacyPolicy": "s",
      "Email": "s",
      "Url": "s",
    },
  }, root);
}

function toSmartHomeAppliance(root: jsonP.JSONValue): s.SmartHomeAppliance {
  return jsonP.readObj({
    required: {},
    optional: {
      "FriendlyName": "s",
      "Description": "s",
      "ManufacturerName": "s",
    },
  }, root);
}

function toAddressBookData(root: jsonP.JSONValue): s.AddressBookData {
  return jsonP.readObj({
    required: {},
    optional: {
      "AddressBookArn": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

function toContactData(root: jsonP.JSONValue): s.ContactData {
  return jsonP.readObj({
    required: {},
    optional: {
      "ContactArn": "s",
      "DisplayName": "s",
      "FirstName": "s",
      "LastName": "s",
      "PhoneNumber": "s",
      "PhoneNumbers": [toPhoneNumber],
      "SipAddresses": [toSipAddress],
    },
  }, root);
}

function toDeviceData(root: jsonP.JSONValue): s.DeviceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceArn": "s",
      "DeviceSerialNumber": "s",
      "DeviceType": "s",
      "DeviceName": "s",
      "SoftwareVersion": "s",
      "MacAddress": "s",
      "DeviceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceStatus>(x),
      "NetworkProfileArn": "s",
      "NetworkProfileName": "s",
      "RoomArn": "s",
      "RoomName": "s",
      "DeviceStatusInfo": toDeviceStatusInfo,
      "CreatedTime": "d",
    },
  }, root);
}

function toNetworkProfileData(root: jsonP.JSONValue): s.NetworkProfileData {
  return jsonP.readObj({
    required: {},
    optional: {
      "NetworkProfileArn": "s",
      "NetworkProfileName": "s",
      "Description": "s",
      "Ssid": "s",
      "SecurityType": (x: jsonP.JSONValue) => cmnP.readEnum<s.NetworkSecurityType>(x),
      "EapMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.NetworkEapMethod>(x),
      "CertificateAuthorityArn": "s",
    },
  }, root);
}

function toProfileData(root: jsonP.JSONValue): s.ProfileData {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProfileArn": "s",
      "ProfileName": "s",
      "IsDefault": "b",
      "Address": "s",
      "Timezone": "s",
      "DistanceUnit": (x: jsonP.JSONValue) => cmnP.readEnum<s.DistanceUnit>(x),
      "TemperatureUnit": (x: jsonP.JSONValue) => cmnP.readEnum<s.TemperatureUnit>(x),
      "WakeWord": (x: jsonP.JSONValue) => cmnP.readEnum<s.WakeWord>(x),
      "Locale": "s",
    },
  }, root);
}

function toRoomData(root: jsonP.JSONValue): s.RoomData {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomArn": "s",
      "RoomName": "s",
      "Description": "s",
      "ProviderCalendarId": "s",
      "ProfileArn": "s",
      "ProfileName": "s",
    },
  }, root);
}

function toSkillGroupData(root: jsonP.JSONValue): s.SkillGroupData {
  return jsonP.readObj({
    required: {},
    optional: {
      "SkillGroupArn": "s",
      "SkillGroupName": "s",
      "Description": "s",
    },
  }, root);
}

function toUserData(root: jsonP.JSONValue): s.UserData {
  return jsonP.readObj({
    required: {},
    optional: {
      "UserArn": "s",
      "FirstName": "s",
      "LastName": "s",
      "Email": "s",
      "EnrollmentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.EnrollmentStatus>(x),
      "EnrollmentId": "s",
    },
  }, root);
}
