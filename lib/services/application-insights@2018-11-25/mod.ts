// Autogenerated API client for: Amazon CloudWatch Application Insights

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class ApplicationInsights {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ApplicationInsights.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-25",
    "endpointPrefix": "applicationinsights",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Application Insights",
    "serviceFullName": "Amazon CloudWatch Application Insights",
    "serviceId": "Application Insights",
    "signatureVersion": "v4",
    "signingName": "applicationinsights",
    "targetPrefix": "EC2WindowsBarleyService",
    "uid": "application-insights-2018-11-25"
  };

  async createApplication(
    {abortSignal, ...params}: RequestConfig & CreateApplicationRequest,
  ): Promise<CreateApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      OpsCenterEnabled: params["OpsCenterEnabled"],
      CWEMonitorEnabled: params["CWEMonitorEnabled"],
      OpsItemSNSTopicArn: params["OpsItemSNSTopicArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfo": toApplicationInfo,
      },
    }, await resp.json());
  }

  async createComponent(
    {abortSignal, ...params}: RequestConfig & CreateComponentRequest,
  ): Promise<CreateComponentResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      ResourceList: params["ResourceList"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createLogPattern(
    {abortSignal, ...params}: RequestConfig & CreateLogPatternRequest,
  ): Promise<CreateLogPatternResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
      Pattern: params["Pattern"],
      Rank: params["Rank"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LogPattern": toLogPattern,
        "ResourceGroupName": "s",
      },
    }, await resp.json());
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationRequest,
  ): Promise<DeleteApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteComponent(
    {abortSignal, ...params}: RequestConfig & DeleteComponentRequest,
  ): Promise<DeleteComponentResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLogPattern(
    {abortSignal, ...params}: RequestConfig & DeleteLogPatternRequest,
  ): Promise<DeleteLogPatternResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeApplication(
    {abortSignal, ...params}: RequestConfig & DescribeApplicationRequest,
  ): Promise<DescribeApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfo": toApplicationInfo,
      },
    }, await resp.json());
  }

  async describeComponent(
    {abortSignal, ...params}: RequestConfig & DescribeComponentRequest,
  ): Promise<DescribeComponentResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationComponent": toApplicationComponent,
        "ResourceList": ["s"],
      },
    }, await resp.json());
  }

  async describeComponentConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeComponentConfigurationRequest,
  ): Promise<DescribeComponentConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComponentConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Monitor": "b",
        "Tier": (x: jsonP.JSONValue) => cmnP.readEnum<Tier>(x),
        "ComponentConfiguration": "s",
      },
    }, await resp.json());
  }

  async describeComponentConfigurationRecommendation(
    {abortSignal, ...params}: RequestConfig & DescribeComponentConfigurationRecommendationRequest,
  ): Promise<DescribeComponentConfigurationRecommendationResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      Tier: params["Tier"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComponentConfigurationRecommendation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComponentConfiguration": "s",
      },
    }, await resp.json());
  }

  async describeLogPattern(
    {abortSignal, ...params}: RequestConfig & DescribeLogPatternRequest,
  ): Promise<DescribeLogPatternResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPattern": toLogPattern,
      },
    }, await resp.json());
  }

  async describeObservation(
    {abortSignal, ...params}: RequestConfig & DescribeObservationRequest,
  ): Promise<DescribeObservationResponse> {
    const body: jsonP.JSONObject = params ? {
      ObservationId: params["ObservationId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeObservation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Observation": toObservation,
      },
    }, await resp.json());
  }

  async describeProblem(
    {abortSignal, ...params}: RequestConfig & DescribeProblemRequest,
  ): Promise<DescribeProblemResponse> {
    const body: jsonP.JSONObject = params ? {
      ProblemId: params["ProblemId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProblem",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Problem": toProblem,
      },
    }, await resp.json());
  }

  async describeProblemObservations(
    {abortSignal, ...params}: RequestConfig & DescribeProblemObservationsRequest,
  ): Promise<DescribeProblemObservationsResponse> {
    const body: jsonP.JSONObject = params ? {
      ProblemId: params["ProblemId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProblemObservations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RelatedObservations": toRelatedObservations,
      },
    }, await resp.json());
  }

  async listApplications(
    {abortSignal, ...params}: RequestConfig & ListApplicationsRequest = {},
  ): Promise<ListApplicationsResponse> {
    const body: jsonP.JSONObject = params ? {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApplications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfoList": [toApplicationInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listComponents(
    {abortSignal, ...params}: RequestConfig & ListComponentsRequest,
  ): Promise<ListComponentsResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListComponents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationComponentList": [toApplicationComponent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConfigurationHistory(
    {abortSignal, ...params}: RequestConfig & ListConfigurationHistoryRequest = {},
  ): Promise<ListConfigurationHistoryResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      EventStatus: params["EventStatus"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConfigurationHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventList": [toConfigurationEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLogPatternSets(
    {abortSignal, ...params}: RequestConfig & ListLogPatternSetsRequest,
  ): Promise<ListLogPatternSetsResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLogPatternSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPatternSets": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLogPatterns(
    {abortSignal, ...params}: RequestConfig & ListLogPatternsRequest,
  ): Promise<ListLogPatternsResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLogPatterns",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPatterns": [toLogPattern],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProblems(
    {abortSignal, ...params}: RequestConfig & ListProblemsRequest = {},
  ): Promise<ListProblemsResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProblems",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProblemList": [toProblem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceARN: params["ResourceARN"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & UpdateApplicationRequest,
  ): Promise<UpdateApplicationResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      OpsCenterEnabled: params["OpsCenterEnabled"],
      CWEMonitorEnabled: params["CWEMonitorEnabled"],
      OpsItemSNSTopicArn: params["OpsItemSNSTopicArn"],
      RemoveSNSTopic: params["RemoveSNSTopic"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationInfo": toApplicationInfo,
      },
    }, await resp.json());
  }

  async updateComponent(
    {abortSignal, ...params}: RequestConfig & UpdateComponentRequest,
  ): Promise<UpdateComponentResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      NewComponentName: params["NewComponentName"],
      ResourceList: params["ResourceList"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateComponentConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateComponentConfigurationRequest,
  ): Promise<UpdateComponentConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      ComponentName: params["ComponentName"],
      Monitor: params["Monitor"],
      Tier: params["Tier"],
      ComponentConfiguration: params["ComponentConfiguration"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateComponentConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateLogPattern(
    {abortSignal, ...params}: RequestConfig & UpdateLogPatternRequest,
  ): Promise<UpdateLogPatternResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceGroupName: params["ResourceGroupName"],
      PatternSetName: params["PatternSetName"],
      PatternName: params["PatternName"],
      Pattern: params["Pattern"],
      Rank: params["Rank"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLogPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceGroupName": "s",
        "LogPattern": toLogPattern,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateApplicationRequest {
  ResourceGroupName: string;
  OpsCenterEnabled?: boolean | null;
  CWEMonitorEnabled?: boolean | null;
  OpsItemSNSTopicArn?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateComponentRequest {
  ResourceGroupName: string;
  ComponentName: string;
  ResourceList: string[];
}

// refs: 1 - tags: named, input
export interface CreateLogPatternRequest {
  ResourceGroupName: string;
  PatternSetName: string;
  PatternName: string;
  Pattern: string;
  Rank: number;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationRequest {
  ResourceGroupName: string;
}

// refs: 1 - tags: named, input
export interface DeleteComponentRequest {
  ResourceGroupName: string;
  ComponentName: string;
}

// refs: 1 - tags: named, input
export interface DeleteLogPatternRequest {
  ResourceGroupName: string;
  PatternSetName: string;
  PatternName: string;
}

// refs: 1 - tags: named, input
export interface DescribeApplicationRequest {
  ResourceGroupName: string;
}

// refs: 1 - tags: named, input
export interface DescribeComponentRequest {
  ResourceGroupName: string;
  ComponentName: string;
}

// refs: 1 - tags: named, input
export interface DescribeComponentConfigurationRequest {
  ResourceGroupName: string;
  ComponentName: string;
}

// refs: 1 - tags: named, input
export interface DescribeComponentConfigurationRecommendationRequest {
  ResourceGroupName: string;
  ComponentName: string;
  Tier: Tier;
}

// refs: 1 - tags: named, input
export interface DescribeLogPatternRequest {
  ResourceGroupName: string;
  PatternSetName: string;
  PatternName: string;
}

// refs: 1 - tags: named, input
export interface DescribeObservationRequest {
  ObservationId: string;
}

// refs: 1 - tags: named, input
export interface DescribeProblemRequest {
  ProblemId: string;
}

// refs: 1 - tags: named, input
export interface DescribeProblemObservationsRequest {
  ProblemId: string;
}

// refs: 1 - tags: named, input
export interface ListApplicationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListComponentsRequest {
  ResourceGroupName: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConfigurationHistoryRequest {
  ResourceGroupName?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  EventStatus?: ConfigurationEventStatus | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListLogPatternSetsRequest {
  ResourceGroupName: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListLogPatternsRequest {
  ResourceGroupName: string;
  PatternSetName?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProblemsRequest {
  ResourceGroupName?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateApplicationRequest {
  ResourceGroupName: string;
  OpsCenterEnabled?: boolean | null;
  CWEMonitorEnabled?: boolean | null;
  OpsItemSNSTopicArn?: string | null;
  RemoveSNSTopic?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateComponentRequest {
  ResourceGroupName: string;
  ComponentName: string;
  NewComponentName?: string | null;
  ResourceList?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateComponentConfigurationRequest {
  ResourceGroupName: string;
  ComponentName: string;
  Monitor?: boolean | null;
  Tier?: Tier | null;
  ComponentConfiguration?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateLogPatternRequest {
  ResourceGroupName: string;
  PatternSetName: string;
  PatternName: string;
  Pattern?: string | null;
  Rank?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateApplicationResponse {
  ApplicationInfo?: ApplicationInfo | null;
}

// refs: 1 - tags: named, output
export interface CreateComponentResponse {
}

// refs: 1 - tags: named, output
export interface CreateLogPatternResponse {
  LogPattern?: LogPattern | null;
  ResourceGroupName?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteApplicationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteComponentResponse {
}

// refs: 1 - tags: named, output
export interface DeleteLogPatternResponse {
}

// refs: 1 - tags: named, output
export interface DescribeApplicationResponse {
  ApplicationInfo?: ApplicationInfo | null;
}

// refs: 1 - tags: named, output
export interface DescribeComponentResponse {
  ApplicationComponent?: ApplicationComponent | null;
  ResourceList?: string[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeComponentConfigurationResponse {
  Monitor?: boolean | null;
  Tier?: Tier | null;
  ComponentConfiguration?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeComponentConfigurationRecommendationResponse {
  ComponentConfiguration?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeLogPatternResponse {
  ResourceGroupName?: string | null;
  LogPattern?: LogPattern | null;
}

// refs: 1 - tags: named, output
export interface DescribeObservationResponse {
  Observation?: Observation | null;
}

// refs: 1 - tags: named, output
export interface DescribeProblemResponse {
  Problem?: Problem | null;
}

// refs: 1 - tags: named, output
export interface DescribeProblemObservationsResponse {
  RelatedObservations?: RelatedObservations | null;
}

// refs: 1 - tags: named, output
export interface ListApplicationsResponse {
  ApplicationInfoList?: ApplicationInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListComponentsResponse {
  ApplicationComponentList?: ApplicationComponent[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListConfigurationHistoryResponse {
  EventList?: ConfigurationEvent[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLogPatternSetsResponse {
  ResourceGroupName?: string | null;
  LogPatternSets?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLogPatternsResponse {
  ResourceGroupName?: string | null;
  LogPatterns?: LogPattern[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProblemsResponse {
  ProblemList?: Problem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateApplicationResponse {
  ApplicationInfo?: ApplicationInfo | null;
}

// refs: 1 - tags: named, output
export interface UpdateComponentResponse {
}

// refs: 1 - tags: named, output
export interface UpdateComponentConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface UpdateLogPatternResponse {
  ResourceGroupName?: string | null;
  LogPattern?: LogPattern | null;
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type Tier =
| "DEFAULT"
| "DOT_NET_CORE"
| "DOT_NET_WORKER"
| "DOT_NET_WEB"
| "SQL_SERVER"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ConfigurationEventStatus =
| "INFO"
| "WARN"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ApplicationInfo {
  ResourceGroupName?: string | null;
  LifeCycle?: string | null;
  OpsItemSNSTopicArn?: string | null;
  OpsCenterEnabled?: boolean | null;
  CWEMonitorEnabled?: boolean | null;
  Remarks?: string | null;
}
function toApplicationInfo(root: jsonP.JSONValue): ApplicationInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceGroupName": "s",
      "LifeCycle": "s",
      "OpsItemSNSTopicArn": "s",
      "OpsCenterEnabled": "b",
      "CWEMonitorEnabled": "b",
      "Remarks": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface LogPattern {
  PatternSetName?: string | null;
  PatternName?: string | null;
  Pattern?: string | null;
  Rank?: number | null;
}
function toLogPattern(root: jsonP.JSONValue): LogPattern {
  return jsonP.readObj({
    required: {},
    optional: {
      "PatternSetName": "s",
      "PatternName": "s",
      "Pattern": "s",
      "Rank": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ApplicationComponent {
  ComponentName?: string | null;
  ResourceType?: string | null;
  Tier?: Tier | null;
  Monitor?: boolean | null;
}
function toApplicationComponent(root: jsonP.JSONValue): ApplicationComponent {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComponentName": "s",
      "ResourceType": "s",
      "Tier": (x: jsonP.JSONValue) => cmnP.readEnum<Tier>(x),
      "Monitor": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Observation {
  Id?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  SourceType?: string | null;
  SourceARN?: string | null;
  LogGroup?: string | null;
  LineTime?: Date | number | null;
  LogText?: string | null;
  LogFilter?: LogFilter | null;
  MetricNamespace?: string | null;
  MetricName?: string | null;
  Unit?: string | null;
  Value?: number | null;
  CloudWatchEventId?: string | null;
  CloudWatchEventSource?: CloudWatchEventSource | null;
  CloudWatchEventDetailType?: string | null;
  HealthEventArn?: string | null;
  HealthService?: string | null;
  HealthEventTypeCode?: string | null;
  HealthEventTypeCategory?: string | null;
  HealthEventDescription?: string | null;
  CodeDeployDeploymentId?: string | null;
  CodeDeployDeploymentGroup?: string | null;
  CodeDeployState?: string | null;
  CodeDeployApplication?: string | null;
  CodeDeployInstanceGroupId?: string | null;
  Ec2State?: string | null;
  XRayFaultPercent?: number | null;
  XRayThrottlePercent?: number | null;
  XRayErrorPercent?: number | null;
  XRayRequestCount?: number | null;
  XRayRequestAverageLatency?: number | null;
  XRayNodeName?: string | null;
  XRayNodeType?: string | null;
}
function toObservation(root: jsonP.JSONValue): Observation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "StartTime": "d",
      "EndTime": "d",
      "SourceType": "s",
      "SourceARN": "s",
      "LogGroup": "s",
      "LineTime": "d",
      "LogText": "s",
      "LogFilter": (x: jsonP.JSONValue) => cmnP.readEnum<LogFilter>(x),
      "MetricNamespace": "s",
      "MetricName": "s",
      "Unit": "s",
      "Value": "n",
      "CloudWatchEventId": "s",
      "CloudWatchEventSource": (x: jsonP.JSONValue) => cmnP.readEnum<CloudWatchEventSource>(x),
      "CloudWatchEventDetailType": "s",
      "HealthEventArn": "s",
      "HealthService": "s",
      "HealthEventTypeCode": "s",
      "HealthEventTypeCategory": "s",
      "HealthEventDescription": "s",
      "CodeDeployDeploymentId": "s",
      "CodeDeployDeploymentGroup": "s",
      "CodeDeployState": "s",
      "CodeDeployApplication": "s",
      "CodeDeployInstanceGroupId": "s",
      "Ec2State": "s",
      "XRayFaultPercent": "n",
      "XRayThrottlePercent": "n",
      "XRayErrorPercent": "n",
      "XRayRequestCount": "n",
      "XRayRequestAverageLatency": "n",
      "XRayNodeName": "s",
      "XRayNodeType": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type LogFilter =
| "ERROR"
| "WARN"
| "INFO"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type CloudWatchEventSource =
| "EC2"
| "CODE_DEPLOY"
| "HEALTH"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Problem {
  Id?: string | null;
  Title?: string | null;
  Insights?: string | null;
  Status?: Status | null;
  AffectedResource?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  SeverityLevel?: SeverityLevel | null;
  ResourceGroupName?: string | null;
  Feedback?: { [key in FeedbackKey]: FeedbackValue | null | undefined } | null;
}
function toProblem(root: jsonP.JSONValue): Problem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Title": "s",
      "Insights": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      "AffectedResource": "s",
      "StartTime": "d",
      "EndTime": "d",
      "SeverityLevel": (x: jsonP.JSONValue) => cmnP.readEnum<SeverityLevel>(x),
      "ResourceGroupName": "s",
      "Feedback": x => jsonP.readMap(x => cmnP.readEnumReq<FeedbackKey>(x), y => cmnP.readEnum<FeedbackValue>(y), x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type Status =
| "IGNORE"
| "RESOLVED"
| "PENDING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type SeverityLevel =
| "Low"
| "Medium"
| "High"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type FeedbackKey =
| "INSIGHTS_FEEDBACK"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type FeedbackValue =
| "NOT_SPECIFIED"
| "USEFUL"
| "NOT_USEFUL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface RelatedObservations {
  ObservationList?: Observation[] | null;
}
function toRelatedObservations(root: jsonP.JSONValue): RelatedObservations {
  return jsonP.readObj({
    required: {},
    optional: {
      "ObservationList": [toObservation],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConfigurationEvent {
  MonitoredResourceARN?: string | null;
  EventStatus?: ConfigurationEventStatus | null;
  EventResourceType?: ConfigurationEventResourceType | null;
  EventTime?: Date | number | null;
  EventDetail?: string | null;
  EventResourceName?: string | null;
}
function toConfigurationEvent(root: jsonP.JSONValue): ConfigurationEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "MonitoredResourceARN": "s",
      "EventStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationEventStatus>(x),
      "EventResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationEventResourceType>(x),
      "EventTime": "d",
      "EventDetail": "s",
      "EventResourceName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ConfigurationEventResourceType =
| "CLOUDWATCH_ALARM"
| "CLOUDFORMATION"
| "SSM_ASSOCIATION"
| cmnP.UnexpectedEnumValue;
