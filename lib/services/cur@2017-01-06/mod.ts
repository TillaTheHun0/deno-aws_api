// Autogenerated API client for: AWS Cost and Usage Report Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CUR {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CUR.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-01-06",
    "endpointPrefix": "cur",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Cost and Usage Report Service",
    "serviceId": "Cost and Usage Report Service",
    "signatureVersion": "v4",
    "signingName": "cur",
    "targetPrefix": "AWSOrigamiServiceGatewayService",
    "uid": "cur-2017-01-06"
  };

  async deleteReportDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteReportDefinitionRequest = {},
  ): Promise<DeleteReportDefinitionResponse> {
    const body: jsonP.JSONObject = params ? {
      ReportName: params["ReportName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteReportDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResponseMessage": "s",
      },
    }, await resp.json());
  }

  async describeReportDefinitions(
    {abortSignal, ...params}: RequestConfig & DescribeReportDefinitionsRequest = {},
  ): Promise<DescribeReportDefinitionsResponse> {
    const body: jsonP.JSONObject = params ? {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeReportDefinitions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ReportDefinitions": [toReportDefinition],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async modifyReportDefinition(
    {abortSignal, ...params}: RequestConfig & ModifyReportDefinitionRequest,
  ): Promise<ModifyReportDefinitionResponse> {
    const body: jsonP.JSONObject = params ? {
      ReportName: params["ReportName"],
      ReportDefinition: fromReportDefinition(params["ReportDefinition"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyReportDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putReportDefinition(
    {abortSignal, ...params}: RequestConfig & PutReportDefinitionRequest,
  ): Promise<PutReportDefinitionResponse> {
    const body: jsonP.JSONObject = params ? {
      ReportDefinition: fromReportDefinition(params["ReportDefinition"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutReportDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DeleteReportDefinitionRequest {
  ReportName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeReportDefinitionsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ModifyReportDefinitionRequest {
  ReportName: string;
  ReportDefinition: ReportDefinition;
}

// refs: 1 - tags: named, input
export interface PutReportDefinitionRequest {
  ReportDefinition: ReportDefinition;
}

// refs: 1 - tags: named, output
export interface DeleteReportDefinitionResponse {
  ResponseMessage?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeReportDefinitionsResponse {
  ReportDefinitions?: ReportDefinition[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ModifyReportDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface PutReportDefinitionResponse {
}

// refs: 3 - tags: input, named, interface, output
export interface ReportDefinition {
  ReportName: string;
  TimeUnit: TimeUnit;
  Format: ReportFormat;
  Compression: CompressionFormat;
  AdditionalSchemaElements: SchemaElement[];
  S3Bucket: string;
  S3Prefix: string;
  S3Region: AWSRegion;
  AdditionalArtifacts?: AdditionalArtifact[] | null;
  RefreshClosedReports?: boolean | null;
  ReportVersioning?: ReportVersioning | null;
}
function fromReportDefinition(input?: ReportDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReportName: input["ReportName"],
    TimeUnit: input["TimeUnit"],
    Format: input["Format"],
    Compression: input["Compression"],
    AdditionalSchemaElements: input["AdditionalSchemaElements"],
    S3Bucket: input["S3Bucket"],
    S3Prefix: input["S3Prefix"],
    S3Region: input["S3Region"],
    AdditionalArtifacts: input["AdditionalArtifacts"],
    RefreshClosedReports: input["RefreshClosedReports"],
    ReportVersioning: input["ReportVersioning"],
  }
}
function toReportDefinition(root: jsonP.JSONValue): ReportDefinition {
  return jsonP.readObj({
    required: {
      "ReportName": "s",
      "TimeUnit": (x: jsonP.JSONValue) => cmnP.readEnum<TimeUnit>(x),
      "Format": (x: jsonP.JSONValue) => cmnP.readEnum<ReportFormat>(x),
      "Compression": (x: jsonP.JSONValue) => cmnP.readEnum<CompressionFormat>(x),
      "AdditionalSchemaElements": [(x: jsonP.JSONValue) => cmnP.readEnum<SchemaElement>(x)],
      "S3Bucket": "s",
      "S3Prefix": "s",
      "S3Region": (x: jsonP.JSONValue) => cmnP.readEnum<AWSRegion>(x),
    },
    optional: {
      "AdditionalArtifacts": [(x: jsonP.JSONValue) => cmnP.readEnum<AdditionalArtifact>(x)],
      "RefreshClosedReports": "b",
      "ReportVersioning": (x: jsonP.JSONValue) => cmnP.readEnum<ReportVersioning>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type TimeUnit =
| "HOURLY"
| "DAILY"
| "MONTHLY"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ReportFormat =
| "textORcsv"
| "Parquet"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type CompressionFormat =
| "ZIP"
| "GZIP"
| "Parquet"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type SchemaElement =
| "RESOURCES"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type AWSRegion =
| "af-south-1"
| "ap-east-1"
| "ap-south-1"
| "ap-southeast-1"
| "ap-southeast-2"
| "ap-northeast-1"
| "ap-northeast-2"
| "ap-northeast-3"
| "ca-central-1"
| "eu-central-1"
| "eu-west-1"
| "eu-west-2"
| "eu-west-3"
| "eu-north-1"
| "eu-south-1"
| "me-south-1"
| "sa-east-1"
| "us-east-1"
| "us-east-2"
| "us-west-1"
| "us-west-2"
| "cn-north-1"
| "cn-northwest-1"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type AdditionalArtifact =
| "REDSHIFT"
| "QUICKSIGHT"
| "ATHENA"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ReportVersioning =
| "CREATE_NEW_REPORT"
| "OVERWRITE_REPORT"
| cmnP.UnexpectedEnumValue;
