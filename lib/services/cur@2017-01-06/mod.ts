// Autogenerated API client for: AWS Cost and Usage Report Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CUR {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CUR.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-01-06",
    "endpointPrefix": "cur",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Cost and Usage Report Service",
    "serviceId": "Cost and Usage Report Service",
    "signatureVersion": "v4",
    "signingName": "cur",
    "targetPrefix": "AWSOrigamiServiceGatewayService",
    "uid": "cur-2017-01-06"
  };

  async deleteReportDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteReportDefinitionRequest = {},
  ): Promise<s.DeleteReportDefinitionResponse> {
    const body: jsonP.JSONObject = {
      ReportName: params["ReportName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteReportDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResponseMessage": "s",
      },
    }, await resp.json());
  }

  async describeReportDefinitions(
    {abortSignal, ...params}: RequestConfig & s.DescribeReportDefinitionsRequest = {},
  ): Promise<s.DescribeReportDefinitionsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeReportDefinitions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ReportDefinitions": [toReportDefinition],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async modifyReportDefinition(
    {abortSignal, ...params}: RequestConfig & s.ModifyReportDefinitionRequest,
  ): Promise<s.ModifyReportDefinitionResponse> {
    const body: jsonP.JSONObject = {
      ReportName: params["ReportName"],
      ReportDefinition: fromReportDefinition(params["ReportDefinition"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyReportDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putReportDefinition(
    {abortSignal, ...params}: RequestConfig & s.PutReportDefinitionRequest,
  ): Promise<s.PutReportDefinitionResponse> {
    const body: jsonP.JSONObject = {
      ReportDefinition: fromReportDefinition(params["ReportDefinition"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutReportDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromReportDefinition(input?: s.ReportDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReportName: input["ReportName"],
    TimeUnit: input["TimeUnit"],
    Format: input["Format"],
    Compression: input["Compression"],
    AdditionalSchemaElements: input["AdditionalSchemaElements"],
    S3Bucket: input["S3Bucket"],
    S3Prefix: input["S3Prefix"],
    S3Region: input["S3Region"],
    AdditionalArtifacts: input["AdditionalArtifacts"],
    RefreshClosedReports: input["RefreshClosedReports"],
    ReportVersioning: input["ReportVersioning"],
  }
}
function toReportDefinition(root: jsonP.JSONValue): s.ReportDefinition {
  return jsonP.readObj({
    required: {
      "ReportName": "s",
      "TimeUnit": (x: jsonP.JSONValue) => cmnP.readEnum<s.TimeUnit>(x),
      "Format": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReportFormat>(x),
      "Compression": (x: jsonP.JSONValue) => cmnP.readEnum<s.CompressionFormat>(x),
      "AdditionalSchemaElements": [(x: jsonP.JSONValue) => cmnP.readEnum<s.SchemaElement>(x)],
      "S3Bucket": "s",
      "S3Prefix": "s",
      "S3Region": (x: jsonP.JSONValue) => cmnP.readEnum<s.AWSRegion>(x),
    },
    optional: {
      "AdditionalArtifacts": [(x: jsonP.JSONValue) => cmnP.readEnum<s.AdditionalArtifact>(x)],
      "RefreshClosedReports": "b",
      "ReportVersioning": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReportVersioning>(x),
    },
  }, root);
}
