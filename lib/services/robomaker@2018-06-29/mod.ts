// Autogenerated API client for: AWS RoboMaker

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class RoboMaker {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(RoboMaker.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-06-29",
    "endpointPrefix": "robomaker",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "RoboMaker",
    "serviceFullName": "AWS RoboMaker",
    "serviceId": "RoboMaker",
    "signatureVersion": "v4",
    "signingName": "robomaker",
    "uid": "robomaker-2018-06-29"
  };

  async batchDeleteWorlds(
    {abortSignal, ...params}: RequestConfig & BatchDeleteWorldsRequest,
  ): Promise<BatchDeleteWorldsResponse> {
    const body: jsonP.JSONObject = {
      worlds: params["worlds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeleteWorlds",
      requestUri: "/batchDeleteWorlds",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "unprocessedWorlds": ["s"],
      },
    }, await resp.json());
  }

  async batchDescribeSimulationJob(
    {abortSignal, ...params}: RequestConfig & BatchDescribeSimulationJobRequest,
  ): Promise<BatchDescribeSimulationJobResponse> {
    const body: jsonP.JSONObject = {
      jobs: params["jobs"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDescribeSimulationJob",
      requestUri: "/batchDescribeSimulationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobs": [toSimulationJob],
        "unprocessedJobs": ["s"],
      },
    }, await resp.json());
  }

  async cancelDeploymentJob(
    {abortSignal, ...params}: RequestConfig & CancelDeploymentJobRequest,
  ): Promise<CancelDeploymentJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelDeploymentJob",
      requestUri: "/cancelDeploymentJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelSimulationJob(
    {abortSignal, ...params}: RequestConfig & CancelSimulationJobRequest,
  ): Promise<CancelSimulationJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelSimulationJob",
      requestUri: "/cancelSimulationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelSimulationJobBatch(
    {abortSignal, ...params}: RequestConfig & CancelSimulationJobBatchRequest,
  ): Promise<CancelSimulationJobBatchResponse> {
    const body: jsonP.JSONObject = {
      batch: params["batch"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelSimulationJobBatch",
      requestUri: "/cancelSimulationJobBatch",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelWorldExportJob(
    {abortSignal, ...params}: RequestConfig & CancelWorldExportJobRequest,
  ): Promise<CancelWorldExportJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelWorldExportJob",
      requestUri: "/cancelWorldExportJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelWorldGenerationJob(
    {abortSignal, ...params}: RequestConfig & CancelWorldGenerationJobRequest,
  ): Promise<CancelWorldGenerationJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelWorldGenerationJob",
      requestUri: "/cancelWorldGenerationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDeploymentJob(
    {abortSignal, ...params}: RequestConfig & CreateDeploymentJobRequest,
  ): Promise<CreateDeploymentJobResponse> {
    const body: jsonP.JSONObject = {
      deploymentConfig: fromDeploymentConfig(params["deploymentConfig"]),
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
      fleet: params["fleet"],
      deploymentApplicationConfigs: params["deploymentApplicationConfigs"]?.map(x => fromDeploymentApplicationConfig(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeploymentJob",
      requestUri: "/createDeploymentJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "fleet": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "deploymentApplicationConfigs": [toDeploymentApplicationConfig],
        "failureReason": "s",
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentJobErrorCode>(x),
        "createdAt": "d",
        "deploymentConfig": toDeploymentConfig,
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createFleet(
    {abortSignal, ...params}: RequestConfig & CreateFleetRequest,
  ): Promise<CreateFleetResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFleet",
      requestUri: "/createFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "createdAt": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createRobot(
    {abortSignal, ...params}: RequestConfig & CreateRobotRequest,
  ): Promise<CreateRobotResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      architecture: params["architecture"],
      greengrassGroupId: params["greengrassGroupId"],
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRobot",
      requestUri: "/createRobot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "createdAt": "d",
        "greengrassGroupId": "s",
        "architecture": (x: jsonP.JSONValue) => cmnP.readEnum<Architecture>(x),
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createRobotApplication(
    {abortSignal, ...params}: RequestConfig & CreateRobotApplicationRequest,
  ): Promise<CreateRobotApplicationResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      sources: params["sources"]?.map(x => fromSourceConfig(x)),
      robotSoftwareSuite: fromRobotSoftwareSuite(params["robotSoftwareSuite"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRobotApplication",
      requestUri: "/createRobotApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "lastUpdatedAt": "d",
        "revisionId": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createRobotApplicationVersion(
    {abortSignal, ...params}: RequestConfig & CreateRobotApplicationVersionRequest,
  ): Promise<CreateRobotApplicationVersionResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      currentRevisionId: params["currentRevisionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRobotApplicationVersion",
      requestUri: "/createRobotApplicationVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "lastUpdatedAt": "d",
        "revisionId": "s",
      },
    }, await resp.json());
  }

  async createSimulationApplication(
    {abortSignal, ...params}: RequestConfig & CreateSimulationApplicationRequest,
  ): Promise<CreateSimulationApplicationResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      sources: params["sources"]?.map(x => fromSourceConfig(x)),
      simulationSoftwareSuite: fromSimulationSoftwareSuite(params["simulationSoftwareSuite"]),
      robotSoftwareSuite: fromRobotSoftwareSuite(params["robotSoftwareSuite"]),
      renderingEngine: fromRenderingEngine(params["renderingEngine"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSimulationApplication",
      requestUri: "/createSimulationApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "simulationSoftwareSuite": toSimulationSoftwareSuite,
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "renderingEngine": toRenderingEngine,
        "lastUpdatedAt": "d",
        "revisionId": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createSimulationApplicationVersion(
    {abortSignal, ...params}: RequestConfig & CreateSimulationApplicationVersionRequest,
  ): Promise<CreateSimulationApplicationVersionResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      currentRevisionId: params["currentRevisionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSimulationApplicationVersion",
      requestUri: "/createSimulationApplicationVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "simulationSoftwareSuite": toSimulationSoftwareSuite,
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "renderingEngine": toRenderingEngine,
        "lastUpdatedAt": "d",
        "revisionId": "s",
      },
    }, await resp.json());
  }

  async createSimulationJob(
    {abortSignal, ...params}: RequestConfig & CreateSimulationJobRequest,
  ): Promise<CreateSimulationJobResponse> {
    const body: jsonP.JSONObject = {
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
      outputLocation: fromOutputLocation(params["outputLocation"]),
      loggingConfig: fromLoggingConfig(params["loggingConfig"]),
      maxJobDurationInSeconds: params["maxJobDurationInSeconds"],
      iamRole: params["iamRole"],
      failureBehavior: params["failureBehavior"],
      robotApplications: params["robotApplications"]?.map(x => fromRobotApplicationConfig(x)),
      simulationApplications: params["simulationApplications"]?.map(x => fromSimulationApplicationConfig(x)),
      dataSources: params["dataSources"]?.map(x => fromDataSourceConfig(x)),
      tags: params["tags"],
      vpcConfig: fromVPCConfig(params["vpcConfig"]),
      compute: fromCompute(params["compute"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSimulationJob",
      requestUri: "/createSimulationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobStatus>(x),
        "lastStartedAt": "d",
        "lastUpdatedAt": "d",
        "failureBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<FailureBehavior>(x),
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobErrorCode>(x),
        "clientRequestToken": "s",
        "outputLocation": toOutputLocation,
        "loggingConfig": toLoggingConfig,
        "maxJobDurationInSeconds": "n",
        "simulationTimeMillis": "n",
        "iamRole": "s",
        "robotApplications": [toRobotApplicationConfig],
        "simulationApplications": [toSimulationApplicationConfig],
        "dataSources": [toDataSource],
        "tags": x => jsonP.readMap(String, String, x),
        "vpcConfig": toVPCConfigResponse,
        "compute": toComputeResponse,
      },
    }, await resp.json());
  }

  async createWorldExportJob(
    {abortSignal, ...params}: RequestConfig & CreateWorldExportJobRequest,
  ): Promise<CreateWorldExportJobResponse> {
    const body: jsonP.JSONObject = {
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
      worlds: params["worlds"],
      outputLocation: fromOutputLocation(params["outputLocation"]),
      iamRole: params["iamRole"],
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorldExportJob",
      requestUri: "/createWorldExportJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<WorldExportJobStatus>(x),
        "createdAt": "d",
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<WorldExportJobErrorCode>(x),
        "clientRequestToken": "s",
        "outputLocation": toOutputLocation,
        "iamRole": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createWorldGenerationJob(
    {abortSignal, ...params}: RequestConfig & CreateWorldGenerationJobRequest,
  ): Promise<CreateWorldGenerationJobResponse> {
    const body: jsonP.JSONObject = {
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
      template: params["template"],
      worldCount: fromWorldCount(params["worldCount"]),
      tags: params["tags"],
      worldTags: params["worldTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorldGenerationJob",
      requestUri: "/createWorldGenerationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<WorldGenerationJobStatus>(x),
        "createdAt": "d",
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<WorldGenerationJobErrorCode>(x),
        "clientRequestToken": "s",
        "template": "s",
        "worldCount": toWorldCount,
        "tags": x => jsonP.readMap(String, String, x),
        "worldTags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createWorldTemplate(
    {abortSignal, ...params}: RequestConfig & CreateWorldTemplateRequest = {},
  ): Promise<CreateWorldTemplateResponse> {
    const body: jsonP.JSONObject = {
      clientRequestToken: params["clientRequestToken"],
      name: params["name"],
      templateBody: params["templateBody"],
      templateLocation: fromTemplateLocation(params["templateLocation"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorldTemplate",
      requestUri: "/createWorldTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "clientRequestToken": "s",
        "createdAt": "d",
        "name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async deleteFleet(
    {abortSignal, ...params}: RequestConfig & DeleteFleetRequest,
  ): Promise<DeleteFleetResponse> {
    const body: jsonP.JSONObject = {
      fleet: params["fleet"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFleet",
      requestUri: "/deleteFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRobot(
    {abortSignal, ...params}: RequestConfig & DeleteRobotRequest,
  ): Promise<DeleteRobotResponse> {
    const body: jsonP.JSONObject = {
      robot: params["robot"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRobot",
      requestUri: "/deleteRobot",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRobotApplication(
    {abortSignal, ...params}: RequestConfig & DeleteRobotApplicationRequest,
  ): Promise<DeleteRobotApplicationResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      applicationVersion: params["applicationVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRobotApplication",
      requestUri: "/deleteRobotApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSimulationApplication(
    {abortSignal, ...params}: RequestConfig & DeleteSimulationApplicationRequest,
  ): Promise<DeleteSimulationApplicationResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      applicationVersion: params["applicationVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSimulationApplication",
      requestUri: "/deleteSimulationApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWorldTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteWorldTemplateRequest,
  ): Promise<DeleteWorldTemplateResponse> {
    const body: jsonP.JSONObject = {
      template: params["template"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteWorldTemplate",
      requestUri: "/deleteWorldTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterRobot(
    {abortSignal, ...params}: RequestConfig & DeregisterRobotRequest,
  ): Promise<DeregisterRobotResponse> {
    const body: jsonP.JSONObject = {
      fleet: params["fleet"],
      robot: params["robot"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterRobot",
      requestUri: "/deregisterRobot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "fleet": "s",
        "robot": "s",
      },
    }, await resp.json());
  }

  async describeDeploymentJob(
    {abortSignal, ...params}: RequestConfig & DescribeDeploymentJobRequest,
  ): Promise<DescribeDeploymentJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDeploymentJob",
      requestUri: "/describeDeploymentJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "fleet": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "deploymentConfig": toDeploymentConfig,
        "deploymentApplicationConfigs": [toDeploymentApplicationConfig],
        "failureReason": "s",
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentJobErrorCode>(x),
        "createdAt": "d",
        "robotDeploymentSummary": [toRobotDeployment],
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeFleet(
    {abortSignal, ...params}: RequestConfig & DescribeFleetRequest,
  ): Promise<DescribeFleetResponse> {
    const body: jsonP.JSONObject = {
      fleet: params["fleet"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFleet",
      requestUri: "/describeFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "name": "s",
        "arn": "s",
        "robots": [toRobot],
        "createdAt": "d",
        "lastDeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "lastDeploymentJob": "s",
        "lastDeploymentTime": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeRobot(
    {abortSignal, ...params}: RequestConfig & DescribeRobotRequest,
  ): Promise<DescribeRobotResponse> {
    const body: jsonP.JSONObject = {
      robot: params["robot"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRobot",
      requestUri: "/describeRobot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "fleetArn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<RobotStatus>(x),
        "greengrassGroupId": "s",
        "createdAt": "d",
        "architecture": (x: jsonP.JSONValue) => cmnP.readEnum<Architecture>(x),
        "lastDeploymentJob": "s",
        "lastDeploymentTime": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeRobotApplication(
    {abortSignal, ...params}: RequestConfig & DescribeRobotApplicationRequest,
  ): Promise<DescribeRobotApplicationResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      applicationVersion: params["applicationVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRobotApplication",
      requestUri: "/describeRobotApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "revisionId": "s",
        "lastUpdatedAt": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeSimulationApplication(
    {abortSignal, ...params}: RequestConfig & DescribeSimulationApplicationRequest,
  ): Promise<DescribeSimulationApplicationResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      applicationVersion: params["applicationVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSimulationApplication",
      requestUri: "/describeSimulationApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "simulationSoftwareSuite": toSimulationSoftwareSuite,
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "renderingEngine": toRenderingEngine,
        "revisionId": "s",
        "lastUpdatedAt": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeSimulationJob(
    {abortSignal, ...params}: RequestConfig & DescribeSimulationJobRequest,
  ): Promise<DescribeSimulationJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSimulationJob",
      requestUri: "/describeSimulationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobStatus>(x),
        "lastStartedAt": "d",
        "lastUpdatedAt": "d",
        "failureBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<FailureBehavior>(x),
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobErrorCode>(x),
        "failureReason": "s",
        "clientRequestToken": "s",
        "outputLocation": toOutputLocation,
        "loggingConfig": toLoggingConfig,
        "maxJobDurationInSeconds": "n",
        "simulationTimeMillis": "n",
        "iamRole": "s",
        "robotApplications": [toRobotApplicationConfig],
        "simulationApplications": [toSimulationApplicationConfig],
        "dataSources": [toDataSource],
        "tags": x => jsonP.readMap(String, String, x),
        "vpcConfig": toVPCConfigResponse,
        "networkInterface": toNetworkInterface,
        "compute": toComputeResponse,
      },
    }, await resp.json());
  }

  async describeSimulationJobBatch(
    {abortSignal, ...params}: RequestConfig & DescribeSimulationJobBatchRequest,
  ): Promise<DescribeSimulationJobBatchResponse> {
    const body: jsonP.JSONObject = {
      batch: params["batch"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSimulationJobBatch",
      requestUri: "/describeSimulationJobBatch",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobBatchStatus>(x),
        "lastUpdatedAt": "d",
        "createdAt": "d",
        "clientRequestToken": "s",
        "batchPolicy": toBatchPolicy,
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobBatchErrorCode>(x),
        "failureReason": "s",
        "failedRequests": [toFailedCreateSimulationJobRequest],
        "pendingRequests": [toSimulationJobRequest],
        "createdRequests": [toSimulationJobSummary],
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeWorld(
    {abortSignal, ...params}: RequestConfig & DescribeWorldRequest,
  ): Promise<DescribeWorldResponse> {
    const body: jsonP.JSONObject = {
      world: params["world"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorld",
      requestUri: "/describeWorld",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "generationJob": "s",
        "template": "s",
        "createdAt": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeWorldExportJob(
    {abortSignal, ...params}: RequestConfig & DescribeWorldExportJobRequest,
  ): Promise<DescribeWorldExportJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorldExportJob",
      requestUri: "/describeWorldExportJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<WorldExportJobStatus>(x),
        "createdAt": "d",
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<WorldExportJobErrorCode>(x),
        "failureReason": "s",
        "clientRequestToken": "s",
        "worlds": ["s"],
        "outputLocation": toOutputLocation,
        "iamRole": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeWorldGenerationJob(
    {abortSignal, ...params}: RequestConfig & DescribeWorldGenerationJobRequest,
  ): Promise<DescribeWorldGenerationJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorldGenerationJob",
      requestUri: "/describeWorldGenerationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<WorldGenerationJobStatus>(x),
        "createdAt": "d",
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<WorldGenerationJobErrorCode>(x),
        "failureReason": "s",
        "clientRequestToken": "s",
        "template": "s",
        "worldCount": toWorldCount,
        "finishedWorldsSummary": toFinishedWorldsSummary,
        "tags": x => jsonP.readMap(String, String, x),
        "worldTags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeWorldTemplate(
    {abortSignal, ...params}: RequestConfig & DescribeWorldTemplateRequest,
  ): Promise<DescribeWorldTemplateResponse> {
    const body: jsonP.JSONObject = {
      template: params["template"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorldTemplate",
      requestUri: "/describeWorldTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "clientRequestToken": "s",
        "name": "s",
        "createdAt": "d",
        "lastUpdatedAt": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getWorldTemplateBody(
    {abortSignal, ...params}: RequestConfig & GetWorldTemplateBodyRequest = {},
  ): Promise<GetWorldTemplateBodyResponse> {
    const body: jsonP.JSONObject = {
      template: params["template"],
      generationJob: params["generationJob"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetWorldTemplateBody",
      requestUri: "/getWorldTemplateBody",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "templateBody": "s",
      },
    }, await resp.json());
  }

  async listDeploymentJobs(
    {abortSignal, ...params}: RequestConfig & ListDeploymentJobsRequest = {},
  ): Promise<ListDeploymentJobsResponse> {
    const body: jsonP.JSONObject = {
      filters: params["filters"]?.map(x => fromFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDeploymentJobs",
      requestUri: "/listDeploymentJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deploymentJobs": [toDeploymentJob],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listFleets(
    {abortSignal, ...params}: RequestConfig & ListFleetsRequest = {},
  ): Promise<ListFleetsResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFleets",
      requestUri: "/listFleets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "fleetDetails": [toFleet],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRobotApplications(
    {abortSignal, ...params}: RequestConfig & ListRobotApplicationsRequest = {},
  ): Promise<ListRobotApplicationsResponse> {
    const body: jsonP.JSONObject = {
      versionQualifier: params["versionQualifier"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRobotApplications",
      requestUri: "/listRobotApplications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "robotApplicationSummaries": [toRobotApplicationSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRobots(
    {abortSignal, ...params}: RequestConfig & ListRobotsRequest = {},
  ): Promise<ListRobotsResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRobots",
      requestUri: "/listRobots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "robots": [toRobot],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSimulationApplications(
    {abortSignal, ...params}: RequestConfig & ListSimulationApplicationsRequest = {},
  ): Promise<ListSimulationApplicationsResponse> {
    const body: jsonP.JSONObject = {
      versionQualifier: params["versionQualifier"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSimulationApplications",
      requestUri: "/listSimulationApplications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "simulationApplicationSummaries": [toSimulationApplicationSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSimulationJobBatches(
    {abortSignal, ...params}: RequestConfig & ListSimulationJobBatchesRequest = {},
  ): Promise<ListSimulationJobBatchesResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSimulationJobBatches",
      requestUri: "/listSimulationJobBatches",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "simulationJobBatchSummaries": [toSimulationJobBatchSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSimulationJobs(
    {abortSignal, ...params}: RequestConfig & ListSimulationJobsRequest = {},
  ): Promise<ListSimulationJobsResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSimulationJobs",
      requestUri: "/listSimulationJobs",
    });
    return jsonP.readObj({
      required: {
        "simulationJobSummaries": [toSimulationJobSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listWorldExportJobs(
    {abortSignal, ...params}: RequestConfig & ListWorldExportJobsRequest = {},
  ): Promise<ListWorldExportJobsResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWorldExportJobs",
      requestUri: "/listWorldExportJobs",
    });
    return jsonP.readObj({
      required: {
        "worldExportJobSummaries": [toWorldExportJobSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listWorldGenerationJobs(
    {abortSignal, ...params}: RequestConfig & ListWorldGenerationJobsRequest = {},
  ): Promise<ListWorldGenerationJobsResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWorldGenerationJobs",
      requestUri: "/listWorldGenerationJobs",
    });
    return jsonP.readObj({
      required: {
        "worldGenerationJobSummaries": [toWorldGenerationJobSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listWorldTemplates(
    {abortSignal, ...params}: RequestConfig & ListWorldTemplatesRequest = {},
  ): Promise<ListWorldTemplatesResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWorldTemplates",
      requestUri: "/listWorldTemplates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "templateSummaries": [toTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listWorlds(
    {abortSignal, ...params}: RequestConfig & ListWorldsRequest = {},
  ): Promise<ListWorldsResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWorlds",
      requestUri: "/listWorlds",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "worldSummaries": [toWorldSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async registerRobot(
    {abortSignal, ...params}: RequestConfig & RegisterRobotRequest,
  ): Promise<RegisterRobotResponse> {
    const body: jsonP.JSONObject = {
      fleet: params["fleet"],
      robot: params["robot"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterRobot",
      requestUri: "/registerRobot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "fleet": "s",
        "robot": "s",
      },
    }, await resp.json());
  }

  async restartSimulationJob(
    {abortSignal, ...params}: RequestConfig & RestartSimulationJobRequest,
  ): Promise<RestartSimulationJobResponse> {
    const body: jsonP.JSONObject = {
      job: params["job"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestartSimulationJob",
      requestUri: "/restartSimulationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startSimulationJobBatch(
    {abortSignal, ...params}: RequestConfig & StartSimulationJobBatchRequest,
  ): Promise<StartSimulationJobBatchResponse> {
    const body: jsonP.JSONObject = {
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
      batchPolicy: fromBatchPolicy(params["batchPolicy"]),
      createSimulationJobRequests: params["createSimulationJobRequests"]?.map(x => fromSimulationJobRequest(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSimulationJobBatch",
      requestUri: "/startSimulationJobBatch",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobBatchStatus>(x),
        "createdAt": "d",
        "clientRequestToken": "s",
        "batchPolicy": toBatchPolicy,
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobBatchErrorCode>(x),
        "failureReason": "s",
        "failedRequests": [toFailedCreateSimulationJobRequest],
        "pendingRequests": [toSimulationJobRequest],
        "createdRequests": [toSimulationJobSummary],
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async syncDeploymentJob(
    {abortSignal, ...params}: RequestConfig & SyncDeploymentJobRequest,
  ): Promise<SyncDeploymentJobResponse> {
    const body: jsonP.JSONObject = {
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
      fleet: params["fleet"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SyncDeploymentJob",
      requestUri: "/syncDeploymentJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "fleet": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "deploymentConfig": toDeploymentConfig,
        "deploymentApplicationConfigs": [toDeploymentApplicationConfig],
        "failureReason": "s",
        "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentJobErrorCode>(x),
        "createdAt": "d",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRobotApplication(
    {abortSignal, ...params}: RequestConfig & UpdateRobotApplicationRequest,
  ): Promise<UpdateRobotApplicationResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      sources: params["sources"]?.map(x => fromSourceConfig(x)),
      robotSoftwareSuite: fromRobotSoftwareSuite(params["robotSoftwareSuite"]),
      currentRevisionId: params["currentRevisionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRobotApplication",
      requestUri: "/updateRobotApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "lastUpdatedAt": "d",
        "revisionId": "s",
      },
    }, await resp.json());
  }

  async updateSimulationApplication(
    {abortSignal, ...params}: RequestConfig & UpdateSimulationApplicationRequest,
  ): Promise<UpdateSimulationApplicationResponse> {
    const body: jsonP.JSONObject = {
      application: params["application"],
      sources: params["sources"]?.map(x => fromSourceConfig(x)),
      simulationSoftwareSuite: fromSimulationSoftwareSuite(params["simulationSoftwareSuite"]),
      robotSoftwareSuite: fromRobotSoftwareSuite(params["robotSoftwareSuite"]),
      renderingEngine: fromRenderingEngine(params["renderingEngine"]),
      currentRevisionId: params["currentRevisionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSimulationApplication",
      requestUri: "/updateSimulationApplication",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "version": "s",
        "sources": [toSource],
        "simulationSoftwareSuite": toSimulationSoftwareSuite,
        "robotSoftwareSuite": toRobotSoftwareSuite,
        "renderingEngine": toRenderingEngine,
        "lastUpdatedAt": "d",
        "revisionId": "s",
      },
    }, await resp.json());
  }

  async updateWorldTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateWorldTemplateRequest,
  ): Promise<UpdateWorldTemplateResponse> {
    const body: jsonP.JSONObject = {
      template: params["template"],
      name: params["name"],
      templateBody: params["templateBody"],
      templateLocation: fromTemplateLocation(params["templateLocation"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorldTemplate",
      requestUri: "/updateWorldTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "name": "s",
        "createdAt": "d",
        "lastUpdatedAt": "d",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface BatchDeleteWorldsRequest {
  worlds: string[];
}

// refs: 1 - tags: named, input
export interface BatchDescribeSimulationJobRequest {
  jobs: string[];
}

// refs: 1 - tags: named, input
export interface CancelDeploymentJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface CancelSimulationJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface CancelSimulationJobBatchRequest {
  batch: string;
}

// refs: 1 - tags: named, input
export interface CancelWorldExportJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface CancelWorldGenerationJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface CreateDeploymentJobRequest {
  deploymentConfig?: DeploymentConfig | null;
  clientRequestToken: string;
  fleet: string;
  deploymentApplicationConfigs: DeploymentApplicationConfig[];
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateFleetRequest {
  name: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateRobotRequest {
  name: string;
  architecture: Architecture;
  greengrassGroupId: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateRobotApplicationRequest {
  name: string;
  sources: SourceConfig[];
  robotSoftwareSuite: RobotSoftwareSuite;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateRobotApplicationVersionRequest {
  application: string;
  currentRevisionId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateSimulationApplicationRequest {
  name: string;
  sources: SourceConfig[];
  simulationSoftwareSuite: SimulationSoftwareSuite;
  robotSoftwareSuite: RobotSoftwareSuite;
  renderingEngine?: RenderingEngine | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateSimulationApplicationVersionRequest {
  application: string;
  currentRevisionId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateSimulationJobRequest {
  clientRequestToken?: string | null;
  outputLocation?: OutputLocation | null;
  loggingConfig?: LoggingConfig | null;
  maxJobDurationInSeconds: number;
  iamRole: string;
  failureBehavior?: FailureBehavior | null;
  robotApplications?: RobotApplicationConfig[] | null;
  simulationApplications?: SimulationApplicationConfig[] | null;
  dataSources?: DataSourceConfig[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
  vpcConfig?: VPCConfig | null;
  compute?: Compute | null;
}

// refs: 1 - tags: named, input
export interface CreateWorldExportJobRequest {
  clientRequestToken?: string | null;
  worlds: string[];
  outputLocation: OutputLocation;
  iamRole: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateWorldGenerationJobRequest {
  clientRequestToken?: string | null;
  template: string;
  worldCount: WorldCount;
  tags?: { [key: string]: string | null | undefined } | null;
  worldTags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateWorldTemplateRequest {
  clientRequestToken?: string | null;
  name?: string | null;
  templateBody?: string | null;
  templateLocation?: TemplateLocation | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteFleetRequest {
  fleet: string;
}

// refs: 1 - tags: named, input
export interface DeleteRobotRequest {
  robot: string;
}

// refs: 1 - tags: named, input
export interface DeleteRobotApplicationRequest {
  application: string;
  applicationVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteSimulationApplicationRequest {
  application: string;
  applicationVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteWorldTemplateRequest {
  template: string;
}

// refs: 1 - tags: named, input
export interface DeregisterRobotRequest {
  fleet: string;
  robot: string;
}

// refs: 1 - tags: named, input
export interface DescribeDeploymentJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface DescribeFleetRequest {
  fleet: string;
}

// refs: 1 - tags: named, input
export interface DescribeRobotRequest {
  robot: string;
}

// refs: 1 - tags: named, input
export interface DescribeRobotApplicationRequest {
  application: string;
  applicationVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeSimulationApplicationRequest {
  application: string;
  applicationVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeSimulationJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface DescribeSimulationJobBatchRequest {
  batch: string;
}

// refs: 1 - tags: named, input
export interface DescribeWorldRequest {
  world: string;
}

// refs: 1 - tags: named, input
export interface DescribeWorldExportJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface DescribeWorldGenerationJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface DescribeWorldTemplateRequest {
  template: string;
}

// refs: 1 - tags: named, input
export interface GetWorldTemplateBodyRequest {
  template?: string | null;
  generationJob?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeploymentJobsRequest {
  filters?: Filter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListFleetsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListRobotApplicationsRequest {
  versionQualifier?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListRobotsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListSimulationApplicationsRequest {
  versionQualifier?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListSimulationJobBatchesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListSimulationJobsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListWorldExportJobsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListWorldGenerationJobsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListWorldTemplatesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListWorldsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface RegisterRobotRequest {
  fleet: string;
  robot: string;
}

// refs: 1 - tags: named, input
export interface RestartSimulationJobRequest {
  job: string;
}

// refs: 1 - tags: named, input
export interface StartSimulationJobBatchRequest {
  clientRequestToken?: string | null;
  batchPolicy?: BatchPolicy | null;
  createSimulationJobRequests: SimulationJobRequest[];
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface SyncDeploymentJobRequest {
  clientRequestToken: string;
  fleet: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateRobotApplicationRequest {
  application: string;
  sources: SourceConfig[];
  robotSoftwareSuite: RobotSoftwareSuite;
  currentRevisionId?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateSimulationApplicationRequest {
  application: string;
  sources: SourceConfig[];
  simulationSoftwareSuite: SimulationSoftwareSuite;
  robotSoftwareSuite: RobotSoftwareSuite;
  renderingEngine?: RenderingEngine | null;
  currentRevisionId?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateWorldTemplateRequest {
  template: string;
  name?: string | null;
  templateBody?: string | null;
  templateLocation?: TemplateLocation | null;
}

// refs: 1 - tags: named, output
export interface BatchDeleteWorldsResponse {
  unprocessedWorlds?: string[] | null;
}

// refs: 1 - tags: named, output
export interface BatchDescribeSimulationJobResponse {
  jobs?: SimulationJob[] | null;
  unprocessedJobs?: string[] | null;
}

// refs: 1 - tags: named, output
export interface CancelDeploymentJobResponse {
}

// refs: 1 - tags: named, output
export interface CancelSimulationJobResponse {
}

// refs: 1 - tags: named, output
export interface CancelSimulationJobBatchResponse {
}

// refs: 1 - tags: named, output
export interface CancelWorldExportJobResponse {
}

// refs: 1 - tags: named, output
export interface CancelWorldGenerationJobResponse {
}

// refs: 1 - tags: named, output
export interface CreateDeploymentJobResponse {
  arn?: string | null;
  fleet?: string | null;
  status?: DeploymentStatus | null;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[] | null;
  failureReason?: string | null;
  failureCode?: DeploymentJobErrorCode | null;
  createdAt?: Date | number | null;
  deploymentConfig?: DeploymentConfig | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateFleetResponse {
  arn?: string | null;
  name?: string | null;
  createdAt?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateRobotResponse {
  arn?: string | null;
  name?: string | null;
  createdAt?: Date | number | null;
  greengrassGroupId?: string | null;
  architecture?: Architecture | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateRobotApplicationResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  lastUpdatedAt?: Date | number | null;
  revisionId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateRobotApplicationVersionResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  lastUpdatedAt?: Date | number | null;
  revisionId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSimulationApplicationResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  simulationSoftwareSuite?: SimulationSoftwareSuite | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  renderingEngine?: RenderingEngine | null;
  lastUpdatedAt?: Date | number | null;
  revisionId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateSimulationApplicationVersionResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  simulationSoftwareSuite?: SimulationSoftwareSuite | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  renderingEngine?: RenderingEngine | null;
  lastUpdatedAt?: Date | number | null;
  revisionId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSimulationJobResponse {
  arn?: string | null;
  status?: SimulationJobStatus | null;
  lastStartedAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  failureBehavior?: FailureBehavior | null;
  failureCode?: SimulationJobErrorCode | null;
  clientRequestToken?: string | null;
  outputLocation?: OutputLocation | null;
  loggingConfig?: LoggingConfig | null;
  maxJobDurationInSeconds?: number | null;
  simulationTimeMillis?: number | null;
  iamRole?: string | null;
  robotApplications?: RobotApplicationConfig[] | null;
  simulationApplications?: SimulationApplicationConfig[] | null;
  dataSources?: DataSource[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
  vpcConfig?: VPCConfigResponse | null;
  compute?: ComputeResponse | null;
}

// refs: 1 - tags: named, output
export interface CreateWorldExportJobResponse {
  arn?: string | null;
  status?: WorldExportJobStatus | null;
  createdAt?: Date | number | null;
  failureCode?: WorldExportJobErrorCode | null;
  clientRequestToken?: string | null;
  outputLocation?: OutputLocation | null;
  iamRole?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateWorldGenerationJobResponse {
  arn?: string | null;
  status?: WorldGenerationJobStatus | null;
  createdAt?: Date | number | null;
  failureCode?: WorldGenerationJobErrorCode | null;
  clientRequestToken?: string | null;
  template?: string | null;
  worldCount?: WorldCount | null;
  tags?: { [key: string]: string | null | undefined } | null;
  worldTags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateWorldTemplateResponse {
  arn?: string | null;
  clientRequestToken?: string | null;
  createdAt?: Date | number | null;
  name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DeleteFleetResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRobotResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRobotApplicationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSimulationApplicationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteWorldTemplateResponse {
}

// refs: 1 - tags: named, output
export interface DeregisterRobotResponse {
  fleet?: string | null;
  robot?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDeploymentJobResponse {
  arn?: string | null;
  fleet?: string | null;
  status?: DeploymentStatus | null;
  deploymentConfig?: DeploymentConfig | null;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[] | null;
  failureReason?: string | null;
  failureCode?: DeploymentJobErrorCode | null;
  createdAt?: Date | number | null;
  robotDeploymentSummary?: RobotDeployment[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeFleetResponse {
  name?: string | null;
  arn?: string | null;
  robots?: Robot[] | null;
  createdAt?: Date | number | null;
  lastDeploymentStatus?: DeploymentStatus | null;
  lastDeploymentJob?: string | null;
  lastDeploymentTime?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeRobotResponse {
  arn?: string | null;
  name?: string | null;
  fleetArn?: string | null;
  status?: RobotStatus | null;
  greengrassGroupId?: string | null;
  createdAt?: Date | number | null;
  architecture?: Architecture | null;
  lastDeploymentJob?: string | null;
  lastDeploymentTime?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeRobotApplicationResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  revisionId?: string | null;
  lastUpdatedAt?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeSimulationApplicationResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  simulationSoftwareSuite?: SimulationSoftwareSuite | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  renderingEngine?: RenderingEngine | null;
  revisionId?: string | null;
  lastUpdatedAt?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeSimulationJobResponse {
  arn?: string | null;
  name?: string | null;
  status?: SimulationJobStatus | null;
  lastStartedAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  failureBehavior?: FailureBehavior | null;
  failureCode?: SimulationJobErrorCode | null;
  failureReason?: string | null;
  clientRequestToken?: string | null;
  outputLocation?: OutputLocation | null;
  loggingConfig?: LoggingConfig | null;
  maxJobDurationInSeconds?: number | null;
  simulationTimeMillis?: number | null;
  iamRole?: string | null;
  robotApplications?: RobotApplicationConfig[] | null;
  simulationApplications?: SimulationApplicationConfig[] | null;
  dataSources?: DataSource[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
  vpcConfig?: VPCConfigResponse | null;
  networkInterface?: NetworkInterface | null;
  compute?: ComputeResponse | null;
}

// refs: 1 - tags: named, output
export interface DescribeSimulationJobBatchResponse {
  arn?: string | null;
  status?: SimulationJobBatchStatus | null;
  lastUpdatedAt?: Date | number | null;
  createdAt?: Date | number | null;
  clientRequestToken?: string | null;
  batchPolicy?: BatchPolicy | null;
  failureCode?: SimulationJobBatchErrorCode | null;
  failureReason?: string | null;
  failedRequests?: FailedCreateSimulationJobRequest[] | null;
  pendingRequests?: SimulationJobRequest[] | null;
  createdRequests?: SimulationJobSummary[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorldResponse {
  arn?: string | null;
  generationJob?: string | null;
  template?: string | null;
  createdAt?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorldExportJobResponse {
  arn?: string | null;
  status?: WorldExportJobStatus | null;
  createdAt?: Date | number | null;
  failureCode?: WorldExportJobErrorCode | null;
  failureReason?: string | null;
  clientRequestToken?: string | null;
  worlds?: string[] | null;
  outputLocation?: OutputLocation | null;
  iamRole?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorldGenerationJobResponse {
  arn?: string | null;
  status?: WorldGenerationJobStatus | null;
  createdAt?: Date | number | null;
  failureCode?: WorldGenerationJobErrorCode | null;
  failureReason?: string | null;
  clientRequestToken?: string | null;
  template?: string | null;
  worldCount?: WorldCount | null;
  finishedWorldsSummary?: FinishedWorldsSummary | null;
  tags?: { [key: string]: string | null | undefined } | null;
  worldTags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorldTemplateResponse {
  arn?: string | null;
  clientRequestToken?: string | null;
  name?: string | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetWorldTemplateBodyResponse {
  templateBody?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeploymentJobsResponse {
  deploymentJobs?: DeploymentJob[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFleetsResponse {
  fleetDetails?: Fleet[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRobotApplicationsResponse {
  robotApplicationSummaries?: RobotApplicationSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRobotsResponse {
  robots?: Robot[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSimulationApplicationsResponse {
  simulationApplicationSummaries?: SimulationApplicationSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSimulationJobBatchesResponse {
  simulationJobBatchSummaries?: SimulationJobBatchSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSimulationJobsResponse {
  simulationJobSummaries: SimulationJobSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListWorldExportJobsResponse {
  worldExportJobSummaries: WorldExportJobSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListWorldGenerationJobsResponse {
  worldGenerationJobSummaries: WorldGenerationJobSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListWorldTemplatesResponse {
  templateSummaries?: TemplateSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListWorldsResponse {
  worldSummaries?: WorldSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterRobotResponse {
  fleet?: string | null;
  robot?: string | null;
}

// refs: 1 - tags: named, output
export interface RestartSimulationJobResponse {
}

// refs: 1 - tags: named, output
export interface StartSimulationJobBatchResponse {
  arn?: string | null;
  status?: SimulationJobBatchStatus | null;
  createdAt?: Date | number | null;
  clientRequestToken?: string | null;
  batchPolicy?: BatchPolicy | null;
  failureCode?: SimulationJobBatchErrorCode | null;
  failureReason?: string | null;
  failedRequests?: FailedCreateSimulationJobRequest[] | null;
  pendingRequests?: SimulationJobRequest[] | null;
  createdRequests?: SimulationJobSummary[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface SyncDeploymentJobResponse {
  arn?: string | null;
  fleet?: string | null;
  status?: DeploymentStatus | null;
  deploymentConfig?: DeploymentConfig | null;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[] | null;
  failureReason?: string | null;
  failureCode?: DeploymentJobErrorCode | null;
  createdAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateRobotApplicationResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  lastUpdatedAt?: Date | number | null;
  revisionId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSimulationApplicationResponse {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  sources?: Source[] | null;
  simulationSoftwareSuite?: SimulationSoftwareSuite | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  renderingEngine?: RenderingEngine | null;
  lastUpdatedAt?: Date | number | null;
  revisionId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateWorldTemplateResponse {
  arn?: string | null;
  name?: string | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
}

// refs: 5 - tags: input, named, interface, output
export interface DeploymentConfig {
  concurrentDeploymentPercentage?: number | null;
  failureThresholdPercentage?: number | null;
  robotDeploymentTimeoutInSeconds?: number | null;
  downloadConditionFile?: S3Object | null;
}
function fromDeploymentConfig(input?: DeploymentConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    concurrentDeploymentPercentage: input["concurrentDeploymentPercentage"],
    failureThresholdPercentage: input["failureThresholdPercentage"],
    robotDeploymentTimeoutInSeconds: input["robotDeploymentTimeoutInSeconds"],
    downloadConditionFile: fromS3Object(input["downloadConditionFile"]),
  }
}
function toDeploymentConfig(root: jsonP.JSONValue): DeploymentConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "concurrentDeploymentPercentage": "n",
      "failureThresholdPercentage": "n",
      "robotDeploymentTimeoutInSeconds": "n",
      "downloadConditionFile": toS3Object,
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface S3Object {
  bucket: string;
  key: string;
  etag?: string | null;
}
function fromS3Object(input?: S3Object | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucket: input["bucket"],
    key: input["key"],
    etag: input["etag"],
  }
}
function toS3Object(root: jsonP.JSONValue): S3Object {
  return jsonP.readObj({
    required: {
      "bucket": "s",
      "key": "s",
    },
    optional: {
      "etag": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface DeploymentApplicationConfig {
  application: string;
  applicationVersion: string;
  launchConfig: DeploymentLaunchConfig;
}
function fromDeploymentApplicationConfig(input?: DeploymentApplicationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    application: input["application"],
    applicationVersion: input["applicationVersion"],
    launchConfig: fromDeploymentLaunchConfig(input["launchConfig"]),
  }
}
function toDeploymentApplicationConfig(root: jsonP.JSONValue): DeploymentApplicationConfig {
  return jsonP.readObj({
    required: {
      "application": "s",
      "applicationVersion": "s",
      "launchConfig": toDeploymentLaunchConfig,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface DeploymentLaunchConfig {
  packageName: string;
  preLaunchFile?: string | null;
  launchFile: string;
  postLaunchFile?: string | null;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
}
function fromDeploymentLaunchConfig(input?: DeploymentLaunchConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    packageName: input["packageName"],
    preLaunchFile: input["preLaunchFile"],
    launchFile: input["launchFile"],
    postLaunchFile: input["postLaunchFile"],
    environmentVariables: input["environmentVariables"],
  }
}
function toDeploymentLaunchConfig(root: jsonP.JSONValue): DeploymentLaunchConfig {
  return jsonP.readObj({
    required: {
      "packageName": "s",
      "launchFile": "s",
    },
    optional: {
      "preLaunchFile": "s",
      "postLaunchFile": "s",
      "environmentVariables": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 17 - tags: input, named, enum, output
export type Architecture =
| "X86_64"
| "ARM64"
| "ARMHF"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface
export interface SourceConfig {
  s3Bucket?: string | null;
  s3Key?: string | null;
  architecture?: Architecture | null;
}
function fromSourceConfig(input?: SourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Bucket: input["s3Bucket"],
    s3Key: input["s3Key"],
    architecture: input["architecture"],
  }
}

// refs: 14 - tags: input, named, interface, output
export interface RobotSoftwareSuite {
  name?: RobotSoftwareSuiteType | null;
  version?: RobotSoftwareSuiteVersionType | null;
}
function fromRobotSoftwareSuite(input?: RobotSoftwareSuite | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    version: input["version"],
  }
}
function toRobotSoftwareSuite(root: jsonP.JSONValue): RobotSoftwareSuite {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<RobotSoftwareSuiteType>(x),
      "version": (x: jsonP.JSONValue) => cmnP.readEnum<RobotSoftwareSuiteVersionType>(x),
    },
  }, root);
}

// refs: 14 - tags: input, named, enum, output
export type RobotSoftwareSuiteType =
| "ROS"
| "ROS2"
| cmnP.UnexpectedEnumValue;

// refs: 14 - tags: input, named, enum, output
export type RobotSoftwareSuiteVersionType =
| "Kinetic"
| "Melodic"
| "Dashing"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface SimulationSoftwareSuite {
  name?: SimulationSoftwareSuiteType | null;
  version?: string | null;
}
function fromSimulationSoftwareSuite(input?: SimulationSoftwareSuite | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    version: input["version"],
  }
}
function toSimulationSoftwareSuite(root: jsonP.JSONValue): SimulationSoftwareSuite {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationSoftwareSuiteType>(x),
      "version": "s",
    },
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type SimulationSoftwareSuiteType =
| "Gazebo"
| "RosbagPlay"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface RenderingEngine {
  name?: RenderingEngineType | null;
  version?: string | null;
}
function fromRenderingEngine(input?: RenderingEngine | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    version: input["version"],
  }
}
function toRenderingEngine(root: jsonP.JSONValue): RenderingEngine {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<RenderingEngineType>(x),
      "version": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type RenderingEngineType =
| "OGRE"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, interface, output
export interface OutputLocation {
  s3Bucket?: string | null;
  s3Prefix?: string | null;
}
function fromOutputLocation(input?: OutputLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Bucket: input["s3Bucket"],
    s3Prefix: input["s3Prefix"],
  }
}
function toOutputLocation(root: jsonP.JSONValue): OutputLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3Bucket": "s",
      "s3Prefix": "s",
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface LoggingConfig {
  recordAllRosTopics: boolean;
}
function fromLoggingConfig(input?: LoggingConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    recordAllRosTopics: input["recordAllRosTopics"],
  }
}
function toLoggingConfig(root: jsonP.JSONValue): LoggingConfig {
  return jsonP.readObj({
    required: {
      "recordAllRosTopics": "b",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type FailureBehavior =
| "Fail"
| "Continue"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, interface, output
export interface RobotApplicationConfig {
  application: string;
  applicationVersion?: string | null;
  launchConfig: LaunchConfig;
  uploadConfigurations?: UploadConfiguration[] | null;
  useDefaultUploadConfigurations?: boolean | null;
}
function fromRobotApplicationConfig(input?: RobotApplicationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    application: input["application"],
    applicationVersion: input["applicationVersion"],
    launchConfig: fromLaunchConfig(input["launchConfig"]),
    uploadConfigurations: input["uploadConfigurations"]?.map(x => fromUploadConfiguration(x)),
    useDefaultUploadConfigurations: input["useDefaultUploadConfigurations"],
  }
}
function toRobotApplicationConfig(root: jsonP.JSONValue): RobotApplicationConfig {
  return jsonP.readObj({
    required: {
      "application": "s",
      "launchConfig": toLaunchConfig,
    },
    optional: {
      "applicationVersion": "s",
      "uploadConfigurations": [toUploadConfiguration],
      "useDefaultUploadConfigurations": "b",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface LaunchConfig {
  packageName: string;
  launchFile: string;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
  portForwardingConfig?: PortForwardingConfig | null;
  streamUI?: boolean | null;
}
function fromLaunchConfig(input?: LaunchConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    packageName: input["packageName"],
    launchFile: input["launchFile"],
    environmentVariables: input["environmentVariables"],
    portForwardingConfig: fromPortForwardingConfig(input["portForwardingConfig"]),
    streamUI: input["streamUI"],
  }
}
function toLaunchConfig(root: jsonP.JSONValue): LaunchConfig {
  return jsonP.readObj({
    required: {
      "packageName": "s",
      "launchFile": "s",
    },
    optional: {
      "environmentVariables": x => jsonP.readMap(String, String, x),
      "portForwardingConfig": toPortForwardingConfig,
      "streamUI": "b",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface PortForwardingConfig {
  portMappings?: PortMapping[] | null;
}
function fromPortForwardingConfig(input?: PortForwardingConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    portMappings: input["portMappings"]?.map(x => fromPortMapping(x)),
  }
}
function toPortForwardingConfig(root: jsonP.JSONValue): PortForwardingConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "portMappings": [toPortMapping],
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface PortMapping {
  jobPort: number;
  applicationPort: number;
  enableOnPublicIp?: boolean | null;
}
function fromPortMapping(input?: PortMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    jobPort: input["jobPort"],
    applicationPort: input["applicationPort"],
    enableOnPublicIp: input["enableOnPublicIp"],
  }
}
function toPortMapping(root: jsonP.JSONValue): PortMapping {
  return jsonP.readObj({
    required: {
      "jobPort": "n",
      "applicationPort": "n",
    },
    optional: {
      "enableOnPublicIp": "b",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface UploadConfiguration {
  name: string;
  path: string;
  uploadBehavior: UploadBehavior;
}
function fromUploadConfiguration(input?: UploadConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    path: input["path"],
    uploadBehavior: input["uploadBehavior"],
  }
}
function toUploadConfiguration(root: jsonP.JSONValue): UploadConfiguration {
  return jsonP.readObj({
    required: {
      "name": "s",
      "path": "s",
      "uploadBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<UploadBehavior>(x),
    },
    optional: {},
  }, root);
}

// refs: 18 - tags: input, named, enum, output
export type UploadBehavior =
| "UPLOAD_ON_TERMINATE"
| "UPLOAD_ROLLING_AUTO_REMOVE"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, interface, output
export interface SimulationApplicationConfig {
  application: string;
  applicationVersion?: string | null;
  launchConfig: LaunchConfig;
  uploadConfigurations?: UploadConfiguration[] | null;
  worldConfigs?: WorldConfig[] | null;
  useDefaultUploadConfigurations?: boolean | null;
}
function fromSimulationApplicationConfig(input?: SimulationApplicationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    application: input["application"],
    applicationVersion: input["applicationVersion"],
    launchConfig: fromLaunchConfig(input["launchConfig"]),
    uploadConfigurations: input["uploadConfigurations"]?.map(x => fromUploadConfiguration(x)),
    worldConfigs: input["worldConfigs"]?.map(x => fromWorldConfig(x)),
    useDefaultUploadConfigurations: input["useDefaultUploadConfigurations"],
  }
}
function toSimulationApplicationConfig(root: jsonP.JSONValue): SimulationApplicationConfig {
  return jsonP.readObj({
    required: {
      "application": "s",
      "launchConfig": toLaunchConfig,
    },
    optional: {
      "applicationVersion": "s",
      "uploadConfigurations": [toUploadConfiguration],
      "worldConfigs": [toWorldConfig],
      "useDefaultUploadConfigurations": "b",
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface WorldConfig {
  world?: string | null;
}
function fromWorldConfig(input?: WorldConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    world: input["world"],
  }
}
function toWorldConfig(root: jsonP.JSONValue): WorldConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "world": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface DataSourceConfig {
  name: string;
  s3Bucket: string;
  s3Keys: string[];
}
function fromDataSourceConfig(input?: DataSourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    s3Bucket: input["s3Bucket"],
    s3Keys: input["s3Keys"],
  }
}
function toDataSourceConfig(root: jsonP.JSONValue): DataSourceConfig {
  return jsonP.readObj({
    required: {
      "name": "s",
      "s3Bucket": "s",
      "s3Keys": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface VPCConfig {
  subnets: string[];
  securityGroups?: string[] | null;
  assignPublicIp?: boolean | null;
}
function fromVPCConfig(input?: VPCConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    subnets: input["subnets"],
    securityGroups: input["securityGroups"],
    assignPublicIp: input["assignPublicIp"],
  }
}
function toVPCConfig(root: jsonP.JSONValue): VPCConfig {
  return jsonP.readObj({
    required: {
      "subnets": ["s"],
    },
    optional: {
      "securityGroups": ["s"],
      "assignPublicIp": "b",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Compute {
  simulationUnitLimit?: number | null;
}
function fromCompute(input?: Compute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    simulationUnitLimit: input["simulationUnitLimit"],
  }
}
function toCompute(root: jsonP.JSONValue): Compute {
  return jsonP.readObj({
    required: {},
    optional: {
      "simulationUnitLimit": "n",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface WorldCount {
  floorplanCount?: number | null;
  interiorCountPerFloorplan?: number | null;
}
function fromWorldCount(input?: WorldCount | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    floorplanCount: input["floorplanCount"],
    interiorCountPerFloorplan: input["interiorCountPerFloorplan"],
  }
}
function toWorldCount(root: jsonP.JSONValue): WorldCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "floorplanCount": "n",
      "interiorCountPerFloorplan": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface TemplateLocation {
  s3Bucket: string;
  s3Key: string;
}
function fromTemplateLocation(input?: TemplateLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Bucket: input["s3Bucket"],
    s3Key: input["s3Key"],
  }
}

// refs: 10 - tags: input, named, interface
export interface Filter {
  name?: string | null;
  values?: string[] | null;
}
function fromFilter(input?: Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface BatchPolicy {
  timeoutInSeconds?: number | null;
  maxConcurrency?: number | null;
}
function fromBatchPolicy(input?: BatchPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timeoutInSeconds: input["timeoutInSeconds"],
    maxConcurrency: input["maxConcurrency"],
  }
}
function toBatchPolicy(root: jsonP.JSONValue): BatchPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "timeoutInSeconds": "n",
      "maxConcurrency": "n",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface SimulationJobRequest {
  outputLocation?: OutputLocation | null;
  loggingConfig?: LoggingConfig | null;
  maxJobDurationInSeconds: number;
  iamRole?: string | null;
  failureBehavior?: FailureBehavior | null;
  useDefaultApplications?: boolean | null;
  robotApplications?: RobotApplicationConfig[] | null;
  simulationApplications?: SimulationApplicationConfig[] | null;
  dataSources?: DataSourceConfig[] | null;
  vpcConfig?: VPCConfig | null;
  compute?: Compute | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function fromSimulationJobRequest(input?: SimulationJobRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    outputLocation: fromOutputLocation(input["outputLocation"]),
    loggingConfig: fromLoggingConfig(input["loggingConfig"]),
    maxJobDurationInSeconds: input["maxJobDurationInSeconds"],
    iamRole: input["iamRole"],
    failureBehavior: input["failureBehavior"],
    useDefaultApplications: input["useDefaultApplications"],
    robotApplications: input["robotApplications"]?.map(x => fromRobotApplicationConfig(x)),
    simulationApplications: input["simulationApplications"]?.map(x => fromSimulationApplicationConfig(x)),
    dataSources: input["dataSources"]?.map(x => fromDataSourceConfig(x)),
    vpcConfig: fromVPCConfig(input["vpcConfig"]),
    compute: fromCompute(input["compute"]),
    tags: input["tags"],
  }
}
function toSimulationJobRequest(root: jsonP.JSONValue): SimulationJobRequest {
  return jsonP.readObj({
    required: {
      "maxJobDurationInSeconds": "n",
    },
    optional: {
      "outputLocation": toOutputLocation,
      "loggingConfig": toLoggingConfig,
      "iamRole": "s",
      "failureBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<FailureBehavior>(x),
      "useDefaultApplications": "b",
      "robotApplications": [toRobotApplicationConfig],
      "simulationApplications": [toSimulationApplicationConfig],
      "dataSources": [toDataSourceConfig],
      "vpcConfig": toVPCConfig,
      "compute": toCompute,
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SimulationJob {
  arn?: string | null;
  name?: string | null;
  status?: SimulationJobStatus | null;
  lastStartedAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  failureBehavior?: FailureBehavior | null;
  failureCode?: SimulationJobErrorCode | null;
  failureReason?: string | null;
  clientRequestToken?: string | null;
  outputLocation?: OutputLocation | null;
  loggingConfig?: LoggingConfig | null;
  maxJobDurationInSeconds?: number | null;
  simulationTimeMillis?: number | null;
  iamRole?: string | null;
  robotApplications?: RobotApplicationConfig[] | null;
  simulationApplications?: SimulationApplicationConfig[] | null;
  dataSources?: DataSource[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
  vpcConfig?: VPCConfigResponse | null;
  networkInterface?: NetworkInterface | null;
  compute?: ComputeResponse | null;
}
function toSimulationJob(root: jsonP.JSONValue): SimulationJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobStatus>(x),
      "lastStartedAt": "d",
      "lastUpdatedAt": "d",
      "failureBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<FailureBehavior>(x),
      "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobErrorCode>(x),
      "failureReason": "s",
      "clientRequestToken": "s",
      "outputLocation": toOutputLocation,
      "loggingConfig": toLoggingConfig,
      "maxJobDurationInSeconds": "n",
      "simulationTimeMillis": "n",
      "iamRole": "s",
      "robotApplications": [toRobotApplicationConfig],
      "simulationApplications": [toSimulationApplicationConfig],
      "dataSources": [toDataSource],
      "tags": x => jsonP.readMap(String, String, x),
      "vpcConfig": toVPCConfigResponse,
      "networkInterface": toNetworkInterface,
      "compute": toComputeResponse,
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type SimulationJobStatus =
| "Pending"
| "Preparing"
| "Running"
| "Restarting"
| "Completed"
| "Failed"
| "RunningFailed"
| "Terminating"
| "Terminated"
| "Canceled"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type SimulationJobErrorCode =
| "InternalServiceError"
| "RobotApplicationCrash"
| "SimulationApplicationCrash"
| "BadPermissionsRobotApplication"
| "BadPermissionsSimulationApplication"
| "BadPermissionsS3Object"
| "BadPermissionsS3Output"
| "BadPermissionsCloudwatchLogs"
| "SubnetIpLimitExceeded"
| "ENILimitExceeded"
| "BadPermissionsUserCredentials"
| "InvalidBundleRobotApplication"
| "InvalidBundleSimulationApplication"
| "InvalidS3Resource"
| "LimitExceeded"
| "MismatchedEtag"
| "RobotApplicationVersionMismatchedEtag"
| "SimulationApplicationVersionMismatchedEtag"
| "ResourceNotFound"
| "RequestThrottled"
| "BatchTimedOut"
| "BatchCanceled"
| "InvalidInput"
| "WrongRegionS3Bucket"
| "WrongRegionS3Output"
| "WrongRegionRobotApplication"
| "WrongRegionSimulationApplication"
| "UploadContentMismatchError"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface DataSource {
  name?: string | null;
  s3Bucket?: string | null;
  s3Keys?: S3KeyOutput[] | null;
}
function toDataSource(root: jsonP.JSONValue): DataSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "s3Bucket": "s",
      "s3Keys": [toS3KeyOutput],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface S3KeyOutput {
  s3Key?: string | null;
  etag?: string | null;
}
function toS3KeyOutput(root: jsonP.JSONValue): S3KeyOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3Key": "s",
      "etag": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface VPCConfigResponse {
  subnets?: string[] | null;
  securityGroups?: string[] | null;
  vpcId?: string | null;
  assignPublicIp?: boolean | null;
}
function toVPCConfigResponse(root: jsonP.JSONValue): VPCConfigResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "subnets": ["s"],
      "securityGroups": ["s"],
      "vpcId": "s",
      "assignPublicIp": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface NetworkInterface {
  networkInterfaceId?: string | null;
  privateIpAddress?: string | null;
  publicIpAddress?: string | null;
}
function toNetworkInterface(root: jsonP.JSONValue): NetworkInterface {
  return jsonP.readObj({
    required: {},
    optional: {
      "networkInterfaceId": "s",
      "privateIpAddress": "s",
      "publicIpAddress": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ComputeResponse {
  simulationUnitLimit?: number | null;
}
function toComputeResponse(root: jsonP.JSONValue): ComputeResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "simulationUnitLimit": "n",
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type DeploymentStatus =
| "Pending"
| "Preparing"
| "InProgress"
| "Failed"
| "Succeeded"
| "Canceled"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type DeploymentJobErrorCode =
| "ResourceNotFound"
| "EnvironmentSetupError"
| "EtagMismatch"
| "FailureThresholdBreached"
| "RobotDeploymentAborted"
| "RobotDeploymentNoResponse"
| "RobotAgentConnectionTimeout"
| "GreengrassDeploymentFailed"
| "InvalidGreengrassGroup"
| "MissingRobotArchitecture"
| "MissingRobotApplicationArchitecture"
| "MissingRobotDeploymentResource"
| "GreengrassGroupVersionDoesNotExist"
| "LambdaDeleted"
| "ExtractingBundleFailure"
| "PreLaunchFileFailure"
| "PostLaunchFileFailure"
| "BadPermissionError"
| "DownloadConditionFailed"
| "InternalServerError"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: output, named, interface
export interface Source {
  s3Bucket?: string | null;
  s3Key?: string | null;
  etag?: string | null;
  architecture?: Architecture | null;
}
function toSource(root: jsonP.JSONValue): Source {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3Bucket": "s",
      "s3Key": "s",
      "etag": "s",
      "architecture": (x: jsonP.JSONValue) => cmnP.readEnum<Architecture>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type WorldExportJobStatus =
| "Pending"
| "Running"
| "Completed"
| "Failed"
| "Canceling"
| "Canceled"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type WorldExportJobErrorCode =
| "InternalServiceError"
| "LimitExceeded"
| "ResourceNotFound"
| "RequestThrottled"
| "InvalidInput"
| "AccessDenied"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type WorldGenerationJobStatus =
| "Pending"
| "Running"
| "Completed"
| "Failed"
| "PartialFailed"
| "Canceling"
| "Canceled"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type WorldGenerationJobErrorCode =
| "InternalServiceError"
| "LimitExceeded"
| "ResourceNotFound"
| "RequestThrottled"
| "InvalidInput"
| "AllWorldGenerationFailed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface RobotDeployment {
  arn?: string | null;
  deploymentStartTime?: Date | number | null;
  deploymentFinishTime?: Date | number | null;
  status?: RobotStatus | null;
  progressDetail?: ProgressDetail | null;
  failureReason?: string | null;
  failureCode?: DeploymentJobErrorCode | null;
}
function toRobotDeployment(root: jsonP.JSONValue): RobotDeployment {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "deploymentStartTime": "d",
      "deploymentFinishTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<RobotStatus>(x),
      "progressDetail": toProgressDetail,
      "failureReason": "s",
      "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentJobErrorCode>(x),
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type RobotStatus =
| "Available"
| "Registered"
| "PendingNewDeployment"
| "Deploying"
| "Failed"
| "InSync"
| "NoResponse"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ProgressDetail {
  currentProgress?: RobotDeploymentStep | null;
  percentDone?: number | null;
  estimatedTimeRemainingSeconds?: number | null;
  targetResource?: string | null;
}
function toProgressDetail(root: jsonP.JSONValue): ProgressDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "currentProgress": (x: jsonP.JSONValue) => cmnP.readEnum<RobotDeploymentStep>(x),
      "percentDone": "n",
      "estimatedTimeRemainingSeconds": "n",
      "targetResource": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RobotDeploymentStep =
| "Validating"
| "DownloadingExtracting"
| "ExecutingDownloadCondition"
| "ExecutingPreLaunch"
| "Launching"
| "ExecutingPostLaunch"
| "Finished"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Robot {
  arn?: string | null;
  name?: string | null;
  fleetArn?: string | null;
  status?: RobotStatus | null;
  greenGrassGroupId?: string | null;
  createdAt?: Date | number | null;
  architecture?: Architecture | null;
  lastDeploymentJob?: string | null;
  lastDeploymentTime?: Date | number | null;
}
function toRobot(root: jsonP.JSONValue): Robot {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "fleetArn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<RobotStatus>(x),
      "greenGrassGroupId": "s",
      "createdAt": "d",
      "architecture": (x: jsonP.JSONValue) => cmnP.readEnum<Architecture>(x),
      "lastDeploymentJob": "s",
      "lastDeploymentTime": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type SimulationJobBatchStatus =
| "Pending"
| "InProgress"
| "Failed"
| "Completed"
| "Canceled"
| "Canceling"
| "Completing"
| "TimingOut"
| "TimedOut"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type SimulationJobBatchErrorCode =
| "InternalServiceError"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface FailedCreateSimulationJobRequest {
  request?: SimulationJobRequest | null;
  failureReason?: string | null;
  failureCode?: SimulationJobErrorCode | null;
  failedAt?: Date | number | null;
}
function toFailedCreateSimulationJobRequest(root: jsonP.JSONValue): FailedCreateSimulationJobRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "request": toSimulationJobRequest,
      "failureReason": "s",
      "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobErrorCode>(x),
      "failedAt": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface SimulationJobSummary {
  arn?: string | null;
  lastUpdatedAt?: Date | number | null;
  name?: string | null;
  status?: SimulationJobStatus | null;
  simulationApplicationNames?: string[] | null;
  robotApplicationNames?: string[] | null;
  dataSourceNames?: string[] | null;
}
function toSimulationJobSummary(root: jsonP.JSONValue): SimulationJobSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "lastUpdatedAt": "d",
      "name": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobStatus>(x),
      "simulationApplicationNames": ["s"],
      "robotApplicationNames": ["s"],
      "dataSourceNames": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FinishedWorldsSummary {
  finishedCount?: number | null;
  succeededWorlds?: string[] | null;
  failureSummary?: FailureSummary | null;
}
function toFinishedWorldsSummary(root: jsonP.JSONValue): FinishedWorldsSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "finishedCount": "n",
      "succeededWorlds": ["s"],
      "failureSummary": toFailureSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FailureSummary {
  totalFailureCount?: number | null;
  failures?: WorldFailure[] | null;
}
function toFailureSummary(root: jsonP.JSONValue): FailureSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "totalFailureCount": "n",
      "failures": [toWorldFailure],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorldFailure {
  failureCode?: WorldGenerationJobErrorCode | null;
  sampleFailureReason?: string | null;
  failureCount?: number | null;
}
function toWorldFailure(root: jsonP.JSONValue): WorldFailure {
  return jsonP.readObj({
    required: {},
    optional: {
      "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<WorldGenerationJobErrorCode>(x),
      "sampleFailureReason": "s",
      "failureCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeploymentJob {
  arn?: string | null;
  fleet?: string | null;
  status?: DeploymentStatus | null;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[] | null;
  deploymentConfig?: DeploymentConfig | null;
  failureReason?: string | null;
  failureCode?: DeploymentJobErrorCode | null;
  createdAt?: Date | number | null;
}
function toDeploymentJob(root: jsonP.JSONValue): DeploymentJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "fleet": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
      "deploymentApplicationConfigs": [toDeploymentApplicationConfig],
      "deploymentConfig": toDeploymentConfig,
      "failureReason": "s",
      "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentJobErrorCode>(x),
      "createdAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Fleet {
  name?: string | null;
  arn?: string | null;
  createdAt?: Date | number | null;
  lastDeploymentStatus?: DeploymentStatus | null;
  lastDeploymentJob?: string | null;
  lastDeploymentTime?: Date | number | null;
}
function toFleet(root: jsonP.JSONValue): Fleet {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "createdAt": "d",
      "lastDeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
      "lastDeploymentJob": "s",
      "lastDeploymentTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RobotApplicationSummary {
  name?: string | null;
  arn?: string | null;
  version?: string | null;
  lastUpdatedAt?: Date | number | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
}
function toRobotApplicationSummary(root: jsonP.JSONValue): RobotApplicationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "version": "s",
      "lastUpdatedAt": "d",
      "robotSoftwareSuite": toRobotSoftwareSuite,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SimulationApplicationSummary {
  name?: string | null;
  arn?: string | null;
  version?: string | null;
  lastUpdatedAt?: Date | number | null;
  robotSoftwareSuite?: RobotSoftwareSuite | null;
  simulationSoftwareSuite?: SimulationSoftwareSuite | null;
}
function toSimulationApplicationSummary(root: jsonP.JSONValue): SimulationApplicationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "version": "s",
      "lastUpdatedAt": "d",
      "robotSoftwareSuite": toRobotSoftwareSuite,
      "simulationSoftwareSuite": toSimulationSoftwareSuite,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SimulationJobBatchSummary {
  arn?: string | null;
  lastUpdatedAt?: Date | number | null;
  createdAt?: Date | number | null;
  status?: SimulationJobBatchStatus | null;
  failedRequestCount?: number | null;
  pendingRequestCount?: number | null;
  createdRequestCount?: number | null;
}
function toSimulationJobBatchSummary(root: jsonP.JSONValue): SimulationJobBatchSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "lastUpdatedAt": "d",
      "createdAt": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<SimulationJobBatchStatus>(x),
      "failedRequestCount": "n",
      "pendingRequestCount": "n",
      "createdRequestCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorldExportJobSummary {
  arn?: string | null;
  status?: WorldExportJobStatus | null;
  createdAt?: Date | number | null;
  worlds?: string[] | null;
}
function toWorldExportJobSummary(root: jsonP.JSONValue): WorldExportJobSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<WorldExportJobStatus>(x),
      "createdAt": "d",
      "worlds": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorldGenerationJobSummary {
  arn?: string | null;
  template?: string | null;
  createdAt?: Date | number | null;
  status?: WorldGenerationJobStatus | null;
  worldCount?: WorldCount | null;
  succeededWorldCount?: number | null;
  failedWorldCount?: number | null;
}
function toWorldGenerationJobSummary(root: jsonP.JSONValue): WorldGenerationJobSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "template": "s",
      "createdAt": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<WorldGenerationJobStatus>(x),
      "worldCount": toWorldCount,
      "succeededWorldCount": "n",
      "failedWorldCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateSummary {
  arn?: string | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  name?: string | null;
}
function toTemplateSummary(root: jsonP.JSONValue): TemplateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorldSummary {
  arn?: string | null;
  createdAt?: Date | number | null;
  generationJob?: string | null;
  template?: string | null;
}
function toWorldSummary(root: jsonP.JSONValue): WorldSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "createdAt": "d",
      "generationJob": "s",
      "template": "s",
    },
  }, root);
}
