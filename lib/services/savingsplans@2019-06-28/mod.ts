// Autogenerated API client for: AWS Savings Plans

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.91.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class SavingsPlans {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SavingsPlans.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-06-28",
    "endpointPrefix": "savingsplans",
    "globalEndpoint": "savingsplans.amazonaws.com",
    "jsonVersion": "1.0",
    "protocol": "rest-json",
    "serviceAbbreviation": "AWSSavingsPlans",
    "serviceFullName": "AWS Savings Plans",
    "serviceId": "savingsplans",
    "signatureVersion": "v4",
    "uid": "savingsplans-2019-06-28"
  };

  async createSavingsPlan(
    {abortSignal, ...params}: RequestConfig & s.CreateSavingsPlanRequest,
  ): Promise<s.CreateSavingsPlanResponse> {
    const body: jsonP.JSONObject = {
      savingsPlanOfferingId: params["savingsPlanOfferingId"],
      commitment: params["commitment"],
      upfrontPaymentAmount: params["upfrontPaymentAmount"],
      purchaseTime: jsonP.serializeDate_unixTimestamp(params["purchaseTime"]),
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSavingsPlan",
      requestUri: "/CreateSavingsPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "savingsPlanId": "s",
      },
    }, await resp.json());
  }

  async deleteQueuedSavingsPlan(
    {abortSignal, ...params}: RequestConfig & s.DeleteQueuedSavingsPlanRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      savingsPlanId: params["savingsPlanId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteQueuedSavingsPlan",
      requestUri: "/DeleteQueuedSavingsPlan",
    });
    await resp.text();
  }

  async describeSavingsPlanRates(
    {abortSignal, ...params}: RequestConfig & s.DescribeSavingsPlanRatesRequest,
  ): Promise<s.DescribeSavingsPlanRatesResponse> {
    const body: jsonP.JSONObject = {
      savingsPlanId: params["savingsPlanId"],
      filters: params["filters"]?.map(x => fromSavingsPlanRateFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSavingsPlanRates",
      requestUri: "/DescribeSavingsPlanRates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "savingsPlanId": "s",
        "searchResults": [toSavingsPlanRate],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeSavingsPlans(
    {abortSignal, ...params}: RequestConfig & s.DescribeSavingsPlansRequest = {},
  ): Promise<s.DescribeSavingsPlansResponse> {
    const body: jsonP.JSONObject = {
      savingsPlanArns: params["savingsPlanArns"],
      savingsPlanIds: params["savingsPlanIds"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      states: params["states"],
      filters: params["filters"]?.map(x => fromSavingsPlanFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSavingsPlans",
      requestUri: "/DescribeSavingsPlans",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "savingsPlans": [toSavingsPlan],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeSavingsPlansOfferingRates(
    {abortSignal, ...params}: RequestConfig & s.DescribeSavingsPlansOfferingRatesRequest = {},
  ): Promise<s.DescribeSavingsPlansOfferingRatesResponse> {
    const body: jsonP.JSONObject = {
      savingsPlanOfferingIds: params["savingsPlanOfferingIds"],
      savingsPlanPaymentOptions: params["savingsPlanPaymentOptions"],
      savingsPlanTypes: params["savingsPlanTypes"],
      products: params["products"],
      serviceCodes: params["serviceCodes"],
      usageTypes: params["usageTypes"],
      operations: params["operations"],
      filters: params["filters"]?.map(x => fromSavingsPlanOfferingRateFilterElement(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSavingsPlansOfferingRates",
      requestUri: "/DescribeSavingsPlansOfferingRates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "searchResults": [toSavingsPlanOfferingRate],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeSavingsPlansOfferings(
    {abortSignal, ...params}: RequestConfig & s.DescribeSavingsPlansOfferingsRequest = {},
  ): Promise<s.DescribeSavingsPlansOfferingsResponse> {
    const body: jsonP.JSONObject = {
      offeringIds: params["offeringIds"],
      paymentOptions: params["paymentOptions"],
      productType: params["productType"],
      planTypes: params["planTypes"],
      durations: params["durations"],
      currencies: params["currencies"],
      descriptions: params["descriptions"],
      serviceCodes: params["serviceCodes"],
      usageTypes: params["usageTypes"],
      operations: params["operations"],
      filters: params["filters"]?.map(x => fromSavingsPlanOfferingFilterElement(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSavingsPlansOfferings",
      requestUri: "/DescribeSavingsPlansOfferings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "searchResults": [toSavingsPlanOffering],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
      requestUri: "/ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/TagResource",
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: "/UntagResource",
    });
    await resp.text();
  }

}

function fromSavingsPlanRateFilter(input?: s.SavingsPlanRateFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

function fromSavingsPlanFilter(input?: s.SavingsPlanFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

function fromSavingsPlanOfferingRateFilterElement(input?: s.SavingsPlanOfferingRateFilterElement | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

function fromSavingsPlanOfferingFilterElement(input?: s.SavingsPlanOfferingFilterElement | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

function toSavingsPlanRate(root: jsonP.JSONValue): s.SavingsPlanRate {
  return jsonP.readObj({
    required: {},
    optional: {
      "rate": "s",
      "currency": (x: jsonP.JSONValue) => cmnP.readEnum<s.CurrencyCode>(x),
      "unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanRateUnit>(x),
      "productType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanProductType>(x),
      "serviceCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanRateServiceCode>(x),
      "usageType": "s",
      "operation": "s",
      "properties": [toSavingsPlanRateProperty],
    },
  }, root);
}

function toSavingsPlanRateProperty(root: jsonP.JSONValue): s.SavingsPlanRateProperty {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanRatePropertyKey>(x),
      "value": "s",
    },
  }, root);
}

function toSavingsPlan(root: jsonP.JSONValue): s.SavingsPlan {
  return jsonP.readObj({
    required: {},
    optional: {
      "offeringId": "s",
      "savingsPlanId": "s",
      "savingsPlanArn": "s",
      "description": "s",
      "start": "s",
      "end": "s",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanState>(x),
      "region": "s",
      "ec2InstanceFamily": "s",
      "savingsPlanType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanType>(x),
      "paymentOption": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanPaymentOption>(x),
      "productTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanProductType>(x)],
      "currency": (x: jsonP.JSONValue) => cmnP.readEnum<s.CurrencyCode>(x),
      "commitment": "s",
      "upfrontPaymentAmount": "s",
      "recurringPaymentAmount": "s",
      "termDurationInSeconds": "n",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toSavingsPlanOfferingRate(root: jsonP.JSONValue): s.SavingsPlanOfferingRate {
  return jsonP.readObj({
    required: {},
    optional: {
      "savingsPlanOffering": toParentSavingsPlanOffering,
      "rate": "s",
      "unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanRateUnit>(x),
      "productType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanProductType>(x),
      "serviceCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanRateServiceCode>(x),
      "usageType": "s",
      "operation": "s",
      "properties": [toSavingsPlanOfferingRateProperty],
    },
  }, root);
}

function toParentSavingsPlanOffering(root: jsonP.JSONValue): s.ParentSavingsPlanOffering {
  return jsonP.readObj({
    required: {},
    optional: {
      "offeringId": "s",
      "paymentOption": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanPaymentOption>(x),
      "planType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanType>(x),
      "durationSeconds": "n",
      "currency": (x: jsonP.JSONValue) => cmnP.readEnum<s.CurrencyCode>(x),
      "planDescription": "s",
    },
  }, root);
}

function toSavingsPlanOfferingRateProperty(root: jsonP.JSONValue): s.SavingsPlanOfferingRateProperty {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "value": "s",
    },
  }, root);
}

function toSavingsPlanOffering(root: jsonP.JSONValue): s.SavingsPlanOffering {
  return jsonP.readObj({
    required: {},
    optional: {
      "offeringId": "s",
      "productTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanProductType>(x)],
      "planType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanType>(x),
      "description": "s",
      "paymentOption": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanPaymentOption>(x),
      "durationSeconds": "n",
      "currency": (x: jsonP.JSONValue) => cmnP.readEnum<s.CurrencyCode>(x),
      "serviceCode": "s",
      "usageType": "s",
      "operation": "s",
      "properties": [toSavingsPlanOfferingProperty],
    },
  }, root);
}

function toSavingsPlanOfferingProperty(root: jsonP.JSONValue): s.SavingsPlanOfferingProperty {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<s.SavingsPlanOfferingPropertyKey>(x),
      "value": "s",
    },
  }, root);
}
