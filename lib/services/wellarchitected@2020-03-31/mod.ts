// Autogenerated API client for: AWS Well-Architected Tool

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class WellArchitected {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WellArchitected.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-03-31",
    "endpointPrefix": "wellarchitected",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Well-Architected",
    "serviceFullName": "AWS Well-Architected Tool",
    "serviceId": "WellArchitected",
    "signatureVersion": "v4",
    "signingName": "wellarchitected",
    "uid": "wellarchitected-2020-03-31"
  };

  async associateLenses(
    {abortSignal, ...params}: RequestConfig & s.AssociateLensesInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LensAliases: params["LensAliases"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateLenses",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/associateLenses`,
    });
  }

  async createMilestone(
    {abortSignal, ...params}: RequestConfig & s.CreateMilestoneInput,
  ): Promise<s.CreateMilestoneOutput> {
    const body: jsonP.JSONObject = {
      MilestoneName: params["MilestoneName"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMilestone",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/milestones`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
      },
    }, await resp.json());
  }

  async createWorkload(
    {abortSignal, ...params}: RequestConfig & s.CreateWorkloadInput,
  ): Promise<s.CreateWorkloadOutput> {
    const body: jsonP.JSONObject = {
      WorkloadName: params["WorkloadName"],
      Description: params["Description"],
      Environment: params["Environment"],
      AccountIds: params["AccountIds"],
      AwsRegions: params["AwsRegions"],
      NonAwsRegions: params["NonAwsRegions"],
      PillarPriorities: params["PillarPriorities"],
      ArchitecturalDesign: params["ArchitecturalDesign"],
      ReviewOwner: params["ReviewOwner"],
      IndustryType: params["IndustryType"],
      Industry: params["Industry"],
      Lenses: params["Lenses"],
      Notes: params["Notes"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorkload",
      requestUri: "/workloads",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "WorkloadArn": "s",
      },
    }, await resp.json());
  }

  async createWorkloadShare(
    {abortSignal, ...params}: RequestConfig & s.CreateWorkloadShareInput,
  ): Promise<s.CreateWorkloadShareOutput> {
    const body: jsonP.JSONObject = {
      SharedWith: params["SharedWith"],
      PermissionType: params["PermissionType"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorkloadShare",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "ShareId": "s",
      },
    }, await resp.json());
  }

  async deleteWorkload(
    {abortSignal, ...params}: RequestConfig & s.DeleteWorkloadInput,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("ClientRequestToken", params["ClientRequestToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteWorkload",
      method: "DELETE",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}`,
    });
  }

  async deleteWorkloadShare(
    {abortSignal, ...params}: RequestConfig & s.DeleteWorkloadShareInput,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("ClientRequestToken", params["ClientRequestToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteWorkloadShare",
      method: "DELETE",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares/${params["ShareId"]}`,
    });
  }

  async disassociateLenses(
    {abortSignal, ...params}: RequestConfig & s.DisassociateLensesInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LensAliases: params["LensAliases"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateLenses",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/disassociateLenses`,
    });
  }

  async getAnswer(
    {abortSignal, ...params}: RequestConfig & s.GetAnswerInput,
  ): Promise<s.GetAnswerOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAnswer",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/answers/${params["QuestionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensAlias": "s",
        "Answer": toAnswer,
      },
    }, await resp.json());
  }

  async getLensReview(
    {abortSignal, ...params}: RequestConfig & s.GetLensReviewInput,
  ): Promise<s.GetLensReviewOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLensReview",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensReview": toLensReview,
      },
    }, await resp.json());
  }

  async getLensReviewReport(
    {abortSignal, ...params}: RequestConfig & s.GetLensReviewReportInput,
  ): Promise<s.GetLensReviewReportOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLensReviewReport",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/report`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensReviewReport": toLensReviewReport,
      },
    }, await resp.json());
  }

  async getLensVersionDifference(
    {abortSignal, ...params}: RequestConfig & s.GetLensVersionDifferenceInput,
  ): Promise<s.GetLensVersionDifferenceOutput> {
    const query = new URLSearchParams;
    query.set("BaseLensVersion", params["BaseLensVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLensVersionDifference",
      method: "GET",
      requestUri: cmnP.encodePath`/lenses/${params["LensAlias"]}/versionDifference`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LensAlias": "s",
        "BaseLensVersion": "s",
        "LatestLensVersion": "s",
        "VersionDifferences": toVersionDifferences,
      },
    }, await resp.json());
  }

  async getMilestone(
    {abortSignal, ...params}: RequestConfig & s.GetMilestoneInput,
  ): Promise<s.GetMilestoneOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMilestone",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/milestones/${params["MilestoneNumber"].toString()}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "Milestone": toMilestone,
      },
    }, await resp.json());
  }

  async getWorkload(
    {abortSignal, ...params}: RequestConfig & s.GetWorkloadInput,
  ): Promise<s.GetWorkloadOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWorkload",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Workload": toWorkload,
      },
    }, await resp.json());
  }

  async listAnswers(
    {abortSignal, ...params}: RequestConfig & s.ListAnswersInput,
  ): Promise<s.ListAnswersOutput> {
    const query = new URLSearchParams;
    if (params["PillarId"] != null) query.set("PillarId", params["PillarId"]?.toString() ?? "");
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAnswers",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/answers`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensAlias": "s",
        "AnswerSummaries": [toAnswerSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLensReviewImprovements(
    {abortSignal, ...params}: RequestConfig & s.ListLensReviewImprovementsInput,
  ): Promise<s.ListLensReviewImprovementsOutput> {
    const query = new URLSearchParams;
    if (params["PillarId"] != null) query.set("PillarId", params["PillarId"]?.toString() ?? "");
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLensReviewImprovements",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/improvements`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensAlias": "s",
        "ImprovementSummaries": [toImprovementSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLensReviews(
    {abortSignal, ...params}: RequestConfig & s.ListLensReviewsInput,
  ): Promise<s.ListLensReviewsOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLensReviews",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensReviewSummaries": [toLensReviewSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLenses(
    {abortSignal, ...params}: RequestConfig & s.ListLensesInput = {},
  ): Promise<s.ListLensesOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLenses",
      method: "GET",
      requestUri: "/lenses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LensSummaries": [toLensSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMilestones(
    {abortSignal, ...params}: RequestConfig & s.ListMilestonesInput,
  ): Promise<s.ListMilestonesOutput> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMilestones",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/milestonesSummaries`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneSummaries": [toMilestoneSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listNotifications(
    {abortSignal, ...params}: RequestConfig & s.ListNotificationsInput = {},
  ): Promise<s.ListNotificationsOutput> {
    const body: jsonP.JSONObject = {
      WorkloadId: params["WorkloadId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListNotifications",
      requestUri: "/notifications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NotificationSummaries": [toNotificationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listShareInvitations(
    {abortSignal, ...params}: RequestConfig & s.ListShareInvitationsInput = {},
  ): Promise<s.ListShareInvitationsOutput> {
    const query = new URLSearchParams;
    if (params["WorkloadNamePrefix"] != null) query.set("WorkloadNamePrefix", params["WorkloadNamePrefix"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListShareInvitations",
      method: "GET",
      requestUri: "/shareInvitations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ShareInvitationSummaries": [toShareInvitationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listWorkloadShares(
    {abortSignal, ...params}: RequestConfig & s.ListWorkloadSharesInput,
  ): Promise<s.ListWorkloadSharesOutput> {
    const query = new URLSearchParams;
    if (params["SharedWithPrefix"] != null) query.set("SharedWithPrefix", params["SharedWithPrefix"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWorkloadShares",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "WorkloadShareSummaries": [toWorkloadShareSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listWorkloads(
    {abortSignal, ...params}: RequestConfig & s.ListWorkloadsInput = {},
  ): Promise<s.ListWorkloadsOutput> {
    const body: jsonP.JSONObject = {
      WorkloadNamePrefix: params["WorkloadNamePrefix"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWorkloads",
      requestUri: "/workloadsSummaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadSummaries": [toWorkloadSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async updateAnswer(
    {abortSignal, ...params}: RequestConfig & s.UpdateAnswerInput,
  ): Promise<s.UpdateAnswerOutput> {
    const body: jsonP.JSONObject = {
      SelectedChoices: params["SelectedChoices"],
      Notes: params["Notes"],
      IsApplicable: params["IsApplicable"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAnswer",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/answers/${params["QuestionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "LensAlias": "s",
        "Answer": toAnswer,
      },
    }, await resp.json());
  }

  async updateLensReview(
    {abortSignal, ...params}: RequestConfig & s.UpdateLensReviewInput,
  ): Promise<s.UpdateLensReviewOutput> {
    const body: jsonP.JSONObject = {
      LensNotes: params["LensNotes"],
      PillarNotes: params["PillarNotes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLensReview",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "LensReview": toLensReview,
      },
    }, await resp.json());
  }

  async updateShareInvitation(
    {abortSignal, ...params}: RequestConfig & s.UpdateShareInvitationInput,
  ): Promise<s.UpdateShareInvitationOutput> {
    const body: jsonP.JSONObject = {
      ShareInvitationAction: params["ShareInvitationAction"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateShareInvitation",
      method: "PATCH",
      requestUri: cmnP.encodePath`/shareInvitations/${params["ShareInvitationId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ShareInvitation": toShareInvitation,
      },
    }, await resp.json());
  }

  async updateWorkload(
    {abortSignal, ...params}: RequestConfig & s.UpdateWorkloadInput,
  ): Promise<s.UpdateWorkloadOutput> {
    const body: jsonP.JSONObject = {
      WorkloadName: params["WorkloadName"],
      Description: params["Description"],
      Environment: params["Environment"],
      AccountIds: params["AccountIds"],
      AwsRegions: params["AwsRegions"],
      NonAwsRegions: params["NonAwsRegions"],
      PillarPriorities: params["PillarPriorities"],
      ArchitecturalDesign: params["ArchitecturalDesign"],
      ReviewOwner: params["ReviewOwner"],
      IsReviewOwnerUpdateAcknowledged: params["IsReviewOwnerUpdateAcknowledged"],
      IndustryType: params["IndustryType"],
      Industry: params["Industry"],
      Notes: params["Notes"],
      ImprovementStatus: params["ImprovementStatus"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorkload",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Workload": toWorkload,
      },
    }, await resp.json());
  }

  async updateWorkloadShare(
    {abortSignal, ...params}: RequestConfig & s.UpdateWorkloadShareInput,
  ): Promise<s.UpdateWorkloadShareOutput> {
    const body: jsonP.JSONObject = {
      PermissionType: params["PermissionType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorkloadShare",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares/${params["ShareId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "WorkloadShare": toWorkloadShare,
      },
    }, await resp.json());
  }

  async upgradeLensReview(
    {abortSignal, ...params}: RequestConfig & s.UpgradeLensReviewInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      MilestoneName: params["MilestoneName"],
      ClientRequestToken: params["ClientRequestToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpgradeLensReview",
      method: "PUT",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/upgrade`,
    });
  }

}

function toAnswer(root: jsonP.JSONValue): s.Answer {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "PillarId": "s",
      "QuestionTitle": "s",
      "QuestionDescription": "s",
      "ImprovementPlanUrl": "s",
      "HelpfulResourceUrl": "s",
      "Choices": [toChoice],
      "SelectedChoices": ["s"],
      "IsApplicable": "b",
      "Risk": (x: jsonP.JSONValue) => cmnP.readEnum<s.Risk>(x),
      "Notes": "s",
    },
  }, root);
}

function toChoice(root: jsonP.JSONValue): s.Choice {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChoiceId": "s",
      "Title": "s",
      "Description": "s",
    },
  }, root);
}

function toLensReview(root: jsonP.JSONValue): s.LensReview {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "LensVersion": "s",
      "LensName": "s",
      "LensStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.LensStatus>(x),
      "PillarReviewSummaries": [toPillarReviewSummary],
      "UpdatedAt": "d",
      "Notes": "s",
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<s.Risk>(x), Number, x),
      "NextToken": "s",
    },
  }, root);
}

function toPillarReviewSummary(root: jsonP.JSONValue): s.PillarReviewSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "PillarId": "s",
      "PillarName": "s",
      "Notes": "s",
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<s.Risk>(x), Number, x),
    },
  }, root);
}

function toLensReviewReport(root: jsonP.JSONValue): s.LensReviewReport {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "Base64String": "s",
    },
  }, root);
}

function toVersionDifferences(root: jsonP.JSONValue): s.VersionDifferences {
  return jsonP.readObj({
    required: {},
    optional: {
      "PillarDifferences": [toPillarDifference],
    },
  }, root);
}

function toPillarDifference(root: jsonP.JSONValue): s.PillarDifference {
  return jsonP.readObj({
    required: {},
    optional: {
      "PillarId": "s",
      "DifferenceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DifferenceStatus>(x),
      "QuestionDifferences": [toQuestionDifference],
    },
  }, root);
}

function toQuestionDifference(root: jsonP.JSONValue): s.QuestionDifference {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "QuestionTitle": "s",
      "DifferenceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DifferenceStatus>(x),
    },
  }, root);
}

function toMilestone(root: jsonP.JSONValue): s.Milestone {
  return jsonP.readObj({
    required: {},
    optional: {
      "MilestoneNumber": "n",
      "MilestoneName": "s",
      "RecordedAt": "d",
      "Workload": toWorkload,
    },
  }, root);
}

function toWorkload(root: jsonP.JSONValue): s.Workload {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkloadId": "s",
      "WorkloadArn": "s",
      "WorkloadName": "s",
      "Description": "s",
      "Environment": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkloadEnvironment>(x),
      "UpdatedAt": "d",
      "AccountIds": ["s"],
      "AwsRegions": ["s"],
      "NonAwsRegions": ["s"],
      "ArchitecturalDesign": "s",
      "ReviewOwner": "s",
      "ReviewRestrictionDate": "d",
      "IsReviewOwnerUpdateAcknowledged": "b",
      "IndustryType": "s",
      "Industry": "s",
      "Notes": "s",
      "ImprovementStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkloadImprovementStatus>(x),
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<s.Risk>(x), Number, x),
      "PillarPriorities": ["s"],
      "Lenses": ["s"],
      "Owner": "s",
      "ShareInvitationId": "s",
    },
  }, root);
}

function toAnswerSummary(root: jsonP.JSONValue): s.AnswerSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "PillarId": "s",
      "QuestionTitle": "s",
      "Choices": [toChoice],
      "SelectedChoices": ["s"],
      "IsApplicable": "b",
      "Risk": (x: jsonP.JSONValue) => cmnP.readEnum<s.Risk>(x),
    },
  }, root);
}

function toImprovementSummary(root: jsonP.JSONValue): s.ImprovementSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "PillarId": "s",
      "QuestionTitle": "s",
      "Risk": (x: jsonP.JSONValue) => cmnP.readEnum<s.Risk>(x),
      "ImprovementPlanUrl": "s",
    },
  }, root);
}

function toLensReviewSummary(root: jsonP.JSONValue): s.LensReviewSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "LensVersion": "s",
      "LensName": "s",
      "LensStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.LensStatus>(x),
      "UpdatedAt": "d",
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<s.Risk>(x), Number, x),
    },
  }, root);
}

function toLensSummary(root: jsonP.JSONValue): s.LensSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "LensVersion": "s",
      "LensName": "s",
      "Description": "s",
    },
  }, root);
}

function toMilestoneSummary(root: jsonP.JSONValue): s.MilestoneSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "MilestoneNumber": "n",
      "MilestoneName": "s",
      "RecordedAt": "d",
      "WorkloadSummary": toWorkloadSummary,
    },
  }, root);
}

function toWorkloadSummary(root: jsonP.JSONValue): s.WorkloadSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkloadId": "s",
      "WorkloadArn": "s",
      "WorkloadName": "s",
      "Owner": "s",
      "UpdatedAt": "d",
      "Lenses": ["s"],
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<s.Risk>(x), Number, x),
      "ImprovementStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.WorkloadImprovementStatus>(x),
    },
  }, root);
}

function toNotificationSummary(root: jsonP.JSONValue): s.NotificationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.NotificationType>(x),
      "LensUpgradeSummary": toLensUpgradeSummary,
    },
  }, root);
}

function toLensUpgradeSummary(root: jsonP.JSONValue): s.LensUpgradeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkloadId": "s",
      "WorkloadName": "s",
      "LensAlias": "s",
      "CurrentLensVersion": "s",
      "LatestLensVersion": "s",
    },
  }, root);
}

function toShareInvitationSummary(root: jsonP.JSONValue): s.ShareInvitationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareInvitationId": "s",
      "SharedBy": "s",
      "SharedWith": "s",
      "PermissionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PermissionType>(x),
      "WorkloadName": "s",
      "WorkloadId": "s",
    },
  }, root);
}

function toWorkloadShareSummary(root: jsonP.JSONValue): s.WorkloadShareSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareId": "s",
      "SharedWith": "s",
      "PermissionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PermissionType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShareStatus>(x),
    },
  }, root);
}

function toShareInvitation(root: jsonP.JSONValue): s.ShareInvitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareInvitationId": "s",
      "WorkloadId": "s",
    },
  }, root);
}

function toWorkloadShare(root: jsonP.JSONValue): s.WorkloadShare {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareId": "s",
      "SharedBy": "s",
      "SharedWith": "s",
      "PermissionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PermissionType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShareStatus>(x),
      "WorkloadName": "s",
      "WorkloadId": "s",
    },
  }, root);
}
