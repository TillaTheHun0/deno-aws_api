// Autogenerated API client for: AWS Well-Architected Tool

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class WellArchitected {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WellArchitected.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-03-31",
    "endpointPrefix": "wellarchitected",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Well-Architected",
    "serviceFullName": "AWS Well-Architected Tool",
    "serviceId": "WellArchitected",
    "signatureVersion": "v4",
    "signingName": "wellarchitected",
    "uid": "wellarchitected-2020-03-31"
  };

  async associateLenses(
    {abortSignal, ...params}: RequestConfig & AssociateLensesInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LensAliases: params["LensAliases"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateLenses",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/associateLenses`,
    });
  }

  async createMilestone(
    {abortSignal, ...params}: RequestConfig & CreateMilestoneInput,
  ): Promise<CreateMilestoneOutput> {
    const body: jsonP.JSONObject = {
      MilestoneName: params["MilestoneName"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMilestone",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/milestones`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
      },
    }, await resp.json());
  }

  async createWorkload(
    {abortSignal, ...params}: RequestConfig & CreateWorkloadInput,
  ): Promise<CreateWorkloadOutput> {
    const body: jsonP.JSONObject = {
      WorkloadName: params["WorkloadName"],
      Description: params["Description"],
      Environment: params["Environment"],
      AccountIds: params["AccountIds"],
      AwsRegions: params["AwsRegions"],
      NonAwsRegions: params["NonAwsRegions"],
      PillarPriorities: params["PillarPriorities"],
      ArchitecturalDesign: params["ArchitecturalDesign"],
      ReviewOwner: params["ReviewOwner"],
      IndustryType: params["IndustryType"],
      Industry: params["Industry"],
      Lenses: params["Lenses"],
      Notes: params["Notes"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorkload",
      requestUri: "/workloads",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "WorkloadArn": "s",
      },
    }, await resp.json());
  }

  async createWorkloadShare(
    {abortSignal, ...params}: RequestConfig & CreateWorkloadShareInput,
  ): Promise<CreateWorkloadShareOutput> {
    const body: jsonP.JSONObject = {
      SharedWith: params["SharedWith"],
      PermissionType: params["PermissionType"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWorkloadShare",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "ShareId": "s",
      },
    }, await resp.json());
  }

  async deleteWorkload(
    {abortSignal, ...params}: RequestConfig & DeleteWorkloadInput,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("ClientRequestToken", params["ClientRequestToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteWorkload",
      method: "DELETE",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}`,
    });
  }

  async deleteWorkloadShare(
    {abortSignal, ...params}: RequestConfig & DeleteWorkloadShareInput,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("ClientRequestToken", params["ClientRequestToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteWorkloadShare",
      method: "DELETE",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares/${params["ShareId"]}`,
    });
  }

  async disassociateLenses(
    {abortSignal, ...params}: RequestConfig & DisassociateLensesInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LensAliases: params["LensAliases"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateLenses",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/disassociateLenses`,
    });
  }

  async getAnswer(
    {abortSignal, ...params}: RequestConfig & GetAnswerInput,
  ): Promise<GetAnswerOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAnswer",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/answers/${params["QuestionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensAlias": "s",
        "Answer": toAnswer,
      },
    }, await resp.json());
  }

  async getLensReview(
    {abortSignal, ...params}: RequestConfig & GetLensReviewInput,
  ): Promise<GetLensReviewOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLensReview",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensReview": toLensReview,
      },
    }, await resp.json());
  }

  async getLensReviewReport(
    {abortSignal, ...params}: RequestConfig & GetLensReviewReportInput,
  ): Promise<GetLensReviewReportOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLensReviewReport",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/report`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensReviewReport": toLensReviewReport,
      },
    }, await resp.json());
  }

  async getLensVersionDifference(
    {abortSignal, ...params}: RequestConfig & GetLensVersionDifferenceInput,
  ): Promise<GetLensVersionDifferenceOutput> {
    const query = new URLSearchParams;
    query.set("BaseLensVersion", params["BaseLensVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLensVersionDifference",
      method: "GET",
      requestUri: cmnP.encodePath`/lenses/${params["LensAlias"]}/versionDifference`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LensAlias": "s",
        "BaseLensVersion": "s",
        "LatestLensVersion": "s",
        "VersionDifferences": toVersionDifferences,
      },
    }, await resp.json());
  }

  async getMilestone(
    {abortSignal, ...params}: RequestConfig & GetMilestoneInput,
  ): Promise<GetMilestoneOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMilestone",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/milestones/${params["MilestoneNumber"].toString()}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "Milestone": toMilestone,
      },
    }, await resp.json());
  }

  async getWorkload(
    {abortSignal, ...params}: RequestConfig & GetWorkloadInput,
  ): Promise<GetWorkloadOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWorkload",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Workload": toWorkload,
      },
    }, await resp.json());
  }

  async listAnswers(
    {abortSignal, ...params}: RequestConfig & ListAnswersInput,
  ): Promise<ListAnswersOutput> {
    const query = new URLSearchParams;
    if (params["PillarId"] != null) query.set("PillarId", params["PillarId"]?.toString() ?? "");
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAnswers",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/answers`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensAlias": "s",
        "AnswerSummaries": [toAnswerSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLensReviewImprovements(
    {abortSignal, ...params}: RequestConfig & ListLensReviewImprovementsInput,
  ): Promise<ListLensReviewImprovementsOutput> {
    const query = new URLSearchParams;
    if (params["PillarId"] != null) query.set("PillarId", params["PillarId"]?.toString() ?? "");
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLensReviewImprovements",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/improvements`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensAlias": "s",
        "ImprovementSummaries": [toImprovementSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLensReviews(
    {abortSignal, ...params}: RequestConfig & ListLensReviewsInput,
  ): Promise<ListLensReviewsOutput> {
    const query = new URLSearchParams;
    if (params["MilestoneNumber"] != null) query.set("MilestoneNumber", params["MilestoneNumber"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLensReviews",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneNumber": "n",
        "LensReviewSummaries": [toLensReviewSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLenses(
    {abortSignal, ...params}: RequestConfig & ListLensesInput = {},
  ): Promise<ListLensesOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLenses",
      method: "GET",
      requestUri: "/lenses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LensSummaries": [toLensSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMilestones(
    {abortSignal, ...params}: RequestConfig & ListMilestonesInput,
  ): Promise<ListMilestonesOutput> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMilestones",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/milestonesSummaries`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "MilestoneSummaries": [toMilestoneSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listNotifications(
    {abortSignal, ...params}: RequestConfig & ListNotificationsInput = {},
  ): Promise<ListNotificationsOutput> {
    const body: jsonP.JSONObject = {
      WorkloadId: params["WorkloadId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListNotifications",
      requestUri: "/notifications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NotificationSummaries": [toNotificationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listShareInvitations(
    {abortSignal, ...params}: RequestConfig & ListShareInvitationsInput = {},
  ): Promise<ListShareInvitationsOutput> {
    const query = new URLSearchParams;
    if (params["WorkloadNamePrefix"] != null) query.set("WorkloadNamePrefix", params["WorkloadNamePrefix"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListShareInvitations",
      method: "GET",
      requestUri: "/shareInvitations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ShareInvitationSummaries": [toShareInvitationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listWorkloadShares(
    {abortSignal, ...params}: RequestConfig & ListWorkloadSharesInput,
  ): Promise<ListWorkloadSharesOutput> {
    const query = new URLSearchParams;
    if (params["SharedWithPrefix"] != null) query.set("SharedWithPrefix", params["SharedWithPrefix"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWorkloadShares",
      method: "GET",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "WorkloadShareSummaries": [toWorkloadShareSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listWorkloads(
    {abortSignal, ...params}: RequestConfig & ListWorkloadsInput = {},
  ): Promise<ListWorkloadsOutput> {
    const body: jsonP.JSONObject = {
      WorkloadNamePrefix: params["WorkloadNamePrefix"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWorkloads",
      requestUri: "/workloadsSummaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadSummaries": [toWorkloadSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async updateAnswer(
    {abortSignal, ...params}: RequestConfig & UpdateAnswerInput,
  ): Promise<UpdateAnswerOutput> {
    const body: jsonP.JSONObject = {
      SelectedChoices: params["SelectedChoices"],
      Notes: params["Notes"],
      IsApplicable: params["IsApplicable"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAnswer",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/answers/${params["QuestionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "LensAlias": "s",
        "Answer": toAnswer,
      },
    }, await resp.json());
  }

  async updateLensReview(
    {abortSignal, ...params}: RequestConfig & UpdateLensReviewInput,
  ): Promise<UpdateLensReviewOutput> {
    const body: jsonP.JSONObject = {
      LensNotes: params["LensNotes"],
      PillarNotes: params["PillarNotes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLensReview",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "LensReview": toLensReview,
      },
    }, await resp.json());
  }

  async updateShareInvitation(
    {abortSignal, ...params}: RequestConfig & UpdateShareInvitationInput,
  ): Promise<UpdateShareInvitationOutput> {
    const body: jsonP.JSONObject = {
      ShareInvitationAction: params["ShareInvitationAction"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateShareInvitation",
      method: "PATCH",
      requestUri: cmnP.encodePath`/shareInvitations/${params["ShareInvitationId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ShareInvitation": toShareInvitation,
      },
    }, await resp.json());
  }

  async updateWorkload(
    {abortSignal, ...params}: RequestConfig & UpdateWorkloadInput,
  ): Promise<UpdateWorkloadOutput> {
    const body: jsonP.JSONObject = {
      WorkloadName: params["WorkloadName"],
      Description: params["Description"],
      Environment: params["Environment"],
      AccountIds: params["AccountIds"],
      AwsRegions: params["AwsRegions"],
      NonAwsRegions: params["NonAwsRegions"],
      PillarPriorities: params["PillarPriorities"],
      ArchitecturalDesign: params["ArchitecturalDesign"],
      ReviewOwner: params["ReviewOwner"],
      IsReviewOwnerUpdateAcknowledged: params["IsReviewOwnerUpdateAcknowledged"],
      IndustryType: params["IndustryType"],
      Industry: params["Industry"],
      Notes: params["Notes"],
      ImprovementStatus: params["ImprovementStatus"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorkload",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Workload": toWorkload,
      },
    }, await resp.json());
  }

  async updateWorkloadShare(
    {abortSignal, ...params}: RequestConfig & UpdateWorkloadShareInput,
  ): Promise<UpdateWorkloadShareOutput> {
    const body: jsonP.JSONObject = {
      PermissionType: params["PermissionType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWorkloadShare",
      method: "PATCH",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/shares/${params["ShareId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WorkloadId": "s",
        "WorkloadShare": toWorkloadShare,
      },
    }, await resp.json());
  }

  async upgradeLensReview(
    {abortSignal, ...params}: RequestConfig & UpgradeLensReviewInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      MilestoneName: params["MilestoneName"],
      ClientRequestToken: params["ClientRequestToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpgradeLensReview",
      method: "PUT",
      requestUri: cmnP.encodePath`/workloads/${params["WorkloadId"]}/lensReviews/${params["LensAlias"]}/upgrade`,
    });
  }

}

// refs: 1 - tags: named, input
export interface AssociateLensesInput {
  WorkloadId: string;
  LensAliases: string[];
}

// refs: 1 - tags: named, input
export interface CreateMilestoneInput {
  WorkloadId: string;
  MilestoneName: string;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface CreateWorkloadInput {
  WorkloadName: string;
  Description: string;
  Environment: WorkloadEnvironment;
  AccountIds?: string[] | null;
  AwsRegions?: string[] | null;
  NonAwsRegions?: string[] | null;
  PillarPriorities?: string[] | null;
  ArchitecturalDesign?: string | null;
  ReviewOwner: string;
  IndustryType?: string | null;
  Industry?: string | null;
  Lenses: string[];
  Notes?: string | null;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface CreateWorkloadShareInput {
  WorkloadId: string;
  SharedWith: string;
  PermissionType: PermissionType;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteWorkloadInput {
  WorkloadId: string;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteWorkloadShareInput {
  ShareId: string;
  WorkloadId: string;
  ClientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface DisassociateLensesInput {
  WorkloadId: string;
  LensAliases: string[];
}

// refs: 1 - tags: named, input
export interface GetAnswerInput {
  WorkloadId: string;
  LensAlias: string;
  QuestionId: string;
  MilestoneNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface GetLensReviewInput {
  WorkloadId: string;
  LensAlias: string;
  MilestoneNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface GetLensReviewReportInput {
  WorkloadId: string;
  LensAlias: string;
  MilestoneNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface GetLensVersionDifferenceInput {
  LensAlias: string;
  BaseLensVersion: string;
}

// refs: 1 - tags: named, input
export interface GetMilestoneInput {
  WorkloadId: string;
  MilestoneNumber: number;
}

// refs: 1 - tags: named, input
export interface GetWorkloadInput {
  WorkloadId: string;
}

// refs: 1 - tags: named, input
export interface ListAnswersInput {
  WorkloadId: string;
  LensAlias: string;
  PillarId?: string | null;
  MilestoneNumber?: number | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLensReviewImprovementsInput {
  WorkloadId: string;
  LensAlias: string;
  PillarId?: string | null;
  MilestoneNumber?: number | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLensReviewsInput {
  WorkloadId: string;
  MilestoneNumber?: number | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLensesInput {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListMilestonesInput {
  WorkloadId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListNotificationsInput {
  WorkloadId?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListShareInvitationsInput {
  WorkloadNamePrefix?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListWorkloadSharesInput {
  WorkloadId: string;
  SharedWithPrefix?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListWorkloadsInput {
  WorkloadNamePrefix?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateAnswerInput {
  WorkloadId: string;
  LensAlias: string;
  QuestionId: string;
  SelectedChoices?: string[] | null;
  Notes?: string | null;
  IsApplicable?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateLensReviewInput {
  WorkloadId: string;
  LensAlias: string;
  LensNotes?: string | null;
  PillarNotes?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UpdateShareInvitationInput {
  ShareInvitationId: string;
  ShareInvitationAction: ShareInvitationAction;
}

// refs: 1 - tags: named, input
export interface UpdateWorkloadInput {
  WorkloadId: string;
  WorkloadName?: string | null;
  Description?: string | null;
  Environment?: WorkloadEnvironment | null;
  AccountIds?: string[] | null;
  AwsRegions?: string[] | null;
  NonAwsRegions?: string[] | null;
  PillarPriorities?: string[] | null;
  ArchitecturalDesign?: string | null;
  ReviewOwner?: string | null;
  IsReviewOwnerUpdateAcknowledged?: boolean | null;
  IndustryType?: string | null;
  Industry?: string | null;
  Notes?: string | null;
  ImprovementStatus?: WorkloadImprovementStatus | null;
}

// refs: 1 - tags: named, input
export interface UpdateWorkloadShareInput {
  ShareId: string;
  WorkloadId: string;
  PermissionType: PermissionType;
}

// refs: 1 - tags: named, input
export interface UpgradeLensReviewInput {
  WorkloadId: string;
  LensAlias: string;
  MilestoneName: string;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateMilestoneOutput {
  WorkloadId?: string | null;
  MilestoneNumber?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateWorkloadOutput {
  WorkloadId?: string | null;
  WorkloadArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateWorkloadShareOutput {
  WorkloadId?: string | null;
  ShareId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAnswerOutput {
  WorkloadId?: string | null;
  MilestoneNumber?: number | null;
  LensAlias?: string | null;
  Answer?: Answer | null;
}

// refs: 1 - tags: named, output
export interface GetLensReviewOutput {
  WorkloadId?: string | null;
  MilestoneNumber?: number | null;
  LensReview?: LensReview | null;
}

// refs: 1 - tags: named, output
export interface GetLensReviewReportOutput {
  WorkloadId?: string | null;
  MilestoneNumber?: number | null;
  LensReviewReport?: LensReviewReport | null;
}

// refs: 1 - tags: named, output
export interface GetLensVersionDifferenceOutput {
  LensAlias?: string | null;
  BaseLensVersion?: string | null;
  LatestLensVersion?: string | null;
  VersionDifferences?: VersionDifferences | null;
}

// refs: 1 - tags: named, output
export interface GetMilestoneOutput {
  WorkloadId?: string | null;
  Milestone?: Milestone | null;
}

// refs: 1 - tags: named, output
export interface GetWorkloadOutput {
  Workload?: Workload | null;
}

// refs: 1 - tags: named, output
export interface ListAnswersOutput {
  WorkloadId?: string | null;
  MilestoneNumber?: number | null;
  LensAlias?: string | null;
  AnswerSummaries?: AnswerSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLensReviewImprovementsOutput {
  WorkloadId?: string | null;
  MilestoneNumber?: number | null;
  LensAlias?: string | null;
  ImprovementSummaries?: ImprovementSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLensReviewsOutput {
  WorkloadId?: string | null;
  MilestoneNumber?: number | null;
  LensReviewSummaries?: LensReviewSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLensesOutput {
  LensSummaries?: LensSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMilestonesOutput {
  WorkloadId?: string | null;
  MilestoneSummaries?: MilestoneSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListNotificationsOutput {
  NotificationSummaries?: NotificationSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListShareInvitationsOutput {
  ShareInvitationSummaries?: ShareInvitationSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListWorkloadSharesOutput {
  WorkloadId?: string | null;
  WorkloadShareSummaries?: WorkloadShareSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListWorkloadsOutput {
  WorkloadSummaries?: WorkloadSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateAnswerOutput {
  WorkloadId?: string | null;
  LensAlias?: string | null;
  Answer?: Answer | null;
}

// refs: 1 - tags: named, output
export interface UpdateLensReviewOutput {
  WorkloadId?: string | null;
  LensReview?: LensReview | null;
}

// refs: 1 - tags: named, output
export interface UpdateShareInvitationOutput {
  ShareInvitation?: ShareInvitation | null;
}

// refs: 1 - tags: named, output
export interface UpdateWorkloadOutput {
  Workload?: Workload | null;
}

// refs: 1 - tags: named, output
export interface UpdateWorkloadShareOutput {
  WorkloadId?: string | null;
  WorkloadShare?: WorkloadShare | null;
}

// refs: 5 - tags: input, named, enum, output
export type WorkloadEnvironment =
| "PRODUCTION"
| "PREPRODUCTION"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type PermissionType =
| "READONLY"
| "CONTRIBUTOR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ShareInvitationAction =
| "ACCEPT"
| "REJECT"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type WorkloadImprovementStatus =
| "NOT_APPLICABLE"
| "NOT_STARTED"
| "IN_PROGRESS"
| "COMPLETE"
| "RISK_ACKNOWLEDGED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Answer {
  QuestionId?: string | null;
  PillarId?: string | null;
  QuestionTitle?: string | null;
  QuestionDescription?: string | null;
  ImprovementPlanUrl?: string | null;
  HelpfulResourceUrl?: string | null;
  Choices?: Choice[] | null;
  SelectedChoices?: string[] | null;
  IsApplicable?: boolean | null;
  Risk?: Risk | null;
  Notes?: string | null;
}
function toAnswer(root: jsonP.JSONValue): Answer {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "PillarId": "s",
      "QuestionTitle": "s",
      "QuestionDescription": "s",
      "ImprovementPlanUrl": "s",
      "HelpfulResourceUrl": "s",
      "Choices": [toChoice],
      "SelectedChoices": ["s"],
      "IsApplicable": "b",
      "Risk": (x: jsonP.JSONValue) => cmnP.readEnum<Risk>(x),
      "Notes": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Choice {
  ChoiceId?: string | null;
  Title?: string | null;
  Description?: string | null;
}
function toChoice(root: jsonP.JSONValue): Choice {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChoiceId": "s",
      "Title": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 14 - tags: output, named, enum
export type Risk =
| "UNANSWERED"
| "HIGH"
| "MEDIUM"
| "NONE"
| "NOT_APPLICABLE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface LensReview {
  LensAlias?: string | null;
  LensVersion?: string | null;
  LensName?: string | null;
  LensStatus?: LensStatus | null;
  PillarReviewSummaries?: PillarReviewSummary[] | null;
  UpdatedAt?: Date | number | null;
  Notes?: string | null;
  RiskCounts?: { [key in Risk]: number | null | undefined } | null;
  NextToken?: string | null;
}
function toLensReview(root: jsonP.JSONValue): LensReview {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "LensVersion": "s",
      "LensName": "s",
      "LensStatus": (x: jsonP.JSONValue) => cmnP.readEnum<LensStatus>(x),
      "PillarReviewSummaries": [toPillarReviewSummary],
      "UpdatedAt": "d",
      "Notes": "s",
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<Risk>(x), Number, x),
      "NextToken": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type LensStatus =
| "CURRENT"
| "NOT_CURRENT"
| "DEPRECATED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface PillarReviewSummary {
  PillarId?: string | null;
  PillarName?: string | null;
  Notes?: string | null;
  RiskCounts?: { [key in Risk]: number | null | undefined } | null;
}
function toPillarReviewSummary(root: jsonP.JSONValue): PillarReviewSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "PillarId": "s",
      "PillarName": "s",
      "Notes": "s",
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<Risk>(x), Number, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LensReviewReport {
  LensAlias?: string | null;
  Base64String?: string | null;
}
function toLensReviewReport(root: jsonP.JSONValue): LensReviewReport {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "Base64String": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VersionDifferences {
  PillarDifferences?: PillarDifference[] | null;
}
function toVersionDifferences(root: jsonP.JSONValue): VersionDifferences {
  return jsonP.readObj({
    required: {},
    optional: {
      "PillarDifferences": [toPillarDifference],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PillarDifference {
  PillarId?: string | null;
  DifferenceStatus?: DifferenceStatus | null;
  QuestionDifferences?: QuestionDifference[] | null;
}
function toPillarDifference(root: jsonP.JSONValue): PillarDifference {
  return jsonP.readObj({
    required: {},
    optional: {
      "PillarId": "s",
      "DifferenceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DifferenceStatus>(x),
      "QuestionDifferences": [toQuestionDifference],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DifferenceStatus =
| "UPDATED"
| "NEW"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface QuestionDifference {
  QuestionId?: string | null;
  QuestionTitle?: string | null;
  DifferenceStatus?: DifferenceStatus | null;
}
function toQuestionDifference(root: jsonP.JSONValue): QuestionDifference {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "QuestionTitle": "s",
      "DifferenceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DifferenceStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Milestone {
  MilestoneNumber?: number | null;
  MilestoneName?: string | null;
  RecordedAt?: Date | number | null;
  Workload?: Workload | null;
}
function toMilestone(root: jsonP.JSONValue): Milestone {
  return jsonP.readObj({
    required: {},
    optional: {
      "MilestoneNumber": "n",
      "MilestoneName": "s",
      "RecordedAt": "d",
      "Workload": toWorkload,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Workload {
  WorkloadId?: string | null;
  WorkloadArn?: string | null;
  WorkloadName?: string | null;
  Description?: string | null;
  Environment?: WorkloadEnvironment | null;
  UpdatedAt?: Date | number | null;
  AccountIds?: string[] | null;
  AwsRegions?: string[] | null;
  NonAwsRegions?: string[] | null;
  ArchitecturalDesign?: string | null;
  ReviewOwner?: string | null;
  ReviewRestrictionDate?: Date | number | null;
  IsReviewOwnerUpdateAcknowledged?: boolean | null;
  IndustryType?: string | null;
  Industry?: string | null;
  Notes?: string | null;
  ImprovementStatus?: WorkloadImprovementStatus | null;
  RiskCounts?: { [key in Risk]: number | null | undefined } | null;
  PillarPriorities?: string[] | null;
  Lenses?: string[] | null;
  Owner?: string | null;
  ShareInvitationId?: string | null;
}
function toWorkload(root: jsonP.JSONValue): Workload {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkloadId": "s",
      "WorkloadArn": "s",
      "WorkloadName": "s",
      "Description": "s",
      "Environment": (x: jsonP.JSONValue) => cmnP.readEnum<WorkloadEnvironment>(x),
      "UpdatedAt": "d",
      "AccountIds": ["s"],
      "AwsRegions": ["s"],
      "NonAwsRegions": ["s"],
      "ArchitecturalDesign": "s",
      "ReviewOwner": "s",
      "ReviewRestrictionDate": "d",
      "IsReviewOwnerUpdateAcknowledged": "b",
      "IndustryType": "s",
      "Industry": "s",
      "Notes": "s",
      "ImprovementStatus": (x: jsonP.JSONValue) => cmnP.readEnum<WorkloadImprovementStatus>(x),
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<Risk>(x), Number, x),
      "PillarPriorities": ["s"],
      "Lenses": ["s"],
      "Owner": "s",
      "ShareInvitationId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AnswerSummary {
  QuestionId?: string | null;
  PillarId?: string | null;
  QuestionTitle?: string | null;
  Choices?: Choice[] | null;
  SelectedChoices?: string[] | null;
  IsApplicable?: boolean | null;
  Risk?: Risk | null;
}
function toAnswerSummary(root: jsonP.JSONValue): AnswerSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "PillarId": "s",
      "QuestionTitle": "s",
      "Choices": [toChoice],
      "SelectedChoices": ["s"],
      "IsApplicable": "b",
      "Risk": (x: jsonP.JSONValue) => cmnP.readEnum<Risk>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ImprovementSummary {
  QuestionId?: string | null;
  PillarId?: string | null;
  QuestionTitle?: string | null;
  Risk?: Risk | null;
  ImprovementPlanUrl?: string | null;
}
function toImprovementSummary(root: jsonP.JSONValue): ImprovementSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "QuestionId": "s",
      "PillarId": "s",
      "QuestionTitle": "s",
      "Risk": (x: jsonP.JSONValue) => cmnP.readEnum<Risk>(x),
      "ImprovementPlanUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LensReviewSummary {
  LensAlias?: string | null;
  LensVersion?: string | null;
  LensName?: string | null;
  LensStatus?: LensStatus | null;
  UpdatedAt?: Date | number | null;
  RiskCounts?: { [key in Risk]: number | null | undefined } | null;
}
function toLensReviewSummary(root: jsonP.JSONValue): LensReviewSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "LensVersion": "s",
      "LensName": "s",
      "LensStatus": (x: jsonP.JSONValue) => cmnP.readEnum<LensStatus>(x),
      "UpdatedAt": "d",
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<Risk>(x), Number, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LensSummary {
  LensAlias?: string | null;
  LensVersion?: string | null;
  LensName?: string | null;
  Description?: string | null;
}
function toLensSummary(root: jsonP.JSONValue): LensSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "LensAlias": "s",
      "LensVersion": "s",
      "LensName": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MilestoneSummary {
  MilestoneNumber?: number | null;
  MilestoneName?: string | null;
  RecordedAt?: Date | number | null;
  WorkloadSummary?: WorkloadSummary | null;
}
function toMilestoneSummary(root: jsonP.JSONValue): MilestoneSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "MilestoneNumber": "n",
      "MilestoneName": "s",
      "RecordedAt": "d",
      "WorkloadSummary": toWorkloadSummary,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface WorkloadSummary {
  WorkloadId?: string | null;
  WorkloadArn?: string | null;
  WorkloadName?: string | null;
  Owner?: string | null;
  UpdatedAt?: Date | number | null;
  Lenses?: string[] | null;
  RiskCounts?: { [key in Risk]: number | null | undefined } | null;
  ImprovementStatus?: WorkloadImprovementStatus | null;
}
function toWorkloadSummary(root: jsonP.JSONValue): WorkloadSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkloadId": "s",
      "WorkloadArn": "s",
      "WorkloadName": "s",
      "Owner": "s",
      "UpdatedAt": "d",
      "Lenses": ["s"],
      "RiskCounts": x => jsonP.readMap(x => cmnP.readEnumReq<Risk>(x), Number, x),
      "ImprovementStatus": (x: jsonP.JSONValue) => cmnP.readEnum<WorkloadImprovementStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NotificationSummary {
  Type?: NotificationType | null;
  LensUpgradeSummary?: LensUpgradeSummary | null;
}
function toNotificationSummary(root: jsonP.JSONValue): NotificationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<NotificationType>(x),
      "LensUpgradeSummary": toLensUpgradeSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type NotificationType =
| "LENS_VERSION_UPGRADED"
| "LENS_VERSION_DEPRECATED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface LensUpgradeSummary {
  WorkloadId?: string | null;
  WorkloadName?: string | null;
  LensAlias?: string | null;
  CurrentLensVersion?: string | null;
  LatestLensVersion?: string | null;
}
function toLensUpgradeSummary(root: jsonP.JSONValue): LensUpgradeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "WorkloadId": "s",
      "WorkloadName": "s",
      "LensAlias": "s",
      "CurrentLensVersion": "s",
      "LatestLensVersion": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ShareInvitationSummary {
  ShareInvitationId?: string | null;
  SharedBy?: string | null;
  SharedWith?: string | null;
  PermissionType?: PermissionType | null;
  WorkloadName?: string | null;
  WorkloadId?: string | null;
}
function toShareInvitationSummary(root: jsonP.JSONValue): ShareInvitationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareInvitationId": "s",
      "SharedBy": "s",
      "SharedWith": "s",
      "PermissionType": (x: jsonP.JSONValue) => cmnP.readEnum<PermissionType>(x),
      "WorkloadName": "s",
      "WorkloadId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkloadShareSummary {
  ShareId?: string | null;
  SharedWith?: string | null;
  PermissionType?: PermissionType | null;
  Status?: ShareStatus | null;
}
function toWorkloadShareSummary(root: jsonP.JSONValue): WorkloadShareSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareId": "s",
      "SharedWith": "s",
      "PermissionType": (x: jsonP.JSONValue) => cmnP.readEnum<PermissionType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ShareStatus>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ShareStatus =
| "ACCEPTED"
| "REJECTED"
| "PENDING"
| "REVOKED"
| "EXPIRED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ShareInvitation {
  ShareInvitationId?: string | null;
  WorkloadId?: string | null;
}
function toShareInvitation(root: jsonP.JSONValue): ShareInvitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareInvitationId": "s",
      "WorkloadId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkloadShare {
  ShareId?: string | null;
  SharedBy?: string | null;
  SharedWith?: string | null;
  PermissionType?: PermissionType | null;
  Status?: ShareStatus | null;
  WorkloadName?: string | null;
  WorkloadId?: string | null;
}
function toWorkloadShare(root: jsonP.JSONValue): WorkloadShare {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShareId": "s",
      "SharedBy": "s",
      "SharedWith": "s",
      "PermissionType": (x: jsonP.JSONValue) => cmnP.readEnum<PermissionType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ShareStatus>(x),
      "WorkloadName": "s",
      "WorkloadId": "s",
    },
  }, root);
}
