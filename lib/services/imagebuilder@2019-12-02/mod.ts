// Autogenerated API client for: EC2 Image Builder

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.75.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Imagebuilder {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Imagebuilder.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-12-02",
    "endpointPrefix": "imagebuilder",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "imagebuilder",
    "serviceFullName": "EC2 Image Builder",
    "serviceId": "imagebuilder",
    "signatureVersion": "v4",
    "signingName": "imagebuilder",
    "uid": "imagebuilder-2019-12-02"
  };

  async cancelImageCreation(
    {abortSignal, ...params}: RequestConfig & CancelImageCreationRequest,
  ): Promise<CancelImageCreationResponse> {
    const body: jsonP.JSONObject = {
      imageBuildVersionArn: params["imageBuildVersionArn"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelImageCreation",
      method: "PUT",
      requestUri: "/CancelImageCreation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "imageBuildVersionArn": "s",
      },
    }, await resp.json());
  }

  async createComponent(
    {abortSignal, ...params}: RequestConfig & CreateComponentRequest,
  ): Promise<CreateComponentResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      semanticVersion: params["semanticVersion"],
      description: params["description"],
      changeDescription: params["changeDescription"],
      platform: params["platform"],
      supportedOsVersions: params["supportedOsVersions"],
      data: params["data"],
      uri: params["uri"],
      kmsKeyId: params["kmsKeyId"],
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateComponent",
      method: "PUT",
      requestUri: "/CreateComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "componentBuildVersionArn": "s",
      },
    }, await resp.json());
  }

  async createContainerRecipe(
    {abortSignal, ...params}: RequestConfig & CreateContainerRecipeRequest,
  ): Promise<CreateContainerRecipeResponse> {
    const body: jsonP.JSONObject = {
      containerType: params["containerType"],
      name: params["name"],
      description: params["description"],
      semanticVersion: params["semanticVersion"],
      components: params["components"]?.map(x => fromComponentConfiguration(x)),
      dockerfileTemplateData: params["dockerfileTemplateData"],
      dockerfileTemplateUri: params["dockerfileTemplateUri"],
      platformOverride: params["platformOverride"],
      imageOsVersionOverride: params["imageOsVersionOverride"],
      parentImage: params["parentImage"],
      tags: params["tags"],
      workingDirectory: params["workingDirectory"],
      targetRepository: fromTargetContainerRepository(params["targetRepository"]),
      kmsKeyId: params["kmsKeyId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContainerRecipe",
      method: "PUT",
      requestUri: "/CreateContainerRecipe",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "containerRecipeArn": "s",
      },
    }, await resp.json());
  }

  async createDistributionConfiguration(
    {abortSignal, ...params}: RequestConfig & CreateDistributionConfigurationRequest,
  ): Promise<CreateDistributionConfigurationResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      distributions: params["distributions"]?.map(x => fromDistribution(x)),
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDistributionConfiguration",
      method: "PUT",
      requestUri: "/CreateDistributionConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "distributionConfigurationArn": "s",
      },
    }, await resp.json());
  }

  async createImage(
    {abortSignal, ...params}: RequestConfig & CreateImageRequest,
  ): Promise<CreateImageResponse> {
    const body: jsonP.JSONObject = {
      imageRecipeArn: params["imageRecipeArn"],
      containerRecipeArn: params["containerRecipeArn"],
      distributionConfigurationArn: params["distributionConfigurationArn"],
      infrastructureConfigurationArn: params["infrastructureConfigurationArn"],
      imageTestsConfiguration: fromImageTestsConfiguration(params["imageTestsConfiguration"]),
      enhancedImageMetadataEnabled: params["enhancedImageMetadataEnabled"],
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateImage",
      method: "PUT",
      requestUri: "/CreateImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "imageBuildVersionArn": "s",
      },
    }, await resp.json());
  }

  async createImagePipeline(
    {abortSignal, ...params}: RequestConfig & CreateImagePipelineRequest,
  ): Promise<CreateImagePipelineResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      imageRecipeArn: params["imageRecipeArn"],
      containerRecipeArn: params["containerRecipeArn"],
      infrastructureConfigurationArn: params["infrastructureConfigurationArn"],
      distributionConfigurationArn: params["distributionConfigurationArn"],
      imageTestsConfiguration: fromImageTestsConfiguration(params["imageTestsConfiguration"]),
      enhancedImageMetadataEnabled: params["enhancedImageMetadataEnabled"],
      schedule: fromSchedule(params["schedule"]),
      status: params["status"],
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateImagePipeline",
      method: "PUT",
      requestUri: "/CreateImagePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "imagePipelineArn": "s",
      },
    }, await resp.json());
  }

  async createImageRecipe(
    {abortSignal, ...params}: RequestConfig & CreateImageRecipeRequest,
  ): Promise<CreateImageRecipeResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      semanticVersion: params["semanticVersion"],
      components: params["components"]?.map(x => fromComponentConfiguration(x)),
      parentImage: params["parentImage"],
      blockDeviceMappings: params["blockDeviceMappings"]?.map(x => fromInstanceBlockDeviceMapping(x)),
      tags: params["tags"],
      workingDirectory: params["workingDirectory"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateImageRecipe",
      method: "PUT",
      requestUri: "/CreateImageRecipe",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "imageRecipeArn": "s",
      },
    }, await resp.json());
  }

  async createInfrastructureConfiguration(
    {abortSignal, ...params}: RequestConfig & CreateInfrastructureConfigurationRequest,
  ): Promise<CreateInfrastructureConfigurationResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      instanceTypes: params["instanceTypes"],
      instanceProfileName: params["instanceProfileName"],
      securityGroupIds: params["securityGroupIds"],
      subnetId: params["subnetId"],
      logging: fromLogging(params["logging"]),
      keyPair: params["keyPair"],
      terminateInstanceOnFailure: params["terminateInstanceOnFailure"],
      snsTopicArn: params["snsTopicArn"],
      resourceTags: params["resourceTags"],
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInfrastructureConfiguration",
      method: "PUT",
      requestUri: "/CreateInfrastructureConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "infrastructureConfigurationArn": "s",
      },
    }, await resp.json());
  }

  async deleteComponent(
    {abortSignal, ...params}: RequestConfig & DeleteComponentRequest,
  ): Promise<DeleteComponentResponse> {
    const query = new URLSearchParams;
    query.set("componentBuildVersionArn", params["componentBuildVersionArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteComponent",
      method: "DELETE",
      requestUri: "/DeleteComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "componentBuildVersionArn": "s",
      },
    }, await resp.json());
  }

  async deleteContainerRecipe(
    {abortSignal, ...params}: RequestConfig & DeleteContainerRecipeRequest,
  ): Promise<DeleteContainerRecipeResponse> {
    const query = new URLSearchParams;
    query.set("containerRecipeArn", params["containerRecipeArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteContainerRecipe",
      method: "DELETE",
      requestUri: "/DeleteContainerRecipe",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "containerRecipeArn": "s",
      },
    }, await resp.json());
  }

  async deleteDistributionConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteDistributionConfigurationRequest,
  ): Promise<DeleteDistributionConfigurationResponse> {
    const query = new URLSearchParams;
    query.set("distributionConfigurationArn", params["distributionConfigurationArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteDistributionConfiguration",
      method: "DELETE",
      requestUri: "/DeleteDistributionConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "distributionConfigurationArn": "s",
      },
    }, await resp.json());
  }

  async deleteImage(
    {abortSignal, ...params}: RequestConfig & DeleteImageRequest,
  ): Promise<DeleteImageResponse> {
    const query = new URLSearchParams;
    query.set("imageBuildVersionArn", params["imageBuildVersionArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteImage",
      method: "DELETE",
      requestUri: "/DeleteImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageBuildVersionArn": "s",
      },
    }, await resp.json());
  }

  async deleteImagePipeline(
    {abortSignal, ...params}: RequestConfig & DeleteImagePipelineRequest,
  ): Promise<DeleteImagePipelineResponse> {
    const query = new URLSearchParams;
    query.set("imagePipelineArn", params["imagePipelineArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteImagePipeline",
      method: "DELETE",
      requestUri: "/DeleteImagePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imagePipelineArn": "s",
      },
    }, await resp.json());
  }

  async deleteImageRecipe(
    {abortSignal, ...params}: RequestConfig & DeleteImageRecipeRequest,
  ): Promise<DeleteImageRecipeResponse> {
    const query = new URLSearchParams;
    query.set("imageRecipeArn", params["imageRecipeArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteImageRecipe",
      method: "DELETE",
      requestUri: "/DeleteImageRecipe",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageRecipeArn": "s",
      },
    }, await resp.json());
  }

  async deleteInfrastructureConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteInfrastructureConfigurationRequest,
  ): Promise<DeleteInfrastructureConfigurationResponse> {
    const query = new URLSearchParams;
    query.set("infrastructureConfigurationArn", params["infrastructureConfigurationArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteInfrastructureConfiguration",
      method: "DELETE",
      requestUri: "/DeleteInfrastructureConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "infrastructureConfigurationArn": "s",
      },
    }, await resp.json());
  }

  async getComponent(
    {abortSignal, ...params}: RequestConfig & GetComponentRequest,
  ): Promise<GetComponentResponse> {
    const query = new URLSearchParams;
    query.set("componentBuildVersionArn", params["componentBuildVersionArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetComponent",
      method: "GET",
      requestUri: "/GetComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "component": toComponent,
      },
    }, await resp.json());
  }

  async getComponentPolicy(
    {abortSignal, ...params}: RequestConfig & GetComponentPolicyRequest,
  ): Promise<GetComponentPolicyResponse> {
    const query = new URLSearchParams;
    query.set("componentArn", params["componentArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetComponentPolicy",
      method: "GET",
      requestUri: "/GetComponentPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "policy": "s",
      },
    }, await resp.json());
  }

  async getContainerRecipe(
    {abortSignal, ...params}: RequestConfig & GetContainerRecipeRequest,
  ): Promise<GetContainerRecipeResponse> {
    const query = new URLSearchParams;
    query.set("containerRecipeArn", params["containerRecipeArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetContainerRecipe",
      method: "GET",
      requestUri: "/GetContainerRecipe",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "containerRecipe": toContainerRecipe,
      },
    }, await resp.json());
  }

  async getContainerRecipePolicy(
    {abortSignal, ...params}: RequestConfig & GetContainerRecipePolicyRequest,
  ): Promise<GetContainerRecipePolicyResponse> {
    const query = new URLSearchParams;
    query.set("containerRecipeArn", params["containerRecipeArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetContainerRecipePolicy",
      method: "GET",
      requestUri: "/GetContainerRecipePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "policy": "s",
      },
    }, await resp.json());
  }

  async getDistributionConfiguration(
    {abortSignal, ...params}: RequestConfig & GetDistributionConfigurationRequest,
  ): Promise<GetDistributionConfigurationResponse> {
    const query = new URLSearchParams;
    query.set("distributionConfigurationArn", params["distributionConfigurationArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDistributionConfiguration",
      method: "GET",
      requestUri: "/GetDistributionConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "distributionConfiguration": toDistributionConfiguration,
      },
    }, await resp.json());
  }

  async getImage(
    {abortSignal, ...params}: RequestConfig & GetImageRequest,
  ): Promise<GetImageResponse> {
    const query = new URLSearchParams;
    query.set("imageBuildVersionArn", params["imageBuildVersionArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetImage",
      method: "GET",
      requestUri: "/GetImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "image": toImage,
      },
    }, await resp.json());
  }

  async getImagePipeline(
    {abortSignal, ...params}: RequestConfig & GetImagePipelineRequest,
  ): Promise<GetImagePipelineResponse> {
    const query = new URLSearchParams;
    query.set("imagePipelineArn", params["imagePipelineArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetImagePipeline",
      method: "GET",
      requestUri: "/GetImagePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imagePipeline": toImagePipeline,
      },
    }, await resp.json());
  }

  async getImagePolicy(
    {abortSignal, ...params}: RequestConfig & GetImagePolicyRequest,
  ): Promise<GetImagePolicyResponse> {
    const query = new URLSearchParams;
    query.set("imageArn", params["imageArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetImagePolicy",
      method: "GET",
      requestUri: "/GetImagePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "policy": "s",
      },
    }, await resp.json());
  }

  async getImageRecipe(
    {abortSignal, ...params}: RequestConfig & GetImageRecipeRequest,
  ): Promise<GetImageRecipeResponse> {
    const query = new URLSearchParams;
    query.set("imageRecipeArn", params["imageRecipeArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetImageRecipe",
      method: "GET",
      requestUri: "/GetImageRecipe",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageRecipe": toImageRecipe,
      },
    }, await resp.json());
  }

  async getImageRecipePolicy(
    {abortSignal, ...params}: RequestConfig & GetImageRecipePolicyRequest,
  ): Promise<GetImageRecipePolicyResponse> {
    const query = new URLSearchParams;
    query.set("imageRecipeArn", params["imageRecipeArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetImageRecipePolicy",
      method: "GET",
      requestUri: "/GetImageRecipePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "policy": "s",
      },
    }, await resp.json());
  }

  async getInfrastructureConfiguration(
    {abortSignal, ...params}: RequestConfig & GetInfrastructureConfigurationRequest,
  ): Promise<GetInfrastructureConfigurationResponse> {
    const query = new URLSearchParams;
    query.set("infrastructureConfigurationArn", params["infrastructureConfigurationArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetInfrastructureConfiguration",
      method: "GET",
      requestUri: "/GetInfrastructureConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "infrastructureConfiguration": toInfrastructureConfiguration,
      },
    }, await resp.json());
  }

  async importComponent(
    {abortSignal, ...params}: RequestConfig & ImportComponentRequest,
  ): Promise<ImportComponentResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      semanticVersion: params["semanticVersion"],
      description: params["description"],
      changeDescription: params["changeDescription"],
      type: params["type"],
      format: params["format"],
      platform: params["platform"],
      data: params["data"],
      uri: params["uri"],
      kmsKeyId: params["kmsKeyId"],
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportComponent",
      method: "PUT",
      requestUri: "/ImportComponent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "componentBuildVersionArn": "s",
      },
    }, await resp.json());
  }

  async listComponentBuildVersions(
    {abortSignal, ...params}: RequestConfig & ListComponentBuildVersionsRequest,
  ): Promise<ListComponentBuildVersionsResponse> {
    const body: jsonP.JSONObject = {
      componentVersionArn: params["componentVersionArn"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListComponentBuildVersions",
      requestUri: "/ListComponentBuildVersions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "componentSummaryList": [toComponentSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listComponents(
    {abortSignal, ...params}: RequestConfig & ListComponentsRequest = {},
  ): Promise<ListComponentsResponse> {
    const body: jsonP.JSONObject = {
      owner: params["owner"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      byName: params["byName"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListComponents",
      requestUri: "/ListComponents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "componentVersionList": [toComponentVersion],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listContainerRecipes(
    {abortSignal, ...params}: RequestConfig & ListContainerRecipesRequest = {},
  ): Promise<ListContainerRecipesResponse> {
    const body: jsonP.JSONObject = {
      owner: params["owner"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListContainerRecipes",
      requestUri: "/ListContainerRecipes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "containerRecipeSummaryList": [toContainerRecipeSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDistributionConfigurations(
    {abortSignal, ...params}: RequestConfig & ListDistributionConfigurationsRequest = {},
  ): Promise<ListDistributionConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      filters: params["filters"]?.map(x => fromFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDistributionConfigurations",
      requestUri: "/ListDistributionConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "distributionConfigurationSummaryList": [toDistributionConfigurationSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listImageBuildVersions(
    {abortSignal, ...params}: RequestConfig & ListImageBuildVersionsRequest,
  ): Promise<ListImageBuildVersionsResponse> {
    const body: jsonP.JSONObject = {
      imageVersionArn: params["imageVersionArn"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListImageBuildVersions",
      requestUri: "/ListImageBuildVersions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageSummaryList": [toImageSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listImagePipelineImages(
    {abortSignal, ...params}: RequestConfig & ListImagePipelineImagesRequest,
  ): Promise<ListImagePipelineImagesResponse> {
    const body: jsonP.JSONObject = {
      imagePipelineArn: params["imagePipelineArn"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListImagePipelineImages",
      requestUri: "/ListImagePipelineImages",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageSummaryList": [toImageSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listImagePipelines(
    {abortSignal, ...params}: RequestConfig & ListImagePipelinesRequest = {},
  ): Promise<ListImagePipelinesResponse> {
    const body: jsonP.JSONObject = {
      filters: params["filters"]?.map(x => fromFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListImagePipelines",
      requestUri: "/ListImagePipelines",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imagePipelineList": [toImagePipeline],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listImageRecipes(
    {abortSignal, ...params}: RequestConfig & ListImageRecipesRequest = {},
  ): Promise<ListImageRecipesResponse> {
    const body: jsonP.JSONObject = {
      owner: params["owner"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListImageRecipes",
      requestUri: "/ListImageRecipes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageRecipeSummaryList": [toImageRecipeSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listImages(
    {abortSignal, ...params}: RequestConfig & ListImagesRequest = {},
  ): Promise<ListImagesResponse> {
    const body: jsonP.JSONObject = {
      owner: params["owner"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      byName: params["byName"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
      includeDeprecated: params["includeDeprecated"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListImages",
      requestUri: "/ListImages",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageVersionList": [toImageVersion],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listInfrastructureConfigurations(
    {abortSignal, ...params}: RequestConfig & ListInfrastructureConfigurationsRequest = {},
  ): Promise<ListInfrastructureConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      filters: params["filters"]?.map(x => fromFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInfrastructureConfigurations",
      requestUri: "/ListInfrastructureConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "infrastructureConfigurationSummaryList": [toInfrastructureConfigurationSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putComponentPolicy(
    {abortSignal, ...params}: RequestConfig & PutComponentPolicyRequest,
  ): Promise<PutComponentPolicyResponse> {
    const body: jsonP.JSONObject = {
      componentArn: params["componentArn"],
      policy: params["policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutComponentPolicy",
      method: "PUT",
      requestUri: "/PutComponentPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "componentArn": "s",
      },
    }, await resp.json());
  }

  async putContainerRecipePolicy(
    {abortSignal, ...params}: RequestConfig & PutContainerRecipePolicyRequest,
  ): Promise<PutContainerRecipePolicyResponse> {
    const body: jsonP.JSONObject = {
      containerRecipeArn: params["containerRecipeArn"],
      policy: params["policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutContainerRecipePolicy",
      method: "PUT",
      requestUri: "/PutContainerRecipePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "containerRecipeArn": "s",
      },
    }, await resp.json());
  }

  async putImagePolicy(
    {abortSignal, ...params}: RequestConfig & PutImagePolicyRequest,
  ): Promise<PutImagePolicyResponse> {
    const body: jsonP.JSONObject = {
      imageArn: params["imageArn"],
      policy: params["policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutImagePolicy",
      method: "PUT",
      requestUri: "/PutImagePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageArn": "s",
      },
    }, await resp.json());
  }

  async putImageRecipePolicy(
    {abortSignal, ...params}: RequestConfig & PutImageRecipePolicyRequest,
  ): Promise<PutImageRecipePolicyResponse> {
    const body: jsonP.JSONObject = {
      imageRecipeArn: params["imageRecipeArn"],
      policy: params["policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutImageRecipePolicy",
      method: "PUT",
      requestUri: "/PutImageRecipePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "imageRecipeArn": "s",
      },
    }, await resp.json());
  }

  async startImagePipelineExecution(
    {abortSignal, ...params}: RequestConfig & StartImagePipelineExecutionRequest,
  ): Promise<StartImagePipelineExecutionResponse> {
    const body: jsonP.JSONObject = {
      imagePipelineArn: params["imagePipelineArn"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartImagePipelineExecution",
      method: "PUT",
      requestUri: "/StartImagePipelineExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "imageBuildVersionArn": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDistributionConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateDistributionConfigurationRequest,
  ): Promise<UpdateDistributionConfigurationResponse> {
    const body: jsonP.JSONObject = {
      distributionConfigurationArn: params["distributionConfigurationArn"],
      description: params["description"],
      distributions: params["distributions"]?.map(x => fromDistribution(x)),
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDistributionConfiguration",
      method: "PUT",
      requestUri: "/UpdateDistributionConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "distributionConfigurationArn": "s",
      },
    }, await resp.json());
  }

  async updateImagePipeline(
    {abortSignal, ...params}: RequestConfig & UpdateImagePipelineRequest,
  ): Promise<UpdateImagePipelineResponse> {
    const body: jsonP.JSONObject = {
      imagePipelineArn: params["imagePipelineArn"],
      description: params["description"],
      imageRecipeArn: params["imageRecipeArn"],
      containerRecipeArn: params["containerRecipeArn"],
      infrastructureConfigurationArn: params["infrastructureConfigurationArn"],
      distributionConfigurationArn: params["distributionConfigurationArn"],
      imageTestsConfiguration: fromImageTestsConfiguration(params["imageTestsConfiguration"]),
      enhancedImageMetadataEnabled: params["enhancedImageMetadataEnabled"],
      schedule: fromSchedule(params["schedule"]),
      status: params["status"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateImagePipeline",
      method: "PUT",
      requestUri: "/UpdateImagePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "imagePipelineArn": "s",
      },
    }, await resp.json());
  }

  async updateInfrastructureConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateInfrastructureConfigurationRequest,
  ): Promise<UpdateInfrastructureConfigurationResponse> {
    const body: jsonP.JSONObject = {
      infrastructureConfigurationArn: params["infrastructureConfigurationArn"],
      description: params["description"],
      instanceTypes: params["instanceTypes"],
      instanceProfileName: params["instanceProfileName"],
      securityGroupIds: params["securityGroupIds"],
      subnetId: params["subnetId"],
      logging: fromLogging(params["logging"]),
      keyPair: params["keyPair"],
      terminateInstanceOnFailure: params["terminateInstanceOnFailure"],
      snsTopicArn: params["snsTopicArn"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      resourceTags: params["resourceTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateInfrastructureConfiguration",
      method: "PUT",
      requestUri: "/UpdateInfrastructureConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "requestId": "s",
        "clientToken": "s",
        "infrastructureConfigurationArn": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CancelImageCreationRequest {
  imageBuildVersionArn: string;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateComponentRequest {
  name: string;
  semanticVersion: string;
  description?: string | null;
  changeDescription?: string | null;
  platform: Platform;
  supportedOsVersions?: string[] | null;
  data?: string | null;
  uri?: string | null;
  kmsKeyId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateContainerRecipeRequest {
  containerType: ContainerType;
  name: string;
  description?: string | null;
  semanticVersion: string;
  components: ComponentConfiguration[];
  dockerfileTemplateData: string;
  dockerfileTemplateUri?: string | null;
  platformOverride?: Platform | null;
  imageOsVersionOverride?: string | null;
  parentImage: string;
  tags?: { [key: string]: string | null | undefined } | null;
  workingDirectory?: string | null;
  targetRepository: TargetContainerRepository;
  kmsKeyId?: string | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateDistributionConfigurationRequest {
  name: string;
  description?: string | null;
  distributions: Distribution[];
  tags?: { [key: string]: string | null | undefined } | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateImageRequest {
  imageRecipeArn?: string | null;
  containerRecipeArn?: string | null;
  distributionConfigurationArn?: string | null;
  infrastructureConfigurationArn: string;
  imageTestsConfiguration?: ImageTestsConfiguration | null;
  enhancedImageMetadataEnabled?: boolean | null;
  tags?: { [key: string]: string | null | undefined } | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateImagePipelineRequest {
  name: string;
  description?: string | null;
  imageRecipeArn?: string | null;
  containerRecipeArn?: string | null;
  infrastructureConfigurationArn: string;
  distributionConfigurationArn?: string | null;
  imageTestsConfiguration?: ImageTestsConfiguration | null;
  enhancedImageMetadataEnabled?: boolean | null;
  schedule?: Schedule | null;
  status?: PipelineStatus | null;
  tags?: { [key: string]: string | null | undefined } | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateImageRecipeRequest {
  name: string;
  description?: string | null;
  semanticVersion: string;
  components: ComponentConfiguration[];
  parentImage: string;
  blockDeviceMappings?: InstanceBlockDeviceMapping[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
  workingDirectory?: string | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateInfrastructureConfigurationRequest {
  name: string;
  description?: string | null;
  instanceTypes?: string[] | null;
  instanceProfileName: string;
  securityGroupIds?: string[] | null;
  subnetId?: string | null;
  logging?: Logging | null;
  keyPair?: string | null;
  terminateInstanceOnFailure?: boolean | null;
  snsTopicArn?: string | null;
  resourceTags?: { [key: string]: string | null | undefined } | null;
  tags?: { [key: string]: string | null | undefined } | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteComponentRequest {
  componentBuildVersionArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteContainerRecipeRequest {
  containerRecipeArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteDistributionConfigurationRequest {
  distributionConfigurationArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteImageRequest {
  imageBuildVersionArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteImagePipelineRequest {
  imagePipelineArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteImageRecipeRequest {
  imageRecipeArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteInfrastructureConfigurationRequest {
  infrastructureConfigurationArn: string;
}

// refs: 1 - tags: named, input
export interface GetComponentRequest {
  componentBuildVersionArn: string;
}

// refs: 1 - tags: named, input
export interface GetComponentPolicyRequest {
  componentArn: string;
}

// refs: 1 - tags: named, input
export interface GetContainerRecipeRequest {
  containerRecipeArn: string;
}

// refs: 1 - tags: named, input
export interface GetContainerRecipePolicyRequest {
  containerRecipeArn: string;
}

// refs: 1 - tags: named, input
export interface GetDistributionConfigurationRequest {
  distributionConfigurationArn: string;
}

// refs: 1 - tags: named, input
export interface GetImageRequest {
  imageBuildVersionArn: string;
}

// refs: 1 - tags: named, input
export interface GetImagePipelineRequest {
  imagePipelineArn: string;
}

// refs: 1 - tags: named, input
export interface GetImagePolicyRequest {
  imageArn: string;
}

// refs: 1 - tags: named, input
export interface GetImageRecipeRequest {
  imageRecipeArn: string;
}

// refs: 1 - tags: named, input
export interface GetImageRecipePolicyRequest {
  imageRecipeArn: string;
}

// refs: 1 - tags: named, input
export interface GetInfrastructureConfigurationRequest {
  infrastructureConfigurationArn: string;
}

// refs: 1 - tags: named, input
export interface ImportComponentRequest {
  name: string;
  semanticVersion: string;
  description?: string | null;
  changeDescription?: string | null;
  type: ComponentType;
  format: ComponentFormat;
  platform: Platform;
  data?: string | null;
  uri?: string | null;
  kmsKeyId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface ListComponentBuildVersionsRequest {
  componentVersionArn: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListComponentsRequest {
  owner?: Ownership | null;
  filters?: Filter[] | null;
  byName?: boolean | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListContainerRecipesRequest {
  owner?: Ownership | null;
  filters?: Filter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDistributionConfigurationsRequest {
  filters?: Filter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListImageBuildVersionsRequest {
  imageVersionArn: string;
  filters?: Filter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListImagePipelineImagesRequest {
  imagePipelineArn: string;
  filters?: Filter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListImagePipelinesRequest {
  filters?: Filter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListImageRecipesRequest {
  owner?: Ownership | null;
  filters?: Filter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListImagesRequest {
  owner?: Ownership | null;
  filters?: Filter[] | null;
  byName?: boolean | null;
  maxResults?: number | null;
  nextToken?: string | null;
  includeDeprecated?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListInfrastructureConfigurationsRequest {
  filters?: Filter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutComponentPolicyRequest {
  componentArn: string;
  policy: string;
}

// refs: 1 - tags: named, input
export interface PutContainerRecipePolicyRequest {
  containerRecipeArn: string;
  policy: string;
}

// refs: 1 - tags: named, input
export interface PutImagePolicyRequest {
  imageArn: string;
  policy: string;
}

// refs: 1 - tags: named, input
export interface PutImageRecipePolicyRequest {
  imageRecipeArn: string;
  policy: string;
}

// refs: 1 - tags: named, input
export interface StartImagePipelineExecutionRequest {
  imagePipelineArn: string;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDistributionConfigurationRequest {
  distributionConfigurationArn: string;
  description?: string | null;
  distributions: Distribution[];
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface UpdateImagePipelineRequest {
  imagePipelineArn: string;
  description?: string | null;
  imageRecipeArn?: string | null;
  containerRecipeArn?: string | null;
  infrastructureConfigurationArn: string;
  distributionConfigurationArn?: string | null;
  imageTestsConfiguration?: ImageTestsConfiguration | null;
  enhancedImageMetadataEnabled?: boolean | null;
  schedule?: Schedule | null;
  status?: PipelineStatus | null;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface UpdateInfrastructureConfigurationRequest {
  infrastructureConfigurationArn: string;
  description?: string | null;
  instanceTypes?: string[] | null;
  instanceProfileName: string;
  securityGroupIds?: string[] | null;
  subnetId?: string | null;
  logging?: Logging | null;
  keyPair?: string | null;
  terminateInstanceOnFailure?: boolean | null;
  snsTopicArn?: string | null;
  clientToken: string;
  resourceTags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CancelImageCreationResponse {
  requestId?: string | null;
  clientToken?: string | null;
  imageBuildVersionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateComponentResponse {
  requestId?: string | null;
  clientToken?: string | null;
  componentBuildVersionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateContainerRecipeResponse {
  requestId?: string | null;
  clientToken?: string | null;
  containerRecipeArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDistributionConfigurationResponse {
  requestId?: string | null;
  clientToken?: string | null;
  distributionConfigurationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateImageResponse {
  requestId?: string | null;
  clientToken?: string | null;
  imageBuildVersionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateImagePipelineResponse {
  requestId?: string | null;
  clientToken?: string | null;
  imagePipelineArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateImageRecipeResponse {
  requestId?: string | null;
  clientToken?: string | null;
  imageRecipeArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateInfrastructureConfigurationResponse {
  requestId?: string | null;
  clientToken?: string | null;
  infrastructureConfigurationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteComponentResponse {
  requestId?: string | null;
  componentBuildVersionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteContainerRecipeResponse {
  requestId?: string | null;
  containerRecipeArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteDistributionConfigurationResponse {
  requestId?: string | null;
  distributionConfigurationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteImageResponse {
  requestId?: string | null;
  imageBuildVersionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteImagePipelineResponse {
  requestId?: string | null;
  imagePipelineArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteImageRecipeResponse {
  requestId?: string | null;
  imageRecipeArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteInfrastructureConfigurationResponse {
  requestId?: string | null;
  infrastructureConfigurationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetComponentResponse {
  requestId?: string | null;
  component?: Component | null;
}

// refs: 1 - tags: named, output
export interface GetComponentPolicyResponse {
  requestId?: string | null;
  policy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetContainerRecipeResponse {
  requestId?: string | null;
  containerRecipe?: ContainerRecipe | null;
}

// refs: 1 - tags: named, output
export interface GetContainerRecipePolicyResponse {
  requestId?: string | null;
  policy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDistributionConfigurationResponse {
  requestId?: string | null;
  distributionConfiguration?: DistributionConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetImageResponse {
  requestId?: string | null;
  image?: Image | null;
}

// refs: 1 - tags: named, output
export interface GetImagePipelineResponse {
  requestId?: string | null;
  imagePipeline?: ImagePipeline | null;
}

// refs: 1 - tags: named, output
export interface GetImagePolicyResponse {
  requestId?: string | null;
  policy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetImageRecipeResponse {
  requestId?: string | null;
  imageRecipe?: ImageRecipe | null;
}

// refs: 1 - tags: named, output
export interface GetImageRecipePolicyResponse {
  requestId?: string | null;
  policy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetInfrastructureConfigurationResponse {
  requestId?: string | null;
  infrastructureConfiguration?: InfrastructureConfiguration | null;
}

// refs: 1 - tags: named, output
export interface ImportComponentResponse {
  requestId?: string | null;
  clientToken?: string | null;
  componentBuildVersionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface ListComponentBuildVersionsResponse {
  requestId?: string | null;
  componentSummaryList?: ComponentSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListComponentsResponse {
  requestId?: string | null;
  componentVersionList?: ComponentVersion[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListContainerRecipesResponse {
  requestId?: string | null;
  containerRecipeSummaryList?: ContainerRecipeSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDistributionConfigurationsResponse {
  requestId?: string | null;
  distributionConfigurationSummaryList?: DistributionConfigurationSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListImageBuildVersionsResponse {
  requestId?: string | null;
  imageSummaryList?: ImageSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListImagePipelineImagesResponse {
  requestId?: string | null;
  imageSummaryList?: ImageSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListImagePipelinesResponse {
  requestId?: string | null;
  imagePipelineList?: ImagePipeline[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListImageRecipesResponse {
  requestId?: string | null;
  imageRecipeSummaryList?: ImageRecipeSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListImagesResponse {
  requestId?: string | null;
  imageVersionList?: ImageVersion[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInfrastructureConfigurationsResponse {
  requestId?: string | null;
  infrastructureConfigurationSummaryList?: InfrastructureConfigurationSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PutComponentPolicyResponse {
  requestId?: string | null;
  componentArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutContainerRecipePolicyResponse {
  requestId?: string | null;
  containerRecipeArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutImagePolicyResponse {
  requestId?: string | null;
  imageArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutImageRecipePolicyResponse {
  requestId?: string | null;
  imageRecipeArn?: string | null;
}

// refs: 1 - tags: named, output
export interface StartImagePipelineExecutionResponse {
  requestId?: string | null;
  clientToken?: string | null;
  imageBuildVersionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDistributionConfigurationResponse {
  requestId?: string | null;
  clientToken?: string | null;
  distributionConfigurationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateImagePipelineResponse {
  requestId?: string | null;
  clientToken?: string | null;
  imagePipelineArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateInfrastructureConfigurationResponse {
  requestId?: string | null;
  clientToken?: string | null;
  infrastructureConfigurationArn?: string | null;
}

// refs: 18 - tags: input, named, enum, output
export type Platform =
| "Windows"
| "Linux"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type ContainerType =
| "DOCKER"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface ComponentConfiguration {
  componentArn: string;
}
function fromComponentConfiguration(input?: ComponentConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    componentArn: input["componentArn"],
  }
}
function toComponentConfiguration(root: jsonP.JSONValue): ComponentConfiguration {
  return jsonP.readObj({
    required: {
      "componentArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface TargetContainerRepository {
  service: ContainerRepositoryService;
  repositoryName: string;
}
function fromTargetContainerRepository(input?: TargetContainerRepository | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    service: input["service"],
    repositoryName: input["repositoryName"],
  }
}
function toTargetContainerRepository(root: jsonP.JSONValue): TargetContainerRepository {
  return jsonP.readObj({
    required: {
      "service": (x: jsonP.JSONValue) => cmnP.readEnum<ContainerRepositoryService>(x),
      "repositoryName": "s",
    },
    optional: {},
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type ContainerRepositoryService =
| "ECR"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface Distribution {
  region: string;
  amiDistributionConfiguration?: AmiDistributionConfiguration | null;
  containerDistributionConfiguration?: ContainerDistributionConfiguration | null;
  licenseConfigurationArns?: string[] | null;
}
function fromDistribution(input?: Distribution | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    region: input["region"],
    amiDistributionConfiguration: fromAmiDistributionConfiguration(input["amiDistributionConfiguration"]),
    containerDistributionConfiguration: fromContainerDistributionConfiguration(input["containerDistributionConfiguration"]),
    licenseConfigurationArns: input["licenseConfigurationArns"],
  }
}
function toDistribution(root: jsonP.JSONValue): Distribution {
  return jsonP.readObj({
    required: {
      "region": "s",
    },
    optional: {
      "amiDistributionConfiguration": toAmiDistributionConfiguration,
      "containerDistributionConfiguration": toContainerDistributionConfiguration,
      "licenseConfigurationArns": ["s"],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface AmiDistributionConfiguration {
  name?: string | null;
  description?: string | null;
  targetAccountIds?: string[] | null;
  amiTags?: { [key: string]: string | null | undefined } | null;
  kmsKeyId?: string | null;
  launchPermission?: LaunchPermissionConfiguration | null;
}
function fromAmiDistributionConfiguration(input?: AmiDistributionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    description: input["description"],
    targetAccountIds: input["targetAccountIds"],
    amiTags: input["amiTags"],
    kmsKeyId: input["kmsKeyId"],
    launchPermission: fromLaunchPermissionConfiguration(input["launchPermission"]),
  }
}
function toAmiDistributionConfiguration(root: jsonP.JSONValue): AmiDistributionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "description": "s",
      "targetAccountIds": ["s"],
      "amiTags": x => jsonP.readMap(String, String, x),
      "kmsKeyId": "s",
      "launchPermission": toLaunchPermissionConfiguration,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface LaunchPermissionConfiguration {
  userIds?: string[] | null;
  userGroups?: string[] | null;
}
function fromLaunchPermissionConfiguration(input?: LaunchPermissionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    userIds: input["userIds"],
    userGroups: input["userGroups"],
  }
}
function toLaunchPermissionConfiguration(root: jsonP.JSONValue): LaunchPermissionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "userIds": ["s"],
      "userGroups": ["s"],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ContainerDistributionConfiguration {
  description?: string | null;
  containerTags?: string[] | null;
  targetRepository: TargetContainerRepository;
}
function fromContainerDistributionConfiguration(input?: ContainerDistributionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    description: input["description"],
    containerTags: input["containerTags"],
    targetRepository: fromTargetContainerRepository(input["targetRepository"]),
  }
}
function toContainerDistributionConfiguration(root: jsonP.JSONValue): ContainerDistributionConfiguration {
  return jsonP.readObj({
    required: {
      "targetRepository": toTargetContainerRepository,
    },
    optional: {
      "description": "s",
      "containerTags": ["s"],
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface ImageTestsConfiguration {
  imageTestsEnabled?: boolean | null;
  timeoutMinutes?: number | null;
}
function fromImageTestsConfiguration(input?: ImageTestsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    imageTestsEnabled: input["imageTestsEnabled"],
    timeoutMinutes: input["timeoutMinutes"],
  }
}
function toImageTestsConfiguration(root: jsonP.JSONValue): ImageTestsConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "imageTestsEnabled": "b",
      "timeoutMinutes": "n",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface Schedule {
  scheduleExpression?: string | null;
  pipelineExecutionStartCondition?: PipelineExecutionStartCondition | null;
}
function fromSchedule(input?: Schedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    scheduleExpression: input["scheduleExpression"],
    pipelineExecutionStartCondition: input["pipelineExecutionStartCondition"],
  }
}
function toSchedule(root: jsonP.JSONValue): Schedule {
  return jsonP.readObj({
    required: {},
    optional: {
      "scheduleExpression": "s",
      "pipelineExecutionStartCondition": (x: jsonP.JSONValue) => cmnP.readEnum<PipelineExecutionStartCondition>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type PipelineExecutionStartCondition =
| "EXPRESSION_MATCH_ONLY"
| "EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type PipelineStatus =
| "DISABLED"
| "ENABLED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface InstanceBlockDeviceMapping {
  deviceName?: string | null;
  ebs?: EbsInstanceBlockDeviceSpecification | null;
  virtualName?: string | null;
  noDevice?: string | null;
}
function fromInstanceBlockDeviceMapping(input?: InstanceBlockDeviceMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deviceName: input["deviceName"],
    ebs: fromEbsInstanceBlockDeviceSpecification(input["ebs"]),
    virtualName: input["virtualName"],
    noDevice: input["noDevice"],
  }
}
function toInstanceBlockDeviceMapping(root: jsonP.JSONValue): InstanceBlockDeviceMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "deviceName": "s",
      "ebs": toEbsInstanceBlockDeviceSpecification,
      "virtualName": "s",
      "noDevice": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface EbsInstanceBlockDeviceSpecification {
  encrypted?: boolean | null;
  deleteOnTermination?: boolean | null;
  iops?: number | null;
  kmsKeyId?: string | null;
  snapshotId?: string | null;
  volumeSize?: number | null;
  volumeType?: EbsVolumeType | null;
}
function fromEbsInstanceBlockDeviceSpecification(input?: EbsInstanceBlockDeviceSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    encrypted: input["encrypted"],
    deleteOnTermination: input["deleteOnTermination"],
    iops: input["iops"],
    kmsKeyId: input["kmsKeyId"],
    snapshotId: input["snapshotId"],
    volumeSize: input["volumeSize"],
    volumeType: input["volumeType"],
  }
}
function toEbsInstanceBlockDeviceSpecification(root: jsonP.JSONValue): EbsInstanceBlockDeviceSpecification {
  return jsonP.readObj({
    required: {},
    optional: {
      "encrypted": "b",
      "deleteOnTermination": "b",
      "iops": "n",
      "kmsKeyId": "s",
      "snapshotId": "s",
      "volumeSize": "n",
      "volumeType": (x: jsonP.JSONValue) => cmnP.readEnum<EbsVolumeType>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type EbsVolumeType =
| "standard"
| "io1"
| "io2"
| "gp2"
| "sc1"
| "st1"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface Logging {
  s3Logs?: S3Logs | null;
}
function fromLogging(input?: Logging | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Logs: fromS3Logs(input["s3Logs"]),
  }
}
function toLogging(root: jsonP.JSONValue): Logging {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3Logs": toS3Logs,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface S3Logs {
  s3BucketName?: string | null;
  s3KeyPrefix?: string | null;
}
function fromS3Logs(input?: S3Logs | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3BucketName: input["s3BucketName"],
    s3KeyPrefix: input["s3KeyPrefix"],
  }
}
function toS3Logs(root: jsonP.JSONValue): S3Logs {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3BucketName": "s",
      "s3KeyPrefix": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ComponentType =
| "BUILD"
| "TEST"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ComponentFormat =
| "SHELL"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum
export type Ownership =
| "Self"
| "Shared"
| "Amazon"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, interface
export interface Filter {
  name?: string | null;
  values?: string[] | null;
}
function fromFilter(input?: Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

// refs: 1 - tags: output, named, interface
export interface Component {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  description?: string | null;
  changeDescription?: string | null;
  type?: ComponentType | null;
  platform?: Platform | null;
  supportedOsVersions?: string[] | null;
  owner?: string | null;
  data?: string | null;
  kmsKeyId?: string | null;
  encrypted?: boolean | null;
  dateCreated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toComponent(root: jsonP.JSONValue): Component {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "version": "s",
      "description": "s",
      "changeDescription": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ComponentType>(x),
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "supportedOsVersions": ["s"],
      "owner": "s",
      "data": "s",
      "kmsKeyId": "s",
      "encrypted": "b",
      "dateCreated": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ContainerRecipe {
  arn?: string | null;
  containerType?: ContainerType | null;
  name?: string | null;
  description?: string | null;
  platform?: Platform | null;
  owner?: string | null;
  version?: string | null;
  components?: ComponentConfiguration[] | null;
  dockerfileTemplateData?: string | null;
  kmsKeyId?: string | null;
  encrypted?: boolean | null;
  parentImage?: string | null;
  dateCreated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  workingDirectory?: string | null;
  targetRepository?: TargetContainerRepository | null;
}
function toContainerRecipe(root: jsonP.JSONValue): ContainerRecipe {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "containerType": (x: jsonP.JSONValue) => cmnP.readEnum<ContainerType>(x),
      "name": "s",
      "description": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "owner": "s",
      "version": "s",
      "components": [toComponentConfiguration],
      "dockerfileTemplateData": "s",
      "kmsKeyId": "s",
      "encrypted": "b",
      "parentImage": "s",
      "dateCreated": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "workingDirectory": "s",
      "targetRepository": toTargetContainerRepository,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DistributionConfiguration {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  distributions?: Distribution[] | null;
  timeoutMinutes: number;
  dateCreated?: string | null;
  dateUpdated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toDistributionConfiguration(root: jsonP.JSONValue): DistributionConfiguration {
  return jsonP.readObj({
    required: {
      "timeoutMinutes": "n",
    },
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "distributions": [toDistribution],
      "dateCreated": "s",
      "dateUpdated": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Image {
  arn?: string | null;
  type?: ImageType | null;
  name?: string | null;
  version?: string | null;
  platform?: Platform | null;
  enhancedImageMetadataEnabled?: boolean | null;
  osVersion?: string | null;
  state?: ImageState | null;
  imageRecipe?: ImageRecipe | null;
  containerRecipe?: ContainerRecipe | null;
  sourcePipelineName?: string | null;
  sourcePipelineArn?: string | null;
  infrastructureConfiguration?: InfrastructureConfiguration | null;
  distributionConfiguration?: DistributionConfiguration | null;
  imageTestsConfiguration?: ImageTestsConfiguration | null;
  dateCreated?: string | null;
  outputResources?: OutputResources | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toImage(root: jsonP.JSONValue): Image {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ImageType>(x),
      "name": "s",
      "version": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "enhancedImageMetadataEnabled": "b",
      "osVersion": "s",
      "state": toImageState,
      "imageRecipe": toImageRecipe,
      "containerRecipe": toContainerRecipe,
      "sourcePipelineName": "s",
      "sourcePipelineArn": "s",
      "infrastructureConfiguration": toInfrastructureConfiguration,
      "distributionConfiguration": toDistributionConfiguration,
      "imageTestsConfiguration": toImageTestsConfiguration,
      "dateCreated": "s",
      "outputResources": toOutputResources,
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type ImageType =
| "AMI"
| "DOCKER"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface ImageState {
  status?: ImageStatus | null;
  reason?: string | null;
}
function toImageState(root: jsonP.JSONValue): ImageState {
  return jsonP.readObj({
    required: {},
    optional: {
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ImageStatus>(x),
      "reason": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type ImageStatus =
| "PENDING"
| "CREATING"
| "BUILDING"
| "TESTING"
| "DISTRIBUTING"
| "INTEGRATING"
| "AVAILABLE"
| "CANCELLED"
| "FAILED"
| "DEPRECATED"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ImageRecipe {
  arn?: string | null;
  type?: ImageType | null;
  name?: string | null;
  description?: string | null;
  platform?: Platform | null;
  owner?: string | null;
  version?: string | null;
  components?: ComponentConfiguration[] | null;
  parentImage?: string | null;
  blockDeviceMappings?: InstanceBlockDeviceMapping[] | null;
  dateCreated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  workingDirectory?: string | null;
}
function toImageRecipe(root: jsonP.JSONValue): ImageRecipe {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ImageType>(x),
      "name": "s",
      "description": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "owner": "s",
      "version": "s",
      "components": [toComponentConfiguration],
      "parentImage": "s",
      "blockDeviceMappings": [toInstanceBlockDeviceMapping],
      "dateCreated": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "workingDirectory": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface InfrastructureConfiguration {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  instanceTypes?: string[] | null;
  instanceProfileName?: string | null;
  securityGroupIds?: string[] | null;
  subnetId?: string | null;
  logging?: Logging | null;
  keyPair?: string | null;
  terminateInstanceOnFailure?: boolean | null;
  snsTopicArn?: string | null;
  dateCreated?: string | null;
  dateUpdated?: string | null;
  resourceTags?: { [key: string]: string | null | undefined } | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toInfrastructureConfiguration(root: jsonP.JSONValue): InfrastructureConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "instanceTypes": ["s"],
      "instanceProfileName": "s",
      "securityGroupIds": ["s"],
      "subnetId": "s",
      "logging": toLogging,
      "keyPair": "s",
      "terminateInstanceOnFailure": "b",
      "snsTopicArn": "s",
      "dateCreated": "s",
      "dateUpdated": "s",
      "resourceTags": x => jsonP.readMap(String, String, x),
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface OutputResources {
  amis?: Ami[] | null;
  containers?: Container[] | null;
}
function toOutputResources(root: jsonP.JSONValue): OutputResources {
  return jsonP.readObj({
    required: {},
    optional: {
      "amis": [toAmi],
      "containers": [toContainer],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Ami {
  region?: string | null;
  image?: string | null;
  name?: string | null;
  description?: string | null;
  state?: ImageState | null;
  accountId?: string | null;
}
function toAmi(root: jsonP.JSONValue): Ami {
  return jsonP.readObj({
    required: {},
    optional: {
      "region": "s",
      "image": "s",
      "name": "s",
      "description": "s",
      "state": toImageState,
      "accountId": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Container {
  region?: string | null;
  imageUris?: string[] | null;
}
function toContainer(root: jsonP.JSONValue): Container {
  return jsonP.readObj({
    required: {},
    optional: {
      "region": "s",
      "imageUris": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ImagePipeline {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  platform?: Platform | null;
  enhancedImageMetadataEnabled?: boolean | null;
  imageRecipeArn?: string | null;
  containerRecipeArn?: string | null;
  infrastructureConfigurationArn?: string | null;
  distributionConfigurationArn?: string | null;
  imageTestsConfiguration?: ImageTestsConfiguration | null;
  schedule?: Schedule | null;
  status?: PipelineStatus | null;
  dateCreated?: string | null;
  dateUpdated?: string | null;
  dateLastRun?: string | null;
  dateNextRun?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toImagePipeline(root: jsonP.JSONValue): ImagePipeline {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "enhancedImageMetadataEnabled": "b",
      "imageRecipeArn": "s",
      "containerRecipeArn": "s",
      "infrastructureConfigurationArn": "s",
      "distributionConfigurationArn": "s",
      "imageTestsConfiguration": toImageTestsConfiguration,
      "schedule": toSchedule,
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<PipelineStatus>(x),
      "dateCreated": "s",
      "dateUpdated": "s",
      "dateLastRun": "s",
      "dateNextRun": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComponentSummary {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  platform?: Platform | null;
  supportedOsVersions?: string[] | null;
  type?: ComponentType | null;
  owner?: string | null;
  description?: string | null;
  changeDescription?: string | null;
  dateCreated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toComponentSummary(root: jsonP.JSONValue): ComponentSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "version": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "supportedOsVersions": ["s"],
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ComponentType>(x),
      "owner": "s",
      "description": "s",
      "changeDescription": "s",
      "dateCreated": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComponentVersion {
  arn?: string | null;
  name?: string | null;
  version?: string | null;
  description?: string | null;
  platform?: Platform | null;
  supportedOsVersions?: string[] | null;
  type?: ComponentType | null;
  owner?: string | null;
  dateCreated?: string | null;
}
function toComponentVersion(root: jsonP.JSONValue): ComponentVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "version": "s",
      "description": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "supportedOsVersions": ["s"],
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ComponentType>(x),
      "owner": "s",
      "dateCreated": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ContainerRecipeSummary {
  arn?: string | null;
  containerType?: ContainerType | null;
  name?: string | null;
  platform?: Platform | null;
  owner?: string | null;
  parentImage?: string | null;
  dateCreated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toContainerRecipeSummary(root: jsonP.JSONValue): ContainerRecipeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "containerType": (x: jsonP.JSONValue) => cmnP.readEnum<ContainerType>(x),
      "name": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "owner": "s",
      "parentImage": "s",
      "dateCreated": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DistributionConfigurationSummary {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  dateCreated?: string | null;
  dateUpdated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  regions?: string[] | null;
}
function toDistributionConfigurationSummary(root: jsonP.JSONValue): DistributionConfigurationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "dateCreated": "s",
      "dateUpdated": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "regions": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ImageSummary {
  arn?: string | null;
  name?: string | null;
  type?: ImageType | null;
  version?: string | null;
  platform?: Platform | null;
  osVersion?: string | null;
  state?: ImageState | null;
  owner?: string | null;
  dateCreated?: string | null;
  outputResources?: OutputResources | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toImageSummary(root: jsonP.JSONValue): ImageSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ImageType>(x),
      "version": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "osVersion": "s",
      "state": toImageState,
      "owner": "s",
      "dateCreated": "s",
      "outputResources": toOutputResources,
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ImageRecipeSummary {
  arn?: string | null;
  name?: string | null;
  platform?: Platform | null;
  owner?: string | null;
  parentImage?: string | null;
  dateCreated?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toImageRecipeSummary(root: jsonP.JSONValue): ImageRecipeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "owner": "s",
      "parentImage": "s",
      "dateCreated": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ImageVersion {
  arn?: string | null;
  name?: string | null;
  type?: ImageType | null;
  version?: string | null;
  platform?: Platform | null;
  osVersion?: string | null;
  owner?: string | null;
  dateCreated?: string | null;
}
function toImageVersion(root: jsonP.JSONValue): ImageVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ImageType>(x),
      "version": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "osVersion": "s",
      "owner": "s",
      "dateCreated": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InfrastructureConfigurationSummary {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  dateCreated?: string | null;
  dateUpdated?: string | null;
  resourceTags?: { [key: string]: string | null | undefined } | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toInfrastructureConfigurationSummary(root: jsonP.JSONValue): InfrastructureConfigurationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "dateCreated": "s",
      "dateUpdated": "s",
      "resourceTags": x => jsonP.readMap(String, String, x),
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
