// Autogenerated API client for: AWS Service Catalog

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class ServiceCatalog {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ServiceCatalog.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-12-10",
    "endpointPrefix": "servicecatalog",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Service Catalog",
    "serviceId": "Service Catalog",
    "signatureVersion": "v4",
    "targetPrefix": "AWS242ServiceCatalogService",
    "uid": "servicecatalog-2015-12-10"
  };

  async acceptPortfolioShare(
    {abortSignal, ...params}: RequestConfig & AcceptPortfolioShareInput,
  ): Promise<AcceptPortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PortfolioShareType: params["PortfolioShareType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptPortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateBudgetWithResource(
    {abortSignal, ...params}: RequestConfig & AssociateBudgetWithResourceInput,
  ): Promise<AssociateBudgetWithResourceOutput> {
    const body: jsonP.JSONObject = {
      BudgetName: params["BudgetName"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateBudgetWithResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associatePrincipalWithPortfolio(
    {abortSignal, ...params}: RequestConfig & AssociatePrincipalWithPortfolioInput,
  ): Promise<AssociatePrincipalWithPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PrincipalARN: params["PrincipalARN"],
      PrincipalType: params["PrincipalType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePrincipalWithPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateProductWithPortfolio(
    {abortSignal, ...params}: RequestConfig & AssociateProductWithPortfolioInput,
  ): Promise<AssociateProductWithPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PortfolioId: params["PortfolioId"],
      SourcePortfolioId: params["SourcePortfolioId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateProductWithPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateServiceActionWithProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & AssociateServiceActionWithProvisioningArtifactInput,
  ): Promise<AssociateServiceActionWithProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ServiceActionId: params["ServiceActionId"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateServiceActionWithProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateTagOptionWithResource(
    {abortSignal, ...params}: RequestConfig & AssociateTagOptionWithResourceInput,
  ): Promise<AssociateTagOptionWithResourceOutput> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagOptionId: params["TagOptionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateTagOptionWithResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchAssociateServiceActionWithProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & BatchAssociateServiceActionWithProvisioningArtifactInput,
  ): Promise<BatchAssociateServiceActionWithProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ServiceActionAssociations: params["ServiceActionAssociations"]?.map(x => fromServiceActionAssociation(x)),
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateServiceActionWithProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedServiceActionAssociations": [toFailedServiceActionAssociation],
      },
    }, await resp.json());
  }

  async batchDisassociateServiceActionFromProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & BatchDisassociateServiceActionFromProvisioningArtifactInput,
  ): Promise<BatchDisassociateServiceActionFromProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ServiceActionAssociations: params["ServiceActionAssociations"]?.map(x => fromServiceActionAssociation(x)),
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateServiceActionFromProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedServiceActionAssociations": [toFailedServiceActionAssociation],
      },
    }, await resp.json());
  }

  async copyProduct(
    {abortSignal, ...params}: RequestConfig & CopyProductInput,
  ): Promise<CopyProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      SourceProductArn: params["SourceProductArn"],
      TargetProductId: params["TargetProductId"],
      TargetProductName: params["TargetProductName"],
      SourceProvisioningArtifactIdentifiers: params["SourceProvisioningArtifactIdentifiers"],
      CopyOptions: params["CopyOptions"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CopyProductToken": "s",
      },
    }, await resp.json());
  }

  async createConstraint(
    {abortSignal, ...params}: RequestConfig & CreateConstraintInput,
  ): Promise<CreateConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      ProductId: params["ProductId"],
      Parameters: params["Parameters"],
      Type: params["Type"],
      Description: params["Description"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetail": toConstraintDetail,
        "ConstraintParameters": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      },
    }, await resp.json());
  }

  async createPortfolio(
    {abortSignal, ...params}: RequestConfig & CreatePortfolioInput,
  ): Promise<CreatePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      DisplayName: params["DisplayName"],
      Description: params["Description"],
      ProviderName: params["ProviderName"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetail": toPortfolioDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async createPortfolioShare(
    {abortSignal, ...params}: RequestConfig & CreatePortfolioShareInput,
  ): Promise<CreatePortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      AccountId: params["AccountId"],
      OrganizationNode: fromOrganizationNode(params["OrganizationNode"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioShareToken": "s",
      },
    }, await resp.json());
  }

  async createProduct(
    {abortSignal, ...params}: RequestConfig & CreateProductInput,
  ): Promise<CreateProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Name: params["Name"],
      Owner: params["Owner"],
      Description: params["Description"],
      Distributor: params["Distributor"],
      SupportDescription: params["SupportDescription"],
      SupportEmail: params["SupportEmail"],
      SupportUrl: params["SupportUrl"],
      ProductType: params["ProductType"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ProvisioningArtifactParameters: fromProvisioningArtifactProperties(params["ProvisioningArtifactParameters"]),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetail": toProductViewDetail,
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async createProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & CreateProvisionedProductPlanInput,
  ): Promise<CreateProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanName: params["PlanName"],
      PlanType: params["PlanType"],
      NotificationArns: params["NotificationArns"],
      PathId: params["PathId"],
      ProductId: params["ProductId"],
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningParameters: params["ProvisioningParameters"]?.map(x => fromUpdateProvisioningParameter(x)),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PlanName": "s",
        "PlanId": "s",
        "ProvisionProductId": "s",
        "ProvisionedProductName": "s",
        "ProvisioningArtifactId": "s",
      },
    }, await resp.json());
  }

  async createProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & CreateProvisioningArtifactInput,
  ): Promise<CreateProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      Parameters: fromProvisioningArtifactProperties(params["Parameters"]),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Info": x => jsonP.readMap(String, String, x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      },
    }, await resp.json());
  }

  async createServiceAction(
    {abortSignal, ...params}: RequestConfig & CreateServiceActionInput,
  ): Promise<CreateServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DefinitionType: params["DefinitionType"],
      Definition: params["Definition"],
      Description: params["Description"],
      AcceptLanguage: params["AcceptLanguage"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionDetail": toServiceActionDetail,
      },
    }, await resp.json());
  }

  async createTagOption(
    {abortSignal, ...params}: RequestConfig & CreateTagOptionInput,
  ): Promise<CreateTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Key: params["Key"],
      Value: params["Value"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetail": toTagOptionDetail,
      },
    }, await resp.json());
  }

  async deleteConstraint(
    {abortSignal, ...params}: RequestConfig & DeleteConstraintInput,
  ): Promise<DeleteConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePortfolio(
    {abortSignal, ...params}: RequestConfig & DeletePortfolioInput,
  ): Promise<DeletePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePortfolioShare(
    {abortSignal, ...params}: RequestConfig & DeletePortfolioShareInput,
  ): Promise<DeletePortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      AccountId: params["AccountId"],
      OrganizationNode: fromOrganizationNode(params["OrganizationNode"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioShareToken": "s",
      },
    }, await resp.json());
  }

  async deleteProduct(
    {abortSignal, ...params}: RequestConfig & DeleteProductInput,
  ): Promise<DeleteProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & DeleteProvisionedProductPlanInput,
  ): Promise<DeleteProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanId: params["PlanId"],
      IgnoreErrors: params["IgnoreErrors"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & DeleteProvisioningArtifactInput,
  ): Promise<DeleteProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteServiceAction(
    {abortSignal, ...params}: RequestConfig & DeleteServiceActionInput,
  ): Promise<DeleteServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTagOption(
    {abortSignal, ...params}: RequestConfig & DeleteTagOptionInput,
  ): Promise<DeleteTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeConstraint(
    {abortSignal, ...params}: RequestConfig & DescribeConstraintInput,
  ): Promise<DescribeConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetail": toConstraintDetail,
        "ConstraintParameters": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      },
    }, await resp.json());
  }

  async describeCopyProductStatus(
    {abortSignal, ...params}: RequestConfig & DescribeCopyProductStatusInput,
  ): Promise<DescribeCopyProductStatusOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      CopyProductToken: params["CopyProductToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCopyProductStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CopyProductStatus": (x: jsonP.JSONValue) => cmnP.readEnum<CopyProductStatus>(x),
        "TargetProductId": "s",
        "StatusDetail": "s",
      },
    }, await resp.json());
  }

  async describePortfolio(
    {abortSignal, ...params}: RequestConfig & DescribePortfolioInput,
  ): Promise<DescribePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetail": toPortfolioDetail,
        "Tags": [toTag],
        "TagOptions": [toTagOptionDetail],
        "Budgets": [toBudgetDetail],
      },
    }, await resp.json());
  }

  async describePortfolioShareStatus(
    {abortSignal, ...params}: RequestConfig & DescribePortfolioShareStatusInput,
  ): Promise<DescribePortfolioShareStatusOutput> {
    const body: jsonP.JSONObject = {
      PortfolioShareToken: params["PortfolioShareToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePortfolioShareStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioShareToken": "s",
        "PortfolioId": "s",
        "OrganizationNodeValue": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ShareStatus>(x),
        "ShareDetails": toShareDetails,
      },
    }, await resp.json());
  }

  async describeProduct(
    {abortSignal, ...params}: RequestConfig & DescribeProductInput = {},
  ): Promise<DescribeProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewSummary": toProductViewSummary,
        "ProvisioningArtifacts": [toProvisioningArtifact],
        "Budgets": [toBudgetDetail],
        "LaunchPaths": [toLaunchPath],
      },
    }, await resp.json());
  }

  async describeProductAsAdmin(
    {abortSignal, ...params}: RequestConfig & DescribeProductAsAdminInput = {},
  ): Promise<DescribeProductAsAdminOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProductAsAdmin",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetail": toProductViewDetail,
        "ProvisioningArtifactSummaries": [toProvisioningArtifactSummary],
        "Tags": [toTag],
        "TagOptions": [toTagOptionDetail],
        "Budgets": [toBudgetDetail],
      },
    }, await resp.json());
  }

  async describeProductView(
    {abortSignal, ...params}: RequestConfig & DescribeProductViewInput,
  ): Promise<DescribeProductViewOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProductView",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewSummary": toProductViewSummary,
        "ProvisioningArtifacts": [toProvisioningArtifact],
      },
    }, await resp.json());
  }

  async describeProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & DescribeProvisionedProductInput = {},
  ): Promise<DescribeProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductDetail": toProvisionedProductDetail,
        "CloudWatchDashboards": [toCloudWatchDashboard],
      },
    }, await resp.json());
  }

  async describeProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & DescribeProvisionedProductPlanInput,
  ): Promise<DescribeProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanId: params["PlanId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductPlanDetails": toProvisionedProductPlanDetails,
        "ResourceChanges": [toResourceChange],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async describeProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & DescribeProvisioningArtifactInput = {},
  ): Promise<DescribeProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProductId: params["ProductId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      ProductName: params["ProductName"],
      Verbose: params["Verbose"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Info": x => jsonP.readMap(String, String, x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      },
    }, await resp.json());
  }

  async describeProvisioningParameters(
    {abortSignal, ...params}: RequestConfig & DescribeProvisioningParametersInput = {},
  ): Promise<DescribeProvisioningParametersOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProductName: params["ProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      PathId: params["PathId"],
      PathName: params["PathName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisioningParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactParameters": [toProvisioningArtifactParameter],
        "ConstraintSummaries": [toConstraintSummary],
        "UsageInstructions": [toUsageInstruction],
        "TagOptions": [toTagOptionSummary],
        "ProvisioningArtifactPreferences": toProvisioningArtifactPreferences,
        "ProvisioningArtifactOutputs": [toProvisioningArtifactOutput],
      },
    }, await resp.json());
  }

  async describeRecord(
    {abortSignal, ...params}: RequestConfig & DescribeRecordInput,
  ): Promise<DescribeRecordOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRecord",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
        "RecordOutputs": [toRecordOutput],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async describeServiceAction(
    {abortSignal, ...params}: RequestConfig & DescribeServiceActionInput,
  ): Promise<DescribeServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionDetail": toServiceActionDetail,
      },
    }, await resp.json());
  }

  async describeServiceActionExecutionParameters(
    {abortSignal, ...params}: RequestConfig & DescribeServiceActionExecutionParametersInput,
  ): Promise<DescribeServiceActionExecutionParametersOutput> {
    const body: jsonP.JSONObject = {
      ProvisionedProductId: params["ProvisionedProductId"],
      ServiceActionId: params["ServiceActionId"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeServiceActionExecutionParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionParameters": [toExecutionParameter],
      },
    }, await resp.json());
  }

  async describeTagOption(
    {abortSignal, ...params}: RequestConfig & DescribeTagOptionInput,
  ): Promise<DescribeTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetail": toTagOptionDetail,
      },
    }, await resp.json());
  }

  async disableAWSOrganizationsAccess(
    {abortSignal, ...params}: RequestConfig & DisableAWSOrganizationsAccessInput = {},
  ): Promise<DisableAWSOrganizationsAccessOutput> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableAWSOrganizationsAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateBudgetFromResource(
    {abortSignal, ...params}: RequestConfig & DisassociateBudgetFromResourceInput,
  ): Promise<DisassociateBudgetFromResourceOutput> {
    const body: jsonP.JSONObject = {
      BudgetName: params["BudgetName"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateBudgetFromResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociatePrincipalFromPortfolio(
    {abortSignal, ...params}: RequestConfig & DisassociatePrincipalFromPortfolioInput,
  ): Promise<DisassociatePrincipalFromPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PrincipalARN: params["PrincipalARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociatePrincipalFromPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateProductFromPortfolio(
    {abortSignal, ...params}: RequestConfig & DisassociateProductFromPortfolioInput,
  ): Promise<DisassociateProductFromPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PortfolioId: params["PortfolioId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateProductFromPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateServiceActionFromProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & DisassociateServiceActionFromProvisioningArtifactInput,
  ): Promise<DisassociateServiceActionFromProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ServiceActionId: params["ServiceActionId"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateServiceActionFromProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateTagOptionFromResource(
    {abortSignal, ...params}: RequestConfig & DisassociateTagOptionFromResourceInput,
  ): Promise<DisassociateTagOptionFromResourceOutput> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagOptionId: params["TagOptionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateTagOptionFromResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableAWSOrganizationsAccess(
    {abortSignal, ...params}: RequestConfig & EnableAWSOrganizationsAccessInput = {},
  ): Promise<EnableAWSOrganizationsAccessOutput> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableAWSOrganizationsAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async executeProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & ExecuteProvisionedProductPlanInput,
  ): Promise<ExecuteProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanId: params["PlanId"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExecuteProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async executeProvisionedProductServiceAction(
    {abortSignal, ...params}: RequestConfig & ExecuteProvisionedProductServiceActionInput,
  ): Promise<ExecuteProvisionedProductServiceActionOutput> {
    const body: jsonP.JSONObject = {
      ProvisionedProductId: params["ProvisionedProductId"],
      ServiceActionId: params["ServiceActionId"],
      ExecuteToken: params["ExecuteToken"] ?? generateIdemptToken(),
      AcceptLanguage: params["AcceptLanguage"],
      Parameters: params["Parameters"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExecuteProvisionedProductServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async getAWSOrganizationsAccessStatus(
    {abortSignal, ...params}: RequestConfig & GetAWSOrganizationsAccessStatusInput = {},
  ): Promise<GetAWSOrganizationsAccessStatusOutput> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAWSOrganizationsAccessStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccessStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AccessStatus>(x),
      },
    }, await resp.json());
  }

  async getProvisionedProductOutputs(
    {abortSignal, ...params}: RequestConfig & GetProvisionedProductOutputsInput = {},
  ): Promise<GetProvisionedProductOutputsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductId: params["ProvisionedProductId"],
      ProvisionedProductName: params["ProvisionedProductName"],
      OutputKeys: params["OutputKeys"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProvisionedProductOutputs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Outputs": [toRecordOutput],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listAcceptedPortfolioShares(
    {abortSignal, ...params}: RequestConfig & ListAcceptedPortfolioSharesInput = {},
  ): Promise<ListAcceptedPortfolioSharesOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
      PortfolioShareType: params["PortfolioShareType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAcceptedPortfolioShares",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetails": [toPortfolioDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listBudgetsForResource(
    {abortSignal, ...params}: RequestConfig & ListBudgetsForResourceInput,
  ): Promise<ListBudgetsForResourceOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ResourceId: params["ResourceId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBudgetsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Budgets": [toBudgetDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listConstraintsForPortfolio(
    {abortSignal, ...params}: RequestConfig & ListConstraintsForPortfolioInput,
  ): Promise<ListConstraintsForPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      ProductId: params["ProductId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConstraintsForPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetails": [toConstraintDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listLaunchPaths(
    {abortSignal, ...params}: RequestConfig & ListLaunchPathsInput,
  ): Promise<ListLaunchPathsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLaunchPaths",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LaunchPathSummaries": [toLaunchPathSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizationPortfolioAccess(
    {abortSignal, ...params}: RequestConfig & ListOrganizationPortfolioAccessInput,
  ): Promise<ListOrganizationPortfolioAccessOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      OrganizationNodeType: params["OrganizationNodeType"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOrganizationPortfolioAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationNodes": [toOrganizationNode],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPortfolioAccess(
    {abortSignal, ...params}: RequestConfig & ListPortfolioAccessInput,
  ): Promise<ListPortfolioAccessOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      OrganizationParentId: params["OrganizationParentId"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPortfolioAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountIds": ["s"],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPortfolios(
    {abortSignal, ...params}: RequestConfig & ListPortfoliosInput = {},
  ): Promise<ListPortfoliosOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPortfolios",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetails": [toPortfolioDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPortfoliosForProduct(
    {abortSignal, ...params}: RequestConfig & ListPortfoliosForProductInput,
  ): Promise<ListPortfoliosForProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPortfoliosForProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetails": [toPortfolioDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPrincipalsForPortfolio(
    {abortSignal, ...params}: RequestConfig & ListPrincipalsForPortfolioInput,
  ): Promise<ListPrincipalsForPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPrincipalsForPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Principals": [toPrincipal],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listProvisionedProductPlans(
    {abortSignal, ...params}: RequestConfig & ListProvisionedProductPlansInput = {},
  ): Promise<ListProvisionedProductPlansOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionProductId: params["ProvisionProductId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProvisionedProductPlans",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductPlans": [toProvisionedProductPlanSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listProvisioningArtifacts(
    {abortSignal, ...params}: RequestConfig & ListProvisioningArtifactsInput,
  ): Promise<ListProvisioningArtifactsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProvisioningArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetails": [toProvisioningArtifactDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listProvisioningArtifactsForServiceAction(
    {abortSignal, ...params}: RequestConfig & ListProvisioningArtifactsForServiceActionInput,
  ): Promise<ListProvisioningArtifactsForServiceActionOutput> {
    const body: jsonP.JSONObject = {
      ServiceActionId: params["ServiceActionId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProvisioningArtifactsForServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactViews": [toProvisioningArtifactView],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listRecordHistory(
    {abortSignal, ...params}: RequestConfig & ListRecordHistoryInput = {},
  ): Promise<ListRecordHistoryOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
      SearchFilter: fromListRecordHistorySearchFilter(params["SearchFilter"]),
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRecordHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetails": [toRecordDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listResourcesForTagOption(
    {abortSignal, ...params}: RequestConfig & ListResourcesForTagOptionInput,
  ): Promise<ListResourcesForTagOptionOutput> {
    const body: jsonP.JSONObject = {
      TagOptionId: params["TagOptionId"],
      ResourceType: params["ResourceType"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourcesForTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceDetails": [toResourceDetail],
        "PageToken": "s",
      },
    }, await resp.json());
  }

  async listServiceActions(
    {abortSignal, ...params}: RequestConfig & ListServiceActionsInput = {},
  ): Promise<ListServiceActionsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListServiceActions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionSummaries": [toServiceActionSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listServiceActionsForProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & ListServiceActionsForProvisioningArtifactInput,
  ): Promise<ListServiceActionsForProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListServiceActionsForProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionSummaries": [toServiceActionSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listStackInstancesForProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & ListStackInstancesForProvisionedProductInput,
  ): Promise<ListStackInstancesForProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductId: params["ProvisionedProductId"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListStackInstancesForProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StackInstances": [toStackInstance],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listTagOptions(
    {abortSignal, ...params}: RequestConfig & ListTagOptionsInput = {},
  ): Promise<ListTagOptionsOutput> {
    const body: jsonP.JSONObject = {
      Filters: fromListTagOptionsFilters(params["Filters"]),
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagOptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetails": [toTagOptionDetail],
        "PageToken": "s",
      },
    }, await resp.json());
  }

  async provisionProduct(
    {abortSignal, ...params}: RequestConfig & ProvisionProductInput,
  ): Promise<ProvisionProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProductName: params["ProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      PathId: params["PathId"],
      PathName: params["PathName"],
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisioningParameters: params["ProvisioningParameters"]?.map(x => fromProvisioningParameter(x)),
      ProvisioningPreferences: fromProvisioningPreferences(params["ProvisioningPreferences"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      NotificationArns: params["NotificationArns"],
      ProvisionToken: params["ProvisionToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ProvisionProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async rejectPortfolioShare(
    {abortSignal, ...params}: RequestConfig & RejectPortfolioShareInput,
  ): Promise<RejectPortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PortfolioShareType: params["PortfolioShareType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectPortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async scanProvisionedProducts(
    {abortSignal, ...params}: RequestConfig & ScanProvisionedProductsInput = {},
  ): Promise<ScanProvisionedProductsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ScanProvisionedProducts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProducts": [toProvisionedProductDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async searchProducts(
    {abortSignal, ...params}: RequestConfig & SearchProductsInput = {},
  ): Promise<SearchProductsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Filters: params["Filters"],
      PageSize: params["PageSize"],
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProducts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewSummaries": [toProductViewSummary],
        "ProductViewAggregations": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toProductViewAggregationValue) : [], x),
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async searchProductsAsAdmin(
    {abortSignal, ...params}: RequestConfig & SearchProductsAsAdminInput = {},
  ): Promise<SearchProductsAsAdminOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      Filters: params["Filters"],
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
      ProductSource: params["ProductSource"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProductsAsAdmin",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetails": [toProductViewDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async searchProvisionedProducts(
    {abortSignal, ...params}: RequestConfig & SearchProvisionedProductsInput = {},
  ): Promise<SearchProvisionedProductsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
      Filters: params["Filters"],
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProvisionedProducts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProducts": [toProvisionedProductAttribute],
        "TotalResultsCount": "n",
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async terminateProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & TerminateProvisionedProductInput,
  ): Promise<TerminateProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisionedProductId: params["ProvisionedProductId"],
      TerminateToken: params["TerminateToken"] ?? generateIdemptToken(),
      IgnoreErrors: params["IgnoreErrors"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async updateConstraint(
    {abortSignal, ...params}: RequestConfig & UpdateConstraintInput,
  ): Promise<UpdateConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Description: params["Description"],
      Parameters: params["Parameters"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetail": toConstraintDetail,
        "ConstraintParameters": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      },
    }, await resp.json());
  }

  async updatePortfolio(
    {abortSignal, ...params}: RequestConfig & UpdatePortfolioInput,
  ): Promise<UpdatePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      DisplayName: params["DisplayName"],
      Description: params["Description"],
      ProviderName: params["ProviderName"],
      AddTags: params["AddTags"]?.map(x => fromTag(x)),
      RemoveTags: params["RemoveTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetail": toPortfolioDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async updateProduct(
    {abortSignal, ...params}: RequestConfig & UpdateProductInput,
  ): Promise<UpdateProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
      Owner: params["Owner"],
      Description: params["Description"],
      Distributor: params["Distributor"],
      SupportDescription: params["SupportDescription"],
      SupportEmail: params["SupportEmail"],
      SupportUrl: params["SupportUrl"],
      AddTags: params["AddTags"]?.map(x => fromTag(x)),
      RemoveTags: params["RemoveTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetail": toProductViewDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async updateProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & UpdateProvisionedProductInput,
  ): Promise<UpdateProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisionedProductId: params["ProvisionedProductId"],
      ProductId: params["ProductId"],
      ProductName: params["ProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      PathId: params["PathId"],
      PathName: params["PathName"],
      ProvisioningParameters: params["ProvisioningParameters"]?.map(x => fromUpdateProvisioningParameter(x)),
      ProvisioningPreferences: fromUpdateProvisioningPreferences(params["ProvisioningPreferences"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      UpdateToken: params["UpdateToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async updateProvisionedProductProperties(
    {abortSignal, ...params}: RequestConfig & UpdateProvisionedProductPropertiesInput,
  ): Promise<UpdateProvisionedProductPropertiesOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductId: params["ProvisionedProductId"],
      ProvisionedProductProperties: params["ProvisionedProductProperties"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProvisionedProductProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductId": "s",
        "ProvisionedProductProperties": x => jsonP.readMap(x => cmnP.readEnumReq<PropertyKey>(x), String, x),
        "RecordId": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<RecordStatus>(x),
      },
    }, await resp.json());
  }

  async updateProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & UpdateProvisioningArtifactInput,
  ): Promise<UpdateProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      Name: params["Name"],
      Description: params["Description"],
      Active: params["Active"],
      Guidance: params["Guidance"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Info": x => jsonP.readMap(String, String, x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      },
    }, await resp.json());
  }

  async updateServiceAction(
    {abortSignal, ...params}: RequestConfig & UpdateServiceActionInput,
  ): Promise<UpdateServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      Definition: params["Definition"],
      Description: params["Description"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionDetail": toServiceActionDetail,
      },
    }, await resp.json());
  }

  async updateTagOption(
    {abortSignal, ...params}: RequestConfig & UpdateTagOptionInput,
  ): Promise<UpdateTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Value: params["Value"],
      Active: params["Active"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetail": toTagOptionDetail,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcceptPortfolioShareInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  PortfolioShareType?: PortfolioShareType | null;
}

// refs: 1 - tags: named, input
export interface AssociateBudgetWithResourceInput {
  BudgetName: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface AssociatePrincipalWithPortfolioInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  PrincipalARN: string;
  PrincipalType: PrincipalType;
}

// refs: 1 - tags: named, input
export interface AssociateProductWithPortfolioInput {
  AcceptLanguage?: string | null;
  ProductId: string;
  PortfolioId: string;
  SourcePortfolioId?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateServiceActionWithProvisioningArtifactInput {
  ProductId: string;
  ProvisioningArtifactId: string;
  ServiceActionId: string;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateTagOptionWithResourceInput {
  ResourceId: string;
  TagOptionId: string;
}

// refs: 1 - tags: named, input
export interface BatchAssociateServiceActionWithProvisioningArtifactInput {
  ServiceActionAssociations: ServiceActionAssociation[];
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface BatchDisassociateServiceActionFromProvisioningArtifactInput {
  ServiceActionAssociations: ServiceActionAssociation[];
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface CopyProductInput {
  AcceptLanguage?: string | null;
  SourceProductArn: string;
  TargetProductId?: string | null;
  TargetProductName?: string | null;
  SourceProvisioningArtifactIdentifiers?: ({ [key in ProvisioningArtifactPropertyName]: string | null | undefined })[] | null;
  CopyOptions?: CopyOption[] | null;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface CreateConstraintInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  ProductId: string;
  Parameters: string;
  Type: string;
  Description?: string | null;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface CreatePortfolioInput {
  AcceptLanguage?: string | null;
  DisplayName: string;
  Description?: string | null;
  ProviderName: string;
  Tags?: Tag[] | null;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface CreatePortfolioShareInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  AccountId?: string | null;
  OrganizationNode?: OrganizationNode | null;
}

// refs: 1 - tags: named, input
export interface CreateProductInput {
  AcceptLanguage?: string | null;
  Name: string;
  Owner: string;
  Description?: string | null;
  Distributor?: string | null;
  SupportDescription?: string | null;
  SupportEmail?: string | null;
  SupportUrl?: string | null;
  ProductType: ProductType;
  Tags?: Tag[] | null;
  ProvisioningArtifactParameters: ProvisioningArtifactProperties;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface CreateProvisionedProductPlanInput {
  AcceptLanguage?: string | null;
  PlanName: string;
  PlanType: ProvisionedProductPlanType;
  NotificationArns?: string[] | null;
  PathId?: string | null;
  ProductId: string;
  ProvisionedProductName: string;
  ProvisioningArtifactId: string;
  ProvisioningParameters?: UpdateProvisioningParameter[] | null;
  IdempotencyToken: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateProvisioningArtifactInput {
  AcceptLanguage?: string | null;
  ProductId: string;
  Parameters: ProvisioningArtifactProperties;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface CreateServiceActionInput {
  Name: string;
  DefinitionType: ServiceActionDefinitionType;
  Definition: { [key in ServiceActionDefinitionKey]: string | null | undefined };
  Description?: string | null;
  AcceptLanguage?: string | null;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface CreateTagOptionInput {
  Key: string;
  Value: string;
}

// refs: 1 - tags: named, input
export interface DeleteConstraintInput {
  AcceptLanguage?: string | null;
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeletePortfolioInput {
  AcceptLanguage?: string | null;
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeletePortfolioShareInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  AccountId?: string | null;
  OrganizationNode?: OrganizationNode | null;
}

// refs: 1 - tags: named, input
export interface DeleteProductInput {
  AcceptLanguage?: string | null;
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteProvisionedProductPlanInput {
  AcceptLanguage?: string | null;
  PlanId: string;
  IgnoreErrors?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteProvisioningArtifactInput {
  AcceptLanguage?: string | null;
  ProductId: string;
  ProvisioningArtifactId: string;
}

// refs: 1 - tags: named, input
export interface DeleteServiceActionInput {
  Id: string;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteTagOptionInput {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribeConstraintInput {
  AcceptLanguage?: string | null;
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribeCopyProductStatusInput {
  AcceptLanguage?: string | null;
  CopyProductToken: string;
}

// refs: 1 - tags: named, input
export interface DescribePortfolioInput {
  AcceptLanguage?: string | null;
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribePortfolioShareStatusInput {
  PortfolioShareToken: string;
}

// refs: 1 - tags: named, input
export interface DescribeProductInput {
  AcceptLanguage?: string | null;
  Id?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeProductAsAdminInput {
  AcceptLanguage?: string | null;
  Id?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeProductViewInput {
  AcceptLanguage?: string | null;
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribeProvisionedProductInput {
  AcceptLanguage?: string | null;
  Id?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeProvisionedProductPlanInput {
  AcceptLanguage?: string | null;
  PlanId: string;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeProvisioningArtifactInput {
  AcceptLanguage?: string | null;
  ProvisioningArtifactId?: string | null;
  ProductId?: string | null;
  ProvisioningArtifactName?: string | null;
  ProductName?: string | null;
  Verbose?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeProvisioningParametersInput {
  AcceptLanguage?: string | null;
  ProductId?: string | null;
  ProductName?: string | null;
  ProvisioningArtifactId?: string | null;
  ProvisioningArtifactName?: string | null;
  PathId?: string | null;
  PathName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeRecordInput {
  AcceptLanguage?: string | null;
  Id: string;
  PageToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeServiceActionInput {
  Id: string;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeServiceActionExecutionParametersInput {
  ProvisionedProductId: string;
  ServiceActionId: string;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeTagOptionInput {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DisableAWSOrganizationsAccessInput {
}

// refs: 1 - tags: named, input
export interface DisassociateBudgetFromResourceInput {
  BudgetName: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface DisassociatePrincipalFromPortfolioInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  PrincipalARN: string;
}

// refs: 1 - tags: named, input
export interface DisassociateProductFromPortfolioInput {
  AcceptLanguage?: string | null;
  ProductId: string;
  PortfolioId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateServiceActionFromProvisioningArtifactInput {
  ProductId: string;
  ProvisioningArtifactId: string;
  ServiceActionId: string;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateTagOptionFromResourceInput {
  ResourceId: string;
  TagOptionId: string;
}

// refs: 1 - tags: named, input
export interface EnableAWSOrganizationsAccessInput {
}

// refs: 1 - tags: named, input
export interface ExecuteProvisionedProductPlanInput {
  AcceptLanguage?: string | null;
  PlanId: string;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface ExecuteProvisionedProductServiceActionInput {
  ProvisionedProductId: string;
  ServiceActionId: string;
  ExecuteToken: string;
  AcceptLanguage?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface GetAWSOrganizationsAccessStatusInput {
}

// refs: 1 - tags: named, input
export interface GetProvisionedProductOutputsInput {
  AcceptLanguage?: string | null;
  ProvisionedProductId?: string | null;
  ProvisionedProductName?: string | null;
  OutputKeys?: string[] | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAcceptedPortfolioSharesInput {
  AcceptLanguage?: string | null;
  PageToken?: string | null;
  PageSize?: number | null;
  PortfolioShareType?: PortfolioShareType | null;
}

// refs: 1 - tags: named, input
export interface ListBudgetsForResourceInput {
  AcceptLanguage?: string | null;
  ResourceId: string;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConstraintsForPortfolioInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  ProductId?: string | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListLaunchPathsInput {
  AcceptLanguage?: string | null;
  ProductId: string;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOrganizationPortfolioAccessInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  OrganizationNodeType: OrganizationNodeType;
  PageToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPortfolioAccessInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  OrganizationParentId?: string | null;
  PageToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPortfoliosInput {
  AcceptLanguage?: string | null;
  PageToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPortfoliosForProductInput {
  AcceptLanguage?: string | null;
  ProductId: string;
  PageToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPrincipalsForPortfolioInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProvisionedProductPlansInput {
  AcceptLanguage?: string | null;
  ProvisionProductId?: string | null;
  PageSize?: number | null;
  PageToken?: string | null;
  AccessLevelFilter?: AccessLevelFilter | null;
}

// refs: 1 - tags: named, input
export interface ListProvisioningArtifactsInput {
  AcceptLanguage?: string | null;
  ProductId: string;
}

// refs: 1 - tags: named, input
export interface ListProvisioningArtifactsForServiceActionInput {
  ServiceActionId: string;
  PageSize?: number | null;
  PageToken?: string | null;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRecordHistoryInput {
  AcceptLanguage?: string | null;
  AccessLevelFilter?: AccessLevelFilter | null;
  SearchFilter?: ListRecordHistorySearchFilter | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListResourcesForTagOptionInput {
  TagOptionId: string;
  ResourceType?: string | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListServiceActionsInput {
  AcceptLanguage?: string | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListServiceActionsForProvisioningArtifactInput {
  ProductId: string;
  ProvisioningArtifactId: string;
  PageSize?: number | null;
  PageToken?: string | null;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface ListStackInstancesForProvisionedProductInput {
  AcceptLanguage?: string | null;
  ProvisionedProductId: string;
  PageToken?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagOptionsInput {
  Filters?: ListTagOptionsFilters | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ProvisionProductInput {
  AcceptLanguage?: string | null;
  ProductId?: string | null;
  ProductName?: string | null;
  ProvisioningArtifactId?: string | null;
  ProvisioningArtifactName?: string | null;
  PathId?: string | null;
  PathName?: string | null;
  ProvisionedProductName: string;
  ProvisioningParameters?: ProvisioningParameter[] | null;
  ProvisioningPreferences?: ProvisioningPreferences | null;
  Tags?: Tag[] | null;
  NotificationArns?: string[] | null;
  ProvisionToken: string;
}

// refs: 1 - tags: named, input
export interface RejectPortfolioShareInput {
  AcceptLanguage?: string | null;
  PortfolioId: string;
  PortfolioShareType?: PortfolioShareType | null;
}

// refs: 1 - tags: named, input
export interface ScanProvisionedProductsInput {
  AcceptLanguage?: string | null;
  AccessLevelFilter?: AccessLevelFilter | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface SearchProductsInput {
  AcceptLanguage?: string | null;
  Filters?: { [key in ProductViewFilterBy]: string[] | null | undefined } | null;
  PageSize?: number | null;
  SortBy?: ProductViewSortBy | null;
  SortOrder?: SortOrder | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface SearchProductsAsAdminInput {
  AcceptLanguage?: string | null;
  PortfolioId?: string | null;
  Filters?: { [key in ProductViewFilterBy]: string[] | null | undefined } | null;
  SortBy?: ProductViewSortBy | null;
  SortOrder?: SortOrder | null;
  PageToken?: string | null;
  PageSize?: number | null;
  ProductSource?: ProductSource | null;
}

// refs: 1 - tags: named, input
export interface SearchProvisionedProductsInput {
  AcceptLanguage?: string | null;
  AccessLevelFilter?: AccessLevelFilter | null;
  Filters?: { [key in ProvisionedProductViewFilterBy]: string[] | null | undefined } | null;
  SortBy?: string | null;
  SortOrder?: SortOrder | null;
  PageSize?: number | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface TerminateProvisionedProductInput {
  ProvisionedProductName?: string | null;
  ProvisionedProductId?: string | null;
  TerminateToken: string;
  IgnoreErrors?: boolean | null;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateConstraintInput {
  AcceptLanguage?: string | null;
  Id: string;
  Description?: string | null;
  Parameters?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdatePortfolioInput {
  AcceptLanguage?: string | null;
  Id: string;
  DisplayName?: string | null;
  Description?: string | null;
  ProviderName?: string | null;
  AddTags?: Tag[] | null;
  RemoveTags?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateProductInput {
  AcceptLanguage?: string | null;
  Id: string;
  Name?: string | null;
  Owner?: string | null;
  Description?: string | null;
  Distributor?: string | null;
  SupportDescription?: string | null;
  SupportEmail?: string | null;
  SupportUrl?: string | null;
  AddTags?: Tag[] | null;
  RemoveTags?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateProvisionedProductInput {
  AcceptLanguage?: string | null;
  ProvisionedProductName?: string | null;
  ProvisionedProductId?: string | null;
  ProductId?: string | null;
  ProductName?: string | null;
  ProvisioningArtifactId?: string | null;
  ProvisioningArtifactName?: string | null;
  PathId?: string | null;
  PathName?: string | null;
  ProvisioningParameters?: UpdateProvisioningParameter[] | null;
  ProvisioningPreferences?: UpdateProvisioningPreferences | null;
  Tags?: Tag[] | null;
  UpdateToken: string;
}

// refs: 1 - tags: named, input
export interface UpdateProvisionedProductPropertiesInput {
  AcceptLanguage?: string | null;
  ProvisionedProductId: string;
  ProvisionedProductProperties: { [key in PropertyKey]: string | null | undefined };
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface UpdateProvisioningArtifactInput {
  AcceptLanguage?: string | null;
  ProductId: string;
  ProvisioningArtifactId: string;
  Name?: string | null;
  Description?: string | null;
  Active?: boolean | null;
  Guidance?: ProvisioningArtifactGuidance | null;
}

// refs: 1 - tags: named, input
export interface UpdateServiceActionInput {
  Id: string;
  Name?: string | null;
  Definition?: { [key in ServiceActionDefinitionKey]: string | null | undefined } | null;
  Description?: string | null;
  AcceptLanguage?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateTagOptionInput {
  Id: string;
  Value?: string | null;
  Active?: boolean | null;
}

// refs: 1 - tags: named, output
export interface AcceptPortfolioShareOutput {
}

// refs: 1 - tags: named, output
export interface AssociateBudgetWithResourceOutput {
}

// refs: 1 - tags: named, output
export interface AssociatePrincipalWithPortfolioOutput {
}

// refs: 1 - tags: named, output
export interface AssociateProductWithPortfolioOutput {
}

// refs: 1 - tags: named, output
export interface AssociateServiceActionWithProvisioningArtifactOutput {
}

// refs: 1 - tags: named, output
export interface AssociateTagOptionWithResourceOutput {
}

// refs: 1 - tags: named, output
export interface BatchAssociateServiceActionWithProvisioningArtifactOutput {
  FailedServiceActionAssociations?: FailedServiceActionAssociation[] | null;
}

// refs: 1 - tags: named, output
export interface BatchDisassociateServiceActionFromProvisioningArtifactOutput {
  FailedServiceActionAssociations?: FailedServiceActionAssociation[] | null;
}

// refs: 1 - tags: named, output
export interface CopyProductOutput {
  CopyProductToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateConstraintOutput {
  ConstraintDetail?: ConstraintDetail | null;
  ConstraintParameters?: string | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface CreatePortfolioOutput {
  PortfolioDetail?: PortfolioDetail | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface CreatePortfolioShareOutput {
  PortfolioShareToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateProductOutput {
  ProductViewDetail?: ProductViewDetail | null;
  ProvisioningArtifactDetail?: ProvisioningArtifactDetail | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface CreateProvisionedProductPlanOutput {
  PlanName?: string | null;
  PlanId?: string | null;
  ProvisionProductId?: string | null;
  ProvisionedProductName?: string | null;
  ProvisioningArtifactId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateProvisioningArtifactOutput {
  ProvisioningArtifactDetail?: ProvisioningArtifactDetail | null;
  Info?: { [key: string]: string | null | undefined } | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface CreateServiceActionOutput {
  ServiceActionDetail?: ServiceActionDetail | null;
}

// refs: 1 - tags: named, output
export interface CreateTagOptionOutput {
  TagOptionDetail?: TagOptionDetail | null;
}

// refs: 1 - tags: named, output
export interface DeleteConstraintOutput {
}

// refs: 1 - tags: named, output
export interface DeletePortfolioOutput {
}

// refs: 1 - tags: named, output
export interface DeletePortfolioShareOutput {
  PortfolioShareToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteProductOutput {
}

// refs: 1 - tags: named, output
export interface DeleteProvisionedProductPlanOutput {
}

// refs: 1 - tags: named, output
export interface DeleteProvisioningArtifactOutput {
}

// refs: 1 - tags: named, output
export interface DeleteServiceActionOutput {
}

// refs: 1 - tags: named, output
export interface DeleteTagOptionOutput {
}

// refs: 1 - tags: named, output
export interface DescribeConstraintOutput {
  ConstraintDetail?: ConstraintDetail | null;
  ConstraintParameters?: string | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface DescribeCopyProductStatusOutput {
  CopyProductStatus?: CopyProductStatus | null;
  TargetProductId?: string | null;
  StatusDetail?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribePortfolioOutput {
  PortfolioDetail?: PortfolioDetail | null;
  Tags?: Tag[] | null;
  TagOptions?: TagOptionDetail[] | null;
  Budgets?: BudgetDetail[] | null;
}

// refs: 1 - tags: named, output
export interface DescribePortfolioShareStatusOutput {
  PortfolioShareToken?: string | null;
  PortfolioId?: string | null;
  OrganizationNodeValue?: string | null;
  Status?: ShareStatus | null;
  ShareDetails?: ShareDetails | null;
}

// refs: 1 - tags: named, output
export interface DescribeProductOutput {
  ProductViewSummary?: ProductViewSummary | null;
  ProvisioningArtifacts?: ProvisioningArtifact[] | null;
  Budgets?: BudgetDetail[] | null;
  LaunchPaths?: LaunchPath[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeProductAsAdminOutput {
  ProductViewDetail?: ProductViewDetail | null;
  ProvisioningArtifactSummaries?: ProvisioningArtifactSummary[] | null;
  Tags?: Tag[] | null;
  TagOptions?: TagOptionDetail[] | null;
  Budgets?: BudgetDetail[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeProductViewOutput {
  ProductViewSummary?: ProductViewSummary | null;
  ProvisioningArtifacts?: ProvisioningArtifact[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeProvisionedProductOutput {
  ProvisionedProductDetail?: ProvisionedProductDetail | null;
  CloudWatchDashboards?: CloudWatchDashboard[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeProvisionedProductPlanOutput {
  ProvisionedProductPlanDetails?: ProvisionedProductPlanDetails | null;
  ResourceChanges?: ResourceChange[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeProvisioningArtifactOutput {
  ProvisioningArtifactDetail?: ProvisioningArtifactDetail | null;
  Info?: { [key: string]: string | null | undefined } | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface DescribeProvisioningParametersOutput {
  ProvisioningArtifactParameters?: ProvisioningArtifactParameter[] | null;
  ConstraintSummaries?: ConstraintSummary[] | null;
  UsageInstructions?: UsageInstruction[] | null;
  TagOptions?: TagOptionSummary[] | null;
  ProvisioningArtifactPreferences?: ProvisioningArtifactPreferences | null;
  ProvisioningArtifactOutputs?: ProvisioningArtifactOutput[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeRecordOutput {
  RecordDetail?: RecordDetail | null;
  RecordOutputs?: RecordOutput[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeServiceActionOutput {
  ServiceActionDetail?: ServiceActionDetail | null;
}

// refs: 1 - tags: named, output
export interface DescribeServiceActionExecutionParametersOutput {
  ServiceActionParameters?: ExecutionParameter[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeTagOptionOutput {
  TagOptionDetail?: TagOptionDetail | null;
}

// refs: 1 - tags: named, output
export interface DisableAWSOrganizationsAccessOutput {
}

// refs: 1 - tags: named, output
export interface DisassociateBudgetFromResourceOutput {
}

// refs: 1 - tags: named, output
export interface DisassociatePrincipalFromPortfolioOutput {
}

// refs: 1 - tags: named, output
export interface DisassociateProductFromPortfolioOutput {
}

// refs: 1 - tags: named, output
export interface DisassociateServiceActionFromProvisioningArtifactOutput {
}

// refs: 1 - tags: named, output
export interface DisassociateTagOptionFromResourceOutput {
}

// refs: 1 - tags: named, output
export interface EnableAWSOrganizationsAccessOutput {
}

// refs: 1 - tags: named, output
export interface ExecuteProvisionedProductPlanOutput {
  RecordDetail?: RecordDetail | null;
}

// refs: 1 - tags: named, output
export interface ExecuteProvisionedProductServiceActionOutput {
  RecordDetail?: RecordDetail | null;
}

// refs: 1 - tags: named, output
export interface GetAWSOrganizationsAccessStatusOutput {
  AccessStatus?: AccessStatus | null;
}

// refs: 1 - tags: named, output
export interface GetProvisionedProductOutputsOutput {
  Outputs?: RecordOutput[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAcceptedPortfolioSharesOutput {
  PortfolioDetails?: PortfolioDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBudgetsForResourceOutput {
  Budgets?: BudgetDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListConstraintsForPortfolioOutput {
  ConstraintDetails?: ConstraintDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLaunchPathsOutput {
  LaunchPathSummaries?: LaunchPathSummary[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOrganizationPortfolioAccessOutput {
  OrganizationNodes?: OrganizationNode[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPortfolioAccessOutput {
  AccountIds?: string[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPortfoliosOutput {
  PortfolioDetails?: PortfolioDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPortfoliosForProductOutput {
  PortfolioDetails?: PortfolioDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPrincipalsForPortfolioOutput {
  Principals?: Principal[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProvisionedProductPlansOutput {
  ProvisionedProductPlans?: ProvisionedProductPlanSummary[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProvisioningArtifactsOutput {
  ProvisioningArtifactDetails?: ProvisioningArtifactDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProvisioningArtifactsForServiceActionOutput {
  ProvisioningArtifactViews?: ProvisioningArtifactView[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRecordHistoryOutput {
  RecordDetails?: RecordDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourcesForTagOptionOutput {
  ResourceDetails?: ResourceDetail[] | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListServiceActionsOutput {
  ServiceActionSummaries?: ServiceActionSummary[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListServiceActionsForProvisioningArtifactOutput {
  ServiceActionSummaries?: ServiceActionSummary[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListStackInstancesForProvisionedProductOutput {
  StackInstances?: StackInstance[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagOptionsOutput {
  TagOptionDetails?: TagOptionDetail[] | null;
  PageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ProvisionProductOutput {
  RecordDetail?: RecordDetail | null;
}

// refs: 1 - tags: named, output
export interface RejectPortfolioShareOutput {
}

// refs: 1 - tags: named, output
export interface ScanProvisionedProductsOutput {
  ProvisionedProducts?: ProvisionedProductDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchProductsOutput {
  ProductViewSummaries?: ProductViewSummary[] | null;
  ProductViewAggregations?: { [key: string]: ProductViewAggregationValue[] | null | undefined } | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchProductsAsAdminOutput {
  ProductViewDetails?: ProductViewDetail[] | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchProvisionedProductsOutput {
  ProvisionedProducts?: ProvisionedProductAttribute[] | null;
  TotalResultsCount?: number | null;
  NextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface TerminateProvisionedProductOutput {
  RecordDetail?: RecordDetail | null;
}

// refs: 1 - tags: named, output
export interface UpdateConstraintOutput {
  ConstraintDetail?: ConstraintDetail | null;
  ConstraintParameters?: string | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface UpdatePortfolioOutput {
  PortfolioDetail?: PortfolioDetail | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateProductOutput {
  ProductViewDetail?: ProductViewDetail | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateProvisionedProductOutput {
  RecordDetail?: RecordDetail | null;
}

// refs: 1 - tags: named, output
export interface UpdateProvisionedProductPropertiesOutput {
  ProvisionedProductId?: string | null;
  ProvisionedProductProperties?: { [key in PropertyKey]: string | null | undefined } | null;
  RecordId?: string | null;
  Status?: RecordStatus | null;
}

// refs: 1 - tags: named, output
export interface UpdateProvisioningArtifactOutput {
  ProvisioningArtifactDetail?: ProvisioningArtifactDetail | null;
  Info?: { [key: string]: string | null | undefined } | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface UpdateServiceActionOutput {
  ServiceActionDetail?: ServiceActionDetail | null;
}

// refs: 1 - tags: named, output
export interface UpdateTagOptionOutput {
  TagOptionDetail?: TagOptionDetail | null;
}

// refs: 3 - tags: input, named, enum
export type PortfolioShareType =
| "IMPORTED"
| "AWS_SERVICECATALOG"
| "AWS_ORGANIZATIONS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type PrincipalType =
| "IAM"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ServiceActionAssociation {
  ServiceActionId: string;
  ProductId: string;
  ProvisioningArtifactId: string;
}
function fromServiceActionAssociation(input?: ServiceActionAssociation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ServiceActionId: input["ServiceActionId"],
    ProductId: input["ProductId"],
    ProvisioningArtifactId: input["ProvisioningArtifactId"],
  }
}

// refs: 1 - tags: input, named, enum
export type ProvisioningArtifactPropertyName =
| "Id"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type CopyOption =
| "CopyTags"
| cmnP.UnexpectedEnumValue;

// refs: 16 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OrganizationNode {
  Type?: OrganizationNodeType | null;
  Value?: string | null;
}
function fromOrganizationNode(input?: OrganizationNode | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Value: input["Value"],
  }
}
function toOrganizationNode(root: jsonP.JSONValue): OrganizationNode {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<OrganizationNodeType>(x),
      "Value": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type OrganizationNodeType =
| "ORGANIZATION"
| "ORGANIZATIONAL_UNIT"
| "ACCOUNT"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type ProductType =
| "CLOUD_FORMATION_TEMPLATE"
| "MARKETPLACE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ProvisioningArtifactProperties {
  Name?: string | null;
  Description?: string | null;
  Info: { [key: string]: string | null | undefined };
  Type?: ProvisioningArtifactType | null;
  DisableTemplateValidation?: boolean | null;
}
function fromProvisioningArtifactProperties(input?: ProvisioningArtifactProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Description: input["Description"],
    Info: input["Info"],
    Type: input["Type"],
    DisableTemplateValidation: input["DisableTemplateValidation"],
  }
}

// refs: 7 - tags: input, named, enum, output
export type ProvisioningArtifactType =
| "CLOUD_FORMATION_TEMPLATE"
| "MARKETPLACE_AMI"
| "MARKETPLACE_CAR"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ProvisionedProductPlanType =
| "CLOUDFORMATION"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface UpdateProvisioningParameter {
  Key?: string | null;
  Value?: string | null;
  UsePreviousValue?: boolean | null;
}
function fromUpdateProvisioningParameter(input?: UpdateProvisioningParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
    UsePreviousValue: input["UsePreviousValue"],
  }
}
function toUpdateProvisioningParameter(root: jsonP.JSONValue): UpdateProvisioningParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
      "UsePreviousValue": "b",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type ServiceActionDefinitionType =
| "SSM_AUTOMATION"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type ServiceActionDefinitionKey =
| "Name"
| "Version"
| "AssumeRole"
| "Parameters"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface
export interface AccessLevelFilter {
  Key?: AccessLevelFilterKey | null;
  Value?: string | null;
}
function fromAccessLevelFilter(input?: AccessLevelFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

// refs: 4 - tags: input, named, enum
export type AccessLevelFilterKey =
| "Account"
| "Role"
| "User"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ListRecordHistorySearchFilter {
  Key?: string | null;
  Value?: string | null;
}
function fromListRecordHistorySearchFilter(input?: ListRecordHistorySearchFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ListTagOptionsFilters {
  Key?: string | null;
  Value?: string | null;
  Active?: boolean | null;
}
function fromListTagOptionsFilters(input?: ListTagOptionsFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
    Active: input["Active"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ProvisioningParameter {
  Key?: string | null;
  Value?: string | null;
}
function fromProvisioningParameter(input?: ProvisioningParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ProvisioningPreferences {
  StackSetAccounts?: string[] | null;
  StackSetRegions?: string[] | null;
  StackSetFailureToleranceCount?: number | null;
  StackSetFailureTolerancePercentage?: number | null;
  StackSetMaxConcurrencyCount?: number | null;
  StackSetMaxConcurrencyPercentage?: number | null;
}
function fromProvisioningPreferences(input?: ProvisioningPreferences | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StackSetAccounts: input["StackSetAccounts"],
    StackSetRegions: input["StackSetRegions"],
    StackSetFailureToleranceCount: input["StackSetFailureToleranceCount"],
    StackSetFailureTolerancePercentage: input["StackSetFailureTolerancePercentage"],
    StackSetMaxConcurrencyCount: input["StackSetMaxConcurrencyCount"],
    StackSetMaxConcurrencyPercentage: input["StackSetMaxConcurrencyPercentage"],
  }
}

// refs: 2 - tags: input, named, enum
export type ProductViewFilterBy =
| "FullTextSearch"
| "Owner"
| "ProductType"
| "SourceProductId"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum
export type ProductViewSortBy =
| "Title"
| "VersionCount"
| "CreationDate"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum
export type SortOrder =
| "ASCENDING"
| "DESCENDING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ProductSource =
| "ACCOUNT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ProvisionedProductViewFilterBy =
| "SearchQuery"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateProvisioningPreferences {
  StackSetAccounts?: string[] | null;
  StackSetRegions?: string[] | null;
  StackSetFailureToleranceCount?: number | null;
  StackSetFailureTolerancePercentage?: number | null;
  StackSetMaxConcurrencyCount?: number | null;
  StackSetMaxConcurrencyPercentage?: number | null;
  StackSetOperationType?: StackSetOperationType | null;
}
function fromUpdateProvisioningPreferences(input?: UpdateProvisioningPreferences | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StackSetAccounts: input["StackSetAccounts"],
    StackSetRegions: input["StackSetRegions"],
    StackSetFailureToleranceCount: input["StackSetFailureToleranceCount"],
    StackSetFailureTolerancePercentage: input["StackSetFailureTolerancePercentage"],
    StackSetMaxConcurrencyCount: input["StackSetMaxConcurrencyCount"],
    StackSetMaxConcurrencyPercentage: input["StackSetMaxConcurrencyPercentage"],
    StackSetOperationType: input["StackSetOperationType"],
  }
}

// refs: 1 - tags: input, named, enum
export type StackSetOperationType =
| "CREATE"
| "UPDATE"
| "DELETE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type PropertyKey =
| "OWNER"
| "LAUNCH_ROLE"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type ProvisioningArtifactGuidance =
| "DEFAULT"
| "DEPRECATED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface FailedServiceActionAssociation {
  ServiceActionId?: string | null;
  ProductId?: string | null;
  ProvisioningArtifactId?: string | null;
  ErrorCode?: ServiceActionAssociationErrorCode | null;
  ErrorMessage?: string | null;
}
function toFailedServiceActionAssociation(root: jsonP.JSONValue): FailedServiceActionAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceActionId": "s",
      "ProductId": "s",
      "ProvisioningArtifactId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ServiceActionAssociationErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ServiceActionAssociationErrorCode =
| "DUPLICATE_RESOURCE"
| "INTERNAL_FAILURE"
| "LIMIT_EXCEEDED"
| "RESOURCE_NOT_FOUND"
| "THROTTLING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ConstraintDetail {
  ConstraintId?: string | null;
  Type?: string | null;
  Description?: string | null;
  Owner?: string | null;
  ProductId?: string | null;
  PortfolioId?: string | null;
}
function toConstraintDetail(root: jsonP.JSONValue): ConstraintDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConstraintId": "s",
      "Type": "s",
      "Description": "s",
      "Owner": "s",
      "ProductId": "s",
      "PortfolioId": "s",
    },
  }, root);
}

// refs: 10 - tags: output, named, enum
export type Status =
| "AVAILABLE"
| "CREATING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface PortfolioDetail {
  Id?: string | null;
  ARN?: string | null;
  DisplayName?: string | null;
  Description?: string | null;
  CreatedTime?: Date | number | null;
  ProviderName?: string | null;
}
function toPortfolioDetail(root: jsonP.JSONValue): PortfolioDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ARN": "s",
      "DisplayName": "s",
      "Description": "s",
      "CreatedTime": "d",
      "ProviderName": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ProductViewDetail {
  ProductViewSummary?: ProductViewSummary | null;
  Status?: Status | null;
  ProductARN?: string | null;
  CreatedTime?: Date | number | null;
}
function toProductViewDetail(root: jsonP.JSONValue): ProductViewDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProductViewSummary": toProductViewSummary,
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      "ProductARN": "s",
      "CreatedTime": "d",
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface ProductViewSummary {
  Id?: string | null;
  ProductId?: string | null;
  Name?: string | null;
  Owner?: string | null;
  ShortDescription?: string | null;
  Type?: ProductType | null;
  Distributor?: string | null;
  HasDefaultPath?: boolean | null;
  SupportEmail?: string | null;
  SupportDescription?: string | null;
  SupportUrl?: string | null;
}
function toProductViewSummary(root: jsonP.JSONValue): ProductViewSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ProductId": "s",
      "Name": "s",
      "Owner": "s",
      "ShortDescription": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ProductType>(x),
      "Distributor": "s",
      "HasDefaultPath": "b",
      "SupportEmail": "s",
      "SupportDescription": "s",
      "SupportUrl": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface ProvisioningArtifactDetail {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  Type?: ProvisioningArtifactType | null;
  CreatedTime?: Date | number | null;
  Active?: boolean | null;
  Guidance?: ProvisioningArtifactGuidance | null;
}
function toProvisioningArtifactDetail(root: jsonP.JSONValue): ProvisioningArtifactDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisioningArtifactType>(x),
      "CreatedTime": "d",
      "Active": "b",
      "Guidance": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisioningArtifactGuidance>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ServiceActionDetail {
  ServiceActionSummary?: ServiceActionSummary | null;
  Definition?: { [key in ServiceActionDefinitionKey]: string | null | undefined } | null;
}
function toServiceActionDetail(root: jsonP.JSONValue): ServiceActionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceActionSummary": toServiceActionSummary,
      "Definition": x => jsonP.readMap(x => cmnP.readEnumReq<ServiceActionDefinitionKey>(x), String, x),
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface ServiceActionSummary {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  DefinitionType?: ServiceActionDefinitionType | null;
}
function toServiceActionSummary(root: jsonP.JSONValue): ServiceActionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "DefinitionType": (x: jsonP.JSONValue) => cmnP.readEnum<ServiceActionDefinitionType>(x),
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface TagOptionDetail {
  Key?: string | null;
  Value?: string | null;
  Active?: boolean | null;
  Id?: string | null;
}
function toTagOptionDetail(root: jsonP.JSONValue): TagOptionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
      "Active": "b",
      "Id": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type CopyProductStatus =
| "SUCCEEDED"
| "IN_PROGRESS"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface BudgetDetail {
  BudgetName?: string | null;
}
function toBudgetDetail(root: jsonP.JSONValue): BudgetDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "BudgetName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ShareStatus =
| "NOT_STARTED"
| "IN_PROGRESS"
| "COMPLETED"
| "COMPLETED_WITH_ERRORS"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ShareDetails {
  SuccessfulShares?: string[] | null;
  ShareErrors?: ShareError[] | null;
}
function toShareDetails(root: jsonP.JSONValue): ShareDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "SuccessfulShares": ["s"],
      "ShareErrors": [toShareError],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ShareError {
  Accounts?: string[] | null;
  Message?: string | null;
  Error?: string | null;
}
function toShareError(root: jsonP.JSONValue): ShareError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Accounts": ["s"],
      "Message": "s",
      "Error": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ProvisioningArtifact {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  CreatedTime?: Date | number | null;
  Guidance?: ProvisioningArtifactGuidance | null;
}
function toProvisioningArtifact(root: jsonP.JSONValue): ProvisioningArtifact {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "CreatedTime": "d",
      "Guidance": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisioningArtifactGuidance>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LaunchPath {
  Id?: string | null;
  Name?: string | null;
}
function toLaunchPath(root: jsonP.JSONValue): LaunchPath {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisioningArtifactSummary {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  CreatedTime?: Date | number | null;
  ProvisioningArtifactMetadata?: { [key: string]: string | null | undefined } | null;
}
function toProvisioningArtifactSummary(root: jsonP.JSONValue): ProvisioningArtifactSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "CreatedTime": "d",
      "ProvisioningArtifactMetadata": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ProvisionedProductDetail {
  Name?: string | null;
  Arn?: string | null;
  Type?: string | null;
  Id?: string | null;
  Status?: ProvisionedProductStatus | null;
  StatusMessage?: string | null;
  CreatedTime?: Date | number | null;
  IdempotencyToken?: string | null;
  LastRecordId?: string | null;
  LastProvisioningRecordId?: string | null;
  LastSuccessfulProvisioningRecordId?: string | null;
  ProductId?: string | null;
  ProvisioningArtifactId?: string | null;
  LaunchRoleArn?: string | null;
}
function toProvisionedProductDetail(root: jsonP.JSONValue): ProvisionedProductDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
      "Type": "s",
      "Id": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisionedProductStatus>(x),
      "StatusMessage": "s",
      "CreatedTime": "d",
      "IdempotencyToken": "s",
      "LastRecordId": "s",
      "LastProvisioningRecordId": "s",
      "LastSuccessfulProvisioningRecordId": "s",
      "ProductId": "s",
      "ProvisioningArtifactId": "s",
      "LaunchRoleArn": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ProvisionedProductStatus =
| "AVAILABLE"
| "UNDER_CHANGE"
| "TAINTED"
| "ERROR"
| "PLAN_IN_PROGRESS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface CloudWatchDashboard {
  Name?: string | null;
}
function toCloudWatchDashboard(root: jsonP.JSONValue): CloudWatchDashboard {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisionedProductPlanDetails {
  CreatedTime?: Date | number | null;
  PathId?: string | null;
  ProductId?: string | null;
  PlanName?: string | null;
  PlanId?: string | null;
  ProvisionProductId?: string | null;
  ProvisionProductName?: string | null;
  PlanType?: ProvisionedProductPlanType | null;
  ProvisioningArtifactId?: string | null;
  Status?: ProvisionedProductPlanStatus | null;
  UpdatedTime?: Date | number | null;
  NotificationArns?: string[] | null;
  ProvisioningParameters?: UpdateProvisioningParameter[] | null;
  Tags?: Tag[] | null;
  StatusMessage?: string | null;
}
function toProvisionedProductPlanDetails(root: jsonP.JSONValue): ProvisionedProductPlanDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedTime": "d",
      "PathId": "s",
      "ProductId": "s",
      "PlanName": "s",
      "PlanId": "s",
      "ProvisionProductId": "s",
      "ProvisionProductName": "s",
      "PlanType": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisionedProductPlanType>(x),
      "ProvisioningArtifactId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisionedProductPlanStatus>(x),
      "UpdatedTime": "d",
      "NotificationArns": ["s"],
      "ProvisioningParameters": [toUpdateProvisioningParameter],
      "Tags": [toTag],
      "StatusMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ProvisionedProductPlanStatus =
| "CREATE_IN_PROGRESS"
| "CREATE_SUCCESS"
| "CREATE_FAILED"
| "EXECUTE_IN_PROGRESS"
| "EXECUTE_SUCCESS"
| "EXECUTE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ResourceChange {
  Action?: ChangeAction | null;
  LogicalResourceId?: string | null;
  PhysicalResourceId?: string | null;
  ResourceType?: string | null;
  Replacement?: Replacement | null;
  Scope?: ResourceAttribute[] | null;
  Details?: ResourceChangeDetail[] | null;
}
function toResourceChange(root: jsonP.JSONValue): ResourceChange {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<ChangeAction>(x),
      "LogicalResourceId": "s",
      "PhysicalResourceId": "s",
      "ResourceType": "s",
      "Replacement": (x: jsonP.JSONValue) => cmnP.readEnum<Replacement>(x),
      "Scope": [(x: jsonP.JSONValue) => cmnP.readEnum<ResourceAttribute>(x)],
      "Details": [toResourceChangeDetail],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ChangeAction =
| "ADD"
| "MODIFY"
| "REMOVE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type Replacement =
| "TRUE"
| "FALSE"
| "CONDITIONAL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type ResourceAttribute =
| "PROPERTIES"
| "METADATA"
| "CREATIONPOLICY"
| "UPDATEPOLICY"
| "DELETIONPOLICY"
| "TAGS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ResourceChangeDetail {
  Target?: ResourceTargetDefinition | null;
  Evaluation?: EvaluationType | null;
  CausingEntity?: string | null;
}
function toResourceChangeDetail(root: jsonP.JSONValue): ResourceChangeDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Target": toResourceTargetDefinition,
      "Evaluation": (x: jsonP.JSONValue) => cmnP.readEnum<EvaluationType>(x),
      "CausingEntity": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceTargetDefinition {
  Attribute?: ResourceAttribute | null;
  Name?: string | null;
  RequiresRecreation?: RequiresRecreation | null;
}
function toResourceTargetDefinition(root: jsonP.JSONValue): ResourceTargetDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attribute": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceAttribute>(x),
      "Name": "s",
      "RequiresRecreation": (x: jsonP.JSONValue) => cmnP.readEnum<RequiresRecreation>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RequiresRecreation =
| "NEVER"
| "CONDITIONALLY"
| "ALWAYS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type EvaluationType =
| "STATIC"
| "DYNAMIC"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ProvisioningArtifactParameter {
  ParameterKey?: string | null;
  DefaultValue?: string | null;
  ParameterType?: string | null;
  IsNoEcho?: boolean | null;
  Description?: string | null;
  ParameterConstraints?: ParameterConstraints | null;
}
function toProvisioningArtifactParameter(root: jsonP.JSONValue): ProvisioningArtifactParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "ParameterKey": "s",
      "DefaultValue": "s",
      "ParameterType": "s",
      "IsNoEcho": "b",
      "Description": "s",
      "ParameterConstraints": toParameterConstraints,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ParameterConstraints {
  AllowedValues?: string[] | null;
}
function toParameterConstraints(root: jsonP.JSONValue): ParameterConstraints {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowedValues": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ConstraintSummary {
  Type?: string | null;
  Description?: string | null;
}
function toConstraintSummary(root: jsonP.JSONValue): ConstraintSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UsageInstruction {
  Type?: string | null;
  Value?: string | null;
}
function toUsageInstruction(root: jsonP.JSONValue): UsageInstruction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TagOptionSummary {
  Key?: string | null;
  Values?: string[] | null;
}
function toTagOptionSummary(root: jsonP.JSONValue): TagOptionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Values": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisioningArtifactPreferences {
  StackSetAccounts?: string[] | null;
  StackSetRegions?: string[] | null;
}
function toProvisioningArtifactPreferences(root: jsonP.JSONValue): ProvisioningArtifactPreferences {
  return jsonP.readObj({
    required: {},
    optional: {
      "StackSetAccounts": ["s"],
      "StackSetRegions": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisioningArtifactOutput {
  Key?: string | null;
  Description?: string | null;
}
function toProvisioningArtifactOutput(root: jsonP.JSONValue): ProvisioningArtifactOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface RecordDetail {
  RecordId?: string | null;
  ProvisionedProductName?: string | null;
  Status?: RecordStatus | null;
  CreatedTime?: Date | number | null;
  UpdatedTime?: Date | number | null;
  ProvisionedProductType?: string | null;
  RecordType?: string | null;
  ProvisionedProductId?: string | null;
  ProductId?: string | null;
  ProvisioningArtifactId?: string | null;
  PathId?: string | null;
  RecordErrors?: RecordError[] | null;
  RecordTags?: RecordTag[] | null;
  LaunchRoleArn?: string | null;
}
function toRecordDetail(root: jsonP.JSONValue): RecordDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "RecordId": "s",
      "ProvisionedProductName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<RecordStatus>(x),
      "CreatedTime": "d",
      "UpdatedTime": "d",
      "ProvisionedProductType": "s",
      "RecordType": "s",
      "ProvisionedProductId": "s",
      "ProductId": "s",
      "ProvisioningArtifactId": "s",
      "PathId": "s",
      "RecordErrors": [toRecordError],
      "RecordTags": [toRecordTag],
      "LaunchRoleArn": "s",
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type RecordStatus =
| "CREATED"
| "IN_PROGRESS"
| "IN_PROGRESS_IN_ERROR"
| "SUCCEEDED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: output, named, interface
export interface RecordError {
  Code?: string | null;
  Description?: string | null;
}
function toRecordError(root: jsonP.JSONValue): RecordError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface RecordTag {
  Key?: string | null;
  Value?: string | null;
}
function toRecordTag(root: jsonP.JSONValue): RecordTag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RecordOutput {
  OutputKey?: string | null;
  OutputValue?: string | null;
  Description?: string | null;
}
function toRecordOutput(root: jsonP.JSONValue): RecordOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutputKey": "s",
      "OutputValue": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionParameter {
  Name?: string | null;
  Type?: string | null;
  DefaultValues?: string[] | null;
}
function toExecutionParameter(root: jsonP.JSONValue): ExecutionParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": "s",
      "DefaultValues": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AccessStatus =
| "ENABLED"
| "UNDER_CHANGE"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface LaunchPathSummary {
  Id?: string | null;
  ConstraintSummaries?: ConstraintSummary[] | null;
  Tags?: Tag[] | null;
  Name?: string | null;
}
function toLaunchPathSummary(root: jsonP.JSONValue): LaunchPathSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ConstraintSummaries": [toConstraintSummary],
      "Tags": [toTag],
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Principal {
  PrincipalARN?: string | null;
  PrincipalType?: PrincipalType | null;
}
function toPrincipal(root: jsonP.JSONValue): Principal {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrincipalARN": "s",
      "PrincipalType": (x: jsonP.JSONValue) => cmnP.readEnum<PrincipalType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisionedProductPlanSummary {
  PlanName?: string | null;
  PlanId?: string | null;
  ProvisionProductId?: string | null;
  ProvisionProductName?: string | null;
  PlanType?: ProvisionedProductPlanType | null;
  ProvisioningArtifactId?: string | null;
}
function toProvisionedProductPlanSummary(root: jsonP.JSONValue): ProvisionedProductPlanSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "PlanName": "s",
      "PlanId": "s",
      "ProvisionProductId": "s",
      "ProvisionProductName": "s",
      "PlanType": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisionedProductPlanType>(x),
      "ProvisioningArtifactId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisioningArtifactView {
  ProductViewSummary?: ProductViewSummary | null;
  ProvisioningArtifact?: ProvisioningArtifact | null;
}
function toProvisioningArtifactView(root: jsonP.JSONValue): ProvisioningArtifactView {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProductViewSummary": toProductViewSummary,
      "ProvisioningArtifact": toProvisioningArtifact,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceDetail {
  Id?: string | null;
  ARN?: string | null;
  Name?: string | null;
  Description?: string | null;
  CreatedTime?: Date | number | null;
}
function toResourceDetail(root: jsonP.JSONValue): ResourceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ARN": "s",
      "Name": "s",
      "Description": "s",
      "CreatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StackInstance {
  Account?: string | null;
  Region?: string | null;
  StackInstanceStatus?: StackInstanceStatus | null;
}
function toStackInstance(root: jsonP.JSONValue): StackInstance {
  return jsonP.readObj({
    required: {},
    optional: {
      "Account": "s",
      "Region": "s",
      "StackInstanceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<StackInstanceStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type StackInstanceStatus =
| "CURRENT"
| "OUTDATED"
| "INOPERABLE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ProductViewAggregationValue {
  Value?: string | null;
  ApproximateCount?: number | null;
}
function toProductViewAggregationValue(root: jsonP.JSONValue): ProductViewAggregationValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
      "ApproximateCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisionedProductAttribute {
  Name?: string | null;
  Arn?: string | null;
  Type?: string | null;
  Id?: string | null;
  Status?: ProvisionedProductStatus | null;
  StatusMessage?: string | null;
  CreatedTime?: Date | number | null;
  IdempotencyToken?: string | null;
  LastRecordId?: string | null;
  LastProvisioningRecordId?: string | null;
  LastSuccessfulProvisioningRecordId?: string | null;
  Tags?: Tag[] | null;
  PhysicalId?: string | null;
  ProductId?: string | null;
  ProductName?: string | null;
  ProvisioningArtifactId?: string | null;
  ProvisioningArtifactName?: string | null;
  UserArn?: string | null;
  UserArnSession?: string | null;
}
function toProvisionedProductAttribute(root: jsonP.JSONValue): ProvisionedProductAttribute {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
      "Type": "s",
      "Id": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ProvisionedProductStatus>(x),
      "StatusMessage": "s",
      "CreatedTime": "d",
      "IdempotencyToken": "s",
      "LastRecordId": "s",
      "LastProvisioningRecordId": "s",
      "LastSuccessfulProvisioningRecordId": "s",
      "Tags": [toTag],
      "PhysicalId": "s",
      "ProductId": "s",
      "ProductName": "s",
      "ProvisioningArtifactId": "s",
      "ProvisioningArtifactName": "s",
      "UserArn": "s",
      "UserArnSession": "s",
    },
  }, root);
}
