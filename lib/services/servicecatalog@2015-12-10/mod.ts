// Autogenerated API client for: AWS Service Catalog

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class ServiceCatalog {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ServiceCatalog.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2015-12-10",
    "endpointPrefix": "servicecatalog",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Service Catalog",
    "serviceId": "Service Catalog",
    "signatureVersion": "v4",
    "targetPrefix": "AWS242ServiceCatalogService",
    "uid": "servicecatalog-2015-12-10"
  };

  async acceptPortfolioShare(
    {abortSignal, ...params}: RequestConfig & s.AcceptPortfolioShareInput,
  ): Promise<s.AcceptPortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PortfolioShareType: params["PortfolioShareType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptPortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateBudgetWithResource(
    {abortSignal, ...params}: RequestConfig & s.AssociateBudgetWithResourceInput,
  ): Promise<s.AssociateBudgetWithResourceOutput> {
    const body: jsonP.JSONObject = {
      BudgetName: params["BudgetName"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateBudgetWithResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associatePrincipalWithPortfolio(
    {abortSignal, ...params}: RequestConfig & s.AssociatePrincipalWithPortfolioInput,
  ): Promise<s.AssociatePrincipalWithPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PrincipalARN: params["PrincipalARN"],
      PrincipalType: params["PrincipalType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePrincipalWithPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateProductWithPortfolio(
    {abortSignal, ...params}: RequestConfig & s.AssociateProductWithPortfolioInput,
  ): Promise<s.AssociateProductWithPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PortfolioId: params["PortfolioId"],
      SourcePortfolioId: params["SourcePortfolioId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateProductWithPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateServiceActionWithProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.AssociateServiceActionWithProvisioningArtifactInput,
  ): Promise<s.AssociateServiceActionWithProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ServiceActionId: params["ServiceActionId"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateServiceActionWithProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateTagOptionWithResource(
    {abortSignal, ...params}: RequestConfig & s.AssociateTagOptionWithResourceInput,
  ): Promise<s.AssociateTagOptionWithResourceOutput> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagOptionId: params["TagOptionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateTagOptionWithResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchAssociateServiceActionWithProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.BatchAssociateServiceActionWithProvisioningArtifactInput,
  ): Promise<s.BatchAssociateServiceActionWithProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ServiceActionAssociations: params["ServiceActionAssociations"]?.map(x => fromServiceActionAssociation(x)),
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateServiceActionWithProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedServiceActionAssociations": [toFailedServiceActionAssociation],
      },
    }, await resp.json());
  }

  async batchDisassociateServiceActionFromProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.BatchDisassociateServiceActionFromProvisioningArtifactInput,
  ): Promise<s.BatchDisassociateServiceActionFromProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ServiceActionAssociations: params["ServiceActionAssociations"]?.map(x => fromServiceActionAssociation(x)),
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateServiceActionFromProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedServiceActionAssociations": [toFailedServiceActionAssociation],
      },
    }, await resp.json());
  }

  async copyProduct(
    {abortSignal, ...params}: RequestConfig & s.CopyProductInput,
  ): Promise<s.CopyProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      SourceProductArn: params["SourceProductArn"],
      TargetProductId: params["TargetProductId"],
      TargetProductName: params["TargetProductName"],
      SourceProvisioningArtifactIdentifiers: params["SourceProvisioningArtifactIdentifiers"],
      CopyOptions: params["CopyOptions"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CopyProductToken": "s",
      },
    }, await resp.json());
  }

  async createConstraint(
    {abortSignal, ...params}: RequestConfig & s.CreateConstraintInput,
  ): Promise<s.CreateConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      ProductId: params["ProductId"],
      Parameters: params["Parameters"],
      Type: params["Type"],
      Description: params["Description"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetail": toConstraintDetail,
        "ConstraintParameters": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      },
    }, await resp.json());
  }

  async createPortfolio(
    {abortSignal, ...params}: RequestConfig & s.CreatePortfolioInput,
  ): Promise<s.CreatePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      DisplayName: params["DisplayName"],
      Description: params["Description"],
      ProviderName: params["ProviderName"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetail": toPortfolioDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async createPortfolioShare(
    {abortSignal, ...params}: RequestConfig & s.CreatePortfolioShareInput,
  ): Promise<s.CreatePortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      AccountId: params["AccountId"],
      OrganizationNode: fromOrganizationNode(params["OrganizationNode"]),
      ShareTagOptions: params["ShareTagOptions"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioShareToken": "s",
      },
    }, await resp.json());
  }

  async createProduct(
    {abortSignal, ...params}: RequestConfig & s.CreateProductInput,
  ): Promise<s.CreateProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Name: params["Name"],
      Owner: params["Owner"],
      Description: params["Description"],
      Distributor: params["Distributor"],
      SupportDescription: params["SupportDescription"],
      SupportEmail: params["SupportEmail"],
      SupportUrl: params["SupportUrl"],
      ProductType: params["ProductType"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ProvisioningArtifactParameters: fromProvisioningArtifactProperties(params["ProvisioningArtifactParameters"]),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetail": toProductViewDetail,
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async createProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & s.CreateProvisionedProductPlanInput,
  ): Promise<s.CreateProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanName: params["PlanName"],
      PlanType: params["PlanType"],
      NotificationArns: params["NotificationArns"],
      PathId: params["PathId"],
      ProductId: params["ProductId"],
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningParameters: params["ProvisioningParameters"]?.map(x => fromUpdateProvisioningParameter(x)),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PlanName": "s",
        "PlanId": "s",
        "ProvisionProductId": "s",
        "ProvisionedProductName": "s",
        "ProvisioningArtifactId": "s",
      },
    }, await resp.json());
  }

  async createProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.CreateProvisioningArtifactInput,
  ): Promise<s.CreateProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      Parameters: fromProvisioningArtifactProperties(params["Parameters"]),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Info": x => jsonP.readMap(String, String, x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      },
    }, await resp.json());
  }

  async createServiceAction(
    {abortSignal, ...params}: RequestConfig & s.CreateServiceActionInput,
  ): Promise<s.CreateServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DefinitionType: params["DefinitionType"],
      Definition: params["Definition"],
      Description: params["Description"],
      AcceptLanguage: params["AcceptLanguage"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionDetail": toServiceActionDetail,
      },
    }, await resp.json());
  }

  async createTagOption(
    {abortSignal, ...params}: RequestConfig & s.CreateTagOptionInput,
  ): Promise<s.CreateTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Key: params["Key"],
      Value: params["Value"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetail": toTagOptionDetail,
      },
    }, await resp.json());
  }

  async deleteConstraint(
    {abortSignal, ...params}: RequestConfig & s.DeleteConstraintInput,
  ): Promise<s.DeleteConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePortfolio(
    {abortSignal, ...params}: RequestConfig & s.DeletePortfolioInput,
  ): Promise<s.DeletePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePortfolioShare(
    {abortSignal, ...params}: RequestConfig & s.DeletePortfolioShareInput,
  ): Promise<s.DeletePortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      AccountId: params["AccountId"],
      OrganizationNode: fromOrganizationNode(params["OrganizationNode"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioShareToken": "s",
      },
    }, await resp.json());
  }

  async deleteProduct(
    {abortSignal, ...params}: RequestConfig & s.DeleteProductInput,
  ): Promise<s.DeleteProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & s.DeleteProvisionedProductPlanInput,
  ): Promise<s.DeleteProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanId: params["PlanId"],
      IgnoreErrors: params["IgnoreErrors"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.DeleteProvisioningArtifactInput,
  ): Promise<s.DeleteProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteServiceAction(
    {abortSignal, ...params}: RequestConfig & s.DeleteServiceActionInput,
  ): Promise<s.DeleteServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTagOption(
    {abortSignal, ...params}: RequestConfig & s.DeleteTagOptionInput,
  ): Promise<s.DeleteTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeConstraint(
    {abortSignal, ...params}: RequestConfig & s.DescribeConstraintInput,
  ): Promise<s.DescribeConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetail": toConstraintDetail,
        "ConstraintParameters": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      },
    }, await resp.json());
  }

  async describeCopyProductStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeCopyProductStatusInput,
  ): Promise<s.DescribeCopyProductStatusOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      CopyProductToken: params["CopyProductToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCopyProductStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CopyProductStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.CopyProductStatus>(x),
        "TargetProductId": "s",
        "StatusDetail": "s",
      },
    }, await resp.json());
  }

  async describePortfolio(
    {abortSignal, ...params}: RequestConfig & s.DescribePortfolioInput,
  ): Promise<s.DescribePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetail": toPortfolioDetail,
        "Tags": [toTag],
        "TagOptions": [toTagOptionDetail],
        "Budgets": [toBudgetDetail],
      },
    }, await resp.json());
  }

  async describePortfolioShareStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribePortfolioShareStatusInput,
  ): Promise<s.DescribePortfolioShareStatusOutput> {
    const body: jsonP.JSONObject = {
      PortfolioShareToken: params["PortfolioShareToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePortfolioShareStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioShareToken": "s",
        "PortfolioId": "s",
        "OrganizationNodeValue": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShareStatus>(x),
        "ShareDetails": toShareDetails,
      },
    }, await resp.json());
  }

  async describePortfolioShares(
    {abortSignal, ...params}: RequestConfig & s.DescribePortfolioSharesInput,
  ): Promise<s.DescribePortfolioSharesOutput> {
    const body: jsonP.JSONObject = {
      PortfolioId: params["PortfolioId"],
      Type: params["Type"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePortfolioShares",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextPageToken": "s",
        "PortfolioShareDetails": [toPortfolioShareDetail],
      },
    }, await resp.json());
  }

  async describeProduct(
    {abortSignal, ...params}: RequestConfig & s.DescribeProductInput = {},
  ): Promise<s.DescribeProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewSummary": toProductViewSummary,
        "ProvisioningArtifacts": [toProvisioningArtifact],
        "Budgets": [toBudgetDetail],
        "LaunchPaths": [toLaunchPath],
      },
    }, await resp.json());
  }

  async describeProductAsAdmin(
    {abortSignal, ...params}: RequestConfig & s.DescribeProductAsAdminInput = {},
  ): Promise<s.DescribeProductAsAdminOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
      SourcePortfolioId: params["SourcePortfolioId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProductAsAdmin",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetail": toProductViewDetail,
        "ProvisioningArtifactSummaries": [toProvisioningArtifactSummary],
        "Tags": [toTag],
        "TagOptions": [toTagOptionDetail],
        "Budgets": [toBudgetDetail],
      },
    }, await resp.json());
  }

  async describeProductView(
    {abortSignal, ...params}: RequestConfig & s.DescribeProductViewInput,
  ): Promise<s.DescribeProductViewOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProductView",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewSummary": toProductViewSummary,
        "ProvisioningArtifacts": [toProvisioningArtifact],
      },
    }, await resp.json());
  }

  async describeProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & s.DescribeProvisionedProductInput = {},
  ): Promise<s.DescribeProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductDetail": toProvisionedProductDetail,
        "CloudWatchDashboards": [toCloudWatchDashboard],
      },
    }, await resp.json());
  }

  async describeProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & s.DescribeProvisionedProductPlanInput,
  ): Promise<s.DescribeProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanId: params["PlanId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductPlanDetails": toProvisionedProductPlanDetails,
        "ResourceChanges": [toResourceChange],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async describeProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.DescribeProvisioningArtifactInput = {},
  ): Promise<s.DescribeProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProductId: params["ProductId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      ProductName: params["ProductName"],
      Verbose: params["Verbose"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Info": x => jsonP.readMap(String, String, x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      },
    }, await resp.json());
  }

  async describeProvisioningParameters(
    {abortSignal, ...params}: RequestConfig & s.DescribeProvisioningParametersInput = {},
  ): Promise<s.DescribeProvisioningParametersOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProductName: params["ProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      PathId: params["PathId"],
      PathName: params["PathName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProvisioningParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactParameters": [toProvisioningArtifactParameter],
        "ConstraintSummaries": [toConstraintSummary],
        "UsageInstructions": [toUsageInstruction],
        "TagOptions": [toTagOptionSummary],
        "ProvisioningArtifactPreferences": toProvisioningArtifactPreferences,
        "ProvisioningArtifactOutputs": [toProvisioningArtifactOutput],
      },
    }, await resp.json());
  }

  async describeRecord(
    {abortSignal, ...params}: RequestConfig & s.DescribeRecordInput,
  ): Promise<s.DescribeRecordOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRecord",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
        "RecordOutputs": [toRecordOutput],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async describeServiceAction(
    {abortSignal, ...params}: RequestConfig & s.DescribeServiceActionInput,
  ): Promise<s.DescribeServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionDetail": toServiceActionDetail,
      },
    }, await resp.json());
  }

  async describeServiceActionExecutionParameters(
    {abortSignal, ...params}: RequestConfig & s.DescribeServiceActionExecutionParametersInput,
  ): Promise<s.DescribeServiceActionExecutionParametersOutput> {
    const body: jsonP.JSONObject = {
      ProvisionedProductId: params["ProvisionedProductId"],
      ServiceActionId: params["ServiceActionId"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeServiceActionExecutionParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionParameters": [toExecutionParameter],
      },
    }, await resp.json());
  }

  async describeTagOption(
    {abortSignal, ...params}: RequestConfig & s.DescribeTagOptionInput,
  ): Promise<s.DescribeTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetail": toTagOptionDetail,
      },
    }, await resp.json());
  }

  async disableAWSOrganizationsAccess(
    {abortSignal, ...params}: RequestConfig & s.DisableAWSOrganizationsAccessInput = {},
  ): Promise<s.DisableAWSOrganizationsAccessOutput> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableAWSOrganizationsAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateBudgetFromResource(
    {abortSignal, ...params}: RequestConfig & s.DisassociateBudgetFromResourceInput,
  ): Promise<s.DisassociateBudgetFromResourceOutput> {
    const body: jsonP.JSONObject = {
      BudgetName: params["BudgetName"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateBudgetFromResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociatePrincipalFromPortfolio(
    {abortSignal, ...params}: RequestConfig & s.DisassociatePrincipalFromPortfolioInput,
  ): Promise<s.DisassociatePrincipalFromPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PrincipalARN: params["PrincipalARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociatePrincipalFromPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateProductFromPortfolio(
    {abortSignal, ...params}: RequestConfig & s.DisassociateProductFromPortfolioInput,
  ): Promise<s.DisassociateProductFromPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PortfolioId: params["PortfolioId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateProductFromPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateServiceActionFromProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.DisassociateServiceActionFromProvisioningArtifactInput,
  ): Promise<s.DisassociateServiceActionFromProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ServiceActionId: params["ServiceActionId"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateServiceActionFromProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateTagOptionFromResource(
    {abortSignal, ...params}: RequestConfig & s.DisassociateTagOptionFromResourceInput,
  ): Promise<s.DisassociateTagOptionFromResourceOutput> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagOptionId: params["TagOptionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateTagOptionFromResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableAWSOrganizationsAccess(
    {abortSignal, ...params}: RequestConfig & s.EnableAWSOrganizationsAccessInput = {},
  ): Promise<s.EnableAWSOrganizationsAccessOutput> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableAWSOrganizationsAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async executeProvisionedProductPlan(
    {abortSignal, ...params}: RequestConfig & s.ExecuteProvisionedProductPlanInput,
  ): Promise<s.ExecuteProvisionedProductPlanOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PlanId: params["PlanId"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExecuteProvisionedProductPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async executeProvisionedProductServiceAction(
    {abortSignal, ...params}: RequestConfig & s.ExecuteProvisionedProductServiceActionInput,
  ): Promise<s.ExecuteProvisionedProductServiceActionOutput> {
    const body: jsonP.JSONObject = {
      ProvisionedProductId: params["ProvisionedProductId"],
      ServiceActionId: params["ServiceActionId"],
      ExecuteToken: params["ExecuteToken"] ?? generateIdemptToken(),
      AcceptLanguage: params["AcceptLanguage"],
      Parameters: params["Parameters"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExecuteProvisionedProductServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async getAWSOrganizationsAccessStatus(
    {abortSignal, ...params}: RequestConfig & s.GetAWSOrganizationsAccessStatusInput = {},
  ): Promise<s.GetAWSOrganizationsAccessStatusOutput> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAWSOrganizationsAccessStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccessStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessStatus>(x),
      },
    }, await resp.json());
  }

  async getProvisionedProductOutputs(
    {abortSignal, ...params}: RequestConfig & s.GetProvisionedProductOutputsInput = {},
  ): Promise<s.GetProvisionedProductOutputsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductId: params["ProvisionedProductId"],
      ProvisionedProductName: params["ProvisionedProductName"],
      OutputKeys: params["OutputKeys"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProvisionedProductOutputs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Outputs": [toRecordOutput],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async importAsProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & s.ImportAsProvisionedProductInput,
  ): Promise<s.ImportAsProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisionedProductName: params["ProvisionedProductName"],
      PhysicalId: params["PhysicalId"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportAsProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async listAcceptedPortfolioShares(
    {abortSignal, ...params}: RequestConfig & s.ListAcceptedPortfolioSharesInput = {},
  ): Promise<s.ListAcceptedPortfolioSharesOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
      PortfolioShareType: params["PortfolioShareType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAcceptedPortfolioShares",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetails": [toPortfolioDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listBudgetsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListBudgetsForResourceInput,
  ): Promise<s.ListBudgetsForResourceOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ResourceId: params["ResourceId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBudgetsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Budgets": [toBudgetDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listConstraintsForPortfolio(
    {abortSignal, ...params}: RequestConfig & s.ListConstraintsForPortfolioInput,
  ): Promise<s.ListConstraintsForPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      ProductId: params["ProductId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConstraintsForPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetails": [toConstraintDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listLaunchPaths(
    {abortSignal, ...params}: RequestConfig & s.ListLaunchPathsInput,
  ): Promise<s.ListLaunchPathsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLaunchPaths",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LaunchPathSummaries": [toLaunchPathSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizationPortfolioAccess(
    {abortSignal, ...params}: RequestConfig & s.ListOrganizationPortfolioAccessInput,
  ): Promise<s.ListOrganizationPortfolioAccessOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      OrganizationNodeType: params["OrganizationNodeType"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOrganizationPortfolioAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationNodes": [toOrganizationNode],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPortfolioAccess(
    {abortSignal, ...params}: RequestConfig & s.ListPortfolioAccessInput,
  ): Promise<s.ListPortfolioAccessOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      OrganizationParentId: params["OrganizationParentId"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPortfolioAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountIds": ["s"],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPortfolios(
    {abortSignal, ...params}: RequestConfig & s.ListPortfoliosInput = {},
  ): Promise<s.ListPortfoliosOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPortfolios",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetails": [toPortfolioDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPortfoliosForProduct(
    {abortSignal, ...params}: RequestConfig & s.ListPortfoliosForProductInput,
  ): Promise<s.ListPortfoliosForProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPortfoliosForProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetails": [toPortfolioDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listPrincipalsForPortfolio(
    {abortSignal, ...params}: RequestConfig & s.ListPrincipalsForPortfolioInput,
  ): Promise<s.ListPrincipalsForPortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPrincipalsForPortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Principals": [toPrincipal],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listProvisionedProductPlans(
    {abortSignal, ...params}: RequestConfig & s.ListProvisionedProductPlansInput = {},
  ): Promise<s.ListProvisionedProductPlansOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionProductId: params["ProvisionProductId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProvisionedProductPlans",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductPlans": [toProvisionedProductPlanSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listProvisioningArtifacts(
    {abortSignal, ...params}: RequestConfig & s.ListProvisioningArtifactsInput,
  ): Promise<s.ListProvisioningArtifactsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProvisioningArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetails": [toProvisioningArtifactDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listProvisioningArtifactsForServiceAction(
    {abortSignal, ...params}: RequestConfig & s.ListProvisioningArtifactsForServiceActionInput,
  ): Promise<s.ListProvisioningArtifactsForServiceActionOutput> {
    const body: jsonP.JSONObject = {
      ServiceActionId: params["ServiceActionId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProvisioningArtifactsForServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactViews": [toProvisioningArtifactView],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listRecordHistory(
    {abortSignal, ...params}: RequestConfig & s.ListRecordHistoryInput = {},
  ): Promise<s.ListRecordHistoryOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
      SearchFilter: fromListRecordHistorySearchFilter(params["SearchFilter"]),
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRecordHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetails": [toRecordDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listResourcesForTagOption(
    {abortSignal, ...params}: RequestConfig & s.ListResourcesForTagOptionInput,
  ): Promise<s.ListResourcesForTagOptionOutput> {
    const body: jsonP.JSONObject = {
      TagOptionId: params["TagOptionId"],
      ResourceType: params["ResourceType"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourcesForTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceDetails": [toResourceDetail],
        "PageToken": "s",
      },
    }, await resp.json());
  }

  async listServiceActions(
    {abortSignal, ...params}: RequestConfig & s.ListServiceActionsInput = {},
  ): Promise<s.ListServiceActionsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListServiceActions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionSummaries": [toServiceActionSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listServiceActionsForProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.ListServiceActionsForProvisioningArtifactInput,
  ): Promise<s.ListServiceActionsForProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListServiceActionsForProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionSummaries": [toServiceActionSummary],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listStackInstancesForProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & s.ListStackInstancesForProvisionedProductInput,
  ): Promise<s.ListStackInstancesForProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductId: params["ProvisionedProductId"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListStackInstancesForProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StackInstances": [toStackInstance],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async listTagOptions(
    {abortSignal, ...params}: RequestConfig & s.ListTagOptionsInput = {},
  ): Promise<s.ListTagOptionsOutput> {
    const body: jsonP.JSONObject = {
      Filters: fromListTagOptionsFilters(params["Filters"]),
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagOptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetails": [toTagOptionDetail],
        "PageToken": "s",
      },
    }, await resp.json());
  }

  async provisionProduct(
    {abortSignal, ...params}: RequestConfig & s.ProvisionProductInput,
  ): Promise<s.ProvisionProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProductName: params["ProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      PathId: params["PathId"],
      PathName: params["PathName"],
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisioningParameters: params["ProvisioningParameters"]?.map(x => fromProvisioningParameter(x)),
      ProvisioningPreferences: fromProvisioningPreferences(params["ProvisioningPreferences"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      NotificationArns: params["NotificationArns"],
      ProvisionToken: params["ProvisionToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ProvisionProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async rejectPortfolioShare(
    {abortSignal, ...params}: RequestConfig & s.RejectPortfolioShareInput,
  ): Promise<s.RejectPortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      PortfolioShareType: params["PortfolioShareType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectPortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async scanProvisionedProducts(
    {abortSignal, ...params}: RequestConfig & s.ScanProvisionedProductsInput = {},
  ): Promise<s.ScanProvisionedProductsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ScanProvisionedProducts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProducts": [toProvisionedProductDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async searchProducts(
    {abortSignal, ...params}: RequestConfig & s.SearchProductsInput = {},
  ): Promise<s.SearchProductsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Filters: params["Filters"],
      PageSize: params["PageSize"],
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProducts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewSummaries": [toProductViewSummary],
        "ProductViewAggregations": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toProductViewAggregationValue) : [], x),
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async searchProductsAsAdmin(
    {abortSignal, ...params}: RequestConfig & s.SearchProductsAsAdminInput = {},
  ): Promise<s.SearchProductsAsAdminOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      Filters: params["Filters"],
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
      PageToken: params["PageToken"],
      PageSize: params["PageSize"],
      ProductSource: params["ProductSource"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProductsAsAdmin",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetails": [toProductViewDetail],
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async searchProvisionedProducts(
    {abortSignal, ...params}: RequestConfig & s.SearchProvisionedProductsInput = {},
  ): Promise<s.SearchProvisionedProductsOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      AccessLevelFilter: fromAccessLevelFilter(params["AccessLevelFilter"]),
      Filters: params["Filters"],
      SortBy: params["SortBy"],
      SortOrder: params["SortOrder"],
      PageSize: params["PageSize"],
      PageToken: params["PageToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchProvisionedProducts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProducts": [toProvisionedProductAttribute],
        "TotalResultsCount": "n",
        "NextPageToken": "s",
      },
    }, await resp.json());
  }

  async terminateProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & s.TerminateProvisionedProductInput,
  ): Promise<s.TerminateProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisionedProductId: params["ProvisionedProductId"],
      TerminateToken: params["TerminateToken"] ?? generateIdemptToken(),
      IgnoreErrors: params["IgnoreErrors"],
      AcceptLanguage: params["AcceptLanguage"],
      RetainPhysicalResources: params["RetainPhysicalResources"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async updateConstraint(
    {abortSignal, ...params}: RequestConfig & s.UpdateConstraintInput,
  ): Promise<s.UpdateConstraintOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Description: params["Description"],
      Parameters: params["Parameters"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConstraint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConstraintDetail": toConstraintDetail,
        "ConstraintParameters": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      },
    }, await resp.json());
  }

  async updatePortfolio(
    {abortSignal, ...params}: RequestConfig & s.UpdatePortfolioInput,
  ): Promise<s.UpdatePortfolioOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      DisplayName: params["DisplayName"],
      Description: params["Description"],
      ProviderName: params["ProviderName"],
      AddTags: params["AddTags"]?.map(x => fromTag(x)),
      RemoveTags: params["RemoveTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePortfolio",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioDetail": toPortfolioDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async updatePortfolioShare(
    {abortSignal, ...params}: RequestConfig & s.UpdatePortfolioShareInput,
  ): Promise<s.UpdatePortfolioShareOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      PortfolioId: params["PortfolioId"],
      AccountId: params["AccountId"],
      OrganizationNode: fromOrganizationNode(params["OrganizationNode"]),
      ShareTagOptions: params["ShareTagOptions"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePortfolioShare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortfolioShareToken": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShareStatus>(x),
      },
    }, await resp.json());
  }

  async updateProduct(
    {abortSignal, ...params}: RequestConfig & s.UpdateProductInput,
  ): Promise<s.UpdateProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      Id: params["Id"],
      Name: params["Name"],
      Owner: params["Owner"],
      Description: params["Description"],
      Distributor: params["Distributor"],
      SupportDescription: params["SupportDescription"],
      SupportEmail: params["SupportEmail"],
      SupportUrl: params["SupportUrl"],
      AddTags: params["AddTags"]?.map(x => fromTag(x)),
      RemoveTags: params["RemoveTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProductViewDetail": toProductViewDetail,
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async updateProvisionedProduct(
    {abortSignal, ...params}: RequestConfig & s.UpdateProvisionedProductInput,
  ): Promise<s.UpdateProvisionedProductOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductName: params["ProvisionedProductName"],
      ProvisionedProductId: params["ProvisionedProductId"],
      ProductId: params["ProductId"],
      ProductName: params["ProductName"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      ProvisioningArtifactName: params["ProvisioningArtifactName"],
      PathId: params["PathId"],
      PathName: params["PathName"],
      ProvisioningParameters: params["ProvisioningParameters"]?.map(x => fromUpdateProvisioningParameter(x)),
      ProvisioningPreferences: fromUpdateProvisioningPreferences(params["ProvisioningPreferences"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      UpdateToken: params["UpdateToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProvisionedProduct",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecordDetail": toRecordDetail,
      },
    }, await resp.json());
  }

  async updateProvisionedProductProperties(
    {abortSignal, ...params}: RequestConfig & s.UpdateProvisionedProductPropertiesInput,
  ): Promise<s.UpdateProvisionedProductPropertiesOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProvisionedProductId: params["ProvisionedProductId"],
      ProvisionedProductProperties: params["ProvisionedProductProperties"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProvisionedProductProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisionedProductId": "s",
        "ProvisionedProductProperties": x => jsonP.readMap(x => cmnP.readEnumReq<s.PropertyKey>(x), String, x),
        "RecordId": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecordStatus>(x),
      },
    }, await resp.json());
  }

  async updateProvisioningArtifact(
    {abortSignal, ...params}: RequestConfig & s.UpdateProvisioningArtifactInput,
  ): Promise<s.UpdateProvisioningArtifactOutput> {
    const body: jsonP.JSONObject = {
      AcceptLanguage: params["AcceptLanguage"],
      ProductId: params["ProductId"],
      ProvisioningArtifactId: params["ProvisioningArtifactId"],
      Name: params["Name"],
      Description: params["Description"],
      Active: params["Active"],
      Guidance: params["Guidance"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProvisioningArtifact",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProvisioningArtifactDetail": toProvisioningArtifactDetail,
        "Info": x => jsonP.readMap(String, String, x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      },
    }, await resp.json());
  }

  async updateServiceAction(
    {abortSignal, ...params}: RequestConfig & s.UpdateServiceActionInput,
  ): Promise<s.UpdateServiceActionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      Definition: params["Definition"],
      Description: params["Description"],
      AcceptLanguage: params["AcceptLanguage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateServiceAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceActionDetail": toServiceActionDetail,
      },
    }, await resp.json());
  }

  async updateTagOption(
    {abortSignal, ...params}: RequestConfig & s.UpdateTagOptionInput,
  ): Promise<s.UpdateTagOptionOutput> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Value: params["Value"],
      Active: params["Active"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTagOption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagOptionDetail": toTagOptionDetail,
      },
    }, await resp.json());
  }

}

function fromServiceActionAssociation(input?: s.ServiceActionAssociation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ServiceActionId: input["ServiceActionId"],
    ProductId: input["ProductId"],
    ProvisioningArtifactId: input["ProvisioningArtifactId"],
  }
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromOrganizationNode(input?: s.OrganizationNode | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Value: input["Value"],
  }
}
function toOrganizationNode(root: jsonP.JSONValue): s.OrganizationNode {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.OrganizationNodeType>(x),
      "Value": "s",
    },
  }, root);
}

function fromProvisioningArtifactProperties(input?: s.ProvisioningArtifactProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Description: input["Description"],
    Info: input["Info"],
    Type: input["Type"],
    DisableTemplateValidation: input["DisableTemplateValidation"],
  }
}

function fromUpdateProvisioningParameter(input?: s.UpdateProvisioningParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
    UsePreviousValue: input["UsePreviousValue"],
  }
}
function toUpdateProvisioningParameter(root: jsonP.JSONValue): s.UpdateProvisioningParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
      "UsePreviousValue": "b",
    },
  }, root);
}

function fromAccessLevelFilter(input?: s.AccessLevelFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

function fromListRecordHistorySearchFilter(input?: s.ListRecordHistorySearchFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

function fromListTagOptionsFilters(input?: s.ListTagOptionsFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
    Active: input["Active"],
  }
}

function fromProvisioningParameter(input?: s.ProvisioningParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

function fromProvisioningPreferences(input?: s.ProvisioningPreferences | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StackSetAccounts: input["StackSetAccounts"],
    StackSetRegions: input["StackSetRegions"],
    StackSetFailureToleranceCount: input["StackSetFailureToleranceCount"],
    StackSetFailureTolerancePercentage: input["StackSetFailureTolerancePercentage"],
    StackSetMaxConcurrencyCount: input["StackSetMaxConcurrencyCount"],
    StackSetMaxConcurrencyPercentage: input["StackSetMaxConcurrencyPercentage"],
  }
}

function fromUpdateProvisioningPreferences(input?: s.UpdateProvisioningPreferences | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StackSetAccounts: input["StackSetAccounts"],
    StackSetRegions: input["StackSetRegions"],
    StackSetFailureToleranceCount: input["StackSetFailureToleranceCount"],
    StackSetFailureTolerancePercentage: input["StackSetFailureTolerancePercentage"],
    StackSetMaxConcurrencyCount: input["StackSetMaxConcurrencyCount"],
    StackSetMaxConcurrencyPercentage: input["StackSetMaxConcurrencyPercentage"],
    StackSetOperationType: input["StackSetOperationType"],
  }
}

function toFailedServiceActionAssociation(root: jsonP.JSONValue): s.FailedServiceActionAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceActionId": "s",
      "ProductId": "s",
      "ProvisioningArtifactId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceActionAssociationErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

function toConstraintDetail(root: jsonP.JSONValue): s.ConstraintDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConstraintId": "s",
      "Type": "s",
      "Description": "s",
      "Owner": "s",
      "ProductId": "s",
      "PortfolioId": "s",
    },
  }, root);
}

function toPortfolioDetail(root: jsonP.JSONValue): s.PortfolioDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ARN": "s",
      "DisplayName": "s",
      "Description": "s",
      "CreatedTime": "d",
      "ProviderName": "s",
    },
  }, root);
}

function toProductViewDetail(root: jsonP.JSONValue): s.ProductViewDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProductViewSummary": toProductViewSummary,
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      "ProductARN": "s",
      "CreatedTime": "d",
    },
  }, root);
}

function toProductViewSummary(root: jsonP.JSONValue): s.ProductViewSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ProductId": "s",
      "Name": "s",
      "Owner": "s",
      "ShortDescription": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProductType>(x),
      "Distributor": "s",
      "HasDefaultPath": "b",
      "SupportEmail": "s",
      "SupportDescription": "s",
      "SupportUrl": "s",
    },
  }, root);
}

function toProvisioningArtifactDetail(root: jsonP.JSONValue): s.ProvisioningArtifactDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisioningArtifactType>(x),
      "CreatedTime": "d",
      "Active": "b",
      "Guidance": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisioningArtifactGuidance>(x),
    },
  }, root);
}

function toServiceActionDetail(root: jsonP.JSONValue): s.ServiceActionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceActionSummary": toServiceActionSummary,
      "Definition": x => jsonP.readMap(x => cmnP.readEnumReq<s.ServiceActionDefinitionKey>(x), String, x),
    },
  }, root);
}

function toServiceActionSummary(root: jsonP.JSONValue): s.ServiceActionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "DefinitionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceActionDefinitionType>(x),
    },
  }, root);
}

function toTagOptionDetail(root: jsonP.JSONValue): s.TagOptionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
      "Active": "b",
      "Id": "s",
      "Owner": "s",
    },
  }, root);
}

function toBudgetDetail(root: jsonP.JSONValue): s.BudgetDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "BudgetName": "s",
    },
  }, root);
}

function toShareDetails(root: jsonP.JSONValue): s.ShareDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "SuccessfulShares": ["s"],
      "ShareErrors": [toShareError],
    },
  }, root);
}

function toShareError(root: jsonP.JSONValue): s.ShareError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Accounts": ["s"],
      "Message": "s",
      "Error": "s",
    },
  }, root);
}

function toPortfolioShareDetail(root: jsonP.JSONValue): s.PortfolioShareDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrincipalId": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.DescribePortfolioShareType>(x),
      "Accepted": "b",
      "ShareTagOptions": "b",
    },
  }, root);
}

function toProvisioningArtifact(root: jsonP.JSONValue): s.ProvisioningArtifact {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "CreatedTime": "d",
      "Guidance": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisioningArtifactGuidance>(x),
    },
  }, root);
}

function toLaunchPath(root: jsonP.JSONValue): s.LaunchPath {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
    },
  }, root);
}

function toProvisioningArtifactSummary(root: jsonP.JSONValue): s.ProvisioningArtifactSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "CreatedTime": "d",
      "ProvisioningArtifactMetadata": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toProvisionedProductDetail(root: jsonP.JSONValue): s.ProvisionedProductDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
      "Type": "s",
      "Id": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisionedProductStatus>(x),
      "StatusMessage": "s",
      "CreatedTime": "d",
      "IdempotencyToken": "s",
      "LastRecordId": "s",
      "LastProvisioningRecordId": "s",
      "LastSuccessfulProvisioningRecordId": "s",
      "ProductId": "s",
      "ProvisioningArtifactId": "s",
      "LaunchRoleArn": "s",
    },
  }, root);
}

function toCloudWatchDashboard(root: jsonP.JSONValue): s.CloudWatchDashboard {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}

function toProvisionedProductPlanDetails(root: jsonP.JSONValue): s.ProvisionedProductPlanDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedTime": "d",
      "PathId": "s",
      "ProductId": "s",
      "PlanName": "s",
      "PlanId": "s",
      "ProvisionProductId": "s",
      "ProvisionProductName": "s",
      "PlanType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisionedProductPlanType>(x),
      "ProvisioningArtifactId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisionedProductPlanStatus>(x),
      "UpdatedTime": "d",
      "NotificationArns": ["s"],
      "ProvisioningParameters": [toUpdateProvisioningParameter],
      "Tags": [toTag],
      "StatusMessage": "s",
    },
  }, root);
}

function toResourceChange(root: jsonP.JSONValue): s.ResourceChange {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChangeAction>(x),
      "LogicalResourceId": "s",
      "PhysicalResourceId": "s",
      "ResourceType": "s",
      "Replacement": (x: jsonP.JSONValue) => cmnP.readEnum<s.Replacement>(x),
      "Scope": [(x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceAttribute>(x)],
      "Details": [toResourceChangeDetail],
    },
  }, root);
}

function toResourceChangeDetail(root: jsonP.JSONValue): s.ResourceChangeDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Target": toResourceTargetDefinition,
      "Evaluation": (x: jsonP.JSONValue) => cmnP.readEnum<s.EvaluationType>(x),
      "CausingEntity": "s",
    },
  }, root);
}

function toResourceTargetDefinition(root: jsonP.JSONValue): s.ResourceTargetDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attribute": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceAttribute>(x),
      "Name": "s",
      "RequiresRecreation": (x: jsonP.JSONValue) => cmnP.readEnum<s.RequiresRecreation>(x),
    },
  }, root);
}

function toProvisioningArtifactParameter(root: jsonP.JSONValue): s.ProvisioningArtifactParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "ParameterKey": "s",
      "DefaultValue": "s",
      "ParameterType": "s",
      "IsNoEcho": "b",
      "Description": "s",
      "ParameterConstraints": toParameterConstraints,
    },
  }, root);
}

function toParameterConstraints(root: jsonP.JSONValue): s.ParameterConstraints {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowedValues": ["s"],
      "AllowedPattern": "s",
      "ConstraintDescription": "s",
      "MaxLength": "s",
      "MinLength": "s",
      "MaxValue": "s",
      "MinValue": "s",
    },
  }, root);
}

function toConstraintSummary(root: jsonP.JSONValue): s.ConstraintSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Description": "s",
    },
  }, root);
}

function toUsageInstruction(root: jsonP.JSONValue): s.UsageInstruction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Value": "s",
    },
  }, root);
}

function toTagOptionSummary(root: jsonP.JSONValue): s.TagOptionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Values": ["s"],
    },
  }, root);
}

function toProvisioningArtifactPreferences(root: jsonP.JSONValue): s.ProvisioningArtifactPreferences {
  return jsonP.readObj({
    required: {},
    optional: {
      "StackSetAccounts": ["s"],
      "StackSetRegions": ["s"],
    },
  }, root);
}

function toProvisioningArtifactOutput(root: jsonP.JSONValue): s.ProvisioningArtifactOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Description": "s",
    },
  }, root);
}

function toRecordDetail(root: jsonP.JSONValue): s.RecordDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "RecordId": "s",
      "ProvisionedProductName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecordStatus>(x),
      "CreatedTime": "d",
      "UpdatedTime": "d",
      "ProvisionedProductType": "s",
      "RecordType": "s",
      "ProvisionedProductId": "s",
      "ProductId": "s",
      "ProvisioningArtifactId": "s",
      "PathId": "s",
      "RecordErrors": [toRecordError],
      "RecordTags": [toRecordTag],
      "LaunchRoleArn": "s",
    },
  }, root);
}

function toRecordError(root: jsonP.JSONValue): s.RecordError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": "s",
      "Description": "s",
    },
  }, root);
}

function toRecordTag(root: jsonP.JSONValue): s.RecordTag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

function toRecordOutput(root: jsonP.JSONValue): s.RecordOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutputKey": "s",
      "OutputValue": "s",
      "Description": "s",
    },
  }, root);
}

function toExecutionParameter(root: jsonP.JSONValue): s.ExecutionParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": "s",
      "DefaultValues": ["s"],
    },
  }, root);
}

function toLaunchPathSummary(root: jsonP.JSONValue): s.LaunchPathSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ConstraintSummaries": [toConstraintSummary],
      "Tags": [toTag],
      "Name": "s",
    },
  }, root);
}

function toPrincipal(root: jsonP.JSONValue): s.Principal {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrincipalARN": "s",
      "PrincipalType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PrincipalType>(x),
    },
  }, root);
}

function toProvisionedProductPlanSummary(root: jsonP.JSONValue): s.ProvisionedProductPlanSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "PlanName": "s",
      "PlanId": "s",
      "ProvisionProductId": "s",
      "ProvisionProductName": "s",
      "PlanType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisionedProductPlanType>(x),
      "ProvisioningArtifactId": "s",
    },
  }, root);
}

function toProvisioningArtifactView(root: jsonP.JSONValue): s.ProvisioningArtifactView {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProductViewSummary": toProductViewSummary,
      "ProvisioningArtifact": toProvisioningArtifact,
    },
  }, root);
}

function toResourceDetail(root: jsonP.JSONValue): s.ResourceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ARN": "s",
      "Name": "s",
      "Description": "s",
      "CreatedTime": "d",
    },
  }, root);
}

function toStackInstance(root: jsonP.JSONValue): s.StackInstance {
  return jsonP.readObj({
    required: {},
    optional: {
      "Account": "s",
      "Region": "s",
      "StackInstanceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.StackInstanceStatus>(x),
    },
  }, root);
}

function toProductViewAggregationValue(root: jsonP.JSONValue): s.ProductViewAggregationValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
      "ApproximateCount": "n",
    },
  }, root);
}

function toProvisionedProductAttribute(root: jsonP.JSONValue): s.ProvisionedProductAttribute {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
      "Type": "s",
      "Id": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProvisionedProductStatus>(x),
      "StatusMessage": "s",
      "CreatedTime": "d",
      "IdempotencyToken": "s",
      "LastRecordId": "s",
      "LastProvisioningRecordId": "s",
      "LastSuccessfulProvisioningRecordId": "s",
      "Tags": [toTag],
      "PhysicalId": "s",
      "ProductId": "s",
      "ProductName": "s",
      "ProvisioningArtifactId": "s",
      "ProvisioningArtifactName": "s",
      "UserArn": "s",
      "UserArnSession": "s",
    },
  }, root);
}
