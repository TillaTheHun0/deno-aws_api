// Autogenerated API client for: Amazon Import/Export Snowball

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Snowball {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Snowball.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2016-06-30",
    "endpointPrefix": "snowball",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Amazon Snowball",
    "serviceFullName": "Amazon Import/Export Snowball",
    "serviceId": "Snowball",
    "signatureVersion": "v4",
    "targetPrefix": "AWSIESnowballJobManagementService",
    "uid": "snowball-2016-06-30"
  };

  async cancelCluster(
    {abortSignal, ...params}: RequestConfig & s.CancelClusterRequest,
  ): Promise<s.CancelClusterResult> {
    const body: jsonP.JSONObject = {
      ClusterId: params["ClusterId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelCluster",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelJob(
    {abortSignal, ...params}: RequestConfig & s.CancelJobRequest,
  ): Promise<s.CancelJobResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAddress(
    {abortSignal, ...params}: RequestConfig & s.CreateAddressRequest,
  ): Promise<s.CreateAddressResult> {
    const body: jsonP.JSONObject = {
      Address: fromAddress(params["Address"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAddress",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AddressId": "s",
      },
    }, await resp.json());
  }

  async createCluster(
    {abortSignal, ...params}: RequestConfig & s.CreateClusterRequest,
  ): Promise<s.CreateClusterResult> {
    const body: jsonP.JSONObject = {
      JobType: params["JobType"],
      Resources: fromJobResource(params["Resources"]),
      Description: params["Description"],
      AddressId: params["AddressId"],
      KmsKeyARN: params["KmsKeyARN"],
      RoleARN: params["RoleARN"],
      SnowballType: params["SnowballType"],
      ShippingOption: params["ShippingOption"],
      Notification: fromNotification(params["Notification"]),
      ForwardingAddressId: params["ForwardingAddressId"],
      TaxDocuments: fromTaxDocuments(params["TaxDocuments"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCluster",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClusterId": "s",
      },
    }, await resp.json());
  }

  async createJob(
    {abortSignal, ...params}: RequestConfig & s.CreateJobRequest = {},
  ): Promise<s.CreateJobResult> {
    const body: jsonP.JSONObject = {
      JobType: params["JobType"],
      Resources: fromJobResource(params["Resources"]),
      Description: params["Description"],
      AddressId: params["AddressId"],
      KmsKeyARN: params["KmsKeyARN"],
      RoleARN: params["RoleARN"],
      SnowballCapacityPreference: params["SnowballCapacityPreference"],
      ShippingOption: params["ShippingOption"],
      Notification: fromNotification(params["Notification"]),
      ClusterId: params["ClusterId"],
      SnowballType: params["SnowballType"],
      ForwardingAddressId: params["ForwardingAddressId"],
      TaxDocuments: fromTaxDocuments(params["TaxDocuments"]),
      DeviceConfiguration: fromDeviceConfiguration(params["DeviceConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async createReturnShippingLabel(
    {abortSignal, ...params}: RequestConfig & s.CreateReturnShippingLabelRequest,
  ): Promise<s.CreateReturnShippingLabelResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
      ShippingOption: params["ShippingOption"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateReturnShippingLabel",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShippingLabelStatus>(x),
      },
    }, await resp.json());
  }

  async describeAddress(
    {abortSignal, ...params}: RequestConfig & s.DescribeAddressRequest,
  ): Promise<s.DescribeAddressResult> {
    const body: jsonP.JSONObject = {
      AddressId: params["AddressId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAddress",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Address": toAddress,
      },
    }, await resp.json());
  }

  async describeAddresses(
    {abortSignal, ...params}: RequestConfig & s.DescribeAddressesRequest = {},
  ): Promise<s.DescribeAddressesResult> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAddresses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Addresses": [toAddress],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeCluster(
    {abortSignal, ...params}: RequestConfig & s.DescribeClusterRequest,
  ): Promise<s.DescribeClusterResult> {
    const body: jsonP.JSONObject = {
      ClusterId: params["ClusterId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCluster",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClusterMetadata": toClusterMetadata,
      },
    }, await resp.json());
  }

  async describeJob(
    {abortSignal, ...params}: RequestConfig & s.DescribeJobRequest,
  ): Promise<s.DescribeJobResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobMetadata": toJobMetadata,
        "SubJobMetadata": [toJobMetadata],
      },
    }, await resp.json());
  }

  async describeReturnShippingLabel(
    {abortSignal, ...params}: RequestConfig & s.DescribeReturnShippingLabelRequest = {},
  ): Promise<s.DescribeReturnShippingLabelResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeReturnShippingLabel",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShippingLabelStatus>(x),
        "ExpirationDate": "d",
      },
    }, await resp.json());
  }

  async getJobManifest(
    {abortSignal, ...params}: RequestConfig & s.GetJobManifestRequest,
  ): Promise<s.GetJobManifestResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetJobManifest",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ManifestURI": "s",
      },
    }, await resp.json());
  }

  async getJobUnlockCode(
    {abortSignal, ...params}: RequestConfig & s.GetJobUnlockCodeRequest,
  ): Promise<s.GetJobUnlockCodeResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetJobUnlockCode",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UnlockCode": "s",
      },
    }, await resp.json());
  }

  async getSnowballUsage(
    {abortSignal, ...params}: RequestConfig & s.GetSnowballUsageRequest = {},
  ): Promise<s.GetSnowballUsageResult> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSnowballUsage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SnowballLimit": "n",
        "SnowballsInUse": "n",
      },
    }, await resp.json());
  }

  async getSoftwareUpdates(
    {abortSignal, ...params}: RequestConfig & s.GetSoftwareUpdatesRequest,
  ): Promise<s.GetSoftwareUpdatesResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSoftwareUpdates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UpdatesURI": "s",
      },
    }, await resp.json());
  }

  async listClusterJobs(
    {abortSignal, ...params}: RequestConfig & s.ListClusterJobsRequest,
  ): Promise<s.ListClusterJobsResult> {
    const body: jsonP.JSONObject = {
      ClusterId: params["ClusterId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListClusterJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobListEntries": [toJobListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listClusters(
    {abortSignal, ...params}: RequestConfig & s.ListClustersRequest = {},
  ): Promise<s.ListClustersResult> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListClusters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClusterListEntries": [toClusterListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCompatibleImages(
    {abortSignal, ...params}: RequestConfig & s.ListCompatibleImagesRequest = {},
  ): Promise<s.ListCompatibleImagesResult> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCompatibleImages",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CompatibleImages": [toCompatibleImage],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & s.ListJobsRequest = {},
  ): Promise<s.ListJobsResult> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobListEntries": [toJobListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async updateCluster(
    {abortSignal, ...params}: RequestConfig & s.UpdateClusterRequest,
  ): Promise<s.UpdateClusterResult> {
    const body: jsonP.JSONObject = {
      ClusterId: params["ClusterId"],
      RoleARN: params["RoleARN"],
      Description: params["Description"],
      Resources: fromJobResource(params["Resources"]),
      AddressId: params["AddressId"],
      ShippingOption: params["ShippingOption"],
      Notification: fromNotification(params["Notification"]),
      ForwardingAddressId: params["ForwardingAddressId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCluster",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateJob(
    {abortSignal, ...params}: RequestConfig & s.UpdateJobRequest,
  ): Promise<s.UpdateJobResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
      RoleARN: params["RoleARN"],
      Notification: fromNotification(params["Notification"]),
      Resources: fromJobResource(params["Resources"]),
      AddressId: params["AddressId"],
      ShippingOption: params["ShippingOption"],
      Description: params["Description"],
      SnowballCapacityPreference: params["SnowballCapacityPreference"],
      ForwardingAddressId: params["ForwardingAddressId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateJobShipmentState(
    {abortSignal, ...params}: RequestConfig & s.UpdateJobShipmentStateRequest,
  ): Promise<s.UpdateJobShipmentStateResult> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
      ShipmentState: params["ShipmentState"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateJobShipmentState",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromAddress(input?: s.Address | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AddressId: input["AddressId"],
    Name: input["Name"],
    Company: input["Company"],
    Street1: input["Street1"],
    Street2: input["Street2"],
    Street3: input["Street3"],
    City: input["City"],
    StateOrProvince: input["StateOrProvince"],
    PrefectureOrDistrict: input["PrefectureOrDistrict"],
    Landmark: input["Landmark"],
    Country: input["Country"],
    PostalCode: input["PostalCode"],
    PhoneNumber: input["PhoneNumber"],
    IsRestricted: input["IsRestricted"],
  }
}
function toAddress(root: jsonP.JSONValue): s.Address {
  return jsonP.readObj({
    required: {},
    optional: {
      "AddressId": "s",
      "Name": "s",
      "Company": "s",
      "Street1": "s",
      "Street2": "s",
      "Street3": "s",
      "City": "s",
      "StateOrProvince": "s",
      "PrefectureOrDistrict": "s",
      "Landmark": "s",
      "Country": "s",
      "PostalCode": "s",
      "PhoneNumber": "s",
      "IsRestricted": "b",
    },
  }, root);
}

function fromJobResource(input?: s.JobResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Resources: input["S3Resources"]?.map(x => fromS3Resource(x)),
    LambdaResources: input["LambdaResources"]?.map(x => fromLambdaResource(x)),
    Ec2AmiResources: input["Ec2AmiResources"]?.map(x => fromEc2AmiResource(x)),
  }
}
function toJobResource(root: jsonP.JSONValue): s.JobResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Resources": [toS3Resource],
      "LambdaResources": [toLambdaResource],
      "Ec2AmiResources": [toEc2AmiResource],
    },
  }, root);
}

function fromS3Resource(input?: s.S3Resource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketArn: input["BucketArn"],
    KeyRange: fromKeyRange(input["KeyRange"]),
  }
}
function toS3Resource(root: jsonP.JSONValue): s.S3Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "BucketArn": "s",
      "KeyRange": toKeyRange,
    },
  }, root);
}

function fromKeyRange(input?: s.KeyRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BeginMarker: input["BeginMarker"],
    EndMarker: input["EndMarker"],
  }
}
function toKeyRange(root: jsonP.JSONValue): s.KeyRange {
  return jsonP.readObj({
    required: {},
    optional: {
      "BeginMarker": "s",
      "EndMarker": "s",
    },
  }, root);
}

function fromLambdaResource(input?: s.LambdaResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LambdaArn: input["LambdaArn"],
    EventTriggers: input["EventTriggers"]?.map(x => fromEventTriggerDefinition(x)),
  }
}
function toLambdaResource(root: jsonP.JSONValue): s.LambdaResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "LambdaArn": "s",
      "EventTriggers": [toEventTriggerDefinition],
    },
  }, root);
}

function fromEventTriggerDefinition(input?: s.EventTriggerDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EventResourceARN: input["EventResourceARN"],
  }
}
function toEventTriggerDefinition(root: jsonP.JSONValue): s.EventTriggerDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventResourceARN": "s",
    },
  }, root);
}

function fromEc2AmiResource(input?: s.Ec2AmiResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AmiId: input["AmiId"],
    SnowballAmiId: input["SnowballAmiId"],
  }
}
function toEc2AmiResource(root: jsonP.JSONValue): s.Ec2AmiResource {
  return jsonP.readObj({
    required: {
      "AmiId": "s",
    },
    optional: {
      "SnowballAmiId": "s",
    },
  }, root);
}

function fromNotification(input?: s.Notification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnsTopicARN: input["SnsTopicARN"],
    JobStatesToNotify: input["JobStatesToNotify"],
    NotifyAll: input["NotifyAll"],
  }
}
function toNotification(root: jsonP.JSONValue): s.Notification {
  return jsonP.readObj({
    required: {},
    optional: {
      "SnsTopicARN": "s",
      "JobStatesToNotify": [(x: jsonP.JSONValue) => cmnP.readEnum<s.JobState>(x)],
      "NotifyAll": "b",
    },
  }, root);
}

function fromTaxDocuments(input?: s.TaxDocuments | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IND: fromINDTaxDocuments(input["IND"]),
  }
}
function toTaxDocuments(root: jsonP.JSONValue): s.TaxDocuments {
  return jsonP.readObj({
    required: {},
    optional: {
      "IND": toINDTaxDocuments,
    },
  }, root);
}

function fromINDTaxDocuments(input?: s.INDTaxDocuments | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GSTIN: input["GSTIN"],
  }
}
function toINDTaxDocuments(root: jsonP.JSONValue): s.INDTaxDocuments {
  return jsonP.readObj({
    required: {},
    optional: {
      "GSTIN": "s",
    },
  }, root);
}

function fromDeviceConfiguration(input?: s.DeviceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnowconeDeviceConfiguration: fromSnowconeDeviceConfiguration(input["SnowconeDeviceConfiguration"]),
  }
}
function toDeviceConfiguration(root: jsonP.JSONValue): s.DeviceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "SnowconeDeviceConfiguration": toSnowconeDeviceConfiguration,
    },
  }, root);
}

function fromSnowconeDeviceConfiguration(input?: s.SnowconeDeviceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WirelessConnection: fromWirelessConnection(input["WirelessConnection"]),
  }
}
function toSnowconeDeviceConfiguration(root: jsonP.JSONValue): s.SnowconeDeviceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "WirelessConnection": toWirelessConnection,
    },
  }, root);
}

function fromWirelessConnection(input?: s.WirelessConnection | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsWifiEnabled: input["IsWifiEnabled"],
  }
}
function toWirelessConnection(root: jsonP.JSONValue): s.WirelessConnection {
  return jsonP.readObj({
    required: {},
    optional: {
      "IsWifiEnabled": "b",
    },
  }, root);
}

function toClusterMetadata(root: jsonP.JSONValue): s.ClusterMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "ClusterId": "s",
      "Description": "s",
      "KmsKeyARN": "s",
      "RoleARN": "s",
      "ClusterState": (x: jsonP.JSONValue) => cmnP.readEnum<s.ClusterState>(x),
      "JobType": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobType>(x),
      "SnowballType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SnowballType>(x),
      "CreationDate": "d",
      "Resources": toJobResource,
      "AddressId": "s",
      "ShippingOption": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShippingOption>(x),
      "Notification": toNotification,
      "ForwardingAddressId": "s",
      "TaxDocuments": toTaxDocuments,
    },
  }, root);
}

function toJobMetadata(root: jsonP.JSONValue): s.JobMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobState": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobState>(x),
      "JobType": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobType>(x),
      "SnowballType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SnowballType>(x),
      "CreationDate": "d",
      "Resources": toJobResource,
      "Description": "s",
      "KmsKeyARN": "s",
      "RoleARN": "s",
      "AddressId": "s",
      "ShippingDetails": toShippingDetails,
      "SnowballCapacityPreference": (x: jsonP.JSONValue) => cmnP.readEnum<s.SnowballCapacity>(x),
      "Notification": toNotification,
      "DataTransferProgress": toDataTransfer,
      "JobLogInfo": toJobLogs,
      "ClusterId": "s",
      "ForwardingAddressId": "s",
      "TaxDocuments": toTaxDocuments,
      "DeviceConfiguration": toDeviceConfiguration,
    },
  }, root);
}

function toShippingDetails(root: jsonP.JSONValue): s.ShippingDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "ShippingOption": (x: jsonP.JSONValue) => cmnP.readEnum<s.ShippingOption>(x),
      "InboundShipment": toShipment,
      "OutboundShipment": toShipment,
    },
  }, root);
}

function toShipment(root: jsonP.JSONValue): s.Shipment {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": "s",
      "TrackingNumber": "s",
    },
  }, root);
}

function toDataTransfer(root: jsonP.JSONValue): s.DataTransfer {
  return jsonP.readObj({
    required: {},
    optional: {
      "BytesTransferred": "n",
      "ObjectsTransferred": "n",
      "TotalBytes": "n",
      "TotalObjects": "n",
    },
  }, root);
}

function toJobLogs(root: jsonP.JSONValue): s.JobLogs {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobCompletionReportURI": "s",
      "JobSuccessLogURI": "s",
      "JobFailureLogURI": "s",
    },
  }, root);
}

function toJobListEntry(root: jsonP.JSONValue): s.JobListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobState": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobState>(x),
      "IsMaster": "b",
      "JobType": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobType>(x),
      "SnowballType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SnowballType>(x),
      "CreationDate": "d",
      "Description": "s",
    },
  }, root);
}

function toClusterListEntry(root: jsonP.JSONValue): s.ClusterListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "ClusterId": "s",
      "ClusterState": (x: jsonP.JSONValue) => cmnP.readEnum<s.ClusterState>(x),
      "CreationDate": "d",
      "Description": "s",
    },
  }, root);
}

function toCompatibleImage(root: jsonP.JSONValue): s.CompatibleImage {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmiId": "s",
      "Name": "s",
    },
  }, root);
}
