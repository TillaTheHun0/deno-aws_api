// Autogenerated API client for: Amazon Pinpoint

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Pinpoint {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Pinpoint.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-12-01",
    "endpointPrefix": "pinpoint",
    "signingName": "mobiletargeting",
    "serviceFullName": "Amazon Pinpoint",
    "serviceId": "Pinpoint",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "pinpoint-2016-12-01",
    "signatureVersion": "v4"
  };

  async createApp(
    {abortSignal, ...params}: RequestConfig & CreateAppRequest,
  ): Promise<CreateAppResponse> {
    const inner = params["CreateApplicationRequest"];
    const body: jsonP.JSONObject = inner ? {
      Name: inner["Name"],
      tags: inner["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApp",
      requestUri: "/v1/apps",
      responseCode: 201,
    });
  return {
    ApplicationResponse: toApplicationResponse(await resp.json()),
  };
  }

  async createCampaign(
    {abortSignal, ...params}: RequestConfig & CreateCampaignRequest,
  ): Promise<CreateCampaignResponse> {
    const inner = params["WriteCampaignRequest"];
    const body: jsonP.JSONObject = inner ? {
      AdditionalTreatments: inner["AdditionalTreatments"]?.map(x => fromWriteTreatmentResource(x)),
      CustomDeliveryConfiguration: fromCustomDeliveryConfiguration(inner["CustomDeliveryConfiguration"]),
      Description: inner["Description"],
      HoldoutPercent: inner["HoldoutPercent"],
      Hook: fromCampaignHook(inner["Hook"]),
      IsPaused: inner["IsPaused"],
      Limits: fromCampaignLimits(inner["Limits"]),
      MessageConfiguration: fromMessageConfiguration(inner["MessageConfiguration"]),
      Name: inner["Name"],
      Schedule: fromSchedule(inner["Schedule"]),
      SegmentId: inner["SegmentId"],
      SegmentVersion: inner["SegmentVersion"],
      tags: inner["tags"],
      TemplateConfiguration: fromTemplateConfiguration(inner["TemplateConfiguration"]),
      TreatmentDescription: inner["TreatmentDescription"],
      TreatmentName: inner["TreatmentName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCampaign",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns`,
      responseCode: 201,
    });
  return {
    CampaignResponse: toCampaignResponse(await resp.json()),
  };
  }

  async createEmailTemplate(
    {abortSignal, ...params}: RequestConfig & CreateEmailTemplateRequest,
  ): Promise<CreateEmailTemplateResponse> {
    const inner = params["EmailTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      HtmlPart: inner["HtmlPart"],
      RecommenderId: inner["RecommenderId"],
      Subject: inner["Subject"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
      TextPart: inner["TextPart"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEmailTemplate",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/email`,
      responseCode: 201,
    });
  return {
    CreateTemplateMessageBody: toCreateTemplateMessageBody(await resp.json()),
  };
  }

  async createExportJob(
    {abortSignal, ...params}: RequestConfig & CreateExportJobRequest,
  ): Promise<CreateExportJobResponse> {
    const inner = params["ExportJobRequest"];
    const body: jsonP.JSONObject = inner ? {
      RoleArn: inner["RoleArn"],
      S3UrlPrefix: inner["S3UrlPrefix"],
      SegmentId: inner["SegmentId"],
      SegmentVersion: inner["SegmentVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateExportJob",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/jobs/export`,
      responseCode: 202,
    });
  return {
    ExportJobResponse: toExportJobResponse(await resp.json()),
  };
  }

  async createImportJob(
    {abortSignal, ...params}: RequestConfig & CreateImportJobRequest,
  ): Promise<CreateImportJobResponse> {
    const inner = params["ImportJobRequest"];
    const body: jsonP.JSONObject = inner ? {
      DefineSegment: inner["DefineSegment"],
      ExternalId: inner["ExternalId"],
      Format: inner["Format"],
      RegisterEndpoints: inner["RegisterEndpoints"],
      RoleArn: inner["RoleArn"],
      S3Url: inner["S3Url"],
      SegmentId: inner["SegmentId"],
      SegmentName: inner["SegmentName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateImportJob",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/jobs/import`,
      responseCode: 201,
    });
  return {
    ImportJobResponse: toImportJobResponse(await resp.json()),
  };
  }

  async createJourney(
    {abortSignal, ...params}: RequestConfig & CreateJourneyRequest,
  ): Promise<CreateJourneyResponse> {
    const inner = params["WriteJourneyRequest"];
    const body: jsonP.JSONObject = inner ? {
      Activities: jsonP.serializeMap(inner["Activities"], x => fromActivity(x)),
      CreationDate: inner["CreationDate"],
      LastModifiedDate: inner["LastModifiedDate"],
      Limits: fromJourneyLimits(inner["Limits"]),
      LocalTime: inner["LocalTime"],
      Name: inner["Name"],
      QuietTime: fromQuietTime(inner["QuietTime"]),
      RefreshFrequency: inner["RefreshFrequency"],
      Schedule: fromJourneySchedule(inner["Schedule"]),
      StartActivity: inner["StartActivity"],
      StartCondition: fromStartCondition(inner["StartCondition"]),
      State: inner["State"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateJourney",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys`,
      responseCode: 201,
    });
  return {
    JourneyResponse: toJourneyResponse(await resp.json()),
  };
  }

  async createPushTemplate(
    {abortSignal, ...params}: RequestConfig & CreatePushTemplateRequest,
  ): Promise<CreatePushTemplateResponse> {
    const inner = params["PushNotificationTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      ADM: fromAndroidPushNotificationTemplate(inner["ADM"]),
      APNS: fromAPNSPushNotificationTemplate(inner["APNS"]),
      Baidu: fromAndroidPushNotificationTemplate(inner["Baidu"]),
      Default: fromDefaultPushNotificationTemplate(inner["Default"]),
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      GCM: fromAndroidPushNotificationTemplate(inner["GCM"]),
      RecommenderId: inner["RecommenderId"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePushTemplate",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/push`,
      responseCode: 201,
    });
  return {
    CreateTemplateMessageBody: toCreateTemplateMessageBody(await resp.json()),
  };
  }

  async createRecommenderConfiguration(
    {abortSignal, ...params}: RequestConfig & CreateRecommenderConfigurationRequest,
  ): Promise<CreateRecommenderConfigurationResponse> {
    const inner = params["CreateRecommenderConfiguration"];
    const body: jsonP.JSONObject = inner ? {
      Attributes: inner["Attributes"],
      Description: inner["Description"],
      Name: inner["Name"],
      RecommendationProviderIdType: inner["RecommendationProviderIdType"],
      RecommendationProviderRoleArn: inner["RecommendationProviderRoleArn"],
      RecommendationProviderUri: inner["RecommendationProviderUri"],
      RecommendationTransformerUri: inner["RecommendationTransformerUri"],
      RecommendationsDisplayName: inner["RecommendationsDisplayName"],
      RecommendationsPerMessage: inner["RecommendationsPerMessage"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRecommenderConfiguration",
      requestUri: "/v1/recommenders",
      responseCode: 201,
    });
  return {
    RecommenderConfigurationResponse: toRecommenderConfigurationResponse(await resp.json()),
  };
  }

  async createSegment(
    {abortSignal, ...params}: RequestConfig & CreateSegmentRequest,
  ): Promise<CreateSegmentResponse> {
    const inner = params["WriteSegmentRequest"];
    const body: jsonP.JSONObject = inner ? {
      Dimensions: fromSegmentDimensions(inner["Dimensions"]),
      Name: inner["Name"],
      SegmentGroups: fromSegmentGroupList(inner["SegmentGroups"]),
      tags: inner["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSegment",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments`,
      responseCode: 201,
    });
  return {
    SegmentResponse: toSegmentResponse(await resp.json()),
  };
  }

  async createSmsTemplate(
    {abortSignal, ...params}: RequestConfig & CreateSmsTemplateRequest,
  ): Promise<CreateSmsTemplateResponse> {
    const inner = params["SMSTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      Body: inner["Body"],
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      RecommenderId: inner["RecommenderId"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSmsTemplate",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/sms`,
      responseCode: 201,
    });
  return {
    CreateTemplateMessageBody: toCreateTemplateMessageBody(await resp.json()),
  };
  }

  async createVoiceTemplate(
    {abortSignal, ...params}: RequestConfig & CreateVoiceTemplateRequest,
  ): Promise<CreateVoiceTemplateResponse> {
    const inner = params["VoiceTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      Body: inner["Body"],
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      LanguageCode: inner["LanguageCode"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
      VoiceId: inner["VoiceId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVoiceTemplate",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/voice`,
      responseCode: 201,
    });
  return {
    CreateTemplateMessageBody: toCreateTemplateMessageBody(await resp.json()),
  };
  }

  async deleteAdmChannel(
    {abortSignal, ...params}: RequestConfig & DeleteAdmChannelRequest,
  ): Promise<DeleteAdmChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAdmChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/adm`,
      responseCode: 200,
    });
  return {
    ADMChannelResponse: toADMChannelResponse(await resp.json()),
  };
  }

  async deleteApnsChannel(
    {abortSignal, ...params}: RequestConfig & DeleteApnsChannelRequest,
  ): Promise<DeleteApnsChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApnsChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns`,
      responseCode: 200,
    });
  return {
    APNSChannelResponse: toAPNSChannelResponse(await resp.json()),
  };
  }

  async deleteApnsSandboxChannel(
    {abortSignal, ...params}: RequestConfig & DeleteApnsSandboxChannelRequest,
  ): Promise<DeleteApnsSandboxChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApnsSandboxChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_sandbox`,
      responseCode: 200,
    });
  return {
    APNSSandboxChannelResponse: toAPNSSandboxChannelResponse(await resp.json()),
  };
  }

  async deleteApnsVoipChannel(
    {abortSignal, ...params}: RequestConfig & DeleteApnsVoipChannelRequest,
  ): Promise<DeleteApnsVoipChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApnsVoipChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_voip`,
      responseCode: 200,
    });
  return {
    APNSVoipChannelResponse: toAPNSVoipChannelResponse(await resp.json()),
  };
  }

  async deleteApnsVoipSandboxChannel(
    {abortSignal, ...params}: RequestConfig & DeleteApnsVoipSandboxChannelRequest,
  ): Promise<DeleteApnsVoipSandboxChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApnsVoipSandboxChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_voip_sandbox`,
      responseCode: 200,
    });
  return {
    APNSVoipSandboxChannelResponse: toAPNSVoipSandboxChannelResponse(await resp.json()),
  };
  }

  async deleteApp(
    {abortSignal, ...params}: RequestConfig & DeleteAppRequest,
  ): Promise<DeleteAppResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApp",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}`,
      responseCode: 200,
    });
  return {
    ApplicationResponse: toApplicationResponse(await resp.json()),
  };
  }

  async deleteBaiduChannel(
    {abortSignal, ...params}: RequestConfig & DeleteBaiduChannelRequest,
  ): Promise<DeleteBaiduChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBaiduChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/baidu`,
      responseCode: 200,
    });
  return {
    BaiduChannelResponse: toBaiduChannelResponse(await resp.json()),
  };
  }

  async deleteCampaign(
    {abortSignal, ...params}: RequestConfig & DeleteCampaignRequest,
  ): Promise<DeleteCampaignResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCampaign",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns/${params["CampaignId"]}`,
      responseCode: 200,
    });
  return {
    CampaignResponse: toCampaignResponse(await resp.json()),
  };
  }

  async deleteEmailChannel(
    {abortSignal, ...params}: RequestConfig & DeleteEmailChannelRequest,
  ): Promise<DeleteEmailChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEmailChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/email`,
      responseCode: 200,
    });
  return {
    EmailChannelResponse: toEmailChannelResponse(await resp.json()),
  };
  }

  async deleteEmailTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteEmailTemplateRequest,
  ): Promise<DeleteEmailTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteEmailTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/email`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async deleteEndpoint(
    {abortSignal, ...params}: RequestConfig & DeleteEndpointRequest,
  ): Promise<DeleteEndpointResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEndpoint",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/endpoints/${params["EndpointId"]}`,
      responseCode: 202,
    });
  return {
    EndpointResponse: toEndpointResponse(await resp.json()),
  };
  }

  async deleteEventStream(
    {abortSignal, ...params}: RequestConfig & DeleteEventStreamRequest,
  ): Promise<DeleteEventStreamResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEventStream",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/eventstream`,
      responseCode: 200,
    });
  return {
    EventStream: toEventStream(await resp.json()),
  };
  }

  async deleteGcmChannel(
    {abortSignal, ...params}: RequestConfig & DeleteGcmChannelRequest,
  ): Promise<DeleteGcmChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGcmChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/gcm`,
      responseCode: 200,
    });
  return {
    GCMChannelResponse: toGCMChannelResponse(await resp.json()),
  };
  }

  async deleteJourney(
    {abortSignal, ...params}: RequestConfig & DeleteJourneyRequest,
  ): Promise<DeleteJourneyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteJourney",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys/${params["JourneyId"]}`,
      responseCode: 200,
    });
  return {
    JourneyResponse: toJourneyResponse(await resp.json()),
  };
  }

  async deletePushTemplate(
    {abortSignal, ...params}: RequestConfig & DeletePushTemplateRequest,
  ): Promise<DeletePushTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeletePushTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/push`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async deleteRecommenderConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteRecommenderConfigurationRequest,
  ): Promise<DeleteRecommenderConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRecommenderConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/recommenders/${params["RecommenderId"]}`,
      responseCode: 200,
    });
  return {
    RecommenderConfigurationResponse: toRecommenderConfigurationResponse(await resp.json()),
  };
  }

  async deleteSegment(
    {abortSignal, ...params}: RequestConfig & DeleteSegmentRequest,
  ): Promise<DeleteSegmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSegment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments/${params["SegmentId"]}`,
      responseCode: 200,
    });
  return {
    SegmentResponse: toSegmentResponse(await resp.json()),
  };
  }

  async deleteSmsChannel(
    {abortSignal, ...params}: RequestConfig & DeleteSmsChannelRequest,
  ): Promise<DeleteSmsChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSmsChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/sms`,
      responseCode: 200,
    });
  return {
    SMSChannelResponse: toSMSChannelResponse(await resp.json()),
  };
  }

  async deleteSmsTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteSmsTemplateRequest,
  ): Promise<DeleteSmsTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteSmsTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/sms`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async deleteUserEndpoints(
    {abortSignal, ...params}: RequestConfig & DeleteUserEndpointsRequest,
  ): Promise<DeleteUserEndpointsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteUserEndpoints",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/users/${params["UserId"]}`,
      responseCode: 202,
    });
  return {
    EndpointsResponse: toEndpointsResponse(await resp.json()),
  };
  }

  async deleteVoiceChannel(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceChannelRequest,
  ): Promise<DeleteVoiceChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/voice`,
      responseCode: 200,
    });
  return {
    VoiceChannelResponse: toVoiceChannelResponse(await resp.json()),
  };
  }

  async deleteVoiceTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceTemplateRequest,
  ): Promise<DeleteVoiceTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteVoiceTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/voice`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async getAdmChannel(
    {abortSignal, ...params}: RequestConfig & GetAdmChannelRequest,
  ): Promise<GetAdmChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAdmChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/adm`,
      responseCode: 200,
    });
  return {
    ADMChannelResponse: toADMChannelResponse(await resp.json()),
  };
  }

  async getApnsChannel(
    {abortSignal, ...params}: RequestConfig & GetApnsChannelRequest,
  ): Promise<GetApnsChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApnsChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns`,
      responseCode: 200,
    });
  return {
    APNSChannelResponse: toAPNSChannelResponse(await resp.json()),
  };
  }

  async getApnsSandboxChannel(
    {abortSignal, ...params}: RequestConfig & GetApnsSandboxChannelRequest,
  ): Promise<GetApnsSandboxChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApnsSandboxChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_sandbox`,
      responseCode: 200,
    });
  return {
    APNSSandboxChannelResponse: toAPNSSandboxChannelResponse(await resp.json()),
  };
  }

  async getApnsVoipChannel(
    {abortSignal, ...params}: RequestConfig & GetApnsVoipChannelRequest,
  ): Promise<GetApnsVoipChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApnsVoipChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_voip`,
      responseCode: 200,
    });
  return {
    APNSVoipChannelResponse: toAPNSVoipChannelResponse(await resp.json()),
  };
  }

  async getApnsVoipSandboxChannel(
    {abortSignal, ...params}: RequestConfig & GetApnsVoipSandboxChannelRequest,
  ): Promise<GetApnsVoipSandboxChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApnsVoipSandboxChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_voip_sandbox`,
      responseCode: 200,
    });
  return {
    APNSVoipSandboxChannelResponse: toAPNSVoipSandboxChannelResponse(await resp.json()),
  };
  }

  async getApp(
    {abortSignal, ...params}: RequestConfig & GetAppRequest,
  ): Promise<GetAppResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApp",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}`,
      responseCode: 200,
    });
  return {
    ApplicationResponse: toApplicationResponse(await resp.json()),
  };
  }

  async getApplicationDateRangeKpi(
    {abortSignal, ...params}: RequestConfig & GetApplicationDateRangeKpiRequest,
  ): Promise<GetApplicationDateRangeKpiResponse> {
    const query = new URLSearchParams;
    if (params["EndTime"] != null) query.set("end-time", cmnP.serializeDate_iso8601(params["EndTime"]) ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["StartTime"] != null) query.set("start-time", cmnP.serializeDate_iso8601(params["StartTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetApplicationDateRangeKpi",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/kpis/daterange/${params["KpiName"]}`,
      responseCode: 200,
    });
  return {
    ApplicationDateRangeKpiResponse: jsonP.readObj({
        required: {
          "ApplicationId": "s",
          "EndTime": "d",
          "KpiName": "s",
          "KpiResult": toBaseKpiResult,
          "StartTime": "d",
        },
        optional: {
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getApplicationSettings(
    {abortSignal, ...params}: RequestConfig & GetApplicationSettingsRequest,
  ): Promise<GetApplicationSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApplicationSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/settings`,
      responseCode: 200,
    });
  return {
    ApplicationSettingsResource: toApplicationSettingsResource(await resp.json()),
  };
  }

  async getApps(
    {abortSignal, ...params}: RequestConfig & GetAppsRequest = {},
  ): Promise<GetAppsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetApps",
      method: "GET",
      requestUri: "/v1/apps",
      responseCode: 200,
    });
  return {
    ApplicationsResponse: jsonP.readObj({
        required: {},
        optional: {
          "Item": [toApplicationResponse],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getBaiduChannel(
    {abortSignal, ...params}: RequestConfig & GetBaiduChannelRequest,
  ): Promise<GetBaiduChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBaiduChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/baidu`,
      responseCode: 200,
    });
  return {
    BaiduChannelResponse: toBaiduChannelResponse(await resp.json()),
  };
  }

  async getCampaign(
    {abortSignal, ...params}: RequestConfig & GetCampaignRequest,
  ): Promise<GetCampaignResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCampaign",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns/${params["CampaignId"]}`,
      responseCode: 200,
    });
  return {
    CampaignResponse: toCampaignResponse(await resp.json()),
  };
  }

  async getCampaignActivities(
    {abortSignal, ...params}: RequestConfig & GetCampaignActivitiesRequest,
  ): Promise<GetCampaignActivitiesResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetCampaignActivities",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns/${params["CampaignId"]}/activities`,
      responseCode: 200,
    });
  return {
    ActivitiesResponse: jsonP.readObj({
        required: {
          "Item": [toActivityResponse],
        },
        optional: {
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getCampaignDateRangeKpi(
    {abortSignal, ...params}: RequestConfig & GetCampaignDateRangeKpiRequest,
  ): Promise<GetCampaignDateRangeKpiResponse> {
    const query = new URLSearchParams;
    if (params["EndTime"] != null) query.set("end-time", cmnP.serializeDate_iso8601(params["EndTime"]) ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["StartTime"] != null) query.set("start-time", cmnP.serializeDate_iso8601(params["StartTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetCampaignDateRangeKpi",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns/${params["CampaignId"]}/kpis/daterange/${params["KpiName"]}`,
      responseCode: 200,
    });
  return {
    CampaignDateRangeKpiResponse: jsonP.readObj({
        required: {
          "ApplicationId": "s",
          "CampaignId": "s",
          "EndTime": "d",
          "KpiName": "s",
          "KpiResult": toBaseKpiResult,
          "StartTime": "d",
        },
        optional: {
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getCampaignVersion(
    {abortSignal, ...params}: RequestConfig & GetCampaignVersionRequest,
  ): Promise<GetCampaignVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCampaignVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns/${params["CampaignId"]}/versions/${params["Version"]}`,
      responseCode: 200,
    });
  return {
    CampaignResponse: toCampaignResponse(await resp.json()),
  };
  }

  async getCampaignVersions(
    {abortSignal, ...params}: RequestConfig & GetCampaignVersionsRequest,
  ): Promise<GetCampaignVersionsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetCampaignVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns/${params["CampaignId"]}/versions`,
      responseCode: 200,
    });
  return {
    CampaignsResponse: toCampaignsResponse(await resp.json()),
  };
  }

  async getCampaigns(
    {abortSignal, ...params}: RequestConfig & GetCampaignsRequest,
  ): Promise<GetCampaignsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetCampaigns",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns`,
      responseCode: 200,
    });
  return {
    CampaignsResponse: toCampaignsResponse(await resp.json()),
  };
  }

  async getChannels(
    {abortSignal, ...params}: RequestConfig & GetChannelsRequest,
  ): Promise<GetChannelsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetChannels",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels`,
      responseCode: 200,
    });
  return {
    ChannelsResponse: jsonP.readObj({
        required: {
          "Channels": x => jsonP.readMap(String, toChannelResponse, x),
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getEmailChannel(
    {abortSignal, ...params}: RequestConfig & GetEmailChannelRequest,
  ): Promise<GetEmailChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEmailChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/email`,
      responseCode: 200,
    });
  return {
    EmailChannelResponse: toEmailChannelResponse(await resp.json()),
  };
  }

  async getEmailTemplate(
    {abortSignal, ...params}: RequestConfig & GetEmailTemplateRequest,
  ): Promise<GetEmailTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetEmailTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/email`,
      responseCode: 200,
    });
  return {
    EmailTemplateResponse: jsonP.readObj({
        required: {
          "CreationDate": "s",
          "LastModifiedDate": "s",
          "TemplateName": "s",
          "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
        },
        optional: {
          "Arn": "s",
          "DefaultSubstitutions": "s",
          "HtmlPart": "s",
          "RecommenderId": "s",
          "Subject": "s",
          "tags": x => jsonP.readMap(String, String, x),
          "TemplateDescription": "s",
          "TextPart": "s",
          "Version": "s",
        },
      }, await resp.json()),
  };
  }

  async getEndpoint(
    {abortSignal, ...params}: RequestConfig & GetEndpointRequest,
  ): Promise<GetEndpointResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEndpoint",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/endpoints/${params["EndpointId"]}`,
      responseCode: 200,
    });
  return {
    EndpointResponse: toEndpointResponse(await resp.json()),
  };
  }

  async getEventStream(
    {abortSignal, ...params}: RequestConfig & GetEventStreamRequest,
  ): Promise<GetEventStreamResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEventStream",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/eventstream`,
      responseCode: 200,
    });
  return {
    EventStream: toEventStream(await resp.json()),
  };
  }

  async getExportJob(
    {abortSignal, ...params}: RequestConfig & GetExportJobRequest,
  ): Promise<GetExportJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetExportJob",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/jobs/export/${params["JobId"]}`,
      responseCode: 200,
    });
  return {
    ExportJobResponse: toExportJobResponse(await resp.json()),
  };
  }

  async getExportJobs(
    {abortSignal, ...params}: RequestConfig & GetExportJobsRequest,
  ): Promise<GetExportJobsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetExportJobs",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/jobs/export`,
      responseCode: 200,
    });
  return {
    ExportJobsResponse: toExportJobsResponse(await resp.json()),
  };
  }

  async getGcmChannel(
    {abortSignal, ...params}: RequestConfig & GetGcmChannelRequest,
  ): Promise<GetGcmChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGcmChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/gcm`,
      responseCode: 200,
    });
  return {
    GCMChannelResponse: toGCMChannelResponse(await resp.json()),
  };
  }

  async getImportJob(
    {abortSignal, ...params}: RequestConfig & GetImportJobRequest,
  ): Promise<GetImportJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetImportJob",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/jobs/import/${params["JobId"]}`,
      responseCode: 200,
    });
  return {
    ImportJobResponse: toImportJobResponse(await resp.json()),
  };
  }

  async getImportJobs(
    {abortSignal, ...params}: RequestConfig & GetImportJobsRequest,
  ): Promise<GetImportJobsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetImportJobs",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/jobs/import`,
      responseCode: 200,
    });
  return {
    ImportJobsResponse: toImportJobsResponse(await resp.json()),
  };
  }

  async getJourney(
    {abortSignal, ...params}: RequestConfig & GetJourneyRequest,
  ): Promise<GetJourneyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetJourney",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys/${params["JourneyId"]}`,
      responseCode: 200,
    });
  return {
    JourneyResponse: toJourneyResponse(await resp.json()),
  };
  }

  async getJourneyDateRangeKpi(
    {abortSignal, ...params}: RequestConfig & GetJourneyDateRangeKpiRequest,
  ): Promise<GetJourneyDateRangeKpiResponse> {
    const query = new URLSearchParams;
    if (params["EndTime"] != null) query.set("end-time", cmnP.serializeDate_iso8601(params["EndTime"]) ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["StartTime"] != null) query.set("start-time", cmnP.serializeDate_iso8601(params["StartTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetJourneyDateRangeKpi",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys/${params["JourneyId"]}/kpis/daterange/${params["KpiName"]}`,
      responseCode: 200,
    });
  return {
    JourneyDateRangeKpiResponse: jsonP.readObj({
        required: {
          "ApplicationId": "s",
          "EndTime": "d",
          "JourneyId": "s",
          "KpiName": "s",
          "KpiResult": toBaseKpiResult,
          "StartTime": "d",
        },
        optional: {
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getJourneyExecutionActivityMetrics(
    {abortSignal, ...params}: RequestConfig & GetJourneyExecutionActivityMetricsRequest,
  ): Promise<GetJourneyExecutionActivityMetricsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetJourneyExecutionActivityMetrics",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys/${params["JourneyId"]}/activities/${params["JourneyActivityId"]}/execution-metrics`,
      responseCode: 200,
    });
  return {
    JourneyExecutionActivityMetricsResponse: jsonP.readObj({
        required: {
          "ActivityType": "s",
          "ApplicationId": "s",
          "JourneyActivityId": "s",
          "JourneyId": "s",
          "LastEvaluatedTime": "s",
          "Metrics": x => jsonP.readMap(String, String, x),
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getJourneyExecutionMetrics(
    {abortSignal, ...params}: RequestConfig & GetJourneyExecutionMetricsRequest,
  ): Promise<GetJourneyExecutionMetricsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetJourneyExecutionMetrics",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys/${params["JourneyId"]}/execution-metrics`,
      responseCode: 200,
    });
  return {
    JourneyExecutionMetricsResponse: jsonP.readObj({
        required: {
          "ApplicationId": "s",
          "JourneyId": "s",
          "LastEvaluatedTime": "s",
          "Metrics": x => jsonP.readMap(String, String, x),
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getPushTemplate(
    {abortSignal, ...params}: RequestConfig & GetPushTemplateRequest,
  ): Promise<GetPushTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetPushTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/push`,
      responseCode: 200,
    });
  return {
    PushNotificationTemplateResponse: jsonP.readObj({
        required: {
          "CreationDate": "s",
          "LastModifiedDate": "s",
          "TemplateName": "s",
          "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
        },
        optional: {
          "ADM": toAndroidPushNotificationTemplate,
          "APNS": toAPNSPushNotificationTemplate,
          "Arn": "s",
          "Baidu": toAndroidPushNotificationTemplate,
          "Default": toDefaultPushNotificationTemplate,
          "DefaultSubstitutions": "s",
          "GCM": toAndroidPushNotificationTemplate,
          "RecommenderId": "s",
          "tags": x => jsonP.readMap(String, String, x),
          "TemplateDescription": "s",
          "Version": "s",
        },
      }, await resp.json()),
  };
  }

  async getRecommenderConfiguration(
    {abortSignal, ...params}: RequestConfig & GetRecommenderConfigurationRequest,
  ): Promise<GetRecommenderConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRecommenderConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/recommenders/${params["RecommenderId"]}`,
      responseCode: 200,
    });
  return {
    RecommenderConfigurationResponse: toRecommenderConfigurationResponse(await resp.json()),
  };
  }

  async getRecommenderConfigurations(
    {abortSignal, ...params}: RequestConfig & GetRecommenderConfigurationsRequest = {},
  ): Promise<GetRecommenderConfigurationsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetRecommenderConfigurations",
      method: "GET",
      requestUri: "/v1/recommenders",
      responseCode: 200,
    });
  return {
    ListRecommenderConfigurationsResponse: jsonP.readObj({
        required: {
          "Item": [toRecommenderConfigurationResponse],
        },
        optional: {
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getSegment(
    {abortSignal, ...params}: RequestConfig & GetSegmentRequest,
  ): Promise<GetSegmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSegment",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments/${params["SegmentId"]}`,
      responseCode: 200,
    });
  return {
    SegmentResponse: toSegmentResponse(await resp.json()),
  };
  }

  async getSegmentExportJobs(
    {abortSignal, ...params}: RequestConfig & GetSegmentExportJobsRequest,
  ): Promise<GetSegmentExportJobsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSegmentExportJobs",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments/${params["SegmentId"]}/jobs/export`,
      responseCode: 200,
    });
  return {
    ExportJobsResponse: toExportJobsResponse(await resp.json()),
  };
  }

  async getSegmentImportJobs(
    {abortSignal, ...params}: RequestConfig & GetSegmentImportJobsRequest,
  ): Promise<GetSegmentImportJobsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSegmentImportJobs",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments/${params["SegmentId"]}/jobs/import`,
      responseCode: 200,
    });
  return {
    ImportJobsResponse: toImportJobsResponse(await resp.json()),
  };
  }

  async getSegmentVersion(
    {abortSignal, ...params}: RequestConfig & GetSegmentVersionRequest,
  ): Promise<GetSegmentVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSegmentVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments/${params["SegmentId"]}/versions/${params["Version"]}`,
      responseCode: 200,
    });
  return {
    SegmentResponse: toSegmentResponse(await resp.json()),
  };
  }

  async getSegmentVersions(
    {abortSignal, ...params}: RequestConfig & GetSegmentVersionsRequest,
  ): Promise<GetSegmentVersionsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSegmentVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments/${params["SegmentId"]}/versions`,
      responseCode: 200,
    });
  return {
    SegmentsResponse: toSegmentsResponse(await resp.json()),
  };
  }

  async getSegments(
    {abortSignal, ...params}: RequestConfig & GetSegmentsRequest,
  ): Promise<GetSegmentsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSegments",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments`,
      responseCode: 200,
    });
  return {
    SegmentsResponse: toSegmentsResponse(await resp.json()),
  };
  }

  async getSmsChannel(
    {abortSignal, ...params}: RequestConfig & GetSmsChannelRequest,
  ): Promise<GetSmsChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSmsChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/sms`,
      responseCode: 200,
    });
  return {
    SMSChannelResponse: toSMSChannelResponse(await resp.json()),
  };
  }

  async getSmsTemplate(
    {abortSignal, ...params}: RequestConfig & GetSmsTemplateRequest,
  ): Promise<GetSmsTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSmsTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/sms`,
      responseCode: 200,
    });
  return {
    SMSTemplateResponse: jsonP.readObj({
        required: {
          "CreationDate": "s",
          "LastModifiedDate": "s",
          "TemplateName": "s",
          "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
        },
        optional: {
          "Arn": "s",
          "Body": "s",
          "DefaultSubstitutions": "s",
          "RecommenderId": "s",
          "tags": x => jsonP.readMap(String, String, x),
          "TemplateDescription": "s",
          "Version": "s",
        },
      }, await resp.json()),
  };
  }

  async getUserEndpoints(
    {abortSignal, ...params}: RequestConfig & GetUserEndpointsRequest,
  ): Promise<GetUserEndpointsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetUserEndpoints",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/users/${params["UserId"]}`,
      responseCode: 200,
    });
  return {
    EndpointsResponse: toEndpointsResponse(await resp.json()),
  };
  }

  async getVoiceChannel(
    {abortSignal, ...params}: RequestConfig & GetVoiceChannelRequest,
  ): Promise<GetVoiceChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/voice`,
      responseCode: 200,
    });
  return {
    VoiceChannelResponse: toVoiceChannelResponse(await resp.json()),
  };
  }

  async getVoiceTemplate(
    {abortSignal, ...params}: RequestConfig & GetVoiceTemplateRequest,
  ): Promise<GetVoiceTemplateResponse> {
    const query = new URLSearchParams;
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetVoiceTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/voice`,
      responseCode: 200,
    });
  return {
    VoiceTemplateResponse: jsonP.readObj({
        required: {
          "CreationDate": "s",
          "LastModifiedDate": "s",
          "TemplateName": "s",
          "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
        },
        optional: {
          "Arn": "s",
          "Body": "s",
          "DefaultSubstitutions": "s",
          "LanguageCode": "s",
          "tags": x => jsonP.readMap(String, String, x),
          "TemplateDescription": "s",
          "Version": "s",
          "VoiceId": "s",
        },
      }, await resp.json()),
  };
  }

  async listJourneys(
    {abortSignal, ...params}: RequestConfig & ListJourneysRequest,
  ): Promise<ListJourneysResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Token"] != null) query.set("token", params["Token"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJourneys",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys`,
      responseCode: 200,
    });
  return {
    JourneysResponse: jsonP.readObj({
        required: {
          "Item": [toJourneyResponse],
        },
        optional: {
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
  return {
    TagsModel: toTagsModel(await resp.json()),
  };
  }

  async listTemplateVersions(
    {abortSignal, ...params}: RequestConfig & ListTemplateVersionsRequest,
  ): Promise<ListTemplateVersionsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTemplateVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/${params["TemplateType"]}/versions`,
      responseCode: 200,
    });
  return {
    TemplateVersionsResponse: jsonP.readObj({
        required: {
          "Item": [toTemplateVersionResponse],
        },
        optional: {
          "Message": "s",
          "NextToken": "s",
          "RequestID": "s",
        },
      }, await resp.json()),
  };
  }

  async listTemplates(
    {abortSignal, ...params}: RequestConfig & ListTemplatesRequest = {},
  ): Promise<ListTemplatesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("page-size", params["PageSize"]?.toString() ?? "");
    if (params["Prefix"] != null) query.set("prefix", params["Prefix"]?.toString() ?? "");
    if (params["TemplateType"] != null) query.set("template-type", params["TemplateType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTemplates",
      method: "GET",
      requestUri: "/v1/templates",
      responseCode: 200,
    });
  return {
    TemplatesResponse: jsonP.readObj({
        required: {
          "Item": [toTemplateResponse],
        },
        optional: {
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async phoneNumberValidate(
    {abortSignal, ...params}: RequestConfig & PhoneNumberValidateRequest,
  ): Promise<PhoneNumberValidateResponse> {
    const inner = params["NumberValidateRequest"];
    const body: jsonP.JSONObject = inner ? {
      IsoCountryCode: inner["IsoCountryCode"],
      PhoneNumber: inner["PhoneNumber"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PhoneNumberValidate",
      requestUri: "/v1/phone/number/validate",
      responseCode: 200,
    });
  return {
    NumberValidateResponse: jsonP.readObj({
        required: {},
        optional: {
          "Carrier": "s",
          "City": "s",
          "CleansedPhoneNumberE164": "s",
          "CleansedPhoneNumberNational": "s",
          "Country": "s",
          "CountryCodeIso2": "s",
          "CountryCodeNumeric": "s",
          "County": "s",
          "OriginalCountryCodeIso2": "s",
          "OriginalPhoneNumber": "s",
          "PhoneType": "s",
          "PhoneTypeCode": "n",
          "Timezone": "s",
          "ZipCode": "s",
        },
      }, await resp.json()),
  };
  }

  async putEventStream(
    {abortSignal, ...params}: RequestConfig & PutEventStreamRequest,
  ): Promise<PutEventStreamResponse> {
    const inner = params["WriteEventStream"];
    const body: jsonP.JSONObject = inner ? {
      DestinationStreamArn: inner["DestinationStreamArn"],
      RoleArn: inner["RoleArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEventStream",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/eventstream`,
      responseCode: 200,
    });
  return {
    EventStream: toEventStream(await resp.json()),
  };
  }

  async putEvents(
    {abortSignal, ...params}: RequestConfig & PutEventsRequest,
  ): Promise<PutEventsResponse> {
    const inner = params["EventsRequest"];
    const body: jsonP.JSONObject = inner ? {
      BatchItem: jsonP.serializeMap(inner["BatchItem"], x => fromEventsBatch(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEvents",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/events`,
      responseCode: 202,
    });
  return {
    EventsResponse: jsonP.readObj({
        required: {},
        optional: {
          "Results": x => jsonP.readMap(String, toItemResponse, x),
        },
      }, await resp.json()),
  };
  }

  async removeAttributes(
    {abortSignal, ...params}: RequestConfig & RemoveAttributesRequest,
  ): Promise<RemoveAttributesResponse> {
    const inner = params["UpdateAttributesRequest"];
    const body: jsonP.JSONObject = inner ? {
      Blacklist: inner["Blacklist"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/attributes/${params["AttributeType"]}`,
      responseCode: 200,
    });
  return {
    AttributesResource: jsonP.readObj({
        required: {
          "ApplicationId": "s",
          "AttributeType": "s",
        },
        optional: {
          "Attributes": ["s"],
        },
      }, await resp.json()),
  };
  }

  async sendMessages(
    {abortSignal, ...params}: RequestConfig & SendMessagesRequest,
  ): Promise<SendMessagesResponse> {
    const inner = params["MessageRequest"];
    const body: jsonP.JSONObject = inner ? {
      Addresses: jsonP.serializeMap(inner["Addresses"], x => fromAddressConfiguration(x)),
      Context: inner["Context"],
      Endpoints: jsonP.serializeMap(inner["Endpoints"], x => fromEndpointSendConfiguration(x)),
      MessageConfiguration: fromDirectMessageConfiguration(inner["MessageConfiguration"]),
      TemplateConfiguration: fromTemplateConfiguration(inner["TemplateConfiguration"]),
      TraceId: inner["TraceId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendMessages",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/messages`,
      responseCode: 200,
    });
  return {
    MessageResponse: jsonP.readObj({
        required: {
          "ApplicationId": "s",
        },
        optional: {
          "EndpointResult": x => jsonP.readMap(String, toEndpointMessageResult, x),
          "RequestId": "s",
          "Result": x => jsonP.readMap(String, toMessageResult, x),
        },
      }, await resp.json()),
  };
  }

  async sendUsersMessages(
    {abortSignal, ...params}: RequestConfig & SendUsersMessagesRequest,
  ): Promise<SendUsersMessagesResponse> {
    const inner = params["SendUsersMessageRequest"];
    const body: jsonP.JSONObject = inner ? {
      Context: inner["Context"],
      MessageConfiguration: fromDirectMessageConfiguration(inner["MessageConfiguration"]),
      TemplateConfiguration: fromTemplateConfiguration(inner["TemplateConfiguration"]),
      TraceId: inner["TraceId"],
      Users: jsonP.serializeMap(inner["Users"], x => fromEndpointSendConfiguration(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendUsersMessages",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/users-messages`,
      responseCode: 200,
    });
  return {
    SendUsersMessageResponse: jsonP.readObj({
        required: {
          "ApplicationId": "s",
        },
        optional: {
          "RequestId": "s",
          "Result": x => jsonP.readMap(String, y => jsonP.readMap(String, toEndpointMessageResult, y)!, x),
        },
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const inner = params["TagsModel"];
    const body: jsonP.JSONObject = inner ? {
      tags: inner["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/v1/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateAdmChannel(
    {abortSignal, ...params}: RequestConfig & UpdateAdmChannelRequest,
  ): Promise<UpdateAdmChannelResponse> {
    const inner = params["ADMChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      ClientId: inner["ClientId"],
      ClientSecret: inner["ClientSecret"],
      Enabled: inner["Enabled"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAdmChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/adm`,
      responseCode: 200,
    });
  return {
    ADMChannelResponse: toADMChannelResponse(await resp.json()),
  };
  }

  async updateApnsChannel(
    {abortSignal, ...params}: RequestConfig & UpdateApnsChannelRequest,
  ): Promise<UpdateApnsChannelResponse> {
    const inner = params["APNSChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      BundleId: inner["BundleId"],
      Certificate: inner["Certificate"],
      DefaultAuthenticationMethod: inner["DefaultAuthenticationMethod"],
      Enabled: inner["Enabled"],
      PrivateKey: inner["PrivateKey"],
      TeamId: inner["TeamId"],
      TokenKey: inner["TokenKey"],
      TokenKeyId: inner["TokenKeyId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApnsChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns`,
      responseCode: 200,
    });
  return {
    APNSChannelResponse: toAPNSChannelResponse(await resp.json()),
  };
  }

  async updateApnsSandboxChannel(
    {abortSignal, ...params}: RequestConfig & UpdateApnsSandboxChannelRequest,
  ): Promise<UpdateApnsSandboxChannelResponse> {
    const inner = params["APNSSandboxChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      BundleId: inner["BundleId"],
      Certificate: inner["Certificate"],
      DefaultAuthenticationMethod: inner["DefaultAuthenticationMethod"],
      Enabled: inner["Enabled"],
      PrivateKey: inner["PrivateKey"],
      TeamId: inner["TeamId"],
      TokenKey: inner["TokenKey"],
      TokenKeyId: inner["TokenKeyId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApnsSandboxChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_sandbox`,
      responseCode: 200,
    });
  return {
    APNSSandboxChannelResponse: toAPNSSandboxChannelResponse(await resp.json()),
  };
  }

  async updateApnsVoipChannel(
    {abortSignal, ...params}: RequestConfig & UpdateApnsVoipChannelRequest,
  ): Promise<UpdateApnsVoipChannelResponse> {
    const inner = params["APNSVoipChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      BundleId: inner["BundleId"],
      Certificate: inner["Certificate"],
      DefaultAuthenticationMethod: inner["DefaultAuthenticationMethod"],
      Enabled: inner["Enabled"],
      PrivateKey: inner["PrivateKey"],
      TeamId: inner["TeamId"],
      TokenKey: inner["TokenKey"],
      TokenKeyId: inner["TokenKeyId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApnsVoipChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_voip`,
      responseCode: 200,
    });
  return {
    APNSVoipChannelResponse: toAPNSVoipChannelResponse(await resp.json()),
  };
  }

  async updateApnsVoipSandboxChannel(
    {abortSignal, ...params}: RequestConfig & UpdateApnsVoipSandboxChannelRequest,
  ): Promise<UpdateApnsVoipSandboxChannelResponse> {
    const inner = params["APNSVoipSandboxChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      BundleId: inner["BundleId"],
      Certificate: inner["Certificate"],
      DefaultAuthenticationMethod: inner["DefaultAuthenticationMethod"],
      Enabled: inner["Enabled"],
      PrivateKey: inner["PrivateKey"],
      TeamId: inner["TeamId"],
      TokenKey: inner["TokenKey"],
      TokenKeyId: inner["TokenKeyId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApnsVoipSandboxChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/apns_voip_sandbox`,
      responseCode: 200,
    });
  return {
    APNSVoipSandboxChannelResponse: toAPNSVoipSandboxChannelResponse(await resp.json()),
  };
  }

  async updateApplicationSettings(
    {abortSignal, ...params}: RequestConfig & UpdateApplicationSettingsRequest,
  ): Promise<UpdateApplicationSettingsResponse> {
    const inner = params["WriteApplicationSettingsRequest"];
    const body: jsonP.JSONObject = inner ? {
      CampaignHook: fromCampaignHook(inner["CampaignHook"]),
      CloudWatchMetricsEnabled: inner["CloudWatchMetricsEnabled"],
      EventTaggingEnabled: inner["EventTaggingEnabled"],
      Limits: fromCampaignLimits(inner["Limits"]),
      QuietTime: fromQuietTime(inner["QuietTime"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplicationSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/settings`,
      responseCode: 200,
    });
  return {
    ApplicationSettingsResource: toApplicationSettingsResource(await resp.json()),
  };
  }

  async updateBaiduChannel(
    {abortSignal, ...params}: RequestConfig & UpdateBaiduChannelRequest,
  ): Promise<UpdateBaiduChannelResponse> {
    const inner = params["BaiduChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      ApiKey: inner["ApiKey"],
      Enabled: inner["Enabled"],
      SecretKey: inner["SecretKey"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBaiduChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/baidu`,
      responseCode: 200,
    });
  return {
    BaiduChannelResponse: toBaiduChannelResponse(await resp.json()),
  };
  }

  async updateCampaign(
    {abortSignal, ...params}: RequestConfig & UpdateCampaignRequest,
  ): Promise<UpdateCampaignResponse> {
    const inner = params["WriteCampaignRequest"];
    const body: jsonP.JSONObject = inner ? {
      AdditionalTreatments: inner["AdditionalTreatments"]?.map(x => fromWriteTreatmentResource(x)),
      CustomDeliveryConfiguration: fromCustomDeliveryConfiguration(inner["CustomDeliveryConfiguration"]),
      Description: inner["Description"],
      HoldoutPercent: inner["HoldoutPercent"],
      Hook: fromCampaignHook(inner["Hook"]),
      IsPaused: inner["IsPaused"],
      Limits: fromCampaignLimits(inner["Limits"]),
      MessageConfiguration: fromMessageConfiguration(inner["MessageConfiguration"]),
      Name: inner["Name"],
      Schedule: fromSchedule(inner["Schedule"]),
      SegmentId: inner["SegmentId"],
      SegmentVersion: inner["SegmentVersion"],
      tags: inner["tags"],
      TemplateConfiguration: fromTemplateConfiguration(inner["TemplateConfiguration"]),
      TreatmentDescription: inner["TreatmentDescription"],
      TreatmentName: inner["TreatmentName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCampaign",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/campaigns/${params["CampaignId"]}`,
      responseCode: 200,
    });
  return {
    CampaignResponse: toCampaignResponse(await resp.json()),
  };
  }

  async updateEmailChannel(
    {abortSignal, ...params}: RequestConfig & UpdateEmailChannelRequest,
  ): Promise<UpdateEmailChannelResponse> {
    const inner = params["EmailChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      ConfigurationSet: inner["ConfigurationSet"],
      Enabled: inner["Enabled"],
      FromAddress: inner["FromAddress"],
      Identity: inner["Identity"],
      RoleArn: inner["RoleArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEmailChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/email`,
      responseCode: 200,
    });
  return {
    EmailChannelResponse: toEmailChannelResponse(await resp.json()),
  };
  }

  async updateEmailTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateEmailTemplateRequest,
  ): Promise<UpdateEmailTemplateResponse> {
    const inner = params["EmailTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      HtmlPart: inner["HtmlPart"],
      RecommenderId: inner["RecommenderId"],
      Subject: inner["Subject"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
      TextPart: inner["TextPart"],
    } : {};
    const query = new URLSearchParams;
    if (params["CreateNewVersion"] != null) query.set("create-new-version", params["CreateNewVersion"]?.toString() ?? "");
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateEmailTemplate",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/email`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async updateEndpoint(
    {abortSignal, ...params}: RequestConfig & UpdateEndpointRequest,
  ): Promise<UpdateEndpointResponse> {
    const inner = params["EndpointRequest"];
    const body: jsonP.JSONObject = inner ? {
      Address: inner["Address"],
      Attributes: inner["Attributes"],
      ChannelType: inner["ChannelType"],
      Demographic: fromEndpointDemographic(inner["Demographic"]),
      EffectiveDate: inner["EffectiveDate"],
      EndpointStatus: inner["EndpointStatus"],
      Location: fromEndpointLocation(inner["Location"]),
      Metrics: inner["Metrics"],
      OptOut: inner["OptOut"],
      RequestId: inner["RequestId"],
      User: fromEndpointUser(inner["User"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEndpoint",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/endpoints/${params["EndpointId"]}`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async updateEndpointsBatch(
    {abortSignal, ...params}: RequestConfig & UpdateEndpointsBatchRequest,
  ): Promise<UpdateEndpointsBatchResponse> {
    const inner = params["EndpointBatchRequest"];
    const body: jsonP.JSONObject = inner ? {
      Item: inner["Item"]?.map(x => fromEndpointBatchItem(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEndpointsBatch",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/endpoints`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async updateGcmChannel(
    {abortSignal, ...params}: RequestConfig & UpdateGcmChannelRequest,
  ): Promise<UpdateGcmChannelResponse> {
    const inner = params["GCMChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      ApiKey: inner["ApiKey"],
      Enabled: inner["Enabled"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGcmChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/gcm`,
      responseCode: 200,
    });
  return {
    GCMChannelResponse: toGCMChannelResponse(await resp.json()),
  };
  }

  async updateJourney(
    {abortSignal, ...params}: RequestConfig & UpdateJourneyRequest,
  ): Promise<UpdateJourneyResponse> {
    const inner = params["WriteJourneyRequest"];
    const body: jsonP.JSONObject = inner ? {
      Activities: jsonP.serializeMap(inner["Activities"], x => fromActivity(x)),
      CreationDate: inner["CreationDate"],
      LastModifiedDate: inner["LastModifiedDate"],
      Limits: fromJourneyLimits(inner["Limits"]),
      LocalTime: inner["LocalTime"],
      Name: inner["Name"],
      QuietTime: fromQuietTime(inner["QuietTime"]),
      RefreshFrequency: inner["RefreshFrequency"],
      Schedule: fromJourneySchedule(inner["Schedule"]),
      StartActivity: inner["StartActivity"],
      StartCondition: fromStartCondition(inner["StartCondition"]),
      State: inner["State"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateJourney",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys/${params["JourneyId"]}`,
      responseCode: 200,
    });
  return {
    JourneyResponse: toJourneyResponse(await resp.json()),
  };
  }

  async updateJourneyState(
    {abortSignal, ...params}: RequestConfig & UpdateJourneyStateRequest,
  ): Promise<UpdateJourneyStateResponse> {
    const inner = params["JourneyStateRequest"];
    const body: jsonP.JSONObject = inner ? {
      State: inner["State"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateJourneyState",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/journeys/${params["JourneyId"]}/state`,
      responseCode: 200,
    });
  return {
    JourneyResponse: toJourneyResponse(await resp.json()),
  };
  }

  async updatePushTemplate(
    {abortSignal, ...params}: RequestConfig & UpdatePushTemplateRequest,
  ): Promise<UpdatePushTemplateResponse> {
    const inner = params["PushNotificationTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      ADM: fromAndroidPushNotificationTemplate(inner["ADM"]),
      APNS: fromAPNSPushNotificationTemplate(inner["APNS"]),
      Baidu: fromAndroidPushNotificationTemplate(inner["Baidu"]),
      Default: fromDefaultPushNotificationTemplate(inner["Default"]),
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      GCM: fromAndroidPushNotificationTemplate(inner["GCM"]),
      RecommenderId: inner["RecommenderId"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
    } : {};
    const query = new URLSearchParams;
    if (params["CreateNewVersion"] != null) query.set("create-new-version", params["CreateNewVersion"]?.toString() ?? "");
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdatePushTemplate",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/push`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async updateRecommenderConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateRecommenderConfigurationRequest,
  ): Promise<UpdateRecommenderConfigurationResponse> {
    const inner = params["UpdateRecommenderConfiguration"];
    const body: jsonP.JSONObject = inner ? {
      Attributes: inner["Attributes"],
      Description: inner["Description"],
      Name: inner["Name"],
      RecommendationProviderIdType: inner["RecommendationProviderIdType"],
      RecommendationProviderRoleArn: inner["RecommendationProviderRoleArn"],
      RecommendationProviderUri: inner["RecommendationProviderUri"],
      RecommendationTransformerUri: inner["RecommendationTransformerUri"],
      RecommendationsDisplayName: inner["RecommendationsDisplayName"],
      RecommendationsPerMessage: inner["RecommendationsPerMessage"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRecommenderConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/recommenders/${params["RecommenderId"]}`,
      responseCode: 200,
    });
  return {
    RecommenderConfigurationResponse: toRecommenderConfigurationResponse(await resp.json()),
  };
  }

  async updateSegment(
    {abortSignal, ...params}: RequestConfig & UpdateSegmentRequest,
  ): Promise<UpdateSegmentResponse> {
    const inner = params["WriteSegmentRequest"];
    const body: jsonP.JSONObject = inner ? {
      Dimensions: fromSegmentDimensions(inner["Dimensions"]),
      Name: inner["Name"],
      SegmentGroups: fromSegmentGroupList(inner["SegmentGroups"]),
      tags: inner["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSegment",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/segments/${params["SegmentId"]}`,
      responseCode: 200,
    });
  return {
    SegmentResponse: toSegmentResponse(await resp.json()),
  };
  }

  async updateSmsChannel(
    {abortSignal, ...params}: RequestConfig & UpdateSmsChannelRequest,
  ): Promise<UpdateSmsChannelResponse> {
    const inner = params["SMSChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      Enabled: inner["Enabled"],
      SenderId: inner["SenderId"],
      ShortCode: inner["ShortCode"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSmsChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/sms`,
      responseCode: 200,
    });
  return {
    SMSChannelResponse: toSMSChannelResponse(await resp.json()),
  };
  }

  async updateSmsTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateSmsTemplateRequest,
  ): Promise<UpdateSmsTemplateResponse> {
    const inner = params["SMSTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      Body: inner["Body"],
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      RecommenderId: inner["RecommenderId"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
    } : {};
    const query = new URLSearchParams;
    if (params["CreateNewVersion"] != null) query.set("create-new-version", params["CreateNewVersion"]?.toString() ?? "");
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateSmsTemplate",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/sms`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async updateTemplateActiveVersion(
    {abortSignal, ...params}: RequestConfig & UpdateTemplateActiveVersionRequest,
  ): Promise<UpdateTemplateActiveVersionResponse> {
    const inner = params["TemplateActiveVersionRequest"];
    const body: jsonP.JSONObject = inner ? {
      Version: inner["Version"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTemplateActiveVersion",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/${params["TemplateType"]}/active-version`,
      responseCode: 200,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

  async updateVoiceChannel(
    {abortSignal, ...params}: RequestConfig & UpdateVoiceChannelRequest,
  ): Promise<UpdateVoiceChannelResponse> {
    const inner = params["VoiceChannelRequest"];
    const body: jsonP.JSONObject = inner ? {
      Enabled: inner["Enabled"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVoiceChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/apps/${params["ApplicationId"]}/channels/voice`,
      responseCode: 200,
    });
  return {
    VoiceChannelResponse: toVoiceChannelResponse(await resp.json()),
  };
  }

  async updateVoiceTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateVoiceTemplateRequest,
  ): Promise<UpdateVoiceTemplateResponse> {
    const inner = params["VoiceTemplateRequest"];
    const body: jsonP.JSONObject = inner ? {
      Body: inner["Body"],
      DefaultSubstitutions: inner["DefaultSubstitutions"],
      LanguageCode: inner["LanguageCode"],
      tags: inner["tags"],
      TemplateDescription: inner["TemplateDescription"],
      VoiceId: inner["VoiceId"],
    } : {};
    const query = new URLSearchParams;
    if (params["CreateNewVersion"] != null) query.set("create-new-version", params["CreateNewVersion"]?.toString() ?? "");
    if (params["Version"] != null) query.set("version", params["Version"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateVoiceTemplate",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/templates/${params["TemplateName"]}/voice`,
      responseCode: 202,
    });
  return {
    MessageBody: toMessageBody(await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface CreateAppRequest {
  CreateApplicationRequest: CreateApplicationRequest;
}

// refs: 1 - tags: named, input
export interface CreateCampaignRequest {
  ApplicationId: string;
  WriteCampaignRequest: WriteCampaignRequest;
}

// refs: 1 - tags: named, input
export interface CreateEmailTemplateRequest {
  EmailTemplateRequest: EmailTemplateRequest;
  TemplateName: string;
}

// refs: 1 - tags: named, input
export interface CreateExportJobRequest {
  ApplicationId: string;
  ExportJobRequest: ExportJobRequest;
}

// refs: 1 - tags: named, input
export interface CreateImportJobRequest {
  ApplicationId: string;
  ImportJobRequest: ImportJobRequest;
}

// refs: 1 - tags: named, input
export interface CreateJourneyRequest {
  ApplicationId: string;
  WriteJourneyRequest: WriteJourneyRequest;
}

// refs: 1 - tags: named, input
export interface CreatePushTemplateRequest {
  PushNotificationTemplateRequest: PushNotificationTemplateRequest;
  TemplateName: string;
}

// refs: 1 - tags: named, input
export interface CreateRecommenderConfigurationRequest {
  CreateRecommenderConfiguration: CreateRecommenderConfiguration;
}

// refs: 1 - tags: named, input
export interface CreateSegmentRequest {
  ApplicationId: string;
  WriteSegmentRequest: WriteSegmentRequest;
}

// refs: 1 - tags: named, input
export interface CreateSmsTemplateRequest {
  SMSTemplateRequest: SMSTemplateRequest;
  TemplateName: string;
}

// refs: 1 - tags: named, input
export interface CreateVoiceTemplateRequest {
  TemplateName: string;
  VoiceTemplateRequest: VoiceTemplateRequest;
}

// refs: 1 - tags: named, input
export interface DeleteAdmChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApnsChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApnsSandboxChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApnsVoipChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApnsVoipSandboxChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteAppRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteBaiduChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteCampaignRequest {
  ApplicationId: string;
  CampaignId: string;
}

// refs: 1 - tags: named, input
export interface DeleteEmailChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteEmailTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteEndpointRequest {
  ApplicationId: string;
  EndpointId: string;
}

// refs: 1 - tags: named, input
export interface DeleteEventStreamRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteGcmChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteJourneyRequest {
  ApplicationId: string;
  JourneyId: string;
}

// refs: 1 - tags: named, input
export interface DeletePushTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteRecommenderConfigurationRequest {
  RecommenderId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSegmentRequest {
  ApplicationId: string;
  SegmentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSmsChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSmsTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteUserEndpointsRequest {
  ApplicationId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAdmChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetApnsChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetApnsSandboxChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetApnsVoipChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetApnsVoipSandboxChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetAppRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetApplicationDateRangeKpiRequest {
  ApplicationId: string;
  EndTime?: Date | number | null;
  KpiName: string;
  NextToken?: string | null;
  PageSize?: string | null;
  StartTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface GetApplicationSettingsRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetAppsRequest {
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetBaiduChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetCampaignRequest {
  ApplicationId: string;
  CampaignId: string;
}

// refs: 1 - tags: named, input
export interface GetCampaignActivitiesRequest {
  ApplicationId: string;
  CampaignId: string;
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCampaignDateRangeKpiRequest {
  ApplicationId: string;
  CampaignId: string;
  EndTime?: Date | number | null;
  KpiName: string;
  NextToken?: string | null;
  PageSize?: string | null;
  StartTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface GetCampaignVersionRequest {
  ApplicationId: string;
  CampaignId: string;
  Version: string;
}

// refs: 1 - tags: named, input
export interface GetCampaignVersionsRequest {
  ApplicationId: string;
  CampaignId: string;
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCampaignsRequest {
  ApplicationId: string;
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetChannelsRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetEmailChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetEmailTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface GetEndpointRequest {
  ApplicationId: string;
  EndpointId: string;
}

// refs: 1 - tags: named, input
export interface GetEventStreamRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetExportJobRequest {
  ApplicationId: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface GetExportJobsRequest {
  ApplicationId: string;
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetGcmChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetImportJobRequest {
  ApplicationId: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface GetImportJobsRequest {
  ApplicationId: string;
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetJourneyRequest {
  ApplicationId: string;
  JourneyId: string;
}

// refs: 1 - tags: named, input
export interface GetJourneyDateRangeKpiRequest {
  ApplicationId: string;
  EndTime?: Date | number | null;
  JourneyId: string;
  KpiName: string;
  NextToken?: string | null;
  PageSize?: string | null;
  StartTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface GetJourneyExecutionActivityMetricsRequest {
  ApplicationId: string;
  JourneyActivityId: string;
  JourneyId: string;
  NextToken?: string | null;
  PageSize?: string | null;
}

// refs: 1 - tags: named, input
export interface GetJourneyExecutionMetricsRequest {
  ApplicationId: string;
  JourneyId: string;
  NextToken?: string | null;
  PageSize?: string | null;
}

// refs: 1 - tags: named, input
export interface GetPushTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRecommenderConfigurationRequest {
  RecommenderId: string;
}

// refs: 1 - tags: named, input
export interface GetRecommenderConfigurationsRequest {
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSegmentRequest {
  ApplicationId: string;
  SegmentId: string;
}

// refs: 1 - tags: named, input
export interface GetSegmentExportJobsRequest {
  ApplicationId: string;
  PageSize?: string | null;
  SegmentId: string;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSegmentImportJobsRequest {
  ApplicationId: string;
  PageSize?: string | null;
  SegmentId: string;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSegmentVersionRequest {
  ApplicationId: string;
  SegmentId: string;
  Version: string;
}

// refs: 1 - tags: named, input
export interface GetSegmentVersionsRequest {
  ApplicationId: string;
  PageSize?: string | null;
  SegmentId: string;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSegmentsRequest {
  ApplicationId: string;
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSmsChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetSmsTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface GetUserEndpointsRequest {
  ApplicationId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceChannelRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceTemplateRequest {
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface ListJourneysRequest {
  ApplicationId: string;
  PageSize?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListTemplateVersionsRequest {
  NextToken?: string | null;
  PageSize?: string | null;
  TemplateName: string;
  TemplateType: string;
}

// refs: 1 - tags: named, input
export interface ListTemplatesRequest {
  NextToken?: string | null;
  PageSize?: string | null;
  Prefix?: string | null;
  TemplateType?: string | null;
}

// refs: 1 - tags: named, input
export interface PhoneNumberValidateRequest {
  NumberValidateRequest: NumberValidateRequest;
}

// refs: 1 - tags: named, input
export interface PutEventStreamRequest {
  ApplicationId: string;
  WriteEventStream: WriteEventStream;
}

// refs: 1 - tags: named, input
export interface PutEventsRequest {
  ApplicationId: string;
  EventsRequest: EventsRequest;
}

// refs: 1 - tags: named, input
export interface RemoveAttributesRequest {
  ApplicationId: string;
  AttributeType: string;
  UpdateAttributesRequest: UpdateAttributesRequest;
}

// refs: 1 - tags: named, input
export interface SendMessagesRequest {
  ApplicationId: string;
  MessageRequest: MessageRequest;
}

// refs: 1 - tags: named, input
export interface SendUsersMessagesRequest {
  ApplicationId: string;
  SendUsersMessageRequest: SendUsersMessageRequest;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  TagsModel: TagsModel;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAdmChannelRequest {
  ADMChannelRequest: ADMChannelRequest;
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface UpdateApnsChannelRequest {
  APNSChannelRequest: APNSChannelRequest;
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface UpdateApnsSandboxChannelRequest {
  APNSSandboxChannelRequest: APNSSandboxChannelRequest;
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface UpdateApnsVoipChannelRequest {
  APNSVoipChannelRequest: APNSVoipChannelRequest;
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface UpdateApnsVoipSandboxChannelRequest {
  APNSVoipSandboxChannelRequest: APNSVoipSandboxChannelRequest;
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface UpdateApplicationSettingsRequest {
  ApplicationId: string;
  WriteApplicationSettingsRequest: WriteApplicationSettingsRequest;
}

// refs: 1 - tags: named, input
export interface UpdateBaiduChannelRequest {
  ApplicationId: string;
  BaiduChannelRequest: BaiduChannelRequest;
}

// refs: 1 - tags: named, input
export interface UpdateCampaignRequest {
  ApplicationId: string;
  CampaignId: string;
  WriteCampaignRequest: WriteCampaignRequest;
}

// refs: 1 - tags: named, input
export interface UpdateEmailChannelRequest {
  ApplicationId: string;
  EmailChannelRequest: EmailChannelRequest;
}

// refs: 1 - tags: named, input
export interface UpdateEmailTemplateRequest {
  CreateNewVersion?: boolean | null;
  EmailTemplateRequest: EmailTemplateRequest;
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateEndpointRequest {
  ApplicationId: string;
  EndpointId: string;
  EndpointRequest: EndpointRequest;
}

// refs: 1 - tags: named, input
export interface UpdateEndpointsBatchRequest {
  ApplicationId: string;
  EndpointBatchRequest: EndpointBatchRequest;
}

// refs: 1 - tags: named, input
export interface UpdateGcmChannelRequest {
  ApplicationId: string;
  GCMChannelRequest: GCMChannelRequest;
}

// refs: 1 - tags: named, input
export interface UpdateJourneyRequest {
  ApplicationId: string;
  JourneyId: string;
  WriteJourneyRequest: WriteJourneyRequest;
}

// refs: 1 - tags: named, input
export interface UpdateJourneyStateRequest {
  ApplicationId: string;
  JourneyId: string;
  JourneyStateRequest: JourneyStateRequest;
}

// refs: 1 - tags: named, input
export interface UpdatePushTemplateRequest {
  CreateNewVersion?: boolean | null;
  PushNotificationTemplateRequest: PushNotificationTemplateRequest;
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRecommenderConfigurationRequest {
  RecommenderId: string;
  UpdateRecommenderConfiguration: UpdateRecommenderConfiguration;
}

// refs: 1 - tags: named, input
export interface UpdateSegmentRequest {
  ApplicationId: string;
  SegmentId: string;
  WriteSegmentRequest: WriteSegmentRequest;
}

// refs: 1 - tags: named, input
export interface UpdateSmsChannelRequest {
  ApplicationId: string;
  SMSChannelRequest: SMSChannelRequest;
}

// refs: 1 - tags: named, input
export interface UpdateSmsTemplateRequest {
  CreateNewVersion?: boolean | null;
  SMSTemplateRequest: SMSTemplateRequest;
  TemplateName: string;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateTemplateActiveVersionRequest {
  TemplateActiveVersionRequest: TemplateActiveVersionRequest;
  TemplateName: string;
  TemplateType: string;
}

// refs: 1 - tags: named, input
export interface UpdateVoiceChannelRequest {
  ApplicationId: string;
  VoiceChannelRequest: VoiceChannelRequest;
}

// refs: 1 - tags: named, input
export interface UpdateVoiceTemplateRequest {
  CreateNewVersion?: boolean | null;
  TemplateName: string;
  Version?: string | null;
  VoiceTemplateRequest: VoiceTemplateRequest;
}

// refs: 1 - tags: named, output
export interface CreateAppResponse {
  ApplicationResponse: ApplicationResponse;
}

// refs: 1 - tags: named, output
export interface CreateCampaignResponse {
  CampaignResponse: CampaignResponse;
}

// refs: 1 - tags: named, output
export interface CreateEmailTemplateResponse {
  CreateTemplateMessageBody: CreateTemplateMessageBody;
}

// refs: 1 - tags: named, output
export interface CreateExportJobResponse {
  ExportJobResponse: ExportJobResponse;
}

// refs: 1 - tags: named, output
export interface CreateImportJobResponse {
  ImportJobResponse: ImportJobResponse;
}

// refs: 1 - tags: named, output
export interface CreateJourneyResponse {
  JourneyResponse: JourneyResponse;
}

// refs: 1 - tags: named, output
export interface CreatePushTemplateResponse {
  CreateTemplateMessageBody: CreateTemplateMessageBody;
}

// refs: 1 - tags: named, output
export interface CreateRecommenderConfigurationResponse {
  RecommenderConfigurationResponse: RecommenderConfigurationResponse;
}

// refs: 1 - tags: named, output
export interface CreateSegmentResponse {
  SegmentResponse: SegmentResponse;
}

// refs: 1 - tags: named, output
export interface CreateSmsTemplateResponse {
  CreateTemplateMessageBody: CreateTemplateMessageBody;
}

// refs: 1 - tags: named, output
export interface CreateVoiceTemplateResponse {
  CreateTemplateMessageBody: CreateTemplateMessageBody;
}

// refs: 1 - tags: named, output
export interface DeleteAdmChannelResponse {
  ADMChannelResponse: ADMChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteApnsChannelResponse {
  APNSChannelResponse: APNSChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteApnsSandboxChannelResponse {
  APNSSandboxChannelResponse: APNSSandboxChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteApnsVoipChannelResponse {
  APNSVoipChannelResponse: APNSVoipChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteApnsVoipSandboxChannelResponse {
  APNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteAppResponse {
  ApplicationResponse: ApplicationResponse;
}

// refs: 1 - tags: named, output
export interface DeleteBaiduChannelResponse {
  BaiduChannelResponse: BaiduChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteCampaignResponse {
  CampaignResponse: CampaignResponse;
}

// refs: 1 - tags: named, output
export interface DeleteEmailChannelResponse {
  EmailChannelResponse: EmailChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteEmailTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface DeleteEndpointResponse {
  EndpointResponse: EndpointResponse;
}

// refs: 1 - tags: named, output
export interface DeleteEventStreamResponse {
  EventStream: EventStream;
}

// refs: 1 - tags: named, output
export interface DeleteGcmChannelResponse {
  GCMChannelResponse: GCMChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteJourneyResponse {
  JourneyResponse: JourneyResponse;
}

// refs: 1 - tags: named, output
export interface DeletePushTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface DeleteRecommenderConfigurationResponse {
  RecommenderConfigurationResponse: RecommenderConfigurationResponse;
}

// refs: 1 - tags: named, output
export interface DeleteSegmentResponse {
  SegmentResponse: SegmentResponse;
}

// refs: 1 - tags: named, output
export interface DeleteSmsChannelResponse {
  SMSChannelResponse: SMSChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteSmsTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface DeleteUserEndpointsResponse {
  EndpointsResponse: EndpointsResponse;
}

// refs: 1 - tags: named, output
export interface DeleteVoiceChannelResponse {
  VoiceChannelResponse: VoiceChannelResponse;
}

// refs: 1 - tags: named, output
export interface DeleteVoiceTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface GetAdmChannelResponse {
  ADMChannelResponse: ADMChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetApnsChannelResponse {
  APNSChannelResponse: APNSChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetApnsSandboxChannelResponse {
  APNSSandboxChannelResponse: APNSSandboxChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetApnsVoipChannelResponse {
  APNSVoipChannelResponse: APNSVoipChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetApnsVoipSandboxChannelResponse {
  APNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetAppResponse {
  ApplicationResponse: ApplicationResponse;
}

// refs: 1 - tags: named, output
export interface GetApplicationDateRangeKpiResponse {
  ApplicationDateRangeKpiResponse: ApplicationDateRangeKpiResponse;
}

// refs: 1 - tags: named, output
export interface GetApplicationSettingsResponse {
  ApplicationSettingsResource: ApplicationSettingsResource;
}

// refs: 1 - tags: named, output
export interface GetAppsResponse {
  ApplicationsResponse: ApplicationsResponse;
}

// refs: 1 - tags: named, output
export interface GetBaiduChannelResponse {
  BaiduChannelResponse: BaiduChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetCampaignResponse {
  CampaignResponse: CampaignResponse;
}

// refs: 1 - tags: named, output
export interface GetCampaignActivitiesResponse {
  ActivitiesResponse: ActivitiesResponse;
}

// refs: 1 - tags: named, output
export interface GetCampaignDateRangeKpiResponse {
  CampaignDateRangeKpiResponse: CampaignDateRangeKpiResponse;
}

// refs: 1 - tags: named, output
export interface GetCampaignVersionResponse {
  CampaignResponse: CampaignResponse;
}

// refs: 1 - tags: named, output
export interface GetCampaignVersionsResponse {
  CampaignsResponse: CampaignsResponse;
}

// refs: 1 - tags: named, output
export interface GetCampaignsResponse {
  CampaignsResponse: CampaignsResponse;
}

// refs: 1 - tags: named, output
export interface GetChannelsResponse {
  ChannelsResponse: ChannelsResponse;
}

// refs: 1 - tags: named, output
export interface GetEmailChannelResponse {
  EmailChannelResponse: EmailChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetEmailTemplateResponse {
  EmailTemplateResponse: EmailTemplateResponse;
}

// refs: 1 - tags: named, output
export interface GetEndpointResponse {
  EndpointResponse: EndpointResponse;
}

// refs: 1 - tags: named, output
export interface GetEventStreamResponse {
  EventStream: EventStream;
}

// refs: 1 - tags: named, output
export interface GetExportJobResponse {
  ExportJobResponse: ExportJobResponse;
}

// refs: 1 - tags: named, output
export interface GetExportJobsResponse {
  ExportJobsResponse: ExportJobsResponse;
}

// refs: 1 - tags: named, output
export interface GetGcmChannelResponse {
  GCMChannelResponse: GCMChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetImportJobResponse {
  ImportJobResponse: ImportJobResponse;
}

// refs: 1 - tags: named, output
export interface GetImportJobsResponse {
  ImportJobsResponse: ImportJobsResponse;
}

// refs: 1 - tags: named, output
export interface GetJourneyResponse {
  JourneyResponse: JourneyResponse;
}

// refs: 1 - tags: named, output
export interface GetJourneyDateRangeKpiResponse {
  JourneyDateRangeKpiResponse: JourneyDateRangeKpiResponse;
}

// refs: 1 - tags: named, output
export interface GetJourneyExecutionActivityMetricsResponse {
  JourneyExecutionActivityMetricsResponse: JourneyExecutionActivityMetricsResponse;
}

// refs: 1 - tags: named, output
export interface GetJourneyExecutionMetricsResponse {
  JourneyExecutionMetricsResponse: JourneyExecutionMetricsResponse;
}

// refs: 1 - tags: named, output
export interface GetPushTemplateResponse {
  PushNotificationTemplateResponse: PushNotificationTemplateResponse;
}

// refs: 1 - tags: named, output
export interface GetRecommenderConfigurationResponse {
  RecommenderConfigurationResponse: RecommenderConfigurationResponse;
}

// refs: 1 - tags: named, output
export interface GetRecommenderConfigurationsResponse {
  ListRecommenderConfigurationsResponse: ListRecommenderConfigurationsResponse;
}

// refs: 1 - tags: named, output
export interface GetSegmentResponse {
  SegmentResponse: SegmentResponse;
}

// refs: 1 - tags: named, output
export interface GetSegmentExportJobsResponse {
  ExportJobsResponse: ExportJobsResponse;
}

// refs: 1 - tags: named, output
export interface GetSegmentImportJobsResponse {
  ImportJobsResponse: ImportJobsResponse;
}

// refs: 1 - tags: named, output
export interface GetSegmentVersionResponse {
  SegmentResponse: SegmentResponse;
}

// refs: 1 - tags: named, output
export interface GetSegmentVersionsResponse {
  SegmentsResponse: SegmentsResponse;
}

// refs: 1 - tags: named, output
export interface GetSegmentsResponse {
  SegmentsResponse: SegmentsResponse;
}

// refs: 1 - tags: named, output
export interface GetSmsChannelResponse {
  SMSChannelResponse: SMSChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetSmsTemplateResponse {
  SMSTemplateResponse: SMSTemplateResponse;
}

// refs: 1 - tags: named, output
export interface GetUserEndpointsResponse {
  EndpointsResponse: EndpointsResponse;
}

// refs: 1 - tags: named, output
export interface GetVoiceChannelResponse {
  VoiceChannelResponse: VoiceChannelResponse;
}

// refs: 1 - tags: named, output
export interface GetVoiceTemplateResponse {
  VoiceTemplateResponse: VoiceTemplateResponse;
}

// refs: 1 - tags: named, output
export interface ListJourneysResponse {
  JourneysResponse: JourneysResponse;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  TagsModel: TagsModel;
}

// refs: 1 - tags: named, output
export interface ListTemplateVersionsResponse {
  TemplateVersionsResponse: TemplateVersionsResponse;
}

// refs: 1 - tags: named, output
export interface ListTemplatesResponse {
  TemplatesResponse: TemplatesResponse;
}

// refs: 1 - tags: named, output
export interface PhoneNumberValidateResponse {
  NumberValidateResponse: NumberValidateResponse;
}

// refs: 1 - tags: named, output
export interface PutEventStreamResponse {
  EventStream: EventStream;
}

// refs: 1 - tags: named, output
export interface PutEventsResponse {
  EventsResponse: EventsResponse;
}

// refs: 1 - tags: named, output
export interface RemoveAttributesResponse {
  AttributesResource: AttributesResource;
}

// refs: 1 - tags: named, output
export interface SendMessagesResponse {
  MessageResponse: MessageResponse;
}

// refs: 1 - tags: named, output
export interface SendUsersMessagesResponse {
  SendUsersMessageResponse: SendUsersMessageResponse;
}

// refs: 1 - tags: named, output
export interface UpdateAdmChannelResponse {
  ADMChannelResponse: ADMChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateApnsChannelResponse {
  APNSChannelResponse: APNSChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateApnsSandboxChannelResponse {
  APNSSandboxChannelResponse: APNSSandboxChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateApnsVoipChannelResponse {
  APNSVoipChannelResponse: APNSVoipChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateApnsVoipSandboxChannelResponse {
  APNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateApplicationSettingsResponse {
  ApplicationSettingsResource: ApplicationSettingsResource;
}

// refs: 1 - tags: named, output
export interface UpdateBaiduChannelResponse {
  BaiduChannelResponse: BaiduChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateCampaignResponse {
  CampaignResponse: CampaignResponse;
}

// refs: 1 - tags: named, output
export interface UpdateEmailChannelResponse {
  EmailChannelResponse: EmailChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateEmailTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface UpdateEndpointResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface UpdateEndpointsBatchResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface UpdateGcmChannelResponse {
  GCMChannelResponse: GCMChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateJourneyResponse {
  JourneyResponse: JourneyResponse;
}

// refs: 1 - tags: named, output
export interface UpdateJourneyStateResponse {
  JourneyResponse: JourneyResponse;
}

// refs: 1 - tags: named, output
export interface UpdatePushTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface UpdateRecommenderConfigurationResponse {
  RecommenderConfigurationResponse: RecommenderConfigurationResponse;
}

// refs: 1 - tags: named, output
export interface UpdateSegmentResponse {
  SegmentResponse: SegmentResponse;
}

// refs: 1 - tags: named, output
export interface UpdateSmsChannelResponse {
  SMSChannelResponse: SMSChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateSmsTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface UpdateTemplateActiveVersionResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: named, output
export interface UpdateVoiceChannelResponse {
  VoiceChannelResponse: VoiceChannelResponse;
}

// refs: 1 - tags: named, output
export interface UpdateVoiceTemplateResponse {
  MessageBody: MessageBody;
}

// refs: 1 - tags: input, named, interface
export interface CreateApplicationRequest {
  Name: string;
  tags?: { [key: string]: string | null | undefined } | null;
}
function fromCreateApplicationRequest(input?: CreateApplicationRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    tags: input["tags"],
  }
}

// refs: 2 - tags: input, named, interface
export interface WriteCampaignRequest {
  AdditionalTreatments?: WriteTreatmentResource[] | null;
  CustomDeliveryConfiguration?: CustomDeliveryConfiguration | null;
  Description?: string | null;
  HoldoutPercent?: number | null;
  Hook?: CampaignHook | null;
  IsPaused?: boolean | null;
  Limits?: CampaignLimits | null;
  MessageConfiguration?: MessageConfiguration | null;
  Name?: string | null;
  Schedule?: Schedule | null;
  SegmentId?: string | null;
  SegmentVersion?: number | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateConfiguration?: TemplateConfiguration | null;
  TreatmentDescription?: string | null;
  TreatmentName?: string | null;
}
function fromWriteCampaignRequest(input?: WriteCampaignRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdditionalTreatments: input["AdditionalTreatments"]?.map(x => fromWriteTreatmentResource(x)),
    CustomDeliveryConfiguration: fromCustomDeliveryConfiguration(input["CustomDeliveryConfiguration"]),
    Description: input["Description"],
    HoldoutPercent: input["HoldoutPercent"],
    Hook: fromCampaignHook(input["Hook"]),
    IsPaused: input["IsPaused"],
    Limits: fromCampaignLimits(input["Limits"]),
    MessageConfiguration: fromMessageConfiguration(input["MessageConfiguration"]),
    Name: input["Name"],
    Schedule: fromSchedule(input["Schedule"]),
    SegmentId: input["SegmentId"],
    SegmentVersion: input["SegmentVersion"],
    tags: input["tags"],
    TemplateConfiguration: fromTemplateConfiguration(input["TemplateConfiguration"]),
    TreatmentDescription: input["TreatmentDescription"],
    TreatmentName: input["TreatmentName"],
  }
}

// refs: 2 - tags: input, named, interface
export interface WriteTreatmentResource {
  CustomDeliveryConfiguration?: CustomDeliveryConfiguration | null;
  MessageConfiguration?: MessageConfiguration | null;
  Schedule?: Schedule | null;
  SizePercent: number;
  TemplateConfiguration?: TemplateConfiguration | null;
  TreatmentDescription?: string | null;
  TreatmentName?: string | null;
}
function fromWriteTreatmentResource(input?: WriteTreatmentResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CustomDeliveryConfiguration: fromCustomDeliveryConfiguration(input["CustomDeliveryConfiguration"]),
    MessageConfiguration: fromMessageConfiguration(input["MessageConfiguration"]),
    Schedule: fromSchedule(input["Schedule"]),
    SizePercent: input["SizePercent"],
    TemplateConfiguration: fromTemplateConfiguration(input["TemplateConfiguration"]),
    TreatmentDescription: input["TreatmentDescription"],
    TreatmentName: input["TreatmentName"],
  }
}

// refs: 18 - tags: input, named, interface, output
export interface CustomDeliveryConfiguration {
  DeliveryUri: string;
  EndpointTypes?: __EndpointTypesElement[] | null;
}
function fromCustomDeliveryConfiguration(input?: CustomDeliveryConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeliveryUri: input["DeliveryUri"],
    EndpointTypes: input["EndpointTypes"],
  }
}
function toCustomDeliveryConfiguration(root: jsonP.JSONValue): CustomDeliveryConfiguration {
  return jsonP.readObj({
    required: {
      "DeliveryUri": "s",
    },
    optional: {
      "EndpointTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<__EndpointTypesElement>(x)],
    },
  }, root);
}

// refs: 26 - tags: input, named, enum, output
export type __EndpointTypesElement =
| "PUSH"
| "GCM"
| "APNS"
| "APNS_SANDBOX"
| "APNS_VOIP"
| "APNS_VOIP_SANDBOX"
| "ADM"
| "SMS"
| "VOICE"
| "EMAIL"
| "BAIDU"
| "CUSTOM"
| cmnP.UnexpectedEnumValue;

// refs: 18 - tags: input, named, interface, output
export interface MessageConfiguration {
  ADMMessage?: Message | null;
  APNSMessage?: Message | null;
  BaiduMessage?: Message | null;
  CustomMessage?: CampaignCustomMessage | null;
  DefaultMessage?: Message | null;
  EmailMessage?: CampaignEmailMessage | null;
  GCMMessage?: Message | null;
  SMSMessage?: CampaignSmsMessage | null;
}
function fromMessageConfiguration(input?: MessageConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ADMMessage: fromMessage(input["ADMMessage"]),
    APNSMessage: fromMessage(input["APNSMessage"]),
    BaiduMessage: fromMessage(input["BaiduMessage"]),
    CustomMessage: fromCampaignCustomMessage(input["CustomMessage"]),
    DefaultMessage: fromMessage(input["DefaultMessage"]),
    EmailMessage: fromCampaignEmailMessage(input["EmailMessage"]),
    GCMMessage: fromMessage(input["GCMMessage"]),
    SMSMessage: fromCampaignSmsMessage(input["SMSMessage"]),
  }
}
function toMessageConfiguration(root: jsonP.JSONValue): MessageConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ADMMessage": toMessage,
      "APNSMessage": toMessage,
      "BaiduMessage": toMessage,
      "CustomMessage": toCampaignCustomMessage,
      "DefaultMessage": toMessage,
      "EmailMessage": toCampaignEmailMessage,
      "GCMMessage": toMessage,
      "SMSMessage": toCampaignSmsMessage,
    },
  }, root);
}

// refs: 90 - tags: input, named, interface, output
export interface Message {
  Action?: Action | null;
  Body?: string | null;
  ImageIconUrl?: string | null;
  ImageSmallIconUrl?: string | null;
  ImageUrl?: string | null;
  JsonBody?: string | null;
  MediaUrl?: string | null;
  RawContent?: string | null;
  SilentPush?: boolean | null;
  TimeToLive?: number | null;
  Title?: string | null;
  Url?: string | null;
}
function fromMessage(input?: Message | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    ImageIconUrl: input["ImageIconUrl"],
    ImageSmallIconUrl: input["ImageSmallIconUrl"],
    ImageUrl: input["ImageUrl"],
    JsonBody: input["JsonBody"],
    MediaUrl: input["MediaUrl"],
    RawContent: input["RawContent"],
    SilentPush: input["SilentPush"],
    TimeToLive: input["TimeToLive"],
    Title: input["Title"],
    Url: input["Url"],
  }
}
function toMessage(root: jsonP.JSONValue): Message {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<Action>(x),
      "Body": "s",
      "ImageIconUrl": "s",
      "ImageSmallIconUrl": "s",
      "ImageUrl": "s",
      "JsonBody": "s",
      "MediaUrl": "s",
      "RawContent": "s",
      "SilentPush": "b",
      "TimeToLive": "n",
      "Title": "s",
      "Url": "s",
    },
  }, root);
}

// refs: 115 - tags: input, named, enum, output
export type Action =
| "OPEN_APP"
| "DEEP_LINK"
| "URL"
| cmnP.UnexpectedEnumValue;

// refs: 18 - tags: input, named, interface, output
export interface CampaignCustomMessage {
  Data?: string | null;
}
function fromCampaignCustomMessage(input?: CampaignCustomMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: input["Data"],
  }
}
function toCampaignCustomMessage(root: jsonP.JSONValue): CampaignCustomMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Data": "s",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface CampaignEmailMessage {
  Body?: string | null;
  FromAddress?: string | null;
  HtmlBody?: string | null;
  Title?: string | null;
}
function fromCampaignEmailMessage(input?: CampaignEmailMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    FromAddress: input["FromAddress"],
    HtmlBody: input["HtmlBody"],
    Title: input["Title"],
  }
}
function toCampaignEmailMessage(root: jsonP.JSONValue): CampaignEmailMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Body": "s",
      "FromAddress": "s",
      "HtmlBody": "s",
      "Title": "s",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface CampaignSmsMessage {
  Body?: string | null;
  MessageType?: MessageType | null;
  SenderId?: string | null;
}
function fromCampaignSmsMessage(input?: CampaignSmsMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    MessageType: input["MessageType"],
    SenderId: input["SenderId"],
  }
}
function toCampaignSmsMessage(root: jsonP.JSONValue): CampaignSmsMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Body": "s",
      "MessageType": (x: jsonP.JSONValue) => cmnP.readEnum<MessageType>(x),
      "SenderId": "s",
    },
  }, root);
}

// refs: 28 - tags: input, named, enum, output
export type MessageType =
| "TRANSACTIONAL"
| "PROMOTIONAL"
| cmnP.UnexpectedEnumValue;

// refs: 18 - tags: input, named, interface, output
export interface Schedule {
  EndTime?: string | null;
  EventFilter?: CampaignEventFilter | null;
  Frequency?: Frequency | null;
  IsLocalTime?: boolean | null;
  QuietTime?: QuietTime | null;
  StartTime: string;
  Timezone?: string | null;
}
function fromSchedule(input?: Schedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EndTime: input["EndTime"],
    EventFilter: fromCampaignEventFilter(input["EventFilter"]),
    Frequency: input["Frequency"],
    IsLocalTime: input["IsLocalTime"],
    QuietTime: fromQuietTime(input["QuietTime"]),
    StartTime: input["StartTime"],
    Timezone: input["Timezone"],
  }
}
function toSchedule(root: jsonP.JSONValue): Schedule {
  return jsonP.readObj({
    required: {
      "StartTime": "s",
    },
    optional: {
      "EndTime": "s",
      "EventFilter": toCampaignEventFilter,
      "Frequency": (x: jsonP.JSONValue) => cmnP.readEnum<Frequency>(x),
      "IsLocalTime": "b",
      "QuietTime": toQuietTime,
      "Timezone": "s",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface CampaignEventFilter {
  Dimensions: EventDimensions;
  FilterType: FilterType;
}
function fromCampaignEventFilter(input?: CampaignEventFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimensions: fromEventDimensions(input["Dimensions"]),
    FilterType: input["FilterType"],
  }
}
function toCampaignEventFilter(root: jsonP.JSONValue): CampaignEventFilter {
  return jsonP.readObj({
    required: {
      "Dimensions": toEventDimensions,
      "FilterType": (x: jsonP.JSONValue) => cmnP.readEnum<FilterType>(x),
    },
    optional: {},
  }, root);
}

// refs: 42 - tags: input, named, interface, output
export interface EventDimensions {
  Attributes?: { [key: string]: AttributeDimension | null | undefined } | null;
  EventType?: SetDimension | null;
  Metrics?: { [key: string]: MetricDimension | null | undefined } | null;
}
function fromEventDimensions(input?: EventDimensions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Attributes: jsonP.serializeMap(input["Attributes"], x => fromAttributeDimension(x)),
    EventType: fromSetDimension(input["EventType"]),
    Metrics: jsonP.serializeMap(input["Metrics"], x => fromMetricDimension(x)),
  }
}
function toEventDimensions(root: jsonP.JSONValue): EventDimensions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attributes": x => jsonP.readMap(String, toAttributeDimension, x),
      "EventType": toSetDimension,
      "Metrics": x => jsonP.readMap(String, toMetricDimension, x),
    },
  }, root);
}

// refs: 110 - tags: input, named, interface, output
export interface AttributeDimension {
  AttributeType?: AttributeType | null;
  Values: string[];
}
function fromAttributeDimension(input?: AttributeDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AttributeType: input["AttributeType"],
    Values: input["Values"],
  }
}
function toAttributeDimension(root: jsonP.JSONValue): AttributeDimension {
  return jsonP.readObj({
    required: {
      "Values": ["s"],
    },
    optional: {
      "AttributeType": (x: jsonP.JSONValue) => cmnP.readEnum<AttributeType>(x),
    },
  }, root);
}

// refs: 110 - tags: input, named, enum, output
export type AttributeType =
| "INCLUSIVE"
| "EXCLUSIVE"
| cmnP.UnexpectedEnumValue;

// refs: 280 - tags: input, named, interface, output
export interface SetDimension {
  DimensionType?: DimensionType | null;
  Values: string[];
}
function fromSetDimension(input?: SetDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DimensionType: input["DimensionType"],
    Values: input["Values"],
  }
}
function toSetDimension(root: jsonP.JSONValue): SetDimension {
  return jsonP.readObj({
    required: {
      "Values": ["s"],
    },
    optional: {
      "DimensionType": (x: jsonP.JSONValue) => cmnP.readEnum<DimensionType>(x),
    },
  }, root);
}

// refs: 280 - tags: input, named, enum, output
export type DimensionType =
| "INCLUSIVE"
| "EXCLUSIVE"
| cmnP.UnexpectedEnumValue;

// refs: 76 - tags: input, named, interface, output
export interface MetricDimension {
  ComparisonOperator: string;
  Value: number;
}
function fromMetricDimension(input?: MetricDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ComparisonOperator: input["ComparisonOperator"],
    Value: input["Value"],
  }
}
function toMetricDimension(root: jsonP.JSONValue): MetricDimension {
  return jsonP.readObj({
    required: {
      "ComparisonOperator": "s",
      "Value": "n",
    },
    optional: {},
  }, root);
}

// refs: 26 - tags: input, named, enum, output
export type FilterType =
| "SYSTEM"
| "ENDPOINT"
| cmnP.UnexpectedEnumValue;

// refs: 18 - tags: input, named, enum, output
export type Frequency =
| "ONCE"
| "HOURLY"
| "DAILY"
| "WEEKLY"
| "MONTHLY"
| "EVENT"
| cmnP.UnexpectedEnumValue;

// refs: 29 - tags: input, named, interface, output
export interface QuietTime {
  End?: string | null;
  Start?: string | null;
}
function fromQuietTime(input?: QuietTime | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    End: input["End"],
    Start: input["Start"],
  }
}
function toQuietTime(root: jsonP.JSONValue): QuietTime {
  return jsonP.readObj({
    required: {},
    optional: {
      "End": "s",
      "Start": "s",
    },
  }, root);
}

// refs: 20 - tags: input, named, interface, output
export interface TemplateConfiguration {
  EmailTemplate?: Template | null;
  PushTemplate?: Template | null;
  SMSTemplate?: Template | null;
  VoiceTemplate?: Template | null;
}
function fromTemplateConfiguration(input?: TemplateConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EmailTemplate: fromTemplate(input["EmailTemplate"]),
    PushTemplate: fromTemplate(input["PushTemplate"]),
    SMSTemplate: fromTemplate(input["SMSTemplate"]),
    VoiceTemplate: fromTemplate(input["VoiceTemplate"]),
  }
}
function toTemplateConfiguration(root: jsonP.JSONValue): TemplateConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "EmailTemplate": toTemplate,
      "PushTemplate": toTemplate,
      "SMSTemplate": toTemplate,
      "VoiceTemplate": toTemplate,
    },
  }, root);
}

// refs: 80 - tags: input, named, interface, output
export interface Template {
  Name?: string | null;
  Version?: string | null;
}
function fromTemplate(input?: Template | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Version: input["Version"],
  }
}
function toTemplate(root: jsonP.JSONValue): Template {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Version": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface CampaignHook {
  LambdaFunctionName?: string | null;
  Mode?: Mode | null;
  WebUrl?: string | null;
}
function fromCampaignHook(input?: CampaignHook | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LambdaFunctionName: input["LambdaFunctionName"],
    Mode: input["Mode"],
    WebUrl: input["WebUrl"],
  }
}
function toCampaignHook(root: jsonP.JSONValue): CampaignHook {
  return jsonP.readObj({
    required: {},
    optional: {
      "LambdaFunctionName": "s",
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<Mode>(x),
      "WebUrl": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, enum, output
export type Mode =
| "DELIVERY"
| "FILTER"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, interface, output
export interface CampaignLimits {
  Daily?: number | null;
  MaximumDuration?: number | null;
  MessagesPerSecond?: number | null;
  Total?: number | null;
}
function fromCampaignLimits(input?: CampaignLimits | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Daily: input["Daily"],
    MaximumDuration: input["MaximumDuration"],
    MessagesPerSecond: input["MessagesPerSecond"],
    Total: input["Total"],
  }
}
function toCampaignLimits(root: jsonP.JSONValue): CampaignLimits {
  return jsonP.readObj({
    required: {},
    optional: {
      "Daily": "n",
      "MaximumDuration": "n",
      "MessagesPerSecond": "n",
      "Total": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface EmailTemplateRequest {
  DefaultSubstitutions?: string | null;
  HtmlPart?: string | null;
  RecommenderId?: string | null;
  Subject?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
  TextPart?: string | null;
}
function fromEmailTemplateRequest(input?: EmailTemplateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DefaultSubstitutions: input["DefaultSubstitutions"],
    HtmlPart: input["HtmlPart"],
    RecommenderId: input["RecommenderId"],
    Subject: input["Subject"],
    tags: input["tags"],
    TemplateDescription: input["TemplateDescription"],
    TextPart: input["TextPart"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ExportJobRequest {
  RoleArn: string;
  S3UrlPrefix: string;
  SegmentId?: string | null;
  SegmentVersion?: number | null;
}
function fromExportJobRequest(input?: ExportJobRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    S3UrlPrefix: input["S3UrlPrefix"],
    SegmentId: input["SegmentId"],
    SegmentVersion: input["SegmentVersion"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ImportJobRequest {
  DefineSegment?: boolean | null;
  ExternalId?: string | null;
  Format: Format;
  RegisterEndpoints?: boolean | null;
  RoleArn: string;
  S3Url: string;
  SegmentId?: string | null;
  SegmentName?: string | null;
}
function fromImportJobRequest(input?: ImportJobRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DefineSegment: input["DefineSegment"],
    ExternalId: input["ExternalId"],
    Format: input["Format"],
    RegisterEndpoints: input["RegisterEndpoints"],
    RoleArn: input["RoleArn"],
    S3Url: input["S3Url"],
    SegmentId: input["SegmentId"],
    SegmentName: input["SegmentName"],
  }
}

// refs: 12 - tags: input, named, enum, output
export type Format =
| "CSV"
| "JSON"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface WriteJourneyRequest {
  Activities?: { [key: string]: Activity | null | undefined } | null;
  CreationDate?: string | null;
  LastModifiedDate?: string | null;
  Limits?: JourneyLimits | null;
  LocalTime?: boolean | null;
  Name: string;
  QuietTime?: QuietTime | null;
  RefreshFrequency?: string | null;
  Schedule?: JourneySchedule | null;
  StartActivity?: string | null;
  StartCondition?: StartCondition | null;
  State?: State | null;
}
function fromWriteJourneyRequest(input?: WriteJourneyRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Activities: jsonP.serializeMap(input["Activities"], x => fromActivity(x)),
    CreationDate: input["CreationDate"],
    LastModifiedDate: input["LastModifiedDate"],
    Limits: fromJourneyLimits(input["Limits"]),
    LocalTime: input["LocalTime"],
    Name: input["Name"],
    QuietTime: fromQuietTime(input["QuietTime"]),
    RefreshFrequency: input["RefreshFrequency"],
    Schedule: fromJourneySchedule(input["Schedule"]),
    StartActivity: input["StartActivity"],
    StartCondition: fromStartCondition(input["StartCondition"]),
    State: input["State"],
  }
}

// refs: 8 - tags: input, named, interface, output
export interface Activity {
  CUSTOM?: CustomMessageActivity | null;
  ConditionalSplit?: ConditionalSplitActivity | null;
  Description?: string | null;
  EMAIL?: EmailMessageActivity | null;
  Holdout?: HoldoutActivity | null;
  MultiCondition?: MultiConditionalSplitActivity | null;
  PUSH?: PushMessageActivity | null;
  RandomSplit?: RandomSplitActivity | null;
  SMS?: SMSMessageActivity | null;
  Wait?: WaitActivity | null;
}
function fromActivity(input?: Activity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CUSTOM: fromCustomMessageActivity(input["CUSTOM"]),
    ConditionalSplit: fromConditionalSplitActivity(input["ConditionalSplit"]),
    Description: input["Description"],
    EMAIL: fromEmailMessageActivity(input["EMAIL"]),
    Holdout: fromHoldoutActivity(input["Holdout"]),
    MultiCondition: fromMultiConditionalSplitActivity(input["MultiCondition"]),
    PUSH: fromPushMessageActivity(input["PUSH"]),
    RandomSplit: fromRandomSplitActivity(input["RandomSplit"]),
    SMS: fromSMSMessageActivity(input["SMS"]),
    Wait: fromWaitActivity(input["Wait"]),
  }
}
function toActivity(root: jsonP.JSONValue): Activity {
  return jsonP.readObj({
    required: {},
    optional: {
      "CUSTOM": toCustomMessageActivity,
      "ConditionalSplit": toConditionalSplitActivity,
      "Description": "s",
      "EMAIL": toEmailMessageActivity,
      "Holdout": toHoldoutActivity,
      "MultiCondition": toMultiConditionalSplitActivity,
      "PUSH": toPushMessageActivity,
      "RandomSplit": toRandomSplitActivity,
      "SMS": toSMSMessageActivity,
      "Wait": toWaitActivity,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface CustomMessageActivity {
  DeliveryUri?: string | null;
  EndpointTypes?: __EndpointTypesElement[] | null;
  MessageConfig?: JourneyCustomMessage | null;
  NextActivity?: string | null;
  TemplateName?: string | null;
  TemplateVersion?: string | null;
}
function fromCustomMessageActivity(input?: CustomMessageActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeliveryUri: input["DeliveryUri"],
    EndpointTypes: input["EndpointTypes"],
    MessageConfig: fromJourneyCustomMessage(input["MessageConfig"]),
    NextActivity: input["NextActivity"],
    TemplateName: input["TemplateName"],
    TemplateVersion: input["TemplateVersion"],
  }
}
function toCustomMessageActivity(root: jsonP.JSONValue): CustomMessageActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeliveryUri": "s",
      "EndpointTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<__EndpointTypesElement>(x)],
      "MessageConfig": toJourneyCustomMessage,
      "NextActivity": "s",
      "TemplateName": "s",
      "TemplateVersion": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface JourneyCustomMessage {
  Data?: string | null;
}
function fromJourneyCustomMessage(input?: JourneyCustomMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: input["Data"],
  }
}
function toJourneyCustomMessage(root: jsonP.JSONValue): JourneyCustomMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "Data": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface ConditionalSplitActivity {
  Condition?: Condition | null;
  EvaluationWaitTime?: WaitTime | null;
  FalseActivity?: string | null;
  TrueActivity?: string | null;
}
function fromConditionalSplitActivity(input?: ConditionalSplitActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Condition: fromCondition(input["Condition"]),
    EvaluationWaitTime: fromWaitTime(input["EvaluationWaitTime"]),
    FalseActivity: input["FalseActivity"],
    TrueActivity: input["TrueActivity"],
  }
}
function toConditionalSplitActivity(root: jsonP.JSONValue): ConditionalSplitActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Condition": toCondition,
      "EvaluationWaitTime": toWaitTime,
      "FalseActivity": "s",
      "TrueActivity": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface Condition {
  Conditions?: SimpleCondition[] | null;
  Operator?: Operator | null;
}
function fromCondition(input?: Condition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Conditions: input["Conditions"]?.map(x => fromSimpleCondition(x)),
    Operator: input["Operator"],
  }
}
function toCondition(root: jsonP.JSONValue): Condition {
  return jsonP.readObj({
    required: {},
    optional: {
      "Conditions": [toSimpleCondition],
      "Operator": (x: jsonP.JSONValue) => cmnP.readEnum<Operator>(x),
    },
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface SimpleCondition {
  EventCondition?: EventCondition | null;
  SegmentCondition?: SegmentCondition | null;
  SegmentDimensions?: SegmentDimensions | null;
}
function fromSimpleCondition(input?: SimpleCondition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EventCondition: fromEventCondition(input["EventCondition"]),
    SegmentCondition: fromSegmentCondition(input["SegmentCondition"]),
    segmentDimensions: fromSegmentDimensions(input["SegmentDimensions"]),
  }
}
function toSimpleCondition(root: jsonP.JSONValue): SimpleCondition {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventCondition": toEventCondition,
      "SegmentCondition": toSegmentCondition,
      "SegmentDimensions": toSegmentDimensions,
    },
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface EventCondition {
  Dimensions?: EventDimensions | null;
  MessageActivity?: string | null;
}
function fromEventCondition(input?: EventCondition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimensions: fromEventDimensions(input["Dimensions"]),
    MessageActivity: input["MessageActivity"],
  }
}
function toEventCondition(root: jsonP.JSONValue): EventCondition {
  return jsonP.readObj({
    required: {},
    optional: {
      "Dimensions": toEventDimensions,
      "MessageActivity": "s",
    },
  }, root);
}

// refs: 24 - tags: input, named, interface, output
export interface SegmentCondition {
  SegmentId: string;
}
function fromSegmentCondition(input?: SegmentCondition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SegmentId: input["SegmentId"],
  }
}
function toSegmentCondition(root: jsonP.JSONValue): SegmentCondition {
  return jsonP.readObj({
    required: {
      "SegmentId": "s",
    },
    optional: {},
  }, root);
}

// refs: 34 - tags: input, named, interface, output
export interface SegmentDimensions {
  Attributes?: { [key: string]: AttributeDimension | null | undefined } | null;
  Behavior?: SegmentBehaviors | null;
  Demographic?: SegmentDemographics | null;
  Location?: SegmentLocation | null;
  Metrics?: { [key: string]: MetricDimension | null | undefined } | null;
  UserAttributes?: { [key: string]: AttributeDimension | null | undefined } | null;
}
function fromSegmentDimensions(input?: SegmentDimensions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Attributes: jsonP.serializeMap(input["Attributes"], x => fromAttributeDimension(x)),
    Behavior: fromSegmentBehaviors(input["Behavior"]),
    Demographic: fromSegmentDemographics(input["Demographic"]),
    Location: fromSegmentLocation(input["Location"]),
    Metrics: jsonP.serializeMap(input["Metrics"], x => fromMetricDimension(x)),
    UserAttributes: jsonP.serializeMap(input["UserAttributes"], x => fromAttributeDimension(x)),
  }
}
function toSegmentDimensions(root: jsonP.JSONValue): SegmentDimensions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attributes": x => jsonP.readMap(String, toAttributeDimension, x),
      "Behavior": toSegmentBehaviors,
      "Demographic": toSegmentDemographics,
      "Location": toSegmentLocation,
      "Metrics": x => jsonP.readMap(String, toMetricDimension, x),
      "UserAttributes": x => jsonP.readMap(String, toAttributeDimension, x),
    },
  }, root);
}

// refs: 34 - tags: input, named, interface, output
export interface SegmentBehaviors {
  Recency?: RecencyDimension | null;
}
function fromSegmentBehaviors(input?: SegmentBehaviors | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Recency: fromRecencyDimension(input["Recency"]),
  }
}
function toSegmentBehaviors(root: jsonP.JSONValue): SegmentBehaviors {
  return jsonP.readObj({
    required: {},
    optional: {
      "Recency": toRecencyDimension,
    },
  }, root);
}

// refs: 34 - tags: input, named, interface, output
export interface RecencyDimension {
  Duration: Duration;
  RecencyType: RecencyType;
}
function fromRecencyDimension(input?: RecencyDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Duration: input["Duration"],
    RecencyType: input["RecencyType"],
  }
}
function toRecencyDimension(root: jsonP.JSONValue): RecencyDimension {
  return jsonP.readObj({
    required: {
      "Duration": (x: jsonP.JSONValue) => cmnP.readEnum<Duration>(x),
      "RecencyType": (x: jsonP.JSONValue) => cmnP.readEnum<RecencyType>(x),
    },
    optional: {},
  }, root);
}

// refs: 34 - tags: input, named, enum, output
export type Duration =
| "HR_24"
| "DAY_7"
| "DAY_14"
| "DAY_30"
| cmnP.UnexpectedEnumValue;

// refs: 34 - tags: input, named, enum, output
export type RecencyType =
| "ACTIVE"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 34 - tags: input, named, interface, output
export interface SegmentDemographics {
  AppVersion?: SetDimension | null;
  Channel?: SetDimension | null;
  DeviceType?: SetDimension | null;
  Make?: SetDimension | null;
  Model?: SetDimension | null;
  Platform?: SetDimension | null;
}
function fromSegmentDemographics(input?: SegmentDemographics | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppVersion: fromSetDimension(input["AppVersion"]),
    Channel: fromSetDimension(input["Channel"]),
    DeviceType: fromSetDimension(input["DeviceType"]),
    Make: fromSetDimension(input["Make"]),
    Model: fromSetDimension(input["Model"]),
    Platform: fromSetDimension(input["Platform"]),
  }
}
function toSegmentDemographics(root: jsonP.JSONValue): SegmentDemographics {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppVersion": toSetDimension,
      "Channel": toSetDimension,
      "DeviceType": toSetDimension,
      "Make": toSetDimension,
      "Model": toSetDimension,
      "Platform": toSetDimension,
    },
  }, root);
}

// refs: 34 - tags: input, named, interface, output
export interface SegmentLocation {
  Country?: SetDimension | null;
  GPSPoint?: GPSPointDimension | null;
}
function fromSegmentLocation(input?: SegmentLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Country: fromSetDimension(input["Country"]),
    GPSPoint: fromGPSPointDimension(input["GPSPoint"]),
  }
}
function toSegmentLocation(root: jsonP.JSONValue): SegmentLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Country": toSetDimension,
      "GPSPoint": toGPSPointDimension,
    },
  }, root);
}

// refs: 34 - tags: input, named, interface, output
export interface GPSPointDimension {
  Coordinates: GPSCoordinates;
  RangeInKilometers?: number | null;
}
function fromGPSPointDimension(input?: GPSPointDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Coordinates: fromGPSCoordinates(input["Coordinates"]),
    RangeInKilometers: input["RangeInKilometers"],
  }
}
function toGPSPointDimension(root: jsonP.JSONValue): GPSPointDimension {
  return jsonP.readObj({
    required: {
      "Coordinates": toGPSCoordinates,
    },
    optional: {
      "RangeInKilometers": "n",
    },
  }, root);
}

// refs: 34 - tags: input, named, interface, output
export interface GPSCoordinates {
  Latitude: number;
  Longitude: number;
}
function fromGPSCoordinates(input?: GPSCoordinates | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Latitude: input["Latitude"],
    Longitude: input["Longitude"],
  }
}
function toGPSCoordinates(root: jsonP.JSONValue): GPSCoordinates {
  return jsonP.readObj({
    required: {
      "Latitude": "n",
      "Longitude": "n",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type Operator =
| "ALL"
| "ANY"
| cmnP.UnexpectedEnumValue;

// refs: 24 - tags: input, named, interface, output
export interface WaitTime {
  WaitFor?: string | null;
  WaitUntil?: string | null;
}
function fromWaitTime(input?: WaitTime | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    WaitFor: input["WaitFor"],
    WaitUntil: input["WaitUntil"],
  }
}
function toWaitTime(root: jsonP.JSONValue): WaitTime {
  return jsonP.readObj({
    required: {},
    optional: {
      "WaitFor": "s",
      "WaitUntil": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface EmailMessageActivity {
  MessageConfig?: JourneyEmailMessage | null;
  NextActivity?: string | null;
  TemplateName?: string | null;
  TemplateVersion?: string | null;
}
function fromEmailMessageActivity(input?: EmailMessageActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MessageConfig: fromJourneyEmailMessage(input["MessageConfig"]),
    NextActivity: input["NextActivity"],
    TemplateName: input["TemplateName"],
    TemplateVersion: input["TemplateVersion"],
  }
}
function toEmailMessageActivity(root: jsonP.JSONValue): EmailMessageActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "MessageConfig": toJourneyEmailMessage,
      "NextActivity": "s",
      "TemplateName": "s",
      "TemplateVersion": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface JourneyEmailMessage {
  FromAddress?: string | null;
}
function fromJourneyEmailMessage(input?: JourneyEmailMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromAddress: input["FromAddress"],
  }
}
function toJourneyEmailMessage(root: jsonP.JSONValue): JourneyEmailMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "FromAddress": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface HoldoutActivity {
  NextActivity?: string | null;
  Percentage: number;
}
function fromHoldoutActivity(input?: HoldoutActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NextActivity: input["NextActivity"],
    Percentage: input["Percentage"],
  }
}
function toHoldoutActivity(root: jsonP.JSONValue): HoldoutActivity {
  return jsonP.readObj({
    required: {
      "Percentage": "n",
    },
    optional: {
      "NextActivity": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface MultiConditionalSplitActivity {
  Branches?: MultiConditionalBranch[] | null;
  DefaultActivity?: string | null;
  EvaluationWaitTime?: WaitTime | null;
}
function fromMultiConditionalSplitActivity(input?: MultiConditionalSplitActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Branches: input["Branches"]?.map(x => fromMultiConditionalBranch(x)),
    DefaultActivity: input["DefaultActivity"],
    EvaluationWaitTime: fromWaitTime(input["EvaluationWaitTime"]),
  }
}
function toMultiConditionalSplitActivity(root: jsonP.JSONValue): MultiConditionalSplitActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Branches": [toMultiConditionalBranch],
      "DefaultActivity": "s",
      "EvaluationWaitTime": toWaitTime,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface MultiConditionalBranch {
  Condition?: SimpleCondition | null;
  NextActivity?: string | null;
}
function fromMultiConditionalBranch(input?: MultiConditionalBranch | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Condition: fromSimpleCondition(input["Condition"]),
    NextActivity: input["NextActivity"],
  }
}
function toMultiConditionalBranch(root: jsonP.JSONValue): MultiConditionalBranch {
  return jsonP.readObj({
    required: {},
    optional: {
      "Condition": toSimpleCondition,
      "NextActivity": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface PushMessageActivity {
  MessageConfig?: JourneyPushMessage | null;
  NextActivity?: string | null;
  TemplateName?: string | null;
  TemplateVersion?: string | null;
}
function fromPushMessageActivity(input?: PushMessageActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MessageConfig: fromJourneyPushMessage(input["MessageConfig"]),
    NextActivity: input["NextActivity"],
    TemplateName: input["TemplateName"],
    TemplateVersion: input["TemplateVersion"],
  }
}
function toPushMessageActivity(root: jsonP.JSONValue): PushMessageActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "MessageConfig": toJourneyPushMessage,
      "NextActivity": "s",
      "TemplateName": "s",
      "TemplateVersion": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface JourneyPushMessage {
  TimeToLive?: string | null;
}
function fromJourneyPushMessage(input?: JourneyPushMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TimeToLive: input["TimeToLive"],
  }
}
function toJourneyPushMessage(root: jsonP.JSONValue): JourneyPushMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "TimeToLive": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface RandomSplitActivity {
  Branches?: RandomSplitEntry[] | null;
}
function fromRandomSplitActivity(input?: RandomSplitActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Branches: input["Branches"]?.map(x => fromRandomSplitEntry(x)),
  }
}
function toRandomSplitActivity(root: jsonP.JSONValue): RandomSplitActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Branches": [toRandomSplitEntry],
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface RandomSplitEntry {
  NextActivity?: string | null;
  Percentage?: number | null;
}
function fromRandomSplitEntry(input?: RandomSplitEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NextActivity: input["NextActivity"],
    Percentage: input["Percentage"],
  }
}
function toRandomSplitEntry(root: jsonP.JSONValue): RandomSplitEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "NextActivity": "s",
      "Percentage": "n",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface SMSMessageActivity {
  MessageConfig?: JourneySMSMessage | null;
  NextActivity?: string | null;
  TemplateName?: string | null;
  TemplateVersion?: string | null;
}
function fromSMSMessageActivity(input?: SMSMessageActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MessageConfig: fromJourneySMSMessage(input["MessageConfig"]),
    NextActivity: input["NextActivity"],
    TemplateName: input["TemplateName"],
    TemplateVersion: input["TemplateVersion"],
  }
}
function toSMSMessageActivity(root: jsonP.JSONValue): SMSMessageActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "MessageConfig": toJourneySMSMessage,
      "NextActivity": "s",
      "TemplateName": "s",
      "TemplateVersion": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface JourneySMSMessage {
  MessageType?: MessageType | null;
  SenderId?: string | null;
}
function fromJourneySMSMessage(input?: JourneySMSMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MessageType: input["MessageType"],
    SenderId: input["SenderId"],
  }
}
function toJourneySMSMessage(root: jsonP.JSONValue): JourneySMSMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "MessageType": (x: jsonP.JSONValue) => cmnP.readEnum<MessageType>(x),
      "SenderId": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface WaitActivity {
  NextActivity?: string | null;
  WaitTime?: WaitTime | null;
}
function fromWaitActivity(input?: WaitActivity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NextActivity: input["NextActivity"],
    WaitTime: fromWaitTime(input["WaitTime"]),
  }
}
function toWaitActivity(root: jsonP.JSONValue): WaitActivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "NextActivity": "s",
      "WaitTime": toWaitTime,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface JourneyLimits {
  DailyCap?: number | null;
  EndpointReentryCap?: number | null;
  MessagesPerSecond?: number | null;
}
function fromJourneyLimits(input?: JourneyLimits | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DailyCap: input["DailyCap"],
    EndpointReentryCap: input["EndpointReentryCap"],
    MessagesPerSecond: input["MessagesPerSecond"],
  }
}
function toJourneyLimits(root: jsonP.JSONValue): JourneyLimits {
  return jsonP.readObj({
    required: {},
    optional: {
      "DailyCap": "n",
      "EndpointReentryCap": "n",
      "MessagesPerSecond": "n",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface JourneySchedule {
  EndTime?: Date | number | null;
  StartTime?: Date | number | null;
  Timezone?: string | null;
}
function fromJourneySchedule(input?: JourneySchedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EndTime: jsonP.serializeDate_iso8601(input["EndTime"]),
    StartTime: jsonP.serializeDate_iso8601(input["StartTime"]),
    Timezone: input["Timezone"],
  }
}
function toJourneySchedule(root: jsonP.JSONValue): JourneySchedule {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndTime": "d",
      "StartTime": "d",
      "Timezone": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface StartCondition {
  Description?: string | null;
  EventStartCondition?: EventStartCondition | null;
  SegmentStartCondition?: SegmentCondition | null;
}
function fromStartCondition(input?: StartCondition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Description: input["Description"],
    EventStartCondition: fromEventStartCondition(input["EventStartCondition"]),
    SegmentStartCondition: fromSegmentCondition(input["SegmentStartCondition"]),
  }
}
function toStartCondition(root: jsonP.JSONValue): StartCondition {
  return jsonP.readObj({
    required: {},
    optional: {
      "Description": "s",
      "EventStartCondition": toEventStartCondition,
      "SegmentStartCondition": toSegmentCondition,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface EventStartCondition {
  EventFilter?: EventFilter | null;
  SegmentId?: string | null;
}
function fromEventStartCondition(input?: EventStartCondition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EventFilter: fromEventFilter(input["EventFilter"]),
    SegmentId: input["SegmentId"],
  }
}
function toEventStartCondition(root: jsonP.JSONValue): EventStartCondition {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventFilter": toEventFilter,
      "SegmentId": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface EventFilter {
  Dimensions: EventDimensions;
  FilterType: FilterType;
}
function fromEventFilter(input?: EventFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimensions: fromEventDimensions(input["Dimensions"]),
    FilterType: input["FilterType"],
  }
}
function toEventFilter(root: jsonP.JSONValue): EventFilter {
  return jsonP.readObj({
    required: {
      "Dimensions": toEventDimensions,
      "FilterType": (x: jsonP.JSONValue) => cmnP.readEnum<FilterType>(x),
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type State =
| "DRAFT"
| "ACTIVE"
| "COMPLETED"
| "CANCELLED"
| "CLOSED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface PushNotificationTemplateRequest {
  ADM?: AndroidPushNotificationTemplate | null;
  APNS?: APNSPushNotificationTemplate | null;
  Baidu?: AndroidPushNotificationTemplate | null;
  Default?: DefaultPushNotificationTemplate | null;
  DefaultSubstitutions?: string | null;
  GCM?: AndroidPushNotificationTemplate | null;
  RecommenderId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
}
function fromPushNotificationTemplateRequest(input?: PushNotificationTemplateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ADM: fromAndroidPushNotificationTemplate(input["ADM"]),
    APNS: fromAPNSPushNotificationTemplate(input["APNS"]),
    Baidu: fromAndroidPushNotificationTemplate(input["Baidu"]),
    Default: fromDefaultPushNotificationTemplate(input["Default"]),
    DefaultSubstitutions: input["DefaultSubstitutions"],
    GCM: fromAndroidPushNotificationTemplate(input["GCM"]),
    RecommenderId: input["RecommenderId"],
    tags: input["tags"],
    TemplateDescription: input["TemplateDescription"],
  }
}

// refs: 9 - tags: input, named, interface, output
export interface AndroidPushNotificationTemplate {
  Action?: Action | null;
  Body?: string | null;
  ImageIconUrl?: string | null;
  ImageUrl?: string | null;
  RawContent?: string | null;
  SmallImageIconUrl?: string | null;
  Sound?: string | null;
  Title?: string | null;
  Url?: string | null;
}
function fromAndroidPushNotificationTemplate(input?: AndroidPushNotificationTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    ImageIconUrl: input["ImageIconUrl"],
    ImageUrl: input["ImageUrl"],
    RawContent: input["RawContent"],
    SmallImageIconUrl: input["SmallImageIconUrl"],
    Sound: input["Sound"],
    Title: input["Title"],
    Url: input["Url"],
  }
}
function toAndroidPushNotificationTemplate(root: jsonP.JSONValue): AndroidPushNotificationTemplate {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<Action>(x),
      "Body": "s",
      "ImageIconUrl": "s",
      "ImageUrl": "s",
      "RawContent": "s",
      "SmallImageIconUrl": "s",
      "Sound": "s",
      "Title": "s",
      "Url": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface APNSPushNotificationTemplate {
  Action?: Action | null;
  Body?: string | null;
  MediaUrl?: string | null;
  RawContent?: string | null;
  Sound?: string | null;
  Title?: string | null;
  Url?: string | null;
}
function fromAPNSPushNotificationTemplate(input?: APNSPushNotificationTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    MediaUrl: input["MediaUrl"],
    RawContent: input["RawContent"],
    Sound: input["Sound"],
    Title: input["Title"],
    Url: input["Url"],
  }
}
function toAPNSPushNotificationTemplate(root: jsonP.JSONValue): APNSPushNotificationTemplate {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<Action>(x),
      "Body": "s",
      "MediaUrl": "s",
      "RawContent": "s",
      "Sound": "s",
      "Title": "s",
      "Url": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DefaultPushNotificationTemplate {
  Action?: Action | null;
  Body?: string | null;
  Sound?: string | null;
  Title?: string | null;
  Url?: string | null;
}
function fromDefaultPushNotificationTemplate(input?: DefaultPushNotificationTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    Sound: input["Sound"],
    Title: input["Title"],
    Url: input["Url"],
  }
}
function toDefaultPushNotificationTemplate(root: jsonP.JSONValue): DefaultPushNotificationTemplate {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<Action>(x),
      "Body": "s",
      "Sound": "s",
      "Title": "s",
      "Url": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface CreateRecommenderConfiguration {
  Attributes?: { [key: string]: string | null | undefined } | null;
  Description?: string | null;
  Name?: string | null;
  RecommendationProviderIdType?: string | null;
  RecommendationProviderRoleArn: string;
  RecommendationProviderUri: string;
  RecommendationTransformerUri?: string | null;
  RecommendationsDisplayName?: string | null;
  RecommendationsPerMessage?: number | null;
}
function fromCreateRecommenderConfiguration(input?: CreateRecommenderConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Attributes: input["Attributes"],
    Description: input["Description"],
    Name: input["Name"],
    RecommendationProviderIdType: input["RecommendationProviderIdType"],
    RecommendationProviderRoleArn: input["RecommendationProviderRoleArn"],
    RecommendationProviderUri: input["RecommendationProviderUri"],
    RecommendationTransformerUri: input["RecommendationTransformerUri"],
    RecommendationsDisplayName: input["RecommendationsDisplayName"],
    RecommendationsPerMessage: input["RecommendationsPerMessage"],
  }
}

// refs: 2 - tags: input, named, interface
export interface WriteSegmentRequest {
  Dimensions?: SegmentDimensions | null;
  Name?: string | null;
  SegmentGroups?: SegmentGroupList | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function fromWriteSegmentRequest(input?: WriteSegmentRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimensions: fromSegmentDimensions(input["Dimensions"]),
    Name: input["Name"],
    SegmentGroups: fromSegmentGroupList(input["SegmentGroups"]),
    tags: input["tags"],
  }
}

// refs: 9 - tags: input, named, interface, output
export interface SegmentGroupList {
  Groups?: SegmentGroup[] | null;
  Include?: Include | null;
}
function fromSegmentGroupList(input?: SegmentGroupList | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Groups: input["Groups"]?.map(x => fromSegmentGroup(x)),
    Include: input["Include"],
  }
}
function toSegmentGroupList(root: jsonP.JSONValue): SegmentGroupList {
  return jsonP.readObj({
    required: {},
    optional: {
      "Groups": [toSegmentGroup],
      "Include": (x: jsonP.JSONValue) => cmnP.readEnum<Include>(x),
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface SegmentGroup {
  Dimensions?: SegmentDimensions[] | null;
  SourceSegments?: SegmentReference[] | null;
  SourceType?: SourceType | null;
  Type?: Type | null;
}
function fromSegmentGroup(input?: SegmentGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimensions: input["Dimensions"]?.map(x => fromSegmentDimensions(x)),
    SourceSegments: input["SourceSegments"]?.map(x => fromSegmentReference(x)),
    SourceType: input["SourceType"],
    Type: input["Type"],
  }
}
function toSegmentGroup(root: jsonP.JSONValue): SegmentGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "Dimensions": [toSegmentDimensions],
      "SourceSegments": [toSegmentReference],
      "SourceType": (x: jsonP.JSONValue) => cmnP.readEnum<SourceType>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<Type>(x),
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface SegmentReference {
  Id: string;
  Version?: number | null;
}
function fromSegmentReference(input?: SegmentReference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Version: input["Version"],
  }
}
function toSegmentReference(root: jsonP.JSONValue): SegmentReference {
  return jsonP.readObj({
    required: {
      "Id": "s",
    },
    optional: {
      "Version": "n",
    },
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type SourceType =
| "ALL"
| "ANY"
| "NONE"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type Type =
| "ALL"
| "ANY"
| "NONE"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type Include =
| "ALL"
| "ANY"
| "NONE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface SMSTemplateRequest {
  Body?: string | null;
  DefaultSubstitutions?: string | null;
  RecommenderId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
}
function fromSMSTemplateRequest(input?: SMSTemplateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    DefaultSubstitutions: input["DefaultSubstitutions"],
    RecommenderId: input["RecommenderId"],
    tags: input["tags"],
    TemplateDescription: input["TemplateDescription"],
  }
}

// refs: 2 - tags: input, named, interface
export interface VoiceTemplateRequest {
  Body?: string | null;
  DefaultSubstitutions?: string | null;
  LanguageCode?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
  VoiceId?: string | null;
}
function fromVoiceTemplateRequest(input?: VoiceTemplateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    DefaultSubstitutions: input["DefaultSubstitutions"],
    LanguageCode: input["LanguageCode"],
    tags: input["tags"],
    TemplateDescription: input["TemplateDescription"],
    VoiceId: input["VoiceId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface NumberValidateRequest {
  IsoCountryCode?: string | null;
  PhoneNumber?: string | null;
}
function fromNumberValidateRequest(input?: NumberValidateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsoCountryCode: input["IsoCountryCode"],
    PhoneNumber: input["PhoneNumber"],
  }
}

// refs: 1 - tags: input, named, interface
export interface WriteEventStream {
  DestinationStreamArn: string;
  RoleArn: string;
}
function fromWriteEventStream(input?: WriteEventStream | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationStreamArn: input["DestinationStreamArn"],
    RoleArn: input["RoleArn"],
  }
}

// refs: 1 - tags: input, named, interface
export interface EventsRequest {
  BatchItem: { [key: string]: EventsBatch | null | undefined };
}
function fromEventsRequest(input?: EventsRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BatchItem: jsonP.serializeMap(input["BatchItem"], x => fromEventsBatch(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface EventsBatch {
  Endpoint: PublicEndpoint;
  Events: { [key: string]: Event | null | undefined };
}
function fromEventsBatch(input?: EventsBatch | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Endpoint: fromPublicEndpoint(input["Endpoint"]),
    Events: jsonP.serializeMap(input["Events"], x => fromEvent(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface PublicEndpoint {
  Address?: string | null;
  Attributes?: { [key: string]: string[] | null | undefined } | null;
  ChannelType?: ChannelType | null;
  Demographic?: EndpointDemographic | null;
  EffectiveDate?: string | null;
  EndpointStatus?: string | null;
  Location?: EndpointLocation | null;
  Metrics?: { [key: string]: number | null | undefined } | null;
  OptOut?: string | null;
  RequestId?: string | null;
  User?: EndpointUser | null;
}
function fromPublicEndpoint(input?: PublicEndpoint | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address: input["Address"],
    Attributes: input["Attributes"],
    ChannelType: input["ChannelType"],
    Demographic: fromEndpointDemographic(input["Demographic"]),
    EffectiveDate: input["EffectiveDate"],
    EndpointStatus: input["EndpointStatus"],
    Location: fromEndpointLocation(input["Location"]),
    Metrics: input["Metrics"],
    OptOut: input["OptOut"],
    RequestId: input["RequestId"],
    User: fromEndpointUser(input["User"]),
  }
}

// refs: 8 - tags: input, named, enum, output
export type ChannelType =
| "PUSH"
| "GCM"
| "APNS"
| "APNS_SANDBOX"
| "APNS_VOIP"
| "APNS_VOIP_SANDBOX"
| "ADM"
| "SMS"
| "VOICE"
| "EMAIL"
| "BAIDU"
| "CUSTOM"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface EndpointDemographic {
  AppVersion?: string | null;
  Locale?: string | null;
  Make?: string | null;
  Model?: string | null;
  ModelVersion?: string | null;
  Platform?: string | null;
  PlatformVersion?: string | null;
  Timezone?: string | null;
}
function fromEndpointDemographic(input?: EndpointDemographic | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppVersion: input["AppVersion"],
    Locale: input["Locale"],
    Make: input["Make"],
    Model: input["Model"],
    ModelVersion: input["ModelVersion"],
    Platform: input["Platform"],
    PlatformVersion: input["PlatformVersion"],
    Timezone: input["Timezone"],
  }
}
function toEndpointDemographic(root: jsonP.JSONValue): EndpointDemographic {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppVersion": "s",
      "Locale": "s",
      "Make": "s",
      "Model": "s",
      "ModelVersion": "s",
      "Platform": "s",
      "PlatformVersion": "s",
      "Timezone": "s",
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface EndpointLocation {
  City?: string | null;
  Country?: string | null;
  Latitude?: number | null;
  Longitude?: number | null;
  PostalCode?: string | null;
  Region?: string | null;
}
function fromEndpointLocation(input?: EndpointLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    City: input["City"],
    Country: input["Country"],
    Latitude: input["Latitude"],
    Longitude: input["Longitude"],
    PostalCode: input["PostalCode"],
    Region: input["Region"],
  }
}
function toEndpointLocation(root: jsonP.JSONValue): EndpointLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "City": "s",
      "Country": "s",
      "Latitude": "n",
      "Longitude": "n",
      "PostalCode": "s",
      "Region": "s",
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface EndpointUser {
  UserAttributes?: { [key: string]: string[] | null | undefined } | null;
  UserId?: string | null;
}
function fromEndpointUser(input?: EndpointUser | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserAttributes: input["UserAttributes"],
    UserId: input["UserId"],
  }
}
function toEndpointUser(root: jsonP.JSONValue): EndpointUser {
  return jsonP.readObj({
    required: {},
    optional: {
      "UserAttributes": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "UserId": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface Event {
  AppPackageName?: string | null;
  AppTitle?: string | null;
  AppVersionCode?: string | null;
  Attributes?: { [key: string]: string | null | undefined } | null;
  ClientSdkVersion?: string | null;
  EventType: string;
  Metrics?: { [key: string]: number | null | undefined } | null;
  SdkName?: string | null;
  Session?: Session | null;
  Timestamp: string;
}
function fromEvent(input?: Event | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppPackageName: input["AppPackageName"],
    AppTitle: input["AppTitle"],
    AppVersionCode: input["AppVersionCode"],
    Attributes: input["Attributes"],
    ClientSdkVersion: input["ClientSdkVersion"],
    EventType: input["EventType"],
    Metrics: input["Metrics"],
    SdkName: input["SdkName"],
    Session: fromSession(input["Session"]),
    Timestamp: input["Timestamp"],
  }
}

// refs: 1 - tags: input, named, interface
export interface Session {
  Duration?: number | null;
  Id: string;
  StartTimestamp: string;
  StopTimestamp?: string | null;
}
function fromSession(input?: Session | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Duration: input["Duration"],
    Id: input["Id"],
    StartTimestamp: input["StartTimestamp"],
    StopTimestamp: input["StopTimestamp"],
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateAttributesRequest {
  Blacklist?: string[] | null;
}
function fromUpdateAttributesRequest(input?: UpdateAttributesRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Blacklist: input["Blacklist"],
  }
}

// refs: 1 - tags: input, named, interface
export interface MessageRequest {
  Addresses?: { [key: string]: AddressConfiguration | null | undefined } | null;
  Context?: { [key: string]: string | null | undefined } | null;
  Endpoints?: { [key: string]: EndpointSendConfiguration | null | undefined } | null;
  MessageConfiguration: DirectMessageConfiguration;
  TemplateConfiguration?: TemplateConfiguration | null;
  TraceId?: string | null;
}
function fromMessageRequest(input?: MessageRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Addresses: jsonP.serializeMap(input["Addresses"], x => fromAddressConfiguration(x)),
    Context: input["Context"],
    Endpoints: jsonP.serializeMap(input["Endpoints"], x => fromEndpointSendConfiguration(x)),
    MessageConfiguration: fromDirectMessageConfiguration(input["MessageConfiguration"]),
    TemplateConfiguration: fromTemplateConfiguration(input["TemplateConfiguration"]),
    TraceId: input["TraceId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface AddressConfiguration {
  BodyOverride?: string | null;
  ChannelType?: ChannelType | null;
  Context?: { [key: string]: string | null | undefined } | null;
  RawContent?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  TitleOverride?: string | null;
}
function fromAddressConfiguration(input?: AddressConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BodyOverride: input["BodyOverride"],
    ChannelType: input["ChannelType"],
    Context: input["Context"],
    RawContent: input["RawContent"],
    Substitutions: input["Substitutions"],
    TitleOverride: input["TitleOverride"],
  }
}

// refs: 2 - tags: input, named, interface
export interface EndpointSendConfiguration {
  BodyOverride?: string | null;
  Context?: { [key: string]: string | null | undefined } | null;
  RawContent?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  TitleOverride?: string | null;
}
function fromEndpointSendConfiguration(input?: EndpointSendConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BodyOverride: input["BodyOverride"],
    Context: input["Context"],
    RawContent: input["RawContent"],
    Substitutions: input["Substitutions"],
    TitleOverride: input["TitleOverride"],
  }
}

// refs: 2 - tags: input, named, interface
export interface DirectMessageConfiguration {
  ADMMessage?: ADMMessage | null;
  APNSMessage?: APNSMessage | null;
  BaiduMessage?: BaiduMessage | null;
  DefaultMessage?: DefaultMessage | null;
  DefaultPushNotificationMessage?: DefaultPushNotificationMessage | null;
  EmailMessage?: EmailMessage | null;
  GCMMessage?: GCMMessage | null;
  SMSMessage?: SMSMessage | null;
  VoiceMessage?: VoiceMessage | null;
}
function fromDirectMessageConfiguration(input?: DirectMessageConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ADMMessage: fromADMMessage(input["ADMMessage"]),
    APNSMessage: fromAPNSMessage(input["APNSMessage"]),
    BaiduMessage: fromBaiduMessage(input["BaiduMessage"]),
    DefaultMessage: fromDefaultMessage(input["DefaultMessage"]),
    DefaultPushNotificationMessage: fromDefaultPushNotificationMessage(input["DefaultPushNotificationMessage"]),
    EmailMessage: fromEmailMessage(input["EmailMessage"]),
    GCMMessage: fromGCMMessage(input["GCMMessage"]),
    SMSMessage: fromSMSMessage(input["SMSMessage"]),
    VoiceMessage: fromVoiceMessage(input["VoiceMessage"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface ADMMessage {
  Action?: Action | null;
  Body?: string | null;
  ConsolidationKey?: string | null;
  Data?: { [key: string]: string | null | undefined } | null;
  ExpiresAfter?: string | null;
  IconReference?: string | null;
  ImageIconUrl?: string | null;
  ImageUrl?: string | null;
  MD5?: string | null;
  RawContent?: string | null;
  SilentPush?: boolean | null;
  SmallImageIconUrl?: string | null;
  Sound?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  Title?: string | null;
  Url?: string | null;
}
function fromADMMessage(input?: ADMMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    ConsolidationKey: input["ConsolidationKey"],
    Data: input["Data"],
    ExpiresAfter: input["ExpiresAfter"],
    IconReference: input["IconReference"],
    ImageIconUrl: input["ImageIconUrl"],
    ImageUrl: input["ImageUrl"],
    MD5: input["MD5"],
    RawContent: input["RawContent"],
    SilentPush: input["SilentPush"],
    SmallImageIconUrl: input["SmallImageIconUrl"],
    Sound: input["Sound"],
    Substitutions: input["Substitutions"],
    Title: input["Title"],
    Url: input["Url"],
  }
}

// refs: 2 - tags: input, named, interface
export interface APNSMessage {
  APNSPushType?: string | null;
  Action?: Action | null;
  Badge?: number | null;
  Body?: string | null;
  Category?: string | null;
  CollapseId?: string | null;
  Data?: { [key: string]: string | null | undefined } | null;
  MediaUrl?: string | null;
  PreferredAuthenticationMethod?: string | null;
  Priority?: string | null;
  RawContent?: string | null;
  SilentPush?: boolean | null;
  Sound?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  ThreadId?: string | null;
  TimeToLive?: number | null;
  Title?: string | null;
  Url?: string | null;
}
function fromAPNSMessage(input?: APNSMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    APNSPushType: input["APNSPushType"],
    Action: input["Action"],
    Badge: input["Badge"],
    Body: input["Body"],
    Category: input["Category"],
    CollapseId: input["CollapseId"],
    Data: input["Data"],
    MediaUrl: input["MediaUrl"],
    PreferredAuthenticationMethod: input["PreferredAuthenticationMethod"],
    Priority: input["Priority"],
    RawContent: input["RawContent"],
    SilentPush: input["SilentPush"],
    Sound: input["Sound"],
    Substitutions: input["Substitutions"],
    ThreadId: input["ThreadId"],
    TimeToLive: input["TimeToLive"],
    Title: input["Title"],
    Url: input["Url"],
  }
}

// refs: 2 - tags: input, named, interface
export interface BaiduMessage {
  Action?: Action | null;
  Body?: string | null;
  Data?: { [key: string]: string | null | undefined } | null;
  IconReference?: string | null;
  ImageIconUrl?: string | null;
  ImageUrl?: string | null;
  RawContent?: string | null;
  SilentPush?: boolean | null;
  SmallImageIconUrl?: string | null;
  Sound?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  TimeToLive?: number | null;
  Title?: string | null;
  Url?: string | null;
}
function fromBaiduMessage(input?: BaiduMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    Data: input["Data"],
    IconReference: input["IconReference"],
    ImageIconUrl: input["ImageIconUrl"],
    ImageUrl: input["ImageUrl"],
    RawContent: input["RawContent"],
    SilentPush: input["SilentPush"],
    SmallImageIconUrl: input["SmallImageIconUrl"],
    Sound: input["Sound"],
    Substitutions: input["Substitutions"],
    TimeToLive: input["TimeToLive"],
    Title: input["Title"],
    Url: input["Url"],
  }
}

// refs: 2 - tags: input, named, interface
export interface DefaultMessage {
  Body?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
}
function fromDefaultMessage(input?: DefaultMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    Substitutions: input["Substitutions"],
  }
}

// refs: 2 - tags: input, named, interface
export interface DefaultPushNotificationMessage {
  Action?: Action | null;
  Body?: string | null;
  Data?: { [key: string]: string | null | undefined } | null;
  SilentPush?: boolean | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  Title?: string | null;
  Url?: string | null;
}
function fromDefaultPushNotificationMessage(input?: DefaultPushNotificationMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    Data: input["Data"],
    SilentPush: input["SilentPush"],
    Substitutions: input["Substitutions"],
    Title: input["Title"],
    Url: input["Url"],
  }
}

// refs: 2 - tags: input, named, interface
export interface EmailMessage {
  Body?: string | null;
  FeedbackForwardingAddress?: string | null;
  FromAddress?: string | null;
  RawEmail?: RawEmail | null;
  ReplyToAddresses?: string[] | null;
  SimpleEmail?: SimpleEmail | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
}
function fromEmailMessage(input?: EmailMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    FeedbackForwardingAddress: input["FeedbackForwardingAddress"],
    FromAddress: input["FromAddress"],
    RawEmail: fromRawEmail(input["RawEmail"]),
    ReplyToAddresses: input["ReplyToAddresses"],
    SimpleEmail: fromSimpleEmail(input["SimpleEmail"]),
    Substitutions: input["Substitutions"],
  }
}

// refs: 2 - tags: input, named, interface
export interface RawEmail {
  Data?: Uint8Array | string | null;
}
function fromRawEmail(input?: RawEmail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: jsonP.serializeBlob(input["Data"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface SimpleEmail {
  HtmlPart?: SimpleEmailPart | null;
  Subject?: SimpleEmailPart | null;
  TextPart?: SimpleEmailPart | null;
}
function fromSimpleEmail(input?: SimpleEmail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    HtmlPart: fromSimpleEmailPart(input["HtmlPart"]),
    Subject: fromSimpleEmailPart(input["Subject"]),
    TextPart: fromSimpleEmailPart(input["TextPart"]),
  }
}

// refs: 6 - tags: input, named, interface
export interface SimpleEmailPart {
  Charset?: string | null;
  Data?: string | null;
}
function fromSimpleEmailPart(input?: SimpleEmailPart | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Charset: input["Charset"],
    Data: input["Data"],
  }
}

// refs: 2 - tags: input, named, interface
export interface GCMMessage {
  Action?: Action | null;
  Body?: string | null;
  CollapseKey?: string | null;
  Data?: { [key: string]: string | null | undefined } | null;
  IconReference?: string | null;
  ImageIconUrl?: string | null;
  ImageUrl?: string | null;
  Priority?: string | null;
  RawContent?: string | null;
  RestrictedPackageName?: string | null;
  SilentPush?: boolean | null;
  SmallImageIconUrl?: string | null;
  Sound?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  TimeToLive?: number | null;
  Title?: string | null;
  Url?: string | null;
}
function fromGCMMessage(input?: GCMMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Body: input["Body"],
    CollapseKey: input["CollapseKey"],
    Data: input["Data"],
    IconReference: input["IconReference"],
    ImageIconUrl: input["ImageIconUrl"],
    ImageUrl: input["ImageUrl"],
    Priority: input["Priority"],
    RawContent: input["RawContent"],
    RestrictedPackageName: input["RestrictedPackageName"],
    SilentPush: input["SilentPush"],
    SmallImageIconUrl: input["SmallImageIconUrl"],
    Sound: input["Sound"],
    Substitutions: input["Substitutions"],
    TimeToLive: input["TimeToLive"],
    Title: input["Title"],
    Url: input["Url"],
  }
}

// refs: 2 - tags: input, named, interface
export interface SMSMessage {
  Body?: string | null;
  Keyword?: string | null;
  MediaUrl?: string | null;
  MessageType?: MessageType | null;
  OriginationNumber?: string | null;
  SenderId?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
}
function fromSMSMessage(input?: SMSMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    Keyword: input["Keyword"],
    MediaUrl: input["MediaUrl"],
    MessageType: input["MessageType"],
    OriginationNumber: input["OriginationNumber"],
    SenderId: input["SenderId"],
    Substitutions: input["Substitutions"],
  }
}

// refs: 2 - tags: input, named, interface
export interface VoiceMessage {
  Body?: string | null;
  LanguageCode?: string | null;
  OriginationNumber?: string | null;
  Substitutions?: { [key: string]: string[] | null | undefined } | null;
  VoiceId?: string | null;
}
function fromVoiceMessage(input?: VoiceMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Body: input["Body"],
    LanguageCode: input["LanguageCode"],
    OriginationNumber: input["OriginationNumber"],
    Substitutions: input["Substitutions"],
    VoiceId: input["VoiceId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface SendUsersMessageRequest {
  Context?: { [key: string]: string | null | undefined } | null;
  MessageConfiguration: DirectMessageConfiguration;
  TemplateConfiguration?: TemplateConfiguration | null;
  TraceId?: string | null;
  Users: { [key: string]: EndpointSendConfiguration | null | undefined };
}
function fromSendUsersMessageRequest(input?: SendUsersMessageRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Context: input["Context"],
    MessageConfiguration: fromDirectMessageConfiguration(input["MessageConfiguration"]),
    TemplateConfiguration: fromTemplateConfiguration(input["TemplateConfiguration"]),
    TraceId: input["TraceId"],
    Users: jsonP.serializeMap(input["Users"], x => fromEndpointSendConfiguration(x)),
  }
}

// refs: 2 - tags: input, named, interface, output
export interface TagsModel {
  tags: { [key: string]: string | null | undefined };
}
function fromTagsModel(input?: TagsModel | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tags: input["tags"],
  }
}
function toTagsModel(root: jsonP.JSONValue): TagsModel {
  return jsonP.readObj({
    required: {
      "tags": x => jsonP.readMap(String, String, x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ADMChannelRequest {
  ClientId: string;
  ClientSecret: string;
  Enabled?: boolean | null;
}
function fromADMChannelRequest(input?: ADMChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ClientId: input["ClientId"],
    ClientSecret: input["ClientSecret"],
    Enabled: input["Enabled"],
  }
}

// refs: 1 - tags: input, named, interface
export interface APNSChannelRequest {
  BundleId?: string | null;
  Certificate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  PrivateKey?: string | null;
  TeamId?: string | null;
  TokenKey?: string | null;
  TokenKeyId?: string | null;
}
function fromAPNSChannelRequest(input?: APNSChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BundleId: input["BundleId"],
    Certificate: input["Certificate"],
    DefaultAuthenticationMethod: input["DefaultAuthenticationMethod"],
    Enabled: input["Enabled"],
    PrivateKey: input["PrivateKey"],
    TeamId: input["TeamId"],
    TokenKey: input["TokenKey"],
    TokenKeyId: input["TokenKeyId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface APNSSandboxChannelRequest {
  BundleId?: string | null;
  Certificate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  PrivateKey?: string | null;
  TeamId?: string | null;
  TokenKey?: string | null;
  TokenKeyId?: string | null;
}
function fromAPNSSandboxChannelRequest(input?: APNSSandboxChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BundleId: input["BundleId"],
    Certificate: input["Certificate"],
    DefaultAuthenticationMethod: input["DefaultAuthenticationMethod"],
    Enabled: input["Enabled"],
    PrivateKey: input["PrivateKey"],
    TeamId: input["TeamId"],
    TokenKey: input["TokenKey"],
    TokenKeyId: input["TokenKeyId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface APNSVoipChannelRequest {
  BundleId?: string | null;
  Certificate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  PrivateKey?: string | null;
  TeamId?: string | null;
  TokenKey?: string | null;
  TokenKeyId?: string | null;
}
function fromAPNSVoipChannelRequest(input?: APNSVoipChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BundleId: input["BundleId"],
    Certificate: input["Certificate"],
    DefaultAuthenticationMethod: input["DefaultAuthenticationMethod"],
    Enabled: input["Enabled"],
    PrivateKey: input["PrivateKey"],
    TeamId: input["TeamId"],
    TokenKey: input["TokenKey"],
    TokenKeyId: input["TokenKeyId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface APNSVoipSandboxChannelRequest {
  BundleId?: string | null;
  Certificate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  PrivateKey?: string | null;
  TeamId?: string | null;
  TokenKey?: string | null;
  TokenKeyId?: string | null;
}
function fromAPNSVoipSandboxChannelRequest(input?: APNSVoipSandboxChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BundleId: input["BundleId"],
    Certificate: input["Certificate"],
    DefaultAuthenticationMethod: input["DefaultAuthenticationMethod"],
    Enabled: input["Enabled"],
    PrivateKey: input["PrivateKey"],
    TeamId: input["TeamId"],
    TokenKey: input["TokenKey"],
    TokenKeyId: input["TokenKeyId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface WriteApplicationSettingsRequest {
  CampaignHook?: CampaignHook | null;
  CloudWatchMetricsEnabled?: boolean | null;
  EventTaggingEnabled?: boolean | null;
  Limits?: CampaignLimits | null;
  QuietTime?: QuietTime | null;
}
function fromWriteApplicationSettingsRequest(input?: WriteApplicationSettingsRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CampaignHook: fromCampaignHook(input["CampaignHook"]),
    CloudWatchMetricsEnabled: input["CloudWatchMetricsEnabled"],
    EventTaggingEnabled: input["EventTaggingEnabled"],
    Limits: fromCampaignLimits(input["Limits"]),
    QuietTime: fromQuietTime(input["QuietTime"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface BaiduChannelRequest {
  ApiKey: string;
  Enabled?: boolean | null;
  SecretKey: string;
}
function fromBaiduChannelRequest(input?: BaiduChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApiKey: input["ApiKey"],
    Enabled: input["Enabled"],
    SecretKey: input["SecretKey"],
  }
}

// refs: 1 - tags: input, named, interface
export interface EmailChannelRequest {
  ConfigurationSet?: string | null;
  Enabled?: boolean | null;
  FromAddress: string;
  Identity: string;
  RoleArn?: string | null;
}
function fromEmailChannelRequest(input?: EmailChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigurationSet: input["ConfigurationSet"],
    Enabled: input["Enabled"],
    FromAddress: input["FromAddress"],
    Identity: input["Identity"],
    RoleArn: input["RoleArn"],
  }
}

// refs: 1 - tags: input, named, interface
export interface EndpointRequest {
  Address?: string | null;
  Attributes?: { [key: string]: string[] | null | undefined } | null;
  ChannelType?: ChannelType | null;
  Demographic?: EndpointDemographic | null;
  EffectiveDate?: string | null;
  EndpointStatus?: string | null;
  Location?: EndpointLocation | null;
  Metrics?: { [key: string]: number | null | undefined } | null;
  OptOut?: string | null;
  RequestId?: string | null;
  User?: EndpointUser | null;
}
function fromEndpointRequest(input?: EndpointRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address: input["Address"],
    Attributes: input["Attributes"],
    ChannelType: input["ChannelType"],
    Demographic: fromEndpointDemographic(input["Demographic"]),
    EffectiveDate: input["EffectiveDate"],
    EndpointStatus: input["EndpointStatus"],
    Location: fromEndpointLocation(input["Location"]),
    Metrics: input["Metrics"],
    OptOut: input["OptOut"],
    RequestId: input["RequestId"],
    User: fromEndpointUser(input["User"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface EndpointBatchRequest {
  Item: EndpointBatchItem[];
}
function fromEndpointBatchRequest(input?: EndpointBatchRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Item: input["Item"]?.map(x => fromEndpointBatchItem(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface EndpointBatchItem {
  Address?: string | null;
  Attributes?: { [key: string]: string[] | null | undefined } | null;
  ChannelType?: ChannelType | null;
  Demographic?: EndpointDemographic | null;
  EffectiveDate?: string | null;
  EndpointStatus?: string | null;
  Id?: string | null;
  Location?: EndpointLocation | null;
  Metrics?: { [key: string]: number | null | undefined } | null;
  OptOut?: string | null;
  RequestId?: string | null;
  User?: EndpointUser | null;
}
function fromEndpointBatchItem(input?: EndpointBatchItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address: input["Address"],
    Attributes: input["Attributes"],
    ChannelType: input["ChannelType"],
    Demographic: fromEndpointDemographic(input["Demographic"]),
    EffectiveDate: input["EffectiveDate"],
    EndpointStatus: input["EndpointStatus"],
    Id: input["Id"],
    Location: fromEndpointLocation(input["Location"]),
    Metrics: input["Metrics"],
    OptOut: input["OptOut"],
    RequestId: input["RequestId"],
    User: fromEndpointUser(input["User"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface GCMChannelRequest {
  ApiKey: string;
  Enabled?: boolean | null;
}
function fromGCMChannelRequest(input?: GCMChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApiKey: input["ApiKey"],
    Enabled: input["Enabled"],
  }
}

// refs: 1 - tags: input, named, interface
export interface JourneyStateRequest {
  State?: State | null;
}
function fromJourneyStateRequest(input?: JourneyStateRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    State: input["State"],
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateRecommenderConfiguration {
  Attributes?: { [key: string]: string | null | undefined } | null;
  Description?: string | null;
  Name?: string | null;
  RecommendationProviderIdType?: string | null;
  RecommendationProviderRoleArn: string;
  RecommendationProviderUri: string;
  RecommendationTransformerUri?: string | null;
  RecommendationsDisplayName?: string | null;
  RecommendationsPerMessage?: number | null;
}
function fromUpdateRecommenderConfiguration(input?: UpdateRecommenderConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Attributes: input["Attributes"],
    Description: input["Description"],
    Name: input["Name"],
    RecommendationProviderIdType: input["RecommendationProviderIdType"],
    RecommendationProviderRoleArn: input["RecommendationProviderRoleArn"],
    RecommendationProviderUri: input["RecommendationProviderUri"],
    RecommendationTransformerUri: input["RecommendationTransformerUri"],
    RecommendationsDisplayName: input["RecommendationsDisplayName"],
    RecommendationsPerMessage: input["RecommendationsPerMessage"],
  }
}

// refs: 1 - tags: input, named, interface
export interface SMSChannelRequest {
  Enabled?: boolean | null;
  SenderId?: string | null;
  ShortCode?: string | null;
}
function fromSMSChannelRequest(input?: SMSChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
    SenderId: input["SenderId"],
    ShortCode: input["ShortCode"],
  }
}

// refs: 1 - tags: input, named, interface
export interface TemplateActiveVersionRequest {
  Version?: string | null;
}
function fromTemplateActiveVersionRequest(input?: TemplateActiveVersionRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Version: input["Version"],
  }
}

// refs: 1 - tags: input, named, interface
export interface VoiceChannelRequest {
  Enabled?: boolean | null;
}
function fromVoiceChannelRequest(input?: VoiceChannelRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
  }
}

// refs: 4 - tags: output, named, interface
export interface ApplicationResponse {
  Arn: string;
  Id: string;
  Name: string;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toApplicationResponse(root: jsonP.JSONValue): ApplicationResponse {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "Id": "s",
      "Name": "s",
    },
    optional: {
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface CampaignResponse {
  AdditionalTreatments?: TreatmentResource[] | null;
  ApplicationId: string;
  Arn: string;
  CreationDate: string;
  CustomDeliveryConfiguration?: CustomDeliveryConfiguration | null;
  DefaultState?: CampaignState | null;
  Description?: string | null;
  HoldoutPercent?: number | null;
  Hook?: CampaignHook | null;
  Id: string;
  IsPaused?: boolean | null;
  LastModifiedDate: string;
  Limits?: CampaignLimits | null;
  MessageConfiguration?: MessageConfiguration | null;
  Name?: string | null;
  Schedule?: Schedule | null;
  SegmentId: string;
  SegmentVersion: number;
  State?: CampaignState | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateConfiguration?: TemplateConfiguration | null;
  TreatmentDescription?: string | null;
  TreatmentName?: string | null;
  Version?: number | null;
}
function toCampaignResponse(root: jsonP.JSONValue): CampaignResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "Arn": "s",
      "CreationDate": "s",
      "Id": "s",
      "LastModifiedDate": "s",
      "SegmentId": "s",
      "SegmentVersion": "n",
    },
    optional: {
      "AdditionalTreatments": [toTreatmentResource],
      "CustomDeliveryConfiguration": toCustomDeliveryConfiguration,
      "DefaultState": toCampaignState,
      "Description": "s",
      "HoldoutPercent": "n",
      "Hook": toCampaignHook,
      "IsPaused": "b",
      "Limits": toCampaignLimits,
      "MessageConfiguration": toMessageConfiguration,
      "Name": "s",
      "Schedule": toSchedule,
      "State": toCampaignState,
      "tags": x => jsonP.readMap(String, String, x),
      "TemplateConfiguration": toTemplateConfiguration,
      "TreatmentDescription": "s",
      "TreatmentName": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface TreatmentResource {
  CustomDeliveryConfiguration?: CustomDeliveryConfiguration | null;
  Id: string;
  MessageConfiguration?: MessageConfiguration | null;
  Schedule?: Schedule | null;
  SizePercent: number;
  State?: CampaignState | null;
  TemplateConfiguration?: TemplateConfiguration | null;
  TreatmentDescription?: string | null;
  TreatmentName?: string | null;
}
function toTreatmentResource(root: jsonP.JSONValue): TreatmentResource {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "SizePercent": "n",
    },
    optional: {
      "CustomDeliveryConfiguration": toCustomDeliveryConfiguration,
      "MessageConfiguration": toMessageConfiguration,
      "Schedule": toSchedule,
      "State": toCampaignState,
      "TemplateConfiguration": toTemplateConfiguration,
      "TreatmentDescription": "s",
      "TreatmentName": "s",
    },
  }, root);
}

// refs: 21 - tags: output, named, interface
export interface CampaignState {
  CampaignStatus?: CampaignStatus | null;
}
function toCampaignState(root: jsonP.JSONValue): CampaignState {
  return jsonP.readObj({
    required: {},
    optional: {
      "CampaignStatus": (x: jsonP.JSONValue) => cmnP.readEnum<CampaignStatus>(x),
    },
  }, root);
}

// refs: 21 - tags: output, named, enum
export type CampaignStatus =
| "SCHEDULED"
| "EXECUTING"
| "PENDING_NEXT_RUN"
| "COMPLETED"
| "PAUSED"
| "DELETED"
| "INVALID"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface CreateTemplateMessageBody {
  Arn?: string | null;
  Message?: string | null;
  RequestID?: string | null;
}
function toCreateTemplateMessageBody(root: jsonP.JSONValue): CreateTemplateMessageBody {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Message": "s",
      "RequestID": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ExportJobResponse {
  ApplicationId: string;
  CompletedPieces?: number | null;
  CompletionDate?: string | null;
  CreationDate: string;
  Definition: ExportJobResource;
  FailedPieces?: number | null;
  Failures?: string[] | null;
  Id: string;
  JobStatus: JobStatus;
  TotalFailures?: number | null;
  TotalPieces?: number | null;
  TotalProcessed?: number | null;
  Type: string;
}
function toExportJobResponse(root: jsonP.JSONValue): ExportJobResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Definition": toExportJobResource,
      "Id": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Type": "s",
    },
    optional: {
      "CompletedPieces": "n",
      "CompletionDate": "s",
      "FailedPieces": "n",
      "Failures": ["s"],
      "TotalFailures": "n",
      "TotalPieces": "n",
      "TotalProcessed": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ExportJobResource {
  RoleArn: string;
  S3UrlPrefix: string;
  SegmentId?: string | null;
  SegmentVersion?: number | null;
}
function toExportJobResource(root: jsonP.JSONValue): ExportJobResource {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
      "S3UrlPrefix": "s",
    },
    optional: {
      "SegmentId": "s",
      "SegmentVersion": "n",
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type JobStatus =
| "CREATED"
| "PREPARING_FOR_INITIALIZATION"
| "INITIALIZING"
| "PROCESSING"
| "PENDING_JOB"
| "COMPLETING"
| "COMPLETED"
| "FAILING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ImportJobResponse {
  ApplicationId: string;
  CompletedPieces?: number | null;
  CompletionDate?: string | null;
  CreationDate: string;
  Definition: ImportJobResource;
  FailedPieces?: number | null;
  Failures?: string[] | null;
  Id: string;
  JobStatus: JobStatus;
  TotalFailures?: number | null;
  TotalPieces?: number | null;
  TotalProcessed?: number | null;
  Type: string;
}
function toImportJobResponse(root: jsonP.JSONValue): ImportJobResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Definition": toImportJobResource,
      "Id": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Type": "s",
    },
    optional: {
      "CompletedPieces": "n",
      "CompletionDate": "s",
      "FailedPieces": "n",
      "Failures": ["s"],
      "TotalFailures": "n",
      "TotalPieces": "n",
      "TotalProcessed": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ImportJobResource {
  DefineSegment?: boolean | null;
  ExternalId?: string | null;
  Format: Format;
  RegisterEndpoints?: boolean | null;
  RoleArn: string;
  S3Url: string;
  SegmentId?: string | null;
  SegmentName?: string | null;
}
function toImportJobResource(root: jsonP.JSONValue): ImportJobResource {
  return jsonP.readObj({
    required: {
      "Format": (x: jsonP.JSONValue) => cmnP.readEnum<Format>(x),
      "RoleArn": "s",
      "S3Url": "s",
    },
    optional: {
      "DefineSegment": "b",
      "ExternalId": "s",
      "RegisterEndpoints": "b",
      "SegmentId": "s",
      "SegmentName": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface JourneyResponse {
  Activities?: { [key: string]: Activity | null | undefined } | null;
  ApplicationId: string;
  CreationDate?: string | null;
  Id: string;
  LastModifiedDate?: string | null;
  Limits?: JourneyLimits | null;
  LocalTime?: boolean | null;
  Name: string;
  QuietTime?: QuietTime | null;
  RefreshFrequency?: string | null;
  Schedule?: JourneySchedule | null;
  StartActivity?: string | null;
  StartCondition?: StartCondition | null;
  State?: State | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toJourneyResponse(root: jsonP.JSONValue): JourneyResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "Id": "s",
      "Name": "s",
    },
    optional: {
      "Activities": x => jsonP.readMap(String, toActivity, x),
      "CreationDate": "s",
      "LastModifiedDate": "s",
      "Limits": toJourneyLimits,
      "LocalTime": "b",
      "QuietTime": toQuietTime,
      "RefreshFrequency": "s",
      "Schedule": toJourneySchedule,
      "StartActivity": "s",
      "StartCondition": toStartCondition,
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<State>(x),
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface RecommenderConfigurationResponse {
  Attributes?: { [key: string]: string | null | undefined } | null;
  CreationDate: string;
  Description?: string | null;
  Id: string;
  LastModifiedDate: string;
  Name?: string | null;
  RecommendationProviderIdType?: string | null;
  RecommendationProviderRoleArn: string;
  RecommendationProviderUri: string;
  RecommendationTransformerUri?: string | null;
  RecommendationsDisplayName?: string | null;
  RecommendationsPerMessage?: number | null;
}
function toRecommenderConfigurationResponse(root: jsonP.JSONValue): RecommenderConfigurationResponse {
  return jsonP.readObj({
    required: {
      "CreationDate": "s",
      "Id": "s",
      "LastModifiedDate": "s",
      "RecommendationProviderRoleArn": "s",
      "RecommendationProviderUri": "s",
    },
    optional: {
      "Attributes": x => jsonP.readMap(String, String, x),
      "Description": "s",
      "Name": "s",
      "RecommendationProviderIdType": "s",
      "RecommendationTransformerUri": "s",
      "RecommendationsDisplayName": "s",
      "RecommendationsPerMessage": "n",
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface SegmentResponse {
  ApplicationId: string;
  Arn: string;
  CreationDate: string;
  Dimensions?: SegmentDimensions | null;
  Id: string;
  ImportDefinition?: SegmentImportResource | null;
  LastModifiedDate?: string | null;
  Name?: string | null;
  SegmentGroups?: SegmentGroupList | null;
  SegmentType: SegmentType;
  tags?: { [key: string]: string | null | undefined } | null;
  Version?: number | null;
}
function toSegmentResponse(root: jsonP.JSONValue): SegmentResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "Arn": "s",
      "CreationDate": "s",
      "Id": "s",
      "SegmentType": (x: jsonP.JSONValue) => cmnP.readEnum<SegmentType>(x),
    },
    optional: {
      "Dimensions": toSegmentDimensions,
      "ImportDefinition": toSegmentImportResource,
      "LastModifiedDate": "s",
      "Name": "s",
      "SegmentGroups": toSegmentGroupList,
      "tags": x => jsonP.readMap(String, String, x),
      "Version": "n",
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface SegmentImportResource {
  ChannelCounts?: { [key: string]: number | null | undefined } | null;
  ExternalId: string;
  Format: Format;
  RoleArn: string;
  S3Url: string;
  Size: number;
}
function toSegmentImportResource(root: jsonP.JSONValue): SegmentImportResource {
  return jsonP.readObj({
    required: {
      "ExternalId": "s",
      "Format": (x: jsonP.JSONValue) => cmnP.readEnum<Format>(x),
      "RoleArn": "s",
      "S3Url": "s",
      "Size": "n",
    },
    optional: {
      "ChannelCounts": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type SegmentType =
| "DIMENSIONAL"
| "IMPORT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface ADMChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toADMChannelResponse(root: jsonP.JSONValue): ADMChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface APNSChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  HasTokenKey?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toAPNSChannelResponse(root: jsonP.JSONValue): APNSChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "DefaultAuthenticationMethod": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "HasTokenKey": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface APNSSandboxChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  HasTokenKey?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toAPNSSandboxChannelResponse(root: jsonP.JSONValue): APNSSandboxChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "DefaultAuthenticationMethod": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "HasTokenKey": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface APNSVoipChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  HasTokenKey?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toAPNSVoipChannelResponse(root: jsonP.JSONValue): APNSVoipChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "DefaultAuthenticationMethod": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "HasTokenKey": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface APNSVoipSandboxChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  DefaultAuthenticationMethod?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  HasTokenKey?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toAPNSVoipSandboxChannelResponse(root: jsonP.JSONValue): APNSVoipSandboxChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "DefaultAuthenticationMethod": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "HasTokenKey": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface BaiduChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  Credential: string;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toBaiduChannelResponse(root: jsonP.JSONValue): BaiduChannelResponse {
  return jsonP.readObj({
    required: {
      "Credential": "s",
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface EmailChannelResponse {
  ApplicationId?: string | null;
  ConfigurationSet?: string | null;
  CreationDate?: string | null;
  Enabled?: boolean | null;
  FromAddress?: string | null;
  HasCredential?: boolean | null;
  Id?: string | null;
  Identity?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  MessagesPerSecond?: number | null;
  Platform: string;
  RoleArn?: string | null;
  Version?: number | null;
}
function toEmailChannelResponse(root: jsonP.JSONValue): EmailChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "ConfigurationSet": "s",
      "CreationDate": "s",
      "Enabled": "b",
      "FromAddress": "s",
      "HasCredential": "b",
      "Id": "s",
      "Identity": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "MessagesPerSecond": "n",
      "RoleArn": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 11 - tags: output, named, interface
export interface MessageBody {
  Message?: string | null;
  RequestID?: string | null;
}
function toMessageBody(root: jsonP.JSONValue): MessageBody {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
      "RequestID": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface EndpointResponse {
  Address?: string | null;
  ApplicationId?: string | null;
  Attributes?: { [key: string]: string[] | null | undefined } | null;
  ChannelType?: ChannelType | null;
  CohortId?: string | null;
  CreationDate?: string | null;
  Demographic?: EndpointDemographic | null;
  EffectiveDate?: string | null;
  EndpointStatus?: string | null;
  Id?: string | null;
  Location?: EndpointLocation | null;
  Metrics?: { [key: string]: number | null | undefined } | null;
  OptOut?: string | null;
  RequestId?: string | null;
  User?: EndpointUser | null;
}
function toEndpointResponse(root: jsonP.JSONValue): EndpointResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "Address": "s",
      "ApplicationId": "s",
      "Attributes": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "ChannelType": (x: jsonP.JSONValue) => cmnP.readEnum<ChannelType>(x),
      "CohortId": "s",
      "CreationDate": "s",
      "Demographic": toEndpointDemographic,
      "EffectiveDate": "s",
      "EndpointStatus": "s",
      "Id": "s",
      "Location": toEndpointLocation,
      "Metrics": x => jsonP.readMap(String, Number, x),
      "OptOut": "s",
      "RequestId": "s",
      "User": toEndpointUser,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface EventStream {
  ApplicationId: string;
  DestinationStreamArn: string;
  ExternalId?: string | null;
  LastModifiedDate?: string | null;
  LastUpdatedBy?: string | null;
  RoleArn: string;
}
function toEventStream(root: jsonP.JSONValue): EventStream {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "DestinationStreamArn": "s",
      "RoleArn": "s",
    },
    optional: {
      "ExternalId": "s",
      "LastModifiedDate": "s",
      "LastUpdatedBy": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface GCMChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  Credential: string;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toGCMChannelResponse(root: jsonP.JSONValue): GCMChannelResponse {
  return jsonP.readObj({
    required: {
      "Credential": "s",
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface SMSChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  PromotionalMessagesPerSecond?: number | null;
  SenderId?: string | null;
  ShortCode?: string | null;
  TransactionalMessagesPerSecond?: number | null;
  Version?: number | null;
}
function toSMSChannelResponse(root: jsonP.JSONValue): SMSChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "PromotionalMessagesPerSecond": "n",
      "SenderId": "s",
      "ShortCode": "s",
      "TransactionalMessagesPerSecond": "n",
      "Version": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EndpointsResponse {
  Item: EndpointResponse[];
}
function toEndpointsResponse(root: jsonP.JSONValue): EndpointsResponse {
  return jsonP.readObj({
    required: {
      "Item": [toEndpointResponse],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface VoiceChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Platform: string;
  Version?: number | null;
}
function toVoiceChannelResponse(root: jsonP.JSONValue): VoiceChannelResponse {
  return jsonP.readObj({
    required: {
      "Platform": "s",
    },
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ApplicationDateRangeKpiResponse {
  ApplicationId: string;
  EndTime: Date | number;
  KpiName: string;
  KpiResult: BaseKpiResult;
  NextToken?: string | null;
  StartTime: Date | number;
}
function toApplicationDateRangeKpiResponse(root: jsonP.JSONValue): ApplicationDateRangeKpiResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "EndTime": "d",
      "KpiName": "s",
      "KpiResult": toBaseKpiResult,
      "StartTime": "d",
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface BaseKpiResult {
  Rows: ResultRow[];
}
function toBaseKpiResult(root: jsonP.JSONValue): BaseKpiResult {
  return jsonP.readObj({
    required: {
      "Rows": [toResultRow],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ResultRow {
  GroupedBys: ResultRowValue[];
  Values: ResultRowValue[];
}
function toResultRow(root: jsonP.JSONValue): ResultRow {
  return jsonP.readObj({
    required: {
      "GroupedBys": [toResultRowValue],
      "Values": [toResultRowValue],
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface ResultRowValue {
  Key: string;
  Type: string;
  Value: string;
}
function toResultRowValue(root: jsonP.JSONValue): ResultRowValue {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Type": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ApplicationSettingsResource {
  ApplicationId: string;
  CampaignHook?: CampaignHook | null;
  LastModifiedDate?: string | null;
  Limits?: CampaignLimits | null;
  QuietTime?: QuietTime | null;
}
function toApplicationSettingsResource(root: jsonP.JSONValue): ApplicationSettingsResource {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
    },
    optional: {
      "CampaignHook": toCampaignHook,
      "LastModifiedDate": "s",
      "Limits": toCampaignLimits,
      "QuietTime": toQuietTime,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ApplicationsResponse {
  Item?: ApplicationResponse[] | null;
  NextToken?: string | null;
}
function toApplicationsResponse(root: jsonP.JSONValue): ApplicationsResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "Item": [toApplicationResponse],
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivitiesResponse {
  Item: ActivityResponse[];
  NextToken?: string | null;
}
function toActivitiesResponse(root: jsonP.JSONValue): ActivitiesResponse {
  return jsonP.readObj({
    required: {
      "Item": [toActivityResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivityResponse {
  ApplicationId: string;
  CampaignId: string;
  End?: string | null;
  Id: string;
  Result?: string | null;
  ScheduledStart?: string | null;
  Start?: string | null;
  State?: string | null;
  SuccessfulEndpointCount?: number | null;
  TimezonesCompletedCount?: number | null;
  TimezonesTotalCount?: number | null;
  TotalEndpointCount?: number | null;
  TreatmentId?: string | null;
}
function toActivityResponse(root: jsonP.JSONValue): ActivityResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "CampaignId": "s",
      "Id": "s",
    },
    optional: {
      "End": "s",
      "Result": "s",
      "ScheduledStart": "s",
      "Start": "s",
      "State": "s",
      "SuccessfulEndpointCount": "n",
      "TimezonesCompletedCount": "n",
      "TimezonesTotalCount": "n",
      "TotalEndpointCount": "n",
      "TreatmentId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CampaignDateRangeKpiResponse {
  ApplicationId: string;
  CampaignId: string;
  EndTime: Date | number;
  KpiName: string;
  KpiResult: BaseKpiResult;
  NextToken?: string | null;
  StartTime: Date | number;
}
function toCampaignDateRangeKpiResponse(root: jsonP.JSONValue): CampaignDateRangeKpiResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "CampaignId": "s",
      "EndTime": "d",
      "KpiName": "s",
      "KpiResult": toBaseKpiResult,
      "StartTime": "d",
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CampaignsResponse {
  Item: CampaignResponse[];
  NextToken?: string | null;
}
function toCampaignsResponse(root: jsonP.JSONValue): CampaignsResponse {
  return jsonP.readObj({
    required: {
      "Item": [toCampaignResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ChannelsResponse {
  Channels: { [key: string]: ChannelResponse | null | undefined };
}
function toChannelsResponse(root: jsonP.JSONValue): ChannelsResponse {
  return jsonP.readObj({
    required: {
      "Channels": x => jsonP.readMap(String, toChannelResponse, x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ChannelResponse {
  ApplicationId?: string | null;
  CreationDate?: string | null;
  Enabled?: boolean | null;
  HasCredential?: boolean | null;
  Id?: string | null;
  IsArchived?: boolean | null;
  LastModifiedBy?: string | null;
  LastModifiedDate?: string | null;
  Version?: number | null;
}
function toChannelResponse(root: jsonP.JSONValue): ChannelResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "CreationDate": "s",
      "Enabled": "b",
      "HasCredential": "b",
      "Id": "s",
      "IsArchived": "b",
      "LastModifiedBy": "s",
      "LastModifiedDate": "s",
      "Version": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EmailTemplateResponse {
  Arn?: string | null;
  CreationDate: string;
  DefaultSubstitutions?: string | null;
  HtmlPart?: string | null;
  LastModifiedDate: string;
  RecommenderId?: string | null;
  Subject?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
  TemplateName: string;
  TemplateType: TemplateType;
  TextPart?: string | null;
  Version?: string | null;
}
function toEmailTemplateResponse(root: jsonP.JSONValue): EmailTemplateResponse {
  return jsonP.readObj({
    required: {
      "CreationDate": "s",
      "LastModifiedDate": "s",
      "TemplateName": "s",
      "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
    },
    optional: {
      "Arn": "s",
      "DefaultSubstitutions": "s",
      "HtmlPart": "s",
      "RecommenderId": "s",
      "Subject": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "TemplateDescription": "s",
      "TextPart": "s",
      "Version": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type TemplateType =
| "EMAIL"
| "SMS"
| "VOICE"
| "PUSH"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ExportJobsResponse {
  Item: ExportJobResponse[];
  NextToken?: string | null;
}
function toExportJobsResponse(root: jsonP.JSONValue): ExportJobsResponse {
  return jsonP.readObj({
    required: {
      "Item": [toExportJobResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ImportJobsResponse {
  Item: ImportJobResponse[];
  NextToken?: string | null;
}
function toImportJobsResponse(root: jsonP.JSONValue): ImportJobsResponse {
  return jsonP.readObj({
    required: {
      "Item": [toImportJobResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JourneyDateRangeKpiResponse {
  ApplicationId: string;
  EndTime: Date | number;
  JourneyId: string;
  KpiName: string;
  KpiResult: BaseKpiResult;
  NextToken?: string | null;
  StartTime: Date | number;
}
function toJourneyDateRangeKpiResponse(root: jsonP.JSONValue): JourneyDateRangeKpiResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "EndTime": "d",
      "JourneyId": "s",
      "KpiName": "s",
      "KpiResult": toBaseKpiResult,
      "StartTime": "d",
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JourneyExecutionActivityMetricsResponse {
  ActivityType: string;
  ApplicationId: string;
  JourneyActivityId: string;
  JourneyId: string;
  LastEvaluatedTime: string;
  Metrics: { [key: string]: string | null | undefined };
}
function toJourneyExecutionActivityMetricsResponse(root: jsonP.JSONValue): JourneyExecutionActivityMetricsResponse {
  return jsonP.readObj({
    required: {
      "ActivityType": "s",
      "ApplicationId": "s",
      "JourneyActivityId": "s",
      "JourneyId": "s",
      "LastEvaluatedTime": "s",
      "Metrics": x => jsonP.readMap(String, String, x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JourneyExecutionMetricsResponse {
  ApplicationId: string;
  JourneyId: string;
  LastEvaluatedTime: string;
  Metrics: { [key: string]: string | null | undefined };
}
function toJourneyExecutionMetricsResponse(root: jsonP.JSONValue): JourneyExecutionMetricsResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "JourneyId": "s",
      "LastEvaluatedTime": "s",
      "Metrics": x => jsonP.readMap(String, String, x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PushNotificationTemplateResponse {
  ADM?: AndroidPushNotificationTemplate | null;
  APNS?: APNSPushNotificationTemplate | null;
  Arn?: string | null;
  Baidu?: AndroidPushNotificationTemplate | null;
  CreationDate: string;
  Default?: DefaultPushNotificationTemplate | null;
  DefaultSubstitutions?: string | null;
  GCM?: AndroidPushNotificationTemplate | null;
  LastModifiedDate: string;
  RecommenderId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
  TemplateName: string;
  TemplateType: TemplateType;
  Version?: string | null;
}
function toPushNotificationTemplateResponse(root: jsonP.JSONValue): PushNotificationTemplateResponse {
  return jsonP.readObj({
    required: {
      "CreationDate": "s",
      "LastModifiedDate": "s",
      "TemplateName": "s",
      "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
    },
    optional: {
      "ADM": toAndroidPushNotificationTemplate,
      "APNS": toAPNSPushNotificationTemplate,
      "Arn": "s",
      "Baidu": toAndroidPushNotificationTemplate,
      "Default": toDefaultPushNotificationTemplate,
      "DefaultSubstitutions": "s",
      "GCM": toAndroidPushNotificationTemplate,
      "RecommenderId": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "TemplateDescription": "s",
      "Version": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListRecommenderConfigurationsResponse {
  Item: RecommenderConfigurationResponse[];
  NextToken?: string | null;
}
function toListRecommenderConfigurationsResponse(root: jsonP.JSONValue): ListRecommenderConfigurationsResponse {
  return jsonP.readObj({
    required: {
      "Item": [toRecommenderConfigurationResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SegmentsResponse {
  Item: SegmentResponse[];
  NextToken?: string | null;
}
function toSegmentsResponse(root: jsonP.JSONValue): SegmentsResponse {
  return jsonP.readObj({
    required: {
      "Item": [toSegmentResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SMSTemplateResponse {
  Arn?: string | null;
  Body?: string | null;
  CreationDate: string;
  DefaultSubstitutions?: string | null;
  LastModifiedDate: string;
  RecommenderId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
  TemplateName: string;
  TemplateType: TemplateType;
  Version?: string | null;
}
function toSMSTemplateResponse(root: jsonP.JSONValue): SMSTemplateResponse {
  return jsonP.readObj({
    required: {
      "CreationDate": "s",
      "LastModifiedDate": "s",
      "TemplateName": "s",
      "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
    },
    optional: {
      "Arn": "s",
      "Body": "s",
      "DefaultSubstitutions": "s",
      "RecommenderId": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "TemplateDescription": "s",
      "Version": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VoiceTemplateResponse {
  Arn?: string | null;
  Body?: string | null;
  CreationDate: string;
  DefaultSubstitutions?: string | null;
  LanguageCode?: string | null;
  LastModifiedDate: string;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
  TemplateName: string;
  TemplateType: TemplateType;
  Version?: string | null;
  VoiceId?: string | null;
}
function toVoiceTemplateResponse(root: jsonP.JSONValue): VoiceTemplateResponse {
  return jsonP.readObj({
    required: {
      "CreationDate": "s",
      "LastModifiedDate": "s",
      "TemplateName": "s",
      "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
    },
    optional: {
      "Arn": "s",
      "Body": "s",
      "DefaultSubstitutions": "s",
      "LanguageCode": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "TemplateDescription": "s",
      "Version": "s",
      "VoiceId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JourneysResponse {
  Item: JourneyResponse[];
  NextToken?: string | null;
}
function toJourneysResponse(root: jsonP.JSONValue): JourneysResponse {
  return jsonP.readObj({
    required: {
      "Item": [toJourneyResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateVersionsResponse {
  Item: TemplateVersionResponse[];
  Message?: string | null;
  NextToken?: string | null;
  RequestID?: string | null;
}
function toTemplateVersionsResponse(root: jsonP.JSONValue): TemplateVersionsResponse {
  return jsonP.readObj({
    required: {
      "Item": [toTemplateVersionResponse],
    },
    optional: {
      "Message": "s",
      "NextToken": "s",
      "RequestID": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateVersionResponse {
  CreationDate: string;
  DefaultSubstitutions?: string | null;
  LastModifiedDate: string;
  TemplateDescription?: string | null;
  TemplateName: string;
  TemplateType: string;
  Version?: string | null;
}
function toTemplateVersionResponse(root: jsonP.JSONValue): TemplateVersionResponse {
  return jsonP.readObj({
    required: {
      "CreationDate": "s",
      "LastModifiedDate": "s",
      "TemplateName": "s",
      "TemplateType": "s",
    },
    optional: {
      "DefaultSubstitutions": "s",
      "TemplateDescription": "s",
      "Version": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplatesResponse {
  Item: TemplateResponse[];
  NextToken?: string | null;
}
function toTemplatesResponse(root: jsonP.JSONValue): TemplatesResponse {
  return jsonP.readObj({
    required: {
      "Item": [toTemplateResponse],
    },
    optional: {
      "NextToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TemplateResponse {
  Arn?: string | null;
  CreationDate: string;
  DefaultSubstitutions?: string | null;
  LastModifiedDate: string;
  tags?: { [key: string]: string | null | undefined } | null;
  TemplateDescription?: string | null;
  TemplateName: string;
  TemplateType: TemplateType;
  Version?: string | null;
}
function toTemplateResponse(root: jsonP.JSONValue): TemplateResponse {
  return jsonP.readObj({
    required: {
      "CreationDate": "s",
      "LastModifiedDate": "s",
      "TemplateName": "s",
      "TemplateType": (x: jsonP.JSONValue) => cmnP.readEnum<TemplateType>(x),
    },
    optional: {
      "Arn": "s",
      "DefaultSubstitutions": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "TemplateDescription": "s",
      "Version": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NumberValidateResponse {
  Carrier?: string | null;
  City?: string | null;
  CleansedPhoneNumberE164?: string | null;
  CleansedPhoneNumberNational?: string | null;
  Country?: string | null;
  CountryCodeIso2?: string | null;
  CountryCodeNumeric?: string | null;
  County?: string | null;
  OriginalCountryCodeIso2?: string | null;
  OriginalPhoneNumber?: string | null;
  PhoneType?: string | null;
  PhoneTypeCode?: number | null;
  Timezone?: string | null;
  ZipCode?: string | null;
}
function toNumberValidateResponse(root: jsonP.JSONValue): NumberValidateResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "Carrier": "s",
      "City": "s",
      "CleansedPhoneNumberE164": "s",
      "CleansedPhoneNumberNational": "s",
      "Country": "s",
      "CountryCodeIso2": "s",
      "CountryCodeNumeric": "s",
      "County": "s",
      "OriginalCountryCodeIso2": "s",
      "OriginalPhoneNumber": "s",
      "PhoneType": "s",
      "PhoneTypeCode": "n",
      "Timezone": "s",
      "ZipCode": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventsResponse {
  Results?: { [key: string]: ItemResponse | null | undefined } | null;
}
function toEventsResponse(root: jsonP.JSONValue): EventsResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "Results": x => jsonP.readMap(String, toItemResponse, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ItemResponse {
  EndpointItemResponse?: EndpointItemResponse | null;
  EventsItemResponse?: { [key: string]: EventItemResponse | null | undefined } | null;
}
function toItemResponse(root: jsonP.JSONValue): ItemResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndpointItemResponse": toEndpointItemResponse,
      "EventsItemResponse": x => jsonP.readMap(String, toEventItemResponse, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EndpointItemResponse {
  Message?: string | null;
  StatusCode?: number | null;
}
function toEndpointItemResponse(root: jsonP.JSONValue): EndpointItemResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
      "StatusCode": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventItemResponse {
  Message?: string | null;
  StatusCode?: number | null;
}
function toEventItemResponse(root: jsonP.JSONValue): EventItemResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
      "StatusCode": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AttributesResource {
  ApplicationId: string;
  AttributeType: string;
  Attributes?: string[] | null;
}
function toAttributesResource(root: jsonP.JSONValue): AttributesResource {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
      "AttributeType": "s",
    },
    optional: {
      "Attributes": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MessageResponse {
  ApplicationId: string;
  EndpointResult?: { [key: string]: EndpointMessageResult | null | undefined } | null;
  RequestId?: string | null;
  Result?: { [key: string]: MessageResult | null | undefined } | null;
}
function toMessageResponse(root: jsonP.JSONValue): MessageResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
    },
    optional: {
      "EndpointResult": x => jsonP.readMap(String, toEndpointMessageResult, x),
      "RequestId": "s",
      "Result": x => jsonP.readMap(String, toMessageResult, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EndpointMessageResult {
  Address?: string | null;
  DeliveryStatus: DeliveryStatus;
  MessageId?: string | null;
  StatusCode: number;
  StatusMessage?: string | null;
  UpdatedToken?: string | null;
}
function toEndpointMessageResult(root: jsonP.JSONValue): EndpointMessageResult {
  return jsonP.readObj({
    required: {
      "DeliveryStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeliveryStatus>(x),
      "StatusCode": "n",
    },
    optional: {
      "Address": "s",
      "MessageId": "s",
      "StatusMessage": "s",
      "UpdatedToken": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type DeliveryStatus =
| "SUCCESSFUL"
| "THROTTLED"
| "TEMPORARY_FAILURE"
| "PERMANENT_FAILURE"
| "UNKNOWN_FAILURE"
| "OPT_OUT"
| "DUPLICATE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface MessageResult {
  DeliveryStatus: DeliveryStatus;
  MessageId?: string | null;
  StatusCode: number;
  StatusMessage?: string | null;
  UpdatedToken?: string | null;
}
function toMessageResult(root: jsonP.JSONValue): MessageResult {
  return jsonP.readObj({
    required: {
      "DeliveryStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeliveryStatus>(x),
      "StatusCode": "n",
    },
    optional: {
      "MessageId": "s",
      "StatusMessage": "s",
      "UpdatedToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SendUsersMessageResponse {
  ApplicationId: string;
  RequestId?: string | null;
  Result?: { [key: string]: { [key: string]: EndpointMessageResult | null | undefined } | null | undefined } | null;
}
function toSendUsersMessageResponse(root: jsonP.JSONValue): SendUsersMessageResponse {
  return jsonP.readObj({
    required: {
      "ApplicationId": "s",
    },
    optional: {
      "RequestId": "s",
      "Result": x => jsonP.readMap(String, y => jsonP.readMap(String, toEndpointMessageResult, y)!, x),
    },
  }, root);
}
