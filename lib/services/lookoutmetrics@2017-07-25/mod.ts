// Autogenerated API client for: Amazon Lookout for Metrics

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class LookoutMetrics {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(LookoutMetrics.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "lookoutmetrics",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "LookoutMetrics",
    "serviceFullName": "Amazon Lookout for Metrics",
    "serviceId": "LookoutMetrics",
    "signatureVersion": "v4",
    "signingName": "lookoutmetrics",
    "uid": "lookoutmetrics-2017-07-25"
  };

  async activateAnomalyDetector(
    {abortSignal, ...params}: RequestConfig & s.ActivateAnomalyDetectorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ActivateAnomalyDetector",
      requestUri: "/ActivateAnomalyDetector",
    });
    await resp.text();
  }

  async backTestAnomalyDetector(
    {abortSignal, ...params}: RequestConfig & s.BackTestAnomalyDetectorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BackTestAnomalyDetector",
      requestUri: "/BackTestAnomalyDetector",
    });
    await resp.text();
  }

  async createAlert(
    {abortSignal, ...params}: RequestConfig & s.CreateAlertRequest,
  ): Promise<s.CreateAlertResponse> {
    const body: jsonP.JSONObject = {
      AlertName: params["AlertName"],
      AlertSensitivityThreshold: params["AlertSensitivityThreshold"],
      AlertDescription: params["AlertDescription"],
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      Action: fromAction(params["Action"]),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAlert",
      requestUri: "/CreateAlert",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AlertArn": "s",
      },
    }, await resp.json());
  }

  async createAnomalyDetector(
    {abortSignal, ...params}: RequestConfig & s.CreateAnomalyDetectorRequest,
  ): Promise<s.CreateAnomalyDetectorResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorName: params["AnomalyDetectorName"],
      AnomalyDetectorDescription: params["AnomalyDetectorDescription"],
      AnomalyDetectorConfig: fromAnomalyDetectorConfig(params["AnomalyDetectorConfig"]),
      KmsKeyArn: params["KmsKeyArn"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAnomalyDetector",
      requestUri: "/CreateAnomalyDetector",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyDetectorArn": "s",
      },
    }, await resp.json());
  }

  async createMetricSet(
    {abortSignal, ...params}: RequestConfig & s.CreateMetricSetRequest,
  ): Promise<s.CreateMetricSetResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      MetricSetName: params["MetricSetName"],
      MetricSetDescription: params["MetricSetDescription"],
      MetricList: params["MetricList"]?.map(x => fromMetric(x)),
      Offset: params["Offset"],
      TimestampColumn: fromTimestampColumn(params["TimestampColumn"]),
      DimensionList: params["DimensionList"],
      MetricSetFrequency: params["MetricSetFrequency"],
      MetricSource: fromMetricSource(params["MetricSource"]),
      Timezone: params["Timezone"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMetricSet",
      requestUri: "/CreateMetricSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MetricSetArn": "s",
      },
    }, await resp.json());
  }

  async deleteAlert(
    {abortSignal, ...params}: RequestConfig & s.DeleteAlertRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AlertArn: params["AlertArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAlert",
      requestUri: "/DeleteAlert",
    });
    await resp.text();
  }

  async deleteAnomalyDetector(
    {abortSignal, ...params}: RequestConfig & s.DeleteAnomalyDetectorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAnomalyDetector",
      requestUri: "/DeleteAnomalyDetector",
    });
    await resp.text();
  }

  async describeAlert(
    {abortSignal, ...params}: RequestConfig & s.DescribeAlertRequest,
  ): Promise<s.DescribeAlertResponse> {
    const body: jsonP.JSONObject = {
      AlertArn: params["AlertArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAlert",
      requestUri: "/DescribeAlert",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Alert": toAlert,
      },
    }, await resp.json());
  }

  async describeAnomalyDetectionExecutions(
    {abortSignal, ...params}: RequestConfig & s.DescribeAnomalyDetectionExecutionsRequest,
  ): Promise<s.DescribeAnomalyDetectionExecutionsResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      Timestamp: params["Timestamp"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAnomalyDetectionExecutions",
      requestUri: "/DescribeAnomalyDetectionExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ExecutionList": [toExecutionStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAnomalyDetector(
    {abortSignal, ...params}: RequestConfig & s.DescribeAnomalyDetectorRequest,
  ): Promise<s.DescribeAnomalyDetectorResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAnomalyDetector",
      requestUri: "/DescribeAnomalyDetector",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyDetectorArn": "s",
        "AnomalyDetectorName": "s",
        "AnomalyDetectorDescription": "s",
        "AnomalyDetectorConfig": toAnomalyDetectorConfigSummary,
        "CreationTime": "d",
        "LastModificationTime": "d",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AnomalyDetectorStatus>(x),
        "FailureReason": "s",
        "KmsKeyArn": "s",
      },
    }, await resp.json());
  }

  async describeMetricSet(
    {abortSignal, ...params}: RequestConfig & s.DescribeMetricSetRequest,
  ): Promise<s.DescribeMetricSetResponse> {
    const body: jsonP.JSONObject = {
      MetricSetArn: params["MetricSetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMetricSet",
      requestUri: "/DescribeMetricSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MetricSetArn": "s",
        "AnomalyDetectorArn": "s",
        "MetricSetName": "s",
        "MetricSetDescription": "s",
        "CreationTime": "d",
        "LastModificationTime": "d",
        "Offset": "n",
        "MetricList": [toMetric],
        "TimestampColumn": toTimestampColumn,
        "DimensionList": ["s"],
        "MetricSetFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.Frequency>(x),
        "Timezone": "s",
        "MetricSource": toMetricSource,
      },
    }, await resp.json());
  }

  async getAnomalyGroup(
    {abortSignal, ...params}: RequestConfig & s.GetAnomalyGroupRequest,
  ): Promise<s.GetAnomalyGroupResponse> {
    const body: jsonP.JSONObject = {
      AnomalyGroupId: params["AnomalyGroupId"],
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAnomalyGroup",
      requestUri: "/GetAnomalyGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyGroup": toAnomalyGroup,
      },
    }, await resp.json());
  }

  async getFeedback(
    {abortSignal, ...params}: RequestConfig & s.GetFeedbackRequest,
  ): Promise<s.GetFeedbackResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      AnomalyGroupTimeSeriesFeedback: fromAnomalyGroupTimeSeries(params["AnomalyGroupTimeSeriesFeedback"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFeedback",
      requestUri: "/GetFeedback",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyGroupTimeSeriesFeedback": [toTimeSeriesFeedback],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getSampleData(
    {abortSignal, ...params}: RequestConfig & s.GetSampleDataRequest = {},
  ): Promise<s.GetSampleDataResponse> {
    const body: jsonP.JSONObject = {
      S3SourceConfig: fromSampleDataS3SourceConfig(params["S3SourceConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSampleData",
      requestUri: "/GetSampleData",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HeaderValues": ["s"],
        "SampleRows": [x => jsonP.readList(String, x)],
      },
    }, await resp.json());
  }

  async listAlerts(
    {abortSignal, ...params}: RequestConfig & s.ListAlertsRequest = {},
  ): Promise<s.ListAlertsResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAlerts",
      requestUri: "/ListAlerts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AlertSummaryList": [toAlertSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAnomalyDetectors(
    {abortSignal, ...params}: RequestConfig & s.ListAnomalyDetectorsRequest = {},
  ): Promise<s.ListAnomalyDetectorsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAnomalyDetectors",
      requestUri: "/ListAnomalyDetectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyDetectorSummaryList": [toAnomalyDetectorSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAnomalyGroupSummaries(
    {abortSignal, ...params}: RequestConfig & s.ListAnomalyGroupSummariesRequest,
  ): Promise<s.ListAnomalyGroupSummariesResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      SensitivityThreshold: params["SensitivityThreshold"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAnomalyGroupSummaries",
      requestUri: "/ListAnomalyGroupSummaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyGroupSummaryList": [toAnomalyGroupSummary],
        "AnomalyGroupStatistics": toAnomalyGroupStatistics,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAnomalyGroupTimeSeries(
    {abortSignal, ...params}: RequestConfig & s.ListAnomalyGroupTimeSeriesRequest,
  ): Promise<s.ListAnomalyGroupTimeSeriesResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      AnomalyGroupId: params["AnomalyGroupId"],
      MetricName: params["MetricName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAnomalyGroupTimeSeries",
      requestUri: "/ListAnomalyGroupTimeSeries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyGroupId": "s",
        "MetricName": "s",
        "TimestampList": ["s"],
        "NextToken": "s",
        "TimeSeriesList": [toTimeSeries],
      },
    }, await resp.json());
  }

  async listMetricSets(
    {abortSignal, ...params}: RequestConfig & s.ListMetricSetsRequest = {},
  ): Promise<s.ListMetricSetsResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMetricSets",
      requestUri: "/ListMetricSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MetricSetSummaryList": [toMetricSetSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putFeedback(
    {abortSignal, ...params}: RequestConfig & s.PutFeedbackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      AnomalyGroupTimeSeriesFeedback: fromAnomalyGroupTimeSeriesFeedback(params["AnomalyGroupTimeSeriesFeedback"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutFeedback",
      requestUri: "/PutFeedback",
    });
    await resp.text();
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async updateAnomalyDetector(
    {abortSignal, ...params}: RequestConfig & s.UpdateAnomalyDetectorRequest,
  ): Promise<s.UpdateAnomalyDetectorResponse> {
    const body: jsonP.JSONObject = {
      AnomalyDetectorArn: params["AnomalyDetectorArn"],
      KmsKeyArn: params["KmsKeyArn"],
      AnomalyDetectorDescription: params["AnomalyDetectorDescription"],
      AnomalyDetectorConfig: fromAnomalyDetectorConfig(params["AnomalyDetectorConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAnomalyDetector",
      requestUri: "/UpdateAnomalyDetector",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AnomalyDetectorArn": "s",
      },
    }, await resp.json());
  }

  async updateMetricSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateMetricSetRequest,
  ): Promise<s.UpdateMetricSetResponse> {
    const body: jsonP.JSONObject = {
      MetricSetArn: params["MetricSetArn"],
      MetricSetDescription: params["MetricSetDescription"],
      MetricList: params["MetricList"]?.map(x => fromMetric(x)),
      Offset: params["Offset"],
      TimestampColumn: fromTimestampColumn(params["TimestampColumn"]),
      DimensionList: params["DimensionList"],
      MetricSetFrequency: params["MetricSetFrequency"],
      MetricSource: fromMetricSource(params["MetricSource"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMetricSet",
      requestUri: "/UpdateMetricSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MetricSetArn": "s",
      },
    }, await resp.json());
  }

}

function fromAction(input?: s.Action | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SNSConfiguration: fromSNSConfiguration(input["SNSConfiguration"]),
    LambdaConfiguration: fromLambdaConfiguration(input["LambdaConfiguration"]),
  }
}
function toAction(root: jsonP.JSONValue): s.Action {
  return jsonP.readObj({
    required: {},
    optional: {
      "SNSConfiguration": toSNSConfiguration,
      "LambdaConfiguration": toLambdaConfiguration,
    },
  }, root);
}

function fromSNSConfiguration(input?: s.SNSConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    SnsTopicArn: input["SnsTopicArn"],
  }
}
function toSNSConfiguration(root: jsonP.JSONValue): s.SNSConfiguration {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
      "SnsTopicArn": "s",
    },
    optional: {},
  }, root);
}

function fromLambdaConfiguration(input?: s.LambdaConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    LambdaArn: input["LambdaArn"],
  }
}
function toLambdaConfiguration(root: jsonP.JSONValue): s.LambdaConfiguration {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
      "LambdaArn": "s",
    },
    optional: {},
  }, root);
}

function fromAnomalyDetectorConfig(input?: s.AnomalyDetectorConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AnomalyDetectorFrequency: input["AnomalyDetectorFrequency"],
  }
}

function fromMetric(input?: s.Metric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MetricName: input["MetricName"],
    AggregationFunction: input["AggregationFunction"],
    Namespace: input["Namespace"],
  }
}
function toMetric(root: jsonP.JSONValue): s.Metric {
  return jsonP.readObj({
    required: {
      "MetricName": "s",
      "AggregationFunction": (x: jsonP.JSONValue) => cmnP.readEnum<s.AggregationFunction>(x),
    },
    optional: {
      "Namespace": "s",
    },
  }, root);
}

function fromTimestampColumn(input?: s.TimestampColumn | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ColumnName: input["ColumnName"],
    ColumnFormat: input["ColumnFormat"],
  }
}
function toTimestampColumn(root: jsonP.JSONValue): s.TimestampColumn {
  return jsonP.readObj({
    required: {},
    optional: {
      "ColumnName": "s",
      "ColumnFormat": "s",
    },
  }, root);
}

function fromMetricSource(input?: s.MetricSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3SourceConfig: fromS3SourceConfig(input["S3SourceConfig"]),
    AppFlowConfig: fromAppFlowConfig(input["AppFlowConfig"]),
    CloudWatchConfig: fromCloudWatchConfig(input["CloudWatchConfig"]),
    RDSSourceConfig: fromRDSSourceConfig(input["RDSSourceConfig"]),
    RedshiftSourceConfig: fromRedshiftSourceConfig(input["RedshiftSourceConfig"]),
  }
}
function toMetricSource(root: jsonP.JSONValue): s.MetricSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3SourceConfig": toS3SourceConfig,
      "AppFlowConfig": toAppFlowConfig,
      "CloudWatchConfig": toCloudWatchConfig,
      "RDSSourceConfig": toRDSSourceConfig,
      "RedshiftSourceConfig": toRedshiftSourceConfig,
    },
  }, root);
}

function fromS3SourceConfig(input?: s.S3SourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    TemplatedPathList: input["TemplatedPathList"],
    HistoricalDataPathList: input["HistoricalDataPathList"],
    FileFormatDescriptor: fromFileFormatDescriptor(input["FileFormatDescriptor"]),
  }
}
function toS3SourceConfig(root: jsonP.JSONValue): s.S3SourceConfig {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
    },
    optional: {
      "TemplatedPathList": ["s"],
      "HistoricalDataPathList": ["s"],
      "FileFormatDescriptor": toFileFormatDescriptor,
    },
  }, root);
}

function fromFileFormatDescriptor(input?: s.FileFormatDescriptor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CsvFormatDescriptor: fromCsvFormatDescriptor(input["CsvFormatDescriptor"]),
    JsonFormatDescriptor: fromJsonFormatDescriptor(input["JsonFormatDescriptor"]),
  }
}
function toFileFormatDescriptor(root: jsonP.JSONValue): s.FileFormatDescriptor {
  return jsonP.readObj({
    required: {},
    optional: {
      "CsvFormatDescriptor": toCsvFormatDescriptor,
      "JsonFormatDescriptor": toJsonFormatDescriptor,
    },
  }, root);
}

function fromCsvFormatDescriptor(input?: s.CsvFormatDescriptor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FileCompression: input["FileCompression"],
    Charset: input["Charset"],
    ContainsHeader: input["ContainsHeader"],
    Delimiter: input["Delimiter"],
    HeaderList: input["HeaderList"],
    QuoteSymbol: input["QuoteSymbol"],
  }
}
function toCsvFormatDescriptor(root: jsonP.JSONValue): s.CsvFormatDescriptor {
  return jsonP.readObj({
    required: {},
    optional: {
      "FileCompression": (x: jsonP.JSONValue) => cmnP.readEnum<s.CSVFileCompression>(x),
      "Charset": "s",
      "ContainsHeader": "b",
      "Delimiter": "s",
      "HeaderList": ["s"],
      "QuoteSymbol": "s",
    },
  }, root);
}

function fromJsonFormatDescriptor(input?: s.JsonFormatDescriptor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FileCompression: input["FileCompression"],
    Charset: input["Charset"],
  }
}
function toJsonFormatDescriptor(root: jsonP.JSONValue): s.JsonFormatDescriptor {
  return jsonP.readObj({
    required: {},
    optional: {
      "FileCompression": (x: jsonP.JSONValue) => cmnP.readEnum<s.JsonFileCompression>(x),
      "Charset": "s",
    },
  }, root);
}

function fromAppFlowConfig(input?: s.AppFlowConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    FlowName: input["FlowName"],
  }
}
function toAppFlowConfig(root: jsonP.JSONValue): s.AppFlowConfig {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
      "FlowName": "s",
    },
    optional: {},
  }, root);
}

function fromCloudWatchConfig(input?: s.CloudWatchConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
  }
}
function toCloudWatchConfig(root: jsonP.JSONValue): s.CloudWatchConfig {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
    },
    optional: {},
  }, root);
}

function fromRDSSourceConfig(input?: s.RDSSourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DBInstanceIdentifier: input["DBInstanceIdentifier"],
    DatabaseHost: input["DatabaseHost"],
    DatabasePort: input["DatabasePort"],
    SecretManagerArn: input["SecretManagerArn"],
    DatabaseName: input["DatabaseName"],
    TableName: input["TableName"],
    RoleArn: input["RoleArn"],
    VpcConfiguration: fromVpcConfiguration(input["VpcConfiguration"]),
  }
}
function toRDSSourceConfig(root: jsonP.JSONValue): s.RDSSourceConfig {
  return jsonP.readObj({
    required: {
      "DBInstanceIdentifier": "s",
      "DatabaseHost": "s",
      "DatabasePort": "n",
      "SecretManagerArn": "s",
      "DatabaseName": "s",
      "TableName": "s",
      "RoleArn": "s",
      "VpcConfiguration": toVpcConfiguration,
    },
    optional: {},
  }, root);
}

function fromVpcConfiguration(input?: s.VpcConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIdList: input["SubnetIdList"],
    SecurityGroupIdList: input["SecurityGroupIdList"],
  }
}
function toVpcConfiguration(root: jsonP.JSONValue): s.VpcConfiguration {
  return jsonP.readObj({
    required: {
      "SubnetIdList": ["s"],
      "SecurityGroupIdList": ["s"],
    },
    optional: {},
  }, root);
}

function fromRedshiftSourceConfig(input?: s.RedshiftSourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ClusterIdentifier: input["ClusterIdentifier"],
    DatabaseHost: input["DatabaseHost"],
    DatabasePort: input["DatabasePort"],
    SecretManagerArn: input["SecretManagerArn"],
    DatabaseName: input["DatabaseName"],
    TableName: input["TableName"],
    RoleArn: input["RoleArn"],
    VpcConfiguration: fromVpcConfiguration(input["VpcConfiguration"]),
  }
}
function toRedshiftSourceConfig(root: jsonP.JSONValue): s.RedshiftSourceConfig {
  return jsonP.readObj({
    required: {
      "ClusterIdentifier": "s",
      "DatabaseHost": "s",
      "DatabasePort": "n",
      "SecretManagerArn": "s",
      "DatabaseName": "s",
      "TableName": "s",
      "RoleArn": "s",
      "VpcConfiguration": toVpcConfiguration,
    },
    optional: {},
  }, root);
}

function fromAnomalyGroupTimeSeries(input?: s.AnomalyGroupTimeSeries | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AnomalyGroupId: input["AnomalyGroupId"],
    TimeSeriesId: input["TimeSeriesId"],
  }
}

function fromSampleDataS3SourceConfig(input?: s.SampleDataS3SourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    TemplatedPathList: input["TemplatedPathList"],
    HistoricalDataPathList: input["HistoricalDataPathList"],
    FileFormatDescriptor: fromFileFormatDescriptor(input["FileFormatDescriptor"]),
  }
}

function fromAnomalyGroupTimeSeriesFeedback(input?: s.AnomalyGroupTimeSeriesFeedback | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AnomalyGroupId: input["AnomalyGroupId"],
    TimeSeriesId: input["TimeSeriesId"],
    IsAnomaly: input["IsAnomaly"],
  }
}

function toAlert(root: jsonP.JSONValue): s.Alert {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": toAction,
      "AlertDescription": "s",
      "AlertArn": "s",
      "AnomalyDetectorArn": "s",
      "AlertName": "s",
      "AlertSensitivityThreshold": "n",
      "AlertType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AlertType>(x),
      "AlertStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.AlertStatus>(x),
      "LastModificationTime": "d",
      "CreationTime": "d",
    },
  }, root);
}

function toExecutionStatus(root: jsonP.JSONValue): s.ExecutionStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "Timestamp": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AnomalyDetectionTaskStatus>(x),
      "FailureReason": "s",
    },
  }, root);
}

function toAnomalyDetectorConfigSummary(root: jsonP.JSONValue): s.AnomalyDetectorConfigSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "AnomalyDetectorFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.Frequency>(x),
    },
  }, root);
}

function toAnomalyGroup(root: jsonP.JSONValue): s.AnomalyGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "StartTime": "s",
      "EndTime": "s",
      "AnomalyGroupId": "s",
      "AnomalyGroupScore": "n",
      "PrimaryMetricName": "s",
      "MetricLevelImpactList": [toMetricLevelImpact],
    },
  }, root);
}

function toMetricLevelImpact(root: jsonP.JSONValue): s.MetricLevelImpact {
  return jsonP.readObj({
    required: {},
    optional: {
      "MetricName": "s",
      "NumTimeSeries": "n",
      "ContributionMatrix": toContributionMatrix,
    },
  }, root);
}

function toContributionMatrix(root: jsonP.JSONValue): s.ContributionMatrix {
  return jsonP.readObj({
    required: {},
    optional: {
      "DimensionContributionList": [toDimensionContribution],
    },
  }, root);
}

function toDimensionContribution(root: jsonP.JSONValue): s.DimensionContribution {
  return jsonP.readObj({
    required: {},
    optional: {
      "DimensionName": "s",
      "DimensionValueContributionList": [toDimensionValueContribution],
    },
  }, root);
}

function toDimensionValueContribution(root: jsonP.JSONValue): s.DimensionValueContribution {
  return jsonP.readObj({
    required: {},
    optional: {
      "DimensionValue": "s",
      "ContributionScore": "n",
    },
  }, root);
}

function toTimeSeriesFeedback(root: jsonP.JSONValue): s.TimeSeriesFeedback {
  return jsonP.readObj({
    required: {},
    optional: {
      "TimeSeriesId": "s",
      "IsAnomaly": "b",
    },
  }, root);
}

function toAlertSummary(root: jsonP.JSONValue): s.AlertSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "AlertArn": "s",
      "AnomalyDetectorArn": "s",
      "AlertName": "s",
      "AlertSensitivityThreshold": "n",
      "AlertType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AlertType>(x),
      "AlertStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.AlertStatus>(x),
      "LastModificationTime": "d",
      "CreationTime": "d",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toAnomalyDetectorSummary(root: jsonP.JSONValue): s.AnomalyDetectorSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "AnomalyDetectorArn": "s",
      "AnomalyDetectorName": "s",
      "AnomalyDetectorDescription": "s",
      "CreationTime": "d",
      "LastModificationTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AnomalyDetectorStatus>(x),
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toAnomalyGroupSummary(root: jsonP.JSONValue): s.AnomalyGroupSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "StartTime": "s",
      "EndTime": "s",
      "AnomalyGroupId": "s",
      "AnomalyGroupScore": "n",
      "PrimaryMetricName": "s",
    },
  }, root);
}

function toAnomalyGroupStatistics(root: jsonP.JSONValue): s.AnomalyGroupStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "EvaluationStartDate": "s",
      "TotalCount": "n",
      "ItemizedMetricStatsList": [toItemizedMetricStats],
    },
  }, root);
}

function toItemizedMetricStats(root: jsonP.JSONValue): s.ItemizedMetricStats {
  return jsonP.readObj({
    required: {},
    optional: {
      "MetricName": "s",
      "OccurrenceCount": "n",
    },
  }, root);
}

function toTimeSeries(root: jsonP.JSONValue): s.TimeSeries {
  return jsonP.readObj({
    required: {
      "TimeSeriesId": "s",
      "DimensionList": [toDimensionNameValue],
      "MetricValueList": ["n"],
    },
    optional: {},
  }, root);
}

function toDimensionNameValue(root: jsonP.JSONValue): s.DimensionNameValue {
  return jsonP.readObj({
    required: {
      "DimensionName": "s",
      "DimensionValue": "s",
    },
    optional: {},
  }, root);
}

function toMetricSetSummary(root: jsonP.JSONValue): s.MetricSetSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "MetricSetArn": "s",
      "AnomalyDetectorArn": "s",
      "MetricSetDescription": "s",
      "MetricSetName": "s",
      "CreationTime": "d",
      "LastModificationTime": "d",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
