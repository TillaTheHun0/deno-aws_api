// Autogenerated API client for: AWS IoT 1-Click Devices Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class IoT1ClickDevicesService {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoT1ClickDevicesService.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-05-14",
    "endpointPrefix": "devices.iot1click",
    "signingName": "iot1click",
    "serviceFullName": "AWS IoT 1-Click Devices Service",
    "serviceId": "IoT 1Click Devices Service",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "devices-2018-05-14",
    "signatureVersion": "v4"
  };

  async claimDevicesByClaimCode(
    {abortSignal, ...params}: RequestConfig & ClaimDevicesByClaimCodeRequest,
  ): Promise<ClaimDevicesByClaimCodeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ClaimDevicesByClaimCode",
      method: "PUT",
      requestUri: cmnP.encodePath`/claims/${params["ClaimCode"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ClaimCode": "s",
          "Total": "n",
        },
      }, await resp.json()),
  };
  }

  async describeDevice(
    {abortSignal, ...params}: RequestConfig & DescribeDeviceRequest,
  ): Promise<DescribeDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDevice",
      method: "GET",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "DeviceDescription": toDeviceDescription,
        },
      }, await resp.json()),
  };
  }

  async finalizeDeviceClaim(
    {abortSignal, ...params}: RequestConfig & FinalizeDeviceClaimRequest,
  ): Promise<FinalizeDeviceClaimResponse> {
    const body: jsonP.JSONObject = params ? {
      tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "FinalizeDeviceClaim",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/finalize-claim`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "State": "s",
        },
      }, await resp.json()),
  };
  }

  async getDeviceMethods(
    {abortSignal, ...params}: RequestConfig & GetDeviceMethodsRequest,
  ): Promise<GetDeviceMethodsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeviceMethods",
      method: "GET",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/methods`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "DeviceMethods": [toDeviceMethod],
        },
      }, await resp.json()),
  };
  }

  async initiateDeviceClaim(
    {abortSignal, ...params}: RequestConfig & InitiateDeviceClaimRequest,
  ): Promise<InitiateDeviceClaimResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "InitiateDeviceClaim",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/initiate-claim`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "State": "s",
        },
      }, await resp.json()),
  };
  }

  async invokeDeviceMethod(
    {abortSignal, ...params}: RequestConfig & InvokeDeviceMethodRequest,
  ): Promise<InvokeDeviceMethodResponse> {
    const body: jsonP.JSONObject = params ? {
      deviceMethod: fromDeviceMethod(params["DeviceMethod"]),
      deviceMethodParameters: params["DeviceMethodParameters"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InvokeDeviceMethod",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/methods`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "DeviceMethodResponse": "s",
        },
      }, await resp.json()),
  };
  }

  async listDeviceEvents(
    {abortSignal, ...params}: RequestConfig & ListDeviceEventsRequest,
  ): Promise<ListDeviceEventsResponse> {
    const query = new URLSearchParams;
    query.set("fromTimeStamp", cmnP.serializeDate_iso8601(params["FromTimeStamp"]) ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    query.set("toTimeStamp", cmnP.serializeDate_iso8601(params["ToTimeStamp"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceEvents",
      method: "GET",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/events`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Events": [toDeviceEvent],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listDevices(
    {abortSignal, ...params}: RequestConfig & ListDevicesRequest = {},
  ): Promise<ListDevicesResponse> {
    const query = new URLSearchParams;
    if (params["DeviceType"] != null) query.set("deviceType", params["DeviceType"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDevices",
      method: "GET",
      requestUri: "/devices",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Devices": [toDeviceDescription],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async unclaimDevice(
    {abortSignal, ...params}: RequestConfig & UnclaimDeviceRequest,
  ): Promise<UnclaimDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "UnclaimDevice",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/unclaim`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "State": "s",
        },
      }, await resp.json()),
  };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateDeviceState(
    {abortSignal, ...params}: RequestConfig & UpdateDeviceStateRequest,
  ): Promise<UpdateDeviceStateResponse> {
    const body: jsonP.JSONObject = params ? {
      enabled: params["Enabled"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeviceState",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/state`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface ClaimDevicesByClaimCodeRequest {
  ClaimCode: string;
}

// refs: 1 - tags: named, input
export interface DescribeDeviceRequest {
  DeviceId: string;
}

// refs: 1 - tags: named, input
export interface FinalizeDeviceClaimRequest {
  DeviceId: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface GetDeviceMethodsRequest {
  DeviceId: string;
}

// refs: 1 - tags: named, input
export interface InitiateDeviceClaimRequest {
  DeviceId: string;
}

// refs: 1 - tags: named, input
export interface InvokeDeviceMethodRequest {
  DeviceId: string;
  DeviceMethod?: DeviceMethod | null;
  DeviceMethodParameters?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeviceEventsRequest {
  DeviceId: string;
  FromTimeStamp: Date | number;
  MaxResults?: number | null;
  NextToken?: string | null;
  ToTimeStamp: Date | number;
}

// refs: 1 - tags: named, input
export interface ListDevicesRequest {
  DeviceType?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UnclaimDeviceRequest {
  DeviceId: string;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDeviceStateRequest {
  DeviceId: string;
  Enabled?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ClaimDevicesByClaimCodeResponse {
  ClaimCode?: string | null;
  Total?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeDeviceResponse {
  DeviceDescription?: DeviceDescription | null;
}

// refs: 1 - tags: named, output
export interface FinalizeDeviceClaimResponse {
  State?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceMethodsResponse {
  DeviceMethods?: DeviceMethod[] | null;
}

// refs: 1 - tags: named, output
export interface InitiateDeviceClaimResponse {
  State?: string | null;
}

// refs: 1 - tags: named, output
export interface InvokeDeviceMethodResponse {
  DeviceMethodResponse?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeviceEventsResponse {
  Events?: DeviceEvent[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDevicesResponse {
  Devices?: DeviceDescription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface UnclaimDeviceResponse {
  State?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateDeviceStateResponse {
}

// refs: 2 - tags: input, named, interface, output
export interface DeviceMethod {
  DeviceType?: string | null;
  MethodName?: string | null;
}
function fromDeviceMethod(input?: DeviceMethod | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deviceType: input["DeviceType"],
    methodName: input["MethodName"],
  }
}
function toDeviceMethod(root: jsonP.JSONValue): DeviceMethod {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceType": "s",
      "MethodName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DeviceDescription {
  Arn?: string | null;
  Attributes?: { [key: string]: string | null | undefined } | null;
  DeviceId?: string | null;
  Enabled?: boolean | null;
  RemainingLife?: number | null;
  Type?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toDeviceDescription(root: jsonP.JSONValue): DeviceDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Attributes": x => jsonP.readMap(String, String, x),
      "DeviceId": "s",
      "Enabled": "b",
      "RemainingLife": "n",
      "Type": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeviceEvent {
  Device?: Device | null;
  StdEvent?: string | null;
}
function toDeviceEvent(root: jsonP.JSONValue): DeviceEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Device": toDevice,
      "StdEvent": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Device {
  Attributes?: Attributes | null;
  DeviceId?: string | null;
  Type?: string | null;
}
function toDevice(root: jsonP.JSONValue): Device {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attributes": toAttributes,
      "DeviceId": "s",
      "Type": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Attributes {
}
function toAttributes(root: jsonP.JSONValue): Attributes {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}
