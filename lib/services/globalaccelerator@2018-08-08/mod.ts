// Autogenerated API client for: AWS Global Accelerator

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class GlobalAccelerator {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(GlobalAccelerator.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-08-08",
    "endpointPrefix": "globalaccelerator",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Global Accelerator",
    "serviceId": "Global Accelerator",
    "signatureVersion": "v4",
    "signingName": "globalaccelerator",
    "targetPrefix": "GlobalAccelerator_V20180706",
    "uid": "globalaccelerator-2018-08-08"
  };

  async advertiseByoipCidr(
    {abortSignal, ...params}: RequestConfig & AdvertiseByoipCidrRequest,
  ): Promise<AdvertiseByoipCidrResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdvertiseByoipCidr",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

  async createAccelerator(
    {abortSignal, ...params}: RequestConfig & CreateAcceleratorRequest,
  ): Promise<CreateAcceleratorResponse> {
    const body: JSONObject = {...params,
    IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccelerator",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Accelerator": toAccelerator,
      },
    }, await resp.json());
  }

  async createEndpointGroup(
    {abortSignal, ...params}: RequestConfig & CreateEndpointGroupRequest,
  ): Promise<CreateEndpointGroupResponse> {
    const body: JSONObject = {...params,
    EndpointConfigurations: params["EndpointConfigurations"]?.map(x => fromEndpointConfiguration(x)),
    IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    PortOverrides: params["PortOverrides"]?.map(x => fromPortOverride(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEndpointGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EndpointGroup": toEndpointGroup,
      },
    }, await resp.json());
  }

  async createListener(
    {abortSignal, ...params}: RequestConfig & CreateListenerRequest,
  ): Promise<CreateListenerResponse> {
    const body: JSONObject = {...params,
    PortRanges: params["PortRanges"]?.map(x => fromPortRange(x)),
    IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateListener",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Listener": toListener,
      },
    }, await resp.json());
  }

  async deleteAccelerator(
    {abortSignal, ...params}: RequestConfig & DeleteAcceleratorRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAccelerator",
    });
  }

  async deleteEndpointGroup(
    {abortSignal, ...params}: RequestConfig & DeleteEndpointGroupRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEndpointGroup",
    });
  }

  async deleteListener(
    {abortSignal, ...params}: RequestConfig & DeleteListenerRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteListener",
    });
  }

  async deprovisionByoipCidr(
    {abortSignal, ...params}: RequestConfig & DeprovisionByoipCidrRequest,
  ): Promise<DeprovisionByoipCidrResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprovisionByoipCidr",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

  async describeAccelerator(
    {abortSignal, ...params}: RequestConfig & DescribeAcceleratorRequest,
  ): Promise<DescribeAcceleratorResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccelerator",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Accelerator": toAccelerator,
      },
    }, await resp.json());
  }

  async describeAcceleratorAttributes(
    {abortSignal, ...params}: RequestConfig & DescribeAcceleratorAttributesRequest,
  ): Promise<DescribeAcceleratorAttributesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAcceleratorAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AcceleratorAttributes": toAcceleratorAttributes,
      },
    }, await resp.json());
  }

  async describeEndpointGroup(
    {abortSignal, ...params}: RequestConfig & DescribeEndpointGroupRequest,
  ): Promise<DescribeEndpointGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEndpointGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EndpointGroup": toEndpointGroup,
      },
    }, await resp.json());
  }

  async describeListener(
    {abortSignal, ...params}: RequestConfig & DescribeListenerRequest,
  ): Promise<DescribeListenerResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeListener",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Listener": toListener,
      },
    }, await resp.json());
  }

  async listAccelerators(
    {abortSignal, ...params}: RequestConfig & ListAcceleratorsRequest = {},
  ): Promise<ListAcceleratorsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccelerators",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Accelerators": [toAccelerator],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listByoipCidrs(
    {abortSignal, ...params}: RequestConfig & ListByoipCidrsRequest = {},
  ): Promise<ListByoipCidrsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListByoipCidrs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ByoipCidrs": [toByoipCidr],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEndpointGroups(
    {abortSignal, ...params}: RequestConfig & ListEndpointGroupsRequest,
  ): Promise<ListEndpointGroupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEndpointGroups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EndpointGroups": [toEndpointGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listListeners(
    {abortSignal, ...params}: RequestConfig & ListListenersRequest,
  ): Promise<ListListenersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListListeners",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Listeners": [toListener],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async provisionByoipCidr(
    {abortSignal, ...params}: RequestConfig & ProvisionByoipCidrRequest,
  ): Promise<ProvisionByoipCidrResponse> {
    const body: JSONObject = {...params,
    CidrAuthorizationContext: fromCidrAuthorizationContext(params["CidrAuthorizationContext"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ProvisionByoipCidr",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAccelerator(
    {abortSignal, ...params}: RequestConfig & UpdateAcceleratorRequest,
  ): Promise<UpdateAcceleratorResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccelerator",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Accelerator": toAccelerator,
      },
    }, await resp.json());
  }

  async updateAcceleratorAttributes(
    {abortSignal, ...params}: RequestConfig & UpdateAcceleratorAttributesRequest,
  ): Promise<UpdateAcceleratorAttributesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAcceleratorAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AcceleratorAttributes": toAcceleratorAttributes,
      },
    }, await resp.json());
  }

  async updateEndpointGroup(
    {abortSignal, ...params}: RequestConfig & UpdateEndpointGroupRequest,
  ): Promise<UpdateEndpointGroupResponse> {
    const body: JSONObject = {...params,
    EndpointConfigurations: params["EndpointConfigurations"]?.map(x => fromEndpointConfiguration(x)),
    PortOverrides: params["PortOverrides"]?.map(x => fromPortOverride(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEndpointGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EndpointGroup": toEndpointGroup,
      },
    }, await resp.json());
  }

  async updateListener(
    {abortSignal, ...params}: RequestConfig & UpdateListenerRequest,
  ): Promise<UpdateListenerResponse> {
    const body: JSONObject = {...params,
    PortRanges: params["PortRanges"]?.map(x => fromPortRange(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateListener",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Listener": toListener,
      },
    }, await resp.json());
  }

  async withdrawByoipCidr(
    {abortSignal, ...params}: RequestConfig & WithdrawByoipCidrRequest,
  ): Promise<WithdrawByoipCidrResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "WithdrawByoipCidr",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AdvertiseByoipCidrRequest {
  Cidr: string;
}

// refs: 1 - tags: named, input
export interface CreateAcceleratorRequest {
  Name: string;
  IpAddressType?: IpAddressType | null;
  IpAddresses?: string[] | null;
  Enabled?: boolean | null;
  IdempotencyToken: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateEndpointGroupRequest {
  ListenerArn: string;
  EndpointGroupRegion: string;
  EndpointConfigurations?: EndpointConfiguration[] | null;
  TrafficDialPercentage?: number | null;
  HealthCheckPort?: number | null;
  HealthCheckProtocol?: HealthCheckProtocol | null;
  HealthCheckPath?: string | null;
  HealthCheckIntervalSeconds?: number | null;
  ThresholdCount?: number | null;
  IdempotencyToken: string;
  PortOverrides?: PortOverride[] | null;
}

// refs: 1 - tags: named, input
export interface CreateListenerRequest {
  AcceleratorArn: string;
  PortRanges: PortRange[];
  Protocol: Protocol;
  ClientAffinity?: ClientAffinity | null;
  IdempotencyToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteAcceleratorRequest {
  AcceleratorArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteEndpointGroupRequest {
  EndpointGroupArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteListenerRequest {
  ListenerArn: string;
}

// refs: 1 - tags: named, input
export interface DeprovisionByoipCidrRequest {
  Cidr: string;
}

// refs: 1 - tags: named, input
export interface DescribeAcceleratorRequest {
  AcceleratorArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeAcceleratorAttributesRequest {
  AcceleratorArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeEndpointGroupRequest {
  EndpointGroupArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeListenerRequest {
  ListenerArn: string;
}

// refs: 1 - tags: named, input
export interface ListAcceleratorsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListByoipCidrsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListEndpointGroupsRequest {
  ListenerArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListListenersRequest {
  AcceleratorArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ProvisionByoipCidrRequest {
  Cidr: string;
  CidrAuthorizationContext: CidrAuthorizationContext;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAcceleratorRequest {
  AcceleratorArn: string;
  Name?: string | null;
  IpAddressType?: IpAddressType | null;
  Enabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateAcceleratorAttributesRequest {
  AcceleratorArn: string;
  FlowLogsEnabled?: boolean | null;
  FlowLogsS3Bucket?: string | null;
  FlowLogsS3Prefix?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateEndpointGroupRequest {
  EndpointGroupArn: string;
  EndpointConfigurations?: EndpointConfiguration[] | null;
  TrafficDialPercentage?: number | null;
  HealthCheckPort?: number | null;
  HealthCheckProtocol?: HealthCheckProtocol | null;
  HealthCheckPath?: string | null;
  HealthCheckIntervalSeconds?: number | null;
  ThresholdCount?: number | null;
  PortOverrides?: PortOverride[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateListenerRequest {
  ListenerArn: string;
  PortRanges?: PortRange[] | null;
  Protocol?: Protocol | null;
  ClientAffinity?: ClientAffinity | null;
}

// refs: 1 - tags: named, input
export interface WithdrawByoipCidrRequest {
  Cidr: string;
}

// refs: 1 - tags: named, output
export interface AdvertiseByoipCidrResponse {
  ByoipCidr?: ByoipCidr | null;
}

// refs: 1 - tags: named, output
export interface CreateAcceleratorResponse {
  Accelerator?: Accelerator | null;
}

// refs: 1 - tags: named, output
export interface CreateEndpointGroupResponse {
  EndpointGroup?: EndpointGroup | null;
}

// refs: 1 - tags: named, output
export interface CreateListenerResponse {
  Listener?: Listener | null;
}

// refs: 1 - tags: named, output
export interface DeprovisionByoipCidrResponse {
  ByoipCidr?: ByoipCidr | null;
}

// refs: 1 - tags: named, output
export interface DescribeAcceleratorResponse {
  Accelerator?: Accelerator | null;
}

// refs: 1 - tags: named, output
export interface DescribeAcceleratorAttributesResponse {
  AcceleratorAttributes?: AcceleratorAttributes | null;
}

// refs: 1 - tags: named, output
export interface DescribeEndpointGroupResponse {
  EndpointGroup?: EndpointGroup | null;
}

// refs: 1 - tags: named, output
export interface DescribeListenerResponse {
  Listener?: Listener | null;
}

// refs: 1 - tags: named, output
export interface ListAcceleratorsResponse {
  Accelerators?: Accelerator[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListByoipCidrsResponse {
  ByoipCidrs?: ByoipCidr[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEndpointGroupsResponse {
  EndpointGroups?: EndpointGroup[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListListenersResponse {
  Listeners?: Listener[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ProvisionByoipCidrResponse {
  ByoipCidr?: ByoipCidr | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAcceleratorResponse {
  Accelerator?: Accelerator | null;
}

// refs: 1 - tags: named, output
export interface UpdateAcceleratorAttributesResponse {
  AcceleratorAttributes?: AcceleratorAttributes | null;
}

// refs: 1 - tags: named, output
export interface UpdateEndpointGroupResponse {
  EndpointGroup?: EndpointGroup | null;
}

// refs: 1 - tags: named, output
export interface UpdateListenerResponse {
  Listener?: Listener | null;
}

// refs: 1 - tags: named, output
export interface WithdrawByoipCidrResponse {
  ByoipCidr?: ByoipCidr | null;
}

// refs: 6 - tags: input, named, enum, output
export type IpAddressType =
| "IPV4"
;

function toIpAddressType(root: JSONValue): IpAddressType | null {
  return ( false
    || root == "IPV4"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface EndpointConfiguration {
  EndpointId?: string | null;
  Weight?: number | null;
  ClientIPPreservationEnabled?: boolean | null;
}
function fromEndpointConfiguration(input?: EndpointConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 6 - tags: input, named, enum, output
export type HealthCheckProtocol =
| "TCP"
| "HTTP"
| "HTTPS"
;

function toHealthCheckProtocol(root: JSONValue): HealthCheckProtocol | null {
  return ( false
    || root == "TCP"
    || root == "HTTP"
    || root == "HTTPS"
  ) ? root : null;
}

// refs: 6 - tags: input, named, interface, output
export interface PortOverride {
  ListenerPort?: number | null;
  EndpointPort?: number | null;
}
function fromPortOverride(input?: PortOverride | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toPortOverride(root: JSONValue): PortOverride {
  return prt.readObj({
    required: {},
    optional: {
      "ListenerPort": "n",
      "EndpointPort": "n",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface PortRange {
  FromPort?: number | null;
  ToPort?: number | null;
}
function fromPortRange(input?: PortRange | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toPortRange(root: JSONValue): PortRange {
  return prt.readObj({
    required: {},
    optional: {
      "FromPort": "n",
      "ToPort": "n",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type Protocol =
| "TCP"
| "UDP"
;

function toProtocol(root: JSONValue): Protocol | null {
  return ( false
    || root == "TCP"
    || root == "UDP"
  ) ? root : null;
}

// refs: 6 - tags: input, named, enum, output
export type ClientAffinity =
| "NONE"
| "SOURCE_IP"
;

function toClientAffinity(root: JSONValue): ClientAffinity | null {
  return ( false
    || root == "NONE"
    || root == "SOURCE_IP"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface CidrAuthorizationContext {
  Message: string;
  Signature: string;
}
function fromCidrAuthorizationContext(input?: CidrAuthorizationContext | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 5 - tags: output, named, interface
export interface ByoipCidr {
  Cidr?: string | null;
  State?: ByoipCidrState | null;
  Events?: ByoipCidrEvent[] | null;
}
function toByoipCidr(root: JSONValue): ByoipCidr {
  return prt.readObj({
    required: {},
    optional: {
      "Cidr": "s",
      "State": toByoipCidrState,
      "Events": [toByoipCidrEvent],
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type ByoipCidrState =
| "PENDING_PROVISIONING"
| "READY"
| "PENDING_ADVERTISING"
| "ADVERTISING"
| "PENDING_WITHDRAWING"
| "PENDING_DEPROVISIONING"
| "DEPROVISIONED"
| "FAILED_PROVISION"
| "FAILED_ADVERTISING"
| "FAILED_WITHDRAW"
| "FAILED_DEPROVISION"
;
function toByoipCidrState(root: JSONValue): ByoipCidrState | null {
  return ( false
    || root == "PENDING_PROVISIONING"
    || root == "READY"
    || root == "PENDING_ADVERTISING"
    || root == "ADVERTISING"
    || root == "PENDING_WITHDRAWING"
    || root == "PENDING_DEPROVISIONING"
    || root == "DEPROVISIONED"
    || root == "FAILED_PROVISION"
    || root == "FAILED_ADVERTISING"
    || root == "FAILED_WITHDRAW"
    || root == "FAILED_DEPROVISION"
  ) ? root : null;
}

// refs: 5 - tags: output, named, interface
export interface ByoipCidrEvent {
  Message?: string | null;
  Timestamp?: Date | number | null;
}
function toByoipCidrEvent(root: JSONValue): ByoipCidrEvent {
  return prt.readObj({
    required: {},
    optional: {
      "Message": "s",
      "Timestamp": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Accelerator {
  AcceleratorArn?: string | null;
  Name?: string | null;
  IpAddressType?: IpAddressType | null;
  Enabled?: boolean | null;
  IpSets?: IpSet[] | null;
  DnsName?: string | null;
  Status?: AcceleratorStatus | null;
  CreatedTime?: Date | number | null;
  LastModifiedTime?: Date | number | null;
}
function toAccelerator(root: JSONValue): Accelerator {
  return prt.readObj({
    required: {},
    optional: {
      "AcceleratorArn": "s",
      "Name": "s",
      "IpAddressType": toIpAddressType,
      "Enabled": "b",
      "IpSets": [toIpSet],
      "DnsName": "s",
      "Status": toAcceleratorStatus,
      "CreatedTime": "d",
      "LastModifiedTime": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface IpSet {
  IpFamily?: string | null;
  IpAddresses?: string[] | null;
}
function toIpSet(root: JSONValue): IpSet {
  return prt.readObj({
    required: {},
    optional: {
      "IpFamily": "s",
      "IpAddresses": ["s"],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type AcceleratorStatus =
| "DEPLOYED"
| "IN_PROGRESS"
;
function toAcceleratorStatus(root: JSONValue): AcceleratorStatus | null {
  return ( false
    || root == "DEPLOYED"
    || root == "IN_PROGRESS"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface EndpointGroup {
  EndpointGroupArn?: string | null;
  EndpointGroupRegion?: string | null;
  EndpointDescriptions?: EndpointDescription[] | null;
  TrafficDialPercentage?: number | null;
  HealthCheckPort?: number | null;
  HealthCheckProtocol?: HealthCheckProtocol | null;
  HealthCheckPath?: string | null;
  HealthCheckIntervalSeconds?: number | null;
  ThresholdCount?: number | null;
  PortOverrides?: PortOverride[] | null;
}
function toEndpointGroup(root: JSONValue): EndpointGroup {
  return prt.readObj({
    required: {},
    optional: {
      "EndpointGroupArn": "s",
      "EndpointGroupRegion": "s",
      "EndpointDescriptions": [toEndpointDescription],
      "TrafficDialPercentage": "n",
      "HealthCheckPort": "n",
      "HealthCheckProtocol": toHealthCheckProtocol,
      "HealthCheckPath": "s",
      "HealthCheckIntervalSeconds": "n",
      "ThresholdCount": "n",
      "PortOverrides": [toPortOverride],
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface EndpointDescription {
  EndpointId?: string | null;
  Weight?: number | null;
  HealthState?: HealthState | null;
  HealthReason?: string | null;
  ClientIPPreservationEnabled?: boolean | null;
}
function toEndpointDescription(root: JSONValue): EndpointDescription {
  return prt.readObj({
    required: {},
    optional: {
      "EndpointId": "s",
      "Weight": "n",
      "HealthState": toHealthState,
      "HealthReason": "s",
      "ClientIPPreservationEnabled": "b",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type HealthState =
| "INITIAL"
| "HEALTHY"
| "UNHEALTHY"
;
function toHealthState(root: JSONValue): HealthState | null {
  return ( false
    || root == "INITIAL"
    || root == "HEALTHY"
    || root == "UNHEALTHY"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface Listener {
  ListenerArn?: string | null;
  PortRanges?: PortRange[] | null;
  Protocol?: Protocol | null;
  ClientAffinity?: ClientAffinity | null;
}
function toListener(root: JSONValue): Listener {
  return prt.readObj({
    required: {},
    optional: {
      "ListenerArn": "s",
      "PortRanges": [toPortRange],
      "Protocol": toProtocol,
      "ClientAffinity": toClientAffinity,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AcceleratorAttributes {
  FlowLogsEnabled?: boolean | null;
  FlowLogsS3Bucket?: string | null;
  FlowLogsS3Prefix?: string | null;
}
function toAcceleratorAttributes(root: JSONValue): AcceleratorAttributes {
  return prt.readObj({
    required: {},
    optional: {
      "FlowLogsEnabled": "b",
      "FlowLogsS3Bucket": "s",
      "FlowLogsS3Prefix": "s",
    },
  }, root);
}
