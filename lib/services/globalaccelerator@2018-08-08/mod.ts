// Autogenerated API client for: AWS Global Accelerator

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class GlobalAccelerator {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(GlobalAccelerator.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-08-08",
    "endpointPrefix": "globalaccelerator",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Global Accelerator",
    "serviceId": "Global Accelerator",
    "signatureVersion": "v4",
    "signingName": "globalaccelerator",
    "targetPrefix": "GlobalAccelerator_V20180706",
    "uid": "globalaccelerator-2018-08-08"
  };

  async addCustomRoutingEndpoints(
    {abortSignal, ...params}: RequestConfig & s.AddCustomRoutingEndpointsRequest,
  ): Promise<s.AddCustomRoutingEndpointsResponse> {
    const body: jsonP.JSONObject = {
      EndpointConfigurations: params["EndpointConfigurations"]?.map(x => fromCustomRoutingEndpointConfiguration(x)),
      EndpointGroupArn: params["EndpointGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddCustomRoutingEndpoints",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointDescriptions": [toCustomRoutingEndpointDescription],
        "EndpointGroupArn": "s",
      },
    }, await resp.json());
  }

  async advertiseByoipCidr(
    {abortSignal, ...params}: RequestConfig & s.AdvertiseByoipCidrRequest,
  ): Promise<s.AdvertiseByoipCidrResponse> {
    const body: jsonP.JSONObject = {
      Cidr: params["Cidr"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdvertiseByoipCidr",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

  async allowCustomRoutingTraffic(
    {abortSignal, ...params}: RequestConfig & s.AllowCustomRoutingTrafficRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      EndpointGroupArn: params["EndpointGroupArn"],
      EndpointId: params["EndpointId"],
      DestinationAddresses: params["DestinationAddresses"],
      DestinationPorts: params["DestinationPorts"],
      AllowAllTrafficToEndpoint: params["AllowAllTrafficToEndpoint"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AllowCustomRoutingTraffic",
    });
  }

  async createAccelerator(
    {abortSignal, ...params}: RequestConfig & s.CreateAcceleratorRequest,
  ): Promise<s.CreateAcceleratorResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      IpAddressType: params["IpAddressType"],
      IpAddresses: params["IpAddresses"],
      Enabled: params["Enabled"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccelerator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerator": toAccelerator,
      },
    }, await resp.json());
  }

  async createCustomRoutingAccelerator(
    {abortSignal, ...params}: RequestConfig & s.CreateCustomRoutingAcceleratorRequest,
  ): Promise<s.CreateCustomRoutingAcceleratorResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      IpAddressType: params["IpAddressType"],
      Enabled: params["Enabled"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCustomRoutingAccelerator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerator": toCustomRoutingAccelerator,
      },
    }, await resp.json());
  }

  async createCustomRoutingEndpointGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateCustomRoutingEndpointGroupRequest,
  ): Promise<s.CreateCustomRoutingEndpointGroupResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
      EndpointGroupRegion: params["EndpointGroupRegion"],
      DestinationConfigurations: params["DestinationConfigurations"]?.map(x => fromCustomRoutingDestinationConfiguration(x)),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCustomRoutingEndpointGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointGroup": toCustomRoutingEndpointGroup,
      },
    }, await resp.json());
  }

  async createCustomRoutingListener(
    {abortSignal, ...params}: RequestConfig & s.CreateCustomRoutingListenerRequest,
  ): Promise<s.CreateCustomRoutingListenerResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      PortRanges: params["PortRanges"]?.map(x => fromPortRange(x)),
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCustomRoutingListener",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listener": toCustomRoutingListener,
      },
    }, await resp.json());
  }

  async createEndpointGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateEndpointGroupRequest,
  ): Promise<s.CreateEndpointGroupResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
      EndpointGroupRegion: params["EndpointGroupRegion"],
      EndpointConfigurations: params["EndpointConfigurations"]?.map(x => fromEndpointConfiguration(x)),
      TrafficDialPercentage: params["TrafficDialPercentage"],
      HealthCheckPort: params["HealthCheckPort"],
      HealthCheckProtocol: params["HealthCheckProtocol"],
      HealthCheckPath: params["HealthCheckPath"],
      HealthCheckIntervalSeconds: params["HealthCheckIntervalSeconds"],
      ThresholdCount: params["ThresholdCount"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
      PortOverrides: params["PortOverrides"]?.map(x => fromPortOverride(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEndpointGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointGroup": toEndpointGroup,
      },
    }, await resp.json());
  }

  async createListener(
    {abortSignal, ...params}: RequestConfig & s.CreateListenerRequest,
  ): Promise<s.CreateListenerResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      PortRanges: params["PortRanges"]?.map(x => fromPortRange(x)),
      Protocol: params["Protocol"],
      ClientAffinity: params["ClientAffinity"],
      IdempotencyToken: params["IdempotencyToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateListener",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listener": toListener,
      },
    }, await resp.json());
  }

  async deleteAccelerator(
    {abortSignal, ...params}: RequestConfig & s.DeleteAcceleratorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAccelerator",
    });
  }

  async deleteCustomRoutingAccelerator(
    {abortSignal, ...params}: RequestConfig & s.DeleteCustomRoutingAcceleratorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCustomRoutingAccelerator",
    });
  }

  async deleteCustomRoutingEndpointGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteCustomRoutingEndpointGroupRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      EndpointGroupArn: params["EndpointGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCustomRoutingEndpointGroup",
    });
  }

  async deleteCustomRoutingListener(
    {abortSignal, ...params}: RequestConfig & s.DeleteCustomRoutingListenerRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCustomRoutingListener",
    });
  }

  async deleteEndpointGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteEndpointGroupRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      EndpointGroupArn: params["EndpointGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEndpointGroup",
    });
  }

  async deleteListener(
    {abortSignal, ...params}: RequestConfig & s.DeleteListenerRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteListener",
    });
  }

  async denyCustomRoutingTraffic(
    {abortSignal, ...params}: RequestConfig & s.DenyCustomRoutingTrafficRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      EndpointGroupArn: params["EndpointGroupArn"],
      EndpointId: params["EndpointId"],
      DestinationAddresses: params["DestinationAddresses"],
      DestinationPorts: params["DestinationPorts"],
      DenyAllTrafficToEndpoint: params["DenyAllTrafficToEndpoint"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DenyCustomRoutingTraffic",
    });
  }

  async deprovisionByoipCidr(
    {abortSignal, ...params}: RequestConfig & s.DeprovisionByoipCidrRequest,
  ): Promise<s.DeprovisionByoipCidrResponse> {
    const body: jsonP.JSONObject = {
      Cidr: params["Cidr"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprovisionByoipCidr",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

  async describeAccelerator(
    {abortSignal, ...params}: RequestConfig & s.DescribeAcceleratorRequest,
  ): Promise<s.DescribeAcceleratorResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccelerator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerator": toAccelerator,
      },
    }, await resp.json());
  }

  async describeAcceleratorAttributes(
    {abortSignal, ...params}: RequestConfig & s.DescribeAcceleratorAttributesRequest,
  ): Promise<s.DescribeAcceleratorAttributesResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAcceleratorAttributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AcceleratorAttributes": toAcceleratorAttributes,
      },
    }, await resp.json());
  }

  async describeCustomRoutingAccelerator(
    {abortSignal, ...params}: RequestConfig & s.DescribeCustomRoutingAcceleratorRequest,
  ): Promise<s.DescribeCustomRoutingAcceleratorResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCustomRoutingAccelerator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerator": toCustomRoutingAccelerator,
      },
    }, await resp.json());
  }

  async describeCustomRoutingAcceleratorAttributes(
    {abortSignal, ...params}: RequestConfig & s.DescribeCustomRoutingAcceleratorAttributesRequest,
  ): Promise<s.DescribeCustomRoutingAcceleratorAttributesResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCustomRoutingAcceleratorAttributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AcceleratorAttributes": toCustomRoutingAcceleratorAttributes,
      },
    }, await resp.json());
  }

  async describeCustomRoutingEndpointGroup(
    {abortSignal, ...params}: RequestConfig & s.DescribeCustomRoutingEndpointGroupRequest,
  ): Promise<s.DescribeCustomRoutingEndpointGroupResponse> {
    const body: jsonP.JSONObject = {
      EndpointGroupArn: params["EndpointGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCustomRoutingEndpointGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointGroup": toCustomRoutingEndpointGroup,
      },
    }, await resp.json());
  }

  async describeCustomRoutingListener(
    {abortSignal, ...params}: RequestConfig & s.DescribeCustomRoutingListenerRequest,
  ): Promise<s.DescribeCustomRoutingListenerResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCustomRoutingListener",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listener": toCustomRoutingListener,
      },
    }, await resp.json());
  }

  async describeEndpointGroup(
    {abortSignal, ...params}: RequestConfig & s.DescribeEndpointGroupRequest,
  ): Promise<s.DescribeEndpointGroupResponse> {
    const body: jsonP.JSONObject = {
      EndpointGroupArn: params["EndpointGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEndpointGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointGroup": toEndpointGroup,
      },
    }, await resp.json());
  }

  async describeListener(
    {abortSignal, ...params}: RequestConfig & s.DescribeListenerRequest,
  ): Promise<s.DescribeListenerResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeListener",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listener": toListener,
      },
    }, await resp.json());
  }

  async listAccelerators(
    {abortSignal, ...params}: RequestConfig & s.ListAcceleratorsRequest = {},
  ): Promise<s.ListAcceleratorsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccelerators",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerators": [toAccelerator],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listByoipCidrs(
    {abortSignal, ...params}: RequestConfig & s.ListByoipCidrsRequest = {},
  ): Promise<s.ListByoipCidrsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListByoipCidrs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ByoipCidrs": [toByoipCidr],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCustomRoutingAccelerators(
    {abortSignal, ...params}: RequestConfig & s.ListCustomRoutingAcceleratorsRequest = {},
  ): Promise<s.ListCustomRoutingAcceleratorsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCustomRoutingAccelerators",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerators": [toCustomRoutingAccelerator],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCustomRoutingEndpointGroups(
    {abortSignal, ...params}: RequestConfig & s.ListCustomRoutingEndpointGroupsRequest,
  ): Promise<s.ListCustomRoutingEndpointGroupsResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCustomRoutingEndpointGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointGroups": [toCustomRoutingEndpointGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCustomRoutingListeners(
    {abortSignal, ...params}: RequestConfig & s.ListCustomRoutingListenersRequest,
  ): Promise<s.ListCustomRoutingListenersResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCustomRoutingListeners",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listeners": [toCustomRoutingListener],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCustomRoutingPortMappings(
    {abortSignal, ...params}: RequestConfig & s.ListCustomRoutingPortMappingsRequest,
  ): Promise<s.ListCustomRoutingPortMappingsResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      EndpointGroupArn: params["EndpointGroupArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCustomRoutingPortMappings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PortMappings": [toPortMapping],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCustomRoutingPortMappingsByDestination(
    {abortSignal, ...params}: RequestConfig & s.ListCustomRoutingPortMappingsByDestinationRequest,
  ): Promise<s.ListCustomRoutingPortMappingsByDestinationResponse> {
    const body: jsonP.JSONObject = {
      EndpointId: params["EndpointId"],
      DestinationAddress: params["DestinationAddress"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCustomRoutingPortMappingsByDestination",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DestinationPortMappings": [toDestinationPortMapping],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEndpointGroups(
    {abortSignal, ...params}: RequestConfig & s.ListEndpointGroupsRequest,
  ): Promise<s.ListEndpointGroupsResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEndpointGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointGroups": [toEndpointGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listListeners(
    {abortSignal, ...params}: RequestConfig & s.ListListenersRequest,
  ): Promise<s.ListListenersResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListListeners",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listeners": [toListener],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async provisionByoipCidr(
    {abortSignal, ...params}: RequestConfig & s.ProvisionByoipCidrRequest,
  ): Promise<s.ProvisionByoipCidrResponse> {
    const body: jsonP.JSONObject = {
      Cidr: params["Cidr"],
      CidrAuthorizationContext: fromCidrAuthorizationContext(params["CidrAuthorizationContext"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ProvisionByoipCidr",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

  async removeCustomRoutingEndpoints(
    {abortSignal, ...params}: RequestConfig & s.RemoveCustomRoutingEndpointsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      EndpointIds: params["EndpointIds"],
      EndpointGroupArn: params["EndpointGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveCustomRoutingEndpoints",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAccelerator(
    {abortSignal, ...params}: RequestConfig & s.UpdateAcceleratorRequest,
  ): Promise<s.UpdateAcceleratorResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      Name: params["Name"],
      IpAddressType: params["IpAddressType"],
      Enabled: params["Enabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccelerator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerator": toAccelerator,
      },
    }, await resp.json());
  }

  async updateAcceleratorAttributes(
    {abortSignal, ...params}: RequestConfig & s.UpdateAcceleratorAttributesRequest,
  ): Promise<s.UpdateAcceleratorAttributesResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      FlowLogsEnabled: params["FlowLogsEnabled"],
      FlowLogsS3Bucket: params["FlowLogsS3Bucket"],
      FlowLogsS3Prefix: params["FlowLogsS3Prefix"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAcceleratorAttributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AcceleratorAttributes": toAcceleratorAttributes,
      },
    }, await resp.json());
  }

  async updateCustomRoutingAccelerator(
    {abortSignal, ...params}: RequestConfig & s.UpdateCustomRoutingAcceleratorRequest,
  ): Promise<s.UpdateCustomRoutingAcceleratorResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      Name: params["Name"],
      IpAddressType: params["IpAddressType"],
      Enabled: params["Enabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCustomRoutingAccelerator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accelerator": toCustomRoutingAccelerator,
      },
    }, await resp.json());
  }

  async updateCustomRoutingAcceleratorAttributes(
    {abortSignal, ...params}: RequestConfig & s.UpdateCustomRoutingAcceleratorAttributesRequest,
  ): Promise<s.UpdateCustomRoutingAcceleratorAttributesResponse> {
    const body: jsonP.JSONObject = {
      AcceleratorArn: params["AcceleratorArn"],
      FlowLogsEnabled: params["FlowLogsEnabled"],
      FlowLogsS3Bucket: params["FlowLogsS3Bucket"],
      FlowLogsS3Prefix: params["FlowLogsS3Prefix"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCustomRoutingAcceleratorAttributes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AcceleratorAttributes": toCustomRoutingAcceleratorAttributes,
      },
    }, await resp.json());
  }

  async updateCustomRoutingListener(
    {abortSignal, ...params}: RequestConfig & s.UpdateCustomRoutingListenerRequest,
  ): Promise<s.UpdateCustomRoutingListenerResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
      PortRanges: params["PortRanges"]?.map(x => fromPortRange(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCustomRoutingListener",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listener": toCustomRoutingListener,
      },
    }, await resp.json());
  }

  async updateEndpointGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateEndpointGroupRequest,
  ): Promise<s.UpdateEndpointGroupResponse> {
    const body: jsonP.JSONObject = {
      EndpointGroupArn: params["EndpointGroupArn"],
      EndpointConfigurations: params["EndpointConfigurations"]?.map(x => fromEndpointConfiguration(x)),
      TrafficDialPercentage: params["TrafficDialPercentage"],
      HealthCheckPort: params["HealthCheckPort"],
      HealthCheckProtocol: params["HealthCheckProtocol"],
      HealthCheckPath: params["HealthCheckPath"],
      HealthCheckIntervalSeconds: params["HealthCheckIntervalSeconds"],
      ThresholdCount: params["ThresholdCount"],
      PortOverrides: params["PortOverrides"]?.map(x => fromPortOverride(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEndpointGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointGroup": toEndpointGroup,
      },
    }, await resp.json());
  }

  async updateListener(
    {abortSignal, ...params}: RequestConfig & s.UpdateListenerRequest,
  ): Promise<s.UpdateListenerResponse> {
    const body: jsonP.JSONObject = {
      ListenerArn: params["ListenerArn"],
      PortRanges: params["PortRanges"]?.map(x => fromPortRange(x)),
      Protocol: params["Protocol"],
      ClientAffinity: params["ClientAffinity"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateListener",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Listener": toListener,
      },
    }, await resp.json());
  }

  async withdrawByoipCidr(
    {abortSignal, ...params}: RequestConfig & s.WithdrawByoipCidrRequest,
  ): Promise<s.WithdrawByoipCidrResponse> {
    const body: jsonP.JSONObject = {
      Cidr: params["Cidr"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "WithdrawByoipCidr",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ByoipCidr": toByoipCidr,
      },
    }, await resp.json());
  }

}

function fromCustomRoutingEndpointConfiguration(input?: s.CustomRoutingEndpointConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EndpointId: input["EndpointId"],
  }
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromCustomRoutingDestinationConfiguration(input?: s.CustomRoutingDestinationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromPort: input["FromPort"],
    ToPort: input["ToPort"],
    Protocols: input["Protocols"],
  }
}

function fromPortRange(input?: s.PortRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromPort: input["FromPort"],
    ToPort: input["ToPort"],
  }
}
function toPortRange(root: jsonP.JSONValue): s.PortRange {
  return jsonP.readObj({
    required: {},
    optional: {
      "FromPort": "n",
      "ToPort": "n",
    },
  }, root);
}

function fromEndpointConfiguration(input?: s.EndpointConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EndpointId: input["EndpointId"],
    Weight: input["Weight"],
    ClientIPPreservationEnabled: input["ClientIPPreservationEnabled"],
  }
}

function fromPortOverride(input?: s.PortOverride | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ListenerPort: input["ListenerPort"],
    EndpointPort: input["EndpointPort"],
  }
}
function toPortOverride(root: jsonP.JSONValue): s.PortOverride {
  return jsonP.readObj({
    required: {},
    optional: {
      "ListenerPort": "n",
      "EndpointPort": "n",
    },
  }, root);
}

function fromCidrAuthorizationContext(input?: s.CidrAuthorizationContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Message: input["Message"],
    Signature: input["Signature"],
  }
}

function toCustomRoutingEndpointDescription(root: jsonP.JSONValue): s.CustomRoutingEndpointDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndpointId": "s",
    },
  }, root);
}

function toByoipCidr(root: jsonP.JSONValue): s.ByoipCidr {
  return jsonP.readObj({
    required: {},
    optional: {
      "Cidr": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.ByoipCidrState>(x),
      "Events": [toByoipCidrEvent],
    },
  }, root);
}

function toByoipCidrEvent(root: jsonP.JSONValue): s.ByoipCidrEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Message": "s",
      "Timestamp": "d",
    },
  }, root);
}

function toAccelerator(root: jsonP.JSONValue): s.Accelerator {
  return jsonP.readObj({
    required: {},
    optional: {
      "AcceleratorArn": "s",
      "Name": "s",
      "IpAddressType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IpAddressType>(x),
      "Enabled": "b",
      "IpSets": [toIpSet],
      "DnsName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AcceleratorStatus>(x),
      "CreatedTime": "d",
      "LastModifiedTime": "d",
    },
  }, root);
}

function toIpSet(root: jsonP.JSONValue): s.IpSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "IpFamily": "s",
      "IpAddresses": ["s"],
    },
  }, root);
}

function toCustomRoutingAccelerator(root: jsonP.JSONValue): s.CustomRoutingAccelerator {
  return jsonP.readObj({
    required: {},
    optional: {
      "AcceleratorArn": "s",
      "Name": "s",
      "IpAddressType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IpAddressType>(x),
      "Enabled": "b",
      "IpSets": [toIpSet],
      "DnsName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.CustomRoutingAcceleratorStatus>(x),
      "CreatedTime": "d",
      "LastModifiedTime": "d",
    },
  }, root);
}

function toCustomRoutingEndpointGroup(root: jsonP.JSONValue): s.CustomRoutingEndpointGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndpointGroupArn": "s",
      "EndpointGroupRegion": "s",
      "DestinationDescriptions": [toCustomRoutingDestinationDescription],
      "EndpointDescriptions": [toCustomRoutingEndpointDescription],
    },
  }, root);
}

function toCustomRoutingDestinationDescription(root: jsonP.JSONValue): s.CustomRoutingDestinationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "FromPort": "n",
      "ToPort": "n",
      "Protocols": [(x: jsonP.JSONValue) => cmnP.readEnum<s.Protocol>(x)],
    },
  }, root);
}

function toCustomRoutingListener(root: jsonP.JSONValue): s.CustomRoutingListener {
  return jsonP.readObj({
    required: {},
    optional: {
      "ListenerArn": "s",
      "PortRanges": [toPortRange],
    },
  }, root);
}

function toEndpointGroup(root: jsonP.JSONValue): s.EndpointGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndpointGroupArn": "s",
      "EndpointGroupRegion": "s",
      "EndpointDescriptions": [toEndpointDescription],
      "TrafficDialPercentage": "n",
      "HealthCheckPort": "n",
      "HealthCheckProtocol": (x: jsonP.JSONValue) => cmnP.readEnum<s.HealthCheckProtocol>(x),
      "HealthCheckPath": "s",
      "HealthCheckIntervalSeconds": "n",
      "ThresholdCount": "n",
      "PortOverrides": [toPortOverride],
    },
  }, root);
}

function toEndpointDescription(root: jsonP.JSONValue): s.EndpointDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndpointId": "s",
      "Weight": "n",
      "HealthState": (x: jsonP.JSONValue) => cmnP.readEnum<s.HealthState>(x),
      "HealthReason": "s",
      "ClientIPPreservationEnabled": "b",
    },
  }, root);
}

function toListener(root: jsonP.JSONValue): s.Listener {
  return jsonP.readObj({
    required: {},
    optional: {
      "ListenerArn": "s",
      "PortRanges": [toPortRange],
      "Protocol": (x: jsonP.JSONValue) => cmnP.readEnum<s.Protocol>(x),
      "ClientAffinity": (x: jsonP.JSONValue) => cmnP.readEnum<s.ClientAffinity>(x),
    },
  }, root);
}

function toAcceleratorAttributes(root: jsonP.JSONValue): s.AcceleratorAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "FlowLogsEnabled": "b",
      "FlowLogsS3Bucket": "s",
      "FlowLogsS3Prefix": "s",
    },
  }, root);
}

function toCustomRoutingAcceleratorAttributes(root: jsonP.JSONValue): s.CustomRoutingAcceleratorAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "FlowLogsEnabled": "b",
      "FlowLogsS3Bucket": "s",
      "FlowLogsS3Prefix": "s",
    },
  }, root);
}

function toPortMapping(root: jsonP.JSONValue): s.PortMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "AcceleratorPort": "n",
      "EndpointGroupArn": "s",
      "EndpointId": "s",
      "DestinationSocketAddress": toSocketAddress,
      "Protocols": [(x: jsonP.JSONValue) => cmnP.readEnum<s.CustomRoutingProtocol>(x)],
      "DestinationTrafficState": (x: jsonP.JSONValue) => cmnP.readEnum<s.CustomRoutingDestinationTrafficState>(x),
    },
  }, root);
}

function toSocketAddress(root: jsonP.JSONValue): s.SocketAddress {
  return jsonP.readObj({
    required: {},
    optional: {
      "IpAddress": "s",
      "Port": "n",
    },
  }, root);
}

function toDestinationPortMapping(root: jsonP.JSONValue): s.DestinationPortMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "AcceleratorArn": "s",
      "AcceleratorSocketAddresses": [toSocketAddress],
      "EndpointGroupArn": "s",
      "EndpointId": "s",
      "EndpointGroupRegion": "s",
      "DestinationSocketAddress": toSocketAddress,
      "IpAddressType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IpAddressType>(x),
      "DestinationTrafficState": (x: jsonP.JSONValue) => cmnP.readEnum<s.CustomRoutingDestinationTrafficState>(x),
    },
  }, root);
}
