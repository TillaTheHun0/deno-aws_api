// Autogenerated API client for: AWSKendraFrontendService

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Kendra {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Kendra.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-02-03",
    "endpointPrefix": "kendra",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "kendra",
    "serviceFullName": "AWSKendraFrontendService",
    "serviceId": "kendra",
    "signatureVersion": "v4",
    "signingName": "kendra",
    "targetPrefix": "AWSKendraFrontendService",
    "uid": "kendra-2019-02-03"
  };

  async batchDeleteDocument(
    {abortSignal, ...params}: RequestConfig & BatchDeleteDocumentRequest,
  ): Promise<BatchDeleteDocumentResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      DocumentIdList: params["DocumentIdList"],
      DataSourceSyncJobMetricTarget: fromDataSourceSyncJobMetricTarget(params["DataSourceSyncJobMetricTarget"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeleteDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedDocuments": [toBatchDeleteDocumentResponseFailedDocument],
      },
    }, await resp.json());
  }

  async batchPutDocument(
    {abortSignal, ...params}: RequestConfig & BatchPutDocumentRequest,
  ): Promise<BatchPutDocumentResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      RoleArn: params["RoleArn"],
      Documents: params["Documents"]?.map(x => fromDocument(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchPutDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedDocuments": [toBatchPutDocumentResponseFailedDocument],
      },
    }, await resp.json());
  }

  async createDataSource(
    {abortSignal, ...params}: RequestConfig & CreateDataSourceRequest,
  ): Promise<CreateDataSourceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      IndexId: params["IndexId"],
      Type: params["Type"],
      Configuration: fromDataSourceConfiguration(params["Configuration"]),
      Description: params["Description"],
      Schedule: params["Schedule"],
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataSource",
    });
    return jsonP.readObj({
      required: {
        "Id": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createFaq(
    {abortSignal, ...params}: RequestConfig & CreateFaqRequest,
  ): Promise<CreateFaqResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      Name: params["Name"],
      Description: params["Description"],
      S3Path: fromS3Path(params["S3Path"]),
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      FileFormat: params["FileFormat"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFaq",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async createIndex(
    {abortSignal, ...params}: RequestConfig & CreateIndexRequest,
  ): Promise<CreateIndexResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Edition: params["Edition"],
      RoleArn: params["RoleArn"],
      ServerSideEncryptionConfiguration: fromServerSideEncryptionConfiguration(params["ServerSideEncryptionConfiguration"]),
      Description: params["Description"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      UserTokenConfigurations: params["UserTokenConfigurations"]?.map(x => fromUserTokenConfiguration(x)),
      UserContextPolicy: params["UserContextPolicy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIndex",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async createThesaurus(
    {abortSignal, ...params}: RequestConfig & CreateThesaurusRequest,
  ): Promise<CreateThesaurusResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      Name: params["Name"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      SourceS3Path: fromS3Path(params["SourceS3Path"]),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThesaurus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async deleteDataSource(
    {abortSignal, ...params}: RequestConfig & DeleteDataSourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDataSource",
    });
  }

  async deleteFaq(
    {abortSignal, ...params}: RequestConfig & DeleteFaqRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFaq",
    });
  }

  async deleteIndex(
    {abortSignal, ...params}: RequestConfig & DeleteIndexRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIndex",
    });
  }

  async deleteThesaurus(
    {abortSignal, ...params}: RequestConfig & DeleteThesaurusRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteThesaurus",
    });
  }

  async describeDataSource(
    {abortSignal, ...params}: RequestConfig & DescribeDataSourceRequest,
  ): Promise<DescribeDataSourceResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDataSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "IndexId": "s",
        "Name": "s",
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceType>(x),
        "Configuration": toDataSourceConfiguration,
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "Description": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceStatus>(x),
        "Schedule": "s",
        "RoleArn": "s",
        "ErrorMessage": "s",
      },
    }, await resp.json());
  }

  async describeFaq(
    {abortSignal, ...params}: RequestConfig & DescribeFaqRequest,
  ): Promise<DescribeFaqResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFaq",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "IndexId": "s",
        "Name": "s",
        "Description": "s",
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "S3Path": toS3Path,
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<FaqStatus>(x),
        "RoleArn": "s",
        "ErrorMessage": "s",
        "FileFormat": (x: jsonP.JSONValue) => cmnP.readEnum<FaqFileFormat>(x),
      },
    }, await resp.json());
  }

  async describeIndex(
    {abortSignal, ...params}: RequestConfig & DescribeIndexRequest,
  ): Promise<DescribeIndexResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIndex",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "Id": "s",
        "Edition": (x: jsonP.JSONValue) => cmnP.readEnum<IndexEdition>(x),
        "RoleArn": "s",
        "ServerSideEncryptionConfiguration": toServerSideEncryptionConfiguration,
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<IndexStatus>(x),
        "Description": "s",
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "DocumentMetadataConfigurations": [toDocumentMetadataConfiguration],
        "IndexStatistics": toIndexStatistics,
        "ErrorMessage": "s",
        "CapacityUnits": toCapacityUnitsConfiguration,
        "UserTokenConfigurations": [toUserTokenConfiguration],
        "UserContextPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<UserContextPolicy>(x),
      },
    }, await resp.json());
  }

  async describeThesaurus(
    {abortSignal, ...params}: RequestConfig & DescribeThesaurusRequest,
  ): Promise<DescribeThesaurusResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeThesaurus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "IndexId": "s",
        "Name": "s",
        "Description": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ThesaurusStatus>(x),
        "ErrorMessage": "s",
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "RoleArn": "s",
        "SourceS3Path": toS3Path,
        "FileSizeBytes": "n",
        "TermCount": "n",
        "SynonymRuleCount": "n",
      },
    }, await resp.json());
  }

  async listDataSourceSyncJobs(
    {abortSignal, ...params}: RequestConfig & ListDataSourceSyncJobsRequest,
  ): Promise<ListDataSourceSyncJobsResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      StartTimeFilter: fromTimeRange(params["StartTimeFilter"]),
      StatusFilter: params["StatusFilter"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDataSourceSyncJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "History": [toDataSourceSyncJob],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDataSources(
    {abortSignal, ...params}: RequestConfig & ListDataSourcesRequest,
  ): Promise<ListDataSourcesResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDataSources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SummaryItems": [toDataSourceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFaqs(
    {abortSignal, ...params}: RequestConfig & ListFaqsRequest,
  ): Promise<ListFaqsResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFaqs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "FaqSummaryItems": [toFaqSummary],
      },
    }, await resp.json());
  }

  async listIndices(
    {abortSignal, ...params}: RequestConfig & ListIndicesRequest = {},
  ): Promise<ListIndicesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIndices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IndexConfigurationSummaryItems": [toIndexConfigurationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listThesauri(
    {abortSignal, ...params}: RequestConfig & ListThesauriRequest,
  ): Promise<ListThesauriResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListThesauri",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "ThesaurusSummaryItems": [toThesaurusSummary],
      },
    }, await resp.json());
  }

  async query(
    {abortSignal, ...params}: RequestConfig & QueryRequest,
  ): Promise<QueryResult> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      QueryText: params["QueryText"],
      AttributeFilter: fromAttributeFilter(params["AttributeFilter"]),
      Facets: params["Facets"]?.map(x => fromFacet(x)),
      RequestedDocumentAttributes: params["RequestedDocumentAttributes"],
      QueryResultTypeFilter: params["QueryResultTypeFilter"],
      PageNumber: params["PageNumber"],
      PageSize: params["PageSize"],
      SortingConfiguration: fromSortingConfiguration(params["SortingConfiguration"]),
      UserContext: fromUserContext(params["UserContext"]),
      VisitorId: params["VisitorId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Query",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QueryId": "s",
        "ResultItems": [toQueryResultItem],
        "FacetResults": [toFacetResult],
        "TotalNumberOfResults": "n",
      },
    }, await resp.json());
  }

  async startDataSourceSyncJob(
    {abortSignal, ...params}: RequestConfig & StartDataSourceSyncJobRequest,
  ): Promise<StartDataSourceSyncJobResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDataSourceSyncJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ExecutionId": "s",
      },
    }, await resp.json());
  }

  async stopDataSourceSyncJob(
    {abortSignal, ...params}: RequestConfig & StopDataSourceSyncJobRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopDataSourceSyncJob",
    });
  }

  async submitFeedback(
    {abortSignal, ...params}: RequestConfig & SubmitFeedbackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      QueryId: params["QueryId"],
      ClickFeedbackItems: params["ClickFeedbackItems"]?.map(x => fromClickFeedback(x)),
      RelevanceFeedbackItems: params["RelevanceFeedbackItems"]?.map(x => fromRelevanceFeedback(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SubmitFeedback",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDataSource(
    {abortSignal, ...params}: RequestConfig & UpdateDataSourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      IndexId: params["IndexId"],
      Configuration: fromDataSourceConfiguration(params["Configuration"]),
      Description: params["Description"],
      Schedule: params["Schedule"],
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSource",
    });
  }

  async updateIndex(
    {abortSignal, ...params}: RequestConfig & UpdateIndexRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      RoleArn: params["RoleArn"],
      Description: params["Description"],
      DocumentMetadataConfigurationUpdates: params["DocumentMetadataConfigurationUpdates"]?.map(x => fromDocumentMetadataConfiguration(x)),
      CapacityUnits: fromCapacityUnitsConfiguration(params["CapacityUnits"]),
      UserTokenConfigurations: params["UserTokenConfigurations"]?.map(x => fromUserTokenConfiguration(x)),
      UserContextPolicy: params["UserContextPolicy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIndex",
    });
  }

  async updateThesaurus(
    {abortSignal, ...params}: RequestConfig & UpdateThesaurusRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      IndexId: params["IndexId"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      SourceS3Path: fromS3Path(params["SourceS3Path"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThesaurus",
    });
  }

}

// refs: 1 - tags: named, input
export interface BatchDeleteDocumentRequest {
  IndexId: string;
  DocumentIdList: string[];
  DataSourceSyncJobMetricTarget?: DataSourceSyncJobMetricTarget | null;
}

// refs: 1 - tags: named, input
export interface BatchPutDocumentRequest {
  IndexId: string;
  RoleArn?: string | null;
  Documents: Document[];
}

// refs: 1 - tags: named, input
export interface CreateDataSourceRequest {
  Name: string;
  IndexId: string;
  Type: DataSourceType;
  Configuration?: DataSourceConfiguration | null;
  Description?: string | null;
  Schedule?: string | null;
  RoleArn?: string | null;
  Tags?: Tag[] | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateFaqRequest {
  IndexId: string;
  Name: string;
  Description?: string | null;
  S3Path: S3Path;
  RoleArn: string;
  Tags?: Tag[] | null;
  FileFormat?: FaqFileFormat | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateIndexRequest {
  Name: string;
  Edition?: IndexEdition | null;
  RoleArn: string;
  ServerSideEncryptionConfiguration?: ServerSideEncryptionConfiguration | null;
  Description?: string | null;
  ClientToken?: string | null;
  Tags?: Tag[] | null;
  UserTokenConfigurations?: UserTokenConfiguration[] | null;
  UserContextPolicy?: UserContextPolicy | null;
}

// refs: 1 - tags: named, input
export interface CreateThesaurusRequest {
  IndexId: string;
  Name: string;
  Description?: string | null;
  RoleArn: string;
  Tags?: Tag[] | null;
  SourceS3Path: S3Path;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDataSourceRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFaqRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface DeleteIndexRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteThesaurusRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDataSourceRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface DescribeFaqRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface DescribeIndexRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribeThesaurusRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface ListDataSourceSyncJobsRequest {
  Id: string;
  IndexId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  StartTimeFilter?: TimeRange | null;
  StatusFilter?: DataSourceSyncJobStatus | null;
}

// refs: 1 - tags: named, input
export interface ListDataSourcesRequest {
  IndexId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListFaqsRequest {
  IndexId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIndicesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface ListThesauriRequest {
  IndexId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface QueryRequest {
  IndexId: string;
  QueryText: string;
  AttributeFilter?: AttributeFilter | null;
  Facets?: Facet[] | null;
  RequestedDocumentAttributes?: string[] | null;
  QueryResultTypeFilter?: QueryResultType | null;
  PageNumber?: number | null;
  PageSize?: number | null;
  SortingConfiguration?: SortingConfiguration | null;
  UserContext?: UserContext | null;
  VisitorId?: string | null;
}

// refs: 1 - tags: named, input
export interface StartDataSourceSyncJobRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface StopDataSourceSyncJobRequest {
  Id: string;
  IndexId: string;
}

// refs: 1 - tags: named, input
export interface SubmitFeedbackRequest {
  IndexId: string;
  QueryId: string;
  ClickFeedbackItems?: ClickFeedback[] | null;
  RelevanceFeedbackItems?: RelevanceFeedback[] | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDataSourceRequest {
  Id: string;
  Name?: string | null;
  IndexId: string;
  Configuration?: DataSourceConfiguration | null;
  Description?: string | null;
  Schedule?: string | null;
  RoleArn?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateIndexRequest {
  Id: string;
  Name?: string | null;
  RoleArn?: string | null;
  Description?: string | null;
  DocumentMetadataConfigurationUpdates?: DocumentMetadataConfiguration[] | null;
  CapacityUnits?: CapacityUnitsConfiguration | null;
  UserTokenConfigurations?: UserTokenConfiguration[] | null;
  UserContextPolicy?: UserContextPolicy | null;
}

// refs: 1 - tags: named, input
export interface UpdateThesaurusRequest {
  Id: string;
  Name?: string | null;
  IndexId: string;
  Description?: string | null;
  RoleArn?: string | null;
  SourceS3Path?: S3Path | null;
}

// refs: 1 - tags: named, output
export interface BatchDeleteDocumentResponse {
  FailedDocuments?: BatchDeleteDocumentResponseFailedDocument[] | null;
}

// refs: 1 - tags: named, output
export interface BatchPutDocumentResponse {
  FailedDocuments?: BatchPutDocumentResponseFailedDocument[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDataSourceResponse {
  Id: string;
}

// refs: 1 - tags: named, output
export interface CreateFaqResponse {
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateIndexResponse {
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateThesaurusResponse {
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDataSourceResponse {
  Id?: string | null;
  IndexId?: string | null;
  Name?: string | null;
  Type?: DataSourceType | null;
  Configuration?: DataSourceConfiguration | null;
  CreatedAt?: Date | number | null;
  UpdatedAt?: Date | number | null;
  Description?: string | null;
  Status?: DataSourceStatus | null;
  Schedule?: string | null;
  RoleArn?: string | null;
  ErrorMessage?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeFaqResponse {
  Id?: string | null;
  IndexId?: string | null;
  Name?: string | null;
  Description?: string | null;
  CreatedAt?: Date | number | null;
  UpdatedAt?: Date | number | null;
  S3Path?: S3Path | null;
  Status?: FaqStatus | null;
  RoleArn?: string | null;
  ErrorMessage?: string | null;
  FileFormat?: FaqFileFormat | null;
}

// refs: 1 - tags: named, output
export interface DescribeIndexResponse {
  Name?: string | null;
  Id?: string | null;
  Edition?: IndexEdition | null;
  RoleArn?: string | null;
  ServerSideEncryptionConfiguration?: ServerSideEncryptionConfiguration | null;
  Status?: IndexStatus | null;
  Description?: string | null;
  CreatedAt?: Date | number | null;
  UpdatedAt?: Date | number | null;
  DocumentMetadataConfigurations?: DocumentMetadataConfiguration[] | null;
  IndexStatistics?: IndexStatistics | null;
  ErrorMessage?: string | null;
  CapacityUnits?: CapacityUnitsConfiguration | null;
  UserTokenConfigurations?: UserTokenConfiguration[] | null;
  UserContextPolicy?: UserContextPolicy | null;
}

// refs: 1 - tags: named, output
export interface DescribeThesaurusResponse {
  Id?: string | null;
  IndexId?: string | null;
  Name?: string | null;
  Description?: string | null;
  Status?: ThesaurusStatus | null;
  ErrorMessage?: string | null;
  CreatedAt?: Date | number | null;
  UpdatedAt?: Date | number | null;
  RoleArn?: string | null;
  SourceS3Path?: S3Path | null;
  FileSizeBytes?: number | null;
  TermCount?: number | null;
  SynonymRuleCount?: number | null;
}

// refs: 1 - tags: named, output
export interface ListDataSourceSyncJobsResponse {
  History?: DataSourceSyncJob[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDataSourcesResponse {
  SummaryItems?: DataSourceSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFaqsResponse {
  NextToken?: string | null;
  FaqSummaryItems?: FaqSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListIndicesResponse {
  IndexConfigurationSummaryItems?: IndexConfigurationSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListThesauriResponse {
  NextToken?: string | null;
  ThesaurusSummaryItems?: ThesaurusSummary[] | null;
}

// refs: 1 - tags: named, output
export interface QueryResult {
  QueryId?: string | null;
  ResultItems?: QueryResultItem[] | null;
  FacetResults?: FacetResult[] | null;
  TotalNumberOfResults?: number | null;
}

// refs: 1 - tags: named, output
export interface StartDataSourceSyncJobResponse {
  ExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: input, named, interface
export interface DataSourceSyncJobMetricTarget {
  DataSourceId: string;
  DataSourceSyncJobId: string;
}
function fromDataSourceSyncJobMetricTarget(input?: DataSourceSyncJobMetricTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceId: input["DataSourceId"],
    DataSourceSyncJobId: input["DataSourceSyncJobId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface Document {
  Id: string;
  Title?: string | null;
  Blob?: Uint8Array | string | null;
  S3Path?: S3Path | null;
  Attributes?: DocumentAttribute[] | null;
  AccessControlList?: Principal[] | null;
  ContentType?: ContentType | null;
}
function fromDocument(input?: Document | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Title: input["Title"],
    Blob: jsonP.serializeBlob(input["Blob"]),
    S3Path: fromS3Path(input["S3Path"]),
    Attributes: input["Attributes"]?.map(x => fromDocumentAttribute(x)),
    AccessControlList: input["AccessControlList"]?.map(x => fromPrincipal(x)),
    ContentType: input["ContentType"],
  }
}

// refs: 9 - tags: input, named, interface, output
export interface S3Path {
  Bucket: string;
  Key: string;
}
function fromS3Path(input?: S3Path | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Bucket: input["Bucket"],
    Key: input["Key"],
  }
}
function toS3Path(root: jsonP.JSONValue): S3Path {
  return jsonP.readObj({
    required: {
      "Bucket": "s",
      "Key": "s",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface DocumentAttribute {
  Key: string;
  Value: DocumentAttributeValue;
}
function fromDocumentAttribute(input?: DocumentAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: fromDocumentAttributeValue(input["Value"]),
  }
}
function toDocumentAttribute(root: jsonP.JSONValue): DocumentAttribute {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": toDocumentAttributeValue,
    },
    optional: {},
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface DocumentAttributeValue {
  StringValue?: string | null;
  StringListValue?: string[] | null;
  LongValue?: number | null;
  DateValue?: Date | number | null;
}
function fromDocumentAttributeValue(input?: DocumentAttributeValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StringValue: input["StringValue"],
    StringListValue: input["StringListValue"],
    LongValue: input["LongValue"],
    DateValue: jsonP.serializeDate_unixTimestamp(input["DateValue"]),
  }
}
function toDocumentAttributeValue(root: jsonP.JSONValue): DocumentAttributeValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "StringValue": "s",
      "StringListValue": ["s"],
      "LongValue": "n",
      "DateValue": "d",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface Principal {
  Name: string;
  Type: PrincipalType;
  Access: ReadAccessType;
}
function fromPrincipal(input?: Principal | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Type: input["Type"],
    Access: input["Access"],
  }
}

// refs: 1 - tags: input, named, enum
export type PrincipalType =
| "USER"
| "GROUP"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ReadAccessType =
| "ALLOW"
| "DENY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ContentType =
| "PDF"
| "HTML"
| "MS_WORD"
| "PLAIN_TEXT"
| "PPT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type DataSourceType =
| "S3"
| "SHAREPOINT"
| "DATABASE"
| "SALESFORCE"
| "ONEDRIVE"
| "SERVICENOW"
| "CUSTOM"
| "CONFLUENCE"
| "GOOGLEDRIVE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface DataSourceConfiguration {
  S3Configuration?: S3DataSourceConfiguration | null;
  SharePointConfiguration?: SharePointConfiguration | null;
  DatabaseConfiguration?: DatabaseConfiguration | null;
  SalesforceConfiguration?: SalesforceConfiguration | null;
  OneDriveConfiguration?: OneDriveConfiguration | null;
  ServiceNowConfiguration?: ServiceNowConfiguration | null;
  ConfluenceConfiguration?: ConfluenceConfiguration | null;
  GoogleDriveConfiguration?: GoogleDriveConfiguration | null;
}
function fromDataSourceConfiguration(input?: DataSourceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Configuration: fromS3DataSourceConfiguration(input["S3Configuration"]),
    SharePointConfiguration: fromSharePointConfiguration(input["SharePointConfiguration"]),
    DatabaseConfiguration: fromDatabaseConfiguration(input["DatabaseConfiguration"]),
    SalesforceConfiguration: fromSalesforceConfiguration(input["SalesforceConfiguration"]),
    OneDriveConfiguration: fromOneDriveConfiguration(input["OneDriveConfiguration"]),
    ServiceNowConfiguration: fromServiceNowConfiguration(input["ServiceNowConfiguration"]),
    ConfluenceConfiguration: fromConfluenceConfiguration(input["ConfluenceConfiguration"]),
    GoogleDriveConfiguration: fromGoogleDriveConfiguration(input["GoogleDriveConfiguration"]),
  }
}
function toDataSourceConfiguration(root: jsonP.JSONValue): DataSourceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Configuration": toS3DataSourceConfiguration,
      "SharePointConfiguration": toSharePointConfiguration,
      "DatabaseConfiguration": toDatabaseConfiguration,
      "SalesforceConfiguration": toSalesforceConfiguration,
      "OneDriveConfiguration": toOneDriveConfiguration,
      "ServiceNowConfiguration": toServiceNowConfiguration,
      "ConfluenceConfiguration": toConfluenceConfiguration,
      "GoogleDriveConfiguration": toGoogleDriveConfiguration,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3DataSourceConfiguration {
  BucketName: string;
  InclusionPrefixes?: string[] | null;
  InclusionPatterns?: string[] | null;
  ExclusionPatterns?: string[] | null;
  DocumentsMetadataConfiguration?: DocumentsMetadataConfiguration | null;
  AccessControlListConfiguration?: AccessControlListConfiguration | null;
}
function fromS3DataSourceConfiguration(input?: S3DataSourceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketName: input["BucketName"],
    InclusionPrefixes: input["InclusionPrefixes"],
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    DocumentsMetadataConfiguration: fromDocumentsMetadataConfiguration(input["DocumentsMetadataConfiguration"]),
    AccessControlListConfiguration: fromAccessControlListConfiguration(input["AccessControlListConfiguration"]),
  }
}
function toS3DataSourceConfiguration(root: jsonP.JSONValue): S3DataSourceConfiguration {
  return jsonP.readObj({
    required: {
      "BucketName": "s",
    },
    optional: {
      "InclusionPrefixes": ["s"],
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "DocumentsMetadataConfiguration": toDocumentsMetadataConfiguration,
      "AccessControlListConfiguration": toAccessControlListConfiguration,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DocumentsMetadataConfiguration {
  S3Prefix?: string | null;
}
function fromDocumentsMetadataConfiguration(input?: DocumentsMetadataConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Prefix: input["S3Prefix"],
  }
}
function toDocumentsMetadataConfiguration(root: jsonP.JSONValue): DocumentsMetadataConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Prefix": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AccessControlListConfiguration {
  KeyPath?: string | null;
}
function fromAccessControlListConfiguration(input?: AccessControlListConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KeyPath: input["KeyPath"],
  }
}
function toAccessControlListConfiguration(root: jsonP.JSONValue): AccessControlListConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "KeyPath": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SharePointConfiguration {
  SharePointVersion: SharePointVersion;
  Urls: string[];
  SecretArn: string;
  CrawlAttachments?: boolean | null;
  UseChangeLog?: boolean | null;
  InclusionPatterns?: string[] | null;
  ExclusionPatterns?: string[] | null;
  VpcConfiguration?: DataSourceVpcConfiguration | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
  DocumentTitleFieldName?: string | null;
  DisableLocalGroups?: boolean | null;
}
function fromSharePointConfiguration(input?: SharePointConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SharePointVersion: input["SharePointVersion"],
    Urls: input["Urls"],
    SecretArn: input["SecretArn"],
    CrawlAttachments: input["CrawlAttachments"],
    UseChangeLog: input["UseChangeLog"],
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    VpcConfiguration: fromDataSourceVpcConfiguration(input["VpcConfiguration"]),
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    DisableLocalGroups: input["DisableLocalGroups"],
  }
}
function toSharePointConfiguration(root: jsonP.JSONValue): SharePointConfiguration {
  return jsonP.readObj({
    required: {
      "SharePointVersion": (x: jsonP.JSONValue) => cmnP.readEnum<SharePointVersion>(x),
      "Urls": ["s"],
      "SecretArn": "s",
    },
    optional: {
      "CrawlAttachments": "b",
      "UseChangeLog": "b",
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "VpcConfiguration": toDataSourceVpcConfiguration,
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "DocumentTitleFieldName": "s",
      "DisableLocalGroups": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type SharePointVersion =
| "SHAREPOINT_ONLINE"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, interface, output
export interface DataSourceVpcConfiguration {
  SubnetIds: string[];
  SecurityGroupIds: string[];
}
function fromDataSourceVpcConfiguration(input?: DataSourceVpcConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIds: input["SubnetIds"],
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}
function toDataSourceVpcConfiguration(root: jsonP.JSONValue): DataSourceVpcConfiguration {
  return jsonP.readObj({
    required: {
      "SubnetIds": ["s"],
      "SecurityGroupIds": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 33 - tags: input, named, interface, output
export interface DataSourceToIndexFieldMapping {
  DataSourceFieldName: string;
  DateFieldFormat?: string | null;
  IndexFieldName: string;
}
function fromDataSourceToIndexFieldMapping(input?: DataSourceToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toDataSourceToIndexFieldMapping(root: jsonP.JSONValue): DataSourceToIndexFieldMapping {
  return jsonP.readObj({
    required: {
      "DataSourceFieldName": "s",
      "IndexFieldName": "s",
    },
    optional: {
      "DateFieldFormat": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DatabaseConfiguration {
  DatabaseEngineType: DatabaseEngineType;
  ConnectionConfiguration: ConnectionConfiguration;
  VpcConfiguration?: DataSourceVpcConfiguration | null;
  ColumnConfiguration: ColumnConfiguration;
  AclConfiguration?: AclConfiguration | null;
  SqlConfiguration?: SqlConfiguration | null;
}
function fromDatabaseConfiguration(input?: DatabaseConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DatabaseEngineType: input["DatabaseEngineType"],
    ConnectionConfiguration: fromConnectionConfiguration(input["ConnectionConfiguration"]),
    VpcConfiguration: fromDataSourceVpcConfiguration(input["VpcConfiguration"]),
    ColumnConfiguration: fromColumnConfiguration(input["ColumnConfiguration"]),
    AclConfiguration: fromAclConfiguration(input["AclConfiguration"]),
    SqlConfiguration: fromSqlConfiguration(input["SqlConfiguration"]),
  }
}
function toDatabaseConfiguration(root: jsonP.JSONValue): DatabaseConfiguration {
  return jsonP.readObj({
    required: {
      "DatabaseEngineType": (x: jsonP.JSONValue) => cmnP.readEnum<DatabaseEngineType>(x),
      "ConnectionConfiguration": toConnectionConfiguration,
      "ColumnConfiguration": toColumnConfiguration,
    },
    optional: {
      "VpcConfiguration": toDataSourceVpcConfiguration,
      "AclConfiguration": toAclConfiguration,
      "SqlConfiguration": toSqlConfiguration,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DatabaseEngineType =
| "RDS_AURORA_MYSQL"
| "RDS_AURORA_POSTGRESQL"
| "RDS_MYSQL"
| "RDS_POSTGRESQL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ConnectionConfiguration {
  DatabaseHost: string;
  DatabasePort: number;
  DatabaseName: string;
  TableName: string;
  SecretArn: string;
}
function fromConnectionConfiguration(input?: ConnectionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DatabaseHost: input["DatabaseHost"],
    DatabasePort: input["DatabasePort"],
    DatabaseName: input["DatabaseName"],
    TableName: input["TableName"],
    SecretArn: input["SecretArn"],
  }
}
function toConnectionConfiguration(root: jsonP.JSONValue): ConnectionConfiguration {
  return jsonP.readObj({
    required: {
      "DatabaseHost": "s",
      "DatabasePort": "n",
      "DatabaseName": "s",
      "TableName": "s",
      "SecretArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ColumnConfiguration {
  DocumentIdColumnName: string;
  DocumentDataColumnName: string;
  DocumentTitleColumnName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
  ChangeDetectingColumns: string[];
}
function fromColumnConfiguration(input?: ColumnConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentIdColumnName: input["DocumentIdColumnName"],
    DocumentDataColumnName: input["DocumentDataColumnName"],
    DocumentTitleColumnName: input["DocumentTitleColumnName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    ChangeDetectingColumns: input["ChangeDetectingColumns"],
  }
}
function toColumnConfiguration(root: jsonP.JSONValue): ColumnConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentIdColumnName": "s",
      "DocumentDataColumnName": "s",
      "ChangeDetectingColumns": ["s"],
    },
    optional: {
      "DocumentTitleColumnName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AclConfiguration {
  AllowedGroupsColumnName: string;
}
function fromAclConfiguration(input?: AclConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AllowedGroupsColumnName: input["AllowedGroupsColumnName"],
  }
}
function toAclConfiguration(root: jsonP.JSONValue): AclConfiguration {
  return jsonP.readObj({
    required: {
      "AllowedGroupsColumnName": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SqlConfiguration {
  QueryIdentifiersEnclosingOption?: QueryIdentifiersEnclosingOption | null;
}
function fromSqlConfiguration(input?: SqlConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueryIdentifiersEnclosingOption: input["QueryIdentifiersEnclosingOption"],
  }
}
function toSqlConfiguration(root: jsonP.JSONValue): SqlConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "QueryIdentifiersEnclosingOption": (x: jsonP.JSONValue) => cmnP.readEnum<QueryIdentifiersEnclosingOption>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type QueryIdentifiersEnclosingOption =
| "DOUBLE_QUOTES"
| "NONE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SalesforceConfiguration {
  ServerUrl: string;
  SecretArn: string;
  StandardObjectConfigurations?: SalesforceStandardObjectConfiguration[] | null;
  KnowledgeArticleConfiguration?: SalesforceKnowledgeArticleConfiguration | null;
  ChatterFeedConfiguration?: SalesforceChatterFeedConfiguration | null;
  CrawlAttachments?: boolean | null;
  StandardObjectAttachmentConfiguration?: SalesforceStandardObjectAttachmentConfiguration | null;
  IncludeAttachmentFilePatterns?: string[] | null;
  ExcludeAttachmentFilePatterns?: string[] | null;
}
function fromSalesforceConfiguration(input?: SalesforceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ServerUrl: input["ServerUrl"],
    SecretArn: input["SecretArn"],
    StandardObjectConfigurations: input["StandardObjectConfigurations"]?.map(x => fromSalesforceStandardObjectConfiguration(x)),
    KnowledgeArticleConfiguration: fromSalesforceKnowledgeArticleConfiguration(input["KnowledgeArticleConfiguration"]),
    ChatterFeedConfiguration: fromSalesforceChatterFeedConfiguration(input["ChatterFeedConfiguration"]),
    CrawlAttachments: input["CrawlAttachments"],
    StandardObjectAttachmentConfiguration: fromSalesforceStandardObjectAttachmentConfiguration(input["StandardObjectAttachmentConfiguration"]),
    IncludeAttachmentFilePatterns: input["IncludeAttachmentFilePatterns"],
    ExcludeAttachmentFilePatterns: input["ExcludeAttachmentFilePatterns"],
  }
}
function toSalesforceConfiguration(root: jsonP.JSONValue): SalesforceConfiguration {
  return jsonP.readObj({
    required: {
      "ServerUrl": "s",
      "SecretArn": "s",
    },
    optional: {
      "StandardObjectConfigurations": [toSalesforceStandardObjectConfiguration],
      "KnowledgeArticleConfiguration": toSalesforceKnowledgeArticleConfiguration,
      "ChatterFeedConfiguration": toSalesforceChatterFeedConfiguration,
      "CrawlAttachments": "b",
      "StandardObjectAttachmentConfiguration": toSalesforceStandardObjectAttachmentConfiguration,
      "IncludeAttachmentFilePatterns": ["s"],
      "ExcludeAttachmentFilePatterns": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SalesforceStandardObjectConfiguration {
  Name: SalesforceStandardObjectName;
  DocumentDataFieldName: string;
  DocumentTitleFieldName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
}
function fromSalesforceStandardObjectConfiguration(input?: SalesforceStandardObjectConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceStandardObjectConfiguration(root: jsonP.JSONValue): SalesforceStandardObjectConfiguration {
  return jsonP.readObj({
    required: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<SalesforceStandardObjectName>(x),
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type SalesforceStandardObjectName =
| "ACCOUNT"
| "CAMPAIGN"
| "CASE"
| "CONTACT"
| "CONTRACT"
| "DOCUMENT"
| "GROUP"
| "IDEA"
| "LEAD"
| "OPPORTUNITY"
| "PARTNER"
| "PRICEBOOK"
| "PRODUCT"
| "PROFILE"
| "SOLUTION"
| "TASK"
| "USER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SalesforceKnowledgeArticleConfiguration {
  IncludedStates: SalesforceKnowledgeArticleState[];
  StandardKnowledgeArticleTypeConfiguration?: SalesforceStandardKnowledgeArticleTypeConfiguration | null;
  CustomKnowledgeArticleTypeConfigurations?: SalesforceCustomKnowledgeArticleTypeConfiguration[] | null;
}
function fromSalesforceKnowledgeArticleConfiguration(input?: SalesforceKnowledgeArticleConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IncludedStates: input["IncludedStates"],
    StandardKnowledgeArticleTypeConfiguration: fromSalesforceStandardKnowledgeArticleTypeConfiguration(input["StandardKnowledgeArticleTypeConfiguration"]),
    CustomKnowledgeArticleTypeConfigurations: input["CustomKnowledgeArticleTypeConfigurations"]?.map(x => fromSalesforceCustomKnowledgeArticleTypeConfiguration(x)),
  }
}
function toSalesforceKnowledgeArticleConfiguration(root: jsonP.JSONValue): SalesforceKnowledgeArticleConfiguration {
  return jsonP.readObj({
    required: {
      "IncludedStates": [(x: jsonP.JSONValue) => cmnP.readEnum<SalesforceKnowledgeArticleState>(x)],
    },
    optional: {
      "StandardKnowledgeArticleTypeConfiguration": toSalesforceStandardKnowledgeArticleTypeConfiguration,
      "CustomKnowledgeArticleTypeConfigurations": [toSalesforceCustomKnowledgeArticleTypeConfiguration],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type SalesforceKnowledgeArticleState =
| "DRAFT"
| "PUBLISHED"
| "ARCHIVED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SalesforceStandardKnowledgeArticleTypeConfiguration {
  DocumentDataFieldName: string;
  DocumentTitleFieldName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
}
function fromSalesforceStandardKnowledgeArticleTypeConfiguration(input?: SalesforceStandardKnowledgeArticleTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceStandardKnowledgeArticleTypeConfiguration(root: jsonP.JSONValue): SalesforceStandardKnowledgeArticleTypeConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SalesforceCustomKnowledgeArticleTypeConfiguration {
  Name: string;
  DocumentDataFieldName: string;
  DocumentTitleFieldName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
}
function fromSalesforceCustomKnowledgeArticleTypeConfiguration(input?: SalesforceCustomKnowledgeArticleTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceCustomKnowledgeArticleTypeConfiguration(root: jsonP.JSONValue): SalesforceCustomKnowledgeArticleTypeConfiguration {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SalesforceChatterFeedConfiguration {
  DocumentDataFieldName: string;
  DocumentTitleFieldName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
  IncludeFilterTypes?: SalesforceChatterFeedIncludeFilterType[] | null;
}
function fromSalesforceChatterFeedConfiguration(input?: SalesforceChatterFeedConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    IncludeFilterTypes: input["IncludeFilterTypes"],
  }
}
function toSalesforceChatterFeedConfiguration(root: jsonP.JSONValue): SalesforceChatterFeedConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "IncludeFilterTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<SalesforceChatterFeedIncludeFilterType>(x)],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type SalesforceChatterFeedIncludeFilterType =
| "ACTIVE_USER"
| "STANDARD_USER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SalesforceStandardObjectAttachmentConfiguration {
  DocumentTitleFieldName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
}
function fromSalesforceStandardObjectAttachmentConfiguration(input?: SalesforceStandardObjectAttachmentConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceStandardObjectAttachmentConfiguration(root: jsonP.JSONValue): SalesforceStandardObjectAttachmentConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OneDriveConfiguration {
  TenantDomain: string;
  SecretArn: string;
  OneDriveUsers: OneDriveUsers;
  InclusionPatterns?: string[] | null;
  ExclusionPatterns?: string[] | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
  DisableLocalGroups?: boolean | null;
}
function fromOneDriveConfiguration(input?: OneDriveConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TenantDomain: input["TenantDomain"],
    SecretArn: input["SecretArn"],
    OneDriveUsers: fromOneDriveUsers(input["OneDriveUsers"]),
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    DisableLocalGroups: input["DisableLocalGroups"],
  }
}
function toOneDriveConfiguration(root: jsonP.JSONValue): OneDriveConfiguration {
  return jsonP.readObj({
    required: {
      "TenantDomain": "s",
      "SecretArn": "s",
      "OneDriveUsers": toOneDriveUsers,
    },
    optional: {
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "DisableLocalGroups": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OneDriveUsers {
  OneDriveUserList?: string[] | null;
  OneDriveUserS3Path?: S3Path | null;
}
function fromOneDriveUsers(input?: OneDriveUsers | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OneDriveUserList: input["OneDriveUserList"],
    OneDriveUserS3Path: fromS3Path(input["OneDriveUserS3Path"]),
  }
}
function toOneDriveUsers(root: jsonP.JSONValue): OneDriveUsers {
  return jsonP.readObj({
    required: {},
    optional: {
      "OneDriveUserList": ["s"],
      "OneDriveUserS3Path": toS3Path,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ServiceNowConfiguration {
  HostUrl: string;
  SecretArn: string;
  ServiceNowBuildVersion: ServiceNowBuildVersionType;
  KnowledgeArticleConfiguration?: ServiceNowKnowledgeArticleConfiguration | null;
  ServiceCatalogConfiguration?: ServiceNowServiceCatalogConfiguration | null;
}
function fromServiceNowConfiguration(input?: ServiceNowConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    HostUrl: input["HostUrl"],
    SecretArn: input["SecretArn"],
    ServiceNowBuildVersion: input["ServiceNowBuildVersion"],
    KnowledgeArticleConfiguration: fromServiceNowKnowledgeArticleConfiguration(input["KnowledgeArticleConfiguration"]),
    ServiceCatalogConfiguration: fromServiceNowServiceCatalogConfiguration(input["ServiceCatalogConfiguration"]),
  }
}
function toServiceNowConfiguration(root: jsonP.JSONValue): ServiceNowConfiguration {
  return jsonP.readObj({
    required: {
      "HostUrl": "s",
      "SecretArn": "s",
      "ServiceNowBuildVersion": (x: jsonP.JSONValue) => cmnP.readEnum<ServiceNowBuildVersionType>(x),
    },
    optional: {
      "KnowledgeArticleConfiguration": toServiceNowKnowledgeArticleConfiguration,
      "ServiceCatalogConfiguration": toServiceNowServiceCatalogConfiguration,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ServiceNowBuildVersionType =
| "LONDON"
| "OTHERS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ServiceNowKnowledgeArticleConfiguration {
  CrawlAttachments?: boolean | null;
  IncludeAttachmentFilePatterns?: string[] | null;
  ExcludeAttachmentFilePatterns?: string[] | null;
  DocumentDataFieldName: string;
  DocumentTitleFieldName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
}
function fromServiceNowKnowledgeArticleConfiguration(input?: ServiceNowKnowledgeArticleConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlAttachments: input["CrawlAttachments"],
    IncludeAttachmentFilePatterns: input["IncludeAttachmentFilePatterns"],
    ExcludeAttachmentFilePatterns: input["ExcludeAttachmentFilePatterns"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toServiceNowKnowledgeArticleConfiguration(root: jsonP.JSONValue): ServiceNowKnowledgeArticleConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "CrawlAttachments": "b",
      "IncludeAttachmentFilePatterns": ["s"],
      "ExcludeAttachmentFilePatterns": ["s"],
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ServiceNowServiceCatalogConfiguration {
  CrawlAttachments?: boolean | null;
  IncludeAttachmentFilePatterns?: string[] | null;
  ExcludeAttachmentFilePatterns?: string[] | null;
  DocumentDataFieldName: string;
  DocumentTitleFieldName?: string | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
}
function fromServiceNowServiceCatalogConfiguration(input?: ServiceNowServiceCatalogConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlAttachments: input["CrawlAttachments"],
    IncludeAttachmentFilePatterns: input["IncludeAttachmentFilePatterns"],
    ExcludeAttachmentFilePatterns: input["ExcludeAttachmentFilePatterns"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toServiceNowServiceCatalogConfiguration(root: jsonP.JSONValue): ServiceNowServiceCatalogConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "CrawlAttachments": "b",
      "IncludeAttachmentFilePatterns": ["s"],
      "ExcludeAttachmentFilePatterns": ["s"],
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ConfluenceConfiguration {
  ServerUrl: string;
  SecretArn: string;
  Version: ConfluenceVersion;
  SpaceConfiguration?: ConfluenceSpaceConfiguration | null;
  PageConfiguration?: ConfluencePageConfiguration | null;
  BlogConfiguration?: ConfluenceBlogConfiguration | null;
  AttachmentConfiguration?: ConfluenceAttachmentConfiguration | null;
  VpcConfiguration?: DataSourceVpcConfiguration | null;
  InclusionPatterns?: string[] | null;
  ExclusionPatterns?: string[] | null;
}
function fromConfluenceConfiguration(input?: ConfluenceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ServerUrl: input["ServerUrl"],
    SecretArn: input["SecretArn"],
    Version: input["Version"],
    SpaceConfiguration: fromConfluenceSpaceConfiguration(input["SpaceConfiguration"]),
    PageConfiguration: fromConfluencePageConfiguration(input["PageConfiguration"]),
    BlogConfiguration: fromConfluenceBlogConfiguration(input["BlogConfiguration"]),
    AttachmentConfiguration: fromConfluenceAttachmentConfiguration(input["AttachmentConfiguration"]),
    VpcConfiguration: fromDataSourceVpcConfiguration(input["VpcConfiguration"]),
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
  }
}
function toConfluenceConfiguration(root: jsonP.JSONValue): ConfluenceConfiguration {
  return jsonP.readObj({
    required: {
      "ServerUrl": "s",
      "SecretArn": "s",
      "Version": (x: jsonP.JSONValue) => cmnP.readEnum<ConfluenceVersion>(x),
    },
    optional: {
      "SpaceConfiguration": toConfluenceSpaceConfiguration,
      "PageConfiguration": toConfluencePageConfiguration,
      "BlogConfiguration": toConfluenceBlogConfiguration,
      "AttachmentConfiguration": toConfluenceAttachmentConfiguration,
      "VpcConfiguration": toDataSourceVpcConfiguration,
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ConfluenceVersion =
| "CLOUD"
| "SERVER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ConfluenceSpaceConfiguration {
  CrawlPersonalSpaces?: boolean | null;
  CrawlArchivedSpaces?: boolean | null;
  IncludeSpaces?: string[] | null;
  ExcludeSpaces?: string[] | null;
  SpaceFieldMappings?: ConfluenceSpaceToIndexFieldMapping[] | null;
}
function fromConfluenceSpaceConfiguration(input?: ConfluenceSpaceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlPersonalSpaces: input["CrawlPersonalSpaces"],
    CrawlArchivedSpaces: input["CrawlArchivedSpaces"],
    IncludeSpaces: input["IncludeSpaces"],
    ExcludeSpaces: input["ExcludeSpaces"],
    SpaceFieldMappings: input["SpaceFieldMappings"]?.map(x => fromConfluenceSpaceToIndexFieldMapping(x)),
  }
}
function toConfluenceSpaceConfiguration(root: jsonP.JSONValue): ConfluenceSpaceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "CrawlPersonalSpaces": "b",
      "CrawlArchivedSpaces": "b",
      "IncludeSpaces": ["s"],
      "ExcludeSpaces": ["s"],
      "SpaceFieldMappings": [toConfluenceSpaceToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ConfluenceSpaceToIndexFieldMapping {
  DataSourceFieldName?: ConfluenceSpaceFieldName | null;
  DateFieldFormat?: string | null;
  IndexFieldName?: string | null;
}
function fromConfluenceSpaceToIndexFieldMapping(input?: ConfluenceSpaceToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluenceSpaceToIndexFieldMapping(root: jsonP.JSONValue): ConfluenceSpaceToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<ConfluenceSpaceFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ConfluenceSpaceFieldName =
| "DISPLAY_URL"
| "ITEM_TYPE"
| "SPACE_KEY"
| "URL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ConfluencePageConfiguration {
  PageFieldMappings?: ConfluencePageToIndexFieldMapping[] | null;
}
function fromConfluencePageConfiguration(input?: ConfluencePageConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PageFieldMappings: input["PageFieldMappings"]?.map(x => fromConfluencePageToIndexFieldMapping(x)),
  }
}
function toConfluencePageConfiguration(root: jsonP.JSONValue): ConfluencePageConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "PageFieldMappings": [toConfluencePageToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ConfluencePageToIndexFieldMapping {
  DataSourceFieldName?: ConfluencePageFieldName | null;
  DateFieldFormat?: string | null;
  IndexFieldName?: string | null;
}
function fromConfluencePageToIndexFieldMapping(input?: ConfluencePageToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluencePageToIndexFieldMapping(root: jsonP.JSONValue): ConfluencePageToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<ConfluencePageFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ConfluencePageFieldName =
| "AUTHOR"
| "CONTENT_STATUS"
| "CREATED_DATE"
| "DISPLAY_URL"
| "ITEM_TYPE"
| "LABELS"
| "MODIFIED_DATE"
| "PARENT_ID"
| "SPACE_KEY"
| "SPACE_NAME"
| "URL"
| "VERSION"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ConfluenceBlogConfiguration {
  BlogFieldMappings?: ConfluenceBlogToIndexFieldMapping[] | null;
}
function fromConfluenceBlogConfiguration(input?: ConfluenceBlogConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BlogFieldMappings: input["BlogFieldMappings"]?.map(x => fromConfluenceBlogToIndexFieldMapping(x)),
  }
}
function toConfluenceBlogConfiguration(root: jsonP.JSONValue): ConfluenceBlogConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "BlogFieldMappings": [toConfluenceBlogToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ConfluenceBlogToIndexFieldMapping {
  DataSourceFieldName?: ConfluenceBlogFieldName | null;
  DateFieldFormat?: string | null;
  IndexFieldName?: string | null;
}
function fromConfluenceBlogToIndexFieldMapping(input?: ConfluenceBlogToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluenceBlogToIndexFieldMapping(root: jsonP.JSONValue): ConfluenceBlogToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<ConfluenceBlogFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ConfluenceBlogFieldName =
| "AUTHOR"
| "DISPLAY_URL"
| "ITEM_TYPE"
| "LABELS"
| "PUBLISH_DATE"
| "SPACE_KEY"
| "SPACE_NAME"
| "URL"
| "VERSION"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ConfluenceAttachmentConfiguration {
  CrawlAttachments?: boolean | null;
  AttachmentFieldMappings?: ConfluenceAttachmentToIndexFieldMapping[] | null;
}
function fromConfluenceAttachmentConfiguration(input?: ConfluenceAttachmentConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlAttachments: input["CrawlAttachments"],
    AttachmentFieldMappings: input["AttachmentFieldMappings"]?.map(x => fromConfluenceAttachmentToIndexFieldMapping(x)),
  }
}
function toConfluenceAttachmentConfiguration(root: jsonP.JSONValue): ConfluenceAttachmentConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "CrawlAttachments": "b",
      "AttachmentFieldMappings": [toConfluenceAttachmentToIndexFieldMapping],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ConfluenceAttachmentToIndexFieldMapping {
  DataSourceFieldName?: ConfluenceAttachmentFieldName | null;
  DateFieldFormat?: string | null;
  IndexFieldName?: string | null;
}
function fromConfluenceAttachmentToIndexFieldMapping(input?: ConfluenceAttachmentToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluenceAttachmentToIndexFieldMapping(root: jsonP.JSONValue): ConfluenceAttachmentToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<ConfluenceAttachmentFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ConfluenceAttachmentFieldName =
| "AUTHOR"
| "CONTENT_TYPE"
| "CREATED_DATE"
| "DISPLAY_URL"
| "FILE_SIZE"
| "ITEM_TYPE"
| "PARENT_ID"
| "SPACE_KEY"
| "SPACE_NAME"
| "URL"
| "VERSION"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface GoogleDriveConfiguration {
  SecretArn: string;
  InclusionPatterns?: string[] | null;
  ExclusionPatterns?: string[] | null;
  FieldMappings?: DataSourceToIndexFieldMapping[] | null;
  ExcludeMimeTypes?: string[] | null;
  ExcludeUserAccounts?: string[] | null;
  ExcludeSharedDrives?: string[] | null;
}
function fromGoogleDriveConfiguration(input?: GoogleDriveConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SecretArn: input["SecretArn"],
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    ExcludeMimeTypes: input["ExcludeMimeTypes"],
    ExcludeUserAccounts: input["ExcludeUserAccounts"],
    ExcludeSharedDrives: input["ExcludeSharedDrives"],
  }
}
function toGoogleDriveConfiguration(root: jsonP.JSONValue): GoogleDriveConfiguration {
  return jsonP.readObj({
    required: {
      "SecretArn": "s",
    },
    optional: {
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "ExcludeMimeTypes": ["s"],
      "ExcludeUserAccounts": ["s"],
      "ExcludeSharedDrives": ["s"],
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type FaqFileFormat =
| "CSV"
| "CSV_WITH_HEADER"
| "JSON"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type IndexEdition =
| "DEVELOPER_EDITION"
| "ENTERPRISE_EDITION"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ServerSideEncryptionConfiguration {
  KmsKeyId?: string | null;
}
function fromServerSideEncryptionConfiguration(input?: ServerSideEncryptionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KmsKeyId: input["KmsKeyId"],
  }
}
function toServerSideEncryptionConfiguration(root: jsonP.JSONValue): ServerSideEncryptionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "KmsKeyId": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface UserTokenConfiguration {
  JwtTokenTypeConfiguration?: JwtTokenTypeConfiguration | null;
  JsonTokenTypeConfiguration?: JsonTokenTypeConfiguration | null;
}
function fromUserTokenConfiguration(input?: UserTokenConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JwtTokenTypeConfiguration: fromJwtTokenTypeConfiguration(input["JwtTokenTypeConfiguration"]),
    JsonTokenTypeConfiguration: fromJsonTokenTypeConfiguration(input["JsonTokenTypeConfiguration"]),
  }
}
function toUserTokenConfiguration(root: jsonP.JSONValue): UserTokenConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "JwtTokenTypeConfiguration": toJwtTokenTypeConfiguration,
      "JsonTokenTypeConfiguration": toJsonTokenTypeConfiguration,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface JwtTokenTypeConfiguration {
  KeyLocation: KeyLocation;
  URL?: string | null;
  SecretManagerArn?: string | null;
  UserNameAttributeField?: string | null;
  GroupAttributeField?: string | null;
  Issuer?: string | null;
  ClaimRegex?: string | null;
}
function fromJwtTokenTypeConfiguration(input?: JwtTokenTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KeyLocation: input["KeyLocation"],
    URL: input["URL"],
    SecretManagerArn: input["SecretManagerArn"],
    UserNameAttributeField: input["UserNameAttributeField"],
    GroupAttributeField: input["GroupAttributeField"],
    Issuer: input["Issuer"],
    ClaimRegex: input["ClaimRegex"],
  }
}
function toJwtTokenTypeConfiguration(root: jsonP.JSONValue): JwtTokenTypeConfiguration {
  return jsonP.readObj({
    required: {
      "KeyLocation": (x: jsonP.JSONValue) => cmnP.readEnum<KeyLocation>(x),
    },
    optional: {
      "URL": "s",
      "SecretManagerArn": "s",
      "UserNameAttributeField": "s",
      "GroupAttributeField": "s",
      "Issuer": "s",
      "ClaimRegex": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type KeyLocation =
| "URL"
| "SECRET_MANAGER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface JsonTokenTypeConfiguration {
  UserNameAttributeField: string;
  GroupAttributeField: string;
}
function fromJsonTokenTypeConfiguration(input?: JsonTokenTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserNameAttributeField: input["UserNameAttributeField"],
    GroupAttributeField: input["GroupAttributeField"],
  }
}
function toJsonTokenTypeConfiguration(root: jsonP.JSONValue): JsonTokenTypeConfiguration {
  return jsonP.readObj({
    required: {
      "UserNameAttributeField": "s",
      "GroupAttributeField": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type UserContextPolicy =
| "ATTRIBUTE_FILTER"
| "USER_TOKEN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface TimeRange {
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
}
function fromTimeRange(input?: TimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StartTime: jsonP.serializeDate_unixTimestamp(input["StartTime"]),
    EndTime: jsonP.serializeDate_unixTimestamp(input["EndTime"]),
  }
}

// refs: 2 - tags: input, named, enum, output
export type DataSourceSyncJobStatus =
| "FAILED"
| "SUCCEEDED"
| "SYNCING"
| "INCOMPLETE"
| "STOPPING"
| "ABORTED"
| "SYNCING_INDEXING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, recursed, recursive
export interface AttributeFilter {
  AndAllFilters?: AttributeFilter[] | null;
  OrAllFilters?: AttributeFilter[] | null;
  NotFilter?: AttributeFilter | null;
  EqualsTo?: DocumentAttribute | null;
  ContainsAll?: DocumentAttribute | null;
  ContainsAny?: DocumentAttribute | null;
  GreaterThan?: DocumentAttribute | null;
  GreaterThanOrEquals?: DocumentAttribute | null;
  LessThan?: DocumentAttribute | null;
  LessThanOrEquals?: DocumentAttribute | null;
}
function fromAttributeFilter(input?: AttributeFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AndAllFilters: input["AndAllFilters"]?.map(x => fromAttributeFilter(x)),
    OrAllFilters: input["OrAllFilters"]?.map(x => fromAttributeFilter(x)),
    NotFilter: fromAttributeFilter(input["NotFilter"]),
    EqualsTo: fromDocumentAttribute(input["EqualsTo"]),
    ContainsAll: fromDocumentAttribute(input["ContainsAll"]),
    ContainsAny: fromDocumentAttribute(input["ContainsAny"]),
    GreaterThan: fromDocumentAttribute(input["GreaterThan"]),
    GreaterThanOrEquals: fromDocumentAttribute(input["GreaterThanOrEquals"]),
    LessThan: fromDocumentAttribute(input["LessThan"]),
    LessThanOrEquals: fromDocumentAttribute(input["LessThanOrEquals"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface Facet {
  DocumentAttributeKey?: string | null;
}
function fromFacet(input?: Facet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentAttributeKey: input["DocumentAttributeKey"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type QueryResultType =
| "DOCUMENT"
| "QUESTION_ANSWER"
| "ANSWER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SortingConfiguration {
  DocumentAttributeKey: string;
  SortOrder: SortOrder;
}
function fromSortingConfiguration(input?: SortingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentAttributeKey: input["DocumentAttributeKey"],
    SortOrder: input["SortOrder"],
  }
}

// refs: 1 - tags: input, named, enum
export type SortOrder =
| "DESC"
| "ASC"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UserContext {
  Token?: string | null;
}
function fromUserContext(input?: UserContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Token: input["Token"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ClickFeedback {
  ResultId: string;
  ClickTime: Date | number;
}
function fromClickFeedback(input?: ClickFeedback | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResultId: input["ResultId"],
    ClickTime: jsonP.serializeDate_unixTimestamp(input["ClickTime"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface RelevanceFeedback {
  ResultId: string;
  RelevanceValue: RelevanceType;
}
function fromRelevanceFeedback(input?: RelevanceFeedback | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResultId: input["ResultId"],
    RelevanceValue: input["RelevanceValue"],
  }
}

// refs: 1 - tags: input, named, enum
export type RelevanceType =
| "RELEVANT"
| "NOT_RELEVANT"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface DocumentMetadataConfiguration {
  Name: string;
  Type: DocumentAttributeValueType;
  Relevance?: Relevance | null;
  Search?: Search | null;
}
function fromDocumentMetadataConfiguration(input?: DocumentMetadataConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Type: input["Type"],
    Relevance: fromRelevance(input["Relevance"]),
    Search: fromSearch(input["Search"]),
  }
}
function toDocumentMetadataConfiguration(root: jsonP.JSONValue): DocumentMetadataConfiguration {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentAttributeValueType>(x),
    },
    optional: {
      "Relevance": toRelevance,
      "Search": toSearch,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DocumentAttributeValueType =
| "STRING_VALUE"
| "STRING_LIST_VALUE"
| "LONG_VALUE"
| "DATE_VALUE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface Relevance {
  Freshness?: boolean | null;
  Importance?: number | null;
  Duration?: string | null;
  RankOrder?: Order | null;
  ValueImportanceMap?: { [key: string]: number | null | undefined } | null;
}
function fromRelevance(input?: Relevance | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Freshness: input["Freshness"],
    Importance: input["Importance"],
    Duration: input["Duration"],
    RankOrder: input["RankOrder"],
    ValueImportanceMap: input["ValueImportanceMap"],
  }
}
function toRelevance(root: jsonP.JSONValue): Relevance {
  return jsonP.readObj({
    required: {},
    optional: {
      "Freshness": "b",
      "Importance": "n",
      "Duration": "s",
      "RankOrder": (x: jsonP.JSONValue) => cmnP.readEnum<Order>(x),
      "ValueImportanceMap": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type Order =
| "ASCENDING"
| "DESCENDING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface Search {
  Facetable?: boolean | null;
  Searchable?: boolean | null;
  Displayable?: boolean | null;
  Sortable?: boolean | null;
}
function fromSearch(input?: Search | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Facetable: input["Facetable"],
    Searchable: input["Searchable"],
    Displayable: input["Displayable"],
    Sortable: input["Sortable"],
  }
}
function toSearch(root: jsonP.JSONValue): Search {
  return jsonP.readObj({
    required: {},
    optional: {
      "Facetable": "b",
      "Searchable": "b",
      "Displayable": "b",
      "Sortable": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CapacityUnitsConfiguration {
  StorageCapacityUnits: number;
  QueryCapacityUnits: number;
}
function fromCapacityUnitsConfiguration(input?: CapacityUnitsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StorageCapacityUnits: input["StorageCapacityUnits"],
    QueryCapacityUnits: input["QueryCapacityUnits"],
  }
}
function toCapacityUnitsConfiguration(root: jsonP.JSONValue): CapacityUnitsConfiguration {
  return jsonP.readObj({
    required: {
      "StorageCapacityUnits": "n",
      "QueryCapacityUnits": "n",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchDeleteDocumentResponseFailedDocument {
  Id?: string | null;
  ErrorCode?: ErrorCode | null;
  ErrorMessage?: string | null;
}
function toBatchDeleteDocumentResponseFailedDocument(root: jsonP.JSONValue): BatchDeleteDocumentResponseFailedDocument {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ErrorCode =
| "InternalError"
| "InvalidRequest"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchPutDocumentResponseFailedDocument {
  Id?: string | null;
  ErrorCode?: ErrorCode | null;
  ErrorMessage?: string | null;
}
function toBatchPutDocumentResponseFailedDocument(root: jsonP.JSONValue): BatchPutDocumentResponseFailedDocument {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DataSourceStatus =
| "CREATING"
| "DELETING"
| "FAILED"
| "UPDATING"
| "ACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type FaqStatus =
| "CREATING"
| "UPDATING"
| "ACTIVE"
| "DELETING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type IndexStatus =
| "CREATING"
| "ACTIVE"
| "DELETING"
| "FAILED"
| "UPDATING"
| "SYSTEM_UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface IndexStatistics {
  FaqStatistics: FaqStatistics;
  TextDocumentStatistics: TextDocumentStatistics;
}
function toIndexStatistics(root: jsonP.JSONValue): IndexStatistics {
  return jsonP.readObj({
    required: {
      "FaqStatistics": toFaqStatistics,
      "TextDocumentStatistics": toTextDocumentStatistics,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FaqStatistics {
  IndexedQuestionAnswersCount: number;
}
function toFaqStatistics(root: jsonP.JSONValue): FaqStatistics {
  return jsonP.readObj({
    required: {
      "IndexedQuestionAnswersCount": "n",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TextDocumentStatistics {
  IndexedTextDocumentsCount: number;
  IndexedTextBytes: number;
}
function toTextDocumentStatistics(root: jsonP.JSONValue): TextDocumentStatistics {
  return jsonP.readObj({
    required: {
      "IndexedTextDocumentsCount": "n",
      "IndexedTextBytes": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ThesaurusStatus =
| "CREATING"
| "ACTIVE"
| "DELETING"
| "UPDATING"
| "ACTIVE_BUT_UPDATE_FAILED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DataSourceSyncJob {
  ExecutionId?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  Status?: DataSourceSyncJobStatus | null;
  ErrorMessage?: string | null;
  ErrorCode?: ErrorCode | null;
  DataSourceErrorCode?: string | null;
  Metrics?: DataSourceSyncJobMetrics | null;
}
function toDataSourceSyncJob(root: jsonP.JSONValue): DataSourceSyncJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExecutionId": "s",
      "StartTime": "d",
      "EndTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceSyncJobStatus>(x),
      "ErrorMessage": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "DataSourceErrorCode": "s",
      "Metrics": toDataSourceSyncJobMetrics,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataSourceSyncJobMetrics {
  DocumentsAdded?: string | null;
  DocumentsModified?: string | null;
  DocumentsDeleted?: string | null;
  DocumentsFailed?: string | null;
  DocumentsScanned?: string | null;
}
function toDataSourceSyncJobMetrics(root: jsonP.JSONValue): DataSourceSyncJobMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentsAdded": "s",
      "DocumentsModified": "s",
      "DocumentsDeleted": "s",
      "DocumentsFailed": "s",
      "DocumentsScanned": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataSourceSummary {
  Name?: string | null;
  Id?: string | null;
  Type?: DataSourceType | null;
  CreatedAt?: Date | number | null;
  UpdatedAt?: Date | number | null;
  Status?: DataSourceStatus | null;
}
function toDataSourceSummary(root: jsonP.JSONValue): DataSourceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceType>(x),
      "CreatedAt": "d",
      "UpdatedAt": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FaqSummary {
  Id?: string | null;
  Name?: string | null;
  Status?: FaqStatus | null;
  CreatedAt?: Date | number | null;
  UpdatedAt?: Date | number | null;
  FileFormat?: FaqFileFormat | null;
}
function toFaqSummary(root: jsonP.JSONValue): FaqSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<FaqStatus>(x),
      "CreatedAt": "d",
      "UpdatedAt": "d",
      "FileFormat": (x: jsonP.JSONValue) => cmnP.readEnum<FaqFileFormat>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IndexConfigurationSummary {
  Name?: string | null;
  Id?: string | null;
  Edition?: IndexEdition | null;
  CreatedAt: Date | number;
  UpdatedAt: Date | number;
  Status: IndexStatus;
}
function toIndexConfigurationSummary(root: jsonP.JSONValue): IndexConfigurationSummary {
  return jsonP.readObj({
    required: {
      "CreatedAt": "d",
      "UpdatedAt": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<IndexStatus>(x),
    },
    optional: {
      "Name": "s",
      "Id": "s",
      "Edition": (x: jsonP.JSONValue) => cmnP.readEnum<IndexEdition>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThesaurusSummary {
  Id?: string | null;
  Name?: string | null;
  Status?: ThesaurusStatus | null;
  CreatedAt?: Date | number | null;
  UpdatedAt?: Date | number | null;
}
function toThesaurusSummary(root: jsonP.JSONValue): ThesaurusSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ThesaurusStatus>(x),
      "CreatedAt": "d",
      "UpdatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface QueryResultItem {
  Id?: string | null;
  Type?: QueryResultType | null;
  AdditionalAttributes?: AdditionalResultAttribute[] | null;
  DocumentId?: string | null;
  DocumentTitle?: TextWithHighlights | null;
  DocumentExcerpt?: TextWithHighlights | null;
  DocumentURI?: string | null;
  DocumentAttributes?: DocumentAttribute[] | null;
  ScoreAttributes?: ScoreAttributes | null;
  FeedbackToken?: string | null;
}
function toQueryResultItem(root: jsonP.JSONValue): QueryResultItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<QueryResultType>(x),
      "AdditionalAttributes": [toAdditionalResultAttribute],
      "DocumentId": "s",
      "DocumentTitle": toTextWithHighlights,
      "DocumentExcerpt": toTextWithHighlights,
      "DocumentURI": "s",
      "DocumentAttributes": [toDocumentAttribute],
      "ScoreAttributes": toScoreAttributes,
      "FeedbackToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AdditionalResultAttribute {
  Key: string;
  ValueType: AdditionalResultAttributeValueType;
  Value: AdditionalResultAttributeValue;
}
function toAdditionalResultAttribute(root: jsonP.JSONValue): AdditionalResultAttribute {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "ValueType": (x: jsonP.JSONValue) => cmnP.readEnum<AdditionalResultAttributeValueType>(x),
      "Value": toAdditionalResultAttributeValue,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AdditionalResultAttributeValueType =
| "TEXT_WITH_HIGHLIGHTS_VALUE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AdditionalResultAttributeValue {
  TextWithHighlightsValue?: TextWithHighlights | null;
}
function toAdditionalResultAttributeValue(root: jsonP.JSONValue): AdditionalResultAttributeValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "TextWithHighlightsValue": toTextWithHighlights,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface TextWithHighlights {
  Text?: string | null;
  Highlights?: Highlight[] | null;
}
function toTextWithHighlights(root: jsonP.JSONValue): TextWithHighlights {
  return jsonP.readObj({
    required: {},
    optional: {
      "Text": "s",
      "Highlights": [toHighlight],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Highlight {
  BeginOffset: number;
  EndOffset: number;
  TopAnswer?: boolean | null;
  Type?: HighlightType | null;
}
function toHighlight(root: jsonP.JSONValue): Highlight {
  return jsonP.readObj({
    required: {
      "BeginOffset": "n",
      "EndOffset": "n",
    },
    optional: {
      "TopAnswer": "b",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<HighlightType>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type HighlightType =
| "STANDARD"
| "THESAURUS_SYNONYM"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ScoreAttributes {
  ScoreConfidence?: ScoreConfidence | null;
}
function toScoreAttributes(root: jsonP.JSONValue): ScoreAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "ScoreConfidence": (x: jsonP.JSONValue) => cmnP.readEnum<ScoreConfidence>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ScoreConfidence =
| "VERY_HIGH"
| "HIGH"
| "MEDIUM"
| "LOW"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface FacetResult {
  DocumentAttributeKey?: string | null;
  DocumentAttributeValueType?: DocumentAttributeValueType | null;
  DocumentAttributeValueCountPairs?: DocumentAttributeValueCountPair[] | null;
}
function toFacetResult(root: jsonP.JSONValue): FacetResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentAttributeKey": "s",
      "DocumentAttributeValueType": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentAttributeValueType>(x),
      "DocumentAttributeValueCountPairs": [toDocumentAttributeValueCountPair],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DocumentAttributeValueCountPair {
  DocumentAttributeValue?: DocumentAttributeValue | null;
  Count?: number | null;
}
function toDocumentAttributeValueCountPair(root: jsonP.JSONValue): DocumentAttributeValueCountPair {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentAttributeValue": toDocumentAttributeValue,
      "Count": "n",
    },
  }, root);
}
