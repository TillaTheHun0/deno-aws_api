// Autogenerated API client for: AWSKendraFrontendService

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Kendra {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Kendra.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-02-03",
    "endpointPrefix": "kendra",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "kendra",
    "serviceFullName": "AWSKendraFrontendService",
    "serviceId": "kendra",
    "signatureVersion": "v4",
    "signingName": "kendra",
    "targetPrefix": "AWSKendraFrontendService",
    "uid": "kendra-2019-02-03"
  };

  async batchDeleteDocument(
    {abortSignal, ...params}: RequestConfig & s.BatchDeleteDocumentRequest,
  ): Promise<s.BatchDeleteDocumentResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      DocumentIdList: params["DocumentIdList"],
      DataSourceSyncJobMetricTarget: fromDataSourceSyncJobMetricTarget(params["DataSourceSyncJobMetricTarget"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeleteDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedDocuments": [toBatchDeleteDocumentResponseFailedDocument],
      },
    }, await resp.json());
  }

  async batchPutDocument(
    {abortSignal, ...params}: RequestConfig & s.BatchPutDocumentRequest,
  ): Promise<s.BatchPutDocumentResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      RoleArn: params["RoleArn"],
      Documents: params["Documents"]?.map(x => fromDocument(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchPutDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedDocuments": [toBatchPutDocumentResponseFailedDocument],
      },
    }, await resp.json());
  }

  async createDataSource(
    {abortSignal, ...params}: RequestConfig & s.CreateDataSourceRequest,
  ): Promise<s.CreateDataSourceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      IndexId: params["IndexId"],
      Type: params["Type"],
      Configuration: fromDataSourceConfiguration(params["Configuration"]),
      Description: params["Description"],
      Schedule: params["Schedule"],
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataSource",
    });
    return jsonP.readObj({
      required: {
        "Id": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createFaq(
    {abortSignal, ...params}: RequestConfig & s.CreateFaqRequest,
  ): Promise<s.CreateFaqResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      Name: params["Name"],
      Description: params["Description"],
      S3Path: fromS3Path(params["S3Path"]),
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      FileFormat: params["FileFormat"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFaq",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async createIndex(
    {abortSignal, ...params}: RequestConfig & s.CreateIndexRequest,
  ): Promise<s.CreateIndexResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Edition: params["Edition"],
      RoleArn: params["RoleArn"],
      ServerSideEncryptionConfiguration: fromServerSideEncryptionConfiguration(params["ServerSideEncryptionConfiguration"]),
      Description: params["Description"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      UserTokenConfigurations: params["UserTokenConfigurations"]?.map(x => fromUserTokenConfiguration(x)),
      UserContextPolicy: params["UserContextPolicy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIndex",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async createThesaurus(
    {abortSignal, ...params}: RequestConfig & s.CreateThesaurusRequest,
  ): Promise<s.CreateThesaurusResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      Name: params["Name"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      SourceS3Path: fromS3Path(params["SourceS3Path"]),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThesaurus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async deleteDataSource(
    {abortSignal, ...params}: RequestConfig & s.DeleteDataSourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDataSource",
    });
  }

  async deleteFaq(
    {abortSignal, ...params}: RequestConfig & s.DeleteFaqRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFaq",
    });
  }

  async deleteIndex(
    {abortSignal, ...params}: RequestConfig & s.DeleteIndexRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIndex",
    });
  }

  async deleteThesaurus(
    {abortSignal, ...params}: RequestConfig & s.DeleteThesaurusRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteThesaurus",
    });
  }

  async describeDataSource(
    {abortSignal, ...params}: RequestConfig & s.DescribeDataSourceRequest,
  ): Promise<s.DescribeDataSourceResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDataSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "IndexId": "s",
        "Name": "s",
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceType>(x),
        "Configuration": toDataSourceConfiguration,
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "Description": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceStatus>(x),
        "Schedule": "s",
        "RoleArn": "s",
        "ErrorMessage": "s",
      },
    }, await resp.json());
  }

  async describeFaq(
    {abortSignal, ...params}: RequestConfig & s.DescribeFaqRequest,
  ): Promise<s.DescribeFaqResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFaq",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "IndexId": "s",
        "Name": "s",
        "Description": "s",
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "S3Path": toS3Path,
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.FaqStatus>(x),
        "RoleArn": "s",
        "ErrorMessage": "s",
        "FileFormat": (x: jsonP.JSONValue) => cmnP.readEnum<s.FaqFileFormat>(x),
      },
    }, await resp.json());
  }

  async describeIndex(
    {abortSignal, ...params}: RequestConfig & s.DescribeIndexRequest,
  ): Promise<s.DescribeIndexResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIndex",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "Id": "s",
        "Edition": (x: jsonP.JSONValue) => cmnP.readEnum<s.IndexEdition>(x),
        "RoleArn": "s",
        "ServerSideEncryptionConfiguration": toServerSideEncryptionConfiguration,
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.IndexStatus>(x),
        "Description": "s",
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "DocumentMetadataConfigurations": [toDocumentMetadataConfiguration],
        "IndexStatistics": toIndexStatistics,
        "ErrorMessage": "s",
        "CapacityUnits": toCapacityUnitsConfiguration,
        "UserTokenConfigurations": [toUserTokenConfiguration],
        "UserContextPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<s.UserContextPolicy>(x),
      },
    }, await resp.json());
  }

  async describeThesaurus(
    {abortSignal, ...params}: RequestConfig & s.DescribeThesaurusRequest,
  ): Promise<s.DescribeThesaurusResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeThesaurus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "IndexId": "s",
        "Name": "s",
        "Description": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ThesaurusStatus>(x),
        "ErrorMessage": "s",
        "CreatedAt": "d",
        "UpdatedAt": "d",
        "RoleArn": "s",
        "SourceS3Path": toS3Path,
        "FileSizeBytes": "n",
        "TermCount": "n",
        "SynonymRuleCount": "n",
      },
    }, await resp.json());
  }

  async listDataSourceSyncJobs(
    {abortSignal, ...params}: RequestConfig & s.ListDataSourceSyncJobsRequest,
  ): Promise<s.ListDataSourceSyncJobsResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      StartTimeFilter: fromTimeRange(params["StartTimeFilter"]),
      StatusFilter: params["StatusFilter"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDataSourceSyncJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "History": [toDataSourceSyncJob],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDataSources(
    {abortSignal, ...params}: RequestConfig & s.ListDataSourcesRequest,
  ): Promise<s.ListDataSourcesResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDataSources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SummaryItems": [toDataSourceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFaqs(
    {abortSignal, ...params}: RequestConfig & s.ListFaqsRequest,
  ): Promise<s.ListFaqsResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFaqs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "FaqSummaryItems": [toFaqSummary],
      },
    }, await resp.json());
  }

  async listIndices(
    {abortSignal, ...params}: RequestConfig & s.ListIndicesRequest = {},
  ): Promise<s.ListIndicesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIndices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IndexConfigurationSummaryItems": [toIndexConfigurationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listThesauri(
    {abortSignal, ...params}: RequestConfig & s.ListThesauriRequest,
  ): Promise<s.ListThesauriResponse> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListThesauri",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "ThesaurusSummaryItems": [toThesaurusSummary],
      },
    }, await resp.json());
  }

  async query(
    {abortSignal, ...params}: RequestConfig & s.QueryRequest,
  ): Promise<s.QueryResult> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      QueryText: params["QueryText"],
      AttributeFilter: fromAttributeFilter(params["AttributeFilter"]),
      Facets: params["Facets"]?.map(x => fromFacet(x)),
      RequestedDocumentAttributes: params["RequestedDocumentAttributes"],
      QueryResultTypeFilter: params["QueryResultTypeFilter"],
      PageNumber: params["PageNumber"],
      PageSize: params["PageSize"],
      SortingConfiguration: fromSortingConfiguration(params["SortingConfiguration"]),
      UserContext: fromUserContext(params["UserContext"]),
      VisitorId: params["VisitorId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Query",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QueryId": "s",
        "ResultItems": [toQueryResultItem],
        "FacetResults": [toFacetResult],
        "TotalNumberOfResults": "n",
      },
    }, await resp.json());
  }

  async startDataSourceSyncJob(
    {abortSignal, ...params}: RequestConfig & s.StartDataSourceSyncJobRequest,
  ): Promise<s.StartDataSourceSyncJobResponse> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDataSourceSyncJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ExecutionId": "s",
      },
    }, await resp.json());
  }

  async stopDataSourceSyncJob(
    {abortSignal, ...params}: RequestConfig & s.StopDataSourceSyncJobRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      IndexId: params["IndexId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopDataSourceSyncJob",
    });
  }

  async submitFeedback(
    {abortSignal, ...params}: RequestConfig & s.SubmitFeedbackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IndexId: params["IndexId"],
      QueryId: params["QueryId"],
      ClickFeedbackItems: params["ClickFeedbackItems"]?.map(x => fromClickFeedback(x)),
      RelevanceFeedbackItems: params["RelevanceFeedbackItems"]?.map(x => fromRelevanceFeedback(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SubmitFeedback",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDataSource(
    {abortSignal, ...params}: RequestConfig & s.UpdateDataSourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      IndexId: params["IndexId"],
      Configuration: fromDataSourceConfiguration(params["Configuration"]),
      Description: params["Description"],
      Schedule: params["Schedule"],
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSource",
    });
  }

  async updateIndex(
    {abortSignal, ...params}: RequestConfig & s.UpdateIndexRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      RoleArn: params["RoleArn"],
      Description: params["Description"],
      DocumentMetadataConfigurationUpdates: params["DocumentMetadataConfigurationUpdates"]?.map(x => fromDocumentMetadataConfiguration(x)),
      CapacityUnits: fromCapacityUnitsConfiguration(params["CapacityUnits"]),
      UserTokenConfigurations: params["UserTokenConfigurations"]?.map(x => fromUserTokenConfiguration(x)),
      UserContextPolicy: params["UserContextPolicy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIndex",
    });
  }

  async updateThesaurus(
    {abortSignal, ...params}: RequestConfig & s.UpdateThesaurusRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Id: params["Id"],
      Name: params["Name"],
      IndexId: params["IndexId"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      SourceS3Path: fromS3Path(params["SourceS3Path"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThesaurus",
    });
  }

}

function fromDataSourceSyncJobMetricTarget(input?: s.DataSourceSyncJobMetricTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceId: input["DataSourceId"],
    DataSourceSyncJobId: input["DataSourceSyncJobId"],
  }
}

function fromDocument(input?: s.Document | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Title: input["Title"],
    Blob: jsonP.serializeBlob(input["Blob"]),
    S3Path: fromS3Path(input["S3Path"]),
    Attributes: input["Attributes"]?.map(x => fromDocumentAttribute(x)),
    AccessControlList: input["AccessControlList"]?.map(x => fromPrincipal(x)),
    ContentType: input["ContentType"],
  }
}

function fromS3Path(input?: s.S3Path | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Bucket: input["Bucket"],
    Key: input["Key"],
  }
}
function toS3Path(root: jsonP.JSONValue): s.S3Path {
  return jsonP.readObj({
    required: {
      "Bucket": "s",
      "Key": "s",
    },
    optional: {},
  }, root);
}

function fromDocumentAttribute(input?: s.DocumentAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: fromDocumentAttributeValue(input["Value"]),
  }
}
function toDocumentAttribute(root: jsonP.JSONValue): s.DocumentAttribute {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": toDocumentAttributeValue,
    },
    optional: {},
  }, root);
}

function fromDocumentAttributeValue(input?: s.DocumentAttributeValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StringValue: input["StringValue"],
    StringListValue: input["StringListValue"],
    LongValue: input["LongValue"],
    DateValue: jsonP.serializeDate_unixTimestamp(input["DateValue"]),
  }
}
function toDocumentAttributeValue(root: jsonP.JSONValue): s.DocumentAttributeValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "StringValue": "s",
      "StringListValue": ["s"],
      "LongValue": "n",
      "DateValue": "d",
    },
  }, root);
}

function fromPrincipal(input?: s.Principal | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Type: input["Type"],
    Access: input["Access"],
  }
}

function fromDataSourceConfiguration(input?: s.DataSourceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Configuration: fromS3DataSourceConfiguration(input["S3Configuration"]),
    SharePointConfiguration: fromSharePointConfiguration(input["SharePointConfiguration"]),
    DatabaseConfiguration: fromDatabaseConfiguration(input["DatabaseConfiguration"]),
    SalesforceConfiguration: fromSalesforceConfiguration(input["SalesforceConfiguration"]),
    OneDriveConfiguration: fromOneDriveConfiguration(input["OneDriveConfiguration"]),
    ServiceNowConfiguration: fromServiceNowConfiguration(input["ServiceNowConfiguration"]),
    ConfluenceConfiguration: fromConfluenceConfiguration(input["ConfluenceConfiguration"]),
    GoogleDriveConfiguration: fromGoogleDriveConfiguration(input["GoogleDriveConfiguration"]),
  }
}
function toDataSourceConfiguration(root: jsonP.JSONValue): s.DataSourceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Configuration": toS3DataSourceConfiguration,
      "SharePointConfiguration": toSharePointConfiguration,
      "DatabaseConfiguration": toDatabaseConfiguration,
      "SalesforceConfiguration": toSalesforceConfiguration,
      "OneDriveConfiguration": toOneDriveConfiguration,
      "ServiceNowConfiguration": toServiceNowConfiguration,
      "ConfluenceConfiguration": toConfluenceConfiguration,
      "GoogleDriveConfiguration": toGoogleDriveConfiguration,
    },
  }, root);
}

function fromS3DataSourceConfiguration(input?: s.S3DataSourceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketName: input["BucketName"],
    InclusionPrefixes: input["InclusionPrefixes"],
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    DocumentsMetadataConfiguration: fromDocumentsMetadataConfiguration(input["DocumentsMetadataConfiguration"]),
    AccessControlListConfiguration: fromAccessControlListConfiguration(input["AccessControlListConfiguration"]),
  }
}
function toS3DataSourceConfiguration(root: jsonP.JSONValue): s.S3DataSourceConfiguration {
  return jsonP.readObj({
    required: {
      "BucketName": "s",
    },
    optional: {
      "InclusionPrefixes": ["s"],
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "DocumentsMetadataConfiguration": toDocumentsMetadataConfiguration,
      "AccessControlListConfiguration": toAccessControlListConfiguration,
    },
  }, root);
}

function fromDocumentsMetadataConfiguration(input?: s.DocumentsMetadataConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Prefix: input["S3Prefix"],
  }
}
function toDocumentsMetadataConfiguration(root: jsonP.JSONValue): s.DocumentsMetadataConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Prefix": "s",
    },
  }, root);
}

function fromAccessControlListConfiguration(input?: s.AccessControlListConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KeyPath: input["KeyPath"],
  }
}
function toAccessControlListConfiguration(root: jsonP.JSONValue): s.AccessControlListConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "KeyPath": "s",
    },
  }, root);
}

function fromSharePointConfiguration(input?: s.SharePointConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SharePointVersion: input["SharePointVersion"],
    Urls: input["Urls"],
    SecretArn: input["SecretArn"],
    CrawlAttachments: input["CrawlAttachments"],
    UseChangeLog: input["UseChangeLog"],
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    VpcConfiguration: fromDataSourceVpcConfiguration(input["VpcConfiguration"]),
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    DisableLocalGroups: input["DisableLocalGroups"],
  }
}
function toSharePointConfiguration(root: jsonP.JSONValue): s.SharePointConfiguration {
  return jsonP.readObj({
    required: {
      "SharePointVersion": (x: jsonP.JSONValue) => cmnP.readEnum<s.SharePointVersion>(x),
      "Urls": ["s"],
      "SecretArn": "s",
    },
    optional: {
      "CrawlAttachments": "b",
      "UseChangeLog": "b",
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "VpcConfiguration": toDataSourceVpcConfiguration,
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "DocumentTitleFieldName": "s",
      "DisableLocalGroups": "b",
    },
  }, root);
}

function fromDataSourceVpcConfiguration(input?: s.DataSourceVpcConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIds: input["SubnetIds"],
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}
function toDataSourceVpcConfiguration(root: jsonP.JSONValue): s.DataSourceVpcConfiguration {
  return jsonP.readObj({
    required: {
      "SubnetIds": ["s"],
      "SecurityGroupIds": ["s"],
    },
    optional: {},
  }, root);
}

function fromDataSourceToIndexFieldMapping(input?: s.DataSourceToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toDataSourceToIndexFieldMapping(root: jsonP.JSONValue): s.DataSourceToIndexFieldMapping {
  return jsonP.readObj({
    required: {
      "DataSourceFieldName": "s",
      "IndexFieldName": "s",
    },
    optional: {
      "DateFieldFormat": "s",
    },
  }, root);
}

function fromDatabaseConfiguration(input?: s.DatabaseConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DatabaseEngineType: input["DatabaseEngineType"],
    ConnectionConfiguration: fromConnectionConfiguration(input["ConnectionConfiguration"]),
    VpcConfiguration: fromDataSourceVpcConfiguration(input["VpcConfiguration"]),
    ColumnConfiguration: fromColumnConfiguration(input["ColumnConfiguration"]),
    AclConfiguration: fromAclConfiguration(input["AclConfiguration"]),
    SqlConfiguration: fromSqlConfiguration(input["SqlConfiguration"]),
  }
}
function toDatabaseConfiguration(root: jsonP.JSONValue): s.DatabaseConfiguration {
  return jsonP.readObj({
    required: {
      "DatabaseEngineType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DatabaseEngineType>(x),
      "ConnectionConfiguration": toConnectionConfiguration,
      "ColumnConfiguration": toColumnConfiguration,
    },
    optional: {
      "VpcConfiguration": toDataSourceVpcConfiguration,
      "AclConfiguration": toAclConfiguration,
      "SqlConfiguration": toSqlConfiguration,
    },
  }, root);
}

function fromConnectionConfiguration(input?: s.ConnectionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DatabaseHost: input["DatabaseHost"],
    DatabasePort: input["DatabasePort"],
    DatabaseName: input["DatabaseName"],
    TableName: input["TableName"],
    SecretArn: input["SecretArn"],
  }
}
function toConnectionConfiguration(root: jsonP.JSONValue): s.ConnectionConfiguration {
  return jsonP.readObj({
    required: {
      "DatabaseHost": "s",
      "DatabasePort": "n",
      "DatabaseName": "s",
      "TableName": "s",
      "SecretArn": "s",
    },
    optional: {},
  }, root);
}

function fromColumnConfiguration(input?: s.ColumnConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentIdColumnName: input["DocumentIdColumnName"],
    DocumentDataColumnName: input["DocumentDataColumnName"],
    DocumentTitleColumnName: input["DocumentTitleColumnName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    ChangeDetectingColumns: input["ChangeDetectingColumns"],
  }
}
function toColumnConfiguration(root: jsonP.JSONValue): s.ColumnConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentIdColumnName": "s",
      "DocumentDataColumnName": "s",
      "ChangeDetectingColumns": ["s"],
    },
    optional: {
      "DocumentTitleColumnName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

function fromAclConfiguration(input?: s.AclConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AllowedGroupsColumnName: input["AllowedGroupsColumnName"],
  }
}
function toAclConfiguration(root: jsonP.JSONValue): s.AclConfiguration {
  return jsonP.readObj({
    required: {
      "AllowedGroupsColumnName": "s",
    },
    optional: {},
  }, root);
}

function fromSqlConfiguration(input?: s.SqlConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueryIdentifiersEnclosingOption: input["QueryIdentifiersEnclosingOption"],
  }
}
function toSqlConfiguration(root: jsonP.JSONValue): s.SqlConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "QueryIdentifiersEnclosingOption": (x: jsonP.JSONValue) => cmnP.readEnum<s.QueryIdentifiersEnclosingOption>(x),
    },
  }, root);
}

function fromSalesforceConfiguration(input?: s.SalesforceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ServerUrl: input["ServerUrl"],
    SecretArn: input["SecretArn"],
    StandardObjectConfigurations: input["StandardObjectConfigurations"]?.map(x => fromSalesforceStandardObjectConfiguration(x)),
    KnowledgeArticleConfiguration: fromSalesforceKnowledgeArticleConfiguration(input["KnowledgeArticleConfiguration"]),
    ChatterFeedConfiguration: fromSalesforceChatterFeedConfiguration(input["ChatterFeedConfiguration"]),
    CrawlAttachments: input["CrawlAttachments"],
    StandardObjectAttachmentConfiguration: fromSalesforceStandardObjectAttachmentConfiguration(input["StandardObjectAttachmentConfiguration"]),
    IncludeAttachmentFilePatterns: input["IncludeAttachmentFilePatterns"],
    ExcludeAttachmentFilePatterns: input["ExcludeAttachmentFilePatterns"],
  }
}
function toSalesforceConfiguration(root: jsonP.JSONValue): s.SalesforceConfiguration {
  return jsonP.readObj({
    required: {
      "ServerUrl": "s",
      "SecretArn": "s",
    },
    optional: {
      "StandardObjectConfigurations": [toSalesforceStandardObjectConfiguration],
      "KnowledgeArticleConfiguration": toSalesforceKnowledgeArticleConfiguration,
      "ChatterFeedConfiguration": toSalesforceChatterFeedConfiguration,
      "CrawlAttachments": "b",
      "StandardObjectAttachmentConfiguration": toSalesforceStandardObjectAttachmentConfiguration,
      "IncludeAttachmentFilePatterns": ["s"],
      "ExcludeAttachmentFilePatterns": ["s"],
    },
  }, root);
}

function fromSalesforceStandardObjectConfiguration(input?: s.SalesforceStandardObjectConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceStandardObjectConfiguration(root: jsonP.JSONValue): s.SalesforceStandardObjectConfiguration {
  return jsonP.readObj({
    required: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<s.SalesforceStandardObjectName>(x),
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

function fromSalesforceKnowledgeArticleConfiguration(input?: s.SalesforceKnowledgeArticleConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IncludedStates: input["IncludedStates"],
    StandardKnowledgeArticleTypeConfiguration: fromSalesforceStandardKnowledgeArticleTypeConfiguration(input["StandardKnowledgeArticleTypeConfiguration"]),
    CustomKnowledgeArticleTypeConfigurations: input["CustomKnowledgeArticleTypeConfigurations"]?.map(x => fromSalesforceCustomKnowledgeArticleTypeConfiguration(x)),
  }
}
function toSalesforceKnowledgeArticleConfiguration(root: jsonP.JSONValue): s.SalesforceKnowledgeArticleConfiguration {
  return jsonP.readObj({
    required: {
      "IncludedStates": [(x: jsonP.JSONValue) => cmnP.readEnum<s.SalesforceKnowledgeArticleState>(x)],
    },
    optional: {
      "StandardKnowledgeArticleTypeConfiguration": toSalesforceStandardKnowledgeArticleTypeConfiguration,
      "CustomKnowledgeArticleTypeConfigurations": [toSalesforceCustomKnowledgeArticleTypeConfiguration],
    },
  }, root);
}

function fromSalesforceStandardKnowledgeArticleTypeConfiguration(input?: s.SalesforceStandardKnowledgeArticleTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceStandardKnowledgeArticleTypeConfiguration(root: jsonP.JSONValue): s.SalesforceStandardKnowledgeArticleTypeConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

function fromSalesforceCustomKnowledgeArticleTypeConfiguration(input?: s.SalesforceCustomKnowledgeArticleTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceCustomKnowledgeArticleTypeConfiguration(root: jsonP.JSONValue): s.SalesforceCustomKnowledgeArticleTypeConfiguration {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

function fromSalesforceChatterFeedConfiguration(input?: s.SalesforceChatterFeedConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    IncludeFilterTypes: input["IncludeFilterTypes"],
  }
}
function toSalesforceChatterFeedConfiguration(root: jsonP.JSONValue): s.SalesforceChatterFeedConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "IncludeFilterTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.SalesforceChatterFeedIncludeFilterType>(x)],
    },
  }, root);
}

function fromSalesforceStandardObjectAttachmentConfiguration(input?: s.SalesforceStandardObjectAttachmentConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toSalesforceStandardObjectAttachmentConfiguration(root: jsonP.JSONValue): s.SalesforceStandardObjectAttachmentConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

function fromOneDriveConfiguration(input?: s.OneDriveConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TenantDomain: input["TenantDomain"],
    SecretArn: input["SecretArn"],
    OneDriveUsers: fromOneDriveUsers(input["OneDriveUsers"]),
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    DisableLocalGroups: input["DisableLocalGroups"],
  }
}
function toOneDriveConfiguration(root: jsonP.JSONValue): s.OneDriveConfiguration {
  return jsonP.readObj({
    required: {
      "TenantDomain": "s",
      "SecretArn": "s",
      "OneDriveUsers": toOneDriveUsers,
    },
    optional: {
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "DisableLocalGroups": "b",
    },
  }, root);
}

function fromOneDriveUsers(input?: s.OneDriveUsers | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OneDriveUserList: input["OneDriveUserList"],
    OneDriveUserS3Path: fromS3Path(input["OneDriveUserS3Path"]),
  }
}
function toOneDriveUsers(root: jsonP.JSONValue): s.OneDriveUsers {
  return jsonP.readObj({
    required: {},
    optional: {
      "OneDriveUserList": ["s"],
      "OneDriveUserS3Path": toS3Path,
    },
  }, root);
}

function fromServiceNowConfiguration(input?: s.ServiceNowConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    HostUrl: input["HostUrl"],
    SecretArn: input["SecretArn"],
    ServiceNowBuildVersion: input["ServiceNowBuildVersion"],
    KnowledgeArticleConfiguration: fromServiceNowKnowledgeArticleConfiguration(input["KnowledgeArticleConfiguration"]),
    ServiceCatalogConfiguration: fromServiceNowServiceCatalogConfiguration(input["ServiceCatalogConfiguration"]),
  }
}
function toServiceNowConfiguration(root: jsonP.JSONValue): s.ServiceNowConfiguration {
  return jsonP.readObj({
    required: {
      "HostUrl": "s",
      "SecretArn": "s",
      "ServiceNowBuildVersion": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceNowBuildVersionType>(x),
    },
    optional: {
      "KnowledgeArticleConfiguration": toServiceNowKnowledgeArticleConfiguration,
      "ServiceCatalogConfiguration": toServiceNowServiceCatalogConfiguration,
    },
  }, root);
}

function fromServiceNowKnowledgeArticleConfiguration(input?: s.ServiceNowKnowledgeArticleConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlAttachments: input["CrawlAttachments"],
    IncludeAttachmentFilePatterns: input["IncludeAttachmentFilePatterns"],
    ExcludeAttachmentFilePatterns: input["ExcludeAttachmentFilePatterns"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toServiceNowKnowledgeArticleConfiguration(root: jsonP.JSONValue): s.ServiceNowKnowledgeArticleConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "CrawlAttachments": "b",
      "IncludeAttachmentFilePatterns": ["s"],
      "ExcludeAttachmentFilePatterns": ["s"],
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

function fromServiceNowServiceCatalogConfiguration(input?: s.ServiceNowServiceCatalogConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlAttachments: input["CrawlAttachments"],
    IncludeAttachmentFilePatterns: input["IncludeAttachmentFilePatterns"],
    ExcludeAttachmentFilePatterns: input["ExcludeAttachmentFilePatterns"],
    DocumentDataFieldName: input["DocumentDataFieldName"],
    DocumentTitleFieldName: input["DocumentTitleFieldName"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
  }
}
function toServiceNowServiceCatalogConfiguration(root: jsonP.JSONValue): s.ServiceNowServiceCatalogConfiguration {
  return jsonP.readObj({
    required: {
      "DocumentDataFieldName": "s",
    },
    optional: {
      "CrawlAttachments": "b",
      "IncludeAttachmentFilePatterns": ["s"],
      "ExcludeAttachmentFilePatterns": ["s"],
      "DocumentTitleFieldName": "s",
      "FieldMappings": [toDataSourceToIndexFieldMapping],
    },
  }, root);
}

function fromConfluenceConfiguration(input?: s.ConfluenceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ServerUrl: input["ServerUrl"],
    SecretArn: input["SecretArn"],
    Version: input["Version"],
    SpaceConfiguration: fromConfluenceSpaceConfiguration(input["SpaceConfiguration"]),
    PageConfiguration: fromConfluencePageConfiguration(input["PageConfiguration"]),
    BlogConfiguration: fromConfluenceBlogConfiguration(input["BlogConfiguration"]),
    AttachmentConfiguration: fromConfluenceAttachmentConfiguration(input["AttachmentConfiguration"]),
    VpcConfiguration: fromDataSourceVpcConfiguration(input["VpcConfiguration"]),
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
  }
}
function toConfluenceConfiguration(root: jsonP.JSONValue): s.ConfluenceConfiguration {
  return jsonP.readObj({
    required: {
      "ServerUrl": "s",
      "SecretArn": "s",
      "Version": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfluenceVersion>(x),
    },
    optional: {
      "SpaceConfiguration": toConfluenceSpaceConfiguration,
      "PageConfiguration": toConfluencePageConfiguration,
      "BlogConfiguration": toConfluenceBlogConfiguration,
      "AttachmentConfiguration": toConfluenceAttachmentConfiguration,
      "VpcConfiguration": toDataSourceVpcConfiguration,
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
    },
  }, root);
}

function fromConfluenceSpaceConfiguration(input?: s.ConfluenceSpaceConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlPersonalSpaces: input["CrawlPersonalSpaces"],
    CrawlArchivedSpaces: input["CrawlArchivedSpaces"],
    IncludeSpaces: input["IncludeSpaces"],
    ExcludeSpaces: input["ExcludeSpaces"],
    SpaceFieldMappings: input["SpaceFieldMappings"]?.map(x => fromConfluenceSpaceToIndexFieldMapping(x)),
  }
}
function toConfluenceSpaceConfiguration(root: jsonP.JSONValue): s.ConfluenceSpaceConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "CrawlPersonalSpaces": "b",
      "CrawlArchivedSpaces": "b",
      "IncludeSpaces": ["s"],
      "ExcludeSpaces": ["s"],
      "SpaceFieldMappings": [toConfluenceSpaceToIndexFieldMapping],
    },
  }, root);
}

function fromConfluenceSpaceToIndexFieldMapping(input?: s.ConfluenceSpaceToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluenceSpaceToIndexFieldMapping(root: jsonP.JSONValue): s.ConfluenceSpaceToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfluenceSpaceFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

function fromConfluencePageConfiguration(input?: s.ConfluencePageConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PageFieldMappings: input["PageFieldMappings"]?.map(x => fromConfluencePageToIndexFieldMapping(x)),
  }
}
function toConfluencePageConfiguration(root: jsonP.JSONValue): s.ConfluencePageConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "PageFieldMappings": [toConfluencePageToIndexFieldMapping],
    },
  }, root);
}

function fromConfluencePageToIndexFieldMapping(input?: s.ConfluencePageToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluencePageToIndexFieldMapping(root: jsonP.JSONValue): s.ConfluencePageToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfluencePageFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

function fromConfluenceBlogConfiguration(input?: s.ConfluenceBlogConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BlogFieldMappings: input["BlogFieldMappings"]?.map(x => fromConfluenceBlogToIndexFieldMapping(x)),
  }
}
function toConfluenceBlogConfiguration(root: jsonP.JSONValue): s.ConfluenceBlogConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "BlogFieldMappings": [toConfluenceBlogToIndexFieldMapping],
    },
  }, root);
}

function fromConfluenceBlogToIndexFieldMapping(input?: s.ConfluenceBlogToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluenceBlogToIndexFieldMapping(root: jsonP.JSONValue): s.ConfluenceBlogToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfluenceBlogFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

function fromConfluenceAttachmentConfiguration(input?: s.ConfluenceAttachmentConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CrawlAttachments: input["CrawlAttachments"],
    AttachmentFieldMappings: input["AttachmentFieldMappings"]?.map(x => fromConfluenceAttachmentToIndexFieldMapping(x)),
  }
}
function toConfluenceAttachmentConfiguration(root: jsonP.JSONValue): s.ConfluenceAttachmentConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "CrawlAttachments": "b",
      "AttachmentFieldMappings": [toConfluenceAttachmentToIndexFieldMapping],
    },
  }, root);
}

function fromConfluenceAttachmentToIndexFieldMapping(input?: s.ConfluenceAttachmentToIndexFieldMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSourceFieldName: input["DataSourceFieldName"],
    DateFieldFormat: input["DateFieldFormat"],
    IndexFieldName: input["IndexFieldName"],
  }
}
function toConfluenceAttachmentToIndexFieldMapping(root: jsonP.JSONValue): s.ConfluenceAttachmentToIndexFieldMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSourceFieldName": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfluenceAttachmentFieldName>(x),
      "DateFieldFormat": "s",
      "IndexFieldName": "s",
    },
  }, root);
}

function fromGoogleDriveConfiguration(input?: s.GoogleDriveConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SecretArn: input["SecretArn"],
    InclusionPatterns: input["InclusionPatterns"],
    ExclusionPatterns: input["ExclusionPatterns"],
    FieldMappings: input["FieldMappings"]?.map(x => fromDataSourceToIndexFieldMapping(x)),
    ExcludeMimeTypes: input["ExcludeMimeTypes"],
    ExcludeUserAccounts: input["ExcludeUserAccounts"],
    ExcludeSharedDrives: input["ExcludeSharedDrives"],
  }
}
function toGoogleDriveConfiguration(root: jsonP.JSONValue): s.GoogleDriveConfiguration {
  return jsonP.readObj({
    required: {
      "SecretArn": "s",
    },
    optional: {
      "InclusionPatterns": ["s"],
      "ExclusionPatterns": ["s"],
      "FieldMappings": [toDataSourceToIndexFieldMapping],
      "ExcludeMimeTypes": ["s"],
      "ExcludeUserAccounts": ["s"],
      "ExcludeSharedDrives": ["s"],
    },
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromServerSideEncryptionConfiguration(input?: s.ServerSideEncryptionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KmsKeyId: input["KmsKeyId"],
  }
}
function toServerSideEncryptionConfiguration(root: jsonP.JSONValue): s.ServerSideEncryptionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "KmsKeyId": "s",
    },
  }, root);
}

function fromUserTokenConfiguration(input?: s.UserTokenConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JwtTokenTypeConfiguration: fromJwtTokenTypeConfiguration(input["JwtTokenTypeConfiguration"]),
    JsonTokenTypeConfiguration: fromJsonTokenTypeConfiguration(input["JsonTokenTypeConfiguration"]),
  }
}
function toUserTokenConfiguration(root: jsonP.JSONValue): s.UserTokenConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "JwtTokenTypeConfiguration": toJwtTokenTypeConfiguration,
      "JsonTokenTypeConfiguration": toJsonTokenTypeConfiguration,
    },
  }, root);
}

function fromJwtTokenTypeConfiguration(input?: s.JwtTokenTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KeyLocation: input["KeyLocation"],
    URL: input["URL"],
    SecretManagerArn: input["SecretManagerArn"],
    UserNameAttributeField: input["UserNameAttributeField"],
    GroupAttributeField: input["GroupAttributeField"],
    Issuer: input["Issuer"],
    ClaimRegex: input["ClaimRegex"],
  }
}
function toJwtTokenTypeConfiguration(root: jsonP.JSONValue): s.JwtTokenTypeConfiguration {
  return jsonP.readObj({
    required: {
      "KeyLocation": (x: jsonP.JSONValue) => cmnP.readEnum<s.KeyLocation>(x),
    },
    optional: {
      "URL": "s",
      "SecretManagerArn": "s",
      "UserNameAttributeField": "s",
      "GroupAttributeField": "s",
      "Issuer": "s",
      "ClaimRegex": "s",
    },
  }, root);
}

function fromJsonTokenTypeConfiguration(input?: s.JsonTokenTypeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserNameAttributeField: input["UserNameAttributeField"],
    GroupAttributeField: input["GroupAttributeField"],
  }
}
function toJsonTokenTypeConfiguration(root: jsonP.JSONValue): s.JsonTokenTypeConfiguration {
  return jsonP.readObj({
    required: {
      "UserNameAttributeField": "s",
      "GroupAttributeField": "s",
    },
    optional: {},
  }, root);
}

function fromTimeRange(input?: s.TimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StartTime: jsonP.serializeDate_unixTimestamp(input["StartTime"]),
    EndTime: jsonP.serializeDate_unixTimestamp(input["EndTime"]),
  }
}

function fromAttributeFilter(input?: s.AttributeFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AndAllFilters: input["AndAllFilters"]?.map(x => fromAttributeFilter(x)),
    OrAllFilters: input["OrAllFilters"]?.map(x => fromAttributeFilter(x)),
    NotFilter: fromAttributeFilter(input["NotFilter"]),
    EqualsTo: fromDocumentAttribute(input["EqualsTo"]),
    ContainsAll: fromDocumentAttribute(input["ContainsAll"]),
    ContainsAny: fromDocumentAttribute(input["ContainsAny"]),
    GreaterThan: fromDocumentAttribute(input["GreaterThan"]),
    GreaterThanOrEquals: fromDocumentAttribute(input["GreaterThanOrEquals"]),
    LessThan: fromDocumentAttribute(input["LessThan"]),
    LessThanOrEquals: fromDocumentAttribute(input["LessThanOrEquals"]),
  }
}

function fromFacet(input?: s.Facet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentAttributeKey: input["DocumentAttributeKey"],
  }
}

function fromSortingConfiguration(input?: s.SortingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentAttributeKey: input["DocumentAttributeKey"],
    SortOrder: input["SortOrder"],
  }
}

function fromUserContext(input?: s.UserContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Token: input["Token"],
  }
}

function fromClickFeedback(input?: s.ClickFeedback | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResultId: input["ResultId"],
    ClickTime: jsonP.serializeDate_unixTimestamp(input["ClickTime"]),
  }
}

function fromRelevanceFeedback(input?: s.RelevanceFeedback | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResultId: input["ResultId"],
    RelevanceValue: input["RelevanceValue"],
  }
}

function fromDocumentMetadataConfiguration(input?: s.DocumentMetadataConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Type: input["Type"],
    Relevance: fromRelevance(input["Relevance"]),
    Search: fromSearch(input["Search"]),
  }
}
function toDocumentMetadataConfiguration(root: jsonP.JSONValue): s.DocumentMetadataConfiguration {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.DocumentAttributeValueType>(x),
    },
    optional: {
      "Relevance": toRelevance,
      "Search": toSearch,
    },
  }, root);
}

function fromRelevance(input?: s.Relevance | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Freshness: input["Freshness"],
    Importance: input["Importance"],
    Duration: input["Duration"],
    RankOrder: input["RankOrder"],
    ValueImportanceMap: input["ValueImportanceMap"],
  }
}
function toRelevance(root: jsonP.JSONValue): s.Relevance {
  return jsonP.readObj({
    required: {},
    optional: {
      "Freshness": "b",
      "Importance": "n",
      "Duration": "s",
      "RankOrder": (x: jsonP.JSONValue) => cmnP.readEnum<s.Order>(x),
      "ValueImportanceMap": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

function fromSearch(input?: s.Search | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Facetable: input["Facetable"],
    Searchable: input["Searchable"],
    Displayable: input["Displayable"],
    Sortable: input["Sortable"],
  }
}
function toSearch(root: jsonP.JSONValue): s.Search {
  return jsonP.readObj({
    required: {},
    optional: {
      "Facetable": "b",
      "Searchable": "b",
      "Displayable": "b",
      "Sortable": "b",
    },
  }, root);
}

function fromCapacityUnitsConfiguration(input?: s.CapacityUnitsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StorageCapacityUnits: input["StorageCapacityUnits"],
    QueryCapacityUnits: input["QueryCapacityUnits"],
  }
}
function toCapacityUnitsConfiguration(root: jsonP.JSONValue): s.CapacityUnitsConfiguration {
  return jsonP.readObj({
    required: {
      "StorageCapacityUnits": "n",
      "QueryCapacityUnits": "n",
    },
    optional: {},
  }, root);
}

function toBatchDeleteDocumentResponseFailedDocument(root: jsonP.JSONValue): s.BatchDeleteDocumentResponseFailedDocument {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

function toBatchPutDocumentResponseFailedDocument(root: jsonP.JSONValue): s.BatchPutDocumentResponseFailedDocument {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

function toIndexStatistics(root: jsonP.JSONValue): s.IndexStatistics {
  return jsonP.readObj({
    required: {
      "FaqStatistics": toFaqStatistics,
      "TextDocumentStatistics": toTextDocumentStatistics,
    },
    optional: {},
  }, root);
}

function toFaqStatistics(root: jsonP.JSONValue): s.FaqStatistics {
  return jsonP.readObj({
    required: {
      "IndexedQuestionAnswersCount": "n",
    },
    optional: {},
  }, root);
}

function toTextDocumentStatistics(root: jsonP.JSONValue): s.TextDocumentStatistics {
  return jsonP.readObj({
    required: {
      "IndexedTextDocumentsCount": "n",
      "IndexedTextBytes": "n",
    },
    optional: {},
  }, root);
}

function toDataSourceSyncJob(root: jsonP.JSONValue): s.DataSourceSyncJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExecutionId": "s",
      "StartTime": "d",
      "EndTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceSyncJobStatus>(x),
      "ErrorMessage": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "DataSourceErrorCode": "s",
      "Metrics": toDataSourceSyncJobMetrics,
    },
  }, root);
}

function toDataSourceSyncJobMetrics(root: jsonP.JSONValue): s.DataSourceSyncJobMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentsAdded": "s",
      "DocumentsModified": "s",
      "DocumentsDeleted": "s",
      "DocumentsFailed": "s",
      "DocumentsScanned": "s",
    },
  }, root);
}

function toDataSourceSummary(root: jsonP.JSONValue): s.DataSourceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceType>(x),
      "CreatedAt": "d",
      "UpdatedAt": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceStatus>(x),
    },
  }, root);
}

function toFaqSummary(root: jsonP.JSONValue): s.FaqSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.FaqStatus>(x),
      "CreatedAt": "d",
      "UpdatedAt": "d",
      "FileFormat": (x: jsonP.JSONValue) => cmnP.readEnum<s.FaqFileFormat>(x),
    },
  }, root);
}

function toIndexConfigurationSummary(root: jsonP.JSONValue): s.IndexConfigurationSummary {
  return jsonP.readObj({
    required: {
      "CreatedAt": "d",
      "UpdatedAt": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.IndexStatus>(x),
    },
    optional: {
      "Name": "s",
      "Id": "s",
      "Edition": (x: jsonP.JSONValue) => cmnP.readEnum<s.IndexEdition>(x),
    },
  }, root);
}

function toThesaurusSummary(root: jsonP.JSONValue): s.ThesaurusSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ThesaurusStatus>(x),
      "CreatedAt": "d",
      "UpdatedAt": "d",
    },
  }, root);
}

function toQueryResultItem(root: jsonP.JSONValue): s.QueryResultItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.QueryResultType>(x),
      "AdditionalAttributes": [toAdditionalResultAttribute],
      "DocumentId": "s",
      "DocumentTitle": toTextWithHighlights,
      "DocumentExcerpt": toTextWithHighlights,
      "DocumentURI": "s",
      "DocumentAttributes": [toDocumentAttribute],
      "ScoreAttributes": toScoreAttributes,
      "FeedbackToken": "s",
    },
  }, root);
}

function toAdditionalResultAttribute(root: jsonP.JSONValue): s.AdditionalResultAttribute {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "ValueType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AdditionalResultAttributeValueType>(x),
      "Value": toAdditionalResultAttributeValue,
    },
    optional: {},
  }, root);
}

function toAdditionalResultAttributeValue(root: jsonP.JSONValue): s.AdditionalResultAttributeValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "TextWithHighlightsValue": toTextWithHighlights,
    },
  }, root);
}

function toTextWithHighlights(root: jsonP.JSONValue): s.TextWithHighlights {
  return jsonP.readObj({
    required: {},
    optional: {
      "Text": "s",
      "Highlights": [toHighlight],
    },
  }, root);
}

function toHighlight(root: jsonP.JSONValue): s.Highlight {
  return jsonP.readObj({
    required: {
      "BeginOffset": "n",
      "EndOffset": "n",
    },
    optional: {
      "TopAnswer": "b",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.HighlightType>(x),
    },
  }, root);
}

function toScoreAttributes(root: jsonP.JSONValue): s.ScoreAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "ScoreConfidence": (x: jsonP.JSONValue) => cmnP.readEnum<s.ScoreConfidence>(x),
    },
  }, root);
}

function toFacetResult(root: jsonP.JSONValue): s.FacetResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentAttributeKey": "s",
      "DocumentAttributeValueType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DocumentAttributeValueType>(x),
      "DocumentAttributeValueCountPairs": [toDocumentAttributeValueCountPair],
    },
  }, root);
}

function toDocumentAttributeValueCountPair(root: jsonP.JSONValue): s.DocumentAttributeValueCountPair {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentAttributeValue": toDocumentAttributeValue,
      "Count": "n",
    },
  }, root);
}
