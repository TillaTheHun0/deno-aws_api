// Autogenerated API client for: AWS Direct Connect

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class DirectConnect {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DirectConnect.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2012-10-25",
    "endpointPrefix": "directconnect",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Direct Connect",
    "serviceId": "Direct Connect",
    "signatureVersion": "v4",
    "targetPrefix": "OvertureService",
    "uid": "directconnect-2012-10-25"
  };

  async acceptDirectConnectGatewayAssociationProposal(
    {abortSignal, ...params}: RequestConfig & AcceptDirectConnectGatewayAssociationProposalRequest,
  ): Promise<AcceptDirectConnectGatewayAssociationProposalResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayId: params["directConnectGatewayId"],
      proposalId: params["proposalId"],
      associatedGatewayOwnerAccount: params["associatedGatewayOwnerAccount"],
      overrideAllowedPrefixesToDirectConnectGateway: params["overrideAllowedPrefixesToDirectConnectGateway"]?.map(x => fromRouteFilterPrefix(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptDirectConnectGatewayAssociationProposal",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociation": toDirectConnectGatewayAssociation,
      },
    }, await resp.json());
  }

  async allocateConnectionOnInterconnect(
    {abortSignal, ...params}: RequestConfig & AllocateConnectionOnInterconnectRequest,
  ): Promise<Connection> {
    const body: jsonP.JSONObject = {
      bandwidth: params["bandwidth"],
      connectionName: params["connectionName"],
      ownerAccount: params["ownerAccount"],
      interconnectId: params["interconnectId"],
      vlan: params["vlan"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AllocateConnectionOnInterconnect",
    });
    return toConnection(await resp.json());
  }

  async allocateHostedConnection(
    {abortSignal, ...params}: RequestConfig & AllocateHostedConnectionRequest,
  ): Promise<Connection> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      ownerAccount: params["ownerAccount"],
      bandwidth: params["bandwidth"],
      connectionName: params["connectionName"],
      vlan: params["vlan"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AllocateHostedConnection",
    });
    return toConnection(await resp.json());
  }

  async allocatePrivateVirtualInterface(
    {abortSignal, ...params}: RequestConfig & AllocatePrivateVirtualInterfaceRequest,
  ): Promise<VirtualInterface> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      ownerAccount: params["ownerAccount"],
      newPrivateVirtualInterfaceAllocation: fromNewPrivateVirtualInterfaceAllocation(params["newPrivateVirtualInterfaceAllocation"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AllocatePrivateVirtualInterface",
    });
    return toVirtualInterface(await resp.json());
  }

  async allocatePublicVirtualInterface(
    {abortSignal, ...params}: RequestConfig & AllocatePublicVirtualInterfaceRequest,
  ): Promise<VirtualInterface> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      ownerAccount: params["ownerAccount"],
      newPublicVirtualInterfaceAllocation: fromNewPublicVirtualInterfaceAllocation(params["newPublicVirtualInterfaceAllocation"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AllocatePublicVirtualInterface",
    });
    return toVirtualInterface(await resp.json());
  }

  async allocateTransitVirtualInterface(
    {abortSignal, ...params}: RequestConfig & AllocateTransitVirtualInterfaceRequest,
  ): Promise<AllocateTransitVirtualInterfaceResult> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      ownerAccount: params["ownerAccount"],
      newTransitVirtualInterfaceAllocation: fromNewTransitVirtualInterfaceAllocation(params["newTransitVirtualInterfaceAllocation"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AllocateTransitVirtualInterface",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterface": toVirtualInterface,
      },
    }, await resp.json());
  }

  async associateConnectionWithLag(
    {abortSignal, ...params}: RequestConfig & AssociateConnectionWithLagRequest,
  ): Promise<Connection> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      lagId: params["lagId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateConnectionWithLag",
    });
    return toConnection(await resp.json());
  }

  async associateHostedConnection(
    {abortSignal, ...params}: RequestConfig & AssociateHostedConnectionRequest,
  ): Promise<Connection> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      parentConnectionId: params["parentConnectionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateHostedConnection",
    });
    return toConnection(await resp.json());
  }

  async associateVirtualInterface(
    {abortSignal, ...params}: RequestConfig & AssociateVirtualInterfaceRequest,
  ): Promise<VirtualInterface> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
      connectionId: params["connectionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateVirtualInterface",
    });
    return toVirtualInterface(await resp.json());
  }

  async confirmConnection(
    {abortSignal, ...params}: RequestConfig & ConfirmConnectionRequest,
  ): Promise<ConfirmConnectionResponse> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmConnection",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectionState": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionState>(x),
      },
    }, await resp.json());
  }

  async confirmPrivateVirtualInterface(
    {abortSignal, ...params}: RequestConfig & ConfirmPrivateVirtualInterfaceRequest,
  ): Promise<ConfirmPrivateVirtualInterfaceResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
      virtualGatewayId: params["virtualGatewayId"],
      directConnectGatewayId: params["directConnectGatewayId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmPrivateVirtualInterface",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaceState": (x: jsonP.JSONValue) => cmnP.readEnum<VirtualInterfaceState>(x),
      },
    }, await resp.json());
  }

  async confirmPublicVirtualInterface(
    {abortSignal, ...params}: RequestConfig & ConfirmPublicVirtualInterfaceRequest,
  ): Promise<ConfirmPublicVirtualInterfaceResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmPublicVirtualInterface",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaceState": (x: jsonP.JSONValue) => cmnP.readEnum<VirtualInterfaceState>(x),
      },
    }, await resp.json());
  }

  async confirmTransitVirtualInterface(
    {abortSignal, ...params}: RequestConfig & ConfirmTransitVirtualInterfaceRequest,
  ): Promise<ConfirmTransitVirtualInterfaceResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
      directConnectGatewayId: params["directConnectGatewayId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmTransitVirtualInterface",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaceState": (x: jsonP.JSONValue) => cmnP.readEnum<VirtualInterfaceState>(x),
      },
    }, await resp.json());
  }

  async createBGPPeer(
    {abortSignal, ...params}: RequestConfig & CreateBGPPeerRequest = {},
  ): Promise<CreateBGPPeerResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
      newBGPPeer: fromNewBGPPeer(params["newBGPPeer"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBGPPeer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterface": toVirtualInterface,
      },
    }, await resp.json());
  }

  async createConnection(
    {abortSignal, ...params}: RequestConfig & CreateConnectionRequest,
  ): Promise<Connection> {
    const body: jsonP.JSONObject = {
      location: params["location"],
      bandwidth: params["bandwidth"],
      connectionName: params["connectionName"],
      lagId: params["lagId"],
      tags: params["tags"]?.map(x => fromTag(x)),
      providerName: params["providerName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConnection",
    });
    return toConnection(await resp.json());
  }

  async createDirectConnectGateway(
    {abortSignal, ...params}: RequestConfig & CreateDirectConnectGatewayRequest,
  ): Promise<CreateDirectConnectGatewayResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayName: params["directConnectGatewayName"],
      amazonSideAsn: params["amazonSideAsn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDirectConnectGateway",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGateway": toDirectConnectGateway,
      },
    }, await resp.json());
  }

  async createDirectConnectGatewayAssociation(
    {abortSignal, ...params}: RequestConfig & CreateDirectConnectGatewayAssociationRequest,
  ): Promise<CreateDirectConnectGatewayAssociationResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayId: params["directConnectGatewayId"],
      gatewayId: params["gatewayId"],
      addAllowedPrefixesToDirectConnectGateway: params["addAllowedPrefixesToDirectConnectGateway"]?.map(x => fromRouteFilterPrefix(x)),
      virtualGatewayId: params["virtualGatewayId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDirectConnectGatewayAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociation": toDirectConnectGatewayAssociation,
      },
    }, await resp.json());
  }

  async createDirectConnectGatewayAssociationProposal(
    {abortSignal, ...params}: RequestConfig & CreateDirectConnectGatewayAssociationProposalRequest,
  ): Promise<CreateDirectConnectGatewayAssociationProposalResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayId: params["directConnectGatewayId"],
      directConnectGatewayOwnerAccount: params["directConnectGatewayOwnerAccount"],
      gatewayId: params["gatewayId"],
      addAllowedPrefixesToDirectConnectGateway: params["addAllowedPrefixesToDirectConnectGateway"]?.map(x => fromRouteFilterPrefix(x)),
      removeAllowedPrefixesToDirectConnectGateway: params["removeAllowedPrefixesToDirectConnectGateway"]?.map(x => fromRouteFilterPrefix(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDirectConnectGatewayAssociationProposal",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociationProposal": toDirectConnectGatewayAssociationProposal,
      },
    }, await resp.json());
  }

  async createInterconnect(
    {abortSignal, ...params}: RequestConfig & CreateInterconnectRequest,
  ): Promise<Interconnect> {
    const body: jsonP.JSONObject = {
      interconnectName: params["interconnectName"],
      bandwidth: params["bandwidth"],
      location: params["location"],
      lagId: params["lagId"],
      tags: params["tags"]?.map(x => fromTag(x)),
      providerName: params["providerName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInterconnect",
    });
    return toInterconnect(await resp.json());
  }

  async createLag(
    {abortSignal, ...params}: RequestConfig & CreateLagRequest,
  ): Promise<Lag> {
    const body: jsonP.JSONObject = {
      numberOfConnections: params["numberOfConnections"],
      location: params["location"],
      connectionsBandwidth: params["connectionsBandwidth"],
      lagName: params["lagName"],
      connectionId: params["connectionId"],
      tags: params["tags"]?.map(x => fromTag(x)),
      childConnectionTags: params["childConnectionTags"]?.map(x => fromTag(x)),
      providerName: params["providerName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLag",
    });
    return toLag(await resp.json());
  }

  async createPrivateVirtualInterface(
    {abortSignal, ...params}: RequestConfig & CreatePrivateVirtualInterfaceRequest,
  ): Promise<VirtualInterface> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      newPrivateVirtualInterface: fromNewPrivateVirtualInterface(params["newPrivateVirtualInterface"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePrivateVirtualInterface",
    });
    return toVirtualInterface(await resp.json());
  }

  async createPublicVirtualInterface(
    {abortSignal, ...params}: RequestConfig & CreatePublicVirtualInterfaceRequest,
  ): Promise<VirtualInterface> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      newPublicVirtualInterface: fromNewPublicVirtualInterface(params["newPublicVirtualInterface"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePublicVirtualInterface",
    });
    return toVirtualInterface(await resp.json());
  }

  async createTransitVirtualInterface(
    {abortSignal, ...params}: RequestConfig & CreateTransitVirtualInterfaceRequest,
  ): Promise<CreateTransitVirtualInterfaceResult> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      newTransitVirtualInterface: fromNewTransitVirtualInterface(params["newTransitVirtualInterface"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTransitVirtualInterface",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterface": toVirtualInterface,
      },
    }, await resp.json());
  }

  async deleteBGPPeer(
    {abortSignal, ...params}: RequestConfig & DeleteBGPPeerRequest = {},
  ): Promise<DeleteBGPPeerResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
      asn: params["asn"],
      customerAddress: params["customerAddress"],
      bgpPeerId: params["bgpPeerId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBGPPeer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterface": toVirtualInterface,
      },
    }, await resp.json());
  }

  async deleteConnection(
    {abortSignal, ...params}: RequestConfig & DeleteConnectionRequest,
  ): Promise<Connection> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConnection",
    });
    return toConnection(await resp.json());
  }

  async deleteDirectConnectGateway(
    {abortSignal, ...params}: RequestConfig & DeleteDirectConnectGatewayRequest,
  ): Promise<DeleteDirectConnectGatewayResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayId: params["directConnectGatewayId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDirectConnectGateway",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGateway": toDirectConnectGateway,
      },
    }, await resp.json());
  }

  async deleteDirectConnectGatewayAssociation(
    {abortSignal, ...params}: RequestConfig & DeleteDirectConnectGatewayAssociationRequest = {},
  ): Promise<DeleteDirectConnectGatewayAssociationResult> {
    const body: jsonP.JSONObject = {
      associationId: params["associationId"],
      directConnectGatewayId: params["directConnectGatewayId"],
      virtualGatewayId: params["virtualGatewayId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDirectConnectGatewayAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociation": toDirectConnectGatewayAssociation,
      },
    }, await resp.json());
  }

  async deleteDirectConnectGatewayAssociationProposal(
    {abortSignal, ...params}: RequestConfig & DeleteDirectConnectGatewayAssociationProposalRequest,
  ): Promise<DeleteDirectConnectGatewayAssociationProposalResult> {
    const body: jsonP.JSONObject = {
      proposalId: params["proposalId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDirectConnectGatewayAssociationProposal",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociationProposal": toDirectConnectGatewayAssociationProposal,
      },
    }, await resp.json());
  }

  async deleteInterconnect(
    {abortSignal, ...params}: RequestConfig & DeleteInterconnectRequest,
  ): Promise<DeleteInterconnectResponse> {
    const body: jsonP.JSONObject = {
      interconnectId: params["interconnectId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInterconnect",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "interconnectState": (x: jsonP.JSONValue) => cmnP.readEnum<InterconnectState>(x),
      },
    }, await resp.json());
  }

  async deleteLag(
    {abortSignal, ...params}: RequestConfig & DeleteLagRequest,
  ): Promise<Lag> {
    const body: jsonP.JSONObject = {
      lagId: params["lagId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLag",
    });
    return toLag(await resp.json());
  }

  async deleteVirtualInterface(
    {abortSignal, ...params}: RequestConfig & DeleteVirtualInterfaceRequest,
  ): Promise<DeleteVirtualInterfaceResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteVirtualInterface",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaceState": (x: jsonP.JSONValue) => cmnP.readEnum<VirtualInterfaceState>(x),
      },
    }, await resp.json());
  }

  async describeConnectionLoa(
    {abortSignal, ...params}: RequestConfig & DescribeConnectionLoaRequest,
  ): Promise<DescribeConnectionLoaResponse> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      providerName: params["providerName"],
      loaContentType: params["loaContentType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectionLoa",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "loa": toLoa,
      },
    }, await resp.json());
  }

  async describeConnections(
    {abortSignal, ...params}: RequestConfig & DescribeConnectionsRequest = {},
  ): Promise<Connections> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnections",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connections": [toConnection],
      },
    }, await resp.json());
  }

  async describeConnectionsOnInterconnect(
    {abortSignal, ...params}: RequestConfig & DescribeConnectionsOnInterconnectRequest,
  ): Promise<Connections> {
    const body: jsonP.JSONObject = {
      interconnectId: params["interconnectId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectionsOnInterconnect",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connections": [toConnection],
      },
    }, await resp.json());
  }

  async describeDirectConnectGatewayAssociationProposals(
    {abortSignal, ...params}: RequestConfig & DescribeDirectConnectGatewayAssociationProposalsRequest = {},
  ): Promise<DescribeDirectConnectGatewayAssociationProposalsResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayId: params["directConnectGatewayId"],
      proposalId: params["proposalId"],
      associatedGatewayId: params["associatedGatewayId"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDirectConnectGatewayAssociationProposals",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociationProposals": [toDirectConnectGatewayAssociationProposal],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeDirectConnectGatewayAssociations(
    {abortSignal, ...params}: RequestConfig & DescribeDirectConnectGatewayAssociationsRequest = {},
  ): Promise<DescribeDirectConnectGatewayAssociationsResult> {
    const body: jsonP.JSONObject = {
      associationId: params["associationId"],
      associatedGatewayId: params["associatedGatewayId"],
      directConnectGatewayId: params["directConnectGatewayId"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
      virtualGatewayId: params["virtualGatewayId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDirectConnectGatewayAssociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociations": [toDirectConnectGatewayAssociation],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeDirectConnectGatewayAttachments(
    {abortSignal, ...params}: RequestConfig & DescribeDirectConnectGatewayAttachmentsRequest = {},
  ): Promise<DescribeDirectConnectGatewayAttachmentsResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayId: params["directConnectGatewayId"],
      virtualInterfaceId: params["virtualInterfaceId"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDirectConnectGatewayAttachments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAttachments": [toDirectConnectGatewayAttachment],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeDirectConnectGateways(
    {abortSignal, ...params}: RequestConfig & DescribeDirectConnectGatewaysRequest = {},
  ): Promise<DescribeDirectConnectGatewaysResult> {
    const body: jsonP.JSONObject = {
      directConnectGatewayId: params["directConnectGatewayId"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDirectConnectGateways",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGateways": [toDirectConnectGateway],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeHostedConnections(
    {abortSignal, ...params}: RequestConfig & DescribeHostedConnectionsRequest,
  ): Promise<Connections> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeHostedConnections",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connections": [toConnection],
      },
    }, await resp.json());
  }

  async describeInterconnectLoa(
    {abortSignal, ...params}: RequestConfig & DescribeInterconnectLoaRequest,
  ): Promise<DescribeInterconnectLoaResponse> {
    const body: jsonP.JSONObject = {
      interconnectId: params["interconnectId"],
      providerName: params["providerName"],
      loaContentType: params["loaContentType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInterconnectLoa",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "loa": toLoa,
      },
    }, await resp.json());
  }

  async describeInterconnects(
    {abortSignal, ...params}: RequestConfig & DescribeInterconnectsRequest = {},
  ): Promise<Interconnects> {
    const body: jsonP.JSONObject = {
      interconnectId: params["interconnectId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInterconnects",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "interconnects": [toInterconnect],
      },
    }, await resp.json());
  }

  async describeLags(
    {abortSignal, ...params}: RequestConfig & DescribeLagsRequest = {},
  ): Promise<Lags> {
    const body: jsonP.JSONObject = {
      lagId: params["lagId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "lags": [toLag],
      },
    }, await resp.json());
  }

  async describeLoa(
    {abortSignal, ...params}: RequestConfig & DescribeLoaRequest,
  ): Promise<Loa> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      providerName: params["providerName"],
      loaContentType: params["loaContentType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLoa",
    });
    return toLoa(await resp.json());
  }

  async describeLocations(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<Locations> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeLocations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "locations": [toLocation],
      },
    }, await resp.json());
  }

  async describeTags(
    {abortSignal, ...params}: RequestConfig & DescribeTagsRequest,
  ): Promise<DescribeTagsResponse> {
    const body: jsonP.JSONObject = {
      resourceArns: params["resourceArns"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceTags": [toResourceTag],
      },
    }, await resp.json());
  }

  async describeVirtualGateways(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<VirtualGateways> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeVirtualGateways",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualGateways": [toVirtualGateway],
      },
    }, await resp.json());
  }

  async describeVirtualInterfaces(
    {abortSignal, ...params}: RequestConfig & DescribeVirtualInterfacesRequest = {},
  ): Promise<VirtualInterfaces> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      virtualInterfaceId: params["virtualInterfaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeVirtualInterfaces",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaces": [toVirtualInterface],
      },
    }, await resp.json());
  }

  async disassociateConnectionFromLag(
    {abortSignal, ...params}: RequestConfig & DisassociateConnectionFromLagRequest,
  ): Promise<Connection> {
    const body: jsonP.JSONObject = {
      connectionId: params["connectionId"],
      lagId: params["lagId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateConnectionFromLag",
    });
    return toConnection(await resp.json());
  }

  async listVirtualInterfaceTestHistory(
    {abortSignal, ...params}: RequestConfig & ListVirtualInterfaceTestHistoryRequest = {},
  ): Promise<ListVirtualInterfaceTestHistoryResponse> {
    const body: jsonP.JSONObject = {
      testId: params["testId"],
      virtualInterfaceId: params["virtualInterfaceId"],
      bgpPeers: params["bgpPeers"],
      status: params["status"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListVirtualInterfaceTestHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaceTestHistory": [toVirtualInterfaceTestHistory],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async startBgpFailoverTest(
    {abortSignal, ...params}: RequestConfig & StartBgpFailoverTestRequest,
  ): Promise<StartBgpFailoverTestResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
      bgpPeers: params["bgpPeers"],
      testDurationInMinutes: params["testDurationInMinutes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartBgpFailoverTest",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaceTest": toVirtualInterfaceTestHistory,
      },
    }, await resp.json());
  }

  async stopBgpFailoverTest(
    {abortSignal, ...params}: RequestConfig & StopBgpFailoverTestRequest,
  ): Promise<StopBgpFailoverTestResponse> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopBgpFailoverTest",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "virtualInterfaceTest": toVirtualInterfaceTestHistory,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDirectConnectGatewayAssociation(
    {abortSignal, ...params}: RequestConfig & UpdateDirectConnectGatewayAssociationRequest = {},
  ): Promise<UpdateDirectConnectGatewayAssociationResult> {
    const body: jsonP.JSONObject = {
      associationId: params["associationId"],
      addAllowedPrefixesToDirectConnectGateway: params["addAllowedPrefixesToDirectConnectGateway"]?.map(x => fromRouteFilterPrefix(x)),
      removeAllowedPrefixesToDirectConnectGateway: params["removeAllowedPrefixesToDirectConnectGateway"]?.map(x => fromRouteFilterPrefix(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDirectConnectGatewayAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "directConnectGatewayAssociation": toDirectConnectGatewayAssociation,
      },
    }, await resp.json());
  }

  async updateLag(
    {abortSignal, ...params}: RequestConfig & UpdateLagRequest,
  ): Promise<Lag> {
    const body: jsonP.JSONObject = {
      lagId: params["lagId"],
      lagName: params["lagName"],
      minimumLinks: params["minimumLinks"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLag",
    });
    return toLag(await resp.json());
  }

  async updateVirtualInterfaceAttributes(
    {abortSignal, ...params}: RequestConfig & UpdateVirtualInterfaceAttributesRequest,
  ): Promise<VirtualInterface> {
    const body: jsonP.JSONObject = {
      virtualInterfaceId: params["virtualInterfaceId"],
      mtu: params["mtu"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVirtualInterfaceAttributes",
    });
    return toVirtualInterface(await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcceptDirectConnectGatewayAssociationProposalRequest {
  directConnectGatewayId: string;
  proposalId: string;
  associatedGatewayOwnerAccount: string;
  overrideAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
}

// refs: 1 - tags: named, input
export interface AllocateConnectionOnInterconnectRequest {
  bandwidth: string;
  connectionName: string;
  ownerAccount: string;
  interconnectId: string;
  vlan: number;
}

// refs: 1 - tags: named, input
export interface AllocateHostedConnectionRequest {
  connectionId: string;
  ownerAccount: string;
  bandwidth: string;
  connectionName: string;
  vlan: number;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface AllocatePrivateVirtualInterfaceRequest {
  connectionId: string;
  ownerAccount: string;
  newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation;
}

// refs: 1 - tags: named, input
export interface AllocatePublicVirtualInterfaceRequest {
  connectionId: string;
  ownerAccount: string;
  newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation;
}

// refs: 1 - tags: named, input
export interface AllocateTransitVirtualInterfaceRequest {
  connectionId: string;
  ownerAccount: string;
  newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation;
}

// refs: 1 - tags: named, input
export interface AssociateConnectionWithLagRequest {
  connectionId: string;
  lagId: string;
}

// refs: 1 - tags: named, input
export interface AssociateHostedConnectionRequest {
  connectionId: string;
  parentConnectionId: string;
}

// refs: 1 - tags: named, input
export interface AssociateVirtualInterfaceRequest {
  virtualInterfaceId: string;
  connectionId: string;
}

// refs: 1 - tags: named, input
export interface ConfirmConnectionRequest {
  connectionId: string;
}

// refs: 1 - tags: named, input
export interface ConfirmPrivateVirtualInterfaceRequest {
  virtualInterfaceId: string;
  virtualGatewayId?: string | null;
  directConnectGatewayId?: string | null;
}

// refs: 1 - tags: named, input
export interface ConfirmPublicVirtualInterfaceRequest {
  virtualInterfaceId: string;
}

// refs: 1 - tags: named, input
export interface ConfirmTransitVirtualInterfaceRequest {
  virtualInterfaceId: string;
  directConnectGatewayId: string;
}

// refs: 1 - tags: named, input
export interface CreateBGPPeerRequest {
  virtualInterfaceId?: string | null;
  newBGPPeer?: NewBGPPeer | null;
}

// refs: 1 - tags: named, input
export interface CreateConnectionRequest {
  location: string;
  bandwidth: string;
  connectionName: string;
  lagId?: string | null;
  tags?: Tag[] | null;
  providerName?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDirectConnectGatewayRequest {
  directConnectGatewayName: string;
  amazonSideAsn?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateDirectConnectGatewayAssociationRequest {
  directConnectGatewayId: string;
  gatewayId?: string | null;
  addAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
  virtualGatewayId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDirectConnectGatewayAssociationProposalRequest {
  directConnectGatewayId: string;
  directConnectGatewayOwnerAccount: string;
  gatewayId: string;
  addAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
  removeAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
}

// refs: 1 - tags: named, input
export interface CreateInterconnectRequest {
  interconnectName: string;
  bandwidth: string;
  location: string;
  lagId?: string | null;
  tags?: Tag[] | null;
  providerName?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateLagRequest {
  numberOfConnections: number;
  location: string;
  connectionsBandwidth: string;
  lagName: string;
  connectionId?: string | null;
  tags?: Tag[] | null;
  childConnectionTags?: Tag[] | null;
  providerName?: string | null;
}

// refs: 1 - tags: named, input
export interface CreatePrivateVirtualInterfaceRequest {
  connectionId: string;
  newPrivateVirtualInterface: NewPrivateVirtualInterface;
}

// refs: 1 - tags: named, input
export interface CreatePublicVirtualInterfaceRequest {
  connectionId: string;
  newPublicVirtualInterface: NewPublicVirtualInterface;
}

// refs: 1 - tags: named, input
export interface CreateTransitVirtualInterfaceRequest {
  connectionId: string;
  newTransitVirtualInterface: NewTransitVirtualInterface;
}

// refs: 1 - tags: named, input
export interface DeleteBGPPeerRequest {
  virtualInterfaceId?: string | null;
  asn?: number | null;
  customerAddress?: string | null;
  bgpPeerId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteConnectionRequest {
  connectionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDirectConnectGatewayRequest {
  directConnectGatewayId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDirectConnectGatewayAssociationRequest {
  associationId?: string | null;
  directConnectGatewayId?: string | null;
  virtualGatewayId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDirectConnectGatewayAssociationProposalRequest {
  proposalId: string;
}

// refs: 1 - tags: named, input
export interface DeleteInterconnectRequest {
  interconnectId: string;
}

// refs: 1 - tags: named, input
export interface DeleteLagRequest {
  lagId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVirtualInterfaceRequest {
  virtualInterfaceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeConnectionLoaRequest {
  connectionId: string;
  providerName?: string | null;
  loaContentType?: LoaContentType | null;
}

// refs: 1 - tags: named, input
export interface DescribeConnectionsRequest {
  connectionId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConnectionsOnInterconnectRequest {
  interconnectId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDirectConnectGatewayAssociationProposalsRequest {
  directConnectGatewayId?: string | null;
  proposalId?: string | null;
  associatedGatewayId?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDirectConnectGatewayAssociationsRequest {
  associationId?: string | null;
  associatedGatewayId?: string | null;
  directConnectGatewayId?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
  virtualGatewayId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDirectConnectGatewayAttachmentsRequest {
  directConnectGatewayId?: string | null;
  virtualInterfaceId?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDirectConnectGatewaysRequest {
  directConnectGatewayId?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeHostedConnectionsRequest {
  connectionId: string;
}

// refs: 1 - tags: named, input
export interface DescribeInterconnectLoaRequest {
  interconnectId: string;
  providerName?: string | null;
  loaContentType?: LoaContentType | null;
}

// refs: 1 - tags: named, input
export interface DescribeInterconnectsRequest {
  interconnectId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeLagsRequest {
  lagId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeLoaRequest {
  connectionId: string;
  providerName?: string | null;
  loaContentType?: LoaContentType | null;
}

// refs: 1 - tags: named, input
export interface DescribeTagsRequest {
  resourceArns: string[];
}

// refs: 1 - tags: named, input
export interface DescribeVirtualInterfacesRequest {
  connectionId?: string | null;
  virtualInterfaceId?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateConnectionFromLagRequest {
  connectionId: string;
  lagId: string;
}

// refs: 1 - tags: named, input
export interface ListVirtualInterfaceTestHistoryRequest {
  testId?: string | null;
  virtualInterfaceId?: string | null;
  bgpPeers?: string[] | null;
  status?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StartBgpFailoverTestRequest {
  virtualInterfaceId: string;
  bgpPeers?: string[] | null;
  testDurationInMinutes?: number | null;
}

// refs: 1 - tags: named, input
export interface StopBgpFailoverTestRequest {
  virtualInterfaceId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDirectConnectGatewayAssociationRequest {
  associationId?: string | null;
  addAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
  removeAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateLagRequest {
  lagId: string;
  lagName?: string | null;
  minimumLinks?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateVirtualInterfaceAttributesRequest {
  virtualInterfaceId: string;
  mtu?: number | null;
}

// refs: 1 - tags: named, output
export interface AcceptDirectConnectGatewayAssociationProposalResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation | null;
}

// refs: 4 - tags: named, output, interface
export interface Connection {
  ownerAccount?: string | null;
  connectionId?: string | null;
  connectionName?: string | null;
  connectionState?: ConnectionState | null;
  region?: string | null;
  location?: string | null;
  bandwidth?: string | null;
  vlan?: number | null;
  partnerName?: string | null;
  loaIssueTime?: Date | number | null;
  lagId?: string | null;
  awsDevice?: string | null;
  jumboFrameCapable?: boolean | null;
  awsDeviceV2?: string | null;
  hasLogicalRedundancy?: HasLogicalRedundancy | null;
  tags?: Tag[] | null;
  providerName?: string | null;
}
function toConnection(root: jsonP.JSONValue): Connection {
  return jsonP.readObj({
    required: {},
    optional: {
      "ownerAccount": "s",
      "connectionId": "s",
      "connectionName": "s",
      "connectionState": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionState>(x),
      "region": "s",
      "location": "s",
      "bandwidth": "s",
      "vlan": "n",
      "partnerName": "s",
      "loaIssueTime": "d",
      "lagId": "s",
      "awsDevice": "s",
      "jumboFrameCapable": "b",
      "awsDeviceV2": "s",
      "hasLogicalRedundancy": (x: jsonP.JSONValue) => cmnP.readEnum<HasLogicalRedundancy>(x),
      "tags": [toTag],
      "providerName": "s",
    },
  }, root);
}

// refs: 6 - tags: named, output, interface
export interface VirtualInterface {
  ownerAccount?: string | null;
  virtualInterfaceId?: string | null;
  location?: string | null;
  connectionId?: string | null;
  virtualInterfaceType?: string | null;
  virtualInterfaceName?: string | null;
  vlan?: number | null;
  asn?: number | null;
  amazonSideAsn?: number | null;
  authKey?: string | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
  addressFamily?: AddressFamily | null;
  virtualInterfaceState?: VirtualInterfaceState | null;
  customerRouterConfig?: string | null;
  mtu?: number | null;
  jumboFrameCapable?: boolean | null;
  virtualGatewayId?: string | null;
  directConnectGatewayId?: string | null;
  routeFilterPrefixes?: RouteFilterPrefix[] | null;
  bgpPeers?: BGPPeer[] | null;
  region?: string | null;
  awsDeviceV2?: string | null;
  tags?: Tag[] | null;
}
function toVirtualInterface(root: jsonP.JSONValue): VirtualInterface {
  return jsonP.readObj({
    required: {},
    optional: {
      "ownerAccount": "s",
      "virtualInterfaceId": "s",
      "location": "s",
      "connectionId": "s",
      "virtualInterfaceType": "s",
      "virtualInterfaceName": "s",
      "vlan": "n",
      "asn": "n",
      "amazonSideAsn": "n",
      "authKey": "s",
      "amazonAddress": "s",
      "customerAddress": "s",
      "addressFamily": (x: jsonP.JSONValue) => cmnP.readEnum<AddressFamily>(x),
      "virtualInterfaceState": (x: jsonP.JSONValue) => cmnP.readEnum<VirtualInterfaceState>(x),
      "customerRouterConfig": "s",
      "mtu": "n",
      "jumboFrameCapable": "b",
      "virtualGatewayId": "s",
      "directConnectGatewayId": "s",
      "routeFilterPrefixes": [toRouteFilterPrefix],
      "bgpPeers": [toBGPPeer],
      "region": "s",
      "awsDeviceV2": "s",
      "tags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface AllocateTransitVirtualInterfaceResult {
  virtualInterface?: VirtualInterface | null;
}

// refs: 1 - tags: named, output
export interface ConfirmConnectionResponse {
  connectionState?: ConnectionState | null;
}

// refs: 1 - tags: named, output
export interface ConfirmPrivateVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState | null;
}

// refs: 1 - tags: named, output
export interface ConfirmPublicVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState | null;
}

// refs: 1 - tags: named, output
export interface ConfirmTransitVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState | null;
}

// refs: 1 - tags: named, output
export interface CreateBGPPeerResponse {
  virtualInterface?: VirtualInterface | null;
}

// refs: 1 - tags: named, output
export interface CreateDirectConnectGatewayResult {
  directConnectGateway?: DirectConnectGateway | null;
}

// refs: 1 - tags: named, output
export interface CreateDirectConnectGatewayAssociationResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation | null;
}

// refs: 1 - tags: named, output
export interface CreateDirectConnectGatewayAssociationProposalResult {
  directConnectGatewayAssociationProposal?: DirectConnectGatewayAssociationProposal | null;
}

// refs: 2 - tags: named, output, interface
export interface Interconnect {
  interconnectId?: string | null;
  interconnectName?: string | null;
  interconnectState?: InterconnectState | null;
  region?: string | null;
  location?: string | null;
  bandwidth?: string | null;
  loaIssueTime?: Date | number | null;
  lagId?: string | null;
  awsDevice?: string | null;
  jumboFrameCapable?: boolean | null;
  awsDeviceV2?: string | null;
  hasLogicalRedundancy?: HasLogicalRedundancy | null;
  tags?: Tag[] | null;
  providerName?: string | null;
}
function toInterconnect(root: jsonP.JSONValue): Interconnect {
  return jsonP.readObj({
    required: {},
    optional: {
      "interconnectId": "s",
      "interconnectName": "s",
      "interconnectState": (x: jsonP.JSONValue) => cmnP.readEnum<InterconnectState>(x),
      "region": "s",
      "location": "s",
      "bandwidth": "s",
      "loaIssueTime": "d",
      "lagId": "s",
      "awsDevice": "s",
      "jumboFrameCapable": "b",
      "awsDeviceV2": "s",
      "hasLogicalRedundancy": (x: jsonP.JSONValue) => cmnP.readEnum<HasLogicalRedundancy>(x),
      "tags": [toTag],
      "providerName": "s",
    },
  }, root);
}

// refs: 2 - tags: named, output, interface
export interface Lag {
  connectionsBandwidth?: string | null;
  numberOfConnections?: number | null;
  lagId?: string | null;
  ownerAccount?: string | null;
  lagName?: string | null;
  lagState?: LagState | null;
  location?: string | null;
  region?: string | null;
  minimumLinks?: number | null;
  awsDevice?: string | null;
  awsDeviceV2?: string | null;
  connections?: Connection[] | null;
  allowsHostedConnections?: boolean | null;
  jumboFrameCapable?: boolean | null;
  hasLogicalRedundancy?: HasLogicalRedundancy | null;
  tags?: Tag[] | null;
  providerName?: string | null;
}
function toLag(root: jsonP.JSONValue): Lag {
  return jsonP.readObj({
    required: {},
    optional: {
      "connectionsBandwidth": "s",
      "numberOfConnections": "n",
      "lagId": "s",
      "ownerAccount": "s",
      "lagName": "s",
      "lagState": (x: jsonP.JSONValue) => cmnP.readEnum<LagState>(x),
      "location": "s",
      "region": "s",
      "minimumLinks": "n",
      "awsDevice": "s",
      "awsDeviceV2": "s",
      "connections": [toConnection],
      "allowsHostedConnections": "b",
      "jumboFrameCapable": "b",
      "hasLogicalRedundancy": (x: jsonP.JSONValue) => cmnP.readEnum<HasLogicalRedundancy>(x),
      "tags": [toTag],
      "providerName": "s",
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface CreateTransitVirtualInterfaceResult {
  virtualInterface?: VirtualInterface | null;
}

// refs: 1 - tags: named, output
export interface DeleteBGPPeerResponse {
  virtualInterface?: VirtualInterface | null;
}

// refs: 1 - tags: named, output
export interface DeleteDirectConnectGatewayResult {
  directConnectGateway?: DirectConnectGateway | null;
}

// refs: 1 - tags: named, output
export interface DeleteDirectConnectGatewayAssociationResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation | null;
}

// refs: 1 - tags: named, output
export interface DeleteDirectConnectGatewayAssociationProposalResult {
  directConnectGatewayAssociationProposal?: DirectConnectGatewayAssociationProposal | null;
}

// refs: 1 - tags: named, output
export interface DeleteInterconnectResponse {
  interconnectState?: InterconnectState | null;
}

// refs: 1 - tags: named, output
export interface DeleteVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState | null;
}

// refs: 1 - tags: named, output
export interface DescribeConnectionLoaResponse {
  loa?: Loa | null;
}

// refs: 1 - tags: named, output
export interface Connections {
  connections?: Connection[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeDirectConnectGatewayAssociationProposalsResult {
  directConnectGatewayAssociationProposals?: DirectConnectGatewayAssociationProposal[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDirectConnectGatewayAssociationsResult {
  directConnectGatewayAssociations?: DirectConnectGatewayAssociation[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDirectConnectGatewayAttachmentsResult {
  directConnectGatewayAttachments?: DirectConnectGatewayAttachment[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDirectConnectGatewaysResult {
  directConnectGateways?: DirectConnectGateway[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInterconnectLoaResponse {
  loa?: Loa | null;
}

// refs: 1 - tags: named, output
export interface Interconnects {
  interconnects?: Interconnect[] | null;
}

// refs: 1 - tags: named, output
export interface Lags {
  lags?: Lag[] | null;
}

// refs: 3 - tags: output, named, interface
export interface Loa {
  loaContent?: Uint8Array | string | null;
  loaContentType?: LoaContentType | null;
}
function toLoa(root: jsonP.JSONValue): Loa {
  return jsonP.readObj({
    required: {},
    optional: {
      "loaContent": "a",
      "loaContentType": (x: jsonP.JSONValue) => cmnP.readEnum<LoaContentType>(x),
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface Locations {
  locations?: Location[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeTagsResponse {
  resourceTags?: ResourceTag[] | null;
}

// refs: 1 - tags: named, output
export interface VirtualGateways {
  virtualGateways?: VirtualGateway[] | null;
}

// refs: 1 - tags: named, output
export interface VirtualInterfaces {
  virtualInterfaces?: VirtualInterface[] | null;
}

// refs: 1 - tags: named, output
export interface ListVirtualInterfaceTestHistoryResponse {
  virtualInterfaceTestHistory?: VirtualInterfaceTestHistory[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartBgpFailoverTestResponse {
  virtualInterfaceTest?: VirtualInterfaceTestHistory | null;
}

// refs: 1 - tags: named, output
export interface StopBgpFailoverTestResponse {
  virtualInterfaceTest?: VirtualInterfaceTestHistory | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDirectConnectGatewayAssociationResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation | null;
}

// refs: 25 - tags: input, named, interface, output
export interface RouteFilterPrefix {
  cidr?: string | null;
}
function fromRouteFilterPrefix(input?: RouteFilterPrefix | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cidr: input["cidr"],
  }
}
function toRouteFilterPrefix(root: jsonP.JSONValue): RouteFilterPrefix {
  return jsonP.readObj({
    required: {},
    optional: {
      "cidr": "s",
    },
  }, root);
}

// refs: 27 - tags: input, named, interface, output
export interface Tag {
  key: string;
  value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "key": "s",
    },
    optional: {
      "value": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface NewPrivateVirtualInterfaceAllocation {
  virtualInterfaceName: string;
  vlan: number;
  asn: number;
  mtu?: number | null;
  authKey?: string | null;
  amazonAddress?: string | null;
  addressFamily?: AddressFamily | null;
  customerAddress?: string | null;
  tags?: Tag[] | null;
}
function fromNewPrivateVirtualInterfaceAllocation(input?: NewPrivateVirtualInterfaceAllocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    virtualInterfaceName: input["virtualInterfaceName"],
    vlan: input["vlan"],
    asn: input["asn"],
    mtu: input["mtu"],
    authKey: input["authKey"],
    amazonAddress: input["amazonAddress"],
    addressFamily: input["addressFamily"],
    customerAddress: input["customerAddress"],
    tags: input["tags"]?.map(x => fromTag(x)),
  }
}

// refs: 19 - tags: input, named, enum, output
export type AddressFamily =
| "ipv4"
| "ipv6"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface NewPublicVirtualInterfaceAllocation {
  virtualInterfaceName: string;
  vlan: number;
  asn: number;
  authKey?: string | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
  addressFamily?: AddressFamily | null;
  routeFilterPrefixes?: RouteFilterPrefix[] | null;
  tags?: Tag[] | null;
}
function fromNewPublicVirtualInterfaceAllocation(input?: NewPublicVirtualInterfaceAllocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    virtualInterfaceName: input["virtualInterfaceName"],
    vlan: input["vlan"],
    asn: input["asn"],
    authKey: input["authKey"],
    amazonAddress: input["amazonAddress"],
    customerAddress: input["customerAddress"],
    addressFamily: input["addressFamily"],
    routeFilterPrefixes: input["routeFilterPrefixes"]?.map(x => fromRouteFilterPrefix(x)),
    tags: input["tags"]?.map(x => fromTag(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface NewTransitVirtualInterfaceAllocation {
  virtualInterfaceName?: string | null;
  vlan?: number | null;
  asn?: number | null;
  mtu?: number | null;
  authKey?: string | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
  addressFamily?: AddressFamily | null;
  tags?: Tag[] | null;
}
function fromNewTransitVirtualInterfaceAllocation(input?: NewTransitVirtualInterfaceAllocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    virtualInterfaceName: input["virtualInterfaceName"],
    vlan: input["vlan"],
    asn: input["asn"],
    mtu: input["mtu"],
    authKey: input["authKey"],
    amazonAddress: input["amazonAddress"],
    customerAddress: input["customerAddress"],
    addressFamily: input["addressFamily"],
    tags: input["tags"]?.map(x => fromTag(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface NewBGPPeer {
  asn?: number | null;
  authKey?: string | null;
  addressFamily?: AddressFamily | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
}
function fromNewBGPPeer(input?: NewBGPPeer | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    asn: input["asn"],
    authKey: input["authKey"],
    addressFamily: input["addressFamily"],
    amazonAddress: input["amazonAddress"],
    customerAddress: input["customerAddress"],
  }
}

// refs: 1 - tags: input, named, interface
export interface NewPrivateVirtualInterface {
  virtualInterfaceName: string;
  vlan: number;
  asn: number;
  mtu?: number | null;
  authKey?: string | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
  addressFamily?: AddressFamily | null;
  virtualGatewayId?: string | null;
  directConnectGatewayId?: string | null;
  tags?: Tag[] | null;
}
function fromNewPrivateVirtualInterface(input?: NewPrivateVirtualInterface | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    virtualInterfaceName: input["virtualInterfaceName"],
    vlan: input["vlan"],
    asn: input["asn"],
    mtu: input["mtu"],
    authKey: input["authKey"],
    amazonAddress: input["amazonAddress"],
    customerAddress: input["customerAddress"],
    addressFamily: input["addressFamily"],
    virtualGatewayId: input["virtualGatewayId"],
    directConnectGatewayId: input["directConnectGatewayId"],
    tags: input["tags"]?.map(x => fromTag(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface NewPublicVirtualInterface {
  virtualInterfaceName: string;
  vlan: number;
  asn: number;
  authKey?: string | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
  addressFamily?: AddressFamily | null;
  routeFilterPrefixes?: RouteFilterPrefix[] | null;
  tags?: Tag[] | null;
}
function fromNewPublicVirtualInterface(input?: NewPublicVirtualInterface | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    virtualInterfaceName: input["virtualInterfaceName"],
    vlan: input["vlan"],
    asn: input["asn"],
    authKey: input["authKey"],
    amazonAddress: input["amazonAddress"],
    customerAddress: input["customerAddress"],
    addressFamily: input["addressFamily"],
    routeFilterPrefixes: input["routeFilterPrefixes"]?.map(x => fromRouteFilterPrefix(x)),
    tags: input["tags"]?.map(x => fromTag(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface NewTransitVirtualInterface {
  virtualInterfaceName?: string | null;
  vlan?: number | null;
  asn?: number | null;
  mtu?: number | null;
  authKey?: string | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
  addressFamily?: AddressFamily | null;
  directConnectGatewayId?: string | null;
  tags?: Tag[] | null;
}
function fromNewTransitVirtualInterface(input?: NewTransitVirtualInterface | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    virtualInterfaceName: input["virtualInterfaceName"],
    vlan: input["vlan"],
    asn: input["asn"],
    mtu: input["mtu"],
    authKey: input["authKey"],
    amazonAddress: input["amazonAddress"],
    customerAddress: input["customerAddress"],
    addressFamily: input["addressFamily"],
    directConnectGatewayId: input["directConnectGatewayId"],
    tags: input["tags"]?.map(x => fromTag(x)),
  }
}

// refs: 6 - tags: input, named, enum, output
export type LoaContentType =
| "application/pdf"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface DirectConnectGatewayAssociation {
  directConnectGatewayId?: string | null;
  directConnectGatewayOwnerAccount?: string | null;
  associationState?: DirectConnectGatewayAssociationState | null;
  stateChangeError?: string | null;
  associatedGateway?: AssociatedGateway | null;
  associationId?: string | null;
  allowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
  virtualGatewayId?: string | null;
  virtualGatewayRegion?: string | null;
  virtualGatewayOwnerAccount?: string | null;
}
function toDirectConnectGatewayAssociation(root: jsonP.JSONValue): DirectConnectGatewayAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "directConnectGatewayId": "s",
      "directConnectGatewayOwnerAccount": "s",
      "associationState": (x: jsonP.JSONValue) => cmnP.readEnum<DirectConnectGatewayAssociationState>(x),
      "stateChangeError": "s",
      "associatedGateway": toAssociatedGateway,
      "associationId": "s",
      "allowedPrefixesToDirectConnectGateway": [toRouteFilterPrefix],
      "virtualGatewayId": "s",
      "virtualGatewayRegion": "s",
      "virtualGatewayOwnerAccount": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type DirectConnectGatewayAssociationState =
| "associating"
| "associated"
| "disassociating"
| "disassociated"
| "updating"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: output, named, interface
export interface AssociatedGateway {
  id?: string | null;
  type?: GatewayType | null;
  ownerAccount?: string | null;
  region?: string | null;
}
function toAssociatedGateway(root: jsonP.JSONValue): AssociatedGateway {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<GatewayType>(x),
      "ownerAccount": "s",
      "region": "s",
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type GatewayType =
| "virtualPrivateGateway"
| "transitGateway"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type ConnectionState =
| "ordering"
| "requested"
| "pending"
| "available"
| "down"
| "deleting"
| "deleted"
| "rejected"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: output, named, enum
export type HasLogicalRedundancy =
| "unknown"
| "yes"
| "no"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: output, named, enum
export type VirtualInterfaceState =
| "confirming"
| "verifying"
| "pending"
| "available"
| "down"
| "deleting"
| "deleted"
| "rejected"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface BGPPeer {
  bgpPeerId?: string | null;
  asn?: number | null;
  authKey?: string | null;
  addressFamily?: AddressFamily | null;
  amazonAddress?: string | null;
  customerAddress?: string | null;
  bgpPeerState?: BGPPeerState | null;
  bgpStatus?: BGPStatus | null;
  awsDeviceV2?: string | null;
}
function toBGPPeer(root: jsonP.JSONValue): BGPPeer {
  return jsonP.readObj({
    required: {},
    optional: {
      "bgpPeerId": "s",
      "asn": "n",
      "authKey": "s",
      "addressFamily": (x: jsonP.JSONValue) => cmnP.readEnum<AddressFamily>(x),
      "amazonAddress": "s",
      "customerAddress": "s",
      "bgpPeerState": (x: jsonP.JSONValue) => cmnP.readEnum<BGPPeerState>(x),
      "bgpStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BGPStatus>(x),
      "awsDeviceV2": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type BGPPeerState =
| "verifying"
| "pending"
| "available"
| "deleting"
| "deleted"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type BGPStatus =
| "up"
| "down"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface DirectConnectGateway {
  directConnectGatewayId?: string | null;
  directConnectGatewayName?: string | null;
  amazonSideAsn?: number | null;
  ownerAccount?: string | null;
  directConnectGatewayState?: DirectConnectGatewayState | null;
  stateChangeError?: string | null;
}
function toDirectConnectGateway(root: jsonP.JSONValue): DirectConnectGateway {
  return jsonP.readObj({
    required: {},
    optional: {
      "directConnectGatewayId": "s",
      "directConnectGatewayName": "s",
      "amazonSideAsn": "n",
      "ownerAccount": "s",
      "directConnectGatewayState": (x: jsonP.JSONValue) => cmnP.readEnum<DirectConnectGatewayState>(x),
      "stateChangeError": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type DirectConnectGatewayState =
| "pending"
| "available"
| "deleting"
| "deleted"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface DirectConnectGatewayAssociationProposal {
  proposalId?: string | null;
  directConnectGatewayId?: string | null;
  directConnectGatewayOwnerAccount?: string | null;
  proposalState?: DirectConnectGatewayAssociationProposalState | null;
  associatedGateway?: AssociatedGateway | null;
  existingAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
  requestedAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[] | null;
}
function toDirectConnectGatewayAssociationProposal(root: jsonP.JSONValue): DirectConnectGatewayAssociationProposal {
  return jsonP.readObj({
    required: {},
    optional: {
      "proposalId": "s",
      "directConnectGatewayId": "s",
      "directConnectGatewayOwnerAccount": "s",
      "proposalState": (x: jsonP.JSONValue) => cmnP.readEnum<DirectConnectGatewayAssociationProposalState>(x),
      "associatedGateway": toAssociatedGateway,
      "existingAllowedPrefixesToDirectConnectGateway": [toRouteFilterPrefix],
      "requestedAllowedPrefixesToDirectConnectGateway": [toRouteFilterPrefix],
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type DirectConnectGatewayAssociationProposalState =
| "requested"
| "accepted"
| "deleted"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type InterconnectState =
| "requested"
| "pending"
| "available"
| "down"
| "deleting"
| "deleted"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type LagState =
| "requested"
| "pending"
| "available"
| "down"
| "deleting"
| "deleted"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DirectConnectGatewayAttachment {
  directConnectGatewayId?: string | null;
  virtualInterfaceId?: string | null;
  virtualInterfaceRegion?: string | null;
  virtualInterfaceOwnerAccount?: string | null;
  attachmentState?: DirectConnectGatewayAttachmentState | null;
  attachmentType?: DirectConnectGatewayAttachmentType | null;
  stateChangeError?: string | null;
}
function toDirectConnectGatewayAttachment(root: jsonP.JSONValue): DirectConnectGatewayAttachment {
  return jsonP.readObj({
    required: {},
    optional: {
      "directConnectGatewayId": "s",
      "virtualInterfaceId": "s",
      "virtualInterfaceRegion": "s",
      "virtualInterfaceOwnerAccount": "s",
      "attachmentState": (x: jsonP.JSONValue) => cmnP.readEnum<DirectConnectGatewayAttachmentState>(x),
      "attachmentType": (x: jsonP.JSONValue) => cmnP.readEnum<DirectConnectGatewayAttachmentType>(x),
      "stateChangeError": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DirectConnectGatewayAttachmentState =
| "attaching"
| "attached"
| "detaching"
| "detached"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type DirectConnectGatewayAttachmentType =
| "TransitVirtualInterface"
| "PrivateVirtualInterface"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Location {
  locationCode?: string | null;
  locationName?: string | null;
  region?: string | null;
  availablePortSpeeds?: string[] | null;
  availableProviders?: string[] | null;
}
function toLocation(root: jsonP.JSONValue): Location {
  return jsonP.readObj({
    required: {},
    optional: {
      "locationCode": "s",
      "locationName": "s",
      "region": "s",
      "availablePortSpeeds": ["s"],
      "availableProviders": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceTag {
  resourceArn?: string | null;
  tags?: Tag[] | null;
}
function toResourceTag(root: jsonP.JSONValue): ResourceTag {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceArn": "s",
      "tags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VirtualGateway {
  virtualGatewayId?: string | null;
  virtualGatewayState?: string | null;
}
function toVirtualGateway(root: jsonP.JSONValue): VirtualGateway {
  return jsonP.readObj({
    required: {},
    optional: {
      "virtualGatewayId": "s",
      "virtualGatewayState": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface VirtualInterfaceTestHistory {
  testId?: string | null;
  virtualInterfaceId?: string | null;
  bgpPeers?: string[] | null;
  status?: string | null;
  ownerAccount?: string | null;
  testDurationInMinutes?: number | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
}
function toVirtualInterfaceTestHistory(root: jsonP.JSONValue): VirtualInterfaceTestHistory {
  return jsonP.readObj({
    required: {},
    optional: {
      "testId": "s",
      "virtualInterfaceId": "s",
      "bgpPeers": ["s"],
      "status": "s",
      "ownerAccount": "s",
      "testDurationInMinutes": "n",
      "startTime": "d",
      "endTime": "d",
    },
  }, root);
}
