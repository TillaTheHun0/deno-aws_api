// Autogenerated API client for: Amazon GuardDuty

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.75.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class GuardDuty {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(GuardDuty.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-11-28",
    "endpointPrefix": "guardduty",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon GuardDuty",
    "serviceId": "GuardDuty",
    "signatureVersion": "v4",
    "signingName": "guardduty",
    "uid": "guardduty-2017-11-28"
  };

  async acceptInvitation(
    {abortSignal, ...params}: RequestConfig & AcceptInvitationRequest,
  ): Promise<AcceptInvitationResponse> {
    const body: jsonP.JSONObject = {
      masterId: params["MasterId"],
      invitationId: params["InvitationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptInvitation",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/master`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async archiveFindings(
    {abortSignal, ...params}: RequestConfig & ArchiveFindingsRequest,
  ): Promise<ArchiveFindingsResponse> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ArchiveFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/archive`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDetector(
    {abortSignal, ...params}: RequestConfig & CreateDetectorRequest,
  ): Promise<CreateDetectorResponse> {
    const body: jsonP.JSONObject = {
      enable: params["Enable"],
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      findingPublishingFrequency: params["FindingPublishingFrequency"],
      dataSources: fromDataSourceConfigurations(params["DataSources"]),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDetector",
      requestUri: "/detector",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DetectorId": "s",
      },
    }, await resp.json());
  }

  async createFilter(
    {abortSignal, ...params}: RequestConfig & CreateFilterRequest,
  ): Promise<CreateFilterResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      description: params["Description"],
      action: params["Action"],
      rank: params["Rank"],
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFilter",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createIPSet(
    {abortSignal, ...params}: RequestConfig & CreateIPSetRequest,
  ): Promise<CreateIPSetResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      format: params["Format"],
      location: params["Location"],
      activate: params["Activate"],
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIPSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "IpSetId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createMembers(
    {abortSignal, ...params}: RequestConfig & CreateMembersRequest,
  ): Promise<CreateMembersResponse> {
    const body: jsonP.JSONObject = {
      accountDetails: params["AccountDetails"]?.map(x => fromAccountDetail(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async createPublishingDestination(
    {abortSignal, ...params}: RequestConfig & CreatePublishingDestinationRequest,
  ): Promise<CreatePublishingDestinationResponse> {
    const body: jsonP.JSONObject = {
      destinationType: params["DestinationType"],
      destinationProperties: fromDestinationProperties(params["DestinationProperties"]),
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePublishingDestination",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "DestinationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createSampleFindings(
    {abortSignal, ...params}: RequestConfig & CreateSampleFindingsRequest,
  ): Promise<CreateSampleFindingsResponse> {
    const body: jsonP.JSONObject = {
      findingTypes: params["FindingTypes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSampleFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/create`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & CreateThreatIntelSetRequest,
  ): Promise<CreateThreatIntelSetResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      format: params["Format"],
      location: params["Location"],
      activate: params["Activate"],
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThreatIntelSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "ThreatIntelSetId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async declineInvitations(
    {abortSignal, ...params}: RequestConfig & DeclineInvitationsRequest,
  ): Promise<DeclineInvitationsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeclineInvitations",
      requestUri: "/invitation/decline",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async deleteDetector(
    {abortSignal, ...params}: RequestConfig & DeleteDetectorRequest,
  ): Promise<DeleteDetectorResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDetector",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteFilter(
    {abortSignal, ...params}: RequestConfig & DeleteFilterRequest,
  ): Promise<DeleteFilterResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFilter",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter/${params["FilterName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteIPSet(
    {abortSignal, ...params}: RequestConfig & DeleteIPSetRequest,
  ): Promise<DeleteIPSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIPSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset/${params["IpSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteInvitations(
    {abortSignal, ...params}: RequestConfig & DeleteInvitationsRequest,
  ): Promise<DeleteInvitationsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInvitations",
      requestUri: "/invitation/delete",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async deleteMembers(
    {abortSignal, ...params}: RequestConfig & DeleteMembersRequest,
  ): Promise<DeleteMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/delete`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async deletePublishingDestination(
    {abortSignal, ...params}: RequestConfig & DeletePublishingDestinationRequest,
  ): Promise<DeletePublishingDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePublishingDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination/${params["DestinationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & DeleteThreatIntelSetRequest,
  ): Promise<DeleteThreatIntelSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteThreatIntelSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset/${params["ThreatIntelSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeOrganizationConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationConfigurationRequest,
  ): Promise<DescribeOrganizationConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeOrganizationConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/admin`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "AutoEnable": "b",
        "MemberAccountLimitReached": "b",
      },
      optional: {
        "DataSources": toOrganizationDataSourceConfigurationsResult,
      },
    }, await resp.json());
  }

  async describePublishingDestination(
    {abortSignal, ...params}: RequestConfig & DescribePublishingDestinationRequest,
  ): Promise<DescribePublishingDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePublishingDestination",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination/${params["DestinationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "DestinationId": "s",
        "DestinationType": (x: jsonP.JSONValue) => cmnP.readEnum<DestinationType>(x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<PublishingStatus>(x),
        "PublishingFailureStartTimestamp": "n",
        "DestinationProperties": toDestinationProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async disableOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & DisableOrganizationAdminAccountRequest,
  ): Promise<DisableOrganizationAdminAccountResponse> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["AdminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableOrganizationAdminAccount",
      requestUri: "/admin/disable",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateFromMasterAccount(
    {abortSignal, ...params}: RequestConfig & DisassociateFromMasterAccountRequest,
  ): Promise<DisassociateFromMasterAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateFromMasterAccount",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/master/disassociate`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateMembers(
    {abortSignal, ...params}: RequestConfig & DisassociateMembersRequest,
  ): Promise<DisassociateMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/disassociate`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async enableOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & EnableOrganizationAdminAccountRequest,
  ): Promise<EnableOrganizationAdminAccountResponse> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["AdminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableOrganizationAdminAccount",
      requestUri: "/admin/enable",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getDetector(
    {abortSignal, ...params}: RequestConfig & GetDetectorRequest,
  ): Promise<GetDetectorResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDetector",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "ServiceRole": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DetectorStatus>(x),
      },
      optional: {
        "CreatedAt": "s",
        "FindingPublishingFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<FindingPublishingFrequency>(x),
        "UpdatedAt": "s",
        "DataSources": toDataSourceConfigurationsResult,
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getFilter(
    {abortSignal, ...params}: RequestConfig & GetFilterRequest,
  ): Promise<GetFilterResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFilter",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter/${params["FilterName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
        "Action": (x: jsonP.JSONValue) => cmnP.readEnum<FilterAction>(x),
        "FindingCriteria": toFindingCriteria,
      },
      optional: {
        "Description": "s",
        "Rank": "n",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getFindings(
    {abortSignal, ...params}: RequestConfig & GetFindingsRequest,
  ): Promise<GetFindingsResponse> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
      sortCriteria: fromSortCriteria(params["SortCriteria"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/get`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Findings": [toFinding],
      },
      optional: {},
    }, await resp.json());
  }

  async getFindingsStatistics(
    {abortSignal, ...params}: RequestConfig & GetFindingsStatisticsRequest,
  ): Promise<GetFindingsStatisticsResponse> {
    const body: jsonP.JSONObject = {
      findingStatisticTypes: params["FindingStatisticTypes"],
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFindingsStatistics",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "FindingStatistics": toFindingStatistics,
      },
      optional: {},
    }, await resp.json());
  }

  async getIPSet(
    {abortSignal, ...params}: RequestConfig & GetIPSetRequest,
  ): Promise<GetIPSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetIPSet",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset/${params["IpSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
        "Format": (x: jsonP.JSONValue) => cmnP.readEnum<IpSetFormat>(x),
        "Location": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<IpSetStatus>(x),
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getInvitationsCount(
    {abortSignal, ...params}: RequestConfig & GetInvitationsCountRequest = {},
  ): Promise<GetInvitationsCountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetInvitationsCount",
      method: "GET",
      requestUri: "/invitation/count",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InvitationsCount": "n",
      },
    }, await resp.json());
  }

  async getMasterAccount(
    {abortSignal, ...params}: RequestConfig & GetMasterAccountRequest,
  ): Promise<GetMasterAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMasterAccount",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/master`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Master": toMaster,
      },
      optional: {},
    }, await resp.json());
  }

  async getMemberDetectors(
    {abortSignal, ...params}: RequestConfig & GetMemberDetectorsRequest,
  ): Promise<GetMemberDetectorsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMemberDetectors",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/detector/get`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "MemberDataSourceConfigurations": [toMemberDataSourceConfiguration],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async getMembers(
    {abortSignal, ...params}: RequestConfig & GetMembersRequest,
  ): Promise<GetMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/get`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Members": [toMember],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async getThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & GetThreatIntelSetRequest,
  ): Promise<GetThreatIntelSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetThreatIntelSet",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset/${params["ThreatIntelSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
        "Format": (x: jsonP.JSONValue) => cmnP.readEnum<ThreatIntelSetFormat>(x),
        "Location": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ThreatIntelSetStatus>(x),
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getUsageStatistics(
    {abortSignal, ...params}: RequestConfig & GetUsageStatisticsRequest,
  ): Promise<GetUsageStatisticsResponse> {
    const body: jsonP.JSONObject = {
      usageStatisticsType: params["UsageStatisticType"],
      usageCriteria: fromUsageCriteria(params["UsageCriteria"]),
      unit: params["Unit"],
      maxResults: params["MaxResults"],
      nextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUsageStatistics",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/usage/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UsageStatistics": toUsageStatistics,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async inviteMembers(
    {abortSignal, ...params}: RequestConfig & InviteMembersRequest,
  ): Promise<InviteMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
      disableEmailNotification: params["DisableEmailNotification"],
      message: params["Message"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InviteMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/invite`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async listDetectors(
    {abortSignal, ...params}: RequestConfig & ListDetectorsRequest = {},
  ): Promise<ListDetectorsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDetectors",
      method: "GET",
      requestUri: "/detector",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "DetectorIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFilters(
    {abortSignal, ...params}: RequestConfig & ListFiltersRequest,
  ): Promise<ListFiltersResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFilters",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "FilterNames": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFindings(
    {abortSignal, ...params}: RequestConfig & ListFindingsRequest,
  ): Promise<ListFindingsResponse> {
    const body: jsonP.JSONObject = {
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
      sortCriteria: fromSortCriteria(params["SortCriteria"]),
      maxResults: params["MaxResults"],
      nextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "FindingIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIPSets(
    {abortSignal, ...params}: RequestConfig & ListIPSetsRequest,
  ): Promise<ListIPSetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIPSets",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "IpSetIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInvitations(
    {abortSignal, ...params}: RequestConfig & ListInvitationsRequest = {},
  ): Promise<ListInvitationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInvitations",
      method: "GET",
      requestUri: "/invitation",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Invitations": [toInvitation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMembers(
    {abortSignal, ...params}: RequestConfig & ListMembersRequest,
  ): Promise<ListMembersResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["OnlyAssociated"] != null) query.set("onlyAssociated", params["OnlyAssociated"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMembers",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Members": [toMember],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizationAdminAccounts(
    {abortSignal, ...params}: RequestConfig & ListOrganizationAdminAccountsRequest = {},
  ): Promise<ListOrganizationAdminAccountsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListOrganizationAdminAccounts",
      method: "GET",
      requestUri: "/admin",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AdminAccounts": [toAdminAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPublishingDestinations(
    {abortSignal, ...params}: RequestConfig & ListPublishingDestinationsRequest,
  ): Promise<ListPublishingDestinationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPublishingDestinations",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Destinations": [toDestination],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listThreatIntelSets(
    {abortSignal, ...params}: RequestConfig & ListThreatIntelSetsRequest,
  ): Promise<ListThreatIntelSetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThreatIntelSets",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "ThreatIntelSetIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startMonitoringMembers(
    {abortSignal, ...params}: RequestConfig & StartMonitoringMembersRequest,
  ): Promise<StartMonitoringMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartMonitoringMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/start`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async stopMonitoringMembers(
    {abortSignal, ...params}: RequestConfig & StopMonitoringMembersRequest,
  ): Promise<StopMonitoringMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopMonitoringMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/stop`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async unarchiveFindings(
    {abortSignal, ...params}: RequestConfig & UnarchiveFindingsRequest,
  ): Promise<UnarchiveFindingsResponse> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnarchiveFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/unarchive`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDetector(
    {abortSignal, ...params}: RequestConfig & UpdateDetectorRequest,
  ): Promise<UpdateDetectorResponse> {
    const body: jsonP.JSONObject = {
      enable: params["Enable"],
      findingPublishingFrequency: params["FindingPublishingFrequency"],
      dataSources: fromDataSourceConfigurations(params["DataSources"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDetector",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFilter(
    {abortSignal, ...params}: RequestConfig & UpdateFilterRequest,
  ): Promise<UpdateFilterResponse> {
    const body: jsonP.JSONObject = {
      description: params["Description"],
      action: params["Action"],
      rank: params["Rank"],
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFilter",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter/${params["FilterName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateFindingsFeedback(
    {abortSignal, ...params}: RequestConfig & UpdateFindingsFeedbackRequest,
  ): Promise<UpdateFindingsFeedbackResponse> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
      feedback: params["Feedback"],
      comments: params["Comments"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFindingsFeedback",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/feedback`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateIPSet(
    {abortSignal, ...params}: RequestConfig & UpdateIPSetRequest,
  ): Promise<UpdateIPSetResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      location: params["Location"],
      activate: params["Activate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIPSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset/${params["IpSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateMemberDetectors(
    {abortSignal, ...params}: RequestConfig & UpdateMemberDetectorsRequest,
  ): Promise<UpdateMemberDetectorsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
      dataSources: fromDataSourceConfigurations(params["DataSources"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMemberDetectors",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/detector/update`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async updateOrganizationConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateOrganizationConfigurationRequest,
  ): Promise<UpdateOrganizationConfigurationResponse> {
    const body: jsonP.JSONObject = {
      autoEnable: params["AutoEnable"],
      dataSources: fromOrganizationDataSourceConfigurations(params["DataSources"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateOrganizationConfiguration",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/admin`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePublishingDestination(
    {abortSignal, ...params}: RequestConfig & UpdatePublishingDestinationRequest,
  ): Promise<UpdatePublishingDestinationResponse> {
    const body: jsonP.JSONObject = {
      destinationProperties: fromDestinationProperties(params["DestinationProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePublishingDestination",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination/${params["DestinationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & UpdateThreatIntelSetRequest,
  ): Promise<UpdateThreatIntelSetResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      location: params["Location"],
      activate: params["Activate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThreatIntelSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset/${params["ThreatIntelSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcceptInvitationRequest {
  DetectorId: string;
  MasterId: string;
  InvitationId: string;
}

// refs: 1 - tags: named, input
export interface ArchiveFindingsRequest {
  DetectorId: string;
  FindingIds: string[];
}

// refs: 1 - tags: named, input
export interface CreateDetectorRequest {
  Enable: boolean;
  ClientToken?: string | null;
  FindingPublishingFrequency?: FindingPublishingFrequency | null;
  DataSources?: DataSourceConfigurations | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateFilterRequest {
  DetectorId: string;
  Name: string;
  Description?: string | null;
  Action?: FilterAction | null;
  Rank?: number | null;
  FindingCriteria: FindingCriteria;
  ClientToken?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateIPSetRequest {
  DetectorId: string;
  Name: string;
  Format: IpSetFormat;
  Location: string;
  Activate: boolean;
  ClientToken?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateMembersRequest {
  DetectorId: string;
  AccountDetails: AccountDetail[];
}

// refs: 1 - tags: named, input
export interface CreatePublishingDestinationRequest {
  DetectorId: string;
  DestinationType: DestinationType;
  DestinationProperties: DestinationProperties;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateSampleFindingsRequest {
  DetectorId: string;
  FindingTypes?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CreateThreatIntelSetRequest {
  DetectorId: string;
  Name: string;
  Format: ThreatIntelSetFormat;
  Location: string;
  Activate: boolean;
  ClientToken?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeclineInvitationsRequest {
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface DeleteDetectorRequest {
  DetectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFilterRequest {
  DetectorId: string;
  FilterName: string;
}

// refs: 1 - tags: named, input
export interface DeleteIPSetRequest {
  DetectorId: string;
  IpSetId: string;
}

// refs: 1 - tags: named, input
export interface DeleteInvitationsRequest {
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface DeleteMembersRequest {
  DetectorId: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface DeletePublishingDestinationRequest {
  DetectorId: string;
  DestinationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteThreatIntelSetRequest {
  DetectorId: string;
  ThreatIntelSetId: string;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationConfigurationRequest {
  DetectorId: string;
}

// refs: 1 - tags: named, input
export interface DescribePublishingDestinationRequest {
  DetectorId: string;
  DestinationId: string;
}

// refs: 1 - tags: named, input
export interface DisableOrganizationAdminAccountRequest {
  AdminAccountId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateFromMasterAccountRequest {
  DetectorId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateMembersRequest {
  DetectorId: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface EnableOrganizationAdminAccountRequest {
  AdminAccountId: string;
}

// refs: 1 - tags: named, input
export interface GetDetectorRequest {
  DetectorId: string;
}

// refs: 1 - tags: named, input
export interface GetFilterRequest {
  DetectorId: string;
  FilterName: string;
}

// refs: 1 - tags: named, input
export interface GetFindingsRequest {
  DetectorId: string;
  FindingIds: string[];
  SortCriteria?: SortCriteria | null;
}

// refs: 1 - tags: named, input
export interface GetFindingsStatisticsRequest {
  DetectorId: string;
  FindingStatisticTypes: FindingStatisticType[];
  FindingCriteria?: FindingCriteria | null;
}

// refs: 1 - tags: named, input
export interface GetIPSetRequest {
  DetectorId: string;
  IpSetId: string;
}

// refs: 1 - tags: named, input
export interface GetInvitationsCountRequest {
}

// refs: 1 - tags: named, input
export interface GetMasterAccountRequest {
  DetectorId: string;
}

// refs: 1 - tags: named, input
export interface GetMemberDetectorsRequest {
  DetectorId: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface GetMembersRequest {
  DetectorId: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface GetThreatIntelSetRequest {
  DetectorId: string;
  ThreatIntelSetId: string;
}

// refs: 1 - tags: named, input
export interface GetUsageStatisticsRequest {
  DetectorId: string;
  UsageStatisticType: UsageStatisticType;
  UsageCriteria: UsageCriteria;
  Unit?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface InviteMembersRequest {
  DetectorId: string;
  AccountIds: string[];
  DisableEmailNotification?: boolean | null;
  Message?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDetectorsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFiltersRequest {
  DetectorId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFindingsRequest {
  DetectorId: string;
  FindingCriteria?: FindingCriteria | null;
  SortCriteria?: SortCriteria | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListIPSetsRequest {
  DetectorId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListInvitationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListMembersRequest {
  DetectorId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  OnlyAssociated?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOrganizationAdminAccountsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPublishingDestinationsRequest {
  DetectorId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListThreatIntelSetsRequest {
  DetectorId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StartMonitoringMembersRequest {
  DetectorId: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface StopMonitoringMembersRequest {
  DetectorId: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UnarchiveFindingsRequest {
  DetectorId: string;
  FindingIds: string[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDetectorRequest {
  DetectorId: string;
  Enable?: boolean | null;
  FindingPublishingFrequency?: FindingPublishingFrequency | null;
  DataSources?: DataSourceConfigurations | null;
}

// refs: 1 - tags: named, input
export interface UpdateFilterRequest {
  DetectorId: string;
  FilterName: string;
  Description?: string | null;
  Action?: FilterAction | null;
  Rank?: number | null;
  FindingCriteria?: FindingCriteria | null;
}

// refs: 1 - tags: named, input
export interface UpdateFindingsFeedbackRequest {
  DetectorId: string;
  FindingIds: string[];
  Feedback: Feedback;
  Comments?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateIPSetRequest {
  DetectorId: string;
  IpSetId: string;
  Name?: string | null;
  Location?: string | null;
  Activate?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateMemberDetectorsRequest {
  DetectorId: string;
  AccountIds: string[];
  DataSources?: DataSourceConfigurations | null;
}

// refs: 1 - tags: named, input
export interface UpdateOrganizationConfigurationRequest {
  DetectorId: string;
  AutoEnable: boolean;
  DataSources?: OrganizationDataSourceConfigurations | null;
}

// refs: 1 - tags: named, input
export interface UpdatePublishingDestinationRequest {
  DetectorId: string;
  DestinationId: string;
  DestinationProperties?: DestinationProperties | null;
}

// refs: 1 - tags: named, input
export interface UpdateThreatIntelSetRequest {
  DetectorId: string;
  ThreatIntelSetId: string;
  Name?: string | null;
  Location?: string | null;
  Activate?: boolean | null;
}

// refs: 1 - tags: named, output
export interface AcceptInvitationResponse {
}

// refs: 1 - tags: named, output
export interface ArchiveFindingsResponse {
}

// refs: 1 - tags: named, output
export interface CreateDetectorResponse {
  DetectorId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateFilterResponse {
  Name: string;
}

// refs: 1 - tags: named, output
export interface CreateIPSetResponse {
  IpSetId: string;
}

// refs: 1 - tags: named, output
export interface CreateMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface CreatePublishingDestinationResponse {
  DestinationId: string;
}

// refs: 1 - tags: named, output
export interface CreateSampleFindingsResponse {
}

// refs: 1 - tags: named, output
export interface CreateThreatIntelSetResponse {
  ThreatIntelSetId: string;
}

// refs: 1 - tags: named, output
export interface DeclineInvitationsResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface DeleteDetectorResponse {
}

// refs: 1 - tags: named, output
export interface DeleteFilterResponse {
}

// refs: 1 - tags: named, output
export interface DeleteIPSetResponse {
}

// refs: 1 - tags: named, output
export interface DeleteInvitationsResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface DeleteMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface DeletePublishingDestinationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteThreatIntelSetResponse {
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationConfigurationResponse {
  AutoEnable: boolean;
  MemberAccountLimitReached: boolean;
  DataSources?: OrganizationDataSourceConfigurationsResult | null;
}

// refs: 1 - tags: named, output
export interface DescribePublishingDestinationResponse {
  DestinationId: string;
  DestinationType: DestinationType;
  Status: PublishingStatus;
  PublishingFailureStartTimestamp: number;
  DestinationProperties: DestinationProperties;
}

// refs: 1 - tags: named, output
export interface DisableOrganizationAdminAccountResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateFromMasterAccountResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface EnableOrganizationAdminAccountResponse {
}

// refs: 1 - tags: named, output
export interface GetDetectorResponse {
  CreatedAt?: string | null;
  FindingPublishingFrequency?: FindingPublishingFrequency | null;
  ServiceRole: string;
  Status: DetectorStatus;
  UpdatedAt?: string | null;
  DataSources?: DataSourceConfigurationsResult | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetFilterResponse {
  Name: string;
  Description?: string | null;
  Action: FilterAction;
  Rank?: number | null;
  FindingCriteria: FindingCriteria;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetFindingsResponse {
  Findings: Finding[];
}

// refs: 1 - tags: named, output
export interface GetFindingsStatisticsResponse {
  FindingStatistics: FindingStatistics;
}

// refs: 1 - tags: named, output
export interface GetIPSetResponse {
  Name: string;
  Format: IpSetFormat;
  Location: string;
  Status: IpSetStatus;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetInvitationsCountResponse {
  InvitationsCount?: number | null;
}

// refs: 1 - tags: named, output
export interface GetMasterAccountResponse {
  Master: Master;
}

// refs: 1 - tags: named, output
export interface GetMemberDetectorsResponse {
  MemberDataSourceConfigurations: MemberDataSourceConfiguration[];
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface GetMembersResponse {
  Members: Member[];
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface GetThreatIntelSetResponse {
  Name: string;
  Format: ThreatIntelSetFormat;
  Location: string;
  Status: ThreatIntelSetStatus;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetUsageStatisticsResponse {
  UsageStatistics?: UsageStatistics | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface InviteMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface ListDetectorsResponse {
  DetectorIds: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFiltersResponse {
  FilterNames: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFindingsResponse {
  FindingIds: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIPSetsResponse {
  IpSetIds: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInvitationsResponse {
  Invitations?: Invitation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMembersResponse {
  Members?: Member[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOrganizationAdminAccountsResponse {
  AdminAccounts?: AdminAccount[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPublishingDestinationsResponse {
  Destinations: Destination[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListThreatIntelSetsResponse {
  ThreatIntelSetIds: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartMonitoringMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface StopMonitoringMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UnarchiveFindingsResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDetectorResponse {
}

// refs: 1 - tags: named, output
export interface UpdateFilterResponse {
  Name: string;
}

// refs: 1 - tags: named, output
export interface UpdateFindingsFeedbackResponse {
}

// refs: 1 - tags: named, output
export interface UpdateIPSetResponse {
}

// refs: 1 - tags: named, output
export interface UpdateMemberDetectorsResponse {
  UnprocessedAccounts: UnprocessedAccount[];
}

// refs: 1 - tags: named, output
export interface UpdateOrganizationConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface UpdatePublishingDestinationResponse {
}

// refs: 1 - tags: named, output
export interface UpdateThreatIntelSetResponse {
}

// refs: 3 - tags: input, named, enum, output
export type FindingPublishingFrequency =
| "FIFTEEN_MINUTES"
| "ONE_HOUR"
| "SIX_HOURS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface
export interface DataSourceConfigurations {
  S3Logs?: S3LogsConfiguration | null;
}
function fromDataSourceConfigurations(input?: DataSourceConfigurations | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Logs: fromS3LogsConfiguration(input["S3Logs"]),
  }
}

// refs: 3 - tags: input, named, interface
export interface S3LogsConfiguration {
  Enable: boolean;
}
function fromS3LogsConfiguration(input?: S3LogsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enable: input["Enable"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type FilterAction =
| "NOOP"
| "ARCHIVE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface FindingCriteria {
  Criterion?: { [key: string]: Condition | null | undefined } | null;
}
function fromFindingCriteria(input?: FindingCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    criterion: jsonP.serializeMap(input["Criterion"], x => fromCondition(x)),
  }
}
function toFindingCriteria(root: jsonP.JSONValue): FindingCriteria {
  return jsonP.readObj({
    required: {},
    optional: {
      "Criterion": x => jsonP.readMap(String, toCondition, x),
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface Condition {
  Eq?: string[] | null;
  Neq?: string[] | null;
  Gt?: number | null;
  Gte?: number | null;
  Lt?: number | null;
  Lte?: number | null;
  Equals?: string[] | null;
  NotEquals?: string[] | null;
  GreaterThan?: number | null;
  GreaterThanOrEqual?: number | null;
  LessThan?: number | null;
  LessThanOrEqual?: number | null;
}
function fromCondition(input?: Condition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eq: input["Eq"],
    neq: input["Neq"],
    gt: input["Gt"],
    gte: input["Gte"],
    lt: input["Lt"],
    lte: input["Lte"],
    equals: input["Equals"],
    notEquals: input["NotEquals"],
    greaterThan: input["GreaterThan"],
    greaterThanOrEqual: input["GreaterThanOrEqual"],
    lessThan: input["LessThan"],
    lessThanOrEqual: input["LessThanOrEqual"],
  }
}
function toCondition(root: jsonP.JSONValue): Condition {
  return jsonP.readObj({
    required: {},
    optional: {
      "Eq": ["s"],
      "Neq": ["s"],
      "Gt": "n",
      "Gte": "n",
      "Lt": "n",
      "Lte": "n",
      "Equals": ["s"],
      "NotEquals": ["s"],
      "GreaterThan": "n",
      "GreaterThanOrEqual": "n",
      "LessThan": "n",
      "LessThanOrEqual": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type IpSetFormat =
| "TXT"
| "STIX"
| "OTX_CSV"
| "ALIEN_VAULT"
| "PROOF_POINT"
| "FIRE_EYE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AccountDetail {
  AccountId: string;
  Email: string;
}
function fromAccountDetail(input?: AccountDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accountId: input["AccountId"],
    email: input["Email"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type DestinationType =
| "S3"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface DestinationProperties {
  DestinationArn?: string | null;
  KmsKeyArn?: string | null;
}
function fromDestinationProperties(input?: DestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    destinationArn: input["DestinationArn"],
    kmsKeyArn: input["KmsKeyArn"],
  }
}
function toDestinationProperties(root: jsonP.JSONValue): DestinationProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationArn": "s",
      "KmsKeyArn": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ThreatIntelSetFormat =
| "TXT"
| "STIX"
| "OTX_CSV"
| "ALIEN_VAULT"
| "PROOF_POINT"
| "FIRE_EYE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface SortCriteria {
  AttributeName?: string | null;
  OrderBy?: OrderBy | null;
}
function fromSortCriteria(input?: SortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributeName: input["AttributeName"],
    orderBy: input["OrderBy"],
  }
}

// refs: 2 - tags: input, named, enum
export type OrderBy =
| "ASC"
| "DESC"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type FindingStatisticType =
| "COUNT_BY_SEVERITY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UsageStatisticType =
| "SUM_BY_ACCOUNT"
| "SUM_BY_DATA_SOURCE"
| "SUM_BY_RESOURCE"
| "TOP_RESOURCES"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UsageCriteria {
  AccountIds?: string[] | null;
  DataSources: DataSource[];
  Resources?: string[] | null;
}
function fromUsageCriteria(input?: UsageCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accountIds: input["AccountIds"],
    dataSources: input["DataSources"],
    resources: input["Resources"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type DataSource =
| "FLOW_LOGS"
| "CLOUD_TRAIL"
| "DNS_LOGS"
| "S3_LOGS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type Feedback =
| "USEFUL"
| "NOT_USEFUL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface OrganizationDataSourceConfigurations {
  S3Logs?: OrganizationS3LogsConfiguration | null;
}
function fromOrganizationDataSourceConfigurations(input?: OrganizationDataSourceConfigurations | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Logs: fromOrganizationS3LogsConfiguration(input["S3Logs"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface OrganizationS3LogsConfiguration {
  AutoEnable: boolean;
}
function fromOrganizationS3LogsConfiguration(input?: OrganizationS3LogsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    autoEnable: input["AutoEnable"],
  }
}

// refs: 11 - tags: output, named, interface
export interface UnprocessedAccount {
  AccountId: string;
  Result: string;
}
function toUnprocessedAccount(root: jsonP.JSONValue): UnprocessedAccount {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "Result": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationDataSourceConfigurationsResult {
  S3Logs: OrganizationS3LogsConfigurationResult;
}
function toOrganizationDataSourceConfigurationsResult(root: jsonP.JSONValue): OrganizationDataSourceConfigurationsResult {
  return jsonP.readObj({
    required: {
      "S3Logs": toOrganizationS3LogsConfigurationResult,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationS3LogsConfigurationResult {
  AutoEnable: boolean;
}
function toOrganizationS3LogsConfigurationResult(root: jsonP.JSONValue): OrganizationS3LogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "AutoEnable": "b",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type PublishingStatus =
| "PENDING_VERIFICATION"
| "PUBLISHING"
| "UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY"
| "STOPPED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type DetectorStatus =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface DataSourceConfigurationsResult {
  CloudTrail: CloudTrailConfigurationResult;
  DNSLogs: DNSLogsConfigurationResult;
  FlowLogs: FlowLogsConfigurationResult;
  S3Logs: S3LogsConfigurationResult;
}
function toDataSourceConfigurationsResult(root: jsonP.JSONValue): DataSourceConfigurationsResult {
  return jsonP.readObj({
    required: {
      "CloudTrail": toCloudTrailConfigurationResult,
      "DNSLogs": toDNSLogsConfigurationResult,
      "FlowLogs": toFlowLogsConfigurationResult,
      "S3Logs": toS3LogsConfigurationResult,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CloudTrailConfigurationResult {
  Status: DataSourceStatus;
}
function toCloudTrailConfigurationResult(root: jsonP.JSONValue): CloudTrailConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: output, named, enum
export type DataSourceStatus =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface DNSLogsConfigurationResult {
  Status: DataSourceStatus;
}
function toDNSLogsConfigurationResult(root: jsonP.JSONValue): DNSLogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface FlowLogsConfigurationResult {
  Status: DataSourceStatus;
}
function toFlowLogsConfigurationResult(root: jsonP.JSONValue): FlowLogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface S3LogsConfigurationResult {
  Status: DataSourceStatus;
}
function toS3LogsConfigurationResult(root: jsonP.JSONValue): S3LogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Finding {
  AccountId: string;
  Arn: string;
  Confidence?: number | null;
  CreatedAt: string;
  Description?: string | null;
  Id: string;
  Partition?: string | null;
  Region: string;
  Resource: Resource;
  SchemaVersion: string;
  Service?: Service | null;
  Severity: number;
  Title?: string | null;
  Type: string;
  UpdatedAt: string;
}
function toFinding(root: jsonP.JSONValue): Finding {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "Arn": "s",
      "CreatedAt": "s",
      "Id": "s",
      "Region": "s",
      "Resource": toResource,
      "SchemaVersion": "s",
      "Severity": "n",
      "Type": "s",
      "UpdatedAt": "s",
    },
    optional: {
      "Confidence": "n",
      "Description": "s",
      "Partition": "s",
      "Service": toService,
      "Title": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Resource {
  AccessKeyDetails?: AccessKeyDetails | null;
  S3BucketDetails?: S3BucketDetail[] | null;
  InstanceDetails?: InstanceDetails | null;
  ResourceType?: string | null;
}
function toResource(root: jsonP.JSONValue): Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessKeyDetails": toAccessKeyDetails,
      "S3BucketDetails": [toS3BucketDetail],
      "InstanceDetails": toInstanceDetails,
      "ResourceType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccessKeyDetails {
  AccessKeyId?: string | null;
  PrincipalId?: string | null;
  UserName?: string | null;
  UserType?: string | null;
}
function toAccessKeyDetails(root: jsonP.JSONValue): AccessKeyDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessKeyId": "s",
      "PrincipalId": "s",
      "UserName": "s",
      "UserType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface S3BucketDetail {
  Arn?: string | null;
  Name?: string | null;
  Type?: string | null;
  CreatedAt?: Date | number | null;
  Owner?: Owner | null;
  Tags?: Tag[] | null;
  DefaultServerSideEncryption?: DefaultServerSideEncryption | null;
  PublicAccess?: PublicAccess | null;
}
function toS3BucketDetail(root: jsonP.JSONValue): S3BucketDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Type": "s",
      "CreatedAt": "d",
      "Owner": toOwner,
      "Tags": [toTag],
      "DefaultServerSideEncryption": toDefaultServerSideEncryption,
      "PublicAccess": toPublicAccess,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Owner {
  Id?: string | null;
}
function toOwner(root: jsonP.JSONValue): Owner {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DefaultServerSideEncryption {
  EncryptionType?: string | null;
  KmsMasterKeyArn?: string | null;
}
function toDefaultServerSideEncryption(root: jsonP.JSONValue): DefaultServerSideEncryption {
  return jsonP.readObj({
    required: {},
    optional: {
      "EncryptionType": "s",
      "KmsMasterKeyArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PublicAccess {
  PermissionConfiguration?: PermissionConfiguration | null;
  EffectivePermission?: string | null;
}
function toPublicAccess(root: jsonP.JSONValue): PublicAccess {
  return jsonP.readObj({
    required: {},
    optional: {
      "PermissionConfiguration": toPermissionConfiguration,
      "EffectivePermission": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PermissionConfiguration {
  BucketLevelPermissions?: BucketLevelPermissions | null;
  AccountLevelPermissions?: AccountLevelPermissions | null;
}
function toPermissionConfiguration(root: jsonP.JSONValue): PermissionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "BucketLevelPermissions": toBucketLevelPermissions,
      "AccountLevelPermissions": toAccountLevelPermissions,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BucketLevelPermissions {
  AccessControlList?: AccessControlList | null;
  BucketPolicy?: BucketPolicy | null;
  BlockPublicAccess?: BlockPublicAccess | null;
}
function toBucketLevelPermissions(root: jsonP.JSONValue): BucketLevelPermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessControlList": toAccessControlList,
      "BucketPolicy": toBucketPolicy,
      "BlockPublicAccess": toBlockPublicAccess,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccessControlList {
  AllowsPublicReadAccess?: boolean | null;
  AllowsPublicWriteAccess?: boolean | null;
}
function toAccessControlList(root: jsonP.JSONValue): AccessControlList {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowsPublicReadAccess": "b",
      "AllowsPublicWriteAccess": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BucketPolicy {
  AllowsPublicReadAccess?: boolean | null;
  AllowsPublicWriteAccess?: boolean | null;
}
function toBucketPolicy(root: jsonP.JSONValue): BucketPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowsPublicReadAccess": "b",
      "AllowsPublicWriteAccess": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BlockPublicAccess {
  IgnorePublicAcls?: boolean | null;
  RestrictPublicBuckets?: boolean | null;
  BlockPublicAcls?: boolean | null;
  BlockPublicPolicy?: boolean | null;
}
function toBlockPublicAccess(root: jsonP.JSONValue): BlockPublicAccess {
  return jsonP.readObj({
    required: {},
    optional: {
      "IgnorePublicAcls": "b",
      "RestrictPublicBuckets": "b",
      "BlockPublicAcls": "b",
      "BlockPublicPolicy": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccountLevelPermissions {
  BlockPublicAccess?: BlockPublicAccess | null;
}
function toAccountLevelPermissions(root: jsonP.JSONValue): AccountLevelPermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "BlockPublicAccess": toBlockPublicAccess,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceDetails {
  AvailabilityZone?: string | null;
  IamInstanceProfile?: IamInstanceProfile | null;
  ImageDescription?: string | null;
  ImageId?: string | null;
  InstanceId?: string | null;
  InstanceState?: string | null;
  InstanceType?: string | null;
  OutpostArn?: string | null;
  LaunchTime?: string | null;
  NetworkInterfaces?: NetworkInterface[] | null;
  Platform?: string | null;
  ProductCodes?: ProductCode[] | null;
  Tags?: Tag[] | null;
}
function toInstanceDetails(root: jsonP.JSONValue): InstanceDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "AvailabilityZone": "s",
      "IamInstanceProfile": toIamInstanceProfile,
      "ImageDescription": "s",
      "ImageId": "s",
      "InstanceId": "s",
      "InstanceState": "s",
      "InstanceType": "s",
      "OutpostArn": "s",
      "LaunchTime": "s",
      "NetworkInterfaces": [toNetworkInterface],
      "Platform": "s",
      "ProductCodes": [toProductCode],
      "Tags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IamInstanceProfile {
  Arn?: string | null;
  Id?: string | null;
}
function toIamInstanceProfile(root: jsonP.JSONValue): IamInstanceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkInterface {
  Ipv6Addresses?: string[] | null;
  NetworkInterfaceId?: string | null;
  PrivateDnsName?: string | null;
  PrivateIpAddress?: string | null;
  PrivateIpAddresses?: PrivateIpAddressDetails[] | null;
  PublicDnsName?: string | null;
  PublicIp?: string | null;
  SecurityGroups?: SecurityGroup[] | null;
  SubnetId?: string | null;
  VpcId?: string | null;
}
function toNetworkInterface(root: jsonP.JSONValue): NetworkInterface {
  return jsonP.readObj({
    required: {},
    optional: {
      "Ipv6Addresses": ["s"],
      "NetworkInterfaceId": "s",
      "PrivateDnsName": "s",
      "PrivateIpAddress": "s",
      "PrivateIpAddresses": [toPrivateIpAddressDetails],
      "PublicDnsName": "s",
      "PublicIp": "s",
      "SecurityGroups": [toSecurityGroup],
      "SubnetId": "s",
      "VpcId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PrivateIpAddressDetails {
  PrivateDnsName?: string | null;
  PrivateIpAddress?: string | null;
}
function toPrivateIpAddressDetails(root: jsonP.JSONValue): PrivateIpAddressDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrivateDnsName": "s",
      "PrivateIpAddress": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecurityGroup {
  GroupId?: string | null;
  GroupName?: string | null;
}
function toSecurityGroup(root: jsonP.JSONValue): SecurityGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupId": "s",
      "GroupName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProductCode {
  Code?: string | null;
  ProductType?: string | null;
}
function toProductCode(root: jsonP.JSONValue): ProductCode {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": "s",
      "ProductType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Service {
  Action?: Action | null;
  Evidence?: Evidence | null;
  Archived?: boolean | null;
  Count?: number | null;
  DetectorId?: string | null;
  EventFirstSeen?: string | null;
  EventLastSeen?: string | null;
  ResourceRole?: string | null;
  ServiceName?: string | null;
  UserFeedback?: string | null;
}
function toService(root: jsonP.JSONValue): Service {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": toAction,
      "Evidence": toEvidence,
      "Archived": "b",
      "Count": "n",
      "DetectorId": "s",
      "EventFirstSeen": "s",
      "EventLastSeen": "s",
      "ResourceRole": "s",
      "ServiceName": "s",
      "UserFeedback": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Action {
  ActionType?: string | null;
  AwsApiCallAction?: AwsApiCallAction | null;
  DnsRequestAction?: DnsRequestAction | null;
  NetworkConnectionAction?: NetworkConnectionAction | null;
  PortProbeAction?: PortProbeAction | null;
}
function toAction(root: jsonP.JSONValue): Action {
  return jsonP.readObj({
    required: {},
    optional: {
      "ActionType": "s",
      "AwsApiCallAction": toAwsApiCallAction,
      "DnsRequestAction": toDnsRequestAction,
      "NetworkConnectionAction": toNetworkConnectionAction,
      "PortProbeAction": toPortProbeAction,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AwsApiCallAction {
  Api?: string | null;
  CallerType?: string | null;
  DomainDetails?: DomainDetails | null;
  ErrorCode?: string | null;
  RemoteIpDetails?: RemoteIpDetails | null;
  ServiceName?: string | null;
}
function toAwsApiCallAction(root: jsonP.JSONValue): AwsApiCallAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Api": "s",
      "CallerType": "s",
      "DomainDetails": toDomainDetails,
      "ErrorCode": "s",
      "RemoteIpDetails": toRemoteIpDetails,
      "ServiceName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DomainDetails {
  Domain?: string | null;
}
function toDomainDetails(root: jsonP.JSONValue): DomainDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Domain": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface RemoteIpDetails {
  City?: City | null;
  Country?: Country | null;
  GeoLocation?: GeoLocation | null;
  IpAddressV4?: string | null;
  Organization?: Organization | null;
}
function toRemoteIpDetails(root: jsonP.JSONValue): RemoteIpDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "City": toCity,
      "Country": toCountry,
      "GeoLocation": toGeoLocation,
      "IpAddressV4": "s",
      "Organization": toOrganization,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface City {
  CityName?: string | null;
}
function toCity(root: jsonP.JSONValue): City {
  return jsonP.readObj({
    required: {},
    optional: {
      "CityName": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Country {
  CountryCode?: string | null;
  CountryName?: string | null;
}
function toCountry(root: jsonP.JSONValue): Country {
  return jsonP.readObj({
    required: {},
    optional: {
      "CountryCode": "s",
      "CountryName": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface GeoLocation {
  Lat?: number | null;
  Lon?: number | null;
}
function toGeoLocation(root: jsonP.JSONValue): GeoLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Lat": "n",
      "Lon": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Organization {
  Asn?: string | null;
  AsnOrg?: string | null;
  Isp?: string | null;
  Org?: string | null;
}
function toOrganization(root: jsonP.JSONValue): Organization {
  return jsonP.readObj({
    required: {},
    optional: {
      "Asn": "s",
      "AsnOrg": "s",
      "Isp": "s",
      "Org": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DnsRequestAction {
  Domain?: string | null;
}
function toDnsRequestAction(root: jsonP.JSONValue): DnsRequestAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Domain": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkConnectionAction {
  Blocked?: boolean | null;
  ConnectionDirection?: string | null;
  LocalPortDetails?: LocalPortDetails | null;
  Protocol?: string | null;
  LocalIpDetails?: LocalIpDetails | null;
  RemoteIpDetails?: RemoteIpDetails | null;
  RemotePortDetails?: RemotePortDetails | null;
}
function toNetworkConnectionAction(root: jsonP.JSONValue): NetworkConnectionAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Blocked": "b",
      "ConnectionDirection": "s",
      "LocalPortDetails": toLocalPortDetails,
      "Protocol": "s",
      "LocalIpDetails": toLocalIpDetails,
      "RemoteIpDetails": toRemoteIpDetails,
      "RemotePortDetails": toRemotePortDetails,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface LocalPortDetails {
  Port?: number | null;
  PortName?: string | null;
}
function toLocalPortDetails(root: jsonP.JSONValue): LocalPortDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Port": "n",
      "PortName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface LocalIpDetails {
  IpAddressV4?: string | null;
}
function toLocalIpDetails(root: jsonP.JSONValue): LocalIpDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "IpAddressV4": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RemotePortDetails {
  Port?: number | null;
  PortName?: string | null;
}
function toRemotePortDetails(root: jsonP.JSONValue): RemotePortDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Port": "n",
      "PortName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PortProbeAction {
  Blocked?: boolean | null;
  PortProbeDetails?: PortProbeDetail[] | null;
}
function toPortProbeAction(root: jsonP.JSONValue): PortProbeAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Blocked": "b",
      "PortProbeDetails": [toPortProbeDetail],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PortProbeDetail {
  LocalPortDetails?: LocalPortDetails | null;
  LocalIpDetails?: LocalIpDetails | null;
  RemoteIpDetails?: RemoteIpDetails | null;
}
function toPortProbeDetail(root: jsonP.JSONValue): PortProbeDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "LocalPortDetails": toLocalPortDetails,
      "LocalIpDetails": toLocalIpDetails,
      "RemoteIpDetails": toRemoteIpDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Evidence {
  ThreatIntelligenceDetails?: ThreatIntelligenceDetail[] | null;
}
function toEvidence(root: jsonP.JSONValue): Evidence {
  return jsonP.readObj({
    required: {},
    optional: {
      "ThreatIntelligenceDetails": [toThreatIntelligenceDetail],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThreatIntelligenceDetail {
  ThreatListName?: string | null;
  ThreatNames?: string[] | null;
}
function toThreatIntelligenceDetail(root: jsonP.JSONValue): ThreatIntelligenceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ThreatListName": "s",
      "ThreatNames": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FindingStatistics {
  CountBySeverity?: { [key: string]: number | null | undefined } | null;
}
function toFindingStatistics(root: jsonP.JSONValue): FindingStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "CountBySeverity": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type IpSetStatus =
| "INACTIVE"
| "ACTIVATING"
| "ACTIVE"
| "DEACTIVATING"
| "ERROR"
| "DELETE_PENDING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Master {
  AccountId?: string | null;
  InvitationId?: string | null;
  RelationshipStatus?: string | null;
  InvitedAt?: string | null;
}
function toMaster(root: jsonP.JSONValue): Master {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "InvitationId": "s",
      "RelationshipStatus": "s",
      "InvitedAt": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MemberDataSourceConfiguration {
  AccountId: string;
  DataSources: DataSourceConfigurationsResult;
}
function toMemberDataSourceConfiguration(root: jsonP.JSONValue): MemberDataSourceConfiguration {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "DataSources": toDataSourceConfigurationsResult,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Member {
  AccountId: string;
  DetectorId?: string | null;
  MasterId: string;
  Email: string;
  RelationshipStatus: string;
  InvitedAt?: string | null;
  UpdatedAt: string;
}
function toMember(root: jsonP.JSONValue): Member {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "MasterId": "s",
      "Email": "s",
      "RelationshipStatus": "s",
      "UpdatedAt": "s",
    },
    optional: {
      "DetectorId": "s",
      "InvitedAt": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ThreatIntelSetStatus =
| "INACTIVE"
| "ACTIVATING"
| "ACTIVE"
| "DEACTIVATING"
| "ERROR"
| "DELETE_PENDING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface UsageStatistics {
  SumByAccount?: UsageAccountResult[] | null;
  SumByDataSource?: UsageDataSourceResult[] | null;
  SumByResource?: UsageResourceResult[] | null;
  TopResources?: UsageResourceResult[] | null;
}
function toUsageStatistics(root: jsonP.JSONValue): UsageStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "SumByAccount": [toUsageAccountResult],
      "SumByDataSource": [toUsageDataSourceResult],
      "SumByResource": [toUsageResourceResult],
      "TopResources": [toUsageResourceResult],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UsageAccountResult {
  AccountId?: string | null;
  Total?: Total | null;
}
function toUsageAccountResult(root: jsonP.JSONValue): UsageAccountResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "Total": toTotal,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Total {
  Amount?: string | null;
  Unit?: string | null;
}
function toTotal(root: jsonP.JSONValue): Total {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amount": "s",
      "Unit": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UsageDataSourceResult {
  DataSource?: DataSource | null;
  Total?: Total | null;
}
function toUsageDataSourceResult(root: jsonP.JSONValue): UsageDataSourceResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSource": (x: jsonP.JSONValue) => cmnP.readEnum<DataSource>(x),
      "Total": toTotal,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface UsageResourceResult {
  Resource?: string | null;
  Total?: Total | null;
}
function toUsageResourceResult(root: jsonP.JSONValue): UsageResourceResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Resource": "s",
      "Total": toTotal,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Invitation {
  AccountId?: string | null;
  InvitationId?: string | null;
  RelationshipStatus?: string | null;
  InvitedAt?: string | null;
}
function toInvitation(root: jsonP.JSONValue): Invitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "InvitationId": "s",
      "RelationshipStatus": "s",
      "InvitedAt": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AdminAccount {
  AdminAccountId?: string | null;
  AdminStatus?: AdminStatus | null;
}
function toAdminAccount(root: jsonP.JSONValue): AdminAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdminAccountId": "s",
      "AdminStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AdminStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AdminStatus =
| "ENABLED"
| "DISABLE_IN_PROGRESS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Destination {
  DestinationId: string;
  DestinationType: DestinationType;
  Status: PublishingStatus;
}
function toDestination(root: jsonP.JSONValue): Destination {
  return jsonP.readObj({
    required: {
      "DestinationId": "s",
      "DestinationType": (x: jsonP.JSONValue) => cmnP.readEnum<DestinationType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<PublishingStatus>(x),
    },
    optional: {},
  }, root);
}
