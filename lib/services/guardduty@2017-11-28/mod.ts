// Autogenerated API client for: Amazon GuardDuty

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.91.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class GuardDuty {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(GuardDuty.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-11-28",
    "endpointPrefix": "guardduty",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon GuardDuty",
    "serviceId": "GuardDuty",
    "signatureVersion": "v4",
    "signingName": "guardduty",
    "uid": "guardduty-2017-11-28"
  };

  async acceptInvitation(
    {abortSignal, ...params}: RequestConfig & s.AcceptInvitationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      masterId: params["MasterId"],
      invitationId: params["InvitationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptInvitation",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/master`,
      responseCode: 200,
    });
    await resp.text();
  }

  async archiveFindings(
    {abortSignal, ...params}: RequestConfig & s.ArchiveFindingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ArchiveFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/archive`,
      responseCode: 200,
    });
    await resp.text();
  }

  async createDetector(
    {abortSignal, ...params}: RequestConfig & s.CreateDetectorRequest,
  ): Promise<s.CreateDetectorResponse> {
    const body: jsonP.JSONObject = {
      enable: params["Enable"],
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      findingPublishingFrequency: params["FindingPublishingFrequency"],
      dataSources: fromDataSourceConfigurations(params["DataSources"]),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDetector",
      requestUri: "/detector",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DetectorId": "s",
      },
    }, await resp.json());
  }

  async createFilter(
    {abortSignal, ...params}: RequestConfig & s.CreateFilterRequest,
  ): Promise<s.CreateFilterResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      description: params["Description"],
      action: params["Action"],
      rank: params["Rank"],
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFilter",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createIPSet(
    {abortSignal, ...params}: RequestConfig & s.CreateIPSetRequest,
  ): Promise<s.CreateIPSetResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      format: params["Format"],
      location: params["Location"],
      activate: params["Activate"],
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIPSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "IpSetId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createMembers(
    {abortSignal, ...params}: RequestConfig & s.CreateMembersRequest,
  ): Promise<s.CreateMembersResponse> {
    const body: jsonP.JSONObject = {
      accountDetails: params["AccountDetails"]?.map(x => fromAccountDetail(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async createPublishingDestination(
    {abortSignal, ...params}: RequestConfig & s.CreatePublishingDestinationRequest,
  ): Promise<s.CreatePublishingDestinationResponse> {
    const body: jsonP.JSONObject = {
      destinationType: params["DestinationType"],
      destinationProperties: fromDestinationProperties(params["DestinationProperties"]),
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePublishingDestination",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "DestinationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createSampleFindings(
    {abortSignal, ...params}: RequestConfig & s.CreateSampleFindingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      findingTypes: params["FindingTypes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSampleFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/create`,
      responseCode: 200,
    });
    await resp.text();
  }

  async createThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & s.CreateThreatIntelSetRequest,
  ): Promise<s.CreateThreatIntelSetResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      format: params["Format"],
      location: params["Location"],
      activate: params["Activate"],
      clientToken: params["ClientToken"] ?? generateIdemptToken(),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThreatIntelSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "ThreatIntelSetId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async declineInvitations(
    {abortSignal, ...params}: RequestConfig & s.DeclineInvitationsRequest,
  ): Promise<s.DeclineInvitationsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeclineInvitations",
      requestUri: "/invitation/decline",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async deleteDetector(
    {abortSignal, ...params}: RequestConfig & s.DeleteDetectorRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDetector",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async deleteFilter(
    {abortSignal, ...params}: RequestConfig & s.DeleteFilterRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFilter",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter/${params["FilterName"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async deleteIPSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteIPSetRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIPSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset/${params["IpSetId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async deleteInvitations(
    {abortSignal, ...params}: RequestConfig & s.DeleteInvitationsRequest,
  ): Promise<s.DeleteInvitationsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInvitations",
      requestUri: "/invitation/delete",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async deleteMembers(
    {abortSignal, ...params}: RequestConfig & s.DeleteMembersRequest,
  ): Promise<s.DeleteMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/delete`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async deletePublishingDestination(
    {abortSignal, ...params}: RequestConfig & s.DeletePublishingDestinationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePublishingDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination/${params["DestinationId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async deleteThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteThreatIntelSetRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteThreatIntelSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset/${params["ThreatIntelSetId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async describeOrganizationConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeOrganizationConfigurationRequest,
  ): Promise<s.DescribeOrganizationConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeOrganizationConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/admin`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "AutoEnable": "b",
        "MemberAccountLimitReached": "b",
      },
      optional: {
        "DataSources": toOrganizationDataSourceConfigurationsResult,
      },
    }, await resp.json());
  }

  async describePublishingDestination(
    {abortSignal, ...params}: RequestConfig & s.DescribePublishingDestinationRequest,
  ): Promise<s.DescribePublishingDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePublishingDestination",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination/${params["DestinationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "DestinationId": "s",
        "DestinationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DestinationType>(x),
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.PublishingStatus>(x),
        "PublishingFailureStartTimestamp": "n",
        "DestinationProperties": toDestinationProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async disableOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & s.DisableOrganizationAdminAccountRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["AdminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableOrganizationAdminAccount",
      requestUri: "/admin/disable",
      responseCode: 200,
    });
    await resp.text();
  }

  async disassociateFromMasterAccount(
    {abortSignal, ...params}: RequestConfig & s.DisassociateFromMasterAccountRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateFromMasterAccount",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/master/disassociate`,
      responseCode: 200,
    });
    await resp.text();
  }

  async disassociateMembers(
    {abortSignal, ...params}: RequestConfig & s.DisassociateMembersRequest,
  ): Promise<s.DisassociateMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/disassociate`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async enableOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & s.EnableOrganizationAdminAccountRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["AdminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableOrganizationAdminAccount",
      requestUri: "/admin/enable",
      responseCode: 200,
    });
    await resp.text();
  }

  async getDetector(
    {abortSignal, ...params}: RequestConfig & s.GetDetectorRequest,
  ): Promise<s.GetDetectorResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDetector",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "ServiceRole": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DetectorStatus>(x),
      },
      optional: {
        "CreatedAt": "s",
        "FindingPublishingFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.FindingPublishingFrequency>(x),
        "UpdatedAt": "s",
        "DataSources": toDataSourceConfigurationsResult,
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getFilter(
    {abortSignal, ...params}: RequestConfig & s.GetFilterRequest,
  ): Promise<s.GetFilterResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFilter",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter/${params["FilterName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
        "Action": (x: jsonP.JSONValue) => cmnP.readEnum<s.FilterAction>(x),
        "FindingCriteria": toFindingCriteria,
      },
      optional: {
        "Description": "s",
        "Rank": "n",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getFindings(
    {abortSignal, ...params}: RequestConfig & s.GetFindingsRequest,
  ): Promise<s.GetFindingsResponse> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
      sortCriteria: fromSortCriteria(params["SortCriteria"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/get`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Findings": [toFinding],
      },
      optional: {},
    }, await resp.json());
  }

  async getFindingsStatistics(
    {abortSignal, ...params}: RequestConfig & s.GetFindingsStatisticsRequest,
  ): Promise<s.GetFindingsStatisticsResponse> {
    const body: jsonP.JSONObject = {
      findingStatisticTypes: params["FindingStatisticTypes"],
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFindingsStatistics",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "FindingStatistics": toFindingStatistics,
      },
      optional: {},
    }, await resp.json());
  }

  async getIPSet(
    {abortSignal, ...params}: RequestConfig & s.GetIPSetRequest,
  ): Promise<s.GetIPSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetIPSet",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset/${params["IpSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
        "Format": (x: jsonP.JSONValue) => cmnP.readEnum<s.IpSetFormat>(x),
        "Location": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.IpSetStatus>(x),
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getInvitationsCount(
    {abortSignal}: RequestConfig = {},
  ): Promise<s.GetInvitationsCountResponse> {
    const body: jsonP.JSONObject = {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInvitationsCount",
      method: "GET",
      requestUri: "/invitation/count",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InvitationsCount": "n",
      },
    }, await resp.json());
  }

  async getMasterAccount(
    {abortSignal, ...params}: RequestConfig & s.GetMasterAccountRequest,
  ): Promise<s.GetMasterAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMasterAccount",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/master`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Master": toMaster,
      },
      optional: {},
    }, await resp.json());
  }

  async getMemberDetectors(
    {abortSignal, ...params}: RequestConfig & s.GetMemberDetectorsRequest,
  ): Promise<s.GetMemberDetectorsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMemberDetectors",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/detector/get`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "MemberDataSourceConfigurations": [toMemberDataSourceConfiguration],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async getMembers(
    {abortSignal, ...params}: RequestConfig & s.GetMembersRequest,
  ): Promise<s.GetMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/get`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Members": [toMember],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async getThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & s.GetThreatIntelSetRequest,
  ): Promise<s.GetThreatIntelSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetThreatIntelSet",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset/${params["ThreatIntelSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
        "Format": (x: jsonP.JSONValue) => cmnP.readEnum<s.ThreatIntelSetFormat>(x),
        "Location": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ThreatIntelSetStatus>(x),
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getUsageStatistics(
    {abortSignal, ...params}: RequestConfig & s.GetUsageStatisticsRequest,
  ): Promise<s.GetUsageStatisticsResponse> {
    const body: jsonP.JSONObject = {
      usageStatisticsType: params["UsageStatisticType"],
      usageCriteria: fromUsageCriteria(params["UsageCriteria"]),
      unit: params["Unit"],
      maxResults: params["MaxResults"],
      nextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUsageStatistics",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/usage/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UsageStatistics": toUsageStatistics,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async inviteMembers(
    {abortSignal, ...params}: RequestConfig & s.InviteMembersRequest,
  ): Promise<s.InviteMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
      disableEmailNotification: params["DisableEmailNotification"],
      message: params["Message"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InviteMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/invite`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async listDetectors(
    {abortSignal, ...params}: RequestConfig & s.ListDetectorsRequest = {},
  ): Promise<s.ListDetectorsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDetectors",
      method: "GET",
      requestUri: "/detector",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "DetectorIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFilters(
    {abortSignal, ...params}: RequestConfig & s.ListFiltersRequest,
  ): Promise<s.ListFiltersResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFilters",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "FilterNames": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFindings(
    {abortSignal, ...params}: RequestConfig & s.ListFindingsRequest,
  ): Promise<s.ListFindingsResponse> {
    const body: jsonP.JSONObject = {
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
      sortCriteria: fromSortCriteria(params["SortCriteria"]),
      maxResults: params["MaxResults"],
      nextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "FindingIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIPSets(
    {abortSignal, ...params}: RequestConfig & s.ListIPSetsRequest,
  ): Promise<s.ListIPSetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIPSets",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "IpSetIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInvitations(
    {abortSignal, ...params}: RequestConfig & s.ListInvitationsRequest = {},
  ): Promise<s.ListInvitationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInvitations",
      method: "GET",
      requestUri: "/invitation",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Invitations": [toInvitation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMembers(
    {abortSignal, ...params}: RequestConfig & s.ListMembersRequest,
  ): Promise<s.ListMembersResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["OnlyAssociated"] != null) query.set("onlyAssociated", params["OnlyAssociated"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMembers",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Members": [toMember],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizationAdminAccounts(
    {abortSignal, ...params}: RequestConfig & s.ListOrganizationAdminAccountsRequest = {},
  ): Promise<s.ListOrganizationAdminAccountsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListOrganizationAdminAccounts",
      method: "GET",
      requestUri: "/admin",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AdminAccounts": [toAdminAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPublishingDestinations(
    {abortSignal, ...params}: RequestConfig & s.ListPublishingDestinationsRequest,
  ): Promise<s.ListPublishingDestinationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPublishingDestinations",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Destinations": [toDestination],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listThreatIntelSets(
    {abortSignal, ...params}: RequestConfig & s.ListThreatIntelSetsRequest,
  ): Promise<s.ListThreatIntelSetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThreatIntelSets",
      method: "GET",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "ThreatIntelSetIds": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startMonitoringMembers(
    {abortSignal, ...params}: RequestConfig & s.StartMonitoringMembersRequest,
  ): Promise<s.StartMonitoringMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartMonitoringMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/start`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async stopMonitoringMembers(
    {abortSignal, ...params}: RequestConfig & s.StopMonitoringMembersRequest,
  ): Promise<s.StopMonitoringMembersResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopMonitoringMembers",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/stop`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async unarchiveFindings(
    {abortSignal, ...params}: RequestConfig & s.UnarchiveFindingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnarchiveFindings",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/unarchive`,
      responseCode: 200,
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async updateDetector(
    {abortSignal, ...params}: RequestConfig & s.UpdateDetectorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      enable: params["Enable"],
      findingPublishingFrequency: params["FindingPublishingFrequency"],
      dataSources: fromDataSourceConfigurations(params["DataSources"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDetector",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async updateFilter(
    {abortSignal, ...params}: RequestConfig & s.UpdateFilterRequest,
  ): Promise<s.UpdateFilterResponse> {
    const body: jsonP.JSONObject = {
      description: params["Description"],
      action: params["Action"],
      rank: params["Rank"],
      findingCriteria: fromFindingCriteria(params["FindingCriteria"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFilter",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/filter/${params["FilterName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Name": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateFindingsFeedback(
    {abortSignal, ...params}: RequestConfig & s.UpdateFindingsFeedbackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      findingIds: params["FindingIds"],
      feedback: params["Feedback"],
      comments: params["Comments"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFindingsFeedback",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/findings/feedback`,
      responseCode: 200,
    });
    await resp.text();
  }

  async updateIPSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateIPSetRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      location: params["Location"],
      activate: params["Activate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIPSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/ipset/${params["IpSetId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async updateMemberDetectors(
    {abortSignal, ...params}: RequestConfig & s.UpdateMemberDetectorsRequest,
  ): Promise<s.UpdateMemberDetectorsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["AccountIds"],
      dataSources: fromDataSourceConfigurations(params["DataSources"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMemberDetectors",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/member/detector/update`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
      optional: {},
    }, await resp.json());
  }

  async updateOrganizationConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateOrganizationConfigurationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      autoEnable: params["AutoEnable"],
      dataSources: fromOrganizationDataSourceConfigurations(params["DataSources"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateOrganizationConfiguration",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/admin`,
      responseCode: 200,
    });
    await resp.text();
  }

  async updatePublishingDestination(
    {abortSignal, ...params}: RequestConfig & s.UpdatePublishingDestinationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      destinationProperties: fromDestinationProperties(params["DestinationProperties"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePublishingDestination",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/publishingDestination/${params["DestinationId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

  async updateThreatIntelSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateThreatIntelSetRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      location: params["Location"],
      activate: params["Activate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThreatIntelSet",
      requestUri: cmnP.encodePath`/detector/${params["DetectorId"]}/threatintelset/${params["ThreatIntelSetId"]}`,
      responseCode: 200,
    });
    await resp.text();
  }

}

function fromDataSourceConfigurations(input?: s.DataSourceConfigurations | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Logs: fromS3LogsConfiguration(input["S3Logs"]),
  }
}

function fromS3LogsConfiguration(input?: s.S3LogsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enable: input["Enable"],
  }
}

function fromFindingCriteria(input?: s.FindingCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    criterion: jsonP.serializeMap(input["Criterion"], x => fromCondition(x)),
  }
}
function toFindingCriteria(root: jsonP.JSONValue): s.FindingCriteria {
  return jsonP.readObj({
    required: {},
    optional: {
      "Criterion": x => jsonP.readMap(String, toCondition, x),
    },
  }, root);
}

function fromCondition(input?: s.Condition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eq: input["Eq"],
    neq: input["Neq"],
    gt: input["Gt"],
    gte: input["Gte"],
    lt: input["Lt"],
    lte: input["Lte"],
    equals: input["Equals"],
    notEquals: input["NotEquals"],
    greaterThan: input["GreaterThan"],
    greaterThanOrEqual: input["GreaterThanOrEqual"],
    lessThan: input["LessThan"],
    lessThanOrEqual: input["LessThanOrEqual"],
  }
}
function toCondition(root: jsonP.JSONValue): s.Condition {
  return jsonP.readObj({
    required: {},
    optional: {
      "Eq": ["s"],
      "Neq": ["s"],
      "Gt": "n",
      "Gte": "n",
      "Lt": "n",
      "Lte": "n",
      "Equals": ["s"],
      "NotEquals": ["s"],
      "GreaterThan": "n",
      "GreaterThanOrEqual": "n",
      "LessThan": "n",
      "LessThanOrEqual": "n",
    },
  }, root);
}

function fromAccountDetail(input?: s.AccountDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accountId: input["AccountId"],
    email: input["Email"],
  }
}

function fromDestinationProperties(input?: s.DestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    destinationArn: input["DestinationArn"],
    kmsKeyArn: input["KmsKeyArn"],
  }
}
function toDestinationProperties(root: jsonP.JSONValue): s.DestinationProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationArn": "s",
      "KmsKeyArn": "s",
    },
  }, root);
}

function fromSortCriteria(input?: s.SortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributeName: input["AttributeName"],
    orderBy: input["OrderBy"],
  }
}

function fromUsageCriteria(input?: s.UsageCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accountIds: input["AccountIds"],
    dataSources: input["DataSources"],
    resources: input["Resources"],
  }
}

function fromOrganizationDataSourceConfigurations(input?: s.OrganizationDataSourceConfigurations | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Logs: fromOrganizationS3LogsConfiguration(input["S3Logs"]),
  }
}

function fromOrganizationS3LogsConfiguration(input?: s.OrganizationS3LogsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    autoEnable: input["AutoEnable"],
  }
}

function toUnprocessedAccount(root: jsonP.JSONValue): s.UnprocessedAccount {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "Result": "s",
    },
    optional: {},
  }, root);
}

function toOrganizationDataSourceConfigurationsResult(root: jsonP.JSONValue): s.OrganizationDataSourceConfigurationsResult {
  return jsonP.readObj({
    required: {
      "S3Logs": toOrganizationS3LogsConfigurationResult,
    },
    optional: {},
  }, root);
}

function toOrganizationS3LogsConfigurationResult(root: jsonP.JSONValue): s.OrganizationS3LogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "AutoEnable": "b",
    },
    optional: {},
  }, root);
}

function toDataSourceConfigurationsResult(root: jsonP.JSONValue): s.DataSourceConfigurationsResult {
  return jsonP.readObj({
    required: {
      "CloudTrail": toCloudTrailConfigurationResult,
      "DNSLogs": toDNSLogsConfigurationResult,
      "FlowLogs": toFlowLogsConfigurationResult,
      "S3Logs": toS3LogsConfigurationResult,
    },
    optional: {},
  }, root);
}

function toCloudTrailConfigurationResult(root: jsonP.JSONValue): s.CloudTrailConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

function toDNSLogsConfigurationResult(root: jsonP.JSONValue): s.DNSLogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

function toFlowLogsConfigurationResult(root: jsonP.JSONValue): s.FlowLogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

function toS3LogsConfigurationResult(root: jsonP.JSONValue): s.S3LogsConfigurationResult {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSourceStatus>(x),
    },
    optional: {},
  }, root);
}

function toFinding(root: jsonP.JSONValue): s.Finding {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "Arn": "s",
      "CreatedAt": "s",
      "Id": "s",
      "Region": "s",
      "Resource": toResource,
      "SchemaVersion": "s",
      "Severity": "n",
      "Type": "s",
      "UpdatedAt": "s",
    },
    optional: {
      "Confidence": "n",
      "Description": "s",
      "Partition": "s",
      "Service": toService,
      "Title": "s",
    },
  }, root);
}

function toResource(root: jsonP.JSONValue): s.Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessKeyDetails": toAccessKeyDetails,
      "S3BucketDetails": [toS3BucketDetail],
      "InstanceDetails": toInstanceDetails,
      "ResourceType": "s",
    },
  }, root);
}

function toAccessKeyDetails(root: jsonP.JSONValue): s.AccessKeyDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessKeyId": "s",
      "PrincipalId": "s",
      "UserName": "s",
      "UserType": "s",
    },
  }, root);
}

function toS3BucketDetail(root: jsonP.JSONValue): s.S3BucketDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Type": "s",
      "CreatedAt": "d",
      "Owner": toOwner,
      "Tags": [toTag],
      "DefaultServerSideEncryption": toDefaultServerSideEncryption,
      "PublicAccess": toPublicAccess,
    },
  }, root);
}

function toOwner(root: jsonP.JSONValue): s.Owner {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
    },
  }, root);
}

function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

function toDefaultServerSideEncryption(root: jsonP.JSONValue): s.DefaultServerSideEncryption {
  return jsonP.readObj({
    required: {},
    optional: {
      "EncryptionType": "s",
      "KmsMasterKeyArn": "s",
    },
  }, root);
}

function toPublicAccess(root: jsonP.JSONValue): s.PublicAccess {
  return jsonP.readObj({
    required: {},
    optional: {
      "PermissionConfiguration": toPermissionConfiguration,
      "EffectivePermission": "s",
    },
  }, root);
}

function toPermissionConfiguration(root: jsonP.JSONValue): s.PermissionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "BucketLevelPermissions": toBucketLevelPermissions,
      "AccountLevelPermissions": toAccountLevelPermissions,
    },
  }, root);
}

function toBucketLevelPermissions(root: jsonP.JSONValue): s.BucketLevelPermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessControlList": toAccessControlList,
      "BucketPolicy": toBucketPolicy,
      "BlockPublicAccess": toBlockPublicAccess,
    },
  }, root);
}

function toAccessControlList(root: jsonP.JSONValue): s.AccessControlList {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowsPublicReadAccess": "b",
      "AllowsPublicWriteAccess": "b",
    },
  }, root);
}

function toBucketPolicy(root: jsonP.JSONValue): s.BucketPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowsPublicReadAccess": "b",
      "AllowsPublicWriteAccess": "b",
    },
  }, root);
}

function toBlockPublicAccess(root: jsonP.JSONValue): s.BlockPublicAccess {
  return jsonP.readObj({
    required: {},
    optional: {
      "IgnorePublicAcls": "b",
      "RestrictPublicBuckets": "b",
      "BlockPublicAcls": "b",
      "BlockPublicPolicy": "b",
    },
  }, root);
}

function toAccountLevelPermissions(root: jsonP.JSONValue): s.AccountLevelPermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "BlockPublicAccess": toBlockPublicAccess,
    },
  }, root);
}

function toInstanceDetails(root: jsonP.JSONValue): s.InstanceDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "AvailabilityZone": "s",
      "IamInstanceProfile": toIamInstanceProfile,
      "ImageDescription": "s",
      "ImageId": "s",
      "InstanceId": "s",
      "InstanceState": "s",
      "InstanceType": "s",
      "OutpostArn": "s",
      "LaunchTime": "s",
      "NetworkInterfaces": [toNetworkInterface],
      "Platform": "s",
      "ProductCodes": [toProductCode],
      "Tags": [toTag],
    },
  }, root);
}

function toIamInstanceProfile(root: jsonP.JSONValue): s.IamInstanceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
    },
  }, root);
}

function toNetworkInterface(root: jsonP.JSONValue): s.NetworkInterface {
  return jsonP.readObj({
    required: {},
    optional: {
      "Ipv6Addresses": ["s"],
      "NetworkInterfaceId": "s",
      "PrivateDnsName": "s",
      "PrivateIpAddress": "s",
      "PrivateIpAddresses": [toPrivateIpAddressDetails],
      "PublicDnsName": "s",
      "PublicIp": "s",
      "SecurityGroups": [toSecurityGroup],
      "SubnetId": "s",
      "VpcId": "s",
    },
  }, root);
}

function toPrivateIpAddressDetails(root: jsonP.JSONValue): s.PrivateIpAddressDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrivateDnsName": "s",
      "PrivateIpAddress": "s",
    },
  }, root);
}

function toSecurityGroup(root: jsonP.JSONValue): s.SecurityGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupId": "s",
      "GroupName": "s",
    },
  }, root);
}

function toProductCode(root: jsonP.JSONValue): s.ProductCode {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": "s",
      "ProductType": "s",
    },
  }, root);
}

function toService(root: jsonP.JSONValue): s.Service {
  return jsonP.readObj({
    required: {},
    optional: {
      "Action": toAction,
      "Evidence": toEvidence,
      "Archived": "b",
      "Count": "n",
      "DetectorId": "s",
      "EventFirstSeen": "s",
      "EventLastSeen": "s",
      "ResourceRole": "s",
      "ServiceName": "s",
      "UserFeedback": "s",
    },
  }, root);
}

function toAction(root: jsonP.JSONValue): s.Action {
  return jsonP.readObj({
    required: {},
    optional: {
      "ActionType": "s",
      "AwsApiCallAction": toAwsApiCallAction,
      "DnsRequestAction": toDnsRequestAction,
      "NetworkConnectionAction": toNetworkConnectionAction,
      "PortProbeAction": toPortProbeAction,
    },
  }, root);
}

function toAwsApiCallAction(root: jsonP.JSONValue): s.AwsApiCallAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Api": "s",
      "CallerType": "s",
      "DomainDetails": toDomainDetails,
      "ErrorCode": "s",
      "RemoteIpDetails": toRemoteIpDetails,
      "ServiceName": "s",
    },
  }, root);
}

function toDomainDetails(root: jsonP.JSONValue): s.DomainDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Domain": "s",
    },
  }, root);
}

function toRemoteIpDetails(root: jsonP.JSONValue): s.RemoteIpDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "City": toCity,
      "Country": toCountry,
      "GeoLocation": toGeoLocation,
      "IpAddressV4": "s",
      "Organization": toOrganization,
    },
  }, root);
}

function toCity(root: jsonP.JSONValue): s.City {
  return jsonP.readObj({
    required: {},
    optional: {
      "CityName": "s",
    },
  }, root);
}

function toCountry(root: jsonP.JSONValue): s.Country {
  return jsonP.readObj({
    required: {},
    optional: {
      "CountryCode": "s",
      "CountryName": "s",
    },
  }, root);
}

function toGeoLocation(root: jsonP.JSONValue): s.GeoLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Lat": "n",
      "Lon": "n",
    },
  }, root);
}

function toOrganization(root: jsonP.JSONValue): s.Organization {
  return jsonP.readObj({
    required: {},
    optional: {
      "Asn": "s",
      "AsnOrg": "s",
      "Isp": "s",
      "Org": "s",
    },
  }, root);
}

function toDnsRequestAction(root: jsonP.JSONValue): s.DnsRequestAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Domain": "s",
    },
  }, root);
}

function toNetworkConnectionAction(root: jsonP.JSONValue): s.NetworkConnectionAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Blocked": "b",
      "ConnectionDirection": "s",
      "LocalPortDetails": toLocalPortDetails,
      "Protocol": "s",
      "LocalIpDetails": toLocalIpDetails,
      "RemoteIpDetails": toRemoteIpDetails,
      "RemotePortDetails": toRemotePortDetails,
    },
  }, root);
}

function toLocalPortDetails(root: jsonP.JSONValue): s.LocalPortDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Port": "n",
      "PortName": "s",
    },
  }, root);
}

function toLocalIpDetails(root: jsonP.JSONValue): s.LocalIpDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "IpAddressV4": "s",
    },
  }, root);
}

function toRemotePortDetails(root: jsonP.JSONValue): s.RemotePortDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Port": "n",
      "PortName": "s",
    },
  }, root);
}

function toPortProbeAction(root: jsonP.JSONValue): s.PortProbeAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "Blocked": "b",
      "PortProbeDetails": [toPortProbeDetail],
    },
  }, root);
}

function toPortProbeDetail(root: jsonP.JSONValue): s.PortProbeDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "LocalPortDetails": toLocalPortDetails,
      "LocalIpDetails": toLocalIpDetails,
      "RemoteIpDetails": toRemoteIpDetails,
    },
  }, root);
}

function toEvidence(root: jsonP.JSONValue): s.Evidence {
  return jsonP.readObj({
    required: {},
    optional: {
      "ThreatIntelligenceDetails": [toThreatIntelligenceDetail],
    },
  }, root);
}

function toThreatIntelligenceDetail(root: jsonP.JSONValue): s.ThreatIntelligenceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ThreatListName": "s",
      "ThreatNames": ["s"],
    },
  }, root);
}

function toFindingStatistics(root: jsonP.JSONValue): s.FindingStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "CountBySeverity": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

function toMaster(root: jsonP.JSONValue): s.Master {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "InvitationId": "s",
      "RelationshipStatus": "s",
      "InvitedAt": "s",
    },
  }, root);
}

function toMemberDataSourceConfiguration(root: jsonP.JSONValue): s.MemberDataSourceConfiguration {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "DataSources": toDataSourceConfigurationsResult,
    },
    optional: {},
  }, root);
}

function toMember(root: jsonP.JSONValue): s.Member {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "MasterId": "s",
      "Email": "s",
      "RelationshipStatus": "s",
      "UpdatedAt": "s",
    },
    optional: {
      "DetectorId": "s",
      "InvitedAt": "s",
    },
  }, root);
}

function toUsageStatistics(root: jsonP.JSONValue): s.UsageStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "SumByAccount": [toUsageAccountResult],
      "SumByDataSource": [toUsageDataSourceResult],
      "SumByResource": [toUsageResourceResult],
      "TopResources": [toUsageResourceResult],
    },
  }, root);
}

function toUsageAccountResult(root: jsonP.JSONValue): s.UsageAccountResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "Total": toTotal,
    },
  }, root);
}

function toTotal(root: jsonP.JSONValue): s.Total {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amount": "s",
      "Unit": "s",
    },
  }, root);
}

function toUsageDataSourceResult(root: jsonP.JSONValue): s.UsageDataSourceResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataSource": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataSource>(x),
      "Total": toTotal,
    },
  }, root);
}

function toUsageResourceResult(root: jsonP.JSONValue): s.UsageResourceResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Resource": "s",
      "Total": toTotal,
    },
  }, root);
}

function toInvitation(root: jsonP.JSONValue): s.Invitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "InvitationId": "s",
      "RelationshipStatus": "s",
      "InvitedAt": "s",
    },
  }, root);
}

function toAdminAccount(root: jsonP.JSONValue): s.AdminAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdminAccountId": "s",
      "AdminStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.AdminStatus>(x),
    },
  }, root);
}

function toDestination(root: jsonP.JSONValue): s.Destination {
  return jsonP.readObj({
    required: {
      "DestinationId": "s",
      "DestinationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DestinationType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.PublishingStatus>(x),
    },
    optional: {},
  }, root);
}
