// Autogenerated API client for: AWS Single Sign-On

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class SSO {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SSO.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-06-10",
    "endpointPrefix": "portal.sso",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "SSO",
    "serviceFullName": "AWS Single Sign-On",
    "serviceId": "SSO",
    "signatureVersion": "v4",
    "signingName": "awsssoportal",
    "uid": "sso-2019-06-10"
  };

  async getRoleCredentials(
    {abortSignal, ...params}: RequestConfig & GetRoleCredentialsRequest,
  ): Promise<GetRoleCredentialsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    query.set("role_name", params["roleName"]?.toString() ?? "");
    query.set("account_id", params["accountId"]?.toString() ?? "");
    headers.append("x-amz-sso_bearer_token", params["accessToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetRoleCredentials",
      method: "GET",
      requestUri: "/federation/credentials",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "roleCredentials": toRoleCredentials,
      },
    }, await resp.json());
  }

  async listAccountRoles(
    {abortSignal, ...params}: RequestConfig & ListAccountRolesRequest,
  ): Promise<ListAccountRolesResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("next_token", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("max_result", params["maxResults"]?.toString() ?? "");
    headers.append("x-amz-sso_bearer_token", params["accessToken"]);
    query.set("account_id", params["accountId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListAccountRoles",
      method: "GET",
      requestUri: "/assignment/roles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "roleList": [toRoleInfo],
      },
    }, await resp.json());
  }

  async listAccounts(
    {abortSignal, ...params}: RequestConfig & ListAccountsRequest,
  ): Promise<ListAccountsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("next_token", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("max_result", params["maxResults"]?.toString() ?? "");
    headers.append("x-amz-sso_bearer_token", params["accessToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListAccounts",
      method: "GET",
      requestUri: "/assignment/accounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "accountList": [toAccountInfo],
      },
    }, await resp.json());
  }

  async logout(
    {abortSignal, ...params}: RequestConfig & LogoutRequest,
  ): Promise<void> {
    const headers = new Headers;
    headers.append("x-amz-sso_bearer_token", params["accessToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "Logout",
      requestUri: "/logout",
    });
  }

}

// refs: 1 - tags: named, input
export interface GetRoleCredentialsRequest {
  roleName: string;
  accountId: string;
  accessToken: string;
}

// refs: 1 - tags: named, input
export interface ListAccountRolesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  accessToken: string;
  accountId: string;
}

// refs: 1 - tags: named, input
export interface ListAccountsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  accessToken: string;
}

// refs: 1 - tags: named, input
export interface LogoutRequest {
  accessToken: string;
}

// refs: 1 - tags: named, output
export interface GetRoleCredentialsResponse {
  roleCredentials?: RoleCredentials | null;
}

// refs: 1 - tags: named, output
export interface ListAccountRolesResponse {
  nextToken?: string | null;
  roleList?: RoleInfo[] | null;
}

// refs: 1 - tags: named, output
export interface ListAccountsResponse {
  nextToken?: string | null;
  accountList?: AccountInfo[] | null;
}

// refs: 1 - tags: output, named, interface
export interface RoleCredentials {
  accessKeyId?: string | null;
  secretAccessKey?: string | null;
  sessionToken?: string | null;
  expiration?: number | null;
}
function toRoleCredentials(root: jsonP.JSONValue): RoleCredentials {
  return jsonP.readObj({
    required: {},
    optional: {
      "accessKeyId": "s",
      "secretAccessKey": "s",
      "sessionToken": "s",
      "expiration": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RoleInfo {
  roleName?: string | null;
  accountId?: string | null;
}
function toRoleInfo(root: jsonP.JSONValue): RoleInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "roleName": "s",
      "accountId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccountInfo {
  accountId?: string | null;
  accountName?: string | null;
  emailAddress?: string | null;
}
function toAccountInfo(root: jsonP.JSONValue): AccountInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "accountName": "s",
      "emailAddress": "s",
    },
  }, root);
}
