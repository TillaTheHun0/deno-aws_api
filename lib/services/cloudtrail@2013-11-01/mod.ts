// Autogenerated API client for: AWS CloudTrail

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CloudTrail {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CloudTrail.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2013-11-01",
    "endpointPrefix": "cloudtrail",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "CloudTrail",
    "serviceFullName": "AWS CloudTrail",
    "serviceId": "CloudTrail",
    "signatureVersion": "v4",
    "targetPrefix": "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101",
    "uid": "cloudtrail-2013-11-01"
  };

  async addTags(
    {abortSignal, ...params}: RequestConfig & AddTagsRequest,
  ): Promise<AddTagsResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceId: params["ResourceId"],
      TagsList: params["TagsList"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createTrail(
    {abortSignal, ...params}: RequestConfig & CreateTrailRequest,
  ): Promise<CreateTrailResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      S3BucketName: params["S3BucketName"],
      S3KeyPrefix: params["S3KeyPrefix"],
      SnsTopicName: params["SnsTopicName"],
      IncludeGlobalServiceEvents: params["IncludeGlobalServiceEvents"],
      IsMultiRegionTrail: params["IsMultiRegionTrail"],
      EnableLogFileValidation: params["EnableLogFileValidation"],
      CloudWatchLogsLogGroupArn: params["CloudWatchLogsLogGroupArn"],
      CloudWatchLogsRoleArn: params["CloudWatchLogsRoleArn"],
      KmsKeyId: params["KmsKeyId"],
      IsOrganizationTrail: params["IsOrganizationTrail"],
      TagsList: params["TagsList"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "S3BucketName": "s",
        "S3KeyPrefix": "s",
        "SnsTopicName": "s",
        "SnsTopicARN": "s",
        "IncludeGlobalServiceEvents": "b",
        "IsMultiRegionTrail": "b",
        "TrailARN": "s",
        "LogFileValidationEnabled": "b",
        "CloudWatchLogsLogGroupArn": "s",
        "CloudWatchLogsRoleArn": "s",
        "KmsKeyId": "s",
        "IsOrganizationTrail": "b",
      },
    }, await resp.json());
  }

  async deleteTrail(
    {abortSignal, ...params}: RequestConfig & DeleteTrailRequest,
  ): Promise<DeleteTrailResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeTrails(
    {abortSignal, ...params}: RequestConfig & DescribeTrailsRequest = {},
  ): Promise<DescribeTrailsResponse> {
    const body: jsonP.JSONObject = params ? {
      trailNameList: params["trailNameList"],
      includeShadowTrails: params["includeShadowTrails"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTrails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "trailList": [toTrail],
      },
    }, await resp.json());
  }

  async getEventSelectors(
    {abortSignal, ...params}: RequestConfig & GetEventSelectorsRequest,
  ): Promise<GetEventSelectorsResponse> {
    const body: jsonP.JSONObject = params ? {
      TrailName: params["TrailName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEventSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "EventSelectors": [toEventSelector],
      },
    }, await resp.json());
  }

  async getInsightSelectors(
    {abortSignal, ...params}: RequestConfig & GetInsightSelectorsRequest,
  ): Promise<GetInsightSelectorsResponse> {
    const body: jsonP.JSONObject = params ? {
      TrailName: params["TrailName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInsightSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "InsightSelectors": [toInsightSelector],
      },
    }, await resp.json());
  }

  async getTrail(
    {abortSignal, ...params}: RequestConfig & GetTrailRequest,
  ): Promise<GetTrailResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Trail": toTrail,
      },
    }, await resp.json());
  }

  async getTrailStatus(
    {abortSignal, ...params}: RequestConfig & GetTrailStatusRequest,
  ): Promise<GetTrailStatusResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTrailStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IsLogging": "b",
        "LatestDeliveryError": "s",
        "LatestNotificationError": "s",
        "LatestDeliveryTime": "d",
        "LatestNotificationTime": "d",
        "StartLoggingTime": "d",
        "StopLoggingTime": "d",
        "LatestCloudWatchLogsDeliveryError": "s",
        "LatestCloudWatchLogsDeliveryTime": "d",
        "LatestDigestDeliveryTime": "d",
        "LatestDigestDeliveryError": "s",
        "LatestDeliveryAttemptTime": "s",
        "LatestNotificationAttemptTime": "s",
        "LatestNotificationAttemptSucceeded": "s",
        "LatestDeliveryAttemptSucceeded": "s",
        "TimeLoggingStarted": "s",
        "TimeLoggingStopped": "s",
      },
    }, await resp.json());
  }

  async listPublicKeys(
    {abortSignal, ...params}: RequestConfig & ListPublicKeysRequest = {},
  ): Promise<ListPublicKeysResponse> {
    const body: jsonP.JSONObject = params ? {
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPublicKeys",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PublicKeyList": [toPublicKey],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & ListTagsRequest,
  ): Promise<ListTagsResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceIdList: params["ResourceIdList"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceTagList": [toResourceTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTrails(
    {abortSignal, ...params}: RequestConfig & ListTrailsRequest = {},
  ): Promise<ListTrailsResponse> {
    const body: jsonP.JSONObject = params ? {
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTrails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Trails": [toTrailInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async lookupEvents(
    {abortSignal, ...params}: RequestConfig & LookupEventsRequest = {},
  ): Promise<LookupEventsResponse> {
    const body: jsonP.JSONObject = params ? {
      LookupAttributes: params["LookupAttributes"]?.map(x => fromLookupAttribute(x)),
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      EventCategory: params["EventCategory"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "LookupEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Events": [toEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putEventSelectors(
    {abortSignal, ...params}: RequestConfig & PutEventSelectorsRequest,
  ): Promise<PutEventSelectorsResponse> {
    const body: jsonP.JSONObject = params ? {
      TrailName: params["TrailName"],
      EventSelectors: params["EventSelectors"]?.map(x => fromEventSelector(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEventSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "EventSelectors": [toEventSelector],
      },
    }, await resp.json());
  }

  async putInsightSelectors(
    {abortSignal, ...params}: RequestConfig & PutInsightSelectorsRequest,
  ): Promise<PutInsightSelectorsResponse> {
    const body: jsonP.JSONObject = params ? {
      TrailName: params["TrailName"],
      InsightSelectors: params["InsightSelectors"]?.map(x => fromInsightSelector(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInsightSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "InsightSelectors": [toInsightSelector],
      },
    }, await resp.json());
  }

  async removeTags(
    {abortSignal, ...params}: RequestConfig & RemoveTagsRequest,
  ): Promise<RemoveTagsResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceId: params["ResourceId"],
      TagsList: params["TagsList"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startLogging(
    {abortSignal, ...params}: RequestConfig & StartLoggingRequest,
  ): Promise<StartLoggingResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartLogging",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopLogging(
    {abortSignal, ...params}: RequestConfig & StopLoggingRequest,
  ): Promise<StopLoggingResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopLogging",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateTrail(
    {abortSignal, ...params}: RequestConfig & UpdateTrailRequest,
  ): Promise<UpdateTrailResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      S3BucketName: params["S3BucketName"],
      S3KeyPrefix: params["S3KeyPrefix"],
      SnsTopicName: params["SnsTopicName"],
      IncludeGlobalServiceEvents: params["IncludeGlobalServiceEvents"],
      IsMultiRegionTrail: params["IsMultiRegionTrail"],
      EnableLogFileValidation: params["EnableLogFileValidation"],
      CloudWatchLogsLogGroupArn: params["CloudWatchLogsLogGroupArn"],
      CloudWatchLogsRoleArn: params["CloudWatchLogsRoleArn"],
      KmsKeyId: params["KmsKeyId"],
      IsOrganizationTrail: params["IsOrganizationTrail"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "S3BucketName": "s",
        "S3KeyPrefix": "s",
        "SnsTopicName": "s",
        "SnsTopicARN": "s",
        "IncludeGlobalServiceEvents": "b",
        "IsMultiRegionTrail": "b",
        "TrailARN": "s",
        "LogFileValidationEnabled": "b",
        "CloudWatchLogsLogGroupArn": "s",
        "CloudWatchLogsRoleArn": "s",
        "KmsKeyId": "s",
        "IsOrganizationTrail": "b",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AddTagsRequest {
  ResourceId: string;
  TagsList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTrailRequest {
  Name: string;
  S3BucketName: string;
  S3KeyPrefix?: string | null;
  SnsTopicName?: string | null;
  IncludeGlobalServiceEvents?: boolean | null;
  IsMultiRegionTrail?: boolean | null;
  EnableLogFileValidation?: boolean | null;
  CloudWatchLogsLogGroupArn?: string | null;
  CloudWatchLogsRoleArn?: string | null;
  KmsKeyId?: string | null;
  IsOrganizationTrail?: boolean | null;
  TagsList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteTrailRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DescribeTrailsRequest {
  trailNameList?: string[] | null;
  includeShadowTrails?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetEventSelectorsRequest {
  TrailName: string;
}

// refs: 1 - tags: named, input
export interface GetInsightSelectorsRequest {
  TrailName: string;
}

// refs: 1 - tags: named, input
export interface GetTrailRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface GetTrailStatusRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface ListPublicKeysRequest {
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsRequest {
  ResourceIdList: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTrailsRequest {
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface LookupEventsRequest {
  LookupAttributes?: LookupAttribute[] | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  EventCategory?: EventCategory | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PutEventSelectorsRequest {
  TrailName: string;
  EventSelectors: EventSelector[];
}

// refs: 1 - tags: named, input
export interface PutInsightSelectorsRequest {
  TrailName: string;
  InsightSelectors: InsightSelector[];
}

// refs: 1 - tags: named, input
export interface RemoveTagsRequest {
  ResourceId: string;
  TagsList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface StartLoggingRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface StopLoggingRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface UpdateTrailRequest {
  Name: string;
  S3BucketName?: string | null;
  S3KeyPrefix?: string | null;
  SnsTopicName?: string | null;
  IncludeGlobalServiceEvents?: boolean | null;
  IsMultiRegionTrail?: boolean | null;
  EnableLogFileValidation?: boolean | null;
  CloudWatchLogsLogGroupArn?: string | null;
  CloudWatchLogsRoleArn?: string | null;
  KmsKeyId?: string | null;
  IsOrganizationTrail?: boolean | null;
}

// refs: 1 - tags: named, output
export interface AddTagsResponse {
}

// refs: 1 - tags: named, output
export interface CreateTrailResponse {
  Name?: string | null;
  S3BucketName?: string | null;
  S3KeyPrefix?: string | null;
  SnsTopicName?: string | null;
  SnsTopicARN?: string | null;
  IncludeGlobalServiceEvents?: boolean | null;
  IsMultiRegionTrail?: boolean | null;
  TrailARN?: string | null;
  LogFileValidationEnabled?: boolean | null;
  CloudWatchLogsLogGroupArn?: string | null;
  CloudWatchLogsRoleArn?: string | null;
  KmsKeyId?: string | null;
  IsOrganizationTrail?: boolean | null;
}

// refs: 1 - tags: named, output
export interface DeleteTrailResponse {
}

// refs: 1 - tags: named, output
export interface DescribeTrailsResponse {
  trailList?: Trail[] | null;
}

// refs: 1 - tags: named, output
export interface GetEventSelectorsResponse {
  TrailARN?: string | null;
  EventSelectors?: EventSelector[] | null;
}

// refs: 1 - tags: named, output
export interface GetInsightSelectorsResponse {
  TrailARN?: string | null;
  InsightSelectors?: InsightSelector[] | null;
}

// refs: 1 - tags: named, output
export interface GetTrailResponse {
  Trail?: Trail | null;
}

// refs: 1 - tags: named, output
export interface GetTrailStatusResponse {
  IsLogging?: boolean | null;
  LatestDeliveryError?: string | null;
  LatestNotificationError?: string | null;
  LatestDeliveryTime?: Date | number | null;
  LatestNotificationTime?: Date | number | null;
  StartLoggingTime?: Date | number | null;
  StopLoggingTime?: Date | number | null;
  LatestCloudWatchLogsDeliveryError?: string | null;
  LatestCloudWatchLogsDeliveryTime?: Date | number | null;
  LatestDigestDeliveryTime?: Date | number | null;
  LatestDigestDeliveryError?: string | null;
  LatestDeliveryAttemptTime?: string | null;
  LatestNotificationAttemptTime?: string | null;
  LatestNotificationAttemptSucceeded?: string | null;
  LatestDeliveryAttemptSucceeded?: string | null;
  TimeLoggingStarted?: string | null;
  TimeLoggingStopped?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPublicKeysResponse {
  PublicKeyList?: PublicKey[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsResponse {
  ResourceTagList?: ResourceTag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTrailsResponse {
  Trails?: TrailInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface LookupEventsResponse {
  Events?: Event[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutEventSelectorsResponse {
  TrailARN?: string | null;
  EventSelectors?: EventSelector[] | null;
}

// refs: 1 - tags: named, output
export interface PutInsightSelectorsResponse {
  TrailARN?: string | null;
  InsightSelectors?: InsightSelector[] | null;
}

// refs: 1 - tags: named, output
export interface RemoveTagsResponse {
}

// refs: 1 - tags: named, output
export interface StartLoggingResponse {
}

// refs: 1 - tags: named, output
export interface StopLoggingResponse {
}

// refs: 1 - tags: named, output
export interface UpdateTrailResponse {
  Name?: string | null;
  S3BucketName?: string | null;
  S3KeyPrefix?: string | null;
  SnsTopicName?: string | null;
  SnsTopicARN?: string | null;
  IncludeGlobalServiceEvents?: boolean | null;
  IsMultiRegionTrail?: boolean | null;
  TrailARN?: string | null;
  LogFileValidationEnabled?: boolean | null;
  CloudWatchLogsLogGroupArn?: string | null;
  CloudWatchLogsRoleArn?: string | null;
  KmsKeyId?: string | null;
  IsOrganizationTrail?: boolean | null;
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface LookupAttribute {
  AttributeKey: LookupAttributeKey;
  AttributeValue: string;
}
function fromLookupAttribute(input?: LookupAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AttributeKey: input["AttributeKey"],
    AttributeValue: input["AttributeValue"],
  }
}

// refs: 1 - tags: input, named, enum
export type LookupAttributeKey =
| "EventId"
| "EventName"
| "ReadOnly"
| "Username"
| "ResourceType"
| "ResourceName"
| "EventSource"
| "AccessKeyId"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type EventCategory =
| "insight"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface EventSelector {
  ReadWriteType?: ReadWriteType | null;
  IncludeManagementEvents?: boolean | null;
  DataResources?: DataResource[] | null;
  ExcludeManagementEventSources?: string[] | null;
}
function fromEventSelector(input?: EventSelector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReadWriteType: input["ReadWriteType"],
    IncludeManagementEvents: input["IncludeManagementEvents"],
    DataResources: input["DataResources"]?.map(x => fromDataResource(x)),
    ExcludeManagementEventSources: input["ExcludeManagementEventSources"],
  }
}
function toEventSelector(root: jsonP.JSONValue): EventSelector {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReadWriteType": (x: jsonP.JSONValue) => cmnP.readEnum<ReadWriteType>(x),
      "IncludeManagementEvents": "b",
      "DataResources": [toDataResource],
      "ExcludeManagementEventSources": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ReadWriteType =
| "ReadOnly"
| "WriteOnly"
| "All"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface DataResource {
  Type?: string | null;
  Values?: string[] | null;
}
function fromDataResource(input?: DataResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Values: input["Values"],
  }
}
function toDataResource(root: jsonP.JSONValue): DataResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Values": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface InsightSelector {
  InsightType?: InsightType | null;
}
function fromInsightSelector(input?: InsightSelector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InsightType: input["InsightType"],
  }
}
function toInsightSelector(root: jsonP.JSONValue): InsightSelector {
  return jsonP.readObj({
    required: {},
    optional: {
      "InsightType": (x: jsonP.JSONValue) => cmnP.readEnum<InsightType>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type InsightType =
| "ApiCallRateInsight"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Trail {
  Name?: string | null;
  S3BucketName?: string | null;
  S3KeyPrefix?: string | null;
  SnsTopicName?: string | null;
  SnsTopicARN?: string | null;
  IncludeGlobalServiceEvents?: boolean | null;
  IsMultiRegionTrail?: boolean | null;
  HomeRegion?: string | null;
  TrailARN?: string | null;
  LogFileValidationEnabled?: boolean | null;
  CloudWatchLogsLogGroupArn?: string | null;
  CloudWatchLogsRoleArn?: string | null;
  KmsKeyId?: string | null;
  HasCustomEventSelectors?: boolean | null;
  HasInsightSelectors?: boolean | null;
  IsOrganizationTrail?: boolean | null;
}
function toTrail(root: jsonP.JSONValue): Trail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "S3BucketName": "s",
      "S3KeyPrefix": "s",
      "SnsTopicName": "s",
      "SnsTopicARN": "s",
      "IncludeGlobalServiceEvents": "b",
      "IsMultiRegionTrail": "b",
      "HomeRegion": "s",
      "TrailARN": "s",
      "LogFileValidationEnabled": "b",
      "CloudWatchLogsLogGroupArn": "s",
      "CloudWatchLogsRoleArn": "s",
      "KmsKeyId": "s",
      "HasCustomEventSelectors": "b",
      "HasInsightSelectors": "b",
      "IsOrganizationTrail": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PublicKey {
  Value?: Uint8Array | string | null;
  ValidityStartTime?: Date | number | null;
  ValidityEndTime?: Date | number | null;
  Fingerprint?: string | null;
}
function toPublicKey(root: jsonP.JSONValue): PublicKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "a",
      "ValidityStartTime": "d",
      "ValidityEndTime": "d",
      "Fingerprint": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceTag {
  ResourceId?: string | null;
  TagsList?: Tag[] | null;
}
function toResourceTag(root: jsonP.JSONValue): ResourceTag {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "TagsList": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrailInfo {
  TrailARN?: string | null;
  Name?: string | null;
  HomeRegion?: string | null;
}
function toTrailInfo(root: jsonP.JSONValue): TrailInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "TrailARN": "s",
      "Name": "s",
      "HomeRegion": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Event {
  EventId?: string | null;
  EventName?: string | null;
  ReadOnly?: string | null;
  AccessKeyId?: string | null;
  EventTime?: Date | number | null;
  EventSource?: string | null;
  Username?: string | null;
  Resources?: Resource[] | null;
  CloudTrailEvent?: string | null;
}
function toEvent(root: jsonP.JSONValue): Event {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventId": "s",
      "EventName": "s",
      "ReadOnly": "s",
      "AccessKeyId": "s",
      "EventTime": "d",
      "EventSource": "s",
      "Username": "s",
      "Resources": [toResource],
      "CloudTrailEvent": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Resource {
  ResourceType?: string | null;
  ResourceName?: string | null;
}
function toResource(root: jsonP.JSONValue): Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ResourceName": "s",
    },
  }, root);
}
