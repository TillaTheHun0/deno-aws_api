// Autogenerated API client for: AWS CloudTrail

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class CloudTrail {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CloudTrail.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2013-11-01",
    "endpointPrefix": "cloudtrail",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "CloudTrail",
    "serviceFullName": "AWS CloudTrail",
    "serviceId": "CloudTrail",
    "signatureVersion": "v4",
    "targetPrefix": "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101",
    "uid": "cloudtrail-2013-11-01"
  };

  async addTags(
    {abortSignal, ...params}: RequestConfig & s.AddTagsRequest,
  ): Promise<s.AddTagsResponse> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagsList: params["TagsList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createTrail(
    {abortSignal, ...params}: RequestConfig & s.CreateTrailRequest,
  ): Promise<s.CreateTrailResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      S3BucketName: params["S3BucketName"],
      S3KeyPrefix: params["S3KeyPrefix"],
      SnsTopicName: params["SnsTopicName"],
      IncludeGlobalServiceEvents: params["IncludeGlobalServiceEvents"],
      IsMultiRegionTrail: params["IsMultiRegionTrail"],
      EnableLogFileValidation: params["EnableLogFileValidation"],
      CloudWatchLogsLogGroupArn: params["CloudWatchLogsLogGroupArn"],
      CloudWatchLogsRoleArn: params["CloudWatchLogsRoleArn"],
      KmsKeyId: params["KmsKeyId"],
      IsOrganizationTrail: params["IsOrganizationTrail"],
      TagsList: params["TagsList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "S3BucketName": "s",
        "S3KeyPrefix": "s",
        "SnsTopicName": "s",
        "SnsTopicARN": "s",
        "IncludeGlobalServiceEvents": "b",
        "IsMultiRegionTrail": "b",
        "TrailARN": "s",
        "LogFileValidationEnabled": "b",
        "CloudWatchLogsLogGroupArn": "s",
        "CloudWatchLogsRoleArn": "s",
        "KmsKeyId": "s",
        "IsOrganizationTrail": "b",
      },
    }, await resp.json());
  }

  async deleteTrail(
    {abortSignal, ...params}: RequestConfig & s.DeleteTrailRequest,
  ): Promise<s.DeleteTrailResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeTrails(
    {abortSignal, ...params}: RequestConfig & s.DescribeTrailsRequest = {},
  ): Promise<s.DescribeTrailsResponse> {
    const body: jsonP.JSONObject = {
      trailNameList: params["trailNameList"],
      includeShadowTrails: params["includeShadowTrails"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTrails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "trailList": [toTrail],
      },
    }, await resp.json());
  }

  async getEventSelectors(
    {abortSignal, ...params}: RequestConfig & s.GetEventSelectorsRequest,
  ): Promise<s.GetEventSelectorsResponse> {
    const body: jsonP.JSONObject = {
      TrailName: params["TrailName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEventSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "EventSelectors": [toEventSelector],
        "AdvancedEventSelectors": [toAdvancedEventSelector],
      },
    }, await resp.json());
  }

  async getInsightSelectors(
    {abortSignal, ...params}: RequestConfig & s.GetInsightSelectorsRequest,
  ): Promise<s.GetInsightSelectorsResponse> {
    const body: jsonP.JSONObject = {
      TrailName: params["TrailName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInsightSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "InsightSelectors": [toInsightSelector],
      },
    }, await resp.json());
  }

  async getTrail(
    {abortSignal, ...params}: RequestConfig & s.GetTrailRequest,
  ): Promise<s.GetTrailResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Trail": toTrail,
      },
    }, await resp.json());
  }

  async getTrailStatus(
    {abortSignal, ...params}: RequestConfig & s.GetTrailStatusRequest,
  ): Promise<s.GetTrailStatusResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTrailStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IsLogging": "b",
        "LatestDeliveryError": "s",
        "LatestNotificationError": "s",
        "LatestDeliveryTime": "d",
        "LatestNotificationTime": "d",
        "StartLoggingTime": "d",
        "StopLoggingTime": "d",
        "LatestCloudWatchLogsDeliveryError": "s",
        "LatestCloudWatchLogsDeliveryTime": "d",
        "LatestDigestDeliveryTime": "d",
        "LatestDigestDeliveryError": "s",
        "LatestDeliveryAttemptTime": "s",
        "LatestNotificationAttemptTime": "s",
        "LatestNotificationAttemptSucceeded": "s",
        "LatestDeliveryAttemptSucceeded": "s",
        "TimeLoggingStarted": "s",
        "TimeLoggingStopped": "s",
      },
    }, await resp.json());
  }

  async listPublicKeys(
    {abortSignal, ...params}: RequestConfig & s.ListPublicKeysRequest = {},
  ): Promise<s.ListPublicKeysResponse> {
    const body: jsonP.JSONObject = {
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPublicKeys",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PublicKeyList": [toPublicKey],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & s.ListTagsRequest,
  ): Promise<s.ListTagsResponse> {
    const body: jsonP.JSONObject = {
      ResourceIdList: params["ResourceIdList"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceTagList": [toResourceTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTrails(
    {abortSignal, ...params}: RequestConfig & s.ListTrailsRequest = {},
  ): Promise<s.ListTrailsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTrails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Trails": [toTrailInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async lookupEvents(
    {abortSignal, ...params}: RequestConfig & s.LookupEventsRequest = {},
  ): Promise<s.LookupEventsResponse> {
    const body: jsonP.JSONObject = {
      LookupAttributes: params["LookupAttributes"]?.map(x => fromLookupAttribute(x)),
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      EventCategory: params["EventCategory"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "LookupEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Events": [toEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putEventSelectors(
    {abortSignal, ...params}: RequestConfig & s.PutEventSelectorsRequest,
  ): Promise<s.PutEventSelectorsResponse> {
    const body: jsonP.JSONObject = {
      TrailName: params["TrailName"],
      EventSelectors: params["EventSelectors"]?.map(x => fromEventSelector(x)),
      AdvancedEventSelectors: params["AdvancedEventSelectors"]?.map(x => fromAdvancedEventSelector(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEventSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "EventSelectors": [toEventSelector],
        "AdvancedEventSelectors": [toAdvancedEventSelector],
      },
    }, await resp.json());
  }

  async putInsightSelectors(
    {abortSignal, ...params}: RequestConfig & s.PutInsightSelectorsRequest,
  ): Promise<s.PutInsightSelectorsResponse> {
    const body: jsonP.JSONObject = {
      TrailName: params["TrailName"],
      InsightSelectors: params["InsightSelectors"]?.map(x => fromInsightSelector(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInsightSelectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TrailARN": "s",
        "InsightSelectors": [toInsightSelector],
      },
    }, await resp.json());
  }

  async removeTags(
    {abortSignal, ...params}: RequestConfig & s.RemoveTagsRequest,
  ): Promise<s.RemoveTagsResponse> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      TagsList: params["TagsList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startLogging(
    {abortSignal, ...params}: RequestConfig & s.StartLoggingRequest,
  ): Promise<s.StartLoggingResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartLogging",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopLogging(
    {abortSignal, ...params}: RequestConfig & s.StopLoggingRequest,
  ): Promise<s.StopLoggingResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopLogging",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateTrail(
    {abortSignal, ...params}: RequestConfig & s.UpdateTrailRequest,
  ): Promise<s.UpdateTrailResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      S3BucketName: params["S3BucketName"],
      S3KeyPrefix: params["S3KeyPrefix"],
      SnsTopicName: params["SnsTopicName"],
      IncludeGlobalServiceEvents: params["IncludeGlobalServiceEvents"],
      IsMultiRegionTrail: params["IsMultiRegionTrail"],
      EnableLogFileValidation: params["EnableLogFileValidation"],
      CloudWatchLogsLogGroupArn: params["CloudWatchLogsLogGroupArn"],
      CloudWatchLogsRoleArn: params["CloudWatchLogsRoleArn"],
      KmsKeyId: params["KmsKeyId"],
      IsOrganizationTrail: params["IsOrganizationTrail"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTrail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "S3BucketName": "s",
        "S3KeyPrefix": "s",
        "SnsTopicName": "s",
        "SnsTopicARN": "s",
        "IncludeGlobalServiceEvents": "b",
        "IsMultiRegionTrail": "b",
        "TrailARN": "s",
        "LogFileValidationEnabled": "b",
        "CloudWatchLogsLogGroupArn": "s",
        "CloudWatchLogsRoleArn": "s",
        "KmsKeyId": "s",
        "IsOrganizationTrail": "b",
      },
    }, await resp.json());
  }

}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

function fromLookupAttribute(input?: s.LookupAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AttributeKey: input["AttributeKey"],
    AttributeValue: input["AttributeValue"],
  }
}

function fromEventSelector(input?: s.EventSelector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReadWriteType: input["ReadWriteType"],
    IncludeManagementEvents: input["IncludeManagementEvents"],
    DataResources: input["DataResources"]?.map(x => fromDataResource(x)),
    ExcludeManagementEventSources: input["ExcludeManagementEventSources"],
  }
}
function toEventSelector(root: jsonP.JSONValue): s.EventSelector {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReadWriteType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReadWriteType>(x),
      "IncludeManagementEvents": "b",
      "DataResources": [toDataResource],
      "ExcludeManagementEventSources": ["s"],
    },
  }, root);
}

function fromDataResource(input?: s.DataResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Values: input["Values"],
  }
}
function toDataResource(root: jsonP.JSONValue): s.DataResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Values": ["s"],
    },
  }, root);
}

function fromAdvancedEventSelector(input?: s.AdvancedEventSelector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    FieldSelectors: input["FieldSelectors"]?.map(x => fromAdvancedFieldSelector(x)),
  }
}
function toAdvancedEventSelector(root: jsonP.JSONValue): s.AdvancedEventSelector {
  return jsonP.readObj({
    required: {
      "FieldSelectors": [toAdvancedFieldSelector],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function fromAdvancedFieldSelector(input?: s.AdvancedFieldSelector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Field: input["Field"],
    Equals: input["Equals"],
    StartsWith: input["StartsWith"],
    EndsWith: input["EndsWith"],
    NotEquals: input["NotEquals"],
    NotStartsWith: input["NotStartsWith"],
    NotEndsWith: input["NotEndsWith"],
  }
}
function toAdvancedFieldSelector(root: jsonP.JSONValue): s.AdvancedFieldSelector {
  return jsonP.readObj({
    required: {
      "Field": "s",
    },
    optional: {
      "Equals": ["s"],
      "StartsWith": ["s"],
      "EndsWith": ["s"],
      "NotEquals": ["s"],
      "NotStartsWith": ["s"],
      "NotEndsWith": ["s"],
    },
  }, root);
}

function fromInsightSelector(input?: s.InsightSelector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InsightType: input["InsightType"],
  }
}
function toInsightSelector(root: jsonP.JSONValue): s.InsightSelector {
  return jsonP.readObj({
    required: {},
    optional: {
      "InsightType": (x: jsonP.JSONValue) => cmnP.readEnum<s.InsightType>(x),
    },
  }, root);
}

function toTrail(root: jsonP.JSONValue): s.Trail {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "S3BucketName": "s",
      "S3KeyPrefix": "s",
      "SnsTopicName": "s",
      "SnsTopicARN": "s",
      "IncludeGlobalServiceEvents": "b",
      "IsMultiRegionTrail": "b",
      "HomeRegion": "s",
      "TrailARN": "s",
      "LogFileValidationEnabled": "b",
      "CloudWatchLogsLogGroupArn": "s",
      "CloudWatchLogsRoleArn": "s",
      "KmsKeyId": "s",
      "HasCustomEventSelectors": "b",
      "HasInsightSelectors": "b",
      "IsOrganizationTrail": "b",
    },
  }, root);
}

function toPublicKey(root: jsonP.JSONValue): s.PublicKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "a",
      "ValidityStartTime": "d",
      "ValidityEndTime": "d",
      "Fingerprint": "s",
    },
  }, root);
}

function toResourceTag(root: jsonP.JSONValue): s.ResourceTag {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "TagsList": [toTag],
    },
  }, root);
}

function toTrailInfo(root: jsonP.JSONValue): s.TrailInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "TrailARN": "s",
      "Name": "s",
      "HomeRegion": "s",
    },
  }, root);
}

function toEvent(root: jsonP.JSONValue): s.Event {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventId": "s",
      "EventName": "s",
      "ReadOnly": "s",
      "AccessKeyId": "s",
      "EventTime": "d",
      "EventSource": "s",
      "Username": "s",
      "Resources": [toResource],
      "CloudTrailEvent": "s",
    },
  }, root);
}

function toResource(root: jsonP.JSONValue): s.Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ResourceName": "s",
    },
  }, root);
}
