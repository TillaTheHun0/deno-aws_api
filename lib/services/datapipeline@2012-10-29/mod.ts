// Autogenerated API client for: AWS Data Pipeline

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class DataPipeline {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DataPipeline.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2012-10-29",
    "endpointPrefix": "datapipeline",
    "jsonVersion": "1.1",
    "serviceFullName": "AWS Data Pipeline",
    "serviceId": "Data Pipeline",
    "signatureVersion": "v4",
    "targetPrefix": "DataPipeline",
    "protocol": "json",
    "uid": "datapipeline-2012-10-29"
  };

  async activatePipeline(
    {abortSignal, ...params}: RequestConfig & ActivatePipelineInput,
  ): Promise<ActivatePipelineOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      parameterValues: params["parameterValues"]?.map(x => fromParameterValue(x)),
      startTimestamp: jsonP.serializeDate_unixTimestamp(params["startTimestamp"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ActivatePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async addTags(
    {abortSignal, ...params}: RequestConfig & AddTagsInput,
  ): Promise<AddTagsOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createPipeline(
    {abortSignal, ...params}: RequestConfig & CreatePipelineInput,
  ): Promise<CreatePipelineOutput> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      uniqueId: params["uniqueId"],
      description: params["description"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePipeline",
    });
    return jsonP.readObj({
      required: {
        "pipelineId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deactivatePipeline(
    {abortSignal, ...params}: RequestConfig & DeactivatePipelineInput,
  ): Promise<DeactivatePipelineOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      cancelActive: params["cancelActive"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeactivatePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePipeline(
    {abortSignal, ...params}: RequestConfig & DeletePipelineInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePipeline",
    });
  }

  async describeObjects(
    {abortSignal, ...params}: RequestConfig & DescribeObjectsInput,
  ): Promise<DescribeObjectsOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      objectIds: params["objectIds"],
      evaluateExpressions: params["evaluateExpressions"],
      marker: params["marker"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeObjects",
    });
    return jsonP.readObj({
      required: {
        "pipelineObjects": [toPipelineObject],
      },
      optional: {
        "marker": "s",
        "hasMoreResults": "b",
      },
    }, await resp.json());
  }

  async describePipelines(
    {abortSignal, ...params}: RequestConfig & DescribePipelinesInput,
  ): Promise<DescribePipelinesOutput> {
    const body: jsonP.JSONObject = {
      pipelineIds: params["pipelineIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePipelines",
    });
    return jsonP.readObj({
      required: {
        "pipelineDescriptionList": [toPipelineDescription],
      },
      optional: {},
    }, await resp.json());
  }

  async evaluateExpression(
    {abortSignal, ...params}: RequestConfig & EvaluateExpressionInput,
  ): Promise<EvaluateExpressionOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      objectId: params["objectId"],
      expression: params["expression"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EvaluateExpression",
    });
    return jsonP.readObj({
      required: {
        "evaluatedExpression": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getPipelineDefinition(
    {abortSignal, ...params}: RequestConfig & GetPipelineDefinitionInput,
  ): Promise<GetPipelineDefinitionOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      version: params["version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPipelineDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelineObjects": [toPipelineObject],
        "parameterObjects": [toParameterObject],
        "parameterValues": [toParameterValue],
      },
    }, await resp.json());
  }

  async listPipelines(
    {abortSignal, ...params}: RequestConfig & ListPipelinesInput = {},
  ): Promise<ListPipelinesOutput> {
    const body: jsonP.JSONObject = {
      marker: params["marker"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPipelines",
    });
    return jsonP.readObj({
      required: {
        "pipelineIdList": [toPipelineIdName],
      },
      optional: {
        "marker": "s",
        "hasMoreResults": "b",
      },
    }, await resp.json());
  }

  async pollForTask(
    {abortSignal, ...params}: RequestConfig & PollForTaskInput,
  ): Promise<PollForTaskOutput> {
    const body: jsonP.JSONObject = {
      workerGroup: params["workerGroup"],
      hostname: params["hostname"],
      instanceIdentity: fromInstanceIdentity(params["instanceIdentity"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PollForTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "taskObject": toTaskObject,
      },
    }, await resp.json());
  }

  async putPipelineDefinition(
    {abortSignal, ...params}: RequestConfig & PutPipelineDefinitionInput,
  ): Promise<PutPipelineDefinitionOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      pipelineObjects: params["pipelineObjects"]?.map(x => fromPipelineObject(x)),
      parameterObjects: params["parameterObjects"]?.map(x => fromParameterObject(x)),
      parameterValues: params["parameterValues"]?.map(x => fromParameterValue(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPipelineDefinition",
    });
    return jsonP.readObj({
      required: {
        "errored": "b",
      },
      optional: {
        "validationErrors": [toValidationError],
        "validationWarnings": [toValidationWarning],
      },
    }, await resp.json());
  }

  async queryObjects(
    {abortSignal, ...params}: RequestConfig & QueryObjectsInput,
  ): Promise<QueryObjectsOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      query: fromQuery(params["query"]),
      sphere: params["sphere"],
      marker: params["marker"],
      limit: params["limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "QueryObjects",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ids": ["s"],
        "marker": "s",
        "hasMoreResults": "b",
      },
    }, await resp.json());
  }

  async removeTags(
    {abortSignal, ...params}: RequestConfig & RemoveTagsInput,
  ): Promise<RemoveTagsOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async reportTaskProgress(
    {abortSignal, ...params}: RequestConfig & ReportTaskProgressInput,
  ): Promise<ReportTaskProgressOutput> {
    const body: jsonP.JSONObject = {
      taskId: params["taskId"],
      fields: params["fields"]?.map(x => fromField(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ReportTaskProgress",
    });
    return jsonP.readObj({
      required: {
        "canceled": "b",
      },
      optional: {},
    }, await resp.json());
  }

  async reportTaskRunnerHeartbeat(
    {abortSignal, ...params}: RequestConfig & ReportTaskRunnerHeartbeatInput,
  ): Promise<ReportTaskRunnerHeartbeatOutput> {
    const body: jsonP.JSONObject = {
      taskrunnerId: params["taskrunnerId"],
      workerGroup: params["workerGroup"],
      hostname: params["hostname"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ReportTaskRunnerHeartbeat",
    });
    return jsonP.readObj({
      required: {
        "terminate": "b",
      },
      optional: {},
    }, await resp.json());
  }

  async setStatus(
    {abortSignal, ...params}: RequestConfig & SetStatusInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      objectIds: params["objectIds"],
      status: params["status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetStatus",
    });
  }

  async setTaskStatus(
    {abortSignal, ...params}: RequestConfig & SetTaskStatusInput,
  ): Promise<SetTaskStatusOutput> {
    const body: jsonP.JSONObject = {
      taskId: params["taskId"],
      taskStatus: params["taskStatus"],
      errorId: params["errorId"],
      errorMessage: params["errorMessage"],
      errorStackTrace: params["errorStackTrace"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetTaskStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async validatePipelineDefinition(
    {abortSignal, ...params}: RequestConfig & ValidatePipelineDefinitionInput,
  ): Promise<ValidatePipelineDefinitionOutput> {
    const body: jsonP.JSONObject = {
      pipelineId: params["pipelineId"],
      pipelineObjects: params["pipelineObjects"]?.map(x => fromPipelineObject(x)),
      parameterObjects: params["parameterObjects"]?.map(x => fromParameterObject(x)),
      parameterValues: params["parameterValues"]?.map(x => fromParameterValue(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ValidatePipelineDefinition",
    });
    return jsonP.readObj({
      required: {
        "errored": "b",
      },
      optional: {
        "validationErrors": [toValidationError],
        "validationWarnings": [toValidationWarning],
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface ActivatePipelineInput {
  pipelineId: string;
  parameterValues?: ParameterValue[] | null;
  startTimestamp?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface AddTagsInput {
  pipelineId: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface CreatePipelineInput {
  name: string;
  uniqueId: string;
  description?: string | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeactivatePipelineInput {
  pipelineId: string;
  cancelActive?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeletePipelineInput {
  pipelineId: string;
}

// refs: 1 - tags: named, input
export interface DescribeObjectsInput {
  pipelineId: string;
  objectIds: string[];
  evaluateExpressions?: boolean | null;
  marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePipelinesInput {
  pipelineIds: string[];
}

// refs: 1 - tags: named, input
export interface EvaluateExpressionInput {
  pipelineId: string;
  objectId: string;
  expression: string;
}

// refs: 1 - tags: named, input
export interface GetPipelineDefinitionInput {
  pipelineId: string;
  version?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPipelinesInput {
  marker?: string | null;
}

// refs: 1 - tags: named, input
export interface PollForTaskInput {
  workerGroup: string;
  hostname?: string | null;
  instanceIdentity?: InstanceIdentity | null;
}

// refs: 1 - tags: named, input
export interface PutPipelineDefinitionInput {
  pipelineId: string;
  pipelineObjects: PipelineObject[];
  parameterObjects?: ParameterObject[] | null;
  parameterValues?: ParameterValue[] | null;
}

// refs: 1 - tags: named, input
export interface QueryObjectsInput {
  pipelineId: string;
  query?: Query | null;
  sphere: string;
  marker?: string | null;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface RemoveTagsInput {
  pipelineId: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface ReportTaskProgressInput {
  taskId: string;
  fields?: Field[] | null;
}

// refs: 1 - tags: named, input
export interface ReportTaskRunnerHeartbeatInput {
  taskrunnerId: string;
  workerGroup?: string | null;
  hostname?: string | null;
}

// refs: 1 - tags: named, input
export interface SetStatusInput {
  pipelineId: string;
  objectIds: string[];
  status: string;
}

// refs: 1 - tags: named, input
export interface SetTaskStatusInput {
  taskId: string;
  taskStatus: TaskStatus;
  errorId?: string | null;
  errorMessage?: string | null;
  errorStackTrace?: string | null;
}

// refs: 1 - tags: named, input
export interface ValidatePipelineDefinitionInput {
  pipelineId: string;
  pipelineObjects: PipelineObject[];
  parameterObjects?: ParameterObject[] | null;
  parameterValues?: ParameterValue[] | null;
}

// refs: 1 - tags: named, output
export interface ActivatePipelineOutput {
}

// refs: 1 - tags: named, output
export interface AddTagsOutput {
}

// refs: 1 - tags: named, output
export interface CreatePipelineOutput {
  pipelineId: string;
}

// refs: 1 - tags: named, output
export interface DeactivatePipelineOutput {
}

// refs: 1 - tags: named, output
export interface DescribeObjectsOutput {
  pipelineObjects: PipelineObject[];
  marker?: string | null;
  hasMoreResults?: boolean | null;
}

// refs: 1 - tags: named, output
export interface DescribePipelinesOutput {
  pipelineDescriptionList: PipelineDescription[];
}

// refs: 1 - tags: named, output
export interface EvaluateExpressionOutput {
  evaluatedExpression: string;
}

// refs: 1 - tags: named, output
export interface GetPipelineDefinitionOutput {
  pipelineObjects?: PipelineObject[] | null;
  parameterObjects?: ParameterObject[] | null;
  parameterValues?: ParameterValue[] | null;
}

// refs: 1 - tags: named, output
export interface ListPipelinesOutput {
  pipelineIdList: PipelineIdName[];
  marker?: string | null;
  hasMoreResults?: boolean | null;
}

// refs: 1 - tags: named, output
export interface PollForTaskOutput {
  taskObject?: TaskObject | null;
}

// refs: 1 - tags: named, output
export interface PutPipelineDefinitionOutput {
  validationErrors?: ValidationError[] | null;
  validationWarnings?: ValidationWarning[] | null;
  errored: boolean;
}

// refs: 1 - tags: named, output
export interface QueryObjectsOutput {
  ids?: string[] | null;
  marker?: string | null;
  hasMoreResults?: boolean | null;
}

// refs: 1 - tags: named, output
export interface RemoveTagsOutput {
}

// refs: 1 - tags: named, output
export interface ReportTaskProgressOutput {
  canceled: boolean;
}

// refs: 1 - tags: named, output
export interface ReportTaskRunnerHeartbeatOutput {
  terminate: boolean;
}

// refs: 1 - tags: named, output
export interface SetTaskStatusOutput {
}

// refs: 1 - tags: named, output
export interface ValidatePipelineDefinitionOutput {
  validationErrors?: ValidationError[] | null;
  validationWarnings?: ValidationWarning[] | null;
  errored: boolean;
}

// refs: 4 - tags: input, named, interface, output
export interface ParameterValue {
  id: string;
  stringValue: string;
}
function fromParameterValue(input?: ParameterValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    stringValue: input["stringValue"],
  }
}
function toParameterValue(root: jsonP.JSONValue): ParameterValue {
  return jsonP.readObj({
    required: {
      "id": "s",
      "stringValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  key: string;
  value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "key": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface InstanceIdentity {
  document?: string | null;
  signature?: string | null;
}
function fromInstanceIdentity(input?: InstanceIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    document: input["document"],
    signature: input["signature"],
  }
}

// refs: 5 - tags: input, named, interface, output
export interface PipelineObject {
  id: string;
  name: string;
  fields: Field[];
}
function fromPipelineObject(input?: PipelineObject | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    fields: input["fields"]?.map(x => fromField(x)),
  }
}
function toPipelineObject(root: jsonP.JSONValue): PipelineObject {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "fields": [toField],
    },
    optional: {},
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface Field {
  key: string;
  stringValue?: string | null;
  refValue?: string | null;
}
function fromField(input?: Field | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    stringValue: input["stringValue"],
    refValue: input["refValue"],
  }
}
function toField(root: jsonP.JSONValue): Field {
  return jsonP.readObj({
    required: {
      "key": "s",
    },
    optional: {
      "stringValue": "s",
      "refValue": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ParameterObject {
  id: string;
  attributes: ParameterAttribute[];
}
function fromParameterObject(input?: ParameterObject | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    attributes: input["attributes"]?.map(x => fromParameterAttribute(x)),
  }
}
function toParameterObject(root: jsonP.JSONValue): ParameterObject {
  return jsonP.readObj({
    required: {
      "id": "s",
      "attributes": [toParameterAttribute],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ParameterAttribute {
  key: string;
  stringValue: string;
}
function fromParameterAttribute(input?: ParameterAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    stringValue: input["stringValue"],
  }
}
function toParameterAttribute(root: jsonP.JSONValue): ParameterAttribute {
  return jsonP.readObj({
    required: {
      "key": "s",
      "stringValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface Query {
  selectors?: Selector[] | null;
}
function fromQuery(input?: Query | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    selectors: input["selectors"]?.map(x => fromSelector(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface Selector {
  fieldName?: string | null;
  operator?: Operator | null;
}
function fromSelector(input?: Selector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fieldName: input["fieldName"],
    operator: fromOperator(input["operator"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface Operator {
  type?: OperatorType | null;
  values?: string[] | null;
}
function fromOperator(input?: Operator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    type: input["type"],
    values: input["values"],
  }
}

// refs: 1 - tags: input, named, enum
export type OperatorType =
| "EQ"
| "REF_EQ"
| "LE"
| "GE"
| "BETWEEN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type TaskStatus =
| "FINISHED"
| "FAILED"
| "FALSE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface PipelineDescription {
  pipelineId: string;
  name: string;
  fields: Field[];
  description?: string | null;
  tags?: Tag[] | null;
}
function toPipelineDescription(root: jsonP.JSONValue): PipelineDescription {
  return jsonP.readObj({
    required: {
      "pipelineId": "s",
      "name": "s",
      "fields": [toField],
    },
    optional: {
      "description": "s",
      "tags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PipelineIdName {
  id?: string | null;
  name?: string | null;
}
function toPipelineIdName(root: jsonP.JSONValue): PipelineIdName {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskObject {
  taskId?: string | null;
  pipelineId?: string | null;
  attemptId?: string | null;
  objects?: { [key: string]: PipelineObject | null | undefined } | null;
}
function toTaskObject(root: jsonP.JSONValue): TaskObject {
  return jsonP.readObj({
    required: {},
    optional: {
      "taskId": "s",
      "pipelineId": "s",
      "attemptId": "s",
      "objects": x => jsonP.readMap(String, toPipelineObject, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ValidationError {
  id?: string | null;
  errors?: string[] | null;
}
function toValidationError(root: jsonP.JSONValue): ValidationError {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "errors": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ValidationWarning {
  id?: string | null;
  warnings?: string[] | null;
}
function toValidationWarning(root: jsonP.JSONValue): ValidationWarning {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "warnings": ["s"],
    },
  }, root);
}
