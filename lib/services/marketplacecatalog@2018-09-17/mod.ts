// Autogenerated API client for: AWS Marketplace Catalog Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class MarketplaceCatalog {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MarketplaceCatalog.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-09-17",
    "endpointPrefix": "catalog.marketplace",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AWS Marketplace Catalog",
    "serviceFullName": "AWS Marketplace Catalog Service",
    "serviceId": "Marketplace Catalog",
    "signatureVersion": "v4",
    "signingName": "aws-marketplace",
    "uid": "marketplace-catalog-2018-09-17"
  };

  async cancelChangeSet(
    {abortSignal, ...params}: RequestConfig & s.CancelChangeSetRequest,
  ): Promise<s.CancelChangeSetResponse> {
    const query = new URLSearchParams;
    query.set("catalog", params["Catalog"]?.toString() ?? "");
    query.set("changeSetId", params["ChangeSetId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "CancelChangeSet",
      method: "PATCH",
      requestUri: "/CancelChangeSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeSetId": "s",
        "ChangeSetArn": "s",
      },
    }, await resp.json());
  }

  async describeChangeSet(
    {abortSignal, ...params}: RequestConfig & s.DescribeChangeSetRequest,
  ): Promise<s.DescribeChangeSetResponse> {
    const query = new URLSearchParams;
    query.set("catalog", params["Catalog"]?.toString() ?? "");
    query.set("changeSetId", params["ChangeSetId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeChangeSet",
      method: "GET",
      requestUri: "/DescribeChangeSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeSetId": "s",
        "ChangeSetArn": "s",
        "ChangeSetName": "s",
        "StartTime": "s",
        "EndTime": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChangeStatus>(x),
        "FailureCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.FailureCode>(x),
        "FailureDescription": "s",
        "ChangeSet": [toChangeSummary],
      },
    }, await resp.json());
  }

  async describeEntity(
    {abortSignal, ...params}: RequestConfig & s.DescribeEntityRequest,
  ): Promise<s.DescribeEntityResponse> {
    const query = new URLSearchParams;
    query.set("catalog", params["Catalog"]?.toString() ?? "");
    query.set("entityId", params["EntityId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeEntity",
      method: "GET",
      requestUri: "/DescribeEntity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntityType": "s",
        "EntityIdentifier": "s",
        "EntityArn": "s",
        "LastModifiedDate": "s",
        "Details": "s",
      },
    }, await resp.json());
  }

  async listChangeSets(
    {abortSignal, ...params}: RequestConfig & s.ListChangeSetsRequest,
  ): Promise<s.ListChangeSetsResponse> {
    const body: jsonP.JSONObject = {
      Catalog: params["Catalog"],
      FilterList: params["FilterList"]?.map(x => fromFilter(x)),
      Sort: fromSort(params["Sort"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListChangeSets",
      requestUri: "/ListChangeSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeSetSummaryList": [toChangeSetSummaryListItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEntities(
    {abortSignal, ...params}: RequestConfig & s.ListEntitiesRequest,
  ): Promise<s.ListEntitiesResponse> {
    const body: jsonP.JSONObject = {
      Catalog: params["Catalog"],
      EntityType: params["EntityType"],
      FilterList: params["FilterList"]?.map(x => fromFilter(x)),
      Sort: fromSort(params["Sort"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEntities",
      requestUri: "/ListEntities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntitySummaryList": [toEntitySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startChangeSet(
    {abortSignal, ...params}: RequestConfig & s.StartChangeSetRequest,
  ): Promise<s.StartChangeSetResponse> {
    const body: jsonP.JSONObject = {
      Catalog: params["Catalog"],
      ChangeSet: params["ChangeSet"]?.map(x => fromChange(x)),
      ChangeSetName: params["ChangeSetName"],
      ClientRequestToken: params["ClientRequestToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartChangeSet",
      requestUri: "/StartChangeSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeSetId": "s",
        "ChangeSetArn": "s",
      },
    }, await resp.json());
  }

}

function fromFilter(input?: s.Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    ValueList: input["ValueList"],
  }
}

function fromSort(input?: s.Sort | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SortBy: input["SortBy"],
    SortOrder: input["SortOrder"],
  }
}

function fromChange(input?: s.Change | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ChangeType: input["ChangeType"],
    Entity: fromEntity(input["Entity"]),
    Details: input["Details"],
  }
}

function fromEntity(input?: s.Entity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Identifier: input["Identifier"],
  }
}
function toEntity(root: jsonP.JSONValue): s.Entity {
  return jsonP.readObj({
    required: {
      "Type": "s",
    },
    optional: {
      "Identifier": "s",
    },
  }, root);
}

function toChangeSummary(root: jsonP.JSONValue): s.ChangeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChangeType": "s",
      "Entity": toEntity,
      "Details": "s",
      "ErrorDetailList": [toErrorDetail],
    },
  }, root);
}

function toErrorDetail(root: jsonP.JSONValue): s.ErrorDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

function toChangeSetSummaryListItem(root: jsonP.JSONValue): s.ChangeSetSummaryListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChangeSetId": "s",
      "ChangeSetArn": "s",
      "ChangeSetName": "s",
      "StartTime": "s",
      "EndTime": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChangeStatus>(x),
      "EntityIdList": ["s"],
      "FailureCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.FailureCode>(x),
    },
  }, root);
}

function toEntitySummary(root: jsonP.JSONValue): s.EntitySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "EntityType": "s",
      "EntityId": "s",
      "EntityArn": "s",
      "LastModifiedDate": "s",
      "Visibility": "s",
    },
  }, root);
}
