// Autogenerated API client for: AWS Comprehend Medical

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class ComprehendMedical {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ComprehendMedical.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-10-30",
    "endpointPrefix": "comprehendmedical",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "ComprehendMedical",
    "serviceFullName": "AWS Comprehend Medical",
    "serviceId": "ComprehendMedical",
    "signatureVersion": "v4",
    "signingName": "comprehendmedical",
    "targetPrefix": "ComprehendMedical_20181030",
    "uid": "comprehendmedical-2018-10-30"
  };

  async describeEntitiesDetectionV2Job(
    {abortSignal, ...params}: RequestConfig & DescribeEntitiesDetectionV2JobRequest,
  ): Promise<DescribeEntitiesDetectionV2JobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEntitiesDetectionV2Job",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobProperties": toComprehendMedicalAsyncJobProperties,
      },
    }, await resp.json());
  }

  async describeICD10CMInferenceJob(
    {abortSignal, ...params}: RequestConfig & DescribeICD10CMInferenceJobRequest,
  ): Promise<DescribeICD10CMInferenceJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeICD10CMInferenceJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobProperties": toComprehendMedicalAsyncJobProperties,
      },
    }, await resp.json());
  }

  async describePHIDetectionJob(
    {abortSignal, ...params}: RequestConfig & DescribePHIDetectionJobRequest,
  ): Promise<DescribePHIDetectionJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePHIDetectionJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobProperties": toComprehendMedicalAsyncJobProperties,
      },
    }, await resp.json());
  }

  async describeRxNormInferenceJob(
    {abortSignal, ...params}: RequestConfig & DescribeRxNormInferenceJobRequest,
  ): Promise<DescribeRxNormInferenceJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRxNormInferenceJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobProperties": toComprehendMedicalAsyncJobProperties,
      },
    }, await resp.json());
  }

  async detectEntities(
    {abortSignal, ...params}: RequestConfig & DetectEntitiesRequest,
  ): Promise<DetectEntitiesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectEntities",
    });
    return prt.readObj({
      required: {
        "Entities": [toEntity],
        "ModelVersion": "s",
      },
      optional: {
        "UnmappedAttributes": [toUnmappedAttribute],
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async detectEntitiesV2(
    {abortSignal, ...params}: RequestConfig & DetectEntitiesV2Request,
  ): Promise<DetectEntitiesV2Response> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectEntitiesV2",
    });
    return prt.readObj({
      required: {
        "Entities": [toEntity],
        "ModelVersion": "s",
      },
      optional: {
        "UnmappedAttributes": [toUnmappedAttribute],
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async detectPHI(
    {abortSignal, ...params}: RequestConfig & DetectPHIRequest,
  ): Promise<DetectPHIResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectPHI",
    });
    return prt.readObj({
      required: {
        "Entities": [toEntity],
        "ModelVersion": "s",
      },
      optional: {
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async inferICD10CM(
    {abortSignal, ...params}: RequestConfig & InferICD10CMRequest,
  ): Promise<InferICD10CMResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InferICD10CM",
    });
    return prt.readObj({
      required: {
        "Entities": [toICD10CMEntity],
      },
      optional: {
        "PaginationToken": "s",
        "ModelVersion": "s",
      },
    }, await resp.json());
  }

  async inferRxNorm(
    {abortSignal, ...params}: RequestConfig & InferRxNormRequest,
  ): Promise<InferRxNormResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InferRxNorm",
    });
    return prt.readObj({
      required: {
        "Entities": [toRxNormEntity],
      },
      optional: {
        "PaginationToken": "s",
        "ModelVersion": "s",
      },
    }, await resp.json());
  }

  async listEntitiesDetectionV2Jobs(
    {abortSignal, ...params}: RequestConfig & ListEntitiesDetectionV2JobsRequest = {},
  ): Promise<ListEntitiesDetectionV2JobsResponse> {
    const body: JSONObject = {...params,
    Filter: fromComprehendMedicalAsyncJobFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEntitiesDetectionV2Jobs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobPropertiesList": [toComprehendMedicalAsyncJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listICD10CMInferenceJobs(
    {abortSignal, ...params}: RequestConfig & ListICD10CMInferenceJobsRequest = {},
  ): Promise<ListICD10CMInferenceJobsResponse> {
    const body: JSONObject = {...params,
    Filter: fromComprehendMedicalAsyncJobFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListICD10CMInferenceJobs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobPropertiesList": [toComprehendMedicalAsyncJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPHIDetectionJobs(
    {abortSignal, ...params}: RequestConfig & ListPHIDetectionJobsRequest = {},
  ): Promise<ListPHIDetectionJobsResponse> {
    const body: JSONObject = {...params,
    Filter: fromComprehendMedicalAsyncJobFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPHIDetectionJobs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobPropertiesList": [toComprehendMedicalAsyncJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRxNormInferenceJobs(
    {abortSignal, ...params}: RequestConfig & ListRxNormInferenceJobsRequest = {},
  ): Promise<ListRxNormInferenceJobsResponse> {
    const body: JSONObject = {...params,
    Filter: fromComprehendMedicalAsyncJobFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRxNormInferenceJobs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ComprehendMedicalAsyncJobPropertiesList": [toComprehendMedicalAsyncJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startEntitiesDetectionV2Job(
    {abortSignal, ...params}: RequestConfig & StartEntitiesDetectionV2JobRequest,
  ): Promise<StartEntitiesDetectionV2JobResponse> {
    const body: JSONObject = {...params,
    InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
    OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartEntitiesDetectionV2Job",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async startICD10CMInferenceJob(
    {abortSignal, ...params}: RequestConfig & StartICD10CMInferenceJobRequest,
  ): Promise<StartICD10CMInferenceJobResponse> {
    const body: JSONObject = {...params,
    InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
    OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartICD10CMInferenceJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async startPHIDetectionJob(
    {abortSignal, ...params}: RequestConfig & StartPHIDetectionJobRequest,
  ): Promise<StartPHIDetectionJobResponse> {
    const body: JSONObject = {...params,
    InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
    OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartPHIDetectionJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async startRxNormInferenceJob(
    {abortSignal, ...params}: RequestConfig & StartRxNormInferenceJobRequest,
  ): Promise<StartRxNormInferenceJobResponse> {
    const body: JSONObject = {...params,
    InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
    OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
    ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartRxNormInferenceJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async stopEntitiesDetectionV2Job(
    {abortSignal, ...params}: RequestConfig & StopEntitiesDetectionV2JobRequest,
  ): Promise<StopEntitiesDetectionV2JobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopEntitiesDetectionV2Job",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async stopICD10CMInferenceJob(
    {abortSignal, ...params}: RequestConfig & StopICD10CMInferenceJobRequest,
  ): Promise<StopICD10CMInferenceJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopICD10CMInferenceJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async stopPHIDetectionJob(
    {abortSignal, ...params}: RequestConfig & StopPHIDetectionJobRequest,
  ): Promise<StopPHIDetectionJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopPHIDetectionJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async stopRxNormInferenceJob(
    {abortSignal, ...params}: RequestConfig & StopRxNormInferenceJobRequest,
  ): Promise<StopRxNormInferenceJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopRxNormInferenceJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DescribeEntitiesDetectionV2JobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeICD10CMInferenceJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribePHIDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeRxNormInferenceJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DetectEntitiesRequest {
  Text: string;
}

// refs: 1 - tags: named, input
export interface DetectEntitiesV2Request {
  Text: string;
}

// refs: 1 - tags: named, input
export interface DetectPHIRequest {
  Text: string;
}

// refs: 1 - tags: named, input
export interface InferICD10CMRequest {
  Text: string;
}

// refs: 1 - tags: named, input
export interface InferRxNormRequest {
  Text: string;
}

// refs: 1 - tags: named, input
export interface ListEntitiesDetectionV2JobsRequest {
  Filter?: ComprehendMedicalAsyncJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListICD10CMInferenceJobsRequest {
  Filter?: ComprehendMedicalAsyncJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPHIDetectionJobsRequest {
  Filter?: ComprehendMedicalAsyncJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRxNormInferenceJobsRequest {
  Filter?: ComprehendMedicalAsyncJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface StartEntitiesDetectionV2JobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  ClientRequestToken?: string | null;
  KMSKey?: string | null;
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface StartICD10CMInferenceJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  ClientRequestToken?: string | null;
  KMSKey?: string | null;
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface StartPHIDetectionJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  ClientRequestToken?: string | null;
  KMSKey?: string | null;
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface StartRxNormInferenceJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  ClientRequestToken?: string | null;
  KMSKey?: string | null;
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface StopEntitiesDetectionV2JobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopICD10CMInferenceJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopPHIDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopRxNormInferenceJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, output
export interface DescribeEntitiesDetectionV2JobResponse {
  ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeICD10CMInferenceJobResponse {
  ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribePHIDetectionJobResponse {
  ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeRxNormInferenceJobResponse {
  ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DetectEntitiesResponse {
  Entities: Entity[];
  UnmappedAttributes?: UnmappedAttribute[] | null;
  PaginationToken?: string | null;
  ModelVersion: string;
}

// refs: 1 - tags: named, output
export interface DetectEntitiesV2Response {
  Entities: Entity[];
  UnmappedAttributes?: UnmappedAttribute[] | null;
  PaginationToken?: string | null;
  ModelVersion: string;
}

// refs: 1 - tags: named, output
export interface DetectPHIResponse {
  Entities: Entity[];
  PaginationToken?: string | null;
  ModelVersion: string;
}

// refs: 1 - tags: named, output
export interface InferICD10CMResponse {
  Entities: ICD10CMEntity[];
  PaginationToken?: string | null;
  ModelVersion?: string | null;
}

// refs: 1 - tags: named, output
export interface InferRxNormResponse {
  Entities: RxNormEntity[];
  PaginationToken?: string | null;
  ModelVersion?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEntitiesDetectionV2JobsResponse {
  ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListICD10CMInferenceJobsResponse {
  ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPHIDetectionJobsResponse {
  ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRxNormInferenceJobsResponse {
  ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartEntitiesDetectionV2JobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartICD10CMInferenceJobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartPHIDetectionJobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartRxNormInferenceJobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopEntitiesDetectionV2JobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopICD10CMInferenceJobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopPHIDetectionJobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopRxNormInferenceJobResponse {
  JobId?: string | null;
}

// refs: 4 - tags: input, named, interface
export interface ComprehendMedicalAsyncJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromComprehendMedicalAsyncJobFilter(input?: ComprehendMedicalAsyncJobFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
    SubmitTimeBefore: prt.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: prt.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 12 - tags: input, named, enum, output
export type JobStatus =
| "SUBMITTED"
| "IN_PROGRESS"
| "COMPLETED"
| "PARTIAL_SUCCESS"
| "FAILED"
| "STOP_REQUESTED"
| "STOPPED"
;

function toJobStatus(root: JSONValue): JobStatus | null {
  return ( false
    || root == "SUBMITTED"
    || root == "IN_PROGRESS"
    || root == "COMPLETED"
    || root == "PARTIAL_SUCCESS"
    || root == "FAILED"
    || root == "STOP_REQUESTED"
    || root == "STOPPED"
  ) ? root : null;
}

// refs: 12 - tags: input, named, interface, output
export interface InputDataConfig {
  S3Bucket: string;
  S3Key?: string | null;
}
function fromInputDataConfig(input?: InputDataConfig | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toInputDataConfig(root: JSONValue): InputDataConfig {
  return prt.readObj({
    required: {
      "S3Bucket": "s",
    },
    optional: {
      "S3Key": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface OutputDataConfig {
  S3Bucket: string;
  S3Key?: string | null;
}
function fromOutputDataConfig(input?: OutputDataConfig | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toOutputDataConfig(root: JSONValue): OutputDataConfig {
  return prt.readObj({
    required: {
      "S3Bucket": "s",
    },
    optional: {
      "S3Key": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, enum, output
export type LanguageCode =
| "en"
;

function toLanguageCode(root: JSONValue): LanguageCode | null {
  return ( false
    || root == "en"
  ) ? root : null;
}

// refs: 8 - tags: output, named, interface
export interface ComprehendMedicalAsyncJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  ExpirationTime?: Date | number | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: OutputDataConfig | null;
  LanguageCode?: LanguageCode | null;
  DataAccessRoleArn?: string | null;
  ManifestFilePath?: string | null;
  KMSKey?: string | null;
  ModelVersion?: string | null;
}
function toComprehendMedicalAsyncJobProperties(root: JSONValue): ComprehendMedicalAsyncJobProperties {
  return prt.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": toJobStatus,
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "ExpirationTime": "d",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toOutputDataConfig,
      "LanguageCode": toLanguageCode,
      "DataAccessRoleArn": "s",
      "ManifestFilePath": "s",
      "KMSKey": "s",
      "ModelVersion": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Entity {
  Id?: number | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
  Score?: number | null;
  Text?: string | null;
  Category?: EntityType | null;
  Type?: EntitySubType | null;
  Traits?: Trait[] | null;
  Attributes?: Attribute[] | null;
}
function toEntity(root: JSONValue): Entity {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "n",
      "BeginOffset": "n",
      "EndOffset": "n",
      "Score": "n",
      "Text": "s",
      "Category": toEntityType,
      "Type": toEntitySubType,
      "Traits": [toTrait],
      "Attributes": [toAttribute],
    },
  }, root);
}

// refs: 10 - tags: output, named, enum
export type EntityType =
| "MEDICATION"
| "MEDICAL_CONDITION"
| "PROTECTED_HEALTH_INFORMATION"
| "TEST_TREATMENT_PROCEDURE"
| "ANATOMY"
| "TIME_EXPRESSION"
;
function toEntityType(root: JSONValue): EntityType | null {
  return ( false
    || root == "MEDICATION"
    || root == "MEDICAL_CONDITION"
    || root == "PROTECTED_HEALTH_INFORMATION"
    || root == "TEST_TREATMENT_PROCEDURE"
    || root == "ANATOMY"
    || root == "TIME_EXPRESSION"
  ) ? root : null;
}

// refs: 8 - tags: output, named, enum
export type EntitySubType =
| "NAME"
| "DOSAGE"
| "ROUTE_OR_MODE"
| "FORM"
| "FREQUENCY"
| "DURATION"
| "GENERIC_NAME"
| "BRAND_NAME"
| "STRENGTH"
| "RATE"
| "ACUITY"
| "TEST_NAME"
| "TEST_VALUE"
| "TEST_UNITS"
| "PROCEDURE_NAME"
| "TREATMENT_NAME"
| "DATE"
| "AGE"
| "CONTACT_POINT"
| "EMAIL"
| "IDENTIFIER"
| "URL"
| "ADDRESS"
| "PROFESSION"
| "SYSTEM_ORGAN_SITE"
| "DIRECTION"
| "QUALITY"
| "QUANTITY"
| "TIME_EXPRESSION"
| "TIME_TO_MEDICATION_NAME"
| "TIME_TO_DX_NAME"
| "TIME_TO_TEST_NAME"
| "TIME_TO_PROCEDURE_NAME"
| "TIME_TO_TREATMENT_NAME"
;
function toEntitySubType(root: JSONValue): EntitySubType | null {
  return ( false
    || root == "NAME"
    || root == "DOSAGE"
    || root == "ROUTE_OR_MODE"
    || root == "FORM"
    || root == "FREQUENCY"
    || root == "DURATION"
    || root == "GENERIC_NAME"
    || root == "BRAND_NAME"
    || root == "STRENGTH"
    || root == "RATE"
    || root == "ACUITY"
    || root == "TEST_NAME"
    || root == "TEST_VALUE"
    || root == "TEST_UNITS"
    || root == "PROCEDURE_NAME"
    || root == "TREATMENT_NAME"
    || root == "DATE"
    || root == "AGE"
    || root == "CONTACT_POINT"
    || root == "EMAIL"
    || root == "IDENTIFIER"
    || root == "URL"
    || root == "ADDRESS"
    || root == "PROFESSION"
    || root == "SYSTEM_ORGAN_SITE"
    || root == "DIRECTION"
    || root == "QUALITY"
    || root == "QUANTITY"
    || root == "TIME_EXPRESSION"
    || root == "TIME_TO_MEDICATION_NAME"
    || root == "TIME_TO_DX_NAME"
    || root == "TIME_TO_TEST_NAME"
    || root == "TIME_TO_PROCEDURE_NAME"
    || root == "TIME_TO_TREATMENT_NAME"
  ) ? root : null;
}

// refs: 8 - tags: output, named, interface
export interface Trait {
  Name?: AttributeName | null;
  Score?: number | null;
}
function toTrait(root: JSONValue): Trait {
  return prt.readObj({
    required: {},
    optional: {
      "Name": toAttributeName,
      "Score": "n",
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type AttributeName =
| "SIGN"
| "SYMPTOM"
| "DIAGNOSIS"
| "NEGATION"
;
function toAttributeName(root: JSONValue): AttributeName | null {
  return ( false
    || root == "SIGN"
    || root == "SYMPTOM"
    || root == "DIAGNOSIS"
    || root == "NEGATION"
  ) ? root : null;
}

// refs: 5 - tags: output, named, interface
export interface Attribute {
  Type?: EntitySubType | null;
  Score?: number | null;
  RelationshipScore?: number | null;
  RelationshipType?: RelationshipType | null;
  Id?: number | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
  Text?: string | null;
  Category?: EntityType | null;
  Traits?: Trait[] | null;
}
function toAttribute(root: JSONValue): Attribute {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toEntitySubType,
      "Score": "n",
      "RelationshipScore": "n",
      "RelationshipType": toRelationshipType,
      "Id": "n",
      "BeginOffset": "n",
      "EndOffset": "n",
      "Text": "s",
      "Category": toEntityType,
      "Traits": [toTrait],
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type RelationshipType =
| "EVERY"
| "WITH_DOSAGE"
| "ADMINISTERED_VIA"
| "FOR"
| "NEGATIVE"
| "OVERLAP"
| "DOSAGE"
| "ROUTE_OR_MODE"
| "FORM"
| "FREQUENCY"
| "DURATION"
| "STRENGTH"
| "RATE"
| "ACUITY"
| "TEST_VALUE"
| "TEST_UNITS"
| "DIRECTION"
| "SYSTEM_ORGAN_SITE"
;
function toRelationshipType(root: JSONValue): RelationshipType | null {
  return ( false
    || root == "EVERY"
    || root == "WITH_DOSAGE"
    || root == "ADMINISTERED_VIA"
    || root == "FOR"
    || root == "NEGATIVE"
    || root == "OVERLAP"
    || root == "DOSAGE"
    || root == "ROUTE_OR_MODE"
    || root == "FORM"
    || root == "FREQUENCY"
    || root == "DURATION"
    || root == "STRENGTH"
    || root == "RATE"
    || root == "ACUITY"
    || root == "TEST_VALUE"
    || root == "TEST_UNITS"
    || root == "DIRECTION"
    || root == "SYSTEM_ORGAN_SITE"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface UnmappedAttribute {
  Type?: EntityType | null;
  Attribute?: Attribute | null;
}
function toUnmappedAttribute(root: JSONValue): UnmappedAttribute {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toEntityType,
      "Attribute": toAttribute,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ICD10CMEntity {
  Id?: number | null;
  Text?: string | null;
  Category?: ICD10CMEntityCategory | null;
  Type?: ICD10CMEntityType | null;
  Score?: number | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
  Attributes?: ICD10CMAttribute[] | null;
  Traits?: ICD10CMTrait[] | null;
  ICD10CMConcepts?: ICD10CMConcept[] | null;
}
function toICD10CMEntity(root: JSONValue): ICD10CMEntity {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "n",
      "Text": "s",
      "Category": toICD10CMEntityCategory,
      "Type": toICD10CMEntityType,
      "Score": "n",
      "BeginOffset": "n",
      "EndOffset": "n",
      "Attributes": [toICD10CMAttribute],
      "Traits": [toICD10CMTrait],
      "ICD10CMConcepts": [toICD10CMConcept],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ICD10CMEntityCategory =
| "MEDICAL_CONDITION"
;
function toICD10CMEntityCategory(root: JSONValue): ICD10CMEntityCategory | null {
  return ( false
    || root == "MEDICAL_CONDITION"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type ICD10CMEntityType =
| "DX_NAME"
;
function toICD10CMEntityType(root: JSONValue): ICD10CMEntityType | null {
  return ( false
    || root == "DX_NAME"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ICD10CMAttribute {
  Type?: ICD10CMAttributeType | null;
  Score?: number | null;
  RelationshipScore?: number | null;
  Id?: number | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
  Text?: string | null;
  Traits?: ICD10CMTrait[] | null;
}
function toICD10CMAttribute(root: JSONValue): ICD10CMAttribute {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toICD10CMAttributeType,
      "Score": "n",
      "RelationshipScore": "n",
      "Id": "n",
      "BeginOffset": "n",
      "EndOffset": "n",
      "Text": "s",
      "Traits": [toICD10CMTrait],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ICD10CMAttributeType =
| "ACUITY"
| "DIRECTION"
| "SYSTEM_ORGAN_SITE"
| "QUALITY"
| "QUANTITY"
;
function toICD10CMAttributeType(root: JSONValue): ICD10CMAttributeType | null {
  return ( false
    || root == "ACUITY"
    || root == "DIRECTION"
    || root == "SYSTEM_ORGAN_SITE"
    || root == "QUALITY"
    || root == "QUANTITY"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface ICD10CMTrait {
  Name?: ICD10CMTraitName | null;
  Score?: number | null;
}
function toICD10CMTrait(root: JSONValue): ICD10CMTrait {
  return prt.readObj({
    required: {},
    optional: {
      "Name": toICD10CMTraitName,
      "Score": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ICD10CMTraitName =
| "NEGATION"
| "DIAGNOSIS"
| "SIGN"
| "SYMPTOM"
;
function toICD10CMTraitName(root: JSONValue): ICD10CMTraitName | null {
  return ( false
    || root == "NEGATION"
    || root == "DIAGNOSIS"
    || root == "SIGN"
    || root == "SYMPTOM"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ICD10CMConcept {
  Description?: string | null;
  Code?: string | null;
  Score?: number | null;
}
function toICD10CMConcept(root: JSONValue): ICD10CMConcept {
  return prt.readObj({
    required: {},
    optional: {
      "Description": "s",
      "Code": "s",
      "Score": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RxNormEntity {
  Id?: number | null;
  Text?: string | null;
  Category?: RxNormEntityCategory | null;
  Type?: RxNormEntityType | null;
  Score?: number | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
  Attributes?: RxNormAttribute[] | null;
  Traits?: RxNormTrait[] | null;
  RxNormConcepts?: RxNormConcept[] | null;
}
function toRxNormEntity(root: JSONValue): RxNormEntity {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "n",
      "Text": "s",
      "Category": toRxNormEntityCategory,
      "Type": toRxNormEntityType,
      "Score": "n",
      "BeginOffset": "n",
      "EndOffset": "n",
      "Attributes": [toRxNormAttribute],
      "Traits": [toRxNormTrait],
      "RxNormConcepts": [toRxNormConcept],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RxNormEntityCategory =
| "MEDICATION"
;
function toRxNormEntityCategory(root: JSONValue): RxNormEntityCategory | null {
  return ( false
    || root == "MEDICATION"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type RxNormEntityType =
| "BRAND_NAME"
| "GENERIC_NAME"
;
function toRxNormEntityType(root: JSONValue): RxNormEntityType | null {
  return ( false
    || root == "BRAND_NAME"
    || root == "GENERIC_NAME"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface RxNormAttribute {
  Type?: RxNormAttributeType | null;
  Score?: number | null;
  RelationshipScore?: number | null;
  Id?: number | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
  Text?: string | null;
  Traits?: RxNormTrait[] | null;
}
function toRxNormAttribute(root: JSONValue): RxNormAttribute {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toRxNormAttributeType,
      "Score": "n",
      "RelationshipScore": "n",
      "Id": "n",
      "BeginOffset": "n",
      "EndOffset": "n",
      "Text": "s",
      "Traits": [toRxNormTrait],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RxNormAttributeType =
| "DOSAGE"
| "DURATION"
| "FORM"
| "FREQUENCY"
| "RATE"
| "ROUTE_OR_MODE"
| "STRENGTH"
;
function toRxNormAttributeType(root: JSONValue): RxNormAttributeType | null {
  return ( false
    || root == "DOSAGE"
    || root == "DURATION"
    || root == "FORM"
    || root == "FREQUENCY"
    || root == "RATE"
    || root == "ROUTE_OR_MODE"
    || root == "STRENGTH"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface RxNormTrait {
  Name?: RxNormTraitName | null;
  Score?: number | null;
}
function toRxNormTrait(root: JSONValue): RxNormTrait {
  return prt.readObj({
    required: {},
    optional: {
      "Name": toRxNormTraitName,
      "Score": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RxNormTraitName =
| "NEGATION"
;
function toRxNormTraitName(root: JSONValue): RxNormTraitName | null {
  return ( false
    || root == "NEGATION"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface RxNormConcept {
  Description?: string | null;
  Code?: string | null;
  Score?: number | null;
}
function toRxNormConcept(root: JSONValue): RxNormConcept {
  return prt.readObj({
    required: {},
    optional: {
      "Description": "s",
      "Code": "s",
      "Score": "n",
    },
  }, root);
}
