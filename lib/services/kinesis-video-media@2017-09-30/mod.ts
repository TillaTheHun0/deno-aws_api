// Autogenerated API client for: Amazon Kinesis Video Streams Media

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class KinesisVideoMedia {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(KinesisVideoMedia.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-09-30",
    "endpointPrefix": "kinesisvideo",
    "protocol": "rest-json",
    "serviceAbbreviation": "Kinesis Video Media",
    "serviceFullName": "Amazon Kinesis Video Streams Media",
    "serviceId": "Kinesis Video Media",
    "signatureVersion": "v4",
    "uid": "kinesis-video-media-2017-09-30"
  };

  async getMedia(
    {abortSignal, ...params}: RequestConfig & GetMediaInput,
  ): Promise<GetMediaOutput> {
    const body: jsonP.JSONObject = {
      StreamName: params["StreamName"],
      StreamARN: params["StreamARN"],
      StartSelector: fromStartSelector(params["StartSelector"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMedia",
      requestUri: "/getMedia",
    });
  return {
    ContentType: resp.headers.get("Content-Type"),
    Payload: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

}

// refs: 1 - tags: named, input
export interface GetMediaInput {
  StreamName?: string | null;
  StreamARN?: string | null;
  StartSelector: StartSelector;
}

// refs: 1 - tags: named, output
export interface GetMediaOutput {
  ContentType?: string | null;
  Payload?: Uint8Array | string | null;
}

// refs: 1 - tags: input, named, interface
export interface StartSelector {
  StartSelectorType: StartSelectorType;
  AfterFragmentNumber?: string | null;
  StartTimestamp?: Date | number | null;
  ContinuationToken?: string | null;
}
function fromStartSelector(input?: StartSelector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StartSelectorType: input["StartSelectorType"],
    AfterFragmentNumber: input["AfterFragmentNumber"],
    StartTimestamp: jsonP.serializeDate_unixTimestamp(input["StartTimestamp"]),
    ContinuationToken: input["ContinuationToken"],
  }
}

// refs: 1 - tags: input, named, enum
export type StartSelectorType =
| "FRAGMENT_NUMBER"
| "SERVER_TIMESTAMP"
| "PRODUCER_TIMESTAMP"
| "NOW"
| "EARLIEST"
| "CONTINUATION_TOKEN"
| cmnP.UnexpectedEnumValue;
