// Autogenerated API client for: AWS IoT 1-Click Devices Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class IoT1ClickDevicesService {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoT1ClickDevicesService.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-05-14",
    "endpointPrefix": "devices.iot1click",
    "signingName": "iot1click",
    "serviceFullName": "AWS IoT 1-Click Devices Service",
    "serviceId": "IoT 1Click Devices Service",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "devices-2018-05-14",
    "signatureVersion": "v4"
  };

  async claimDevicesByClaimCode(
    {abortSignal, ...params}: RequestConfig & s.ClaimDevicesByClaimCodeRequest,
  ): Promise<s.ClaimDevicesByClaimCodeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ClaimDevicesByClaimCode",
      method: "PUT",
      requestUri: cmnP.encodePath`/claims/${params["ClaimCode"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClaimCode": "s",
        "Total": "n",
      },
    }, await resp.json());
  }

  async describeDevice(
    {abortSignal, ...params}: RequestConfig & s.DescribeDeviceRequest,
  ): Promise<s.DescribeDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDevice",
      method: "GET",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceDescription": toDeviceDescription,
      },
    }, await resp.json());
  }

  async finalizeDeviceClaim(
    {abortSignal, ...params}: RequestConfig & s.FinalizeDeviceClaimRequest,
  ): Promise<s.FinalizeDeviceClaimResponse> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "FinalizeDeviceClaim",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/finalize-claim`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "State": "s",
      },
    }, await resp.json());
  }

  async getDeviceMethods(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceMethodsRequest,
  ): Promise<s.GetDeviceMethodsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeviceMethods",
      method: "GET",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/methods`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceMethods": [toDeviceMethod],
      },
    }, await resp.json());
  }

  async initiateDeviceClaim(
    {abortSignal, ...params}: RequestConfig & s.InitiateDeviceClaimRequest,
  ): Promise<s.InitiateDeviceClaimResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "InitiateDeviceClaim",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/initiate-claim`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "State": "s",
      },
    }, await resp.json());
  }

  async invokeDeviceMethod(
    {abortSignal, ...params}: RequestConfig & s.InvokeDeviceMethodRequest,
  ): Promise<s.InvokeDeviceMethodResponse> {
    const body: jsonP.JSONObject = {
      deviceMethod: fromDeviceMethod(params["DeviceMethod"]),
      deviceMethodParameters: params["DeviceMethodParameters"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InvokeDeviceMethod",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/methods`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceMethodResponse": "s",
      },
    }, await resp.json());
  }

  async listDeviceEvents(
    {abortSignal, ...params}: RequestConfig & s.ListDeviceEventsRequest,
  ): Promise<s.ListDeviceEventsResponse> {
    const query = new URLSearchParams;
    query.set("fromTimeStamp", cmnP.serializeDate_iso8601(params["FromTimeStamp"]) ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    query.set("toTimeStamp", cmnP.serializeDate_iso8601(params["ToTimeStamp"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceEvents",
      method: "GET",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/events`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Events": [toDeviceEvent],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDevices(
    {abortSignal, ...params}: RequestConfig & s.ListDevicesRequest = {},
  ): Promise<s.ListDevicesResponse> {
    const query = new URLSearchParams;
    if (params["DeviceType"] != null) query.set("deviceType", params["DeviceType"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDevices",
      method: "GET",
      requestUri: "/devices",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Devices": [toDeviceDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async unclaimDevice(
    {abortSignal, ...params}: RequestConfig & s.UnclaimDeviceRequest,
  ): Promise<s.UnclaimDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "UnclaimDevice",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/unclaim`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "State": "s",
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async updateDeviceState(
    {abortSignal, ...params}: RequestConfig & s.UpdateDeviceStateRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      enabled: params["Enabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeviceState",
      method: "PUT",
      requestUri: cmnP.encodePath`/devices/${params["DeviceId"]}/state`,
      responseCode: 200,
    });
    await resp.text();
  }

}

function fromDeviceMethod(input?: s.DeviceMethod | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deviceType: input["DeviceType"],
    methodName: input["MethodName"],
  }
}
function toDeviceMethod(root: jsonP.JSONValue): s.DeviceMethod {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceType": "s",
      "MethodName": "s",
    },
  }, root);
}

function toDeviceDescription(root: jsonP.JSONValue): s.DeviceDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Attributes": x => jsonP.readMap(String, String, x),
      "DeviceId": "s",
      "Enabled": "b",
      "RemainingLife": "n",
      "Type": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toDeviceEvent(root: jsonP.JSONValue): s.DeviceEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Device": toDevice,
      "StdEvent": "s",
    },
  }, root);
}

function toDevice(root: jsonP.JSONValue): s.Device {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attributes": toAttributes,
      "DeviceId": "s",
      "Type": "s",
    },
  }, root);
}

function toAttributes(root: jsonP.JSONValue): s.Attributes {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}
