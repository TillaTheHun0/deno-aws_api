// Autogenerated API client for: AWS CodePipeline

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class CodePipeline {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CodePipeline.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-07-09",
    "endpointPrefix": "codepipeline",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "CodePipeline",
    "serviceFullName": "AWS CodePipeline",
    "serviceId": "CodePipeline",
    "signatureVersion": "v4",
    "targetPrefix": "CodePipeline_20150709",
    "uid": "codepipeline-2015-07-09"
  };

  async acknowledgeJob(
    {abortSignal, ...params}: RequestConfig & AcknowledgeJobInput,
  ): Promise<AcknowledgeJobOutput> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      nonce: params["nonce"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcknowledgeJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async acknowledgeThirdPartyJob(
    {abortSignal, ...params}: RequestConfig & AcknowledgeThirdPartyJobInput,
  ): Promise<AcknowledgeThirdPartyJobOutput> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      nonce: params["nonce"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcknowledgeThirdPartyJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async createCustomActionType(
    {abortSignal, ...params}: RequestConfig & CreateCustomActionTypeInput,
  ): Promise<CreateCustomActionTypeOutput> {
    const body: jsonP.JSONObject = {
      category: params["category"],
      provider: params["provider"],
      version: params["version"],
      settings: fromActionTypeSettings(params["settings"]),
      configurationProperties: params["configurationProperties"]?.map(x => fromActionConfigurationProperty(x)),
      inputArtifactDetails: fromArtifactDetails(params["inputArtifactDetails"]),
      outputArtifactDetails: fromArtifactDetails(params["outputArtifactDetails"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCustomActionType",
    });
    return jsonP.readObj({
      required: {
        "actionType": toActionType,
      },
      optional: {
        "tags": [toTag],
      },
    }, await resp.json());
  }

  async createPipeline(
    {abortSignal, ...params}: RequestConfig & CreatePipelineInput,
  ): Promise<CreatePipelineOutput> {
    const body: jsonP.JSONObject = {
      pipeline: fromPipelineDeclaration(params["pipeline"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipeline": toPipelineDeclaration,
        "tags": [toTag],
      },
    }, await resp.json());
  }

  async deleteCustomActionType(
    {abortSignal, ...params}: RequestConfig & DeleteCustomActionTypeInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      category: params["category"],
      provider: params["provider"],
      version: params["version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCustomActionType",
    });
  }

  async deletePipeline(
    {abortSignal, ...params}: RequestConfig & DeletePipelineInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePipeline",
    });
  }

  async deleteWebhook(
    {abortSignal, ...params}: RequestConfig & DeleteWebhookInput,
  ): Promise<DeleteWebhookOutput> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteWebhook",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterWebhookWithThirdParty(
    {abortSignal, ...params}: RequestConfig & DeregisterWebhookWithThirdPartyInput = {},
  ): Promise<DeregisterWebhookWithThirdPartyOutput> {
    const body: jsonP.JSONObject = {
      webhookName: params["webhookName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterWebhookWithThirdParty",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disableStageTransition(
    {abortSignal, ...params}: RequestConfig & DisableStageTransitionInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      stageName: params["stageName"],
      transitionType: params["transitionType"],
      reason: params["reason"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableStageTransition",
    });
  }

  async enableStageTransition(
    {abortSignal, ...params}: RequestConfig & EnableStageTransitionInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      stageName: params["stageName"],
      transitionType: params["transitionType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableStageTransition",
    });
  }

  async getJobDetails(
    {abortSignal, ...params}: RequestConfig & GetJobDetailsInput,
  ): Promise<GetJobDetailsOutput> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetJobDetails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobDetails": toJobDetails,
      },
    }, await resp.json());
  }

  async getPipeline(
    {abortSignal, ...params}: RequestConfig & GetPipelineInput,
  ): Promise<GetPipelineOutput> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      version: params["version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipeline": toPipelineDeclaration,
        "metadata": toPipelineMetadata,
      },
    }, await resp.json());
  }

  async getPipelineExecution(
    {abortSignal, ...params}: RequestConfig & GetPipelineExecutionInput,
  ): Promise<GetPipelineExecutionOutput> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      pipelineExecutionId: params["pipelineExecutionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPipelineExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelineExecution": toPipelineExecution,
      },
    }, await resp.json());
  }

  async getPipelineState(
    {abortSignal, ...params}: RequestConfig & GetPipelineStateInput,
  ): Promise<GetPipelineStateOutput> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPipelineState",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelineName": "s",
        "pipelineVersion": "n",
        "stageStates": [toStageState],
        "created": "d",
        "updated": "d",
      },
    }, await resp.json());
  }

  async getThirdPartyJobDetails(
    {abortSignal, ...params}: RequestConfig & GetThirdPartyJobDetailsInput,
  ): Promise<GetThirdPartyJobDetailsOutput> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetThirdPartyJobDetails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobDetails": toThirdPartyJobDetails,
      },
    }, await resp.json());
  }

  async listActionExecutions(
    {abortSignal, ...params}: RequestConfig & ListActionExecutionsInput,
  ): Promise<ListActionExecutionsOutput> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      filter: fromActionExecutionFilter(params["filter"]),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListActionExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "actionExecutionDetails": [toActionExecutionDetail],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listActionTypes(
    {abortSignal, ...params}: RequestConfig & ListActionTypesInput = {},
  ): Promise<ListActionTypesOutput> {
    const body: jsonP.JSONObject = {
      actionOwnerFilter: params["actionOwnerFilter"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListActionTypes",
    });
    return jsonP.readObj({
      required: {
        "actionTypes": [toActionType],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPipelineExecutions(
    {abortSignal, ...params}: RequestConfig & ListPipelineExecutionsInput,
  ): Promise<ListPipelineExecutionsOutput> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPipelineExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelineExecutionSummaries": [toPipelineExecutionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPipelines(
    {abortSignal, ...params}: RequestConfig & ListPipelinesInput = {},
  ): Promise<ListPipelinesOutput> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPipelines",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelines": [toPipelineSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceOutput> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": [toTag],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listWebhooks(
    {abortSignal, ...params}: RequestConfig & ListWebhooksInput = {},
  ): Promise<ListWebhooksOutput> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWebhooks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "webhooks": [toListWebhookItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async pollForJobs(
    {abortSignal, ...params}: RequestConfig & PollForJobsInput,
  ): Promise<PollForJobsOutput> {
    const body: jsonP.JSONObject = {
      actionTypeId: fromActionTypeId(params["actionTypeId"]),
      maxBatchSize: params["maxBatchSize"],
      queryParam: params["queryParam"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PollForJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobs": [toJob],
      },
    }, await resp.json());
  }

  async pollForThirdPartyJobs(
    {abortSignal, ...params}: RequestConfig & PollForThirdPartyJobsInput,
  ): Promise<PollForThirdPartyJobsOutput> {
    const body: jsonP.JSONObject = {
      actionTypeId: fromActionTypeId(params["actionTypeId"]),
      maxBatchSize: params["maxBatchSize"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PollForThirdPartyJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobs": [toThirdPartyJob],
      },
    }, await resp.json());
  }

  async putActionRevision(
    {abortSignal, ...params}: RequestConfig & PutActionRevisionInput,
  ): Promise<PutActionRevisionOutput> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      stageName: params["stageName"],
      actionName: params["actionName"],
      actionRevision: fromActionRevision(params["actionRevision"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutActionRevision",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "newRevision": "b",
        "pipelineExecutionId": "s",
      },
    }, await resp.json());
  }

  async putApprovalResult(
    {abortSignal, ...params}: RequestConfig & PutApprovalResultInput,
  ): Promise<PutApprovalResultOutput> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      stageName: params["stageName"],
      actionName: params["actionName"],
      result: fromApprovalResult(params["result"]),
      token: params["token"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutApprovalResult",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "approvedAt": "d",
      },
    }, await resp.json());
  }

  async putJobFailureResult(
    {abortSignal, ...params}: RequestConfig & PutJobFailureResultInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      failureDetails: fromFailureDetails(params["failureDetails"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutJobFailureResult",
    });
  }

  async putJobSuccessResult(
    {abortSignal, ...params}: RequestConfig & PutJobSuccessResultInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      currentRevision: fromCurrentRevision(params["currentRevision"]),
      continuationToken: params["continuationToken"],
      executionDetails: fromExecutionDetails(params["executionDetails"]),
      outputVariables: params["outputVariables"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutJobSuccessResult",
    });
  }

  async putThirdPartyJobFailureResult(
    {abortSignal, ...params}: RequestConfig & PutThirdPartyJobFailureResultInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      clientToken: params["clientToken"],
      failureDetails: fromFailureDetails(params["failureDetails"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutThirdPartyJobFailureResult",
    });
  }

  async putThirdPartyJobSuccessResult(
    {abortSignal, ...params}: RequestConfig & PutThirdPartyJobSuccessResultInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      clientToken: params["clientToken"],
      currentRevision: fromCurrentRevision(params["currentRevision"]),
      continuationToken: params["continuationToken"],
      executionDetails: fromExecutionDetails(params["executionDetails"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutThirdPartyJobSuccessResult",
    });
  }

  async putWebhook(
    {abortSignal, ...params}: RequestConfig & PutWebhookInput,
  ): Promise<PutWebhookOutput> {
    const body: jsonP.JSONObject = {
      webhook: fromWebhookDefinition(params["webhook"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutWebhook",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "webhook": toListWebhookItem,
      },
    }, await resp.json());
  }

  async registerWebhookWithThirdParty(
    {abortSignal, ...params}: RequestConfig & RegisterWebhookWithThirdPartyInput = {},
  ): Promise<RegisterWebhookWithThirdPartyOutput> {
    const body: jsonP.JSONObject = {
      webhookName: params["webhookName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterWebhookWithThirdParty",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async retryStageExecution(
    {abortSignal, ...params}: RequestConfig & RetryStageExecutionInput,
  ): Promise<RetryStageExecutionOutput> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      stageName: params["stageName"],
      pipelineExecutionId: params["pipelineExecutionId"],
      retryMode: params["retryMode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RetryStageExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelineExecutionId": "s",
      },
    }, await resp.json());
  }

  async startPipelineExecution(
    {abortSignal, ...params}: RequestConfig & StartPipelineExecutionInput,
  ): Promise<StartPipelineExecutionOutput> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartPipelineExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelineExecutionId": "s",
      },
    }, await resp.json());
  }

  async stopPipelineExecution(
    {abortSignal, ...params}: RequestConfig & StopPipelineExecutionInput,
  ): Promise<StopPipelineExecutionOutput> {
    const body: jsonP.JSONObject = {
      pipelineName: params["pipelineName"],
      pipelineExecutionId: params["pipelineExecutionId"],
      abandon: params["abandon"],
      reason: params["reason"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopPipelineExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipelineExecutionId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<TagResourceOutput> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<UntagResourceOutput> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePipeline(
    {abortSignal, ...params}: RequestConfig & UpdatePipelineInput,
  ): Promise<UpdatePipelineOutput> {
    const body: jsonP.JSONObject = {
      pipeline: fromPipelineDeclaration(params["pipeline"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePipeline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "pipeline": toPipelineDeclaration,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcknowledgeJobInput {
  jobId: string;
  nonce: string;
}

// refs: 1 - tags: named, input
export interface AcknowledgeThirdPartyJobInput {
  jobId: string;
  nonce: string;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface CreateCustomActionTypeInput {
  category: ActionCategory;
  provider: string;
  version: string;
  settings?: ActionTypeSettings | null;
  configurationProperties?: ActionConfigurationProperty[] | null;
  inputArtifactDetails: ArtifactDetails;
  outputArtifactDetails: ArtifactDetails;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreatePipelineInput {
  pipeline: PipelineDeclaration;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteCustomActionTypeInput {
  category: ActionCategory;
  provider: string;
  version: string;
}

// refs: 1 - tags: named, input
export interface DeletePipelineInput {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeleteWebhookInput {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeregisterWebhookWithThirdPartyInput {
  webhookName?: string | null;
}

// refs: 1 - tags: named, input
export interface DisableStageTransitionInput {
  pipelineName: string;
  stageName: string;
  transitionType: StageTransitionType;
  reason: string;
}

// refs: 1 - tags: named, input
export interface EnableStageTransitionInput {
  pipelineName: string;
  stageName: string;
  transitionType: StageTransitionType;
}

// refs: 1 - tags: named, input
export interface GetJobDetailsInput {
  jobId: string;
}

// refs: 1 - tags: named, input
export interface GetPipelineInput {
  name: string;
  version?: number | null;
}

// refs: 1 - tags: named, input
export interface GetPipelineExecutionInput {
  pipelineName: string;
  pipelineExecutionId: string;
}

// refs: 1 - tags: named, input
export interface GetPipelineStateInput {
  name: string;
}

// refs: 1 - tags: named, input
export interface GetThirdPartyJobDetailsInput {
  jobId: string;
  clientToken: string;
}

// refs: 1 - tags: named, input
export interface ListActionExecutionsInput {
  pipelineName: string;
  filter?: ActionExecutionFilter | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListActionTypesInput {
  actionOwnerFilter?: ActionOwner | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPipelineExecutionsInput {
  pipelineName: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPipelinesInput {
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  resourceArn: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListWebhooksInput {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface PollForJobsInput {
  actionTypeId: ActionTypeId;
  maxBatchSize?: number | null;
  queryParam?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface PollForThirdPartyJobsInput {
  actionTypeId: ActionTypeId;
  maxBatchSize?: number | null;
}

// refs: 1 - tags: named, input
export interface PutActionRevisionInput {
  pipelineName: string;
  stageName: string;
  actionName: string;
  actionRevision: ActionRevision;
}

// refs: 1 - tags: named, input
export interface PutApprovalResultInput {
  pipelineName: string;
  stageName: string;
  actionName: string;
  result: ApprovalResult;
  token: string;
}

// refs: 1 - tags: named, input
export interface PutJobFailureResultInput {
  jobId: string;
  failureDetails: FailureDetails;
}

// refs: 1 - tags: named, input
export interface PutJobSuccessResultInput {
  jobId: string;
  currentRevision?: CurrentRevision | null;
  continuationToken?: string | null;
  executionDetails?: ExecutionDetails | null;
  outputVariables?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface PutThirdPartyJobFailureResultInput {
  jobId: string;
  clientToken: string;
  failureDetails: FailureDetails;
}

// refs: 1 - tags: named, input
export interface PutThirdPartyJobSuccessResultInput {
  jobId: string;
  clientToken: string;
  currentRevision?: CurrentRevision | null;
  continuationToken?: string | null;
  executionDetails?: ExecutionDetails | null;
}

// refs: 1 - tags: named, input
export interface PutWebhookInput {
  webhook: WebhookDefinition;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface RegisterWebhookWithThirdPartyInput {
  webhookName?: string | null;
}

// refs: 1 - tags: named, input
export interface RetryStageExecutionInput {
  pipelineName: string;
  stageName: string;
  pipelineExecutionId: string;
  retryMode: StageRetryMode;
}

// refs: 1 - tags: named, input
export interface StartPipelineExecutionInput {
  name: string;
  clientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StopPipelineExecutionInput {
  pipelineName: string;
  pipelineExecutionId: string;
  abandon?: boolean | null;
  reason?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  resourceArn: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdatePipelineInput {
  pipeline: PipelineDeclaration;
}

// refs: 1 - tags: named, output
export interface AcknowledgeJobOutput {
  status?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface AcknowledgeThirdPartyJobOutput {
  status?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface CreateCustomActionTypeOutput {
  actionType: ActionType;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface CreatePipelineOutput {
  pipeline?: PipelineDeclaration | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteWebhookOutput {
}

// refs: 1 - tags: named, output
export interface DeregisterWebhookWithThirdPartyOutput {
}

// refs: 1 - tags: named, output
export interface GetJobDetailsOutput {
  jobDetails?: JobDetails | null;
}

// refs: 1 - tags: named, output
export interface GetPipelineOutput {
  pipeline?: PipelineDeclaration | null;
  metadata?: PipelineMetadata | null;
}

// refs: 1 - tags: named, output
export interface GetPipelineExecutionOutput {
  pipelineExecution?: PipelineExecution | null;
}

// refs: 1 - tags: named, output
export interface GetPipelineStateOutput {
  pipelineName?: string | null;
  pipelineVersion?: number | null;
  stageStates?: StageState[] | null;
  created?: Date | number | null;
  updated?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetThirdPartyJobDetailsOutput {
  jobDetails?: ThirdPartyJobDetails | null;
}

// refs: 1 - tags: named, output
export interface ListActionExecutionsOutput {
  actionExecutionDetails?: ActionExecutionDetail[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListActionTypesOutput {
  actionTypes: ActionType[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPipelineExecutionsOutput {
  pipelineExecutionSummaries?: PipelineExecutionSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPipelinesOutput {
  pipelines?: PipelineSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceOutput {
  tags?: Tag[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListWebhooksOutput {
  webhooks?: ListWebhookItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PollForJobsOutput {
  jobs?: Job[] | null;
}

// refs: 1 - tags: named, output
export interface PollForThirdPartyJobsOutput {
  jobs?: ThirdPartyJob[] | null;
}

// refs: 1 - tags: named, output
export interface PutActionRevisionOutput {
  newRevision?: boolean | null;
  pipelineExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface PutApprovalResultOutput {
  approvedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface PutWebhookOutput {
  webhook?: ListWebhookItem | null;
}

// refs: 1 - tags: named, output
export interface RegisterWebhookWithThirdPartyOutput {
}

// refs: 1 - tags: named, output
export interface RetryStageExecutionOutput {
  pipelineExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartPipelineExecutionOutput {
  pipelineExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopPipelineExecutionOutput {
  pipelineExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceOutput {
}

// refs: 1 - tags: named, output
export interface UntagResourceOutput {
}

// refs: 1 - tags: named, output
export interface UpdatePipelineOutput {
  pipeline?: PipelineDeclaration | null;
}

// refs: 15 - tags: input, named, enum, output
export type ActionCategory =
| "Source"
| "Build"
| "Deploy"
| "Test"
| "Invoke"
| "Approval"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ActionTypeSettings {
  thirdPartyConfigurationUrl?: string | null;
  entityUrlTemplate?: string | null;
  executionUrlTemplate?: string | null;
  revisionUrlTemplate?: string | null;
}
function fromActionTypeSettings(input?: ActionTypeSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    thirdPartyConfigurationUrl: input["thirdPartyConfigurationUrl"],
    entityUrlTemplate: input["entityUrlTemplate"],
    executionUrlTemplate: input["executionUrlTemplate"],
    revisionUrlTemplate: input["revisionUrlTemplate"],
  }
}
function toActionTypeSettings(root: jsonP.JSONValue): ActionTypeSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "thirdPartyConfigurationUrl": "s",
      "entityUrlTemplate": "s",
      "executionUrlTemplate": "s",
      "revisionUrlTemplate": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ActionConfigurationProperty {
  name: string;
  required: boolean;
  key: boolean;
  secret: boolean;
  queryable?: boolean | null;
  description?: string | null;
  type?: ActionConfigurationPropertyType | null;
}
function fromActionConfigurationProperty(input?: ActionConfigurationProperty | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    required: input["required"],
    key: input["key"],
    secret: input["secret"],
    queryable: input["queryable"],
    description: input["description"],
    type: input["type"],
  }
}
function toActionConfigurationProperty(root: jsonP.JSONValue): ActionConfigurationProperty {
  return jsonP.readObj({
    required: {
      "name": "s",
      "required": "b",
      "key": "b",
      "secret": "b",
    },
    optional: {
      "queryable": "b",
      "description": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ActionConfigurationPropertyType>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ActionConfigurationPropertyType =
| "String"
| "Number"
| "Boolean"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface ArtifactDetails {
  minimumCount: number;
  maximumCount: number;
}
function fromArtifactDetails(input?: ArtifactDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    minimumCount: input["minimumCount"],
    maximumCount: input["maximumCount"],
  }
}
function toArtifactDetails(root: jsonP.JSONValue): ArtifactDetails {
  return jsonP.readObj({
    required: {
      "minimumCount": "n",
      "maximumCount": "n",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface Tag {
  key: string;
  value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "key": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface PipelineDeclaration {
  name: string;
  roleArn: string;
  artifactStore?: ArtifactStore | null;
  artifactStores?: { [key: string]: ArtifactStore | null | undefined } | null;
  stages: StageDeclaration[];
  version?: number | null;
}
function fromPipelineDeclaration(input?: PipelineDeclaration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    roleArn: input["roleArn"],
    artifactStore: fromArtifactStore(input["artifactStore"]),
    artifactStores: jsonP.serializeMap(input["artifactStores"], x => fromArtifactStore(x)),
    stages: input["stages"]?.map(x => fromStageDeclaration(x)),
    version: input["version"],
  }
}
function toPipelineDeclaration(root: jsonP.JSONValue): PipelineDeclaration {
  return jsonP.readObj({
    required: {
      "name": "s",
      "roleArn": "s",
      "stages": [toStageDeclaration],
    },
    optional: {
      "artifactStore": toArtifactStore,
      "artifactStores": x => jsonP.readMap(String, toArtifactStore, x),
      "version": "n",
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface ArtifactStore {
  type: ArtifactStoreType;
  location: string;
  encryptionKey?: EncryptionKey | null;
}
function fromArtifactStore(input?: ArtifactStore | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    type: input["type"],
    location: input["location"],
    encryptionKey: fromEncryptionKey(input["encryptionKey"]),
  }
}
function toArtifactStore(root: jsonP.JSONValue): ArtifactStore {
  return jsonP.readObj({
    required: {
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ArtifactStoreType>(x),
      "location": "s",
    },
    optional: {
      "encryptionKey": toEncryptionKey,
    },
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type ArtifactStoreType =
| "S3"
| cmnP.UnexpectedEnumValue;

// refs: 13 - tags: input, named, interface, output
export interface EncryptionKey {
  id: string;
  type: EncryptionKeyType;
}
function fromEncryptionKey(input?: EncryptionKey | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    type: input["type"],
  }
}
function toEncryptionKey(root: jsonP.JSONValue): EncryptionKey {
  return jsonP.readObj({
    required: {
      "id": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<EncryptionKeyType>(x),
    },
    optional: {},
  }, root);
}

// refs: 13 - tags: input, named, enum, output
export type EncryptionKeyType =
| "KMS"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface StageDeclaration {
  name: string;
  blockers?: BlockerDeclaration[] | null;
  actions: ActionDeclaration[];
}
function fromStageDeclaration(input?: StageDeclaration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    blockers: input["blockers"]?.map(x => fromBlockerDeclaration(x)),
    actions: input["actions"]?.map(x => fromActionDeclaration(x)),
  }
}
function toStageDeclaration(root: jsonP.JSONValue): StageDeclaration {
  return jsonP.readObj({
    required: {
      "name": "s",
      "actions": [toActionDeclaration],
    },
    optional: {
      "blockers": [toBlockerDeclaration],
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface BlockerDeclaration {
  name: string;
  type: BlockerType;
}
function fromBlockerDeclaration(input?: BlockerDeclaration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    type: input["type"],
  }
}
function toBlockerDeclaration(root: jsonP.JSONValue): BlockerDeclaration {
  return jsonP.readObj({
    required: {
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<BlockerType>(x),
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type BlockerType =
| "Schedule"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface ActionDeclaration {
  name: string;
  actionTypeId: ActionTypeId;
  runOrder?: number | null;
  configuration?: { [key: string]: string | null | undefined } | null;
  outputArtifacts?: OutputArtifact[] | null;
  inputArtifacts?: InputArtifact[] | null;
  roleArn?: string | null;
  region?: string | null;
  namespace?: string | null;
}
function fromActionDeclaration(input?: ActionDeclaration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    actionTypeId: fromActionTypeId(input["actionTypeId"]),
    runOrder: input["runOrder"],
    configuration: input["configuration"],
    outputArtifacts: input["outputArtifacts"]?.map(x => fromOutputArtifact(x)),
    inputArtifacts: input["inputArtifacts"]?.map(x => fromInputArtifact(x)),
    roleArn: input["roleArn"],
    region: input["region"],
    namespace: input["namespace"],
  }
}
function toActionDeclaration(root: jsonP.JSONValue): ActionDeclaration {
  return jsonP.readObj({
    required: {
      "name": "s",
      "actionTypeId": toActionTypeId,
    },
    optional: {
      "runOrder": "n",
      "configuration": x => jsonP.readMap(String, String, x),
      "outputArtifacts": [toOutputArtifact],
      "inputArtifacts": [toInputArtifact],
      "roleArn": "s",
      "region": "s",
      "namespace": "s",
    },
  }, root);
}

// refs: 13 - tags: input, named, interface, output
export interface ActionTypeId {
  category: ActionCategory;
  owner: ActionOwner;
  provider: string;
  version: string;
}
function fromActionTypeId(input?: ActionTypeId | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    category: input["category"],
    owner: input["owner"],
    provider: input["provider"],
    version: input["version"],
  }
}
function toActionTypeId(root: jsonP.JSONValue): ActionTypeId {
  return jsonP.readObj({
    required: {
      "category": (x: jsonP.JSONValue) => cmnP.readEnum<ActionCategory>(x),
      "owner": (x: jsonP.JSONValue) => cmnP.readEnum<ActionOwner>(x),
      "provider": "s",
      "version": "s",
    },
    optional: {},
  }, root);
}

// refs: 14 - tags: input, named, enum, output
export type ActionOwner =
| "AWS"
| "ThirdParty"
| "Custom"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface OutputArtifact {
  name: string;
}
function fromOutputArtifact(input?: OutputArtifact | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
  }
}
function toOutputArtifact(root: jsonP.JSONValue): OutputArtifact {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface InputArtifact {
  name: string;
}
function fromInputArtifact(input?: InputArtifact | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
  }
}
function toInputArtifact(root: jsonP.JSONValue): InputArtifact {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum
export type StageTransitionType =
| "Inbound"
| "Outbound"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ActionExecutionFilter {
  pipelineExecutionId?: string | null;
}
function fromActionExecutionFilter(input?: ActionExecutionFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    pipelineExecutionId: input["pipelineExecutionId"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface ActionRevision {
  revisionId: string;
  revisionChangeId: string;
  created: Date | number;
}
function fromActionRevision(input?: ActionRevision | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    revisionId: input["revisionId"],
    revisionChangeId: input["revisionChangeId"],
    created: jsonP.serializeDate_unixTimestamp(input["created"]),
  }
}
function toActionRevision(root: jsonP.JSONValue): ActionRevision {
  return jsonP.readObj({
    required: {
      "revisionId": "s",
      "revisionChangeId": "s",
      "created": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ApprovalResult {
  summary: string;
  status: ApprovalStatus;
}
function fromApprovalResult(input?: ApprovalResult | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    summary: input["summary"],
    status: input["status"],
  }
}

// refs: 1 - tags: input, named, enum
export type ApprovalStatus =
| "Approved"
| "Rejected"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface FailureDetails {
  type: FailureType;
  message: string;
  externalExecutionId?: string | null;
}
function fromFailureDetails(input?: FailureDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    type: input["type"],
    message: input["message"],
    externalExecutionId: input["externalExecutionId"],
  }
}

// refs: 2 - tags: input, named, enum
export type FailureType =
| "JobFailed"
| "ConfigurationError"
| "PermissionError"
| "RevisionOutOfSync"
| "RevisionUnavailable"
| "SystemUnavailable"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface CurrentRevision {
  revision: string;
  changeIdentifier: string;
  created?: Date | number | null;
  revisionSummary?: string | null;
}
function fromCurrentRevision(input?: CurrentRevision | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    revision: input["revision"],
    changeIdentifier: input["changeIdentifier"],
    created: jsonP.serializeDate_unixTimestamp(input["created"]),
    revisionSummary: input["revisionSummary"],
  }
}

// refs: 2 - tags: input, named, interface
export interface ExecutionDetails {
  summary?: string | null;
  externalExecutionId?: string | null;
  percentComplete?: number | null;
}
function fromExecutionDetails(input?: ExecutionDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    summary: input["summary"],
    externalExecutionId: input["externalExecutionId"],
    percentComplete: input["percentComplete"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface WebhookDefinition {
  name: string;
  targetPipeline: string;
  targetAction: string;
  filters: WebhookFilterRule[];
  authentication: WebhookAuthenticationType;
  authenticationConfiguration: WebhookAuthConfiguration;
}
function fromWebhookDefinition(input?: WebhookDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    targetPipeline: input["targetPipeline"],
    targetAction: input["targetAction"],
    filters: input["filters"]?.map(x => fromWebhookFilterRule(x)),
    authentication: input["authentication"],
    authenticationConfiguration: fromWebhookAuthConfiguration(input["authenticationConfiguration"]),
  }
}
function toWebhookDefinition(root: jsonP.JSONValue): WebhookDefinition {
  return jsonP.readObj({
    required: {
      "name": "s",
      "targetPipeline": "s",
      "targetAction": "s",
      "filters": [toWebhookFilterRule],
      "authentication": (x: jsonP.JSONValue) => cmnP.readEnum<WebhookAuthenticationType>(x),
      "authenticationConfiguration": toWebhookAuthConfiguration,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface WebhookFilterRule {
  jsonPath: string;
  matchEquals?: string | null;
}
function fromWebhookFilterRule(input?: WebhookFilterRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    jsonPath: input["jsonPath"],
    matchEquals: input["matchEquals"],
  }
}
function toWebhookFilterRule(root: jsonP.JSONValue): WebhookFilterRule {
  return jsonP.readObj({
    required: {
      "jsonPath": "s",
    },
    optional: {
      "matchEquals": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type WebhookAuthenticationType =
| "GITHUB_HMAC"
| "IP"
| "UNAUTHENTICATED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface WebhookAuthConfiguration {
  AllowedIPRange?: string | null;
  SecretToken?: string | null;
}
function fromWebhookAuthConfiguration(input?: WebhookAuthConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AllowedIPRange: input["AllowedIPRange"],
    SecretToken: input["SecretToken"],
  }
}
function toWebhookAuthConfiguration(root: jsonP.JSONValue): WebhookAuthConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowedIPRange": "s",
      "SecretToken": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type StageRetryMode =
| "FAILED_ACTIONS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type JobStatus =
| "Created"
| "Queued"
| "Dispatched"
| "InProgress"
| "TimedOut"
| "Succeeded"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ActionType {
  id: ActionTypeId;
  settings?: ActionTypeSettings | null;
  actionConfigurationProperties?: ActionConfigurationProperty[] | null;
  inputArtifactDetails: ArtifactDetails;
  outputArtifactDetails: ArtifactDetails;
}
function toActionType(root: jsonP.JSONValue): ActionType {
  return jsonP.readObj({
    required: {
      "id": toActionTypeId,
      "inputArtifactDetails": toArtifactDetails,
      "outputArtifactDetails": toArtifactDetails,
    },
    optional: {
      "settings": toActionTypeSettings,
      "actionConfigurationProperties": [toActionConfigurationProperty],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobDetails {
  id?: string | null;
  data?: JobData | null;
  accountId?: string | null;
}
function toJobDetails(root: jsonP.JSONValue): JobDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "data": toJobData,
      "accountId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface JobData {
  actionTypeId?: ActionTypeId | null;
  actionConfiguration?: ActionConfiguration | null;
  pipelineContext?: PipelineContext | null;
  inputArtifacts?: Artifact[] | null;
  outputArtifacts?: Artifact[] | null;
  artifactCredentials?: AWSSessionCredentials | null;
  continuationToken?: string | null;
  encryptionKey?: EncryptionKey | null;
}
function toJobData(root: jsonP.JSONValue): JobData {
  return jsonP.readObj({
    required: {},
    optional: {
      "actionTypeId": toActionTypeId,
      "actionConfiguration": toActionConfiguration,
      "pipelineContext": toPipelineContext,
      "inputArtifacts": [toArtifact],
      "outputArtifacts": [toArtifact],
      "artifactCredentials": toAWSSessionCredentials,
      "continuationToken": "s",
      "encryptionKey": toEncryptionKey,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ActionConfiguration {
  configuration?: { [key: string]: string | null | undefined } | null;
}
function toActionConfiguration(root: jsonP.JSONValue): ActionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "configuration": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface PipelineContext {
  pipelineName?: string | null;
  stage?: StageContext | null;
  action?: ActionContext | null;
  pipelineArn?: string | null;
  pipelineExecutionId?: string | null;
}
function toPipelineContext(root: jsonP.JSONValue): PipelineContext {
  return jsonP.readObj({
    required: {},
    optional: {
      "pipelineName": "s",
      "stage": toStageContext,
      "action": toActionContext,
      "pipelineArn": "s",
      "pipelineExecutionId": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface StageContext {
  name?: string | null;
}
function toStageContext(root: jsonP.JSONValue): StageContext {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ActionContext {
  name?: string | null;
  actionExecutionId?: string | null;
}
function toActionContext(root: jsonP.JSONValue): ActionContext {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "actionExecutionId": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface Artifact {
  name?: string | null;
  revision?: string | null;
  location?: ArtifactLocation | null;
}
function toArtifact(root: jsonP.JSONValue): Artifact {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "revision": "s",
      "location": toArtifactLocation,
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface ArtifactLocation {
  type?: ArtifactLocationType | null;
  s3Location?: S3ArtifactLocation | null;
}
function toArtifactLocation(root: jsonP.JSONValue): ArtifactLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ArtifactLocationType>(x),
      "s3Location": toS3ArtifactLocation,
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type ArtifactLocationType =
| "S3"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface S3ArtifactLocation {
  bucketName: string;
  objectKey: string;
}
function toS3ArtifactLocation(root: jsonP.JSONValue): S3ArtifactLocation {
  return jsonP.readObj({
    required: {
      "bucketName": "s",
      "objectKey": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface AWSSessionCredentials {
  accessKeyId: string;
  secretAccessKey: string;
  sessionToken: string;
}
function toAWSSessionCredentials(root: jsonP.JSONValue): AWSSessionCredentials {
  return jsonP.readObj({
    required: {
      "accessKeyId": "s",
      "secretAccessKey": "s",
      "sessionToken": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PipelineMetadata {
  pipelineArn?: string | null;
  created?: Date | number | null;
  updated?: Date | number | null;
}
function toPipelineMetadata(root: jsonP.JSONValue): PipelineMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "pipelineArn": "s",
      "created": "d",
      "updated": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PipelineExecution {
  pipelineName?: string | null;
  pipelineVersion?: number | null;
  pipelineExecutionId?: string | null;
  status?: PipelineExecutionStatus | null;
  artifactRevisions?: ArtifactRevision[] | null;
}
function toPipelineExecution(root: jsonP.JSONValue): PipelineExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "pipelineName": "s",
      "pipelineVersion": "n",
      "pipelineExecutionId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<PipelineExecutionStatus>(x),
      "artifactRevisions": [toArtifactRevision],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type PipelineExecutionStatus =
| "InProgress"
| "Stopped"
| "Stopping"
| "Succeeded"
| "Superseded"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ArtifactRevision {
  name?: string | null;
  revisionId?: string | null;
  revisionChangeIdentifier?: string | null;
  revisionSummary?: string | null;
  created?: Date | number | null;
  revisionUrl?: string | null;
}
function toArtifactRevision(root: jsonP.JSONValue): ArtifactRevision {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "revisionId": "s",
      "revisionChangeIdentifier": "s",
      "revisionSummary": "s",
      "created": "d",
      "revisionUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StageState {
  stageName?: string | null;
  inboundTransitionState?: TransitionState | null;
  actionStates?: ActionState[] | null;
  latestExecution?: StageExecution | null;
}
function toStageState(root: jsonP.JSONValue): StageState {
  return jsonP.readObj({
    required: {},
    optional: {
      "stageName": "s",
      "inboundTransitionState": toTransitionState,
      "actionStates": [toActionState],
      "latestExecution": toStageExecution,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TransitionState {
  enabled?: boolean | null;
  lastChangedBy?: string | null;
  lastChangedAt?: Date | number | null;
  disabledReason?: string | null;
}
function toTransitionState(root: jsonP.JSONValue): TransitionState {
  return jsonP.readObj({
    required: {},
    optional: {
      "enabled": "b",
      "lastChangedBy": "s",
      "lastChangedAt": "d",
      "disabledReason": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActionState {
  actionName?: string | null;
  currentRevision?: ActionRevision | null;
  latestExecution?: ActionExecution | null;
  entityUrl?: string | null;
  revisionUrl?: string | null;
}
function toActionState(root: jsonP.JSONValue): ActionState {
  return jsonP.readObj({
    required: {},
    optional: {
      "actionName": "s",
      "currentRevision": toActionRevision,
      "latestExecution": toActionExecution,
      "entityUrl": "s",
      "revisionUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActionExecution {
  status?: ActionExecutionStatus | null;
  summary?: string | null;
  lastStatusChange?: Date | number | null;
  token?: string | null;
  lastUpdatedBy?: string | null;
  externalExecutionId?: string | null;
  externalExecutionUrl?: string | null;
  percentComplete?: number | null;
  errorDetails?: ErrorDetails | null;
}
function toActionExecution(root: jsonP.JSONValue): ActionExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ActionExecutionStatus>(x),
      "summary": "s",
      "lastStatusChange": "d",
      "token": "s",
      "lastUpdatedBy": "s",
      "externalExecutionId": "s",
      "externalExecutionUrl": "s",
      "percentComplete": "n",
      "errorDetails": toErrorDetails,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ActionExecutionStatus =
| "InProgress"
| "Abandoned"
| "Succeeded"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ErrorDetails {
  code?: string | null;
  message?: string | null;
}
function toErrorDetails(root: jsonP.JSONValue): ErrorDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "s",
      "message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StageExecution {
  pipelineExecutionId: string;
  status: StageExecutionStatus;
}
function toStageExecution(root: jsonP.JSONValue): StageExecution {
  return jsonP.readObj({
    required: {
      "pipelineExecutionId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<StageExecutionStatus>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type StageExecutionStatus =
| "InProgress"
| "Failed"
| "Stopped"
| "Stopping"
| "Succeeded"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ThirdPartyJobDetails {
  id?: string | null;
  data?: ThirdPartyJobData | null;
  nonce?: string | null;
}
function toThirdPartyJobDetails(root: jsonP.JSONValue): ThirdPartyJobDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "data": toThirdPartyJobData,
      "nonce": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThirdPartyJobData {
  actionTypeId?: ActionTypeId | null;
  actionConfiguration?: ActionConfiguration | null;
  pipelineContext?: PipelineContext | null;
  inputArtifacts?: Artifact[] | null;
  outputArtifacts?: Artifact[] | null;
  artifactCredentials?: AWSSessionCredentials | null;
  continuationToken?: string | null;
  encryptionKey?: EncryptionKey | null;
}
function toThirdPartyJobData(root: jsonP.JSONValue): ThirdPartyJobData {
  return jsonP.readObj({
    required: {},
    optional: {
      "actionTypeId": toActionTypeId,
      "actionConfiguration": toActionConfiguration,
      "pipelineContext": toPipelineContext,
      "inputArtifacts": [toArtifact],
      "outputArtifacts": [toArtifact],
      "artifactCredentials": toAWSSessionCredentials,
      "continuationToken": "s",
      "encryptionKey": toEncryptionKey,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActionExecutionDetail {
  pipelineExecutionId?: string | null;
  actionExecutionId?: string | null;
  pipelineVersion?: number | null;
  stageName?: string | null;
  actionName?: string | null;
  startTime?: Date | number | null;
  lastUpdateTime?: Date | number | null;
  status?: ActionExecutionStatus | null;
  input?: ActionExecutionInput | null;
  output?: ActionExecutionOutput | null;
}
function toActionExecutionDetail(root: jsonP.JSONValue): ActionExecutionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "pipelineExecutionId": "s",
      "actionExecutionId": "s",
      "pipelineVersion": "n",
      "stageName": "s",
      "actionName": "s",
      "startTime": "d",
      "lastUpdateTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ActionExecutionStatus>(x),
      "input": toActionExecutionInput,
      "output": toActionExecutionOutput,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActionExecutionInput {
  actionTypeId?: ActionTypeId | null;
  configuration?: { [key: string]: string | null | undefined } | null;
  resolvedConfiguration?: { [key: string]: string | null | undefined } | null;
  roleArn?: string | null;
  region?: string | null;
  inputArtifacts?: ArtifactDetail[] | null;
  namespace?: string | null;
}
function toActionExecutionInput(root: jsonP.JSONValue): ActionExecutionInput {
  return jsonP.readObj({
    required: {},
    optional: {
      "actionTypeId": toActionTypeId,
      "configuration": x => jsonP.readMap(String, String, x),
      "resolvedConfiguration": x => jsonP.readMap(String, String, x),
      "roleArn": "s",
      "region": "s",
      "inputArtifacts": [toArtifactDetail],
      "namespace": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ArtifactDetail {
  name?: string | null;
  s3location?: S3Location | null;
}
function toArtifactDetail(root: jsonP.JSONValue): ArtifactDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "s3location": toS3Location,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface S3Location {
  bucket?: string | null;
  key?: string | null;
}
function toS3Location(root: jsonP.JSONValue): S3Location {
  return jsonP.readObj({
    required: {},
    optional: {
      "bucket": "s",
      "key": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActionExecutionOutput {
  outputArtifacts?: ArtifactDetail[] | null;
  executionResult?: ActionExecutionResult | null;
  outputVariables?: { [key: string]: string | null | undefined } | null;
}
function toActionExecutionOutput(root: jsonP.JSONValue): ActionExecutionOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "outputArtifacts": [toArtifactDetail],
      "executionResult": toActionExecutionResult,
      "outputVariables": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActionExecutionResult {
  externalExecutionId?: string | null;
  externalExecutionSummary?: string | null;
  externalExecutionUrl?: string | null;
}
function toActionExecutionResult(root: jsonP.JSONValue): ActionExecutionResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "externalExecutionId": "s",
      "externalExecutionSummary": "s",
      "externalExecutionUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PipelineExecutionSummary {
  pipelineExecutionId?: string | null;
  status?: PipelineExecutionStatus | null;
  startTime?: Date | number | null;
  lastUpdateTime?: Date | number | null;
  sourceRevisions?: SourceRevision[] | null;
  trigger?: ExecutionTrigger | null;
  stopTrigger?: StopExecutionTrigger | null;
}
function toPipelineExecutionSummary(root: jsonP.JSONValue): PipelineExecutionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "pipelineExecutionId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<PipelineExecutionStatus>(x),
      "startTime": "d",
      "lastUpdateTime": "d",
      "sourceRevisions": [toSourceRevision],
      "trigger": toExecutionTrigger,
      "stopTrigger": toStopExecutionTrigger,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SourceRevision {
  actionName: string;
  revisionId?: string | null;
  revisionSummary?: string | null;
  revisionUrl?: string | null;
}
function toSourceRevision(root: jsonP.JSONValue): SourceRevision {
  return jsonP.readObj({
    required: {
      "actionName": "s",
    },
    optional: {
      "revisionId": "s",
      "revisionSummary": "s",
      "revisionUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionTrigger {
  triggerType?: TriggerType | null;
  triggerDetail?: string | null;
}
function toExecutionTrigger(root: jsonP.JSONValue): ExecutionTrigger {
  return jsonP.readObj({
    required: {},
    optional: {
      "triggerType": (x: jsonP.JSONValue) => cmnP.readEnum<TriggerType>(x),
      "triggerDetail": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type TriggerType =
| "CreatePipeline"
| "StartPipelineExecution"
| "PollForSourceChanges"
| "Webhook"
| "CloudWatchEvent"
| "PutActionRevision"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface StopExecutionTrigger {
  reason?: string | null;
}
function toStopExecutionTrigger(root: jsonP.JSONValue): StopExecutionTrigger {
  return jsonP.readObj({
    required: {},
    optional: {
      "reason": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PipelineSummary {
  name?: string | null;
  version?: number | null;
  created?: Date | number | null;
  updated?: Date | number | null;
}
function toPipelineSummary(root: jsonP.JSONValue): PipelineSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "version": "n",
      "created": "d",
      "updated": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ListWebhookItem {
  definition: WebhookDefinition;
  url: string;
  errorMessage?: string | null;
  errorCode?: string | null;
  lastTriggered?: Date | number | null;
  arn?: string | null;
  tags?: Tag[] | null;
}
function toListWebhookItem(root: jsonP.JSONValue): ListWebhookItem {
  return jsonP.readObj({
    required: {
      "definition": toWebhookDefinition,
      "url": "s",
    },
    optional: {
      "errorMessage": "s",
      "errorCode": "s",
      "lastTriggered": "d",
      "arn": "s",
      "tags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Job {
  id?: string | null;
  data?: JobData | null;
  nonce?: string | null;
  accountId?: string | null;
}
function toJob(root: jsonP.JSONValue): Job {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "data": toJobData,
      "nonce": "s",
      "accountId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThirdPartyJob {
  clientId?: string | null;
  jobId?: string | null;
}
function toThirdPartyJob(root: jsonP.JSONValue): ThirdPartyJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "clientId": "s",
      "jobId": "s",
    },
  }, root);
}
