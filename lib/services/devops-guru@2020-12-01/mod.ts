// Autogenerated API client for: Amazon DevOps Guru

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class DevOpsGuru {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DevOpsGuru.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-12-01",
    "endpointPrefix": "devops-guru",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon DevOps Guru",
    "serviceId": "DevOps Guru",
    "signatureVersion": "v4",
    "signingName": "devops-guru",
    "uid": "devops-guru-2020-12-01"
  };

  async addNotificationChannel(
    {abortSignal, ...params}: RequestConfig & AddNotificationChannelRequest,
  ): Promise<AddNotificationChannelResponse> {
    const body: jsonP.JSONObject = {
      Config: fromNotificationChannelConfig(params["Config"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddNotificationChannel",
      method: "PUT",
      requestUri: "/channels",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Id": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async describeAccountHealth(
    {abortSignal, ...params}: RequestConfig & DescribeAccountHealthRequest = {},
  ): Promise<DescribeAccountHealthResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAccountHealth",
      method: "GET",
      requestUri: "/accounts/health",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "OpenReactiveInsights": "n",
        "OpenProactiveInsights": "n",
        "MetricsAnalyzed": "n",
      },
      optional: {},
    }, await resp.json());
  }

  async describeAccountOverview(
    {abortSignal, ...params}: RequestConfig & DescribeAccountOverviewRequest,
  ): Promise<DescribeAccountOverviewResponse> {
    const body: jsonP.JSONObject = {
      FromTime: jsonP.serializeDate_unixTimestamp(params["FromTime"]),
      ToTime: jsonP.serializeDate_unixTimestamp(params["ToTime"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountOverview",
      requestUri: "/accounts/overview",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "ReactiveInsights": "n",
        "ProactiveInsights": "n",
        "MeanTimeToRecoverInMilliseconds": "n",
      },
      optional: {},
    }, await resp.json());
  }

  async describeAnomaly(
    {abortSignal, ...params}: RequestConfig & DescribeAnomalyRequest,
  ): Promise<DescribeAnomalyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAnomaly",
      method: "GET",
      requestUri: cmnP.encodePath`/anomalies/${params["Id"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProactiveAnomaly": toProactiveAnomaly,
        "ReactiveAnomaly": toReactiveAnomaly,
      },
    }, await resp.json());
  }

  async describeInsight(
    {abortSignal, ...params}: RequestConfig & DescribeInsightRequest,
  ): Promise<DescribeInsightResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeInsight",
      method: "GET",
      requestUri: cmnP.encodePath`/insights/${params["Id"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProactiveInsight": toProactiveInsight,
        "ReactiveInsight": toReactiveInsight,
      },
    }, await resp.json());
  }

  async describeResourceCollectionHealth(
    {abortSignal, ...params}: RequestConfig & DescribeResourceCollectionHealthRequest,
  ): Promise<DescribeResourceCollectionHealthResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeResourceCollectionHealth",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/health/resource-collection/${params["ResourceCollectionType"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "CloudFormation": [toCloudFormationHealth],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeServiceIntegration(
    {abortSignal, ...params}: RequestConfig & DescribeServiceIntegrationRequest = {},
  ): Promise<DescribeServiceIntegrationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeServiceIntegration",
      method: "GET",
      requestUri: "/service-integrations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceIntegration": toServiceIntegrationConfig,
      },
    }, await resp.json());
  }

  async getResourceCollection(
    {abortSignal, ...params}: RequestConfig & GetResourceCollectionRequest,
  ): Promise<GetResourceCollectionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetResourceCollection",
      method: "GET",
      requestUri: cmnP.encodePath`/resource-collections/${params["ResourceCollectionType"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceCollection": toResourceCollectionFilter,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAnomaliesForInsight(
    {abortSignal, ...params}: RequestConfig & ListAnomaliesForInsightRequest,
  ): Promise<ListAnomaliesForInsightResponse> {
    const body: jsonP.JSONObject = {
      StartTimeRange: fromStartTimeRange(params["StartTimeRange"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAnomaliesForInsight",
      requestUri: cmnP.encodePath`/anomalies/insight/${params["InsightId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProactiveAnomalies": [toProactiveAnomalySummary],
        "ReactiveAnomalies": [toReactiveAnomalySummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEvents(
    {abortSignal, ...params}: RequestConfig & ListEventsRequest,
  ): Promise<ListEventsResponse> {
    const body: jsonP.JSONObject = {
      Filters: fromListEventsFilters(params["Filters"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEvents",
      requestUri: "/events",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Events": [toEvent],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInsights(
    {abortSignal, ...params}: RequestConfig & ListInsightsRequest,
  ): Promise<ListInsightsResponse> {
    const body: jsonP.JSONObject = {
      StatusFilter: fromListInsightsStatusFilter(params["StatusFilter"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInsights",
      requestUri: "/insights",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProactiveInsights": [toProactiveInsightSummary],
        "ReactiveInsights": [toReactiveInsightSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listNotificationChannels(
    {abortSignal, ...params}: RequestConfig & ListNotificationChannelsRequest = {},
  ): Promise<ListNotificationChannelsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListNotificationChannels",
      requestUri: "/channels",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Channels": [toNotificationChannel],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRecommendations(
    {abortSignal, ...params}: RequestConfig & ListRecommendationsRequest,
  ): Promise<ListRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      InsightId: params["InsightId"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRecommendations",
      requestUri: "/recommendations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Recommendations": [toRecommendation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putFeedback(
    {abortSignal, ...params}: RequestConfig & PutFeedbackRequest = {},
  ): Promise<PutFeedbackResponse> {
    const body: jsonP.JSONObject = {
      InsightFeedback: fromInsightFeedback(params["InsightFeedback"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutFeedback",
      method: "PUT",
      requestUri: "/feedback",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async removeNotificationChannel(
    {abortSignal, ...params}: RequestConfig & RemoveNotificationChannelRequest,
  ): Promise<RemoveNotificationChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveNotificationChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/channels/${params["Id"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async searchInsights(
    {abortSignal, ...params}: RequestConfig & SearchInsightsRequest,
  ): Promise<SearchInsightsResponse> {
    const body: jsonP.JSONObject = {
      StartTimeRange: fromStartTimeRange(params["StartTimeRange"]),
      Filters: fromSearchInsightsFilters(params["Filters"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchInsights",
      requestUri: "/insights/search",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProactiveInsights": [toProactiveInsightSummary],
        "ReactiveInsights": [toReactiveInsightSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async updateResourceCollection(
    {abortSignal, ...params}: RequestConfig & UpdateResourceCollectionRequest,
  ): Promise<UpdateResourceCollectionResponse> {
    const body: jsonP.JSONObject = {
      Action: params["Action"],
      ResourceCollection: fromUpdateResourceCollectionFilter(params["ResourceCollection"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResourceCollection",
      method: "PUT",
      requestUri: "/resource-collections",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateServiceIntegration(
    {abortSignal, ...params}: RequestConfig & UpdateServiceIntegrationRequest,
  ): Promise<UpdateServiceIntegrationResponse> {
    const body: jsonP.JSONObject = {
      ServiceIntegration: fromUpdateServiceIntegrationConfig(params["ServiceIntegration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateServiceIntegration",
      method: "PUT",
      requestUri: "/service-integrations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AddNotificationChannelRequest {
  Config: NotificationChannelConfig;
}

// refs: 1 - tags: named, input
export interface DescribeAccountHealthRequest {
}

// refs: 1 - tags: named, input
export interface DescribeAccountOverviewRequest {
  FromTime: Date | number;
  ToTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface DescribeAnomalyRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribeInsightRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribeResourceCollectionHealthRequest {
  ResourceCollectionType: ResourceCollectionType;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeServiceIntegrationRequest {
}

// refs: 1 - tags: named, input
export interface GetResourceCollectionRequest {
  ResourceCollectionType: ResourceCollectionType;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAnomaliesForInsightRequest {
  InsightId: string;
  StartTimeRange?: StartTimeRange | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListEventsRequest {
  Filters: ListEventsFilters;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListInsightsRequest {
  StatusFilter: ListInsightsStatusFilter;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListNotificationChannelsRequest {
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRecommendationsRequest {
  InsightId: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PutFeedbackRequest {
  InsightFeedback?: InsightFeedback | null;
}

// refs: 1 - tags: named, input
export interface RemoveNotificationChannelRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface SearchInsightsRequest {
  StartTimeRange: StartTimeRange;
  Filters?: SearchInsightsFilters | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  Type: InsightType;
}

// refs: 1 - tags: named, input
export interface UpdateResourceCollectionRequest {
  Action: UpdateResourceCollectionAction;
  ResourceCollection: UpdateResourceCollectionFilter;
}

// refs: 1 - tags: named, input
export interface UpdateServiceIntegrationRequest {
  ServiceIntegration: UpdateServiceIntegrationConfig;
}

// refs: 1 - tags: named, output
export interface AddNotificationChannelResponse {
  Id: string;
}

// refs: 1 - tags: named, output
export interface DescribeAccountHealthResponse {
  OpenReactiveInsights: number;
  OpenProactiveInsights: number;
  MetricsAnalyzed: number;
}

// refs: 1 - tags: named, output
export interface DescribeAccountOverviewResponse {
  ReactiveInsights: number;
  ProactiveInsights: number;
  MeanTimeToRecoverInMilliseconds: number;
}

// refs: 1 - tags: named, output
export interface DescribeAnomalyResponse {
  ProactiveAnomaly?: ProactiveAnomaly | null;
  ReactiveAnomaly?: ReactiveAnomaly | null;
}

// refs: 1 - tags: named, output
export interface DescribeInsightResponse {
  ProactiveInsight?: ProactiveInsight | null;
  ReactiveInsight?: ReactiveInsight | null;
}

// refs: 1 - tags: named, output
export interface DescribeResourceCollectionHealthResponse {
  CloudFormation: CloudFormationHealth[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeServiceIntegrationResponse {
  ServiceIntegration?: ServiceIntegrationConfig | null;
}

// refs: 1 - tags: named, output
export interface GetResourceCollectionResponse {
  ResourceCollection?: ResourceCollectionFilter | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAnomaliesForInsightResponse {
  ProactiveAnomalies?: ProactiveAnomalySummary[] | null;
  ReactiveAnomalies?: ReactiveAnomalySummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEventsResponse {
  Events: Event[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInsightsResponse {
  ProactiveInsights?: ProactiveInsightSummary[] | null;
  ReactiveInsights?: ReactiveInsightSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListNotificationChannelsResponse {
  Channels?: NotificationChannel[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRecommendationsResponse {
  Recommendations?: Recommendation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutFeedbackResponse {
}

// refs: 1 - tags: named, output
export interface RemoveNotificationChannelResponse {
}

// refs: 1 - tags: named, output
export interface SearchInsightsResponse {
  ProactiveInsights?: ProactiveInsightSummary[] | null;
  ReactiveInsights?: ReactiveInsightSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateResourceCollectionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateServiceIntegrationResponse {
}

// refs: 2 - tags: input, named, interface, output
export interface NotificationChannelConfig {
  Sns: SnsChannelConfig;
}
function fromNotificationChannelConfig(input?: NotificationChannelConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Sns: fromSnsChannelConfig(input["Sns"]),
  }
}
function toNotificationChannelConfig(root: jsonP.JSONValue): NotificationChannelConfig {
  return jsonP.readObj({
    required: {
      "Sns": toSnsChannelConfig,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SnsChannelConfig {
  TopicArn?: string | null;
}
function fromSnsChannelConfig(input?: SnsChannelConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TopicArn: input["TopicArn"],
  }
}
function toSnsChannelConfig(root: jsonP.JSONValue): SnsChannelConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "TopicArn": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum
export type ResourceCollectionType =
| "AWS_CLOUD_FORMATION"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface
export interface StartTimeRange {
  FromTime?: Date | number | null;
  ToTime?: Date | number | null;
}
function fromStartTimeRange(input?: StartTimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromTime: jsonP.serializeDate_unixTimestamp(input["FromTime"]),
    ToTime: jsonP.serializeDate_unixTimestamp(input["ToTime"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface ListEventsFilters {
  InsightId?: string | null;
  EventTimeRange?: EventTimeRange | null;
  EventClass?: EventClass | null;
  EventSource?: string | null;
  DataSource?: EventDataSource | null;
  ResourceCollection?: ResourceCollection | null;
}
function fromListEventsFilters(input?: ListEventsFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InsightId: input["InsightId"],
    EventTimeRange: fromEventTimeRange(input["EventTimeRange"]),
    EventClass: input["EventClass"],
    EventSource: input["EventSource"],
    DataSource: input["DataSource"],
    ResourceCollection: fromResourceCollection(input["ResourceCollection"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface EventTimeRange {
  FromTime: Date | number;
  ToTime: Date | number;
}
function fromEventTimeRange(input?: EventTimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromTime: jsonP.serializeDate_unixTimestamp(input["FromTime"]),
    ToTime: jsonP.serializeDate_unixTimestamp(input["ToTime"]),
  }
}

// refs: 2 - tags: input, named, enum, output
export type EventClass =
| "INFRASTRUCTURE"
| "DEPLOYMENT"
| "SECURITY_CHANGE"
| "CONFIG_CHANGE"
| "SCHEMA_CHANGE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type EventDataSource =
| "AWS_CLOUD_TRAIL"
| "AWS_CODE_DEPLOY"
| cmnP.UnexpectedEnumValue;

// refs: 13 - tags: input, named, interface, output
export interface ResourceCollection {
  CloudFormation?: CloudFormationCollection | null;
}
function fromResourceCollection(input?: ResourceCollection | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CloudFormation: fromCloudFormationCollection(input["CloudFormation"]),
  }
}
function toResourceCollection(root: jsonP.JSONValue): ResourceCollection {
  return jsonP.readObj({
    required: {},
    optional: {
      "CloudFormation": toCloudFormationCollection,
    },
  }, root);
}

// refs: 13 - tags: input, named, interface, output
export interface CloudFormationCollection {
  StackNames?: string[] | null;
}
function fromCloudFormationCollection(input?: CloudFormationCollection | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StackNames: input["StackNames"],
  }
}
function toCloudFormationCollection(root: jsonP.JSONValue): CloudFormationCollection {
  return jsonP.readObj({
    required: {},
    optional: {
      "StackNames": ["s"],
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ListInsightsStatusFilter {
  Ongoing?: ListInsightsOngoingStatusFilter | null;
  Closed?: ListInsightsClosedStatusFilter | null;
  Any?: ListInsightsAnyStatusFilter | null;
}
function fromListInsightsStatusFilter(input?: ListInsightsStatusFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Ongoing: fromListInsightsOngoingStatusFilter(input["Ongoing"]),
    Closed: fromListInsightsClosedStatusFilter(input["Closed"]),
    Any: fromListInsightsAnyStatusFilter(input["Any"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface ListInsightsOngoingStatusFilter {
  Type: InsightType;
}
function fromListInsightsOngoingStatusFilter(input?: ListInsightsOngoingStatusFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
  }
}

// refs: 4 - tags: input, named, enum
export type InsightType =
| "REACTIVE"
| "PROACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ListInsightsClosedStatusFilter {
  Type: InsightType;
  EndTimeRange: EndTimeRange;
}
function fromListInsightsClosedStatusFilter(input?: ListInsightsClosedStatusFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    EndTimeRange: fromEndTimeRange(input["EndTimeRange"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface EndTimeRange {
  FromTime?: Date | number | null;
  ToTime?: Date | number | null;
}
function fromEndTimeRange(input?: EndTimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromTime: jsonP.serializeDate_unixTimestamp(input["FromTime"]),
    ToTime: jsonP.serializeDate_unixTimestamp(input["ToTime"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface ListInsightsAnyStatusFilter {
  Type: InsightType;
  StartTimeRange: StartTimeRange;
}
function fromListInsightsAnyStatusFilter(input?: ListInsightsAnyStatusFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    StartTimeRange: fromStartTimeRange(input["StartTimeRange"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface InsightFeedback {
  Id?: string | null;
  Feedback?: InsightFeedbackOption | null;
}
function fromInsightFeedback(input?: InsightFeedback | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Feedback: input["Feedback"],
  }
}

// refs: 1 - tags: input, named, enum
export type InsightFeedbackOption =
| "VALID_COLLECTION"
| "RECOMMENDATION_USEFUL"
| "ALERT_TOO_SENSITIVE"
| "DATA_NOISY_ANOMALY"
| "DATA_INCORRECT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SearchInsightsFilters {
  Severities?: InsightSeverity[] | null;
  Statuses?: InsightStatus[] | null;
  ResourceCollection?: ResourceCollection | null;
}
function fromSearchInsightsFilters(input?: SearchInsightsFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Severities: input["Severities"],
    Statuses: input["Statuses"],
    ResourceCollection: fromResourceCollection(input["ResourceCollection"]),
  }
}

// refs: 7 - tags: input, named, enum, output
export type InsightSeverity =
| "LOW"
| "MEDIUM"
| "HIGH"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type InsightStatus =
| "ONGOING"
| "CLOSED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UpdateResourceCollectionAction =
| "ADD"
| "REMOVE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateResourceCollectionFilter {
  CloudFormation?: UpdateCloudFormationCollectionFilter | null;
}
function fromUpdateResourceCollectionFilter(input?: UpdateResourceCollectionFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CloudFormation: fromUpdateCloudFormationCollectionFilter(input["CloudFormation"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateCloudFormationCollectionFilter {
  StackNames?: string[] | null;
}
function fromUpdateCloudFormationCollectionFilter(input?: UpdateCloudFormationCollectionFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StackNames: input["StackNames"],
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateServiceIntegrationConfig {
  OpsCenter?: OpsCenterIntegrationConfig | null;
}
function fromUpdateServiceIntegrationConfig(input?: UpdateServiceIntegrationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OpsCenter: fromOpsCenterIntegrationConfig(input["OpsCenter"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface OpsCenterIntegrationConfig {
  OptInStatus?: OptInStatus | null;
}
function fromOpsCenterIntegrationConfig(input?: OpsCenterIntegrationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OptInStatus: input["OptInStatus"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type OptInStatus =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ProactiveAnomaly {
  Id?: string | null;
  Severity?: AnomalySeverity | null;
  Status?: AnomalyStatus | null;
  UpdateTime?: Date | number | null;
  AnomalyTimeRange?: AnomalyTimeRange | null;
  PredictionTimeRange?: PredictionTimeRange | null;
  SourceDetails?: AnomalySourceDetails | null;
  AssociatedInsightId?: string | null;
  ResourceCollection?: ResourceCollection | null;
  Limit?: number | null;
}
function toProactiveAnomaly(root: jsonP.JSONValue): ProactiveAnomaly {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalySeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalyStatus>(x),
      "UpdateTime": "d",
      "AnomalyTimeRange": toAnomalyTimeRange,
      "PredictionTimeRange": toPredictionTimeRange,
      "SourceDetails": toAnomalySourceDetails,
      "AssociatedInsightId": "s",
      "ResourceCollection": toResourceCollection,
      "Limit": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type AnomalySeverity =
| "LOW"
| "MEDIUM"
| "HIGH"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, enum
export type AnomalyStatus =
| "ONGOING"
| "CLOSED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface AnomalyTimeRange {
  StartTime: Date | number;
  EndTime?: Date | number | null;
}
function toAnomalyTimeRange(root: jsonP.JSONValue): AnomalyTimeRange {
  return jsonP.readObj({
    required: {
      "StartTime": "d",
    },
    optional: {
      "EndTime": "d",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface PredictionTimeRange {
  StartTime: Date | number;
  EndTime?: Date | number | null;
}
function toPredictionTimeRange(root: jsonP.JSONValue): PredictionTimeRange {
  return jsonP.readObj({
    required: {
      "StartTime": "d",
    },
    optional: {
      "EndTime": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface AnomalySourceDetails {
  CloudWatchMetrics?: CloudWatchMetricsDetail[] | null;
}
function toAnomalySourceDetails(root: jsonP.JSONValue): AnomalySourceDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "CloudWatchMetrics": [toCloudWatchMetricsDetail],
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface CloudWatchMetricsDetail {
  MetricName?: string | null;
  Namespace?: string | null;
  Dimensions?: CloudWatchMetricsDimension[] | null;
  Stat?: CloudWatchMetricsStat | null;
  Unit?: string | null;
  Period?: number | null;
}
function toCloudWatchMetricsDetail(root: jsonP.JSONValue): CloudWatchMetricsDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "MetricName": "s",
      "Namespace": "s",
      "Dimensions": [toCloudWatchMetricsDimension],
      "Stat": (x: jsonP.JSONValue) => cmnP.readEnum<CloudWatchMetricsStat>(x),
      "Unit": "s",
      "Period": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface CloudWatchMetricsDimension {
  Name?: string | null;
  Value?: string | null;
}
function toCloudWatchMetricsDimension(root: jsonP.JSONValue): CloudWatchMetricsDimension {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type CloudWatchMetricsStat =
| "Sum"
| "Average"
| "SampleCount"
| "Minimum"
| "Maximum"
| "p99"
| "p90"
| "p50"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ReactiveAnomaly {
  Id?: string | null;
  Severity?: AnomalySeverity | null;
  Status?: AnomalyStatus | null;
  AnomalyTimeRange?: AnomalyTimeRange | null;
  SourceDetails?: AnomalySourceDetails | null;
  AssociatedInsightId?: string | null;
  ResourceCollection?: ResourceCollection | null;
}
function toReactiveAnomaly(root: jsonP.JSONValue): ReactiveAnomaly {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalySeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalyStatus>(x),
      "AnomalyTimeRange": toAnomalyTimeRange,
      "SourceDetails": toAnomalySourceDetails,
      "AssociatedInsightId": "s",
      "ResourceCollection": toResourceCollection,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProactiveInsight {
  Id?: string | null;
  Name?: string | null;
  Severity?: InsightSeverity | null;
  Status?: InsightStatus | null;
  InsightTimeRange?: InsightTimeRange | null;
  PredictionTimeRange?: PredictionTimeRange | null;
  ResourceCollection?: ResourceCollection | null;
  SsmOpsItemId?: string | null;
}
function toProactiveInsight(root: jsonP.JSONValue): ProactiveInsight {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<InsightSeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<InsightStatus>(x),
      "InsightTimeRange": toInsightTimeRange,
      "PredictionTimeRange": toPredictionTimeRange,
      "ResourceCollection": toResourceCollection,
      "SsmOpsItemId": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface InsightTimeRange {
  StartTime: Date | number;
  EndTime?: Date | number | null;
}
function toInsightTimeRange(root: jsonP.JSONValue): InsightTimeRange {
  return jsonP.readObj({
    required: {
      "StartTime": "d",
    },
    optional: {
      "EndTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReactiveInsight {
  Id?: string | null;
  Name?: string | null;
  Severity?: InsightSeverity | null;
  Status?: InsightStatus | null;
  InsightTimeRange?: InsightTimeRange | null;
  ResourceCollection?: ResourceCollection | null;
  SsmOpsItemId?: string | null;
}
function toReactiveInsight(root: jsonP.JSONValue): ReactiveInsight {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<InsightSeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<InsightStatus>(x),
      "InsightTimeRange": toInsightTimeRange,
      "ResourceCollection": toResourceCollection,
      "SsmOpsItemId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CloudFormationHealth {
  StackName?: string | null;
  Insight?: InsightHealth | null;
}
function toCloudFormationHealth(root: jsonP.JSONValue): CloudFormationHealth {
  return jsonP.readObj({
    required: {},
    optional: {
      "StackName": "s",
      "Insight": toInsightHealth,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InsightHealth {
  OpenProactiveInsights?: number | null;
  OpenReactiveInsights?: number | null;
  MeanTimeToRecoverInMilliseconds?: number | null;
}
function toInsightHealth(root: jsonP.JSONValue): InsightHealth {
  return jsonP.readObj({
    required: {},
    optional: {
      "OpenProactiveInsights": "n",
      "OpenReactiveInsights": "n",
      "MeanTimeToRecoverInMilliseconds": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ServiceIntegrationConfig {
  OpsCenter?: OpsCenterIntegration | null;
}
function toServiceIntegrationConfig(root: jsonP.JSONValue): ServiceIntegrationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "OpsCenter": toOpsCenterIntegration,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OpsCenterIntegration {
  OptInStatus?: OptInStatus | null;
}
function toOpsCenterIntegration(root: jsonP.JSONValue): OpsCenterIntegration {
  return jsonP.readObj({
    required: {},
    optional: {
      "OptInStatus": (x: jsonP.JSONValue) => cmnP.readEnum<OptInStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceCollectionFilter {
  CloudFormation?: CloudFormationCollectionFilter | null;
}
function toResourceCollectionFilter(root: jsonP.JSONValue): ResourceCollectionFilter {
  return jsonP.readObj({
    required: {},
    optional: {
      "CloudFormation": toCloudFormationCollectionFilter,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CloudFormationCollectionFilter {
  StackNames?: string[] | null;
}
function toCloudFormationCollectionFilter(root: jsonP.JSONValue): CloudFormationCollectionFilter {
  return jsonP.readObj({
    required: {},
    optional: {
      "StackNames": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProactiveAnomalySummary {
  Id?: string | null;
  Severity?: AnomalySeverity | null;
  Status?: AnomalyStatus | null;
  UpdateTime?: Date | number | null;
  AnomalyTimeRange?: AnomalyTimeRange | null;
  PredictionTimeRange?: PredictionTimeRange | null;
  SourceDetails?: AnomalySourceDetails | null;
  AssociatedInsightId?: string | null;
  ResourceCollection?: ResourceCollection | null;
  Limit?: number | null;
}
function toProactiveAnomalySummary(root: jsonP.JSONValue): ProactiveAnomalySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalySeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalyStatus>(x),
      "UpdateTime": "d",
      "AnomalyTimeRange": toAnomalyTimeRange,
      "PredictionTimeRange": toPredictionTimeRange,
      "SourceDetails": toAnomalySourceDetails,
      "AssociatedInsightId": "s",
      "ResourceCollection": toResourceCollection,
      "Limit": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReactiveAnomalySummary {
  Id?: string | null;
  Severity?: AnomalySeverity | null;
  Status?: AnomalyStatus | null;
  AnomalyTimeRange?: AnomalyTimeRange | null;
  SourceDetails?: AnomalySourceDetails | null;
  AssociatedInsightId?: string | null;
  ResourceCollection?: ResourceCollection | null;
}
function toReactiveAnomalySummary(root: jsonP.JSONValue): ReactiveAnomalySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalySeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<AnomalyStatus>(x),
      "AnomalyTimeRange": toAnomalyTimeRange,
      "SourceDetails": toAnomalySourceDetails,
      "AssociatedInsightId": "s",
      "ResourceCollection": toResourceCollection,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Event {
  ResourceCollection?: ResourceCollection | null;
  Id?: string | null;
  Time?: Date | number | null;
  EventSource?: string | null;
  Name?: string | null;
  DataSource?: EventDataSource | null;
  EventClass?: EventClass | null;
  Resources?: EventResource[] | null;
}
function toEvent(root: jsonP.JSONValue): Event {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceCollection": toResourceCollection,
      "Id": "s",
      "Time": "d",
      "EventSource": "s",
      "Name": "s",
      "DataSource": (x: jsonP.JSONValue) => cmnP.readEnum<EventDataSource>(x),
      "EventClass": (x: jsonP.JSONValue) => cmnP.readEnum<EventClass>(x),
      "Resources": [toEventResource],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventResource {
  Type?: string | null;
  Name?: string | null;
  Arn?: string | null;
}
function toEventResource(root: jsonP.JSONValue): EventResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Name": "s",
      "Arn": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ProactiveInsightSummary {
  Id?: string | null;
  Name?: string | null;
  Severity?: InsightSeverity | null;
  Status?: InsightStatus | null;
  InsightTimeRange?: InsightTimeRange | null;
  PredictionTimeRange?: PredictionTimeRange | null;
  ResourceCollection?: ResourceCollection | null;
}
function toProactiveInsightSummary(root: jsonP.JSONValue): ProactiveInsightSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<InsightSeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<InsightStatus>(x),
      "InsightTimeRange": toInsightTimeRange,
      "PredictionTimeRange": toPredictionTimeRange,
      "ResourceCollection": toResourceCollection,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ReactiveInsightSummary {
  Id?: string | null;
  Name?: string | null;
  Severity?: InsightSeverity | null;
  Status?: InsightStatus | null;
  InsightTimeRange?: InsightTimeRange | null;
  ResourceCollection?: ResourceCollection | null;
}
function toReactiveInsightSummary(root: jsonP.JSONValue): ReactiveInsightSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<InsightSeverity>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<InsightStatus>(x),
      "InsightTimeRange": toInsightTimeRange,
      "ResourceCollection": toResourceCollection,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NotificationChannel {
  Id?: string | null;
  Config?: NotificationChannelConfig | null;
}
function toNotificationChannel(root: jsonP.JSONValue): NotificationChannel {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Config": toNotificationChannelConfig,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Recommendation {
  Description?: string | null;
  Link?: string | null;
  Name?: string | null;
  Reason?: string | null;
  RelatedEvents?: RecommendationRelatedEvent[] | null;
  RelatedAnomalies?: RecommendationRelatedAnomaly[] | null;
}
function toRecommendation(root: jsonP.JSONValue): Recommendation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Description": "s",
      "Link": "s",
      "Name": "s",
      "Reason": "s",
      "RelatedEvents": [toRecommendationRelatedEvent],
      "RelatedAnomalies": [toRecommendationRelatedAnomaly],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecommendationRelatedEvent {
  Name?: string | null;
  Resources?: RecommendationRelatedEventResource[] | null;
}
function toRecommendationRelatedEvent(root: jsonP.JSONValue): RecommendationRelatedEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Resources": [toRecommendationRelatedEventResource],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecommendationRelatedEventResource {
  Name?: string | null;
  Type?: string | null;
}
function toRecommendationRelatedEventResource(root: jsonP.JSONValue): RecommendationRelatedEventResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecommendationRelatedAnomaly {
  Resources?: RecommendationRelatedAnomalyResource[] | null;
  SourceDetails?: RecommendationRelatedAnomalySourceDetail[] | null;
}
function toRecommendationRelatedAnomaly(root: jsonP.JSONValue): RecommendationRelatedAnomaly {
  return jsonP.readObj({
    required: {},
    optional: {
      "Resources": [toRecommendationRelatedAnomalyResource],
      "SourceDetails": [toRecommendationRelatedAnomalySourceDetail],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecommendationRelatedAnomalyResource {
  Name?: string | null;
  Type?: string | null;
}
function toRecommendationRelatedAnomalyResource(root: jsonP.JSONValue): RecommendationRelatedAnomalyResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecommendationRelatedAnomalySourceDetail {
  CloudWatchMetrics?: RecommendationRelatedCloudWatchMetricsSourceDetail[] | null;
}
function toRecommendationRelatedAnomalySourceDetail(root: jsonP.JSONValue): RecommendationRelatedAnomalySourceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "CloudWatchMetrics": [toRecommendationRelatedCloudWatchMetricsSourceDetail],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecommendationRelatedCloudWatchMetricsSourceDetail {
  MetricName?: string | null;
  Namespace?: string | null;
}
function toRecommendationRelatedCloudWatchMetricsSourceDetail(root: jsonP.JSONValue): RecommendationRelatedCloudWatchMetricsSourceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "MetricName": "s",
      "Namespace": "s",
    },
  }, root);
}
