// Autogenerated API client for: AWS IoT Data Plane

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class IotData {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IotData.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-05-28",
    "endpointPrefix": "data.iot",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT Data Plane",
    "serviceId": "IoT Data Plane",
    "signatureVersion": "v4",
    "signingName": "iotdata",
    "uid": "iot-data-2015-05-28"
  };

  async deleteThingShadow(
    {abortSignal, ...params}: RequestConfig & DeleteThingShadowRequest,
  ): Promise<DeleteThingShadowResponse> {
    const query = new URLSearchParams;
    if (params["shadowName"] != null) query.set("name", params["shadowName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteThingShadow",
      method: "DELETE",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/shadow`,
    });
  return {
    payload: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async getThingShadow(
    {abortSignal, ...params}: RequestConfig & GetThingShadowRequest,
  ): Promise<GetThingShadowResponse> {
    const query = new URLSearchParams;
    if (params["shadowName"] != null) query.set("name", params["shadowName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetThingShadow",
      method: "GET",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/shadow`,
    });
  return {
    payload: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async listNamedShadowsForThing(
    {abortSignal, ...params}: RequestConfig & ListNamedShadowsForThingRequest,
  ): Promise<ListNamedShadowsForThingResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListNamedShadowsForThing",
      method: "GET",
      requestUri: cmnP.encodePath`/api/things/shadow/ListNamedShadowsForThing/${params["thingName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "results": ["s"],
          "nextToken": "s",
          "timestamp": "n",
        },
      }, await resp.json()),
  };
  }

  async publish(
    {abortSignal, ...params}: RequestConfig & PublishRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["qos"] != null) query.set("qos", params["qos"]?.toString() ?? "");
    const body = typeof params["payload"] === 'string' ? new TextEncoder().encode(params["payload"]) : params["payload"];
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "Publish",
      requestUri: cmnP.encodePath`/topics/${params["topic"]}`,
    });
  }

  async updateThingShadow(
    {abortSignal, ...params}: RequestConfig & UpdateThingShadowRequest,
  ): Promise<UpdateThingShadowResponse> {
    const query = new URLSearchParams;
    if (params["shadowName"] != null) query.set("name", params["shadowName"]?.toString() ?? "");
    const body = typeof params["payload"] === 'string' ? new TextEncoder().encode(params["payload"]) : params["payload"];
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateThingShadow",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/shadow`,
    });
  return {
    payload: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

}

// refs: 1 - tags: named, input
export interface DeleteThingShadowRequest {
  thingName: string;
  shadowName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetThingShadowRequest {
  thingName: string;
  shadowName?: string | null;
}

// refs: 1 - tags: named, input
export interface ListNamedShadowsForThingRequest {
  thingName: string;
  nextToken?: string | null;
  pageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface PublishRequest {
  topic: string;
  qos?: number | null;
  payload?: Uint8Array | string | null;
}

// refs: 1 - tags: named, input
export interface UpdateThingShadowRequest {
  thingName: string;
  shadowName?: string | null;
  payload: Uint8Array | string;
}

// refs: 1 - tags: named, output
export interface DeleteThingShadowResponse {
  payload: Uint8Array | string;
}

// refs: 1 - tags: named, output
export interface GetThingShadowResponse {
  payload?: Uint8Array | string | null;
}

// refs: 1 - tags: named, output
export interface ListNamedShadowsForThingResponse {
  results?: string[] | null;
  nextToken?: string | null;
  timestamp?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateThingShadowResponse {
  payload?: Uint8Array | string | null;
}
