// Autogenerated API client for: Amazon Lex Model Building V2

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class LexModelsV2 {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(LexModelsV2.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-08-07",
    "endpointPrefix": "models-v2-lex",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Lex Models V2",
    "serviceFullName": "Amazon Lex Model Building V2",
    "serviceId": "Lex Models V2",
    "signatureVersion": "v4",
    "signingName": "lex",
    "uid": "models.lex.v2-2020-08-07"
  };

  async buildBotLocale(
    {abortSignal, ...params}: RequestConfig & BuildBotLocaleRequest,
  ): Promise<BuildBotLocaleResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "BuildBotLocale",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "botLocaleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotLocaleStatus>(x),
        "lastBuildSubmittedDateTime": "d",
      },
    }, await resp.json());
  }

  async createBot(
    {abortSignal, ...params}: RequestConfig & CreateBotRequest,
  ): Promise<CreateBotResponse> {
    const body: jsonP.JSONObject = {
      botName: params["botName"],
      description: params["description"],
      roleArn: params["roleArn"],
      dataPrivacy: fromDataPrivacy(params["dataPrivacy"]),
      idleSessionTTLInSeconds: params["idleSessionTTLInSeconds"],
      botTags: params["botTags"],
      testBotAliasTags: params["testBotAliasTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBot",
      method: "PUT",
      requestUri: "/bots/",
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botName": "s",
        "description": "s",
        "roleArn": "s",
        "dataPrivacy": toDataPrivacy,
        "idleSessionTTLInSeconds": "n",
        "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
        "creationDateTime": "d",
        "botTags": x => jsonP.readMap(String, String, x),
        "testBotAliasTags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createBotAlias(
    {abortSignal, ...params}: RequestConfig & CreateBotAliasRequest,
  ): Promise<CreateBotAliasResponse> {
    const body: jsonP.JSONObject = {
      botAliasName: params["botAliasName"],
      description: params["description"],
      botVersion: params["botVersion"],
      botAliasLocaleSettings: jsonP.serializeMap(params["botAliasLocaleSettings"], x => fromBotAliasLocaleSettings(x)),
      conversationLogSettings: fromConversationLogSettings(params["conversationLogSettings"]),
      sentimentAnalysisSettings: fromSentimentAnalysisSettings(params["sentimentAnalysisSettings"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBotAlias",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botaliases/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botAliasId": "s",
        "botAliasName": "s",
        "description": "s",
        "botVersion": "s",
        "botAliasLocaleSettings": x => jsonP.readMap(String, toBotAliasLocaleSettings, x),
        "conversationLogSettings": toConversationLogSettings,
        "sentimentAnalysisSettings": toSentimentAnalysisSettings,
        "botAliasStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotAliasStatus>(x),
        "botId": "s",
        "creationDateTime": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createBotLocale(
    {abortSignal, ...params}: RequestConfig & CreateBotLocaleRequest,
  ): Promise<CreateBotLocaleResponse> {
    const body: jsonP.JSONObject = {
      localeId: params["localeId"],
      description: params["description"],
      nluIntentConfidenceThreshold: params["nluIntentConfidenceThreshold"],
      voiceSettings: fromVoiceSettings(params["voiceSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBotLocale",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeName": "s",
        "localeId": "s",
        "description": "s",
        "nluIntentConfidenceThreshold": "n",
        "voiceSettings": toVoiceSettings,
        "botLocaleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotLocaleStatus>(x),
        "creationDateTime": "d",
      },
    }, await resp.json());
  }

  async createBotVersion(
    {abortSignal, ...params}: RequestConfig & CreateBotVersionRequest,
  ): Promise<CreateBotVersionResponse> {
    const body: jsonP.JSONObject = {
      description: params["description"],
      botVersionLocaleSpecification: jsonP.serializeMap(params["botVersionLocaleSpecification"], x => fromBotVersionLocaleDetails(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBotVersion",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "description": "s",
        "botVersion": "s",
        "botVersionLocaleSpecification": x => jsonP.readMap(String, toBotVersionLocaleDetails, x),
        "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
        "creationDateTime": "d",
      },
    }, await resp.json());
  }

  async createIntent(
    {abortSignal, ...params}: RequestConfig & CreateIntentRequest,
  ): Promise<CreateIntentResponse> {
    const body: jsonP.JSONObject = {
      intentName: params["intentName"],
      description: params["description"],
      parentIntentSignature: params["parentIntentSignature"],
      sampleUtterances: params["sampleUtterances"]?.map(x => fromSampleUtterance(x)),
      dialogCodeHook: fromDialogCodeHookSettings(params["dialogCodeHook"]),
      fulfillmentCodeHook: fromFulfillmentCodeHookSettings(params["fulfillmentCodeHook"]),
      intentConfirmationSetting: fromIntentConfirmationSetting(params["intentConfirmationSetting"]),
      intentClosingSetting: fromIntentClosingSetting(params["intentClosingSetting"]),
      inputContexts: params["inputContexts"]?.map(x => fromInputContext(x)),
      outputContexts: params["outputContexts"]?.map(x => fromOutputContext(x)),
      kendraConfiguration: fromKendraConfiguration(params["kendraConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIntent",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "intentId": "s",
        "intentName": "s",
        "description": "s",
        "parentIntentSignature": "s",
        "sampleUtterances": [toSampleUtterance],
        "dialogCodeHook": toDialogCodeHookSettings,
        "fulfillmentCodeHook": toFulfillmentCodeHookSettings,
        "intentConfirmationSetting": toIntentConfirmationSetting,
        "intentClosingSetting": toIntentClosingSetting,
        "inputContexts": [toInputContext],
        "outputContexts": [toOutputContext],
        "kendraConfiguration": toKendraConfiguration,
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "creationDateTime": "d",
      },
    }, await resp.json());
  }

  async createSlot(
    {abortSignal, ...params}: RequestConfig & CreateSlotRequest,
  ): Promise<CreateSlotResponse> {
    const body: jsonP.JSONObject = {
      slotName: params["slotName"],
      description: params["description"],
      slotTypeId: params["slotTypeId"],
      valueElicitationSetting: fromSlotValueElicitationSetting(params["valueElicitationSetting"]),
      obfuscationSetting: fromObfuscationSetting(params["obfuscationSetting"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSlot",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/slots/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "slotId": "s",
        "slotName": "s",
        "description": "s",
        "slotTypeId": "s",
        "valueElicitationSetting": toSlotValueElicitationSetting,
        "obfuscationSetting": toObfuscationSetting,
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "intentId": "s",
        "creationDateTime": "d",
      },
    }, await resp.json());
  }

  async createSlotType(
    {abortSignal, ...params}: RequestConfig & CreateSlotTypeRequest,
  ): Promise<CreateSlotTypeResponse> {
    const body: jsonP.JSONObject = {
      slotTypeName: params["slotTypeName"],
      description: params["description"],
      slotTypeValues: params["slotTypeValues"]?.map(x => fromSlotTypeValue(x)),
      valueSelectionSetting: fromSlotValueSelectionSetting(params["valueSelectionSetting"]),
      parentSlotTypeSignature: params["parentSlotTypeSignature"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSlotType",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/slottypes/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "slotTypeId": "s",
        "slotTypeName": "s",
        "description": "s",
        "slotTypeValues": [toSlotTypeValue],
        "valueSelectionSetting": toSlotValueSelectionSetting,
        "parentSlotTypeSignature": "s",
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "creationDateTime": "d",
      },
    }, await resp.json());
  }

  async deleteBot(
    {abortSignal, ...params}: RequestConfig & DeleteBotRequest,
  ): Promise<DeleteBotResponse> {
    const query = new URLSearchParams;
    if (params["skipResourceInUseCheck"] != null) query.set("skipResourceInUseCheck", params["skipResourceInUseCheck"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteBot",
      method: "DELETE",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
      },
    }, await resp.json());
  }

  async deleteBotAlias(
    {abortSignal, ...params}: RequestConfig & DeleteBotAliasRequest,
  ): Promise<DeleteBotAliasResponse> {
    const query = new URLSearchParams;
    if (params["skipResourceInUseCheck"] != null) query.set("skipResourceInUseCheck", params["skipResourceInUseCheck"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteBotAlias",
      method: "DELETE",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botaliases/${params["botAliasId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botAliasId": "s",
        "botId": "s",
        "botAliasStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotAliasStatus>(x),
      },
    }, await resp.json());
  }

  async deleteBotLocale(
    {abortSignal, ...params}: RequestConfig & DeleteBotLocaleRequest,
  ): Promise<DeleteBotLocaleResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBotLocale",
      method: "DELETE",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "botLocaleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotLocaleStatus>(x),
      },
    }, await resp.json());
  }

  async deleteBotVersion(
    {abortSignal, ...params}: RequestConfig & DeleteBotVersionRequest,
  ): Promise<DeleteBotVersionResponse> {
    const query = new URLSearchParams;
    if (params["skipResourceInUseCheck"] != null) query.set("skipResourceInUseCheck", params["skipResourceInUseCheck"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteBotVersion",
      method: "DELETE",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
      },
    }, await resp.json());
  }

  async deleteIntent(
    {abortSignal, ...params}: RequestConfig & DeleteIntentRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIntent",
      method: "DELETE",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/`,
      responseCode: 204,
    });
  }

  async deleteSlot(
    {abortSignal, ...params}: RequestConfig & DeleteSlotRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSlot",
      method: "DELETE",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/slots/${params["slotId"]}/`,
      responseCode: 204,
    });
  }

  async deleteSlotType(
    {abortSignal, ...params}: RequestConfig & DeleteSlotTypeRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["skipResourceInUseCheck"] != null) query.set("skipResourceInUseCheck", params["skipResourceInUseCheck"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteSlotType",
      method: "DELETE",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/slottypes/${params["slotTypeId"]}/`,
      responseCode: 204,
    });
  }

  async describeBot(
    {abortSignal, ...params}: RequestConfig & DescribeBotRequest,
  ): Promise<DescribeBotResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBot",
      method: "GET",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botName": "s",
        "description": "s",
        "roleArn": "s",
        "dataPrivacy": toDataPrivacy,
        "idleSessionTTLInSeconds": "n",
        "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async describeBotAlias(
    {abortSignal, ...params}: RequestConfig & DescribeBotAliasRequest,
  ): Promise<DescribeBotAliasResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBotAlias",
      method: "GET",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botaliases/${params["botAliasId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botAliasId": "s",
        "botAliasName": "s",
        "description": "s",
        "botVersion": "s",
        "botAliasLocaleSettings": x => jsonP.readMap(String, toBotAliasLocaleSettings, x),
        "conversationLogSettings": toConversationLogSettings,
        "sentimentAnalysisSettings": toSentimentAnalysisSettings,
        "botAliasHistoryEvents": [toBotAliasHistoryEvent],
        "botAliasStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotAliasStatus>(x),
        "botId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async describeBotLocale(
    {abortSignal, ...params}: RequestConfig & DescribeBotLocaleRequest,
  ): Promise<DescribeBotLocaleResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBotLocale",
      method: "GET",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "localeName": "s",
        "description": "s",
        "nluIntentConfidenceThreshold": "n",
        "voiceSettings": toVoiceSettings,
        "intentsCount": "n",
        "slotTypesCount": "n",
        "botLocaleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotLocaleStatus>(x),
        "failureReasons": ["s"],
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
        "lastBuildSubmittedDateTime": "d",
        "botLocaleHistoryEvents": [toBotLocaleHistoryEvent],
      },
    }, await resp.json());
  }

  async describeBotVersion(
    {abortSignal, ...params}: RequestConfig & DescribeBotVersionRequest,
  ): Promise<DescribeBotVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBotVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botName": "s",
        "botVersion": "s",
        "description": "s",
        "roleArn": "s",
        "dataPrivacy": toDataPrivacy,
        "idleSessionTTLInSeconds": "n",
        "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
        "failureReasons": ["s"],
        "creationDateTime": "d",
      },
    }, await resp.json());
  }

  async describeIntent(
    {abortSignal, ...params}: RequestConfig & DescribeIntentRequest,
  ): Promise<DescribeIntentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIntent",
      method: "GET",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "intentId": "s",
        "intentName": "s",
        "description": "s",
        "parentIntentSignature": "s",
        "sampleUtterances": [toSampleUtterance],
        "dialogCodeHook": toDialogCodeHookSettings,
        "fulfillmentCodeHook": toFulfillmentCodeHookSettings,
        "slotPriorities": [toSlotPriority],
        "intentConfirmationSetting": toIntentConfirmationSetting,
        "intentClosingSetting": toIntentClosingSetting,
        "inputContexts": [toInputContext],
        "outputContexts": [toOutputContext],
        "kendraConfiguration": toKendraConfiguration,
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async describeSlot(
    {abortSignal, ...params}: RequestConfig & DescribeSlotRequest,
  ): Promise<DescribeSlotResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeSlot",
      method: "GET",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/slots/${params["slotId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "slotId": "s",
        "slotName": "s",
        "description": "s",
        "slotTypeId": "s",
        "valueElicitationSetting": toSlotValueElicitationSetting,
        "obfuscationSetting": toObfuscationSetting,
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "intentId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async describeSlotType(
    {abortSignal, ...params}: RequestConfig & DescribeSlotTypeRequest,
  ): Promise<DescribeSlotTypeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeSlotType",
      method: "GET",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/slottypes/${params["slotTypeId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "slotTypeId": "s",
        "slotTypeName": "s",
        "description": "s",
        "slotTypeValues": [toSlotTypeValue],
        "valueSelectionSetting": toSlotValueSelectionSetting,
        "parentSlotTypeSignature": "s",
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async listBotAliases(
    {abortSignal, ...params}: RequestConfig & ListBotAliasesRequest,
  ): Promise<ListBotAliasesResponse> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBotAliases",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botaliases/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botAliasSummaries": [toBotAliasSummary],
        "nextToken": "s",
        "botId": "s",
      },
    }, await resp.json());
  }

  async listBotLocales(
    {abortSignal, ...params}: RequestConfig & ListBotLocalesRequest,
  ): Promise<ListBotLocalesResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromBotLocaleSortBy(params["sortBy"]),
      filters: params["filters"]?.map(x => fromBotLocaleFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBotLocales",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "nextToken": "s",
        "botLocaleSummaries": [toBotLocaleSummary],
      },
    }, await resp.json());
  }

  async listBotVersions(
    {abortSignal, ...params}: RequestConfig & ListBotVersionsRequest,
  ): Promise<ListBotVersionsResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromBotVersionSortBy(params["sortBy"]),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBotVersions",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersionSummaries": [toBotVersionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listBots(
    {abortSignal, ...params}: RequestConfig & ListBotsRequest = {},
  ): Promise<ListBotsResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromBotSortBy(params["sortBy"]),
      filters: params["filters"]?.map(x => fromBotFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBots",
      requestUri: "/bots/",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botSummaries": [toBotSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listBuiltInIntents(
    {abortSignal, ...params}: RequestConfig & ListBuiltInIntentsRequest,
  ): Promise<ListBuiltInIntentsResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromBuiltInIntentSortBy(params["sortBy"]),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBuiltInIntents",
      requestUri: cmnP.encodePath`/builtins/locales/${params["localeId"]}/intents/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "builtInIntentSummaries": [toBuiltInIntentSummary],
        "nextToken": "s",
        "localeId": "s",
      },
    }, await resp.json());
  }

  async listBuiltInSlotTypes(
    {abortSignal, ...params}: RequestConfig & ListBuiltInSlotTypesRequest,
  ): Promise<ListBuiltInSlotTypesResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromBuiltInSlotTypeSortBy(params["sortBy"]),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBuiltInSlotTypes",
      requestUri: cmnP.encodePath`/builtins/locales/${params["localeId"]}/slottypes/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "builtInSlotTypeSummaries": [toBuiltInSlotTypeSummary],
        "nextToken": "s",
        "localeId": "s",
      },
    }, await resp.json());
  }

  async listIntents(
    {abortSignal, ...params}: RequestConfig & ListIntentsRequest,
  ): Promise<ListIntentsResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromIntentSortBy(params["sortBy"]),
      filters: params["filters"]?.map(x => fromIntentFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIntents",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "intentSummaries": [toIntentSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSlotTypes(
    {abortSignal, ...params}: RequestConfig & ListSlotTypesRequest,
  ): Promise<ListSlotTypesResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromSlotTypeSortBy(params["sortBy"]),
      filters: params["filters"]?.map(x => fromSlotTypeFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSlotTypes",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/slottypes/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "slotTypeSummaries": [toSlotTypeSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSlots(
    {abortSignal, ...params}: RequestConfig & ListSlotsRequest,
  ): Promise<ListSlotsResponse> {
    const body: jsonP.JSONObject = {
      sortBy: fromSlotSortBy(params["sortBy"]),
      filters: params["filters"]?.map(x => fromSlotFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSlots",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/slots/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "intentId": "s",
        "slotSummaries": [toSlotSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceARN"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceARN"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceARN"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateBot(
    {abortSignal, ...params}: RequestConfig & UpdateBotRequest,
  ): Promise<UpdateBotResponse> {
    const body: jsonP.JSONObject = {
      botName: params["botName"],
      description: params["description"],
      roleArn: params["roleArn"],
      dataPrivacy: fromDataPrivacy(params["dataPrivacy"]),
      idleSessionTTLInSeconds: params["idleSessionTTLInSeconds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBot",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botName": "s",
        "description": "s",
        "roleArn": "s",
        "dataPrivacy": toDataPrivacy,
        "idleSessionTTLInSeconds": "n",
        "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async updateBotAlias(
    {abortSignal, ...params}: RequestConfig & UpdateBotAliasRequest,
  ): Promise<UpdateBotAliasResponse> {
    const body: jsonP.JSONObject = {
      botAliasName: params["botAliasName"],
      description: params["description"],
      botVersion: params["botVersion"],
      botAliasLocaleSettings: jsonP.serializeMap(params["botAliasLocaleSettings"], x => fromBotAliasLocaleSettings(x)),
      conversationLogSettings: fromConversationLogSettings(params["conversationLogSettings"]),
      sentimentAnalysisSettings: fromSentimentAnalysisSettings(params["sentimentAnalysisSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBotAlias",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botaliases/${params["botAliasId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botAliasId": "s",
        "botAliasName": "s",
        "description": "s",
        "botVersion": "s",
        "botAliasLocaleSettings": x => jsonP.readMap(String, toBotAliasLocaleSettings, x),
        "conversationLogSettings": toConversationLogSettings,
        "sentimentAnalysisSettings": toSentimentAnalysisSettings,
        "botAliasStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotAliasStatus>(x),
        "botId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async updateBotLocale(
    {abortSignal, ...params}: RequestConfig & UpdateBotLocaleRequest,
  ): Promise<UpdateBotLocaleResponse> {
    const body: jsonP.JSONObject = {
      description: params["description"],
      nluIntentConfidenceThreshold: params["nluIntentConfidenceThreshold"],
      voiceSettings: fromVoiceSettings(params["voiceSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBotLocale",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "localeName": "s",
        "description": "s",
        "nluIntentConfidenceThreshold": "n",
        "voiceSettings": toVoiceSettings,
        "botLocaleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotLocaleStatus>(x),
        "failureReasons": ["s"],
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async updateIntent(
    {abortSignal, ...params}: RequestConfig & UpdateIntentRequest,
  ): Promise<UpdateIntentResponse> {
    const body: jsonP.JSONObject = {
      intentName: params["intentName"],
      description: params["description"],
      parentIntentSignature: params["parentIntentSignature"],
      sampleUtterances: params["sampleUtterances"]?.map(x => fromSampleUtterance(x)),
      dialogCodeHook: fromDialogCodeHookSettings(params["dialogCodeHook"]),
      fulfillmentCodeHook: fromFulfillmentCodeHookSettings(params["fulfillmentCodeHook"]),
      slotPriorities: params["slotPriorities"]?.map(x => fromSlotPriority(x)),
      intentConfirmationSetting: fromIntentConfirmationSetting(params["intentConfirmationSetting"]),
      intentClosingSetting: fromIntentClosingSetting(params["intentClosingSetting"]),
      inputContexts: params["inputContexts"]?.map(x => fromInputContext(x)),
      outputContexts: params["outputContexts"]?.map(x => fromOutputContext(x)),
      kendraConfiguration: fromKendraConfiguration(params["kendraConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIntent",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "intentId": "s",
        "intentName": "s",
        "description": "s",
        "parentIntentSignature": "s",
        "sampleUtterances": [toSampleUtterance],
        "dialogCodeHook": toDialogCodeHookSettings,
        "fulfillmentCodeHook": toFulfillmentCodeHookSettings,
        "slotPriorities": [toSlotPriority],
        "intentConfirmationSetting": toIntentConfirmationSetting,
        "intentClosingSetting": toIntentClosingSetting,
        "inputContexts": [toInputContext],
        "outputContexts": [toOutputContext],
        "kendraConfiguration": toKendraConfiguration,
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async updateSlot(
    {abortSignal, ...params}: RequestConfig & UpdateSlotRequest,
  ): Promise<UpdateSlotResponse> {
    const body: jsonP.JSONObject = {
      slotName: params["slotName"],
      description: params["description"],
      slotTypeId: params["slotTypeId"],
      valueElicitationSetting: fromSlotValueElicitationSetting(params["valueElicitationSetting"]),
      obfuscationSetting: fromObfuscationSetting(params["obfuscationSetting"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSlot",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/intents/${params["intentId"]}/slots/${params["slotId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "slotId": "s",
        "slotName": "s",
        "description": "s",
        "slotTypeId": "s",
        "valueElicitationSetting": toSlotValueElicitationSetting,
        "obfuscationSetting": toObfuscationSetting,
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "intentId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

  async updateSlotType(
    {abortSignal, ...params}: RequestConfig & UpdateSlotTypeRequest,
  ): Promise<UpdateSlotTypeResponse> {
    const body: jsonP.JSONObject = {
      slotTypeName: params["slotTypeName"],
      description: params["description"],
      slotTypeValues: params["slotTypeValues"]?.map(x => fromSlotTypeValue(x)),
      valueSelectionSetting: fromSlotValueSelectionSetting(params["valueSelectionSetting"]),
      parentSlotTypeSignature: params["parentSlotTypeSignature"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSlotType",
      method: "PUT",
      requestUri: cmnP.encodePath`/bots/${params["botId"]}/botversions/${params["botVersion"]}/botlocales/${params["localeId"]}/slottypes/${params["slotTypeId"]}/`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "slotTypeId": "s",
        "slotTypeName": "s",
        "description": "s",
        "slotTypeValues": [toSlotTypeValue],
        "valueSelectionSetting": toSlotValueSelectionSetting,
        "parentSlotTypeSignature": "s",
        "botId": "s",
        "botVersion": "s",
        "localeId": "s",
        "creationDateTime": "d",
        "lastUpdatedDateTime": "d",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface BuildBotLocaleRequest {
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface CreateBotRequest {
  botName: string;
  description?: string | null;
  roleArn: string;
  dataPrivacy: DataPrivacy;
  idleSessionTTLInSeconds: number;
  botTags?: { [key: string]: string | null | undefined } | null;
  testBotAliasTags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateBotAliasRequest {
  botAliasName: string;
  description?: string | null;
  botVersion?: string | null;
  botAliasLocaleSettings?: { [key: string]: BotAliasLocaleSettings | null | undefined } | null;
  conversationLogSettings?: ConversationLogSettings | null;
  sentimentAnalysisSettings?: SentimentAnalysisSettings | null;
  botId: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateBotLocaleRequest {
  botId: string;
  botVersion: string;
  localeId: string;
  description?: string | null;
  nluIntentConfidenceThreshold: number;
  voiceSettings?: VoiceSettings | null;
}

// refs: 1 - tags: named, input
export interface CreateBotVersionRequest {
  botId: string;
  description?: string | null;
  botVersionLocaleSpecification: { [key: string]: BotVersionLocaleDetails | null | undefined };
}

// refs: 1 - tags: named, input
export interface CreateIntentRequest {
  intentName: string;
  description?: string | null;
  parentIntentSignature?: string | null;
  sampleUtterances?: SampleUtterance[] | null;
  dialogCodeHook?: DialogCodeHookSettings | null;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings | null;
  intentConfirmationSetting?: IntentConfirmationSetting | null;
  intentClosingSetting?: IntentClosingSetting | null;
  inputContexts?: InputContext[] | null;
  outputContexts?: OutputContext[] | null;
  kendraConfiguration?: KendraConfiguration | null;
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface CreateSlotRequest {
  slotName: string;
  description?: string | null;
  slotTypeId: string;
  valueElicitationSetting: SlotValueElicitationSetting;
  obfuscationSetting?: ObfuscationSetting | null;
  botId: string;
  botVersion: string;
  localeId: string;
  intentId: string;
}

// refs: 1 - tags: named, input
export interface CreateSlotTypeRequest {
  slotTypeName: string;
  description?: string | null;
  slotTypeValues?: SlotTypeValue[] | null;
  valueSelectionSetting: SlotValueSelectionSetting;
  parentSlotTypeSignature?: string | null;
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface DeleteBotRequest {
  botId: string;
  skipResourceInUseCheck?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteBotAliasRequest {
  botAliasId: string;
  botId: string;
  skipResourceInUseCheck?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteBotLocaleRequest {
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface DeleteBotVersionRequest {
  botId: string;
  botVersion: string;
  skipResourceInUseCheck?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteIntentRequest {
  intentId: string;
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSlotRequest {
  slotId: string;
  botId: string;
  botVersion: string;
  localeId: string;
  intentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSlotTypeRequest {
  slotTypeId: string;
  botId: string;
  botVersion: string;
  localeId: string;
  skipResourceInUseCheck?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeBotRequest {
  botId: string;
}

// refs: 1 - tags: named, input
export interface DescribeBotAliasRequest {
  botAliasId: string;
  botId: string;
}

// refs: 1 - tags: named, input
export interface DescribeBotLocaleRequest {
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface DescribeBotVersionRequest {
  botId: string;
  botVersion: string;
}

// refs: 1 - tags: named, input
export interface DescribeIntentRequest {
  intentId: string;
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface DescribeSlotRequest {
  slotId: string;
  botId: string;
  botVersion: string;
  localeId: string;
  intentId: string;
}

// refs: 1 - tags: named, input
export interface DescribeSlotTypeRequest {
  slotTypeId: string;
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface ListBotAliasesRequest {
  botId: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBotLocalesRequest {
  botId: string;
  botVersion: string;
  sortBy?: BotLocaleSortBy | null;
  filters?: BotLocaleFilter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBotVersionsRequest {
  botId: string;
  sortBy?: BotVersionSortBy | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBotsRequest {
  sortBy?: BotSortBy | null;
  filters?: BotFilter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBuiltInIntentsRequest {
  localeId: string;
  sortBy?: BuiltInIntentSortBy | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBuiltInSlotTypesRequest {
  localeId: string;
  sortBy?: BuiltInSlotTypeSortBy | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListIntentsRequest {
  botId: string;
  botVersion: string;
  localeId: string;
  sortBy?: IntentSortBy | null;
  filters?: IntentFilter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSlotTypesRequest {
  botId: string;
  botVersion: string;
  localeId: string;
  sortBy?: SlotTypeSortBy | null;
  filters?: SlotTypeFilter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSlotsRequest {
  botId: string;
  botVersion: string;
  localeId: string;
  intentId: string;
  sortBy?: SlotSortBy | null;
  filters?: SlotFilter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceARN: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceARN: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceARN: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateBotRequest {
  botId: string;
  botName: string;
  description?: string | null;
  roleArn: string;
  dataPrivacy: DataPrivacy;
  idleSessionTTLInSeconds: number;
}

// refs: 1 - tags: named, input
export interface UpdateBotAliasRequest {
  botAliasId: string;
  botAliasName: string;
  description?: string | null;
  botVersion?: string | null;
  botAliasLocaleSettings?: { [key: string]: BotAliasLocaleSettings | null | undefined } | null;
  conversationLogSettings?: ConversationLogSettings | null;
  sentimentAnalysisSettings?: SentimentAnalysisSettings | null;
  botId: string;
}

// refs: 1 - tags: named, input
export interface UpdateBotLocaleRequest {
  botId: string;
  botVersion: string;
  localeId: string;
  description?: string | null;
  nluIntentConfidenceThreshold: number;
  voiceSettings?: VoiceSettings | null;
}

// refs: 1 - tags: named, input
export interface UpdateIntentRequest {
  intentId: string;
  intentName: string;
  description?: string | null;
  parentIntentSignature?: string | null;
  sampleUtterances?: SampleUtterance[] | null;
  dialogCodeHook?: DialogCodeHookSettings | null;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings | null;
  slotPriorities?: SlotPriority[] | null;
  intentConfirmationSetting?: IntentConfirmationSetting | null;
  intentClosingSetting?: IntentClosingSetting | null;
  inputContexts?: InputContext[] | null;
  outputContexts?: OutputContext[] | null;
  kendraConfiguration?: KendraConfiguration | null;
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, input
export interface UpdateSlotRequest {
  slotId: string;
  slotName: string;
  description?: string | null;
  slotTypeId: string;
  valueElicitationSetting: SlotValueElicitationSetting;
  obfuscationSetting?: ObfuscationSetting | null;
  botId: string;
  botVersion: string;
  localeId: string;
  intentId: string;
}

// refs: 1 - tags: named, input
export interface UpdateSlotTypeRequest {
  slotTypeId: string;
  slotTypeName: string;
  description?: string | null;
  slotTypeValues?: SlotTypeValue[] | null;
  valueSelectionSetting: SlotValueSelectionSetting;
  parentSlotTypeSignature?: string | null;
  botId: string;
  botVersion: string;
  localeId: string;
}

// refs: 1 - tags: named, output
export interface BuildBotLocaleResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  botLocaleStatus?: BotLocaleStatus | null;
  lastBuildSubmittedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateBotResponse {
  botId?: string | null;
  botName?: string | null;
  description?: string | null;
  roleArn?: string | null;
  dataPrivacy?: DataPrivacy | null;
  idleSessionTTLInSeconds?: number | null;
  botStatus?: BotStatus | null;
  creationDateTime?: Date | number | null;
  botTags?: { [key: string]: string | null | undefined } | null;
  testBotAliasTags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateBotAliasResponse {
  botAliasId?: string | null;
  botAliasName?: string | null;
  description?: string | null;
  botVersion?: string | null;
  botAliasLocaleSettings?: { [key: string]: BotAliasLocaleSettings | null | undefined } | null;
  conversationLogSettings?: ConversationLogSettings | null;
  sentimentAnalysisSettings?: SentimentAnalysisSettings | null;
  botAliasStatus?: BotAliasStatus | null;
  botId?: string | null;
  creationDateTime?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateBotLocaleResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeName?: string | null;
  localeId?: string | null;
  description?: string | null;
  nluIntentConfidenceThreshold?: number | null;
  voiceSettings?: VoiceSettings | null;
  botLocaleStatus?: BotLocaleStatus | null;
  creationDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateBotVersionResponse {
  botId?: string | null;
  description?: string | null;
  botVersion?: string | null;
  botVersionLocaleSpecification?: { [key: string]: BotVersionLocaleDetails | null | undefined } | null;
  botStatus?: BotStatus | null;
  creationDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateIntentResponse {
  intentId?: string | null;
  intentName?: string | null;
  description?: string | null;
  parentIntentSignature?: string | null;
  sampleUtterances?: SampleUtterance[] | null;
  dialogCodeHook?: DialogCodeHookSettings | null;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings | null;
  intentConfirmationSetting?: IntentConfirmationSetting | null;
  intentClosingSetting?: IntentClosingSetting | null;
  inputContexts?: InputContext[] | null;
  outputContexts?: OutputContext[] | null;
  kendraConfiguration?: KendraConfiguration | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  creationDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateSlotResponse {
  slotId?: string | null;
  slotName?: string | null;
  description?: string | null;
  slotTypeId?: string | null;
  valueElicitationSetting?: SlotValueElicitationSetting | null;
  obfuscationSetting?: ObfuscationSetting | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  intentId?: string | null;
  creationDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateSlotTypeResponse {
  slotTypeId?: string | null;
  slotTypeName?: string | null;
  description?: string | null;
  slotTypeValues?: SlotTypeValue[] | null;
  valueSelectionSetting?: SlotValueSelectionSetting | null;
  parentSlotTypeSignature?: string | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  creationDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DeleteBotResponse {
  botId?: string | null;
  botStatus?: BotStatus | null;
}

// refs: 1 - tags: named, output
export interface DeleteBotAliasResponse {
  botAliasId?: string | null;
  botId?: string | null;
  botAliasStatus?: BotAliasStatus | null;
}

// refs: 1 - tags: named, output
export interface DeleteBotLocaleResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  botLocaleStatus?: BotLocaleStatus | null;
}

// refs: 1 - tags: named, output
export interface DeleteBotVersionResponse {
  botId?: string | null;
  botVersion?: string | null;
  botStatus?: BotStatus | null;
}

// refs: 1 - tags: named, output
export interface DescribeBotResponse {
  botId?: string | null;
  botName?: string | null;
  description?: string | null;
  roleArn?: string | null;
  dataPrivacy?: DataPrivacy | null;
  idleSessionTTLInSeconds?: number | null;
  botStatus?: BotStatus | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeBotAliasResponse {
  botAliasId?: string | null;
  botAliasName?: string | null;
  description?: string | null;
  botVersion?: string | null;
  botAliasLocaleSettings?: { [key: string]: BotAliasLocaleSettings | null | undefined } | null;
  conversationLogSettings?: ConversationLogSettings | null;
  sentimentAnalysisSettings?: SentimentAnalysisSettings | null;
  botAliasHistoryEvents?: BotAliasHistoryEvent[] | null;
  botAliasStatus?: BotAliasStatus | null;
  botId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeBotLocaleResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  localeName?: string | null;
  description?: string | null;
  nluIntentConfidenceThreshold?: number | null;
  voiceSettings?: VoiceSettings | null;
  intentsCount?: number | null;
  slotTypesCount?: number | null;
  botLocaleStatus?: BotLocaleStatus | null;
  failureReasons?: string[] | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
  lastBuildSubmittedDateTime?: Date | number | null;
  botLocaleHistoryEvents?: BotLocaleHistoryEvent[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeBotVersionResponse {
  botId?: string | null;
  botName?: string | null;
  botVersion?: string | null;
  description?: string | null;
  roleArn?: string | null;
  dataPrivacy?: DataPrivacy | null;
  idleSessionTTLInSeconds?: number | null;
  botStatus?: BotStatus | null;
  failureReasons?: string[] | null;
  creationDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeIntentResponse {
  intentId?: string | null;
  intentName?: string | null;
  description?: string | null;
  parentIntentSignature?: string | null;
  sampleUtterances?: SampleUtterance[] | null;
  dialogCodeHook?: DialogCodeHookSettings | null;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings | null;
  slotPriorities?: SlotPriority[] | null;
  intentConfirmationSetting?: IntentConfirmationSetting | null;
  intentClosingSetting?: IntentClosingSetting | null;
  inputContexts?: InputContext[] | null;
  outputContexts?: OutputContext[] | null;
  kendraConfiguration?: KendraConfiguration | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeSlotResponse {
  slotId?: string | null;
  slotName?: string | null;
  description?: string | null;
  slotTypeId?: string | null;
  valueElicitationSetting?: SlotValueElicitationSetting | null;
  obfuscationSetting?: ObfuscationSetting | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  intentId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeSlotTypeResponse {
  slotTypeId?: string | null;
  slotTypeName?: string | null;
  description?: string | null;
  slotTypeValues?: SlotTypeValue[] | null;
  valueSelectionSetting?: SlotValueSelectionSetting | null;
  parentSlotTypeSignature?: string | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface ListBotAliasesResponse {
  botAliasSummaries?: BotAliasSummary[] | null;
  nextToken?: string | null;
  botId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBotLocalesResponse {
  botId?: string | null;
  botVersion?: string | null;
  nextToken?: string | null;
  botLocaleSummaries?: BotLocaleSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListBotVersionsResponse {
  botId?: string | null;
  botVersionSummaries?: BotVersionSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBotsResponse {
  botSummaries?: BotSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBuiltInIntentsResponse {
  builtInIntentSummaries?: BuiltInIntentSummary[] | null;
  nextToken?: string | null;
  localeId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBuiltInSlotTypesResponse {
  builtInSlotTypeSummaries?: BuiltInSlotTypeSummary[] | null;
  nextToken?: string | null;
  localeId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIntentsResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  intentSummaries?: IntentSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSlotTypesResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  slotTypeSummaries?: SlotTypeSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSlotsResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  intentId?: string | null;
  slotSummaries?: SlotSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateBotResponse {
  botId?: string | null;
  botName?: string | null;
  description?: string | null;
  roleArn?: string | null;
  dataPrivacy?: DataPrivacy | null;
  idleSessionTTLInSeconds?: number | null;
  botStatus?: BotStatus | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateBotAliasResponse {
  botAliasId?: string | null;
  botAliasName?: string | null;
  description?: string | null;
  botVersion?: string | null;
  botAliasLocaleSettings?: { [key: string]: BotAliasLocaleSettings | null | undefined } | null;
  conversationLogSettings?: ConversationLogSettings | null;
  sentimentAnalysisSettings?: SentimentAnalysisSettings | null;
  botAliasStatus?: BotAliasStatus | null;
  botId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateBotLocaleResponse {
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  localeName?: string | null;
  description?: string | null;
  nluIntentConfidenceThreshold?: number | null;
  voiceSettings?: VoiceSettings | null;
  botLocaleStatus?: BotLocaleStatus | null;
  failureReasons?: string[] | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateIntentResponse {
  intentId?: string | null;
  intentName?: string | null;
  description?: string | null;
  parentIntentSignature?: string | null;
  sampleUtterances?: SampleUtterance[] | null;
  dialogCodeHook?: DialogCodeHookSettings | null;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings | null;
  slotPriorities?: SlotPriority[] | null;
  intentConfirmationSetting?: IntentConfirmationSetting | null;
  intentClosingSetting?: IntentClosingSetting | null;
  inputContexts?: InputContext[] | null;
  outputContexts?: OutputContext[] | null;
  kendraConfiguration?: KendraConfiguration | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateSlotResponse {
  slotId?: string | null;
  slotName?: string | null;
  description?: string | null;
  slotTypeId?: string | null;
  valueElicitationSetting?: SlotValueElicitationSetting | null;
  obfuscationSetting?: ObfuscationSetting | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  intentId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateSlotTypeResponse {
  slotTypeId?: string | null;
  slotTypeName?: string | null;
  description?: string | null;
  slotTypeValues?: SlotTypeValue[] | null;
  valueSelectionSetting?: SlotValueSelectionSetting | null;
  parentSlotTypeSignature?: string | null;
  botId?: string | null;
  botVersion?: string | null;
  localeId?: string | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}

// refs: 6 - tags: input, named, interface, output
export interface DataPrivacy {
  childDirected: boolean;
}
function fromDataPrivacy(input?: DataPrivacy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    childDirected: input["childDirected"],
  }
}
function toDataPrivacy(root: jsonP.JSONValue): DataPrivacy {
  return jsonP.readObj({
    required: {
      "childDirected": "b",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface BotAliasLocaleSettings {
  enabled: boolean;
  codeHookSpecification?: CodeHookSpecification | null;
}
function fromBotAliasLocaleSettings(input?: BotAliasLocaleSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enabled: input["enabled"],
    codeHookSpecification: fromCodeHookSpecification(input["codeHookSpecification"]),
  }
}
function toBotAliasLocaleSettings(root: jsonP.JSONValue): BotAliasLocaleSettings {
  return jsonP.readObj({
    required: {
      "enabled": "b",
    },
    optional: {
      "codeHookSpecification": toCodeHookSpecification,
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface CodeHookSpecification {
  lambdaCodeHook: LambdaCodeHook;
}
function fromCodeHookSpecification(input?: CodeHookSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    lambdaCodeHook: fromLambdaCodeHook(input["lambdaCodeHook"]),
  }
}
function toCodeHookSpecification(root: jsonP.JSONValue): CodeHookSpecification {
  return jsonP.readObj({
    required: {
      "lambdaCodeHook": toLambdaCodeHook,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface LambdaCodeHook {
  lambdaARN: string;
  codeHookInterfaceVersion: string;
}
function fromLambdaCodeHook(input?: LambdaCodeHook | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    lambdaARN: input["lambdaARN"],
    codeHookInterfaceVersion: input["codeHookInterfaceVersion"],
  }
}
function toLambdaCodeHook(root: jsonP.JSONValue): LambdaCodeHook {
  return jsonP.readObj({
    required: {
      "lambdaARN": "s",
      "codeHookInterfaceVersion": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface ConversationLogSettings {
  textLogSettings?: TextLogSetting[] | null;
  audioLogSettings?: AudioLogSetting[] | null;
}
function fromConversationLogSettings(input?: ConversationLogSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    textLogSettings: input["textLogSettings"]?.map(x => fromTextLogSetting(x)),
    audioLogSettings: input["audioLogSettings"]?.map(x => fromAudioLogSetting(x)),
  }
}
function toConversationLogSettings(root: jsonP.JSONValue): ConversationLogSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "textLogSettings": [toTextLogSetting],
      "audioLogSettings": [toAudioLogSetting],
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface TextLogSetting {
  enabled: boolean;
  destination: TextLogDestination;
}
function fromTextLogSetting(input?: TextLogSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enabled: input["enabled"],
    destination: fromTextLogDestination(input["destination"]),
  }
}
function toTextLogSetting(root: jsonP.JSONValue): TextLogSetting {
  return jsonP.readObj({
    required: {
      "enabled": "b",
      "destination": toTextLogDestination,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface TextLogDestination {
  cloudWatch: CloudWatchLogGroupLogDestination;
}
function fromTextLogDestination(input?: TextLogDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cloudWatch: fromCloudWatchLogGroupLogDestination(input["cloudWatch"]),
  }
}
function toTextLogDestination(root: jsonP.JSONValue): TextLogDestination {
  return jsonP.readObj({
    required: {
      "cloudWatch": toCloudWatchLogGroupLogDestination,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface CloudWatchLogGroupLogDestination {
  cloudWatchLogGroupArn: string;
  logPrefix: string;
}
function fromCloudWatchLogGroupLogDestination(input?: CloudWatchLogGroupLogDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cloudWatchLogGroupArn: input["cloudWatchLogGroupArn"],
    logPrefix: input["logPrefix"],
  }
}
function toCloudWatchLogGroupLogDestination(root: jsonP.JSONValue): CloudWatchLogGroupLogDestination {
  return jsonP.readObj({
    required: {
      "cloudWatchLogGroupArn": "s",
      "logPrefix": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface AudioLogSetting {
  enabled: boolean;
  destination: AudioLogDestination;
}
function fromAudioLogSetting(input?: AudioLogSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enabled: input["enabled"],
    destination: fromAudioLogDestination(input["destination"]),
  }
}
function toAudioLogSetting(root: jsonP.JSONValue): AudioLogSetting {
  return jsonP.readObj({
    required: {
      "enabled": "b",
      "destination": toAudioLogDestination,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface AudioLogDestination {
  s3Bucket: S3BucketLogDestination;
}
function fromAudioLogDestination(input?: AudioLogDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Bucket: fromS3BucketLogDestination(input["s3Bucket"]),
  }
}
function toAudioLogDestination(root: jsonP.JSONValue): AudioLogDestination {
  return jsonP.readObj({
    required: {
      "s3Bucket": toS3BucketLogDestination,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface S3BucketLogDestination {
  kmsKeyArn?: string | null;
  s3BucketArn: string;
  logPrefix: string;
}
function fromS3BucketLogDestination(input?: S3BucketLogDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    kmsKeyArn: input["kmsKeyArn"],
    s3BucketArn: input["s3BucketArn"],
    logPrefix: input["logPrefix"],
  }
}
function toS3BucketLogDestination(root: jsonP.JSONValue): S3BucketLogDestination {
  return jsonP.readObj({
    required: {
      "s3BucketArn": "s",
      "logPrefix": "s",
    },
    optional: {
      "kmsKeyArn": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface SentimentAnalysisSettings {
  detectSentiment: boolean;
}
function fromSentimentAnalysisSettings(input?: SentimentAnalysisSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    detectSentiment: input["detectSentiment"],
  }
}
function toSentimentAnalysisSettings(root: jsonP.JSONValue): SentimentAnalysisSettings {
  return jsonP.readObj({
    required: {
      "detectSentiment": "b",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface VoiceSettings {
  voiceId: string;
}
function fromVoiceSettings(input?: VoiceSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    voiceId: input["voiceId"],
  }
}
function toVoiceSettings(root: jsonP.JSONValue): VoiceSettings {
  return jsonP.readObj({
    required: {
      "voiceId": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface BotVersionLocaleDetails {
  sourceBotVersion: string;
}
function fromBotVersionLocaleDetails(input?: BotVersionLocaleDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceBotVersion: input["sourceBotVersion"],
  }
}
function toBotVersionLocaleDetails(root: jsonP.JSONValue): BotVersionLocaleDetails {
  return jsonP.readObj({
    required: {
      "sourceBotVersion": "s",
    },
    optional: {},
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface SampleUtterance {
  utterance: string;
}
function fromSampleUtterance(input?: SampleUtterance | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    utterance: input["utterance"],
  }
}
function toSampleUtterance(root: jsonP.JSONValue): SampleUtterance {
  return jsonP.readObj({
    required: {
      "utterance": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface DialogCodeHookSettings {
  enabled: boolean;
}
function fromDialogCodeHookSettings(input?: DialogCodeHookSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enabled: input["enabled"],
  }
}
function toDialogCodeHookSettings(root: jsonP.JSONValue): DialogCodeHookSettings {
  return jsonP.readObj({
    required: {
      "enabled": "b",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface FulfillmentCodeHookSettings {
  enabled: boolean;
}
function fromFulfillmentCodeHookSettings(input?: FulfillmentCodeHookSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enabled: input["enabled"],
  }
}
function toFulfillmentCodeHookSettings(root: jsonP.JSONValue): FulfillmentCodeHookSettings {
  return jsonP.readObj({
    required: {
      "enabled": "b",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface IntentConfirmationSetting {
  promptSpecification: PromptSpecification;
  declinationResponse: ResponseSpecification;
}
function fromIntentConfirmationSetting(input?: IntentConfirmationSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    promptSpecification: fromPromptSpecification(input["promptSpecification"]),
    declinationResponse: fromResponseSpecification(input["declinationResponse"]),
  }
}
function toIntentConfirmationSetting(root: jsonP.JSONValue): IntentConfirmationSetting {
  return jsonP.readObj({
    required: {
      "promptSpecification": toPromptSpecification,
      "declinationResponse": toResponseSpecification,
    },
    optional: {},
  }, root);
}

// refs: 11 - tags: input, named, interface, output
export interface PromptSpecification {
  messageGroups: MessageGroup[];
  maxRetries: number;
  allowInterrupt?: boolean | null;
}
function fromPromptSpecification(input?: PromptSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    messageGroups: input["messageGroups"]?.map(x => fromMessageGroup(x)),
    maxRetries: input["maxRetries"],
    allowInterrupt: input["allowInterrupt"],
  }
}
function toPromptSpecification(root: jsonP.JSONValue): PromptSpecification {
  return jsonP.readObj({
    required: {
      "messageGroups": [toMessageGroup],
      "maxRetries": "n",
    },
    optional: {
      "allowInterrupt": "b",
    },
  }, root);
}

// refs: 36 - tags: input, named, interface, output
export interface MessageGroup {
  message: Message;
  variations?: Message[] | null;
}
function fromMessageGroup(input?: MessageGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    message: fromMessage(input["message"]),
    variations: input["variations"]?.map(x => fromMessage(x)),
  }
}
function toMessageGroup(root: jsonP.JSONValue): MessageGroup {
  return jsonP.readObj({
    required: {
      "message": toMessage,
    },
    optional: {
      "variations": [toMessage],
    },
  }, root);
}

// refs: 72 - tags: input, named, interface, output
export interface Message {
  plainTextMessage?: PlainTextMessage | null;
  customPayload?: CustomPayload | null;
  ssmlMessage?: SSMLMessage | null;
  imageResponseCard?: ImageResponseCard | null;
}
function fromMessage(input?: Message | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    plainTextMessage: fromPlainTextMessage(input["plainTextMessage"]),
    customPayload: fromCustomPayload(input["customPayload"]),
    ssmlMessage: fromSSMLMessage(input["ssmlMessage"]),
    imageResponseCard: fromImageResponseCard(input["imageResponseCard"]),
  }
}
function toMessage(root: jsonP.JSONValue): Message {
  return jsonP.readObj({
    required: {},
    optional: {
      "plainTextMessage": toPlainTextMessage,
      "customPayload": toCustomPayload,
      "ssmlMessage": toSSMLMessage,
      "imageResponseCard": toImageResponseCard,
    },
  }, root);
}

// refs: 72 - tags: input, named, interface, output
export interface PlainTextMessage {
  value: string;
}
function fromPlainTextMessage(input?: PlainTextMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: input["value"],
  }
}
function toPlainTextMessage(root: jsonP.JSONValue): PlainTextMessage {
  return jsonP.readObj({
    required: {
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 72 - tags: input, named, interface, output
export interface CustomPayload {
  value: string;
}
function fromCustomPayload(input?: CustomPayload | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: input["value"],
  }
}
function toCustomPayload(root: jsonP.JSONValue): CustomPayload {
  return jsonP.readObj({
    required: {
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 72 - tags: input, named, interface, output
export interface SSMLMessage {
  value: string;
}
function fromSSMLMessage(input?: SSMLMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: input["value"],
  }
}
function toSSMLMessage(root: jsonP.JSONValue): SSMLMessage {
  return jsonP.readObj({
    required: {
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 72 - tags: input, named, interface, output
export interface ImageResponseCard {
  title: string;
  subtitle?: string | null;
  imageUrl?: string | null;
  buttons?: Button[] | null;
}
function fromImageResponseCard(input?: ImageResponseCard | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    title: input["title"],
    subtitle: input["subtitle"],
    imageUrl: input["imageUrl"],
    buttons: input["buttons"]?.map(x => fromButton(x)),
  }
}
function toImageResponseCard(root: jsonP.JSONValue): ImageResponseCard {
  return jsonP.readObj({
    required: {
      "title": "s",
    },
    optional: {
      "subtitle": "s",
      "imageUrl": "s",
      "buttons": [toButton],
    },
  }, root);
}

// refs: 72 - tags: input, named, interface, output
export interface Button {
  text: string;
  value: string;
}
function fromButton(input?: Button | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    text: input["text"],
    value: input["value"],
  }
}
function toButton(root: jsonP.JSONValue): Button {
  return jsonP.readObj({
    required: {
      "text": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 20 - tags: input, named, interface, output
export interface ResponseSpecification {
  messageGroups: MessageGroup[];
  allowInterrupt?: boolean | null;
}
function fromResponseSpecification(input?: ResponseSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    messageGroups: input["messageGroups"]?.map(x => fromMessageGroup(x)),
    allowInterrupt: input["allowInterrupt"],
  }
}
function toResponseSpecification(root: jsonP.JSONValue): ResponseSpecification {
  return jsonP.readObj({
    required: {
      "messageGroups": [toMessageGroup],
    },
    optional: {
      "allowInterrupt": "b",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface IntentClosingSetting {
  closingResponse: ResponseSpecification;
}
function fromIntentClosingSetting(input?: IntentClosingSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    closingResponse: fromResponseSpecification(input["closingResponse"]),
  }
}
function toIntentClosingSetting(root: jsonP.JSONValue): IntentClosingSetting {
  return jsonP.readObj({
    required: {
      "closingResponse": toResponseSpecification,
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface InputContext {
  name: string;
}
function fromInputContext(input?: InputContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
  }
}
function toInputContext(root: jsonP.JSONValue): InputContext {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface OutputContext {
  name: string;
  timeToLiveInSeconds: number;
  turnsToLive: number;
}
function fromOutputContext(input?: OutputContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    timeToLiveInSeconds: input["timeToLiveInSeconds"],
    turnsToLive: input["turnsToLive"],
  }
}
function toOutputContext(root: jsonP.JSONValue): OutputContext {
  return jsonP.readObj({
    required: {
      "name": "s",
      "timeToLiveInSeconds": "n",
      "turnsToLive": "n",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface KendraConfiguration {
  kendraIndex: string;
  queryFilterStringEnabled?: boolean | null;
  queryFilterString?: string | null;
}
function fromKendraConfiguration(input?: KendraConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    kendraIndex: input["kendraIndex"],
    queryFilterStringEnabled: input["queryFilterStringEnabled"],
    queryFilterString: input["queryFilterString"],
  }
}
function toKendraConfiguration(root: jsonP.JSONValue): KendraConfiguration {
  return jsonP.readObj({
    required: {
      "kendraIndex": "s",
    },
    optional: {
      "queryFilterStringEnabled": "b",
      "queryFilterString": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface SlotValueElicitationSetting {
  defaultValueSpecification?: SlotDefaultValueSpecification | null;
  slotConstraint: SlotConstraint;
  promptSpecification?: PromptSpecification | null;
  sampleUtterances?: SampleUtterance[] | null;
  waitAndContinueSpecification?: WaitAndContinueSpecification | null;
}
function fromSlotValueElicitationSetting(input?: SlotValueElicitationSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultValueSpecification: fromSlotDefaultValueSpecification(input["defaultValueSpecification"]),
    slotConstraint: input["slotConstraint"],
    promptSpecification: fromPromptSpecification(input["promptSpecification"]),
    sampleUtterances: input["sampleUtterances"]?.map(x => fromSampleUtterance(x)),
    waitAndContinueSpecification: fromWaitAndContinueSpecification(input["waitAndContinueSpecification"]),
  }
}
function toSlotValueElicitationSetting(root: jsonP.JSONValue): SlotValueElicitationSetting {
  return jsonP.readObj({
    required: {
      "slotConstraint": (x: jsonP.JSONValue) => cmnP.readEnum<SlotConstraint>(x),
    },
    optional: {
      "defaultValueSpecification": toSlotDefaultValueSpecification,
      "promptSpecification": toPromptSpecification,
      "sampleUtterances": [toSampleUtterance],
      "waitAndContinueSpecification": toWaitAndContinueSpecification,
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface SlotDefaultValueSpecification {
  defaultValueList: SlotDefaultValue[];
}
function fromSlotDefaultValueSpecification(input?: SlotDefaultValueSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultValueList: input["defaultValueList"]?.map(x => fromSlotDefaultValue(x)),
  }
}
function toSlotDefaultValueSpecification(root: jsonP.JSONValue): SlotDefaultValueSpecification {
  return jsonP.readObj({
    required: {
      "defaultValueList": [toSlotDefaultValue],
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface SlotDefaultValue {
  defaultValue: string;
}
function fromSlotDefaultValue(input?: SlotDefaultValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultValue: input["defaultValue"],
  }
}
function toSlotDefaultValue(root: jsonP.JSONValue): SlotDefaultValue {
  return jsonP.readObj({
    required: {
      "defaultValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type SlotConstraint =
| "Required"
| "Optional"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface WaitAndContinueSpecification {
  waitingResponse: ResponseSpecification;
  continueResponse: ResponseSpecification;
  stillWaitingResponse?: StillWaitingResponseSpecification | null;
}
function fromWaitAndContinueSpecification(input?: WaitAndContinueSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    waitingResponse: fromResponseSpecification(input["waitingResponse"]),
    continueResponse: fromResponseSpecification(input["continueResponse"]),
    stillWaitingResponse: fromStillWaitingResponseSpecification(input["stillWaitingResponse"]),
  }
}
function toWaitAndContinueSpecification(root: jsonP.JSONValue): WaitAndContinueSpecification {
  return jsonP.readObj({
    required: {
      "waitingResponse": toResponseSpecification,
      "continueResponse": toResponseSpecification,
    },
    optional: {
      "stillWaitingResponse": toStillWaitingResponseSpecification,
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface StillWaitingResponseSpecification {
  messageGroups: MessageGroup[];
  frequencyInSeconds: number;
  timeoutInSeconds: number;
  allowInterrupt?: boolean | null;
}
function fromStillWaitingResponseSpecification(input?: StillWaitingResponseSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    messageGroups: input["messageGroups"]?.map(x => fromMessageGroup(x)),
    frequencyInSeconds: input["frequencyInSeconds"],
    timeoutInSeconds: input["timeoutInSeconds"],
    allowInterrupt: input["allowInterrupt"],
  }
}
function toStillWaitingResponseSpecification(root: jsonP.JSONValue): StillWaitingResponseSpecification {
  return jsonP.readObj({
    required: {
      "messageGroups": [toMessageGroup],
      "frequencyInSeconds": "n",
      "timeoutInSeconds": "n",
    },
    optional: {
      "allowInterrupt": "b",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface ObfuscationSetting {
  obfuscationSettingType: ObfuscationSettingType;
}
function fromObfuscationSetting(input?: ObfuscationSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    obfuscationSettingType: input["obfuscationSettingType"],
  }
}
function toObfuscationSetting(root: jsonP.JSONValue): ObfuscationSetting {
  return jsonP.readObj({
    required: {
      "obfuscationSettingType": (x: jsonP.JSONValue) => cmnP.readEnum<ObfuscationSettingType>(x),
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type ObfuscationSettingType =
| "None"
| "DefaultObfuscation"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface SlotTypeValue {
  sampleValue?: SampleValue | null;
  synonyms?: SampleValue[] | null;
}
function fromSlotTypeValue(input?: SlotTypeValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sampleValue: fromSampleValue(input["sampleValue"]),
    synonyms: input["synonyms"]?.map(x => fromSampleValue(x)),
  }
}
function toSlotTypeValue(root: jsonP.JSONValue): SlotTypeValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "sampleValue": toSampleValue,
      "synonyms": [toSampleValue],
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface SampleValue {
  value: string;
}
function fromSampleValue(input?: SampleValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: input["value"],
  }
}
function toSampleValue(root: jsonP.JSONValue): SampleValue {
  return jsonP.readObj({
    required: {
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface SlotValueSelectionSetting {
  resolutionStrategy: SlotValueResolutionStrategy;
  regexFilter?: SlotValueRegexFilter | null;
}
function fromSlotValueSelectionSetting(input?: SlotValueSelectionSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    resolutionStrategy: input["resolutionStrategy"],
    regexFilter: fromSlotValueRegexFilter(input["regexFilter"]),
  }
}
function toSlotValueSelectionSetting(root: jsonP.JSONValue): SlotValueSelectionSetting {
  return jsonP.readObj({
    required: {
      "resolutionStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<SlotValueResolutionStrategy>(x),
    },
    optional: {
      "regexFilter": toSlotValueRegexFilter,
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type SlotValueResolutionStrategy =
| "OriginalValue"
| "TopResolution"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface SlotValueRegexFilter {
  pattern: string;
}
function fromSlotValueRegexFilter(input?: SlotValueRegexFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    pattern: input["pattern"],
  }
}
function toSlotValueRegexFilter(root: jsonP.JSONValue): SlotValueRegexFilter {
  return jsonP.readObj({
    required: {
      "pattern": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface BotLocaleSortBy {
  attribute: BotLocaleSortAttribute;
  order: SortOrder;
}
function fromBotLocaleSortBy(input?: BotLocaleSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type BotLocaleSortAttribute =
| "BotLocaleName"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, enum
export type SortOrder =
| "Ascending"
| "Descending"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface BotLocaleFilter {
  name: BotLocaleFilterName;
  values: string[];
  operator: BotLocaleFilterOperator;
}
function fromBotLocaleFilter(input?: BotLocaleFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
    operator: input["operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type BotLocaleFilterName =
| "BotLocaleName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type BotLocaleFilterOperator =
| "CO"
| "EQ"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface BotVersionSortBy {
  attribute: BotVersionSortAttribute;
  order: SortOrder;
}
function fromBotVersionSortBy(input?: BotVersionSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type BotVersionSortAttribute =
| "BotVersion"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface BotSortBy {
  attribute: BotSortAttribute;
  order: SortOrder;
}
function fromBotSortBy(input?: BotSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type BotSortAttribute =
| "BotName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface BotFilter {
  name: BotFilterName;
  values: string[];
  operator: BotFilterOperator;
}
function fromBotFilter(input?: BotFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
    operator: input["operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type BotFilterName =
| "BotName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type BotFilterOperator =
| "CO"
| "EQ"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface BuiltInIntentSortBy {
  attribute: BuiltInIntentSortAttribute;
  order: SortOrder;
}
function fromBuiltInIntentSortBy(input?: BuiltInIntentSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type BuiltInIntentSortAttribute =
| "IntentSignature"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface BuiltInSlotTypeSortBy {
  attribute: BuiltInSlotTypeSortAttribute;
  order: SortOrder;
}
function fromBuiltInSlotTypeSortBy(input?: BuiltInSlotTypeSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type BuiltInSlotTypeSortAttribute =
| "SlotTypeSignature"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface IntentSortBy {
  attribute: IntentSortAttribute;
  order: SortOrder;
}
function fromIntentSortBy(input?: IntentSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type IntentSortAttribute =
| "IntentName"
| "LastUpdatedDateTime"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface IntentFilter {
  name: IntentFilterName;
  values: string[];
  operator: IntentFilterOperator;
}
function fromIntentFilter(input?: IntentFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
    operator: input["operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type IntentFilterName =
| "IntentName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type IntentFilterOperator =
| "CO"
| "EQ"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SlotTypeSortBy {
  attribute: SlotTypeSortAttribute;
  order: SortOrder;
}
function fromSlotTypeSortBy(input?: SlotTypeSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type SlotTypeSortAttribute =
| "SlotTypeName"
| "LastUpdatedDateTime"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SlotTypeFilter {
  name: SlotTypeFilterName;
  values: string[];
  operator: SlotTypeFilterOperator;
}
function fromSlotTypeFilter(input?: SlotTypeFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
    operator: input["operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type SlotTypeFilterName =
| "SlotTypeName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type SlotTypeFilterOperator =
| "CO"
| "EQ"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SlotSortBy {
  attribute: SlotSortAttribute;
  order: SortOrder;
}
function fromSlotSortBy(input?: SlotSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    order: input["order"],
  }
}

// refs: 1 - tags: input, named, enum
export type SlotSortAttribute =
| "SlotName"
| "LastUpdatedDateTime"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SlotFilter {
  name: SlotFilterName;
  values: string[];
  operator: SlotFilterOperator;
}
function fromSlotFilter(input?: SlotFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
    operator: input["operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type SlotFilterName =
| "SlotName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type SlotFilterOperator =
| "CO"
| "EQ"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SlotPriority {
  priority: number;
  slotId: string;
}
function fromSlotPriority(input?: SlotPriority | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    priority: input["priority"],
    slotId: input["slotId"],
  }
}
function toSlotPriority(root: jsonP.JSONValue): SlotPriority {
  return jsonP.readObj({
    required: {
      "priority": "n",
      "slotId": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: output, named, enum
export type BotLocaleStatus =
| "Creating"
| "Building"
| "Built"
| "ReadyExpressTesting"
| "Failed"
| "Deleting"
| "NotBuilt"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: output, named, enum
export type BotStatus =
| "Creating"
| "Available"
| "Inactive"
| "Deleting"
| "Failed"
| "Versioning"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type BotAliasStatus =
| "Creating"
| "Available"
| "Deleting"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BotAliasHistoryEvent {
  botVersion?: string | null;
  startDate?: Date | number | null;
  endDate?: Date | number | null;
}
function toBotAliasHistoryEvent(root: jsonP.JSONValue): BotAliasHistoryEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "botVersion": "s",
      "startDate": "d",
      "endDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BotLocaleHistoryEvent {
  event: string;
  eventDate: Date | number;
}
function toBotLocaleHistoryEvent(root: jsonP.JSONValue): BotLocaleHistoryEvent {
  return jsonP.readObj({
    required: {
      "event": "s",
      "eventDate": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BotAliasSummary {
  botAliasId?: string | null;
  botAliasName?: string | null;
  description?: string | null;
  botVersion?: string | null;
  botAliasStatus?: BotAliasStatus | null;
  creationDateTime?: Date | number | null;
  lastUpdatedDateTime?: Date | number | null;
}
function toBotAliasSummary(root: jsonP.JSONValue): BotAliasSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "botAliasId": "s",
      "botAliasName": "s",
      "description": "s",
      "botVersion": "s",
      "botAliasStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotAliasStatus>(x),
      "creationDateTime": "d",
      "lastUpdatedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BotLocaleSummary {
  localeId?: string | null;
  localeName?: string | null;
  description?: string | null;
  botLocaleStatus?: BotLocaleStatus | null;
  lastUpdatedDateTime?: Date | number | null;
  lastBuildSubmittedDateTime?: Date | number | null;
}
function toBotLocaleSummary(root: jsonP.JSONValue): BotLocaleSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "localeId": "s",
      "localeName": "s",
      "description": "s",
      "botLocaleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotLocaleStatus>(x),
      "lastUpdatedDateTime": "d",
      "lastBuildSubmittedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BotVersionSummary {
  botName?: string | null;
  botVersion?: string | null;
  description?: string | null;
  botStatus?: BotStatus | null;
  creationDateTime?: Date | number | null;
}
function toBotVersionSummary(root: jsonP.JSONValue): BotVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "botName": "s",
      "botVersion": "s",
      "description": "s",
      "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
      "creationDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BotSummary {
  botId?: string | null;
  botName?: string | null;
  description?: string | null;
  botStatus?: BotStatus | null;
  latestBotVersion?: string | null;
  lastUpdatedDateTime?: Date | number | null;
}
function toBotSummary(root: jsonP.JSONValue): BotSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "botId": "s",
      "botName": "s",
      "description": "s",
      "botStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BotStatus>(x),
      "latestBotVersion": "s",
      "lastUpdatedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BuiltInIntentSummary {
  intentSignature?: string | null;
  description?: string | null;
}
function toBuiltInIntentSummary(root: jsonP.JSONValue): BuiltInIntentSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "intentSignature": "s",
      "description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BuiltInSlotTypeSummary {
  slotTypeSignature?: string | null;
  description?: string | null;
}
function toBuiltInSlotTypeSummary(root: jsonP.JSONValue): BuiltInSlotTypeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "slotTypeSignature": "s",
      "description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IntentSummary {
  intentId?: string | null;
  intentName?: string | null;
  description?: string | null;
  parentIntentSignature?: string | null;
  inputContexts?: InputContext[] | null;
  outputContexts?: OutputContext[] | null;
  lastUpdatedDateTime?: Date | number | null;
}
function toIntentSummary(root: jsonP.JSONValue): IntentSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "intentId": "s",
      "intentName": "s",
      "description": "s",
      "parentIntentSignature": "s",
      "inputContexts": [toInputContext],
      "outputContexts": [toOutputContext],
      "lastUpdatedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SlotTypeSummary {
  slotTypeId?: string | null;
  slotTypeName?: string | null;
  description?: string | null;
  parentSlotTypeSignature?: string | null;
  lastUpdatedDateTime?: Date | number | null;
}
function toSlotTypeSummary(root: jsonP.JSONValue): SlotTypeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "slotTypeId": "s",
      "slotTypeName": "s",
      "description": "s",
      "parentSlotTypeSignature": "s",
      "lastUpdatedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SlotSummary {
  slotId?: string | null;
  slotName?: string | null;
  description?: string | null;
  slotConstraint?: SlotConstraint | null;
  slotTypeId?: string | null;
  valueElicitationPromptSpecification?: PromptSpecification | null;
  lastUpdatedDateTime?: Date | number | null;
}
function toSlotSummary(root: jsonP.JSONValue): SlotSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "slotId": "s",
      "slotName": "s",
      "description": "s",
      "slotConstraint": (x: jsonP.JSONValue) => cmnP.readEnum<SlotConstraint>(x),
      "slotTypeId": "s",
      "valueElicitationPromptSpecification": toPromptSpecification,
      "lastUpdatedDateTime": "d",
    },
  }, root);
}
