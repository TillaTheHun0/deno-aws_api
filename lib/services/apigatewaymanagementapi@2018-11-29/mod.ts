// Autogenerated API client for: AmazonApiGatewayManagementApi

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class ApiGatewayManagementApi {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ApiGatewayManagementApi.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-29",
    "endpointPrefix": "execute-api",
    "signingName": "execute-api",
    "serviceFullName": "AmazonApiGatewayManagementApi",
    "serviceId": "ApiGatewayManagementApi",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "apigatewaymanagementapi-2018-11-29",
    "signatureVersion": "v4"
  };

  async deleteConnection(
    {abortSignal, ...params}: RequestConfig & DeleteConnectionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConnection",
      method: "DELETE",
      requestUri: cmnP.encodePath`/@connections/${params["ConnectionId"]}`,
      responseCode: 204,
    });
  }

  async getConnection(
    {abortSignal, ...params}: RequestConfig & GetConnectionRequest,
  ): Promise<GetConnectionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConnection",
      method: "GET",
      requestUri: cmnP.encodePath`/@connections/${params["ConnectionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConnectedAt": "d",
        "Identity": toIdentity,
        "LastActiveAt": "d",
      },
    }, await resp.json());
  }

  async postToConnection(
    {abortSignal, ...params}: RequestConfig & PostToConnectionRequest,
  ): Promise<void> {
    const body = typeof params["Data"] === 'string' ? new TextEncoder().encode(params["Data"]) : params["Data"];
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PostToConnection",
      requestUri: cmnP.encodePath`/@connections/${params["ConnectionId"]}`,
      responseCode: 200,
    });
  }

}

// refs: 1 - tags: named, input
export interface DeleteConnectionRequest {
  ConnectionId: string;
}

// refs: 1 - tags: named, input
export interface GetConnectionRequest {
  ConnectionId: string;
}

// refs: 1 - tags: named, input
export interface PostToConnectionRequest {
  Data: Uint8Array | string;
  ConnectionId: string;
}

// refs: 1 - tags: named, output
export interface GetConnectionResponse {
  ConnectedAt?: Date | number | null;
  Identity?: Identity | null;
  LastActiveAt?: Date | number | null;
}

// refs: 1 - tags: output, named, interface
export interface Identity {
  SourceIp: string;
  UserAgent: string;
}
function toIdentity(root: jsonP.JSONValue): Identity {
  return jsonP.readObj({
    required: {
      "SourceIp": "s",
      "UserAgent": "s",
    },
    optional: {},
  }, root);
}
