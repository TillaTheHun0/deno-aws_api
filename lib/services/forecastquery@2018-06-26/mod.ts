// Autogenerated API client for: Amazon Forecast Query Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class ForecastQueryService {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ForecastQueryService.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-06-26",
    "endpointPrefix": "forecastquery",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Forecast Query Service",
    "serviceId": "forecastquery",
    "signatureVersion": "v4",
    "signingName": "forecast",
    "targetPrefix": "AmazonForecastRuntime",
    "uid": "forecastquery-2018-06-26"
  };

  async queryForecast(
    {abortSignal, ...params}: RequestConfig & QueryForecastRequest,
  ): Promise<QueryForecastResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "QueryForecast",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Forecast": toForecast,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface QueryForecastRequest {
  ForecastArn: string;
  StartDate?: string | null;
  EndDate?: string | null;
  Filters: { [key: string]: string };
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface QueryForecastResponse {
  Forecast?: Forecast | null;
}

// refs: 1 - tags: output, named, interface
export interface Forecast {
  Predictions?: { [key: string]: DataPoint[] } | null;
}
function toForecast(root: JSONValue): Forecast {
  return prt.readObj({
    required: {},
    optional: {
      "Predictions": x => prt.readMap(String, l => Array.isArray(l) ? l.map(toDataPoint) : [], x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataPoint {
  Timestamp?: string | null;
  Value?: number | null;
}
function toDataPoint(root: JSONValue): DataPoint {
  return prt.readObj({
    required: {},
    optional: {
      "Timestamp": "s",
      "Value": "n",
    },
  }, root);
}
