// Autogenerated API client for: Amazon Appflow

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Appflow {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Appflow.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-08-23",
    "endpointPrefix": "appflow",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Appflow",
    "serviceId": "Appflow",
    "signatureVersion": "v4",
    "signingName": "appflow",
    "uid": "appflow-2020-08-23"
  };

  async createConnectorProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateConnectorProfileRequest,
  ): Promise<s.CreateConnectorProfileResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      kmsArn: params["kmsArn"],
      connectorType: params["connectorType"],
      connectionMode: params["connectionMode"],
      connectorProfileConfig: fromConnectorProfileConfig(params["connectorProfileConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConnectorProfile",
      requestUri: "/create-connector-profile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorProfileArn": "s",
      },
    }, await resp.json());
  }

  async createFlow(
    {abortSignal, ...params}: RequestConfig & s.CreateFlowRequest,
  ): Promise<s.CreateFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      description: params["description"],
      kmsArn: params["kmsArn"],
      triggerConfig: fromTriggerConfig(params["triggerConfig"]),
      sourceFlowConfig: fromSourceFlowConfig(params["sourceFlowConfig"]),
      destinationFlowConfigList: params["destinationFlowConfigList"]?.map(x => fromDestinationFlowConfig(x)),
      tasks: params["tasks"]?.map(x => fromTask(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFlow",
      requestUri: "/create-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowStatus>(x),
      },
    }, await resp.json());
  }

  async deleteConnectorProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteConnectorProfileRequest,
  ): Promise<s.DeleteConnectorProfileResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      forceDelete: params["forceDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConnectorProfile",
      requestUri: "/delete-connector-profile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteFlow(
    {abortSignal, ...params}: RequestConfig & s.DeleteFlowRequest,
  ): Promise<s.DeleteFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      forceDelete: params["forceDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFlow",
      requestUri: "/delete-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeConnectorEntity(
    {abortSignal, ...params}: RequestConfig & s.DescribeConnectorEntityRequest,
  ): Promise<s.DescribeConnectorEntityResponse> {
    const body: jsonP.JSONObject = {
      connectorEntityName: params["connectorEntityName"],
      connectorType: params["connectorType"],
      connectorProfileName: params["connectorProfileName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectorEntity",
      requestUri: "/describe-connector-entity",
    });
    return jsonP.readObj({
      required: {
        "connectorEntityFields": [toConnectorEntityField],
      },
      optional: {},
    }, await resp.json());
  }

  async describeConnectorProfiles(
    {abortSignal, ...params}: RequestConfig & s.DescribeConnectorProfilesRequest = {},
  ): Promise<s.DescribeConnectorProfilesResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileNames: params["connectorProfileNames"],
      connectorType: params["connectorType"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectorProfiles",
      requestUri: "/describe-connector-profiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorProfileDetails": [toConnectorProfile],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeConnectors(
    {abortSignal, ...params}: RequestConfig & s.DescribeConnectorsRequest = {},
  ): Promise<s.DescribeConnectorsResponse> {
    const body: jsonP.JSONObject = {
      connectorTypes: params["connectorTypes"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectors",
      requestUri: "/describe-connectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorConfigurations": x => jsonP.readMap(x => cmnP.readEnumReq<s.ConnectorType>(x), toConnectorConfiguration, x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeFlow(
    {abortSignal, ...params}: RequestConfig & s.DescribeFlowRequest,
  ): Promise<s.DescribeFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFlow",
      requestUri: "/describe-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "description": "s",
        "flowName": "s",
        "kmsArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowStatus>(x),
        "flowStatusMessage": "s",
        "sourceFlowConfig": toSourceFlowConfig,
        "destinationFlowConfigList": [toDestinationFlowConfig],
        "lastRunExecutionDetails": toExecutionDetails,
        "triggerConfig": toTriggerConfig,
        "tasks": [toTask],
        "createdAt": "d",
        "lastUpdatedAt": "d",
        "createdBy": "s",
        "lastUpdatedBy": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeFlowExecutionRecords(
    {abortSignal, ...params}: RequestConfig & s.DescribeFlowExecutionRecordsRequest,
  ): Promise<s.DescribeFlowExecutionRecordsResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFlowExecutionRecords",
      requestUri: "/describe-flow-execution-records",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowExecutions": [toExecutionRecord],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listConnectorEntities(
    {abortSignal, ...params}: RequestConfig & s.ListConnectorEntitiesRequest = {},
  ): Promise<s.ListConnectorEntitiesResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      connectorType: params["connectorType"],
      entitiesPath: params["entitiesPath"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConnectorEntities",
      requestUri: "/list-connector-entities",
    });
    return jsonP.readObj({
      required: {
        "connectorEntityMap": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toConnectorEntity) : [], x),
      },
      optional: {},
    }, await resp.json());
  }

  async listFlows(
    {abortSignal, ...params}: RequestConfig & s.ListFlowsRequest = {},
  ): Promise<s.ListFlowsResponse> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFlows",
      requestUri: "/list-flows",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flows": [toFlowDefinition],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async startFlow(
    {abortSignal, ...params}: RequestConfig & s.StartFlowRequest,
  ): Promise<s.StartFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartFlow",
      requestUri: "/start-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowStatus>(x),
        "executionId": "s",
      },
    }, await resp.json());
  }

  async stopFlow(
    {abortSignal, ...params}: RequestConfig & s.StopFlowRequest,
  ): Promise<s.StopFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopFlow",
      requestUri: "/stop-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowStatus>(x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateConnectorProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateConnectorProfileRequest,
  ): Promise<s.UpdateConnectorProfileResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      connectionMode: params["connectionMode"],
      connectorProfileConfig: fromConnectorProfileConfig(params["connectorProfileConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectorProfile",
      requestUri: "/update-connector-profile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorProfileArn": "s",
      },
    }, await resp.json());
  }

  async updateFlow(
    {abortSignal, ...params}: RequestConfig & s.UpdateFlowRequest,
  ): Promise<s.UpdateFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      description: params["description"],
      triggerConfig: fromTriggerConfig(params["triggerConfig"]),
      sourceFlowConfig: fromSourceFlowConfig(params["sourceFlowConfig"]),
      destinationFlowConfigList: params["destinationFlowConfigList"]?.map(x => fromDestinationFlowConfig(x)),
      tasks: params["tasks"]?.map(x => fromTask(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlow",
      requestUri: "/update-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowStatus>(x),
      },
    }, await resp.json());
  }

}

function fromConnectorProfileConfig(input?: s.ConnectorProfileConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    connectorProfileProperties: fromConnectorProfileProperties(input["connectorProfileProperties"]),
    connectorProfileCredentials: fromConnectorProfileCredentials(input["connectorProfileCredentials"]),
  }
}

function fromConnectorProfileProperties(input?: s.ConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: fromAmplitudeConnectorProfileProperties(input["Amplitude"]),
    Datadog: fromDatadogConnectorProfileProperties(input["Datadog"]),
    Dynatrace: fromDynatraceConnectorProfileProperties(input["Dynatrace"]),
    GoogleAnalytics: fromGoogleAnalyticsConnectorProfileProperties(input["GoogleAnalytics"]),
    Honeycode: fromHoneycodeConnectorProfileProperties(input["Honeycode"]),
    InforNexus: fromInforNexusConnectorProfileProperties(input["InforNexus"]),
    Marketo: fromMarketoConnectorProfileProperties(input["Marketo"]),
    Redshift: fromRedshiftConnectorProfileProperties(input["Redshift"]),
    Salesforce: fromSalesforceConnectorProfileProperties(input["Salesforce"]),
    ServiceNow: fromServiceNowConnectorProfileProperties(input["ServiceNow"]),
    Singular: fromSingularConnectorProfileProperties(input["Singular"]),
    Slack: fromSlackConnectorProfileProperties(input["Slack"]),
    Snowflake: fromSnowflakeConnectorProfileProperties(input["Snowflake"]),
    Trendmicro: fromTrendmicroConnectorProfileProperties(input["Trendmicro"]),
    Veeva: fromVeevaConnectorProfileProperties(input["Veeva"]),
    Zendesk: fromZendeskConnectorProfileProperties(input["Zendesk"]),
  }
}
function toConnectorProfileProperties(root: jsonP.JSONValue): s.ConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": toAmplitudeConnectorProfileProperties,
      "Datadog": toDatadogConnectorProfileProperties,
      "Dynatrace": toDynatraceConnectorProfileProperties,
      "GoogleAnalytics": toGoogleAnalyticsConnectorProfileProperties,
      "Honeycode": toHoneycodeConnectorProfileProperties,
      "InforNexus": toInforNexusConnectorProfileProperties,
      "Marketo": toMarketoConnectorProfileProperties,
      "Redshift": toRedshiftConnectorProfileProperties,
      "Salesforce": toSalesforceConnectorProfileProperties,
      "ServiceNow": toServiceNowConnectorProfileProperties,
      "Singular": toSingularConnectorProfileProperties,
      "Slack": toSlackConnectorProfileProperties,
      "Snowflake": toSnowflakeConnectorProfileProperties,
      "Trendmicro": toTrendmicroConnectorProfileProperties,
      "Veeva": toVeevaConnectorProfileProperties,
      "Zendesk": toZendeskConnectorProfileProperties,
    },
  }, root);
}

function fromAmplitudeConnectorProfileProperties(input?: s.AmplitudeConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toAmplitudeConnectorProfileProperties(root: jsonP.JSONValue): s.AmplitudeConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function fromDatadogConnectorProfileProperties(input?: s.DatadogConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toDatadogConnectorProfileProperties(root: jsonP.JSONValue): s.DatadogConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromDynatraceConnectorProfileProperties(input?: s.DynatraceConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toDynatraceConnectorProfileProperties(root: jsonP.JSONValue): s.DynatraceConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromGoogleAnalyticsConnectorProfileProperties(input?: s.GoogleAnalyticsConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toGoogleAnalyticsConnectorProfileProperties(root: jsonP.JSONValue): s.GoogleAnalyticsConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function fromHoneycodeConnectorProfileProperties(input?: s.HoneycodeConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toHoneycodeConnectorProfileProperties(root: jsonP.JSONValue): s.HoneycodeConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function fromInforNexusConnectorProfileProperties(input?: s.InforNexusConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toInforNexusConnectorProfileProperties(root: jsonP.JSONValue): s.InforNexusConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromMarketoConnectorProfileProperties(input?: s.MarketoConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toMarketoConnectorProfileProperties(root: jsonP.JSONValue): s.MarketoConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromRedshiftConnectorProfileProperties(input?: s.RedshiftConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    databaseUrl: input["databaseUrl"],
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
    roleArn: input["roleArn"],
  }
}
function toRedshiftConnectorProfileProperties(root: jsonP.JSONValue): s.RedshiftConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "databaseUrl": "s",
      "bucketName": "s",
      "roleArn": "s",
    },
    optional: {
      "bucketPrefix": "s",
    },
  }, root);
}

function fromSalesforceConnectorProfileProperties(input?: s.SalesforceConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
    isSandboxEnvironment: input["isSandboxEnvironment"],
  }
}
function toSalesforceConnectorProfileProperties(root: jsonP.JSONValue): s.SalesforceConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "instanceUrl": "s",
      "isSandboxEnvironment": "b",
    },
  }, root);
}

function fromServiceNowConnectorProfileProperties(input?: s.ServiceNowConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toServiceNowConnectorProfileProperties(root: jsonP.JSONValue): s.ServiceNowConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromSingularConnectorProfileProperties(input?: s.SingularConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toSingularConnectorProfileProperties(root: jsonP.JSONValue): s.SingularConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function fromSlackConnectorProfileProperties(input?: s.SlackConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toSlackConnectorProfileProperties(root: jsonP.JSONValue): s.SlackConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromSnowflakeConnectorProfileProperties(input?: s.SnowflakeConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    warehouse: input["warehouse"],
    stage: input["stage"],
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
    privateLinkServiceName: input["privateLinkServiceName"],
    accountName: input["accountName"],
    region: input["region"],
  }
}
function toSnowflakeConnectorProfileProperties(root: jsonP.JSONValue): s.SnowflakeConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "warehouse": "s",
      "stage": "s",
      "bucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "privateLinkServiceName": "s",
      "accountName": "s",
      "region": "s",
    },
  }, root);
}

function fromTrendmicroConnectorProfileProperties(input?: s.TrendmicroConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toTrendmicroConnectorProfileProperties(root: jsonP.JSONValue): s.TrendmicroConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function fromVeevaConnectorProfileProperties(input?: s.VeevaConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toVeevaConnectorProfileProperties(root: jsonP.JSONValue): s.VeevaConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromZendeskConnectorProfileProperties(input?: s.ZendeskConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toZendeskConnectorProfileProperties(root: jsonP.JSONValue): s.ZendeskConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

function fromConnectorProfileCredentials(input?: s.ConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: fromAmplitudeConnectorProfileCredentials(input["Amplitude"]),
    Datadog: fromDatadogConnectorProfileCredentials(input["Datadog"]),
    Dynatrace: fromDynatraceConnectorProfileCredentials(input["Dynatrace"]),
    GoogleAnalytics: fromGoogleAnalyticsConnectorProfileCredentials(input["GoogleAnalytics"]),
    Honeycode: fromHoneycodeConnectorProfileCredentials(input["Honeycode"]),
    InforNexus: fromInforNexusConnectorProfileCredentials(input["InforNexus"]),
    Marketo: fromMarketoConnectorProfileCredentials(input["Marketo"]),
    Redshift: fromRedshiftConnectorProfileCredentials(input["Redshift"]),
    Salesforce: fromSalesforceConnectorProfileCredentials(input["Salesforce"]),
    ServiceNow: fromServiceNowConnectorProfileCredentials(input["ServiceNow"]),
    Singular: fromSingularConnectorProfileCredentials(input["Singular"]),
    Slack: fromSlackConnectorProfileCredentials(input["Slack"]),
    Snowflake: fromSnowflakeConnectorProfileCredentials(input["Snowflake"]),
    Trendmicro: fromTrendmicroConnectorProfileCredentials(input["Trendmicro"]),
    Veeva: fromVeevaConnectorProfileCredentials(input["Veeva"]),
    Zendesk: fromZendeskConnectorProfileCredentials(input["Zendesk"]),
  }
}

function fromAmplitudeConnectorProfileCredentials(input?: s.AmplitudeConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiKey: input["apiKey"],
    secretKey: input["secretKey"],
  }
}

function fromDatadogConnectorProfileCredentials(input?: s.DatadogConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiKey: input["apiKey"],
    applicationKey: input["applicationKey"],
  }
}

function fromDynatraceConnectorProfileCredentials(input?: s.DynatraceConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiToken: input["apiToken"],
  }
}

function fromGoogleAnalyticsConnectorProfileCredentials(input?: s.GoogleAnalyticsConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    refreshToken: input["refreshToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

function fromConnectorOAuthRequest(input?: s.ConnectorOAuthRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    authCode: input["authCode"],
    redirectUri: input["redirectUri"],
  }
}

function fromHoneycodeConnectorProfileCredentials(input?: s.HoneycodeConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accessToken: input["accessToken"],
    refreshToken: input["refreshToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

function fromInforNexusConnectorProfileCredentials(input?: s.InforNexusConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accessKeyId: input["accessKeyId"],
    userId: input["userId"],
    secretAccessKey: input["secretAccessKey"],
    datakey: input["datakey"],
  }
}

function fromMarketoConnectorProfileCredentials(input?: s.MarketoConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

function fromRedshiftConnectorProfileCredentials(input?: s.RedshiftConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

function fromSalesforceConnectorProfileCredentials(input?: s.SalesforceConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accessToken: input["accessToken"],
    refreshToken: input["refreshToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
    clientCredentialsArn: input["clientCredentialsArn"],
  }
}

function fromServiceNowConnectorProfileCredentials(input?: s.ServiceNowConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

function fromSingularConnectorProfileCredentials(input?: s.SingularConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiKey: input["apiKey"],
  }
}

function fromSlackConnectorProfileCredentials(input?: s.SlackConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

function fromSnowflakeConnectorProfileCredentials(input?: s.SnowflakeConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

function fromTrendmicroConnectorProfileCredentials(input?: s.TrendmicroConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiSecretKey: input["apiSecretKey"],
  }
}

function fromVeevaConnectorProfileCredentials(input?: s.VeevaConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

function fromZendeskConnectorProfileCredentials(input?: s.ZendeskConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

function fromTriggerConfig(input?: s.TriggerConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    triggerType: input["triggerType"],
    triggerProperties: fromTriggerProperties(input["triggerProperties"]),
  }
}
function toTriggerConfig(root: jsonP.JSONValue): s.TriggerConfig {
  return jsonP.readObj({
    required: {
      "triggerType": (x: jsonP.JSONValue) => cmnP.readEnum<s.TriggerType>(x),
    },
    optional: {
      "triggerProperties": toTriggerProperties,
    },
  }, root);
}

function fromTriggerProperties(input?: s.TriggerProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Scheduled: fromScheduledTriggerProperties(input["Scheduled"]),
  }
}
function toTriggerProperties(root: jsonP.JSONValue): s.TriggerProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Scheduled": toScheduledTriggerProperties,
    },
  }, root);
}

function fromScheduledTriggerProperties(input?: s.ScheduledTriggerProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    scheduleExpression: input["scheduleExpression"],
    dataPullMode: input["dataPullMode"],
    scheduleStartTime: jsonP.serializeDate_unixTimestamp(input["scheduleStartTime"]),
    scheduleEndTime: jsonP.serializeDate_unixTimestamp(input["scheduleEndTime"]),
    timezone: input["timezone"],
    scheduleOffset: input["scheduleOffset"],
    firstExecutionFrom: jsonP.serializeDate_unixTimestamp(input["firstExecutionFrom"]),
  }
}
function toScheduledTriggerProperties(root: jsonP.JSONValue): s.ScheduledTriggerProperties {
  return jsonP.readObj({
    required: {
      "scheduleExpression": "s",
    },
    optional: {
      "dataPullMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataPullMode>(x),
      "scheduleStartTime": "d",
      "scheduleEndTime": "d",
      "timezone": "s",
      "scheduleOffset": "n",
      "firstExecutionFrom": "d",
    },
  }, root);
}

function fromSourceFlowConfig(input?: s.SourceFlowConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    connectorType: input["connectorType"],
    connectorProfileName: input["connectorProfileName"],
    sourceConnectorProperties: fromSourceConnectorProperties(input["sourceConnectorProperties"]),
    incrementalPullConfig: fromIncrementalPullConfig(input["incrementalPullConfig"]),
  }
}
function toSourceFlowConfig(root: jsonP.JSONValue): s.SourceFlowConfig {
  return jsonP.readObj({
    required: {
      "connectorType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectorType>(x),
      "sourceConnectorProperties": toSourceConnectorProperties,
    },
    optional: {
      "connectorProfileName": "s",
      "incrementalPullConfig": toIncrementalPullConfig,
    },
  }, root);
}

function fromSourceConnectorProperties(input?: s.SourceConnectorProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: fromAmplitudeSourceProperties(input["Amplitude"]),
    Datadog: fromDatadogSourceProperties(input["Datadog"]),
    Dynatrace: fromDynatraceSourceProperties(input["Dynatrace"]),
    GoogleAnalytics: fromGoogleAnalyticsSourceProperties(input["GoogleAnalytics"]),
    InforNexus: fromInforNexusSourceProperties(input["InforNexus"]),
    Marketo: fromMarketoSourceProperties(input["Marketo"]),
    S3: fromS3SourceProperties(input["S3"]),
    Salesforce: fromSalesforceSourceProperties(input["Salesforce"]),
    ServiceNow: fromServiceNowSourceProperties(input["ServiceNow"]),
    Singular: fromSingularSourceProperties(input["Singular"]),
    Slack: fromSlackSourceProperties(input["Slack"]),
    Trendmicro: fromTrendmicroSourceProperties(input["Trendmicro"]),
    Veeva: fromVeevaSourceProperties(input["Veeva"]),
    Zendesk: fromZendeskSourceProperties(input["Zendesk"]),
  }
}
function toSourceConnectorProperties(root: jsonP.JSONValue): s.SourceConnectorProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": toAmplitudeSourceProperties,
      "Datadog": toDatadogSourceProperties,
      "Dynatrace": toDynatraceSourceProperties,
      "GoogleAnalytics": toGoogleAnalyticsSourceProperties,
      "InforNexus": toInforNexusSourceProperties,
      "Marketo": toMarketoSourceProperties,
      "S3": toS3SourceProperties,
      "Salesforce": toSalesforceSourceProperties,
      "ServiceNow": toServiceNowSourceProperties,
      "Singular": toSingularSourceProperties,
      "Slack": toSlackSourceProperties,
      "Trendmicro": toTrendmicroSourceProperties,
      "Veeva": toVeevaSourceProperties,
      "Zendesk": toZendeskSourceProperties,
    },
  }, root);
}

function fromAmplitudeSourceProperties(input?: s.AmplitudeSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toAmplitudeSourceProperties(root: jsonP.JSONValue): s.AmplitudeSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromDatadogSourceProperties(input?: s.DatadogSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toDatadogSourceProperties(root: jsonP.JSONValue): s.DatadogSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromDynatraceSourceProperties(input?: s.DynatraceSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toDynatraceSourceProperties(root: jsonP.JSONValue): s.DynatraceSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromGoogleAnalyticsSourceProperties(input?: s.GoogleAnalyticsSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toGoogleAnalyticsSourceProperties(root: jsonP.JSONValue): s.GoogleAnalyticsSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromInforNexusSourceProperties(input?: s.InforNexusSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toInforNexusSourceProperties(root: jsonP.JSONValue): s.InforNexusSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromMarketoSourceProperties(input?: s.MarketoSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toMarketoSourceProperties(root: jsonP.JSONValue): s.MarketoSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromS3SourceProperties(input?: s.S3SourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
  }
}
function toS3SourceProperties(root: jsonP.JSONValue): s.S3SourceProperties {
  return jsonP.readObj({
    required: {
      "bucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
    },
  }, root);
}

function fromSalesforceSourceProperties(input?: s.SalesforceSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    enableDynamicFieldUpdate: input["enableDynamicFieldUpdate"],
    includeDeletedRecords: input["includeDeletedRecords"],
  }
}
function toSalesforceSourceProperties(root: jsonP.JSONValue): s.SalesforceSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {
      "enableDynamicFieldUpdate": "b",
      "includeDeletedRecords": "b",
    },
  }, root);
}

function fromServiceNowSourceProperties(input?: s.ServiceNowSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toServiceNowSourceProperties(root: jsonP.JSONValue): s.ServiceNowSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromSingularSourceProperties(input?: s.SingularSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toSingularSourceProperties(root: jsonP.JSONValue): s.SingularSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromSlackSourceProperties(input?: s.SlackSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toSlackSourceProperties(root: jsonP.JSONValue): s.SlackSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromTrendmicroSourceProperties(input?: s.TrendmicroSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toTrendmicroSourceProperties(root: jsonP.JSONValue): s.TrendmicroSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromVeevaSourceProperties(input?: s.VeevaSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toVeevaSourceProperties(root: jsonP.JSONValue): s.VeevaSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromZendeskSourceProperties(input?: s.ZendeskSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toZendeskSourceProperties(root: jsonP.JSONValue): s.ZendeskSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

function fromIncrementalPullConfig(input?: s.IncrementalPullConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    datetimeTypeFieldName: input["datetimeTypeFieldName"],
  }
}
function toIncrementalPullConfig(root: jsonP.JSONValue): s.IncrementalPullConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "datetimeTypeFieldName": "s",
    },
  }, root);
}

function fromDestinationFlowConfig(input?: s.DestinationFlowConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    connectorType: input["connectorType"],
    connectorProfileName: input["connectorProfileName"],
    destinationConnectorProperties: fromDestinationConnectorProperties(input["destinationConnectorProperties"]),
  }
}
function toDestinationFlowConfig(root: jsonP.JSONValue): s.DestinationFlowConfig {
  return jsonP.readObj({
    required: {
      "connectorType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectorType>(x),
      "destinationConnectorProperties": toDestinationConnectorProperties,
    },
    optional: {
      "connectorProfileName": "s",
    },
  }, root);
}

function fromDestinationConnectorProperties(input?: s.DestinationConnectorProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Redshift: fromRedshiftDestinationProperties(input["Redshift"]),
    S3: fromS3DestinationProperties(input["S3"]),
    Salesforce: fromSalesforceDestinationProperties(input["Salesforce"]),
    Snowflake: fromSnowflakeDestinationProperties(input["Snowflake"]),
    EventBridge: fromEventBridgeDestinationProperties(input["EventBridge"]),
    LookoutMetrics: fromLookoutMetricsDestinationProperties(input["LookoutMetrics"]),
    Upsolver: fromUpsolverDestinationProperties(input["Upsolver"]),
    Honeycode: fromHoneycodeDestinationProperties(input["Honeycode"]),
    CustomerProfiles: fromCustomerProfilesDestinationProperties(input["CustomerProfiles"]),
  }
}
function toDestinationConnectorProperties(root: jsonP.JSONValue): s.DestinationConnectorProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Redshift": toRedshiftDestinationProperties,
      "S3": toS3DestinationProperties,
      "Salesforce": toSalesforceDestinationProperties,
      "Snowflake": toSnowflakeDestinationProperties,
      "EventBridge": toEventBridgeDestinationProperties,
      "LookoutMetrics": toLookoutMetricsDestinationProperties,
      "Upsolver": toUpsolverDestinationProperties,
      "Honeycode": toHoneycodeDestinationProperties,
      "CustomerProfiles": toCustomerProfilesDestinationProperties,
    },
  }, root);
}

function fromRedshiftDestinationProperties(input?: s.RedshiftDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    intermediateBucketName: input["intermediateBucketName"],
    bucketPrefix: input["bucketPrefix"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
  }
}
function toRedshiftDestinationProperties(root: jsonP.JSONValue): s.RedshiftDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
      "intermediateBucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "errorHandlingConfig": toErrorHandlingConfig,
    },
  }, root);
}

function fromErrorHandlingConfig(input?: s.ErrorHandlingConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    failOnFirstDestinationError: input["failOnFirstDestinationError"],
    bucketPrefix: input["bucketPrefix"],
    bucketName: input["bucketName"],
  }
}
function toErrorHandlingConfig(root: jsonP.JSONValue): s.ErrorHandlingConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "failOnFirstDestinationError": "b",
      "bucketPrefix": "s",
      "bucketName": "s",
    },
  }, root);
}

function fromS3DestinationProperties(input?: s.S3DestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
    s3OutputFormatConfig: fromS3OutputFormatConfig(input["s3OutputFormatConfig"]),
  }
}
function toS3DestinationProperties(root: jsonP.JSONValue): s.S3DestinationProperties {
  return jsonP.readObj({
    required: {
      "bucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "s3OutputFormatConfig": toS3OutputFormatConfig,
    },
  }, root);
}

function fromS3OutputFormatConfig(input?: s.S3OutputFormatConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fileType: input["fileType"],
    prefixConfig: fromPrefixConfig(input["prefixConfig"]),
    aggregationConfig: fromAggregationConfig(input["aggregationConfig"]),
  }
}
function toS3OutputFormatConfig(root: jsonP.JSONValue): s.S3OutputFormatConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "fileType": (x: jsonP.JSONValue) => cmnP.readEnum<s.FileType>(x),
      "prefixConfig": toPrefixConfig,
      "aggregationConfig": toAggregationConfig,
    },
  }, root);
}

function fromPrefixConfig(input?: s.PrefixConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    prefixType: input["prefixType"],
    prefixFormat: input["prefixFormat"],
  }
}
function toPrefixConfig(root: jsonP.JSONValue): s.PrefixConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "prefixType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PrefixType>(x),
      "prefixFormat": (x: jsonP.JSONValue) => cmnP.readEnum<s.PrefixFormat>(x),
    },
  }, root);
}

function fromAggregationConfig(input?: s.AggregationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    aggregationType: input["aggregationType"],
  }
}
function toAggregationConfig(root: jsonP.JSONValue): s.AggregationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "aggregationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AggregationType>(x),
    },
  }, root);
}

function fromSalesforceDestinationProperties(input?: s.SalesforceDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    idFieldNames: input["idFieldNames"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
    writeOperationType: input["writeOperationType"],
  }
}
function toSalesforceDestinationProperties(root: jsonP.JSONValue): s.SalesforceDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {
      "idFieldNames": ["s"],
      "errorHandlingConfig": toErrorHandlingConfig,
      "writeOperationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.WriteOperationType>(x),
    },
  }, root);
}

function fromSnowflakeDestinationProperties(input?: s.SnowflakeDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    intermediateBucketName: input["intermediateBucketName"],
    bucketPrefix: input["bucketPrefix"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
  }
}
function toSnowflakeDestinationProperties(root: jsonP.JSONValue): s.SnowflakeDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
      "intermediateBucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "errorHandlingConfig": toErrorHandlingConfig,
    },
  }, root);
}

function fromEventBridgeDestinationProperties(input?: s.EventBridgeDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
  }
}
function toEventBridgeDestinationProperties(root: jsonP.JSONValue): s.EventBridgeDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {
      "errorHandlingConfig": toErrorHandlingConfig,
    },
  }, root);
}

function fromLookoutMetricsDestinationProperties(input?: s.LookoutMetricsDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toLookoutMetricsDestinationProperties(root: jsonP.JSONValue): s.LookoutMetricsDestinationProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function fromUpsolverDestinationProperties(input?: s.UpsolverDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
    s3OutputFormatConfig: fromUpsolverS3OutputFormatConfig(input["s3OutputFormatConfig"]),
  }
}
function toUpsolverDestinationProperties(root: jsonP.JSONValue): s.UpsolverDestinationProperties {
  return jsonP.readObj({
    required: {
      "bucketName": "s",
      "s3OutputFormatConfig": toUpsolverS3OutputFormatConfig,
    },
    optional: {
      "bucketPrefix": "s",
    },
  }, root);
}

function fromUpsolverS3OutputFormatConfig(input?: s.UpsolverS3OutputFormatConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fileType: input["fileType"],
    prefixConfig: fromPrefixConfig(input["prefixConfig"]),
    aggregationConfig: fromAggregationConfig(input["aggregationConfig"]),
  }
}
function toUpsolverS3OutputFormatConfig(root: jsonP.JSONValue): s.UpsolverS3OutputFormatConfig {
  return jsonP.readObj({
    required: {
      "prefixConfig": toPrefixConfig,
    },
    optional: {
      "fileType": (x: jsonP.JSONValue) => cmnP.readEnum<s.FileType>(x),
      "aggregationConfig": toAggregationConfig,
    },
  }, root);
}

function fromHoneycodeDestinationProperties(input?: s.HoneycodeDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
  }
}
function toHoneycodeDestinationProperties(root: jsonP.JSONValue): s.HoneycodeDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {
      "errorHandlingConfig": toErrorHandlingConfig,
    },
  }, root);
}

function fromCustomerProfilesDestinationProperties(input?: s.CustomerProfilesDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    domainName: input["domainName"],
    objectTypeName: input["objectTypeName"],
  }
}
function toCustomerProfilesDestinationProperties(root: jsonP.JSONValue): s.CustomerProfilesDestinationProperties {
  return jsonP.readObj({
    required: {
      "domainName": "s",
    },
    optional: {
      "objectTypeName": "s",
    },
  }, root);
}

function fromTask(input?: s.Task | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceFields: input["sourceFields"],
    connectorOperator: fromConnectorOperator(input["connectorOperator"]),
    destinationField: input["destinationField"],
    taskType: input["taskType"],
    taskProperties: input["taskProperties"],
  }
}
function toTask(root: jsonP.JSONValue): s.Task {
  return jsonP.readObj({
    required: {
      "sourceFields": ["s"],
      "taskType": (x: jsonP.JSONValue) => cmnP.readEnum<s.TaskType>(x),
    },
    optional: {
      "connectorOperator": toConnectorOperator,
      "destinationField": "s",
      "taskProperties": x => jsonP.readMap(x => cmnP.readEnumReq<s.OperatorPropertiesKeys>(x), String, x),
    },
  }, root);
}

function fromConnectorOperator(input?: s.ConnectorOperator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: input["Amplitude"],
    Datadog: input["Datadog"],
    Dynatrace: input["Dynatrace"],
    GoogleAnalytics: input["GoogleAnalytics"],
    InforNexus: input["InforNexus"],
    Marketo: input["Marketo"],
    S3: input["S3"],
    Salesforce: input["Salesforce"],
    ServiceNow: input["ServiceNow"],
    Singular: input["Singular"],
    Slack: input["Slack"],
    Trendmicro: input["Trendmicro"],
    Veeva: input["Veeva"],
    Zendesk: input["Zendesk"],
  }
}
function toConnectorOperator(root: jsonP.JSONValue): s.ConnectorOperator {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": (x: jsonP.JSONValue) => cmnP.readEnum<s.AmplitudeConnectorOperator>(x),
      "Datadog": (x: jsonP.JSONValue) => cmnP.readEnum<s.DatadogConnectorOperator>(x),
      "Dynatrace": (x: jsonP.JSONValue) => cmnP.readEnum<s.DynatraceConnectorOperator>(x),
      "GoogleAnalytics": (x: jsonP.JSONValue) => cmnP.readEnum<s.GoogleAnalyticsConnectorOperator>(x),
      "InforNexus": (x: jsonP.JSONValue) => cmnP.readEnum<s.InforNexusConnectorOperator>(x),
      "Marketo": (x: jsonP.JSONValue) => cmnP.readEnum<s.MarketoConnectorOperator>(x),
      "S3": (x: jsonP.JSONValue) => cmnP.readEnum<s.S3ConnectorOperator>(x),
      "Salesforce": (x: jsonP.JSONValue) => cmnP.readEnum<s.SalesforceConnectorOperator>(x),
      "ServiceNow": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceNowConnectorOperator>(x),
      "Singular": (x: jsonP.JSONValue) => cmnP.readEnum<s.SingularConnectorOperator>(x),
      "Slack": (x: jsonP.JSONValue) => cmnP.readEnum<s.SlackConnectorOperator>(x),
      "Trendmicro": (x: jsonP.JSONValue) => cmnP.readEnum<s.TrendmicroConnectorOperator>(x),
      "Veeva": (x: jsonP.JSONValue) => cmnP.readEnum<s.VeevaConnectorOperator>(x),
      "Zendesk": (x: jsonP.JSONValue) => cmnP.readEnum<s.ZendeskConnectorOperator>(x),
    },
  }, root);
}

function toConnectorEntityField(root: jsonP.JSONValue): s.ConnectorEntityField {
  return jsonP.readObj({
    required: {
      "identifier": "s",
    },
    optional: {
      "label": "s",
      "supportedFieldTypeDetails": toSupportedFieldTypeDetails,
      "description": "s",
      "sourceProperties": toSourceFieldProperties,
      "destinationProperties": toDestinationFieldProperties,
    },
  }, root);
}

function toSupportedFieldTypeDetails(root: jsonP.JSONValue): s.SupportedFieldTypeDetails {
  return jsonP.readObj({
    required: {
      "v1": toFieldTypeDetails,
    },
    optional: {},
  }, root);
}

function toFieldTypeDetails(root: jsonP.JSONValue): s.FieldTypeDetails {
  return jsonP.readObj({
    required: {
      "fieldType": "s",
      "filterOperators": [(x: jsonP.JSONValue) => cmnP.readEnum<s.Operator>(x)],
    },
    optional: {
      "supportedValues": ["s"],
    },
  }, root);
}

function toSourceFieldProperties(root: jsonP.JSONValue): s.SourceFieldProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "isRetrievable": "b",
      "isQueryable": "b",
    },
  }, root);
}

function toDestinationFieldProperties(root: jsonP.JSONValue): s.DestinationFieldProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "isCreatable": "b",
      "isNullable": "b",
      "isUpsertable": "b",
      "isUpdatable": "b",
      "supportedWriteOperations": [(x: jsonP.JSONValue) => cmnP.readEnum<s.WriteOperationType>(x)],
    },
  }, root);
}

function toConnectorProfile(root: jsonP.JSONValue): s.ConnectorProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "connectorProfileArn": "s",
      "connectorProfileName": "s",
      "connectorType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectorType>(x),
      "connectionMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectionMode>(x),
      "credentialsArn": "s",
      "connectorProfileProperties": toConnectorProfileProperties,
      "createdAt": "d",
      "lastUpdatedAt": "d",
    },
  }, root);
}

function toConnectorConfiguration(root: jsonP.JSONValue): s.ConnectorConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "canUseAsSource": "b",
      "canUseAsDestination": "b",
      "supportedDestinationConnectors": [(x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectorType>(x)],
      "supportedSchedulingFrequencies": [(x: jsonP.JSONValue) => cmnP.readEnum<s.ScheduleFrequencyType>(x)],
      "isPrivateLinkEnabled": "b",
      "isPrivateLinkEndpointUrlRequired": "b",
      "supportedTriggerTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.TriggerType>(x)],
      "connectorMetadata": toConnectorMetadata,
    },
  }, root);
}

function toConnectorMetadata(root: jsonP.JSONValue): s.ConnectorMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": toAmplitudeMetadata,
      "Datadog": toDatadogMetadata,
      "Dynatrace": toDynatraceMetadata,
      "GoogleAnalytics": toGoogleAnalyticsMetadata,
      "InforNexus": toInforNexusMetadata,
      "Marketo": toMarketoMetadata,
      "Redshift": toRedshiftMetadata,
      "S3": toS3Metadata,
      "Salesforce": toSalesforceMetadata,
      "ServiceNow": toServiceNowMetadata,
      "Singular": toSingularMetadata,
      "Slack": toSlackMetadata,
      "Snowflake": toSnowflakeMetadata,
      "Trendmicro": toTrendmicroMetadata,
      "Veeva": toVeevaMetadata,
      "Zendesk": toZendeskMetadata,
      "EventBridge": toEventBridgeMetadata,
      "Upsolver": toUpsolverMetadata,
      "CustomerProfiles": toCustomerProfilesMetadata,
      "Honeycode": toHoneycodeMetadata,
    },
  }, root);
}

function toAmplitudeMetadata(root: jsonP.JSONValue): s.AmplitudeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toDatadogMetadata(root: jsonP.JSONValue): s.DatadogMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toDynatraceMetadata(root: jsonP.JSONValue): s.DynatraceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toGoogleAnalyticsMetadata(root: jsonP.JSONValue): s.GoogleAnalyticsMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

function toInforNexusMetadata(root: jsonP.JSONValue): s.InforNexusMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toMarketoMetadata(root: jsonP.JSONValue): s.MarketoMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toRedshiftMetadata(root: jsonP.JSONValue): s.RedshiftMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toS3Metadata(root: jsonP.JSONValue): s.S3Metadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toSalesforceMetadata(root: jsonP.JSONValue): s.SalesforceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

function toServiceNowMetadata(root: jsonP.JSONValue): s.ServiceNowMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toSingularMetadata(root: jsonP.JSONValue): s.SingularMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toSlackMetadata(root: jsonP.JSONValue): s.SlackMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

function toSnowflakeMetadata(root: jsonP.JSONValue): s.SnowflakeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "supportedRegions": ["s"],
    },
  }, root);
}

function toTrendmicroMetadata(root: jsonP.JSONValue): s.TrendmicroMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toVeevaMetadata(root: jsonP.JSONValue): s.VeevaMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toZendeskMetadata(root: jsonP.JSONValue): s.ZendeskMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

function toEventBridgeMetadata(root: jsonP.JSONValue): s.EventBridgeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toUpsolverMetadata(root: jsonP.JSONValue): s.UpsolverMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toCustomerProfilesMetadata(root: jsonP.JSONValue): s.CustomerProfilesMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function toHoneycodeMetadata(root: jsonP.JSONValue): s.HoneycodeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

function toExecutionDetails(root: jsonP.JSONValue): s.ExecutionDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "mostRecentExecutionMessage": "s",
      "mostRecentExecutionTime": "d",
      "mostRecentExecutionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionStatus>(x),
    },
  }, root);
}

function toExecutionRecord(root: jsonP.JSONValue): s.ExecutionRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "executionId": "s",
      "executionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionStatus>(x),
      "executionResult": toExecutionResult,
      "startedAt": "d",
      "lastUpdatedAt": "d",
      "dataPullStartTime": "d",
      "dataPullEndTime": "d",
    },
  }, root);
}

function toExecutionResult(root: jsonP.JSONValue): s.ExecutionResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "errorInfo": toErrorInfo,
      "bytesProcessed": "n",
      "bytesWritten": "n",
      "recordsProcessed": "n",
    },
  }, root);
}

function toErrorInfo(root: jsonP.JSONValue): s.ErrorInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "putFailuresCount": "n",
      "executionMessage": "s",
    },
  }, root);
}

function toConnectorEntity(root: jsonP.JSONValue): s.ConnectorEntity {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {
      "label": "s",
      "hasNestedEntities": "b",
    },
  }, root);
}

function toFlowDefinition(root: jsonP.JSONValue): s.FlowDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "flowArn": "s",
      "description": "s",
      "flowName": "s",
      "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowStatus>(x),
      "sourceConnectorType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectorType>(x),
      "destinationConnectorType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConnectorType>(x),
      "triggerType": (x: jsonP.JSONValue) => cmnP.readEnum<s.TriggerType>(x),
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "createdBy": "s",
      "lastUpdatedBy": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "lastRunExecutionDetails": toExecutionDetails,
    },
  }, root);
}
