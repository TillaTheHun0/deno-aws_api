// Autogenerated API client for: Amazon Appflow

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Appflow {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Appflow.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-08-23",
    "endpointPrefix": "appflow",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Appflow",
    "serviceId": "Appflow",
    "signatureVersion": "v4",
    "signingName": "appflow",
    "uid": "appflow-2020-08-23"
  };

  async createConnectorProfile(
    {abortSignal, ...params}: RequestConfig & CreateConnectorProfileRequest,
  ): Promise<CreateConnectorProfileResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      kmsArn: params["kmsArn"],
      connectorType: params["connectorType"],
      connectionMode: params["connectionMode"],
      connectorProfileConfig: fromConnectorProfileConfig(params["connectorProfileConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConnectorProfile",
      requestUri: "/create-connector-profile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorProfileArn": "s",
      },
    }, await resp.json());
  }

  async createFlow(
    {abortSignal, ...params}: RequestConfig & CreateFlowRequest,
  ): Promise<CreateFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      description: params["description"],
      kmsArn: params["kmsArn"],
      triggerConfig: fromTriggerConfig(params["triggerConfig"]),
      sourceFlowConfig: fromSourceFlowConfig(params["sourceFlowConfig"]),
      destinationFlowConfigList: params["destinationFlowConfigList"]?.map(x => fromDestinationFlowConfig(x)),
      tasks: params["tasks"]?.map(x => fromTask(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFlow",
      requestUri: "/create-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<FlowStatus>(x),
      },
    }, await resp.json());
  }

  async deleteConnectorProfile(
    {abortSignal, ...params}: RequestConfig & DeleteConnectorProfileRequest,
  ): Promise<DeleteConnectorProfileResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      forceDelete: params["forceDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConnectorProfile",
      requestUri: "/delete-connector-profile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteFlow(
    {abortSignal, ...params}: RequestConfig & DeleteFlowRequest,
  ): Promise<DeleteFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      forceDelete: params["forceDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFlow",
      requestUri: "/delete-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeConnectorEntity(
    {abortSignal, ...params}: RequestConfig & DescribeConnectorEntityRequest,
  ): Promise<DescribeConnectorEntityResponse> {
    const body: jsonP.JSONObject = {
      connectorEntityName: params["connectorEntityName"],
      connectorType: params["connectorType"],
      connectorProfileName: params["connectorProfileName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectorEntity",
      requestUri: "/describe-connector-entity",
    });
    return jsonP.readObj({
      required: {
        "connectorEntityFields": [toConnectorEntityField],
      },
      optional: {},
    }, await resp.json());
  }

  async describeConnectorProfiles(
    {abortSignal, ...params}: RequestConfig & DescribeConnectorProfilesRequest = {},
  ): Promise<DescribeConnectorProfilesResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileNames: params["connectorProfileNames"],
      connectorType: params["connectorType"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectorProfiles",
      requestUri: "/describe-connector-profiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorProfileDetails": [toConnectorProfile],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeConnectors(
    {abortSignal, ...params}: RequestConfig & DescribeConnectorsRequest = {},
  ): Promise<DescribeConnectorsResponse> {
    const body: jsonP.JSONObject = {
      connectorTypes: params["connectorTypes"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConnectors",
      requestUri: "/describe-connectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorConfigurations": x => jsonP.readMap(x => cmnP.readEnumReq<ConnectorType>(x), toConnectorConfiguration, x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeFlow(
    {abortSignal, ...params}: RequestConfig & DescribeFlowRequest,
  ): Promise<DescribeFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFlow",
      requestUri: "/describe-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "description": "s",
        "flowName": "s",
        "kmsArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<FlowStatus>(x),
        "flowStatusMessage": "s",
        "sourceFlowConfig": toSourceFlowConfig,
        "destinationFlowConfigList": [toDestinationFlowConfig],
        "lastRunExecutionDetails": toExecutionDetails,
        "triggerConfig": toTriggerConfig,
        "tasks": [toTask],
        "createdAt": "d",
        "lastUpdatedAt": "d",
        "createdBy": "s",
        "lastUpdatedBy": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeFlowExecutionRecords(
    {abortSignal, ...params}: RequestConfig & DescribeFlowExecutionRecordsRequest,
  ): Promise<DescribeFlowExecutionRecordsResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFlowExecutionRecords",
      requestUri: "/describe-flow-execution-records",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowExecutions": [toExecutionRecord],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listConnectorEntities(
    {abortSignal, ...params}: RequestConfig & ListConnectorEntitiesRequest = {},
  ): Promise<ListConnectorEntitiesResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      connectorType: params["connectorType"],
      entitiesPath: params["entitiesPath"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListConnectorEntities",
      requestUri: "/list-connector-entities",
    });
    return jsonP.readObj({
      required: {
        "connectorEntityMap": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toConnectorEntity) : [], x),
      },
      optional: {},
    }, await resp.json());
  }

  async listFlows(
    {abortSignal, ...params}: RequestConfig & ListFlowsRequest = {},
  ): Promise<ListFlowsResponse> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFlows",
      requestUri: "/list-flows",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flows": [toFlowDefinition],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async startFlow(
    {abortSignal, ...params}: RequestConfig & StartFlowRequest,
  ): Promise<StartFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartFlow",
      requestUri: "/start-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<FlowStatus>(x),
        "executionId": "s",
      },
    }, await resp.json());
  }

  async stopFlow(
    {abortSignal, ...params}: RequestConfig & StopFlowRequest,
  ): Promise<StopFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopFlow",
      requestUri: "/stop-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowArn": "s",
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<FlowStatus>(x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateConnectorProfile(
    {abortSignal, ...params}: RequestConfig & UpdateConnectorProfileRequest,
  ): Promise<UpdateConnectorProfileResponse> {
    const body: jsonP.JSONObject = {
      connectorProfileName: params["connectorProfileName"],
      connectionMode: params["connectionMode"],
      connectorProfileConfig: fromConnectorProfileConfig(params["connectorProfileConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectorProfile",
      requestUri: "/update-connector-profile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "connectorProfileArn": "s",
      },
    }, await resp.json());
  }

  async updateFlow(
    {abortSignal, ...params}: RequestConfig & UpdateFlowRequest,
  ): Promise<UpdateFlowResponse> {
    const body: jsonP.JSONObject = {
      flowName: params["flowName"],
      description: params["description"],
      triggerConfig: fromTriggerConfig(params["triggerConfig"]),
      sourceFlowConfig: fromSourceFlowConfig(params["sourceFlowConfig"]),
      destinationFlowConfigList: params["destinationFlowConfigList"]?.map(x => fromDestinationFlowConfig(x)),
      tasks: params["tasks"]?.map(x => fromTask(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlow",
      requestUri: "/update-flow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<FlowStatus>(x),
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateConnectorProfileRequest {
  connectorProfileName: string;
  kmsArn?: string | null;
  connectorType: ConnectorType;
  connectionMode: ConnectionMode;
  connectorProfileConfig: ConnectorProfileConfig;
}

// refs: 1 - tags: named, input
export interface CreateFlowRequest {
  flowName: string;
  description?: string | null;
  kmsArn?: string | null;
  triggerConfig: TriggerConfig;
  sourceFlowConfig: SourceFlowConfig;
  destinationFlowConfigList: DestinationFlowConfig[];
  tasks: Task[];
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteConnectorProfileRequest {
  connectorProfileName: string;
  forceDelete?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteFlowRequest {
  flowName: string;
  forceDelete?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeConnectorEntityRequest {
  connectorEntityName: string;
  connectorType?: ConnectorType | null;
  connectorProfileName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConnectorProfilesRequest {
  connectorProfileNames?: string[] | null;
  connectorType?: ConnectorType | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConnectorsRequest {
  connectorTypes?: ConnectorType[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFlowRequest {
  flowName: string;
}

// refs: 1 - tags: named, input
export interface DescribeFlowExecutionRecordsRequest {
  flowName: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConnectorEntitiesRequest {
  connectorProfileName?: string | null;
  connectorType?: ConnectorType | null;
  entitiesPath?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFlowsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface StartFlowRequest {
  flowName: string;
}

// refs: 1 - tags: named, input
export interface StopFlowRequest {
  flowName: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateConnectorProfileRequest {
  connectorProfileName: string;
  connectionMode: ConnectionMode;
  connectorProfileConfig: ConnectorProfileConfig;
}

// refs: 1 - tags: named, input
export interface UpdateFlowRequest {
  flowName: string;
  description?: string | null;
  triggerConfig: TriggerConfig;
  sourceFlowConfig?: SourceFlowConfig | null;
  destinationFlowConfigList: DestinationFlowConfig[];
  tasks: Task[];
}

// refs: 1 - tags: named, output
export interface CreateConnectorProfileResponse {
  connectorProfileArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateFlowResponse {
  flowArn?: string | null;
  flowStatus?: FlowStatus | null;
}

// refs: 1 - tags: named, output
export interface DeleteConnectorProfileResponse {
}

// refs: 1 - tags: named, output
export interface DeleteFlowResponse {
}

// refs: 1 - tags: named, output
export interface DescribeConnectorEntityResponse {
  connectorEntityFields: ConnectorEntityField[];
}

// refs: 1 - tags: named, output
export interface DescribeConnectorProfilesResponse {
  connectorProfileDetails?: ConnectorProfile[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConnectorsResponse {
  connectorConfigurations?: { [key in ConnectorType]: ConnectorConfiguration | null | undefined } | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeFlowResponse {
  flowArn?: string | null;
  description?: string | null;
  flowName?: string | null;
  kmsArn?: string | null;
  flowStatus?: FlowStatus | null;
  flowStatusMessage?: string | null;
  sourceFlowConfig?: SourceFlowConfig | null;
  destinationFlowConfigList?: DestinationFlowConfig[] | null;
  lastRunExecutionDetails?: ExecutionDetails | null;
  triggerConfig?: TriggerConfig | null;
  tasks?: Task[] | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  createdBy?: string | null;
  lastUpdatedBy?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeFlowExecutionRecordsResponse {
  flowExecutions?: ExecutionRecord[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListConnectorEntitiesResponse {
  connectorEntityMap: { [key: string]: ConnectorEntity[] | null | undefined };
}

// refs: 1 - tags: named, output
export interface ListFlowsResponse {
  flows?: FlowDefinition[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface StartFlowResponse {
  flowArn?: string | null;
  flowStatus?: FlowStatus | null;
  executionId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopFlowResponse {
  flowArn?: string | null;
  flowStatus?: FlowStatus | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateConnectorProfileResponse {
  connectorProfileArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateFlowResponse {
  flowStatus?: FlowStatus | null;
}

// refs: 16 - tags: input, named, enum, output
export type ConnectorType =
| "Salesforce"
| "Singular"
| "Slack"
| "Redshift"
| "S3"
| "Marketo"
| "Googleanalytics"
| "Zendesk"
| "Servicenow"
| "Datadog"
| "Trendmicro"
| "Snowflake"
| "Dynatrace"
| "Infornexus"
| "Amplitude"
| "Veeva"
| "EventBridge"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ConnectionMode =
| "Public"
| "Private"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ConnectorProfileConfig {
  connectorProfileProperties: ConnectorProfileProperties;
  connectorProfileCredentials: ConnectorProfileCredentials;
}
function fromConnectorProfileConfig(input?: ConnectorProfileConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    connectorProfileProperties: fromConnectorProfileProperties(input["connectorProfileProperties"]),
    connectorProfileCredentials: fromConnectorProfileCredentials(input["connectorProfileCredentials"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface ConnectorProfileProperties {
  Amplitude?: AmplitudeConnectorProfileProperties | null;
  Datadog?: DatadogConnectorProfileProperties | null;
  Dynatrace?: DynatraceConnectorProfileProperties | null;
  GoogleAnalytics?: GoogleAnalyticsConnectorProfileProperties | null;
  InforNexus?: InforNexusConnectorProfileProperties | null;
  Marketo?: MarketoConnectorProfileProperties | null;
  Redshift?: RedshiftConnectorProfileProperties | null;
  Salesforce?: SalesforceConnectorProfileProperties | null;
  ServiceNow?: ServiceNowConnectorProfileProperties | null;
  Singular?: SingularConnectorProfileProperties | null;
  Slack?: SlackConnectorProfileProperties | null;
  Snowflake?: SnowflakeConnectorProfileProperties | null;
  Trendmicro?: TrendmicroConnectorProfileProperties | null;
  Veeva?: VeevaConnectorProfileProperties | null;
  Zendesk?: ZendeskConnectorProfileProperties | null;
}
function fromConnectorProfileProperties(input?: ConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: fromAmplitudeConnectorProfileProperties(input["Amplitude"]),
    Datadog: fromDatadogConnectorProfileProperties(input["Datadog"]),
    Dynatrace: fromDynatraceConnectorProfileProperties(input["Dynatrace"]),
    GoogleAnalytics: fromGoogleAnalyticsConnectorProfileProperties(input["GoogleAnalytics"]),
    InforNexus: fromInforNexusConnectorProfileProperties(input["InforNexus"]),
    Marketo: fromMarketoConnectorProfileProperties(input["Marketo"]),
    Redshift: fromRedshiftConnectorProfileProperties(input["Redshift"]),
    Salesforce: fromSalesforceConnectorProfileProperties(input["Salesforce"]),
    ServiceNow: fromServiceNowConnectorProfileProperties(input["ServiceNow"]),
    Singular: fromSingularConnectorProfileProperties(input["Singular"]),
    Slack: fromSlackConnectorProfileProperties(input["Slack"]),
    Snowflake: fromSnowflakeConnectorProfileProperties(input["Snowflake"]),
    Trendmicro: fromTrendmicroConnectorProfileProperties(input["Trendmicro"]),
    Veeva: fromVeevaConnectorProfileProperties(input["Veeva"]),
    Zendesk: fromZendeskConnectorProfileProperties(input["Zendesk"]),
  }
}
function toConnectorProfileProperties(root: jsonP.JSONValue): ConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": toAmplitudeConnectorProfileProperties,
      "Datadog": toDatadogConnectorProfileProperties,
      "Dynatrace": toDynatraceConnectorProfileProperties,
      "GoogleAnalytics": toGoogleAnalyticsConnectorProfileProperties,
      "InforNexus": toInforNexusConnectorProfileProperties,
      "Marketo": toMarketoConnectorProfileProperties,
      "Redshift": toRedshiftConnectorProfileProperties,
      "Salesforce": toSalesforceConnectorProfileProperties,
      "ServiceNow": toServiceNowConnectorProfileProperties,
      "Singular": toSingularConnectorProfileProperties,
      "Slack": toSlackConnectorProfileProperties,
      "Snowflake": toSnowflakeConnectorProfileProperties,
      "Trendmicro": toTrendmicroConnectorProfileProperties,
      "Veeva": toVeevaConnectorProfileProperties,
      "Zendesk": toZendeskConnectorProfileProperties,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AmplitudeConnectorProfileProperties {
}
function fromAmplitudeConnectorProfileProperties(input?: AmplitudeConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toAmplitudeConnectorProfileProperties(root: jsonP.JSONValue): AmplitudeConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DatadogConnectorProfileProperties {
  instanceUrl: string;
}
function fromDatadogConnectorProfileProperties(input?: DatadogConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toDatadogConnectorProfileProperties(root: jsonP.JSONValue): DatadogConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DynatraceConnectorProfileProperties {
  instanceUrl: string;
}
function fromDynatraceConnectorProfileProperties(input?: DynatraceConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toDynatraceConnectorProfileProperties(root: jsonP.JSONValue): DynatraceConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface GoogleAnalyticsConnectorProfileProperties {
}
function fromGoogleAnalyticsConnectorProfileProperties(input?: GoogleAnalyticsConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toGoogleAnalyticsConnectorProfileProperties(root: jsonP.JSONValue): GoogleAnalyticsConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface InforNexusConnectorProfileProperties {
  instanceUrl: string;
}
function fromInforNexusConnectorProfileProperties(input?: InforNexusConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toInforNexusConnectorProfileProperties(root: jsonP.JSONValue): InforNexusConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface MarketoConnectorProfileProperties {
  instanceUrl: string;
}
function fromMarketoConnectorProfileProperties(input?: MarketoConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toMarketoConnectorProfileProperties(root: jsonP.JSONValue): MarketoConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RedshiftConnectorProfileProperties {
  databaseUrl: string;
  bucketName: string;
  bucketPrefix?: string | null;
  roleArn: string;
}
function fromRedshiftConnectorProfileProperties(input?: RedshiftConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    databaseUrl: input["databaseUrl"],
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
    roleArn: input["roleArn"],
  }
}
function toRedshiftConnectorProfileProperties(root: jsonP.JSONValue): RedshiftConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "databaseUrl": "s",
      "bucketName": "s",
      "roleArn": "s",
    },
    optional: {
      "bucketPrefix": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SalesforceConnectorProfileProperties {
  instanceUrl?: string | null;
  isSandboxEnvironment?: boolean | null;
}
function fromSalesforceConnectorProfileProperties(input?: SalesforceConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
    isSandboxEnvironment: input["isSandboxEnvironment"],
  }
}
function toSalesforceConnectorProfileProperties(root: jsonP.JSONValue): SalesforceConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "instanceUrl": "s",
      "isSandboxEnvironment": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ServiceNowConnectorProfileProperties {
  instanceUrl: string;
}
function fromServiceNowConnectorProfileProperties(input?: ServiceNowConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toServiceNowConnectorProfileProperties(root: jsonP.JSONValue): ServiceNowConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SingularConnectorProfileProperties {
}
function fromSingularConnectorProfileProperties(input?: SingularConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toSingularConnectorProfileProperties(root: jsonP.JSONValue): SingularConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SlackConnectorProfileProperties {
  instanceUrl: string;
}
function fromSlackConnectorProfileProperties(input?: SlackConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toSlackConnectorProfileProperties(root: jsonP.JSONValue): SlackConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SnowflakeConnectorProfileProperties {
  warehouse: string;
  stage: string;
  bucketName: string;
  bucketPrefix?: string | null;
  privateLinkServiceName?: string | null;
  accountName?: string | null;
  region?: string | null;
}
function fromSnowflakeConnectorProfileProperties(input?: SnowflakeConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    warehouse: input["warehouse"],
    stage: input["stage"],
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
    privateLinkServiceName: input["privateLinkServiceName"],
    accountName: input["accountName"],
    region: input["region"],
  }
}
function toSnowflakeConnectorProfileProperties(root: jsonP.JSONValue): SnowflakeConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "warehouse": "s",
      "stage": "s",
      "bucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "privateLinkServiceName": "s",
      "accountName": "s",
      "region": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TrendmicroConnectorProfileProperties {
}
function fromTrendmicroConnectorProfileProperties(input?: TrendmicroConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toTrendmicroConnectorProfileProperties(root: jsonP.JSONValue): TrendmicroConnectorProfileProperties {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface VeevaConnectorProfileProperties {
  instanceUrl: string;
}
function fromVeevaConnectorProfileProperties(input?: VeevaConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toVeevaConnectorProfileProperties(root: jsonP.JSONValue): VeevaConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ZendeskConnectorProfileProperties {
  instanceUrl: string;
}
function fromZendeskConnectorProfileProperties(input?: ZendeskConnectorProfileProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    instanceUrl: input["instanceUrl"],
  }
}
function toZendeskConnectorProfileProperties(root: jsonP.JSONValue): ZendeskConnectorProfileProperties {
  return jsonP.readObj({
    required: {
      "instanceUrl": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface ConnectorProfileCredentials {
  Amplitude?: AmplitudeConnectorProfileCredentials | null;
  Datadog?: DatadogConnectorProfileCredentials | null;
  Dynatrace?: DynatraceConnectorProfileCredentials | null;
  GoogleAnalytics?: GoogleAnalyticsConnectorProfileCredentials | null;
  InforNexus?: InforNexusConnectorProfileCredentials | null;
  Marketo?: MarketoConnectorProfileCredentials | null;
  Redshift?: RedshiftConnectorProfileCredentials | null;
  Salesforce?: SalesforceConnectorProfileCredentials | null;
  ServiceNow?: ServiceNowConnectorProfileCredentials | null;
  Singular?: SingularConnectorProfileCredentials | null;
  Slack?: SlackConnectorProfileCredentials | null;
  Snowflake?: SnowflakeConnectorProfileCredentials | null;
  Trendmicro?: TrendmicroConnectorProfileCredentials | null;
  Veeva?: VeevaConnectorProfileCredentials | null;
  Zendesk?: ZendeskConnectorProfileCredentials | null;
}
function fromConnectorProfileCredentials(input?: ConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: fromAmplitudeConnectorProfileCredentials(input["Amplitude"]),
    Datadog: fromDatadogConnectorProfileCredentials(input["Datadog"]),
    Dynatrace: fromDynatraceConnectorProfileCredentials(input["Dynatrace"]),
    GoogleAnalytics: fromGoogleAnalyticsConnectorProfileCredentials(input["GoogleAnalytics"]),
    InforNexus: fromInforNexusConnectorProfileCredentials(input["InforNexus"]),
    Marketo: fromMarketoConnectorProfileCredentials(input["Marketo"]),
    Redshift: fromRedshiftConnectorProfileCredentials(input["Redshift"]),
    Salesforce: fromSalesforceConnectorProfileCredentials(input["Salesforce"]),
    ServiceNow: fromServiceNowConnectorProfileCredentials(input["ServiceNow"]),
    Singular: fromSingularConnectorProfileCredentials(input["Singular"]),
    Slack: fromSlackConnectorProfileCredentials(input["Slack"]),
    Snowflake: fromSnowflakeConnectorProfileCredentials(input["Snowflake"]),
    Trendmicro: fromTrendmicroConnectorProfileCredentials(input["Trendmicro"]),
    Veeva: fromVeevaConnectorProfileCredentials(input["Veeva"]),
    Zendesk: fromZendeskConnectorProfileCredentials(input["Zendesk"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface AmplitudeConnectorProfileCredentials {
  apiKey: string;
  secretKey: string;
}
function fromAmplitudeConnectorProfileCredentials(input?: AmplitudeConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiKey: input["apiKey"],
    secretKey: input["secretKey"],
  }
}

// refs: 2 - tags: input, named, interface
export interface DatadogConnectorProfileCredentials {
  apiKey: string;
  applicationKey: string;
}
function fromDatadogConnectorProfileCredentials(input?: DatadogConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiKey: input["apiKey"],
    applicationKey: input["applicationKey"],
  }
}

// refs: 2 - tags: input, named, interface
export interface DynatraceConnectorProfileCredentials {
  apiToken: string;
}
function fromDynatraceConnectorProfileCredentials(input?: DynatraceConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiToken: input["apiToken"],
  }
}

// refs: 2 - tags: input, named, interface
export interface GoogleAnalyticsConnectorProfileCredentials {
  clientId: string;
  clientSecret: string;
  accessToken?: string | null;
  refreshToken?: string | null;
  oAuthRequest?: ConnectorOAuthRequest | null;
}
function fromGoogleAnalyticsConnectorProfileCredentials(input?: GoogleAnalyticsConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    refreshToken: input["refreshToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

// refs: 10 - tags: input, named, interface
export interface ConnectorOAuthRequest {
  authCode?: string | null;
  redirectUri?: string | null;
}
function fromConnectorOAuthRequest(input?: ConnectorOAuthRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    authCode: input["authCode"],
    redirectUri: input["redirectUri"],
  }
}

// refs: 2 - tags: input, named, interface
export interface InforNexusConnectorProfileCredentials {
  accessKeyId: string;
  userId: string;
  secretAccessKey: string;
  datakey: string;
}
function fromInforNexusConnectorProfileCredentials(input?: InforNexusConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accessKeyId: input["accessKeyId"],
    userId: input["userId"],
    secretAccessKey: input["secretAccessKey"],
    datakey: input["datakey"],
  }
}

// refs: 2 - tags: input, named, interface
export interface MarketoConnectorProfileCredentials {
  clientId: string;
  clientSecret: string;
  accessToken?: string | null;
  oAuthRequest?: ConnectorOAuthRequest | null;
}
function fromMarketoConnectorProfileCredentials(input?: MarketoConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface RedshiftConnectorProfileCredentials {
  username: string;
  password: string;
}
function fromRedshiftConnectorProfileCredentials(input?: RedshiftConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

// refs: 2 - tags: input, named, interface
export interface SalesforceConnectorProfileCredentials {
  accessToken?: string | null;
  refreshToken?: string | null;
  oAuthRequest?: ConnectorOAuthRequest | null;
  clientCredentialsArn?: string | null;
}
function fromSalesforceConnectorProfileCredentials(input?: SalesforceConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accessToken: input["accessToken"],
    refreshToken: input["refreshToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
    clientCredentialsArn: input["clientCredentialsArn"],
  }
}

// refs: 2 - tags: input, named, interface
export interface ServiceNowConnectorProfileCredentials {
  username: string;
  password: string;
}
function fromServiceNowConnectorProfileCredentials(input?: ServiceNowConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

// refs: 2 - tags: input, named, interface
export interface SingularConnectorProfileCredentials {
  apiKey: string;
}
function fromSingularConnectorProfileCredentials(input?: SingularConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiKey: input["apiKey"],
  }
}

// refs: 2 - tags: input, named, interface
export interface SlackConnectorProfileCredentials {
  clientId: string;
  clientSecret: string;
  accessToken?: string | null;
  oAuthRequest?: ConnectorOAuthRequest | null;
}
function fromSlackConnectorProfileCredentials(input?: SlackConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface SnowflakeConnectorProfileCredentials {
  username: string;
  password: string;
}
function fromSnowflakeConnectorProfileCredentials(input?: SnowflakeConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

// refs: 2 - tags: input, named, interface
export interface TrendmicroConnectorProfileCredentials {
  apiSecretKey: string;
}
function fromTrendmicroConnectorProfileCredentials(input?: TrendmicroConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiSecretKey: input["apiSecretKey"],
  }
}

// refs: 2 - tags: input, named, interface
export interface VeevaConnectorProfileCredentials {
  username: string;
  password: string;
}
function fromVeevaConnectorProfileCredentials(input?: VeevaConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: input["password"],
  }
}

// refs: 2 - tags: input, named, interface
export interface ZendeskConnectorProfileCredentials {
  clientId: string;
  clientSecret: string;
  accessToken?: string | null;
  oAuthRequest?: ConnectorOAuthRequest | null;
}
function fromZendeskConnectorProfileCredentials(input?: ZendeskConnectorProfileCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    clientId: input["clientId"],
    clientSecret: input["clientSecret"],
    accessToken: input["accessToken"],
    oAuthRequest: fromConnectorOAuthRequest(input["oAuthRequest"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface TriggerConfig {
  triggerType: TriggerType;
  triggerProperties?: TriggerProperties | null;
}
function fromTriggerConfig(input?: TriggerConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    triggerType: input["triggerType"],
    triggerProperties: fromTriggerProperties(input["triggerProperties"]),
  }
}
function toTriggerConfig(root: jsonP.JSONValue): TriggerConfig {
  return jsonP.readObj({
    required: {
      "triggerType": (x: jsonP.JSONValue) => cmnP.readEnum<TriggerType>(x),
    },
    optional: {
      "triggerProperties": toTriggerProperties,
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type TriggerType =
| "Scheduled"
| "Event"
| "OnDemand"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface TriggerProperties {
  Scheduled?: ScheduledTriggerProperties | null;
}
function fromTriggerProperties(input?: TriggerProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Scheduled: fromScheduledTriggerProperties(input["Scheduled"]),
  }
}
function toTriggerProperties(root: jsonP.JSONValue): TriggerProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Scheduled": toScheduledTriggerProperties,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ScheduledTriggerProperties {
  scheduleExpression: string;
  dataPullMode?: DataPullMode | null;
  scheduleStartTime?: Date | number | null;
  scheduleEndTime?: Date | number | null;
  timezone?: string | null;
}
function fromScheduledTriggerProperties(input?: ScheduledTriggerProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    scheduleExpression: input["scheduleExpression"],
    dataPullMode: input["dataPullMode"],
    scheduleStartTime: jsonP.serializeDate_unixTimestamp(input["scheduleStartTime"]),
    scheduleEndTime: jsonP.serializeDate_unixTimestamp(input["scheduleEndTime"]),
    timezone: input["timezone"],
  }
}
function toScheduledTriggerProperties(root: jsonP.JSONValue): ScheduledTriggerProperties {
  return jsonP.readObj({
    required: {
      "scheduleExpression": "s",
    },
    optional: {
      "dataPullMode": (x: jsonP.JSONValue) => cmnP.readEnum<DataPullMode>(x),
      "scheduleStartTime": "d",
      "scheduleEndTime": "d",
      "timezone": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DataPullMode =
| "Incremental"
| "Complete"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SourceFlowConfig {
  connectorType: ConnectorType;
  connectorProfileName?: string | null;
  sourceConnectorProperties: SourceConnectorProperties;
  incrementalPullConfig?: IncrementalPullConfig | null;
}
function fromSourceFlowConfig(input?: SourceFlowConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    connectorType: input["connectorType"],
    connectorProfileName: input["connectorProfileName"],
    sourceConnectorProperties: fromSourceConnectorProperties(input["sourceConnectorProperties"]),
    incrementalPullConfig: fromIncrementalPullConfig(input["incrementalPullConfig"]),
  }
}
function toSourceFlowConfig(root: jsonP.JSONValue): SourceFlowConfig {
  return jsonP.readObj({
    required: {
      "connectorType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectorType>(x),
      "sourceConnectorProperties": toSourceConnectorProperties,
    },
    optional: {
      "connectorProfileName": "s",
      "incrementalPullConfig": toIncrementalPullConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SourceConnectorProperties {
  Amplitude?: AmplitudeSourceProperties | null;
  Datadog?: DatadogSourceProperties | null;
  Dynatrace?: DynatraceSourceProperties | null;
  GoogleAnalytics?: GoogleAnalyticsSourceProperties | null;
  InforNexus?: InforNexusSourceProperties | null;
  Marketo?: MarketoSourceProperties | null;
  S3?: S3SourceProperties | null;
  Salesforce?: SalesforceSourceProperties | null;
  ServiceNow?: ServiceNowSourceProperties | null;
  Singular?: SingularSourceProperties | null;
  Slack?: SlackSourceProperties | null;
  Trendmicro?: TrendmicroSourceProperties | null;
  Veeva?: VeevaSourceProperties | null;
  Zendesk?: ZendeskSourceProperties | null;
}
function fromSourceConnectorProperties(input?: SourceConnectorProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: fromAmplitudeSourceProperties(input["Amplitude"]),
    Datadog: fromDatadogSourceProperties(input["Datadog"]),
    Dynatrace: fromDynatraceSourceProperties(input["Dynatrace"]),
    GoogleAnalytics: fromGoogleAnalyticsSourceProperties(input["GoogleAnalytics"]),
    InforNexus: fromInforNexusSourceProperties(input["InforNexus"]),
    Marketo: fromMarketoSourceProperties(input["Marketo"]),
    S3: fromS3SourceProperties(input["S3"]),
    Salesforce: fromSalesforceSourceProperties(input["Salesforce"]),
    ServiceNow: fromServiceNowSourceProperties(input["ServiceNow"]),
    Singular: fromSingularSourceProperties(input["Singular"]),
    Slack: fromSlackSourceProperties(input["Slack"]),
    Trendmicro: fromTrendmicroSourceProperties(input["Trendmicro"]),
    Veeva: fromVeevaSourceProperties(input["Veeva"]),
    Zendesk: fromZendeskSourceProperties(input["Zendesk"]),
  }
}
function toSourceConnectorProperties(root: jsonP.JSONValue): SourceConnectorProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": toAmplitudeSourceProperties,
      "Datadog": toDatadogSourceProperties,
      "Dynatrace": toDynatraceSourceProperties,
      "GoogleAnalytics": toGoogleAnalyticsSourceProperties,
      "InforNexus": toInforNexusSourceProperties,
      "Marketo": toMarketoSourceProperties,
      "S3": toS3SourceProperties,
      "Salesforce": toSalesforceSourceProperties,
      "ServiceNow": toServiceNowSourceProperties,
      "Singular": toSingularSourceProperties,
      "Slack": toSlackSourceProperties,
      "Trendmicro": toTrendmicroSourceProperties,
      "Veeva": toVeevaSourceProperties,
      "Zendesk": toZendeskSourceProperties,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AmplitudeSourceProperties {
  object: string;
}
function fromAmplitudeSourceProperties(input?: AmplitudeSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toAmplitudeSourceProperties(root: jsonP.JSONValue): AmplitudeSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DatadogSourceProperties {
  object: string;
}
function fromDatadogSourceProperties(input?: DatadogSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toDatadogSourceProperties(root: jsonP.JSONValue): DatadogSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DynatraceSourceProperties {
  object: string;
}
function fromDynatraceSourceProperties(input?: DynatraceSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toDynatraceSourceProperties(root: jsonP.JSONValue): DynatraceSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface GoogleAnalyticsSourceProperties {
  object: string;
}
function fromGoogleAnalyticsSourceProperties(input?: GoogleAnalyticsSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toGoogleAnalyticsSourceProperties(root: jsonP.JSONValue): GoogleAnalyticsSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface InforNexusSourceProperties {
  object: string;
}
function fromInforNexusSourceProperties(input?: InforNexusSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toInforNexusSourceProperties(root: jsonP.JSONValue): InforNexusSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface MarketoSourceProperties {
  object: string;
}
function fromMarketoSourceProperties(input?: MarketoSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toMarketoSourceProperties(root: jsonP.JSONValue): MarketoSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3SourceProperties {
  bucketName: string;
  bucketPrefix?: string | null;
}
function fromS3SourceProperties(input?: S3SourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
  }
}
function toS3SourceProperties(root: jsonP.JSONValue): S3SourceProperties {
  return jsonP.readObj({
    required: {
      "bucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SalesforceSourceProperties {
  object: string;
  enableDynamicFieldUpdate?: boolean | null;
  includeDeletedRecords?: boolean | null;
}
function fromSalesforceSourceProperties(input?: SalesforceSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    enableDynamicFieldUpdate: input["enableDynamicFieldUpdate"],
    includeDeletedRecords: input["includeDeletedRecords"],
  }
}
function toSalesforceSourceProperties(root: jsonP.JSONValue): SalesforceSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {
      "enableDynamicFieldUpdate": "b",
      "includeDeletedRecords": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ServiceNowSourceProperties {
  object: string;
}
function fromServiceNowSourceProperties(input?: ServiceNowSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toServiceNowSourceProperties(root: jsonP.JSONValue): ServiceNowSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SingularSourceProperties {
  object: string;
}
function fromSingularSourceProperties(input?: SingularSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toSingularSourceProperties(root: jsonP.JSONValue): SingularSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SlackSourceProperties {
  object: string;
}
function fromSlackSourceProperties(input?: SlackSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toSlackSourceProperties(root: jsonP.JSONValue): SlackSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TrendmicroSourceProperties {
  object: string;
}
function fromTrendmicroSourceProperties(input?: TrendmicroSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toTrendmicroSourceProperties(root: jsonP.JSONValue): TrendmicroSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface VeevaSourceProperties {
  object: string;
}
function fromVeevaSourceProperties(input?: VeevaSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toVeevaSourceProperties(root: jsonP.JSONValue): VeevaSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ZendeskSourceProperties {
  object: string;
}
function fromZendeskSourceProperties(input?: ZendeskSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
  }
}
function toZendeskSourceProperties(root: jsonP.JSONValue): ZendeskSourceProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface IncrementalPullConfig {
  datetimeTypeFieldName?: string | null;
}
function fromIncrementalPullConfig(input?: IncrementalPullConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    datetimeTypeFieldName: input["datetimeTypeFieldName"],
  }
}
function toIncrementalPullConfig(root: jsonP.JSONValue): IncrementalPullConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "datetimeTypeFieldName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DestinationFlowConfig {
  connectorType: ConnectorType;
  connectorProfileName?: string | null;
  destinationConnectorProperties: DestinationConnectorProperties;
}
function fromDestinationFlowConfig(input?: DestinationFlowConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    connectorType: input["connectorType"],
    connectorProfileName: input["connectorProfileName"],
    destinationConnectorProperties: fromDestinationConnectorProperties(input["destinationConnectorProperties"]),
  }
}
function toDestinationFlowConfig(root: jsonP.JSONValue): DestinationFlowConfig {
  return jsonP.readObj({
    required: {
      "connectorType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectorType>(x),
      "destinationConnectorProperties": toDestinationConnectorProperties,
    },
    optional: {
      "connectorProfileName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DestinationConnectorProperties {
  Redshift?: RedshiftDestinationProperties | null;
  S3?: S3DestinationProperties | null;
  Salesforce?: SalesforceDestinationProperties | null;
  Snowflake?: SnowflakeDestinationProperties | null;
  EventBridge?: EventBridgeDestinationProperties | null;
}
function fromDestinationConnectorProperties(input?: DestinationConnectorProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Redshift: fromRedshiftDestinationProperties(input["Redshift"]),
    S3: fromS3DestinationProperties(input["S3"]),
    Salesforce: fromSalesforceDestinationProperties(input["Salesforce"]),
    Snowflake: fromSnowflakeDestinationProperties(input["Snowflake"]),
    EventBridge: fromEventBridgeDestinationProperties(input["EventBridge"]),
  }
}
function toDestinationConnectorProperties(root: jsonP.JSONValue): DestinationConnectorProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Redshift": toRedshiftDestinationProperties,
      "S3": toS3DestinationProperties,
      "Salesforce": toSalesforceDestinationProperties,
      "Snowflake": toSnowflakeDestinationProperties,
      "EventBridge": toEventBridgeDestinationProperties,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RedshiftDestinationProperties {
  object: string;
  intermediateBucketName: string;
  bucketPrefix?: string | null;
  errorHandlingConfig?: ErrorHandlingConfig | null;
}
function fromRedshiftDestinationProperties(input?: RedshiftDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    intermediateBucketName: input["intermediateBucketName"],
    bucketPrefix: input["bucketPrefix"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
  }
}
function toRedshiftDestinationProperties(root: jsonP.JSONValue): RedshiftDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
      "intermediateBucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "errorHandlingConfig": toErrorHandlingConfig,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface ErrorHandlingConfig {
  failOnFirstDestinationError?: boolean | null;
  bucketPrefix?: string | null;
  bucketName?: string | null;
}
function fromErrorHandlingConfig(input?: ErrorHandlingConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    failOnFirstDestinationError: input["failOnFirstDestinationError"],
    bucketPrefix: input["bucketPrefix"],
    bucketName: input["bucketName"],
  }
}
function toErrorHandlingConfig(root: jsonP.JSONValue): ErrorHandlingConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "failOnFirstDestinationError": "b",
      "bucketPrefix": "s",
      "bucketName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3DestinationProperties {
  bucketName: string;
  bucketPrefix?: string | null;
  s3OutputFormatConfig?: S3OutputFormatConfig | null;
}
function fromS3DestinationProperties(input?: S3DestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucketName: input["bucketName"],
    bucketPrefix: input["bucketPrefix"],
    s3OutputFormatConfig: fromS3OutputFormatConfig(input["s3OutputFormatConfig"]),
  }
}
function toS3DestinationProperties(root: jsonP.JSONValue): S3DestinationProperties {
  return jsonP.readObj({
    required: {
      "bucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "s3OutputFormatConfig": toS3OutputFormatConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3OutputFormatConfig {
  fileType?: FileType | null;
  prefixConfig?: PrefixConfig | null;
  aggregationConfig?: AggregationConfig | null;
}
function fromS3OutputFormatConfig(input?: S3OutputFormatConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fileType: input["fileType"],
    prefixConfig: fromPrefixConfig(input["prefixConfig"]),
    aggregationConfig: fromAggregationConfig(input["aggregationConfig"]),
  }
}
function toS3OutputFormatConfig(root: jsonP.JSONValue): S3OutputFormatConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "fileType": (x: jsonP.JSONValue) => cmnP.readEnum<FileType>(x),
      "prefixConfig": toPrefixConfig,
      "aggregationConfig": toAggregationConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type FileType =
| "CSV"
| "JSON"
| "PARQUET"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface PrefixConfig {
  prefixType?: PrefixType | null;
  prefixFormat?: PrefixFormat | null;
}
function fromPrefixConfig(input?: PrefixConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    prefixType: input["prefixType"],
    prefixFormat: input["prefixFormat"],
  }
}
function toPrefixConfig(root: jsonP.JSONValue): PrefixConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "prefixType": (x: jsonP.JSONValue) => cmnP.readEnum<PrefixType>(x),
      "prefixFormat": (x: jsonP.JSONValue) => cmnP.readEnum<PrefixFormat>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type PrefixType =
| "FILENAME"
| "PATH"
| "PATH_AND_FILENAME"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type PrefixFormat =
| "YEAR"
| "MONTH"
| "DAY"
| "HOUR"
| "MINUTE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface AggregationConfig {
  aggregationType?: AggregationType | null;
}
function fromAggregationConfig(input?: AggregationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    aggregationType: input["aggregationType"],
  }
}
function toAggregationConfig(root: jsonP.JSONValue): AggregationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "aggregationType": (x: jsonP.JSONValue) => cmnP.readEnum<AggregationType>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type AggregationType =
| "None"
| "SingleFile"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SalesforceDestinationProperties {
  object: string;
  idFieldNames?: string[] | null;
  errorHandlingConfig?: ErrorHandlingConfig | null;
  writeOperationType?: WriteOperationType | null;
}
function fromSalesforceDestinationProperties(input?: SalesforceDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    idFieldNames: input["idFieldNames"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
    writeOperationType: input["writeOperationType"],
  }
}
function toSalesforceDestinationProperties(root: jsonP.JSONValue): SalesforceDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {
      "idFieldNames": ["s"],
      "errorHandlingConfig": toErrorHandlingConfig,
      "writeOperationType": (x: jsonP.JSONValue) => cmnP.readEnum<WriteOperationType>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type WriteOperationType =
| "INSERT"
| "UPSERT"
| "UPDATE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SnowflakeDestinationProperties {
  object: string;
  intermediateBucketName: string;
  bucketPrefix?: string | null;
  errorHandlingConfig?: ErrorHandlingConfig | null;
}
function fromSnowflakeDestinationProperties(input?: SnowflakeDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    intermediateBucketName: input["intermediateBucketName"],
    bucketPrefix: input["bucketPrefix"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
  }
}
function toSnowflakeDestinationProperties(root: jsonP.JSONValue): SnowflakeDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
      "intermediateBucketName": "s",
    },
    optional: {
      "bucketPrefix": "s",
      "errorHandlingConfig": toErrorHandlingConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface EventBridgeDestinationProperties {
  object: string;
  errorHandlingConfig?: ErrorHandlingConfig | null;
}
function fromEventBridgeDestinationProperties(input?: EventBridgeDestinationProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    object: input["object"],
    errorHandlingConfig: fromErrorHandlingConfig(input["errorHandlingConfig"]),
  }
}
function toEventBridgeDestinationProperties(root: jsonP.JSONValue): EventBridgeDestinationProperties {
  return jsonP.readObj({
    required: {
      "object": "s",
    },
    optional: {
      "errorHandlingConfig": toErrorHandlingConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Task {
  sourceFields: string[];
  connectorOperator?: ConnectorOperator | null;
  destinationField?: string | null;
  taskType: TaskType;
  taskProperties?: { [key in OperatorPropertiesKeys]: string | null | undefined } | null;
}
function fromTask(input?: Task | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceFields: input["sourceFields"],
    connectorOperator: fromConnectorOperator(input["connectorOperator"]),
    destinationField: input["destinationField"],
    taskType: input["taskType"],
    taskProperties: input["taskProperties"],
  }
}
function toTask(root: jsonP.JSONValue): Task {
  return jsonP.readObj({
    required: {
      "sourceFields": ["s"],
      "taskType": (x: jsonP.JSONValue) => cmnP.readEnum<TaskType>(x),
    },
    optional: {
      "connectorOperator": toConnectorOperator,
      "destinationField": "s",
      "taskProperties": x => jsonP.readMap(x => cmnP.readEnumReq<OperatorPropertiesKeys>(x), String, x),
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ConnectorOperator {
  Amplitude?: AmplitudeConnectorOperator | null;
  Datadog?: DatadogConnectorOperator | null;
  Dynatrace?: DynatraceConnectorOperator | null;
  GoogleAnalytics?: GoogleAnalyticsConnectorOperator | null;
  InforNexus?: InforNexusConnectorOperator | null;
  Marketo?: MarketoConnectorOperator | null;
  S3?: S3ConnectorOperator | null;
  Salesforce?: SalesforceConnectorOperator | null;
  ServiceNow?: ServiceNowConnectorOperator | null;
  Singular?: SingularConnectorOperator | null;
  Slack?: SlackConnectorOperator | null;
  Trendmicro?: TrendmicroConnectorOperator | null;
  Veeva?: VeevaConnectorOperator | null;
  Zendesk?: ZendeskConnectorOperator | null;
}
function fromConnectorOperator(input?: ConnectorOperator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amplitude: input["Amplitude"],
    Datadog: input["Datadog"],
    Dynatrace: input["Dynatrace"],
    GoogleAnalytics: input["GoogleAnalytics"],
    InforNexus: input["InforNexus"],
    Marketo: input["Marketo"],
    S3: input["S3"],
    Salesforce: input["Salesforce"],
    ServiceNow: input["ServiceNow"],
    Singular: input["Singular"],
    Slack: input["Slack"],
    Trendmicro: input["Trendmicro"],
    Veeva: input["Veeva"],
    Zendesk: input["Zendesk"],
  }
}
function toConnectorOperator(root: jsonP.JSONValue): ConnectorOperator {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": (x: jsonP.JSONValue) => cmnP.readEnum<AmplitudeConnectorOperator>(x),
      "Datadog": (x: jsonP.JSONValue) => cmnP.readEnum<DatadogConnectorOperator>(x),
      "Dynatrace": (x: jsonP.JSONValue) => cmnP.readEnum<DynatraceConnectorOperator>(x),
      "GoogleAnalytics": (x: jsonP.JSONValue) => cmnP.readEnum<GoogleAnalyticsConnectorOperator>(x),
      "InforNexus": (x: jsonP.JSONValue) => cmnP.readEnum<InforNexusConnectorOperator>(x),
      "Marketo": (x: jsonP.JSONValue) => cmnP.readEnum<MarketoConnectorOperator>(x),
      "S3": (x: jsonP.JSONValue) => cmnP.readEnum<S3ConnectorOperator>(x),
      "Salesforce": (x: jsonP.JSONValue) => cmnP.readEnum<SalesforceConnectorOperator>(x),
      "ServiceNow": (x: jsonP.JSONValue) => cmnP.readEnum<ServiceNowConnectorOperator>(x),
      "Singular": (x: jsonP.JSONValue) => cmnP.readEnum<SingularConnectorOperator>(x),
      "Slack": (x: jsonP.JSONValue) => cmnP.readEnum<SlackConnectorOperator>(x),
      "Trendmicro": (x: jsonP.JSONValue) => cmnP.readEnum<TrendmicroConnectorOperator>(x),
      "Veeva": (x: jsonP.JSONValue) => cmnP.readEnum<VeevaConnectorOperator>(x),
      "Zendesk": (x: jsonP.JSONValue) => cmnP.readEnum<ZendeskConnectorOperator>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type AmplitudeConnectorOperator =
| "BETWEEN"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type DatadogConnectorOperator =
| "PROJECTION"
| "BETWEEN"
| "EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type DynatraceConnectorOperator =
| "PROJECTION"
| "BETWEEN"
| "EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type GoogleAnalyticsConnectorOperator =
| "PROJECTION"
| "BETWEEN"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type InforNexusConnectorOperator =
| "PROJECTION"
| "BETWEEN"
| "EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type MarketoConnectorOperator =
| "PROJECTION"
| "LESS_THAN"
| "GREATER_THAN"
| "BETWEEN"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type S3ConnectorOperator =
| "PROJECTION"
| "LESS_THAN"
| "GREATER_THAN"
| "BETWEEN"
| "LESS_THAN_OR_EQUAL_TO"
| "GREATER_THAN_OR_EQUAL_TO"
| "EQUAL_TO"
| "NOT_EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type SalesforceConnectorOperator =
| "PROJECTION"
| "LESS_THAN"
| "CONTAINS"
| "GREATER_THAN"
| "BETWEEN"
| "LESS_THAN_OR_EQUAL_TO"
| "GREATER_THAN_OR_EQUAL_TO"
| "EQUAL_TO"
| "NOT_EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ServiceNowConnectorOperator =
| "PROJECTION"
| "CONTAINS"
| "LESS_THAN"
| "GREATER_THAN"
| "BETWEEN"
| "LESS_THAN_OR_EQUAL_TO"
| "GREATER_THAN_OR_EQUAL_TO"
| "EQUAL_TO"
| "NOT_EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type SingularConnectorOperator =
| "PROJECTION"
| "EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type SlackConnectorOperator =
| "PROJECTION"
| "LESS_THAN"
| "GREATER_THAN"
| "BETWEEN"
| "LESS_THAN_OR_EQUAL_TO"
| "GREATER_THAN_OR_EQUAL_TO"
| "EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type TrendmicroConnectorOperator =
| "PROJECTION"
| "EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type VeevaConnectorOperator =
| "PROJECTION"
| "LESS_THAN"
| "GREATER_THAN"
| "CONTAINS"
| "BETWEEN"
| "LESS_THAN_OR_EQUAL_TO"
| "GREATER_THAN_OR_EQUAL_TO"
| "EQUAL_TO"
| "NOT_EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ZendeskConnectorOperator =
| "PROJECTION"
| "GREATER_THAN"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type TaskType =
| "Arithmetic"
| "Filter"
| "Map"
| "Mask"
| "Merge"
| "Truncate"
| "Validate"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type OperatorPropertiesKeys =
| "VALUE"
| "VALUES"
| "DATA_TYPE"
| "UPPER_BOUND"
| "LOWER_BOUND"
| "SOURCE_DATA_TYPE"
| "DESTINATION_DATA_TYPE"
| "VALIDATION_ACTION"
| "MASK_VALUE"
| "MASK_LENGTH"
| "TRUNCATE_LENGTH"
| "MATH_OPERATION_FIELDS_ORDER"
| "CONCAT_FORMAT"
| "SUBFIELD_CATEGORY_MAP"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type FlowStatus =
| "Active"
| "Deprecated"
| "Deleted"
| "Draft"
| "Errored"
| "Suspended"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConnectorEntityField {
  identifier: string;
  label?: string | null;
  supportedFieldTypeDetails?: SupportedFieldTypeDetails | null;
  description?: string | null;
  sourceProperties?: SourceFieldProperties | null;
  destinationProperties?: DestinationFieldProperties | null;
}
function toConnectorEntityField(root: jsonP.JSONValue): ConnectorEntityField {
  return jsonP.readObj({
    required: {
      "identifier": "s",
    },
    optional: {
      "label": "s",
      "supportedFieldTypeDetails": toSupportedFieldTypeDetails,
      "description": "s",
      "sourceProperties": toSourceFieldProperties,
      "destinationProperties": toDestinationFieldProperties,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SupportedFieldTypeDetails {
  v1: FieldTypeDetails;
}
function toSupportedFieldTypeDetails(root: jsonP.JSONValue): SupportedFieldTypeDetails {
  return jsonP.readObj({
    required: {
      "v1": toFieldTypeDetails,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FieldTypeDetails {
  fieldType: string;
  filterOperators: Operator[];
  supportedValues?: string[] | null;
}
function toFieldTypeDetails(root: jsonP.JSONValue): FieldTypeDetails {
  return jsonP.readObj({
    required: {
      "fieldType": "s",
      "filterOperators": [(x: jsonP.JSONValue) => cmnP.readEnum<Operator>(x)],
    },
    optional: {
      "supportedValues": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Operator =
| "PROJECTION"
| "LESS_THAN"
| "GREATER_THAN"
| "CONTAINS"
| "BETWEEN"
| "LESS_THAN_OR_EQUAL_TO"
| "GREATER_THAN_OR_EQUAL_TO"
| "EQUAL_TO"
| "NOT_EQUAL_TO"
| "ADDITION"
| "MULTIPLICATION"
| "DIVISION"
| "SUBTRACTION"
| "MASK_ALL"
| "MASK_FIRST_N"
| "MASK_LAST_N"
| "VALIDATE_NON_NULL"
| "VALIDATE_NON_ZERO"
| "VALIDATE_NON_NEGATIVE"
| "VALIDATE_NUMERIC"
| "NO_OP"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface SourceFieldProperties {
  isRetrievable?: boolean | null;
  isQueryable?: boolean | null;
}
function toSourceFieldProperties(root: jsonP.JSONValue): SourceFieldProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "isRetrievable": "b",
      "isQueryable": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DestinationFieldProperties {
  isCreatable?: boolean | null;
  isNullable?: boolean | null;
  isUpsertable?: boolean | null;
  isUpdatable?: boolean | null;
  supportedWriteOperations?: WriteOperationType[] | null;
}
function toDestinationFieldProperties(root: jsonP.JSONValue): DestinationFieldProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "isCreatable": "b",
      "isNullable": "b",
      "isUpsertable": "b",
      "isUpdatable": "b",
      "supportedWriteOperations": [(x: jsonP.JSONValue) => cmnP.readEnum<WriteOperationType>(x)],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConnectorProfile {
  connectorProfileArn?: string | null;
  connectorProfileName?: string | null;
  connectorType?: ConnectorType | null;
  connectionMode?: ConnectionMode | null;
  credentialsArn?: string | null;
  connectorProfileProperties?: ConnectorProfileProperties | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
}
function toConnectorProfile(root: jsonP.JSONValue): ConnectorProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "connectorProfileArn": "s",
      "connectorProfileName": "s",
      "connectorType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectorType>(x),
      "connectionMode": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionMode>(x),
      "credentialsArn": "s",
      "connectorProfileProperties": toConnectorProfileProperties,
      "createdAt": "d",
      "lastUpdatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConnectorConfiguration {
  canUseAsSource?: boolean | null;
  canUseAsDestination?: boolean | null;
  supportedDestinationConnectors?: ConnectorType[] | null;
  supportedSchedulingFrequencies?: ScheduleFrequencyType[] | null;
  isPrivateLinkEnabled?: boolean | null;
  isPrivateLinkEndpointUrlRequired?: boolean | null;
  supportedTriggerTypes?: TriggerType[] | null;
  connectorMetadata?: ConnectorMetadata | null;
}
function toConnectorConfiguration(root: jsonP.JSONValue): ConnectorConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "canUseAsSource": "b",
      "canUseAsDestination": "b",
      "supportedDestinationConnectors": [(x: jsonP.JSONValue) => cmnP.readEnum<ConnectorType>(x)],
      "supportedSchedulingFrequencies": [(x: jsonP.JSONValue) => cmnP.readEnum<ScheduleFrequencyType>(x)],
      "isPrivateLinkEnabled": "b",
      "isPrivateLinkEndpointUrlRequired": "b",
      "supportedTriggerTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<TriggerType>(x)],
      "connectorMetadata": toConnectorMetadata,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ScheduleFrequencyType =
| "BYMINUTE"
| "HOURLY"
| "DAILY"
| "WEEKLY"
| "MONTHLY"
| "ONCE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConnectorMetadata {
  Amplitude?: AmplitudeMetadata | null;
  Datadog?: DatadogMetadata | null;
  Dynatrace?: DynatraceMetadata | null;
  GoogleAnalytics?: GoogleAnalyticsMetadata | null;
  InforNexus?: InforNexusMetadata | null;
  Marketo?: MarketoMetadata | null;
  Redshift?: RedshiftMetadata | null;
  S3?: S3Metadata | null;
  Salesforce?: SalesforceMetadata | null;
  ServiceNow?: ServiceNowMetadata | null;
  Singular?: SingularMetadata | null;
  Slack?: SlackMetadata | null;
  Snowflake?: SnowflakeMetadata | null;
  Trendmicro?: TrendmicroMetadata | null;
  Veeva?: VeevaMetadata | null;
  Zendesk?: ZendeskMetadata | null;
  EventBridge?: EventBridgeMetadata | null;
}
function toConnectorMetadata(root: jsonP.JSONValue): ConnectorMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Amplitude": toAmplitudeMetadata,
      "Datadog": toDatadogMetadata,
      "Dynatrace": toDynatraceMetadata,
      "GoogleAnalytics": toGoogleAnalyticsMetadata,
      "InforNexus": toInforNexusMetadata,
      "Marketo": toMarketoMetadata,
      "Redshift": toRedshiftMetadata,
      "S3": toS3Metadata,
      "Salesforce": toSalesforceMetadata,
      "ServiceNow": toServiceNowMetadata,
      "Singular": toSingularMetadata,
      "Slack": toSlackMetadata,
      "Snowflake": toSnowflakeMetadata,
      "Trendmicro": toTrendmicroMetadata,
      "Veeva": toVeevaMetadata,
      "Zendesk": toZendeskMetadata,
      "EventBridge": toEventBridgeMetadata,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AmplitudeMetadata {
}
function toAmplitudeMetadata(root: jsonP.JSONValue): AmplitudeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DatadogMetadata {
}
function toDatadogMetadata(root: jsonP.JSONValue): DatadogMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DynatraceMetadata {
}
function toDynatraceMetadata(root: jsonP.JSONValue): DynatraceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GoogleAnalyticsMetadata {
  oAuthScopes?: string[] | null;
}
function toGoogleAnalyticsMetadata(root: jsonP.JSONValue): GoogleAnalyticsMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InforNexusMetadata {
}
function toInforNexusMetadata(root: jsonP.JSONValue): InforNexusMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MarketoMetadata {
}
function toMarketoMetadata(root: jsonP.JSONValue): MarketoMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RedshiftMetadata {
}
function toRedshiftMetadata(root: jsonP.JSONValue): RedshiftMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface S3Metadata {
}
function toS3Metadata(root: jsonP.JSONValue): S3Metadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SalesforceMetadata {
  oAuthScopes?: string[] | null;
}
function toSalesforceMetadata(root: jsonP.JSONValue): SalesforceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ServiceNowMetadata {
}
function toServiceNowMetadata(root: jsonP.JSONValue): ServiceNowMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SingularMetadata {
}
function toSingularMetadata(root: jsonP.JSONValue): SingularMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SlackMetadata {
  oAuthScopes?: string[] | null;
}
function toSlackMetadata(root: jsonP.JSONValue): SlackMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SnowflakeMetadata {
  supportedRegions?: string[] | null;
}
function toSnowflakeMetadata(root: jsonP.JSONValue): SnowflakeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "supportedRegions": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrendmicroMetadata {
}
function toTrendmicroMetadata(root: jsonP.JSONValue): TrendmicroMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VeevaMetadata {
}
function toVeevaMetadata(root: jsonP.JSONValue): VeevaMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ZendeskMetadata {
  oAuthScopes?: string[] | null;
}
function toZendeskMetadata(root: jsonP.JSONValue): ZendeskMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "oAuthScopes": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventBridgeMetadata {
}
function toEventBridgeMetadata(root: jsonP.JSONValue): EventBridgeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ExecutionDetails {
  mostRecentExecutionMessage?: string | null;
  mostRecentExecutionTime?: Date | number | null;
  mostRecentExecutionStatus?: ExecutionStatus | null;
}
function toExecutionDetails(root: jsonP.JSONValue): ExecutionDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "mostRecentExecutionMessage": "s",
      "mostRecentExecutionTime": "d",
      "mostRecentExecutionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ExecutionStatus =
| "InProgress"
| "Successful"
| "Error"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ExecutionRecord {
  executionId?: string | null;
  executionStatus?: ExecutionStatus | null;
  executionResult?: ExecutionResult | null;
  startedAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
}
function toExecutionRecord(root: jsonP.JSONValue): ExecutionRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "executionId": "s",
      "executionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
      "executionResult": toExecutionResult,
      "startedAt": "d",
      "lastUpdatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionResult {
  errorInfo?: ErrorInfo | null;
  bytesProcessed?: number | null;
  bytesWritten?: number | null;
  recordsProcessed?: number | null;
}
function toExecutionResult(root: jsonP.JSONValue): ExecutionResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "errorInfo": toErrorInfo,
      "bytesProcessed": "n",
      "bytesWritten": "n",
      "recordsProcessed": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ErrorInfo {
  putFailuresCount?: number | null;
  executionMessage?: string | null;
}
function toErrorInfo(root: jsonP.JSONValue): ErrorInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "putFailuresCount": "n",
      "executionMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConnectorEntity {
  name: string;
  label?: string | null;
  hasNestedEntities?: boolean | null;
}
function toConnectorEntity(root: jsonP.JSONValue): ConnectorEntity {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {
      "label": "s",
      "hasNestedEntities": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FlowDefinition {
  flowArn?: string | null;
  description?: string | null;
  flowName?: string | null;
  flowStatus?: FlowStatus | null;
  sourceConnectorType?: ConnectorType | null;
  destinationConnectorType?: ConnectorType | null;
  triggerType?: TriggerType | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  createdBy?: string | null;
  lastUpdatedBy?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  lastRunExecutionDetails?: ExecutionDetails | null;
}
function toFlowDefinition(root: jsonP.JSONValue): FlowDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "flowArn": "s",
      "description": "s",
      "flowName": "s",
      "flowStatus": (x: jsonP.JSONValue) => cmnP.readEnum<FlowStatus>(x),
      "sourceConnectorType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectorType>(x),
      "destinationConnectorType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectorType>(x),
      "triggerType": (x: jsonP.JSONValue) => cmnP.readEnum<TriggerType>(x),
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "createdBy": "s",
      "lastUpdatedBy": "s",
      "tags": x => jsonP.readMap(String, String, x),
      "lastRunExecutionDetails": toExecutionDetails,
    },
  }, root);
}
