// Autogenerated API client for: Amazon Lightsail

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Lightsail {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Lightsail.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-11-28",
    "endpointPrefix": "lightsail",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Lightsail",
    "serviceId": "Lightsail",
    "signatureVersion": "v4",
    "targetPrefix": "Lightsail_20161128",
    "uid": "lightsail-2016-11-28"
  };

  async allocateStaticIp(
    {abortSignal, ...params}: RequestConfig & AllocateStaticIpRequest,
  ): Promise<AllocateStaticIpResult> {
    const body: jsonP.JSONObject = params ? {
      staticIpName: params["staticIpName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AllocateStaticIp",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async attachCertificateToDistribution(
    {abortSignal, ...params}: RequestConfig & AttachCertificateToDistributionRequest,
  ): Promise<AttachCertificateToDistributionResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
      certificateName: params["certificateName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachCertificateToDistribution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async attachDisk(
    {abortSignal, ...params}: RequestConfig & AttachDiskRequest,
  ): Promise<AttachDiskResult> {
    const body: jsonP.JSONObject = params ? {
      diskName: params["diskName"],
      instanceName: params["instanceName"],
      diskPath: params["diskPath"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachDisk",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async attachInstancesToLoadBalancer(
    {abortSignal, ...params}: RequestConfig & AttachInstancesToLoadBalancerRequest,
  ): Promise<AttachInstancesToLoadBalancerResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      instanceNames: params["instanceNames"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachInstancesToLoadBalancer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async attachLoadBalancerTlsCertificate(
    {abortSignal, ...params}: RequestConfig & AttachLoadBalancerTlsCertificateRequest,
  ): Promise<AttachLoadBalancerTlsCertificateResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      certificateName: params["certificateName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachLoadBalancerTlsCertificate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async attachStaticIp(
    {abortSignal, ...params}: RequestConfig & AttachStaticIpRequest,
  ): Promise<AttachStaticIpResult> {
    const body: jsonP.JSONObject = params ? {
      staticIpName: params["staticIpName"],
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachStaticIp",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async closeInstancePublicPorts(
    {abortSignal, ...params}: RequestConfig & CloseInstancePublicPortsRequest,
  ): Promise<CloseInstancePublicPortsResult> {
    const body: jsonP.JSONObject = params ? {
      portInfo: fromPortInfo(params["portInfo"]),
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CloseInstancePublicPorts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async copySnapshot(
    {abortSignal, ...params}: RequestConfig & CopySnapshotRequest,
  ): Promise<CopySnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      sourceSnapshotName: params["sourceSnapshotName"],
      sourceResourceName: params["sourceResourceName"],
      restoreDate: params["restoreDate"],
      useLatestRestorableAutoSnapshot: params["useLatestRestorableAutoSnapshot"],
      targetSnapshotName: params["targetSnapshotName"],
      sourceRegion: params["sourceRegion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopySnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createCertificate(
    {abortSignal, ...params}: RequestConfig & CreateCertificateRequest,
  ): Promise<CreateCertificateResult> {
    const body: jsonP.JSONObject = params ? {
      certificateName: params["certificateName"],
      domainName: params["domainName"],
      subjectAlternativeNames: params["subjectAlternativeNames"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCertificate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "certificate": toCertificateSummary,
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createCloudFormationStack(
    {abortSignal, ...params}: RequestConfig & CreateCloudFormationStackRequest,
  ): Promise<CreateCloudFormationStackResult> {
    const body: jsonP.JSONObject = params ? {
      instances: params["instances"]?.map(x => fromInstanceEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCloudFormationStack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createContactMethod(
    {abortSignal, ...params}: RequestConfig & CreateContactMethodRequest,
  ): Promise<CreateContactMethodResult> {
    const body: jsonP.JSONObject = params ? {
      protocol: params["protocol"],
      contactEndpoint: params["contactEndpoint"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContactMethod",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createDisk(
    {abortSignal, ...params}: RequestConfig & CreateDiskRequest,
  ): Promise<CreateDiskResult> {
    const body: jsonP.JSONObject = params ? {
      diskName: params["diskName"],
      availabilityZone: params["availabilityZone"],
      sizeInGb: params["sizeInGb"],
      tags: params["tags"]?.map(x => fromTag(x)),
      addOns: params["addOns"]?.map(x => fromAddOnRequest(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDisk",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createDiskFromSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateDiskFromSnapshotRequest,
  ): Promise<CreateDiskFromSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      diskName: params["diskName"],
      diskSnapshotName: params["diskSnapshotName"],
      availabilityZone: params["availabilityZone"],
      sizeInGb: params["sizeInGb"],
      tags: params["tags"]?.map(x => fromTag(x)),
      addOns: params["addOns"]?.map(x => fromAddOnRequest(x)),
      sourceDiskName: params["sourceDiskName"],
      restoreDate: params["restoreDate"],
      useLatestRestorableAutoSnapshot: params["useLatestRestorableAutoSnapshot"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDiskFromSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createDiskSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateDiskSnapshotRequest,
  ): Promise<CreateDiskSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      diskName: params["diskName"],
      diskSnapshotName: params["diskSnapshotName"],
      instanceName: params["instanceName"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDiskSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createDistribution(
    {abortSignal, ...params}: RequestConfig & CreateDistributionRequest,
  ): Promise<CreateDistributionResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
      origin: fromInputOrigin(params["origin"]),
      defaultCacheBehavior: fromCacheBehavior(params["defaultCacheBehavior"]),
      cacheBehaviorSettings: fromCacheSettings(params["cacheBehaviorSettings"]),
      cacheBehaviors: params["cacheBehaviors"]?.map(x => fromCacheBehaviorPerPath(x)),
      bundleId: params["bundleId"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDistribution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "distribution": toLightsailDistribution,
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async createDomain(
    {abortSignal, ...params}: RequestConfig & CreateDomainRequest,
  ): Promise<CreateDomainResult> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async createDomainEntry(
    {abortSignal, ...params}: RequestConfig & CreateDomainEntryRequest,
  ): Promise<CreateDomainEntryResult> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
      domainEntry: fromDomainEntry(params["domainEntry"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomainEntry",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async createInstanceSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateInstanceSnapshotRequest,
  ): Promise<CreateInstanceSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      instanceSnapshotName: params["instanceSnapshotName"],
      instanceName: params["instanceName"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstanceSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createInstances(
    {abortSignal, ...params}: RequestConfig & CreateInstancesRequest,
  ): Promise<CreateInstancesResult> {
    const body: jsonP.JSONObject = params ? {
      instanceNames: params["instanceNames"],
      availabilityZone: params["availabilityZone"],
      customImageName: params["customImageName"],
      blueprintId: params["blueprintId"],
      bundleId: params["bundleId"],
      userData: params["userData"],
      keyPairName: params["keyPairName"],
      tags: params["tags"]?.map(x => fromTag(x)),
      addOns: params["addOns"]?.map(x => fromAddOnRequest(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstances",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createInstancesFromSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateInstancesFromSnapshotRequest,
  ): Promise<CreateInstancesFromSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      instanceNames: params["instanceNames"],
      attachedDiskMapping: jsonP.serializeMap(params["attachedDiskMapping"], x => x?.map(fromDiskMap)),
      availabilityZone: params["availabilityZone"],
      instanceSnapshotName: params["instanceSnapshotName"],
      bundleId: params["bundleId"],
      userData: params["userData"],
      keyPairName: params["keyPairName"],
      tags: params["tags"]?.map(x => fromTag(x)),
      addOns: params["addOns"]?.map(x => fromAddOnRequest(x)),
      sourceInstanceName: params["sourceInstanceName"],
      restoreDate: params["restoreDate"],
      useLatestRestorableAutoSnapshot: params["useLatestRestorableAutoSnapshot"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstancesFromSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createKeyPair(
    {abortSignal, ...params}: RequestConfig & CreateKeyPairRequest,
  ): Promise<CreateKeyPairResult> {
    const body: jsonP.JSONObject = params ? {
      keyPairName: params["keyPairName"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateKeyPair",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "keyPair": toKeyPair,
        "publicKeyBase64": "s",
        "privateKeyBase64": "s",
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async createLoadBalancer(
    {abortSignal, ...params}: RequestConfig & CreateLoadBalancerRequest,
  ): Promise<CreateLoadBalancerResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      instancePort: params["instancePort"],
      healthCheckPath: params["healthCheckPath"],
      certificateName: params["certificateName"],
      certificateDomainName: params["certificateDomainName"],
      certificateAlternativeNames: params["certificateAlternativeNames"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLoadBalancer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createLoadBalancerTlsCertificate(
    {abortSignal, ...params}: RequestConfig & CreateLoadBalancerTlsCertificateRequest,
  ): Promise<CreateLoadBalancerTlsCertificateResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      certificateName: params["certificateName"],
      certificateDomainName: params["certificateDomainName"],
      certificateAlternativeNames: params["certificateAlternativeNames"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLoadBalancerTlsCertificate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createRelationalDatabase(
    {abortSignal, ...params}: RequestConfig & CreateRelationalDatabaseRequest,
  ): Promise<CreateRelationalDatabaseResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      availabilityZone: params["availabilityZone"],
      relationalDatabaseBlueprintId: params["relationalDatabaseBlueprintId"],
      relationalDatabaseBundleId: params["relationalDatabaseBundleId"],
      masterDatabaseName: params["masterDatabaseName"],
      masterUsername: params["masterUsername"],
      masterUserPassword: params["masterUserPassword"],
      preferredBackupWindow: params["preferredBackupWindow"],
      preferredMaintenanceWindow: params["preferredMaintenanceWindow"],
      publiclyAccessible: params["publiclyAccessible"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRelationalDatabase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createRelationalDatabaseFromSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateRelationalDatabaseFromSnapshotRequest,
  ): Promise<CreateRelationalDatabaseFromSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      availabilityZone: params["availabilityZone"],
      publiclyAccessible: params["publiclyAccessible"],
      relationalDatabaseSnapshotName: params["relationalDatabaseSnapshotName"],
      relationalDatabaseBundleId: params["relationalDatabaseBundleId"],
      sourceRelationalDatabaseName: params["sourceRelationalDatabaseName"],
      restoreTime: jsonP.serializeDate_unixTimestamp(params["restoreTime"]),
      useLatestRestorableTime: params["useLatestRestorableTime"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRelationalDatabaseFromSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async createRelationalDatabaseSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateRelationalDatabaseSnapshotRequest,
  ): Promise<CreateRelationalDatabaseSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      relationalDatabaseSnapshotName: params["relationalDatabaseSnapshotName"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRelationalDatabaseSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteAlarm(
    {abortSignal, ...params}: RequestConfig & DeleteAlarmRequest,
  ): Promise<DeleteAlarmResult> {
    const body: jsonP.JSONObject = params ? {
      alarmName: params["alarmName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAlarm",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteAutoSnapshot(
    {abortSignal, ...params}: RequestConfig & DeleteAutoSnapshotRequest,
  ): Promise<DeleteAutoSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      resourceName: params["resourceName"],
      date: params["date"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAutoSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteCertificate(
    {abortSignal, ...params}: RequestConfig & DeleteCertificateRequest,
  ): Promise<DeleteCertificateResult> {
    const body: jsonP.JSONObject = params ? {
      certificateName: params["certificateName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCertificate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteContactMethod(
    {abortSignal, ...params}: RequestConfig & DeleteContactMethodRequest,
  ): Promise<DeleteContactMethodResult> {
    const body: jsonP.JSONObject = params ? {
      protocol: params["protocol"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteContactMethod",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteDisk(
    {abortSignal, ...params}: RequestConfig & DeleteDiskRequest,
  ): Promise<DeleteDiskResult> {
    const body: jsonP.JSONObject = params ? {
      diskName: params["diskName"],
      forceDeleteAddOns: params["forceDeleteAddOns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDisk",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteDiskSnapshot(
    {abortSignal, ...params}: RequestConfig & DeleteDiskSnapshotRequest,
  ): Promise<DeleteDiskSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      diskSnapshotName: params["diskSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDiskSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteDistribution(
    {abortSignal, ...params}: RequestConfig & DeleteDistributionRequest = {},
  ): Promise<DeleteDistributionResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDistribution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async deleteDomain(
    {abortSignal, ...params}: RequestConfig & DeleteDomainRequest,
  ): Promise<DeleteDomainResult> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async deleteDomainEntry(
    {abortSignal, ...params}: RequestConfig & DeleteDomainEntryRequest,
  ): Promise<DeleteDomainEntryResult> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
      domainEntry: fromDomainEntry(params["domainEntry"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDomainEntry",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async deleteInstance(
    {abortSignal, ...params}: RequestConfig & DeleteInstanceRequest,
  ): Promise<DeleteInstanceResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
      forceDeleteAddOns: params["forceDeleteAddOns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteInstanceSnapshot(
    {abortSignal, ...params}: RequestConfig & DeleteInstanceSnapshotRequest,
  ): Promise<DeleteInstanceSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      instanceSnapshotName: params["instanceSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInstanceSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteKeyPair(
    {abortSignal, ...params}: RequestConfig & DeleteKeyPairRequest,
  ): Promise<DeleteKeyPairResult> {
    const body: jsonP.JSONObject = params ? {
      keyPairName: params["keyPairName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteKeyPair",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async deleteKnownHostKeys(
    {abortSignal, ...params}: RequestConfig & DeleteKnownHostKeysRequest,
  ): Promise<DeleteKnownHostKeysResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteKnownHostKeys",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteLoadBalancer(
    {abortSignal, ...params}: RequestConfig & DeleteLoadBalancerRequest,
  ): Promise<DeleteLoadBalancerResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLoadBalancer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteLoadBalancerTlsCertificate(
    {abortSignal, ...params}: RequestConfig & DeleteLoadBalancerTlsCertificateRequest,
  ): Promise<DeleteLoadBalancerTlsCertificateResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      certificateName: params["certificateName"],
      force: params["force"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLoadBalancerTlsCertificate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteRelationalDatabase(
    {abortSignal, ...params}: RequestConfig & DeleteRelationalDatabaseRequest,
  ): Promise<DeleteRelationalDatabaseResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      skipFinalSnapshot: params["skipFinalSnapshot"],
      finalRelationalDatabaseSnapshotName: params["finalRelationalDatabaseSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRelationalDatabase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async deleteRelationalDatabaseSnapshot(
    {abortSignal, ...params}: RequestConfig & DeleteRelationalDatabaseSnapshotRequest,
  ): Promise<DeleteRelationalDatabaseSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseSnapshotName: params["relationalDatabaseSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRelationalDatabaseSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async detachCertificateFromDistribution(
    {abortSignal, ...params}: RequestConfig & DetachCertificateFromDistributionRequest,
  ): Promise<DetachCertificateFromDistributionResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachCertificateFromDistribution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async detachDisk(
    {abortSignal, ...params}: RequestConfig & DetachDiskRequest,
  ): Promise<DetachDiskResult> {
    const body: jsonP.JSONObject = params ? {
      diskName: params["diskName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachDisk",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async detachInstancesFromLoadBalancer(
    {abortSignal, ...params}: RequestConfig & DetachInstancesFromLoadBalancerRequest,
  ): Promise<DetachInstancesFromLoadBalancerResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      instanceNames: params["instanceNames"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachInstancesFromLoadBalancer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async detachStaticIp(
    {abortSignal, ...params}: RequestConfig & DetachStaticIpRequest,
  ): Promise<DetachStaticIpResult> {
    const body: jsonP.JSONObject = params ? {
      staticIpName: params["staticIpName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachStaticIp",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async disableAddOn(
    {abortSignal, ...params}: RequestConfig & DisableAddOnRequest,
  ): Promise<DisableAddOnResult> {
    const body: jsonP.JSONObject = params ? {
      addOnType: params["addOnType"],
      resourceName: params["resourceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableAddOn",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async downloadDefaultKeyPair(
    {abortSignal, ...params}: RequestConfig & DownloadDefaultKeyPairRequest = {},
  ): Promise<DownloadDefaultKeyPairResult> {
    const body: jsonP.JSONObject = params ? {
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DownloadDefaultKeyPair",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "publicKeyBase64": "s",
        "privateKeyBase64": "s",
      },
    }, await resp.json());
  }

  async enableAddOn(
    {abortSignal, ...params}: RequestConfig & EnableAddOnRequest,
  ): Promise<EnableAddOnResult> {
    const body: jsonP.JSONObject = params ? {
      resourceName: params["resourceName"],
      addOnRequest: fromAddOnRequest(params["addOnRequest"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableAddOn",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async exportSnapshot(
    {abortSignal, ...params}: RequestConfig & ExportSnapshotRequest,
  ): Promise<ExportSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      sourceSnapshotName: params["sourceSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExportSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async getActiveNames(
    {abortSignal, ...params}: RequestConfig & GetActiveNamesRequest = {},
  ): Promise<GetActiveNamesResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetActiveNames",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "activeNames": ["s"],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getAlarms(
    {abortSignal, ...params}: RequestConfig & GetAlarmsRequest = {},
  ): Promise<GetAlarmsResult> {
    const body: jsonP.JSONObject = params ? {
      alarmName: params["alarmName"],
      pageToken: params["pageToken"],
      monitoredResourceName: params["monitoredResourceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAlarms",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "alarms": [toAlarm],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getAutoSnapshots(
    {abortSignal, ...params}: RequestConfig & GetAutoSnapshotsRequest,
  ): Promise<GetAutoSnapshotsResult> {
    const body: jsonP.JSONObject = params ? {
      resourceName: params["resourceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAutoSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceName": "s",
        "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
        "autoSnapshots": [toAutoSnapshotDetails],
      },
    }, await resp.json());
  }

  async getBlueprints(
    {abortSignal, ...params}: RequestConfig & GetBlueprintsRequest = {},
  ): Promise<GetBlueprintsResult> {
    const body: jsonP.JSONObject = params ? {
      includeInactive: params["includeInactive"],
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBlueprints",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "blueprints": [toBlueprint],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getBundles(
    {abortSignal, ...params}: RequestConfig & GetBundlesRequest = {},
  ): Promise<GetBundlesResult> {
    const body: jsonP.JSONObject = params ? {
      includeInactive: params["includeInactive"],
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBundles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "bundles": [toBundle],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getCertificates(
    {abortSignal, ...params}: RequestConfig & GetCertificatesRequest = {},
  ): Promise<GetCertificatesResult> {
    const body: jsonP.JSONObject = params ? {
      certificateStatuses: params["certificateStatuses"],
      includeCertificateDetails: params["includeCertificateDetails"],
      certificateName: params["certificateName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCertificates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "certificates": [toCertificateSummary],
      },
    }, await resp.json());
  }

  async getCloudFormationStackRecords(
    {abortSignal, ...params}: RequestConfig & GetCloudFormationStackRecordsRequest = {},
  ): Promise<GetCloudFormationStackRecordsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCloudFormationStackRecords",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "cloudFormationStackRecords": [toCloudFormationStackRecord],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getContactMethods(
    {abortSignal, ...params}: RequestConfig & GetContactMethodsRequest = {},
  ): Promise<GetContactMethodsResult> {
    const body: jsonP.JSONObject = params ? {
      protocols: params["protocols"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetContactMethods",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "contactMethods": [toContactMethod],
      },
    }, await resp.json());
  }

  async getDisk(
    {abortSignal, ...params}: RequestConfig & GetDiskRequest,
  ): Promise<GetDiskResult> {
    const body: jsonP.JSONObject = params ? {
      diskName: params["diskName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDisk",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "disk": toDisk,
      },
    }, await resp.json());
  }

  async getDiskSnapshot(
    {abortSignal, ...params}: RequestConfig & GetDiskSnapshotRequest,
  ): Promise<GetDiskSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      diskSnapshotName: params["diskSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDiskSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "diskSnapshot": toDiskSnapshot,
      },
    }, await resp.json());
  }

  async getDiskSnapshots(
    {abortSignal, ...params}: RequestConfig & GetDiskSnapshotsRequest = {},
  ): Promise<GetDiskSnapshotsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDiskSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "diskSnapshots": [toDiskSnapshot],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getDisks(
    {abortSignal, ...params}: RequestConfig & GetDisksRequest = {},
  ): Promise<GetDisksResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDisks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "disks": [toDisk],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getDistributionBundles(
    {abortSignal, ...params}: RequestConfig & GetDistributionBundlesRequest = {},
  ): Promise<GetDistributionBundlesResult> {
    const body: jsonP.JSONObject = params ? {
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDistributionBundles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "bundles": [toDistributionBundle],
      },
    }, await resp.json());
  }

  async getDistributionLatestCacheReset(
    {abortSignal, ...params}: RequestConfig & GetDistributionLatestCacheResetRequest = {},
  ): Promise<GetDistributionLatestCacheResetResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDistributionLatestCacheReset",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": "s",
        "createTime": "d",
      },
    }, await resp.json());
  }

  async getDistributionMetricData(
    {abortSignal, ...params}: RequestConfig & GetDistributionMetricDataRequest,
  ): Promise<GetDistributionMetricDataResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
      metricName: params["metricName"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      period: params["period"],
      unit: params["unit"],
      statistics: params["statistics"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDistributionMetricData",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "metricName": (x: jsonP.JSONValue) => cmnP.readEnum<DistributionMetricName>(x),
        "metricData": [toMetricDatapoint],
      },
    }, await resp.json());
  }

  async getDistributions(
    {abortSignal, ...params}: RequestConfig & GetDistributionsRequest = {},
  ): Promise<GetDistributionsResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDistributions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "distributions": [toLightsailDistribution],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getDomain(
    {abortSignal, ...params}: RequestConfig & GetDomainRequest,
  ): Promise<GetDomainResult> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "domain": toDomain,
      },
    }, await resp.json());
  }

  async getDomains(
    {abortSignal, ...params}: RequestConfig & GetDomainsRequest = {},
  ): Promise<GetDomainsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDomains",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "domains": [toDomain],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getExportSnapshotRecords(
    {abortSignal, ...params}: RequestConfig & GetExportSnapshotRecordsRequest = {},
  ): Promise<GetExportSnapshotRecordsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetExportSnapshotRecords",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "exportSnapshotRecords": [toExportSnapshotRecord],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getInstance(
    {abortSignal, ...params}: RequestConfig & GetInstanceRequest,
  ): Promise<GetInstanceResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instance": toInstance,
      },
    }, await resp.json());
  }

  async getInstanceAccessDetails(
    {abortSignal, ...params}: RequestConfig & GetInstanceAccessDetailsRequest,
  ): Promise<GetInstanceAccessDetailsResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
      protocol: params["protocol"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstanceAccessDetails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "accessDetails": toInstanceAccessDetails,
      },
    }, await resp.json());
  }

  async getInstanceMetricData(
    {abortSignal, ...params}: RequestConfig & GetInstanceMetricDataRequest,
  ): Promise<GetInstanceMetricDataResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
      metricName: params["metricName"],
      period: params["period"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      unit: params["unit"],
      statistics: params["statistics"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstanceMetricData",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "metricName": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceMetricName>(x),
        "metricData": [toMetricDatapoint],
      },
    }, await resp.json());
  }

  async getInstancePortStates(
    {abortSignal, ...params}: RequestConfig & GetInstancePortStatesRequest,
  ): Promise<GetInstancePortStatesResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstancePortStates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "portStates": [toInstancePortState],
      },
    }, await resp.json());
  }

  async getInstanceSnapshot(
    {abortSignal, ...params}: RequestConfig & GetInstanceSnapshotRequest,
  ): Promise<GetInstanceSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      instanceSnapshotName: params["instanceSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstanceSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceSnapshot": toInstanceSnapshot,
      },
    }, await resp.json());
  }

  async getInstanceSnapshots(
    {abortSignal, ...params}: RequestConfig & GetInstanceSnapshotsRequest = {},
  ): Promise<GetInstanceSnapshotsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstanceSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceSnapshots": [toInstanceSnapshot],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getInstanceState(
    {abortSignal, ...params}: RequestConfig & GetInstanceStateRequest,
  ): Promise<GetInstanceStateResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstanceState",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "state": toInstanceState,
      },
    }, await resp.json());
  }

  async getInstances(
    {abortSignal, ...params}: RequestConfig & GetInstancesRequest = {},
  ): Promise<GetInstancesResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstances",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instances": [toInstance],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getKeyPair(
    {abortSignal, ...params}: RequestConfig & GetKeyPairRequest,
  ): Promise<GetKeyPairResult> {
    const body: jsonP.JSONObject = params ? {
      keyPairName: params["keyPairName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetKeyPair",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "keyPair": toKeyPair,
      },
    }, await resp.json());
  }

  async getKeyPairs(
    {abortSignal, ...params}: RequestConfig & GetKeyPairsRequest = {},
  ): Promise<GetKeyPairsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetKeyPairs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "keyPairs": [toKeyPair],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getLoadBalancer(
    {abortSignal, ...params}: RequestConfig & GetLoadBalancerRequest,
  ): Promise<GetLoadBalancerResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLoadBalancer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "loadBalancer": toLoadBalancer,
      },
    }, await resp.json());
  }

  async getLoadBalancerMetricData(
    {abortSignal, ...params}: RequestConfig & GetLoadBalancerMetricDataRequest,
  ): Promise<GetLoadBalancerMetricDataResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      metricName: params["metricName"],
      period: params["period"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      unit: params["unit"],
      statistics: params["statistics"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLoadBalancerMetricData",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "metricName": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerMetricName>(x),
        "metricData": [toMetricDatapoint],
      },
    }, await resp.json());
  }

  async getLoadBalancerTlsCertificates(
    {abortSignal, ...params}: RequestConfig & GetLoadBalancerTlsCertificatesRequest,
  ): Promise<GetLoadBalancerTlsCertificatesResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLoadBalancerTlsCertificates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tlsCertificates": [toLoadBalancerTlsCertificate],
      },
    }, await resp.json());
  }

  async getLoadBalancers(
    {abortSignal, ...params}: RequestConfig & GetLoadBalancersRequest = {},
  ): Promise<GetLoadBalancersResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLoadBalancers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "loadBalancers": [toLoadBalancer],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getOperation(
    {abortSignal, ...params}: RequestConfig & GetOperationRequest,
  ): Promise<GetOperationResult> {
    const body: jsonP.JSONObject = params ? {
      operationId: params["operationId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOperation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async getOperations(
    {abortSignal, ...params}: RequestConfig & GetOperationsRequest = {},
  ): Promise<GetOperationsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOperations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getOperationsForResource(
    {abortSignal, ...params}: RequestConfig & GetOperationsForResourceRequest,
  ): Promise<GetOperationsForResourceResult> {
    const body: jsonP.JSONObject = params ? {
      resourceName: params["resourceName"],
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOperationsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
        "nextPageCount": "s",
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getRegions(
    {abortSignal, ...params}: RequestConfig & GetRegionsRequest = {},
  ): Promise<GetRegionsResult> {
    const body: jsonP.JSONObject = params ? {
      includeAvailabilityZones: params["includeAvailabilityZones"],
      includeRelationalDatabaseAvailabilityZones: params["includeRelationalDatabaseAvailabilityZones"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRegions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "regions": [toRegion],
      },
    }, await resp.json());
  }

  async getRelationalDatabase(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseRequest,
  ): Promise<GetRelationalDatabaseResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "relationalDatabase": toRelationalDatabase,
      },
    }, await resp.json());
  }

  async getRelationalDatabaseBlueprints(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseBlueprintsRequest = {},
  ): Promise<GetRelationalDatabaseBlueprintsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseBlueprints",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "blueprints": [toRelationalDatabaseBlueprint],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getRelationalDatabaseBundles(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseBundlesRequest = {},
  ): Promise<GetRelationalDatabaseBundlesResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseBundles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "bundles": [toRelationalDatabaseBundle],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getRelationalDatabaseEvents(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseEventsRequest,
  ): Promise<GetRelationalDatabaseEventsResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      durationInMinutes: params["durationInMinutes"],
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "relationalDatabaseEvents": [toRelationalDatabaseEvent],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getRelationalDatabaseLogEvents(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseLogEventsRequest,
  ): Promise<GetRelationalDatabaseLogEventsResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      logStreamName: params["logStreamName"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      startFromHead: params["startFromHead"],
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseLogEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceLogEvents": [toLogEvent],
        "nextBackwardToken": "s",
        "nextForwardToken": "s",
      },
    }, await resp.json());
  }

  async getRelationalDatabaseLogStreams(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseLogStreamsRequest,
  ): Promise<GetRelationalDatabaseLogStreamsResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseLogStreams",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "logStreams": ["s"],
      },
    }, await resp.json());
  }

  async getRelationalDatabaseMasterUserPassword(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseMasterUserPasswordRequest,
  ): Promise<GetRelationalDatabaseMasterUserPasswordResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      passwordVersion: params["passwordVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseMasterUserPassword",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "masterUserPassword": "s",
        "createdAt": "d",
      },
    }, await resp.json());
  }

  async getRelationalDatabaseMetricData(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseMetricDataRequest,
  ): Promise<GetRelationalDatabaseMetricDataResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      metricName: params["metricName"],
      period: params["period"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      unit: params["unit"],
      statistics: params["statistics"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseMetricData",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "metricName": (x: jsonP.JSONValue) => cmnP.readEnum<RelationalDatabaseMetricName>(x),
        "metricData": [toMetricDatapoint],
      },
    }, await resp.json());
  }

  async getRelationalDatabaseParameters(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseParametersRequest,
  ): Promise<GetRelationalDatabaseParametersResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "parameters": [toRelationalDatabaseParameter],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getRelationalDatabaseSnapshot(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseSnapshotRequest,
  ): Promise<GetRelationalDatabaseSnapshotResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseSnapshotName: params["relationalDatabaseSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "relationalDatabaseSnapshot": toRelationalDatabaseSnapshot,
      },
    }, await resp.json());
  }

  async getRelationalDatabaseSnapshots(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabaseSnapshotsRequest = {},
  ): Promise<GetRelationalDatabaseSnapshotsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabaseSnapshots",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "relationalDatabaseSnapshots": [toRelationalDatabaseSnapshot],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getRelationalDatabases(
    {abortSignal, ...params}: RequestConfig & GetRelationalDatabasesRequest = {},
  ): Promise<GetRelationalDatabasesResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRelationalDatabases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "relationalDatabases": [toRelationalDatabase],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async getStaticIp(
    {abortSignal, ...params}: RequestConfig & GetStaticIpRequest,
  ): Promise<GetStaticIpResult> {
    const body: jsonP.JSONObject = params ? {
      staticIpName: params["staticIpName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetStaticIp",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "staticIp": toStaticIp,
      },
    }, await resp.json());
  }

  async getStaticIps(
    {abortSignal, ...params}: RequestConfig & GetStaticIpsRequest = {},
  ): Promise<GetStaticIpsResult> {
    const body: jsonP.JSONObject = params ? {
      pageToken: params["pageToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetStaticIps",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "staticIps": [toStaticIp],
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async importKeyPair(
    {abortSignal, ...params}: RequestConfig & ImportKeyPairRequest,
  ): Promise<ImportKeyPairResult> {
    const body: jsonP.JSONObject = params ? {
      keyPairName: params["keyPairName"],
      publicKeyBase64: params["publicKeyBase64"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportKeyPair",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async isVpcPeered(
    {abortSignal, ...params}: RequestConfig & IsVpcPeeredRequest = {},
  ): Promise<IsVpcPeeredResult> {
    const body: jsonP.JSONObject = params ? {
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "IsVpcPeered",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "isPeered": "b",
      },
    }, await resp.json());
  }

  async openInstancePublicPorts(
    {abortSignal, ...params}: RequestConfig & OpenInstancePublicPortsRequest,
  ): Promise<OpenInstancePublicPortsResult> {
    const body: jsonP.JSONObject = params ? {
      portInfo: fromPortInfo(params["portInfo"]),
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "OpenInstancePublicPorts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async peerVpc(
    {abortSignal, ...params}: RequestConfig & PeerVpcRequest = {},
  ): Promise<PeerVpcResult> {
    const body: jsonP.JSONObject = params ? {
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PeerVpc",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async putAlarm(
    {abortSignal, ...params}: RequestConfig & PutAlarmRequest,
  ): Promise<PutAlarmResult> {
    const body: jsonP.JSONObject = params ? {
      alarmName: params["alarmName"],
      metricName: params["metricName"],
      monitoredResourceName: params["monitoredResourceName"],
      comparisonOperator: params["comparisonOperator"],
      threshold: params["threshold"],
      evaluationPeriods: params["evaluationPeriods"],
      datapointsToAlarm: params["datapointsToAlarm"],
      treatMissingData: params["treatMissingData"],
      contactProtocols: params["contactProtocols"],
      notificationTriggers: params["notificationTriggers"],
      notificationEnabled: params["notificationEnabled"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAlarm",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async putInstancePublicPorts(
    {abortSignal, ...params}: RequestConfig & PutInstancePublicPortsRequest,
  ): Promise<PutInstancePublicPortsResult> {
    const body: jsonP.JSONObject = params ? {
      portInfos: params["portInfos"]?.map(x => fromPortInfo(x)),
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInstancePublicPorts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async rebootInstance(
    {abortSignal, ...params}: RequestConfig & RebootInstanceRequest,
  ): Promise<RebootInstanceResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebootInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async rebootRelationalDatabase(
    {abortSignal, ...params}: RequestConfig & RebootRelationalDatabaseRequest,
  ): Promise<RebootRelationalDatabaseResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebootRelationalDatabase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async releaseStaticIp(
    {abortSignal, ...params}: RequestConfig & ReleaseStaticIpRequest,
  ): Promise<ReleaseStaticIpResult> {
    const body: jsonP.JSONObject = params ? {
      staticIpName: params["staticIpName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ReleaseStaticIp",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async resetDistributionCache(
    {abortSignal, ...params}: RequestConfig & ResetDistributionCacheRequest = {},
  ): Promise<ResetDistributionCacheResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetDistributionCache",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": "s",
        "createTime": "d",
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async sendContactMethodVerification(
    {abortSignal, ...params}: RequestConfig & SendContactMethodVerificationRequest,
  ): Promise<SendContactMethodVerificationResult> {
    const body: jsonP.JSONObject = params ? {
      protocol: params["protocol"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendContactMethodVerification",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async startInstance(
    {abortSignal, ...params}: RequestConfig & StartInstanceRequest,
  ): Promise<StartInstanceResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async startRelationalDatabase(
    {abortSignal, ...params}: RequestConfig & StartRelationalDatabaseRequest,
  ): Promise<StartRelationalDatabaseResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartRelationalDatabase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async stopInstance(
    {abortSignal, ...params}: RequestConfig & StopInstanceRequest,
  ): Promise<StopInstanceResult> {
    const body: jsonP.JSONObject = params ? {
      instanceName: params["instanceName"],
      force: params["force"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async stopRelationalDatabase(
    {abortSignal, ...params}: RequestConfig & StopRelationalDatabaseRequest,
  ): Promise<StopRelationalDatabaseResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      relationalDatabaseSnapshotName: params["relationalDatabaseSnapshotName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopRelationalDatabase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResult> {
    const body: jsonP.JSONObject = params ? {
      resourceName: params["resourceName"],
      resourceArn: params["resourceArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async testAlarm(
    {abortSignal, ...params}: RequestConfig & TestAlarmRequest,
  ): Promise<TestAlarmResult> {
    const body: jsonP.JSONObject = params ? {
      alarmName: params["alarmName"],
      state: params["state"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TestAlarm",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async unpeerVpc(
    {abortSignal, ...params}: RequestConfig & UnpeerVpcRequest = {},
  ): Promise<UnpeerVpcResult> {
    const body: jsonP.JSONObject = params ? {
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnpeerVpc",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResult> {
    const body: jsonP.JSONObject = params ? {
      resourceName: params["resourceName"],
      resourceArn: params["resourceArn"],
      tagKeys: params["tagKeys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async updateDistribution(
    {abortSignal, ...params}: RequestConfig & UpdateDistributionRequest,
  ): Promise<UpdateDistributionResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
      origin: fromInputOrigin(params["origin"]),
      defaultCacheBehavior: fromCacheBehavior(params["defaultCacheBehavior"]),
      cacheBehaviorSettings: fromCacheSettings(params["cacheBehaviorSettings"]),
      cacheBehaviors: params["cacheBehaviors"]?.map(x => fromCacheBehaviorPerPath(x)),
      isEnabled: params["isEnabled"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDistribution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async updateDistributionBundle(
    {abortSignal, ...params}: RequestConfig & UpdateDistributionBundleRequest = {},
  ): Promise<UpdateDistributionBundleResult> {
    const body: jsonP.JSONObject = params ? {
      distributionName: params["distributionName"],
      bundleId: params["bundleId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDistributionBundle",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operation": toOperation,
      },
    }, await resp.json());
  }

  async updateDomainEntry(
    {abortSignal, ...params}: RequestConfig & UpdateDomainEntryRequest,
  ): Promise<UpdateDomainEntryResult> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
      domainEntry: fromDomainEntry(params["domainEntry"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainEntry",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async updateLoadBalancerAttribute(
    {abortSignal, ...params}: RequestConfig & UpdateLoadBalancerAttributeRequest,
  ): Promise<UpdateLoadBalancerAttributeResult> {
    const body: jsonP.JSONObject = params ? {
      loadBalancerName: params["loadBalancerName"],
      attributeName: params["attributeName"],
      attributeValue: params["attributeValue"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLoadBalancerAttribute",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async updateRelationalDatabase(
    {abortSignal, ...params}: RequestConfig & UpdateRelationalDatabaseRequest,
  ): Promise<UpdateRelationalDatabaseResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      masterUserPassword: params["masterUserPassword"],
      rotateMasterUserPassword: params["rotateMasterUserPassword"],
      preferredBackupWindow: params["preferredBackupWindow"],
      preferredMaintenanceWindow: params["preferredMaintenanceWindow"],
      enableBackupRetention: params["enableBackupRetention"],
      disableBackupRetention: params["disableBackupRetention"],
      publiclyAccessible: params["publiclyAccessible"],
      applyImmediately: params["applyImmediately"],
      caCertificateIdentifier: params["caCertificateIdentifier"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRelationalDatabase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

  async updateRelationalDatabaseParameters(
    {abortSignal, ...params}: RequestConfig & UpdateRelationalDatabaseParametersRequest,
  ): Promise<UpdateRelationalDatabaseParametersResult> {
    const body: jsonP.JSONObject = params ? {
      relationalDatabaseName: params["relationalDatabaseName"],
      parameters: params["parameters"]?.map(x => fromRelationalDatabaseParameter(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRelationalDatabaseParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "operations": [toOperation],
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AllocateStaticIpRequest {
  staticIpName: string;
}

// refs: 1 - tags: named, input
export interface AttachCertificateToDistributionRequest {
  distributionName: string;
  certificateName: string;
}

// refs: 1 - tags: named, input
export interface AttachDiskRequest {
  diskName: string;
  instanceName: string;
  diskPath: string;
}

// refs: 1 - tags: named, input
export interface AttachInstancesToLoadBalancerRequest {
  loadBalancerName: string;
  instanceNames: string[];
}

// refs: 1 - tags: named, input
export interface AttachLoadBalancerTlsCertificateRequest {
  loadBalancerName: string;
  certificateName: string;
}

// refs: 1 - tags: named, input
export interface AttachStaticIpRequest {
  staticIpName: string;
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface CloseInstancePublicPortsRequest {
  portInfo: PortInfo;
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface CopySnapshotRequest {
  sourceSnapshotName?: string | null;
  sourceResourceName?: string | null;
  restoreDate?: string | null;
  useLatestRestorableAutoSnapshot?: boolean | null;
  targetSnapshotName: string;
  sourceRegion: RegionName;
}

// refs: 1 - tags: named, input
export interface CreateCertificateRequest {
  certificateName: string;
  domainName: string;
  subjectAlternativeNames?: string[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateCloudFormationStackRequest {
  instances: InstanceEntry[];
}

// refs: 1 - tags: named, input
export interface CreateContactMethodRequest {
  protocol: ContactProtocol;
  contactEndpoint: string;
}

// refs: 1 - tags: named, input
export interface CreateDiskRequest {
  diskName: string;
  availabilityZone: string;
  sizeInGb: number;
  tags?: Tag[] | null;
  addOns?: AddOnRequest[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDiskFromSnapshotRequest {
  diskName: string;
  diskSnapshotName?: string | null;
  availabilityZone: string;
  sizeInGb: number;
  tags?: Tag[] | null;
  addOns?: AddOnRequest[] | null;
  sourceDiskName?: string | null;
  restoreDate?: string | null;
  useLatestRestorableAutoSnapshot?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateDiskSnapshotRequest {
  diskName?: string | null;
  diskSnapshotName: string;
  instanceName?: string | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDistributionRequest {
  distributionName: string;
  origin: InputOrigin;
  defaultCacheBehavior: CacheBehavior;
  cacheBehaviorSettings?: CacheSettings | null;
  cacheBehaviors?: CacheBehaviorPerPath[] | null;
  bundleId: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDomainRequest {
  domainName: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDomainEntryRequest {
  domainName: string;
  domainEntry: DomainEntry;
}

// refs: 1 - tags: named, input
export interface CreateInstanceSnapshotRequest {
  instanceSnapshotName: string;
  instanceName: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateInstancesRequest {
  instanceNames: string[];
  availabilityZone: string;
  customImageName?: string | null;
  blueprintId: string;
  bundleId: string;
  userData?: string | null;
  keyPairName?: string | null;
  tags?: Tag[] | null;
  addOns?: AddOnRequest[] | null;
}

// refs: 1 - tags: named, input
export interface CreateInstancesFromSnapshotRequest {
  instanceNames: string[];
  attachedDiskMapping?: { [key: string]: DiskMap[] | null | undefined } | null;
  availabilityZone: string;
  instanceSnapshotName?: string | null;
  bundleId: string;
  userData?: string | null;
  keyPairName?: string | null;
  tags?: Tag[] | null;
  addOns?: AddOnRequest[] | null;
  sourceInstanceName?: string | null;
  restoreDate?: string | null;
  useLatestRestorableAutoSnapshot?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateKeyPairRequest {
  keyPairName: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLoadBalancerRequest {
  loadBalancerName: string;
  instancePort: number;
  healthCheckPath?: string | null;
  certificateName?: string | null;
  certificateDomainName?: string | null;
  certificateAlternativeNames?: string[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLoadBalancerTlsCertificateRequest {
  loadBalancerName: string;
  certificateName: string;
  certificateDomainName: string;
  certificateAlternativeNames?: string[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateRelationalDatabaseRequest {
  relationalDatabaseName: string;
  availabilityZone?: string | null;
  relationalDatabaseBlueprintId: string;
  relationalDatabaseBundleId: string;
  masterDatabaseName: string;
  masterUsername: string;
  masterUserPassword?: string | null;
  preferredBackupWindow?: string | null;
  preferredMaintenanceWindow?: string | null;
  publiclyAccessible?: boolean | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateRelationalDatabaseFromSnapshotRequest {
  relationalDatabaseName: string;
  availabilityZone?: string | null;
  publiclyAccessible?: boolean | null;
  relationalDatabaseSnapshotName?: string | null;
  relationalDatabaseBundleId?: string | null;
  sourceRelationalDatabaseName?: string | null;
  restoreTime?: Date | number | null;
  useLatestRestorableTime?: boolean | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateRelationalDatabaseSnapshotRequest {
  relationalDatabaseName: string;
  relationalDatabaseSnapshotName: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteAlarmRequest {
  alarmName: string;
}

// refs: 1 - tags: named, input
export interface DeleteAutoSnapshotRequest {
  resourceName: string;
  date: string;
}

// refs: 1 - tags: named, input
export interface DeleteCertificateRequest {
  certificateName: string;
}

// refs: 1 - tags: named, input
export interface DeleteContactMethodRequest {
  protocol: ContactProtocol;
}

// refs: 1 - tags: named, input
export interface DeleteDiskRequest {
  diskName: string;
  forceDeleteAddOns?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteDiskSnapshotRequest {
  diskSnapshotName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDistributionRequest {
  distributionName?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDomainRequest {
  domainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDomainEntryRequest {
  domainName: string;
  domainEntry: DomainEntry;
}

// refs: 1 - tags: named, input
export interface DeleteInstanceRequest {
  instanceName: string;
  forceDeleteAddOns?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteInstanceSnapshotRequest {
  instanceSnapshotName: string;
}

// refs: 1 - tags: named, input
export interface DeleteKeyPairRequest {
  keyPairName: string;
}

// refs: 1 - tags: named, input
export interface DeleteKnownHostKeysRequest {
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface DeleteLoadBalancerRequest {
  loadBalancerName: string;
}

// refs: 1 - tags: named, input
export interface DeleteLoadBalancerTlsCertificateRequest {
  loadBalancerName: string;
  certificateName: string;
  force?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteRelationalDatabaseRequest {
  relationalDatabaseName: string;
  skipFinalSnapshot?: boolean | null;
  finalRelationalDatabaseSnapshotName?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteRelationalDatabaseSnapshotRequest {
  relationalDatabaseSnapshotName: string;
}

// refs: 1 - tags: named, input
export interface DetachCertificateFromDistributionRequest {
  distributionName: string;
}

// refs: 1 - tags: named, input
export interface DetachDiskRequest {
  diskName: string;
}

// refs: 1 - tags: named, input
export interface DetachInstancesFromLoadBalancerRequest {
  loadBalancerName: string;
  instanceNames: string[];
}

// refs: 1 - tags: named, input
export interface DetachStaticIpRequest {
  staticIpName: string;
}

// refs: 1 - tags: named, input
export interface DisableAddOnRequest {
  addOnType: AddOnType;
  resourceName: string;
}

// refs: 1 - tags: named, input
export interface DownloadDefaultKeyPairRequest {
}

// refs: 1 - tags: named, input
export interface EnableAddOnRequest {
  resourceName: string;
  addOnRequest: AddOnRequest;
}

// refs: 1 - tags: named, input
export interface ExportSnapshotRequest {
  sourceSnapshotName: string;
}

// refs: 1 - tags: named, input
export interface GetActiveNamesRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAlarmsRequest {
  alarmName?: string | null;
  pageToken?: string | null;
  monitoredResourceName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAutoSnapshotsRequest {
  resourceName: string;
}

// refs: 1 - tags: named, input
export interface GetBlueprintsRequest {
  includeInactive?: boolean | null;
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetBundlesRequest {
  includeInactive?: boolean | null;
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCertificatesRequest {
  certificateStatuses?: CertificateStatus[] | null;
  includeCertificateDetails?: boolean | null;
  certificateName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCloudFormationStackRecordsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetContactMethodsRequest {
  protocols?: ContactProtocol[] | null;
}

// refs: 1 - tags: named, input
export interface GetDiskRequest {
  diskName: string;
}

// refs: 1 - tags: named, input
export interface GetDiskSnapshotRequest {
  diskSnapshotName: string;
}

// refs: 1 - tags: named, input
export interface GetDiskSnapshotsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDisksRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDistributionBundlesRequest {
}

// refs: 1 - tags: named, input
export interface GetDistributionLatestCacheResetRequest {
  distributionName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDistributionMetricDataRequest {
  distributionName: string;
  metricName: DistributionMetricName;
  startTime: Date | number;
  endTime: Date | number;
  period: number;
  unit: MetricUnit;
  statistics: MetricStatistic[];
}

// refs: 1 - tags: named, input
export interface GetDistributionsRequest {
  distributionName?: string | null;
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDomainRequest {
  domainName: string;
}

// refs: 1 - tags: named, input
export interface GetDomainsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetExportSnapshotRecordsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetInstanceRequest {
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface GetInstanceAccessDetailsRequest {
  instanceName: string;
  protocol?: InstanceAccessProtocol | null;
}

// refs: 1 - tags: named, input
export interface GetInstanceMetricDataRequest {
  instanceName: string;
  metricName: InstanceMetricName;
  period: number;
  startTime: Date | number;
  endTime: Date | number;
  unit: MetricUnit;
  statistics: MetricStatistic[];
}

// refs: 1 - tags: named, input
export interface GetInstancePortStatesRequest {
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface GetInstanceSnapshotRequest {
  instanceSnapshotName: string;
}

// refs: 1 - tags: named, input
export interface GetInstanceSnapshotsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetInstanceStateRequest {
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface GetInstancesRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetKeyPairRequest {
  keyPairName: string;
}

// refs: 1 - tags: named, input
export interface GetKeyPairsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetLoadBalancerRequest {
  loadBalancerName: string;
}

// refs: 1 - tags: named, input
export interface GetLoadBalancerMetricDataRequest {
  loadBalancerName: string;
  metricName: LoadBalancerMetricName;
  period: number;
  startTime: Date | number;
  endTime: Date | number;
  unit: MetricUnit;
  statistics: MetricStatistic[];
}

// refs: 1 - tags: named, input
export interface GetLoadBalancerTlsCertificatesRequest {
  loadBalancerName: string;
}

// refs: 1 - tags: named, input
export interface GetLoadBalancersRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetOperationRequest {
  operationId: string;
}

// refs: 1 - tags: named, input
export interface GetOperationsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetOperationsForResourceRequest {
  resourceName: string;
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRegionsRequest {
  includeAvailabilityZones?: boolean | null;
  includeRelationalDatabaseAvailabilityZones?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseRequest {
  relationalDatabaseName: string;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseBlueprintsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseBundlesRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseEventsRequest {
  relationalDatabaseName: string;
  durationInMinutes?: number | null;
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseLogEventsRequest {
  relationalDatabaseName: string;
  logStreamName: string;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  startFromHead?: boolean | null;
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseLogStreamsRequest {
  relationalDatabaseName: string;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseMasterUserPasswordRequest {
  relationalDatabaseName: string;
  passwordVersion?: RelationalDatabasePasswordVersion | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseMetricDataRequest {
  relationalDatabaseName: string;
  metricName: RelationalDatabaseMetricName;
  period: number;
  startTime: Date | number;
  endTime: Date | number;
  unit: MetricUnit;
  statistics: MetricStatistic[];
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseParametersRequest {
  relationalDatabaseName: string;
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseSnapshotRequest {
  relationalDatabaseSnapshotName: string;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabaseSnapshotsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRelationalDatabasesRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetStaticIpRequest {
  staticIpName: string;
}

// refs: 1 - tags: named, input
export interface GetStaticIpsRequest {
  pageToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ImportKeyPairRequest {
  keyPairName: string;
  publicKeyBase64: string;
}

// refs: 1 - tags: named, input
export interface IsVpcPeeredRequest {
}

// refs: 1 - tags: named, input
export interface OpenInstancePublicPortsRequest {
  portInfo: PortInfo;
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface PeerVpcRequest {
}

// refs: 1 - tags: named, input
export interface PutAlarmRequest {
  alarmName: string;
  metricName: MetricName;
  monitoredResourceName: string;
  comparisonOperator: ComparisonOperator;
  threshold: number;
  evaluationPeriods: number;
  datapointsToAlarm?: number | null;
  treatMissingData?: TreatMissingData | null;
  contactProtocols?: ContactProtocol[] | null;
  notificationTriggers?: AlarmState[] | null;
  notificationEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutInstancePublicPortsRequest {
  portInfos: PortInfo[];
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface RebootInstanceRequest {
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface RebootRelationalDatabaseRequest {
  relationalDatabaseName: string;
}

// refs: 1 - tags: named, input
export interface ReleaseStaticIpRequest {
  staticIpName: string;
}

// refs: 1 - tags: named, input
export interface ResetDistributionCacheRequest {
  distributionName?: string | null;
}

// refs: 1 - tags: named, input
export interface SendContactMethodVerificationRequest {
  protocol: ContactMethodVerificationProtocol;
}

// refs: 1 - tags: named, input
export interface StartInstanceRequest {
  instanceName: string;
}

// refs: 1 - tags: named, input
export interface StartRelationalDatabaseRequest {
  relationalDatabaseName: string;
}

// refs: 1 - tags: named, input
export interface StopInstanceRequest {
  instanceName: string;
  force?: boolean | null;
}

// refs: 1 - tags: named, input
export interface StopRelationalDatabaseRequest {
  relationalDatabaseName: string;
  relationalDatabaseSnapshotName?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceName: string;
  resourceArn?: string | null;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface TestAlarmRequest {
  alarmName: string;
  state: AlarmState;
}

// refs: 1 - tags: named, input
export interface UnpeerVpcRequest {
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceName: string;
  resourceArn?: string | null;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDistributionRequest {
  distributionName: string;
  origin?: InputOrigin | null;
  defaultCacheBehavior?: CacheBehavior | null;
  cacheBehaviorSettings?: CacheSettings | null;
  cacheBehaviors?: CacheBehaviorPerPath[] | null;
  isEnabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateDistributionBundleRequest {
  distributionName?: string | null;
  bundleId?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDomainEntryRequest {
  domainName: string;
  domainEntry: DomainEntry;
}

// refs: 1 - tags: named, input
export interface UpdateLoadBalancerAttributeRequest {
  loadBalancerName: string;
  attributeName: LoadBalancerAttributeName;
  attributeValue: string;
}

// refs: 1 - tags: named, input
export interface UpdateRelationalDatabaseRequest {
  relationalDatabaseName: string;
  masterUserPassword?: string | null;
  rotateMasterUserPassword?: boolean | null;
  preferredBackupWindow?: string | null;
  preferredMaintenanceWindow?: string | null;
  enableBackupRetention?: boolean | null;
  disableBackupRetention?: boolean | null;
  publiclyAccessible?: boolean | null;
  applyImmediately?: boolean | null;
  caCertificateIdentifier?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRelationalDatabaseParametersRequest {
  relationalDatabaseName: string;
  parameters: RelationalDatabaseParameter[];
}

// refs: 1 - tags: named, output
export interface AllocateStaticIpResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface AttachCertificateToDistributionResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface AttachDiskResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface AttachInstancesToLoadBalancerResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface AttachLoadBalancerTlsCertificateResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface AttachStaticIpResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CloseInstancePublicPortsResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface CopySnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateCertificateResult {
  certificate?: CertificateSummary | null;
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateCloudFormationStackResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateContactMethodResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDiskResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDiskFromSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDiskSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDistributionResult {
  distribution?: LightsailDistribution | null;
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface CreateDomainResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface CreateDomainEntryResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface CreateInstanceSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateInstancesResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateInstancesFromSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateKeyPairResult {
  keyPair?: KeyPair | null;
  publicKeyBase64?: string | null;
  privateKeyBase64?: string | null;
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface CreateLoadBalancerResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateLoadBalancerTlsCertificateResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateRelationalDatabaseResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateRelationalDatabaseFromSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateRelationalDatabaseSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteAlarmResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteAutoSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteCertificateResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteContactMethodResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteDiskResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteDiskSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteDistributionResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface DeleteDomainResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface DeleteDomainEntryResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface DeleteInstanceResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteInstanceSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteKeyPairResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface DeleteKnownHostKeysResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteLoadBalancerResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteLoadBalancerTlsCertificateResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteRelationalDatabaseResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteRelationalDatabaseSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DetachCertificateFromDistributionResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface DetachDiskResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DetachInstancesFromLoadBalancerResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DetachStaticIpResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DisableAddOnResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface DownloadDefaultKeyPairResult {
  publicKeyBase64?: string | null;
  privateKeyBase64?: string | null;
}

// refs: 1 - tags: named, output
export interface EnableAddOnResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface ExportSnapshotResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface GetActiveNamesResult {
  activeNames?: string[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAlarmsResult {
  alarms?: Alarm[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAutoSnapshotsResult {
  resourceName?: string | null;
  resourceType?: ResourceType | null;
  autoSnapshots?: AutoSnapshotDetails[] | null;
}

// refs: 1 - tags: named, output
export interface GetBlueprintsResult {
  blueprints?: Blueprint[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBundlesResult {
  bundles?: Bundle[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCertificatesResult {
  certificates?: CertificateSummary[] | null;
}

// refs: 1 - tags: named, output
export interface GetCloudFormationStackRecordsResult {
  cloudFormationStackRecords?: CloudFormationStackRecord[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetContactMethodsResult {
  contactMethods?: ContactMethod[] | null;
}

// refs: 1 - tags: named, output
export interface GetDiskResult {
  disk?: Disk | null;
}

// refs: 1 - tags: named, output
export interface GetDiskSnapshotResult {
  diskSnapshot?: DiskSnapshot | null;
}

// refs: 1 - tags: named, output
export interface GetDiskSnapshotsResult {
  diskSnapshots?: DiskSnapshot[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDisksResult {
  disks?: Disk[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDistributionBundlesResult {
  bundles?: DistributionBundle[] | null;
}

// refs: 1 - tags: named, output
export interface GetDistributionLatestCacheResetResult {
  status?: string | null;
  createTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetDistributionMetricDataResult {
  metricName?: DistributionMetricName | null;
  metricData?: MetricDatapoint[] | null;
}

// refs: 1 - tags: named, output
export interface GetDistributionsResult {
  distributions?: LightsailDistribution[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDomainResult {
  domain?: Domain | null;
}

// refs: 1 - tags: named, output
export interface GetDomainsResult {
  domains?: Domain[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetExportSnapshotRecordsResult {
  exportSnapshotRecords?: ExportSnapshotRecord[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetInstanceResult {
  instance?: Instance | null;
}

// refs: 1 - tags: named, output
export interface GetInstanceAccessDetailsResult {
  accessDetails?: InstanceAccessDetails | null;
}

// refs: 1 - tags: named, output
export interface GetInstanceMetricDataResult {
  metricName?: InstanceMetricName | null;
  metricData?: MetricDatapoint[] | null;
}

// refs: 1 - tags: named, output
export interface GetInstancePortStatesResult {
  portStates?: InstancePortState[] | null;
}

// refs: 1 - tags: named, output
export interface GetInstanceSnapshotResult {
  instanceSnapshot?: InstanceSnapshot | null;
}

// refs: 1 - tags: named, output
export interface GetInstanceSnapshotsResult {
  instanceSnapshots?: InstanceSnapshot[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetInstanceStateResult {
  state?: InstanceState | null;
}

// refs: 1 - tags: named, output
export interface GetInstancesResult {
  instances?: Instance[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetKeyPairResult {
  keyPair?: KeyPair | null;
}

// refs: 1 - tags: named, output
export interface GetKeyPairsResult {
  keyPairs?: KeyPair[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetLoadBalancerResult {
  loadBalancer?: LoadBalancer | null;
}

// refs: 1 - tags: named, output
export interface GetLoadBalancerMetricDataResult {
  metricName?: LoadBalancerMetricName | null;
  metricData?: MetricDatapoint[] | null;
}

// refs: 1 - tags: named, output
export interface GetLoadBalancerTlsCertificatesResult {
  tlsCertificates?: LoadBalancerTlsCertificate[] | null;
}

// refs: 1 - tags: named, output
export interface GetLoadBalancersResult {
  loadBalancers?: LoadBalancer[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOperationResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface GetOperationsResult {
  operations?: Operation[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOperationsForResourceResult {
  operations?: Operation[] | null;
  nextPageCount?: string | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRegionsResult {
  regions?: Region[] | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseResult {
  relationalDatabase?: RelationalDatabase | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseBlueprintsResult {
  blueprints?: RelationalDatabaseBlueprint[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseBundlesResult {
  bundles?: RelationalDatabaseBundle[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseEventsResult {
  relationalDatabaseEvents?: RelationalDatabaseEvent[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseLogEventsResult {
  resourceLogEvents?: LogEvent[] | null;
  nextBackwardToken?: string | null;
  nextForwardToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseLogStreamsResult {
  logStreams?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseMasterUserPasswordResult {
  masterUserPassword?: string | null;
  createdAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseMetricDataResult {
  metricName?: RelationalDatabaseMetricName | null;
  metricData?: MetricDatapoint[] | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseParametersResult {
  parameters?: RelationalDatabaseParameter[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseSnapshotResult {
  relationalDatabaseSnapshot?: RelationalDatabaseSnapshot | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabaseSnapshotsResult {
  relationalDatabaseSnapshots?: RelationalDatabaseSnapshot[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRelationalDatabasesResult {
  relationalDatabases?: RelationalDatabase[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetStaticIpResult {
  staticIp?: StaticIp | null;
}

// refs: 1 - tags: named, output
export interface GetStaticIpsResult {
  staticIps?: StaticIp[] | null;
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ImportKeyPairResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface IsVpcPeeredResult {
  isPeered?: boolean | null;
}

// refs: 1 - tags: named, output
export interface OpenInstancePublicPortsResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface PeerVpcResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface PutAlarmResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface PutInstancePublicPortsResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface RebootInstanceResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface RebootRelationalDatabaseResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface ReleaseStaticIpResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface ResetDistributionCacheResult {
  status?: string | null;
  createTime?: Date | number | null;
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface SendContactMethodVerificationResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface StartInstanceResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface StartRelationalDatabaseResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface StopInstanceResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface StopRelationalDatabaseResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface TestAlarmResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface UnpeerVpcResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface UntagResourceResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateDistributionResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface UpdateDistributionBundleResult {
  operation?: Operation | null;
}

// refs: 1 - tags: named, output
export interface UpdateDomainEntryResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateLoadBalancerAttributeResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateRelationalDatabaseResult {
  operations?: Operation[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateRelationalDatabaseParametersResult {
  operations?: Operation[] | null;
}

// refs: 3 - tags: input, named, interface
export interface PortInfo {
  fromPort?: number | null;
  toPort?: number | null;
  protocol?: NetworkProtocol | null;
  cidrs?: string[] | null;
  cidrListAliases?: string[] | null;
}
function fromPortInfo(input?: PortInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fromPort: input["fromPort"],
    toPort: input["toPort"],
    protocol: input["protocol"],
    cidrs: input["cidrs"],
    cidrListAliases: input["cidrListAliases"],
  }
}

// refs: 6 - tags: input, named, enum, output
export type NetworkProtocol =
| "tcp"
| "all"
| "udp"
| "icmp"
| cmnP.UnexpectedEnumValue;

// refs: 115 - tags: input, named, enum, output
export type RegionName =
| "us-east-1"
| "us-east-2"
| "us-west-1"
| "us-west-2"
| "eu-west-1"
| "eu-west-2"
| "eu-west-3"
| "eu-central-1"
| "ca-central-1"
| "ap-south-1"
| "ap-southeast-1"
| "ap-southeast-2"
| "ap-northeast-1"
| "ap-northeast-2"
| cmnP.UnexpectedEnumValue;

// refs: 46 - tags: input, named, interface, output
export interface Tag {
  key?: string | null;
  value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "key": "s",
      "value": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface InstanceEntry {
  sourceName: string;
  instanceType: string;
  portInfoSource: PortInfoSourceType;
  userData?: string | null;
  availabilityZone: string;
}
function fromInstanceEntry(input?: InstanceEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceName: input["sourceName"],
    instanceType: input["instanceType"],
    portInfoSource: input["portInfoSource"],
    userData: input["userData"],
    availabilityZone: input["availabilityZone"],
  }
}

// refs: 1 - tags: input, named, enum
export type PortInfoSourceType =
| "DEFAULT"
| "INSTANCE"
| "NONE"
| "CLOSED"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type ContactProtocol =
| "Email"
| "SMS"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface
export interface AddOnRequest {
  addOnType: AddOnType;
  autoSnapshotAddOnRequest?: AutoSnapshotAddOnRequest | null;
}
function fromAddOnRequest(input?: AddOnRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    addOnType: input["addOnType"],
    autoSnapshotAddOnRequest: fromAutoSnapshotAddOnRequest(input["autoSnapshotAddOnRequest"]),
  }
}

// refs: 6 - tags: input, named, enum
export type AddOnType =
| "AutoSnapshot"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface
export interface AutoSnapshotAddOnRequest {
  snapshotTimeOfDay?: string | null;
}
function fromAutoSnapshotAddOnRequest(input?: AutoSnapshotAddOnRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    snapshotTimeOfDay: input["snapshotTimeOfDay"],
  }
}

// refs: 2 - tags: input, named, interface
export interface InputOrigin {
  name?: string | null;
  regionName?: RegionName | null;
  protocolPolicy?: OriginProtocolPolicyEnum | null;
}
function fromInputOrigin(input?: InputOrigin | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    regionName: input["regionName"],
    protocolPolicy: input["protocolPolicy"],
  }
}

// refs: 4 - tags: input, named, enum, output
export type OriginProtocolPolicyEnum =
| "http-only"
| "https-only"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface CacheBehavior {
  behavior?: BehaviorEnum | null;
}
function fromCacheBehavior(input?: CacheBehavior | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    behavior: input["behavior"],
  }
}
function toCacheBehavior(root: jsonP.JSONValue): CacheBehavior {
  return jsonP.readObj({
    required: {},
    optional: {
      "behavior": (x: jsonP.JSONValue) => cmnP.readEnum<BehaviorEnum>(x),
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type BehaviorEnum =
| "dont-cache"
| "cache"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface CacheSettings {
  defaultTTL?: number | null;
  minimumTTL?: number | null;
  maximumTTL?: number | null;
  allowedHTTPMethods?: string | null;
  cachedHTTPMethods?: string | null;
  forwardedCookies?: CookieObject | null;
  forwardedHeaders?: HeaderObject | null;
  forwardedQueryStrings?: QueryStringObject | null;
}
function fromCacheSettings(input?: CacheSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultTTL: input["defaultTTL"],
    minimumTTL: input["minimumTTL"],
    maximumTTL: input["maximumTTL"],
    allowedHTTPMethods: input["allowedHTTPMethods"],
    cachedHTTPMethods: input["cachedHTTPMethods"],
    forwardedCookies: fromCookieObject(input["forwardedCookies"]),
    forwardedHeaders: fromHeaderObject(input["forwardedHeaders"]),
    forwardedQueryStrings: fromQueryStringObject(input["forwardedQueryStrings"]),
  }
}
function toCacheSettings(root: jsonP.JSONValue): CacheSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "defaultTTL": "n",
      "minimumTTL": "n",
      "maximumTTL": "n",
      "allowedHTTPMethods": "s",
      "cachedHTTPMethods": "s",
      "forwardedCookies": toCookieObject,
      "forwardedHeaders": toHeaderObject,
      "forwardedQueryStrings": toQueryStringObject,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CookieObject {
  option?: ForwardValues | null;
  cookiesAllowList?: string[] | null;
}
function fromCookieObject(input?: CookieObject | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    option: input["option"],
    cookiesAllowList: input["cookiesAllowList"],
  }
}
function toCookieObject(root: jsonP.JSONValue): CookieObject {
  return jsonP.readObj({
    required: {},
    optional: {
      "option": (x: jsonP.JSONValue) => cmnP.readEnum<ForwardValues>(x),
      "cookiesAllowList": ["s"],
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type ForwardValues =
| "none"
| "allow-list"
| "all"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface HeaderObject {
  option?: ForwardValues | null;
  headersAllowList?: HeaderEnum[] | null;
}
function fromHeaderObject(input?: HeaderObject | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    option: input["option"],
    headersAllowList: input["headersAllowList"],
  }
}
function toHeaderObject(root: jsonP.JSONValue): HeaderObject {
  return jsonP.readObj({
    required: {},
    optional: {
      "option": (x: jsonP.JSONValue) => cmnP.readEnum<ForwardValues>(x),
      "headersAllowList": [(x: jsonP.JSONValue) => cmnP.readEnum<HeaderEnum>(x)],
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type HeaderEnum =
| "Accept"
| "Accept-Charset"
| "Accept-Datetime"
| "Accept-Encoding"
| "Accept-Language"
| "Authorization"
| "CloudFront-Forwarded-Proto"
| "CloudFront-Is-Desktop-Viewer"
| "CloudFront-Is-Mobile-Viewer"
| "CloudFront-Is-SmartTV-Viewer"
| "CloudFront-Is-Tablet-Viewer"
| "CloudFront-Viewer-Country"
| "Host"
| "Origin"
| "Referer"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface QueryStringObject {
  option?: boolean | null;
  queryStringsAllowList?: string[] | null;
}
function fromQueryStringObject(input?: QueryStringObject | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    option: input["option"],
    queryStringsAllowList: input["queryStringsAllowList"],
  }
}
function toQueryStringObject(root: jsonP.JSONValue): QueryStringObject {
  return jsonP.readObj({
    required: {},
    optional: {
      "option": "b",
      "queryStringsAllowList": ["s"],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CacheBehaviorPerPath {
  path?: string | null;
  behavior?: BehaviorEnum | null;
}
function fromCacheBehaviorPerPath(input?: CacheBehaviorPerPath | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    path: input["path"],
    behavior: input["behavior"],
  }
}
function toCacheBehaviorPerPath(root: jsonP.JSONValue): CacheBehaviorPerPath {
  return jsonP.readObj({
    required: {},
    optional: {
      "path": "s",
      "behavior": (x: jsonP.JSONValue) => cmnP.readEnum<BehaviorEnum>(x),
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface DomainEntry {
  id?: string | null;
  name?: string | null;
  target?: string | null;
  isAlias?: boolean | null;
  type?: string | null;
  options?: { [key: string]: string | null | undefined } | null;
}
function fromDomainEntry(input?: DomainEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    target: input["target"],
    isAlias: input["isAlias"],
    type: input["type"],
    options: input["options"],
  }
}
function toDomainEntry(root: jsonP.JSONValue): DomainEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "target": "s",
      "isAlias": "b",
      "type": "s",
      "options": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface DiskMap {
  originalDiskPath?: string | null;
  newDiskName?: string | null;
}
function fromDiskMap(input?: DiskMap | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    originalDiskPath: input["originalDiskPath"],
    newDiskName: input["newDiskName"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type CertificateStatus =
| "PENDING_VALIDATION"
| "ISSUED"
| "INACTIVE"
| "EXPIRED"
| "VALIDATION_TIMED_OUT"
| "REVOKED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type DistributionMetricName =
| "Requests"
| "BytesDownloaded"
| "BytesUploaded"
| "TotalErrorRate"
| "Http4xxErrorRate"
| "Http5xxErrorRate"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type MetricUnit =
| "Seconds"
| "Microseconds"
| "Milliseconds"
| "Bytes"
| "Kilobytes"
| "Megabytes"
| "Gigabytes"
| "Terabytes"
| "Bits"
| "Kilobits"
| "Megabits"
| "Gigabits"
| "Terabits"
| "Percent"
| "Count"
| "Bytes/Second"
| "Kilobytes/Second"
| "Megabytes/Second"
| "Gigabytes/Second"
| "Terabytes/Second"
| "Bits/Second"
| "Kilobits/Second"
| "Megabits/Second"
| "Gigabits/Second"
| "Terabits/Second"
| "Count/Second"
| "None"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type MetricStatistic =
| "Minimum"
| "Maximum"
| "Sum"
| "Average"
| "SampleCount"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type InstanceAccessProtocol =
| "ssh"
| "rdp"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type InstanceMetricName =
| "CPUUtilization"
| "NetworkIn"
| "NetworkOut"
| "StatusCheckFailed"
| "StatusCheckFailed_Instance"
| "StatusCheckFailed_System"
| "BurstCapacityTime"
| "BurstCapacityPercentage"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type LoadBalancerMetricName =
| "ClientTLSNegotiationErrorCount"
| "HealthyHostCount"
| "UnhealthyHostCount"
| "HTTPCode_LB_4XX_Count"
| "HTTPCode_LB_5XX_Count"
| "HTTPCode_Instance_2XX_Count"
| "HTTPCode_Instance_3XX_Count"
| "HTTPCode_Instance_4XX_Count"
| "HTTPCode_Instance_5XX_Count"
| "InstanceResponseTime"
| "RejectedConnectionCount"
| "RequestCount"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type RelationalDatabasePasswordVersion =
| "CURRENT"
| "PREVIOUS"
| "PENDING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type RelationalDatabaseMetricName =
| "CPUUtilization"
| "DatabaseConnections"
| "DiskQueueDepth"
| "FreeStorageSpace"
| "NetworkReceiveThroughput"
| "NetworkTransmitThroughput"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type MetricName =
| "CPUUtilization"
| "NetworkIn"
| "NetworkOut"
| "StatusCheckFailed"
| "StatusCheckFailed_Instance"
| "StatusCheckFailed_System"
| "ClientTLSNegotiationErrorCount"
| "HealthyHostCount"
| "UnhealthyHostCount"
| "HTTPCode_LB_4XX_Count"
| "HTTPCode_LB_5XX_Count"
| "HTTPCode_Instance_2XX_Count"
| "HTTPCode_Instance_3XX_Count"
| "HTTPCode_Instance_4XX_Count"
| "HTTPCode_Instance_5XX_Count"
| "InstanceResponseTime"
| "RejectedConnectionCount"
| "RequestCount"
| "DatabaseConnections"
| "DiskQueueDepth"
| "FreeStorageSpace"
| "NetworkReceiveThroughput"
| "NetworkTransmitThroughput"
| "BurstCapacityTime"
| "BurstCapacityPercentage"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ComparisonOperator =
| "GreaterThanOrEqualToThreshold"
| "GreaterThanThreshold"
| "LessThanThreshold"
| "LessThanOrEqualToThreshold"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type TreatMissingData =
| "breaching"
| "notBreaching"
| "ignore"
| "missing"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type AlarmState =
| "OK"
| "ALARM"
| "INSUFFICIENT_DATA"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ContactMethodVerificationProtocol =
| "Email"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type LoadBalancerAttributeName =
| "HealthCheckPath"
| "SessionStickinessEnabled"
| "SessionStickiness_LB_CookieDurationSeconds"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface RelationalDatabaseParameter {
  allowedValues?: string | null;
  applyMethod?: string | null;
  applyType?: string | null;
  dataType?: string | null;
  description?: string | null;
  isModifiable?: boolean | null;
  parameterName?: string | null;
  parameterValue?: string | null;
}
function fromRelationalDatabaseParameter(input?: RelationalDatabaseParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    allowedValues: input["allowedValues"],
    applyMethod: input["applyMethod"],
    applyType: input["applyType"],
    dataType: input["dataType"],
    description: input["description"],
    isModifiable: input["isModifiable"],
    parameterName: input["parameterName"],
    parameterValue: input["parameterValue"],
  }
}
function toRelationalDatabaseParameter(root: jsonP.JSONValue): RelationalDatabaseParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "allowedValues": "s",
      "applyMethod": "s",
      "applyType": "s",
      "dataType": "s",
      "description": "s",
      "isModifiable": "b",
      "parameterName": "s",
      "parameterValue": "s",
    },
  }, root);
}

// refs: 77 - tags: output, named, interface
export interface Operation {
  id?: string | null;
  resourceName?: string | null;
  resourceType?: ResourceType | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  isTerminal?: boolean | null;
  operationDetails?: string | null;
  operationType?: OperationType | null;
  status?: OperationStatus | null;
  statusChangedAt?: Date | number | null;
  errorCode?: string | null;
  errorDetails?: string | null;
}
function toOperation(root: jsonP.JSONValue): Operation {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "resourceName": "s",
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "createdAt": "d",
      "location": toResourceLocation,
      "isTerminal": "b",
      "operationDetails": "s",
      "operationType": (x: jsonP.JSONValue) => cmnP.readEnum<OperationType>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<OperationStatus>(x),
      "statusChangedAt": "d",
      "errorCode": "s",
      "errorDetails": "s",
    },
  }, root);
}

// refs: 113 - tags: output, named, enum
export type ResourceType =
| "Instance"
| "StaticIp"
| "KeyPair"
| "InstanceSnapshot"
| "Domain"
| "PeeredVpc"
| "LoadBalancer"
| "LoadBalancerTlsCertificate"
| "Disk"
| "DiskSnapshot"
| "RelationalDatabase"
| "RelationalDatabaseSnapshot"
| "ExportSnapshotRecord"
| "CloudFormationStackRecord"
| "Alarm"
| "ContactMethod"
| "Distribution"
| "Certificate"
| cmnP.UnexpectedEnumValue;

// refs: 109 - tags: output, named, interface
export interface ResourceLocation {
  availabilityZone?: string | null;
  regionName?: RegionName | null;
}
function toResourceLocation(root: jsonP.JSONValue): ResourceLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "availabilityZone": "s",
      "regionName": (x: jsonP.JSONValue) => cmnP.readEnum<RegionName>(x),
    },
  }, root);
}

// refs: 77 - tags: output, named, enum
export type OperationType =
| "DeleteKnownHostKeys"
| "DeleteInstance"
| "CreateInstance"
| "StopInstance"
| "StartInstance"
| "RebootInstance"
| "OpenInstancePublicPorts"
| "PutInstancePublicPorts"
| "CloseInstancePublicPorts"
| "AllocateStaticIp"
| "ReleaseStaticIp"
| "AttachStaticIp"
| "DetachStaticIp"
| "UpdateDomainEntry"
| "DeleteDomainEntry"
| "CreateDomain"
| "DeleteDomain"
| "CreateInstanceSnapshot"
| "DeleteInstanceSnapshot"
| "CreateInstancesFromSnapshot"
| "CreateLoadBalancer"
| "DeleteLoadBalancer"
| "AttachInstancesToLoadBalancer"
| "DetachInstancesFromLoadBalancer"
| "UpdateLoadBalancerAttribute"
| "CreateLoadBalancerTlsCertificate"
| "DeleteLoadBalancerTlsCertificate"
| "AttachLoadBalancerTlsCertificate"
| "CreateDisk"
| "DeleteDisk"
| "AttachDisk"
| "DetachDisk"
| "CreateDiskSnapshot"
| "DeleteDiskSnapshot"
| "CreateDiskFromSnapshot"
| "CreateRelationalDatabase"
| "UpdateRelationalDatabase"
| "DeleteRelationalDatabase"
| "CreateRelationalDatabaseFromSnapshot"
| "CreateRelationalDatabaseSnapshot"
| "DeleteRelationalDatabaseSnapshot"
| "UpdateRelationalDatabaseParameters"
| "StartRelationalDatabase"
| "RebootRelationalDatabase"
| "StopRelationalDatabase"
| "EnableAddOn"
| "DisableAddOn"
| "PutAlarm"
| "GetAlarms"
| "DeleteAlarm"
| "TestAlarm"
| "CreateContactMethod"
| "GetContactMethods"
| "SendContactMethodVerification"
| "DeleteContactMethod"
| "CreateDistribution"
| "UpdateDistribution"
| "DeleteDistribution"
| "ResetDistributionCache"
| "AttachCertificateToDistribution"
| "DetachCertificateFromDistribution"
| "UpdateDistributionBundle"
| "CreateCertificate"
| "DeleteCertificate"
| cmnP.UnexpectedEnumValue;

// refs: 77 - tags: output, named, enum
export type OperationStatus =
| "NotStarted"
| "Started"
| "Failed"
| "Completed"
| "Succeeded"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface CertificateSummary {
  certificateArn?: string | null;
  certificateName?: string | null;
  domainName?: string | null;
  certificateDetail?: Certificate | null;
  tags?: Tag[] | null;
}
function toCertificateSummary(root: jsonP.JSONValue): CertificateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateArn": "s",
      "certificateName": "s",
      "domainName": "s",
      "certificateDetail": toCertificate,
      "tags": [toTag],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Certificate {
  arn?: string | null;
  name?: string | null;
  domainName?: string | null;
  status?: CertificateStatus | null;
  serialNumber?: string | null;
  subjectAlternativeNames?: string[] | null;
  domainValidationRecords?: DomainValidationRecord[] | null;
  requestFailureReason?: string | null;
  inUseResourceCount?: number | null;
  keyAlgorithm?: string | null;
  createdAt?: Date | number | null;
  issuedAt?: Date | number | null;
  issuerCA?: string | null;
  notBefore?: Date | number | null;
  notAfter?: Date | number | null;
  eligibleToRenew?: string | null;
  renewalSummary?: RenewalSummary | null;
  revokedAt?: Date | number | null;
  revocationReason?: string | null;
  tags?: Tag[] | null;
  supportCode?: string | null;
}
function toCertificate(root: jsonP.JSONValue): Certificate {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "domainName": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<CertificateStatus>(x),
      "serialNumber": "s",
      "subjectAlternativeNames": ["s"],
      "domainValidationRecords": [toDomainValidationRecord],
      "requestFailureReason": "s",
      "inUseResourceCount": "n",
      "keyAlgorithm": "s",
      "createdAt": "d",
      "issuedAt": "d",
      "issuerCA": "s",
      "notBefore": "d",
      "notAfter": "d",
      "eligibleToRenew": "s",
      "renewalSummary": toRenewalSummary,
      "revokedAt": "d",
      "revocationReason": "s",
      "tags": [toTag],
      "supportCode": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface DomainValidationRecord {
  domainName?: string | null;
  resourceRecord?: ResourceRecord | null;
}
function toDomainValidationRecord(root: jsonP.JSONValue): DomainValidationRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "domainName": "s",
      "resourceRecord": toResourceRecord,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ResourceRecord {
  name?: string | null;
  type?: string | null;
  value?: string | null;
}
function toResourceRecord(root: jsonP.JSONValue): ResourceRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "type": "s",
      "value": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RenewalSummary {
  domainValidationRecords?: DomainValidationRecord[] | null;
  renewalStatus?: RenewalStatus | null;
  renewalStatusReason?: string | null;
  updatedAt?: Date | number | null;
}
function toRenewalSummary(root: jsonP.JSONValue): RenewalSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "domainValidationRecords": [toDomainValidationRecord],
      "renewalStatus": (x: jsonP.JSONValue) => cmnP.readEnum<RenewalStatus>(x),
      "renewalStatusReason": "s",
      "updatedAt": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RenewalStatus =
| "PendingAutoRenewal"
| "PendingValidation"
| "Success"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface LightsailDistribution {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  alternativeDomainNames?: string[] | null;
  status?: string | null;
  isEnabled?: boolean | null;
  domainName?: string | null;
  bundleId?: string | null;
  certificateName?: string | null;
  origin?: Origin | null;
  originPublicDNS?: string | null;
  defaultCacheBehavior?: CacheBehavior | null;
  cacheBehaviorSettings?: CacheSettings | null;
  cacheBehaviors?: CacheBehaviorPerPath[] | null;
  ableToUpdateBundle?: boolean | null;
  tags?: Tag[] | null;
}
function toLightsailDistribution(root: jsonP.JSONValue): LightsailDistribution {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "alternativeDomainNames": ["s"],
      "status": "s",
      "isEnabled": "b",
      "domainName": "s",
      "bundleId": "s",
      "certificateName": "s",
      "origin": toOrigin,
      "originPublicDNS": "s",
      "defaultCacheBehavior": toCacheBehavior,
      "cacheBehaviorSettings": toCacheSettings,
      "cacheBehaviors": [toCacheBehaviorPerPath],
      "ableToUpdateBundle": "b",
      "tags": [toTag],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Origin {
  name?: string | null;
  resourceType?: ResourceType | null;
  regionName?: RegionName | null;
  protocolPolicy?: OriginProtocolPolicyEnum | null;
}
function toOrigin(root: jsonP.JSONValue): Origin {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "regionName": (x: jsonP.JSONValue) => cmnP.readEnum<RegionName>(x),
      "protocolPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<OriginProtocolPolicyEnum>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface KeyPair {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  fingerprint?: string | null;
}
function toKeyPair(root: jsonP.JSONValue): KeyPair {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "fingerprint": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Alarm {
  name?: string | null;
  arn?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  supportCode?: string | null;
  monitoredResourceInfo?: MonitoredResourceInfo | null;
  comparisonOperator?: ComparisonOperator | null;
  evaluationPeriods?: number | null;
  period?: number | null;
  threshold?: number | null;
  datapointsToAlarm?: number | null;
  treatMissingData?: TreatMissingData | null;
  statistic?: MetricStatistic | null;
  metricName?: MetricName | null;
  state?: AlarmState | null;
  unit?: MetricUnit | null;
  contactProtocols?: ContactProtocol[] | null;
  notificationTriggers?: AlarmState[] | null;
  notificationEnabled?: boolean | null;
}
function toAlarm(root: jsonP.JSONValue): Alarm {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "supportCode": "s",
      "monitoredResourceInfo": toMonitoredResourceInfo,
      "comparisonOperator": (x: jsonP.JSONValue) => cmnP.readEnum<ComparisonOperator>(x),
      "evaluationPeriods": "n",
      "period": "n",
      "threshold": "n",
      "datapointsToAlarm": "n",
      "treatMissingData": (x: jsonP.JSONValue) => cmnP.readEnum<TreatMissingData>(x),
      "statistic": (x: jsonP.JSONValue) => cmnP.readEnum<MetricStatistic>(x),
      "metricName": (x: jsonP.JSONValue) => cmnP.readEnum<MetricName>(x),
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<AlarmState>(x),
      "unit": (x: jsonP.JSONValue) => cmnP.readEnum<MetricUnit>(x),
      "contactProtocols": [(x: jsonP.JSONValue) => cmnP.readEnum<ContactProtocol>(x)],
      "notificationTriggers": [(x: jsonP.JSONValue) => cmnP.readEnum<AlarmState>(x)],
      "notificationEnabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MonitoredResourceInfo {
  arn?: string | null;
  name?: string | null;
  resourceType?: ResourceType | null;
}
function toMonitoredResourceInfo(root: jsonP.JSONValue): MonitoredResourceInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AutoSnapshotDetails {
  date?: string | null;
  createdAt?: Date | number | null;
  status?: AutoSnapshotStatus | null;
  fromAttachedDisks?: AttachedDisk[] | null;
}
function toAutoSnapshotDetails(root: jsonP.JSONValue): AutoSnapshotDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "date": "s",
      "createdAt": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AutoSnapshotStatus>(x),
      "fromAttachedDisks": [toAttachedDisk],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AutoSnapshotStatus =
| "Success"
| "Failed"
| "InProgress"
| "NotFound"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AttachedDisk {
  path?: string | null;
  sizeInGb?: number | null;
}
function toAttachedDisk(root: jsonP.JSONValue): AttachedDisk {
  return jsonP.readObj({
    required: {},
    optional: {
      "path": "s",
      "sizeInGb": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Blueprint {
  blueprintId?: string | null;
  name?: string | null;
  group?: string | null;
  type?: BlueprintType | null;
  description?: string | null;
  isActive?: boolean | null;
  minPower?: number | null;
  version?: string | null;
  versionCode?: string | null;
  productUrl?: string | null;
  licenseUrl?: string | null;
  platform?: InstancePlatform | null;
}
function toBlueprint(root: jsonP.JSONValue): Blueprint {
  return jsonP.readObj({
    required: {},
    optional: {
      "blueprintId": "s",
      "name": "s",
      "group": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<BlueprintType>(x),
      "description": "s",
      "isActive": "b",
      "minPower": "n",
      "version": "s",
      "versionCode": "s",
      "productUrl": "s",
      "licenseUrl": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<InstancePlatform>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type BlueprintType =
| "os"
| "app"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type InstancePlatform =
| "LINUX_UNIX"
| "WINDOWS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Bundle {
  price?: number | null;
  cpuCount?: number | null;
  diskSizeInGb?: number | null;
  bundleId?: string | null;
  instanceType?: string | null;
  isActive?: boolean | null;
  name?: string | null;
  power?: number | null;
  ramSizeInGb?: number | null;
  transferPerMonthInGb?: number | null;
  supportedPlatforms?: InstancePlatform[] | null;
}
function toBundle(root: jsonP.JSONValue): Bundle {
  return jsonP.readObj({
    required: {},
    optional: {
      "price": "n",
      "cpuCount": "n",
      "diskSizeInGb": "n",
      "bundleId": "s",
      "instanceType": "s",
      "isActive": "b",
      "name": "s",
      "power": "n",
      "ramSizeInGb": "n",
      "transferPerMonthInGb": "n",
      "supportedPlatforms": [(x: jsonP.JSONValue) => cmnP.readEnum<InstancePlatform>(x)],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CloudFormationStackRecord {
  name?: string | null;
  arn?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  state?: RecordState | null;
  sourceInfo?: CloudFormationStackRecordSourceInfo[] | null;
  destinationInfo?: DestinationInfo | null;
}
function toCloudFormationStackRecord(root: jsonP.JSONValue): CloudFormationStackRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<RecordState>(x),
      "sourceInfo": [toCloudFormationStackRecordSourceInfo],
      "destinationInfo": toDestinationInfo,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RecordState =
| "Started"
| "Succeeded"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface CloudFormationStackRecordSourceInfo {
  resourceType?: CloudFormationStackRecordSourceType | null;
  name?: string | null;
  arn?: string | null;
}
function toCloudFormationStackRecordSourceInfo(root: jsonP.JSONValue): CloudFormationStackRecordSourceInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<CloudFormationStackRecordSourceType>(x),
      "name": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type CloudFormationStackRecordSourceType =
| "ExportSnapshotRecord"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface DestinationInfo {
  id?: string | null;
  service?: string | null;
}
function toDestinationInfo(root: jsonP.JSONValue): DestinationInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "service": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ContactMethod {
  contactEndpoint?: string | null;
  status?: ContactMethodStatus | null;
  protocol?: ContactProtocol | null;
  name?: string | null;
  arn?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  supportCode?: string | null;
}
function toContactMethod(root: jsonP.JSONValue): ContactMethod {
  return jsonP.readObj({
    required: {},
    optional: {
      "contactEndpoint": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ContactMethodStatus>(x),
      "protocol": (x: jsonP.JSONValue) => cmnP.readEnum<ContactProtocol>(x),
      "name": "s",
      "arn": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "supportCode": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ContactMethodStatus =
| "PendingVerification"
| "Valid"
| "Invalid"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface Disk {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  addOns?: AddOn[] | null;
  sizeInGb?: number | null;
  isSystemDisk?: boolean | null;
  iops?: number | null;
  path?: string | null;
  state?: DiskState | null;
  attachedTo?: string | null;
  isAttached?: boolean | null;
  attachmentState?: string | null;
  gbInUse?: number | null;
}
function toDisk(root: jsonP.JSONValue): Disk {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "addOns": [toAddOn],
      "sizeInGb": "n",
      "isSystemDisk": "b",
      "iops": "n",
      "path": "s",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<DiskState>(x),
      "attachedTo": "s",
      "isAttached": "b",
      "attachmentState": "s",
      "gbInUse": "n",
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface AddOn {
  name?: string | null;
  status?: string | null;
  snapshotTimeOfDay?: string | null;
  nextSnapshotTimeOfDay?: string | null;
}
function toAddOn(root: jsonP.JSONValue): AddOn {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "status": "s",
      "snapshotTimeOfDay": "s",
      "nextSnapshotTimeOfDay": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type DiskState =
| "pending"
| "error"
| "available"
| "in-use"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface DiskSnapshot {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  sizeInGb?: number | null;
  state?: DiskSnapshotState | null;
  progress?: string | null;
  fromDiskName?: string | null;
  fromDiskArn?: string | null;
  fromInstanceName?: string | null;
  fromInstanceArn?: string | null;
  isFromAutoSnapshot?: boolean | null;
}
function toDiskSnapshot(root: jsonP.JSONValue): DiskSnapshot {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "sizeInGb": "n",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<DiskSnapshotState>(x),
      "progress": "s",
      "fromDiskName": "s",
      "fromDiskArn": "s",
      "fromInstanceName": "s",
      "fromInstanceArn": "s",
      "isFromAutoSnapshot": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DiskSnapshotState =
| "pending"
| "completed"
| "error"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DistributionBundle {
  bundleId?: string | null;
  name?: string | null;
  price?: number | null;
  transferPerMonthInGb?: number | null;
  isActive?: boolean | null;
}
function toDistributionBundle(root: jsonP.JSONValue): DistributionBundle {
  return jsonP.readObj({
    required: {},
    optional: {
      "bundleId": "s",
      "name": "s",
      "price": "n",
      "transferPerMonthInGb": "n",
      "isActive": "b",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface MetricDatapoint {
  average?: number | null;
  maximum?: number | null;
  minimum?: number | null;
  sampleCount?: number | null;
  sum?: number | null;
  timestamp?: Date | number | null;
  unit?: MetricUnit | null;
}
function toMetricDatapoint(root: jsonP.JSONValue): MetricDatapoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "average": "n",
      "maximum": "n",
      "minimum": "n",
      "sampleCount": "n",
      "sum": "n",
      "timestamp": "d",
      "unit": (x: jsonP.JSONValue) => cmnP.readEnum<MetricUnit>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Domain {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  domainEntries?: DomainEntry[] | null;
}
function toDomain(root: jsonP.JSONValue): Domain {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "domainEntries": [toDomainEntry],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExportSnapshotRecord {
  name?: string | null;
  arn?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  state?: RecordState | null;
  sourceInfo?: ExportSnapshotRecordSourceInfo | null;
  destinationInfo?: DestinationInfo | null;
}
function toExportSnapshotRecord(root: jsonP.JSONValue): ExportSnapshotRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<RecordState>(x),
      "sourceInfo": toExportSnapshotRecordSourceInfo,
      "destinationInfo": toDestinationInfo,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExportSnapshotRecordSourceInfo {
  resourceType?: ExportSnapshotRecordSourceType | null;
  createdAt?: Date | number | null;
  name?: string | null;
  arn?: string | null;
  fromResourceName?: string | null;
  fromResourceArn?: string | null;
  instanceSnapshotInfo?: InstanceSnapshotInfo | null;
  diskSnapshotInfo?: DiskSnapshotInfo | null;
}
function toExportSnapshotRecordSourceInfo(root: jsonP.JSONValue): ExportSnapshotRecordSourceInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ExportSnapshotRecordSourceType>(x),
      "createdAt": "d",
      "name": "s",
      "arn": "s",
      "fromResourceName": "s",
      "fromResourceArn": "s",
      "instanceSnapshotInfo": toInstanceSnapshotInfo,
      "diskSnapshotInfo": toDiskSnapshotInfo,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ExportSnapshotRecordSourceType =
| "InstanceSnapshot"
| "DiskSnapshot"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface InstanceSnapshotInfo {
  fromBundleId?: string | null;
  fromBlueprintId?: string | null;
  fromDiskInfo?: DiskInfo[] | null;
}
function toInstanceSnapshotInfo(root: jsonP.JSONValue): InstanceSnapshotInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "fromBundleId": "s",
      "fromBlueprintId": "s",
      "fromDiskInfo": [toDiskInfo],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DiskInfo {
  name?: string | null;
  path?: string | null;
  sizeInGb?: number | null;
  isSystemDisk?: boolean | null;
}
function toDiskInfo(root: jsonP.JSONValue): DiskInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "path": "s",
      "sizeInGb": "n",
      "isSystemDisk": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DiskSnapshotInfo {
  sizeInGb?: number | null;
}
function toDiskSnapshotInfo(root: jsonP.JSONValue): DiskSnapshotInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "sizeInGb": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Instance {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  blueprintId?: string | null;
  blueprintName?: string | null;
  bundleId?: string | null;
  addOns?: AddOn[] | null;
  isStaticIp?: boolean | null;
  privateIpAddress?: string | null;
  publicIpAddress?: string | null;
  ipv6Address?: string | null;
  hardware?: InstanceHardware | null;
  networking?: InstanceNetworking | null;
  state?: InstanceState | null;
  username?: string | null;
  sshKeyName?: string | null;
}
function toInstance(root: jsonP.JSONValue): Instance {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "blueprintId": "s",
      "blueprintName": "s",
      "bundleId": "s",
      "addOns": [toAddOn],
      "isStaticIp": "b",
      "privateIpAddress": "s",
      "publicIpAddress": "s",
      "ipv6Address": "s",
      "hardware": toInstanceHardware,
      "networking": toInstanceNetworking,
      "state": toInstanceState,
      "username": "s",
      "sshKeyName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface InstanceHardware {
  cpuCount?: number | null;
  disks?: Disk[] | null;
  ramSizeInGb?: number | null;
}
function toInstanceHardware(root: jsonP.JSONValue): InstanceHardware {
  return jsonP.readObj({
    required: {},
    optional: {
      "cpuCount": "n",
      "disks": [toDisk],
      "ramSizeInGb": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface InstanceNetworking {
  monthlyTransfer?: MonthlyTransfer | null;
  ports?: InstancePortInfo[] | null;
}
function toInstanceNetworking(root: jsonP.JSONValue): InstanceNetworking {
  return jsonP.readObj({
    required: {},
    optional: {
      "monthlyTransfer": toMonthlyTransfer,
      "ports": [toInstancePortInfo],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface MonthlyTransfer {
  gbPerMonthAllocated?: number | null;
}
function toMonthlyTransfer(root: jsonP.JSONValue): MonthlyTransfer {
  return jsonP.readObj({
    required: {},
    optional: {
      "gbPerMonthAllocated": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface InstancePortInfo {
  fromPort?: number | null;
  toPort?: number | null;
  protocol?: NetworkProtocol | null;
  accessFrom?: string | null;
  accessType?: PortAccessType | null;
  commonName?: string | null;
  accessDirection?: AccessDirection | null;
  cidrs?: string[] | null;
  cidrListAliases?: string[] | null;
}
function toInstancePortInfo(root: jsonP.JSONValue): InstancePortInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "fromPort": "n",
      "toPort": "n",
      "protocol": (x: jsonP.JSONValue) => cmnP.readEnum<NetworkProtocol>(x),
      "accessFrom": "s",
      "accessType": (x: jsonP.JSONValue) => cmnP.readEnum<PortAccessType>(x),
      "commonName": "s",
      "accessDirection": (x: jsonP.JSONValue) => cmnP.readEnum<AccessDirection>(x),
      "cidrs": ["s"],
      "cidrListAliases": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type PortAccessType =
| "Public"
| "Private"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type AccessDirection =
| "inbound"
| "outbound"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface InstanceState {
  code?: number | null;
  name?: string | null;
}
function toInstanceState(root: jsonP.JSONValue): InstanceState {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "n",
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceAccessDetails {
  certKey?: string | null;
  expiresAt?: Date | number | null;
  ipAddress?: string | null;
  password?: string | null;
  passwordData?: PasswordData | null;
  privateKey?: string | null;
  protocol?: InstanceAccessProtocol | null;
  instanceName?: string | null;
  username?: string | null;
  hostKeys?: HostKeyAttributes[] | null;
}
function toInstanceAccessDetails(root: jsonP.JSONValue): InstanceAccessDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "certKey": "s",
      "expiresAt": "d",
      "ipAddress": "s",
      "password": "s",
      "passwordData": toPasswordData,
      "privateKey": "s",
      "protocol": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceAccessProtocol>(x),
      "instanceName": "s",
      "username": "s",
      "hostKeys": [toHostKeyAttributes],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PasswordData {
  ciphertext?: string | null;
  keyPairName?: string | null;
}
function toPasswordData(root: jsonP.JSONValue): PasswordData {
  return jsonP.readObj({
    required: {},
    optional: {
      "ciphertext": "s",
      "keyPairName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HostKeyAttributes {
  algorithm?: string | null;
  publicKey?: string | null;
  witnessedAt?: Date | number | null;
  fingerprintSHA1?: string | null;
  fingerprintSHA256?: string | null;
  notValidBefore?: Date | number | null;
  notValidAfter?: Date | number | null;
}
function toHostKeyAttributes(root: jsonP.JSONValue): HostKeyAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "algorithm": "s",
      "publicKey": "s",
      "witnessedAt": "d",
      "fingerprintSHA1": "s",
      "fingerprintSHA256": "s",
      "notValidBefore": "d",
      "notValidAfter": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstancePortState {
  fromPort?: number | null;
  toPort?: number | null;
  protocol?: NetworkProtocol | null;
  state?: PortState | null;
  cidrs?: string[] | null;
  cidrListAliases?: string[] | null;
}
function toInstancePortState(root: jsonP.JSONValue): InstancePortState {
  return jsonP.readObj({
    required: {},
    optional: {
      "fromPort": "n",
      "toPort": "n",
      "protocol": (x: jsonP.JSONValue) => cmnP.readEnum<NetworkProtocol>(x),
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<PortState>(x),
      "cidrs": ["s"],
      "cidrListAliases": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type PortState =
| "open"
| "closed"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface InstanceSnapshot {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  state?: InstanceSnapshotState | null;
  progress?: string | null;
  fromAttachedDisks?: Disk[] | null;
  fromInstanceName?: string | null;
  fromInstanceArn?: string | null;
  fromBlueprintId?: string | null;
  fromBundleId?: string | null;
  isFromAutoSnapshot?: boolean | null;
  sizeInGb?: number | null;
}
function toInstanceSnapshot(root: jsonP.JSONValue): InstanceSnapshot {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceSnapshotState>(x),
      "progress": "s",
      "fromAttachedDisks": [toDisk],
      "fromInstanceName": "s",
      "fromInstanceArn": "s",
      "fromBlueprintId": "s",
      "fromBundleId": "s",
      "isFromAutoSnapshot": "b",
      "sizeInGb": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type InstanceSnapshotState =
| "pending"
| "error"
| "available"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface LoadBalancer {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  dnsName?: string | null;
  state?: LoadBalancerState | null;
  protocol?: LoadBalancerProtocol | null;
  publicPorts?: number[] | null;
  healthCheckPath?: string | null;
  instancePort?: number | null;
  instanceHealthSummary?: InstanceHealthSummary[] | null;
  tlsCertificateSummaries?: LoadBalancerTlsCertificateSummary[] | null;
  configurationOptions?: { [key in LoadBalancerAttributeName]: string | null | undefined } | null;
}
function toLoadBalancer(root: jsonP.JSONValue): LoadBalancer {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "dnsName": "s",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerState>(x),
      "protocol": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerProtocol>(x),
      "publicPorts": ["n"],
      "healthCheckPath": "s",
      "instancePort": "n",
      "instanceHealthSummary": [toInstanceHealthSummary],
      "tlsCertificateSummaries": [toLoadBalancerTlsCertificateSummary],
      "configurationOptions": x => jsonP.readMap(x => cmnP.readEnumReq<LoadBalancerAttributeName>(x), String, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type LoadBalancerState =
| "active"
| "provisioning"
| "active_impaired"
| "failed"
| "unknown"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type LoadBalancerProtocol =
| "HTTP_HTTPS"
| "HTTP"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface InstanceHealthSummary {
  instanceName?: string | null;
  instanceHealth?: InstanceHealthState | null;
  instanceHealthReason?: InstanceHealthReason | null;
}
function toInstanceHealthSummary(root: jsonP.JSONValue): InstanceHealthSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "instanceName": "s",
      "instanceHealth": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceHealthState>(x),
      "instanceHealthReason": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceHealthReason>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type InstanceHealthState =
| "initial"
| "healthy"
| "unhealthy"
| "unused"
| "draining"
| "unavailable"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type InstanceHealthReason =
| "Lb.RegistrationInProgress"
| "Lb.InitialHealthChecking"
| "Lb.InternalError"
| "Instance.ResponseCodeMismatch"
| "Instance.Timeout"
| "Instance.FailedHealthChecks"
| "Instance.NotRegistered"
| "Instance.NotInUse"
| "Instance.DeregistrationInProgress"
| "Instance.InvalidState"
| "Instance.IpUnusable"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface LoadBalancerTlsCertificateSummary {
  name?: string | null;
  isAttached?: boolean | null;
}
function toLoadBalancerTlsCertificateSummary(root: jsonP.JSONValue): LoadBalancerTlsCertificateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "isAttached": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LoadBalancerTlsCertificate {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  loadBalancerName?: string | null;
  isAttached?: boolean | null;
  status?: LoadBalancerTlsCertificateStatus | null;
  domainName?: string | null;
  domainValidationRecords?: LoadBalancerTlsCertificateDomainValidationRecord[] | null;
  failureReason?: LoadBalancerTlsCertificateFailureReason | null;
  issuedAt?: Date | number | null;
  issuer?: string | null;
  keyAlgorithm?: string | null;
  notAfter?: Date | number | null;
  notBefore?: Date | number | null;
  renewalSummary?: LoadBalancerTlsCertificateRenewalSummary | null;
  revocationReason?: LoadBalancerTlsCertificateRevocationReason | null;
  revokedAt?: Date | number | null;
  serial?: string | null;
  signatureAlgorithm?: string | null;
  subject?: string | null;
  subjectAlternativeNames?: string[] | null;
}
function toLoadBalancerTlsCertificate(root: jsonP.JSONValue): LoadBalancerTlsCertificate {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "loadBalancerName": "s",
      "isAttached": "b",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerTlsCertificateStatus>(x),
      "domainName": "s",
      "domainValidationRecords": [toLoadBalancerTlsCertificateDomainValidationRecord],
      "failureReason": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerTlsCertificateFailureReason>(x),
      "issuedAt": "d",
      "issuer": "s",
      "keyAlgorithm": "s",
      "notAfter": "d",
      "notBefore": "d",
      "renewalSummary": toLoadBalancerTlsCertificateRenewalSummary,
      "revocationReason": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerTlsCertificateRevocationReason>(x),
      "revokedAt": "d",
      "serial": "s",
      "signatureAlgorithm": "s",
      "subject": "s",
      "subjectAlternativeNames": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type LoadBalancerTlsCertificateStatus =
| "PENDING_VALIDATION"
| "ISSUED"
| "INACTIVE"
| "EXPIRED"
| "VALIDATION_TIMED_OUT"
| "REVOKED"
| "FAILED"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface LoadBalancerTlsCertificateDomainValidationRecord {
  name?: string | null;
  type?: string | null;
  value?: string | null;
  validationStatus?: LoadBalancerTlsCertificateDomainStatus | null;
  domainName?: string | null;
}
function toLoadBalancerTlsCertificateDomainValidationRecord(root: jsonP.JSONValue): LoadBalancerTlsCertificateDomainValidationRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "type": "s",
      "value": "s",
      "validationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerTlsCertificateDomainStatus>(x),
      "domainName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type LoadBalancerTlsCertificateDomainStatus =
| "PENDING_VALIDATION"
| "FAILED"
| "SUCCESS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type LoadBalancerTlsCertificateFailureReason =
| "NO_AVAILABLE_CONTACTS"
| "ADDITIONAL_VERIFICATION_REQUIRED"
| "DOMAIN_NOT_ALLOWED"
| "INVALID_PUBLIC_DOMAIN"
| "OTHER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface LoadBalancerTlsCertificateRenewalSummary {
  renewalStatus?: LoadBalancerTlsCertificateRenewalStatus | null;
  domainValidationOptions?: LoadBalancerTlsCertificateDomainValidationOption[] | null;
}
function toLoadBalancerTlsCertificateRenewalSummary(root: jsonP.JSONValue): LoadBalancerTlsCertificateRenewalSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "renewalStatus": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerTlsCertificateRenewalStatus>(x),
      "domainValidationOptions": [toLoadBalancerTlsCertificateDomainValidationOption],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type LoadBalancerTlsCertificateRenewalStatus =
| "PENDING_AUTO_RENEWAL"
| "PENDING_VALIDATION"
| "SUCCESS"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface LoadBalancerTlsCertificateDomainValidationOption {
  domainName?: string | null;
  validationStatus?: LoadBalancerTlsCertificateDomainStatus | null;
}
function toLoadBalancerTlsCertificateDomainValidationOption(root: jsonP.JSONValue): LoadBalancerTlsCertificateDomainValidationOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "domainName": "s",
      "validationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<LoadBalancerTlsCertificateDomainStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type LoadBalancerTlsCertificateRevocationReason =
| "UNSPECIFIED"
| "KEY_COMPROMISE"
| "CA_COMPROMISE"
| "AFFILIATION_CHANGED"
| "SUPERCEDED"
| "CESSATION_OF_OPERATION"
| "CERTIFICATE_HOLD"
| "REMOVE_FROM_CRL"
| "PRIVILEGE_WITHDRAWN"
| "A_A_COMPROMISE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Region {
  continentCode?: string | null;
  description?: string | null;
  displayName?: string | null;
  name?: RegionName | null;
  availabilityZones?: AvailabilityZone[] | null;
  relationalDatabaseAvailabilityZones?: AvailabilityZone[] | null;
}
function toRegion(root: jsonP.JSONValue): Region {
  return jsonP.readObj({
    required: {},
    optional: {
      "continentCode": "s",
      "description": "s",
      "displayName": "s",
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<RegionName>(x),
      "availabilityZones": [toAvailabilityZone],
      "relationalDatabaseAvailabilityZones": [toAvailabilityZone],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AvailabilityZone {
  zoneName?: string | null;
  state?: string | null;
}
function toAvailabilityZone(root: jsonP.JSONValue): AvailabilityZone {
  return jsonP.readObj({
    required: {},
    optional: {
      "zoneName": "s",
      "state": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RelationalDatabase {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  relationalDatabaseBlueprintId?: string | null;
  relationalDatabaseBundleId?: string | null;
  masterDatabaseName?: string | null;
  hardware?: RelationalDatabaseHardware | null;
  state?: string | null;
  secondaryAvailabilityZone?: string | null;
  backupRetentionEnabled?: boolean | null;
  pendingModifiedValues?: PendingModifiedRelationalDatabaseValues | null;
  engine?: string | null;
  engineVersion?: string | null;
  latestRestorableTime?: Date | number | null;
  masterUsername?: string | null;
  parameterApplyStatus?: string | null;
  preferredBackupWindow?: string | null;
  preferredMaintenanceWindow?: string | null;
  publiclyAccessible?: boolean | null;
  masterEndpoint?: RelationalDatabaseEndpoint | null;
  pendingMaintenanceActions?: PendingMaintenanceAction[] | null;
  caCertificateIdentifier?: string | null;
}
function toRelationalDatabase(root: jsonP.JSONValue): RelationalDatabase {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "relationalDatabaseBlueprintId": "s",
      "relationalDatabaseBundleId": "s",
      "masterDatabaseName": "s",
      "hardware": toRelationalDatabaseHardware,
      "state": "s",
      "secondaryAvailabilityZone": "s",
      "backupRetentionEnabled": "b",
      "pendingModifiedValues": toPendingModifiedRelationalDatabaseValues,
      "engine": "s",
      "engineVersion": "s",
      "latestRestorableTime": "d",
      "masterUsername": "s",
      "parameterApplyStatus": "s",
      "preferredBackupWindow": "s",
      "preferredMaintenanceWindow": "s",
      "publiclyAccessible": "b",
      "masterEndpoint": toRelationalDatabaseEndpoint,
      "pendingMaintenanceActions": [toPendingMaintenanceAction],
      "caCertificateIdentifier": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RelationalDatabaseHardware {
  cpuCount?: number | null;
  diskSizeInGb?: number | null;
  ramSizeInGb?: number | null;
}
function toRelationalDatabaseHardware(root: jsonP.JSONValue): RelationalDatabaseHardware {
  return jsonP.readObj({
    required: {},
    optional: {
      "cpuCount": "n",
      "diskSizeInGb": "n",
      "ramSizeInGb": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PendingModifiedRelationalDatabaseValues {
  masterUserPassword?: string | null;
  engineVersion?: string | null;
  backupRetentionEnabled?: boolean | null;
}
function toPendingModifiedRelationalDatabaseValues(root: jsonP.JSONValue): PendingModifiedRelationalDatabaseValues {
  return jsonP.readObj({
    required: {},
    optional: {
      "masterUserPassword": "s",
      "engineVersion": "s",
      "backupRetentionEnabled": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RelationalDatabaseEndpoint {
  port?: number | null;
  address?: string | null;
}
function toRelationalDatabaseEndpoint(root: jsonP.JSONValue): RelationalDatabaseEndpoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "port": "n",
      "address": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PendingMaintenanceAction {
  action?: string | null;
  description?: string | null;
  currentApplyDate?: Date | number | null;
}
function toPendingMaintenanceAction(root: jsonP.JSONValue): PendingMaintenanceAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "action": "s",
      "description": "s",
      "currentApplyDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RelationalDatabaseBlueprint {
  blueprintId?: string | null;
  engine?: RelationalDatabaseEngine | null;
  engineVersion?: string | null;
  engineDescription?: string | null;
  engineVersionDescription?: string | null;
  isEngineDefault?: boolean | null;
}
function toRelationalDatabaseBlueprint(root: jsonP.JSONValue): RelationalDatabaseBlueprint {
  return jsonP.readObj({
    required: {},
    optional: {
      "blueprintId": "s",
      "engine": (x: jsonP.JSONValue) => cmnP.readEnum<RelationalDatabaseEngine>(x),
      "engineVersion": "s",
      "engineDescription": "s",
      "engineVersionDescription": "s",
      "isEngineDefault": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RelationalDatabaseEngine =
| "mysql"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface RelationalDatabaseBundle {
  bundleId?: string | null;
  name?: string | null;
  price?: number | null;
  ramSizeInGb?: number | null;
  diskSizeInGb?: number | null;
  transferPerMonthInGb?: number | null;
  cpuCount?: number | null;
  isEncrypted?: boolean | null;
  isActive?: boolean | null;
}
function toRelationalDatabaseBundle(root: jsonP.JSONValue): RelationalDatabaseBundle {
  return jsonP.readObj({
    required: {},
    optional: {
      "bundleId": "s",
      "name": "s",
      "price": "n",
      "ramSizeInGb": "n",
      "diskSizeInGb": "n",
      "transferPerMonthInGb": "n",
      "cpuCount": "n",
      "isEncrypted": "b",
      "isActive": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RelationalDatabaseEvent {
  resource?: string | null;
  createdAt?: Date | number | null;
  message?: string | null;
  eventCategories?: string[] | null;
}
function toRelationalDatabaseEvent(root: jsonP.JSONValue): RelationalDatabaseEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "resource": "s",
      "createdAt": "d",
      "message": "s",
      "eventCategories": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LogEvent {
  createdAt?: Date | number | null;
  message?: string | null;
}
function toLogEvent(root: jsonP.JSONValue): LogEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "createdAt": "d",
      "message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RelationalDatabaseSnapshot {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  tags?: Tag[] | null;
  engine?: string | null;
  engineVersion?: string | null;
  sizeInGb?: number | null;
  state?: string | null;
  fromRelationalDatabaseName?: string | null;
  fromRelationalDatabaseArn?: string | null;
  fromRelationalDatabaseBundleId?: string | null;
  fromRelationalDatabaseBlueprintId?: string | null;
}
function toRelationalDatabaseSnapshot(root: jsonP.JSONValue): RelationalDatabaseSnapshot {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "tags": [toTag],
      "engine": "s",
      "engineVersion": "s",
      "sizeInGb": "n",
      "state": "s",
      "fromRelationalDatabaseName": "s",
      "fromRelationalDatabaseArn": "s",
      "fromRelationalDatabaseBundleId": "s",
      "fromRelationalDatabaseBlueprintId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface StaticIp {
  name?: string | null;
  arn?: string | null;
  supportCode?: string | null;
  createdAt?: Date | number | null;
  location?: ResourceLocation | null;
  resourceType?: ResourceType | null;
  ipAddress?: string | null;
  attachedTo?: string | null;
  isAttached?: boolean | null;
}
function toStaticIp(root: jsonP.JSONValue): StaticIp {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
      "supportCode": "s",
      "createdAt": "d",
      "location": toResourceLocation,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "ipAddress": "s",
      "attachedTo": "s",
      "isAttached": "b",
    },
  }, root);
}
