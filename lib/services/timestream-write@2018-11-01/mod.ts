// Autogenerated API client for: Amazon Timestream Write

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class TimestreamWrite {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(TimestreamWrite.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-01",
    "endpointPrefix": "ingest.timestream",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "Timestream Write",
    "serviceFullName": "Amazon Timestream Write",
    "serviceId": "Timestream Write",
    "signatureVersion": "v4",
    "signingName": "timestream",
    "targetPrefix": "Timestream_20181101",
    "uid": "timestream-write-2018-11-01"
  };

  async createDatabase(
    {abortSignal, ...params}: RequestConfig & CreateDatabaseRequest,
  ): Promise<CreateDatabaseResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDatabase",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Database": toDatabase,
      },
    }, await resp.json());
  }

  async createTable(
    {abortSignal, ...params}: RequestConfig & CreateTableRequest,
  ): Promise<CreateTableResponse> {
    const body: JSONObject = {...params,
    RetentionProperties: fromRetentionProperties(params["RetentionProperties"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTable",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Table": toTable,
      },
    }, await resp.json());
  }

  async deleteDatabase(
    {abortSignal, ...params}: RequestConfig & DeleteDatabaseRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDatabase",
    });
  }

  async deleteTable(
    {abortSignal, ...params}: RequestConfig & DeleteTableRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTable",
    });
  }

  async describeDatabase(
    {abortSignal, ...params}: RequestConfig & DescribeDatabaseRequest,
  ): Promise<DescribeDatabaseResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDatabase",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Database": toDatabase,
      },
    }, await resp.json());
  }

  async describeEndpoints(
    {abortSignal, ...params}: RequestConfig & DescribeEndpointsRequest = {},
  ): Promise<DescribeEndpointsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEndpoints",
    });
    return prt.readObj({
      required: {
        "Endpoints": [toEndpoint],
      },
      optional: {},
    }, await resp.json());
  }

  async describeTable(
    {abortSignal, ...params}: RequestConfig & DescribeTableRequest,
  ): Promise<DescribeTableResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTable",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Table": toTable,
      },
    }, await resp.json());
  }

  async listDatabases(
    {abortSignal, ...params}: RequestConfig & ListDatabasesRequest = {},
  ): Promise<ListDatabasesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDatabases",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Databases": [toDatabase],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTables(
    {abortSignal, ...params}: RequestConfig & ListTablesRequest = {},
  ): Promise<ListTablesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTables",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tables": [toTable],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDatabase(
    {abortSignal, ...params}: RequestConfig & UpdateDatabaseRequest,
  ): Promise<UpdateDatabaseResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDatabase",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Database": toDatabase,
      },
    }, await resp.json());
  }

  async updateTable(
    {abortSignal, ...params}: RequestConfig & UpdateTableRequest,
  ): Promise<UpdateTableResponse> {
    const body: JSONObject = {...params,
    RetentionProperties: fromRetentionProperties(params["RetentionProperties"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTable",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Table": toTable,
      },
    }, await resp.json());
  }

  async writeRecords(
    {abortSignal, ...params}: RequestConfig & WriteRecordsRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    CommonAttributes: fromRecord(params["CommonAttributes"]),
    Records: params["Records"]?.map(x => fromRecord(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "WriteRecords",
    });
  }

}

// refs: 1 - tags: named, input
export interface CreateDatabaseRequest {
  DatabaseName: string;
  KmsKeyId?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTableRequest {
  DatabaseName: string;
  TableName: string;
  RetentionProperties?: RetentionProperties | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteDatabaseRequest {
  DatabaseName: string;
}

// refs: 1 - tags: named, input
export interface DeleteTableRequest {
  DatabaseName: string;
  TableName: string;
}

// refs: 1 - tags: named, input
export interface DescribeDatabaseRequest {
  DatabaseName: string;
}

// refs: 1 - tags: named, input
export interface DescribeEndpointsRequest {
}

// refs: 1 - tags: named, input
export interface DescribeTableRequest {
  DatabaseName: string;
  TableName: string;
}

// refs: 1 - tags: named, input
export interface ListDatabasesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTablesRequest {
  DatabaseName?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDatabaseRequest {
  DatabaseName: string;
  KmsKeyId: string;
}

// refs: 1 - tags: named, input
export interface UpdateTableRequest {
  DatabaseName: string;
  TableName: string;
  RetentionProperties: RetentionProperties;
}

// refs: 1 - tags: named, input
export interface WriteRecordsRequest {
  DatabaseName: string;
  TableName: string;
  CommonAttributes?: Record | null;
  Records: Record[];
}

// refs: 1 - tags: named, output
export interface CreateDatabaseResponse {
  Database?: Database | null;
}

// refs: 1 - tags: named, output
export interface CreateTableResponse {
  Table?: Table | null;
}

// refs: 1 - tags: named, output
export interface DescribeDatabaseResponse {
  Database?: Database | null;
}

// refs: 1 - tags: named, output
export interface DescribeEndpointsResponse {
  Endpoints: Endpoint[];
}

// refs: 1 - tags: named, output
export interface DescribeTableResponse {
  Table?: Table | null;
}

// refs: 1 - tags: named, output
export interface ListDatabasesResponse {
  Databases?: Database[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTablesResponse {
  Tables?: Table[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDatabaseResponse {
  Database?: Database | null;
}

// refs: 1 - tags: named, output
export interface UpdateTableResponse {
  Table?: Table | null;
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface RetentionProperties {
  MemoryStoreRetentionPeriodInHours: number;
  MagneticStoreRetentionPeriodInDays: number;
}
function fromRetentionProperties(input?: RetentionProperties | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRetentionProperties(root: JSONValue): RetentionProperties {
  return prt.readObj({
    required: {
      "MemoryStoreRetentionPeriodInHours": "n",
      "MagneticStoreRetentionPeriodInDays": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface Record {
  Dimensions?: Dimension[] | null;
  MeasureName?: string | null;
  MeasureValue?: string | null;
  MeasureValueType?: MeasureValueType | null;
  Time?: string | null;
  TimeUnit?: TimeUnit | null;
}
function fromRecord(input?: Record | null): JSONValue {
  if (!input) return input;
  return {...input,
    Dimensions: input["Dimensions"]?.map(x => fromDimension(x)),
  }
}

// refs: 2 - tags: input, named, interface
export interface Dimension {
  Name: string;
  Value: string;
  DimensionValueType?: DimensionValueType | null;
}
function fromDimension(input?: Dimension | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, enum
export type DimensionValueType =
| "VARCHAR"
;


// refs: 2 - tags: input, named, enum
export type MeasureValueType =
| "DOUBLE"
| "BIGINT"
| "VARCHAR"
| "BOOLEAN"
;


// refs: 2 - tags: input, named, enum
export type TimeUnit =
| "MILLISECONDS"
| "SECONDS"
| "MICROSECONDS"
| "NANOSECONDS"
;


// refs: 4 - tags: output, named, interface
export interface Database {
  Arn?: string | null;
  DatabaseName?: string | null;
  TableCount?: number | null;
  KmsKeyId?: string | null;
  CreationTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
}
function toDatabase(root: JSONValue): Database {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "DatabaseName": "s",
      "TableCount": "n",
      "KmsKeyId": "s",
      "CreationTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Table {
  Arn?: string | null;
  TableName?: string | null;
  DatabaseName?: string | null;
  TableStatus?: TableStatus | null;
  RetentionProperties?: RetentionProperties | null;
  CreationTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
}
function toTable(root: JSONValue): Table {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "TableName": "s",
      "DatabaseName": "s",
      "TableStatus": toTableStatus,
      "RetentionProperties": toRetentionProperties,
      "CreationTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type TableStatus =
| "ACTIVE"
| "DELETING"
;
function toTableStatus(root: JSONValue): TableStatus | null {
  return ( false
    || root == "ACTIVE"
    || root == "DELETING"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Endpoint {
  Address: string;
  CachePeriodInMinutes: number;
}
function toEndpoint(root: JSONValue): Endpoint {
  return prt.readObj({
    required: {
      "Address": "s",
      "CachePeriodInMinutes": "n",
    },
    optional: {},
  }, root);
}
