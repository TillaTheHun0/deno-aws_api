// Autogenerated API client for: Amazon CloudWatch Logs

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CloudWatchLogs {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CloudWatchLogs.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-03-28",
    "endpointPrefix": "logs",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon CloudWatch Logs",
    "serviceId": "CloudWatch Logs",
    "signatureVersion": "v4",
    "targetPrefix": "Logs_20140328",
    "uid": "logs-2014-03-28"
  };

  async associateKmsKey(
    {abortSignal, ...params}: RequestConfig & AssociateKmsKeyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      kmsKeyId: params["kmsKeyId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateKmsKey",
    });
  }

  async cancelExportTask(
    {abortSignal, ...params}: RequestConfig & CancelExportTaskRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      taskId: params["taskId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelExportTask",
    });
  }

  async createExportTask(
    {abortSignal, ...params}: RequestConfig & CreateExportTaskRequest,
  ): Promise<CreateExportTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      taskName: params["taskName"],
      logGroupName: params["logGroupName"],
      logStreamNamePrefix: params["logStreamNamePrefix"],
      from: params["from"],
      to: params["to"],
      destination: params["destination"],
      destinationPrefix: params["destinationPrefix"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateExportTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "taskId": "s",
      },
    }, await resp.json());
  }

  async createLogGroup(
    {abortSignal, ...params}: RequestConfig & CreateLogGroupRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      kmsKeyId: params["kmsKeyId"],
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLogGroup",
    });
  }

  async createLogStream(
    {abortSignal, ...params}: RequestConfig & CreateLogStreamRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      logStreamName: params["logStreamName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLogStream",
    });
  }

  async deleteDestination(
    {abortSignal, ...params}: RequestConfig & DeleteDestinationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      destinationName: params["destinationName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDestination",
    });
  }

  async deleteLogGroup(
    {abortSignal, ...params}: RequestConfig & DeleteLogGroupRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLogGroup",
    });
  }

  async deleteLogStream(
    {abortSignal, ...params}: RequestConfig & DeleteLogStreamRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      logStreamName: params["logStreamName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLogStream",
    });
  }

  async deleteMetricFilter(
    {abortSignal, ...params}: RequestConfig & DeleteMetricFilterRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      filterName: params["filterName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMetricFilter",
    });
  }

  async deleteQueryDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteQueryDefinitionRequest,
  ): Promise<DeleteQueryDefinitionResponse> {
    const body: jsonP.JSONObject = params ? {
      queryDefinitionId: params["queryDefinitionId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteQueryDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "success": "b",
      },
    }, await resp.json());
  }

  async deleteResourcePolicy(
    {abortSignal, ...params}: RequestConfig & DeleteResourcePolicyRequest = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      policyName: params["policyName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResourcePolicy",
    });
  }

  async deleteRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteRetentionPolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRetentionPolicy",
    });
  }

  async deleteSubscriptionFilter(
    {abortSignal, ...params}: RequestConfig & DeleteSubscriptionFilterRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      filterName: params["filterName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSubscriptionFilter",
    });
  }

  async describeDestinations(
    {abortSignal, ...params}: RequestConfig & DescribeDestinationsRequest = {},
  ): Promise<DescribeDestinationsResponse> {
    const body: jsonP.JSONObject = params ? {
      DestinationNamePrefix: params["DestinationNamePrefix"],
      nextToken: params["nextToken"],
      limit: params["limit"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDestinations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "destinations": [toDestination],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeExportTasks(
    {abortSignal, ...params}: RequestConfig & DescribeExportTasksRequest = {},
  ): Promise<DescribeExportTasksResponse> {
    const body: jsonP.JSONObject = params ? {
      taskId: params["taskId"],
      statusCode: params["statusCode"],
      nextToken: params["nextToken"],
      limit: params["limit"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeExportTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "exportTasks": [toExportTask],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeLogGroups(
    {abortSignal, ...params}: RequestConfig & DescribeLogGroupsRequest = {},
  ): Promise<DescribeLogGroupsResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupNamePrefix: params["logGroupNamePrefix"],
      nextToken: params["nextToken"],
      limit: params["limit"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLogGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "logGroups": [toLogGroup],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeLogStreams(
    {abortSignal, ...params}: RequestConfig & DescribeLogStreamsRequest,
  ): Promise<DescribeLogStreamsResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      logStreamNamePrefix: params["logStreamNamePrefix"],
      orderBy: params["orderBy"],
      descending: params["descending"],
      nextToken: params["nextToken"],
      limit: params["limit"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLogStreams",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "logStreams": [toLogStream],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeMetricFilters(
    {abortSignal, ...params}: RequestConfig & DescribeMetricFiltersRequest = {},
  ): Promise<DescribeMetricFiltersResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      filterNamePrefix: params["filterNamePrefix"],
      nextToken: params["nextToken"],
      limit: params["limit"],
      metricName: params["metricName"],
      metricNamespace: params["metricNamespace"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMetricFilters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "metricFilters": [toMetricFilter],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeQueries(
    {abortSignal, ...params}: RequestConfig & DescribeQueriesRequest = {},
  ): Promise<DescribeQueriesResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      status: params["status"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeQueries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "queries": [toQueryInfo],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeQueryDefinitions(
    {abortSignal, ...params}: RequestConfig & DescribeQueryDefinitionsRequest = {},
  ): Promise<DescribeQueryDefinitionsResponse> {
    const body: jsonP.JSONObject = params ? {
      queryDefinitionNamePrefix: params["queryDefinitionNamePrefix"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeQueryDefinitions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "queryDefinitions": [toQueryDefinition],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeResourcePolicies(
    {abortSignal, ...params}: RequestConfig & DescribeResourcePoliciesRequest = {},
  ): Promise<DescribeResourcePoliciesResponse> {
    const body: jsonP.JSONObject = params ? {
      nextToken: params["nextToken"],
      limit: params["limit"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeResourcePolicies",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourcePolicies": [toResourcePolicy],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeSubscriptionFilters(
    {abortSignal, ...params}: RequestConfig & DescribeSubscriptionFiltersRequest,
  ): Promise<DescribeSubscriptionFiltersResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      filterNamePrefix: params["filterNamePrefix"],
      nextToken: params["nextToken"],
      limit: params["limit"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSubscriptionFilters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "subscriptionFilters": [toSubscriptionFilter],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async disassociateKmsKey(
    {abortSignal, ...params}: RequestConfig & DisassociateKmsKeyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateKmsKey",
    });
  }

  async filterLogEvents(
    {abortSignal, ...params}: RequestConfig & FilterLogEventsRequest,
  ): Promise<FilterLogEventsResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      logStreamNames: params["logStreamNames"],
      logStreamNamePrefix: params["logStreamNamePrefix"],
      startTime: params["startTime"],
      endTime: params["endTime"],
      filterPattern: params["filterPattern"],
      nextToken: params["nextToken"],
      limit: params["limit"],
      interleaved: params["interleaved"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "FilterLogEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "events": [toFilteredLogEvent],
        "searchedLogStreams": [toSearchedLogStream],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getLogEvents(
    {abortSignal, ...params}: RequestConfig & GetLogEventsRequest,
  ): Promise<GetLogEventsResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      logStreamName: params["logStreamName"],
      startTime: params["startTime"],
      endTime: params["endTime"],
      nextToken: params["nextToken"],
      limit: params["limit"],
      startFromHead: params["startFromHead"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLogEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "events": [toOutputLogEvent],
        "nextForwardToken": "s",
        "nextBackwardToken": "s",
      },
    }, await resp.json());
  }

  async getLogGroupFields(
    {abortSignal, ...params}: RequestConfig & GetLogGroupFieldsRequest,
  ): Promise<GetLogGroupFieldsResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      time: params["time"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLogGroupFields",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "logGroupFields": [toLogGroupField],
      },
    }, await resp.json());
  }

  async getLogRecord(
    {abortSignal, ...params}: RequestConfig & GetLogRecordRequest,
  ): Promise<GetLogRecordResponse> {
    const body: jsonP.JSONObject = params ? {
      logRecordPointer: params["logRecordPointer"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLogRecord",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "logRecord": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getQueryResults(
    {abortSignal, ...params}: RequestConfig & GetQueryResultsRequest,
  ): Promise<GetQueryResultsResponse> {
    const body: jsonP.JSONObject = params ? {
      queryId: params["queryId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetQueryResults",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "results": [x => jsonP.readList(toResultField, x)],
        "statistics": toQueryStatistics,
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<QueryStatus>(x),
      },
    }, await resp.json());
  }

  async listTagsLogGroup(
    {abortSignal, ...params}: RequestConfig & ListTagsLogGroupRequest,
  ): Promise<ListTagsLogGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsLogGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putDestination(
    {abortSignal, ...params}: RequestConfig & PutDestinationRequest,
  ): Promise<PutDestinationResponse> {
    const body: jsonP.JSONObject = params ? {
      destinationName: params["destinationName"],
      targetArn: params["targetArn"],
      roleArn: params["roleArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDestination",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "destination": toDestination,
      },
    }, await resp.json());
  }

  async putDestinationPolicy(
    {abortSignal, ...params}: RequestConfig & PutDestinationPolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      destinationName: params["destinationName"],
      accessPolicy: params["accessPolicy"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDestinationPolicy",
    });
  }

  async putLogEvents(
    {abortSignal, ...params}: RequestConfig & PutLogEventsRequest,
  ): Promise<PutLogEventsResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      logStreamName: params["logStreamName"],
      logEvents: params["logEvents"]?.map(x => fromInputLogEvent(x)),
      sequenceToken: params["sequenceToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLogEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextSequenceToken": "s",
        "rejectedLogEventsInfo": toRejectedLogEventsInfo,
      },
    }, await resp.json());
  }

  async putMetricFilter(
    {abortSignal, ...params}: RequestConfig & PutMetricFilterRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      filterName: params["filterName"],
      filterPattern: params["filterPattern"],
      metricTransformations: params["metricTransformations"]?.map(x => fromMetricTransformation(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutMetricFilter",
    });
  }

  async putQueryDefinition(
    {abortSignal, ...params}: RequestConfig & PutQueryDefinitionRequest,
  ): Promise<PutQueryDefinitionResponse> {
    const body: jsonP.JSONObject = params ? {
      name: params["name"],
      queryDefinitionId: params["queryDefinitionId"],
      logGroupNames: params["logGroupNames"],
      queryString: params["queryString"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutQueryDefinition",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "queryDefinitionId": "s",
      },
    }, await resp.json());
  }

  async putResourcePolicy(
    {abortSignal, ...params}: RequestConfig & PutResourcePolicyRequest = {},
  ): Promise<PutResourcePolicyResponse> {
    const body: jsonP.JSONObject = params ? {
      policyName: params["policyName"],
      policyDocument: params["policyDocument"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResourcePolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourcePolicy": toResourcePolicy,
      },
    }, await resp.json());
  }

  async putRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & PutRetentionPolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      retentionInDays: params["retentionInDays"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRetentionPolicy",
    });
  }

  async putSubscriptionFilter(
    {abortSignal, ...params}: RequestConfig & PutSubscriptionFilterRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      filterName: params["filterName"],
      filterPattern: params["filterPattern"],
      destinationArn: params["destinationArn"],
      roleArn: params["roleArn"],
      distribution: params["distribution"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutSubscriptionFilter",
    });
  }

  async startQuery(
    {abortSignal, ...params}: RequestConfig & StartQueryRequest,
  ): Promise<StartQueryResponse> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      logGroupNames: params["logGroupNames"],
      startTime: params["startTime"],
      endTime: params["endTime"],
      queryString: params["queryString"],
      limit: params["limit"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartQuery",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "queryId": "s",
      },
    }, await resp.json());
  }

  async stopQuery(
    {abortSignal, ...params}: RequestConfig & StopQueryRequest,
  ): Promise<StopQueryResponse> {
    const body: jsonP.JSONObject = params ? {
      queryId: params["queryId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopQuery",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "success": "b",
      },
    }, await resp.json());
  }

  async tagLogGroup(
    {abortSignal, ...params}: RequestConfig & TagLogGroupRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagLogGroup",
    });
  }

  async testMetricFilter(
    {abortSignal, ...params}: RequestConfig & TestMetricFilterRequest,
  ): Promise<TestMetricFilterResponse> {
    const body: jsonP.JSONObject = params ? {
      filterPattern: params["filterPattern"],
      logEventMessages: params["logEventMessages"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TestMetricFilter",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "matches": [toMetricFilterMatchRecord],
      },
    }, await resp.json());
  }

  async untagLogGroup(
    {abortSignal, ...params}: RequestConfig & UntagLogGroupRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logGroupName: params["logGroupName"],
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagLogGroup",
    });
  }

}

// refs: 1 - tags: named, input
export interface AssociateKmsKeyRequest {
  logGroupName: string;
  kmsKeyId: string;
}

// refs: 1 - tags: named, input
export interface CancelExportTaskRequest {
  taskId: string;
}

// refs: 1 - tags: named, input
export interface CreateExportTaskRequest {
  taskName?: string | null;
  logGroupName: string;
  logStreamNamePrefix?: string | null;
  from: number;
  to: number;
  destination: string;
  destinationPrefix?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateLogGroupRequest {
  logGroupName: string;
  kmsKeyId?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateLogStreamRequest {
  logGroupName: string;
  logStreamName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDestinationRequest {
  destinationName: string;
}

// refs: 1 - tags: named, input
export interface DeleteLogGroupRequest {
  logGroupName: string;
}

// refs: 1 - tags: named, input
export interface DeleteLogStreamRequest {
  logGroupName: string;
  logStreamName: string;
}

// refs: 1 - tags: named, input
export interface DeleteMetricFilterRequest {
  logGroupName: string;
  filterName: string;
}

// refs: 1 - tags: named, input
export interface DeleteQueryDefinitionRequest {
  queryDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteResourcePolicyRequest {
  policyName?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteRetentionPolicyRequest {
  logGroupName: string;
}

// refs: 1 - tags: named, input
export interface DeleteSubscriptionFilterRequest {
  logGroupName: string;
  filterName: string;
}

// refs: 1 - tags: named, input
export interface DescribeDestinationsRequest {
  DestinationNamePrefix?: string | null;
  nextToken?: string | null;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeExportTasksRequest {
  taskId?: string | null;
  statusCode?: ExportTaskStatusCode | null;
  nextToken?: string | null;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeLogGroupsRequest {
  logGroupNamePrefix?: string | null;
  nextToken?: string | null;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeLogStreamsRequest {
  logGroupName: string;
  logStreamNamePrefix?: string | null;
  orderBy?: OrderBy | null;
  descending?: boolean | null;
  nextToken?: string | null;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeMetricFiltersRequest {
  logGroupName?: string | null;
  filterNamePrefix?: string | null;
  nextToken?: string | null;
  limit?: number | null;
  metricName?: string | null;
  metricNamespace?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeQueriesRequest {
  logGroupName?: string | null;
  status?: QueryStatus | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeQueryDefinitionsRequest {
  queryDefinitionNamePrefix?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeResourcePoliciesRequest {
  nextToken?: string | null;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeSubscriptionFiltersRequest {
  logGroupName: string;
  filterNamePrefix?: string | null;
  nextToken?: string | null;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DisassociateKmsKeyRequest {
  logGroupName: string;
}

// refs: 1 - tags: named, input
export interface FilterLogEventsRequest {
  logGroupName: string;
  logStreamNames?: string[] | null;
  logStreamNamePrefix?: string | null;
  startTime?: number | null;
  endTime?: number | null;
  filterPattern?: string | null;
  nextToken?: string | null;
  limit?: number | null;
  interleaved?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetLogEventsRequest {
  logGroupName: string;
  logStreamName: string;
  startTime?: number | null;
  endTime?: number | null;
  nextToken?: string | null;
  limit?: number | null;
  startFromHead?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetLogGroupFieldsRequest {
  logGroupName: string;
  time?: number | null;
}

// refs: 1 - tags: named, input
export interface GetLogRecordRequest {
  logRecordPointer: string;
}

// refs: 1 - tags: named, input
export interface GetQueryResultsRequest {
  queryId: string;
}

// refs: 1 - tags: named, input
export interface ListTagsLogGroupRequest {
  logGroupName: string;
}

// refs: 1 - tags: named, input
export interface PutDestinationRequest {
  destinationName: string;
  targetArn: string;
  roleArn: string;
}

// refs: 1 - tags: named, input
export interface PutDestinationPolicyRequest {
  destinationName: string;
  accessPolicy: string;
}

// refs: 1 - tags: named, input
export interface PutLogEventsRequest {
  logGroupName: string;
  logStreamName: string;
  logEvents: InputLogEvent[];
  sequenceToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PutMetricFilterRequest {
  logGroupName: string;
  filterName: string;
  filterPattern: string;
  metricTransformations: MetricTransformation[];
}

// refs: 1 - tags: named, input
export interface PutQueryDefinitionRequest {
  name: string;
  queryDefinitionId?: string | null;
  logGroupNames?: string[] | null;
  queryString: string;
}

// refs: 1 - tags: named, input
export interface PutResourcePolicyRequest {
  policyName?: string | null;
  policyDocument?: string | null;
}

// refs: 1 - tags: named, input
export interface PutRetentionPolicyRequest {
  logGroupName: string;
  retentionInDays: number;
}

// refs: 1 - tags: named, input
export interface PutSubscriptionFilterRequest {
  logGroupName: string;
  filterName: string;
  filterPattern: string;
  destinationArn: string;
  roleArn?: string | null;
  distribution?: Distribution | null;
}

// refs: 1 - tags: named, input
export interface StartQueryRequest {
  logGroupName?: string | null;
  logGroupNames?: string[] | null;
  startTime: number;
  endTime: number;
  queryString: string;
  limit?: number | null;
}

// refs: 1 - tags: named, input
export interface StopQueryRequest {
  queryId: string;
}

// refs: 1 - tags: named, input
export interface TagLogGroupRequest {
  logGroupName: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface TestMetricFilterRequest {
  filterPattern: string;
  logEventMessages: string[];
}

// refs: 1 - tags: named, input
export interface UntagLogGroupRequest {
  logGroupName: string;
  tags: string[];
}

// refs: 1 - tags: named, output
export interface CreateExportTaskResponse {
  taskId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteQueryDefinitionResponse {
  success?: boolean | null;
}

// refs: 1 - tags: named, output
export interface DescribeDestinationsResponse {
  destinations?: Destination[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeExportTasksResponse {
  exportTasks?: ExportTask[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeLogGroupsResponse {
  logGroups?: LogGroup[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeLogStreamsResponse {
  logStreams?: LogStream[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMetricFiltersResponse {
  metricFilters?: MetricFilter[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeQueriesResponse {
  queries?: QueryInfo[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeQueryDefinitionsResponse {
  queryDefinitions?: QueryDefinition[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeResourcePoliciesResponse {
  resourcePolicies?: ResourcePolicy[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSubscriptionFiltersResponse {
  subscriptionFilters?: SubscriptionFilter[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface FilterLogEventsResponse {
  events?: FilteredLogEvent[] | null;
  searchedLogStreams?: SearchedLogStream[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetLogEventsResponse {
  events?: OutputLogEvent[] | null;
  nextForwardToken?: string | null;
  nextBackwardToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetLogGroupFieldsResponse {
  logGroupFields?: LogGroupField[] | null;
}

// refs: 1 - tags: named, output
export interface GetLogRecordResponse {
  logRecord?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetQueryResultsResponse {
  results?: ResultField[][] | null;
  statistics?: QueryStatistics | null;
  status?: QueryStatus | null;
}

// refs: 1 - tags: named, output
export interface ListTagsLogGroupResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PutDestinationResponse {
  destination?: Destination | null;
}

// refs: 1 - tags: named, output
export interface PutLogEventsResponse {
  nextSequenceToken?: string | null;
  rejectedLogEventsInfo?: RejectedLogEventsInfo | null;
}

// refs: 1 - tags: named, output
export interface PutQueryDefinitionResponse {
  queryDefinitionId?: string | null;
}

// refs: 1 - tags: named, output
export interface PutResourcePolicyResponse {
  resourcePolicy?: ResourcePolicy | null;
}

// refs: 1 - tags: named, output
export interface StartQueryResponse {
  queryId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopQueryResponse {
  success?: boolean | null;
}

// refs: 1 - tags: named, output
export interface TestMetricFilterResponse {
  matches?: MetricFilterMatchRecord[] | null;
}

// refs: 2 - tags: input, named, enum, output
export type ExportTaskStatusCode =
| "CANCELLED"
| "COMPLETED"
| "FAILED"
| "PENDING"
| "PENDING_CANCEL"
| "RUNNING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type OrderBy =
| "LogStreamName"
| "LastEventTime"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type QueryStatus =
| "Scheduled"
| "Running"
| "Complete"
| "Failed"
| "Cancelled"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface InputLogEvent {
  timestamp: number;
  message: string;
}
function fromInputLogEvent(input?: InputLogEvent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timestamp: input["timestamp"],
    message: input["message"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface MetricTransformation {
  metricName: string;
  metricNamespace: string;
  metricValue: string;
  defaultValue?: number | null;
}
function fromMetricTransformation(input?: MetricTransformation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    metricName: input["metricName"],
    metricNamespace: input["metricNamespace"],
    metricValue: input["metricValue"],
    defaultValue: input["defaultValue"],
  }
}
function toMetricTransformation(root: jsonP.JSONValue): MetricTransformation {
  return jsonP.readObj({
    required: {
      "metricName": "s",
      "metricNamespace": "s",
      "metricValue": "s",
    },
    optional: {
      "defaultValue": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type Distribution =
| "Random"
| "ByLogStream"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Destination {
  destinationName?: string | null;
  targetArn?: string | null;
  roleArn?: string | null;
  accessPolicy?: string | null;
  arn?: string | null;
  creationTime?: number | null;
}
function toDestination(root: jsonP.JSONValue): Destination {
  return jsonP.readObj({
    required: {},
    optional: {
      "destinationName": "s",
      "targetArn": "s",
      "roleArn": "s",
      "accessPolicy": "s",
      "arn": "s",
      "creationTime": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExportTask {
  taskId?: string | null;
  taskName?: string | null;
  logGroupName?: string | null;
  from?: number | null;
  to?: number | null;
  destination?: string | null;
  destinationPrefix?: string | null;
  status?: ExportTaskStatus | null;
  executionInfo?: ExportTaskExecutionInfo | null;
}
function toExportTask(root: jsonP.JSONValue): ExportTask {
  return jsonP.readObj({
    required: {},
    optional: {
      "taskId": "s",
      "taskName": "s",
      "logGroupName": "s",
      "from": "n",
      "to": "n",
      "destination": "s",
      "destinationPrefix": "s",
      "status": toExportTaskStatus,
      "executionInfo": toExportTaskExecutionInfo,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExportTaskStatus {
  code?: ExportTaskStatusCode | null;
  message?: string | null;
}
function toExportTaskStatus(root: jsonP.JSONValue): ExportTaskStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<ExportTaskStatusCode>(x),
      "message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExportTaskExecutionInfo {
  creationTime?: number | null;
  completionTime?: number | null;
}
function toExportTaskExecutionInfo(root: jsonP.JSONValue): ExportTaskExecutionInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "creationTime": "n",
      "completionTime": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LogGroup {
  logGroupName?: string | null;
  creationTime?: number | null;
  retentionInDays?: number | null;
  metricFilterCount?: number | null;
  arn?: string | null;
  storedBytes?: number | null;
  kmsKeyId?: string | null;
}
function toLogGroup(root: jsonP.JSONValue): LogGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "logGroupName": "s",
      "creationTime": "n",
      "retentionInDays": "n",
      "metricFilterCount": "n",
      "arn": "s",
      "storedBytes": "n",
      "kmsKeyId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LogStream {
  logStreamName?: string | null;
  creationTime?: number | null;
  firstEventTimestamp?: number | null;
  lastEventTimestamp?: number | null;
  lastIngestionTime?: number | null;
  uploadSequenceToken?: string | null;
  arn?: string | null;
  storedBytes?: number | null;
}
function toLogStream(root: jsonP.JSONValue): LogStream {
  return jsonP.readObj({
    required: {},
    optional: {
      "logStreamName": "s",
      "creationTime": "n",
      "firstEventTimestamp": "n",
      "lastEventTimestamp": "n",
      "lastIngestionTime": "n",
      "uploadSequenceToken": "s",
      "arn": "s",
      "storedBytes": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MetricFilter {
  filterName?: string | null;
  filterPattern?: string | null;
  metricTransformations?: MetricTransformation[] | null;
  creationTime?: number | null;
  logGroupName?: string | null;
}
function toMetricFilter(root: jsonP.JSONValue): MetricFilter {
  return jsonP.readObj({
    required: {},
    optional: {
      "filterName": "s",
      "filterPattern": "s",
      "metricTransformations": [toMetricTransformation],
      "creationTime": "n",
      "logGroupName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface QueryInfo {
  queryId?: string | null;
  queryString?: string | null;
  status?: QueryStatus | null;
  createTime?: number | null;
  logGroupName?: string | null;
}
function toQueryInfo(root: jsonP.JSONValue): QueryInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "queryId": "s",
      "queryString": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<QueryStatus>(x),
      "createTime": "n",
      "logGroupName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface QueryDefinition {
  queryDefinitionId?: string | null;
  name?: string | null;
  queryString?: string | null;
  lastModified?: number | null;
  logGroupNames?: string[] | null;
}
function toQueryDefinition(root: jsonP.JSONValue): QueryDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "queryDefinitionId": "s",
      "name": "s",
      "queryString": "s",
      "lastModified": "n",
      "logGroupNames": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ResourcePolicy {
  policyName?: string | null;
  policyDocument?: string | null;
  lastUpdatedTime?: number | null;
}
function toResourcePolicy(root: jsonP.JSONValue): ResourcePolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "policyName": "s",
      "policyDocument": "s",
      "lastUpdatedTime": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SubscriptionFilter {
  filterName?: string | null;
  logGroupName?: string | null;
  filterPattern?: string | null;
  destinationArn?: string | null;
  roleArn?: string | null;
  distribution?: Distribution | null;
  creationTime?: number | null;
}
function toSubscriptionFilter(root: jsonP.JSONValue): SubscriptionFilter {
  return jsonP.readObj({
    required: {},
    optional: {
      "filterName": "s",
      "logGroupName": "s",
      "filterPattern": "s",
      "destinationArn": "s",
      "roleArn": "s",
      "distribution": (x: jsonP.JSONValue) => cmnP.readEnum<Distribution>(x),
      "creationTime": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FilteredLogEvent {
  logStreamName?: string | null;
  timestamp?: number | null;
  message?: string | null;
  ingestionTime?: number | null;
  eventId?: string | null;
}
function toFilteredLogEvent(root: jsonP.JSONValue): FilteredLogEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "logStreamName": "s",
      "timestamp": "n",
      "message": "s",
      "ingestionTime": "n",
      "eventId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SearchedLogStream {
  logStreamName?: string | null;
  searchedCompletely?: boolean | null;
}
function toSearchedLogStream(root: jsonP.JSONValue): SearchedLogStream {
  return jsonP.readObj({
    required: {},
    optional: {
      "logStreamName": "s",
      "searchedCompletely": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OutputLogEvent {
  timestamp?: number | null;
  message?: string | null;
  ingestionTime?: number | null;
}
function toOutputLogEvent(root: jsonP.JSONValue): OutputLogEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "timestamp": "n",
      "message": "s",
      "ingestionTime": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LogGroupField {
  name?: string | null;
  percent?: number | null;
}
function toLogGroupField(root: jsonP.JSONValue): LogGroupField {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "percent": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResultField {
  field?: string | null;
  value?: string | null;
}
function toResultField(root: jsonP.JSONValue): ResultField {
  return jsonP.readObj({
    required: {},
    optional: {
      "field": "s",
      "value": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface QueryStatistics {
  recordsMatched?: number | null;
  recordsScanned?: number | null;
  bytesScanned?: number | null;
}
function toQueryStatistics(root: jsonP.JSONValue): QueryStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "recordsMatched": "n",
      "recordsScanned": "n",
      "bytesScanned": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RejectedLogEventsInfo {
  tooNewLogEventStartIndex?: number | null;
  tooOldLogEventEndIndex?: number | null;
  expiredLogEventEndIndex?: number | null;
}
function toRejectedLogEventsInfo(root: jsonP.JSONValue): RejectedLogEventsInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "tooNewLogEventStartIndex": "n",
      "tooOldLogEventEndIndex": "n",
      "expiredLogEventEndIndex": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MetricFilterMatchRecord {
  eventNumber?: number | null;
  eventMessage?: string | null;
  extractedValues?: { [key: string]: string | null | undefined } | null;
}
function toMetricFilterMatchRecord(root: jsonP.JSONValue): MetricFilterMatchRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "eventNumber": "n",
      "eventMessage": "s",
      "extractedValues": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
