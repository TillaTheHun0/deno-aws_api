// Autogenerated API client for: AWS Data Exchange

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class DataExchange {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DataExchange.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "dataexchange",
    "signingName": "dataexchange",
    "serviceFullName": "AWS Data Exchange",
    "serviceId": "DataExchange",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "dataexchange-2017-07-25",
    "signatureVersion": "v4"
  };

  async cancelJob(
    {abortSignal, ...params}: RequestConfig & CancelJobRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelJob",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/jobs/${params["JobId"]}`,
      responseCode: 204,
    });
  }

  async createDataSet(
    {abortSignal, ...params}: RequestConfig & CreateDataSetRequest,
  ): Promise<CreateDataSetResponse> {
    const body: jsonP.JSONObject = params ? {
      AssetType: params["AssetType"],
      Description: params["Description"],
      Name: params["Name"],
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataSet",
      requestUri: "/v1/data-sets",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
          "CreatedAt": "d",
          "Description": "s",
          "Id": "s",
          "Name": "s",
          "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<Origin>(x),
          "OriginDetails": toOriginDetails,
          "SourceId": "s",
          "Tags": x => jsonP.readMap(String, String, x),
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async createJob(
    {abortSignal, ...params}: RequestConfig & CreateJobRequest,
  ): Promise<CreateJobResponse> {
    const body: jsonP.JSONObject = params ? {
      Details: fromRequestDetails(params["Details"]),
      Type: params["Type"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateJob",
      requestUri: "/v1/jobs",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "CreatedAt": "d",
          "Details": toResponseDetails,
          "Errors": [toJobError],
          "Id": "s",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<State>(x),
          "Type": (x: jsonP.JSONValue) => cmnP.readEnum<Type>(x),
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async createRevision(
    {abortSignal, ...params}: RequestConfig & CreateRevisionRequest,
  ): Promise<CreateRevisionResponse> {
    const body: jsonP.JSONObject = params ? {
      Comment: params["Comment"],
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRevision",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "Comment": "s",
          "CreatedAt": "d",
          "DataSetId": "s",
          "Finalized": "b",
          "Id": "s",
          "SourceId": "s",
          "Tags": x => jsonP.readMap(String, String, x),
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async deleteAsset(
    {abortSignal, ...params}: RequestConfig & DeleteAssetRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAsset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets/${params["AssetId"]}`,
      responseCode: 204,
    });
  }

  async deleteDataSet(
    {abortSignal, ...params}: RequestConfig & DeleteDataSetRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDataSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}`,
      responseCode: 204,
    });
  }

  async deleteRevision(
    {abortSignal, ...params}: RequestConfig & DeleteRevisionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRevision",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}`,
      responseCode: 204,
    });
  }

  async getAsset(
    {abortSignal, ...params}: RequestConfig & GetAssetRequest,
  ): Promise<GetAssetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAsset",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets/${params["AssetId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AssetDetails": toAssetDetails,
          "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
          "CreatedAt": "d",
          "DataSetId": "s",
          "Id": "s",
          "Name": "s",
          "RevisionId": "s",
          "SourceId": "s",
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async getDataSet(
    {abortSignal, ...params}: RequestConfig & GetDataSetRequest,
  ): Promise<GetDataSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDataSet",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
          "CreatedAt": "d",
          "Description": "s",
          "Id": "s",
          "Name": "s",
          "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<Origin>(x),
          "OriginDetails": toOriginDetails,
          "SourceId": "s",
          "Tags": x => jsonP.readMap(String, String, x),
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async getJob(
    {abortSignal, ...params}: RequestConfig & GetJobRequest,
  ): Promise<GetJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetJob",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/jobs/${params["JobId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "CreatedAt": "d",
          "Details": toResponseDetails,
          "Errors": [toJobError],
          "Id": "s",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<State>(x),
          "Type": (x: jsonP.JSONValue) => cmnP.readEnum<Type>(x),
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async getRevision(
    {abortSignal, ...params}: RequestConfig & GetRevisionRequest,
  ): Promise<GetRevisionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRevision",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "Comment": "s",
          "CreatedAt": "d",
          "DataSetId": "s",
          "Finalized": "b",
          "Id": "s",
          "SourceId": "s",
          "Tags": x => jsonP.readMap(String, String, x),
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async listDataSetRevisions(
    {abortSignal, ...params}: RequestConfig & ListDataSetRevisionsRequest,
  ): Promise<ListDataSetRevisionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDataSetRevisions",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "Revisions": [toRevisionEntry],
        },
      }, await resp.json()),
  };
  }

  async listDataSets(
    {abortSignal, ...params}: RequestConfig & ListDataSetsRequest = {},
  ): Promise<ListDataSetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["Origin"] != null) query.set("origin", params["Origin"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDataSets",
      method: "GET",
      requestUri: "/v1/data-sets",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "DataSets": [toDataSetEntry],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & ListJobsRequest = {},
  ): Promise<ListJobsResponse> {
    const query = new URLSearchParams;
    if (params["DataSetId"] != null) query.set("dataSetId", params["DataSetId"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["RevisionId"] != null) query.set("revisionId", params["RevisionId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJobs",
      method: "GET",
      requestUri: "/v1/jobs",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Jobs": [toJobEntry],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listRevisionAssets(
    {abortSignal, ...params}: RequestConfig & ListRevisionAssetsRequest,
  ): Promise<ListRevisionAssetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRevisionAssets",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Assets": [toAssetEntry],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async startJob(
    {abortSignal, ...params}: RequestConfig & StartJobRequest,
  ): Promise<StartJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StartJob",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/jobs/${params["JobId"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateAsset(
    {abortSignal, ...params}: RequestConfig & UpdateAssetRequest,
  ): Promise<UpdateAssetResponse> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAsset",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets/${params["AssetId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AssetDetails": toAssetDetails,
          "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
          "CreatedAt": "d",
          "DataSetId": "s",
          "Id": "s",
          "Name": "s",
          "RevisionId": "s",
          "SourceId": "s",
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async updateDataSet(
    {abortSignal, ...params}: RequestConfig & UpdateDataSetRequest,
  ): Promise<UpdateDataSetResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSet",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
          "CreatedAt": "d",
          "Description": "s",
          "Id": "s",
          "Name": "s",
          "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<Origin>(x),
          "OriginDetails": toOriginDetails,
          "SourceId": "s",
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async updateRevision(
    {abortSignal, ...params}: RequestConfig & UpdateRevisionRequest,
  ): Promise<UpdateRevisionResponse> {
    const body: jsonP.JSONObject = params ? {
      Comment: params["Comment"],
      Finalized: params["Finalized"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRevision",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "Comment": "s",
          "CreatedAt": "d",
          "DataSetId": "s",
          "Finalized": "b",
          "Id": "s",
          "SourceId": "s",
          "UpdatedAt": "d",
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface CancelJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface CreateDataSetRequest {
  AssetType: AssetType;
  Description: string;
  Name: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateJobRequest {
  Details: RequestDetails;
  Type: Type;
}

// refs: 1 - tags: named, input
export interface CreateRevisionRequest {
  Comment?: string | null;
  DataSetId: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteAssetRequest {
  AssetId: string;
  DataSetId: string;
  RevisionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDataSetRequest {
  DataSetId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRevisionRequest {
  DataSetId: string;
  RevisionId: string;
}

// refs: 1 - tags: named, input
export interface GetAssetRequest {
  AssetId: string;
  DataSetId: string;
  RevisionId: string;
}

// refs: 1 - tags: named, input
export interface GetDataSetRequest {
  DataSetId: string;
}

// refs: 1 - tags: named, input
export interface GetJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface GetRevisionRequest {
  DataSetId: string;
  RevisionId: string;
}

// refs: 1 - tags: named, input
export interface ListDataSetRevisionsRequest {
  DataSetId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDataSetsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Origin?: string | null;
}

// refs: 1 - tags: named, input
export interface ListJobsRequest {
  DataSetId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  RevisionId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRevisionAssetsRequest {
  DataSetId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  RevisionId: string;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface StartJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAssetRequest {
  AssetId: string;
  DataSetId: string;
  Name: string;
  RevisionId: string;
}

// refs: 1 - tags: named, input
export interface UpdateDataSetRequest {
  DataSetId: string;
  Description?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRevisionRequest {
  Comment?: string | null;
  DataSetId: string;
  Finalized?: boolean | null;
  RevisionId: string;
}

// refs: 1 - tags: named, output
export interface CreateDataSetResponse {
  Arn?: string | null;
  AssetType?: AssetType | null;
  CreatedAt?: Date | number | null;
  Description?: string | null;
  Id?: string | null;
  Name?: string | null;
  Origin?: Origin | null;
  OriginDetails?: OriginDetails | null;
  SourceId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateJobResponse {
  Arn?: string | null;
  CreatedAt?: Date | number | null;
  Details?: ResponseDetails | null;
  Errors?: JobError[] | null;
  Id?: string | null;
  State?: State | null;
  Type?: Type | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateRevisionResponse {
  Arn?: string | null;
  Comment?: string | null;
  CreatedAt?: Date | number | null;
  DataSetId?: string | null;
  Finalized?: boolean | null;
  Id?: string | null;
  SourceId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetAssetResponse {
  Arn?: string | null;
  AssetDetails?: AssetDetails | null;
  AssetType?: AssetType | null;
  CreatedAt?: Date | number | null;
  DataSetId?: string | null;
  Id?: string | null;
  Name?: string | null;
  RevisionId?: string | null;
  SourceId?: string | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetDataSetResponse {
  Arn?: string | null;
  AssetType?: AssetType | null;
  CreatedAt?: Date | number | null;
  Description?: string | null;
  Id?: string | null;
  Name?: string | null;
  Origin?: Origin | null;
  OriginDetails?: OriginDetails | null;
  SourceId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetJobResponse {
  Arn?: string | null;
  CreatedAt?: Date | number | null;
  Details?: ResponseDetails | null;
  Errors?: JobError[] | null;
  Id?: string | null;
  State?: State | null;
  Type?: Type | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetRevisionResponse {
  Arn?: string | null;
  Comment?: string | null;
  CreatedAt?: Date | number | null;
  DataSetId?: string | null;
  Finalized?: boolean | null;
  Id?: string | null;
  SourceId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface ListDataSetRevisionsResponse {
  NextToken?: string | null;
  Revisions?: RevisionEntry[] | null;
}

// refs: 1 - tags: named, output
export interface ListDataSetsResponse {
  DataSets?: DataSetEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListJobsResponse {
  Jobs?: JobEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRevisionAssetsResponse {
  Assets?: AssetEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface StartJobResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAssetResponse {
  Arn?: string | null;
  AssetDetails?: AssetDetails | null;
  AssetType?: AssetType | null;
  CreatedAt?: Date | number | null;
  DataSetId?: string | null;
  Id?: string | null;
  Name?: string | null;
  RevisionId?: string | null;
  SourceId?: string | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDataSetResponse {
  Arn?: string | null;
  AssetType?: AssetType | null;
  CreatedAt?: Date | number | null;
  Description?: string | null;
  Id?: string | null;
  Name?: string | null;
  Origin?: Origin | null;
  OriginDetails?: OriginDetails | null;
  SourceId?: string | null;
  UpdatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateRevisionResponse {
  Arn?: string | null;
  Comment?: string | null;
  CreatedAt?: Date | number | null;
  DataSetId?: string | null;
  Finalized?: boolean | null;
  Id?: string | null;
  SourceId?: string | null;
  UpdatedAt?: Date | number | null;
}

// refs: 8 - tags: input, named, enum, output
export type AssetType =
| "S3_SNAPSHOT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface RequestDetails {
  ExportAssetToSignedUrl?: ExportAssetToSignedUrlRequestDetails | null;
  ExportAssetsToS3?: ExportAssetsToS3RequestDetails | null;
  ImportAssetFromSignedUrl?: ImportAssetFromSignedUrlRequestDetails | null;
  ImportAssetsFromS3?: ImportAssetsFromS3RequestDetails | null;
}
function fromRequestDetails(input?: RequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ExportAssetToSignedUrl: fromExportAssetToSignedUrlRequestDetails(input["ExportAssetToSignedUrl"]),
    ExportAssetsToS3: fromExportAssetsToS3RequestDetails(input["ExportAssetsToS3"]),
    ImportAssetFromSignedUrl: fromImportAssetFromSignedUrlRequestDetails(input["ImportAssetFromSignedUrl"]),
    ImportAssetsFromS3: fromImportAssetsFromS3RequestDetails(input["ImportAssetsFromS3"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface ExportAssetToSignedUrlRequestDetails {
  AssetId: string;
  DataSetId: string;
  RevisionId: string;
}
function fromExportAssetToSignedUrlRequestDetails(input?: ExportAssetToSignedUrlRequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetId: input["AssetId"],
    DataSetId: input["DataSetId"],
    RevisionId: input["RevisionId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ExportAssetsToS3RequestDetails {
  AssetDestinations: AssetDestinationEntry[];
  DataSetId: string;
  Encryption?: ExportServerSideEncryption | null;
  RevisionId: string;
}
function fromExportAssetsToS3RequestDetails(input?: ExportAssetsToS3RequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetDestinations: input["AssetDestinations"]?.map(x => fromAssetDestinationEntry(x)),
    DataSetId: input["DataSetId"],
    Encryption: fromExportServerSideEncryption(input["Encryption"]),
    RevisionId: input["RevisionId"],
  }
}

// refs: 4 - tags: input, named, interface, output
export interface AssetDestinationEntry {
  AssetId: string;
  Bucket: string;
  Key?: string | null;
}
function fromAssetDestinationEntry(input?: AssetDestinationEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetId: input["AssetId"],
    Bucket: input["Bucket"],
    Key: input["Key"],
  }
}
function toAssetDestinationEntry(root: jsonP.JSONValue): AssetDestinationEntry {
  return jsonP.readObj({
    required: {
      "AssetId": "s",
      "Bucket": "s",
    },
    optional: {
      "Key": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ExportServerSideEncryption {
  KmsKeyArn?: string | null;
  Type: ServerSideEncryptionTypes;
}
function fromExportServerSideEncryption(input?: ExportServerSideEncryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KmsKeyArn: input["KmsKeyArn"],
    Type: input["Type"],
  }
}
function toExportServerSideEncryption(root: jsonP.JSONValue): ExportServerSideEncryption {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ServerSideEncryptionTypes>(x),
    },
    optional: {
      "KmsKeyArn": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ServerSideEncryptionTypes =
| "aws:kms"
| "AES256"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ImportAssetFromSignedUrlRequestDetails {
  AssetName: string;
  DataSetId: string;
  Md5Hash: string;
  RevisionId: string;
}
function fromImportAssetFromSignedUrlRequestDetails(input?: ImportAssetFromSignedUrlRequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetName: input["AssetName"],
    DataSetId: input["DataSetId"],
    Md5Hash: input["Md5Hash"],
    RevisionId: input["RevisionId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ImportAssetsFromS3RequestDetails {
  AssetSources: AssetSourceEntry[];
  DataSetId: string;
  RevisionId: string;
}
function fromImportAssetsFromS3RequestDetails(input?: ImportAssetsFromS3RequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetSources: input["AssetSources"]?.map(x => fromAssetSourceEntry(x)),
    DataSetId: input["DataSetId"],
    RevisionId: input["RevisionId"],
  }
}

// refs: 7 - tags: input, named, interface, output
export interface AssetSourceEntry {
  Bucket: string;
  Key: string;
}
function fromAssetSourceEntry(input?: AssetSourceEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Bucket: input["Bucket"],
    Key: input["Key"],
  }
}
function toAssetSourceEntry(root: jsonP.JSONValue): AssetSourceEntry {
  return jsonP.readObj({
    required: {
      "Bucket": "s",
      "Key": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type Type =
| "IMPORT_ASSETS_FROM_S3"
| "IMPORT_ASSET_FROM_SIGNED_URL"
| "EXPORT_ASSETS_TO_S3"
| "EXPORT_ASSET_TO_SIGNED_URL"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, enum
export type Origin =
| "OWNED"
| "ENTITLED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface OriginDetails {
  ProductId: string;
}
function toOriginDetails(root: jsonP.JSONValue): OriginDetails {
  return jsonP.readObj({
    required: {
      "ProductId": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ResponseDetails {
  ExportAssetToSignedUrl?: ExportAssetToSignedUrlResponseDetails | null;
  ExportAssetsToS3?: ExportAssetsToS3ResponseDetails | null;
  ImportAssetFromSignedUrl?: ImportAssetFromSignedUrlResponseDetails | null;
  ImportAssetsFromS3?: ImportAssetsFromS3ResponseDetails | null;
}
function toResponseDetails(root: jsonP.JSONValue): ResponseDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExportAssetToSignedUrl": toExportAssetToSignedUrlResponseDetails,
      "ExportAssetsToS3": toExportAssetsToS3ResponseDetails,
      "ImportAssetFromSignedUrl": toImportAssetFromSignedUrlResponseDetails,
      "ImportAssetsFromS3": toImportAssetsFromS3ResponseDetails,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ExportAssetToSignedUrlResponseDetails {
  AssetId: string;
  DataSetId: string;
  RevisionId: string;
  SignedUrl?: string | null;
  SignedUrlExpiresAt?: Date | number | null;
}
function toExportAssetToSignedUrlResponseDetails(root: jsonP.JSONValue): ExportAssetToSignedUrlResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetId": "s",
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {
      "SignedUrl": "s",
      "SignedUrlExpiresAt": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ExportAssetsToS3ResponseDetails {
  AssetDestinations: AssetDestinationEntry[];
  DataSetId: string;
  Encryption?: ExportServerSideEncryption | null;
  RevisionId: string;
}
function toExportAssetsToS3ResponseDetails(root: jsonP.JSONValue): ExportAssetsToS3ResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetDestinations": [toAssetDestinationEntry],
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {
      "Encryption": toExportServerSideEncryption,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ImportAssetFromSignedUrlResponseDetails {
  AssetName: string;
  DataSetId: string;
  Md5Hash?: string | null;
  RevisionId: string;
  SignedUrl?: string | null;
  SignedUrlExpiresAt?: Date | number | null;
}
function toImportAssetFromSignedUrlResponseDetails(root: jsonP.JSONValue): ImportAssetFromSignedUrlResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetName": "s",
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {
      "Md5Hash": "s",
      "SignedUrl": "s",
      "SignedUrlExpiresAt": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ImportAssetsFromS3ResponseDetails {
  AssetSources: AssetSourceEntry[];
  DataSetId: string;
  RevisionId: string;
}
function toImportAssetsFromS3ResponseDetails(root: jsonP.JSONValue): ImportAssetsFromS3ResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetSources": [toAssetSourceEntry],
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface JobError {
  Code: Code;
  Details?: Details | null;
  LimitName?: JobErrorLimitName | null;
  LimitValue?: number | null;
  Message: string;
  ResourceId?: string | null;
  ResourceType?: JobErrorResourceTypes | null;
}
function toJobError(root: jsonP.JSONValue): JobError {
  return jsonP.readObj({
    required: {
      "Code": (x: jsonP.JSONValue) => cmnP.readEnum<Code>(x),
      "Message": "s",
    },
    optional: {
      "Details": toDetails,
      "LimitName": (x: jsonP.JSONValue) => cmnP.readEnum<JobErrorLimitName>(x),
      "LimitValue": "n",
      "ResourceId": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<JobErrorResourceTypes>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type Code =
| "ACCESS_DENIED_EXCEPTION"
| "INTERNAL_SERVER_EXCEPTION"
| "MALWARE_DETECTED"
| "RESOURCE_NOT_FOUND_EXCEPTION"
| "SERVICE_QUOTA_EXCEEDED_EXCEPTION"
| "VALIDATION_EXCEPTION"
| "MALWARE_SCAN_ENCRYPTED_FILE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface Details {
  ImportAssetFromSignedUrlJobErrorDetails?: ImportAssetFromSignedUrlJobErrorDetails | null;
  ImportAssetsFromS3JobErrorDetails?: AssetSourceEntry[] | null;
}
function toDetails(root: jsonP.JSONValue): Details {
  return jsonP.readObj({
    required: {},
    optional: {
      "ImportAssetFromSignedUrlJobErrorDetails": toImportAssetFromSignedUrlJobErrorDetails,
      "ImportAssetsFromS3JobErrorDetails": [toAssetSourceEntry],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ImportAssetFromSignedUrlJobErrorDetails {
  AssetName: string;
}
function toImportAssetFromSignedUrlJobErrorDetails(root: jsonP.JSONValue): ImportAssetFromSignedUrlJobErrorDetails {
  return jsonP.readObj({
    required: {
      "AssetName": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, enum
export type JobErrorLimitName =
| "Assets per revision"
| "Asset size in GB"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type JobErrorResourceTypes =
| "REVISION"
| "ASSET"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type State =
| "WAITING"
| "IN_PROGRESS"
| "ERROR"
| "COMPLETED"
| "CANCELLED"
| "TIMED_OUT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface AssetDetails {
  S3SnapshotAsset?: S3SnapshotAsset | null;
}
function toAssetDetails(root: jsonP.JSONValue): AssetDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3SnapshotAsset": toS3SnapshotAsset,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface S3SnapshotAsset {
  Size: number;
}
function toS3SnapshotAsset(root: jsonP.JSONValue): S3SnapshotAsset {
  return jsonP.readObj({
    required: {
      "Size": "n",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RevisionEntry {
  Arn: string;
  Comment?: string | null;
  CreatedAt: Date | number;
  DataSetId: string;
  Finalized?: boolean | null;
  Id: string;
  SourceId?: string | null;
  UpdatedAt: Date | number;
}
function toRevisionEntry(root: jsonP.JSONValue): RevisionEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "CreatedAt": "d",
      "DataSetId": "s",
      "Id": "s",
      "UpdatedAt": "d",
    },
    optional: {
      "Comment": "s",
      "Finalized": "b",
      "SourceId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataSetEntry {
  Arn: string;
  AssetType: AssetType;
  CreatedAt: Date | number;
  Description: string;
  Id: string;
  Name: string;
  Origin: Origin;
  OriginDetails?: OriginDetails | null;
  SourceId?: string | null;
  UpdatedAt: Date | number;
}
function toDataSetEntry(root: jsonP.JSONValue): DataSetEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
      "CreatedAt": "d",
      "Description": "s",
      "Id": "s",
      "Name": "s",
      "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<Origin>(x),
      "UpdatedAt": "d",
    },
    optional: {
      "OriginDetails": toOriginDetails,
      "SourceId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobEntry {
  Arn: string;
  CreatedAt: Date | number;
  Details: ResponseDetails;
  Errors?: JobError[] | null;
  Id: string;
  State: State;
  Type: Type;
  UpdatedAt: Date | number;
}
function toJobEntry(root: jsonP.JSONValue): JobEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "CreatedAt": "d",
      "Details": toResponseDetails,
      "Id": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<State>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<Type>(x),
      "UpdatedAt": "d",
    },
    optional: {
      "Errors": [toJobError],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssetEntry {
  Arn: string;
  AssetDetails: AssetDetails;
  AssetType: AssetType;
  CreatedAt: Date | number;
  DataSetId: string;
  Id: string;
  Name: string;
  RevisionId: string;
  SourceId?: string | null;
  UpdatedAt: Date | number;
}
function toAssetEntry(root: jsonP.JSONValue): AssetEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "AssetDetails": toAssetDetails,
      "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
      "CreatedAt": "d",
      "DataSetId": "s",
      "Id": "s",
      "Name": "s",
      "RevisionId": "s",
      "UpdatedAt": "d",
    },
    optional: {
      "SourceId": "s",
    },
  }, root);
}
