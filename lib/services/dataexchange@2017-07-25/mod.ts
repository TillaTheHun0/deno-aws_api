// Autogenerated API client for: AWS Data Exchange

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class DataExchange {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DataExchange.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "dataexchange",
    "signingName": "dataexchange",
    "serviceFullName": "AWS Data Exchange",
    "serviceId": "DataExchange",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "dataexchange-2017-07-25",
    "signatureVersion": "v4"
  };

  async cancelJob(
    {abortSignal, ...params}: RequestConfig & s.CancelJobRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelJob",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/jobs/${params["JobId"]}`,
      responseCode: 204,
    });
  }

  async createDataSet(
    {abortSignal, ...params}: RequestConfig & s.CreateDataSetRequest,
  ): Promise<s.CreateDataSetResponse> {
    const body: jsonP.JSONObject = {
      AssetType: params["AssetType"],
      Description: params["Description"],
      Name: params["Name"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataSet",
      requestUri: "/v1/data-sets",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetType>(x),
        "CreatedAt": "d",
        "Description": "s",
        "Id": "s",
        "Name": "s",
        "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<s.Origin>(x),
        "OriginDetails": toOriginDetails,
        "SourceId": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async createJob(
    {abortSignal, ...params}: RequestConfig & s.CreateJobRequest,
  ): Promise<s.CreateJobResponse> {
    const body: jsonP.JSONObject = {
      Details: fromRequestDetails(params["Details"]),
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateJob",
      requestUri: "/v1/jobs",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreatedAt": "d",
        "Details": toResponseDetails,
        "Errors": [toJobError],
        "Id": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.State>(x),
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.Type>(x),
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async createRevision(
    {abortSignal, ...params}: RequestConfig & s.CreateRevisionRequest,
  ): Promise<s.CreateRevisionResponse> {
    const body: jsonP.JSONObject = {
      Comment: params["Comment"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRevision",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Comment": "s",
        "CreatedAt": "d",
        "DataSetId": "s",
        "Finalized": "b",
        "Id": "s",
        "SourceId": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async deleteAsset(
    {abortSignal, ...params}: RequestConfig & s.DeleteAssetRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAsset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets/${params["AssetId"]}`,
      responseCode: 204,
    });
  }

  async deleteDataSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteDataSetRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDataSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}`,
      responseCode: 204,
    });
  }

  async deleteRevision(
    {abortSignal, ...params}: RequestConfig & s.DeleteRevisionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRevision",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}`,
      responseCode: 204,
    });
  }

  async getAsset(
    {abortSignal, ...params}: RequestConfig & s.GetAssetRequest,
  ): Promise<s.GetAssetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAsset",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets/${params["AssetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "AssetDetails": toAssetDetails,
        "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetType>(x),
        "CreatedAt": "d",
        "DataSetId": "s",
        "Id": "s",
        "Name": "s",
        "RevisionId": "s",
        "SourceId": "s",
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async getDataSet(
    {abortSignal, ...params}: RequestConfig & s.GetDataSetRequest,
  ): Promise<s.GetDataSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDataSet",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetType>(x),
        "CreatedAt": "d",
        "Description": "s",
        "Id": "s",
        "Name": "s",
        "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<s.Origin>(x),
        "OriginDetails": toOriginDetails,
        "SourceId": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async getJob(
    {abortSignal, ...params}: RequestConfig & s.GetJobRequest,
  ): Promise<s.GetJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetJob",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/jobs/${params["JobId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreatedAt": "d",
        "Details": toResponseDetails,
        "Errors": [toJobError],
        "Id": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.State>(x),
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.Type>(x),
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async getRevision(
    {abortSignal, ...params}: RequestConfig & s.GetRevisionRequest,
  ): Promise<s.GetRevisionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRevision",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Comment": "s",
        "CreatedAt": "d",
        "DataSetId": "s",
        "Finalized": "b",
        "Id": "s",
        "SourceId": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async listDataSetRevisions(
    {abortSignal, ...params}: RequestConfig & s.ListDataSetRevisionsRequest,
  ): Promise<s.ListDataSetRevisionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDataSetRevisions",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Revisions": [toRevisionEntry],
      },
    }, await resp.json());
  }

  async listDataSets(
    {abortSignal, ...params}: RequestConfig & s.ListDataSetsRequest = {},
  ): Promise<s.ListDataSetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["Origin"] != null) query.set("origin", params["Origin"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDataSets",
      method: "GET",
      requestUri: "/v1/data-sets",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DataSets": [toDataSetEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & s.ListJobsRequest = {},
  ): Promise<s.ListJobsResponse> {
    const query = new URLSearchParams;
    if (params["DataSetId"] != null) query.set("dataSetId", params["DataSetId"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["RevisionId"] != null) query.set("revisionId", params["RevisionId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJobs",
      method: "GET",
      requestUri: "/v1/jobs",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Jobs": [toJobEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRevisionAssets(
    {abortSignal, ...params}: RequestConfig & s.ListRevisionAssetsRequest,
  ): Promise<s.ListRevisionAssetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRevisionAssets",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Assets": [toAssetEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async startJob(
    {abortSignal, ...params}: RequestConfig & s.StartJobRequest,
  ): Promise<s.StartJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StartJob",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/jobs/${params["JobId"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateAsset(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssetRequest,
  ): Promise<s.UpdateAssetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAsset",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}/assets/${params["AssetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "AssetDetails": toAssetDetails,
        "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetType>(x),
        "CreatedAt": "d",
        "DataSetId": "s",
        "Id": "s",
        "Name": "s",
        "RevisionId": "s",
        "SourceId": "s",
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async updateDataSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateDataSetRequest,
  ): Promise<s.UpdateDataSetResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDataSet",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetType>(x),
        "CreatedAt": "d",
        "Description": "s",
        "Id": "s",
        "Name": "s",
        "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<s.Origin>(x),
        "OriginDetails": toOriginDetails,
        "SourceId": "s",
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

  async updateRevision(
    {abortSignal, ...params}: RequestConfig & s.UpdateRevisionRequest,
  ): Promise<s.UpdateRevisionResponse> {
    const body: jsonP.JSONObject = {
      Comment: params["Comment"],
      Finalized: params["Finalized"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRevision",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v1/data-sets/${params["DataSetId"]}/revisions/${params["RevisionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Comment": "s",
        "CreatedAt": "d",
        "DataSetId": "s",
        "Finalized": "b",
        "Id": "s",
        "SourceId": "s",
        "UpdatedAt": "d",
      },
    }, await resp.json());
  }

}

function fromRequestDetails(input?: s.RequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ExportAssetToSignedUrl: fromExportAssetToSignedUrlRequestDetails(input["ExportAssetToSignedUrl"]),
    ExportAssetsToS3: fromExportAssetsToS3RequestDetails(input["ExportAssetsToS3"]),
    ExportRevisionsToS3: fromExportRevisionsToS3RequestDetails(input["ExportRevisionsToS3"]),
    ImportAssetFromSignedUrl: fromImportAssetFromSignedUrlRequestDetails(input["ImportAssetFromSignedUrl"]),
    ImportAssetsFromS3: fromImportAssetsFromS3RequestDetails(input["ImportAssetsFromS3"]),
  }
}

function fromExportAssetToSignedUrlRequestDetails(input?: s.ExportAssetToSignedUrlRequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetId: input["AssetId"],
    DataSetId: input["DataSetId"],
    RevisionId: input["RevisionId"],
  }
}

function fromExportAssetsToS3RequestDetails(input?: s.ExportAssetsToS3RequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetDestinations: input["AssetDestinations"]?.map(x => fromAssetDestinationEntry(x)),
    DataSetId: input["DataSetId"],
    Encryption: fromExportServerSideEncryption(input["Encryption"]),
    RevisionId: input["RevisionId"],
  }
}

function fromAssetDestinationEntry(input?: s.AssetDestinationEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetId: input["AssetId"],
    Bucket: input["Bucket"],
    Key: input["Key"],
  }
}
function toAssetDestinationEntry(root: jsonP.JSONValue): s.AssetDestinationEntry {
  return jsonP.readObj({
    required: {
      "AssetId": "s",
      "Bucket": "s",
    },
    optional: {
      "Key": "s",
    },
  }, root);
}

function fromExportServerSideEncryption(input?: s.ExportServerSideEncryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    KmsKeyArn: input["KmsKeyArn"],
    Type: input["Type"],
  }
}
function toExportServerSideEncryption(root: jsonP.JSONValue): s.ExportServerSideEncryption {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServerSideEncryptionTypes>(x),
    },
    optional: {
      "KmsKeyArn": "s",
    },
  }, root);
}

function fromExportRevisionsToS3RequestDetails(input?: s.ExportRevisionsToS3RequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataSetId: input["DataSetId"],
    Encryption: fromExportServerSideEncryption(input["Encryption"]),
    RevisionDestinations: input["RevisionDestinations"]?.map(x => fromRevisionDestinationEntry(x)),
  }
}

function fromRevisionDestinationEntry(input?: s.RevisionDestinationEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Bucket: input["Bucket"],
    KeyPattern: input["KeyPattern"],
    RevisionId: input["RevisionId"],
  }
}
function toRevisionDestinationEntry(root: jsonP.JSONValue): s.RevisionDestinationEntry {
  return jsonP.readObj({
    required: {
      "Bucket": "s",
      "RevisionId": "s",
    },
    optional: {
      "KeyPattern": "s",
    },
  }, root);
}

function fromImportAssetFromSignedUrlRequestDetails(input?: s.ImportAssetFromSignedUrlRequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetName: input["AssetName"],
    DataSetId: input["DataSetId"],
    Md5Hash: input["Md5Hash"],
    RevisionId: input["RevisionId"],
  }
}

function fromImportAssetsFromS3RequestDetails(input?: s.ImportAssetsFromS3RequestDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AssetSources: input["AssetSources"]?.map(x => fromAssetSourceEntry(x)),
    DataSetId: input["DataSetId"],
    RevisionId: input["RevisionId"],
  }
}

function fromAssetSourceEntry(input?: s.AssetSourceEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Bucket: input["Bucket"],
    Key: input["Key"],
  }
}
function toAssetSourceEntry(root: jsonP.JSONValue): s.AssetSourceEntry {
  return jsonP.readObj({
    required: {
      "Bucket": "s",
      "Key": "s",
    },
    optional: {},
  }, root);
}

function toOriginDetails(root: jsonP.JSONValue): s.OriginDetails {
  return jsonP.readObj({
    required: {
      "ProductId": "s",
    },
    optional: {},
  }, root);
}

function toResponseDetails(root: jsonP.JSONValue): s.ResponseDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExportAssetToSignedUrl": toExportAssetToSignedUrlResponseDetails,
      "ExportAssetsToS3": toExportAssetsToS3ResponseDetails,
      "ExportRevisionsToS3": toExportRevisionsToS3ResponseDetails,
      "ImportAssetFromSignedUrl": toImportAssetFromSignedUrlResponseDetails,
      "ImportAssetsFromS3": toImportAssetsFromS3ResponseDetails,
    },
  }, root);
}

function toExportAssetToSignedUrlResponseDetails(root: jsonP.JSONValue): s.ExportAssetToSignedUrlResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetId": "s",
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {
      "SignedUrl": "s",
      "SignedUrlExpiresAt": "d",
    },
  }, root);
}

function toExportAssetsToS3ResponseDetails(root: jsonP.JSONValue): s.ExportAssetsToS3ResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetDestinations": [toAssetDestinationEntry],
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {
      "Encryption": toExportServerSideEncryption,
    },
  }, root);
}

function toExportRevisionsToS3ResponseDetails(root: jsonP.JSONValue): s.ExportRevisionsToS3ResponseDetails {
  return jsonP.readObj({
    required: {
      "DataSetId": "s",
      "RevisionDestinations": [toRevisionDestinationEntry],
    },
    optional: {
      "Encryption": toExportServerSideEncryption,
    },
  }, root);
}

function toImportAssetFromSignedUrlResponseDetails(root: jsonP.JSONValue): s.ImportAssetFromSignedUrlResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetName": "s",
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {
      "Md5Hash": "s",
      "SignedUrl": "s",
      "SignedUrlExpiresAt": "d",
    },
  }, root);
}

function toImportAssetsFromS3ResponseDetails(root: jsonP.JSONValue): s.ImportAssetsFromS3ResponseDetails {
  return jsonP.readObj({
    required: {
      "AssetSources": [toAssetSourceEntry],
      "DataSetId": "s",
      "RevisionId": "s",
    },
    optional: {},
  }, root);
}

function toJobError(root: jsonP.JSONValue): s.JobError {
  return jsonP.readObj({
    required: {
      "Code": (x: jsonP.JSONValue) => cmnP.readEnum<s.Code>(x),
      "Message": "s",
    },
    optional: {
      "Details": toDetails,
      "LimitName": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobErrorLimitName>(x),
      "LimitValue": "n",
      "ResourceId": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobErrorResourceTypes>(x),
    },
  }, root);
}

function toDetails(root: jsonP.JSONValue): s.Details {
  return jsonP.readObj({
    required: {},
    optional: {
      "ImportAssetFromSignedUrlJobErrorDetails": toImportAssetFromSignedUrlJobErrorDetails,
      "ImportAssetsFromS3JobErrorDetails": [toAssetSourceEntry],
    },
  }, root);
}

function toImportAssetFromSignedUrlJobErrorDetails(root: jsonP.JSONValue): s.ImportAssetFromSignedUrlJobErrorDetails {
  return jsonP.readObj({
    required: {
      "AssetName": "s",
    },
    optional: {},
  }, root);
}

function toAssetDetails(root: jsonP.JSONValue): s.AssetDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3SnapshotAsset": toS3SnapshotAsset,
    },
  }, root);
}

function toS3SnapshotAsset(root: jsonP.JSONValue): s.S3SnapshotAsset {
  return jsonP.readObj({
    required: {
      "Size": "n",
    },
    optional: {},
  }, root);
}

function toRevisionEntry(root: jsonP.JSONValue): s.RevisionEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "CreatedAt": "d",
      "DataSetId": "s",
      "Id": "s",
      "UpdatedAt": "d",
    },
    optional: {
      "Comment": "s",
      "Finalized": "b",
      "SourceId": "s",
    },
  }, root);
}

function toDataSetEntry(root: jsonP.JSONValue): s.DataSetEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetType>(x),
      "CreatedAt": "d",
      "Description": "s",
      "Id": "s",
      "Name": "s",
      "Origin": (x: jsonP.JSONValue) => cmnP.readEnum<s.Origin>(x),
      "UpdatedAt": "d",
    },
    optional: {
      "OriginDetails": toOriginDetails,
      "SourceId": "s",
    },
  }, root);
}

function toJobEntry(root: jsonP.JSONValue): s.JobEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "CreatedAt": "d",
      "Details": toResponseDetails,
      "Id": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.State>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.Type>(x),
      "UpdatedAt": "d",
    },
    optional: {
      "Errors": [toJobError],
    },
  }, root);
}

function toAssetEntry(root: jsonP.JSONValue): s.AssetEntry {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "AssetDetails": toAssetDetails,
      "AssetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetType>(x),
      "CreatedAt": "d",
      "DataSetId": "s",
      "Id": "s",
      "Name": "s",
      "RevisionId": "s",
      "UpdatedAt": "d",
    },
    optional: {
      "SourceId": "s",
    },
  }, root);
}
