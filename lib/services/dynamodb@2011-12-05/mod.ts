// Autogenerated API client for: Amazon DynamoDB

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class DynamoDB {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DynamoDB.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2011-12-05",
    "endpointPrefix": "dynamodb",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "DynamoDB",
    "serviceFullName": "Amazon DynamoDB",
    "serviceId": "DynamoDB",
    "signatureVersion": "v4",
    "targetPrefix": "DynamoDB_20111205",
    "uid": "dynamodb-2011-12-05"
  };

  async batchGetItem(
    {abortSignal, ...params}: RequestConfig & BatchGetItemInput,
  ): Promise<BatchGetItemOutput> {
    const body: JSONObject = {...params,
    RequestItems: prt.serializeMap(params["RequestItems"], x => fromKeysAndAttributes(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetItem",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Responses": x => prt.readMap(String, toBatchResponse, x),
        "UnprocessedKeys": x => prt.readMap(String, toKeysAndAttributes, x),
      },
    }, await resp.json());
  }

  async batchWriteItem(
    {abortSignal, ...params}: RequestConfig & BatchWriteItemInput,
  ): Promise<BatchWriteItemOutput> {
    const body: JSONObject = {...params,
    RequestItems: prt.serializeMap(params["RequestItems"], x => x.map(fromWriteRequest)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchWriteItem",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Responses": x => prt.readMap(String, toBatchWriteResponse, x),
        "UnprocessedItems": x => prt.readMap(String, l => Array.isArray(l) ? l.map(toWriteRequest) : [], x),
      },
    }, await resp.json());
  }

  async createTable(
    {abortSignal, ...params}: RequestConfig & CreateTableInput,
  ): Promise<CreateTableOutput> {
    const body: JSONObject = {...params,
    KeySchema: fromKeySchema(params["KeySchema"]),
    ProvisionedThroughput: fromProvisionedThroughput(params["ProvisionedThroughput"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTable",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TableDescription": toTableDescription,
      },
    }, await resp.json());
  }

  async deleteItem(
    {abortSignal, ...params}: RequestConfig & DeleteItemInput,
  ): Promise<DeleteItemOutput> {
    const body: JSONObject = {...params,
    Key: fromKey(params["Key"]),
    Expected: prt.serializeMap(params["Expected"], x => fromExpectedAttributeValue(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteItem",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Attributes": x => prt.readMap(String, toAttributeValue, x),
        "ConsumedCapacityUnits": "n",
      },
    }, await resp.json());
  }

  async deleteTable(
    {abortSignal, ...params}: RequestConfig & DeleteTableInput,
  ): Promise<DeleteTableOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTable",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TableDescription": toTableDescription,
      },
    }, await resp.json());
  }

  async describeTable(
    {abortSignal, ...params}: RequestConfig & DescribeTableInput,
  ): Promise<DescribeTableOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTable",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Table": toTableDescription,
      },
    }, await resp.json());
  }

  async getItem(
    {abortSignal, ...params}: RequestConfig & GetItemInput,
  ): Promise<GetItemOutput> {
    const body: JSONObject = {...params,
    Key: fromKey(params["Key"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetItem",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Item": x => prt.readMap(String, toAttributeValue, x),
        "ConsumedCapacityUnits": "n",
      },
    }, await resp.json());
  }

  async listTables(
    {abortSignal, ...params}: RequestConfig & ListTablesInput = {},
  ): Promise<ListTablesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTables",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TableNames": ["s"],
        "LastEvaluatedTableName": "s",
      },
    }, await resp.json());
  }

  async putItem(
    {abortSignal, ...params}: RequestConfig & PutItemInput,
  ): Promise<PutItemOutput> {
    const body: JSONObject = {...params,
    Item: prt.serializeMap(params["Item"], x => fromAttributeValue(x)),
    Expected: prt.serializeMap(params["Expected"], x => fromExpectedAttributeValue(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutItem",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Attributes": x => prt.readMap(String, toAttributeValue, x),
        "ConsumedCapacityUnits": "n",
      },
    }, await resp.json());
  }

  async query(
    {abortSignal, ...params}: RequestConfig & QueryInput,
  ): Promise<QueryOutput> {
    const body: JSONObject = {...params,
    HashKeyValue: fromAttributeValue(params["HashKeyValue"]),
    RangeKeyCondition: fromCondition(params["RangeKeyCondition"]),
    ExclusiveStartKey: fromKey(params["ExclusiveStartKey"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Query",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Items": [x => prt.readMap(String, toAttributeValue, x)],
        "Count": "n",
        "LastEvaluatedKey": toKey,
        "ConsumedCapacityUnits": "n",
      },
    }, await resp.json());
  }

  async scan(
    {abortSignal, ...params}: RequestConfig & ScanInput,
  ): Promise<ScanOutput> {
    const body: JSONObject = {...params,
    ScanFilter: prt.serializeMap(params["ScanFilter"], x => fromCondition(x)),
    ExclusiveStartKey: fromKey(params["ExclusiveStartKey"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Scan",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Items": [x => prt.readMap(String, toAttributeValue, x)],
        "Count": "n",
        "ScannedCount": "n",
        "LastEvaluatedKey": toKey,
        "ConsumedCapacityUnits": "n",
      },
    }, await resp.json());
  }

  async updateItem(
    {abortSignal, ...params}: RequestConfig & UpdateItemInput,
  ): Promise<UpdateItemOutput> {
    const body: JSONObject = {...params,
    Key: fromKey(params["Key"]),
    AttributeUpdates: prt.serializeMap(params["AttributeUpdates"], x => fromAttributeValueUpdate(x)),
    Expected: prt.serializeMap(params["Expected"], x => fromExpectedAttributeValue(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateItem",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Attributes": x => prt.readMap(String, toAttributeValue, x),
        "ConsumedCapacityUnits": "n",
      },
    }, await resp.json());
  }

  async updateTable(
    {abortSignal, ...params}: RequestConfig & UpdateTableInput,
  ): Promise<UpdateTableOutput> {
    const body: JSONObject = {...params,
    ProvisionedThroughput: fromProvisionedThroughput(params["ProvisionedThroughput"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTable",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TableDescription": toTableDescription,
      },
    }, await resp.json());
  }

  // Resource State Waiters

  /** Checks state up to 25 times, 20 seconds apart (about 9 minutes max wait time). */
  async waitForTableExists(
    params: RequestConfig & DescribeTableInput,
  ): Promise<DescribeTableOutput> {
    const errMessage = 'ResourceNotReady: Resource is not in the state TableExists';
    for (let i = 0; i < 25; i++) {
      try {
        const resp = await this.describeTable(params);
        if (resp["Table"]?.["TableStatus"] === "ACTIVE") return resp;
      } catch (err) {
        if (!["ResourceNotFoundException"].includes(err.code)) throw err;
      }
      await new Promise(r => setTimeout(r, 20000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 25 times, 20 seconds apart (about 9 minutes max wait time). */
  async waitForTableNotExists(
    params: RequestConfig & DescribeTableInput,
  ): Promise<Error | DescribeTableOutput> {
    const errMessage = 'ResourceNotReady: Resource is not in the state TableNotExists';
    for (let i = 0; i < 25; i++) {
      try {
        const resp = await this.describeTable(params);
      } catch (err) {
        if (["ResourceNotFoundException"].includes(err.code)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 20000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface BatchGetItemInput {
  RequestItems: { [key: string]: KeysAndAttributes };
}

// refs: 1 - tags: named, input
export interface BatchWriteItemInput {
  RequestItems: { [key: string]: WriteRequest[] };
}

// refs: 1 - tags: named, input
export interface CreateTableInput {
  TableName: string;
  KeySchema: KeySchema;
  ProvisionedThroughput: ProvisionedThroughput;
}

// refs: 1 - tags: named, input
export interface DeleteItemInput {
  TableName: string;
  Key: Key;
  Expected?: { [key: string]: ExpectedAttributeValue } | null;
  ReturnValues?: ReturnValue | null;
}

// refs: 1 - tags: named, input
export interface DeleteTableInput {
  TableName: string;
}

// refs: 1 - tags: named, input
export interface DescribeTableInput {
  TableName: string;
}

// refs: 1 - tags: named, input
export interface GetItemInput {
  TableName: string;
  Key: Key;
  AttributesToGet?: string[] | null;
  ConsistentRead?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListTablesInput {
  ExclusiveStartTableName?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface PutItemInput {
  TableName: string;
  Item: { [key: string]: AttributeValue };
  Expected?: { [key: string]: ExpectedAttributeValue } | null;
  ReturnValues?: ReturnValue | null;
}

// refs: 1 - tags: named, input
export interface QueryInput {
  TableName: string;
  AttributesToGet?: string[] | null;
  Limit?: number | null;
  ConsistentRead?: boolean | null;
  Count?: boolean | null;
  HashKeyValue: AttributeValue;
  RangeKeyCondition?: Condition | null;
  ScanIndexForward?: boolean | null;
  ExclusiveStartKey?: Key | null;
}

// refs: 1 - tags: named, input
export interface ScanInput {
  TableName: string;
  AttributesToGet?: string[] | null;
  Limit?: number | null;
  Count?: boolean | null;
  ScanFilter?: { [key: string]: Condition } | null;
  ExclusiveStartKey?: Key | null;
}

// refs: 1 - tags: named, input
export interface UpdateItemInput {
  TableName: string;
  Key: Key;
  AttributeUpdates: { [key: string]: AttributeValueUpdate };
  Expected?: { [key: string]: ExpectedAttributeValue } | null;
  ReturnValues?: ReturnValue | null;
}

// refs: 1 - tags: named, input
export interface UpdateTableInput {
  TableName: string;
  ProvisionedThroughput: ProvisionedThroughput;
}

// refs: 1 - tags: named, output
export interface BatchGetItemOutput {
  Responses?: { [key: string]: BatchResponse } | null;
  UnprocessedKeys?: { [key: string]: KeysAndAttributes } | null;
}

// refs: 1 - tags: named, output
export interface BatchWriteItemOutput {
  Responses?: { [key: string]: BatchWriteResponse } | null;
  UnprocessedItems?: { [key: string]: WriteRequest[] } | null;
}

// refs: 1 - tags: named, output
export interface CreateTableOutput {
  TableDescription?: TableDescription | null;
}

// refs: 1 - tags: named, output
export interface DeleteItemOutput {
  Attributes?: { [key: string]: AttributeValue } | null;
  ConsumedCapacityUnits?: number | null;
}

// refs: 1 - tags: named, output
export interface DeleteTableOutput {
  TableDescription?: TableDescription | null;
}

// refs: 1 - tags: named, output
export interface DescribeTableOutput {
  Table?: TableDescription | null;
}

// refs: 1 - tags: named, output
export interface GetItemOutput {
  Item?: { [key: string]: AttributeValue } | null;
  ConsumedCapacityUnits?: number | null;
}

// refs: 1 - tags: named, output
export interface ListTablesOutput {
  TableNames?: string[] | null;
  LastEvaluatedTableName?: string | null;
}

// refs: 1 - tags: named, output
export interface PutItemOutput {
  Attributes?: { [key: string]: AttributeValue } | null;
  ConsumedCapacityUnits?: number | null;
}

// refs: 1 - tags: named, output
export interface QueryOutput {
  Items?: ({ [key: string]: AttributeValue })[] | null;
  Count?: number | null;
  LastEvaluatedKey?: Key | null;
  ConsumedCapacityUnits?: number | null;
}

// refs: 1 - tags: named, output
export interface ScanOutput {
  Items?: ({ [key: string]: AttributeValue })[] | null;
  Count?: number | null;
  ScannedCount?: number | null;
  LastEvaluatedKey?: Key | null;
  ConsumedCapacityUnits?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateItemOutput {
  Attributes?: { [key: string]: AttributeValue } | null;
  ConsumedCapacityUnits?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateTableOutput {
  TableDescription?: TableDescription | null;
}

// refs: 2 - tags: input, named, interface, output
export interface KeysAndAttributes {
  Keys: Key[];
  AttributesToGet?: string[] | null;
  ConsistentRead?: boolean | null;
}
function fromKeysAndAttributes(input?: KeysAndAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
    Keys: input["Keys"]?.map(x => fromKey(x)),
  }
}
function toKeysAndAttributes(root: JSONValue): KeysAndAttributes {
  return prt.readObj({
    required: {
      "Keys": [toKey],
    },
    optional: {
      "AttributesToGet": ["s"],
      "ConsistentRead": "b",
    },
  }, root);
}

// refs: 11 - tags: input, named, interface, output
export interface Key {
  HashKeyElement: AttributeValue;
  RangeKeyElement?: AttributeValue | null;
}
function fromKey(input?: Key | null): JSONValue {
  if (!input) return input;
  return {...input,
    HashKeyElement: fromAttributeValue(input["HashKeyElement"]),
    RangeKeyElement: fromAttributeValue(input["RangeKeyElement"]),
  }
}
function toKey(root: JSONValue): Key {
  return prt.readObj({
    required: {
      "HashKeyElement": toAttributeValue,
    },
    optional: {
      "RangeKeyElement": toAttributeValue,
    },
  }, root);
}

// refs: 39 - tags: input, named, interface, output
export interface AttributeValue {
  S?: string | null;
  N?: string | null;
  B?: Uint8Array | string | null;
  SS?: string[] | null;
  NS?: string[] | null;
  BS?: (Uint8Array | string)[] | null;
}
function fromAttributeValue(input?: AttributeValue | null): JSONValue {
  if (!input) return input;
  return {...input,
    B: prt.serializeBlob(input["B"]),
    BS: input["BS"]?.map(x => prt.serializeBlob(x)),
  }
}
function toAttributeValue(root: JSONValue): AttributeValue {
  return prt.readObj({
    required: {},
    optional: {
      "S": "s",
      "N": "s",
      "B": "a",
      "SS": ["s"],
      "NS": ["s"],
      "BS": ["a"],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface WriteRequest {
  PutRequest?: PutRequest | null;
  DeleteRequest?: DeleteRequest | null;
}
function fromWriteRequest(input?: WriteRequest | null): JSONValue {
  if (!input) return input;
  return {...input,
    PutRequest: fromPutRequest(input["PutRequest"]),
    DeleteRequest: fromDeleteRequest(input["DeleteRequest"]),
  }
}
function toWriteRequest(root: JSONValue): WriteRequest {
  return prt.readObj({
    required: {},
    optional: {
      "PutRequest": toPutRequest,
      "DeleteRequest": toDeleteRequest,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface PutRequest {
  Item: { [key: string]: AttributeValue };
}
function fromPutRequest(input?: PutRequest | null): JSONValue {
  if (!input) return input;
  return {...input,
    Item: prt.serializeMap(input["Item"], x => fromAttributeValue(x)),
  }
}
function toPutRequest(root: JSONValue): PutRequest {
  return prt.readObj({
    required: {
      "Item": x => prt.readMap(String, toAttributeValue, x),
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DeleteRequest {
  Key: Key;
}
function fromDeleteRequest(input?: DeleteRequest | null): JSONValue {
  if (!input) return input;
  return {...input,
    Key: fromKey(input["Key"]),
  }
}
function toDeleteRequest(root: JSONValue): DeleteRequest {
  return prt.readObj({
    required: {
      "Key": toKey,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface KeySchema {
  HashKeyElement: KeySchemaElement;
  RangeKeyElement?: KeySchemaElement | null;
}
function fromKeySchema(input?: KeySchema | null): JSONValue {
  if (!input) return input;
  return {...input,
    HashKeyElement: fromKeySchemaElement(input["HashKeyElement"]),
    RangeKeyElement: fromKeySchemaElement(input["RangeKeyElement"]),
  }
}
function toKeySchema(root: JSONValue): KeySchema {
  return prt.readObj({
    required: {
      "HashKeyElement": toKeySchemaElement,
    },
    optional: {
      "RangeKeyElement": toKeySchemaElement,
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface KeySchemaElement {
  AttributeName: string;
  AttributeType: ScalarAttributeType;
}
function fromKeySchemaElement(input?: KeySchemaElement | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toKeySchemaElement(root: JSONValue): KeySchemaElement {
  return prt.readObj({
    required: {
      "AttributeName": "s",
      "AttributeType": toScalarAttributeType,
    },
    optional: {},
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type ScalarAttributeType =
| "S"
| "N"
| "B"
;

function toScalarAttributeType(root: JSONValue): ScalarAttributeType | null {
  return ( false
    || root == "S"
    || root == "N"
    || root == "B"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface
export interface ProvisionedThroughput {
  ReadCapacityUnits: number;
  WriteCapacityUnits: number;
}
function fromProvisionedThroughput(input?: ProvisionedThroughput | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, interface
export interface ExpectedAttributeValue {
  Value?: AttributeValue | null;
  Exists?: boolean | null;
}
function fromExpectedAttributeValue(input?: ExpectedAttributeValue | null): JSONValue {
  if (!input) return input;
  return {...input,
    Value: fromAttributeValue(input["Value"]),
  }
}

// refs: 3 - tags: input, named, enum
export type ReturnValue =
| "NONE"
| "ALL_OLD"
| "UPDATED_OLD"
| "ALL_NEW"
| "UPDATED_NEW"
;


// refs: 2 - tags: input, named, interface
export interface Condition {
  AttributeValueList?: AttributeValue[] | null;
  ComparisonOperator: ComparisonOperator;
}
function fromCondition(input?: Condition | null): JSONValue {
  if (!input) return input;
  return {...input,
    AttributeValueList: input["AttributeValueList"]?.map(x => fromAttributeValue(x)),
  }
}

// refs: 2 - tags: input, named, enum
export type ComparisonOperator =
| "EQ"
| "NE"
| "IN"
| "LE"
| "LT"
| "GE"
| "GT"
| "BETWEEN"
| "NOT_NULL"
| "NULL"
| "CONTAINS"
| "NOT_CONTAINS"
| "BEGINS_WITH"
;


// refs: 1 - tags: input, named, interface
export interface AttributeValueUpdate {
  Value?: AttributeValue | null;
  Action?: AttributeAction | null;
}
function fromAttributeValueUpdate(input?: AttributeValueUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    Value: fromAttributeValue(input["Value"]),
  }
}

// refs: 1 - tags: input, named, enum
export type AttributeAction =
| "ADD"
| "PUT"
| "DELETE"
;


// refs: 1 - tags: output, named, interface
export interface BatchResponse {
  Items?: ({ [key: string]: AttributeValue })[] | null;
  ConsumedCapacityUnits?: number | null;
}
function toBatchResponse(root: JSONValue): BatchResponse {
  return prt.readObj({
    required: {},
    optional: {
      "Items": [x => prt.readMap(String, toAttributeValue, x)],
      "ConsumedCapacityUnits": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchWriteResponse {
  ConsumedCapacityUnits?: number | null;
}
function toBatchWriteResponse(root: JSONValue): BatchWriteResponse {
  return prt.readObj({
    required: {},
    optional: {
      "ConsumedCapacityUnits": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface TableDescription {
  TableName?: string | null;
  KeySchema?: KeySchema | null;
  TableStatus?: TableStatus | null;
  CreationDateTime?: Date | number | null;
  ProvisionedThroughput?: ProvisionedThroughputDescription | null;
  TableSizeBytes?: number | null;
  ItemCount?: number | null;
}
function toTableDescription(root: JSONValue): TableDescription {
  return prt.readObj({
    required: {},
    optional: {
      "TableName": "s",
      "KeySchema": toKeySchema,
      "TableStatus": toTableStatus,
      "CreationDateTime": "d",
      "ProvisionedThroughput": toProvisionedThroughputDescription,
      "TableSizeBytes": "n",
      "ItemCount": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type TableStatus =
| "CREATING"
| "UPDATING"
| "DELETING"
| "ACTIVE"
;
function toTableStatus(root: JSONValue): TableStatus | null {
  return ( false
    || root == "CREATING"
    || root == "UPDATING"
    || root == "DELETING"
    || root == "ACTIVE"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface ProvisionedThroughputDescription {
  LastIncreaseDateTime?: Date | number | null;
  LastDecreaseDateTime?: Date | number | null;
  NumberOfDecreasesToday?: number | null;
  ReadCapacityUnits?: number | null;
  WriteCapacityUnits?: number | null;
}
function toProvisionedThroughputDescription(root: JSONValue): ProvisionedThroughputDescription {
  return prt.readObj({
    required: {},
    optional: {
      "LastIncreaseDateTime": "d",
      "LastDecreaseDateTime": "d",
      "NumberOfDecreasesToday": "n",
      "ReadCapacityUnits": "n",
      "WriteCapacityUnits": "n",
    },
  }, root);
}
