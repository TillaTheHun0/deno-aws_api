// Autogenerated API client for: Amazon WorkLink

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class WorkLink {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WorkLink.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-09-25",
    "endpointPrefix": "worklink",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "WorkLink",
    "serviceFullName": "Amazon WorkLink",
    "serviceId": "WorkLink",
    "signatureVersion": "v4",
    "signingName": "worklink",
    "uid": "worklink-2018-09-25"
  };

  async associateDomain(
    {abortSignal, ...params}: RequestConfig & s.AssociateDomainRequest,
  ): Promise<s.AssociateDomainResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DomainName: params["DomainName"],
      DisplayName: params["DisplayName"],
      AcmCertificateArn: params["AcmCertificateArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDomain",
      requestUri: "/associateDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateWebsiteAuthorizationProvider(
    {abortSignal, ...params}: RequestConfig & s.AssociateWebsiteAuthorizationProviderRequest,
  ): Promise<s.AssociateWebsiteAuthorizationProviderResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      AuthorizationProviderType: params["AuthorizationProviderType"],
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWebsiteAuthorizationProvider",
      requestUri: "/associateWebsiteAuthorizationProvider",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuthorizationProviderId": "s",
      },
    }, await resp.json());
  }

  async associateWebsiteCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & s.AssociateWebsiteCertificateAuthorityRequest,
  ): Promise<s.AssociateWebsiteCertificateAuthorityResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      Certificate: params["Certificate"],
      DisplayName: params["DisplayName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWebsiteCertificateAuthority",
      requestUri: "/associateWebsiteCertificateAuthority",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WebsiteCaId": "s",
      },
    }, await resp.json());
  }

  async createFleet(
    {abortSignal, ...params}: RequestConfig & s.CreateFleetRequest,
  ): Promise<s.CreateFleetResponse> {
    const body: jsonP.JSONObject = {
      FleetName: params["FleetName"],
      DisplayName: params["DisplayName"],
      OptimizeForEndUserLocation: params["OptimizeForEndUserLocation"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFleet",
      requestUri: "/createFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FleetArn": "s",
      },
    }, await resp.json());
  }

  async deleteFleet(
    {abortSignal, ...params}: RequestConfig & s.DeleteFleetRequest,
  ): Promise<s.DeleteFleetResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFleet",
      requestUri: "/deleteFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAuditStreamConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeAuditStreamConfigurationRequest,
  ): Promise<s.DescribeAuditStreamConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAuditStreamConfiguration",
      requestUri: "/describeAuditStreamConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuditStreamArn": "s",
      },
    }, await resp.json());
  }

  async describeCompanyNetworkConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeCompanyNetworkConfigurationRequest,
  ): Promise<s.DescribeCompanyNetworkConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCompanyNetworkConfiguration",
      requestUri: "/describeCompanyNetworkConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VpcId": "s",
        "SubnetIds": ["s"],
        "SecurityGroupIds": ["s"],
      },
    }, await resp.json());
  }

  async describeDevice(
    {abortSignal, ...params}: RequestConfig & s.DescribeDeviceRequest,
  ): Promise<s.DescribeDeviceResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DeviceId: params["DeviceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDevice",
      requestUri: "/describeDevice",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceStatus>(x),
        "Model": "s",
        "Manufacturer": "s",
        "OperatingSystem": "s",
        "OperatingSystemVersion": "s",
        "PatchLevel": "s",
        "FirstAccessedTime": "d",
        "LastAccessedTime": "d",
        "Username": "s",
      },
    }, await resp.json());
  }

  async describeDevicePolicyConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeDevicePolicyConfigurationRequest,
  ): Promise<s.DescribeDevicePolicyConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDevicePolicyConfiguration",
      requestUri: "/describeDevicePolicyConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceCaCertificate": "s",
      },
    }, await resp.json());
  }

  async describeDomain(
    {abortSignal, ...params}: RequestConfig & s.DescribeDomainRequest,
  ): Promise<s.DescribeDomainResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDomain",
      requestUri: "/describeDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DomainName": "s",
        "DisplayName": "s",
        "CreatedTime": "d",
        "DomainStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DomainStatus>(x),
        "AcmCertificateArn": "s",
      },
    }, await resp.json());
  }

  async describeFleetMetadata(
    {abortSignal, ...params}: RequestConfig & s.DescribeFleetMetadataRequest,
  ): Promise<s.DescribeFleetMetadataResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFleetMetadata",
      requestUri: "/describeFleetMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreatedTime": "d",
        "LastUpdatedTime": "d",
        "FleetName": "s",
        "DisplayName": "s",
        "OptimizeForEndUserLocation": "b",
        "CompanyCode": "s",
        "FleetStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FleetStatus>(x),
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeIdentityProviderConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeIdentityProviderConfigurationRequest,
  ): Promise<s.DescribeIdentityProviderConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIdentityProviderConfiguration",
      requestUri: "/describeIdentityProviderConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityProviderType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IdentityProviderType>(x),
        "ServiceProviderSamlMetadata": "s",
        "IdentityProviderSamlMetadata": "s",
      },
    }, await resp.json());
  }

  async describeWebsiteCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & s.DescribeWebsiteCertificateAuthorityRequest,
  ): Promise<s.DescribeWebsiteCertificateAuthorityResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      WebsiteCaId: params["WebsiteCaId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWebsiteCertificateAuthority",
      requestUri: "/describeWebsiteCertificateAuthority",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Certificate": "s",
        "CreatedTime": "d",
        "DisplayName": "s",
      },
    }, await resp.json());
  }

  async disassociateDomain(
    {abortSignal, ...params}: RequestConfig & s.DisassociateDomainRequest,
  ): Promise<s.DisassociateDomainResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDomain",
      requestUri: "/disassociateDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWebsiteAuthorizationProvider(
    {abortSignal, ...params}: RequestConfig & s.DisassociateWebsiteAuthorizationProviderRequest,
  ): Promise<s.DisassociateWebsiteAuthorizationProviderResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      AuthorizationProviderId: params["AuthorizationProviderId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateWebsiteAuthorizationProvider",
      requestUri: "/disassociateWebsiteAuthorizationProvider",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWebsiteCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & s.DisassociateWebsiteCertificateAuthorityRequest,
  ): Promise<s.DisassociateWebsiteCertificateAuthorityResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      WebsiteCaId: params["WebsiteCaId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateWebsiteCertificateAuthority",
      requestUri: "/disassociateWebsiteCertificateAuthority",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async listDevices(
    {abortSignal, ...params}: RequestConfig & s.ListDevicesRequest,
  ): Promise<s.ListDevicesResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDevices",
      requestUri: "/listDevices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Devices": [toDeviceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDomains(
    {abortSignal, ...params}: RequestConfig & s.ListDomainsRequest,
  ): Promise<s.ListDomainsResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDomains",
      requestUri: "/listDomains",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Domains": [toDomainSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFleets(
    {abortSignal, ...params}: RequestConfig & s.ListFleetsRequest = {},
  ): Promise<s.ListFleetsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFleets",
      requestUri: "/listFleets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FleetSummaryList": [toFleetSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listWebsiteAuthorizationProviders(
    {abortSignal, ...params}: RequestConfig & s.ListWebsiteAuthorizationProvidersRequest,
  ): Promise<s.ListWebsiteAuthorizationProvidersResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWebsiteAuthorizationProviders",
      requestUri: "/listWebsiteAuthorizationProviders",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WebsiteAuthorizationProviders": [toWebsiteAuthorizationProviderSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listWebsiteCertificateAuthorities(
    {abortSignal, ...params}: RequestConfig & s.ListWebsiteCertificateAuthoritiesRequest,
  ): Promise<s.ListWebsiteCertificateAuthoritiesResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWebsiteCertificateAuthorities",
      requestUri: "/listWebsiteCertificateAuthorities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WebsiteCertificateAuthorities": [toWebsiteCaSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async restoreDomainAccess(
    {abortSignal, ...params}: RequestConfig & s.RestoreDomainAccessRequest,
  ): Promise<s.RestoreDomainAccessResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreDomainAccess",
      requestUri: "/restoreDomainAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async revokeDomainAccess(
    {abortSignal, ...params}: RequestConfig & s.RevokeDomainAccessRequest,
  ): Promise<s.RevokeDomainAccessResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RevokeDomainAccess",
      requestUri: "/revokeDomainAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async signOutUser(
    {abortSignal, ...params}: RequestConfig & s.SignOutUserRequest,
  ): Promise<s.SignOutUserResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      Username: params["Username"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SignOutUser",
      requestUri: "/signOutUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAuditStreamConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateAuditStreamConfigurationRequest,
  ): Promise<s.UpdateAuditStreamConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      AuditStreamArn: params["AuditStreamArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAuditStreamConfiguration",
      requestUri: "/updateAuditStreamConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateCompanyNetworkConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateCompanyNetworkConfigurationRequest,
  ): Promise<s.UpdateCompanyNetworkConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      VpcId: params["VpcId"],
      SubnetIds: params["SubnetIds"],
      SecurityGroupIds: params["SecurityGroupIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCompanyNetworkConfiguration",
      requestUri: "/updateCompanyNetworkConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDevicePolicyConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateDevicePolicyConfigurationRequest,
  ): Promise<s.UpdateDevicePolicyConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DeviceCaCertificate: params["DeviceCaCertificate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDevicePolicyConfiguration",
      requestUri: "/updateDevicePolicyConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDomainMetadata(
    {abortSignal, ...params}: RequestConfig & s.UpdateDomainMetadataRequest,
  ): Promise<s.UpdateDomainMetadataResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DomainName: params["DomainName"],
      DisplayName: params["DisplayName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainMetadata",
      requestUri: "/updateDomainMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFleetMetadata(
    {abortSignal, ...params}: RequestConfig & s.UpdateFleetMetadataRequest,
  ): Promise<s.UpdateFleetMetadataResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      DisplayName: params["DisplayName"],
      OptimizeForEndUserLocation: params["OptimizeForEndUserLocation"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFleetMetadata",
      requestUri: "/UpdateFleetMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateIdentityProviderConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateIdentityProviderConfigurationRequest,
  ): Promise<s.UpdateIdentityProviderConfigurationResponse> {
    const body: jsonP.JSONObject = {
      FleetArn: params["FleetArn"],
      IdentityProviderType: params["IdentityProviderType"],
      IdentityProviderSamlMetadata: params["IdentityProviderSamlMetadata"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIdentityProviderConfiguration",
      requestUri: "/updateIdentityProviderConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function toDeviceSummary(root: jsonP.JSONValue): s.DeviceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceId": "s",
      "DeviceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceStatus>(x),
    },
  }, root);
}

function toDomainSummary(root: jsonP.JSONValue): s.DomainSummary {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
      "CreatedTime": "d",
      "DomainStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DomainStatus>(x),
    },
    optional: {
      "DisplayName": "s",
    },
  }, root);
}

function toFleetSummary(root: jsonP.JSONValue): s.FleetSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "FleetArn": "s",
      "CreatedTime": "d",
      "LastUpdatedTime": "d",
      "FleetName": "s",
      "DisplayName": "s",
      "CompanyCode": "s",
      "FleetStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.FleetStatus>(x),
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toWebsiteAuthorizationProviderSummary(root: jsonP.JSONValue): s.WebsiteAuthorizationProviderSummary {
  return jsonP.readObj({
    required: {
      "AuthorizationProviderType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AuthorizationProviderType>(x),
    },
    optional: {
      "AuthorizationProviderId": "s",
      "DomainName": "s",
      "CreatedTime": "d",
    },
  }, root);
}

function toWebsiteCaSummary(root: jsonP.JSONValue): s.WebsiteCaSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "WebsiteCaId": "s",
      "CreatedTime": "d",
      "DisplayName": "s",
    },
  }, root);
}
