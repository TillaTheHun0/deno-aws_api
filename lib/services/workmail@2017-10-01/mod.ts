// Autogenerated API client for: Amazon WorkMail

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class WorkMail {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WorkMail.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-10-01",
    "endpointPrefix": "workmail",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon WorkMail",
    "serviceId": "WorkMail",
    "signatureVersion": "v4",
    "targetPrefix": "WorkMailService",
    "uid": "workmail-2017-10-01"
  };

  async associateDelegateToResource(
    {abortSignal, ...params}: RequestConfig & AssociateDelegateToResourceRequest,
  ): Promise<AssociateDelegateToResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDelegateToResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateMemberToGroup(
    {abortSignal, ...params}: RequestConfig & AssociateMemberToGroupRequest,
  ): Promise<AssociateMemberToGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateMemberToGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelMailboxExportJob(
    {abortSignal, ...params}: RequestConfig & CancelMailboxExportJobRequest,
  ): Promise<CancelMailboxExportJobResponse> {
    const body: JSONObject = {...params,
    ClientToken: params["ClientToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelMailboxExportJob",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAlias(
    {abortSignal, ...params}: RequestConfig & CreateAliasRequest,
  ): Promise<CreateAliasResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAlias",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createGroup(
    {abortSignal, ...params}: RequestConfig & CreateGroupRequest,
  ): Promise<CreateGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async createOrganization(
    {abortSignal, ...params}: RequestConfig & CreateOrganizationRequest,
  ): Promise<CreateOrganizationResponse> {
    const body: JSONObject = {...params,
    ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    Domains: params["Domains"]?.map(x => fromDomain(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationId": "s",
      },
    }, await resp.json());
  }

  async createResource(
    {abortSignal, ...params}: RequestConfig & CreateResourceRequest,
  ): Promise<CreateResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ResourceId": "s",
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & CreateUserRequest,
  ): Promise<CreateUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserId": "s",
      },
    }, await resp.json());
  }

  async deleteAccessControlRule(
    {abortSignal, ...params}: RequestConfig & DeleteAccessControlRuleRequest,
  ): Promise<DeleteAccessControlRuleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAccessControlRule",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAlias(
    {abortSignal, ...params}: RequestConfig & DeleteAliasRequest,
  ): Promise<DeleteAliasResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAlias",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGroup(
    {abortSignal, ...params}: RequestConfig & DeleteGroupRequest,
  ): Promise<DeleteGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteMailboxPermissions(
    {abortSignal, ...params}: RequestConfig & DeleteMailboxPermissionsRequest,
  ): Promise<DeleteMailboxPermissionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMailboxPermissions",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteOrganization(
    {abortSignal, ...params}: RequestConfig & DeleteOrganizationRequest,
  ): Promise<DeleteOrganizationResponse> {
    const body: JSONObject = {...params,
    ClientToken: params["ClientToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationId": "s",
        "State": "s",
      },
    }, await resp.json());
  }

  async deleteResource(
    {abortSignal, ...params}: RequestConfig & DeleteResourceRequest,
  ): Promise<DeleteResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteRetentionPolicyRequest,
  ): Promise<DeleteRetentionPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRetentionPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<DeleteUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUser",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterFromWorkMail(
    {abortSignal, ...params}: RequestConfig & DeregisterFromWorkMailRequest,
  ): Promise<DeregisterFromWorkMailResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterFromWorkMail",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeGroup(
    {abortSignal, ...params}: RequestConfig & DescribeGroupRequest,
  ): Promise<DescribeGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GroupId": "s",
        "Name": "s",
        "Email": "s",
        "State": toEntityState,
        "EnabledDate": "d",
        "DisabledDate": "d",
      },
    }, await resp.json());
  }

  async describeMailboxExportJob(
    {abortSignal, ...params}: RequestConfig & DescribeMailboxExportJobRequest,
  ): Promise<DescribeMailboxExportJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMailboxExportJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EntityId": "s",
        "Description": "s",
        "RoleArn": "s",
        "KmsKeyArn": "s",
        "S3BucketName": "s",
        "S3Prefix": "s",
        "S3Path": "s",
        "EstimatedProgress": "n",
        "State": toMailboxExportJobState,
        "ErrorInfo": "s",
        "StartTime": "d",
        "EndTime": "d",
      },
    }, await resp.json());
  }

  async describeOrganization(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationRequest,
  ): Promise<DescribeOrganizationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganization",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationId": "s",
        "Alias": "s",
        "State": "s",
        "DirectoryId": "s",
        "DirectoryType": "s",
        "DefaultMailDomain": "s",
        "CompletedDate": "d",
        "ErrorMessage": "s",
        "ARN": "s",
      },
    }, await resp.json());
  }

  async describeResource(
    {abortSignal, ...params}: RequestConfig & DescribeResourceRequest,
  ): Promise<DescribeResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ResourceId": "s",
        "Email": "s",
        "Name": "s",
        "Type": toResourceType,
        "BookingOptions": toBookingOptions,
        "State": toEntityState,
        "EnabledDate": "d",
        "DisabledDate": "d",
      },
    }, await resp.json());
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & DescribeUserRequest,
  ): Promise<DescribeUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUser",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserId": "s",
        "Name": "s",
        "Email": "s",
        "DisplayName": "s",
        "State": toEntityState,
        "UserRole": toUserRole,
        "EnabledDate": "d",
        "DisabledDate": "d",
      },
    }, await resp.json());
  }

  async disassociateDelegateFromResource(
    {abortSignal, ...params}: RequestConfig & DisassociateDelegateFromResourceRequest,
  ): Promise<DisassociateDelegateFromResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDelegateFromResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateMemberFromGroup(
    {abortSignal, ...params}: RequestConfig & DisassociateMemberFromGroupRequest,
  ): Promise<DisassociateMemberFromGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateMemberFromGroup",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccessControlEffect(
    {abortSignal, ...params}: RequestConfig & GetAccessControlEffectRequest,
  ): Promise<GetAccessControlEffectResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAccessControlEffect",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Effect": toAccessControlRuleEffect,
        "MatchedRules": ["s"],
      },
    }, await resp.json());
  }

  async getDefaultRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & GetDefaultRetentionPolicyRequest,
  ): Promise<GetDefaultRetentionPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDefaultRetentionPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "FolderConfigurations": [toFolderConfiguration],
      },
    }, await resp.json());
  }

  async getMailboxDetails(
    {abortSignal, ...params}: RequestConfig & GetMailboxDetailsRequest,
  ): Promise<GetMailboxDetailsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMailboxDetails",
    });
    return prt.readObj({
      required: {},
      optional: {
        "MailboxQuota": "n",
        "MailboxSize": "n",
      },
    }, await resp.json());
  }

  async listAccessControlRules(
    {abortSignal, ...params}: RequestConfig & ListAccessControlRulesRequest,
  ): Promise<ListAccessControlRulesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccessControlRules",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Rules": [toAccessControlRule],
      },
    }, await resp.json());
  }

  async listAliases(
    {abortSignal, ...params}: RequestConfig & ListAliasesRequest,
  ): Promise<ListAliasesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAliases",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Aliases": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGroupMembers(
    {abortSignal, ...params}: RequestConfig & ListGroupMembersRequest,
  ): Promise<ListGroupMembersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroupMembers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Members": [toMember],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & ListGroupsRequest,
  ): Promise<ListGroupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Groups": [toGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMailboxExportJobs(
    {abortSignal, ...params}: RequestConfig & ListMailboxExportJobsRequest,
  ): Promise<ListMailboxExportJobsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMailboxExportJobs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Jobs": [toMailboxExportJob],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMailboxPermissions(
    {abortSignal, ...params}: RequestConfig & ListMailboxPermissionsRequest,
  ): Promise<ListMailboxPermissionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMailboxPermissions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Permissions": [toPermission],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizations(
    {abortSignal, ...params}: RequestConfig & ListOrganizationsRequest = {},
  ): Promise<ListOrganizationsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOrganizations",
    });
    return prt.readObj({
      required: {},
      optional: {
        "OrganizationSummaries": [toOrganizationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceDelegates(
    {abortSignal, ...params}: RequestConfig & ListResourceDelegatesRequest,
  ): Promise<ListResourceDelegatesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceDelegates",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Delegates": [toDelegate],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResources(
    {abortSignal, ...params}: RequestConfig & ListResourcesRequest,
  ): Promise<ListResourcesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResources",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Resources": [toResource],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & ListUsersRequest,
  ): Promise<ListUsersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUsers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Users": [toUser],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putAccessControlRule(
    {abortSignal, ...params}: RequestConfig & PutAccessControlRuleRequest,
  ): Promise<PutAccessControlRuleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccessControlRule",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putMailboxPermissions(
    {abortSignal, ...params}: RequestConfig & PutMailboxPermissionsRequest,
  ): Promise<PutMailboxPermissionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutMailboxPermissions",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & PutRetentionPolicyRequest,
  ): Promise<PutRetentionPolicyResponse> {
    const body: JSONObject = {...params,
    FolderConfigurations: params["FolderConfigurations"]?.map(x => fromFolderConfiguration(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRetentionPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async registerToWorkMail(
    {abortSignal, ...params}: RequestConfig & RegisterToWorkMailRequest,
  ): Promise<RegisterToWorkMailResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterToWorkMail",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async resetPassword(
    {abortSignal, ...params}: RequestConfig & ResetPasswordRequest,
  ): Promise<ResetPasswordResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetPassword",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startMailboxExportJob(
    {abortSignal, ...params}: RequestConfig & StartMailboxExportJobRequest,
  ): Promise<StartMailboxExportJobResponse> {
    const body: JSONObject = {...params,
    ClientToken: params["ClientToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartMailboxExportJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateMailboxQuota(
    {abortSignal, ...params}: RequestConfig & UpdateMailboxQuotaRequest,
  ): Promise<UpdateMailboxQuotaResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMailboxQuota",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePrimaryEmailAddress(
    {abortSignal, ...params}: RequestConfig & UpdatePrimaryEmailAddressRequest,
  ): Promise<UpdatePrimaryEmailAddressResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePrimaryEmailAddress",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateResource(
    {abortSignal, ...params}: RequestConfig & UpdateResourceRequest,
  ): Promise<UpdateResourceResponse> {
    const body: JSONObject = {...params,
    BookingOptions: fromBookingOptions(params["BookingOptions"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateDelegateToResourceRequest {
  OrganizationId: string;
  ResourceId: string;
  EntityId: string;
}

// refs: 1 - tags: named, input
export interface AssociateMemberToGroupRequest {
  OrganizationId: string;
  GroupId: string;
  MemberId: string;
}

// refs: 1 - tags: named, input
export interface CancelMailboxExportJobRequest {
  ClientToken: string;
  JobId: string;
  OrganizationId: string;
}

// refs: 1 - tags: named, input
export interface CreateAliasRequest {
  OrganizationId: string;
  EntityId: string;
  Alias: string;
}

// refs: 1 - tags: named, input
export interface CreateGroupRequest {
  OrganizationId: string;
  Name: string;
}

// refs: 1 - tags: named, input
export interface CreateOrganizationRequest {
  DirectoryId?: string | null;
  Alias: string;
  ClientToken?: string | null;
  Domains?: Domain[] | null;
  KmsKeyArn?: string | null;
  EnableInteroperability?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateResourceRequest {
  OrganizationId: string;
  Name: string;
  Type: ResourceType;
}

// refs: 1 - tags: named, input
export interface CreateUserRequest {
  OrganizationId: string;
  Name: string;
  DisplayName: string;
  Password: string;
}

// refs: 1 - tags: named, input
export interface DeleteAccessControlRuleRequest {
  OrganizationId: string;
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteAliasRequest {
  OrganizationId: string;
  EntityId: string;
  Alias: string;
}

// refs: 1 - tags: named, input
export interface DeleteGroupRequest {
  OrganizationId: string;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface DeleteMailboxPermissionsRequest {
  OrganizationId: string;
  EntityId: string;
  GranteeId: string;
}

// refs: 1 - tags: named, input
export interface DeleteOrganizationRequest {
  ClientToken?: string | null;
  OrganizationId: string;
  DeleteDirectory: boolean;
}

// refs: 1 - tags: named, input
export interface DeleteResourceRequest {
  OrganizationId: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRetentionPolicyRequest {
  OrganizationId: string;
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  OrganizationId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface DeregisterFromWorkMailRequest {
  OrganizationId: string;
  EntityId: string;
}

// refs: 1 - tags: named, input
export interface DescribeGroupRequest {
  OrganizationId: string;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface DescribeMailboxExportJobRequest {
  JobId: string;
  OrganizationId: string;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationRequest {
  OrganizationId: string;
}

// refs: 1 - tags: named, input
export interface DescribeResourceRequest {
  OrganizationId: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserRequest {
  OrganizationId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateDelegateFromResourceRequest {
  OrganizationId: string;
  ResourceId: string;
  EntityId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateMemberFromGroupRequest {
  OrganizationId: string;
  GroupId: string;
  MemberId: string;
}

// refs: 1 - tags: named, input
export interface GetAccessControlEffectRequest {
  OrganizationId: string;
  IpAddress: string;
  Action: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface GetDefaultRetentionPolicyRequest {
  OrganizationId: string;
}

// refs: 1 - tags: named, input
export interface GetMailboxDetailsRequest {
  OrganizationId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface ListAccessControlRulesRequest {
  OrganizationId: string;
}

// refs: 1 - tags: named, input
export interface ListAliasesRequest {
  OrganizationId: string;
  EntityId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListGroupMembersRequest {
  OrganizationId: string;
  GroupId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListGroupsRequest {
  OrganizationId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListMailboxExportJobsRequest {
  OrganizationId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListMailboxPermissionsRequest {
  OrganizationId: string;
  EntityId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListOrganizationsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListResourceDelegatesRequest {
  OrganizationId: string;
  ResourceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListResourcesRequest {
  OrganizationId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface ListUsersRequest {
  OrganizationId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface PutAccessControlRuleRequest {
  Name: string;
  Effect: AccessControlRuleEffect;
  Description: string;
  IpRanges?: string[] | null;
  NotIpRanges?: string[] | null;
  Actions?: string[] | null;
  NotActions?: string[] | null;
  UserIds?: string[] | null;
  NotUserIds?: string[] | null;
  OrganizationId: string;
}

// refs: 1 - tags: named, input
export interface PutMailboxPermissionsRequest {
  OrganizationId: string;
  EntityId: string;
  GranteeId: string;
  PermissionValues: PermissionType[];
}

// refs: 1 - tags: named, input
export interface PutRetentionPolicyRequest {
  OrganizationId: string;
  Id?: string | null;
  Name: string;
  Description?: string | null;
  FolderConfigurations: FolderConfiguration[];
}

// refs: 1 - tags: named, input
export interface RegisterToWorkMailRequest {
  OrganizationId: string;
  EntityId: string;
  Email: string;
}

// refs: 1 - tags: named, input
export interface ResetPasswordRequest {
  OrganizationId: string;
  UserId: string;
  Password: string;
}

// refs: 1 - tags: named, input
export interface StartMailboxExportJobRequest {
  ClientToken: string;
  OrganizationId: string;
  EntityId: string;
  Description?: string | null;
  RoleArn: string;
  KmsKeyArn: string;
  S3BucketName: string;
  S3Prefix: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateMailboxQuotaRequest {
  OrganizationId: string;
  UserId: string;
  MailboxQuota: number;
}

// refs: 1 - tags: named, input
export interface UpdatePrimaryEmailAddressRequest {
  OrganizationId: string;
  EntityId: string;
  Email: string;
}

// refs: 1 - tags: named, input
export interface UpdateResourceRequest {
  OrganizationId: string;
  ResourceId: string;
  Name?: string | null;
  BookingOptions?: BookingOptions | null;
}

// refs: 1 - tags: named, output
export interface AssociateDelegateToResourceResponse {
}

// refs: 1 - tags: named, output
export interface AssociateMemberToGroupResponse {
}

// refs: 1 - tags: named, output
export interface CancelMailboxExportJobResponse {
}

// refs: 1 - tags: named, output
export interface CreateAliasResponse {
}

// refs: 1 - tags: named, output
export interface CreateGroupResponse {
  GroupId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateOrganizationResponse {
  OrganizationId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateResourceResponse {
  ResourceId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateUserResponse {
  UserId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteAccessControlRuleResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAliasResponse {
}

// refs: 1 - tags: named, output
export interface DeleteGroupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteMailboxPermissionsResponse {
}

// refs: 1 - tags: named, output
export interface DeleteOrganizationResponse {
  OrganizationId?: string | null;
  State?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteResourceResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRetentionPolicyResponse {
}

// refs: 1 - tags: named, output
export interface DeleteUserResponse {
}

// refs: 1 - tags: named, output
export interface DeregisterFromWorkMailResponse {
}

// refs: 1 - tags: named, output
export interface DescribeGroupResponse {
  GroupId?: string | null;
  Name?: string | null;
  Email?: string | null;
  State?: EntityState | null;
  EnabledDate?: Date | number | null;
  DisabledDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeMailboxExportJobResponse {
  EntityId?: string | null;
  Description?: string | null;
  RoleArn?: string | null;
  KmsKeyArn?: string | null;
  S3BucketName?: string | null;
  S3Prefix?: string | null;
  S3Path?: string | null;
  EstimatedProgress?: number | null;
  State?: MailboxExportJobState | null;
  ErrorInfo?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationResponse {
  OrganizationId?: string | null;
  Alias?: string | null;
  State?: string | null;
  DirectoryId?: string | null;
  DirectoryType?: string | null;
  DefaultMailDomain?: string | null;
  CompletedDate?: Date | number | null;
  ErrorMessage?: string | null;
  ARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeResourceResponse {
  ResourceId?: string | null;
  Email?: string | null;
  Name?: string | null;
  Type?: ResourceType | null;
  BookingOptions?: BookingOptions | null;
  State?: EntityState | null;
  EnabledDate?: Date | number | null;
  DisabledDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserResponse {
  UserId?: string | null;
  Name?: string | null;
  Email?: string | null;
  DisplayName?: string | null;
  State?: EntityState | null;
  UserRole?: UserRole | null;
  EnabledDate?: Date | number | null;
  DisabledDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DisassociateDelegateFromResourceResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateMemberFromGroupResponse {
}

// refs: 1 - tags: named, output
export interface GetAccessControlEffectResponse {
  Effect?: AccessControlRuleEffect | null;
  MatchedRules?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetDefaultRetentionPolicyResponse {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  FolderConfigurations?: FolderConfiguration[] | null;
}

// refs: 1 - tags: named, output
export interface GetMailboxDetailsResponse {
  MailboxQuota?: number | null;
  MailboxSize?: number | null;
}

// refs: 1 - tags: named, output
export interface ListAccessControlRulesResponse {
  Rules?: AccessControlRule[] | null;
}

// refs: 1 - tags: named, output
export interface ListAliasesResponse {
  Aliases?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGroupMembersResponse {
  Members?: Member[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGroupsResponse {
  Groups?: Group[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMailboxExportJobsResponse {
  Jobs?: MailboxExportJob[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMailboxPermissionsResponse {
  Permissions?: Permission[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOrganizationsResponse {
  OrganizationSummaries?: OrganizationSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourceDelegatesResponse {
  Delegates?: Delegate[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourcesResponse {
  Resources?: Resource[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListUsersResponse {
  Users?: User[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutAccessControlRuleResponse {
}

// refs: 1 - tags: named, output
export interface PutMailboxPermissionsResponse {
}

// refs: 1 - tags: named, output
export interface PutRetentionPolicyResponse {
}

// refs: 1 - tags: named, output
export interface RegisterToWorkMailResponse {
}

// refs: 1 - tags: named, output
export interface ResetPasswordResponse {
}

// refs: 1 - tags: named, output
export interface StartMailboxExportJobResponse {
  JobId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateMailboxQuotaResponse {
}

// refs: 1 - tags: named, output
export interface UpdatePrimaryEmailAddressResponse {
}

// refs: 1 - tags: named, output
export interface UpdateResourceResponse {
}

// refs: 1 - tags: input, named, interface
export interface Domain {
  DomainName?: string | null;
  HostedZoneId?: string | null;
}
function fromDomain(input?: Domain | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, enum, output
export type ResourceType =
| "ROOM"
| "EQUIPMENT"
;

function toResourceType(root: JSONValue): ResourceType | null {
  return ( false
    || root == "ROOM"
    || root == "EQUIPMENT"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type AccessControlRuleEffect =
| "ALLOW"
| "DENY"
;

function toAccessControlRuleEffect(root: JSONValue): AccessControlRuleEffect | null {
  return ( false
    || root == "ALLOW"
    || root == "DENY"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type PermissionType =
| "FULL_ACCESS"
| "SEND_AS"
| "SEND_ON_BEHALF"
;

function toPermissionType(root: JSONValue): PermissionType | null {
  return ( false
    || root == "FULL_ACCESS"
    || root == "SEND_AS"
    || root == "SEND_ON_BEHALF"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface FolderConfiguration {
  Name: FolderName;
  Action: RetentionAction;
  Period?: number | null;
}
function fromFolderConfiguration(input?: FolderConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toFolderConfiguration(root: JSONValue): FolderConfiguration {
  return prt.readObj({
    required: {
      "Name": toFolderName,
      "Action": toRetentionAction,
    },
    optional: {
      "Period": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type FolderName =
| "INBOX"
| "DELETED_ITEMS"
| "SENT_ITEMS"
| "DRAFTS"
| "JUNK_EMAIL"
;

function toFolderName(root: JSONValue): FolderName | null {
  return ( false
    || root == "INBOX"
    || root == "DELETED_ITEMS"
    || root == "SENT_ITEMS"
    || root == "DRAFTS"
    || root == "JUNK_EMAIL"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type RetentionAction =
| "NONE"
| "DELETE"
| "PERMANENTLY_DELETE"
;

function toRetentionAction(root: JSONValue): RetentionAction | null {
  return ( false
    || root == "NONE"
    || root == "DELETE"
    || root == "PERMANENTLY_DELETE"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface BookingOptions {
  AutoAcceptRequests?: boolean | null;
  AutoDeclineRecurringRequests?: boolean | null;
  AutoDeclineConflictingRequests?: boolean | null;
}
function fromBookingOptions(input?: BookingOptions | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toBookingOptions(root: JSONValue): BookingOptions {
  return prt.readObj({
    required: {},
    optional: {
      "AutoAcceptRequests": "b",
      "AutoDeclineRecurringRequests": "b",
      "AutoDeclineConflictingRequests": "b",
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type EntityState =
| "ENABLED"
| "DISABLED"
| "DELETED"
;
function toEntityState(root: JSONValue): EntityState | null {
  return ( false
    || root == "ENABLED"
    || root == "DISABLED"
    || root == "DELETED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, enum
export type MailboxExportJobState =
| "RUNNING"
| "COMPLETED"
| "FAILED"
| "CANCELLED"
;
function toMailboxExportJobState(root: JSONValue): MailboxExportJobState | null {
  return ( false
    || root == "RUNNING"
    || root == "COMPLETED"
    || root == "FAILED"
    || root == "CANCELLED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, enum
export type UserRole =
| "USER"
| "RESOURCE"
| "SYSTEM_USER"
;
function toUserRole(root: JSONValue): UserRole | null {
  return ( false
    || root == "USER"
    || root == "RESOURCE"
    || root == "SYSTEM_USER"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface AccessControlRule {
  Name?: string | null;
  Effect?: AccessControlRuleEffect | null;
  Description?: string | null;
  IpRanges?: string[] | null;
  NotIpRanges?: string[] | null;
  Actions?: string[] | null;
  NotActions?: string[] | null;
  UserIds?: string[] | null;
  NotUserIds?: string[] | null;
  DateCreated?: Date | number | null;
  DateModified?: Date | number | null;
}
function toAccessControlRule(root: JSONValue): AccessControlRule {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Effect": toAccessControlRuleEffect,
      "Description": "s",
      "IpRanges": ["s"],
      "NotIpRanges": ["s"],
      "Actions": ["s"],
      "NotActions": ["s"],
      "UserIds": ["s"],
      "NotUserIds": ["s"],
      "DateCreated": "d",
      "DateModified": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Member {
  Id?: string | null;
  Name?: string | null;
  Type?: MemberType | null;
  State?: EntityState | null;
  EnabledDate?: Date | number | null;
  DisabledDate?: Date | number | null;
}
function toMember(root: JSONValue): Member {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Type": toMemberType,
      "State": toEntityState,
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type MemberType =
| "GROUP"
| "USER"
;
function toMemberType(root: JSONValue): MemberType | null {
  return ( false
    || root == "GROUP"
    || root == "USER"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Group {
  Id?: string | null;
  Email?: string | null;
  Name?: string | null;
  State?: EntityState | null;
  EnabledDate?: Date | number | null;
  DisabledDate?: Date | number | null;
}
function toGroup(root: JSONValue): Group {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Email": "s",
      "Name": "s",
      "State": toEntityState,
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MailboxExportJob {
  JobId?: string | null;
  EntityId?: string | null;
  Description?: string | null;
  S3BucketName?: string | null;
  S3Path?: string | null;
  EstimatedProgress?: number | null;
  State?: MailboxExportJobState | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
}
function toMailboxExportJob(root: JSONValue): MailboxExportJob {
  return prt.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "EntityId": "s",
      "Description": "s",
      "S3BucketName": "s",
      "S3Path": "s",
      "EstimatedProgress": "n",
      "State": toMailboxExportJobState,
      "StartTime": "d",
      "EndTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Permission {
  GranteeId: string;
  GranteeType: MemberType;
  PermissionValues: PermissionType[];
}
function toPermission(root: JSONValue): Permission {
  return prt.readObj({
    required: {
      "GranteeId": "s",
      "GranteeType": toMemberType,
      "PermissionValues": [toPermissionType],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationSummary {
  OrganizationId?: string | null;
  Alias?: string | null;
  DefaultMailDomain?: string | null;
  ErrorMessage?: string | null;
  State?: string | null;
}
function toOrganizationSummary(root: JSONValue): OrganizationSummary {
  return prt.readObj({
    required: {},
    optional: {
      "OrganizationId": "s",
      "Alias": "s",
      "DefaultMailDomain": "s",
      "ErrorMessage": "s",
      "State": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Delegate {
  Id: string;
  Type: MemberType;
}
function toDelegate(root: JSONValue): Delegate {
  return prt.readObj({
    required: {
      "Id": "s",
      "Type": toMemberType,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Resource {
  Id?: string | null;
  Email?: string | null;
  Name?: string | null;
  Type?: ResourceType | null;
  State?: EntityState | null;
  EnabledDate?: Date | number | null;
  DisabledDate?: Date | number | null;
}
function toResource(root: JSONValue): Resource {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Email": "s",
      "Name": "s",
      "Type": toResourceType,
      "State": toEntityState,
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface User {
  Id?: string | null;
  Email?: string | null;
  Name?: string | null;
  DisplayName?: string | null;
  State?: EntityState | null;
  UserRole?: UserRole | null;
  EnabledDate?: Date | number | null;
  DisabledDate?: Date | number | null;
}
function toUser(root: JSONValue): User {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Email": "s",
      "Name": "s",
      "DisplayName": "s",
      "State": toEntityState,
      "UserRole": toUserRole,
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}
