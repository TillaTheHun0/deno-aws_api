// Autogenerated API client for: Amazon WorkMail

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.91.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class WorkMail {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WorkMail.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-10-01",
    "endpointPrefix": "workmail",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon WorkMail",
    "serviceId": "WorkMail",
    "signatureVersion": "v4",
    "targetPrefix": "WorkMailService",
    "uid": "workmail-2017-10-01"
  };

  async associateDelegateToResource(
    {abortSignal, ...params}: RequestConfig & s.AssociateDelegateToResourceRequest,
  ): Promise<s.AssociateDelegateToResourceResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      ResourceId: params["ResourceId"],
      EntityId: params["EntityId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDelegateToResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateMemberToGroup(
    {abortSignal, ...params}: RequestConfig & s.AssociateMemberToGroupRequest,
  ): Promise<s.AssociateMemberToGroupResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      GroupId: params["GroupId"],
      MemberId: params["MemberId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateMemberToGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelMailboxExportJob(
    {abortSignal, ...params}: RequestConfig & s.CancelMailboxExportJobRequest,
  ): Promise<s.CancelMailboxExportJobResponse> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      JobId: params["JobId"],
      OrganizationId: params["OrganizationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelMailboxExportJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAlias(
    {abortSignal, ...params}: RequestConfig & s.CreateAliasRequest,
  ): Promise<s.CreateAliasResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      Alias: params["Alias"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateGroupRequest,
  ): Promise<s.CreateGroupResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async createOrganization(
    {abortSignal, ...params}: RequestConfig & s.CreateOrganizationRequest,
  ): Promise<s.CreateOrganizationResponse> {
    const body: jsonP.JSONObject = {
      DirectoryId: params["DirectoryId"],
      Alias: params["Alias"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      Domains: params["Domains"]?.map(x => fromDomain(x)),
      KmsKeyArn: params["KmsKeyArn"],
      EnableInteroperability: params["EnableInteroperability"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationId": "s",
      },
    }, await resp.json());
  }

  async createResource(
    {abortSignal, ...params}: RequestConfig & s.CreateResourceRequest,
  ): Promise<s.CreateResourceResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      Name: params["Name"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceId": "s",
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & s.CreateUserRequest,
  ): Promise<s.CreateUserResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      Name: params["Name"],
      DisplayName: params["DisplayName"],
      Password: params["Password"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserId": "s",
      },
    }, await resp.json());
  }

  async deleteAccessControlRule(
    {abortSignal, ...params}: RequestConfig & s.DeleteAccessControlRuleRequest,
  ): Promise<s.DeleteAccessControlRuleResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAccessControlRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAlias(
    {abortSignal, ...params}: RequestConfig & s.DeleteAliasRequest,
  ): Promise<s.DeleteAliasResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      Alias: params["Alias"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAlias",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteGroupRequest,
  ): Promise<s.DeleteGroupResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      GroupId: params["GroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteMailboxPermissions(
    {abortSignal, ...params}: RequestConfig & s.DeleteMailboxPermissionsRequest,
  ): Promise<s.DeleteMailboxPermissionsResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      GranteeId: params["GranteeId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMailboxPermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteOrganization(
    {abortSignal, ...params}: RequestConfig & s.DeleteOrganizationRequest,
  ): Promise<s.DeleteOrganizationResponse> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      OrganizationId: params["OrganizationId"],
      DeleteDirectory: params["DeleteDirectory"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationId": "s",
        "State": "s",
      },
    }, await resp.json());
  }

  async deleteResource(
    {abortSignal, ...params}: RequestConfig & s.DeleteResourceRequest,
  ): Promise<s.DeleteResourceResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & s.DeleteRetentionPolicyRequest,
  ): Promise<s.DeleteRetentionPolicyResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      Id: params["Id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRetentionPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & s.DeleteUserRequest,
  ): Promise<s.DeleteUserResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      UserId: params["UserId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterFromWorkMail(
    {abortSignal, ...params}: RequestConfig & s.DeregisterFromWorkMailRequest,
  ): Promise<s.DeregisterFromWorkMailResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterFromWorkMail",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeGroup(
    {abortSignal, ...params}: RequestConfig & s.DescribeGroupRequest,
  ): Promise<s.DescribeGroupResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      GroupId: params["GroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupId": "s",
        "Name": "s",
        "Email": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityState>(x),
        "EnabledDate": "d",
        "DisabledDate": "d",
      },
    }, await resp.json());
  }

  async describeMailboxExportJob(
    {abortSignal, ...params}: RequestConfig & s.DescribeMailboxExportJobRequest,
  ): Promise<s.DescribeMailboxExportJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
      OrganizationId: params["OrganizationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMailboxExportJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntityId": "s",
        "Description": "s",
        "RoleArn": "s",
        "KmsKeyArn": "s",
        "S3BucketName": "s",
        "S3Prefix": "s",
        "S3Path": "s",
        "EstimatedProgress": "n",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.MailboxExportJobState>(x),
        "ErrorInfo": "s",
        "StartTime": "d",
        "EndTime": "d",
      },
    }, await resp.json());
  }

  async describeOrganization(
    {abortSignal, ...params}: RequestConfig & s.DescribeOrganizationRequest,
  ): Promise<s.DescribeOrganizationResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationId": "s",
        "Alias": "s",
        "State": "s",
        "DirectoryId": "s",
        "DirectoryType": "s",
        "DefaultMailDomain": "s",
        "CompletedDate": "d",
        "ErrorMessage": "s",
        "ARN": "s",
      },
    }, await resp.json());
  }

  async describeResource(
    {abortSignal, ...params}: RequestConfig & s.DescribeResourceRequest,
  ): Promise<s.DescribeResourceResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceId": "s",
        "Email": "s",
        "Name": "s",
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
        "BookingOptions": toBookingOptions,
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityState>(x),
        "EnabledDate": "d",
        "DisabledDate": "d",
      },
    }, await resp.json());
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & s.DescribeUserRequest,
  ): Promise<s.DescribeUserResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      UserId: params["UserId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserId": "s",
        "Name": "s",
        "Email": "s",
        "DisplayName": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityState>(x),
        "UserRole": (x: jsonP.JSONValue) => cmnP.readEnum<s.UserRole>(x),
        "EnabledDate": "d",
        "DisabledDate": "d",
      },
    }, await resp.json());
  }

  async disassociateDelegateFromResource(
    {abortSignal, ...params}: RequestConfig & s.DisassociateDelegateFromResourceRequest,
  ): Promise<s.DisassociateDelegateFromResourceResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      ResourceId: params["ResourceId"],
      EntityId: params["EntityId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDelegateFromResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateMemberFromGroup(
    {abortSignal, ...params}: RequestConfig & s.DisassociateMemberFromGroupRequest,
  ): Promise<s.DisassociateMemberFromGroupResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      GroupId: params["GroupId"],
      MemberId: params["MemberId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateMemberFromGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccessControlEffect(
    {abortSignal, ...params}: RequestConfig & s.GetAccessControlEffectRequest,
  ): Promise<s.GetAccessControlEffectResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      IpAddress: params["IpAddress"],
      Action: params["Action"],
      UserId: params["UserId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAccessControlEffect",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Effect": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessControlRuleEffect>(x),
        "MatchedRules": ["s"],
      },
    }, await resp.json());
  }

  async getDefaultRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & s.GetDefaultRetentionPolicyRequest,
  ): Promise<s.GetDefaultRetentionPolicyResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDefaultRetentionPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "FolderConfigurations": [toFolderConfiguration],
      },
    }, await resp.json());
  }

  async getMailboxDetails(
    {abortSignal, ...params}: RequestConfig & s.GetMailboxDetailsRequest,
  ): Promise<s.GetMailboxDetailsResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      UserId: params["UserId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMailboxDetails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MailboxQuota": "n",
        "MailboxSize": "n",
      },
    }, await resp.json());
  }

  async listAccessControlRules(
    {abortSignal, ...params}: RequestConfig & s.ListAccessControlRulesRequest,
  ): Promise<s.ListAccessControlRulesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccessControlRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rules": [toAccessControlRule],
      },
    }, await resp.json());
  }

  async listAliases(
    {abortSignal, ...params}: RequestConfig & s.ListAliasesRequest,
  ): Promise<s.ListAliasesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAliases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Aliases": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGroupMembers(
    {abortSignal, ...params}: RequestConfig & s.ListGroupMembersRequest,
  ): Promise<s.ListGroupMembersResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      GroupId: params["GroupId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroupMembers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Members": [toMember],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & s.ListGroupsRequest,
  ): Promise<s.ListGroupsResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Groups": [toGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMailboxExportJobs(
    {abortSignal, ...params}: RequestConfig & s.ListMailboxExportJobsRequest,
  ): Promise<s.ListMailboxExportJobsResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMailboxExportJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Jobs": [toMailboxExportJob],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMailboxPermissions(
    {abortSignal, ...params}: RequestConfig & s.ListMailboxPermissionsRequest,
  ): Promise<s.ListMailboxPermissionsResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMailboxPermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Permissions": [toPermission],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listOrganizations(
    {abortSignal, ...params}: RequestConfig & s.ListOrganizationsRequest = {},
  ): Promise<s.ListOrganizationsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOrganizations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationSummaries": [toOrganizationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceDelegates(
    {abortSignal, ...params}: RequestConfig & s.ListResourceDelegatesRequest,
  ): Promise<s.ListResourceDelegatesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      ResourceId: params["ResourceId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceDelegates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Delegates": [toDelegate],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResources(
    {abortSignal, ...params}: RequestConfig & s.ListResourcesRequest,
  ): Promise<s.ListResourcesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Resources": [toResource],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & s.ListUsersRequest,
  ): Promise<s.ListUsersResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUsers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Users": [toUser],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putAccessControlRule(
    {abortSignal, ...params}: RequestConfig & s.PutAccessControlRuleRequest,
  ): Promise<s.PutAccessControlRuleResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Effect: params["Effect"],
      Description: params["Description"],
      IpRanges: params["IpRanges"],
      NotIpRanges: params["NotIpRanges"],
      Actions: params["Actions"],
      NotActions: params["NotActions"],
      UserIds: params["UserIds"],
      NotUserIds: params["NotUserIds"],
      OrganizationId: params["OrganizationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccessControlRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putMailboxPermissions(
    {abortSignal, ...params}: RequestConfig & s.PutMailboxPermissionsRequest,
  ): Promise<s.PutMailboxPermissionsResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      GranteeId: params["GranteeId"],
      PermissionValues: params["PermissionValues"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutMailboxPermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putRetentionPolicy(
    {abortSignal, ...params}: RequestConfig & s.PutRetentionPolicyRequest,
  ): Promise<s.PutRetentionPolicyResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      Id: params["Id"],
      Name: params["Name"],
      Description: params["Description"],
      FolderConfigurations: params["FolderConfigurations"]?.map(x => fromFolderConfiguration(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRetentionPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async registerToWorkMail(
    {abortSignal, ...params}: RequestConfig & s.RegisterToWorkMailRequest,
  ): Promise<s.RegisterToWorkMailResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      Email: params["Email"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterToWorkMail",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async resetPassword(
    {abortSignal, ...params}: RequestConfig & s.ResetPasswordRequest,
  ): Promise<s.ResetPasswordResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      UserId: params["UserId"],
      Password: params["Password"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetPassword",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startMailboxExportJob(
    {abortSignal, ...params}: RequestConfig & s.StartMailboxExportJobRequest,
  ): Promise<s.StartMailboxExportJobResponse> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      KmsKeyArn: params["KmsKeyArn"],
      S3BucketName: params["S3BucketName"],
      S3Prefix: params["S3Prefix"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartMailboxExportJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateMailboxQuota(
    {abortSignal, ...params}: RequestConfig & s.UpdateMailboxQuotaRequest,
  ): Promise<s.UpdateMailboxQuotaResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      UserId: params["UserId"],
      MailboxQuota: params["MailboxQuota"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMailboxQuota",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePrimaryEmailAddress(
    {abortSignal, ...params}: RequestConfig & s.UpdatePrimaryEmailAddressRequest,
  ): Promise<s.UpdatePrimaryEmailAddressResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      EntityId: params["EntityId"],
      Email: params["Email"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePrimaryEmailAddress",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateResource(
    {abortSignal, ...params}: RequestConfig & s.UpdateResourceRequest,
  ): Promise<s.UpdateResourceResponse> {
    const body: jsonP.JSONObject = {
      OrganizationId: params["OrganizationId"],
      ResourceId: params["ResourceId"],
      Name: params["Name"],
      BookingOptions: fromBookingOptions(params["BookingOptions"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromDomain(input?: s.Domain | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DomainName: input["DomainName"],
    HostedZoneId: input["HostedZoneId"],
  }
}

function fromFolderConfiguration(input?: s.FolderConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Action: input["Action"],
    Period: input["Period"],
  }
}
function toFolderConfiguration(root: jsonP.JSONValue): s.FolderConfiguration {
  return jsonP.readObj({
    required: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<s.FolderName>(x),
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<s.RetentionAction>(x),
    },
    optional: {
      "Period": "n",
    },
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromBookingOptions(input?: s.BookingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AutoAcceptRequests: input["AutoAcceptRequests"],
    AutoDeclineRecurringRequests: input["AutoDeclineRecurringRequests"],
    AutoDeclineConflictingRequests: input["AutoDeclineConflictingRequests"],
  }
}
function toBookingOptions(root: jsonP.JSONValue): s.BookingOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "AutoAcceptRequests": "b",
      "AutoDeclineRecurringRequests": "b",
      "AutoDeclineConflictingRequests": "b",
    },
  }, root);
}

function toAccessControlRule(root: jsonP.JSONValue): s.AccessControlRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Effect": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccessControlRuleEffect>(x),
      "Description": "s",
      "IpRanges": ["s"],
      "NotIpRanges": ["s"],
      "Actions": ["s"],
      "NotActions": ["s"],
      "UserIds": ["s"],
      "NotUserIds": ["s"],
      "DateCreated": "d",
      "DateModified": "d",
    },
  }, root);
}

function toMember(root: jsonP.JSONValue): s.Member {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.MemberType>(x),
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityState>(x),
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}

function toGroup(root: jsonP.JSONValue): s.Group {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Email": "s",
      "Name": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityState>(x),
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}

function toMailboxExportJob(root: jsonP.JSONValue): s.MailboxExportJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "EntityId": "s",
      "Description": "s",
      "S3BucketName": "s",
      "S3Path": "s",
      "EstimatedProgress": "n",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.MailboxExportJobState>(x),
      "StartTime": "d",
      "EndTime": "d",
    },
  }, root);
}

function toPermission(root: jsonP.JSONValue): s.Permission {
  return jsonP.readObj({
    required: {
      "GranteeId": "s",
      "GranteeType": (x: jsonP.JSONValue) => cmnP.readEnum<s.MemberType>(x),
      "PermissionValues": [(x: jsonP.JSONValue) => cmnP.readEnum<s.PermissionType>(x)],
    },
    optional: {},
  }, root);
}

function toOrganizationSummary(root: jsonP.JSONValue): s.OrganizationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "OrganizationId": "s",
      "Alias": "s",
      "DefaultMailDomain": "s",
      "ErrorMessage": "s",
      "State": "s",
    },
  }, root);
}

function toDelegate(root: jsonP.JSONValue): s.Delegate {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.MemberType>(x),
    },
    optional: {},
  }, root);
}

function toResource(root: jsonP.JSONValue): s.Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Email": "s",
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityState>(x),
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}

function toUser(root: jsonP.JSONValue): s.User {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Email": "s",
      "Name": "s",
      "DisplayName": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityState>(x),
      "UserRole": (x: jsonP.JSONValue) => cmnP.readEnum<s.UserRole>(x),
      "EnabledDate": "d",
      "DisabledDate": "d",
    },
  }, root);
}
