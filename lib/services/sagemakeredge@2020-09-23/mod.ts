// Autogenerated API client for: Amazon Sagemaker Edge Manager

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class SagemakerEdge {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SagemakerEdge.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-09-23",
    "endpointPrefix": "edge.sagemaker",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Sagemaker Edge Manager",
    "serviceId": "Sagemaker Edge",
    "signatureVersion": "v4",
    "signingName": "sagemaker",
    "uid": "sagemaker-edge-2020-09-23"
  };

  async getDeviceRegistration(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceRegistrationRequest,
  ): Promise<s.GetDeviceRegistrationResult> {
    const body: jsonP.JSONObject = {
      DeviceName: params["DeviceName"],
      DeviceFleetName: params["DeviceFleetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDeviceRegistration",
      requestUri: "/GetDeviceRegistration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeviceRegistration": "s",
        "CacheTTL": "s",
      },
    }, await resp.json());
  }

  async sendHeartbeat(
    {abortSignal, ...params}: RequestConfig & s.SendHeartbeatRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AgentMetrics: params["AgentMetrics"]?.map(x => fromEdgeMetric(x)),
      Models: params["Models"]?.map(x => fromModel(x)),
      AgentVersion: params["AgentVersion"],
      DeviceName: params["DeviceName"],
      DeviceFleetName: params["DeviceFleetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendHeartbeat",
      requestUri: "/SendHeartbeat",
    });
  }

}

function fromEdgeMetric(input?: s.EdgeMetric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimension: input["Dimension"],
    MetricName: input["MetricName"],
    Value: input["Value"],
    Timestamp: jsonP.serializeDate_unixTimestamp(input["Timestamp"]),
  }
}

function fromModel(input?: s.Model | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ModelName: input["ModelName"],
    ModelVersion: input["ModelVersion"],
    LatestSampleTime: jsonP.serializeDate_unixTimestamp(input["LatestSampleTime"]),
    LatestInference: jsonP.serializeDate_unixTimestamp(input["LatestInference"]),
    ModelMetrics: input["ModelMetrics"]?.map(x => fromEdgeMetric(x)),
  }
}
