// Autogenerated API client for: Amazon Mobile Analytics

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MobileAnalytics {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MobileAnalytics.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-06-05",
    "endpointPrefix": "mobileanalytics",
    "serviceFullName": "Amazon Mobile Analytics",
    "serviceId": "Mobile Analytics",
    "signatureVersion": "v4",
    "protocol": "rest-json",
    "uid": "mobileanalytics-2014-06-05"
  };

  async putEvents(
    {abortSignal, ...params}: RequestConfig & PutEventsInput,
  ): Promise<void> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      events: params["events"]?.map(x => fromEvent(x)),
    };
    headers.append("x-amz-Client-Context", params["clientContext"]);
    if (params["clientContextEncoding"] != null) headers.append("x-amz-Client-Context-Encoding", params["clientContextEncoding"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "PutEvents",
      requestUri: "/2014-06-05/events",
      responseCode: 202,
    });
  }

}

// refs: 1 - tags: named, input
export interface PutEventsInput {
  events: Event[];
  clientContext: string;
  clientContextEncoding?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface Event {
  eventType: string;
  timestamp: string;
  session?: Session | null;
  version?: string | null;
  attributes?: { [key: string]: string | null | undefined } | null;
  metrics?: { [key: string]: number | null | undefined } | null;
}
function fromEvent(input?: Event | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventType: input["eventType"],
    timestamp: input["timestamp"],
    session: fromSession(input["session"]),
    version: input["version"],
    attributes: input["attributes"],
    metrics: input["metrics"],
  }
}

// refs: 1 - tags: input, named, interface
export interface Session {
  id?: string | null;
  duration?: number | null;
  startTimestamp?: string | null;
  stopTimestamp?: string | null;
}
function fromSession(input?: Session | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    duration: input["duration"],
    startTimestamp: input["startTimestamp"],
    stopTimestamp: input["stopTimestamp"],
  }
}
