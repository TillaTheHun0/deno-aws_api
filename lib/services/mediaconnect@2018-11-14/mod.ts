// Autogenerated API client for: AWS MediaConnect

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MediaConnect {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MediaConnect.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-14",
    "endpointPrefix": "mediaconnect",
    "signingName": "mediaconnect",
    "serviceFullName": "AWS MediaConnect",
    "serviceId": "MediaConnect",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "mediaconnect-2018-11-14",
    "signatureVersion": "v4"
  };

  async addFlowOutputs(
    {abortSignal, ...params}: RequestConfig & AddFlowOutputsRequest,
  ): Promise<AddFlowOutputsResponse> {
    const body: jsonP.JSONObject = params ? {
      outputs: params["Outputs"]?.map(x => fromAddOutputRequest(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddFlowOutputs",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/outputs`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "Outputs": [toOutput],
        },
      }, await resp.json()),
  };
  }

  async addFlowSources(
    {abortSignal, ...params}: RequestConfig & AddFlowSourcesRequest,
  ): Promise<AddFlowSourcesResponse> {
    const body: jsonP.JSONObject = params ? {
      sources: params["Sources"]?.map(x => fromSetSourceRequest(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddFlowSources",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/source`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "Sources": [toSource],
        },
      }, await resp.json()),
  };
  }

  async addFlowVpcInterfaces(
    {abortSignal, ...params}: RequestConfig & AddFlowVpcInterfacesRequest,
  ): Promise<AddFlowVpcInterfacesResponse> {
    const body: jsonP.JSONObject = params ? {
      vpcInterfaces: params["VpcInterfaces"]?.map(x => fromVpcInterfaceRequest(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddFlowVpcInterfaces",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/vpcInterfaces`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "VpcInterfaces": [toVpcInterface],
        },
      }, await resp.json()),
  };
  }

  async createFlow(
    {abortSignal, ...params}: RequestConfig & CreateFlowRequest,
  ): Promise<CreateFlowResponse> {
    const body: jsonP.JSONObject = params ? {
      availabilityZone: params["AvailabilityZone"],
      entitlements: params["Entitlements"]?.map(x => fromGrantEntitlementRequest(x)),
      name: params["Name"],
      outputs: params["Outputs"]?.map(x => fromAddOutputRequest(x)),
      source: fromSetSourceRequest(params["Source"]),
      sourceFailoverConfig: fromFailoverConfig(params["SourceFailoverConfig"]),
      sources: params["Sources"]?.map(x => fromSetSourceRequest(x)),
      vpcInterfaces: params["VpcInterfaces"]?.map(x => fromVpcInterfaceRequest(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFlow",
      requestUri: "/v1/flows",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Flow": toFlow,
        },
      }, await resp.json()),
  };
  }

  async deleteFlow(
    {abortSignal, ...params}: RequestConfig & DeleteFlowRequest,
  ): Promise<DeleteFlowResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFlow",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
        },
      }, await resp.json()),
  };
  }

  async describeFlow(
    {abortSignal, ...params}: RequestConfig & DescribeFlowRequest,
  ): Promise<DescribeFlowResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeFlow",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Flow": toFlow,
          "Messages": toMessages,
        },
      }, await resp.json()),
  };
  }

  async describeOffering(
    {abortSignal, ...params}: RequestConfig & DescribeOfferingRequest,
  ): Promise<DescribeOfferingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeOffering",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/offerings/${params["OfferingArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Offering": toOffering,
        },
      }, await resp.json()),
  };
  }

  async describeReservation(
    {abortSignal, ...params}: RequestConfig & DescribeReservationRequest,
  ): Promise<DescribeReservationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeReservation",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/reservations/${params["ReservationArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Reservation": toReservation,
        },
      }, await resp.json()),
  };
  }

  async grantFlowEntitlements(
    {abortSignal, ...params}: RequestConfig & GrantFlowEntitlementsRequest,
  ): Promise<GrantFlowEntitlementsResponse> {
    const body: jsonP.JSONObject = params ? {
      entitlements: params["Entitlements"]?.map(x => fromGrantEntitlementRequest(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GrantFlowEntitlements",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/entitlements`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Entitlements": [toEntitlement],
          "FlowArn": "s",
        },
      }, await resp.json()),
  };
  }

  async listEntitlements(
    {abortSignal, ...params}: RequestConfig & ListEntitlementsRequest = {},
  ): Promise<ListEntitlementsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEntitlements",
      method: "GET",
      requestUri: "/v1/entitlements",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Entitlements": [toListedEntitlement],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listFlows(
    {abortSignal, ...params}: RequestConfig & ListFlowsRequest = {},
  ): Promise<ListFlowsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFlows",
      method: "GET",
      requestUri: "/v1/flows",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Flows": [toListedFlow],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listOfferings(
    {abortSignal, ...params}: RequestConfig & ListOfferingsRequest = {},
  ): Promise<ListOfferingsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListOfferings",
      method: "GET",
      requestUri: "/v1/offerings",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "Offerings": [toOffering],
        },
      }, await resp.json()),
  };
  }

  async listReservations(
    {abortSignal, ...params}: RequestConfig & ListReservationsRequest = {},
  ): Promise<ListReservationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListReservations",
      method: "GET",
      requestUri: "/v1/reservations",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "Reservations": [toReservation],
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async purchaseOffering(
    {abortSignal, ...params}: RequestConfig & PurchaseOfferingRequest,
  ): Promise<PurchaseOfferingResponse> {
    const body: jsonP.JSONObject = params ? {
      reservationName: params["ReservationName"],
      start: params["Start"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PurchaseOffering",
      requestUri: cmnP.encodePath`/v1/offerings/${params["OfferingArn"]}`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Reservation": toReservation,
        },
      }, await resp.json()),
  };
  }

  async removeFlowOutput(
    {abortSignal, ...params}: RequestConfig & RemoveFlowOutputRequest,
  ): Promise<RemoveFlowOutputResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveFlowOutput",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/outputs/${params["OutputArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "OutputArn": "s",
        },
      }, await resp.json()),
  };
  }

  async removeFlowSource(
    {abortSignal, ...params}: RequestConfig & RemoveFlowSourceRequest,
  ): Promise<RemoveFlowSourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveFlowSource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/source/${params["SourceArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "SourceArn": "s",
        },
      }, await resp.json()),
  };
  }

  async removeFlowVpcInterface(
    {abortSignal, ...params}: RequestConfig & RemoveFlowVpcInterfaceRequest,
  ): Promise<RemoveFlowVpcInterfaceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveFlowVpcInterface",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/vpcInterfaces/${params["VpcInterfaceName"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "NonDeletedNetworkInterfaceIds": ["s"],
          "VpcInterfaceName": "s",
        },
      }, await resp.json()),
  };
  }

  async revokeFlowEntitlement(
    {abortSignal, ...params}: RequestConfig & RevokeFlowEntitlementRequest,
  ): Promise<RevokeFlowEntitlementResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RevokeFlowEntitlement",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/entitlements/${params["EntitlementArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "EntitlementArn": "s",
          "FlowArn": "s",
        },
      }, await resp.json()),
  };
  }

  async startFlow(
    {abortSignal, ...params}: RequestConfig & StartFlowRequest,
  ): Promise<StartFlowResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StartFlow",
      requestUri: cmnP.encodePath`/v1/flows/start/${params["FlowArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
        },
      }, await resp.json()),
  };
  }

  async stopFlow(
    {abortSignal, ...params}: RequestConfig & StopFlowRequest,
  ): Promise<StopFlowResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopFlow",
      requestUri: cmnP.encodePath`/v1/flows/stop/${params["FlowArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
        },
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateFlow(
    {abortSignal, ...params}: RequestConfig & UpdateFlowRequest,
  ): Promise<UpdateFlowResponse> {
    const body: jsonP.JSONObject = params ? {
      sourceFailoverConfig: fromUpdateFailoverConfig(params["SourceFailoverConfig"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlow",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Flow": toFlow,
        },
      }, await resp.json()),
  };
  }

  async updateFlowEntitlement(
    {abortSignal, ...params}: RequestConfig & UpdateFlowEntitlementRequest,
  ): Promise<UpdateFlowEntitlementResponse> {
    const body: jsonP.JSONObject = params ? {
      description: params["Description"],
      encryption: fromUpdateEncryption(params["Encryption"]),
      entitlementStatus: params["EntitlementStatus"],
      subscribers: params["Subscribers"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlowEntitlement",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/entitlements/${params["EntitlementArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Entitlement": toEntitlement,
          "FlowArn": "s",
        },
      }, await resp.json()),
  };
  }

  async updateFlowOutput(
    {abortSignal, ...params}: RequestConfig & UpdateFlowOutputRequest,
  ): Promise<UpdateFlowOutputResponse> {
    const body: jsonP.JSONObject = params ? {
      cidrAllowList: params["CidrAllowList"],
      description: params["Description"],
      destination: params["Destination"],
      encryption: fromUpdateEncryption(params["Encryption"]),
      maxLatency: params["MaxLatency"],
      port: params["Port"],
      protocol: params["Protocol"],
      remoteId: params["RemoteId"],
      smoothingLatency: params["SmoothingLatency"],
      streamId: params["StreamId"],
      vpcInterfaceAttachment: fromVpcInterfaceAttachment(params["VpcInterfaceAttachment"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlowOutput",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/outputs/${params["OutputArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "Output": toOutput,
        },
      }, await resp.json()),
  };
  }

  async updateFlowSource(
    {abortSignal, ...params}: RequestConfig & UpdateFlowSourceRequest,
  ): Promise<UpdateFlowSourceResponse> {
    const body: jsonP.JSONObject = params ? {
      decryption: fromUpdateEncryption(params["Decryption"]),
      description: params["Description"],
      entitlementArn: params["EntitlementArn"],
      ingestPort: params["IngestPort"],
      maxBitrate: params["MaxBitrate"],
      maxLatency: params["MaxLatency"],
      protocol: params["Protocol"],
      streamId: params["StreamId"],
      vpcInterfaceName: params["VpcInterfaceName"],
      whitelistCidr: params["WhitelistCidr"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlowSource",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/flows/${params["FlowArn"]}/source/${params["SourceArn"]}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "FlowArn": "s",
          "Source": toSource,
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface AddFlowOutputsRequest {
  FlowArn: string;
  Outputs: AddOutputRequest[];
}

// refs: 1 - tags: named, input
export interface AddFlowSourcesRequest {
  FlowArn: string;
  Sources: SetSourceRequest[];
}

// refs: 1 - tags: named, input
export interface AddFlowVpcInterfacesRequest {
  FlowArn: string;
  VpcInterfaces: VpcInterfaceRequest[];
}

// refs: 1 - tags: named, input
export interface CreateFlowRequest {
  AvailabilityZone?: string | null;
  Entitlements?: GrantEntitlementRequest[] | null;
  Name: string;
  Outputs?: AddOutputRequest[] | null;
  Source?: SetSourceRequest | null;
  SourceFailoverConfig?: FailoverConfig | null;
  Sources?: SetSourceRequest[] | null;
  VpcInterfaces?: VpcInterfaceRequest[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteFlowRequest {
  FlowArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeFlowRequest {
  FlowArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeOfferingRequest {
  OfferingArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeReservationRequest {
  ReservationArn: string;
}

// refs: 1 - tags: named, input
export interface GrantFlowEntitlementsRequest {
  Entitlements: GrantEntitlementRequest[];
  FlowArn: string;
}

// refs: 1 - tags: named, input
export interface ListEntitlementsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFlowsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOfferingsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListReservationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface PurchaseOfferingRequest {
  OfferingArn: string;
  ReservationName: string;
  Start: string;
}

// refs: 1 - tags: named, input
export interface RemoveFlowOutputRequest {
  FlowArn: string;
  OutputArn: string;
}

// refs: 1 - tags: named, input
export interface RemoveFlowSourceRequest {
  FlowArn: string;
  SourceArn: string;
}

// refs: 1 - tags: named, input
export interface RemoveFlowVpcInterfaceRequest {
  FlowArn: string;
  VpcInterfaceName: string;
}

// refs: 1 - tags: named, input
export interface RevokeFlowEntitlementRequest {
  EntitlementArn: string;
  FlowArn: string;
}

// refs: 1 - tags: named, input
export interface StartFlowRequest {
  FlowArn: string;
}

// refs: 1 - tags: named, input
export interface StopFlowRequest {
  FlowArn: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateFlowRequest {
  FlowArn: string;
  SourceFailoverConfig?: UpdateFailoverConfig | null;
}

// refs: 1 - tags: named, input
export interface UpdateFlowEntitlementRequest {
  Description?: string | null;
  Encryption?: UpdateEncryption | null;
  EntitlementArn: string;
  EntitlementStatus?: EntitlementStatus | null;
  FlowArn: string;
  Subscribers?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateFlowOutputRequest {
  CidrAllowList?: string[] | null;
  Description?: string | null;
  Destination?: string | null;
  Encryption?: UpdateEncryption | null;
  FlowArn: string;
  MaxLatency?: number | null;
  OutputArn: string;
  Port?: number | null;
  Protocol?: Protocol | null;
  RemoteId?: string | null;
  SmoothingLatency?: number | null;
  StreamId?: string | null;
  VpcInterfaceAttachment?: VpcInterfaceAttachment | null;
}

// refs: 1 - tags: named, input
export interface UpdateFlowSourceRequest {
  Decryption?: UpdateEncryption | null;
  Description?: string | null;
  EntitlementArn?: string | null;
  FlowArn: string;
  IngestPort?: number | null;
  MaxBitrate?: number | null;
  MaxLatency?: number | null;
  Protocol?: Protocol | null;
  SourceArn: string;
  StreamId?: string | null;
  VpcInterfaceName?: string | null;
  WhitelistCidr?: string | null;
}

// refs: 1 - tags: named, output
export interface AddFlowOutputsResponse {
  FlowArn?: string | null;
  Outputs?: Output[] | null;
}

// refs: 1 - tags: named, output
export interface AddFlowSourcesResponse {
  FlowArn?: string | null;
  Sources?: Source[] | null;
}

// refs: 1 - tags: named, output
export interface AddFlowVpcInterfacesResponse {
  FlowArn?: string | null;
  VpcInterfaces?: VpcInterface[] | null;
}

// refs: 1 - tags: named, output
export interface CreateFlowResponse {
  Flow?: Flow | null;
}

// refs: 1 - tags: named, output
export interface DeleteFlowResponse {
  FlowArn?: string | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface DescribeFlowResponse {
  Flow?: Flow | null;
  Messages?: Messages | null;
}

// refs: 1 - tags: named, output
export interface DescribeOfferingResponse {
  Offering?: Offering | null;
}

// refs: 1 - tags: named, output
export interface DescribeReservationResponse {
  Reservation?: Reservation | null;
}

// refs: 1 - tags: named, output
export interface GrantFlowEntitlementsResponse {
  Entitlements?: Entitlement[] | null;
  FlowArn?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEntitlementsResponse {
  Entitlements?: ListedEntitlement[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFlowsResponse {
  Flows?: ListedFlow[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOfferingsResponse {
  NextToken?: string | null;
  Offerings?: Offering[] | null;
}

// refs: 1 - tags: named, output
export interface ListReservationsResponse {
  NextToken?: string | null;
  Reservations?: Reservation[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PurchaseOfferingResponse {
  Reservation?: Reservation | null;
}

// refs: 1 - tags: named, output
export interface RemoveFlowOutputResponse {
  FlowArn?: string | null;
  OutputArn?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveFlowSourceResponse {
  FlowArn?: string | null;
  SourceArn?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveFlowVpcInterfaceResponse {
  FlowArn?: string | null;
  NonDeletedNetworkInterfaceIds?: string[] | null;
  VpcInterfaceName?: string | null;
}

// refs: 1 - tags: named, output
export interface RevokeFlowEntitlementResponse {
  EntitlementArn?: string | null;
  FlowArn?: string | null;
}

// refs: 1 - tags: named, output
export interface StartFlowResponse {
  FlowArn?: string | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface StopFlowResponse {
  FlowArn?: string | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface UpdateFlowResponse {
  Flow?: Flow | null;
}

// refs: 1 - tags: named, output
export interface UpdateFlowEntitlementResponse {
  Entitlement?: Entitlement | null;
  FlowArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateFlowOutputResponse {
  FlowArn?: string | null;
  Output?: Output | null;
}

// refs: 1 - tags: named, output
export interface UpdateFlowSourceResponse {
  FlowArn?: string | null;
  Source?: Source | null;
}

// refs: 2 - tags: input, named, interface
export interface AddOutputRequest {
  CidrAllowList?: string[] | null;
  Description?: string | null;
  Destination?: string | null;
  Encryption?: Encryption | null;
  MaxLatency?: number | null;
  Name?: string | null;
  Port?: number | null;
  Protocol: Protocol;
  RemoteId?: string | null;
  SmoothingLatency?: number | null;
  StreamId?: string | null;
  VpcInterfaceAttachment?: VpcInterfaceAttachment | null;
}
function fromAddOutputRequest(input?: AddOutputRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cidrAllowList: input["CidrAllowList"],
    description: input["Description"],
    destination: input["Destination"],
    encryption: fromEncryption(input["Encryption"]),
    maxLatency: input["MaxLatency"],
    name: input["Name"],
    port: input["Port"],
    protocol: input["Protocol"],
    remoteId: input["RemoteId"],
    smoothingLatency: input["SmoothingLatency"],
    streamId: input["StreamId"],
    vpcInterfaceAttachment: fromVpcInterfaceAttachment(input["VpcInterfaceAttachment"]),
  }
}

// refs: 25 - tags: input, named, interface, output
export interface Encryption {
  Algorithm: Algorithm;
  ConstantInitializationVector?: string | null;
  DeviceId?: string | null;
  KeyType?: KeyType | null;
  Region?: string | null;
  ResourceId?: string | null;
  RoleArn: string;
  SecretArn?: string | null;
  Url?: string | null;
}
function fromEncryption(input?: Encryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    algorithm: input["Algorithm"],
    constantInitializationVector: input["ConstantInitializationVector"],
    deviceId: input["DeviceId"],
    keyType: input["KeyType"],
    region: input["Region"],
    resourceId: input["ResourceId"],
    roleArn: input["RoleArn"],
    secretArn: input["SecretArn"],
    url: input["Url"],
  }
}
function toEncryption(root: jsonP.JSONValue): Encryption {
  return jsonP.readObj({
    required: {
      "Algorithm": (x: jsonP.JSONValue) => cmnP.readEnum<Algorithm>(x),
      "RoleArn": "s",
    },
    optional: {
      "ConstantInitializationVector": "s",
      "DeviceId": "s",
      "KeyType": (x: jsonP.JSONValue) => cmnP.readEnum<KeyType>(x),
      "Region": "s",
      "ResourceId": "s",
      "SecretArn": "s",
      "Url": "s",
    },
  }, root);
}

// refs: 28 - tags: input, named, enum, output
export type Algorithm =
| "aes128"
| "aes192"
| "aes256"
| cmnP.UnexpectedEnumValue;

// refs: 28 - tags: input, named, enum, output
export type KeyType =
| "speke"
| "static-key"
| cmnP.UnexpectedEnumValue;

// refs: 20 - tags: input, named, enum, output
export type Protocol =
| "zixi-push"
| "rtp-fec"
| "rtp"
| "zixi-pull"
| "rist"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface VpcInterfaceAttachment {
  VpcInterfaceName?: string | null;
}
function fromVpcInterfaceAttachment(input?: VpcInterfaceAttachment | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    vpcInterfaceName: input["VpcInterfaceName"],
  }
}
function toVpcInterfaceAttachment(root: jsonP.JSONValue): VpcInterfaceAttachment {
  return jsonP.readObj({
    required: {},
    optional: {
      "VpcInterfaceName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface
export interface SetSourceRequest {
  Decryption?: Encryption | null;
  Description?: string | null;
  EntitlementArn?: string | null;
  IngestPort?: number | null;
  MaxBitrate?: number | null;
  MaxLatency?: number | null;
  Name?: string | null;
  Protocol?: Protocol | null;
  StreamId?: string | null;
  VpcInterfaceName?: string | null;
  WhitelistCidr?: string | null;
}
function fromSetSourceRequest(input?: SetSourceRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    decryption: fromEncryption(input["Decryption"]),
    description: input["Description"],
    entitlementArn: input["EntitlementArn"],
    ingestPort: input["IngestPort"],
    maxBitrate: input["MaxBitrate"],
    maxLatency: input["MaxLatency"],
    name: input["Name"],
    protocol: input["Protocol"],
    streamId: input["StreamId"],
    vpcInterfaceName: input["VpcInterfaceName"],
    whitelistCidr: input["WhitelistCidr"],
  }
}

// refs: 2 - tags: input, named, interface
export interface VpcInterfaceRequest {
  Name: string;
  RoleArn: string;
  SecurityGroupIds: string[];
  SubnetId: string;
}
function fromVpcInterfaceRequest(input?: VpcInterfaceRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["Name"],
    roleArn: input["RoleArn"],
    securityGroupIds: input["SecurityGroupIds"],
    subnetId: input["SubnetId"],
  }
}

// refs: 2 - tags: input, named, interface
export interface GrantEntitlementRequest {
  DataTransferSubscriberFeePercent?: number | null;
  Description?: string | null;
  Encryption?: Encryption | null;
  EntitlementStatus?: EntitlementStatus | null;
  Name?: string | null;
  Subscribers: string[];
}
function fromGrantEntitlementRequest(input?: GrantEntitlementRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dataTransferSubscriberFeePercent: input["DataTransferSubscriberFeePercent"],
    description: input["Description"],
    encryption: fromEncryption(input["Encryption"]),
    entitlementStatus: input["EntitlementStatus"],
    name: input["Name"],
    subscribers: input["Subscribers"],
  }
}

// refs: 8 - tags: input, named, enum, output
export type EntitlementStatus =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface FailoverConfig {
  RecoveryWindow?: number | null;
  State?: State | null;
}
function fromFailoverConfig(input?: FailoverConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    recoveryWindow: input["RecoveryWindow"],
    state: input["State"],
  }
}
function toFailoverConfig(root: jsonP.JSONValue): FailoverConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "RecoveryWindow": "n",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<State>(x),
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type State =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateFailoverConfig {
  RecoveryWindow?: number | null;
  State?: State | null;
}
function fromUpdateFailoverConfig(input?: UpdateFailoverConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    recoveryWindow: input["RecoveryWindow"],
    state: input["State"],
  }
}

// refs: 3 - tags: input, named, interface
export interface UpdateEncryption {
  Algorithm?: Algorithm | null;
  ConstantInitializationVector?: string | null;
  DeviceId?: string | null;
  KeyType?: KeyType | null;
  Region?: string | null;
  ResourceId?: string | null;
  RoleArn?: string | null;
  SecretArn?: string | null;
  Url?: string | null;
}
function fromUpdateEncryption(input?: UpdateEncryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    algorithm: input["Algorithm"],
    constantInitializationVector: input["ConstantInitializationVector"],
    deviceId: input["DeviceId"],
    keyType: input["KeyType"],
    region: input["Region"],
    resourceId: input["ResourceId"],
    roleArn: input["RoleArn"],
    secretArn: input["SecretArn"],
    url: input["Url"],
  }
}

// refs: 5 - tags: output, named, interface
export interface Output {
  DataTransferSubscriberFeePercent?: number | null;
  Description?: string | null;
  Destination?: string | null;
  Encryption?: Encryption | null;
  EntitlementArn?: string | null;
  MediaLiveInputArn?: string | null;
  Name: string;
  OutputArn: string;
  Port?: number | null;
  Transport?: Transport | null;
  VpcInterfaceAttachment?: VpcInterfaceAttachment | null;
}
function toOutput(root: jsonP.JSONValue): Output {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "OutputArn": "s",
    },
    optional: {
      "DataTransferSubscriberFeePercent": "n",
      "Description": "s",
      "Destination": "s",
      "Encryption": toEncryption,
      "EntitlementArn": "s",
      "MediaLiveInputArn": "s",
      "Port": "n",
      "Transport": toTransport,
      "VpcInterfaceAttachment": toVpcInterfaceAttachment,
    },
  }, root);
}

// refs: 13 - tags: output, named, interface
export interface Transport {
  CidrAllowList?: string[] | null;
  MaxBitrate?: number | null;
  MaxLatency?: number | null;
  Protocol: Protocol;
  RemoteId?: string | null;
  SmoothingLatency?: number | null;
  StreamId?: string | null;
}
function toTransport(root: jsonP.JSONValue): Transport {
  return jsonP.readObj({
    required: {
      "Protocol": (x: jsonP.JSONValue) => cmnP.readEnum<Protocol>(x),
    },
    optional: {
      "CidrAllowList": ["s"],
      "MaxBitrate": "n",
      "MaxLatency": "n",
      "RemoteId": "s",
      "SmoothingLatency": "n",
      "StreamId": "s",
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface Source {
  DataTransferSubscriberFeePercent?: number | null;
  Decryption?: Encryption | null;
  Description?: string | null;
  EntitlementArn?: string | null;
  IngestIp?: string | null;
  IngestPort?: number | null;
  Name: string;
  SourceArn: string;
  Transport?: Transport | null;
  VpcInterfaceName?: string | null;
  WhitelistCidr?: string | null;
}
function toSource(root: jsonP.JSONValue): Source {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "SourceArn": "s",
    },
    optional: {
      "DataTransferSubscriberFeePercent": "n",
      "Decryption": toEncryption,
      "Description": "s",
      "EntitlementArn": "s",
      "IngestIp": "s",
      "IngestPort": "n",
      "Transport": toTransport,
      "VpcInterfaceName": "s",
      "WhitelistCidr": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface VpcInterface {
  Name: string;
  NetworkInterfaceIds: string[];
  RoleArn: string;
  SecurityGroupIds: string[];
  SubnetId: string;
}
function toVpcInterface(root: jsonP.JSONValue): VpcInterface {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "NetworkInterfaceIds": ["s"],
      "RoleArn": "s",
      "SecurityGroupIds": ["s"],
      "SubnetId": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Flow {
  AvailabilityZone: string;
  Description?: string | null;
  EgressIp?: string | null;
  Entitlements: Entitlement[];
  FlowArn: string;
  Name: string;
  Outputs: Output[];
  Source: Source;
  SourceFailoverConfig?: FailoverConfig | null;
  Sources?: Source[] | null;
  Status: Status;
  VpcInterfaces?: VpcInterface[] | null;
}
function toFlow(root: jsonP.JSONValue): Flow {
  return jsonP.readObj({
    required: {
      "AvailabilityZone": "s",
      "Entitlements": [toEntitlement],
      "FlowArn": "s",
      "Name": "s",
      "Outputs": [toOutput],
      "Source": toSource,
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
    },
    optional: {
      "Description": "s",
      "EgressIp": "s",
      "SourceFailoverConfig": toFailoverConfig,
      "Sources": [toSource],
      "VpcInterfaces": [toVpcInterface],
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface Entitlement {
  DataTransferSubscriberFeePercent?: number | null;
  Description?: string | null;
  Encryption?: Encryption | null;
  EntitlementArn: string;
  EntitlementStatus?: EntitlementStatus | null;
  Name: string;
  Subscribers: string[];
}
function toEntitlement(root: jsonP.JSONValue): Entitlement {
  return jsonP.readObj({
    required: {
      "EntitlementArn": "s",
      "Name": "s",
      "Subscribers": ["s"],
    },
    optional: {
      "DataTransferSubscriberFeePercent": "n",
      "Description": "s",
      "Encryption": toEncryption,
      "EntitlementStatus": (x: jsonP.JSONValue) => cmnP.readEnum<EntitlementStatus>(x),
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type Status =
| "STANDBY"
| "ACTIVE"
| "UPDATING"
| "DELETING"
| "STARTING"
| "STOPPING"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Messages {
  Errors: string[];
}
function toMessages(root: jsonP.JSONValue): Messages {
  return jsonP.readObj({
    required: {
      "Errors": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Offering {
  CurrencyCode: string;
  Duration: number;
  DurationUnits: DurationUnits;
  OfferingArn: string;
  OfferingDescription: string;
  PricePerUnit: string;
  PriceUnits: PriceUnits;
  ResourceSpecification: ResourceSpecification;
}
function toOffering(root: jsonP.JSONValue): Offering {
  return jsonP.readObj({
    required: {
      "CurrencyCode": "s",
      "Duration": "n",
      "DurationUnits": (x: jsonP.JSONValue) => cmnP.readEnum<DurationUnits>(x),
      "OfferingArn": "s",
      "OfferingDescription": "s",
      "PricePerUnit": "s",
      "PriceUnits": (x: jsonP.JSONValue) => cmnP.readEnum<PriceUnits>(x),
      "ResourceSpecification": toResourceSpecification,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: output, named, enum
export type DurationUnits =
| "MONTHS"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type PriceUnits =
| "HOURLY"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface ResourceSpecification {
  ReservedBitrate?: number | null;
  ResourceType: ResourceType;
}
function toResourceSpecification(root: jsonP.JSONValue): ResourceSpecification {
  return jsonP.readObj({
    required: {
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
    },
    optional: {
      "ReservedBitrate": "n",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type ResourceType =
| "Mbps_Outbound_Bandwidth"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface Reservation {
  CurrencyCode: string;
  Duration: number;
  DurationUnits: DurationUnits;
  End: string;
  OfferingArn: string;
  OfferingDescription: string;
  PricePerUnit: string;
  PriceUnits: PriceUnits;
  ReservationArn: string;
  ReservationName: string;
  ReservationState: ReservationState;
  ResourceSpecification: ResourceSpecification;
  Start: string;
}
function toReservation(root: jsonP.JSONValue): Reservation {
  return jsonP.readObj({
    required: {
      "CurrencyCode": "s",
      "Duration": "n",
      "DurationUnits": (x: jsonP.JSONValue) => cmnP.readEnum<DurationUnits>(x),
      "End": "s",
      "OfferingArn": "s",
      "OfferingDescription": "s",
      "PricePerUnit": "s",
      "PriceUnits": (x: jsonP.JSONValue) => cmnP.readEnum<PriceUnits>(x),
      "ReservationArn": "s",
      "ReservationName": "s",
      "ReservationState": (x: jsonP.JSONValue) => cmnP.readEnum<ReservationState>(x),
      "ResourceSpecification": toResourceSpecification,
      "Start": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ReservationState =
| "ACTIVE"
| "EXPIRED"
| "PROCESSING"
| "CANCELED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ListedEntitlement {
  DataTransferSubscriberFeePercent?: number | null;
  EntitlementArn: string;
  EntitlementName: string;
}
function toListedEntitlement(root: jsonP.JSONValue): ListedEntitlement {
  return jsonP.readObj({
    required: {
      "EntitlementArn": "s",
      "EntitlementName": "s",
    },
    optional: {
      "DataTransferSubscriberFeePercent": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListedFlow {
  AvailabilityZone: string;
  Description: string;
  FlowArn: string;
  Name: string;
  SourceType: SourceType;
  Status: Status;
}
function toListedFlow(root: jsonP.JSONValue): ListedFlow {
  return jsonP.readObj({
    required: {
      "AvailabilityZone": "s",
      "Description": "s",
      "FlowArn": "s",
      "Name": "s",
      "SourceType": (x: jsonP.JSONValue) => cmnP.readEnum<SourceType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SourceType =
| "OWNED"
| "ENTITLED"
| cmnP.UnexpectedEnumValue;
