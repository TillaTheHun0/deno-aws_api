// Autogenerated API client for: AWS Marketplace Catalog Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MarketplaceCatalog {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MarketplaceCatalog.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-09-17",
    "endpointPrefix": "catalog.marketplace",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AWS Marketplace Catalog",
    "serviceFullName": "AWS Marketplace Catalog Service",
    "serviceId": "Marketplace Catalog",
    "signatureVersion": "v4",
    "signingName": "aws-marketplace",
    "uid": "marketplace-catalog-2018-09-17"
  };

  async cancelChangeSet(
    {abortSignal, ...params}: RequestConfig & CancelChangeSetRequest,
  ): Promise<CancelChangeSetResponse> {
    const query = new URLSearchParams;
    query.set("catalog", params["Catalog"]?.toString() ?? "");
    query.set("changeSetId", params["ChangeSetId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "CancelChangeSet",
      method: "PATCH",
      requestUri: "/CancelChangeSet",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ChangeSetId": "s",
          "ChangeSetArn": "s",
        },
      }, await resp.json()),
  };
  }

  async describeChangeSet(
    {abortSignal, ...params}: RequestConfig & DescribeChangeSetRequest,
  ): Promise<DescribeChangeSetResponse> {
    const query = new URLSearchParams;
    query.set("catalog", params["Catalog"]?.toString() ?? "");
    query.set("changeSetId", params["ChangeSetId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeChangeSet",
      method: "GET",
      requestUri: "/DescribeChangeSet",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ChangeSetId": "s",
          "ChangeSetArn": "s",
          "ChangeSetName": "s",
          "StartTime": "s",
          "EndTime": "s",
          "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ChangeStatus>(x),
          "FailureCode": (x: jsonP.JSONValue) => cmnP.readEnum<FailureCode>(x),
          "FailureDescription": "s",
          "ChangeSet": [toChangeSummary],
        },
      }, await resp.json()),
  };
  }

  async describeEntity(
    {abortSignal, ...params}: RequestConfig & DescribeEntityRequest,
  ): Promise<DescribeEntityResponse> {
    const query = new URLSearchParams;
    query.set("catalog", params["Catalog"]?.toString() ?? "");
    query.set("entityId", params["EntityId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeEntity",
      method: "GET",
      requestUri: "/DescribeEntity",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "EntityType": "s",
          "EntityIdentifier": "s",
          "EntityArn": "s",
          "LastModifiedDate": "s",
          "Details": "s",
        },
      }, await resp.json()),
  };
  }

  async listChangeSets(
    {abortSignal, ...params}: RequestConfig & ListChangeSetsRequest,
  ): Promise<ListChangeSetsResponse> {
    const body: jsonP.JSONObject = params ? {
      Catalog: params["Catalog"],
      FilterList: params["FilterList"]?.map(x => fromFilter(x)),
      Sort: fromSort(params["Sort"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListChangeSets",
      requestUri: "/ListChangeSets",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ChangeSetSummaryList": [toChangeSetSummaryListItem],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listEntities(
    {abortSignal, ...params}: RequestConfig & ListEntitiesRequest,
  ): Promise<ListEntitiesResponse> {
    const body: jsonP.JSONObject = params ? {
      Catalog: params["Catalog"],
      EntityType: params["EntityType"],
      FilterList: params["FilterList"]?.map(x => fromFilter(x)),
      Sort: fromSort(params["Sort"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEntities",
      requestUri: "/ListEntities",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "EntitySummaryList": [toEntitySummary],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async startChangeSet(
    {abortSignal, ...params}: RequestConfig & StartChangeSetRequest,
  ): Promise<StartChangeSetResponse> {
    const body: jsonP.JSONObject = params ? {
      Catalog: params["Catalog"],
      ChangeSet: params["ChangeSet"]?.map(x => fromChange(x)),
      ChangeSetName: params["ChangeSetName"],
      ClientRequestToken: params["ClientRequestToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartChangeSet",
      requestUri: "/StartChangeSet",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ChangeSetId": "s",
          "ChangeSetArn": "s",
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface CancelChangeSetRequest {
  Catalog: string;
  ChangeSetId: string;
}

// refs: 1 - tags: named, input
export interface DescribeChangeSetRequest {
  Catalog: string;
  ChangeSetId: string;
}

// refs: 1 - tags: named, input
export interface DescribeEntityRequest {
  Catalog: string;
  EntityId: string;
}

// refs: 1 - tags: named, input
export interface ListChangeSetsRequest {
  Catalog: string;
  FilterList?: Filter[] | null;
  Sort?: Sort | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListEntitiesRequest {
  Catalog: string;
  EntityType: string;
  FilterList?: Filter[] | null;
  Sort?: Sort | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface StartChangeSetRequest {
  Catalog: string;
  ChangeSet: Change[];
  ChangeSetName?: string | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CancelChangeSetResponse {
  ChangeSetId?: string | null;
  ChangeSetArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeChangeSetResponse {
  ChangeSetId?: string | null;
  ChangeSetArn?: string | null;
  ChangeSetName?: string | null;
  StartTime?: string | null;
  EndTime?: string | null;
  Status?: ChangeStatus | null;
  FailureCode?: FailureCode | null;
  FailureDescription?: string | null;
  ChangeSet?: ChangeSummary[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeEntityResponse {
  EntityType?: string | null;
  EntityIdentifier?: string | null;
  EntityArn?: string | null;
  LastModifiedDate?: string | null;
  Details?: string | null;
}

// refs: 1 - tags: named, output
export interface ListChangeSetsResponse {
  ChangeSetSummaryList?: ChangeSetSummaryListItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEntitiesResponse {
  EntitySummaryList?: EntitySummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartChangeSetResponse {
  ChangeSetId?: string | null;
  ChangeSetArn?: string | null;
}

// refs: 2 - tags: input, named, interface
export interface Filter {
  Name?: string | null;
  ValueList?: string[] | null;
}
function fromFilter(input?: Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    ValueList: input["ValueList"],
  }
}

// refs: 2 - tags: input, named, interface
export interface Sort {
  SortBy?: string | null;
  SortOrder?: SortOrder | null;
}
function fromSort(input?: Sort | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SortBy: input["SortBy"],
    SortOrder: input["SortOrder"],
  }
}

// refs: 2 - tags: input, named, enum
export type SortOrder =
| "ASCENDING"
| "DESCENDING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface Change {
  ChangeType: string;
  Entity: Entity;
  Details: string;
}
function fromChange(input?: Change | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ChangeType: input["ChangeType"],
    Entity: fromEntity(input["Entity"]),
    Details: input["Details"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface Entity {
  Type: string;
  Identifier?: string | null;
}
function fromEntity(input?: Entity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Identifier: input["Identifier"],
  }
}
function toEntity(root: jsonP.JSONValue): Entity {
  return jsonP.readObj({
    required: {
      "Type": "s",
    },
    optional: {
      "Identifier": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ChangeStatus =
| "PREPARING"
| "APPLYING"
| "SUCCEEDED"
| "CANCELLED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type FailureCode =
| "CLIENT_ERROR"
| "SERVER_FAULT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ChangeSummary {
  ChangeType?: string | null;
  Entity?: Entity | null;
  Details?: string | null;
  ErrorDetailList?: ErrorDetail[] | null;
}
function toChangeSummary(root: jsonP.JSONValue): ChangeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChangeType": "s",
      "Entity": toEntity,
      "Details": "s",
      "ErrorDetailList": [toErrorDetail],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ErrorDetail {
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toErrorDetail(root: jsonP.JSONValue): ErrorDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ChangeSetSummaryListItem {
  ChangeSetId?: string | null;
  ChangeSetArn?: string | null;
  ChangeSetName?: string | null;
  StartTime?: string | null;
  EndTime?: string | null;
  Status?: ChangeStatus | null;
  EntityIdList?: string[] | null;
  FailureCode?: FailureCode | null;
}
function toChangeSetSummaryListItem(root: jsonP.JSONValue): ChangeSetSummaryListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChangeSetId": "s",
      "ChangeSetArn": "s",
      "ChangeSetName": "s",
      "StartTime": "s",
      "EndTime": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ChangeStatus>(x),
      "EntityIdList": ["s"],
      "FailureCode": (x: jsonP.JSONValue) => cmnP.readEnum<FailureCode>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EntitySummary {
  Name?: string | null;
  EntityType?: string | null;
  EntityId?: string | null;
  EntityArn?: string | null;
  LastModifiedDate?: string | null;
  Visibility?: string | null;
}
function toEntitySummary(root: jsonP.JSONValue): EntitySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "EntityType": "s",
      "EntityId": "s",
      "EntityArn": "s",
      "LastModifiedDate": "s",
      "Visibility": "s",
    },
  }, root);
}
