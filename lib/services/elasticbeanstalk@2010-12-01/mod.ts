// Autogenerated API client for: AWS Elastic Beanstalk

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as xmlP from "../../encoding/xml.ts";
import * as qsP from "../../encoding/querystring.ts";

export default class ElasticBeanstalk {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ElasticBeanstalk.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2010-12-01",
    "endpointPrefix": "elasticbeanstalk",
    "protocol": "query",
    "serviceAbbreviation": "Elastic Beanstalk",
    "serviceFullName": "AWS Elastic Beanstalk",
    "serviceId": "Elastic Beanstalk",
    "signatureVersion": "v4",
    "uid": "elasticbeanstalk-2010-12-01",
    "xmlNamespace": "http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/"
  };

  async abortEnvironmentUpdate(
    {abortSignal, ...params}: RequestConfig & AbortEnvironmentUpdateMessage = {},
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AbortEnvironmentUpdate",
    });
  }

  async applyEnvironmentManagedAction(
    {abortSignal, ...params}: RequestConfig & ApplyEnvironmentManagedActionRequest,
  ): Promise<ApplyEnvironmentManagedActionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    body.append(prefix+"ActionId", (params["ActionId"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ApplyEnvironmentManagedAction",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "ApplyEnvironmentManagedActionResult");
    return {
      ...xml.strings({
        optional: {"ActionId":true,"ActionDescription":true,"Status":true},
      }),
      ActionType: xml.first("ActionType", false, x => (x.content ?? '') as ActionType),
    };
  }

  async associateEnvironmentOperationsRole(
    {abortSignal, ...params}: RequestConfig & AssociateEnvironmentOperationsRoleMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    body.append(prefix+"OperationsRole", (params["OperationsRole"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateEnvironmentOperationsRole",
    });
  }

  async checkDNSAvailability(
    {abortSignal, ...params}: RequestConfig & CheckDNSAvailabilityMessage,
  ): Promise<CheckDNSAvailabilityResultMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"CNAMEPrefix", (params["CNAMEPrefix"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckDNSAvailability",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "CheckDNSAvailabilityResult");
    return {
      ...xml.strings({
        optional: {"FullyQualifiedCNAME":true},
      }),
      Available: xml.first("Available", false, x => x.content === 'true'),
    };
  }

  async composeEnvironments(
    {abortSignal, ...params}: RequestConfig & ComposeEnvironmentsMessage = {},
  ): Promise<EnvironmentDescriptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("ApplicationName" in params) body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("GroupName" in params) body.append(prefix+"GroupName", (params["GroupName"] ?? '').toString());
    if (params["VersionLabels"]) qsP.appendList(body, prefix+"VersionLabels", params["VersionLabels"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ComposeEnvironments",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "ComposeEnvironmentsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      Environments: xml.getList("Environments", "member").map(EnvironmentDescription_Parse),
    };
  }

  async createApplication(
    {abortSignal, ...params}: RequestConfig & CreateApplicationMessage,
  ): Promise<ApplicationDescriptionMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if (params["ResourceLifecycleConfig"] != null) ApplicationResourceLifecycleConfig_Serialize(body, prefix+"ResourceLifecycleConfig", params["ResourceLifecycleConfig"]);
    if (params["Tags"]) qsP.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "CreateApplicationResult");
    return {
      Application: xml.first("Application", false, ApplicationDescription_Parse),
    };
  }

  async createApplicationVersion(
    {abortSignal, ...params}: RequestConfig & CreateApplicationVersionMessage,
  ): Promise<ApplicationVersionDescriptionMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    body.append(prefix+"VersionLabel", (params["VersionLabel"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if (params["SourceBuildInformation"] != null) SourceBuildInformation_Serialize(body, prefix+"SourceBuildInformation", params["SourceBuildInformation"]);
    if (params["SourceBundle"] != null) S3Location_Serialize(body, prefix+"SourceBundle", params["SourceBundle"]);
    if (params["BuildConfiguration"] != null) BuildConfiguration_Serialize(body, prefix+"BuildConfiguration", params["BuildConfiguration"]);
    if ("AutoCreateApplication" in params) body.append(prefix+"AutoCreateApplication", (params["AutoCreateApplication"] ?? '').toString());
    if ("Process" in params) body.append(prefix+"Process", (params["Process"] ?? '').toString());
    if (params["Tags"]) qsP.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplicationVersion",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "CreateApplicationVersionResult");
    return {
      ApplicationVersion: xml.first("ApplicationVersion", false, ApplicationVersionDescription_Parse),
    };
  }

  async createConfigurationTemplate(
    {abortSignal, ...params}: RequestConfig & CreateConfigurationTemplateMessage,
  ): Promise<ConfigurationSettingsDescription> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("SolutionStackName" in params) body.append(prefix+"SolutionStackName", (params["SolutionStackName"] ?? '').toString());
    if ("PlatformArn" in params) body.append(prefix+"PlatformArn", (params["PlatformArn"] ?? '').toString());
    if (params["SourceConfiguration"] != null) SourceConfiguration_Serialize(body, prefix+"SourceConfiguration", params["SourceConfiguration"]);
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if (params["OptionSettings"]) qsP.appendList(body, prefix+"OptionSettings", params["OptionSettings"], {"appender":ConfigurationOptionSetting_Serialize,"entryPrefix":".member."})
    if (params["Tags"]) qsP.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationTemplate",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "CreateConfigurationTemplateResult");
    return ConfigurationSettingsDescription_Parse(xml);
  }

  async createEnvironment(
    {abortSignal, ...params}: RequestConfig & CreateEnvironmentMessage,
  ): Promise<EnvironmentDescription> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("GroupName" in params) body.append(prefix+"GroupName", (params["GroupName"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if ("CNAMEPrefix" in params) body.append(prefix+"CNAMEPrefix", (params["CNAMEPrefix"] ?? '').toString());
    if (params["Tier"] != null) EnvironmentTier_Serialize(body, prefix+"Tier", params["Tier"]);
    if (params["Tags"]) qsP.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    if ("VersionLabel" in params) body.append(prefix+"VersionLabel", (params["VersionLabel"] ?? '').toString());
    if ("TemplateName" in params) body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("SolutionStackName" in params) body.append(prefix+"SolutionStackName", (params["SolutionStackName"] ?? '').toString());
    if ("PlatformArn" in params) body.append(prefix+"PlatformArn", (params["PlatformArn"] ?? '').toString());
    if (params["OptionSettings"]) qsP.appendList(body, prefix+"OptionSettings", params["OptionSettings"], {"appender":ConfigurationOptionSetting_Serialize,"entryPrefix":".member."})
    if (params["OptionsToRemove"]) qsP.appendList(body, prefix+"OptionsToRemove", params["OptionsToRemove"], {"appender":OptionSpecification_Serialize,"entryPrefix":".member."})
    if ("OperationsRole" in params) body.append(prefix+"OperationsRole", (params["OperationsRole"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEnvironment",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "CreateEnvironmentResult");
    return EnvironmentDescription_Parse(xml);
  }

  async createPlatformVersion(
    {abortSignal, ...params}: RequestConfig & CreatePlatformVersionRequest,
  ): Promise<CreatePlatformVersionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"PlatformName", (params["PlatformName"] ?? '').toString());
    body.append(prefix+"PlatformVersion", (params["PlatformVersion"] ?? '').toString());
    S3Location_Serialize(body, prefix+"PlatformDefinitionBundle", params["PlatformDefinitionBundle"]);
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if (params["OptionSettings"]) qsP.appendList(body, prefix+"OptionSettings", params["OptionSettings"], {"appender":ConfigurationOptionSetting_Serialize,"entryPrefix":".member."})
    if (params["Tags"]) qsP.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePlatformVersion",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "CreatePlatformVersionResult");
    return {
      PlatformSummary: xml.first("PlatformSummary", false, PlatformSummary_Parse),
      Builder: xml.first("Builder", false, Builder_Parse),
    };
  }

  async createStorageLocation(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<CreateStorageLocationResultMessage> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateStorageLocation",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "CreateStorageLocationResult");
    return xml.strings({
      optional: {"S3Bucket":true},
    });
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("TerminateEnvByForce" in params) body.append(prefix+"TerminateEnvByForce", (params["TerminateEnvByForce"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplication",
    });
  }

  async deleteApplicationVersion(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationVersionMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    body.append(prefix+"VersionLabel", (params["VersionLabel"] ?? '').toString());
    if ("DeleteSourceBundle" in params) body.append(prefix+"DeleteSourceBundle", (params["DeleteSourceBundle"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApplicationVersion",
    });
  }

  async deleteConfigurationTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationTemplateMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConfigurationTemplate",
    });
  }

  async deleteEnvironmentConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteEnvironmentConfigurationMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEnvironmentConfiguration",
    });
  }

  async deletePlatformVersion(
    {abortSignal, ...params}: RequestConfig & DeletePlatformVersionRequest = {},
  ): Promise<DeletePlatformVersionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("PlatformArn" in params) body.append(prefix+"PlatformArn", (params["PlatformArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePlatformVersion",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DeletePlatformVersionResult");
    return {
      PlatformSummary: xml.first("PlatformSummary", false, PlatformSummary_Parse),
    };
  }

  async describeAccountAttributes(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<DescribeAccountAttributesResult> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAccountAttributes",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeAccountAttributesResult");
    return {
      ResourceQuotas: xml.first("ResourceQuotas", false, ResourceQuotas_Parse),
    };
  }

  async describeApplicationVersions(
    {abortSignal, ...params}: RequestConfig & DescribeApplicationVersionsMessage = {},
  ): Promise<ApplicationVersionDescriptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("ApplicationName" in params) body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if (params["VersionLabels"]) qsP.appendList(body, prefix+"VersionLabels", params["VersionLabels"], {"entryPrefix":".member."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplicationVersions",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeApplicationVersionsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      ApplicationVersions: xml.getList("ApplicationVersions", "member").map(ApplicationVersionDescription_Parse),
    };
  }

  async describeApplications(
    {abortSignal, ...params}: RequestConfig & DescribeApplicationsMessage = {},
  ): Promise<ApplicationDescriptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if (params["ApplicationNames"]) qsP.appendList(body, prefix+"ApplicationNames", params["ApplicationNames"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeApplications",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeApplicationsResult");
    return {
      Applications: xml.getList("Applications", "member").map(ApplicationDescription_Parse),
    };
  }

  async describeConfigurationOptions(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationOptionsMessage = {},
  ): Promise<ConfigurationOptionsDescription> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("ApplicationName" in params) body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("TemplateName" in params) body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("SolutionStackName" in params) body.append(prefix+"SolutionStackName", (params["SolutionStackName"] ?? '').toString());
    if ("PlatformArn" in params) body.append(prefix+"PlatformArn", (params["PlatformArn"] ?? '').toString());
    if (params["Options"]) qsP.appendList(body, prefix+"Options", params["Options"], {"appender":OptionSpecification_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationOptions",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeConfigurationOptionsResult");
    return {
      ...xml.strings({
        optional: {"SolutionStackName":true,"PlatformArn":true},
      }),
      Options: xml.getList("Options", "member").map(ConfigurationOptionDescription_Parse),
    };
  }

  async describeConfigurationSettings(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationSettingsMessage,
  ): Promise<ConfigurationSettingsDescriptions> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("TemplateName" in params) body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationSettings",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeConfigurationSettingsResult");
    return {
      ConfigurationSettings: xml.getList("ConfigurationSettings", "member").map(ConfigurationSettingsDescription_Parse),
    };
  }

  async describeEnvironmentHealth(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentHealthRequest = {},
  ): Promise<DescribeEnvironmentHealthResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if (params["AttributeNames"]) qsP.appendList(body, prefix+"AttributeNames", params["AttributeNames"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironmentHealth",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeEnvironmentHealthResult");
    return {
      ...xml.strings({
        optional: {"EnvironmentName":true,"HealthStatus":true,"Color":true},
      }),
      Status: xml.first("Status", false, x => (x.content ?? '') as EnvironmentHealth),
      Causes: xml.getList("Causes", "member").map(x => x.content ?? ''),
      ApplicationMetrics: xml.first("ApplicationMetrics", false, ApplicationMetrics_Parse),
      InstancesHealth: xml.first("InstancesHealth", false, InstanceHealthSummary_Parse),
      RefreshedAt: xml.first("RefreshedAt", false, x => xmlP.parseTimestamp(x.content)),
    };
  }

  async describeEnvironmentManagedActionHistory(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentManagedActionHistoryRequest = {},
  ): Promise<DescribeEnvironmentManagedActionHistoryResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    if ("MaxItems" in params) body.append(prefix+"MaxItems", (params["MaxItems"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironmentManagedActionHistory",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeEnvironmentManagedActionHistoryResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      ManagedActionHistoryItems: xml.getList("ManagedActionHistoryItems", "member").map(ManagedActionHistoryItem_Parse),
    };
  }

  async describeEnvironmentManagedActions(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentManagedActionsRequest = {},
  ): Promise<DescribeEnvironmentManagedActionsResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("Status" in params) body.append(prefix+"Status", (params["Status"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironmentManagedActions",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeEnvironmentManagedActionsResult");
    return {
      ManagedActions: xml.getList("ManagedActions", "member").map(ManagedAction_Parse),
    };
  }

  async describeEnvironmentResources(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentResourcesMessage = {},
  ): Promise<EnvironmentResourceDescriptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironmentResources",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeEnvironmentResourcesResult");
    return {
      EnvironmentResources: xml.first("EnvironmentResources", false, EnvironmentResourceDescription_Parse),
    };
  }

  async describeEnvironments(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentsMessage = {},
  ): Promise<EnvironmentDescriptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("ApplicationName" in params) body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("VersionLabel" in params) body.append(prefix+"VersionLabel", (params["VersionLabel"] ?? '').toString());
    if (params["EnvironmentIds"]) qsP.appendList(body, prefix+"EnvironmentIds", params["EnvironmentIds"], {"entryPrefix":".member."})
    if (params["EnvironmentNames"]) qsP.appendList(body, prefix+"EnvironmentNames", params["EnvironmentNames"], {"entryPrefix":".member."})
    if ("IncludeDeleted" in params) body.append(prefix+"IncludeDeleted", (params["IncludeDeleted"] ?? '').toString());
    if ("IncludedDeletedBackTo" in params) body.append(prefix+"IncludedDeletedBackTo", qsP.encodeDate_iso8601(params["IncludedDeletedBackTo"]));
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironments",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeEnvironmentsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      Environments: xml.getList("Environments", "member").map(EnvironmentDescription_Parse),
    };
  }

  async describeEvents(
    {abortSignal, ...params}: RequestConfig & DescribeEventsMessage = {},
  ): Promise<EventDescriptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("ApplicationName" in params) body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("VersionLabel" in params) body.append(prefix+"VersionLabel", (params["VersionLabel"] ?? '').toString());
    if ("TemplateName" in params) body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("PlatformArn" in params) body.append(prefix+"PlatformArn", (params["PlatformArn"] ?? '').toString());
    if ("RequestId" in params) body.append(prefix+"RequestId", (params["RequestId"] ?? '').toString());
    if ("Severity" in params) body.append(prefix+"Severity", (params["Severity"] ?? '').toString());
    if ("StartTime" in params) body.append(prefix+"StartTime", qsP.encodeDate_iso8601(params["StartTime"]));
    if ("EndTime" in params) body.append(prefix+"EndTime", qsP.encodeDate_iso8601(params["EndTime"]));
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEvents",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeEventsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      Events: xml.getList("Events", "member").map(EventDescription_Parse),
    };
  }

  async describeInstancesHealth(
    {abortSignal, ...params}: RequestConfig & DescribeInstancesHealthRequest = {},
  ): Promise<DescribeInstancesHealthResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if (params["AttributeNames"]) qsP.appendList(body, prefix+"AttributeNames", params["AttributeNames"], {"entryPrefix":".member."})
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInstancesHealth",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribeInstancesHealthResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      InstanceHealthList: xml.getList("InstanceHealthList", "member").map(SingleInstanceHealth_Parse),
      RefreshedAt: xml.first("RefreshedAt", false, x => xmlP.parseTimestamp(x.content)),
    };
  }

  async describePlatformVersion(
    {abortSignal, ...params}: RequestConfig & DescribePlatformVersionRequest = {},
  ): Promise<DescribePlatformVersionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("PlatformArn" in params) body.append(prefix+"PlatformArn", (params["PlatformArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePlatformVersion",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DescribePlatformVersionResult");
    return {
      PlatformDescription: xml.first("PlatformDescription", false, PlatformDescription_Parse),
    };
  }

  async disassociateEnvironmentOperationsRole(
    {abortSignal, ...params}: RequestConfig & DisassociateEnvironmentOperationsRoleMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateEnvironmentOperationsRole",
    });
  }

  async listAvailableSolutionStacks(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<ListAvailableSolutionStacksResultMessage> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListAvailableSolutionStacks",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "ListAvailableSolutionStacksResult");
    return {
      SolutionStacks: xml.getList("SolutionStacks", "member").map(x => x.content ?? ''),
      SolutionStackDetails: xml.getList("SolutionStackDetails", "member").map(SolutionStackDescription_Parse),
    };
  }

  async listPlatformBranches(
    {abortSignal, ...params}: RequestConfig & ListPlatformBranchesRequest = {},
  ): Promise<ListPlatformBranchesResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if (params["Filters"]) qsP.appendList(body, prefix+"Filters", params["Filters"], {"appender":SearchFilter_Serialize,"entryPrefix":".member."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPlatformBranches",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "ListPlatformBranchesResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      PlatformBranchSummaryList: xml.getList("PlatformBranchSummaryList", "member").map(PlatformBranchSummary_Parse),
    };
  }

  async listPlatformVersions(
    {abortSignal, ...params}: RequestConfig & ListPlatformVersionsRequest = {},
  ): Promise<ListPlatformVersionsResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if (params["Filters"]) qsP.appendList(body, prefix+"Filters", params["Filters"], {"appender":PlatformFilter_Serialize,"entryPrefix":".member."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPlatformVersions",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "ListPlatformVersionsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      PlatformSummaryList: xml.getList("PlatformSummaryList", "member").map(PlatformSummary_Parse),
    };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceMessage,
  ): Promise<ResourceTagsDescriptionMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceArn", (params["ResourceArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "ListTagsForResourceResult");
    return {
      ...xml.strings({
        optional: {"ResourceArn":true},
      }),
      ResourceTags: xml.getList("ResourceTags", "member").map(Tag_Parse),
    };
  }

  async rebuildEnvironment(
    {abortSignal, ...params}: RequestConfig & RebuildEnvironmentMessage = {},
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebuildEnvironment",
    });
  }

  async requestEnvironmentInfo(
    {abortSignal, ...params}: RequestConfig & RequestEnvironmentInfoMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    body.append(prefix+"InfoType", (params["InfoType"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RequestEnvironmentInfo",
    });
  }

  async restartAppServer(
    {abortSignal, ...params}: RequestConfig & RestartAppServerMessage = {},
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestartAppServer",
    });
  }

  async retrieveEnvironmentInfo(
    {abortSignal, ...params}: RequestConfig & RetrieveEnvironmentInfoMessage,
  ): Promise<RetrieveEnvironmentInfoResultMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    body.append(prefix+"InfoType", (params["InfoType"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RetrieveEnvironmentInfo",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "RetrieveEnvironmentInfoResult");
    return {
      EnvironmentInfo: xml.getList("EnvironmentInfo", "member").map(EnvironmentInfoDescription_Parse),
    };
  }

  async swapEnvironmentCNAMEs(
    {abortSignal, ...params}: RequestConfig & SwapEnvironmentCNAMEsMessage = {},
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("SourceEnvironmentId" in params) body.append(prefix+"SourceEnvironmentId", (params["SourceEnvironmentId"] ?? '').toString());
    if ("SourceEnvironmentName" in params) body.append(prefix+"SourceEnvironmentName", (params["SourceEnvironmentName"] ?? '').toString());
    if ("DestinationEnvironmentId" in params) body.append(prefix+"DestinationEnvironmentId", (params["DestinationEnvironmentId"] ?? '').toString());
    if ("DestinationEnvironmentName" in params) body.append(prefix+"DestinationEnvironmentName", (params["DestinationEnvironmentName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SwapEnvironmentCNAMEs",
    });
  }

  async terminateEnvironment(
    {abortSignal, ...params}: RequestConfig & TerminateEnvironmentMessage = {},
  ): Promise<EnvironmentDescription> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("TerminateResources" in params) body.append(prefix+"TerminateResources", (params["TerminateResources"] ?? '').toString());
    if ("ForceTerminate" in params) body.append(prefix+"ForceTerminate", (params["ForceTerminate"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateEnvironment",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "TerminateEnvironmentResult");
    return EnvironmentDescription_Parse(xml);
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & UpdateApplicationMessage,
  ): Promise<ApplicationDescriptionMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "UpdateApplicationResult");
    return {
      Application: xml.first("Application", false, ApplicationDescription_Parse),
    };
  }

  async updateApplicationResourceLifecycle(
    {abortSignal, ...params}: RequestConfig & UpdateApplicationResourceLifecycleMessage,
  ): Promise<ApplicationResourceLifecycleDescriptionMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    ApplicationResourceLifecycleConfig_Serialize(body, prefix+"ResourceLifecycleConfig", params["ResourceLifecycleConfig"]);
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplicationResourceLifecycle",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "UpdateApplicationResourceLifecycleResult");
    return {
      ...xml.strings({
        optional: {"ApplicationName":true},
      }),
      ResourceLifecycleConfig: xml.first("ResourceLifecycleConfig", false, ApplicationResourceLifecycleConfig_Parse),
    };
  }

  async updateApplicationVersion(
    {abortSignal, ...params}: RequestConfig & UpdateApplicationVersionMessage,
  ): Promise<ApplicationVersionDescriptionMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    body.append(prefix+"VersionLabel", (params["VersionLabel"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplicationVersion",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "UpdateApplicationVersionResult");
    return {
      ApplicationVersion: xml.first("ApplicationVersion", false, ApplicationVersionDescription_Parse),
    };
  }

  async updateConfigurationTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateConfigurationTemplateMessage,
  ): Promise<ConfigurationSettingsDescription> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if (params["OptionSettings"]) qsP.appendList(body, prefix+"OptionSettings", params["OptionSettings"], {"appender":ConfigurationOptionSetting_Serialize,"entryPrefix":".member."})
    if (params["OptionsToRemove"]) qsP.appendList(body, prefix+"OptionsToRemove", params["OptionsToRemove"], {"appender":OptionSpecification_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfigurationTemplate",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "UpdateConfigurationTemplateResult");
    return ConfigurationSettingsDescription_Parse(xml);
  }

  async updateEnvironment(
    {abortSignal, ...params}: RequestConfig & UpdateEnvironmentMessage = {},
  ): Promise<EnvironmentDescription> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("ApplicationName" in params) body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("EnvironmentId" in params) body.append(prefix+"EnvironmentId", (params["EnvironmentId"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if ("GroupName" in params) body.append(prefix+"GroupName", (params["GroupName"] ?? '').toString());
    if ("Description" in params) body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if (params["Tier"] != null) EnvironmentTier_Serialize(body, prefix+"Tier", params["Tier"]);
    if ("VersionLabel" in params) body.append(prefix+"VersionLabel", (params["VersionLabel"] ?? '').toString());
    if ("TemplateName" in params) body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("SolutionStackName" in params) body.append(prefix+"SolutionStackName", (params["SolutionStackName"] ?? '').toString());
    if ("PlatformArn" in params) body.append(prefix+"PlatformArn", (params["PlatformArn"] ?? '').toString());
    if (params["OptionSettings"]) qsP.appendList(body, prefix+"OptionSettings", params["OptionSettings"], {"appender":ConfigurationOptionSetting_Serialize,"entryPrefix":".member."})
    if (params["OptionsToRemove"]) qsP.appendList(body, prefix+"OptionsToRemove", params["OptionsToRemove"], {"appender":OptionSpecification_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEnvironment",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "UpdateEnvironmentResult");
    return EnvironmentDescription_Parse(xml);
  }

  async updateTagsForResource(
    {abortSignal, ...params}: RequestConfig & UpdateTagsForResourceMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceArn", (params["ResourceArn"] ?? '').toString());
    if (params["TagsToAdd"]) qsP.appendList(body, prefix+"TagsToAdd", params["TagsToAdd"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    if (params["TagsToRemove"]) qsP.appendList(body, prefix+"TagsToRemove", params["TagsToRemove"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTagsForResource",
    });
  }

  async validateConfigurationSettings(
    {abortSignal, ...params}: RequestConfig & ValidateConfigurationSettingsMessage,
  ): Promise<ConfigurationSettingsValidationMessages> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("TemplateName" in params) body.append(prefix+"TemplateName", (params["TemplateName"] ?? '').toString());
    if ("EnvironmentName" in params) body.append(prefix+"EnvironmentName", (params["EnvironmentName"] ?? '').toString());
    if (params["OptionSettings"]) qsP.appendList(body, prefix+"OptionSettings", params["OptionSettings"], {"appender":ConfigurationOptionSetting_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ValidateConfigurationSettings",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "ValidateConfigurationSettingsResult");
    return {
      Messages: xml.getList("Messages", "member").map(ValidationMessage_Parse),
    };
  }

  // Resource State Waiters

  /** Checks state up to 20 times, 20 seconds apart (about 7 minutes max wait time). */
  async waitForEnvironmentExists(
    params: RequestConfig & DescribeEnvironmentsMessage,
  ): Promise<EnvironmentDescriptionsMessage> {
    const errMessage = 'ResourceNotReady: Resource is not in the state EnvironmentExists';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describeEnvironments(params);
      const field = resp?.Environments?.flatMap(x => x?.Status);
      if (field?.every(x => x === "Ready")) return resp;
      if (field?.every(x => x === "Launching")) continue;
      await new Promise(r => setTimeout(r, 20000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 20 seconds apart (about 7 minutes max wait time). */
  async waitForEnvironmentUpdated(
    params: RequestConfig & DescribeEnvironmentsMessage,
  ): Promise<EnvironmentDescriptionsMessage> {
    const errMessage = 'ResourceNotReady: Resource is not in the state EnvironmentUpdated';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describeEnvironments(params);
      const field = resp?.Environments?.flatMap(x => x?.Status);
      if (field?.every(x => x === "Ready")) return resp;
      if (field?.every(x => x === "Updating")) continue;
      await new Promise(r => setTimeout(r, 20000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 20 seconds apart (about 7 minutes max wait time). */
  async waitForEnvironmentTerminated(
    params: RequestConfig & DescribeEnvironmentsMessage,
  ): Promise<EnvironmentDescriptionsMessage> {
    const errMessage = 'ResourceNotReady: Resource is not in the state EnvironmentTerminated';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describeEnvironments(params);
      const field = resp?.Environments?.flatMap(x => x?.Status);
      if (field?.every(x => x === "Terminated")) return resp;
      if (field?.every(x => x === "Terminating")) continue;
      await new Promise(r => setTimeout(r, 20000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface AbortEnvironmentUpdateMessage {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
}

// refs: 1 - tags: named, input
export interface ApplyEnvironmentManagedActionRequest {
  EnvironmentName?: string | null;
  EnvironmentId?: string | null;
  ActionId: string;
}

// refs: 1 - tags: named, input
export interface AssociateEnvironmentOperationsRoleMessage {
  EnvironmentName: string;
  OperationsRole: string;
}

// refs: 1 - tags: named, input
export interface CheckDNSAvailabilityMessage {
  CNAMEPrefix: string;
}

// refs: 1 - tags: named, input
export interface ComposeEnvironmentsMessage {
  ApplicationName?: string | null;
  GroupName?: string | null;
  VersionLabels?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CreateApplicationMessage {
  ApplicationName: string;
  Description?: string | null;
  ResourceLifecycleConfig?: ApplicationResourceLifecycleConfig | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateApplicationVersionMessage {
  ApplicationName: string;
  VersionLabel: string;
  Description?: string | null;
  SourceBuildInformation?: SourceBuildInformation | null;
  SourceBundle?: S3Location | null;
  BuildConfiguration?: BuildConfiguration | null;
  AutoCreateApplication?: boolean | null;
  Process?: boolean | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateConfigurationTemplateMessage {
  ApplicationName: string;
  TemplateName: string;
  SolutionStackName?: string | null;
  PlatformArn?: string | null;
  SourceConfiguration?: SourceConfiguration | null;
  EnvironmentId?: string | null;
  Description?: string | null;
  OptionSettings?: ConfigurationOptionSetting[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateEnvironmentMessage {
  ApplicationName: string;
  EnvironmentName?: string | null;
  GroupName?: string | null;
  Description?: string | null;
  CNAMEPrefix?: string | null;
  Tier?: EnvironmentTier | null;
  Tags?: Tag[] | null;
  VersionLabel?: string | null;
  TemplateName?: string | null;
  SolutionStackName?: string | null;
  PlatformArn?: string | null;
  OptionSettings?: ConfigurationOptionSetting[] | null;
  OptionsToRemove?: OptionSpecification[] | null;
  OperationsRole?: string | null;
}

// refs: 1 - tags: named, input
export interface CreatePlatformVersionRequest {
  PlatformName: string;
  PlatformVersion: string;
  PlatformDefinitionBundle: S3Location;
  EnvironmentName?: string | null;
  OptionSettings?: ConfigurationOptionSetting[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationMessage {
  ApplicationName: string;
  TerminateEnvByForce?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationVersionMessage {
  ApplicationName: string;
  VersionLabel: string;
  DeleteSourceBundle?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationTemplateMessage {
  ApplicationName: string;
  TemplateName: string;
}

// refs: 1 - tags: named, input
export interface DeleteEnvironmentConfigurationMessage {
  ApplicationName: string;
  EnvironmentName: string;
}

// refs: 1 - tags: named, input
export interface DeletePlatformVersionRequest {
  PlatformArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeApplicationVersionsMessage {
  ApplicationName?: string | null;
  VersionLabels?: string[] | null;
  MaxRecords?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeApplicationsMessage {
  ApplicationNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationOptionsMessage {
  ApplicationName?: string | null;
  TemplateName?: string | null;
  EnvironmentName?: string | null;
  SolutionStackName?: string | null;
  PlatformArn?: string | null;
  Options?: OptionSpecification[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationSettingsMessage {
  ApplicationName: string;
  TemplateName?: string | null;
  EnvironmentName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentHealthRequest {
  EnvironmentName?: string | null;
  EnvironmentId?: string | null;
  AttributeNames?: EnvironmentHealthAttribute[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentManagedActionHistoryRequest {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
  NextToken?: string | null;
  MaxItems?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentManagedActionsRequest {
  EnvironmentName?: string | null;
  EnvironmentId?: string | null;
  Status?: ActionStatus | null;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentResourcesMessage {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentsMessage {
  ApplicationName?: string | null;
  VersionLabel?: string | null;
  EnvironmentIds?: string[] | null;
  EnvironmentNames?: string[] | null;
  IncludeDeleted?: boolean | null;
  IncludedDeletedBackTo?: Date | number | null;
  MaxRecords?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventsMessage {
  ApplicationName?: string | null;
  VersionLabel?: string | null;
  TemplateName?: string | null;
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
  PlatformArn?: string | null;
  RequestId?: string | null;
  Severity?: EventSeverity | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  MaxRecords?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeInstancesHealthRequest {
  EnvironmentName?: string | null;
  EnvironmentId?: string | null;
  AttributeNames?: InstancesHealthAttribute[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePlatformVersionRequest {
  PlatformArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateEnvironmentOperationsRoleMessage {
  EnvironmentName: string;
}

// refs: 1 - tags: named, input
export interface ListPlatformBranchesRequest {
  Filters?: SearchFilter[] | null;
  MaxRecords?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPlatformVersionsRequest {
  Filters?: PlatformFilter[] | null;
  MaxRecords?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceMessage {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface RebuildEnvironmentMessage {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
}

// refs: 1 - tags: named, input
export interface RequestEnvironmentInfoMessage {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
  InfoType: EnvironmentInfoType;
}

// refs: 1 - tags: named, input
export interface RestartAppServerMessage {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
}

// refs: 1 - tags: named, input
export interface RetrieveEnvironmentInfoMessage {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
  InfoType: EnvironmentInfoType;
}

// refs: 1 - tags: named, input
export interface SwapEnvironmentCNAMEsMessage {
  SourceEnvironmentId?: string | null;
  SourceEnvironmentName?: string | null;
  DestinationEnvironmentId?: string | null;
  DestinationEnvironmentName?: string | null;
}

// refs: 1 - tags: named, input
export interface TerminateEnvironmentMessage {
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
  TerminateResources?: boolean | null;
  ForceTerminate?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateApplicationMessage {
  ApplicationName: string;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateApplicationResourceLifecycleMessage {
  ApplicationName: string;
  ResourceLifecycleConfig: ApplicationResourceLifecycleConfig;
}

// refs: 1 - tags: named, input
export interface UpdateApplicationVersionMessage {
  ApplicationName: string;
  VersionLabel: string;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateConfigurationTemplateMessage {
  ApplicationName: string;
  TemplateName: string;
  Description?: string | null;
  OptionSettings?: ConfigurationOptionSetting[] | null;
  OptionsToRemove?: OptionSpecification[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateEnvironmentMessage {
  ApplicationName?: string | null;
  EnvironmentId?: string | null;
  EnvironmentName?: string | null;
  GroupName?: string | null;
  Description?: string | null;
  Tier?: EnvironmentTier | null;
  VersionLabel?: string | null;
  TemplateName?: string | null;
  SolutionStackName?: string | null;
  PlatformArn?: string | null;
  OptionSettings?: ConfigurationOptionSetting[] | null;
  OptionsToRemove?: OptionSpecification[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateTagsForResourceMessage {
  ResourceArn: string;
  TagsToAdd?: Tag[] | null;
  TagsToRemove?: string[] | null;
}

// refs: 1 - tags: named, input
export interface ValidateConfigurationSettingsMessage {
  ApplicationName: string;
  TemplateName?: string | null;
  EnvironmentName?: string | null;
  OptionSettings: ConfigurationOptionSetting[];
}

// refs: 1 - tags: named, output
export interface ApplyEnvironmentManagedActionResult {
  ActionId?: string | null;
  ActionDescription?: string | null;
  ActionType?: ActionType | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface CheckDNSAvailabilityResultMessage {
  Available?: boolean | null;
  FullyQualifiedCNAME?: string | null;
}

// refs: 1 - tags: named, output
export interface EnvironmentDescriptionsMessage {
  Environments: EnvironmentDescription[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ApplicationDescriptionMessage {
  Application?: ApplicationDescription | null;
}

// refs: 1 - tags: named, output
export interface ApplicationVersionDescriptionMessage {
  ApplicationVersion?: ApplicationVersionDescription | null;
}

// refs: 2 - tags: named, output, interface
export interface ConfigurationSettingsDescription {
  SolutionStackName?: string | null;
  PlatformArn?: string | null;
  ApplicationName?: string | null;
  TemplateName?: string | null;
  Description?: string | null;
  EnvironmentName?: string | null;
  DeploymentStatus?: ConfigurationDeploymentStatus | null;
  DateCreated?: Date | number | null;
  DateUpdated?: Date | number | null;
  OptionSettings: ConfigurationOptionSetting[];
}
function ConfigurationSettingsDescription_Parse(node: xmlP.XmlNode): ConfigurationSettingsDescription {
  return {
    ...node.strings({
      optional: {"SolutionStackName":true,"PlatformArn":true,"ApplicationName":true,"TemplateName":true,"Description":true,"EnvironmentName":true},
    }),
    DeploymentStatus: node.first("DeploymentStatus", false, x => (x.content ?? '') as ConfigurationDeploymentStatus),
    DateCreated: node.first("DateCreated", false, x => xmlP.parseTimestamp(x.content)),
    DateUpdated: node.first("DateUpdated", false, x => xmlP.parseTimestamp(x.content)),
    OptionSettings: node.getList("OptionSettings", "member").map(ConfigurationOptionSetting_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface EnvironmentDescription {
  EnvironmentName?: string | null;
  EnvironmentId?: string | null;
  ApplicationName?: string | null;
  VersionLabel?: string | null;
  SolutionStackName?: string | null;
  PlatformArn?: string | null;
  TemplateName?: string | null;
  Description?: string | null;
  EndpointURL?: string | null;
  CNAME?: string | null;
  DateCreated?: Date | number | null;
  DateUpdated?: Date | number | null;
  Status?: EnvironmentStatus | null;
  AbortableOperationInProgress?: boolean | null;
  Health?: EnvironmentHealth | null;
  HealthStatus?: EnvironmentHealthStatus | null;
  Resources?: EnvironmentResourcesDescription | null;
  Tier?: EnvironmentTier | null;
  EnvironmentLinks: EnvironmentLink[];
  EnvironmentArn?: string | null;
  OperationsRole?: string | null;
}
function EnvironmentDescription_Parse(node: xmlP.XmlNode): EnvironmentDescription {
  return {
    ...node.strings({
      optional: {"EnvironmentName":true,"EnvironmentId":true,"ApplicationName":true,"VersionLabel":true,"SolutionStackName":true,"PlatformArn":true,"TemplateName":true,"Description":true,"EndpointURL":true,"CNAME":true,"EnvironmentArn":true,"OperationsRole":true},
    }),
    DateCreated: node.first("DateCreated", false, x => xmlP.parseTimestamp(x.content)),
    DateUpdated: node.first("DateUpdated", false, x => xmlP.parseTimestamp(x.content)),
    Status: node.first("Status", false, x => (x.content ?? '') as EnvironmentStatus),
    AbortableOperationInProgress: node.first("AbortableOperationInProgress", false, x => x.content === 'true'),
    Health: node.first("Health", false, x => (x.content ?? '') as EnvironmentHealth),
    HealthStatus: node.first("HealthStatus", false, x => (x.content ?? '') as EnvironmentHealthStatus),
    Resources: node.first("Resources", false, EnvironmentResourcesDescription_Parse),
    Tier: node.first("Tier", false, EnvironmentTier_Parse),
    EnvironmentLinks: node.getList("EnvironmentLinks", "member").map(EnvironmentLink_Parse),
  };
}

// refs: 1 - tags: named, output
export interface CreatePlatformVersionResult {
  PlatformSummary?: PlatformSummary | null;
  Builder?: Builder | null;
}

// refs: 1 - tags: named, output
export interface CreateStorageLocationResultMessage {
  S3Bucket?: string | null;
}

// refs: 1 - tags: named, output
export interface DeletePlatformVersionResult {
  PlatformSummary?: PlatformSummary | null;
}

// refs: 1 - tags: named, output
export interface DescribeAccountAttributesResult {
  ResourceQuotas?: ResourceQuotas | null;
}

// refs: 1 - tags: named, output
export interface ApplicationVersionDescriptionsMessage {
  ApplicationVersions: ApplicationVersionDescription[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ApplicationDescriptionsMessage {
  Applications: ApplicationDescription[];
}

// refs: 1 - tags: named, output
export interface ConfigurationOptionsDescription {
  SolutionStackName?: string | null;
  PlatformArn?: string | null;
  Options: ConfigurationOptionDescription[];
}

// refs: 1 - tags: named, output
export interface ConfigurationSettingsDescriptions {
  ConfigurationSettings: ConfigurationSettingsDescription[];
}

// refs: 1 - tags: named, output
export interface DescribeEnvironmentHealthResult {
  EnvironmentName?: string | null;
  HealthStatus?: string | null;
  Status?: EnvironmentHealth | null;
  Color?: string | null;
  Causes: string[];
  ApplicationMetrics?: ApplicationMetrics | null;
  InstancesHealth?: InstanceHealthSummary | null;
  RefreshedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeEnvironmentManagedActionHistoryResult {
  ManagedActionHistoryItems: ManagedActionHistoryItem[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEnvironmentManagedActionsResult {
  ManagedActions: ManagedAction[];
}

// refs: 1 - tags: named, output
export interface EnvironmentResourceDescriptionsMessage {
  EnvironmentResources?: EnvironmentResourceDescription | null;
}

// refs: 1 - tags: named, output
export interface EventDescriptionsMessage {
  Events: EventDescription[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstancesHealthResult {
  InstanceHealthList: SingleInstanceHealth[];
  RefreshedAt?: Date | number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribePlatformVersionResult {
  PlatformDescription?: PlatformDescription | null;
}

// refs: 1 - tags: named, output
export interface ListAvailableSolutionStacksResultMessage {
  SolutionStacks: string[];
  SolutionStackDetails: SolutionStackDescription[];
}

// refs: 1 - tags: named, output
export interface ListPlatformBranchesResult {
  PlatformBranchSummaryList: PlatformBranchSummary[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPlatformVersionsResult {
  PlatformSummaryList: PlatformSummary[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ResourceTagsDescriptionMessage {
  ResourceArn?: string | null;
  ResourceTags: Tag[];
}

// refs: 1 - tags: named, output
export interface RetrieveEnvironmentInfoResultMessage {
  EnvironmentInfo: EnvironmentInfoDescription[];
}

// refs: 1 - tags: named, output
export interface ApplicationResourceLifecycleDescriptionMessage {
  ApplicationName?: string | null;
  ResourceLifecycleConfig?: ApplicationResourceLifecycleConfig | null;
}

// refs: 1 - tags: named, output
export interface ConfigurationSettingsValidationMessages {
  Messages: ValidationMessage[];
}

// refs: 5 - tags: input, named, interface, output
export interface ApplicationResourceLifecycleConfig {
  ServiceRole?: string | null;
  VersionLifecycleConfig?: ApplicationVersionLifecycleConfig | null;
}
function ApplicationResourceLifecycleConfig_Serialize(body: URLSearchParams, prefix: string, params: ApplicationResourceLifecycleConfig) {
    if ("ServiceRole" in params) body.append(prefix+".ServiceRole", (params["ServiceRole"] ?? '').toString());
    if (params["VersionLifecycleConfig"] != null) ApplicationVersionLifecycleConfig_Serialize(body, prefix+".VersionLifecycleConfig", params["VersionLifecycleConfig"]);
}
function ApplicationResourceLifecycleConfig_Parse(node: xmlP.XmlNode): ApplicationResourceLifecycleConfig {
  return {
    ...node.strings({
      optional: {"ServiceRole":true},
    }),
    VersionLifecycleConfig: node.first("VersionLifecycleConfig", false, ApplicationVersionLifecycleConfig_Parse),
  };
}

// refs: 5 - tags: input, named, interface, output
export interface ApplicationVersionLifecycleConfig {
  MaxCountRule?: MaxCountRule | null;
  MaxAgeRule?: MaxAgeRule | null;
}
function ApplicationVersionLifecycleConfig_Serialize(body: URLSearchParams, prefix: string, params: ApplicationVersionLifecycleConfig) {
    if (params["MaxCountRule"] != null) MaxCountRule_Serialize(body, prefix+".MaxCountRule", params["MaxCountRule"]);
    if (params["MaxAgeRule"] != null) MaxAgeRule_Serialize(body, prefix+".MaxAgeRule", params["MaxAgeRule"]);
}
function ApplicationVersionLifecycleConfig_Parse(node: xmlP.XmlNode): ApplicationVersionLifecycleConfig {
  return {
    MaxCountRule: node.first("MaxCountRule", false, MaxCountRule_Parse),
    MaxAgeRule: node.first("MaxAgeRule", false, MaxAgeRule_Parse),
  };
}

// refs: 5 - tags: input, named, interface, output
export interface MaxCountRule {
  Enabled: boolean;
  MaxCount?: number | null;
  DeleteSourceFromS3?: boolean | null;
}
function MaxCountRule_Serialize(body: URLSearchParams, prefix: string, params: MaxCountRule) {
    body.append(prefix+".Enabled", (params["Enabled"] ?? '').toString());
    if ("MaxCount" in params) body.append(prefix+".MaxCount", (params["MaxCount"] ?? '').toString());
    if ("DeleteSourceFromS3" in params) body.append(prefix+".DeleteSourceFromS3", (params["DeleteSourceFromS3"] ?? '').toString());
}
function MaxCountRule_Parse(node: xmlP.XmlNode): MaxCountRule {
  return {
    Enabled: node.first("Enabled", true, x => x.content === 'true'),
    MaxCount: node.first("MaxCount", false, x => parseInt(x.content ?? '0')),
    DeleteSourceFromS3: node.first("DeleteSourceFromS3", false, x => x.content === 'true'),
  };
}

// refs: 5 - tags: input, named, interface, output
export interface MaxAgeRule {
  Enabled: boolean;
  MaxAgeInDays?: number | null;
  DeleteSourceFromS3?: boolean | null;
}
function MaxAgeRule_Serialize(body: URLSearchParams, prefix: string, params: MaxAgeRule) {
    body.append(prefix+".Enabled", (params["Enabled"] ?? '').toString());
    if ("MaxAgeInDays" in params) body.append(prefix+".MaxAgeInDays", (params["MaxAgeInDays"] ?? '').toString());
    if ("DeleteSourceFromS3" in params) body.append(prefix+".DeleteSourceFromS3", (params["DeleteSourceFromS3"] ?? '').toString());
}
function MaxAgeRule_Parse(node: xmlP.XmlNode): MaxAgeRule {
  return {
    Enabled: node.first("Enabled", true, x => x.content === 'true'),
    MaxAgeInDays: node.first("MaxAgeInDays", false, x => parseInt(x.content ?? '0')),
    DeleteSourceFromS3: node.first("DeleteSourceFromS3", false, x => x.content === 'true'),
  };
}

// refs: 7 - tags: input, named, interface, output
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function Tag_Serialize(body: URLSearchParams, prefix: string, params: Tag) {
    if ("Key" in params) body.append(prefix+".Key", (params["Key"] ?? '').toString());
    if ("Value" in params) body.append(prefix+".Value", (params["Value"] ?? '').toString());
}
function Tag_Parse(node: xmlP.XmlNode): Tag {
  return node.strings({
    optional: {"Key":true,"Value":true},
  });
}

// refs: 3 - tags: input, named, interface, output
export interface SourceBuildInformation {
  SourceType: SourceType;
  SourceRepository: SourceRepository;
  SourceLocation: string;
}
function SourceBuildInformation_Serialize(body: URLSearchParams, prefix: string, params: SourceBuildInformation) {
    body.append(prefix+".SourceType", (params["SourceType"] ?? '').toString());
    body.append(prefix+".SourceRepository", (params["SourceRepository"] ?? '').toString());
    body.append(prefix+".SourceLocation", (params["SourceLocation"] ?? '').toString());
}
function SourceBuildInformation_Parse(node: xmlP.XmlNode): SourceBuildInformation {
  return {
    ...node.strings({
      required: {"SourceLocation":true},
    }),
    SourceType: node.first("SourceType", true, x => (x.content ?? '') as SourceType),
    SourceRepository: node.first("SourceRepository", true, x => (x.content ?? '') as SourceRepository),
  };
}

// refs: 3 - tags: input, named, enum, output
export type SourceType =
| "Git"
| "Zip"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type SourceRepository =
| "CodeCommit"
| "S3"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface S3Location {
  S3Bucket?: string | null;
  S3Key?: string | null;
}
function S3Location_Serialize(body: URLSearchParams, prefix: string, params: S3Location) {
    if ("S3Bucket" in params) body.append(prefix+".S3Bucket", (params["S3Bucket"] ?? '').toString());
    if ("S3Key" in params) body.append(prefix+".S3Key", (params["S3Key"] ?? '').toString());
}
function S3Location_Parse(node: xmlP.XmlNode): S3Location {
  return node.strings({
    optional: {"S3Bucket":true,"S3Key":true},
  });
}

// refs: 1 - tags: input, named, interface
export interface BuildConfiguration {
  ArtifactName?: string | null;
  CodeBuildServiceRole: string;
  ComputeType?: ComputeType | null;
  Image: string;
  TimeoutInMinutes?: number | null;
}
function BuildConfiguration_Serialize(body: URLSearchParams, prefix: string, params: BuildConfiguration) {
    if ("ArtifactName" in params) body.append(prefix+".ArtifactName", (params["ArtifactName"] ?? '').toString());
    body.append(prefix+".CodeBuildServiceRole", (params["CodeBuildServiceRole"] ?? '').toString());
    if ("ComputeType" in params) body.append(prefix+".ComputeType", (params["ComputeType"] ?? '').toString());
    body.append(prefix+".Image", (params["Image"] ?? '').toString());
    if ("TimeoutInMinutes" in params) body.append(prefix+".TimeoutInMinutes", (params["TimeoutInMinutes"] ?? '').toString());
}

// refs: 1 - tags: input, named, enum
export type ComputeType =
| "BUILD_GENERAL1_SMALL"
| "BUILD_GENERAL1_MEDIUM"
| "BUILD_GENERAL1_LARGE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SourceConfiguration {
  ApplicationName?: string | null;
  TemplateName?: string | null;
}
function SourceConfiguration_Serialize(body: URLSearchParams, prefix: string, params: SourceConfiguration) {
    if ("ApplicationName" in params) body.append(prefix+".ApplicationName", (params["ApplicationName"] ?? '').toString());
    if ("TemplateName" in params) body.append(prefix+".TemplateName", (params["TemplateName"] ?? '').toString());
}

// refs: 8 - tags: input, named, interface, output
export interface ConfigurationOptionSetting {
  ResourceName?: string | null;
  Namespace?: string | null;
  OptionName?: string | null;
  Value?: string | null;
}
function ConfigurationOptionSetting_Serialize(body: URLSearchParams, prefix: string, params: ConfigurationOptionSetting) {
    if ("ResourceName" in params) body.append(prefix+".ResourceName", (params["ResourceName"] ?? '').toString());
    if ("Namespace" in params) body.append(prefix+".Namespace", (params["Namespace"] ?? '').toString());
    if ("OptionName" in params) body.append(prefix+".OptionName", (params["OptionName"] ?? '').toString());
    if ("Value" in params) body.append(prefix+".Value", (params["Value"] ?? '').toString());
}
function ConfigurationOptionSetting_Parse(node: xmlP.XmlNode): ConfigurationOptionSetting {
  return node.strings({
    optional: {"ResourceName":true,"Namespace":true,"OptionName":true,"Value":true},
  });
}

// refs: 4 - tags: input, named, interface, output
export interface EnvironmentTier {
  Name?: string | null;
  Type?: string | null;
  Version?: string | null;
}
function EnvironmentTier_Serialize(body: URLSearchParams, prefix: string, params: EnvironmentTier) {
    if ("Name" in params) body.append(prefix+".Name", (params["Name"] ?? '').toString());
    if ("Type" in params) body.append(prefix+".Type", (params["Type"] ?? '').toString());
    if ("Version" in params) body.append(prefix+".Version", (params["Version"] ?? '').toString());
}
function EnvironmentTier_Parse(node: xmlP.XmlNode): EnvironmentTier {
  return node.strings({
    optional: {"Name":true,"Type":true,"Version":true},
  });
}

// refs: 4 - tags: input, named, interface
export interface OptionSpecification {
  ResourceName?: string | null;
  Namespace?: string | null;
  OptionName?: string | null;
}
function OptionSpecification_Serialize(body: URLSearchParams, prefix: string, params: OptionSpecification) {
    if ("ResourceName" in params) body.append(prefix+".ResourceName", (params["ResourceName"] ?? '').toString());
    if ("Namespace" in params) body.append(prefix+".Namespace", (params["Namespace"] ?? '').toString());
    if ("OptionName" in params) body.append(prefix+".OptionName", (params["OptionName"] ?? '').toString());
}

// refs: 1 - tags: input, named, enum
export type EnvironmentHealthAttribute =
| "Status"
| "Color"
| "Causes"
| "ApplicationMetrics"
| "InstancesHealth"
| "All"
| "HealthStatus"
| "RefreshedAt"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ActionStatus =
| "Scheduled"
| "Pending"
| "Running"
| "Unknown"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type EventSeverity =
| "TRACE"
| "DEBUG"
| "INFO"
| "WARN"
| "ERROR"
| "FATAL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type InstancesHealthAttribute =
| "HealthStatus"
| "Color"
| "Causes"
| "ApplicationMetrics"
| "RefreshedAt"
| "LaunchedAt"
| "System"
| "Deployment"
| "AvailabilityZone"
| "InstanceType"
| "All"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SearchFilter {
  Attribute?: string | null;
  Operator?: string | null;
  Values?: string[] | null;
}
function SearchFilter_Serialize(body: URLSearchParams, prefix: string, params: SearchFilter) {
    if ("Attribute" in params) body.append(prefix+".Attribute", (params["Attribute"] ?? '').toString());
    if ("Operator" in params) body.append(prefix+".Operator", (params["Operator"] ?? '').toString());
    if (params["Values"]) qsP.appendList(body, prefix+".Values", params["Values"], {"entryPrefix":".member."})
}

// refs: 1 - tags: input, named, interface
export interface PlatformFilter {
  Type?: string | null;
  Operator?: string | null;
  Values?: string[] | null;
}
function PlatformFilter_Serialize(body: URLSearchParams, prefix: string, params: PlatformFilter) {
    if ("Type" in params) body.append(prefix+".Type", (params["Type"] ?? '').toString());
    if ("Operator" in params) body.append(prefix+".Operator", (params["Operator"] ?? '').toString());
    if (params["Values"]) qsP.appendList(body, prefix+".Values", params["Values"], {"entryPrefix":".member."})
}

// refs: 3 - tags: input, named, enum, output
export type EnvironmentInfoType =
| "tail"
| "bundle"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type ActionType =
| "InstanceRefresh"
| "PlatformUpdate"
| "Unknown"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type EnvironmentStatus =
| "Aborting"
| "Launching"
| "Updating"
| "LinkingFrom"
| "LinkingTo"
| "Ready"
| "Terminating"
| "Terminated"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type EnvironmentHealth =
| "Green"
| "Yellow"
| "Red"
| "Grey"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type EnvironmentHealthStatus =
| "NoData"
| "Unknown"
| "Pending"
| "Ok"
| "Info"
| "Warning"
| "Degraded"
| "Severe"
| "Suspended"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface EnvironmentResourcesDescription {
  LoadBalancer?: LoadBalancerDescription | null;
}
function EnvironmentResourcesDescription_Parse(node: xmlP.XmlNode): EnvironmentResourcesDescription {
  return {
    LoadBalancer: node.first("LoadBalancer", false, LoadBalancerDescription_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface LoadBalancerDescription {
  LoadBalancerName?: string | null;
  Domain?: string | null;
  Listeners: Listener[];
}
function LoadBalancerDescription_Parse(node: xmlP.XmlNode): LoadBalancerDescription {
  return {
    ...node.strings({
      optional: {"LoadBalancerName":true,"Domain":true},
    }),
    Listeners: node.getList("Listeners", "member").map(Listener_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface Listener {
  Protocol?: string | null;
  Port?: number | null;
}
function Listener_Parse(node: xmlP.XmlNode): Listener {
  return {
    ...node.strings({
      optional: {"Protocol":true},
    }),
    Port: node.first("Port", false, x => parseInt(x.content ?? '0')),
  };
}

// refs: 2 - tags: output, named, interface
export interface EnvironmentLink {
  LinkName?: string | null;
  EnvironmentName?: string | null;
}
function EnvironmentLink_Parse(node: xmlP.XmlNode): EnvironmentLink {
  return node.strings({
    optional: {"LinkName":true,"EnvironmentName":true},
  });
}

// refs: 2 - tags: output, named, interface
export interface ApplicationDescription {
  ApplicationArn?: string | null;
  ApplicationName?: string | null;
  Description?: string | null;
  DateCreated?: Date | number | null;
  DateUpdated?: Date | number | null;
  Versions: string[];
  ConfigurationTemplates: string[];
  ResourceLifecycleConfig?: ApplicationResourceLifecycleConfig | null;
}
function ApplicationDescription_Parse(node: xmlP.XmlNode): ApplicationDescription {
  return {
    ...node.strings({
      optional: {"ApplicationArn":true,"ApplicationName":true,"Description":true},
    }),
    DateCreated: node.first("DateCreated", false, x => xmlP.parseTimestamp(x.content)),
    DateUpdated: node.first("DateUpdated", false, x => xmlP.parseTimestamp(x.content)),
    Versions: node.getList("Versions", "member").map(x => x.content ?? ''),
    ConfigurationTemplates: node.getList("ConfigurationTemplates", "member").map(x => x.content ?? ''),
    ResourceLifecycleConfig: node.first("ResourceLifecycleConfig", false, ApplicationResourceLifecycleConfig_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface ApplicationVersionDescription {
  ApplicationVersionArn?: string | null;
  ApplicationName?: string | null;
  Description?: string | null;
  VersionLabel?: string | null;
  SourceBuildInformation?: SourceBuildInformation | null;
  BuildArn?: string | null;
  SourceBundle?: S3Location | null;
  DateCreated?: Date | number | null;
  DateUpdated?: Date | number | null;
  Status?: ApplicationVersionStatus | null;
}
function ApplicationVersionDescription_Parse(node: xmlP.XmlNode): ApplicationVersionDescription {
  return {
    ...node.strings({
      optional: {"ApplicationVersionArn":true,"ApplicationName":true,"Description":true,"VersionLabel":true,"BuildArn":true},
    }),
    SourceBuildInformation: node.first("SourceBuildInformation", false, SourceBuildInformation_Parse),
    SourceBundle: node.first("SourceBundle", false, S3Location_Parse),
    DateCreated: node.first("DateCreated", false, x => xmlP.parseTimestamp(x.content)),
    DateUpdated: node.first("DateUpdated", false, x => xmlP.parseTimestamp(x.content)),
    Status: node.first("Status", false, x => (x.content ?? '') as ApplicationVersionStatus),
  };
}

// refs: 2 - tags: output, named, enum
export type ApplicationVersionStatus =
| "Processed"
| "Unprocessed"
| "Failed"
| "Processing"
| "Building"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type ConfigurationDeploymentStatus =
| "deployed"
| "pending"
| "failed"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface PlatformSummary {
  PlatformArn?: string | null;
  PlatformOwner?: string | null;
  PlatformStatus?: PlatformStatus | null;
  PlatformCategory?: string | null;
  OperatingSystemName?: string | null;
  OperatingSystemVersion?: string | null;
  SupportedTierList: string[];
  SupportedAddonList: string[];
  PlatformLifecycleState?: string | null;
  PlatformVersion?: string | null;
  PlatformBranchName?: string | null;
  PlatformBranchLifecycleState?: string | null;
}
function PlatformSummary_Parse(node: xmlP.XmlNode): PlatformSummary {
  return {
    ...node.strings({
      optional: {"PlatformArn":true,"PlatformOwner":true,"PlatformCategory":true,"OperatingSystemName":true,"OperatingSystemVersion":true,"PlatformLifecycleState":true,"PlatformVersion":true,"PlatformBranchName":true,"PlatformBranchLifecycleState":true},
    }),
    PlatformStatus: node.first("PlatformStatus", false, x => (x.content ?? '') as PlatformStatus),
    SupportedTierList: node.getList("SupportedTierList", "member").map(x => x.content ?? ''),
    SupportedAddonList: node.getList("SupportedAddonList", "member").map(x => x.content ?? ''),
  };
}

// refs: 4 - tags: output, named, enum
export type PlatformStatus =
| "Creating"
| "Failed"
| "Ready"
| "Deleting"
| "Deleted"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Builder {
  ARN?: string | null;
}
function Builder_Parse(node: xmlP.XmlNode): Builder {
  return node.strings({
    optional: {"ARN":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface ResourceQuotas {
  ApplicationQuota?: ResourceQuota | null;
  ApplicationVersionQuota?: ResourceQuota | null;
  EnvironmentQuota?: ResourceQuota | null;
  ConfigurationTemplateQuota?: ResourceQuota | null;
  CustomPlatformQuota?: ResourceQuota | null;
}
function ResourceQuotas_Parse(node: xmlP.XmlNode): ResourceQuotas {
  return {
    ApplicationQuota: node.first("ApplicationQuota", false, ResourceQuota_Parse),
    ApplicationVersionQuota: node.first("ApplicationVersionQuota", false, ResourceQuota_Parse),
    EnvironmentQuota: node.first("EnvironmentQuota", false, ResourceQuota_Parse),
    ConfigurationTemplateQuota: node.first("ConfigurationTemplateQuota", false, ResourceQuota_Parse),
    CustomPlatformQuota: node.first("CustomPlatformQuota", false, ResourceQuota_Parse),
  };
}

// refs: 5 - tags: output, named, interface
export interface ResourceQuota {
  Maximum?: number | null;
}
function ResourceQuota_Parse(node: xmlP.XmlNode): ResourceQuota {
  return {
    Maximum: node.first("Maximum", false, x => parseInt(x.content ?? '0')),
  };
}

// refs: 1 - tags: output, named, interface
export interface ConfigurationOptionDescription {
  Namespace?: string | null;
  Name?: string | null;
  DefaultValue?: string | null;
  ChangeSeverity?: string | null;
  UserDefined?: boolean | null;
  ValueType?: ConfigurationOptionValueType | null;
  ValueOptions: string[];
  MinValue?: number | null;
  MaxValue?: number | null;
  MaxLength?: number | null;
  Regex?: OptionRestrictionRegex | null;
}
function ConfigurationOptionDescription_Parse(node: xmlP.XmlNode): ConfigurationOptionDescription {
  return {
    ...node.strings({
      optional: {"Namespace":true,"Name":true,"DefaultValue":true,"ChangeSeverity":true},
    }),
    UserDefined: node.first("UserDefined", false, x => x.content === 'true'),
    ValueType: node.first("ValueType", false, x => (x.content ?? '') as ConfigurationOptionValueType),
    ValueOptions: node.getList("ValueOptions", "member").map(x => x.content ?? ''),
    MinValue: node.first("MinValue", false, x => parseInt(x.content ?? '0')),
    MaxValue: node.first("MaxValue", false, x => parseInt(x.content ?? '0')),
    MaxLength: node.first("MaxLength", false, x => parseInt(x.content ?? '0')),
    Regex: node.first("Regex", false, OptionRestrictionRegex_Parse),
  };
}

// refs: 1 - tags: output, named, enum
export type ConfigurationOptionValueType =
| "Scalar"
| "List"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface OptionRestrictionRegex {
  Pattern?: string | null;
  Label?: string | null;
}
function OptionRestrictionRegex_Parse(node: xmlP.XmlNode): OptionRestrictionRegex {
  return node.strings({
    optional: {"Pattern":true,"Label":true},
  });
}

// refs: 2 - tags: output, named, interface
export interface ApplicationMetrics {
  Duration?: number | null;
  RequestCount?: number | null;
  StatusCodes?: StatusCodes | null;
  Latency?: Latency | null;
}
function ApplicationMetrics_Parse(node: xmlP.XmlNode): ApplicationMetrics {
  return {
    Duration: node.first("Duration", false, x => parseInt(x.content ?? '0')),
    RequestCount: node.first("RequestCount", false, x => parseInt(x.content ?? '0')),
    StatusCodes: node.first("StatusCodes", false, StatusCodes_Parse),
    Latency: node.first("Latency", false, Latency_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface StatusCodes {
  Status2xx?: number | null;
  Status3xx?: number | null;
  Status4xx?: number | null;
  Status5xx?: number | null;
}
function StatusCodes_Parse(node: xmlP.XmlNode): StatusCodes {
  return {
    Status2xx: node.first("Status2xx", false, x => parseInt(x.content ?? '0')),
    Status3xx: node.first("Status3xx", false, x => parseInt(x.content ?? '0')),
    Status4xx: node.first("Status4xx", false, x => parseInt(x.content ?? '0')),
    Status5xx: node.first("Status5xx", false, x => parseInt(x.content ?? '0')),
  };
}

// refs: 2 - tags: output, named, interface
export interface Latency {
  P999?: number | null;
  P99?: number | null;
  P95?: number | null;
  P90?: number | null;
  P85?: number | null;
  P75?: number | null;
  P50?: number | null;
  P10?: number | null;
}
function Latency_Parse(node: xmlP.XmlNode): Latency {
  return {
    P999: node.first("P999", false, x => parseFloat(x.content ?? '0')),
    P99: node.first("P99", false, x => parseFloat(x.content ?? '0')),
    P95: node.first("P95", false, x => parseFloat(x.content ?? '0')),
    P90: node.first("P90", false, x => parseFloat(x.content ?? '0')),
    P85: node.first("P85", false, x => parseFloat(x.content ?? '0')),
    P75: node.first("P75", false, x => parseFloat(x.content ?? '0')),
    P50: node.first("P50", false, x => parseFloat(x.content ?? '0')),
    P10: node.first("P10", false, x => parseFloat(x.content ?? '0')),
  };
}

// refs: 1 - tags: output, named, interface
export interface InstanceHealthSummary {
  NoData?: number | null;
  Unknown?: number | null;
  Pending?: number | null;
  Ok?: number | null;
  Info?: number | null;
  Warning?: number | null;
  Degraded?: number | null;
  Severe?: number | null;
}
function InstanceHealthSummary_Parse(node: xmlP.XmlNode): InstanceHealthSummary {
  return {
    NoData: node.first("NoData", false, x => parseInt(x.content ?? '0')),
    Unknown: node.first("Unknown", false, x => parseInt(x.content ?? '0')),
    Pending: node.first("Pending", false, x => parseInt(x.content ?? '0')),
    Ok: node.first("Ok", false, x => parseInt(x.content ?? '0')),
    Info: node.first("Info", false, x => parseInt(x.content ?? '0')),
    Warning: node.first("Warning", false, x => parseInt(x.content ?? '0')),
    Degraded: node.first("Degraded", false, x => parseInt(x.content ?? '0')),
    Severe: node.first("Severe", false, x => parseInt(x.content ?? '0')),
  };
}

// refs: 1 - tags: output, named, interface
export interface ManagedActionHistoryItem {
  ActionId?: string | null;
  ActionType?: ActionType | null;
  ActionDescription?: string | null;
  FailureType?: FailureType | null;
  Status?: ActionHistoryStatus | null;
  FailureDescription?: string | null;
  ExecutedTime?: Date | number | null;
  FinishedTime?: Date | number | null;
}
function ManagedActionHistoryItem_Parse(node: xmlP.XmlNode): ManagedActionHistoryItem {
  return {
    ...node.strings({
      optional: {"ActionId":true,"ActionDescription":true,"FailureDescription":true},
    }),
    ActionType: node.first("ActionType", false, x => (x.content ?? '') as ActionType),
    FailureType: node.first("FailureType", false, x => (x.content ?? '') as FailureType),
    Status: node.first("Status", false, x => (x.content ?? '') as ActionHistoryStatus),
    ExecutedTime: node.first("ExecutedTime", false, x => xmlP.parseTimestamp(x.content)),
    FinishedTime: node.first("FinishedTime", false, x => xmlP.parseTimestamp(x.content)),
  };
}

// refs: 1 - tags: output, named, enum
export type FailureType =
| "UpdateCancelled"
| "CancellationFailed"
| "RollbackFailed"
| "RollbackSuccessful"
| "InternalFailure"
| "InvalidEnvironmentState"
| "PermissionsError"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type ActionHistoryStatus =
| "Completed"
| "Failed"
| "Unknown"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ManagedAction {
  ActionId?: string | null;
  ActionDescription?: string | null;
  ActionType?: ActionType | null;
  Status?: ActionStatus | null;
  WindowStartTime?: Date | number | null;
}
function ManagedAction_Parse(node: xmlP.XmlNode): ManagedAction {
  return {
    ...node.strings({
      optional: {"ActionId":true,"ActionDescription":true},
    }),
    ActionType: node.first("ActionType", false, x => (x.content ?? '') as ActionType),
    Status: node.first("Status", false, x => (x.content ?? '') as ActionStatus),
    WindowStartTime: node.first("WindowStartTime", false, x => xmlP.parseTimestamp(x.content)),
  };
}

// refs: 1 - tags: output, named, interface
export interface EnvironmentResourceDescription {
  EnvironmentName?: string | null;
  AutoScalingGroups: AutoScalingGroup[];
  Instances: Instance[];
  LaunchConfigurations: LaunchConfiguration[];
  LaunchTemplates: LaunchTemplate[];
  LoadBalancers: LoadBalancer[];
  Triggers: Trigger[];
  Queues: Queue[];
}
function EnvironmentResourceDescription_Parse(node: xmlP.XmlNode): EnvironmentResourceDescription {
  return {
    ...node.strings({
      optional: {"EnvironmentName":true},
    }),
    AutoScalingGroups: node.getList("AutoScalingGroups", "member").map(AutoScalingGroup_Parse),
    Instances: node.getList("Instances", "member").map(Instance_Parse),
    LaunchConfigurations: node.getList("LaunchConfigurations", "member").map(LaunchConfiguration_Parse),
    LaunchTemplates: node.getList("LaunchTemplates", "member").map(LaunchTemplate_Parse),
    LoadBalancers: node.getList("LoadBalancers", "member").map(LoadBalancer_Parse),
    Triggers: node.getList("Triggers", "member").map(Trigger_Parse),
    Queues: node.getList("Queues", "member").map(Queue_Parse),
  };
}

// refs: 1 - tags: output, named, interface
export interface AutoScalingGroup {
  Name?: string | null;
}
function AutoScalingGroup_Parse(node: xmlP.XmlNode): AutoScalingGroup {
  return node.strings({
    optional: {"Name":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface Instance {
  Id?: string | null;
}
function Instance_Parse(node: xmlP.XmlNode): Instance {
  return node.strings({
    optional: {"Id":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface LaunchConfiguration {
  Name?: string | null;
}
function LaunchConfiguration_Parse(node: xmlP.XmlNode): LaunchConfiguration {
  return node.strings({
    optional: {"Name":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface LaunchTemplate {
  Id?: string | null;
}
function LaunchTemplate_Parse(node: xmlP.XmlNode): LaunchTemplate {
  return node.strings({
    optional: {"Id":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface LoadBalancer {
  Name?: string | null;
}
function LoadBalancer_Parse(node: xmlP.XmlNode): LoadBalancer {
  return node.strings({
    optional: {"Name":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface Trigger {
  Name?: string | null;
}
function Trigger_Parse(node: xmlP.XmlNode): Trigger {
  return node.strings({
    optional: {"Name":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface Queue {
  Name?: string | null;
  URL?: string | null;
}
function Queue_Parse(node: xmlP.XmlNode): Queue {
  return node.strings({
    optional: {"Name":true,"URL":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface EventDescription {
  EventDate?: Date | number | null;
  Message?: string | null;
  ApplicationName?: string | null;
  VersionLabel?: string | null;
  TemplateName?: string | null;
  EnvironmentName?: string | null;
  PlatformArn?: string | null;
  RequestId?: string | null;
  Severity?: EventSeverity | null;
}
function EventDescription_Parse(node: xmlP.XmlNode): EventDescription {
  return {
    ...node.strings({
      optional: {"Message":true,"ApplicationName":true,"VersionLabel":true,"TemplateName":true,"EnvironmentName":true,"PlatformArn":true,"RequestId":true},
    }),
    EventDate: node.first("EventDate", false, x => xmlP.parseTimestamp(x.content)),
    Severity: node.first("Severity", false, x => (x.content ?? '') as EventSeverity),
  };
}

// refs: 1 - tags: output, named, interface
export interface SingleInstanceHealth {
  InstanceId?: string | null;
  HealthStatus?: string | null;
  Color?: string | null;
  Causes: string[];
  LaunchedAt?: Date | number | null;
  ApplicationMetrics?: ApplicationMetrics | null;
  System?: SystemStatus | null;
  Deployment?: Deployment | null;
  AvailabilityZone?: string | null;
  InstanceType?: string | null;
}
function SingleInstanceHealth_Parse(node: xmlP.XmlNode): SingleInstanceHealth {
  return {
    ...node.strings({
      optional: {"InstanceId":true,"HealthStatus":true,"Color":true,"AvailabilityZone":true,"InstanceType":true},
    }),
    Causes: node.getList("Causes", "member").map(x => x.content ?? ''),
    LaunchedAt: node.first("LaunchedAt", false, x => xmlP.parseTimestamp(x.content)),
    ApplicationMetrics: node.first("ApplicationMetrics", false, ApplicationMetrics_Parse),
    System: node.first("System", false, SystemStatus_Parse),
    Deployment: node.first("Deployment", false, Deployment_Parse),
  };
}

// refs: 1 - tags: output, named, interface
export interface SystemStatus {
  CPUUtilization?: CPUUtilization | null;
  LoadAverage: number[];
}
function SystemStatus_Parse(node: xmlP.XmlNode): SystemStatus {
  return {
    CPUUtilization: node.first("CPUUtilization", false, CPUUtilization_Parse),
    LoadAverage: node.getList("LoadAverage", "member").map(x => parseFloat(x.content ?? '0')),
  };
}

// refs: 1 - tags: output, named, interface
export interface CPUUtilization {
  User?: number | null;
  Nice?: number | null;
  System?: number | null;
  Idle?: number | null;
  IOWait?: number | null;
  IRQ?: number | null;
  SoftIRQ?: number | null;
  Privileged?: number | null;
}
function CPUUtilization_Parse(node: xmlP.XmlNode): CPUUtilization {
  return {
    User: node.first("User", false, x => parseFloat(x.content ?? '0')),
    Nice: node.first("Nice", false, x => parseFloat(x.content ?? '0')),
    System: node.first("System", false, x => parseFloat(x.content ?? '0')),
    Idle: node.first("Idle", false, x => parseFloat(x.content ?? '0')),
    IOWait: node.first("IOWait", false, x => parseFloat(x.content ?? '0')),
    IRQ: node.first("IRQ", false, x => parseFloat(x.content ?? '0')),
    SoftIRQ: node.first("SoftIRQ", false, x => parseFloat(x.content ?? '0')),
    Privileged: node.first("Privileged", false, x => parseFloat(x.content ?? '0')),
  };
}

// refs: 1 - tags: output, named, interface
export interface Deployment {
  VersionLabel?: string | null;
  DeploymentId?: number | null;
  Status?: string | null;
  DeploymentTime?: Date | number | null;
}
function Deployment_Parse(node: xmlP.XmlNode): Deployment {
  return {
    ...node.strings({
      optional: {"VersionLabel":true,"Status":true},
    }),
    DeploymentId: node.first("DeploymentId", false, x => parseInt(x.content ?? '0')),
    DeploymentTime: node.first("DeploymentTime", false, x => xmlP.parseTimestamp(x.content)),
  };
}

// refs: 1 - tags: output, named, interface
export interface PlatformDescription {
  PlatformArn?: string | null;
  PlatformOwner?: string | null;
  PlatformName?: string | null;
  PlatformVersion?: string | null;
  SolutionStackName?: string | null;
  PlatformStatus?: PlatformStatus | null;
  DateCreated?: Date | number | null;
  DateUpdated?: Date | number | null;
  PlatformCategory?: string | null;
  Description?: string | null;
  Maintainer?: string | null;
  OperatingSystemName?: string | null;
  OperatingSystemVersion?: string | null;
  ProgrammingLanguages: PlatformProgrammingLanguage[];
  Frameworks: PlatformFramework[];
  CustomAmiList: CustomAmi[];
  SupportedTierList: string[];
  SupportedAddonList: string[];
  PlatformLifecycleState?: string | null;
  PlatformBranchName?: string | null;
  PlatformBranchLifecycleState?: string | null;
}
function PlatformDescription_Parse(node: xmlP.XmlNode): PlatformDescription {
  return {
    ...node.strings({
      optional: {"PlatformArn":true,"PlatformOwner":true,"PlatformName":true,"PlatformVersion":true,"SolutionStackName":true,"PlatformCategory":true,"Description":true,"Maintainer":true,"OperatingSystemName":true,"OperatingSystemVersion":true,"PlatformLifecycleState":true,"PlatformBranchName":true,"PlatformBranchLifecycleState":true},
    }),
    PlatformStatus: node.first("PlatformStatus", false, x => (x.content ?? '') as PlatformStatus),
    DateCreated: node.first("DateCreated", false, x => xmlP.parseTimestamp(x.content)),
    DateUpdated: node.first("DateUpdated", false, x => xmlP.parseTimestamp(x.content)),
    ProgrammingLanguages: node.getList("ProgrammingLanguages", "member").map(PlatformProgrammingLanguage_Parse),
    Frameworks: node.getList("Frameworks", "member").map(PlatformFramework_Parse),
    CustomAmiList: node.getList("CustomAmiList", "member").map(CustomAmi_Parse),
    SupportedTierList: node.getList("SupportedTierList", "member").map(x => x.content ?? ''),
    SupportedAddonList: node.getList("SupportedAddonList", "member").map(x => x.content ?? ''),
  };
}

// refs: 1 - tags: output, named, interface
export interface PlatformProgrammingLanguage {
  Name?: string | null;
  Version?: string | null;
}
function PlatformProgrammingLanguage_Parse(node: xmlP.XmlNode): PlatformProgrammingLanguage {
  return node.strings({
    optional: {"Name":true,"Version":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface PlatformFramework {
  Name?: string | null;
  Version?: string | null;
}
function PlatformFramework_Parse(node: xmlP.XmlNode): PlatformFramework {
  return node.strings({
    optional: {"Name":true,"Version":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface CustomAmi {
  VirtualizationType?: string | null;
  ImageId?: string | null;
}
function CustomAmi_Parse(node: xmlP.XmlNode): CustomAmi {
  return node.strings({
    optional: {"VirtualizationType":true,"ImageId":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface SolutionStackDescription {
  SolutionStackName?: string | null;
  PermittedFileTypes: string[];
}
function SolutionStackDescription_Parse(node: xmlP.XmlNode): SolutionStackDescription {
  return {
    ...node.strings({
      optional: {"SolutionStackName":true},
    }),
    PermittedFileTypes: node.getList("PermittedFileTypes", "member").map(x => x.content ?? ''),
  };
}

// refs: 1 - tags: output, named, interface
export interface PlatformBranchSummary {
  PlatformName?: string | null;
  BranchName?: string | null;
  LifecycleState?: string | null;
  BranchOrder?: number | null;
  SupportedTierList: string[];
}
function PlatformBranchSummary_Parse(node: xmlP.XmlNode): PlatformBranchSummary {
  return {
    ...node.strings({
      optional: {"PlatformName":true,"BranchName":true,"LifecycleState":true},
    }),
    BranchOrder: node.first("BranchOrder", false, x => parseInt(x.content ?? '0')),
    SupportedTierList: node.getList("SupportedTierList", "member").map(x => x.content ?? ''),
  };
}

// refs: 1 - tags: output, named, interface
export interface EnvironmentInfoDescription {
  InfoType?: EnvironmentInfoType | null;
  Ec2InstanceId?: string | null;
  SampleTimestamp?: Date | number | null;
  Message?: string | null;
}
function EnvironmentInfoDescription_Parse(node: xmlP.XmlNode): EnvironmentInfoDescription {
  return {
    ...node.strings({
      optional: {"Ec2InstanceId":true,"Message":true},
    }),
    InfoType: node.first("InfoType", false, x => (x.content ?? '') as EnvironmentInfoType),
    SampleTimestamp: node.first("SampleTimestamp", false, x => xmlP.parseTimestamp(x.content)),
  };
}

// refs: 1 - tags: output, named, interface
export interface ValidationMessage {
  Message?: string | null;
  Severity?: ValidationSeverity | null;
  Namespace?: string | null;
  OptionName?: string | null;
}
function ValidationMessage_Parse(node: xmlP.XmlNode): ValidationMessage {
  return {
    ...node.strings({
      optional: {"Message":true,"Namespace":true,"OptionName":true},
    }),
    Severity: node.first("Severity", false, x => (x.content ?? '') as ValidationSeverity),
  };
}

// refs: 1 - tags: output, named, enum
export type ValidationSeverity =
| "error"
| "warning"
| cmnP.UnexpectedEnumValue;
