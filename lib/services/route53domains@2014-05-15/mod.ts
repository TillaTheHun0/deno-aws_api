// Autogenerated API client for: Amazon Route 53 Domains

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Route53Domains {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Route53Domains.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-05-15",
    "endpointPrefix": "route53domains",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Route 53 Domains",
    "serviceId": "Route 53 Domains",
    "signatureVersion": "v4",
    "targetPrefix": "Route53Domains_v20140515",
    "uid": "route53domains-2014-05-15"
  };

  async acceptDomainTransferFromAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & AcceptDomainTransferFromAnotherAwsAccountRequest,
  ): Promise<AcceptDomainTransferFromAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      Password: params["Password"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptDomainTransferFromAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
      },
    }, await resp.json());
  }

  async cancelDomainTransferToAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & CancelDomainTransferToAnotherAwsAccountRequest,
  ): Promise<CancelDomainTransferToAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelDomainTransferToAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
      },
    }, await resp.json());
  }

  async checkDomainAvailability(
    {abortSignal, ...params}: RequestConfig & CheckDomainAvailabilityRequest,
  ): Promise<CheckDomainAvailabilityResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      IdnLangCode: params["IdnLangCode"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckDomainAvailability",
    });
    return jsonP.readObj({
      required: {
        "Availability": (x: jsonP.JSONValue) => cmnP.readEnum<DomainAvailability>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async checkDomainTransferability(
    {abortSignal, ...params}: RequestConfig & CheckDomainTransferabilityRequest,
  ): Promise<CheckDomainTransferabilityResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      AuthCode: params["AuthCode"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckDomainTransferability",
    });
    return jsonP.readObj({
      required: {
        "Transferability": toDomainTransferability,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteTagsForDomain(
    {abortSignal, ...params}: RequestConfig & DeleteTagsForDomainRequest,
  ): Promise<DeleteTagsForDomainResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      TagsToDelete: params["TagsToDelete"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTagsForDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disableDomainAutoRenew(
    {abortSignal, ...params}: RequestConfig & DisableDomainAutoRenewRequest,
  ): Promise<DisableDomainAutoRenewResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableDomainAutoRenew",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disableDomainTransferLock(
    {abortSignal, ...params}: RequestConfig & DisableDomainTransferLockRequest,
  ): Promise<DisableDomainTransferLockResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableDomainTransferLock",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async enableDomainAutoRenew(
    {abortSignal, ...params}: RequestConfig & EnableDomainAutoRenewRequest,
  ): Promise<EnableDomainAutoRenewResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableDomainAutoRenew",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableDomainTransferLock(
    {abortSignal, ...params}: RequestConfig & EnableDomainTransferLockRequest,
  ): Promise<EnableDomainTransferLockResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableDomainTransferLock",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getContactReachabilityStatus(
    {abortSignal, ...params}: RequestConfig & GetContactReachabilityStatusRequest = {},
  ): Promise<GetContactReachabilityStatusResponse> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetContactReachabilityStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "domainName": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<ReachabilityStatus>(x),
      },
    }, await resp.json());
  }

  async getDomainDetail(
    {abortSignal, ...params}: RequestConfig & GetDomainDetailRequest,
  ): Promise<GetDomainDetailResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDomainDetail",
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "Nameservers": [toNameserver],
        "AdminContact": toContactDetail,
        "RegistrantContact": toContactDetail,
        "TechContact": toContactDetail,
      },
      optional: {
        "AutoRenew": "b",
        "AdminPrivacy": "b",
        "RegistrantPrivacy": "b",
        "TechPrivacy": "b",
        "RegistrarName": "s",
        "WhoIsServer": "s",
        "RegistrarUrl": "s",
        "AbuseContactEmail": "s",
        "AbuseContactPhone": "s",
        "RegistryDomainId": "s",
        "CreationDate": "d",
        "UpdatedDate": "d",
        "ExpirationDate": "d",
        "Reseller": "s",
        "DnsSec": "s",
        "StatusList": ["s"],
      },
    }, await resp.json());
  }

  async getDomainSuggestions(
    {abortSignal, ...params}: RequestConfig & GetDomainSuggestionsRequest,
  ): Promise<GetDomainSuggestionsResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      SuggestionCount: params["SuggestionCount"],
      OnlyAvailable: params["OnlyAvailable"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDomainSuggestions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SuggestionsList": [toDomainSuggestion],
      },
    }, await resp.json());
  }

  async getOperationDetail(
    {abortSignal, ...params}: RequestConfig & GetOperationDetailRequest,
  ): Promise<GetOperationDetailResponse> {
    const body: jsonP.JSONObject = params ? {
      OperationId: params["OperationId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOperationDetail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<OperationStatus>(x),
        "Message": "s",
        "DomainName": "s",
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<OperationType>(x),
        "SubmittedDate": "d",
      },
    }, await resp.json());
  }

  async listDomains(
    {abortSignal, ...params}: RequestConfig & ListDomainsRequest = {},
  ): Promise<ListDomainsResponse> {
    const body: jsonP.JSONObject = params ? {
      Marker: params["Marker"],
      MaxItems: params["MaxItems"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDomains",
    });
    return jsonP.readObj({
      required: {
        "Domains": [toDomainSummary],
      },
      optional: {
        "NextPageMarker": "s",
      },
    }, await resp.json());
  }

  async listOperations(
    {abortSignal, ...params}: RequestConfig & ListOperationsRequest = {},
  ): Promise<ListOperationsResponse> {
    const body: jsonP.JSONObject = params ? {
      SubmittedSince: jsonP.serializeDate_unixTimestamp(params["SubmittedSince"]),
      Marker: params["Marker"],
      MaxItems: params["MaxItems"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOperations",
    });
    return jsonP.readObj({
      required: {
        "Operations": [toOperationSummary],
      },
      optional: {
        "NextPageMarker": "s",
      },
    }, await resp.json());
  }

  async listTagsForDomain(
    {abortSignal, ...params}: RequestConfig & ListTagsForDomainRequest,
  ): Promise<ListTagsForDomainResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForDomain",
    });
    return jsonP.readObj({
      required: {
        "TagList": [toTag],
      },
      optional: {},
    }, await resp.json());
  }

  async registerDomain(
    {abortSignal, ...params}: RequestConfig & RegisterDomainRequest,
  ): Promise<RegisterDomainResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      IdnLangCode: params["IdnLangCode"],
      DurationInYears: params["DurationInYears"],
      AutoRenew: params["AutoRenew"],
      AdminContact: fromContactDetail(params["AdminContact"]),
      RegistrantContact: fromContactDetail(params["RegistrantContact"]),
      TechContact: fromContactDetail(params["TechContact"]),
      PrivacyProtectAdminContact: params["PrivacyProtectAdminContact"],
      PrivacyProtectRegistrantContact: params["PrivacyProtectRegistrantContact"],
      PrivacyProtectTechContact: params["PrivacyProtectTechContact"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDomain",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async rejectDomainTransferFromAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & RejectDomainTransferFromAnotherAwsAccountRequest,
  ): Promise<RejectDomainTransferFromAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectDomainTransferFromAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
      },
    }, await resp.json());
  }

  async renewDomain(
    {abortSignal, ...params}: RequestConfig & RenewDomainRequest,
  ): Promise<RenewDomainResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      DurationInYears: params["DurationInYears"],
      CurrentExpiryYear: params["CurrentExpiryYear"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RenewDomain",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async resendContactReachabilityEmail(
    {abortSignal, ...params}: RequestConfig & ResendContactReachabilityEmailRequest = {},
  ): Promise<ResendContactReachabilityEmailResponse> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResendContactReachabilityEmail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "domainName": "s",
        "emailAddress": "s",
        "isAlreadyVerified": "b",
      },
    }, await resp.json());
  }

  async retrieveDomainAuthCode(
    {abortSignal, ...params}: RequestConfig & RetrieveDomainAuthCodeRequest,
  ): Promise<RetrieveDomainAuthCodeResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RetrieveDomainAuthCode",
    });
    return jsonP.readObj({
      required: {
        "AuthCode": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async transferDomain(
    {abortSignal, ...params}: RequestConfig & TransferDomainRequest,
  ): Promise<TransferDomainResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      IdnLangCode: params["IdnLangCode"],
      DurationInYears: params["DurationInYears"],
      Nameservers: params["Nameservers"]?.map(x => fromNameserver(x)),
      AuthCode: params["AuthCode"],
      AutoRenew: params["AutoRenew"],
      AdminContact: fromContactDetail(params["AdminContact"]),
      RegistrantContact: fromContactDetail(params["RegistrantContact"]),
      TechContact: fromContactDetail(params["TechContact"]),
      PrivacyProtectAdminContact: params["PrivacyProtectAdminContact"],
      PrivacyProtectRegistrantContact: params["PrivacyProtectRegistrantContact"],
      PrivacyProtectTechContact: params["PrivacyProtectTechContact"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TransferDomain",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async transferDomainToAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & TransferDomainToAnotherAwsAccountRequest,
  ): Promise<TransferDomainToAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      AccountId: params["AccountId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TransferDomainToAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
        "Password": "s",
      },
    }, await resp.json());
  }

  async updateDomainContact(
    {abortSignal, ...params}: RequestConfig & UpdateDomainContactRequest,
  ): Promise<UpdateDomainContactResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      AdminContact: fromContactDetail(params["AdminContact"]),
      RegistrantContact: fromContactDetail(params["RegistrantContact"]),
      TechContact: fromContactDetail(params["TechContact"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainContact",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateDomainContactPrivacy(
    {abortSignal, ...params}: RequestConfig & UpdateDomainContactPrivacyRequest,
  ): Promise<UpdateDomainContactPrivacyResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      AdminPrivacy: params["AdminPrivacy"],
      RegistrantPrivacy: params["RegistrantPrivacy"],
      TechPrivacy: params["TechPrivacy"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainContactPrivacy",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateDomainNameservers(
    {abortSignal, ...params}: RequestConfig & UpdateDomainNameserversRequest,
  ): Promise<UpdateDomainNameserversResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      FIAuthKey: params["FIAuthKey"],
      Nameservers: params["Nameservers"]?.map(x => fromNameserver(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainNameservers",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateTagsForDomain(
    {abortSignal, ...params}: RequestConfig & UpdateTagsForDomainRequest,
  ): Promise<UpdateTagsForDomainResponse> {
    const body: jsonP.JSONObject = params ? {
      DomainName: params["DomainName"],
      TagsToUpdate: params["TagsToUpdate"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTagsForDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async viewBilling(
    {abortSignal, ...params}: RequestConfig & ViewBillingRequest = {},
  ): Promise<ViewBillingResponse> {
    const body: jsonP.JSONObject = params ? {
      Start: jsonP.serializeDate_unixTimestamp(params["Start"]),
      End: jsonP.serializeDate_unixTimestamp(params["End"]),
      Marker: params["Marker"],
      MaxItems: params["MaxItems"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ViewBilling",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextPageMarker": "s",
        "BillingRecords": [toBillingRecord],
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcceptDomainTransferFromAnotherAwsAccountRequest {
  DomainName: string;
  Password: string;
}

// refs: 1 - tags: named, input
export interface CancelDomainTransferToAnotherAwsAccountRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface CheckDomainAvailabilityRequest {
  DomainName: string;
  IdnLangCode?: string | null;
}

// refs: 1 - tags: named, input
export interface CheckDomainTransferabilityRequest {
  DomainName: string;
  AuthCode?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteTagsForDomainRequest {
  DomainName: string;
  TagsToDelete: string[];
}

// refs: 1 - tags: named, input
export interface DisableDomainAutoRenewRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface DisableDomainTransferLockRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface EnableDomainAutoRenewRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface EnableDomainTransferLockRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface GetContactReachabilityStatusRequest {
  domainName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDomainDetailRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface GetDomainSuggestionsRequest {
  DomainName: string;
  SuggestionCount: number;
  OnlyAvailable: boolean;
}

// refs: 1 - tags: named, input
export interface GetOperationDetailRequest {
  OperationId: string;
}

// refs: 1 - tags: named, input
export interface ListDomainsRequest {
  Marker?: string | null;
  MaxItems?: number | null;
}

// refs: 1 - tags: named, input
export interface ListOperationsRequest {
  SubmittedSince?: Date | number | null;
  Marker?: string | null;
  MaxItems?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForDomainRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface RegisterDomainRequest {
  DomainName: string;
  IdnLangCode?: string | null;
  DurationInYears: number;
  AutoRenew?: boolean | null;
  AdminContact: ContactDetail;
  RegistrantContact: ContactDetail;
  TechContact: ContactDetail;
  PrivacyProtectAdminContact?: boolean | null;
  PrivacyProtectRegistrantContact?: boolean | null;
  PrivacyProtectTechContact?: boolean | null;
}

// refs: 1 - tags: named, input
export interface RejectDomainTransferFromAnotherAwsAccountRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface RenewDomainRequest {
  DomainName: string;
  DurationInYears?: number | null;
  CurrentExpiryYear: number;
}

// refs: 1 - tags: named, input
export interface ResendContactReachabilityEmailRequest {
  domainName?: string | null;
}

// refs: 1 - tags: named, input
export interface RetrieveDomainAuthCodeRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface TransferDomainRequest {
  DomainName: string;
  IdnLangCode?: string | null;
  DurationInYears: number;
  Nameservers?: Nameserver[] | null;
  AuthCode?: string | null;
  AutoRenew?: boolean | null;
  AdminContact: ContactDetail;
  RegistrantContact: ContactDetail;
  TechContact: ContactDetail;
  PrivacyProtectAdminContact?: boolean | null;
  PrivacyProtectRegistrantContact?: boolean | null;
  PrivacyProtectTechContact?: boolean | null;
}

// refs: 1 - tags: named, input
export interface TransferDomainToAnotherAwsAccountRequest {
  DomainName: string;
  AccountId: string;
}

// refs: 1 - tags: named, input
export interface UpdateDomainContactRequest {
  DomainName: string;
  AdminContact?: ContactDetail | null;
  RegistrantContact?: ContactDetail | null;
  TechContact?: ContactDetail | null;
}

// refs: 1 - tags: named, input
export interface UpdateDomainContactPrivacyRequest {
  DomainName: string;
  AdminPrivacy?: boolean | null;
  RegistrantPrivacy?: boolean | null;
  TechPrivacy?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateDomainNameserversRequest {
  DomainName: string;
  FIAuthKey?: string | null;
  Nameservers: Nameserver[];
}

// refs: 1 - tags: named, input
export interface UpdateTagsForDomainRequest {
  DomainName: string;
  TagsToUpdate?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface ViewBillingRequest {
  Start?: Date | number | null;
  End?: Date | number | null;
  Marker?: string | null;
  MaxItems?: number | null;
}

// refs: 1 - tags: named, output
export interface AcceptDomainTransferFromAnotherAwsAccountResponse {
  OperationId?: string | null;
}

// refs: 1 - tags: named, output
export interface CancelDomainTransferToAnotherAwsAccountResponse {
  OperationId?: string | null;
}

// refs: 1 - tags: named, output
export interface CheckDomainAvailabilityResponse {
  Availability: DomainAvailability;
}

// refs: 1 - tags: named, output
export interface CheckDomainTransferabilityResponse {
  Transferability: DomainTransferability;
}

// refs: 1 - tags: named, output
export interface DeleteTagsForDomainResponse {
}

// refs: 1 - tags: named, output
export interface DisableDomainAutoRenewResponse {
}

// refs: 1 - tags: named, output
export interface DisableDomainTransferLockResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface EnableDomainAutoRenewResponse {
}

// refs: 1 - tags: named, output
export interface EnableDomainTransferLockResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface GetContactReachabilityStatusResponse {
  domainName?: string | null;
  status?: ReachabilityStatus | null;
}

// refs: 1 - tags: named, output
export interface GetDomainDetailResponse {
  DomainName: string;
  Nameservers: Nameserver[];
  AutoRenew?: boolean | null;
  AdminContact: ContactDetail;
  RegistrantContact: ContactDetail;
  TechContact: ContactDetail;
  AdminPrivacy?: boolean | null;
  RegistrantPrivacy?: boolean | null;
  TechPrivacy?: boolean | null;
  RegistrarName?: string | null;
  WhoIsServer?: string | null;
  RegistrarUrl?: string | null;
  AbuseContactEmail?: string | null;
  AbuseContactPhone?: string | null;
  RegistryDomainId?: string | null;
  CreationDate?: Date | number | null;
  UpdatedDate?: Date | number | null;
  ExpirationDate?: Date | number | null;
  Reseller?: string | null;
  DnsSec?: string | null;
  StatusList?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetDomainSuggestionsResponse {
  SuggestionsList?: DomainSuggestion[] | null;
}

// refs: 1 - tags: named, output
export interface GetOperationDetailResponse {
  OperationId?: string | null;
  Status?: OperationStatus | null;
  Message?: string | null;
  DomainName?: string | null;
  Type?: OperationType | null;
  SubmittedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface ListDomainsResponse {
  Domains: DomainSummary[];
  NextPageMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOperationsResponse {
  Operations: OperationSummary[];
  NextPageMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForDomainResponse {
  TagList: Tag[];
}

// refs: 1 - tags: named, output
export interface RegisterDomainResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface RejectDomainTransferFromAnotherAwsAccountResponse {
  OperationId?: string | null;
}

// refs: 1 - tags: named, output
export interface RenewDomainResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface ResendContactReachabilityEmailResponse {
  domainName?: string | null;
  emailAddress?: string | null;
  isAlreadyVerified?: boolean | null;
}

// refs: 1 - tags: named, output
export interface RetrieveDomainAuthCodeResponse {
  AuthCode: string;
}

// refs: 1 - tags: named, output
export interface TransferDomainResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface TransferDomainToAnotherAwsAccountResponse {
  OperationId?: string | null;
  Password?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateDomainContactResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface UpdateDomainContactPrivacyResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface UpdateDomainNameserversResponse {
  OperationId: string;
}

// refs: 1 - tags: named, output
export interface UpdateTagsForDomainResponse {
}

// refs: 1 - tags: named, output
export interface ViewBillingResponse {
  NextPageMarker?: string | null;
  BillingRecords?: BillingRecord[] | null;
}

// refs: 12 - tags: input, named, interface, output
export interface ContactDetail {
  FirstName?: string | null;
  LastName?: string | null;
  ContactType?: ContactType | null;
  OrganizationName?: string | null;
  AddressLine1?: string | null;
  AddressLine2?: string | null;
  City?: string | null;
  State?: string | null;
  CountryCode?: CountryCode | null;
  ZipCode?: string | null;
  PhoneNumber?: string | null;
  Email?: string | null;
  Fax?: string | null;
  ExtraParams?: ExtraParam[] | null;
}
function fromContactDetail(input?: ContactDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FirstName: input["FirstName"],
    LastName: input["LastName"],
    ContactType: input["ContactType"],
    OrganizationName: input["OrganizationName"],
    AddressLine1: input["AddressLine1"],
    AddressLine2: input["AddressLine2"],
    City: input["City"],
    State: input["State"],
    CountryCode: input["CountryCode"],
    ZipCode: input["ZipCode"],
    PhoneNumber: input["PhoneNumber"],
    Email: input["Email"],
    Fax: input["Fax"],
    ExtraParams: input["ExtraParams"]?.map(x => fromExtraParam(x)),
  }
}
function toContactDetail(root: jsonP.JSONValue): ContactDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "FirstName": "s",
      "LastName": "s",
      "ContactType": (x: jsonP.JSONValue) => cmnP.readEnum<ContactType>(x),
      "OrganizationName": "s",
      "AddressLine1": "s",
      "AddressLine2": "s",
      "City": "s",
      "State": "s",
      "CountryCode": (x: jsonP.JSONValue) => cmnP.readEnum<CountryCode>(x),
      "ZipCode": "s",
      "PhoneNumber": "s",
      "Email": "s",
      "Fax": "s",
      "ExtraParams": [toExtraParam],
    },
  }, root);
}

// refs: 12 - tags: input, named, enum, output
export type ContactType =
| "PERSON"
| "COMPANY"
| "ASSOCIATION"
| "PUBLIC_BODY"
| "RESELLER"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, enum, output
export type CountryCode =
| "AD"
| "AE"
| "AF"
| "AG"
| "AI"
| "AL"
| "AM"
| "AN"
| "AO"
| "AQ"
| "AR"
| "AS"
| "AT"
| "AU"
| "AW"
| "AZ"
| "BA"
| "BB"
| "BD"
| "BE"
| "BF"
| "BG"
| "BH"
| "BI"
| "BJ"
| "BL"
| "BM"
| "BN"
| "BO"
| "BR"
| "BS"
| "BT"
| "BW"
| "BY"
| "BZ"
| "CA"
| "CC"
| "CD"
| "CF"
| "CG"
| "CH"
| "CI"
| "CK"
| "CL"
| "CM"
| "CN"
| "CO"
| "CR"
| "CU"
| "CV"
| "CX"
| "CY"
| "CZ"
| "DE"
| "DJ"
| "DK"
| "DM"
| "DO"
| "DZ"
| "EC"
| "EE"
| "EG"
| "ER"
| "ES"
| "ET"
| "FI"
| "FJ"
| "FK"
| "FM"
| "FO"
| "FR"
| "GA"
| "GB"
| "GD"
| "GE"
| "GH"
| "GI"
| "GL"
| "GM"
| "GN"
| "GQ"
| "GR"
| "GT"
| "GU"
| "GW"
| "GY"
| "HK"
| "HN"
| "HR"
| "HT"
| "HU"
| "ID"
| "IE"
| "IL"
| "IM"
| "IN"
| "IQ"
| "IR"
| "IS"
| "IT"
| "JM"
| "JO"
| "JP"
| "KE"
| "KG"
| "KH"
| "KI"
| "KM"
| "KN"
| "KP"
| "KR"
| "KW"
| "KY"
| "KZ"
| "LA"
| "LB"
| "LC"
| "LI"
| "LK"
| "LR"
| "LS"
| "LT"
| "LU"
| "LV"
| "LY"
| "MA"
| "MC"
| "MD"
| "ME"
| "MF"
| "MG"
| "MH"
| "MK"
| "ML"
| "MM"
| "MN"
| "MO"
| "MP"
| "MR"
| "MS"
| "MT"
| "MU"
| "MV"
| "MW"
| "MX"
| "MY"
| "MZ"
| "NA"
| "NC"
| "NE"
| "NG"
| "NI"
| "NL"
| "NO"
| "NP"
| "NR"
| "NU"
| "NZ"
| "OM"
| "PA"
| "PE"
| "PF"
| "PG"
| "PH"
| "PK"
| "PL"
| "PM"
| "PN"
| "PR"
| "PT"
| "PW"
| "PY"
| "QA"
| "RO"
| "RS"
| "RU"
| "RW"
| "SA"
| "SB"
| "SC"
| "SD"
| "SE"
| "SG"
| "SH"
| "SI"
| "SK"
| "SL"
| "SM"
| "SN"
| "SO"
| "SR"
| "ST"
| "SV"
| "SY"
| "SZ"
| "TC"
| "TD"
| "TG"
| "TH"
| "TJ"
| "TK"
| "TL"
| "TM"
| "TN"
| "TO"
| "TR"
| "TT"
| "TV"
| "TW"
| "TZ"
| "UA"
| "UG"
| "US"
| "UY"
| "UZ"
| "VA"
| "VC"
| "VE"
| "VG"
| "VI"
| "VN"
| "VU"
| "WF"
| "WS"
| "YE"
| "YT"
| "ZA"
| "ZM"
| "ZW"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, interface, output
export interface ExtraParam {
  Name: ExtraParamName;
  Value: string;
}
function fromExtraParam(input?: ExtraParam | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}
function toExtraParam(root: jsonP.JSONValue): ExtraParam {
  return jsonP.readObj({
    required: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<ExtraParamName>(x),
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 12 - tags: input, named, enum, output
export type ExtraParamName =
| "DUNS_NUMBER"
| "BRAND_NUMBER"
| "BIRTH_DEPARTMENT"
| "BIRTH_DATE_IN_YYYY_MM_DD"
| "BIRTH_COUNTRY"
| "BIRTH_CITY"
| "DOCUMENT_NUMBER"
| "AU_ID_NUMBER"
| "AU_ID_TYPE"
| "CA_LEGAL_TYPE"
| "CA_BUSINESS_ENTITY_TYPE"
| "CA_LEGAL_REPRESENTATIVE"
| "CA_LEGAL_REPRESENTATIVE_CAPACITY"
| "ES_IDENTIFICATION"
| "ES_IDENTIFICATION_TYPE"
| "ES_LEGAL_FORM"
| "FI_BUSINESS_NUMBER"
| "FI_ID_NUMBER"
| "FI_NATIONALITY"
| "FI_ORGANIZATION_TYPE"
| "IT_NATIONALITY"
| "IT_PIN"
| "IT_REGISTRANT_ENTITY_TYPE"
| "RU_PASSPORT_DATA"
| "SE_ID_NUMBER"
| "SG_ID_NUMBER"
| "VAT_NUMBER"
| "UK_CONTACT_TYPE"
| "UK_COMPANY_NUMBER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface Nameserver {
  Name: string;
  GlueIps?: string[] | null;
}
function fromNameserver(input?: Nameserver | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    GlueIps: input["GlueIps"],
  }
}
function toNameserver(root: jsonP.JSONValue): Nameserver {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "GlueIps": ["s"],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DomainAvailability =
| "AVAILABLE"
| "AVAILABLE_RESERVED"
| "AVAILABLE_PREORDER"
| "UNAVAILABLE"
| "UNAVAILABLE_PREMIUM"
| "UNAVAILABLE_RESTRICTED"
| "RESERVED"
| "DONT_KNOW"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DomainTransferability {
  Transferable?: Transferable | null;
}
function toDomainTransferability(root: jsonP.JSONValue): DomainTransferability {
  return jsonP.readObj({
    required: {},
    optional: {
      "Transferable": (x: jsonP.JSONValue) => cmnP.readEnum<Transferable>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Transferable =
| "TRANSFERABLE"
| "UNTRANSFERABLE"
| "DONT_KNOW"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type ReachabilityStatus =
| "PENDING"
| "DONE"
| "EXPIRED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DomainSuggestion {
  DomainName?: string | null;
  Availability?: string | null;
}
function toDomainSuggestion(root: jsonP.JSONValue): DomainSuggestion {
  return jsonP.readObj({
    required: {},
    optional: {
      "DomainName": "s",
      "Availability": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type OperationStatus =
| "SUBMITTED"
| "IN_PROGRESS"
| "ERROR"
| "SUCCESSFUL"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type OperationType =
| "REGISTER_DOMAIN"
| "DELETE_DOMAIN"
| "TRANSFER_IN_DOMAIN"
| "UPDATE_DOMAIN_CONTACT"
| "UPDATE_NAMESERVER"
| "CHANGE_PRIVACY_PROTECTION"
| "DOMAIN_LOCK"
| "ENABLE_AUTORENEW"
| "DISABLE_AUTORENEW"
| "ADD_DNSSEC"
| "REMOVE_DNSSEC"
| "EXPIRE_DOMAIN"
| "TRANSFER_OUT_DOMAIN"
| "CHANGE_DOMAIN_OWNER"
| "RENEW_DOMAIN"
| "PUSH_DOMAIN"
| "INTERNAL_TRANSFER_OUT_DOMAIN"
| "INTERNAL_TRANSFER_IN_DOMAIN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DomainSummary {
  DomainName: string;
  AutoRenew?: boolean | null;
  TransferLock?: boolean | null;
  Expiry?: Date | number | null;
}
function toDomainSummary(root: jsonP.JSONValue): DomainSummary {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
    },
    optional: {
      "AutoRenew": "b",
      "TransferLock": "b",
      "Expiry": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OperationSummary {
  OperationId: string;
  Status: OperationStatus;
  Type: OperationType;
  SubmittedDate: Date | number;
}
function toOperationSummary(root: jsonP.JSONValue): OperationSummary {
  return jsonP.readObj({
    required: {
      "OperationId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<OperationStatus>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<OperationType>(x),
      "SubmittedDate": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BillingRecord {
  DomainName?: string | null;
  Operation?: OperationType | null;
  InvoiceId?: string | null;
  BillDate?: Date | number | null;
  Price?: number | null;
}
function toBillingRecord(root: jsonP.JSONValue): BillingRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "DomainName": "s",
      "Operation": (x: jsonP.JSONValue) => cmnP.readEnum<OperationType>(x),
      "InvoiceId": "s",
      "BillDate": "d",
      "Price": "n",
    },
  }, root);
}
