// Autogenerated API client for: Amazon Route 53 Domains

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Route53Domains {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Route53Domains.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2014-05-15",
    "endpointPrefix": "route53domains",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Route 53 Domains",
    "serviceId": "Route 53 Domains",
    "signatureVersion": "v4",
    "targetPrefix": "Route53Domains_v20140515",
    "uid": "route53domains-2014-05-15"
  };

  async acceptDomainTransferFromAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & s.AcceptDomainTransferFromAnotherAwsAccountRequest,
  ): Promise<s.AcceptDomainTransferFromAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      Password: params["Password"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptDomainTransferFromAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
      },
    }, await resp.json());
  }

  async cancelDomainTransferToAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & s.CancelDomainTransferToAnotherAwsAccountRequest,
  ): Promise<s.CancelDomainTransferToAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelDomainTransferToAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
      },
    }, await resp.json());
  }

  async checkDomainAvailability(
    {abortSignal, ...params}: RequestConfig & s.CheckDomainAvailabilityRequest,
  ): Promise<s.CheckDomainAvailabilityResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      IdnLangCode: params["IdnLangCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckDomainAvailability",
    });
    return jsonP.readObj({
      required: {
        "Availability": (x: jsonP.JSONValue) => cmnP.readEnum<s.DomainAvailability>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async checkDomainTransferability(
    {abortSignal, ...params}: RequestConfig & s.CheckDomainTransferabilityRequest,
  ): Promise<s.CheckDomainTransferabilityResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      AuthCode: params["AuthCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckDomainTransferability",
    });
    return jsonP.readObj({
      required: {
        "Transferability": toDomainTransferability,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteTagsForDomain(
    {abortSignal, ...params}: RequestConfig & s.DeleteTagsForDomainRequest,
  ): Promise<s.DeleteTagsForDomainResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      TagsToDelete: params["TagsToDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTagsForDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disableDomainAutoRenew(
    {abortSignal, ...params}: RequestConfig & s.DisableDomainAutoRenewRequest,
  ): Promise<s.DisableDomainAutoRenewResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableDomainAutoRenew",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disableDomainTransferLock(
    {abortSignal, ...params}: RequestConfig & s.DisableDomainTransferLockRequest,
  ): Promise<s.DisableDomainTransferLockResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableDomainTransferLock",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async enableDomainAutoRenew(
    {abortSignal, ...params}: RequestConfig & s.EnableDomainAutoRenewRequest,
  ): Promise<s.EnableDomainAutoRenewResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableDomainAutoRenew",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableDomainTransferLock(
    {abortSignal, ...params}: RequestConfig & s.EnableDomainTransferLockRequest,
  ): Promise<s.EnableDomainTransferLockResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableDomainTransferLock",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getContactReachabilityStatus(
    {abortSignal, ...params}: RequestConfig & s.GetContactReachabilityStatusRequest = {},
  ): Promise<s.GetContactReachabilityStatusResponse> {
    const body: jsonP.JSONObject = {
      domainName: params["domainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetContactReachabilityStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "domainName": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReachabilityStatus>(x),
      },
    }, await resp.json());
  }

  async getDomainDetail(
    {abortSignal, ...params}: RequestConfig & s.GetDomainDetailRequest,
  ): Promise<s.GetDomainDetailResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDomainDetail",
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "Nameservers": [toNameserver],
        "AdminContact": toContactDetail,
        "RegistrantContact": toContactDetail,
        "TechContact": toContactDetail,
      },
      optional: {
        "AutoRenew": "b",
        "AdminPrivacy": "b",
        "RegistrantPrivacy": "b",
        "TechPrivacy": "b",
        "RegistrarName": "s",
        "WhoIsServer": "s",
        "RegistrarUrl": "s",
        "AbuseContactEmail": "s",
        "AbuseContactPhone": "s",
        "RegistryDomainId": "s",
        "CreationDate": "d",
        "UpdatedDate": "d",
        "ExpirationDate": "d",
        "Reseller": "s",
        "DnsSec": "s",
        "StatusList": ["s"],
      },
    }, await resp.json());
  }

  async getDomainSuggestions(
    {abortSignal, ...params}: RequestConfig & s.GetDomainSuggestionsRequest,
  ): Promise<s.GetDomainSuggestionsResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      SuggestionCount: params["SuggestionCount"],
      OnlyAvailable: params["OnlyAvailable"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDomainSuggestions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SuggestionsList": [toDomainSuggestion],
      },
    }, await resp.json());
  }

  async getOperationDetail(
    {abortSignal, ...params}: RequestConfig & s.GetOperationDetailRequest,
  ): Promise<s.GetOperationDetailResponse> {
    const body: jsonP.JSONObject = {
      OperationId: params["OperationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOperationDetail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.OperationStatus>(x),
        "Message": "s",
        "DomainName": "s",
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.OperationType>(x),
        "SubmittedDate": "d",
      },
    }, await resp.json());
  }

  async listDomains(
    {abortSignal, ...params}: RequestConfig & s.ListDomainsRequest = {},
  ): Promise<s.ListDomainsResponse> {
    const body: jsonP.JSONObject = {
      Marker: params["Marker"],
      MaxItems: params["MaxItems"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDomains",
    });
    return jsonP.readObj({
      required: {
        "Domains": [toDomainSummary],
      },
      optional: {
        "NextPageMarker": "s",
      },
    }, await resp.json());
  }

  async listOperations(
    {abortSignal, ...params}: RequestConfig & s.ListOperationsRequest = {},
  ): Promise<s.ListOperationsResponse> {
    const body: jsonP.JSONObject = {
      SubmittedSince: jsonP.serializeDate_unixTimestamp(params["SubmittedSince"]),
      Marker: params["Marker"],
      MaxItems: params["MaxItems"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOperations",
    });
    return jsonP.readObj({
      required: {
        "Operations": [toOperationSummary],
      },
      optional: {
        "NextPageMarker": "s",
      },
    }, await resp.json());
  }

  async listTagsForDomain(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForDomainRequest,
  ): Promise<s.ListTagsForDomainResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForDomain",
    });
    return jsonP.readObj({
      required: {
        "TagList": [toTag],
      },
      optional: {},
    }, await resp.json());
  }

  async registerDomain(
    {abortSignal, ...params}: RequestConfig & s.RegisterDomainRequest,
  ): Promise<s.RegisterDomainResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      IdnLangCode: params["IdnLangCode"],
      DurationInYears: params["DurationInYears"],
      AutoRenew: params["AutoRenew"],
      AdminContact: fromContactDetail(params["AdminContact"]),
      RegistrantContact: fromContactDetail(params["RegistrantContact"]),
      TechContact: fromContactDetail(params["TechContact"]),
      PrivacyProtectAdminContact: params["PrivacyProtectAdminContact"],
      PrivacyProtectRegistrantContact: params["PrivacyProtectRegistrantContact"],
      PrivacyProtectTechContact: params["PrivacyProtectTechContact"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDomain",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async rejectDomainTransferFromAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & s.RejectDomainTransferFromAnotherAwsAccountRequest,
  ): Promise<s.RejectDomainTransferFromAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectDomainTransferFromAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
      },
    }, await resp.json());
  }

  async renewDomain(
    {abortSignal, ...params}: RequestConfig & s.RenewDomainRequest,
  ): Promise<s.RenewDomainResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      DurationInYears: params["DurationInYears"],
      CurrentExpiryYear: params["CurrentExpiryYear"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RenewDomain",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async resendContactReachabilityEmail(
    {abortSignal, ...params}: RequestConfig & s.ResendContactReachabilityEmailRequest = {},
  ): Promise<s.ResendContactReachabilityEmailResponse> {
    const body: jsonP.JSONObject = {
      domainName: params["domainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResendContactReachabilityEmail",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "domainName": "s",
        "emailAddress": "s",
        "isAlreadyVerified": "b",
      },
    }, await resp.json());
  }

  async retrieveDomainAuthCode(
    {abortSignal, ...params}: RequestConfig & s.RetrieveDomainAuthCodeRequest,
  ): Promise<s.RetrieveDomainAuthCodeResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RetrieveDomainAuthCode",
    });
    return jsonP.readObj({
      required: {
        "AuthCode": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async transferDomain(
    {abortSignal, ...params}: RequestConfig & s.TransferDomainRequest,
  ): Promise<s.TransferDomainResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      IdnLangCode: params["IdnLangCode"],
      DurationInYears: params["DurationInYears"],
      Nameservers: params["Nameservers"]?.map(x => fromNameserver(x)),
      AuthCode: params["AuthCode"],
      AutoRenew: params["AutoRenew"],
      AdminContact: fromContactDetail(params["AdminContact"]),
      RegistrantContact: fromContactDetail(params["RegistrantContact"]),
      TechContact: fromContactDetail(params["TechContact"]),
      PrivacyProtectAdminContact: params["PrivacyProtectAdminContact"],
      PrivacyProtectRegistrantContact: params["PrivacyProtectRegistrantContact"],
      PrivacyProtectTechContact: params["PrivacyProtectTechContact"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TransferDomain",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async transferDomainToAnotherAwsAccount(
    {abortSignal, ...params}: RequestConfig & s.TransferDomainToAnotherAwsAccountRequest,
  ): Promise<s.TransferDomainToAnotherAwsAccountResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      AccountId: params["AccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TransferDomainToAnotherAwsAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OperationId": "s",
        "Password": "s",
      },
    }, await resp.json());
  }

  async updateDomainContact(
    {abortSignal, ...params}: RequestConfig & s.UpdateDomainContactRequest,
  ): Promise<s.UpdateDomainContactResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      AdminContact: fromContactDetail(params["AdminContact"]),
      RegistrantContact: fromContactDetail(params["RegistrantContact"]),
      TechContact: fromContactDetail(params["TechContact"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainContact",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateDomainContactPrivacy(
    {abortSignal, ...params}: RequestConfig & s.UpdateDomainContactPrivacyRequest,
  ): Promise<s.UpdateDomainContactPrivacyResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      AdminPrivacy: params["AdminPrivacy"],
      RegistrantPrivacy: params["RegistrantPrivacy"],
      TechPrivacy: params["TechPrivacy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainContactPrivacy",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateDomainNameservers(
    {abortSignal, ...params}: RequestConfig & s.UpdateDomainNameserversRequest,
  ): Promise<s.UpdateDomainNameserversResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      FIAuthKey: params["FIAuthKey"],
      Nameservers: params["Nameservers"]?.map(x => fromNameserver(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainNameservers",
    });
    return jsonP.readObj({
      required: {
        "OperationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async updateTagsForDomain(
    {abortSignal, ...params}: RequestConfig & s.UpdateTagsForDomainRequest,
  ): Promise<s.UpdateTagsForDomainResponse> {
    const body: jsonP.JSONObject = {
      DomainName: params["DomainName"],
      TagsToUpdate: params["TagsToUpdate"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTagsForDomain",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async viewBilling(
    {abortSignal, ...params}: RequestConfig & s.ViewBillingRequest = {},
  ): Promise<s.ViewBillingResponse> {
    const body: jsonP.JSONObject = {
      Start: jsonP.serializeDate_unixTimestamp(params["Start"]),
      End: jsonP.serializeDate_unixTimestamp(params["End"]),
      Marker: params["Marker"],
      MaxItems: params["MaxItems"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ViewBilling",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextPageMarker": "s",
        "BillingRecords": [toBillingRecord],
      },
    }, await resp.json());
  }

}

function fromContactDetail(input?: s.ContactDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FirstName: input["FirstName"],
    LastName: input["LastName"],
    ContactType: input["ContactType"],
    OrganizationName: input["OrganizationName"],
    AddressLine1: input["AddressLine1"],
    AddressLine2: input["AddressLine2"],
    City: input["City"],
    State: input["State"],
    CountryCode: input["CountryCode"],
    ZipCode: input["ZipCode"],
    PhoneNumber: input["PhoneNumber"],
    Email: input["Email"],
    Fax: input["Fax"],
    ExtraParams: input["ExtraParams"]?.map(x => fromExtraParam(x)),
  }
}
function toContactDetail(root: jsonP.JSONValue): s.ContactDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "FirstName": "s",
      "LastName": "s",
      "ContactType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ContactType>(x),
      "OrganizationName": "s",
      "AddressLine1": "s",
      "AddressLine2": "s",
      "City": "s",
      "State": "s",
      "CountryCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.CountryCode>(x),
      "ZipCode": "s",
      "PhoneNumber": "s",
      "Email": "s",
      "Fax": "s",
      "ExtraParams": [toExtraParam],
    },
  }, root);
}

function fromExtraParam(input?: s.ExtraParam | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}
function toExtraParam(root: jsonP.JSONValue): s.ExtraParam {
  return jsonP.readObj({
    required: {
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExtraParamName>(x),
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromNameserver(input?: s.Nameserver | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    GlueIps: input["GlueIps"],
  }
}
function toNameserver(root: jsonP.JSONValue): s.Nameserver {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "GlueIps": ["s"],
    },
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

function toDomainTransferability(root: jsonP.JSONValue): s.DomainTransferability {
  return jsonP.readObj({
    required: {},
    optional: {
      "Transferable": (x: jsonP.JSONValue) => cmnP.readEnum<s.Transferable>(x),
    },
  }, root);
}

function toDomainSuggestion(root: jsonP.JSONValue): s.DomainSuggestion {
  return jsonP.readObj({
    required: {},
    optional: {
      "DomainName": "s",
      "Availability": "s",
    },
  }, root);
}

function toDomainSummary(root: jsonP.JSONValue): s.DomainSummary {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
    },
    optional: {
      "AutoRenew": "b",
      "TransferLock": "b",
      "Expiry": "d",
    },
  }, root);
}

function toOperationSummary(root: jsonP.JSONValue): s.OperationSummary {
  return jsonP.readObj({
    required: {
      "OperationId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.OperationStatus>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.OperationType>(x),
      "SubmittedDate": "d",
    },
    optional: {},
  }, root);
}

function toBillingRecord(root: jsonP.JSONValue): s.BillingRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "DomainName": "s",
      "Operation": (x: jsonP.JSONValue) => cmnP.readEnum<s.OperationType>(x),
      "InvoiceId": "s",
      "BillDate": "d",
      "Price": "n",
    },
  }, root);
}
