// Autogenerated API client for: AWS Config

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class ConfigService {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ConfigService.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-11-12",
    "endpointPrefix": "config",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Config Service",
    "serviceFullName": "AWS Config",
    "serviceId": "Config Service",
    "signatureVersion": "v4",
    "targetPrefix": "StarlingDoveService",
    "uid": "config-2014-11-12"
  };

  async batchGetAggregateResourceConfig(
    {abortSignal, ...params}: RequestConfig & BatchGetAggregateResourceConfigRequest,
  ): Promise<BatchGetAggregateResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ResourceIdentifiers: params["ResourceIdentifiers"]?.map(x => fromAggregateResourceIdentifier(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetAggregateResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaseConfigurationItems": [toBaseConfigurationItem],
        "UnprocessedResourceIdentifiers": [toAggregateResourceIdentifier],
      },
    }, await resp.json());
  }

  async batchGetResourceConfig(
    {abortSignal, ...params}: RequestConfig & BatchGetResourceConfigRequest,
  ): Promise<BatchGetResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      resourceKeys: params["resourceKeys"]?.map(x => fromResourceKey(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "baseConfigurationItems": [toBaseConfigurationItem],
        "unprocessedResourceKeys": [toResourceKey],
      },
    }, await resp.json());
  }

  async deleteAggregationAuthorization(
    {abortSignal, ...params}: RequestConfig & DeleteAggregationAuthorizationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AuthorizedAccountId: params["AuthorizedAccountId"],
      AuthorizedAwsRegion: params["AuthorizedAwsRegion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAggregationAuthorization",
    });
  }

  async deleteConfigRule(
    {abortSignal, ...params}: RequestConfig & DeleteConfigRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConfigRule",
    });
  }

  async deleteConfigurationAggregator(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationAggregatorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConfigurationAggregator",
    });
  }

  async deleteConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderName: params["ConfigurationRecorderName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConfigurationRecorder",
    });
  }

  async deleteConformancePack(
    {abortSignal, ...params}: RequestConfig & DeleteConformancePackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConformancePack",
    });
  }

  async deleteDeliveryChannel(
    {abortSignal, ...params}: RequestConfig & DeleteDeliveryChannelRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      DeliveryChannelName: params["DeliveryChannelName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDeliveryChannel",
    });
  }

  async deleteEvaluationResults(
    {abortSignal, ...params}: RequestConfig & DeleteEvaluationResultsRequest,
  ): Promise<DeleteEvaluationResultsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEvaluationResults",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteOrganizationConfigRule(
    {abortSignal, ...params}: RequestConfig & DeleteOrganizationConfigRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleName: params["OrganizationConfigRuleName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganizationConfigRule",
    });
  }

  async deleteOrganizationConformancePack(
    {abortSignal, ...params}: RequestConfig & DeleteOrganizationConformancePackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackName: params["OrganizationConformancePackName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganizationConformancePack",
    });
  }

  async deletePendingAggregationRequest(
    {abortSignal, ...params}: RequestConfig & DeletePendingAggregationRequestRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      RequesterAccountId: params["RequesterAccountId"],
      RequesterAwsRegion: params["RequesterAwsRegion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePendingAggregationRequest",
    });
  }

  async deleteRemediationConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteRemediationConfigurationRequest,
  ): Promise<DeleteRemediationConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceType: params["ResourceType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRemediationConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRemediationExceptions(
    {abortSignal, ...params}: RequestConfig & DeleteRemediationExceptionsRequest,
  ): Promise<DeleteRemediationExceptionsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromRemediationExceptionResourceKey(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRemediationExceptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedBatches": [toFailedDeleteRemediationExceptionsBatch],
      },
    }, await resp.json());
  }

  async deleteResourceConfig(
    {abortSignal, ...params}: RequestConfig & DeleteResourceConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResourceConfig",
    });
  }

  async deleteRetentionConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteRetentionConfigurationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      RetentionConfigurationName: params["RetentionConfigurationName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRetentionConfiguration",
    });
  }

  async deliverConfigSnapshot(
    {abortSignal, ...params}: RequestConfig & DeliverConfigSnapshotRequest,
  ): Promise<DeliverConfigSnapshotResponse> {
    const body: jsonP.JSONObject = {
      deliveryChannelName: params["deliveryChannelName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeliverConfigSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configSnapshotId": "s",
      },
    }, await resp.json());
  }

  async describeAggregateComplianceByConfigRules(
    {abortSignal, ...params}: RequestConfig & DescribeAggregateComplianceByConfigRulesRequest,
  ): Promise<DescribeAggregateComplianceByConfigRulesResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Filters: fromConfigRuleComplianceFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAggregateComplianceByConfigRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregateComplianceByConfigRules": [toAggregateComplianceByConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAggregationAuthorizations(
    {abortSignal, ...params}: RequestConfig & DescribeAggregationAuthorizationsRequest = {},
  ): Promise<DescribeAggregationAuthorizationsResponse> {
    const body: jsonP.JSONObject = {
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAggregationAuthorizations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregationAuthorizations": [toAggregationAuthorization],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeComplianceByConfigRule(
    {abortSignal, ...params}: RequestConfig & DescribeComplianceByConfigRuleRequest = {},
  ): Promise<DescribeComplianceByConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
      ComplianceTypes: params["ComplianceTypes"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComplianceByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceByConfigRules": [toComplianceByConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeComplianceByResource(
    {abortSignal, ...params}: RequestConfig & DescribeComplianceByResourceRequest = {},
  ): Promise<DescribeComplianceByResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
      ComplianceTypes: params["ComplianceTypes"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComplianceByResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceByResources": [toComplianceByResource],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigRuleEvaluationStatus(
    {abortSignal, ...params}: RequestConfig & DescribeConfigRuleEvaluationStatusRequest = {},
  ): Promise<DescribeConfigRuleEvaluationStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigRuleEvaluationStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigRulesEvaluationStatus": [toConfigRuleEvaluationStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigRules(
    {abortSignal, ...params}: RequestConfig & DescribeConfigRulesRequest = {},
  ): Promise<DescribeConfigRulesResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigRules": [toConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigurationAggregatorSourcesStatus(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationAggregatorSourcesStatusRequest,
  ): Promise<DescribeConfigurationAggregatorSourcesStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      UpdateStatus: params["UpdateStatus"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationAggregatorSourcesStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregatedSourceStatusList": [toAggregatedSourceStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigurationAggregators(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationAggregatorsRequest = {},
  ): Promise<DescribeConfigurationAggregatorsResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorNames: params["ConfigurationAggregatorNames"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationAggregators",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationAggregators": [toConfigurationAggregator],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigurationRecorderStatus(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationRecorderStatusRequest = {},
  ): Promise<DescribeConfigurationRecorderStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderNames: params["ConfigurationRecorderNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationRecorderStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationRecordersStatus": [toConfigurationRecorderStatus],
      },
    }, await resp.json());
  }

  async describeConfigurationRecorders(
    {abortSignal, ...params}: RequestConfig & DescribeConfigurationRecordersRequest = {},
  ): Promise<DescribeConfigurationRecordersResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderNames: params["ConfigurationRecorderNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationRecorders",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationRecorders": [toConfigurationRecorder],
      },
    }, await resp.json());
  }

  async describeConformancePackCompliance(
    {abortSignal, ...params}: RequestConfig & DescribeConformancePackComplianceRequest,
  ): Promise<DescribeConformancePackComplianceResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
      Filters: fromConformancePackComplianceFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConformancePackCompliance",
    });
    return jsonP.readObj({
      required: {
        "ConformancePackName": "s",
        "ConformancePackRuleComplianceList": [toConformancePackRuleCompliance],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConformancePackStatus(
    {abortSignal, ...params}: RequestConfig & DescribeConformancePackStatusRequest = {},
  ): Promise<DescribeConformancePackStatusResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackNames: params["ConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConformancePackStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackStatusDetails": [toConformancePackStatusDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConformancePacks(
    {abortSignal, ...params}: RequestConfig & DescribeConformancePacksRequest = {},
  ): Promise<DescribeConformancePacksResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackNames: params["ConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConformancePacks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackDetails": [toConformancePackDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeDeliveryChannelStatus(
    {abortSignal, ...params}: RequestConfig & DescribeDeliveryChannelStatusRequest = {},
  ): Promise<DescribeDeliveryChannelStatusResponse> {
    const body: jsonP.JSONObject = {
      DeliveryChannelNames: params["DeliveryChannelNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDeliveryChannelStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeliveryChannelsStatus": [toDeliveryChannelStatus],
      },
    }, await resp.json());
  }

  async describeDeliveryChannels(
    {abortSignal, ...params}: RequestConfig & DescribeDeliveryChannelsRequest = {},
  ): Promise<DescribeDeliveryChannelsResponse> {
    const body: jsonP.JSONObject = {
      DeliveryChannelNames: params["DeliveryChannelNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDeliveryChannels",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeliveryChannels": [toDeliveryChannel],
      },
    }, await resp.json());
  }

  async describeOrganizationConfigRuleStatuses(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationConfigRuleStatusesRequest = {},
  ): Promise<DescribeOrganizationConfigRuleStatusesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleNames: params["OrganizationConfigRuleNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConfigRuleStatuses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRuleStatuses": [toOrganizationConfigRuleStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeOrganizationConfigRules(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationConfigRulesRequest = {},
  ): Promise<DescribeOrganizationConfigRulesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleNames: params["OrganizationConfigRuleNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConfigRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRules": [toOrganizationConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeOrganizationConformancePackStatuses(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationConformancePackStatusesRequest = {},
  ): Promise<DescribeOrganizationConformancePackStatusesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackNames: params["OrganizationConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConformancePackStatuses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePackStatuses": [toOrganizationConformancePackStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeOrganizationConformancePacks(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationConformancePacksRequest = {},
  ): Promise<DescribeOrganizationConformancePacksResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackNames: params["OrganizationConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConformancePacks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePacks": [toOrganizationConformancePack],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describePendingAggregationRequests(
    {abortSignal, ...params}: RequestConfig & DescribePendingAggregationRequestsRequest = {},
  ): Promise<DescribePendingAggregationRequestsResponse> {
    const body: jsonP.JSONObject = {
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePendingAggregationRequests",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PendingAggregationRequests": [toPendingAggregationRequest],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRemediationConfigurations(
    {abortSignal, ...params}: RequestConfig & DescribeRemediationConfigurationsRequest,
  ): Promise<DescribeRemediationConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRemediationConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RemediationConfigurations": [toRemediationConfiguration],
      },
    }, await resp.json());
  }

  async describeRemediationExceptions(
    {abortSignal, ...params}: RequestConfig & DescribeRemediationExceptionsRequest,
  ): Promise<DescribeRemediationExceptionsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromRemediationExceptionResourceKey(x)),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRemediationExceptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RemediationExceptions": [toRemediationException],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRemediationExecutionStatus(
    {abortSignal, ...params}: RequestConfig & DescribeRemediationExecutionStatusRequest,
  ): Promise<DescribeRemediationExecutionStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromResourceKey(x)),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRemediationExecutionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RemediationExecutionStatuses": [toRemediationExecutionStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRetentionConfigurations(
    {abortSignal, ...params}: RequestConfig & DescribeRetentionConfigurationsRequest = {},
  ): Promise<DescribeRetentionConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      RetentionConfigurationNames: params["RetentionConfigurationNames"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRetentionConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionConfigurations": [toRetentionConfiguration],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateComplianceDetailsByConfigRule(
    {abortSignal, ...params}: RequestConfig & GetAggregateComplianceDetailsByConfigRuleRequest,
  ): Promise<GetAggregateComplianceDetailsByConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ConfigRuleName: params["ConfigRuleName"],
      AccountId: params["AccountId"],
      AwsRegion: params["AwsRegion"],
      ComplianceType: params["ComplianceType"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateComplianceDetailsByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregateEvaluationResults": [toAggregateEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateConfigRuleComplianceSummary(
    {abortSignal, ...params}: RequestConfig & GetAggregateConfigRuleComplianceSummaryRequest,
  ): Promise<GetAggregateConfigRuleComplianceSummaryResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Filters: fromConfigRuleComplianceSummaryFilters(params["Filters"]),
      GroupByKey: params["GroupByKey"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateConfigRuleComplianceSummary",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupByKey": "s",
        "AggregateComplianceCounts": [toAggregateComplianceCount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateDiscoveredResourceCounts(
    {abortSignal, ...params}: RequestConfig & GetAggregateDiscoveredResourceCountsRequest,
  ): Promise<GetAggregateDiscoveredResourceCountsResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Filters: fromResourceCountFilters(params["Filters"]),
      GroupByKey: params["GroupByKey"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateDiscoveredResourceCounts",
    });
    return jsonP.readObj({
      required: {
        "TotalDiscoveredResources": "n",
      },
      optional: {
        "GroupByKey": "s",
        "GroupedResourceCounts": [toGroupedResourceCount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateResourceConfig(
    {abortSignal, ...params}: RequestConfig & GetAggregateResourceConfigRequest,
  ): Promise<GetAggregateResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ResourceIdentifier: fromAggregateResourceIdentifier(params["ResourceIdentifier"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationItem": toConfigurationItem,
      },
    }, await resp.json());
  }

  async getComplianceDetailsByConfigRule(
    {abortSignal, ...params}: RequestConfig & GetComplianceDetailsByConfigRuleRequest,
  ): Promise<GetComplianceDetailsByConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ComplianceTypes: params["ComplianceTypes"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceDetailsByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EvaluationResults": [toEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getComplianceDetailsByResource(
    {abortSignal, ...params}: RequestConfig & GetComplianceDetailsByResourceRequest,
  ): Promise<GetComplianceDetailsByResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
      ComplianceTypes: params["ComplianceTypes"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceDetailsByResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EvaluationResults": [toEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getComplianceSummaryByConfigRule(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<GetComplianceSummaryByConfigRuleResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetComplianceSummaryByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceSummary": toComplianceSummary,
      },
    }, await resp.json());
  }

  async getComplianceSummaryByResourceType(
    {abortSignal, ...params}: RequestConfig & GetComplianceSummaryByResourceTypeRequest = {},
  ): Promise<GetComplianceSummaryByResourceTypeResponse> {
    const body: jsonP.JSONObject = {
      ResourceTypes: params["ResourceTypes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceSummaryByResourceType",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceSummariesByResourceType": [toComplianceSummaryByResourceType],
      },
    }, await resp.json());
  }

  async getConformancePackComplianceDetails(
    {abortSignal, ...params}: RequestConfig & GetConformancePackComplianceDetailsRequest,
  ): Promise<GetConformancePackComplianceDetailsResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
      Filters: fromConformancePackEvaluationFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConformancePackComplianceDetails",
    });
    return jsonP.readObj({
      required: {
        "ConformancePackName": "s",
      },
      optional: {
        "ConformancePackRuleEvaluationResults": [toConformancePackEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getConformancePackComplianceSummary(
    {abortSignal, ...params}: RequestConfig & GetConformancePackComplianceSummaryRequest,
  ): Promise<GetConformancePackComplianceSummaryResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackNames: params["ConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConformancePackComplianceSummary",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackComplianceSummaryList": [toConformancePackComplianceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getDiscoveredResourceCounts(
    {abortSignal, ...params}: RequestConfig & GetDiscoveredResourceCountsRequest = {},
  ): Promise<GetDiscoveredResourceCountsResponse> {
    const body: jsonP.JSONObject = {
      resourceTypes: params["resourceTypes"],
      limit: params["limit"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDiscoveredResourceCounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "totalDiscoveredResources": "n",
        "resourceCounts": [toResourceCount],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getOrganizationConfigRuleDetailedStatus(
    {abortSignal, ...params}: RequestConfig & GetOrganizationConfigRuleDetailedStatusRequest,
  ): Promise<GetOrganizationConfigRuleDetailedStatusResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleName: params["OrganizationConfigRuleName"],
      Filters: fromStatusDetailFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOrganizationConfigRuleDetailedStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRuleDetailedStatus": [toMemberAccountStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getOrganizationConformancePackDetailedStatus(
    {abortSignal, ...params}: RequestConfig & GetOrganizationConformancePackDetailedStatusRequest,
  ): Promise<GetOrganizationConformancePackDetailedStatusResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackName: params["OrganizationConformancePackName"],
      Filters: fromOrganizationResourceDetailedStatusFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOrganizationConformancePackDetailedStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePackDetailedStatuses": [toOrganizationConformancePackDetailedStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceConfigHistory(
    {abortSignal, ...params}: RequestConfig & GetResourceConfigHistoryRequest,
  ): Promise<GetResourceConfigHistoryResponse> {
    const body: jsonP.JSONObject = {
      resourceType: params["resourceType"],
      resourceId: params["resourceId"],
      laterTime: jsonP.serializeDate_unixTimestamp(params["laterTime"]),
      earlierTime: jsonP.serializeDate_unixTimestamp(params["earlierTime"]),
      chronologicalOrder: params["chronologicalOrder"],
      limit: params["limit"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceConfigHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configurationItems": [toConfigurationItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAggregateDiscoveredResources(
    {abortSignal, ...params}: RequestConfig & ListAggregateDiscoveredResourcesRequest,
  ): Promise<ListAggregateDiscoveredResourcesResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ResourceType: params["ResourceType"],
      Filters: fromResourceFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAggregateDiscoveredResources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceIdentifiers": [toAggregateResourceIdentifier],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDiscoveredResources(
    {abortSignal, ...params}: RequestConfig & ListDiscoveredResourcesRequest,
  ): Promise<ListDiscoveredResourcesResponse> {
    const body: jsonP.JSONObject = {
      resourceType: params["resourceType"],
      resourceIds: params["resourceIds"],
      resourceName: params["resourceName"],
      limit: params["limit"],
      includeDeletedResources: params["includeDeletedResources"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDiscoveredResources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceIdentifiers": [toResourceIdentifier],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putAggregationAuthorization(
    {abortSignal, ...params}: RequestConfig & PutAggregationAuthorizationRequest,
  ): Promise<PutAggregationAuthorizationResponse> {
    const body: jsonP.JSONObject = {
      AuthorizedAccountId: params["AuthorizedAccountId"],
      AuthorizedAwsRegion: params["AuthorizedAwsRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAggregationAuthorization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregationAuthorization": toAggregationAuthorization,
      },
    }, await resp.json());
  }

  async putConfigRule(
    {abortSignal, ...params}: RequestConfig & PutConfigRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigRule: fromConfigRule(params["ConfigRule"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigRule",
    });
  }

  async putConfigurationAggregator(
    {abortSignal, ...params}: RequestConfig & PutConfigurationAggregatorRequest,
  ): Promise<PutConfigurationAggregatorResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      AccountAggregationSources: params["AccountAggregationSources"]?.map(x => fromAccountAggregationSource(x)),
      OrganizationAggregationSource: fromOrganizationAggregationSource(params["OrganizationAggregationSource"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationAggregator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationAggregator": toConfigurationAggregator,
      },
    }, await resp.json());
  }

  async putConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & PutConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorder: fromConfigurationRecorder(params["ConfigurationRecorder"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationRecorder",
    });
  }

  async putConformancePack(
    {abortSignal, ...params}: RequestConfig & PutConformancePackRequest,
  ): Promise<PutConformancePackResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
      TemplateS3Uri: params["TemplateS3Uri"],
      TemplateBody: params["TemplateBody"],
      DeliveryS3Bucket: params["DeliveryS3Bucket"],
      DeliveryS3KeyPrefix: params["DeliveryS3KeyPrefix"],
      ConformancePackInputParameters: params["ConformancePackInputParameters"]?.map(x => fromConformancePackInputParameter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConformancePack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackArn": "s",
      },
    }, await resp.json());
  }

  async putDeliveryChannel(
    {abortSignal, ...params}: RequestConfig & PutDeliveryChannelRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      DeliveryChannel: fromDeliveryChannel(params["DeliveryChannel"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDeliveryChannel",
    });
  }

  async putEvaluations(
    {abortSignal, ...params}: RequestConfig & PutEvaluationsRequest,
  ): Promise<PutEvaluationsResponse> {
    const body: jsonP.JSONObject = {
      Evaluations: params["Evaluations"]?.map(x => fromEvaluation(x)),
      ResultToken: params["ResultToken"],
      TestMode: params["TestMode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEvaluations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedEvaluations": [toEvaluation],
      },
    }, await resp.json());
  }

  async putOrganizationConfigRule(
    {abortSignal, ...params}: RequestConfig & PutOrganizationConfigRuleRequest,
  ): Promise<PutOrganizationConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleName: params["OrganizationConfigRuleName"],
      OrganizationManagedRuleMetadata: fromOrganizationManagedRuleMetadata(params["OrganizationManagedRuleMetadata"]),
      OrganizationCustomRuleMetadata: fromOrganizationCustomRuleMetadata(params["OrganizationCustomRuleMetadata"]),
      ExcludedAccounts: params["ExcludedAccounts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutOrganizationConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRuleArn": "s",
      },
    }, await resp.json());
  }

  async putOrganizationConformancePack(
    {abortSignal, ...params}: RequestConfig & PutOrganizationConformancePackRequest,
  ): Promise<PutOrganizationConformancePackResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackName: params["OrganizationConformancePackName"],
      TemplateS3Uri: params["TemplateS3Uri"],
      TemplateBody: params["TemplateBody"],
      DeliveryS3Bucket: params["DeliveryS3Bucket"],
      DeliveryS3KeyPrefix: params["DeliveryS3KeyPrefix"],
      ConformancePackInputParameters: params["ConformancePackInputParameters"]?.map(x => fromConformancePackInputParameter(x)),
      ExcludedAccounts: params["ExcludedAccounts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutOrganizationConformancePack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePackArn": "s",
      },
    }, await resp.json());
  }

  async putRemediationConfigurations(
    {abortSignal, ...params}: RequestConfig & PutRemediationConfigurationsRequest,
  ): Promise<PutRemediationConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      RemediationConfigurations: params["RemediationConfigurations"]?.map(x => fromRemediationConfiguration(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRemediationConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedBatches": [toFailedRemediationBatch],
      },
    }, await resp.json());
  }

  async putRemediationExceptions(
    {abortSignal, ...params}: RequestConfig & PutRemediationExceptionsRequest,
  ): Promise<PutRemediationExceptionsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromRemediationExceptionResourceKey(x)),
      Message: params["Message"],
      ExpirationTime: jsonP.serializeDate_unixTimestamp(params["ExpirationTime"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRemediationExceptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedBatches": [toFailedRemediationExceptionBatch],
      },
    }, await resp.json());
  }

  async putResourceConfig(
    {abortSignal, ...params}: RequestConfig & PutResourceConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      SchemaVersionId: params["SchemaVersionId"],
      ResourceId: params["ResourceId"],
      ResourceName: params["ResourceName"],
      Configuration: params["Configuration"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResourceConfig",
    });
  }

  async putRetentionConfiguration(
    {abortSignal, ...params}: RequestConfig & PutRetentionConfigurationRequest,
  ): Promise<PutRetentionConfigurationResponse> {
    const body: jsonP.JSONObject = {
      RetentionPeriodInDays: params["RetentionPeriodInDays"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRetentionConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionConfiguration": toRetentionConfiguration,
      },
    }, await resp.json());
  }

  async selectAggregateResourceConfig(
    {abortSignal, ...params}: RequestConfig & SelectAggregateResourceConfigRequest,
  ): Promise<SelectAggregateResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      Expression: params["Expression"],
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Limit: params["Limit"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SelectAggregateResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Results": ["s"],
        "QueryInfo": toQueryInfo,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async selectResourceConfig(
    {abortSignal, ...params}: RequestConfig & SelectResourceConfigRequest,
  ): Promise<SelectResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      Expression: params["Expression"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SelectResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Results": ["s"],
        "QueryInfo": toQueryInfo,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startConfigRulesEvaluation(
    {abortSignal, ...params}: RequestConfig & StartConfigRulesEvaluationRequest = {},
  ): Promise<StartConfigRulesEvaluationResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartConfigRulesEvaluation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & StartConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderName: params["ConfigurationRecorderName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartConfigurationRecorder",
    });
  }

  async startRemediationExecution(
    {abortSignal, ...params}: RequestConfig & StartRemediationExecutionRequest,
  ): Promise<StartRemediationExecutionResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromResourceKey(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartRemediationExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailureMessage": "s",
        "FailedItems": [toResourceKey],
      },
    }, await resp.json());
  }

  async stopConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & StopConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderName: params["ConfigurationRecorderName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopConfigurationRecorder",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

}

// refs: 1 - tags: named, input
export interface BatchGetAggregateResourceConfigRequest {
  ConfigurationAggregatorName: string;
  ResourceIdentifiers: AggregateResourceIdentifier[];
}

// refs: 1 - tags: named, input
export interface BatchGetResourceConfigRequest {
  resourceKeys: ResourceKey[];
}

// refs: 1 - tags: named, input
export interface DeleteAggregationAuthorizationRequest {
  AuthorizedAccountId: string;
  AuthorizedAwsRegion: string;
}

// refs: 1 - tags: named, input
export interface DeleteConfigRuleRequest {
  ConfigRuleName: string;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationAggregatorRequest {
  ConfigurationAggregatorName: string;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationRecorderRequest {
  ConfigurationRecorderName: string;
}

// refs: 1 - tags: named, input
export interface DeleteConformancePackRequest {
  ConformancePackName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDeliveryChannelRequest {
  DeliveryChannelName: string;
}

// refs: 1 - tags: named, input
export interface DeleteEvaluationResultsRequest {
  ConfigRuleName: string;
}

// refs: 1 - tags: named, input
export interface DeleteOrganizationConfigRuleRequest {
  OrganizationConfigRuleName: string;
}

// refs: 1 - tags: named, input
export interface DeleteOrganizationConformancePackRequest {
  OrganizationConformancePackName: string;
}

// refs: 1 - tags: named, input
export interface DeletePendingAggregationRequestRequest {
  RequesterAccountId: string;
  RequesterAwsRegion: string;
}

// refs: 1 - tags: named, input
export interface DeleteRemediationConfigurationRequest {
  ConfigRuleName: string;
  ResourceType?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteRemediationExceptionsRequest {
  ConfigRuleName: string;
  ResourceKeys: RemediationExceptionResourceKey[];
}

// refs: 1 - tags: named, input
export interface DeleteResourceConfigRequest {
  ResourceType: string;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRetentionConfigurationRequest {
  RetentionConfigurationName: string;
}

// refs: 1 - tags: named, input
export interface DeliverConfigSnapshotRequest {
  deliveryChannelName: string;
}

// refs: 1 - tags: named, input
export interface DescribeAggregateComplianceByConfigRulesRequest {
  ConfigurationAggregatorName: string;
  Filters?: ConfigRuleComplianceFilters | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAggregationAuthorizationsRequest {
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeComplianceByConfigRuleRequest {
  ConfigRuleNames?: string[] | null;
  ComplianceTypes?: ComplianceType[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeComplianceByResourceRequest {
  ResourceType?: string | null;
  ResourceId?: string | null;
  ComplianceTypes?: ComplianceType[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigRuleEvaluationStatusRequest {
  ConfigRuleNames?: string[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigRulesRequest {
  ConfigRuleNames?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationAggregatorSourcesStatusRequest {
  ConfigurationAggregatorName: string;
  UpdateStatus?: AggregatedSourceStatusType[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationAggregatorsRequest {
  ConfigurationAggregatorNames?: string[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationRecorderStatusRequest {
  ConfigurationRecorderNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeConfigurationRecordersRequest {
  ConfigurationRecorderNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeConformancePackComplianceRequest {
  ConformancePackName: string;
  Filters?: ConformancePackComplianceFilters | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConformancePackStatusRequest {
  ConformancePackNames?: string[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeConformancePacksRequest {
  ConformancePackNames?: string[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDeliveryChannelStatusRequest {
  DeliveryChannelNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeDeliveryChannelsRequest {
  DeliveryChannelNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationConfigRuleStatusesRequest {
  OrganizationConfigRuleNames?: string[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationConfigRulesRequest {
  OrganizationConfigRuleNames?: string[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationConformancePackStatusesRequest {
  OrganizationConformancePackNames?: string[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationConformancePacksRequest {
  OrganizationConformancePackNames?: string[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePendingAggregationRequestsRequest {
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeRemediationConfigurationsRequest {
  ConfigRuleNames: string[];
}

// refs: 1 - tags: named, input
export interface DescribeRemediationExceptionsRequest {
  ConfigRuleName: string;
  ResourceKeys?: RemediationExceptionResourceKey[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeRemediationExecutionStatusRequest {
  ConfigRuleName: string;
  ResourceKeys?: ResourceKey[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeRetentionConfigurationsRequest {
  RetentionConfigurationNames?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAggregateComplianceDetailsByConfigRuleRequest {
  ConfigurationAggregatorName: string;
  ConfigRuleName: string;
  AccountId: string;
  AwsRegion: string;
  ComplianceType?: ComplianceType | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAggregateConfigRuleComplianceSummaryRequest {
  ConfigurationAggregatorName: string;
  Filters?: ConfigRuleComplianceSummaryFilters | null;
  GroupByKey?: ConfigRuleComplianceSummaryGroupKey | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAggregateDiscoveredResourceCountsRequest {
  ConfigurationAggregatorName: string;
  Filters?: ResourceCountFilters | null;
  GroupByKey?: ResourceCountGroupKey | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAggregateResourceConfigRequest {
  ConfigurationAggregatorName: string;
  ResourceIdentifier: AggregateResourceIdentifier;
}

// refs: 1 - tags: named, input
export interface GetComplianceDetailsByConfigRuleRequest {
  ConfigRuleName: string;
  ComplianceTypes?: ComplianceType[] | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetComplianceDetailsByResourceRequest {
  ResourceType: string;
  ResourceId: string;
  ComplianceTypes?: ComplianceType[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetComplianceSummaryByResourceTypeRequest {
  ResourceTypes?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GetConformancePackComplianceDetailsRequest {
  ConformancePackName: string;
  Filters?: ConformancePackEvaluationFilters | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetConformancePackComplianceSummaryRequest {
  ConformancePackNames: string[];
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDiscoveredResourceCountsRequest {
  resourceTypes?: string[] | null;
  limit?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetOrganizationConfigRuleDetailedStatusRequest {
  OrganizationConfigRuleName: string;
  Filters?: StatusDetailFilters | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetOrganizationConformancePackDetailedStatusRequest {
  OrganizationConformancePackName: string;
  Filters?: OrganizationResourceDetailedStatusFilters | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetResourceConfigHistoryRequest {
  resourceType: ResourceType;
  resourceId: string;
  laterTime?: Date | number | null;
  earlierTime?: Date | number | null;
  chronologicalOrder?: ChronologicalOrder | null;
  limit?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAggregateDiscoveredResourcesRequest {
  ConfigurationAggregatorName: string;
  ResourceType: ResourceType;
  Filters?: ResourceFilters | null;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDiscoveredResourcesRequest {
  resourceType: ResourceType;
  resourceIds?: string[] | null;
  resourceName?: string | null;
  limit?: number | null;
  includeDeletedResources?: boolean | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PutAggregationAuthorizationRequest {
  AuthorizedAccountId: string;
  AuthorizedAwsRegion: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutConfigRuleRequest {
  ConfigRule: ConfigRule;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutConfigurationAggregatorRequest {
  ConfigurationAggregatorName: string;
  AccountAggregationSources?: AccountAggregationSource[] | null;
  OrganizationAggregationSource?: OrganizationAggregationSource | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutConfigurationRecorderRequest {
  ConfigurationRecorder: ConfigurationRecorder;
}

// refs: 1 - tags: named, input
export interface PutConformancePackRequest {
  ConformancePackName: string;
  TemplateS3Uri?: string | null;
  TemplateBody?: string | null;
  DeliveryS3Bucket?: string | null;
  DeliveryS3KeyPrefix?: string | null;
  ConformancePackInputParameters?: ConformancePackInputParameter[] | null;
}

// refs: 1 - tags: named, input
export interface PutDeliveryChannelRequest {
  DeliveryChannel: DeliveryChannel;
}

// refs: 1 - tags: named, input
export interface PutEvaluationsRequest {
  Evaluations?: Evaluation[] | null;
  ResultToken: string;
  TestMode?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutOrganizationConfigRuleRequest {
  OrganizationConfigRuleName: string;
  OrganizationManagedRuleMetadata?: OrganizationManagedRuleMetadata | null;
  OrganizationCustomRuleMetadata?: OrganizationCustomRuleMetadata | null;
  ExcludedAccounts?: string[] | null;
}

// refs: 1 - tags: named, input
export interface PutOrganizationConformancePackRequest {
  OrganizationConformancePackName: string;
  TemplateS3Uri?: string | null;
  TemplateBody?: string | null;
  DeliveryS3Bucket?: string | null;
  DeliveryS3KeyPrefix?: string | null;
  ConformancePackInputParameters?: ConformancePackInputParameter[] | null;
  ExcludedAccounts?: string[] | null;
}

// refs: 1 - tags: named, input
export interface PutRemediationConfigurationsRequest {
  RemediationConfigurations: RemediationConfiguration[];
}

// refs: 1 - tags: named, input
export interface PutRemediationExceptionsRequest {
  ConfigRuleName: string;
  ResourceKeys: RemediationExceptionResourceKey[];
  Message?: string | null;
  ExpirationTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface PutResourceConfigRequest {
  ResourceType: string;
  SchemaVersionId: string;
  ResourceId: string;
  ResourceName?: string | null;
  Configuration: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface PutRetentionConfigurationRequest {
  RetentionPeriodInDays: number;
}

// refs: 1 - tags: named, input
export interface SelectAggregateResourceConfigRequest {
  Expression: string;
  ConfigurationAggregatorName: string;
  Limit?: number | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface SelectResourceConfigRequest {
  Expression: string;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StartConfigRulesEvaluationRequest {
  ConfigRuleNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface StartConfigurationRecorderRequest {
  ConfigurationRecorderName: string;
}

// refs: 1 - tags: named, input
export interface StartRemediationExecutionRequest {
  ConfigRuleName: string;
  ResourceKeys: ResourceKey[];
}

// refs: 1 - tags: named, input
export interface StopConfigurationRecorderRequest {
  ConfigurationRecorderName: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, output
export interface BatchGetAggregateResourceConfigResponse {
  BaseConfigurationItems?: BaseConfigurationItem[] | null;
  UnprocessedResourceIdentifiers?: AggregateResourceIdentifier[] | null;
}

// refs: 1 - tags: named, output
export interface BatchGetResourceConfigResponse {
  baseConfigurationItems?: BaseConfigurationItem[] | null;
  unprocessedResourceKeys?: ResourceKey[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteEvaluationResultsResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRemediationConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRemediationExceptionsResponse {
  FailedBatches?: FailedDeleteRemediationExceptionsBatch[] | null;
}

// refs: 1 - tags: named, output
export interface DeliverConfigSnapshotResponse {
  configSnapshotId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAggregateComplianceByConfigRulesResponse {
  AggregateComplianceByConfigRules?: AggregateComplianceByConfigRule[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAggregationAuthorizationsResponse {
  AggregationAuthorizations?: AggregationAuthorization[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeComplianceByConfigRuleResponse {
  ComplianceByConfigRules?: ComplianceByConfigRule[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeComplianceByResourceResponse {
  ComplianceByResources?: ComplianceByResource[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigRuleEvaluationStatusResponse {
  ConfigRulesEvaluationStatus?: ConfigRuleEvaluationStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigRulesResponse {
  ConfigRules?: ConfigRule[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigurationAggregatorSourcesStatusResponse {
  AggregatedSourceStatusList?: AggregatedSourceStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigurationAggregatorsResponse {
  ConfigurationAggregators?: ConfigurationAggregator[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigurationRecorderStatusResponse {
  ConfigurationRecordersStatus?: ConfigurationRecorderStatus[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeConfigurationRecordersResponse {
  ConfigurationRecorders?: ConfigurationRecorder[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeConformancePackComplianceResponse {
  ConformancePackName: string;
  ConformancePackRuleComplianceList: ConformancePackRuleCompliance[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConformancePackStatusResponse {
  ConformancePackStatusDetails?: ConformancePackStatusDetail[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeConformancePacksResponse {
  ConformancePackDetails?: ConformancePackDetail[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDeliveryChannelStatusResponse {
  DeliveryChannelsStatus?: DeliveryChannelStatus[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeDeliveryChannelsResponse {
  DeliveryChannels?: DeliveryChannel[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationConfigRuleStatusesResponse {
  OrganizationConfigRuleStatuses?: OrganizationConfigRuleStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationConfigRulesResponse {
  OrganizationConfigRules?: OrganizationConfigRule[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationConformancePackStatusesResponse {
  OrganizationConformancePackStatuses?: OrganizationConformancePackStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationConformancePacksResponse {
  OrganizationConformancePacks?: OrganizationConformancePack[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribePendingAggregationRequestsResponse {
  PendingAggregationRequests?: PendingAggregationRequest[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRemediationConfigurationsResponse {
  RemediationConfigurations?: RemediationConfiguration[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeRemediationExceptionsResponse {
  RemediationExceptions?: RemediationException[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRemediationExecutionStatusResponse {
  RemediationExecutionStatuses?: RemediationExecutionStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRetentionConfigurationsResponse {
  RetentionConfigurations?: RetentionConfiguration[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAggregateComplianceDetailsByConfigRuleResponse {
  AggregateEvaluationResults?: AggregateEvaluationResult[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAggregateConfigRuleComplianceSummaryResponse {
  GroupByKey?: string | null;
  AggregateComplianceCounts?: AggregateComplianceCount[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAggregateDiscoveredResourceCountsResponse {
  TotalDiscoveredResources: number;
  GroupByKey?: string | null;
  GroupedResourceCounts?: GroupedResourceCount[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAggregateResourceConfigResponse {
  ConfigurationItem?: ConfigurationItem | null;
}

// refs: 1 - tags: named, output
export interface GetComplianceDetailsByConfigRuleResponse {
  EvaluationResults?: EvaluationResult[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetComplianceDetailsByResourceResponse {
  EvaluationResults?: EvaluationResult[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetComplianceSummaryByConfigRuleResponse {
  ComplianceSummary?: ComplianceSummary | null;
}

// refs: 1 - tags: named, output
export interface GetComplianceSummaryByResourceTypeResponse {
  ComplianceSummariesByResourceType?: ComplianceSummaryByResourceType[] | null;
}

// refs: 1 - tags: named, output
export interface GetConformancePackComplianceDetailsResponse {
  ConformancePackName: string;
  ConformancePackRuleEvaluationResults?: ConformancePackEvaluationResult[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetConformancePackComplianceSummaryResponse {
  ConformancePackComplianceSummaryList?: ConformancePackComplianceSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDiscoveredResourceCountsResponse {
  totalDiscoveredResources?: number | null;
  resourceCounts?: ResourceCount[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOrganizationConfigRuleDetailedStatusResponse {
  OrganizationConfigRuleDetailedStatus?: MemberAccountStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOrganizationConformancePackDetailedStatusResponse {
  OrganizationConformancePackDetailedStatuses?: OrganizationConformancePackDetailedStatus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourceConfigHistoryResponse {
  configurationItems?: ConfigurationItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAggregateDiscoveredResourcesResponse {
  ResourceIdentifiers?: AggregateResourceIdentifier[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDiscoveredResourcesResponse {
  resourceIdentifiers?: ResourceIdentifier[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutAggregationAuthorizationResponse {
  AggregationAuthorization?: AggregationAuthorization | null;
}

// refs: 1 - tags: named, output
export interface PutConfigurationAggregatorResponse {
  ConfigurationAggregator?: ConfigurationAggregator | null;
}

// refs: 1 - tags: named, output
export interface PutConformancePackResponse {
  ConformancePackArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutEvaluationsResponse {
  FailedEvaluations?: Evaluation[] | null;
}

// refs: 1 - tags: named, output
export interface PutOrganizationConfigRuleResponse {
  OrganizationConfigRuleArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutOrganizationConformancePackResponse {
  OrganizationConformancePackArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutRemediationConfigurationsResponse {
  FailedBatches?: FailedRemediationBatch[] | null;
}

// refs: 1 - tags: named, output
export interface PutRemediationExceptionsResponse {
  FailedBatches?: FailedRemediationExceptionBatch[] | null;
}

// refs: 1 - tags: named, output
export interface PutRetentionConfigurationResponse {
  RetentionConfiguration?: RetentionConfiguration | null;
}

// refs: 1 - tags: named, output
export interface SelectAggregateResourceConfigResponse {
  Results?: string[] | null;
  QueryInfo?: QueryInfo | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SelectResourceConfigResponse {
  Results?: string[] | null;
  QueryInfo?: QueryInfo | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartConfigRulesEvaluationResponse {
}

// refs: 1 - tags: named, output
export interface StartRemediationExecutionResponse {
  FailureMessage?: string | null;
  FailedItems?: ResourceKey[] | null;
}

// refs: 4 - tags: input, named, interface, output
export interface AggregateResourceIdentifier {
  SourceAccountId: string;
  SourceRegion: string;
  ResourceId: string;
  ResourceType: ResourceType;
  ResourceName?: string | null;
}
function fromAggregateResourceIdentifier(input?: AggregateResourceIdentifier | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SourceAccountId: input["SourceAccountId"],
    SourceRegion: input["SourceRegion"],
    ResourceId: input["ResourceId"],
    ResourceType: input["ResourceType"],
    ResourceName: input["ResourceName"],
  }
}
function toAggregateResourceIdentifier(root: jsonP.JSONValue): AggregateResourceIdentifier {
  return jsonP.readObj({
    required: {
      "SourceAccountId": "s",
      "SourceRegion": "s",
      "ResourceId": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
    },
    optional: {
      "ResourceName": "s",
    },
  }, root);
}

// refs: 24 - tags: input, named, enum, output
export type ResourceType =
| "AWS::EC2::CustomerGateway"
| "AWS::EC2::EIP"
| "AWS::EC2::Host"
| "AWS::EC2::Instance"
| "AWS::EC2::InternetGateway"
| "AWS::EC2::NetworkAcl"
| "AWS::EC2::NetworkInterface"
| "AWS::EC2::RouteTable"
| "AWS::EC2::SecurityGroup"
| "AWS::EC2::Subnet"
| "AWS::CloudTrail::Trail"
| "AWS::EC2::Volume"
| "AWS::EC2::VPC"
| "AWS::EC2::VPNConnection"
| "AWS::EC2::VPNGateway"
| "AWS::EC2::RegisteredHAInstance"
| "AWS::EC2::NatGateway"
| "AWS::EC2::EgressOnlyInternetGateway"
| "AWS::EC2::VPCEndpoint"
| "AWS::EC2::VPCEndpointService"
| "AWS::EC2::FlowLog"
| "AWS::EC2::VPCPeeringConnection"
| "AWS::Elasticsearch::Domain"
| "AWS::IAM::Group"
| "AWS::IAM::Policy"
| "AWS::IAM::Role"
| "AWS::IAM::User"
| "AWS::ElasticLoadBalancingV2::LoadBalancer"
| "AWS::ACM::Certificate"
| "AWS::RDS::DBInstance"
| "AWS::RDS::DBSubnetGroup"
| "AWS::RDS::DBSecurityGroup"
| "AWS::RDS::DBSnapshot"
| "AWS::RDS::DBCluster"
| "AWS::RDS::DBClusterSnapshot"
| "AWS::RDS::EventSubscription"
| "AWS::S3::Bucket"
| "AWS::S3::AccountPublicAccessBlock"
| "AWS::Redshift::Cluster"
| "AWS::Redshift::ClusterSnapshot"
| "AWS::Redshift::ClusterParameterGroup"
| "AWS::Redshift::ClusterSecurityGroup"
| "AWS::Redshift::ClusterSubnetGroup"
| "AWS::Redshift::EventSubscription"
| "AWS::SSM::ManagedInstanceInventory"
| "AWS::CloudWatch::Alarm"
| "AWS::CloudFormation::Stack"
| "AWS::ElasticLoadBalancing::LoadBalancer"
| "AWS::AutoScaling::AutoScalingGroup"
| "AWS::AutoScaling::LaunchConfiguration"
| "AWS::AutoScaling::ScalingPolicy"
| "AWS::AutoScaling::ScheduledAction"
| "AWS::DynamoDB::Table"
| "AWS::CodeBuild::Project"
| "AWS::WAF::RateBasedRule"
| "AWS::WAF::Rule"
| "AWS::WAF::RuleGroup"
| "AWS::WAF::WebACL"
| "AWS::WAFRegional::RateBasedRule"
| "AWS::WAFRegional::Rule"
| "AWS::WAFRegional::RuleGroup"
| "AWS::WAFRegional::WebACL"
| "AWS::CloudFront::Distribution"
| "AWS::CloudFront::StreamingDistribution"
| "AWS::Lambda::Function"
| "AWS::ElasticBeanstalk::Application"
| "AWS::ElasticBeanstalk::ApplicationVersion"
| "AWS::ElasticBeanstalk::Environment"
| "AWS::WAFv2::WebACL"
| "AWS::WAFv2::RuleGroup"
| "AWS::WAFv2::IPSet"
| "AWS::WAFv2::RegexPatternSet"
| "AWS::WAFv2::ManagedRuleSet"
| "AWS::XRay::EncryptionConfig"
| "AWS::SSM::AssociationCompliance"
| "AWS::SSM::PatchCompliance"
| "AWS::Shield::Protection"
| "AWS::ShieldRegional::Protection"
| "AWS::Config::ResourceCompliance"
| "AWS::ApiGateway::Stage"
| "AWS::ApiGateway::RestApi"
| "AWS::ApiGatewayV2::Stage"
| "AWS::ApiGatewayV2::Api"
| "AWS::CodePipeline::Pipeline"
| "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
| "AWS::ServiceCatalog::CloudFormationProduct"
| "AWS::ServiceCatalog::Portfolio"
| "AWS::SQS::Queue"
| "AWS::KMS::Key"
| "AWS::QLDB::Ledger"
| "AWS::SecretsManager::Secret"
| "AWS::SNS::Topic"
| "AWS::SSM::FileData"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface ResourceKey {
  resourceType: ResourceType;
  resourceId: string;
}
function fromResourceKey(input?: ResourceKey | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    resourceType: input["resourceType"],
    resourceId: input["resourceId"],
  }
}
function toResourceKey(root: jsonP.JSONValue): ResourceKey {
  return jsonP.readObj({
    required: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "resourceId": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface RemediationExceptionResourceKey {
  ResourceType?: string | null;
  ResourceId?: string | null;
}
function fromRemediationExceptionResourceKey(input?: RemediationExceptionResourceKey | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceType: input["ResourceType"],
    ResourceId: input["ResourceId"],
  }
}
function toRemediationExceptionResourceKey(root: jsonP.JSONValue): RemediationExceptionResourceKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ResourceId": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ConfigRuleComplianceFilters {
  ConfigRuleName?: string | null;
  ComplianceType?: ComplianceType | null;
  AccountId?: string | null;
  AwsRegion?: string | null;
}
function fromConfigRuleComplianceFilters(input?: ConfigRuleComplianceFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleName: input["ConfigRuleName"],
    ComplianceType: input["ComplianceType"],
    AccountId: input["AccountId"],
    AwsRegion: input["AwsRegion"],
  }
}

// refs: 14 - tags: input, named, enum, output
export type ComplianceType =
| "COMPLIANT"
| "NON_COMPLIANT"
| "NOT_APPLICABLE"
| "INSUFFICIENT_DATA"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type AggregatedSourceStatusType =
| "FAILED"
| "SUCCEEDED"
| "OUTDATED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ConformancePackComplianceFilters {
  ConfigRuleNames?: string[] | null;
  ComplianceType?: ConformancePackComplianceType | null;
}
function fromConformancePackComplianceFilters(input?: ConformancePackComplianceFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleNames: input["ConfigRuleNames"],
    ComplianceType: input["ComplianceType"],
  }
}

// refs: 5 - tags: input, named, enum, output
export type ConformancePackComplianceType =
| "COMPLIANT"
| "NON_COMPLIANT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ConfigRuleComplianceSummaryFilters {
  AccountId?: string | null;
  AwsRegion?: string | null;
}
function fromConfigRuleComplianceSummaryFilters(input?: ConfigRuleComplianceSummaryFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    AwsRegion: input["AwsRegion"],
  }
}

// refs: 1 - tags: input, named, enum
export type ConfigRuleComplianceSummaryGroupKey =
| "ACCOUNT_ID"
| "AWS_REGION"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ResourceCountFilters {
  ResourceType?: ResourceType | null;
  AccountId?: string | null;
  Region?: string | null;
}
function fromResourceCountFilters(input?: ResourceCountFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceType: input["ResourceType"],
    AccountId: input["AccountId"],
    Region: input["Region"],
  }
}

// refs: 1 - tags: input, named, enum
export type ResourceCountGroupKey =
| "RESOURCE_TYPE"
| "ACCOUNT_ID"
| "AWS_REGION"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ConformancePackEvaluationFilters {
  ConfigRuleNames?: string[] | null;
  ComplianceType?: ConformancePackComplianceType | null;
  ResourceType?: string | null;
  ResourceIds?: string[] | null;
}
function fromConformancePackEvaluationFilters(input?: ConformancePackEvaluationFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleNames: input["ConfigRuleNames"],
    ComplianceType: input["ComplianceType"],
    ResourceType: input["ResourceType"],
    ResourceIds: input["ResourceIds"],
  }
}

// refs: 1 - tags: input, named, interface
export interface StatusDetailFilters {
  AccountId?: string | null;
  MemberAccountRuleStatus?: MemberAccountRuleStatus | null;
}
function fromStatusDetailFilters(input?: StatusDetailFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    MemberAccountRuleStatus: input["MemberAccountRuleStatus"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type MemberAccountRuleStatus =
| "CREATE_SUCCESSFUL"
| "CREATE_IN_PROGRESS"
| "CREATE_FAILED"
| "DELETE_SUCCESSFUL"
| "DELETE_FAILED"
| "DELETE_IN_PROGRESS"
| "UPDATE_SUCCESSFUL"
| "UPDATE_IN_PROGRESS"
| "UPDATE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface OrganizationResourceDetailedStatusFilters {
  AccountId?: string | null;
  Status?: OrganizationResourceDetailedStatus | null;
}
function fromOrganizationResourceDetailedStatusFilters(input?: OrganizationResourceDetailedStatusFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    Status: input["Status"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type OrganizationResourceDetailedStatus =
| "CREATE_SUCCESSFUL"
| "CREATE_IN_PROGRESS"
| "CREATE_FAILED"
| "DELETE_SUCCESSFUL"
| "DELETE_FAILED"
| "DELETE_IN_PROGRESS"
| "UPDATE_SUCCESSFUL"
| "UPDATE_IN_PROGRESS"
| "UPDATE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ChronologicalOrder =
| "Reverse"
| "Forward"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ResourceFilters {
  AccountId?: string | null;
  ResourceId?: string | null;
  ResourceName?: string | null;
  Region?: string | null;
}
function fromResourceFilters(input?: ResourceFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    ResourceId: input["ResourceId"],
    ResourceName: input["ResourceName"],
    Region: input["Region"],
  }
}

// refs: 5 - tags: input, named, interface, output
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ConfigRule {
  ConfigRuleName?: string | null;
  ConfigRuleArn?: string | null;
  ConfigRuleId?: string | null;
  Description?: string | null;
  Scope?: Scope | null;
  Source: Source;
  InputParameters?: string | null;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | null;
  ConfigRuleState?: ConfigRuleState | null;
  CreatedBy?: string | null;
}
function fromConfigRule(input?: ConfigRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleName: input["ConfigRuleName"],
    ConfigRuleArn: input["ConfigRuleArn"],
    ConfigRuleId: input["ConfigRuleId"],
    Description: input["Description"],
    Scope: fromScope(input["Scope"]),
    Source: fromSource(input["Source"]),
    InputParameters: input["InputParameters"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
    ConfigRuleState: input["ConfigRuleState"],
    CreatedBy: input["CreatedBy"],
  }
}
function toConfigRule(root: jsonP.JSONValue): ConfigRule {
  return jsonP.readObj({
    required: {
      "Source": toSource,
    },
    optional: {
      "ConfigRuleName": "s",
      "ConfigRuleArn": "s",
      "ConfigRuleId": "s",
      "Description": "s",
      "Scope": toScope,
      "InputParameters": "s",
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<MaximumExecutionFrequency>(x),
      "ConfigRuleState": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigRuleState>(x),
      "CreatedBy": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Scope {
  ComplianceResourceTypes?: string[] | null;
  TagKey?: string | null;
  TagValue?: string | null;
  ComplianceResourceId?: string | null;
}
function fromScope(input?: Scope | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ComplianceResourceTypes: input["ComplianceResourceTypes"],
    TagKey: input["TagKey"],
    TagValue: input["TagValue"],
    ComplianceResourceId: input["ComplianceResourceId"],
  }
}
function toScope(root: jsonP.JSONValue): Scope {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceResourceTypes": ["s"],
      "TagKey": "s",
      "TagValue": "s",
      "ComplianceResourceId": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Source {
  Owner: Owner;
  SourceIdentifier: string;
  SourceDetails?: SourceDetail[] | null;
}
function fromSource(input?: Source | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Owner: input["Owner"],
    SourceIdentifier: input["SourceIdentifier"],
    SourceDetails: input["SourceDetails"]?.map(x => fromSourceDetail(x)),
  }
}
function toSource(root: jsonP.JSONValue): Source {
  return jsonP.readObj({
    required: {
      "Owner": (x: jsonP.JSONValue) => cmnP.readEnum<Owner>(x),
      "SourceIdentifier": "s",
    },
    optional: {
      "SourceDetails": [toSourceDetail],
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type Owner =
| "CUSTOM_LAMBDA"
| "AWS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface SourceDetail {
  EventSource?: EventSource | null;
  MessageType?: MessageType | null;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | null;
}
function fromSourceDetail(input?: SourceDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EventSource: input["EventSource"],
    MessageType: input["MessageType"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
  }
}
function toSourceDetail(root: jsonP.JSONValue): SourceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventSource": (x: jsonP.JSONValue) => cmnP.readEnum<EventSource>(x),
      "MessageType": (x: jsonP.JSONValue) => cmnP.readEnum<MessageType>(x),
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<MaximumExecutionFrequency>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type EventSource =
| "aws.config"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type MessageType =
| "ConfigurationItemChangeNotification"
| "ConfigurationSnapshotDeliveryCompleted"
| "ScheduledNotification"
| "OversizedConfigurationItemChangeNotification"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: input, named, enum, output
export type MaximumExecutionFrequency =
| "One_Hour"
| "Three_Hours"
| "Six_Hours"
| "Twelve_Hours"
| "TwentyFour_Hours"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ConfigRuleState =
| "ACTIVE"
| "DELETING"
| "DELETING_RESULTS"
| "EVALUATING"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface AccountAggregationSource {
  AccountIds: string[];
  AllAwsRegions?: boolean | null;
  AwsRegions?: string[] | null;
}
function fromAccountAggregationSource(input?: AccountAggregationSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountIds: input["AccountIds"],
    AllAwsRegions: input["AllAwsRegions"],
    AwsRegions: input["AwsRegions"],
  }
}
function toAccountAggregationSource(root: jsonP.JSONValue): AccountAggregationSource {
  return jsonP.readObj({
    required: {
      "AccountIds": ["s"],
    },
    optional: {
      "AllAwsRegions": "b",
      "AwsRegions": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OrganizationAggregationSource {
  RoleArn: string;
  AwsRegions?: string[] | null;
  AllAwsRegions?: boolean | null;
}
function fromOrganizationAggregationSource(input?: OrganizationAggregationSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    AwsRegions: input["AwsRegions"],
    AllAwsRegions: input["AllAwsRegions"],
  }
}
function toOrganizationAggregationSource(root: jsonP.JSONValue): OrganizationAggregationSource {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
    },
    optional: {
      "AwsRegions": ["s"],
      "AllAwsRegions": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ConfigurationRecorder {
  name?: string | null;
  roleARN?: string | null;
  recordingGroup?: RecordingGroup | null;
}
function fromConfigurationRecorder(input?: ConfigurationRecorder | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    roleARN: input["roleARN"],
    recordingGroup: fromRecordingGroup(input["recordingGroup"]),
  }
}
function toConfigurationRecorder(root: jsonP.JSONValue): ConfigurationRecorder {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "roleARN": "s",
      "recordingGroup": toRecordingGroup,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface RecordingGroup {
  allSupported?: boolean | null;
  includeGlobalResourceTypes?: boolean | null;
  resourceTypes?: ResourceType[] | null;
}
function fromRecordingGroup(input?: RecordingGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    allSupported: input["allSupported"],
    includeGlobalResourceTypes: input["includeGlobalResourceTypes"],
    resourceTypes: input["resourceTypes"],
  }
}
function toRecordingGroup(root: jsonP.JSONValue): RecordingGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "allSupported": "b",
      "includeGlobalResourceTypes": "b",
      "resourceTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x)],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ConformancePackInputParameter {
  ParameterName: string;
  ParameterValue: string;
}
function fromConformancePackInputParameter(input?: ConformancePackInputParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ParameterName: input["ParameterName"],
    ParameterValue: input["ParameterValue"],
  }
}
function toConformancePackInputParameter(root: jsonP.JSONValue): ConformancePackInputParameter {
  return jsonP.readObj({
    required: {
      "ParameterName": "s",
      "ParameterValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DeliveryChannel {
  name?: string | null;
  s3BucketName?: string | null;
  s3KeyPrefix?: string | null;
  snsTopicARN?: string | null;
  configSnapshotDeliveryProperties?: ConfigSnapshotDeliveryProperties | null;
}
function fromDeliveryChannel(input?: DeliveryChannel | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    s3BucketName: input["s3BucketName"],
    s3KeyPrefix: input["s3KeyPrefix"],
    snsTopicARN: input["snsTopicARN"],
    configSnapshotDeliveryProperties: fromConfigSnapshotDeliveryProperties(input["configSnapshotDeliveryProperties"]),
  }
}
function toDeliveryChannel(root: jsonP.JSONValue): DeliveryChannel {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "s3BucketName": "s",
      "s3KeyPrefix": "s",
      "snsTopicARN": "s",
      "configSnapshotDeliveryProperties": toConfigSnapshotDeliveryProperties,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ConfigSnapshotDeliveryProperties {
  deliveryFrequency?: MaximumExecutionFrequency | null;
}
function fromConfigSnapshotDeliveryProperties(input?: ConfigSnapshotDeliveryProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deliveryFrequency: input["deliveryFrequency"],
  }
}
function toConfigSnapshotDeliveryProperties(root: jsonP.JSONValue): ConfigSnapshotDeliveryProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "deliveryFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<MaximumExecutionFrequency>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Evaluation {
  ComplianceResourceType: string;
  ComplianceResourceId: string;
  ComplianceType: ComplianceType;
  Annotation?: string | null;
  OrderingTimestamp: Date | number;
}
function fromEvaluation(input?: Evaluation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ComplianceResourceType: input["ComplianceResourceType"],
    ComplianceResourceId: input["ComplianceResourceId"],
    ComplianceType: input["ComplianceType"],
    Annotation: input["Annotation"],
    OrderingTimestamp: jsonP.serializeDate_unixTimestamp(input["OrderingTimestamp"]),
  }
}
function toEvaluation(root: jsonP.JSONValue): Evaluation {
  return jsonP.readObj({
    required: {
      "ComplianceResourceType": "s",
      "ComplianceResourceId": "s",
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceType>(x),
      "OrderingTimestamp": "d",
    },
    optional: {
      "Annotation": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface OrganizationManagedRuleMetadata {
  Description?: string | null;
  RuleIdentifier: string;
  InputParameters?: string | null;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | null;
  ResourceTypesScope?: string[] | null;
  ResourceIdScope?: string | null;
  TagKeyScope?: string | null;
  TagValueScope?: string | null;
}
function fromOrganizationManagedRuleMetadata(input?: OrganizationManagedRuleMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Description: input["Description"],
    RuleIdentifier: input["RuleIdentifier"],
    InputParameters: input["InputParameters"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
    ResourceTypesScope: input["ResourceTypesScope"],
    ResourceIdScope: input["ResourceIdScope"],
    TagKeyScope: input["TagKeyScope"],
    TagValueScope: input["TagValueScope"],
  }
}
function toOrganizationManagedRuleMetadata(root: jsonP.JSONValue): OrganizationManagedRuleMetadata {
  return jsonP.readObj({
    required: {
      "RuleIdentifier": "s",
    },
    optional: {
      "Description": "s",
      "InputParameters": "s",
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<MaximumExecutionFrequency>(x),
      "ResourceTypesScope": ["s"],
      "ResourceIdScope": "s",
      "TagKeyScope": "s",
      "TagValueScope": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface OrganizationCustomRuleMetadata {
  Description?: string | null;
  LambdaFunctionArn: string;
  OrganizationConfigRuleTriggerTypes: OrganizationConfigRuleTriggerType[];
  InputParameters?: string | null;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | null;
  ResourceTypesScope?: string[] | null;
  ResourceIdScope?: string | null;
  TagKeyScope?: string | null;
  TagValueScope?: string | null;
}
function fromOrganizationCustomRuleMetadata(input?: OrganizationCustomRuleMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Description: input["Description"],
    LambdaFunctionArn: input["LambdaFunctionArn"],
    OrganizationConfigRuleTriggerTypes: input["OrganizationConfigRuleTriggerTypes"],
    InputParameters: input["InputParameters"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
    ResourceTypesScope: input["ResourceTypesScope"],
    ResourceIdScope: input["ResourceIdScope"],
    TagKeyScope: input["TagKeyScope"],
    TagValueScope: input["TagValueScope"],
  }
}
function toOrganizationCustomRuleMetadata(root: jsonP.JSONValue): OrganizationCustomRuleMetadata {
  return jsonP.readObj({
    required: {
      "LambdaFunctionArn": "s",
      "OrganizationConfigRuleTriggerTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<OrganizationConfigRuleTriggerType>(x)],
    },
    optional: {
      "Description": "s",
      "InputParameters": "s",
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<MaximumExecutionFrequency>(x),
      "ResourceTypesScope": ["s"],
      "ResourceIdScope": "s",
      "TagKeyScope": "s",
      "TagValueScope": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type OrganizationConfigRuleTriggerType =
| "ConfigurationItemChangeNotification"
| "OversizedConfigurationItemChangeNotification"
| "ScheduledNotification"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface RemediationConfiguration {
  ConfigRuleName: string;
  TargetType: RemediationTargetType;
  TargetId: string;
  TargetVersion?: string | null;
  Parameters?: { [key: string]: RemediationParameterValue | null | undefined } | null;
  ResourceType?: string | null;
  Automatic?: boolean | null;
  ExecutionControls?: ExecutionControls | null;
  MaximumAutomaticAttempts?: number | null;
  RetryAttemptSeconds?: number | null;
  Arn?: string | null;
  CreatedByService?: string | null;
}
function fromRemediationConfiguration(input?: RemediationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleName: input["ConfigRuleName"],
    TargetType: input["TargetType"],
    TargetId: input["TargetId"],
    TargetVersion: input["TargetVersion"],
    Parameters: jsonP.serializeMap(input["Parameters"], x => fromRemediationParameterValue(x)),
    ResourceType: input["ResourceType"],
    Automatic: input["Automatic"],
    ExecutionControls: fromExecutionControls(input["ExecutionControls"]),
    MaximumAutomaticAttempts: input["MaximumAutomaticAttempts"],
    RetryAttemptSeconds: input["RetryAttemptSeconds"],
    Arn: input["Arn"],
    CreatedByService: input["CreatedByService"],
  }
}
function toRemediationConfiguration(root: jsonP.JSONValue): RemediationConfiguration {
  return jsonP.readObj({
    required: {
      "ConfigRuleName": "s",
      "TargetType": (x: jsonP.JSONValue) => cmnP.readEnum<RemediationTargetType>(x),
      "TargetId": "s",
    },
    optional: {
      "TargetVersion": "s",
      "Parameters": x => jsonP.readMap(String, toRemediationParameterValue, x),
      "ResourceType": "s",
      "Automatic": "b",
      "ExecutionControls": toExecutionControls,
      "MaximumAutomaticAttempts": "n",
      "RetryAttemptSeconds": "n",
      "Arn": "s",
      "CreatedByService": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type RemediationTargetType =
| "SSM_DOCUMENT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface RemediationParameterValue {
  ResourceValue?: ResourceValue | null;
  StaticValue?: StaticValue | null;
}
function fromRemediationParameterValue(input?: RemediationParameterValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceValue: fromResourceValue(input["ResourceValue"]),
    StaticValue: fromStaticValue(input["StaticValue"]),
  }
}
function toRemediationParameterValue(root: jsonP.JSONValue): RemediationParameterValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceValue": toResourceValue,
      "StaticValue": toStaticValue,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ResourceValue {
  Value: ResourceValueType;
}
function fromResourceValue(input?: ResourceValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Value: input["Value"],
  }
}
function toResourceValue(root: jsonP.JSONValue): ResourceValue {
  return jsonP.readObj({
    required: {
      "Value": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceValueType>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ResourceValueType =
| "RESOURCE_ID"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface StaticValue {
  Values: string[];
}
function fromStaticValue(input?: StaticValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Values: input["Values"],
  }
}
function toStaticValue(root: jsonP.JSONValue): StaticValue {
  return jsonP.readObj({
    required: {
      "Values": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ExecutionControls {
  SsmControls?: SsmControls | null;
}
function fromExecutionControls(input?: ExecutionControls | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SsmControls: fromSsmControls(input["SsmControls"]),
  }
}
function toExecutionControls(root: jsonP.JSONValue): ExecutionControls {
  return jsonP.readObj({
    required: {},
    optional: {
      "SsmControls": toSsmControls,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SsmControls {
  ConcurrentExecutionRatePercentage?: number | null;
  ErrorPercentage?: number | null;
}
function fromSsmControls(input?: SsmControls | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConcurrentExecutionRatePercentage: input["ConcurrentExecutionRatePercentage"],
    ErrorPercentage: input["ErrorPercentage"],
  }
}
function toSsmControls(root: jsonP.JSONValue): SsmControls {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConcurrentExecutionRatePercentage": "n",
      "ErrorPercentage": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BaseConfigurationItem {
  version?: string | null;
  accountId?: string | null;
  configurationItemCaptureTime?: Date | number | null;
  configurationItemStatus?: ConfigurationItemStatus | null;
  configurationStateId?: string | null;
  arn?: string | null;
  resourceType?: ResourceType | null;
  resourceId?: string | null;
  resourceName?: string | null;
  awsRegion?: string | null;
  availabilityZone?: string | null;
  resourceCreationTime?: Date | number | null;
  configuration?: string | null;
  supplementaryConfiguration?: { [key: string]: string | null | undefined } | null;
}
function toBaseConfigurationItem(root: jsonP.JSONValue): BaseConfigurationItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "version": "s",
      "accountId": "s",
      "configurationItemCaptureTime": "d",
      "configurationItemStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationItemStatus>(x),
      "configurationStateId": "s",
      "arn": "s",
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "awsRegion": "s",
      "availabilityZone": "s",
      "resourceCreationTime": "d",
      "configuration": "s",
      "supplementaryConfiguration": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type ConfigurationItemStatus =
| "OK"
| "ResourceDiscovered"
| "ResourceNotRecorded"
| "ResourceDeleted"
| "ResourceDeletedNotRecorded"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface FailedDeleteRemediationExceptionsBatch {
  FailureMessage?: string | null;
  FailedItems?: RemediationExceptionResourceKey[] | null;
}
function toFailedDeleteRemediationExceptionsBatch(root: jsonP.JSONValue): FailedDeleteRemediationExceptionsBatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailureMessage": "s",
      "FailedItems": [toRemediationExceptionResourceKey],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AggregateComplianceByConfigRule {
  ConfigRuleName?: string | null;
  Compliance?: Compliance | null;
  AccountId?: string | null;
  AwsRegion?: string | null;
}
function toAggregateComplianceByConfigRule(root: jsonP.JSONValue): AggregateComplianceByConfigRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "Compliance": toCompliance,
      "AccountId": "s",
      "AwsRegion": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Compliance {
  ComplianceType?: ComplianceType | null;
  ComplianceContributorCount?: ComplianceContributorCount | null;
}
function toCompliance(root: jsonP.JSONValue): Compliance {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceType>(x),
      "ComplianceContributorCount": toComplianceContributorCount,
    },
  }, root);
}

// refs: 9 - tags: output, named, interface
export interface ComplianceContributorCount {
  CappedCount?: number | null;
  CapExceeded?: boolean | null;
}
function toComplianceContributorCount(root: jsonP.JSONValue): ComplianceContributorCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "CappedCount": "n",
      "CapExceeded": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AggregationAuthorization {
  AggregationAuthorizationArn?: string | null;
  AuthorizedAccountId?: string | null;
  AuthorizedAwsRegion?: string | null;
  CreationTime?: Date | number | null;
}
function toAggregationAuthorization(root: jsonP.JSONValue): AggregationAuthorization {
  return jsonP.readObj({
    required: {},
    optional: {
      "AggregationAuthorizationArn": "s",
      "AuthorizedAccountId": "s",
      "AuthorizedAwsRegion": "s",
      "CreationTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComplianceByConfigRule {
  ConfigRuleName?: string | null;
  Compliance?: Compliance | null;
}
function toComplianceByConfigRule(root: jsonP.JSONValue): ComplianceByConfigRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "Compliance": toCompliance,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComplianceByResource {
  ResourceType?: string | null;
  ResourceId?: string | null;
  Compliance?: Compliance | null;
}
function toComplianceByResource(root: jsonP.JSONValue): ComplianceByResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ResourceId": "s",
      "Compliance": toCompliance,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConfigRuleEvaluationStatus {
  ConfigRuleName?: string | null;
  ConfigRuleArn?: string | null;
  ConfigRuleId?: string | null;
  LastSuccessfulInvocationTime?: Date | number | null;
  LastFailedInvocationTime?: Date | number | null;
  LastSuccessfulEvaluationTime?: Date | number | null;
  LastFailedEvaluationTime?: Date | number | null;
  FirstActivatedTime?: Date | number | null;
  LastDeactivatedTime?: Date | number | null;
  LastErrorCode?: string | null;
  LastErrorMessage?: string | null;
  FirstEvaluationStarted?: boolean | null;
}
function toConfigRuleEvaluationStatus(root: jsonP.JSONValue): ConfigRuleEvaluationStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "ConfigRuleArn": "s",
      "ConfigRuleId": "s",
      "LastSuccessfulInvocationTime": "d",
      "LastFailedInvocationTime": "d",
      "LastSuccessfulEvaluationTime": "d",
      "LastFailedEvaluationTime": "d",
      "FirstActivatedTime": "d",
      "LastDeactivatedTime": "d",
      "LastErrorCode": "s",
      "LastErrorMessage": "s",
      "FirstEvaluationStarted": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AggregatedSourceStatus {
  SourceId?: string | null;
  SourceType?: AggregatedSourceType | null;
  AwsRegion?: string | null;
  LastUpdateStatus?: AggregatedSourceStatusType | null;
  LastUpdateTime?: Date | number | null;
  LastErrorCode?: string | null;
  LastErrorMessage?: string | null;
}
function toAggregatedSourceStatus(root: jsonP.JSONValue): AggregatedSourceStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "SourceId": "s",
      "SourceType": (x: jsonP.JSONValue) => cmnP.readEnum<AggregatedSourceType>(x),
      "AwsRegion": "s",
      "LastUpdateStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AggregatedSourceStatusType>(x),
      "LastUpdateTime": "d",
      "LastErrorCode": "s",
      "LastErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AggregatedSourceType =
| "ACCOUNT"
| "ORGANIZATION"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ConfigurationAggregator {
  ConfigurationAggregatorName?: string | null;
  ConfigurationAggregatorArn?: string | null;
  AccountAggregationSources?: AccountAggregationSource[] | null;
  OrganizationAggregationSource?: OrganizationAggregationSource | null;
  CreationTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
  CreatedBy?: string | null;
}
function toConfigurationAggregator(root: jsonP.JSONValue): ConfigurationAggregator {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationAggregatorName": "s",
      "ConfigurationAggregatorArn": "s",
      "AccountAggregationSources": [toAccountAggregationSource],
      "OrganizationAggregationSource": toOrganizationAggregationSource,
      "CreationTime": "d",
      "LastUpdatedTime": "d",
      "CreatedBy": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConfigurationRecorderStatus {
  name?: string | null;
  lastStartTime?: Date | number | null;
  lastStopTime?: Date | number | null;
  recording?: boolean | null;
  lastStatus?: RecorderStatus | null;
  lastErrorCode?: string | null;
  lastErrorMessage?: string | null;
  lastStatusChangeTime?: Date | number | null;
}
function toConfigurationRecorderStatus(root: jsonP.JSONValue): ConfigurationRecorderStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "lastStartTime": "d",
      "lastStopTime": "d",
      "recording": "b",
      "lastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<RecorderStatus>(x),
      "lastErrorCode": "s",
      "lastErrorMessage": "s",
      "lastStatusChangeTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RecorderStatus =
| "Pending"
| "Success"
| "Failure"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConformancePackRuleCompliance {
  ConfigRuleName?: string | null;
  ComplianceType?: ConformancePackComplianceType | null;
}
function toConformancePackRuleCompliance(root: jsonP.JSONValue): ConformancePackRuleCompliance {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<ConformancePackComplianceType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConformancePackStatusDetail {
  ConformancePackName: string;
  ConformancePackId: string;
  ConformancePackArn: string;
  ConformancePackState: ConformancePackState;
  StackArn: string;
  ConformancePackStatusReason?: string | null;
  LastUpdateRequestedTime: Date | number;
  LastUpdateCompletedTime?: Date | number | null;
}
function toConformancePackStatusDetail(root: jsonP.JSONValue): ConformancePackStatusDetail {
  return jsonP.readObj({
    required: {
      "ConformancePackName": "s",
      "ConformancePackId": "s",
      "ConformancePackArn": "s",
      "ConformancePackState": (x: jsonP.JSONValue) => cmnP.readEnum<ConformancePackState>(x),
      "StackArn": "s",
      "LastUpdateRequestedTime": "d",
    },
    optional: {
      "ConformancePackStatusReason": "s",
      "LastUpdateCompletedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ConformancePackState =
| "CREATE_IN_PROGRESS"
| "CREATE_COMPLETE"
| "CREATE_FAILED"
| "DELETE_IN_PROGRESS"
| "DELETE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConformancePackDetail {
  ConformancePackName: string;
  ConformancePackArn: string;
  ConformancePackId: string;
  DeliveryS3Bucket?: string | null;
  DeliveryS3KeyPrefix?: string | null;
  ConformancePackInputParameters?: ConformancePackInputParameter[] | null;
  LastUpdateRequestedTime?: Date | number | null;
  CreatedBy?: string | null;
}
function toConformancePackDetail(root: jsonP.JSONValue): ConformancePackDetail {
  return jsonP.readObj({
    required: {
      "ConformancePackName": "s",
      "ConformancePackArn": "s",
      "ConformancePackId": "s",
    },
    optional: {
      "DeliveryS3Bucket": "s",
      "DeliveryS3KeyPrefix": "s",
      "ConformancePackInputParameters": [toConformancePackInputParameter],
      "LastUpdateRequestedTime": "d",
      "CreatedBy": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeliveryChannelStatus {
  name?: string | null;
  configSnapshotDeliveryInfo?: ConfigExportDeliveryInfo | null;
  configHistoryDeliveryInfo?: ConfigExportDeliveryInfo | null;
  configStreamDeliveryInfo?: ConfigStreamDeliveryInfo | null;
}
function toDeliveryChannelStatus(root: jsonP.JSONValue): DeliveryChannelStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "configSnapshotDeliveryInfo": toConfigExportDeliveryInfo,
      "configHistoryDeliveryInfo": toConfigExportDeliveryInfo,
      "configStreamDeliveryInfo": toConfigStreamDeliveryInfo,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ConfigExportDeliveryInfo {
  lastStatus?: DeliveryStatus | null;
  lastErrorCode?: string | null;
  lastErrorMessage?: string | null;
  lastAttemptTime?: Date | number | null;
  lastSuccessfulTime?: Date | number | null;
  nextDeliveryTime?: Date | number | null;
}
function toConfigExportDeliveryInfo(root: jsonP.JSONValue): ConfigExportDeliveryInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "lastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeliveryStatus>(x),
      "lastErrorCode": "s",
      "lastErrorMessage": "s",
      "lastAttemptTime": "d",
      "lastSuccessfulTime": "d",
      "nextDeliveryTime": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type DeliveryStatus =
| "Success"
| "Failure"
| "Not_Applicable"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConfigStreamDeliveryInfo {
  lastStatus?: DeliveryStatus | null;
  lastErrorCode?: string | null;
  lastErrorMessage?: string | null;
  lastStatusChangeTime?: Date | number | null;
}
function toConfigStreamDeliveryInfo(root: jsonP.JSONValue): ConfigStreamDeliveryInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "lastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeliveryStatus>(x),
      "lastErrorCode": "s",
      "lastErrorMessage": "s",
      "lastStatusChangeTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationConfigRuleStatus {
  OrganizationConfigRuleName: string;
  OrganizationRuleStatus: OrganizationRuleStatus;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
  LastUpdateTime?: Date | number | null;
}
function toOrganizationConfigRuleStatus(root: jsonP.JSONValue): OrganizationConfigRuleStatus {
  return jsonP.readObj({
    required: {
      "OrganizationConfigRuleName": "s",
      "OrganizationRuleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<OrganizationRuleStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type OrganizationRuleStatus =
| "CREATE_SUCCESSFUL"
| "CREATE_IN_PROGRESS"
| "CREATE_FAILED"
| "DELETE_SUCCESSFUL"
| "DELETE_FAILED"
| "DELETE_IN_PROGRESS"
| "UPDATE_SUCCESSFUL"
| "UPDATE_IN_PROGRESS"
| "UPDATE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface OrganizationConfigRule {
  OrganizationConfigRuleName: string;
  OrganizationConfigRuleArn: string;
  OrganizationManagedRuleMetadata?: OrganizationManagedRuleMetadata | null;
  OrganizationCustomRuleMetadata?: OrganizationCustomRuleMetadata | null;
  ExcludedAccounts?: string[] | null;
  LastUpdateTime?: Date | number | null;
}
function toOrganizationConfigRule(root: jsonP.JSONValue): OrganizationConfigRule {
  return jsonP.readObj({
    required: {
      "OrganizationConfigRuleName": "s",
      "OrganizationConfigRuleArn": "s",
    },
    optional: {
      "OrganizationManagedRuleMetadata": toOrganizationManagedRuleMetadata,
      "OrganizationCustomRuleMetadata": toOrganizationCustomRuleMetadata,
      "ExcludedAccounts": ["s"],
      "LastUpdateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationConformancePackStatus {
  OrganizationConformancePackName: string;
  Status: OrganizationResourceStatus;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
  LastUpdateTime?: Date | number | null;
}
function toOrganizationConformancePackStatus(root: jsonP.JSONValue): OrganizationConformancePackStatus {
  return jsonP.readObj({
    required: {
      "OrganizationConformancePackName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<OrganizationResourceStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type OrganizationResourceStatus =
| "CREATE_SUCCESSFUL"
| "CREATE_IN_PROGRESS"
| "CREATE_FAILED"
| "DELETE_SUCCESSFUL"
| "DELETE_FAILED"
| "DELETE_IN_PROGRESS"
| "UPDATE_SUCCESSFUL"
| "UPDATE_IN_PROGRESS"
| "UPDATE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface OrganizationConformancePack {
  OrganizationConformancePackName: string;
  OrganizationConformancePackArn: string;
  DeliveryS3Bucket?: string | null;
  DeliveryS3KeyPrefix?: string | null;
  ConformancePackInputParameters?: ConformancePackInputParameter[] | null;
  ExcludedAccounts?: string[] | null;
  LastUpdateTime: Date | number;
}
function toOrganizationConformancePack(root: jsonP.JSONValue): OrganizationConformancePack {
  return jsonP.readObj({
    required: {
      "OrganizationConformancePackName": "s",
      "OrganizationConformancePackArn": "s",
      "LastUpdateTime": "d",
    },
    optional: {
      "DeliveryS3Bucket": "s",
      "DeliveryS3KeyPrefix": "s",
      "ConformancePackInputParameters": [toConformancePackInputParameter],
      "ExcludedAccounts": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PendingAggregationRequest {
  RequesterAccountId?: string | null;
  RequesterAwsRegion?: string | null;
}
function toPendingAggregationRequest(root: jsonP.JSONValue): PendingAggregationRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "RequesterAccountId": "s",
      "RequesterAwsRegion": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RemediationException {
  ConfigRuleName: string;
  ResourceType: string;
  ResourceId: string;
  Message?: string | null;
  ExpirationTime?: Date | number | null;
}
function toRemediationException(root: jsonP.JSONValue): RemediationException {
  return jsonP.readObj({
    required: {
      "ConfigRuleName": "s",
      "ResourceType": "s",
      "ResourceId": "s",
    },
    optional: {
      "Message": "s",
      "ExpirationTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RemediationExecutionStatus {
  ResourceKey?: ResourceKey | null;
  State?: RemediationExecutionState | null;
  StepDetails?: RemediationExecutionStep[] | null;
  InvocationTime?: Date | number | null;
  LastUpdatedTime?: Date | number | null;
}
function toRemediationExecutionStatus(root: jsonP.JSONValue): RemediationExecutionStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceKey": toResourceKey,
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<RemediationExecutionState>(x),
      "StepDetails": [toRemediationExecutionStep],
      "InvocationTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RemediationExecutionState =
| "QUEUED"
| "IN_PROGRESS"
| "SUCCEEDED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface RemediationExecutionStep {
  Name?: string | null;
  State?: RemediationExecutionStepState | null;
  ErrorMessage?: string | null;
  StartTime?: Date | number | null;
  StopTime?: Date | number | null;
}
function toRemediationExecutionStep(root: jsonP.JSONValue): RemediationExecutionStep {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<RemediationExecutionStepState>(x),
      "ErrorMessage": "s",
      "StartTime": "d",
      "StopTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RemediationExecutionStepState =
| "SUCCEEDED"
| "PENDING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface RetentionConfiguration {
  Name: string;
  RetentionPeriodInDays: number;
}
function toRetentionConfiguration(root: jsonP.JSONValue): RetentionConfiguration {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "RetentionPeriodInDays": "n",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AggregateEvaluationResult {
  EvaluationResultIdentifier?: EvaluationResultIdentifier | null;
  ComplianceType?: ComplianceType | null;
  ResultRecordedTime?: Date | number | null;
  ConfigRuleInvokedTime?: Date | number | null;
  Annotation?: string | null;
  AccountId?: string | null;
  AwsRegion?: string | null;
}
function toAggregateEvaluationResult(root: jsonP.JSONValue): AggregateEvaluationResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "EvaluationResultIdentifier": toEvaluationResultIdentifier,
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceType>(x),
      "ResultRecordedTime": "d",
      "ConfigRuleInvokedTime": "d",
      "Annotation": "s",
      "AccountId": "s",
      "AwsRegion": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface EvaluationResultIdentifier {
  EvaluationResultQualifier?: EvaluationResultQualifier | null;
  OrderingTimestamp?: Date | number | null;
}
function toEvaluationResultIdentifier(root: jsonP.JSONValue): EvaluationResultIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "EvaluationResultQualifier": toEvaluationResultQualifier,
      "OrderingTimestamp": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface EvaluationResultQualifier {
  ConfigRuleName?: string | null;
  ResourceType?: string | null;
  ResourceId?: string | null;
}
function toEvaluationResultQualifier(root: jsonP.JSONValue): EvaluationResultQualifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "ResourceType": "s",
      "ResourceId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AggregateComplianceCount {
  GroupName?: string | null;
  ComplianceSummary?: ComplianceSummary | null;
}
function toAggregateComplianceCount(root: jsonP.JSONValue): AggregateComplianceCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupName": "s",
      "ComplianceSummary": toComplianceSummary,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ComplianceSummary {
  CompliantResourceCount?: ComplianceContributorCount | null;
  NonCompliantResourceCount?: ComplianceContributorCount | null;
  ComplianceSummaryTimestamp?: Date | number | null;
}
function toComplianceSummary(root: jsonP.JSONValue): ComplianceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "CompliantResourceCount": toComplianceContributorCount,
      "NonCompliantResourceCount": toComplianceContributorCount,
      "ComplianceSummaryTimestamp": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GroupedResourceCount {
  GroupName: string;
  ResourceCount: number;
}
function toGroupedResourceCount(root: jsonP.JSONValue): GroupedResourceCount {
  return jsonP.readObj({
    required: {
      "GroupName": "s",
      "ResourceCount": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ConfigurationItem {
  version?: string | null;
  accountId?: string | null;
  configurationItemCaptureTime?: Date | number | null;
  configurationItemStatus?: ConfigurationItemStatus | null;
  configurationStateId?: string | null;
  configurationItemMD5Hash?: string | null;
  arn?: string | null;
  resourceType?: ResourceType | null;
  resourceId?: string | null;
  resourceName?: string | null;
  awsRegion?: string | null;
  availabilityZone?: string | null;
  resourceCreationTime?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
  relatedEvents?: string[] | null;
  relationships?: Relationship[] | null;
  configuration?: string | null;
  supplementaryConfiguration?: { [key: string]: string | null | undefined } | null;
}
function toConfigurationItem(root: jsonP.JSONValue): ConfigurationItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "version": "s",
      "accountId": "s",
      "configurationItemCaptureTime": "d",
      "configurationItemStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationItemStatus>(x),
      "configurationStateId": "s",
      "configurationItemMD5Hash": "s",
      "arn": "s",
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "awsRegion": "s",
      "availabilityZone": "s",
      "resourceCreationTime": "d",
      "tags": x => jsonP.readMap(String, String, x),
      "relatedEvents": ["s"],
      "relationships": [toRelationship],
      "configuration": "s",
      "supplementaryConfiguration": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Relationship {
  resourceType?: ResourceType | null;
  resourceId?: string | null;
  resourceName?: string | null;
  relationshipName?: string | null;
}
function toRelationship(root: jsonP.JSONValue): Relationship {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "relationshipName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EvaluationResult {
  EvaluationResultIdentifier?: EvaluationResultIdentifier | null;
  ComplianceType?: ComplianceType | null;
  ResultRecordedTime?: Date | number | null;
  ConfigRuleInvokedTime?: Date | number | null;
  Annotation?: string | null;
  ResultToken?: string | null;
}
function toEvaluationResult(root: jsonP.JSONValue): EvaluationResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "EvaluationResultIdentifier": toEvaluationResultIdentifier,
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceType>(x),
      "ResultRecordedTime": "d",
      "ConfigRuleInvokedTime": "d",
      "Annotation": "s",
      "ResultToken": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComplianceSummaryByResourceType {
  ResourceType?: string | null;
  ComplianceSummary?: ComplianceSummary | null;
}
function toComplianceSummaryByResourceType(root: jsonP.JSONValue): ComplianceSummaryByResourceType {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ComplianceSummary": toComplianceSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConformancePackEvaluationResult {
  ComplianceType: ConformancePackComplianceType;
  EvaluationResultIdentifier: EvaluationResultIdentifier;
  ConfigRuleInvokedTime: Date | number;
  ResultRecordedTime: Date | number;
  Annotation?: string | null;
}
function toConformancePackEvaluationResult(root: jsonP.JSONValue): ConformancePackEvaluationResult {
  return jsonP.readObj({
    required: {
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<ConformancePackComplianceType>(x),
      "EvaluationResultIdentifier": toEvaluationResultIdentifier,
      "ConfigRuleInvokedTime": "d",
      "ResultRecordedTime": "d",
    },
    optional: {
      "Annotation": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ConformancePackComplianceSummary {
  ConformancePackName: string;
  ConformancePackComplianceStatus: ConformancePackComplianceType;
}
function toConformancePackComplianceSummary(root: jsonP.JSONValue): ConformancePackComplianceSummary {
  return jsonP.readObj({
    required: {
      "ConformancePackName": "s",
      "ConformancePackComplianceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ConformancePackComplianceType>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceCount {
  resourceType?: ResourceType | null;
  count?: number | null;
}
function toResourceCount(root: jsonP.JSONValue): ResourceCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "count": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MemberAccountStatus {
  AccountId: string;
  ConfigRuleName: string;
  MemberAccountRuleStatus: MemberAccountRuleStatus;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
  LastUpdateTime?: Date | number | null;
}
function toMemberAccountStatus(root: jsonP.JSONValue): MemberAccountStatus {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "ConfigRuleName": "s",
      "MemberAccountRuleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<MemberAccountRuleStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationConformancePackDetailedStatus {
  AccountId: string;
  ConformancePackName: string;
  Status: OrganizationResourceDetailedStatus;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
  LastUpdateTime?: Date | number | null;
}
function toOrganizationConformancePackDetailedStatus(root: jsonP.JSONValue): OrganizationConformancePackDetailedStatus {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "ConformancePackName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<OrganizationResourceDetailedStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceIdentifier {
  resourceType?: ResourceType | null;
  resourceId?: string | null;
  resourceName?: string | null;
  resourceDeletionTime?: Date | number | null;
}
function toResourceIdentifier(root: jsonP.JSONValue): ResourceIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "resourceDeletionTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FailedRemediationBatch {
  FailureMessage?: string | null;
  FailedItems?: RemediationConfiguration[] | null;
}
function toFailedRemediationBatch(root: jsonP.JSONValue): FailedRemediationBatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailureMessage": "s",
      "FailedItems": [toRemediationConfiguration],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FailedRemediationExceptionBatch {
  FailureMessage?: string | null;
  FailedItems?: RemediationException[] | null;
}
function toFailedRemediationExceptionBatch(root: jsonP.JSONValue): FailedRemediationExceptionBatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailureMessage": "s",
      "FailedItems": [toRemediationException],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface QueryInfo {
  SelectFields?: FieldInfo[] | null;
}
function toQueryInfo(root: jsonP.JSONValue): QueryInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "SelectFields": [toFieldInfo],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface FieldInfo {
  Name?: string | null;
}
function toFieldInfo(root: jsonP.JSONValue): FieldInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}
