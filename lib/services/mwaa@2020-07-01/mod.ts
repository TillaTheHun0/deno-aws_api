// Autogenerated API client for: AmazonMWAA

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MWAA {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MWAA.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-07-01",
    "endpointPrefix": "airflow",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AmazonMWAA",
    "serviceId": "MWAA",
    "signatureVersion": "v4",
    "signingName": "airflow",
    "uid": "mwaa-2020-07-01"
  };

  async createCliToken(
    {abortSignal, ...params}: RequestConfig & CreateCliTokenRequest,
  ): Promise<CreateCliTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateCliToken",
      requestUri: cmnP.encodePath`/clitoken/${params["Name"]}`,
      responseCode: 200,
      hostPrefix: `env.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CliToken": "s",
        "WebServerHostname": "s",
      },
    }, await resp.json());
  }

  async createEnvironment(
    {abortSignal, ...params}: RequestConfig & CreateEnvironmentInput,
  ): Promise<CreateEnvironmentOutput> {
    const body: jsonP.JSONObject = {
      AirflowConfigurationOptions: params["AirflowConfigurationOptions"],
      AirflowVersion: params["AirflowVersion"],
      DagS3Path: params["DagS3Path"],
      EnvironmentClass: params["EnvironmentClass"],
      ExecutionRoleArn: params["ExecutionRoleArn"],
      KmsKey: params["KmsKey"],
      LoggingConfiguration: fromLoggingConfigurationInput(params["LoggingConfiguration"]),
      MaxWorkers: params["MaxWorkers"],
      NetworkConfiguration: fromNetworkConfiguration(params["NetworkConfiguration"]),
      PluginsS3ObjectVersion: params["PluginsS3ObjectVersion"],
      PluginsS3Path: params["PluginsS3Path"],
      RequirementsS3ObjectVersion: params["RequirementsS3ObjectVersion"],
      RequirementsS3Path: params["RequirementsS3Path"],
      SourceBucketArn: params["SourceBucketArn"],
      Tags: params["Tags"],
      WebserverAccessMode: params["WebserverAccessMode"],
      WeeklyMaintenanceWindowStart: params["WeeklyMaintenanceWindowStart"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEnvironment",
      method: "PUT",
      requestUri: cmnP.encodePath`/environments/${params["Name"]}`,
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
      },
    }, await resp.json());
  }

  async createWebLoginToken(
    {abortSignal, ...params}: RequestConfig & CreateWebLoginTokenRequest,
  ): Promise<CreateWebLoginTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateWebLoginToken",
      requestUri: cmnP.encodePath`/webtoken/${params["Name"]}`,
      responseCode: 200,
      hostPrefix: `env.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WebServerHostname": "s",
        "WebToken": "s",
      },
    }, await resp.json());
  }

  async deleteEnvironment(
    {abortSignal, ...params}: RequestConfig & DeleteEnvironmentInput,
  ): Promise<DeleteEnvironmentOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEnvironment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/environments/${params["Name"]}`,
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getEnvironment(
    {abortSignal, ...params}: RequestConfig & GetEnvironmentInput,
  ): Promise<GetEnvironmentOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEnvironment",
      method: "GET",
      requestUri: cmnP.encodePath`/environments/${params["Name"]}`,
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Environment": toEnvironment,
      },
    }, await resp.json());
  }

  async listEnvironments(
    {abortSignal, ...params}: RequestConfig & ListEnvironmentsInput = {},
  ): Promise<ListEnvironmentsOutput> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEnvironments",
      method: "GET",
      requestUri: "/environments",
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {
        "Environments": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async publishMetrics(
    {abortSignal, ...params}: RequestConfig & PublishMetricsInput,
  ): Promise<PublishMetricsOutput> {
    const body: jsonP.JSONObject = {
      MetricData: params["MetricData"]?.map(x => fromMetricDatum(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PublishMetrics",
      requestUri: cmnP.encodePath`/metrics/environments/${params["EnvironmentName"]}`,
      responseCode: 200,
      hostPrefix: `ops.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<TagResourceOutput> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<UntagResourceOutput> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateEnvironment(
    {abortSignal, ...params}: RequestConfig & UpdateEnvironmentInput,
  ): Promise<UpdateEnvironmentOutput> {
    const body: jsonP.JSONObject = {
      AirflowConfigurationOptions: params["AirflowConfigurationOptions"],
      AirflowVersion: params["AirflowVersion"],
      DagS3Path: params["DagS3Path"],
      EnvironmentClass: params["EnvironmentClass"],
      ExecutionRoleArn: params["ExecutionRoleArn"],
      LoggingConfiguration: fromLoggingConfigurationInput(params["LoggingConfiguration"]),
      MaxWorkers: params["MaxWorkers"],
      NetworkConfiguration: fromUpdateNetworkConfigurationInput(params["NetworkConfiguration"]),
      PluginsS3ObjectVersion: params["PluginsS3ObjectVersion"],
      PluginsS3Path: params["PluginsS3Path"],
      RequirementsS3ObjectVersion: params["RequirementsS3ObjectVersion"],
      RequirementsS3Path: params["RequirementsS3Path"],
      SourceBucketArn: params["SourceBucketArn"],
      WebserverAccessMode: params["WebserverAccessMode"],
      WeeklyMaintenanceWindowStart: params["WeeklyMaintenanceWindowStart"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEnvironment",
      method: "PATCH",
      requestUri: cmnP.encodePath`/environments/${params["Name"]}`,
      responseCode: 200,
      hostPrefix: `api.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateCliTokenRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface CreateEnvironmentInput {
  AirflowConfigurationOptions?: { [key: string]: string | null | undefined } | null;
  AirflowVersion?: string | null;
  DagS3Path: string;
  EnvironmentClass?: string | null;
  ExecutionRoleArn: string;
  KmsKey?: string | null;
  LoggingConfiguration?: LoggingConfigurationInput | null;
  MaxWorkers?: number | null;
  Name: string;
  NetworkConfiguration: NetworkConfiguration;
  PluginsS3ObjectVersion?: string | null;
  PluginsS3Path?: string | null;
  RequirementsS3ObjectVersion?: string | null;
  RequirementsS3Path?: string | null;
  SourceBucketArn: string;
  Tags?: { [key: string]: string | null | undefined } | null;
  WebserverAccessMode?: WebserverAccessMode | null;
  WeeklyMaintenanceWindowStart?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateWebLoginTokenRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteEnvironmentInput {
  Name: string;
}

// refs: 1 - tags: named, input
export interface GetEnvironmentInput {
  Name: string;
}

// refs: 1 - tags: named, input
export interface ListEnvironmentsInput {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface PublishMetricsInput {
  EnvironmentName: string;
  MetricData: MetricDatum[];
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  ResourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateEnvironmentInput {
  AirflowConfigurationOptions?: { [key: string]: string | null | undefined } | null;
  AirflowVersion?: string | null;
  DagS3Path?: string | null;
  EnvironmentClass?: string | null;
  ExecutionRoleArn?: string | null;
  LoggingConfiguration?: LoggingConfigurationInput | null;
  MaxWorkers?: number | null;
  Name: string;
  NetworkConfiguration?: UpdateNetworkConfigurationInput | null;
  PluginsS3ObjectVersion?: string | null;
  PluginsS3Path?: string | null;
  RequirementsS3ObjectVersion?: string | null;
  RequirementsS3Path?: string | null;
  SourceBucketArn?: string | null;
  WebserverAccessMode?: WebserverAccessMode | null;
  WeeklyMaintenanceWindowStart?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateCliTokenResponse {
  CliToken?: string | null;
  WebServerHostname?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateEnvironmentOutput {
  Arn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateWebLoginTokenResponse {
  WebServerHostname?: string | null;
  WebToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteEnvironmentOutput {
}

// refs: 1 - tags: named, output
export interface GetEnvironmentOutput {
  Environment?: Environment | null;
}

// refs: 1 - tags: named, output
export interface ListEnvironmentsOutput {
  Environments: string[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceOutput {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PublishMetricsOutput {
}

// refs: 1 - tags: named, output
export interface TagResourceOutput {
}

// refs: 1 - tags: named, output
export interface UntagResourceOutput {
}

// refs: 1 - tags: named, output
export interface UpdateEnvironmentOutput {
  Arn?: string | null;
}

// refs: 2 - tags: input, named, interface
export interface LoggingConfigurationInput {
  DagProcessingLogs?: ModuleLoggingConfigurationInput | null;
  SchedulerLogs?: ModuleLoggingConfigurationInput | null;
  TaskLogs?: ModuleLoggingConfigurationInput | null;
  WebserverLogs?: ModuleLoggingConfigurationInput | null;
  WorkerLogs?: ModuleLoggingConfigurationInput | null;
}
function fromLoggingConfigurationInput(input?: LoggingConfigurationInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DagProcessingLogs: fromModuleLoggingConfigurationInput(input["DagProcessingLogs"]),
    SchedulerLogs: fromModuleLoggingConfigurationInput(input["SchedulerLogs"]),
    TaskLogs: fromModuleLoggingConfigurationInput(input["TaskLogs"]),
    WebserverLogs: fromModuleLoggingConfigurationInput(input["WebserverLogs"]),
    WorkerLogs: fromModuleLoggingConfigurationInput(input["WorkerLogs"]),
  }
}

// refs: 10 - tags: input, named, interface
export interface ModuleLoggingConfigurationInput {
  Enabled: boolean;
  LogLevel: LoggingLevel;
}
function fromModuleLoggingConfigurationInput(input?: ModuleLoggingConfigurationInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
    LogLevel: input["LogLevel"],
  }
}

// refs: 15 - tags: input, named, enum, output
export type LoggingLevel =
| "CRITICAL"
| "ERROR"
| "WARNING"
| "INFO"
| "DEBUG"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface NetworkConfiguration {
  SecurityGroupIds?: string[] | null;
  SubnetIds?: string[] | null;
}
function fromNetworkConfiguration(input?: NetworkConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SecurityGroupIds: input["SecurityGroupIds"],
    SubnetIds: input["SubnetIds"],
  }
}
function toNetworkConfiguration(root: jsonP.JSONValue): NetworkConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "SecurityGroupIds": ["s"],
      "SubnetIds": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type WebserverAccessMode =
| "PRIVATE_ONLY"
| "PUBLIC_ONLY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface MetricDatum {
  Dimensions?: Dimension[] | null;
  MetricName: string;
  StatisticValues?: StatisticSet | null;
  Timestamp: Date | number;
  Unit?: Unit | null;
  Value?: number | null;
}
function fromMetricDatum(input?: MetricDatum | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Dimensions: input["Dimensions"]?.map(x => fromDimension(x)),
    MetricName: input["MetricName"],
    StatisticValues: fromStatisticSet(input["StatisticValues"]),
    Timestamp: jsonP.serializeDate_unixTimestamp(input["Timestamp"]),
    Unit: input["Unit"],
    Value: input["Value"],
  }
}

// refs: 1 - tags: input, named, interface
export interface Dimension {
  Name: string;
  Value: string;
}
function fromDimension(input?: Dimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}

// refs: 1 - tags: input, named, interface
export interface StatisticSet {
  Maximum?: number | null;
  Minimum?: number | null;
  SampleCount?: number | null;
  Sum?: number | null;
}
function fromStatisticSet(input?: StatisticSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Maximum: input["Maximum"],
    Minimum: input["Minimum"],
    SampleCount: input["SampleCount"],
    Sum: input["Sum"],
  }
}

// refs: 1 - tags: input, named, enum
export type Unit =
| "Seconds"
| "Microseconds"
| "Milliseconds"
| "Bytes"
| "Kilobytes"
| "Megabytes"
| "Gigabytes"
| "Terabytes"
| "Bits"
| "Kilobits"
| "Megabits"
| "Gigabits"
| "Terabits"
| "Percent"
| "Count"
| "Bytes/Second"
| "Kilobytes/Second"
| "Megabytes/Second"
| "Gigabytes/Second"
| "Terabytes/Second"
| "Bits/Second"
| "Kilobits/Second"
| "Megabits/Second"
| "Gigabits/Second"
| "Terabits/Second"
| "Count/Second"
| "None"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateNetworkConfigurationInput {
  SecurityGroupIds: string[];
}
function fromUpdateNetworkConfigurationInput(input?: UpdateNetworkConfigurationInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}

// refs: 1 - tags: output, named, interface
export interface Environment {
  AirflowConfigurationOptions?: { [key: string]: string | null | undefined } | null;
  AirflowVersion?: string | null;
  Arn?: string | null;
  CreatedAt?: Date | number | null;
  DagS3Path?: string | null;
  EnvironmentClass?: string | null;
  ExecutionRoleArn?: string | null;
  KmsKey?: string | null;
  LastUpdate?: LastUpdate | null;
  LoggingConfiguration?: LoggingConfiguration | null;
  MaxWorkers?: number | null;
  Name?: string | null;
  NetworkConfiguration?: NetworkConfiguration | null;
  PluginsS3ObjectVersion?: string | null;
  PluginsS3Path?: string | null;
  RequirementsS3ObjectVersion?: string | null;
  RequirementsS3Path?: string | null;
  ServiceRoleArn?: string | null;
  SourceBucketArn?: string | null;
  Status?: EnvironmentStatus | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  WebserverAccessMode?: WebserverAccessMode | null;
  WebserverUrl?: string | null;
  WeeklyMaintenanceWindowStart?: string | null;
}
function toEnvironment(root: jsonP.JSONValue): Environment {
  return jsonP.readObj({
    required: {},
    optional: {
      "AirflowConfigurationOptions": x => jsonP.readMap(String, String, x),
      "AirflowVersion": "s",
      "Arn": "s",
      "CreatedAt": "d",
      "DagS3Path": "s",
      "EnvironmentClass": "s",
      "ExecutionRoleArn": "s",
      "KmsKey": "s",
      "LastUpdate": toLastUpdate,
      "LoggingConfiguration": toLoggingConfiguration,
      "MaxWorkers": "n",
      "Name": "s",
      "NetworkConfiguration": toNetworkConfiguration,
      "PluginsS3ObjectVersion": "s",
      "PluginsS3Path": "s",
      "RequirementsS3ObjectVersion": "s",
      "RequirementsS3Path": "s",
      "ServiceRoleArn": "s",
      "SourceBucketArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<EnvironmentStatus>(x),
      "Tags": x => jsonP.readMap(String, String, x),
      "WebserverAccessMode": (x: jsonP.JSONValue) => cmnP.readEnum<WebserverAccessMode>(x),
      "WebserverUrl": "s",
      "WeeklyMaintenanceWindowStart": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LastUpdate {
  CreatedAt?: Date | number | null;
  Error?: UpdateError | null;
  Status?: UpdateStatus | null;
}
function toLastUpdate(root: jsonP.JSONValue): LastUpdate {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedAt": "d",
      "Error": toUpdateError,
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<UpdateStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UpdateError {
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toUpdateError(root: jsonP.JSONValue): UpdateError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type UpdateStatus =
| "SUCCESS"
| "PENDING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface LoggingConfiguration {
  DagProcessingLogs?: ModuleLoggingConfiguration | null;
  SchedulerLogs?: ModuleLoggingConfiguration | null;
  TaskLogs?: ModuleLoggingConfiguration | null;
  WebserverLogs?: ModuleLoggingConfiguration | null;
  WorkerLogs?: ModuleLoggingConfiguration | null;
}
function toLoggingConfiguration(root: jsonP.JSONValue): LoggingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "DagProcessingLogs": toModuleLoggingConfiguration,
      "SchedulerLogs": toModuleLoggingConfiguration,
      "TaskLogs": toModuleLoggingConfiguration,
      "WebserverLogs": toModuleLoggingConfiguration,
      "WorkerLogs": toModuleLoggingConfiguration,
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface ModuleLoggingConfiguration {
  CloudWatchLogGroupArn?: string | null;
  Enabled?: boolean | null;
  LogLevel?: LoggingLevel | null;
}
function toModuleLoggingConfiguration(root: jsonP.JSONValue): ModuleLoggingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "CloudWatchLogGroupArn": "s",
      "Enabled": "b",
      "LogLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LoggingLevel>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EnvironmentStatus =
| "CREATING"
| "CREATE_FAILED"
| "AVAILABLE"
| "UPDATING"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;
