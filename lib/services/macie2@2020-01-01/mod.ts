// Autogenerated API client for: Amazon Macie 2

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Macie2 {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Macie2.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-01-01",
    "endpointPrefix": "macie2",
    "signingName": "macie2",
    "serviceFullName": "Amazon Macie 2",
    "serviceId": "Macie2",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "macie2-2020-01-01",
    "signatureVersion": "v4"
  };

  async acceptInvitation(
    {abortSignal, ...params}: RequestConfig & AcceptInvitationRequest,
  ): Promise<AcceptInvitationResponse> {
    const body: jsonP.JSONObject = params ? {
      invitationId: params["invitationId"],
      masterAccount: params["masterAccount"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptInvitation",
      requestUri: "/invitations/accept",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async batchGetCustomDataIdentifiers(
    {abortSignal, ...params}: RequestConfig & BatchGetCustomDataIdentifiersRequest = {},
  ): Promise<BatchGetCustomDataIdentifiersResponse> {
    const body: jsonP.JSONObject = params ? {
      ids: params["ids"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetCustomDataIdentifiers",
      requestUri: "/custom-data-identifiers/get",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "customDataIdentifiers": [toBatchGetCustomDataIdentifierSummary],
          "notFoundIdentifierIds": ["s"],
        },
      }, await resp.json()),
  };
  }

  async createClassificationJob(
    {abortSignal, ...params}: RequestConfig & CreateClassificationJobRequest,
  ): Promise<CreateClassificationJobResponse> {
    const body: jsonP.JSONObject = params ? {
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      customDataIdentifierIds: params["customDataIdentifierIds"],
      description: params["description"],
      initialRun: params["initialRun"],
      jobType: params["jobType"],
      name: params["name"],
      s3JobDefinition: fromS3JobDefinition(params["s3JobDefinition"]),
      samplingPercentage: params["samplingPercentage"],
      scheduleFrequency: fromJobScheduleFrequency(params["scheduleFrequency"]),
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateClassificationJob",
      requestUri: "/jobs",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "jobArn": "s",
          "jobId": "s",
        },
      }, await resp.json()),
  };
  }

  async createCustomDataIdentifier(
    {abortSignal, ...params}: RequestConfig & CreateCustomDataIdentifierRequest = {},
  ): Promise<CreateCustomDataIdentifierResponse> {
    const body: jsonP.JSONObject = params ? {
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      description: params["description"],
      ignoreWords: params["ignoreWords"],
      keywords: params["keywords"],
      maximumMatchDistance: params["maximumMatchDistance"],
      name: params["name"],
      regex: params["regex"],
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCustomDataIdentifier",
      requestUri: "/custom-data-identifiers",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "customDataIdentifierId": "s",
        },
      }, await resp.json()),
  };
  }

  async createFindingsFilter(
    {abortSignal, ...params}: RequestConfig & CreateFindingsFilterRequest,
  ): Promise<CreateFindingsFilterResponse> {
    const body: jsonP.JSONObject = params ? {
      action: params["action"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      description: params["description"],
      findingCriteria: fromFindingCriteria(params["findingCriteria"]),
      name: params["name"],
      position: params["position"],
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFindingsFilter",
      requestUri: "/findingsfilters",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "arn": "s",
          "id": "s",
        },
      }, await resp.json()),
  };
  }

  async createInvitations(
    {abortSignal, ...params}: RequestConfig & CreateInvitationsRequest,
  ): Promise<CreateInvitationsResponse> {
    const body: jsonP.JSONObject = params ? {
      accountIds: params["accountIds"],
      disableEmailNotification: params["disableEmailNotification"],
      message: params["message"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInvitations",
      requestUri: "/invitations",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "unprocessedAccounts": [toUnprocessedAccount],
        },
      }, await resp.json()),
  };
  }

  async createMember(
    {abortSignal, ...params}: RequestConfig & CreateMemberRequest,
  ): Promise<CreateMemberResponse> {
    const body: jsonP.JSONObject = params ? {
      account: fromAccountDetail(params["account"]),
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMember",
      requestUri: "/members",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "arn": "s",
        },
      }, await resp.json()),
  };
  }

  async createSampleFindings(
    {abortSignal, ...params}: RequestConfig & CreateSampleFindingsRequest = {},
  ): Promise<CreateSampleFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      findingTypes: params["findingTypes"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSampleFindings",
      requestUri: "/findings/sample",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async declineInvitations(
    {abortSignal, ...params}: RequestConfig & DeclineInvitationsRequest,
  ): Promise<DeclineInvitationsResponse> {
    const body: jsonP.JSONObject = params ? {
      accountIds: params["accountIds"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeclineInvitations",
      requestUri: "/invitations/decline",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "unprocessedAccounts": [toUnprocessedAccount],
        },
      }, await resp.json()),
  };
  }

  async deleteCustomDataIdentifier(
    {abortSignal, ...params}: RequestConfig & DeleteCustomDataIdentifierRequest,
  ): Promise<DeleteCustomDataIdentifierResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCustomDataIdentifier",
      method: "DELETE",
      requestUri: cmnP.encodePath`/custom-data-identifiers/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteFindingsFilter(
    {abortSignal, ...params}: RequestConfig & DeleteFindingsFilterRequest,
  ): Promise<DeleteFindingsFilterResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFindingsFilter",
      method: "DELETE",
      requestUri: cmnP.encodePath`/findingsfilters/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteInvitations(
    {abortSignal, ...params}: RequestConfig & DeleteInvitationsRequest,
  ): Promise<DeleteInvitationsResponse> {
    const body: jsonP.JSONObject = params ? {
      accountIds: params["accountIds"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInvitations",
      requestUri: "/invitations/delete",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "unprocessedAccounts": [toUnprocessedAccount],
        },
      }, await resp.json()),
  };
  }

  async deleteMember(
    {abortSignal, ...params}: RequestConfig & DeleteMemberRequest,
  ): Promise<DeleteMemberResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMember",
      method: "DELETE",
      requestUri: cmnP.encodePath`/members/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async describeBuckets(
    {abortSignal, ...params}: RequestConfig & DescribeBucketsRequest = {},
  ): Promise<DescribeBucketsResponse> {
    const body: jsonP.JSONObject = params ? {
      criteria: jsonP.serializeMap(params["criteria"], x => fromBucketCriteriaAdditionalProperties(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
      sortCriteria: fromBucketSortCriteria(params["sortCriteria"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBuckets",
      requestUri: "/datasources/s3",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "buckets": [toBucketMetadata],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async describeClassificationJob(
    {abortSignal, ...params}: RequestConfig & DescribeClassificationJobRequest,
  ): Promise<DescribeClassificationJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeClassificationJob",
      method: "GET",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "clientToken": "s",
          "createdAt": "d",
          "customDataIdentifierIds": ["s"],
          "description": "s",
          "initialRun": "b",
          "jobArn": "s",
          "jobId": "s",
          "jobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
          "jobType": (x: jsonP.JSONValue) => cmnP.readEnum<JobType>(x),
          "lastRunTime": "d",
          "name": "s",
          "s3JobDefinition": toS3JobDefinition,
          "samplingPercentage": "n",
          "scheduleFrequency": toJobScheduleFrequency,
          "statistics": toStatistics,
          "tags": x => jsonP.readMap(String, String, x),
          "userPausedDetails": toUserPausedDetails,
        },
      }, await resp.json()),
  };
  }

  async describeOrganizationConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeOrganizationConfigurationRequest = {},
  ): Promise<DescribeOrganizationConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeOrganizationConfiguration",
      method: "GET",
      requestUri: "/admin/configuration",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "autoEnable": "b",
          "maxAccountLimitReached": "b",
        },
      }, await resp.json()),
  };
  }

  async disableMacie(
    {abortSignal, ...params}: RequestConfig & DisableMacieRequest = {},
  ): Promise<DisableMacieResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisableMacie",
      method: "DELETE",
      requestUri: "/macie",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async disableOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & DisableOrganizationAdminAccountRequest,
  ): Promise<DisableOrganizationAdminAccountResponse> {
    const query = new URLSearchParams;
    query.set("adminAccountId", params["adminAccountId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisableOrganizationAdminAccount",
      method: "DELETE",
      requestUri: "/admin",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async disassociateFromMasterAccount(
    {abortSignal, ...params}: RequestConfig & DisassociateFromMasterAccountRequest = {},
  ): Promise<DisassociateFromMasterAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateFromMasterAccount",
      requestUri: "/master/disassociate",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async disassociateMember(
    {abortSignal, ...params}: RequestConfig & DisassociateMemberRequest,
  ): Promise<DisassociateMemberResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateMember",
      requestUri: cmnP.encodePath`/members/disassociate/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async enableMacie(
    {abortSignal, ...params}: RequestConfig & EnableMacieRequest = {},
  ): Promise<EnableMacieResponse> {
    const body: jsonP.JSONObject = params ? {
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      findingPublishingFrequency: params["findingPublishingFrequency"],
      status: params["status"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableMacie",
      requestUri: "/macie",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async enableOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & EnableOrganizationAdminAccountRequest,
  ): Promise<EnableOrganizationAdminAccountResponse> {
    const body: jsonP.JSONObject = params ? {
      adminAccountId: params["adminAccountId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableOrganizationAdminAccount",
      requestUri: "/admin",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async getBucketStatistics(
    {abortSignal, ...params}: RequestConfig & GetBucketStatisticsRequest = {},
  ): Promise<GetBucketStatisticsResponse> {
    const body: jsonP.JSONObject = params ? {
      accountId: params["accountId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBucketStatistics",
      requestUri: "/datasources/s3/statistics",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "bucketCount": "n",
          "bucketCountByEffectivePermission": toBucketCountByEffectivePermission,
          "bucketCountByEncryptionType": toBucketCountByEncryptionType,
          "bucketCountBySharedAccessType": toBucketCountBySharedAccessType,
          "classifiableObjectCount": "n",
          "classifiableSizeInBytes": "n",
          "lastUpdated": "d",
          "objectCount": "n",
          "sizeInBytes": "n",
          "sizeInBytesCompressed": "n",
          "unclassifiableObjectCount": toObjectLevelStatistics,
          "unclassifiableObjectSizeInBytes": toObjectLevelStatistics,
        },
      }, await resp.json()),
  };
  }

  async getClassificationExportConfiguration(
    {abortSignal, ...params}: RequestConfig & GetClassificationExportConfigurationRequest = {},
  ): Promise<GetClassificationExportConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetClassificationExportConfiguration",
      method: "GET",
      requestUri: "/classification-export-configuration",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "configuration": toClassificationExportConfiguration,
        },
      }, await resp.json()),
  };
  }

  async getCustomDataIdentifier(
    {abortSignal, ...params}: RequestConfig & GetCustomDataIdentifierRequest,
  ): Promise<GetCustomDataIdentifierResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCustomDataIdentifier",
      method: "GET",
      requestUri: cmnP.encodePath`/custom-data-identifiers/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "arn": "s",
          "createdAt": "d",
          "deleted": "b",
          "description": "s",
          "id": "s",
          "ignoreWords": ["s"],
          "keywords": ["s"],
          "maximumMatchDistance": "n",
          "name": "s",
          "regex": "s",
          "tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async getFindingStatistics(
    {abortSignal, ...params}: RequestConfig & GetFindingStatisticsRequest,
  ): Promise<GetFindingStatisticsResponse> {
    const body: jsonP.JSONObject = params ? {
      findingCriteria: fromFindingCriteria(params["findingCriteria"]),
      groupBy: params["groupBy"],
      size: params["size"],
      sortCriteria: fromFindingStatisticsSortCriteria(params["sortCriteria"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFindingStatistics",
      requestUri: "/findings/statistics",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "countsByGroup": [toGroupCount],
        },
      }, await resp.json()),
  };
  }

  async getFindings(
    {abortSignal, ...params}: RequestConfig & GetFindingsRequest,
  ): Promise<GetFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      findingIds: params["findingIds"],
      sortCriteria: fromSortCriteria(params["sortCriteria"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFindings",
      requestUri: "/findings/describe",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "findings": [toFinding],
        },
      }, await resp.json()),
  };
  }

  async getFindingsFilter(
    {abortSignal, ...params}: RequestConfig & GetFindingsFilterRequest,
  ): Promise<GetFindingsFilterResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFindingsFilter",
      method: "GET",
      requestUri: cmnP.encodePath`/findingsfilters/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "action": (x: jsonP.JSONValue) => cmnP.readEnum<FindingsFilterAction>(x),
          "arn": "s",
          "description": "s",
          "findingCriteria": toFindingCriteria,
          "id": "s",
          "name": "s",
          "position": "n",
          "tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async getInvitationsCount(
    {abortSignal, ...params}: RequestConfig & GetInvitationsCountRequest = {},
  ): Promise<GetInvitationsCountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetInvitationsCount",
      method: "GET",
      requestUri: "/invitations/count",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "invitationsCount": "n",
        },
      }, await resp.json()),
  };
  }

  async getMacieSession(
    {abortSignal, ...params}: RequestConfig & GetMacieSessionRequest = {},
  ): Promise<GetMacieSessionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMacieSession",
      method: "GET",
      requestUri: "/macie",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "createdAt": "d",
          "findingPublishingFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<FindingPublishingFrequency>(x),
          "serviceRole": "s",
          "status": (x: jsonP.JSONValue) => cmnP.readEnum<MacieStatus>(x),
          "updatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async getMasterAccount(
    {abortSignal, ...params}: RequestConfig & GetMasterAccountRequest = {},
  ): Promise<GetMasterAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMasterAccount",
      method: "GET",
      requestUri: "/master",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "master": toInvitation,
        },
      }, await resp.json()),
  };
  }

  async getMember(
    {abortSignal, ...params}: RequestConfig & GetMemberRequest,
  ): Promise<GetMemberResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMember",
      method: "GET",
      requestUri: cmnP.encodePath`/members/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "accountId": "s",
          "arn": "s",
          "email": "s",
          "invitedAt": "d",
          "masterAccountId": "s",
          "relationshipStatus": (x: jsonP.JSONValue) => cmnP.readEnum<RelationshipStatus>(x),
          "tags": x => jsonP.readMap(String, String, x),
          "updatedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async getUsageStatistics(
    {abortSignal, ...params}: RequestConfig & GetUsageStatisticsRequest = {},
  ): Promise<GetUsageStatisticsResponse> {
    const body: jsonP.JSONObject = params ? {
      filterBy: params["filterBy"]?.map(x => fromUsageStatisticsFilter(x)),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
      sortBy: fromUsageStatisticsSortBy(params["sortBy"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUsageStatistics",
      requestUri: "/usage/statistics",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "nextToken": "s",
          "records": [toUsageRecord],
        },
      }, await resp.json()),
  };
  }

  async getUsageTotals(
    {abortSignal, ...params}: RequestConfig & GetUsageTotalsRequest = {},
  ): Promise<GetUsageTotalsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetUsageTotals",
      method: "GET",
      requestUri: "/usage",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "usageTotals": [toUsageTotal],
        },
      }, await resp.json()),
  };
  }

  async listClassificationJobs(
    {abortSignal, ...params}: RequestConfig & ListClassificationJobsRequest = {},
  ): Promise<ListClassificationJobsResponse> {
    const body: jsonP.JSONObject = params ? {
      filterCriteria: fromListJobsFilterCriteria(params["filterCriteria"]),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
      sortCriteria: fromListJobsSortCriteria(params["sortCriteria"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListClassificationJobs",
      requestUri: "/jobs/list",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "items": [toJobSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listCustomDataIdentifiers(
    {abortSignal, ...params}: RequestConfig & ListCustomDataIdentifiersRequest = {},
  ): Promise<ListCustomDataIdentifiersResponse> {
    const body: jsonP.JSONObject = params ? {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCustomDataIdentifiers",
      requestUri: "/custom-data-identifiers/list",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "items": [toCustomDataIdentifierSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listFindings(
    {abortSignal, ...params}: RequestConfig & ListFindingsRequest = {},
  ): Promise<ListFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      findingCriteria: fromFindingCriteria(params["findingCriteria"]),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
      sortCriteria: fromSortCriteria(params["sortCriteria"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFindings",
      requestUri: "/findings",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "findingIds": ["s"],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listFindingsFilters(
    {abortSignal, ...params}: RequestConfig & ListFindingsFiltersRequest = {},
  ): Promise<ListFindingsFiltersResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFindingsFilters",
      method: "GET",
      requestUri: "/findingsfilters",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "findingsFilterListItems": [toFindingsFilterListItem],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listInvitations(
    {abortSignal, ...params}: RequestConfig & ListInvitationsRequest = {},
  ): Promise<ListInvitationsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInvitations",
      method: "GET",
      requestUri: "/invitations",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "invitations": [toInvitation],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listMembers(
    {abortSignal, ...params}: RequestConfig & ListMembersRequest = {},
  ): Promise<ListMembersResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["onlyAssociated"] != null) query.set("onlyAssociated", params["onlyAssociated"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMembers",
      method: "GET",
      requestUri: "/members",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "members": [toMember],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listOrganizationAdminAccounts(
    {abortSignal, ...params}: RequestConfig & ListOrganizationAdminAccountsRequest = {},
  ): Promise<ListOrganizationAdminAccountsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListOrganizationAdminAccounts",
      method: "GET",
      requestUri: "/admin",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "adminAccounts": [toAdminAccount],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async putClassificationExportConfiguration(
    {abortSignal, ...params}: RequestConfig & PutClassificationExportConfigurationRequest,
  ): Promise<PutClassificationExportConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      configuration: fromClassificationExportConfiguration(params["configuration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutClassificationExportConfiguration",
      method: "PUT",
      requestUri: "/classification-export-configuration",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "configuration": toClassificationExportConfiguration,
        },
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async testCustomDataIdentifier(
    {abortSignal, ...params}: RequestConfig & TestCustomDataIdentifierRequest,
  ): Promise<TestCustomDataIdentifierResponse> {
    const body: jsonP.JSONObject = params ? {
      ignoreWords: params["ignoreWords"],
      keywords: params["keywords"],
      maximumMatchDistance: params["maximumMatchDistance"],
      regex: params["regex"],
      sampleText: params["sampleText"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TestCustomDataIdentifier",
      requestUri: "/custom-data-identifiers/test",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "matchCount": "n",
        },
      }, await resp.json()),
  };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateClassificationJob(
    {abortSignal, ...params}: RequestConfig & UpdateClassificationJobRequest,
  ): Promise<UpdateClassificationJobResponse> {
    const body: jsonP.JSONObject = params ? {
      jobStatus: params["jobStatus"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateClassificationJob",
      method: "PATCH",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateFindingsFilter(
    {abortSignal, ...params}: RequestConfig & UpdateFindingsFilterRequest,
  ): Promise<UpdateFindingsFilterResponse> {
    const body: jsonP.JSONObject = params ? {
      action: params["action"],
      description: params["description"],
      findingCriteria: fromFindingCriteria(params["findingCriteria"]),
      name: params["name"],
      position: params["position"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFindingsFilter",
      method: "PATCH",
      requestUri: cmnP.encodePath`/findingsfilters/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "arn": "s",
          "id": "s",
        },
      }, await resp.json()),
  };
  }

  async updateMacieSession(
    {abortSignal, ...params}: RequestConfig & UpdateMacieSessionRequest = {},
  ): Promise<UpdateMacieSessionResponse> {
    const body: jsonP.JSONObject = params ? {
      findingPublishingFrequency: params["findingPublishingFrequency"],
      status: params["status"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMacieSession",
      method: "PATCH",
      requestUri: "/macie",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateMemberSession(
    {abortSignal, ...params}: RequestConfig & UpdateMemberSessionRequest,
  ): Promise<UpdateMemberSessionResponse> {
    const body: jsonP.JSONObject = params ? {
      status: params["status"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMemberSession",
      method: "PATCH",
      requestUri: cmnP.encodePath`/macie/members/${params["id"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateOrganizationConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateOrganizationConfigurationRequest,
  ): Promise<UpdateOrganizationConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      autoEnable: params["autoEnable"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateOrganizationConfiguration",
      method: "PATCH",
      requestUri: "/admin/configuration",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface AcceptInvitationRequest {
  invitationId: string;
  masterAccount: string;
}

// refs: 1 - tags: named, input
export interface BatchGetCustomDataIdentifiersRequest {
  ids?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CreateClassificationJobRequest {
  clientToken: string;
  customDataIdentifierIds?: string[] | null;
  description?: string | null;
  initialRun?: boolean | null;
  jobType: JobType;
  name: string;
  s3JobDefinition: S3JobDefinition;
  samplingPercentage?: number | null;
  scheduleFrequency?: JobScheduleFrequency | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateCustomDataIdentifierRequest {
  clientToken?: string | null;
  description?: string | null;
  ignoreWords?: string[] | null;
  keywords?: string[] | null;
  maximumMatchDistance?: number | null;
  name?: string | null;
  regex?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateFindingsFilterRequest {
  action: FindingsFilterAction;
  clientToken?: string | null;
  description?: string | null;
  findingCriteria: FindingCriteria;
  name: string;
  position?: number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateInvitationsRequest {
  accountIds: string[];
  disableEmailNotification?: boolean | null;
  message?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateMemberRequest {
  account: AccountDetail;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateSampleFindingsRequest {
  findingTypes?: FindingType[] | null;
}

// refs: 1 - tags: named, input
export interface DeclineInvitationsRequest {
  accountIds: string[];
}

// refs: 1 - tags: named, input
export interface DeleteCustomDataIdentifierRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface DeleteFindingsFilterRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface DeleteInvitationsRequest {
  accountIds: string[];
}

// refs: 1 - tags: named, input
export interface DeleteMemberRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface DescribeBucketsRequest {
  criteria?: { [key: string]: BucketCriteriaAdditionalProperties | null | undefined } | null;
  maxResults?: number | null;
  nextToken?: string | null;
  sortCriteria?: BucketSortCriteria | null;
}

// refs: 1 - tags: named, input
export interface DescribeClassificationJobRequest {
  jobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeOrganizationConfigurationRequest {
}

// refs: 1 - tags: named, input
export interface DisableMacieRequest {
}

// refs: 1 - tags: named, input
export interface DisableOrganizationAdminAccountRequest {
  adminAccountId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateFromMasterAccountRequest {
}

// refs: 1 - tags: named, input
export interface DisassociateMemberRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface EnableMacieRequest {
  clientToken?: string | null;
  findingPublishingFrequency?: FindingPublishingFrequency | null;
  status?: MacieStatus | null;
}

// refs: 1 - tags: named, input
export interface EnableOrganizationAdminAccountRequest {
  adminAccountId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetBucketStatisticsRequest {
  accountId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetClassificationExportConfigurationRequest {
}

// refs: 1 - tags: named, input
export interface GetCustomDataIdentifierRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface GetFindingStatisticsRequest {
  findingCriteria?: FindingCriteria | null;
  groupBy: GroupBy;
  size?: number | null;
  sortCriteria?: FindingStatisticsSortCriteria | null;
}

// refs: 1 - tags: named, input
export interface GetFindingsRequest {
  findingIds: string[];
  sortCriteria?: SortCriteria | null;
}

// refs: 1 - tags: named, input
export interface GetFindingsFilterRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface GetInvitationsCountRequest {
}

// refs: 1 - tags: named, input
export interface GetMacieSessionRequest {
}

// refs: 1 - tags: named, input
export interface GetMasterAccountRequest {
}

// refs: 1 - tags: named, input
export interface GetMemberRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface GetUsageStatisticsRequest {
  filterBy?: UsageStatisticsFilter[] | null;
  maxResults?: number | null;
  nextToken?: string | null;
  sortBy?: UsageStatisticsSortBy | null;
}

// refs: 1 - tags: named, input
export interface GetUsageTotalsRequest {
}

// refs: 1 - tags: named, input
export interface ListClassificationJobsRequest {
  filterCriteria?: ListJobsFilterCriteria | null;
  maxResults?: number | null;
  nextToken?: string | null;
  sortCriteria?: ListJobsSortCriteria | null;
}

// refs: 1 - tags: named, input
export interface ListCustomDataIdentifiersRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFindingsRequest {
  findingCriteria?: FindingCriteria | null;
  maxResults?: number | null;
  nextToken?: string | null;
  sortCriteria?: SortCriteria | null;
}

// refs: 1 - tags: named, input
export interface ListFindingsFiltersRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListInvitationsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListMembersRequest {
  maxResults?: number | null;
  nextToken?: string | null;
  onlyAssociated?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOrganizationAdminAccountsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutClassificationExportConfigurationRequest {
  configuration: ClassificationExportConfiguration;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface TestCustomDataIdentifierRequest {
  ignoreWords?: string[] | null;
  keywords?: string[] | null;
  maximumMatchDistance?: number | null;
  regex: string;
  sampleText: string;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateClassificationJobRequest {
  jobId: string;
  jobStatus: JobStatus;
}

// refs: 1 - tags: named, input
export interface UpdateFindingsFilterRequest {
  action?: FindingsFilterAction | null;
  description?: string | null;
  findingCriteria?: FindingCriteria | null;
  id: string;
  name?: string | null;
  position?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateMacieSessionRequest {
  findingPublishingFrequency?: FindingPublishingFrequency | null;
  status?: MacieStatus | null;
}

// refs: 1 - tags: named, input
export interface UpdateMemberSessionRequest {
  id: string;
  status: MacieStatus;
}

// refs: 1 - tags: named, input
export interface UpdateOrganizationConfigurationRequest {
  autoEnable: boolean;
}

// refs: 1 - tags: named, output
export interface AcceptInvitationResponse {
}

// refs: 1 - tags: named, output
export interface BatchGetCustomDataIdentifiersResponse {
  customDataIdentifiers?: BatchGetCustomDataIdentifierSummary[] | null;
  notFoundIdentifierIds?: string[] | null;
}

// refs: 1 - tags: named, output
export interface CreateClassificationJobResponse {
  jobArn?: string | null;
  jobId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateCustomDataIdentifierResponse {
  customDataIdentifierId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateFindingsFilterResponse {
  arn?: string | null;
  id?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateInvitationsResponse {
  unprocessedAccounts?: UnprocessedAccount[] | null;
}

// refs: 1 - tags: named, output
export interface CreateMemberResponse {
  arn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSampleFindingsResponse {
}

// refs: 1 - tags: named, output
export interface DeclineInvitationsResponse {
  unprocessedAccounts?: UnprocessedAccount[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteCustomDataIdentifierResponse {
}

// refs: 1 - tags: named, output
export interface DeleteFindingsFilterResponse {
}

// refs: 1 - tags: named, output
export interface DeleteInvitationsResponse {
  unprocessedAccounts?: UnprocessedAccount[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteMemberResponse {
}

// refs: 1 - tags: named, output
export interface DescribeBucketsResponse {
  buckets?: BucketMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeClassificationJobResponse {
  clientToken?: string | null;
  createdAt?: Date | number | null;
  customDataIdentifierIds?: string[] | null;
  description?: string | null;
  initialRun?: boolean | null;
  jobArn?: string | null;
  jobId?: string | null;
  jobStatus?: JobStatus | null;
  jobType?: JobType | null;
  lastRunTime?: Date | number | null;
  name?: string | null;
  s3JobDefinition?: S3JobDefinition | null;
  samplingPercentage?: number | null;
  scheduleFrequency?: JobScheduleFrequency | null;
  statistics?: Statistics | null;
  tags?: { [key: string]: string | null | undefined } | null;
  userPausedDetails?: UserPausedDetails | null;
}

// refs: 1 - tags: named, output
export interface DescribeOrganizationConfigurationResponse {
  autoEnable?: boolean | null;
  maxAccountLimitReached?: boolean | null;
}

// refs: 1 - tags: named, output
export interface DisableMacieResponse {
}

// refs: 1 - tags: named, output
export interface DisableOrganizationAdminAccountResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateFromMasterAccountResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateMemberResponse {
}

// refs: 1 - tags: named, output
export interface EnableMacieResponse {
}

// refs: 1 - tags: named, output
export interface EnableOrganizationAdminAccountResponse {
}

// refs: 1 - tags: named, output
export interface GetBucketStatisticsResponse {
  bucketCount?: number | null;
  bucketCountByEffectivePermission?: BucketCountByEffectivePermission | null;
  bucketCountByEncryptionType?: BucketCountByEncryptionType | null;
  bucketCountBySharedAccessType?: BucketCountBySharedAccessType | null;
  classifiableObjectCount?: number | null;
  classifiableSizeInBytes?: number | null;
  lastUpdated?: Date | number | null;
  objectCount?: number | null;
  sizeInBytes?: number | null;
  sizeInBytesCompressed?: number | null;
  unclassifiableObjectCount?: ObjectLevelStatistics | null;
  unclassifiableObjectSizeInBytes?: ObjectLevelStatistics | null;
}

// refs: 1 - tags: named, output
export interface GetClassificationExportConfigurationResponse {
  configuration?: ClassificationExportConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetCustomDataIdentifierResponse {
  arn?: string | null;
  createdAt?: Date | number | null;
  deleted?: boolean | null;
  description?: string | null;
  id?: string | null;
  ignoreWords?: string[] | null;
  keywords?: string[] | null;
  maximumMatchDistance?: number | null;
  name?: string | null;
  regex?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetFindingStatisticsResponse {
  countsByGroup?: GroupCount[] | null;
}

// refs: 1 - tags: named, output
export interface GetFindingsResponse {
  findings?: Finding[] | null;
}

// refs: 1 - tags: named, output
export interface GetFindingsFilterResponse {
  action?: FindingsFilterAction | null;
  arn?: string | null;
  description?: string | null;
  findingCriteria?: FindingCriteria | null;
  id?: string | null;
  name?: string | null;
  position?: number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetInvitationsCountResponse {
  invitationsCount?: number | null;
}

// refs: 1 - tags: named, output
export interface GetMacieSessionResponse {
  createdAt?: Date | number | null;
  findingPublishingFrequency?: FindingPublishingFrequency | null;
  serviceRole?: string | null;
  status?: MacieStatus | null;
  updatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetMasterAccountResponse {
  master?: Invitation | null;
}

// refs: 1 - tags: named, output
export interface GetMemberResponse {
  accountId?: string | null;
  arn?: string | null;
  email?: string | null;
  invitedAt?: Date | number | null;
  masterAccountId?: string | null;
  relationshipStatus?: RelationshipStatus | null;
  tags?: { [key: string]: string | null | undefined } | null;
  updatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetUsageStatisticsResponse {
  nextToken?: string | null;
  records?: UsageRecord[] | null;
}

// refs: 1 - tags: named, output
export interface GetUsageTotalsResponse {
  usageTotals?: UsageTotal[] | null;
}

// refs: 1 - tags: named, output
export interface ListClassificationJobsResponse {
  items?: JobSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCustomDataIdentifiersResponse {
  items?: CustomDataIdentifierSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFindingsResponse {
  findingIds?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFindingsFiltersResponse {
  findingsFilterListItems?: FindingsFilterListItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInvitationsResponse {
  invitations?: Invitation[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMembersResponse {
  members?: Member[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOrganizationAdminAccountsResponse {
  adminAccounts?: AdminAccount[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PutClassificationExportConfigurationResponse {
  configuration?: ClassificationExportConfiguration | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface TestCustomDataIdentifierResponse {
  matchCount?: number | null;
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateClassificationJobResponse {
}

// refs: 1 - tags: named, output
export interface UpdateFindingsFilterResponse {
  arn?: string | null;
  id?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateMacieSessionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateMemberSessionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateOrganizationConfigurationResponse {
}

// refs: 3 - tags: input, named, enum, output
export type JobType =
| "ONE_TIME"
| "SCHEDULED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface S3JobDefinition {
  bucketDefinitions?: S3BucketDefinitionForJob[] | null;
  scoping?: Scoping | null;
}
function fromS3JobDefinition(input?: S3JobDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucketDefinitions: input["bucketDefinitions"]?.map(x => fromS3BucketDefinitionForJob(x)),
    scoping: fromScoping(input["scoping"]),
  }
}
function toS3JobDefinition(root: jsonP.JSONValue): S3JobDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "bucketDefinitions": [toS3BucketDefinitionForJob],
      "scoping": toScoping,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3BucketDefinitionForJob {
  accountId?: string | null;
  buckets?: string[] | null;
}
function fromS3BucketDefinitionForJob(input?: S3BucketDefinitionForJob | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accountId: input["accountId"],
    buckets: input["buckets"],
  }
}
function toS3BucketDefinitionForJob(root: jsonP.JSONValue): S3BucketDefinitionForJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "buckets": ["s"],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Scoping {
  excludes?: JobScopingBlock | null;
  includes?: JobScopingBlock | null;
}
function fromScoping(input?: Scoping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    excludes: fromJobScopingBlock(input["excludes"]),
    includes: fromJobScopingBlock(input["includes"]),
  }
}
function toScoping(root: jsonP.JSONValue): Scoping {
  return jsonP.readObj({
    required: {},
    optional: {
      "excludes": toJobScopingBlock,
      "includes": toJobScopingBlock,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface JobScopingBlock {
  and?: JobScopeTerm[] | null;
}
function fromJobScopingBlock(input?: JobScopingBlock | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    and: input["and"]?.map(x => fromJobScopeTerm(x)),
  }
}
function toJobScopingBlock(root: jsonP.JSONValue): JobScopingBlock {
  return jsonP.readObj({
    required: {},
    optional: {
      "and": [toJobScopeTerm],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface JobScopeTerm {
  simpleScopeTerm?: SimpleScopeTerm | null;
  tagScopeTerm?: TagScopeTerm | null;
}
function fromJobScopeTerm(input?: JobScopeTerm | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    simpleScopeTerm: fromSimpleScopeTerm(input["simpleScopeTerm"]),
    tagScopeTerm: fromTagScopeTerm(input["tagScopeTerm"]),
  }
}
function toJobScopeTerm(root: jsonP.JSONValue): JobScopeTerm {
  return jsonP.readObj({
    required: {},
    optional: {
      "simpleScopeTerm": toSimpleScopeTerm,
      "tagScopeTerm": toTagScopeTerm,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface SimpleScopeTerm {
  comparator?: JobComparator | null;
  key?: ScopeFilterKey | null;
  values?: string[] | null;
}
function fromSimpleScopeTerm(input?: SimpleScopeTerm | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    comparator: input["comparator"],
    key: input["key"],
    values: input["values"],
  }
}
function toSimpleScopeTerm(root: jsonP.JSONValue): SimpleScopeTerm {
  return jsonP.readObj({
    required: {},
    optional: {
      "comparator": (x: jsonP.JSONValue) => cmnP.readEnum<JobComparator>(x),
      "key": (x: jsonP.JSONValue) => cmnP.readEnum<ScopeFilterKey>(x),
      "values": ["s"],
    },
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type JobComparator =
| "EQ"
| "GT"
| "GTE"
| "LT"
| "LTE"
| "NE"
| "CONTAINS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type ScopeFilterKey =
| "BUCKET_CREATION_DATE"
| "OBJECT_EXTENSION"
| "OBJECT_LAST_MODIFIED_DATE"
| "OBJECT_SIZE"
| "TAG"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface TagScopeTerm {
  comparator?: JobComparator | null;
  key?: string | null;
  tagValues?: TagValuePair[] | null;
  target?: TagTarget | null;
}
function fromTagScopeTerm(input?: TagScopeTerm | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    comparator: input["comparator"],
    key: input["key"],
    tagValues: input["tagValues"]?.map(x => fromTagValuePair(x)),
    target: input["target"],
  }
}
function toTagScopeTerm(root: jsonP.JSONValue): TagScopeTerm {
  return jsonP.readObj({
    required: {},
    optional: {
      "comparator": (x: jsonP.JSONValue) => cmnP.readEnum<JobComparator>(x),
      "key": "s",
      "tagValues": [toTagValuePair],
      "target": (x: jsonP.JSONValue) => cmnP.readEnum<TagTarget>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface TagValuePair {
  key?: string | null;
  value?: string | null;
}
function fromTagValuePair(input?: TagValuePair | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTagValuePair(root: jsonP.JSONValue): TagValuePair {
  return jsonP.readObj({
    required: {},
    optional: {
      "key": "s",
      "value": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type TagTarget =
| "S3_OBJECT"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface JobScheduleFrequency {
  dailySchedule?: DailySchedule | null;
  monthlySchedule?: MonthlySchedule | null;
  weeklySchedule?: WeeklySchedule | null;
}
function fromJobScheduleFrequency(input?: JobScheduleFrequency | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dailySchedule: fromDailySchedule(input["dailySchedule"]),
    monthlySchedule: fromMonthlySchedule(input["monthlySchedule"]),
    weeklySchedule: fromWeeklySchedule(input["weeklySchedule"]),
  }
}
function toJobScheduleFrequency(root: jsonP.JSONValue): JobScheduleFrequency {
  return jsonP.readObj({
    required: {},
    optional: {
      "dailySchedule": toDailySchedule,
      "monthlySchedule": toMonthlySchedule,
      "weeklySchedule": toWeeklySchedule,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DailySchedule {
}
function fromDailySchedule(input?: DailySchedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toDailySchedule(root: jsonP.JSONValue): DailySchedule {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface MonthlySchedule {
  dayOfMonth?: number | null;
}
function fromMonthlySchedule(input?: MonthlySchedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dayOfMonth: input["dayOfMonth"],
  }
}
function toMonthlySchedule(root: jsonP.JSONValue): MonthlySchedule {
  return jsonP.readObj({
    required: {},
    optional: {
      "dayOfMonth": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface WeeklySchedule {
  dayOfWeek?: DayOfWeek | null;
}
function fromWeeklySchedule(input?: WeeklySchedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dayOfWeek: input["dayOfWeek"],
  }
}
function toWeeklySchedule(root: jsonP.JSONValue): WeeklySchedule {
  return jsonP.readObj({
    required: {},
    optional: {
      "dayOfWeek": (x: jsonP.JSONValue) => cmnP.readEnum<DayOfWeek>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type DayOfWeek =
| "SUNDAY"
| "MONDAY"
| "TUESDAY"
| "WEDNESDAY"
| "THURSDAY"
| "FRIDAY"
| "SATURDAY"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type FindingsFilterAction =
| "ARCHIVE"
| "NOOP"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface FindingCriteria {
  criterion?: { [key: string]: CriterionAdditionalProperties | null | undefined } | null;
}
function fromFindingCriteria(input?: FindingCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    criterion: jsonP.serializeMap(input["criterion"], x => fromCriterionAdditionalProperties(x)),
  }
}
function toFindingCriteria(root: jsonP.JSONValue): FindingCriteria {
  return jsonP.readObj({
    required: {},
    optional: {
      "criterion": x => jsonP.readMap(String, toCriterionAdditionalProperties, x),
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface CriterionAdditionalProperties {
  eq?: string[] | null;
  gt?: number | null;
  gte?: number | null;
  lt?: number | null;
  lte?: number | null;
  neq?: string[] | null;
}
function fromCriterionAdditionalProperties(input?: CriterionAdditionalProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eq: input["eq"],
    gt: input["gt"],
    gte: input["gte"],
    lt: input["lt"],
    lte: input["lte"],
    neq: input["neq"],
  }
}
function toCriterionAdditionalProperties(root: jsonP.JSONValue): CriterionAdditionalProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "eq": ["s"],
      "gt": "n",
      "gte": "n",
      "lt": "n",
      "lte": "n",
      "neq": ["s"],
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface AccountDetail {
  accountId: string;
  email: string;
}
function fromAccountDetail(input?: AccountDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    accountId: input["accountId"],
    email: input["email"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type FindingType =
| "SensitiveData:S3Object/Multiple"
| "SensitiveData:S3Object/Financial"
| "SensitiveData:S3Object/Personal"
| "SensitiveData:S3Object/Credentials"
| "SensitiveData:S3Object/CustomIdentifier"
| "Policy:IAMUser/S3BucketPublic"
| "Policy:IAMUser/S3BucketSharedExternally"
| "Policy:IAMUser/S3BucketReplicatedExternally"
| "Policy:IAMUser/S3BucketEncryptionDisabled"
| "Policy:IAMUser/S3BlockPublicAccessDisabled"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface BucketCriteriaAdditionalProperties {
  eq?: string[] | null;
  gt?: number | null;
  gte?: number | null;
  lt?: number | null;
  lte?: number | null;
  neq?: string[] | null;
  prefix?: string | null;
}
function fromBucketCriteriaAdditionalProperties(input?: BucketCriteriaAdditionalProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eq: input["eq"],
    gt: input["gt"],
    gte: input["gte"],
    lt: input["lt"],
    lte: input["lte"],
    neq: input["neq"],
    prefix: input["prefix"],
  }
}

// refs: 1 - tags: input, named, interface
export interface BucketSortCriteria {
  attributeName?: string | null;
  orderBy?: OrderBy | null;
}
function fromBucketSortCriteria(input?: BucketSortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributeName: input["attributeName"],
    orderBy: input["orderBy"],
  }
}

// refs: 6 - tags: input, named, enum
export type OrderBy =
| "ASC"
| "DESC"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type FindingPublishingFrequency =
| "FIFTEEN_MINUTES"
| "ONE_HOUR"
| "SIX_HOURS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type MacieStatus =
| "PAUSED"
| "ENABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type GroupBy =
| "resourcesAffected.s3Bucket.name"
| "type"
| "classificationDetails.jobId"
| "severity.description"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface FindingStatisticsSortCriteria {
  attributeName?: FindingStatisticsSortAttributeName | null;
  orderBy?: OrderBy | null;
}
function fromFindingStatisticsSortCriteria(input?: FindingStatisticsSortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributeName: input["attributeName"],
    orderBy: input["orderBy"],
  }
}

// refs: 1 - tags: input, named, enum
export type FindingStatisticsSortAttributeName =
| "groupKey"
| "count"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface SortCriteria {
  attributeName?: string | null;
  orderBy?: OrderBy | null;
}
function fromSortCriteria(input?: SortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributeName: input["attributeName"],
    orderBy: input["orderBy"],
  }
}

// refs: 1 - tags: input, named, interface
export interface UsageStatisticsFilter {
  comparator?: UsageStatisticsFilterComparator | null;
  key?: UsageStatisticsFilterKey | null;
  values?: string[] | null;
}
function fromUsageStatisticsFilter(input?: UsageStatisticsFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    comparator: input["comparator"],
    key: input["key"],
    values: input["values"],
  }
}

// refs: 1 - tags: input, named, enum
export type UsageStatisticsFilterComparator =
| "GT"
| "GTE"
| "LT"
| "LTE"
| "EQ"
| "NE"
| "CONTAINS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UsageStatisticsFilterKey =
| "accountId"
| "serviceLimit"
| "freeTrialStartDate"
| "total"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UsageStatisticsSortBy {
  key?: UsageStatisticsSortKey | null;
  orderBy?: OrderBy | null;
}
function fromUsageStatisticsSortBy(input?: UsageStatisticsSortBy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    orderBy: input["orderBy"],
  }
}

// refs: 1 - tags: input, named, enum
export type UsageStatisticsSortKey =
| "accountId"
| "total"
| "serviceLimitValue"
| "freeTrialStartDate"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ListJobsFilterCriteria {
  excludes?: ListJobsFilterTerm[] | null;
  includes?: ListJobsFilterTerm[] | null;
}
function fromListJobsFilterCriteria(input?: ListJobsFilterCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    excludes: input["excludes"]?.map(x => fromListJobsFilterTerm(x)),
    includes: input["includes"]?.map(x => fromListJobsFilterTerm(x)),
  }
}

// refs: 2 - tags: input, named, interface
export interface ListJobsFilterTerm {
  comparator?: JobComparator | null;
  key?: ListJobsFilterKey | null;
  values?: string[] | null;
}
function fromListJobsFilterTerm(input?: ListJobsFilterTerm | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    comparator: input["comparator"],
    key: input["key"],
    values: input["values"],
  }
}

// refs: 2 - tags: input, named, enum
export type ListJobsFilterKey =
| "jobType"
| "jobStatus"
| "createdAt"
| "name"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ListJobsSortCriteria {
  attributeName?: ListJobsSortAttributeName | null;
  orderBy?: OrderBy | null;
}
function fromListJobsSortCriteria(input?: ListJobsSortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributeName: input["attributeName"],
    orderBy: input["orderBy"],
  }
}

// refs: 1 - tags: input, named, enum
export type ListJobsSortAttributeName =
| "createdAt"
| "jobStatus"
| "name"
| "jobType"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface ClassificationExportConfiguration {
  s3Destination?: S3Destination | null;
}
function fromClassificationExportConfiguration(input?: ClassificationExportConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Destination: fromS3Destination(input["s3Destination"]),
  }
}
function toClassificationExportConfiguration(root: jsonP.JSONValue): ClassificationExportConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3Destination": toS3Destination,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3Destination {
  bucketName: string;
  keyPrefix?: string | null;
  kmsKeyArn: string;
}
function fromS3Destination(input?: S3Destination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucketName: input["bucketName"],
    keyPrefix: input["keyPrefix"],
    kmsKeyArn: input["kmsKeyArn"],
  }
}
function toS3Destination(root: jsonP.JSONValue): S3Destination {
  return jsonP.readObj({
    required: {
      "bucketName": "s",
      "kmsKeyArn": "s",
    },
    optional: {
      "keyPrefix": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type JobStatus =
| "RUNNING"
| "PAUSED"
| "CANCELLED"
| "COMPLETE"
| "IDLE"
| "USER_PAUSED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchGetCustomDataIdentifierSummary {
  arn?: string | null;
  createdAt?: Date | number | null;
  deleted?: boolean | null;
  description?: string | null;
  id?: string | null;
  name?: string | null;
}
function toBatchGetCustomDataIdentifierSummary(root: jsonP.JSONValue): BatchGetCustomDataIdentifierSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "createdAt": "d",
      "deleted": "b",
      "description": "s",
      "id": "s",
      "name": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface UnprocessedAccount {
  accountId?: string | null;
  errorCode?: ErrorCode | null;
  errorMessage?: string | null;
}
function toUnprocessedAccount(root: jsonP.JSONValue): UnprocessedAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "errorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "errorMessage": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ErrorCode =
| "ClientError"
| "InternalError"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BucketMetadata {
  accountId?: string | null;
  bucketArn?: string | null;
  bucketCreatedAt?: Date | number | null;
  bucketName?: string | null;
  classifiableObjectCount?: number | null;
  classifiableSizeInBytes?: number | null;
  lastUpdated?: Date | number | null;
  objectCount?: number | null;
  objectCountByEncryptionType?: ObjectCountByEncryptionType | null;
  publicAccess?: BucketPublicAccess | null;
  region?: string | null;
  replicationDetails?: ReplicationDetails | null;
  sharedAccess?: SharedAccess | null;
  sizeInBytes?: number | null;
  sizeInBytesCompressed?: number | null;
  tags?: KeyValuePair[] | null;
  unclassifiableObjectCount?: ObjectLevelStatistics | null;
  unclassifiableObjectSizeInBytes?: ObjectLevelStatistics | null;
  versioning?: boolean | null;
}
function toBucketMetadata(root: jsonP.JSONValue): BucketMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "bucketArn": "s",
      "bucketCreatedAt": "d",
      "bucketName": "s",
      "classifiableObjectCount": "n",
      "classifiableSizeInBytes": "n",
      "lastUpdated": "d",
      "objectCount": "n",
      "objectCountByEncryptionType": toObjectCountByEncryptionType,
      "publicAccess": toBucketPublicAccess,
      "region": "s",
      "replicationDetails": toReplicationDetails,
      "sharedAccess": (x: jsonP.JSONValue) => cmnP.readEnum<SharedAccess>(x),
      "sizeInBytes": "n",
      "sizeInBytesCompressed": "n",
      "tags": [toKeyValuePair],
      "unclassifiableObjectCount": toObjectLevelStatistics,
      "unclassifiableObjectSizeInBytes": toObjectLevelStatistics,
      "versioning": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ObjectCountByEncryptionType {
  customerManaged?: number | null;
  kmsManaged?: number | null;
  s3Managed?: number | null;
  unencrypted?: number | null;
}
function toObjectCountByEncryptionType(root: jsonP.JSONValue): ObjectCountByEncryptionType {
  return jsonP.readObj({
    required: {},
    optional: {
      "customerManaged": "n",
      "kmsManaged": "n",
      "s3Managed": "n",
      "unencrypted": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BucketPublicAccess {
  effectivePermission?: EffectivePermission | null;
  permissionConfiguration?: BucketPermissionConfiguration | null;
}
function toBucketPublicAccess(root: jsonP.JSONValue): BucketPublicAccess {
  return jsonP.readObj({
    required: {},
    optional: {
      "effectivePermission": (x: jsonP.JSONValue) => cmnP.readEnum<EffectivePermission>(x),
      "permissionConfiguration": toBucketPermissionConfiguration,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type EffectivePermission =
| "PUBLIC"
| "NOT_PUBLIC"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface BucketPermissionConfiguration {
  accountLevelPermissions?: AccountLevelPermissions | null;
  bucketLevelPermissions?: BucketLevelPermissions | null;
}
function toBucketPermissionConfiguration(root: jsonP.JSONValue): BucketPermissionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountLevelPermissions": toAccountLevelPermissions,
      "bucketLevelPermissions": toBucketLevelPermissions,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AccountLevelPermissions {
  blockPublicAccess?: BlockPublicAccess | null;
}
function toAccountLevelPermissions(root: jsonP.JSONValue): AccountLevelPermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "blockPublicAccess": toBlockPublicAccess,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface BlockPublicAccess {
  blockPublicAcls?: boolean | null;
  blockPublicPolicy?: boolean | null;
  ignorePublicAcls?: boolean | null;
  restrictPublicBuckets?: boolean | null;
}
function toBlockPublicAccess(root: jsonP.JSONValue): BlockPublicAccess {
  return jsonP.readObj({
    required: {},
    optional: {
      "blockPublicAcls": "b",
      "blockPublicPolicy": "b",
      "ignorePublicAcls": "b",
      "restrictPublicBuckets": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BucketLevelPermissions {
  accessControlList?: AccessControlList | null;
  blockPublicAccess?: BlockPublicAccess | null;
  bucketPolicy?: BucketPolicy | null;
}
function toBucketLevelPermissions(root: jsonP.JSONValue): BucketLevelPermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "accessControlList": toAccessControlList,
      "blockPublicAccess": toBlockPublicAccess,
      "bucketPolicy": toBucketPolicy,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AccessControlList {
  allowsPublicReadAccess?: boolean | null;
  allowsPublicWriteAccess?: boolean | null;
}
function toAccessControlList(root: jsonP.JSONValue): AccessControlList {
  return jsonP.readObj({
    required: {},
    optional: {
      "allowsPublicReadAccess": "b",
      "allowsPublicWriteAccess": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BucketPolicy {
  allowsPublicReadAccess?: boolean | null;
  allowsPublicWriteAccess?: boolean | null;
}
function toBucketPolicy(root: jsonP.JSONValue): BucketPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "allowsPublicReadAccess": "b",
      "allowsPublicWriteAccess": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReplicationDetails {
  replicated?: boolean | null;
  replicatedExternally?: boolean | null;
  replicationAccounts?: string[] | null;
}
function toReplicationDetails(root: jsonP.JSONValue): ReplicationDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "replicated": "b",
      "replicatedExternally": "b",
      "replicationAccounts": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SharedAccess =
| "EXTERNAL"
| "INTERNAL"
| "NOT_SHARED"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface KeyValuePair {
  key?: string | null;
  value?: string | null;
}
function toKeyValuePair(root: jsonP.JSONValue): KeyValuePair {
  return jsonP.readObj({
    required: {},
    optional: {
      "key": "s",
      "value": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ObjectLevelStatistics {
  fileType?: number | null;
  storageClass?: number | null;
  total?: number | null;
}
function toObjectLevelStatistics(root: jsonP.JSONValue): ObjectLevelStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "fileType": "n",
      "storageClass": "n",
      "total": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Statistics {
  approximateNumberOfObjectsToProcess?: number | null;
  numberOfRuns?: number | null;
}
function toStatistics(root: jsonP.JSONValue): Statistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "approximateNumberOfObjectsToProcess": "n",
      "numberOfRuns": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface UserPausedDetails {
  jobExpiresAt?: Date | number | null;
  jobImminentExpirationHealthEventArn?: string | null;
  jobPausedAt?: Date | number | null;
}
function toUserPausedDetails(root: jsonP.JSONValue): UserPausedDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "jobExpiresAt": "d",
      "jobImminentExpirationHealthEventArn": "s",
      "jobPausedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BucketCountByEffectivePermission {
  publiclyAccessible?: number | null;
  publiclyReadable?: number | null;
  publiclyWritable?: number | null;
  unknown?: number | null;
}
function toBucketCountByEffectivePermission(root: jsonP.JSONValue): BucketCountByEffectivePermission {
  return jsonP.readObj({
    required: {},
    optional: {
      "publiclyAccessible": "n",
      "publiclyReadable": "n",
      "publiclyWritable": "n",
      "unknown": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BucketCountByEncryptionType {
  kmsManaged?: number | null;
  s3Managed?: number | null;
  unencrypted?: number | null;
}
function toBucketCountByEncryptionType(root: jsonP.JSONValue): BucketCountByEncryptionType {
  return jsonP.readObj({
    required: {},
    optional: {
      "kmsManaged": "n",
      "s3Managed": "n",
      "unencrypted": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BucketCountBySharedAccessType {
  external?: number | null;
  internal?: number | null;
  notShared?: number | null;
  unknown?: number | null;
}
function toBucketCountBySharedAccessType(root: jsonP.JSONValue): BucketCountBySharedAccessType {
  return jsonP.readObj({
    required: {},
    optional: {
      "external": "n",
      "internal": "n",
      "notShared": "n",
      "unknown": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GroupCount {
  count?: number | null;
  groupKey?: string | null;
}
function toGroupCount(root: jsonP.JSONValue): GroupCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "count": "n",
      "groupKey": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Finding {
  accountId?: string | null;
  archived?: boolean | null;
  category?: FindingCategory | null;
  classificationDetails?: ClassificationDetails | null;
  count?: number | null;
  createdAt?: Date | number | null;
  description?: string | null;
  id?: string | null;
  partition?: string | null;
  policyDetails?: PolicyDetails | null;
  region?: string | null;
  resourcesAffected?: ResourcesAffected | null;
  sample?: boolean | null;
  schemaVersion?: string | null;
  severity?: Severity | null;
  title?: string | null;
  type?: FindingType | null;
  updatedAt?: Date | number | null;
}
function toFinding(root: jsonP.JSONValue): Finding {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "archived": "b",
      "category": (x: jsonP.JSONValue) => cmnP.readEnum<FindingCategory>(x),
      "classificationDetails": toClassificationDetails,
      "count": "n",
      "createdAt": "d",
      "description": "s",
      "id": "s",
      "partition": "s",
      "policyDetails": toPolicyDetails,
      "region": "s",
      "resourcesAffected": toResourcesAffected,
      "sample": "b",
      "schemaVersion": "s",
      "severity": toSeverity,
      "title": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<FindingType>(x),
      "updatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type FindingCategory =
| "CLASSIFICATION"
| "POLICY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ClassificationDetails {
  detailedResultsLocation?: string | null;
  jobArn?: string | null;
  jobId?: string | null;
  result?: ClassificationResult | null;
}
function toClassificationDetails(root: jsonP.JSONValue): ClassificationDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "detailedResultsLocation": "s",
      "jobArn": "s",
      "jobId": "s",
      "result": toClassificationResult,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ClassificationResult {
  additionalOccurrences?: boolean | null;
  customDataIdentifiers?: CustomDataIdentifiers | null;
  mimeType?: string | null;
  sensitiveData?: SensitiveDataItem[] | null;
  sizeClassified?: number | null;
  status?: ClassificationResultStatus | null;
}
function toClassificationResult(root: jsonP.JSONValue): ClassificationResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "additionalOccurrences": "b",
      "customDataIdentifiers": toCustomDataIdentifiers,
      "mimeType": "s",
      "sensitiveData": [toSensitiveDataItem],
      "sizeClassified": "n",
      "status": toClassificationResultStatus,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CustomDataIdentifiers {
  detections?: CustomDetection[] | null;
  totalCount?: number | null;
}
function toCustomDataIdentifiers(root: jsonP.JSONValue): CustomDataIdentifiers {
  return jsonP.readObj({
    required: {},
    optional: {
      "detections": [toCustomDetection],
      "totalCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CustomDetection {
  arn?: string | null;
  count?: number | null;
  name?: string | null;
  occurrences?: Occurrences | null;
}
function toCustomDetection(root: jsonP.JSONValue): CustomDetection {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "count": "n",
      "name": "s",
      "occurrences": toOccurrences,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Occurrences {
  cells?: Cell[] | null;
  lineRanges?: Range[] | null;
  offsetRanges?: Range[] | null;
  pages?: Page[] | null;
  records?: Record[] | null;
}
function toOccurrences(root: jsonP.JSONValue): Occurrences {
  return jsonP.readObj({
    required: {},
    optional: {
      "cells": [toCell],
      "lineRanges": [toRange],
      "offsetRanges": [toRange],
      "pages": [toPage],
      "records": [toRecord],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Cell {
  cellReference?: string | null;
  column?: number | null;
  columnName?: string | null;
  row?: number | null;
}
function toCell(root: jsonP.JSONValue): Cell {
  return jsonP.readObj({
    required: {},
    optional: {
      "cellReference": "s",
      "column": "n",
      "columnName": "s",
      "row": "n",
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface Range {
  end?: number | null;
  start?: number | null;
  startColumn?: number | null;
}
function toRange(root: jsonP.JSONValue): Range {
  return jsonP.readObj({
    required: {},
    optional: {
      "end": "n",
      "start": "n",
      "startColumn": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Page {
  lineRange?: Range | null;
  offsetRange?: Range | null;
  pageNumber?: number | null;
}
function toPage(root: jsonP.JSONValue): Page {
  return jsonP.readObj({
    required: {},
    optional: {
      "lineRange": toRange,
      "offsetRange": toRange,
      "pageNumber": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Record {
  recordIndex?: number | null;
}
function toRecord(root: jsonP.JSONValue): Record {
  return jsonP.readObj({
    required: {},
    optional: {
      "recordIndex": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SensitiveDataItem {
  category?: SensitiveDataItemCategory | null;
  detections?: DefaultDetection[] | null;
  totalCount?: number | null;
}
function toSensitiveDataItem(root: jsonP.JSONValue): SensitiveDataItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "category": (x: jsonP.JSONValue) => cmnP.readEnum<SensitiveDataItemCategory>(x),
      "detections": [toDefaultDetection],
      "totalCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SensitiveDataItemCategory =
| "FINANCIAL_INFORMATION"
| "PERSONAL_INFORMATION"
| "CREDENTIALS"
| "CUSTOM_IDENTIFIER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DefaultDetection {
  count?: number | null;
  occurrences?: Occurrences | null;
  type?: string | null;
}
function toDefaultDetection(root: jsonP.JSONValue): DefaultDetection {
  return jsonP.readObj({
    required: {},
    optional: {
      "count": "n",
      "occurrences": toOccurrences,
      "type": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ClassificationResultStatus {
  code?: string | null;
  reason?: string | null;
}
function toClassificationResultStatus(root: jsonP.JSONValue): ClassificationResultStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "s",
      "reason": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PolicyDetails {
  action?: FindingAction | null;
  actor?: FindingActor | null;
}
function toPolicyDetails(root: jsonP.JSONValue): PolicyDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "action": toFindingAction,
      "actor": toFindingActor,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FindingAction {
  actionType?: FindingActionType | null;
  apiCallDetails?: ApiCallDetails | null;
}
function toFindingAction(root: jsonP.JSONValue): FindingAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "actionType": (x: jsonP.JSONValue) => cmnP.readEnum<FindingActionType>(x),
      "apiCallDetails": toApiCallDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type FindingActionType =
| "AWS_API_CALL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ApiCallDetails {
  api?: string | null;
  apiServiceName?: string | null;
  firstSeen?: Date | number | null;
  lastSeen?: Date | number | null;
}
function toApiCallDetails(root: jsonP.JSONValue): ApiCallDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "api": "s",
      "apiServiceName": "s",
      "firstSeen": "d",
      "lastSeen": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FindingActor {
  domainDetails?: DomainDetails | null;
  ipAddressDetails?: IpAddressDetails | null;
  userIdentity?: UserIdentity | null;
}
function toFindingActor(root: jsonP.JSONValue): FindingActor {
  return jsonP.readObj({
    required: {},
    optional: {
      "domainDetails": toDomainDetails,
      "ipAddressDetails": toIpAddressDetails,
      "userIdentity": toUserIdentity,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DomainDetails {
  domainName?: string | null;
}
function toDomainDetails(root: jsonP.JSONValue): DomainDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "domainName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IpAddressDetails {
  ipAddressV4?: string | null;
  ipCity?: IpCity | null;
  ipCountry?: IpCountry | null;
  ipGeoLocation?: IpGeoLocation | null;
  ipOwner?: IpOwner | null;
}
function toIpAddressDetails(root: jsonP.JSONValue): IpAddressDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "ipAddressV4": "s",
      "ipCity": toIpCity,
      "ipCountry": toIpCountry,
      "ipGeoLocation": toIpGeoLocation,
      "ipOwner": toIpOwner,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IpCity {
  name?: string | null;
}
function toIpCity(root: jsonP.JSONValue): IpCity {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IpCountry {
  code?: string | null;
  name?: string | null;
}
function toIpCountry(root: jsonP.JSONValue): IpCountry {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "s",
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IpGeoLocation {
  lat?: number | null;
  lon?: number | null;
}
function toIpGeoLocation(root: jsonP.JSONValue): IpGeoLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "lat": "n",
      "lon": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IpOwner {
  asn?: string | null;
  asnOrg?: string | null;
  isp?: string | null;
  org?: string | null;
}
function toIpOwner(root: jsonP.JSONValue): IpOwner {
  return jsonP.readObj({
    required: {},
    optional: {
      "asn": "s",
      "asnOrg": "s",
      "isp": "s",
      "org": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserIdentity {
  assumedRole?: AssumedRole | null;
  awsAccount?: AwsAccount | null;
  awsService?: AwsService | null;
  federatedUser?: FederatedUser | null;
  iamUser?: IamUser | null;
  root?: UserIdentityRoot | null;
  type?: UserIdentityType | null;
}
function toUserIdentity(root: jsonP.JSONValue): UserIdentity {
  return jsonP.readObj({
    required: {},
    optional: {
      "assumedRole": toAssumedRole,
      "awsAccount": toAwsAccount,
      "awsService": toAwsService,
      "federatedUser": toFederatedUser,
      "iamUser": toIamUser,
      "root": toUserIdentityRoot,
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<UserIdentityType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssumedRole {
  accessKeyId?: string | null;
  accountId?: string | null;
  arn?: string | null;
  principalId?: string | null;
  sessionContext?: SessionContext | null;
}
function toAssumedRole(root: jsonP.JSONValue): AssumedRole {
  return jsonP.readObj({
    required: {},
    optional: {
      "accessKeyId": "s",
      "accountId": "s",
      "arn": "s",
      "principalId": "s",
      "sessionContext": toSessionContext,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SessionContext {
  attributes?: SessionContextAttributes | null;
  sessionIssuer?: SessionIssuer | null;
}
function toSessionContext(root: jsonP.JSONValue): SessionContext {
  return jsonP.readObj({
    required: {},
    optional: {
      "attributes": toSessionContextAttributes,
      "sessionIssuer": toSessionIssuer,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SessionContextAttributes {
  creationDate?: Date | number | null;
  mfaAuthenticated?: boolean | null;
}
function toSessionContextAttributes(root: jsonP.JSONValue): SessionContextAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "creationDate": "d",
      "mfaAuthenticated": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SessionIssuer {
  accountId?: string | null;
  arn?: string | null;
  principalId?: string | null;
  type?: string | null;
  userName?: string | null;
}
function toSessionIssuer(root: jsonP.JSONValue): SessionIssuer {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "arn": "s",
      "principalId": "s",
      "type": "s",
      "userName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AwsAccount {
  accountId?: string | null;
  principalId?: string | null;
}
function toAwsAccount(root: jsonP.JSONValue): AwsAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "principalId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AwsService {
  invokedBy?: string | null;
}
function toAwsService(root: jsonP.JSONValue): AwsService {
  return jsonP.readObj({
    required: {},
    optional: {
      "invokedBy": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FederatedUser {
  accessKeyId?: string | null;
  accountId?: string | null;
  arn?: string | null;
  principalId?: string | null;
  sessionContext?: SessionContext | null;
}
function toFederatedUser(root: jsonP.JSONValue): FederatedUser {
  return jsonP.readObj({
    required: {},
    optional: {
      "accessKeyId": "s",
      "accountId": "s",
      "arn": "s",
      "principalId": "s",
      "sessionContext": toSessionContext,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IamUser {
  accountId?: string | null;
  arn?: string | null;
  principalId?: string | null;
  userName?: string | null;
}
function toIamUser(root: jsonP.JSONValue): IamUser {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "arn": "s",
      "principalId": "s",
      "userName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserIdentityRoot {
  accountId?: string | null;
  arn?: string | null;
  principalId?: string | null;
}
function toUserIdentityRoot(root: jsonP.JSONValue): UserIdentityRoot {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "arn": "s",
      "principalId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type UserIdentityType =
| "AssumedRole"
| "IAMUser"
| "FederatedUser"
| "Root"
| "AWSAccount"
| "AWSService"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ResourcesAffected {
  s3Bucket?: S3Bucket | null;
  s3Object?: S3Object | null;
}
function toResourcesAffected(root: jsonP.JSONValue): ResourcesAffected {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3Bucket": toS3Bucket,
      "s3Object": toS3Object,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface S3Bucket {
  arn?: string | null;
  createdAt?: Date | number | null;
  defaultServerSideEncryption?: ServerSideEncryption | null;
  name?: string | null;
  owner?: S3BucketOwner | null;
  publicAccess?: BucketPublicAccess | null;
  tags?: KeyValuePair[] | null;
}
function toS3Bucket(root: jsonP.JSONValue): S3Bucket {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "createdAt": "d",
      "defaultServerSideEncryption": toServerSideEncryption,
      "name": "s",
      "owner": toS3BucketOwner,
      "publicAccess": toBucketPublicAccess,
      "tags": [toKeyValuePair],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ServerSideEncryption {
  encryptionType?: EncryptionType | null;
  kmsMasterKeyId?: string | null;
}
function toServerSideEncryption(root: jsonP.JSONValue): ServerSideEncryption {
  return jsonP.readObj({
    required: {},
    optional: {
      "encryptionType": (x: jsonP.JSONValue) => cmnP.readEnum<EncryptionType>(x),
      "kmsMasterKeyId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type EncryptionType =
| "NONE"
| "AES256"
| "aws:kms"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface S3BucketOwner {
  displayName?: string | null;
  id?: string | null;
}
function toS3BucketOwner(root: jsonP.JSONValue): S3BucketOwner {
  return jsonP.readObj({
    required: {},
    optional: {
      "displayName": "s",
      "id": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface S3Object {
  bucketArn?: string | null;
  eTag?: string | null;
  extension?: string | null;
  key?: string | null;
  lastModified?: Date | number | null;
  path?: string | null;
  publicAccess?: boolean | null;
  serverSideEncryption?: ServerSideEncryption | null;
  size?: number | null;
  storageClass?: StorageClass | null;
  tags?: KeyValuePair[] | null;
  versionId?: string | null;
}
function toS3Object(root: jsonP.JSONValue): S3Object {
  return jsonP.readObj({
    required: {},
    optional: {
      "bucketArn": "s",
      "eTag": "s",
      "extension": "s",
      "key": "s",
      "lastModified": "d",
      "path": "s",
      "publicAccess": "b",
      "serverSideEncryption": toServerSideEncryption,
      "size": "n",
      "storageClass": (x: jsonP.JSONValue) => cmnP.readEnum<StorageClass>(x),
      "tags": [toKeyValuePair],
      "versionId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type StorageClass =
| "STANDARD"
| "REDUCED_REDUNDANCY"
| "STANDARD_IA"
| "INTELLIGENT_TIERING"
| "DEEP_ARCHIVE"
| "ONEZONE_IA"
| "GLACIER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Severity {
  description?: SeverityDescription | null;
  score?: number | null;
}
function toSeverity(root: jsonP.JSONValue): Severity {
  return jsonP.readObj({
    required: {},
    optional: {
      "description": (x: jsonP.JSONValue) => cmnP.readEnum<SeverityDescription>(x),
      "score": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SeverityDescription =
| "Low"
| "Medium"
| "High"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Invitation {
  accountId?: string | null;
  invitationId?: string | null;
  invitedAt?: Date | number | null;
  relationshipStatus?: RelationshipStatus | null;
}
function toInvitation(root: jsonP.JSONValue): Invitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "invitationId": "s",
      "invitedAt": "d",
      "relationshipStatus": (x: jsonP.JSONValue) => cmnP.readEnum<RelationshipStatus>(x),
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type RelationshipStatus =
| "Enabled"
| "Paused"
| "Invited"
| "Created"
| "Removed"
| "Resigned"
| "EmailVerificationInProgress"
| "EmailVerificationFailed"
| "RegionDisabled"
| "AccountSuspended"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface UsageRecord {
  accountId?: string | null;
  freeTrialStartDate?: Date | number | null;
  usage?: UsageByAccount[] | null;
}
function toUsageRecord(root: jsonP.JSONValue): UsageRecord {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "freeTrialStartDate": "d",
      "usage": [toUsageByAccount],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UsageByAccount {
  currency?: Currency | null;
  estimatedCost?: string | null;
  serviceLimit?: ServiceLimit | null;
  type?: UsageType | null;
}
function toUsageByAccount(root: jsonP.JSONValue): UsageByAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "currency": (x: jsonP.JSONValue) => cmnP.readEnum<Currency>(x),
      "estimatedCost": "s",
      "serviceLimit": toServiceLimit,
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<UsageType>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type Currency =
| "USD"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ServiceLimit {
  isServiceLimited?: boolean | null;
  unit?: Unit | null;
  value?: number | null;
}
function toServiceLimit(root: jsonP.JSONValue): ServiceLimit {
  return jsonP.readObj({
    required: {},
    optional: {
      "isServiceLimited": "b",
      "unit": (x: jsonP.JSONValue) => cmnP.readEnum<Unit>(x),
      "value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Unit =
| "TERABYTES"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type UsageType =
| "DATA_INVENTORY_EVALUATION"
| "SENSITIVE_DATA_DISCOVERY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface UsageTotal {
  currency?: Currency | null;
  estimatedCost?: string | null;
  type?: UsageType | null;
}
function toUsageTotal(root: jsonP.JSONValue): UsageTotal {
  return jsonP.readObj({
    required: {},
    optional: {
      "currency": (x: jsonP.JSONValue) => cmnP.readEnum<Currency>(x),
      "estimatedCost": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<UsageType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobSummary {
  bucketDefinitions?: S3BucketDefinitionForJob[] | null;
  createdAt?: Date | number | null;
  jobId?: string | null;
  jobStatus?: JobStatus | null;
  jobType?: JobType | null;
  name?: string | null;
  userPausedDetails?: UserPausedDetails | null;
}
function toJobSummary(root: jsonP.JSONValue): JobSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "bucketDefinitions": [toS3BucketDefinitionForJob],
      "createdAt": "d",
      "jobId": "s",
      "jobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "jobType": (x: jsonP.JSONValue) => cmnP.readEnum<JobType>(x),
      "name": "s",
      "userPausedDetails": toUserPausedDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CustomDataIdentifierSummary {
  arn?: string | null;
  createdAt?: Date | number | null;
  description?: string | null;
  id?: string | null;
  name?: string | null;
}
function toCustomDataIdentifierSummary(root: jsonP.JSONValue): CustomDataIdentifierSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "createdAt": "d",
      "description": "s",
      "id": "s",
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FindingsFilterListItem {
  action?: FindingsFilterAction | null;
  arn?: string | null;
  id?: string | null;
  name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toFindingsFilterListItem(root: jsonP.JSONValue): FindingsFilterListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<FindingsFilterAction>(x),
      "arn": "s",
      "id": "s",
      "name": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Member {
  accountId?: string | null;
  arn?: string | null;
  email?: string | null;
  invitedAt?: Date | number | null;
  masterAccountId?: string | null;
  relationshipStatus?: RelationshipStatus | null;
  tags?: { [key: string]: string | null | undefined } | null;
  updatedAt?: Date | number | null;
}
function toMember(root: jsonP.JSONValue): Member {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "arn": "s",
      "email": "s",
      "invitedAt": "d",
      "masterAccountId": "s",
      "relationshipStatus": (x: jsonP.JSONValue) => cmnP.readEnum<RelationshipStatus>(x),
      "tags": x => jsonP.readMap(String, String, x),
      "updatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AdminAccount {
  accountId?: string | null;
  status?: AdminStatus | null;
}
function toAdminAccount(root: jsonP.JSONValue): AdminAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AdminStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AdminStatus =
| "ENABLED"
| "DISABLING_IN_PROGRESS"
| cmnP.UnexpectedEnumValue;
