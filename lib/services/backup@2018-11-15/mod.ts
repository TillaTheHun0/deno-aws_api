// Autogenerated API client for: AWS Backup

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Backup {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Backup.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-11-15",
    "endpointPrefix": "backup",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS Backup",
    "serviceId": "Backup",
    "signatureVersion": "v4",
    "uid": "backup-2018-11-15"
  };

  async createBackupPlan(
    {abortSignal, ...params}: RequestConfig & s.CreateBackupPlanInput,
  ): Promise<s.CreateBackupPlanOutput> {
    const body: jsonP.JSONObject = {
      BackupPlan: fromBackupPlanInput(params["BackupPlan"]),
      BackupPlanTags: params["BackupPlanTags"],
      CreatorRequestId: params["CreatorRequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackupPlan",
      method: "PUT",
      requestUri: "/backup/plans/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPlanId": "s",
        "BackupPlanArn": "s",
        "CreationDate": "d",
        "VersionId": "s",
        "AdvancedBackupSettings": [toAdvancedBackupSetting],
      },
    }, await resp.json());
  }

  async createBackupSelection(
    {abortSignal, ...params}: RequestConfig & s.CreateBackupSelectionInput,
  ): Promise<s.CreateBackupSelectionOutput> {
    const body: jsonP.JSONObject = {
      BackupSelection: fromBackupSelection(params["BackupSelection"]),
      CreatorRequestId: params["CreatorRequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackupSelection",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SelectionId": "s",
        "BackupPlanId": "s",
        "CreationDate": "d",
      },
    }, await resp.json());
  }

  async createBackupVault(
    {abortSignal, ...params}: RequestConfig & s.CreateBackupVaultInput,
  ): Promise<s.CreateBackupVaultOutput> {
    const body: jsonP.JSONObject = {
      BackupVaultTags: params["BackupVaultTags"],
      EncryptionKeyArn: params["EncryptionKeyArn"],
      CreatorRequestId: params["CreatorRequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackupVault",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupVaultName": "s",
        "BackupVaultArn": "s",
        "CreationDate": "d",
      },
    }, await resp.json());
  }

  async deleteBackupPlan(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackupPlanInput,
  ): Promise<s.DeleteBackupPlanOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupPlan",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPlanId": "s",
        "BackupPlanArn": "s",
        "DeletionDate": "d",
        "VersionId": "s",
      },
    }, await resp.json());
  }

  async deleteBackupSelection(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackupSelectionInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupSelection",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/${params["SelectionId"]}`,
    });
  }

  async deleteBackupVault(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackupVaultInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupVault",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}`,
    });
  }

  async deleteBackupVaultAccessPolicy(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackupVaultAccessPolicyInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupVaultAccessPolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/access-policy`,
    });
  }

  async deleteBackupVaultNotifications(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackupVaultNotificationsInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupVaultNotifications",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/notification-configuration`,
    });
  }

  async deleteRecoveryPoint(
    {abortSignal, ...params}: RequestConfig & s.DeleteRecoveryPointInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRecoveryPoint",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}`,
    });
  }

  async describeBackupJob(
    {abortSignal, ...params}: RequestConfig & s.DescribeBackupJobInput,
  ): Promise<s.DescribeBackupJobOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBackupJob",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-jobs/${params["BackupJobId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountId": "s",
        "BackupJobId": "s",
        "BackupVaultName": "s",
        "BackupVaultArn": "s",
        "RecoveryPointArn": "s",
        "ResourceArn": "s",
        "CreationDate": "d",
        "CompletionDate": "d",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.BackupJobState>(x),
        "StatusMessage": "s",
        "PercentDone": "s",
        "BackupSizeInBytes": "n",
        "IamRoleArn": "s",
        "CreatedBy": toRecoveryPointCreator,
        "ResourceType": "s",
        "BytesTransferred": "n",
        "ExpectedCompletionDate": "d",
        "StartBy": "d",
        "BackupOptions": x => jsonP.readMap(String, String, x),
        "BackupType": "s",
      },
    }, await resp.json());
  }

  async describeBackupVault(
    {abortSignal, ...params}: RequestConfig & s.DescribeBackupVaultInput,
  ): Promise<s.DescribeBackupVaultOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBackupVault",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupVaultName": "s",
        "BackupVaultArn": "s",
        "EncryptionKeyArn": "s",
        "CreationDate": "d",
        "CreatorRequestId": "s",
        "NumberOfRecoveryPoints": "n",
      },
    }, await resp.json());
  }

  async describeCopyJob(
    {abortSignal, ...params}: RequestConfig & s.DescribeCopyJobInput,
  ): Promise<s.DescribeCopyJobOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeCopyJob",
      method: "GET",
      requestUri: cmnP.encodePath`/copy-jobs/${params["CopyJobId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CopyJob": toCopyJob,
      },
    }, await resp.json());
  }

  async describeGlobalSettings(
    {abortSignal, ...params}: RequestConfig & s.DescribeGlobalSettingsInput = {},
  ): Promise<s.DescribeGlobalSettingsOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeGlobalSettings",
      method: "GET",
      requestUri: "/global-settings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GlobalSettings": x => jsonP.readMap(String, String, x),
        "LastUpdateTime": "d",
      },
    }, await resp.json());
  }

  async describeProtectedResource(
    {abortSignal, ...params}: RequestConfig & s.DescribeProtectedResourceInput,
  ): Promise<s.DescribeProtectedResourceOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProtectedResource",
      method: "GET",
      requestUri: cmnP.encodePath`/resources/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceArn": "s",
        "ResourceType": "s",
        "LastBackupTime": "d",
      },
    }, await resp.json());
  }

  async describeRecoveryPoint(
    {abortSignal, ...params}: RequestConfig & s.DescribeRecoveryPointInput,
  ): Promise<s.DescribeRecoveryPointOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRecoveryPoint",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RecoveryPointArn": "s",
        "BackupVaultName": "s",
        "BackupVaultArn": "s",
        "SourceBackupVaultArn": "s",
        "ResourceArn": "s",
        "ResourceType": "s",
        "CreatedBy": toRecoveryPointCreator,
        "IamRoleArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecoveryPointStatus>(x),
        "CreationDate": "d",
        "CompletionDate": "d",
        "BackupSizeInBytes": "n",
        "CalculatedLifecycle": toCalculatedLifecycle,
        "Lifecycle": toLifecycle,
        "EncryptionKeyArn": "s",
        "IsEncrypted": "b",
        "StorageClass": (x: jsonP.JSONValue) => cmnP.readEnum<s.StorageClass>(x),
        "LastRestoreTime": "d",
      },
    }, await resp.json());
  }

  async describeRegionSettings(
    {abortSignal, ...params}: RequestConfig & s.DescribeRegionSettingsInput = {},
  ): Promise<s.DescribeRegionSettingsOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRegionSettings",
      method: "GET",
      requestUri: "/account-settings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceTypeOptInPreference": x => jsonP.readMap(String, y => typeof y === "boolean" ? y : null, x),
      },
    }, await resp.json());
  }

  async describeRestoreJob(
    {abortSignal, ...params}: RequestConfig & s.DescribeRestoreJobInput,
  ): Promise<s.DescribeRestoreJobOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRestoreJob",
      method: "GET",
      requestUri: cmnP.encodePath`/restore-jobs/${params["RestoreJobId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountId": "s",
        "RestoreJobId": "s",
        "RecoveryPointArn": "s",
        "CreationDate": "d",
        "CompletionDate": "d",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RestoreJobStatus>(x),
        "StatusMessage": "s",
        "PercentDone": "s",
        "BackupSizeInBytes": "n",
        "IamRoleArn": "s",
        "ExpectedCompletionTimeMinutes": "n",
        "CreatedResourceArn": "s",
        "ResourceType": "s",
      },
    }, await resp.json());
  }

  async exportBackupPlanTemplate(
    {abortSignal, ...params}: RequestConfig & s.ExportBackupPlanTemplateInput,
  ): Promise<s.ExportBackupPlanTemplateOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ExportBackupPlanTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/toTemplate/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPlanTemplateJson": "s",
      },
    }, await resp.json());
  }

  async getBackupPlan(
    {abortSignal, ...params}: RequestConfig & s.GetBackupPlanInput,
  ): Promise<s.GetBackupPlanOutput> {
    const query = new URLSearchParams;
    if (params["VersionId"] != null) query.set("versionId", params["VersionId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetBackupPlan",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPlan": toBackupPlan,
        "BackupPlanId": "s",
        "BackupPlanArn": "s",
        "VersionId": "s",
        "CreatorRequestId": "s",
        "CreationDate": "d",
        "DeletionDate": "d",
        "LastExecutionDate": "d",
        "AdvancedBackupSettings": [toAdvancedBackupSetting],
      },
    }, await resp.json());
  }

  async getBackupPlanFromJSON(
    {abortSignal, ...params}: RequestConfig & s.GetBackupPlanFromJSONInput,
  ): Promise<s.GetBackupPlanFromJSONOutput> {
    const body: jsonP.JSONObject = {
      BackupPlanTemplateJson: params["BackupPlanTemplateJson"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackupPlanFromJSON",
      requestUri: "/backup/template/json/toPlan",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPlan": toBackupPlan,
      },
    }, await resp.json());
  }

  async getBackupPlanFromTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetBackupPlanFromTemplateInput,
  ): Promise<s.GetBackupPlanFromTemplateOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupPlanFromTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/template/plans/${params["BackupPlanTemplateId"]}/toPlan`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPlanDocument": toBackupPlan,
      },
    }, await resp.json());
  }

  async getBackupSelection(
    {abortSignal, ...params}: RequestConfig & s.GetBackupSelectionInput,
  ): Promise<s.GetBackupSelectionOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupSelection",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/${params["SelectionId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupSelection": toBackupSelection,
        "SelectionId": "s",
        "BackupPlanId": "s",
        "CreationDate": "d",
        "CreatorRequestId": "s",
      },
    }, await resp.json());
  }

  async getBackupVaultAccessPolicy(
    {abortSignal, ...params}: RequestConfig & s.GetBackupVaultAccessPolicyInput,
  ): Promise<s.GetBackupVaultAccessPolicyOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupVaultAccessPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/access-policy`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupVaultName": "s",
        "BackupVaultArn": "s",
        "Policy": "s",
      },
    }, await resp.json());
  }

  async getBackupVaultNotifications(
    {abortSignal, ...params}: RequestConfig & s.GetBackupVaultNotificationsInput,
  ): Promise<s.GetBackupVaultNotificationsOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupVaultNotifications",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/notification-configuration`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupVaultName": "s",
        "BackupVaultArn": "s",
        "SNSTopicArn": "s",
        "BackupVaultEvents": [(x: jsonP.JSONValue) => cmnP.readEnum<s.BackupVaultEvent>(x)],
      },
    }, await resp.json());
  }

  async getRecoveryPointRestoreMetadata(
    {abortSignal, ...params}: RequestConfig & s.GetRecoveryPointRestoreMetadataInput,
  ): Promise<s.GetRecoveryPointRestoreMetadataOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRecoveryPointRestoreMetadata",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}/restore-metadata`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupVaultArn": "s",
        "RecoveryPointArn": "s",
        "RestoreMetadata": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getSupportedResourceTypes(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<s.GetSupportedResourceTypesOutput> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSupportedResourceTypes",
      method: "GET",
      requestUri: "/supported-resource-types",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceTypes": ["s"],
      },
    }, await resp.json());
  }

  async listBackupJobs(
    {abortSignal, ...params}: RequestConfig & s.ListBackupJobsInput = {},
  ): Promise<s.ListBackupJobsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByResourceArn"] != null) query.set("resourceArn", params["ByResourceArn"]?.toString() ?? "");
    if (params["ByState"] != null) query.set("state", params["ByState"]?.toString() ?? "");
    if (params["ByBackupVaultName"] != null) query.set("backupVaultName", params["ByBackupVaultName"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    if (params["ByResourceType"] != null) query.set("resourceType", params["ByResourceType"]?.toString() ?? "");
    if (params["ByAccountId"] != null) query.set("accountId", params["ByAccountId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupJobs",
      method: "GET",
      requestUri: "/backup-jobs/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupJobs": [toBackupJob],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listBackupPlanTemplates(
    {abortSignal, ...params}: RequestConfig & s.ListBackupPlanTemplatesInput = {},
  ): Promise<s.ListBackupPlanTemplatesOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupPlanTemplates",
      method: "GET",
      requestUri: "/backup/template/plans",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "BackupPlanTemplatesList": [toBackupPlanTemplatesListMember],
      },
    }, await resp.json());
  }

  async listBackupPlanVersions(
    {abortSignal, ...params}: RequestConfig & s.ListBackupPlanVersionsInput,
  ): Promise<s.ListBackupPlanVersionsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupPlanVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/versions/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "BackupPlanVersionsList": [toBackupPlansListMember],
      },
    }, await resp.json());
  }

  async listBackupPlans(
    {abortSignal, ...params}: RequestConfig & s.ListBackupPlansInput = {},
  ): Promise<s.ListBackupPlansOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["IncludeDeleted"] != null) query.set("includeDeleted", params["IncludeDeleted"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupPlans",
      method: "GET",
      requestUri: "/backup/plans/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "BackupPlansList": [toBackupPlansListMember],
      },
    }, await resp.json());
  }

  async listBackupSelections(
    {abortSignal, ...params}: RequestConfig & s.ListBackupSelectionsInput,
  ): Promise<s.ListBackupSelectionsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupSelections",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "BackupSelectionsList": [toBackupSelectionsListMember],
      },
    }, await resp.json());
  }

  async listBackupVaults(
    {abortSignal, ...params}: RequestConfig & s.ListBackupVaultsInput = {},
  ): Promise<s.ListBackupVaultsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupVaults",
      method: "GET",
      requestUri: "/backup-vaults/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupVaultList": [toBackupVaultListMember],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCopyJobs(
    {abortSignal, ...params}: RequestConfig & s.ListCopyJobsInput = {},
  ): Promise<s.ListCopyJobsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByResourceArn"] != null) query.set("resourceArn", params["ByResourceArn"]?.toString() ?? "");
    if (params["ByState"] != null) query.set("state", params["ByState"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    if (params["ByResourceType"] != null) query.set("resourceType", params["ByResourceType"]?.toString() ?? "");
    if (params["ByDestinationVaultArn"] != null) query.set("destinationVaultArn", params["ByDestinationVaultArn"]?.toString() ?? "");
    if (params["ByAccountId"] != null) query.set("accountId", params["ByAccountId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCopyJobs",
      method: "GET",
      requestUri: "/copy-jobs/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CopyJobs": [toCopyJob],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProtectedResources(
    {abortSignal, ...params}: RequestConfig & s.ListProtectedResourcesInput = {},
  ): Promise<s.ListProtectedResourcesOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProtectedResources",
      method: "GET",
      requestUri: "/resources/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Results": [toProtectedResource],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRecoveryPointsByBackupVault(
    {abortSignal, ...params}: RequestConfig & s.ListRecoveryPointsByBackupVaultInput,
  ): Promise<s.ListRecoveryPointsByBackupVaultOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByResourceArn"] != null) query.set("resourceArn", params["ByResourceArn"]?.toString() ?? "");
    if (params["ByResourceType"] != null) query.set("resourceType", params["ByResourceType"]?.toString() ?? "");
    if (params["ByBackupPlanId"] != null) query.set("backupPlanId", params["ByBackupPlanId"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRecoveryPointsByBackupVault",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "RecoveryPoints": [toRecoveryPointByBackupVault],
      },
    }, await resp.json());
  }

  async listRecoveryPointsByResource(
    {abortSignal, ...params}: RequestConfig & s.ListRecoveryPointsByResourceInput,
  ): Promise<s.ListRecoveryPointsByResourceOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRecoveryPointsByResource",
      method: "GET",
      requestUri: cmnP.encodePath`/resources/${params["ResourceArn"]}/recovery-points/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "RecoveryPoints": [toRecoveryPointByResource],
      },
    }, await resp.json());
  }

  async listRestoreJobs(
    {abortSignal, ...params}: RequestConfig & s.ListRestoreJobsInput = {},
  ): Promise<s.ListRestoreJobsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByAccountId"] != null) query.set("accountId", params["ByAccountId"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    if (params["ByStatus"] != null) query.set("status", params["ByStatus"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRestoreJobs",
      method: "GET",
      requestUri: "/restore-jobs/",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RestoreJobs": [toRestoreJobsListMember],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & s.ListTagsInput,
  ): Promise<s.ListTagsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTags",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}/`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putBackupVaultAccessPolicy(
    {abortSignal, ...params}: RequestConfig & s.PutBackupVaultAccessPolicyInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Policy: params["Policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutBackupVaultAccessPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/access-policy`,
    });
  }

  async putBackupVaultNotifications(
    {abortSignal, ...params}: RequestConfig & s.PutBackupVaultNotificationsInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      SNSTopicArn: params["SNSTopicArn"],
      BackupVaultEvents: params["BackupVaultEvents"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutBackupVaultNotifications",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/notification-configuration`,
    });
  }

  async startBackupJob(
    {abortSignal, ...params}: RequestConfig & s.StartBackupJobInput,
  ): Promise<s.StartBackupJobOutput> {
    const body: jsonP.JSONObject = {
      BackupVaultName: params["BackupVaultName"],
      ResourceArn: params["ResourceArn"],
      IamRoleArn: params["IamRoleArn"],
      IdempotencyToken: params["IdempotencyToken"],
      StartWindowMinutes: params["StartWindowMinutes"],
      CompleteWindowMinutes: params["CompleteWindowMinutes"],
      Lifecycle: fromLifecycle(params["Lifecycle"]),
      RecoveryPointTags: params["RecoveryPointTags"],
      BackupOptions: params["BackupOptions"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartBackupJob",
      method: "PUT",
      requestUri: "/backup-jobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupJobId": "s",
        "RecoveryPointArn": "s",
        "CreationDate": "d",
      },
    }, await resp.json());
  }

  async startCopyJob(
    {abortSignal, ...params}: RequestConfig & s.StartCopyJobInput,
  ): Promise<s.StartCopyJobOutput> {
    const body: jsonP.JSONObject = {
      RecoveryPointArn: params["RecoveryPointArn"],
      SourceBackupVaultName: params["SourceBackupVaultName"],
      DestinationBackupVaultArn: params["DestinationBackupVaultArn"],
      IamRoleArn: params["IamRoleArn"],
      IdempotencyToken: params["IdempotencyToken"],
      Lifecycle: fromLifecycle(params["Lifecycle"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartCopyJob",
      method: "PUT",
      requestUri: "/copy-jobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CopyJobId": "s",
        "CreationDate": "d",
      },
    }, await resp.json());
  }

  async startRestoreJob(
    {abortSignal, ...params}: RequestConfig & s.StartRestoreJobInput,
  ): Promise<s.StartRestoreJobOutput> {
    const body: jsonP.JSONObject = {
      RecoveryPointArn: params["RecoveryPointArn"],
      Metadata: params["Metadata"],
      IamRoleArn: params["IamRoleArn"],
      IdempotencyToken: params["IdempotencyToken"],
      ResourceType: params["ResourceType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartRestoreJob",
      method: "PUT",
      requestUri: "/restore-jobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RestoreJobId": "s",
      },
    }, await resp.json());
  }

  async stopBackupJob(
    {abortSignal, ...params}: RequestConfig & s.StopBackupJobInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopBackupJob",
      requestUri: cmnP.encodePath`/backup-jobs/${params["BackupJobId"]}`,
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      TagKeyList: params["TagKeyList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: cmnP.encodePath`/untag/${params["ResourceArn"]}`,
    });
  }

  async updateBackupPlan(
    {abortSignal, ...params}: RequestConfig & s.UpdateBackupPlanInput,
  ): Promise<s.UpdateBackupPlanOutput> {
    const body: jsonP.JSONObject = {
      BackupPlan: fromBackupPlanInput(params["BackupPlan"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackupPlan",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPlanId": "s",
        "BackupPlanArn": "s",
        "CreationDate": "d",
        "VersionId": "s",
        "AdvancedBackupSettings": [toAdvancedBackupSetting],
      },
    }, await resp.json());
  }

  async updateGlobalSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateGlobalSettingsInput = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GlobalSettings: params["GlobalSettings"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGlobalSettings",
      method: "PUT",
      requestUri: "/global-settings",
    });
  }

  async updateRecoveryPointLifecycle(
    {abortSignal, ...params}: RequestConfig & s.UpdateRecoveryPointLifecycleInput,
  ): Promise<s.UpdateRecoveryPointLifecycleOutput> {
    const body: jsonP.JSONObject = {
      Lifecycle: fromLifecycle(params["Lifecycle"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRecoveryPointLifecycle",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupVaultArn": "s",
        "RecoveryPointArn": "s",
        "Lifecycle": toLifecycle,
        "CalculatedLifecycle": toCalculatedLifecycle,
      },
    }, await resp.json());
  }

  async updateRegionSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateRegionSettingsInput = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceTypeOptInPreference: params["ResourceTypeOptInPreference"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRegionSettings",
      method: "PUT",
      requestUri: "/account-settings",
    });
  }

}

function fromBackupPlanInput(input?: s.BackupPlanInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BackupPlanName: input["BackupPlanName"],
    Rules: input["Rules"]?.map(x => fromBackupRuleInput(x)),
    AdvancedBackupSettings: input["AdvancedBackupSettings"]?.map(x => fromAdvancedBackupSetting(x)),
  }
}

function fromBackupRuleInput(input?: s.BackupRuleInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RuleName: input["RuleName"],
    TargetBackupVaultName: input["TargetBackupVaultName"],
    ScheduleExpression: input["ScheduleExpression"],
    StartWindowMinutes: input["StartWindowMinutes"],
    CompletionWindowMinutes: input["CompletionWindowMinutes"],
    Lifecycle: fromLifecycle(input["Lifecycle"]),
    RecoveryPointTags: input["RecoveryPointTags"],
    CopyActions: input["CopyActions"]?.map(x => fromCopyAction(x)),
  }
}

function fromLifecycle(input?: s.Lifecycle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MoveToColdStorageAfterDays: input["MoveToColdStorageAfterDays"],
    DeleteAfterDays: input["DeleteAfterDays"],
  }
}
function toLifecycle(root: jsonP.JSONValue): s.Lifecycle {
  return jsonP.readObj({
    required: {},
    optional: {
      "MoveToColdStorageAfterDays": "n",
      "DeleteAfterDays": "n",
    },
  }, root);
}

function fromCopyAction(input?: s.CopyAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Lifecycle: fromLifecycle(input["Lifecycle"]),
    DestinationBackupVaultArn: input["DestinationBackupVaultArn"],
  }
}
function toCopyAction(root: jsonP.JSONValue): s.CopyAction {
  return jsonP.readObj({
    required: {
      "DestinationBackupVaultArn": "s",
    },
    optional: {
      "Lifecycle": toLifecycle,
    },
  }, root);
}

function fromAdvancedBackupSetting(input?: s.AdvancedBackupSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceType: input["ResourceType"],
    BackupOptions: input["BackupOptions"],
  }
}
function toAdvancedBackupSetting(root: jsonP.JSONValue): s.AdvancedBackupSetting {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "BackupOptions": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function fromBackupSelection(input?: s.BackupSelection | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SelectionName: input["SelectionName"],
    IamRoleArn: input["IamRoleArn"],
    Resources: input["Resources"],
    ListOfTags: input["ListOfTags"]?.map(x => fromCondition(x)),
  }
}
function toBackupSelection(root: jsonP.JSONValue): s.BackupSelection {
  return jsonP.readObj({
    required: {
      "SelectionName": "s",
      "IamRoleArn": "s",
    },
    optional: {
      "Resources": ["s"],
      "ListOfTags": [toCondition],
    },
  }, root);
}

function fromCondition(input?: s.Condition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConditionType: input["ConditionType"],
    ConditionKey: input["ConditionKey"],
    ConditionValue: input["ConditionValue"],
  }
}
function toCondition(root: jsonP.JSONValue): s.Condition {
  return jsonP.readObj({
    required: {
      "ConditionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConditionType>(x),
      "ConditionKey": "s",
      "ConditionValue": "s",
    },
    optional: {},
  }, root);
}

function toRecoveryPointCreator(root: jsonP.JSONValue): s.RecoveryPointCreator {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupPlanId": "s",
      "BackupPlanArn": "s",
      "BackupPlanVersion": "s",
      "BackupRuleId": "s",
    },
  }, root);
}

function toCopyJob(root: jsonP.JSONValue): s.CopyJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "CopyJobId": "s",
      "SourceBackupVaultArn": "s",
      "SourceRecoveryPointArn": "s",
      "DestinationBackupVaultArn": "s",
      "DestinationRecoveryPointArn": "s",
      "ResourceArn": "s",
      "CreationDate": "d",
      "CompletionDate": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.CopyJobState>(x),
      "StatusMessage": "s",
      "BackupSizeInBytes": "n",
      "IamRoleArn": "s",
      "CreatedBy": toRecoveryPointCreator,
      "ResourceType": "s",
    },
  }, root);
}

function toCalculatedLifecycle(root: jsonP.JSONValue): s.CalculatedLifecycle {
  return jsonP.readObj({
    required: {},
    optional: {
      "MoveToColdStorageAt": "d",
      "DeleteAt": "d",
    },
  }, root);
}

function toBackupPlan(root: jsonP.JSONValue): s.BackupPlan {
  return jsonP.readObj({
    required: {
      "BackupPlanName": "s",
      "Rules": [toBackupRule],
    },
    optional: {
      "AdvancedBackupSettings": [toAdvancedBackupSetting],
    },
  }, root);
}

function toBackupRule(root: jsonP.JSONValue): s.BackupRule {
  return jsonP.readObj({
    required: {
      "RuleName": "s",
      "TargetBackupVaultName": "s",
    },
    optional: {
      "ScheduleExpression": "s",
      "StartWindowMinutes": "n",
      "CompletionWindowMinutes": "n",
      "Lifecycle": toLifecycle,
      "RecoveryPointTags": x => jsonP.readMap(String, String, x),
      "RuleId": "s",
      "CopyActions": [toCopyAction],
    },
  }, root);
}

function toBackupJob(root: jsonP.JSONValue): s.BackupJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "BackupJobId": "s",
      "BackupVaultName": "s",
      "BackupVaultArn": "s",
      "RecoveryPointArn": "s",
      "ResourceArn": "s",
      "CreationDate": "d",
      "CompletionDate": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.BackupJobState>(x),
      "StatusMessage": "s",
      "PercentDone": "s",
      "BackupSizeInBytes": "n",
      "IamRoleArn": "s",
      "CreatedBy": toRecoveryPointCreator,
      "ExpectedCompletionDate": "d",
      "StartBy": "d",
      "ResourceType": "s",
      "BytesTransferred": "n",
      "BackupOptions": x => jsonP.readMap(String, String, x),
      "BackupType": "s",
    },
  }, root);
}

function toBackupPlanTemplatesListMember(root: jsonP.JSONValue): s.BackupPlanTemplatesListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupPlanTemplateId": "s",
      "BackupPlanTemplateName": "s",
    },
  }, root);
}

function toBackupPlansListMember(root: jsonP.JSONValue): s.BackupPlansListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupPlanArn": "s",
      "BackupPlanId": "s",
      "CreationDate": "d",
      "DeletionDate": "d",
      "VersionId": "s",
      "BackupPlanName": "s",
      "CreatorRequestId": "s",
      "LastExecutionDate": "d",
      "AdvancedBackupSettings": [toAdvancedBackupSetting],
    },
  }, root);
}

function toBackupSelectionsListMember(root: jsonP.JSONValue): s.BackupSelectionsListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "SelectionId": "s",
      "SelectionName": "s",
      "BackupPlanId": "s",
      "CreationDate": "d",
      "CreatorRequestId": "s",
      "IamRoleArn": "s",
    },
  }, root);
}

function toBackupVaultListMember(root: jsonP.JSONValue): s.BackupVaultListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupVaultName": "s",
      "BackupVaultArn": "s",
      "CreationDate": "d",
      "EncryptionKeyArn": "s",
      "CreatorRequestId": "s",
      "NumberOfRecoveryPoints": "n",
    },
  }, root);
}

function toProtectedResource(root: jsonP.JSONValue): s.ProtectedResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceArn": "s",
      "ResourceType": "s",
      "LastBackupTime": "d",
    },
  }, root);
}

function toRecoveryPointByBackupVault(root: jsonP.JSONValue): s.RecoveryPointByBackupVault {
  return jsonP.readObj({
    required: {},
    optional: {
      "RecoveryPointArn": "s",
      "BackupVaultName": "s",
      "BackupVaultArn": "s",
      "SourceBackupVaultArn": "s",
      "ResourceArn": "s",
      "ResourceType": "s",
      "CreatedBy": toRecoveryPointCreator,
      "IamRoleArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecoveryPointStatus>(x),
      "CreationDate": "d",
      "CompletionDate": "d",
      "BackupSizeInBytes": "n",
      "CalculatedLifecycle": toCalculatedLifecycle,
      "Lifecycle": toLifecycle,
      "EncryptionKeyArn": "s",
      "IsEncrypted": "b",
      "LastRestoreTime": "d",
    },
  }, root);
}

function toRecoveryPointByResource(root: jsonP.JSONValue): s.RecoveryPointByResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "RecoveryPointArn": "s",
      "CreationDate": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecoveryPointStatus>(x),
      "EncryptionKeyArn": "s",
      "BackupSizeBytes": "n",
      "BackupVaultName": "s",
    },
  }, root);
}

function toRestoreJobsListMember(root: jsonP.JSONValue): s.RestoreJobsListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "RestoreJobId": "s",
      "RecoveryPointArn": "s",
      "CreationDate": "d",
      "CompletionDate": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RestoreJobStatus>(x),
      "StatusMessage": "s",
      "PercentDone": "s",
      "BackupSizeInBytes": "n",
      "IamRoleArn": "s",
      "ExpectedCompletionTimeMinutes": "n",
      "CreatedResourceArn": "s",
      "ResourceType": "s",
    },
  }, root);
}
