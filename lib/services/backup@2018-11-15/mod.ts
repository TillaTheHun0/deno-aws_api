// Autogenerated API client for: AWS Backup

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Backup {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Backup.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-15",
    "endpointPrefix": "backup",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS Backup",
    "serviceId": "Backup",
    "signatureVersion": "v4",
    "uid": "backup-2018-11-15"
  };

  async createBackupPlan(
    {abortSignal, ...params}: RequestConfig & CreateBackupPlanInput,
  ): Promise<CreateBackupPlanOutput> {
    const body: jsonP.JSONObject = params ? {
      BackupPlan: fromBackupPlanInput(params["BackupPlan"]),
      BackupPlanTags: params["BackupPlanTags"],
      CreatorRequestId: params["CreatorRequestId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackupPlan",
      method: "PUT",
      requestUri: "/backup/plans/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupPlanId": "s",
          "BackupPlanArn": "s",
          "CreationDate": "d",
          "VersionId": "s",
          "AdvancedBackupSettings": [toAdvancedBackupSetting],
        },
      }, await resp.json()),
  };
  }

  async createBackupSelection(
    {abortSignal, ...params}: RequestConfig & CreateBackupSelectionInput,
  ): Promise<CreateBackupSelectionOutput> {
    const body: jsonP.JSONObject = params ? {
      BackupSelection: fromBackupSelection(params["BackupSelection"]),
      CreatorRequestId: params["CreatorRequestId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackupSelection",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "SelectionId": "s",
          "BackupPlanId": "s",
          "CreationDate": "d",
        },
      }, await resp.json()),
  };
  }

  async createBackupVault(
    {abortSignal, ...params}: RequestConfig & CreateBackupVaultInput,
  ): Promise<CreateBackupVaultOutput> {
    const body: jsonP.JSONObject = params ? {
      BackupVaultTags: params["BackupVaultTags"],
      EncryptionKeyArn: params["EncryptionKeyArn"],
      CreatorRequestId: params["CreatorRequestId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackupVault",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupVaultName": "s",
          "BackupVaultArn": "s",
          "CreationDate": "d",
        },
      }, await resp.json()),
  };
  }

  async deleteBackupPlan(
    {abortSignal, ...params}: RequestConfig & DeleteBackupPlanInput,
  ): Promise<DeleteBackupPlanOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupPlan",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupPlanId": "s",
          "BackupPlanArn": "s",
          "DeletionDate": "d",
          "VersionId": "s",
        },
      }, await resp.json()),
  };
  }

  async deleteBackupSelection(
    {abortSignal, ...params}: RequestConfig & DeleteBackupSelectionInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupSelection",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/${params["SelectionId"]}`,
    });
  }

  async deleteBackupVault(
    {abortSignal, ...params}: RequestConfig & DeleteBackupVaultInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupVault",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}`,
    });
  }

  async deleteBackupVaultAccessPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteBackupVaultAccessPolicyInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupVaultAccessPolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/access-policy`,
    });
  }

  async deleteBackupVaultNotifications(
    {abortSignal, ...params}: RequestConfig & DeleteBackupVaultNotificationsInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackupVaultNotifications",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/notification-configuration`,
    });
  }

  async deleteRecoveryPoint(
    {abortSignal, ...params}: RequestConfig & DeleteRecoveryPointInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRecoveryPoint",
      method: "DELETE",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}`,
    });
  }

  async describeBackupJob(
    {abortSignal, ...params}: RequestConfig & DescribeBackupJobInput,
  ): Promise<DescribeBackupJobOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBackupJob",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-jobs/${params["BackupJobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "AccountId": "s",
          "BackupJobId": "s",
          "BackupVaultName": "s",
          "BackupVaultArn": "s",
          "RecoveryPointArn": "s",
          "ResourceArn": "s",
          "CreationDate": "d",
          "CompletionDate": "d",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<BackupJobState>(x),
          "StatusMessage": "s",
          "PercentDone": "s",
          "BackupSizeInBytes": "n",
          "IamRoleArn": "s",
          "CreatedBy": toRecoveryPointCreator,
          "ResourceType": "s",
          "BytesTransferred": "n",
          "ExpectedCompletionDate": "d",
          "StartBy": "d",
          "BackupOptions": x => jsonP.readMap(String, String, x),
          "BackupType": "s",
        },
      }, await resp.json()),
  };
  }

  async describeBackupVault(
    {abortSignal, ...params}: RequestConfig & DescribeBackupVaultInput,
  ): Promise<DescribeBackupVaultOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBackupVault",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupVaultName": "s",
          "BackupVaultArn": "s",
          "EncryptionKeyArn": "s",
          "CreationDate": "d",
          "CreatorRequestId": "s",
          "NumberOfRecoveryPoints": "n",
        },
      }, await resp.json()),
  };
  }

  async describeCopyJob(
    {abortSignal, ...params}: RequestConfig & DescribeCopyJobInput,
  ): Promise<DescribeCopyJobOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeCopyJob",
      method: "GET",
      requestUri: cmnP.encodePath`/copy-jobs/${params["CopyJobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "CopyJob": toCopyJob,
        },
      }, await resp.json()),
  };
  }

  async describeProtectedResource(
    {abortSignal, ...params}: RequestConfig & DescribeProtectedResourceInput,
  ): Promise<DescribeProtectedResourceOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProtectedResource",
      method: "GET",
      requestUri: cmnP.encodePath`/resources/${params["ResourceArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ResourceArn": "s",
          "ResourceType": "s",
          "LastBackupTime": "d",
        },
      }, await resp.json()),
  };
  }

  async describeRecoveryPoint(
    {abortSignal, ...params}: RequestConfig & DescribeRecoveryPointInput,
  ): Promise<DescribeRecoveryPointOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRecoveryPoint",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "RecoveryPointArn": "s",
          "BackupVaultName": "s",
          "BackupVaultArn": "s",
          "ResourceArn": "s",
          "ResourceType": "s",
          "CreatedBy": toRecoveryPointCreator,
          "IamRoleArn": "s",
          "Status": (x: jsonP.JSONValue) => cmnP.readEnum<RecoveryPointStatus>(x),
          "CreationDate": "d",
          "CompletionDate": "d",
          "BackupSizeInBytes": "n",
          "CalculatedLifecycle": toCalculatedLifecycle,
          "Lifecycle": toLifecycle,
          "EncryptionKeyArn": "s",
          "IsEncrypted": "b",
          "StorageClass": (x: jsonP.JSONValue) => cmnP.readEnum<StorageClass>(x),
          "LastRestoreTime": "d",
        },
      }, await resp.json()),
  };
  }

  async describeRegionSettings(
    {abortSignal, ...params}: RequestConfig & DescribeRegionSettingsInput = {},
  ): Promise<DescribeRegionSettingsOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRegionSettings",
      method: "GET",
      requestUri: "/account-settings",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ResourceTypeOptInPreference": x => jsonP.readMap(String, y => typeof y === "boolean" ? y : null, x),
        },
      }, await resp.json()),
  };
  }

  async describeRestoreJob(
    {abortSignal, ...params}: RequestConfig & DescribeRestoreJobInput,
  ): Promise<DescribeRestoreJobOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRestoreJob",
      method: "GET",
      requestUri: cmnP.encodePath`/restore-jobs/${params["RestoreJobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "AccountId": "s",
          "RestoreJobId": "s",
          "RecoveryPointArn": "s",
          "CreationDate": "d",
          "CompletionDate": "d",
          "Status": (x: jsonP.JSONValue) => cmnP.readEnum<RestoreJobStatus>(x),
          "StatusMessage": "s",
          "PercentDone": "s",
          "BackupSizeInBytes": "n",
          "IamRoleArn": "s",
          "ExpectedCompletionTimeMinutes": "n",
          "CreatedResourceArn": "s",
          "ResourceType": "s",
        },
      }, await resp.json()),
  };
  }

  async exportBackupPlanTemplate(
    {abortSignal, ...params}: RequestConfig & ExportBackupPlanTemplateInput,
  ): Promise<ExportBackupPlanTemplateOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ExportBackupPlanTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/toTemplate/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupPlanTemplateJson": "s",
        },
      }, await resp.json()),
  };
  }

  async getBackupPlan(
    {abortSignal, ...params}: RequestConfig & GetBackupPlanInput,
  ): Promise<GetBackupPlanOutput> {
    const query = new URLSearchParams;
    if (params["VersionId"] != null) query.set("versionId", params["VersionId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetBackupPlan",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupPlan": toBackupPlan,
          "BackupPlanId": "s",
          "BackupPlanArn": "s",
          "VersionId": "s",
          "CreatorRequestId": "s",
          "CreationDate": "d",
          "DeletionDate": "d",
          "LastExecutionDate": "d",
          "AdvancedBackupSettings": [toAdvancedBackupSetting],
        },
      }, await resp.json()),
  };
  }

  async getBackupPlanFromJSON(
    {abortSignal, ...params}: RequestConfig & GetBackupPlanFromJSONInput,
  ): Promise<GetBackupPlanFromJSONOutput> {
    const body: jsonP.JSONObject = params ? {
      BackupPlanTemplateJson: params["BackupPlanTemplateJson"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackupPlanFromJSON",
      requestUri: "/backup/template/json/toPlan",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupPlan": toBackupPlan,
        },
      }, await resp.json()),
  };
  }

  async getBackupPlanFromTemplate(
    {abortSignal, ...params}: RequestConfig & GetBackupPlanFromTemplateInput,
  ): Promise<GetBackupPlanFromTemplateOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupPlanFromTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/template/plans/${params["BackupPlanTemplateId"]}/toPlan`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupPlanDocument": toBackupPlan,
        },
      }, await resp.json()),
  };
  }

  async getBackupSelection(
    {abortSignal, ...params}: RequestConfig & GetBackupSelectionInput,
  ): Promise<GetBackupSelectionOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupSelection",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/${params["SelectionId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupSelection": toBackupSelection,
          "SelectionId": "s",
          "BackupPlanId": "s",
          "CreationDate": "d",
          "CreatorRequestId": "s",
        },
      }, await resp.json()),
  };
  }

  async getBackupVaultAccessPolicy(
    {abortSignal, ...params}: RequestConfig & GetBackupVaultAccessPolicyInput,
  ): Promise<GetBackupVaultAccessPolicyOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupVaultAccessPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/access-policy`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupVaultName": "s",
          "BackupVaultArn": "s",
          "Policy": "s",
        },
      }, await resp.json()),
  };
  }

  async getBackupVaultNotifications(
    {abortSignal, ...params}: RequestConfig & GetBackupVaultNotificationsInput,
  ): Promise<GetBackupVaultNotificationsOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackupVaultNotifications",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/notification-configuration`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupVaultName": "s",
          "BackupVaultArn": "s",
          "SNSTopicArn": "s",
          "BackupVaultEvents": [(x: jsonP.JSONValue) => cmnP.readEnum<BackupVaultEvent>(x)],
        },
      }, await resp.json()),
  };
  }

  async getRecoveryPointRestoreMetadata(
    {abortSignal, ...params}: RequestConfig & GetRecoveryPointRestoreMetadataInput,
  ): Promise<GetRecoveryPointRestoreMetadataOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRecoveryPointRestoreMetadata",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}/restore-metadata`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupVaultArn": "s",
          "RecoveryPointArn": "s",
          "RestoreMetadata": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async getSupportedResourceTypes(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<GetSupportedResourceTypesOutput> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSupportedResourceTypes",
      method: "GET",
      requestUri: "/supported-resource-types",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ResourceTypes": ["s"],
        },
      }, await resp.json()),
  };
  }

  async listBackupJobs(
    {abortSignal, ...params}: RequestConfig & ListBackupJobsInput = {},
  ): Promise<ListBackupJobsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByResourceArn"] != null) query.set("resourceArn", params["ByResourceArn"]?.toString() ?? "");
    if (params["ByState"] != null) query.set("state", params["ByState"]?.toString() ?? "");
    if (params["ByBackupVaultName"] != null) query.set("backupVaultName", params["ByBackupVaultName"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    if (params["ByResourceType"] != null) query.set("resourceType", params["ByResourceType"]?.toString() ?? "");
    if (params["ByAccountId"] != null) query.set("accountId", params["ByAccountId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupJobs",
      method: "GET",
      requestUri: "/backup-jobs/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupJobs": [toBackupJob],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listBackupPlanTemplates(
    {abortSignal, ...params}: RequestConfig & ListBackupPlanTemplatesInput = {},
  ): Promise<ListBackupPlanTemplatesOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupPlanTemplates",
      method: "GET",
      requestUri: "/backup/template/plans",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "BackupPlanTemplatesList": [toBackupPlanTemplatesListMember],
        },
      }, await resp.json()),
  };
  }

  async listBackupPlanVersions(
    {abortSignal, ...params}: RequestConfig & ListBackupPlanVersionsInput,
  ): Promise<ListBackupPlanVersionsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupPlanVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/versions/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "BackupPlanVersionsList": [toBackupPlansListMember],
        },
      }, await resp.json()),
  };
  }

  async listBackupPlans(
    {abortSignal, ...params}: RequestConfig & ListBackupPlansInput = {},
  ): Promise<ListBackupPlansOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["IncludeDeleted"] != null) query.set("includeDeleted", params["IncludeDeleted"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupPlans",
      method: "GET",
      requestUri: "/backup/plans/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "BackupPlansList": [toBackupPlansListMember],
        },
      }, await resp.json()),
  };
  }

  async listBackupSelections(
    {abortSignal, ...params}: RequestConfig & ListBackupSelectionsInput,
  ): Promise<ListBackupSelectionsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupSelections",
      method: "GET",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}/selections/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "BackupSelectionsList": [toBackupSelectionsListMember],
        },
      }, await resp.json()),
  };
  }

  async listBackupVaults(
    {abortSignal, ...params}: RequestConfig & ListBackupVaultsInput = {},
  ): Promise<ListBackupVaultsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackupVaults",
      method: "GET",
      requestUri: "/backup-vaults/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupVaultList": [toBackupVaultListMember],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listCopyJobs(
    {abortSignal, ...params}: RequestConfig & ListCopyJobsInput = {},
  ): Promise<ListCopyJobsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByResourceArn"] != null) query.set("resourceArn", params["ByResourceArn"]?.toString() ?? "");
    if (params["ByState"] != null) query.set("state", params["ByState"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    if (params["ByResourceType"] != null) query.set("resourceType", params["ByResourceType"]?.toString() ?? "");
    if (params["ByDestinationVaultArn"] != null) query.set("destinationVaultArn", params["ByDestinationVaultArn"]?.toString() ?? "");
    if (params["ByAccountId"] != null) query.set("accountId", params["ByAccountId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCopyJobs",
      method: "GET",
      requestUri: "/copy-jobs/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "CopyJobs": [toCopyJob],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listProtectedResources(
    {abortSignal, ...params}: RequestConfig & ListProtectedResourcesInput = {},
  ): Promise<ListProtectedResourcesOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProtectedResources",
      method: "GET",
      requestUri: "/resources/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Results": [toProtectedResource],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listRecoveryPointsByBackupVault(
    {abortSignal, ...params}: RequestConfig & ListRecoveryPointsByBackupVaultInput,
  ): Promise<ListRecoveryPointsByBackupVaultOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByResourceArn"] != null) query.set("resourceArn", params["ByResourceArn"]?.toString() ?? "");
    if (params["ByResourceType"] != null) query.set("resourceType", params["ByResourceType"]?.toString() ?? "");
    if (params["ByBackupPlanId"] != null) query.set("backupPlanId", params["ByBackupPlanId"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRecoveryPointsByBackupVault",
      method: "GET",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "RecoveryPoints": [toRecoveryPointByBackupVault],
        },
      }, await resp.json()),
  };
  }

  async listRecoveryPointsByResource(
    {abortSignal, ...params}: RequestConfig & ListRecoveryPointsByResourceInput,
  ): Promise<ListRecoveryPointsByResourceOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRecoveryPointsByResource",
      method: "GET",
      requestUri: cmnP.encodePath`/resources/${params["ResourceArn"]}/recovery-points/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "RecoveryPoints": [toRecoveryPointByResource],
        },
      }, await resp.json()),
  };
  }

  async listRestoreJobs(
    {abortSignal, ...params}: RequestConfig & ListRestoreJobsInput = {},
  ): Promise<ListRestoreJobsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["ByAccountId"] != null) query.set("accountId", params["ByAccountId"]?.toString() ?? "");
    if (params["ByCreatedBefore"] != null) query.set("createdBefore", cmnP.serializeDate_iso8601(params["ByCreatedBefore"]) ?? "");
    if (params["ByCreatedAfter"] != null) query.set("createdAfter", cmnP.serializeDate_iso8601(params["ByCreatedAfter"]) ?? "");
    if (params["ByStatus"] != null) query.set("status", params["ByStatus"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRestoreJobs",
      method: "GET",
      requestUri: "/restore-jobs/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "RestoreJobs": [toRestoreJobsListMember],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & ListTagsInput,
  ): Promise<ListTagsOutput> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTags",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}/`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "NextToken": "s",
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async putBackupVaultAccessPolicy(
    {abortSignal, ...params}: RequestConfig & PutBackupVaultAccessPolicyInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      Policy: params["Policy"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutBackupVaultAccessPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/access-policy`,
    });
  }

  async putBackupVaultNotifications(
    {abortSignal, ...params}: RequestConfig & PutBackupVaultNotificationsInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      SNSTopicArn: params["SNSTopicArn"],
      BackupVaultEvents: params["BackupVaultEvents"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutBackupVaultNotifications",
      method: "PUT",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/notification-configuration`,
    });
  }

  async startBackupJob(
    {abortSignal, ...params}: RequestConfig & StartBackupJobInput,
  ): Promise<StartBackupJobOutput> {
    const body: jsonP.JSONObject = params ? {
      BackupVaultName: params["BackupVaultName"],
      ResourceArn: params["ResourceArn"],
      IamRoleArn: params["IamRoleArn"],
      IdempotencyToken: params["IdempotencyToken"],
      StartWindowMinutes: params["StartWindowMinutes"],
      CompleteWindowMinutes: params["CompleteWindowMinutes"],
      Lifecycle: fromLifecycle(params["Lifecycle"]),
      RecoveryPointTags: params["RecoveryPointTags"],
      BackupOptions: params["BackupOptions"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartBackupJob",
      method: "PUT",
      requestUri: "/backup-jobs",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupJobId": "s",
          "RecoveryPointArn": "s",
          "CreationDate": "d",
        },
      }, await resp.json()),
  };
  }

  async startCopyJob(
    {abortSignal, ...params}: RequestConfig & StartCopyJobInput,
  ): Promise<StartCopyJobOutput> {
    const body: jsonP.JSONObject = params ? {
      RecoveryPointArn: params["RecoveryPointArn"],
      SourceBackupVaultName: params["SourceBackupVaultName"],
      DestinationBackupVaultArn: params["DestinationBackupVaultArn"],
      IamRoleArn: params["IamRoleArn"],
      IdempotencyToken: params["IdempotencyToken"],
      Lifecycle: fromLifecycle(params["Lifecycle"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartCopyJob",
      method: "PUT",
      requestUri: "/copy-jobs",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "CopyJobId": "s",
          "CreationDate": "d",
        },
      }, await resp.json()),
  };
  }

  async startRestoreJob(
    {abortSignal, ...params}: RequestConfig & StartRestoreJobInput,
  ): Promise<StartRestoreJobOutput> {
    const body: jsonP.JSONObject = params ? {
      RecoveryPointArn: params["RecoveryPointArn"],
      Metadata: params["Metadata"],
      IamRoleArn: params["IamRoleArn"],
      IdempotencyToken: params["IdempotencyToken"],
      ResourceType: params["ResourceType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartRestoreJob",
      method: "PUT",
      requestUri: "/restore-jobs",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "RestoreJobId": "s",
        },
      }, await resp.json()),
  };
  }

  async stopBackupJob(
    {abortSignal, ...params}: RequestConfig & StopBackupJobInput,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopBackupJob",
      requestUri: cmnP.encodePath`/backup-jobs/${params["BackupJobId"]}`,
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      TagKeyList: params["TagKeyList"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: cmnP.encodePath`/untag/${params["ResourceArn"]}`,
    });
  }

  async updateBackupPlan(
    {abortSignal, ...params}: RequestConfig & UpdateBackupPlanInput,
  ): Promise<UpdateBackupPlanOutput> {
    const body: jsonP.JSONObject = params ? {
      BackupPlan: fromBackupPlanInput(params["BackupPlan"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackupPlan",
      requestUri: cmnP.encodePath`/backup/plans/${params["BackupPlanId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupPlanId": "s",
          "BackupPlanArn": "s",
          "CreationDate": "d",
          "VersionId": "s",
          "AdvancedBackupSettings": [toAdvancedBackupSetting],
        },
      }, await resp.json()),
  };
  }

  async updateRecoveryPointLifecycle(
    {abortSignal, ...params}: RequestConfig & UpdateRecoveryPointLifecycleInput,
  ): Promise<UpdateRecoveryPointLifecycleOutput> {
    const body: jsonP.JSONObject = params ? {
      Lifecycle: fromLifecycle(params["Lifecycle"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRecoveryPointLifecycle",
      requestUri: cmnP.encodePath`/backup-vaults/${params["BackupVaultName"]}/recovery-points/${params["RecoveryPointArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "BackupVaultArn": "s",
          "RecoveryPointArn": "s",
          "Lifecycle": toLifecycle,
          "CalculatedLifecycle": toCalculatedLifecycle,
        },
      }, await resp.json()),
  };
  }

  async updateRegionSettings(
    {abortSignal, ...params}: RequestConfig & UpdateRegionSettingsInput = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      ResourceTypeOptInPreference: params["ResourceTypeOptInPreference"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRegionSettings",
      method: "PUT",
      requestUri: "/account-settings",
    });
  }

}

// refs: 1 - tags: named, input
export interface CreateBackupPlanInput {
  BackupPlan: BackupPlanInput;
  BackupPlanTags?: { [key: string]: string | null | undefined } | null;
  CreatorRequestId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateBackupSelectionInput {
  BackupPlanId: string;
  BackupSelection: BackupSelection;
  CreatorRequestId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateBackupVaultInput {
  BackupVaultName: string;
  BackupVaultTags?: { [key: string]: string | null | undefined } | null;
  EncryptionKeyArn?: string | null;
  CreatorRequestId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteBackupPlanInput {
  BackupPlanId: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackupSelectionInput {
  BackupPlanId: string;
  SelectionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackupVaultInput {
  BackupVaultName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackupVaultAccessPolicyInput {
  BackupVaultName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackupVaultNotificationsInput {
  BackupVaultName: string;
}

// refs: 1 - tags: named, input
export interface DeleteRecoveryPointInput {
  BackupVaultName: string;
  RecoveryPointArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeBackupJobInput {
  BackupJobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeBackupVaultInput {
  BackupVaultName: string;
}

// refs: 1 - tags: named, input
export interface DescribeCopyJobInput {
  CopyJobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeProtectedResourceInput {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeRecoveryPointInput {
  BackupVaultName: string;
  RecoveryPointArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeRegionSettingsInput {
}

// refs: 1 - tags: named, input
export interface DescribeRestoreJobInput {
  RestoreJobId: string;
}

// refs: 1 - tags: named, input
export interface ExportBackupPlanTemplateInput {
  BackupPlanId: string;
}

// refs: 1 - tags: named, input
export interface GetBackupPlanInput {
  BackupPlanId: string;
  VersionId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetBackupPlanFromJSONInput {
  BackupPlanTemplateJson: string;
}

// refs: 1 - tags: named, input
export interface GetBackupPlanFromTemplateInput {
  BackupPlanTemplateId: string;
}

// refs: 1 - tags: named, input
export interface GetBackupSelectionInput {
  BackupPlanId: string;
  SelectionId: string;
}

// refs: 1 - tags: named, input
export interface GetBackupVaultAccessPolicyInput {
  BackupVaultName: string;
}

// refs: 1 - tags: named, input
export interface GetBackupVaultNotificationsInput {
  BackupVaultName: string;
}

// refs: 1 - tags: named, input
export interface GetRecoveryPointRestoreMetadataInput {
  BackupVaultName: string;
  RecoveryPointArn: string;
}

// refs: 1 - tags: named, input
export interface ListBackupJobsInput {
  NextToken?: string | null;
  MaxResults?: number | null;
  ByResourceArn?: string | null;
  ByState?: BackupJobState | null;
  ByBackupVaultName?: string | null;
  ByCreatedBefore?: Date | number | null;
  ByCreatedAfter?: Date | number | null;
  ByResourceType?: string | null;
  ByAccountId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBackupPlanTemplatesInput {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListBackupPlanVersionsInput {
  BackupPlanId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListBackupPlansInput {
  NextToken?: string | null;
  MaxResults?: number | null;
  IncludeDeleted?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListBackupSelectionsInput {
  BackupPlanId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListBackupVaultsInput {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListCopyJobsInput {
  NextToken?: string | null;
  MaxResults?: number | null;
  ByResourceArn?: string | null;
  ByState?: CopyJobState | null;
  ByCreatedBefore?: Date | number | null;
  ByCreatedAfter?: Date | number | null;
  ByResourceType?: string | null;
  ByDestinationVaultArn?: string | null;
  ByAccountId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProtectedResourcesInput {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRecoveryPointsByBackupVaultInput {
  BackupVaultName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
  ByResourceArn?: string | null;
  ByResourceType?: string | null;
  ByBackupPlanId?: string | null;
  ByCreatedBefore?: Date | number | null;
  ByCreatedAfter?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface ListRecoveryPointsByResourceInput {
  ResourceArn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRestoreJobsInput {
  NextToken?: string | null;
  MaxResults?: number | null;
  ByAccountId?: string | null;
  ByCreatedBefore?: Date | number | null;
  ByCreatedAfter?: Date | number | null;
  ByStatus?: RestoreJobStatus | null;
}

// refs: 1 - tags: named, input
export interface ListTagsInput {
  ResourceArn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface PutBackupVaultAccessPolicyInput {
  BackupVaultName: string;
  Policy?: string | null;
}

// refs: 1 - tags: named, input
export interface PutBackupVaultNotificationsInput {
  BackupVaultName: string;
  SNSTopicArn: string;
  BackupVaultEvents: BackupVaultEvent[];
}

// refs: 1 - tags: named, input
export interface StartBackupJobInput {
  BackupVaultName: string;
  ResourceArn: string;
  IamRoleArn: string;
  IdempotencyToken?: string | null;
  StartWindowMinutes?: number | null;
  CompleteWindowMinutes?: number | null;
  Lifecycle?: Lifecycle | null;
  RecoveryPointTags?: { [key: string]: string | null | undefined } | null;
  BackupOptions?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface StartCopyJobInput {
  RecoveryPointArn: string;
  SourceBackupVaultName: string;
  DestinationBackupVaultArn: string;
  IamRoleArn: string;
  IdempotencyToken?: string | null;
  Lifecycle?: Lifecycle | null;
}

// refs: 1 - tags: named, input
export interface StartRestoreJobInput {
  RecoveryPointArn: string;
  Metadata: { [key: string]: string | null | undefined };
  IamRoleArn: string;
  IdempotencyToken?: string | null;
  ResourceType?: string | null;
}

// refs: 1 - tags: named, input
export interface StopBackupJobInput {
  BackupJobId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  ResourceArn: string;
  TagKeyList: string[];
}

// refs: 1 - tags: named, input
export interface UpdateBackupPlanInput {
  BackupPlanId: string;
  BackupPlan: BackupPlanInput;
}

// refs: 1 - tags: named, input
export interface UpdateRecoveryPointLifecycleInput {
  BackupVaultName: string;
  RecoveryPointArn: string;
  Lifecycle?: Lifecycle | null;
}

// refs: 1 - tags: named, input
export interface UpdateRegionSettingsInput {
  ResourceTypeOptInPreference?: { [key: string]: boolean | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateBackupPlanOutput {
  BackupPlanId?: string | null;
  BackupPlanArn?: string | null;
  CreationDate?: Date | number | null;
  VersionId?: string | null;
  AdvancedBackupSettings?: AdvancedBackupSetting[] | null;
}

// refs: 1 - tags: named, output
export interface CreateBackupSelectionOutput {
  SelectionId?: string | null;
  BackupPlanId?: string | null;
  CreationDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateBackupVaultOutput {
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  CreationDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DeleteBackupPlanOutput {
  BackupPlanId?: string | null;
  BackupPlanArn?: string | null;
  DeletionDate?: Date | number | null;
  VersionId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBackupJobOutput {
  AccountId?: string | null;
  BackupJobId?: string | null;
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  RecoveryPointArn?: string | null;
  ResourceArn?: string | null;
  CreationDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  State?: BackupJobState | null;
  StatusMessage?: string | null;
  PercentDone?: string | null;
  BackupSizeInBytes?: number | null;
  IamRoleArn?: string | null;
  CreatedBy?: RecoveryPointCreator | null;
  ResourceType?: string | null;
  BytesTransferred?: number | null;
  ExpectedCompletionDate?: Date | number | null;
  StartBy?: Date | number | null;
  BackupOptions?: { [key: string]: string | null | undefined } | null;
  BackupType?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBackupVaultOutput {
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  EncryptionKeyArn?: string | null;
  CreationDate?: Date | number | null;
  CreatorRequestId?: string | null;
  NumberOfRecoveryPoints?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeCopyJobOutput {
  CopyJob?: CopyJob | null;
}

// refs: 1 - tags: named, output
export interface DescribeProtectedResourceOutput {
  ResourceArn?: string | null;
  ResourceType?: string | null;
  LastBackupTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeRecoveryPointOutput {
  RecoveryPointArn?: string | null;
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  ResourceArn?: string | null;
  ResourceType?: string | null;
  CreatedBy?: RecoveryPointCreator | null;
  IamRoleArn?: string | null;
  Status?: RecoveryPointStatus | null;
  CreationDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  BackupSizeInBytes?: number | null;
  CalculatedLifecycle?: CalculatedLifecycle | null;
  Lifecycle?: Lifecycle | null;
  EncryptionKeyArn?: string | null;
  IsEncrypted?: boolean | null;
  StorageClass?: StorageClass | null;
  LastRestoreTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeRegionSettingsOutput {
  ResourceTypeOptInPreference?: { [key: string]: boolean | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeRestoreJobOutput {
  AccountId?: string | null;
  RestoreJobId?: string | null;
  RecoveryPointArn?: string | null;
  CreationDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  Status?: RestoreJobStatus | null;
  StatusMessage?: string | null;
  PercentDone?: string | null;
  BackupSizeInBytes?: number | null;
  IamRoleArn?: string | null;
  ExpectedCompletionTimeMinutes?: number | null;
  CreatedResourceArn?: string | null;
  ResourceType?: string | null;
}

// refs: 1 - tags: named, output
export interface ExportBackupPlanTemplateOutput {
  BackupPlanTemplateJson?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBackupPlanOutput {
  BackupPlan?: BackupPlan | null;
  BackupPlanId?: string | null;
  BackupPlanArn?: string | null;
  VersionId?: string | null;
  CreatorRequestId?: string | null;
  CreationDate?: Date | number | null;
  DeletionDate?: Date | number | null;
  LastExecutionDate?: Date | number | null;
  AdvancedBackupSettings?: AdvancedBackupSetting[] | null;
}

// refs: 1 - tags: named, output
export interface GetBackupPlanFromJSONOutput {
  BackupPlan?: BackupPlan | null;
}

// refs: 1 - tags: named, output
export interface GetBackupPlanFromTemplateOutput {
  BackupPlanDocument?: BackupPlan | null;
}

// refs: 1 - tags: named, output
export interface GetBackupSelectionOutput {
  BackupSelection?: BackupSelection | null;
  SelectionId?: string | null;
  BackupPlanId?: string | null;
  CreationDate?: Date | number | null;
  CreatorRequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBackupVaultAccessPolicyOutput {
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  Policy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBackupVaultNotificationsOutput {
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  SNSTopicArn?: string | null;
  BackupVaultEvents?: BackupVaultEvent[] | null;
}

// refs: 1 - tags: named, output
export interface GetRecoveryPointRestoreMetadataOutput {
  BackupVaultArn?: string | null;
  RecoveryPointArn?: string | null;
  RestoreMetadata?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetSupportedResourceTypesOutput {
  ResourceTypes?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ListBackupJobsOutput {
  BackupJobs?: BackupJob[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBackupPlanTemplatesOutput {
  NextToken?: string | null;
  BackupPlanTemplatesList?: BackupPlanTemplatesListMember[] | null;
}

// refs: 1 - tags: named, output
export interface ListBackupPlanVersionsOutput {
  NextToken?: string | null;
  BackupPlanVersionsList?: BackupPlansListMember[] | null;
}

// refs: 1 - tags: named, output
export interface ListBackupPlansOutput {
  NextToken?: string | null;
  BackupPlansList?: BackupPlansListMember[] | null;
}

// refs: 1 - tags: named, output
export interface ListBackupSelectionsOutput {
  NextToken?: string | null;
  BackupSelectionsList?: BackupSelectionsListMember[] | null;
}

// refs: 1 - tags: named, output
export interface ListBackupVaultsOutput {
  BackupVaultList?: BackupVaultListMember[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCopyJobsOutput {
  CopyJobs?: CopyJob[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProtectedResourcesOutput {
  Results?: ProtectedResource[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRecoveryPointsByBackupVaultOutput {
  NextToken?: string | null;
  RecoveryPoints?: RecoveryPointByBackupVault[] | null;
}

// refs: 1 - tags: named, output
export interface ListRecoveryPointsByResourceOutput {
  NextToken?: string | null;
  RecoveryPoints?: RecoveryPointByResource[] | null;
}

// refs: 1 - tags: named, output
export interface ListRestoreJobsOutput {
  RestoreJobs?: RestoreJobsListMember[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsOutput {
  NextToken?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface StartBackupJobOutput {
  BackupJobId?: string | null;
  RecoveryPointArn?: string | null;
  CreationDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface StartCopyJobOutput {
  CopyJobId?: string | null;
  CreationDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface StartRestoreJobOutput {
  RestoreJobId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateBackupPlanOutput {
  BackupPlanId?: string | null;
  BackupPlanArn?: string | null;
  CreationDate?: Date | number | null;
  VersionId?: string | null;
  AdvancedBackupSettings?: AdvancedBackupSetting[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateRecoveryPointLifecycleOutput {
  BackupVaultArn?: string | null;
  RecoveryPointArn?: string | null;
  Lifecycle?: Lifecycle | null;
  CalculatedLifecycle?: CalculatedLifecycle | null;
}

// refs: 2 - tags: input, named, interface
export interface BackupPlanInput {
  BackupPlanName: string;
  Rules: BackupRuleInput[];
  AdvancedBackupSettings?: AdvancedBackupSetting[] | null;
}
function fromBackupPlanInput(input?: BackupPlanInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BackupPlanName: input["BackupPlanName"],
    Rules: input["Rules"]?.map(x => fromBackupRuleInput(x)),
    AdvancedBackupSettings: input["AdvancedBackupSettings"]?.map(x => fromAdvancedBackupSetting(x)),
  }
}

// refs: 2 - tags: input, named, interface
export interface BackupRuleInput {
  RuleName: string;
  TargetBackupVaultName: string;
  ScheduleExpression?: string | null;
  StartWindowMinutes?: number | null;
  CompletionWindowMinutes?: number | null;
  Lifecycle?: Lifecycle | null;
  RecoveryPointTags?: { [key: string]: string | null | undefined } | null;
  CopyActions?: CopyAction[] | null;
}
function fromBackupRuleInput(input?: BackupRuleInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RuleName: input["RuleName"],
    TargetBackupVaultName: input["TargetBackupVaultName"],
    ScheduleExpression: input["ScheduleExpression"],
    StartWindowMinutes: input["StartWindowMinutes"],
    CompletionWindowMinutes: input["CompletionWindowMinutes"],
    Lifecycle: fromLifecycle(input["Lifecycle"]),
    RecoveryPointTags: input["RecoveryPointTags"],
    CopyActions: input["CopyActions"]?.map(x => fromCopyAction(x)),
  }
}

// refs: 16 - tags: input, named, interface, output
export interface Lifecycle {
  MoveToColdStorageAfterDays?: number | null;
  DeleteAfterDays?: number | null;
}
function fromLifecycle(input?: Lifecycle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MoveToColdStorageAfterDays: input["MoveToColdStorageAfterDays"],
    DeleteAfterDays: input["DeleteAfterDays"],
  }
}
function toLifecycle(root: jsonP.JSONValue): Lifecycle {
  return jsonP.readObj({
    required: {},
    optional: {
      "MoveToColdStorageAfterDays": "n",
      "DeleteAfterDays": "n",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface CopyAction {
  Lifecycle?: Lifecycle | null;
  DestinationBackupVaultArn: string;
}
function fromCopyAction(input?: CopyAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Lifecycle: fromLifecycle(input["Lifecycle"]),
    DestinationBackupVaultArn: input["DestinationBackupVaultArn"],
  }
}
function toCopyAction(root: jsonP.JSONValue): CopyAction {
  return jsonP.readObj({
    required: {
      "DestinationBackupVaultArn": "s",
    },
    optional: {
      "Lifecycle": toLifecycle,
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface AdvancedBackupSetting {
  ResourceType?: string | null;
  BackupOptions?: { [key: string]: string | null | undefined } | null;
}
function fromAdvancedBackupSetting(input?: AdvancedBackupSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceType: input["ResourceType"],
    BackupOptions: input["BackupOptions"],
  }
}
function toAdvancedBackupSetting(root: jsonP.JSONValue): AdvancedBackupSetting {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "BackupOptions": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface BackupSelection {
  SelectionName: string;
  IamRoleArn: string;
  Resources?: string[] | null;
  ListOfTags?: Condition[] | null;
}
function fromBackupSelection(input?: BackupSelection | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SelectionName: input["SelectionName"],
    IamRoleArn: input["IamRoleArn"],
    Resources: input["Resources"],
    ListOfTags: input["ListOfTags"]?.map(x => fromCondition(x)),
  }
}
function toBackupSelection(root: jsonP.JSONValue): BackupSelection {
  return jsonP.readObj({
    required: {
      "SelectionName": "s",
      "IamRoleArn": "s",
    },
    optional: {
      "Resources": ["s"],
      "ListOfTags": [toCondition],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Condition {
  ConditionType: ConditionType;
  ConditionKey: string;
  ConditionValue: string;
}
function fromCondition(input?: Condition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConditionType: input["ConditionType"],
    ConditionKey: input["ConditionKey"],
    ConditionValue: input["ConditionValue"],
  }
}
function toCondition(root: jsonP.JSONValue): Condition {
  return jsonP.readObj({
    required: {
      "ConditionType": (x: jsonP.JSONValue) => cmnP.readEnum<ConditionType>(x),
      "ConditionKey": "s",
      "ConditionValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ConditionType =
| "STRINGEQUALS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type BackupJobState =
| "CREATED"
| "PENDING"
| "RUNNING"
| "ABORTING"
| "ABORTED"
| "COMPLETED"
| "FAILED"
| "EXPIRED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type CopyJobState =
| "CREATED"
| "RUNNING"
| "COMPLETED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type RestoreJobStatus =
| "PENDING"
| "RUNNING"
| "COMPLETED"
| "ABORTED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type BackupVaultEvent =
| "BACKUP_JOB_STARTED"
| "BACKUP_JOB_COMPLETED"
| "BACKUP_JOB_SUCCESSFUL"
| "BACKUP_JOB_FAILED"
| "BACKUP_JOB_EXPIRED"
| "RESTORE_JOB_STARTED"
| "RESTORE_JOB_COMPLETED"
| "RESTORE_JOB_SUCCESSFUL"
| "RESTORE_JOB_FAILED"
| "COPY_JOB_STARTED"
| "COPY_JOB_SUCCESSFUL"
| "COPY_JOB_FAILED"
| "RECOVERY_POINT_MODIFIED"
| "BACKUP_PLAN_CREATED"
| "BACKUP_PLAN_MODIFIED"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface RecoveryPointCreator {
  BackupPlanId?: string | null;
  BackupPlanArn?: string | null;
  BackupPlanVersion?: string | null;
  BackupRuleId?: string | null;
}
function toRecoveryPointCreator(root: jsonP.JSONValue): RecoveryPointCreator {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupPlanId": "s",
      "BackupPlanArn": "s",
      "BackupPlanVersion": "s",
      "BackupRuleId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CopyJob {
  AccountId?: string | null;
  CopyJobId?: string | null;
  SourceBackupVaultArn?: string | null;
  SourceRecoveryPointArn?: string | null;
  DestinationBackupVaultArn?: string | null;
  DestinationRecoveryPointArn?: string | null;
  ResourceArn?: string | null;
  CreationDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  State?: CopyJobState | null;
  StatusMessage?: string | null;
  BackupSizeInBytes?: number | null;
  IamRoleArn?: string | null;
  CreatedBy?: RecoveryPointCreator | null;
  ResourceType?: string | null;
}
function toCopyJob(root: jsonP.JSONValue): CopyJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "CopyJobId": "s",
      "SourceBackupVaultArn": "s",
      "SourceRecoveryPointArn": "s",
      "DestinationBackupVaultArn": "s",
      "DestinationRecoveryPointArn": "s",
      "ResourceArn": "s",
      "CreationDate": "d",
      "CompletionDate": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<CopyJobState>(x),
      "StatusMessage": "s",
      "BackupSizeInBytes": "n",
      "IamRoleArn": "s",
      "CreatedBy": toRecoveryPointCreator,
      "ResourceType": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type RecoveryPointStatus =
| "COMPLETED"
| "PARTIAL"
| "DELETING"
| "EXPIRED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface CalculatedLifecycle {
  MoveToColdStorageAt?: Date | number | null;
  DeleteAt?: Date | number | null;
}
function toCalculatedLifecycle(root: jsonP.JSONValue): CalculatedLifecycle {
  return jsonP.readObj({
    required: {},
    optional: {
      "MoveToColdStorageAt": "d",
      "DeleteAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type StorageClass =
| "WARM"
| "COLD"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface BackupPlan {
  BackupPlanName: string;
  Rules: BackupRule[];
  AdvancedBackupSettings?: AdvancedBackupSetting[] | null;
}
function toBackupPlan(root: jsonP.JSONValue): BackupPlan {
  return jsonP.readObj({
    required: {
      "BackupPlanName": "s",
      "Rules": [toBackupRule],
    },
    optional: {
      "AdvancedBackupSettings": [toAdvancedBackupSetting],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface BackupRule {
  RuleName: string;
  TargetBackupVaultName: string;
  ScheduleExpression?: string | null;
  StartWindowMinutes?: number | null;
  CompletionWindowMinutes?: number | null;
  Lifecycle?: Lifecycle | null;
  RecoveryPointTags?: { [key: string]: string | null | undefined } | null;
  RuleId?: string | null;
  CopyActions?: CopyAction[] | null;
}
function toBackupRule(root: jsonP.JSONValue): BackupRule {
  return jsonP.readObj({
    required: {
      "RuleName": "s",
      "TargetBackupVaultName": "s",
    },
    optional: {
      "ScheduleExpression": "s",
      "StartWindowMinutes": "n",
      "CompletionWindowMinutes": "n",
      "Lifecycle": toLifecycle,
      "RecoveryPointTags": x => jsonP.readMap(String, String, x),
      "RuleId": "s",
      "CopyActions": [toCopyAction],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BackupJob {
  AccountId?: string | null;
  BackupJobId?: string | null;
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  RecoveryPointArn?: string | null;
  ResourceArn?: string | null;
  CreationDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  State?: BackupJobState | null;
  StatusMessage?: string | null;
  PercentDone?: string | null;
  BackupSizeInBytes?: number | null;
  IamRoleArn?: string | null;
  CreatedBy?: RecoveryPointCreator | null;
  ExpectedCompletionDate?: Date | number | null;
  StartBy?: Date | number | null;
  ResourceType?: string | null;
  BytesTransferred?: number | null;
  BackupOptions?: { [key: string]: string | null | undefined } | null;
  BackupType?: string | null;
}
function toBackupJob(root: jsonP.JSONValue): BackupJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "BackupJobId": "s",
      "BackupVaultName": "s",
      "BackupVaultArn": "s",
      "RecoveryPointArn": "s",
      "ResourceArn": "s",
      "CreationDate": "d",
      "CompletionDate": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<BackupJobState>(x),
      "StatusMessage": "s",
      "PercentDone": "s",
      "BackupSizeInBytes": "n",
      "IamRoleArn": "s",
      "CreatedBy": toRecoveryPointCreator,
      "ExpectedCompletionDate": "d",
      "StartBy": "d",
      "ResourceType": "s",
      "BytesTransferred": "n",
      "BackupOptions": x => jsonP.readMap(String, String, x),
      "BackupType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BackupPlanTemplatesListMember {
  BackupPlanTemplateId?: string | null;
  BackupPlanTemplateName?: string | null;
}
function toBackupPlanTemplatesListMember(root: jsonP.JSONValue): BackupPlanTemplatesListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupPlanTemplateId": "s",
      "BackupPlanTemplateName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BackupPlansListMember {
  BackupPlanArn?: string | null;
  BackupPlanId?: string | null;
  CreationDate?: Date | number | null;
  DeletionDate?: Date | number | null;
  VersionId?: string | null;
  BackupPlanName?: string | null;
  CreatorRequestId?: string | null;
  LastExecutionDate?: Date | number | null;
  AdvancedBackupSettings?: AdvancedBackupSetting[] | null;
}
function toBackupPlansListMember(root: jsonP.JSONValue): BackupPlansListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupPlanArn": "s",
      "BackupPlanId": "s",
      "CreationDate": "d",
      "DeletionDate": "d",
      "VersionId": "s",
      "BackupPlanName": "s",
      "CreatorRequestId": "s",
      "LastExecutionDate": "d",
      "AdvancedBackupSettings": [toAdvancedBackupSetting],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BackupSelectionsListMember {
  SelectionId?: string | null;
  SelectionName?: string | null;
  BackupPlanId?: string | null;
  CreationDate?: Date | number | null;
  CreatorRequestId?: string | null;
  IamRoleArn?: string | null;
}
function toBackupSelectionsListMember(root: jsonP.JSONValue): BackupSelectionsListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "SelectionId": "s",
      "SelectionName": "s",
      "BackupPlanId": "s",
      "CreationDate": "d",
      "CreatorRequestId": "s",
      "IamRoleArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BackupVaultListMember {
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  CreationDate?: Date | number | null;
  EncryptionKeyArn?: string | null;
  CreatorRequestId?: string | null;
  NumberOfRecoveryPoints?: number | null;
}
function toBackupVaultListMember(root: jsonP.JSONValue): BackupVaultListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "BackupVaultName": "s",
      "BackupVaultArn": "s",
      "CreationDate": "d",
      "EncryptionKeyArn": "s",
      "CreatorRequestId": "s",
      "NumberOfRecoveryPoints": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProtectedResource {
  ResourceArn?: string | null;
  ResourceType?: string | null;
  LastBackupTime?: Date | number | null;
}
function toProtectedResource(root: jsonP.JSONValue): ProtectedResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceArn": "s",
      "ResourceType": "s",
      "LastBackupTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecoveryPointByBackupVault {
  RecoveryPointArn?: string | null;
  BackupVaultName?: string | null;
  BackupVaultArn?: string | null;
  ResourceArn?: string | null;
  ResourceType?: string | null;
  CreatedBy?: RecoveryPointCreator | null;
  IamRoleArn?: string | null;
  Status?: RecoveryPointStatus | null;
  CreationDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  BackupSizeInBytes?: number | null;
  CalculatedLifecycle?: CalculatedLifecycle | null;
  Lifecycle?: Lifecycle | null;
  EncryptionKeyArn?: string | null;
  IsEncrypted?: boolean | null;
  LastRestoreTime?: Date | number | null;
}
function toRecoveryPointByBackupVault(root: jsonP.JSONValue): RecoveryPointByBackupVault {
  return jsonP.readObj({
    required: {},
    optional: {
      "RecoveryPointArn": "s",
      "BackupVaultName": "s",
      "BackupVaultArn": "s",
      "ResourceArn": "s",
      "ResourceType": "s",
      "CreatedBy": toRecoveryPointCreator,
      "IamRoleArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<RecoveryPointStatus>(x),
      "CreationDate": "d",
      "CompletionDate": "d",
      "BackupSizeInBytes": "n",
      "CalculatedLifecycle": toCalculatedLifecycle,
      "Lifecycle": toLifecycle,
      "EncryptionKeyArn": "s",
      "IsEncrypted": "b",
      "LastRestoreTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecoveryPointByResource {
  RecoveryPointArn?: string | null;
  CreationDate?: Date | number | null;
  Status?: RecoveryPointStatus | null;
  EncryptionKeyArn?: string | null;
  BackupSizeBytes?: number | null;
  BackupVaultName?: string | null;
}
function toRecoveryPointByResource(root: jsonP.JSONValue): RecoveryPointByResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "RecoveryPointArn": "s",
      "CreationDate": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<RecoveryPointStatus>(x),
      "EncryptionKeyArn": "s",
      "BackupSizeBytes": "n",
      "BackupVaultName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RestoreJobsListMember {
  AccountId?: string | null;
  RestoreJobId?: string | null;
  RecoveryPointArn?: string | null;
  CreationDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  Status?: RestoreJobStatus | null;
  StatusMessage?: string | null;
  PercentDone?: string | null;
  BackupSizeInBytes?: number | null;
  IamRoleArn?: string | null;
  ExpectedCompletionTimeMinutes?: number | null;
  CreatedResourceArn?: string | null;
  ResourceType?: string | null;
}
function toRestoreJobsListMember(root: jsonP.JSONValue): RestoreJobsListMember {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "RestoreJobId": "s",
      "RecoveryPointArn": "s",
      "CreationDate": "d",
      "CompletionDate": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<RestoreJobStatus>(x),
      "StatusMessage": "s",
      "PercentDone": "s",
      "BackupSizeInBytes": "n",
      "IamRoleArn": "s",
      "ExpectedCompletionTimeMinutes": "n",
      "CreatedResourceArn": "s",
      "ResourceType": "s",
    },
  }, root);
}
