// Autogenerated API client for: AWS Elemental MediaStore

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class MediaStore {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MediaStore.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-09-01",
    "endpointPrefix": "mediastore",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "MediaStore",
    "serviceFullName": "AWS Elemental MediaStore",
    "serviceId": "MediaStore",
    "signatureVersion": "v4",
    "signingName": "mediastore",
    "targetPrefix": "MediaStore_20170901",
    "uid": "mediastore-2017-09-01"
  };

  async createContainer(
    {abortSignal, ...params}: RequestConfig & CreateContainerInput,
  ): Promise<CreateContainerOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContainer",
    });
    return prt.readObj({
      required: {
        "Container": toContainer,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteContainer(
    {abortSignal, ...params}: RequestConfig & DeleteContainerInput,
  ): Promise<DeleteContainerOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteContainer",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteContainerPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteContainerPolicyInput,
  ): Promise<DeleteContainerPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteContainerPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteCorsPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteCorsPolicyInput,
  ): Promise<DeleteCorsPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCorsPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLifecyclePolicy(
    {abortSignal, ...params}: RequestConfig & DeleteLifecyclePolicyInput,
  ): Promise<DeleteLifecyclePolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLifecyclePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteMetricPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteMetricPolicyInput,
  ): Promise<DeleteMetricPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMetricPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeContainer(
    {abortSignal, ...params}: RequestConfig & DescribeContainerInput = {},
  ): Promise<DescribeContainerOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeContainer",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Container": toContainer,
      },
    }, await resp.json());
  }

  async getContainerPolicy(
    {abortSignal, ...params}: RequestConfig & GetContainerPolicyInput,
  ): Promise<GetContainerPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetContainerPolicy",
    });
    return prt.readObj({
      required: {
        "Policy": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getCorsPolicy(
    {abortSignal, ...params}: RequestConfig & GetCorsPolicyInput,
  ): Promise<GetCorsPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCorsPolicy",
    });
    return prt.readObj({
      required: {
        "CorsPolicy": [toCorsRule],
      },
      optional: {},
    }, await resp.json());
  }

  async getLifecyclePolicy(
    {abortSignal, ...params}: RequestConfig & GetLifecyclePolicyInput,
  ): Promise<GetLifecyclePolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLifecyclePolicy",
    });
    return prt.readObj({
      required: {
        "LifecyclePolicy": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getMetricPolicy(
    {abortSignal, ...params}: RequestConfig & GetMetricPolicyInput,
  ): Promise<GetMetricPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMetricPolicy",
    });
    return prt.readObj({
      required: {
        "MetricPolicy": toMetricPolicy,
      },
      optional: {},
    }, await resp.json());
  }

  async listContainers(
    {abortSignal, ...params}: RequestConfig & ListContainersInput = {},
  ): Promise<ListContainersOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListContainers",
    });
    return prt.readObj({
      required: {
        "Containers": [toContainer],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async putContainerPolicy(
    {abortSignal, ...params}: RequestConfig & PutContainerPolicyInput,
  ): Promise<PutContainerPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutContainerPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putCorsPolicy(
    {abortSignal, ...params}: RequestConfig & PutCorsPolicyInput,
  ): Promise<PutCorsPolicyOutput> {
    const body: JSONObject = {...params,
    CorsPolicy: params["CorsPolicy"]?.map(x => fromCorsRule(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutCorsPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putLifecyclePolicy(
    {abortSignal, ...params}: RequestConfig & PutLifecyclePolicyInput,
  ): Promise<PutLifecyclePolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLifecyclePolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putMetricPolicy(
    {abortSignal, ...params}: RequestConfig & PutMetricPolicyInput,
  ): Promise<PutMetricPolicyOutput> {
    const body: JSONObject = {...params,
    MetricPolicy: fromMetricPolicy(params["MetricPolicy"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutMetricPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startAccessLogging(
    {abortSignal, ...params}: RequestConfig & StartAccessLoggingInput,
  ): Promise<StartAccessLoggingOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartAccessLogging",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopAccessLogging(
    {abortSignal, ...params}: RequestConfig & StopAccessLoggingInput,
  ): Promise<StopAccessLoggingOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopAccessLogging",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<TagResourceOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<UntagResourceOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateContainerInput {
  ContainerName: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteContainerInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface DeleteContainerPolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface DeleteCorsPolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface DeleteLifecyclePolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface DeleteMetricPolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface DescribeContainerInput {
  ContainerName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetContainerPolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface GetCorsPolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface GetLifecyclePolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface GetMetricPolicyInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface ListContainersInput {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  Resource: string;
}

// refs: 1 - tags: named, input
export interface PutContainerPolicyInput {
  ContainerName: string;
  Policy: string;
}

// refs: 1 - tags: named, input
export interface PutCorsPolicyInput {
  ContainerName: string;
  CorsPolicy: CorsRule[];
}

// refs: 1 - tags: named, input
export interface PutLifecyclePolicyInput {
  ContainerName: string;
  LifecyclePolicy: string;
}

// refs: 1 - tags: named, input
export interface PutMetricPolicyInput {
  ContainerName: string;
  MetricPolicy: MetricPolicy;
}

// refs: 1 - tags: named, input
export interface StartAccessLoggingInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface StopAccessLoggingInput {
  ContainerName: string;
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  Resource: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  Resource: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, output
export interface CreateContainerOutput {
  Container: Container;
}

// refs: 1 - tags: named, output
export interface DeleteContainerOutput {
}

// refs: 1 - tags: named, output
export interface DeleteContainerPolicyOutput {
}

// refs: 1 - tags: named, output
export interface DeleteCorsPolicyOutput {
}

// refs: 1 - tags: named, output
export interface DeleteLifecyclePolicyOutput {
}

// refs: 1 - tags: named, output
export interface DeleteMetricPolicyOutput {
}

// refs: 1 - tags: named, output
export interface DescribeContainerOutput {
  Container?: Container | null;
}

// refs: 1 - tags: named, output
export interface GetContainerPolicyOutput {
  Policy: string;
}

// refs: 1 - tags: named, output
export interface GetCorsPolicyOutput {
  CorsPolicy: CorsRule[];
}

// refs: 1 - tags: named, output
export interface GetLifecyclePolicyOutput {
  LifecyclePolicy: string;
}

// refs: 1 - tags: named, output
export interface GetMetricPolicyOutput {
  MetricPolicy: MetricPolicy;
}

// refs: 1 - tags: named, output
export interface ListContainersOutput {
  Containers: Container[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceOutput {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface PutContainerPolicyOutput {
}

// refs: 1 - tags: named, output
export interface PutCorsPolicyOutput {
}

// refs: 1 - tags: named, output
export interface PutLifecyclePolicyOutput {
}

// refs: 1 - tags: named, output
export interface PutMetricPolicyOutput {
}

// refs: 1 - tags: named, output
export interface StartAccessLoggingOutput {
}

// refs: 1 - tags: named, output
export interface StopAccessLoggingOutput {
}

// refs: 1 - tags: named, output
export interface TagResourceOutput {
}

// refs: 1 - tags: named, output
export interface UntagResourceOutput {
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CorsRule {
  AllowedOrigins: string[];
  AllowedMethods?: MethodName[] | null;
  AllowedHeaders: string[];
  MaxAgeSeconds?: number | null;
  ExposeHeaders?: string[] | null;
}
function fromCorsRule(input?: CorsRule | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCorsRule(root: JSONValue): CorsRule {
  return prt.readObj({
    required: {
      "AllowedOrigins": ["s"],
      "AllowedHeaders": ["s"],
    },
    optional: {
      "AllowedMethods": [toMethodName],
      "MaxAgeSeconds": "n",
      "ExposeHeaders": ["s"],
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type MethodName =
| "PUT"
| "GET"
| "DELETE"
| "HEAD"
;

function toMethodName(root: JSONValue): MethodName | null {
  return ( false
    || root == "PUT"
    || root == "GET"
    || root == "DELETE"
    || root == "HEAD"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface MetricPolicy {
  ContainerLevelMetrics: ContainerLevelMetrics;
  MetricPolicyRules?: MetricPolicyRule[] | null;
}
function fromMetricPolicy(input?: MetricPolicy | null): JSONValue {
  if (!input) return input;
  return {...input,
    MetricPolicyRules: input["MetricPolicyRules"]?.map(x => fromMetricPolicyRule(x)),
  }
}
function toMetricPolicy(root: JSONValue): MetricPolicy {
  return prt.readObj({
    required: {
      "ContainerLevelMetrics": toContainerLevelMetrics,
    },
    optional: {
      "MetricPolicyRules": [toMetricPolicyRule],
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ContainerLevelMetrics =
| "ENABLED"
| "DISABLED"
;

function toContainerLevelMetrics(root: JSONValue): ContainerLevelMetrics | null {
  return ( false
    || root == "ENABLED"
    || root == "DISABLED"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface MetricPolicyRule {
  ObjectGroup: string;
  ObjectGroupName: string;
}
function fromMetricPolicyRule(input?: MetricPolicyRule | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toMetricPolicyRule(root: JSONValue): MetricPolicyRule {
  return prt.readObj({
    required: {
      "ObjectGroup": "s",
      "ObjectGroupName": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Container {
  Endpoint?: string | null;
  CreationTime?: Date | number | null;
  ARN?: string | null;
  Name?: string | null;
  Status?: ContainerStatus | null;
  AccessLoggingEnabled?: boolean | null;
}
function toContainer(root: JSONValue): Container {
  return prt.readObj({
    required: {},
    optional: {
      "Endpoint": "s",
      "CreationTime": "d",
      "ARN": "s",
      "Name": "s",
      "Status": toContainerStatus,
      "AccessLoggingEnabled": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ContainerStatus =
| "ACTIVE"
| "CREATING"
| "DELETING"
;
function toContainerStatus(root: JSONValue): ContainerStatus | null {
  return ( false
    || root == "ACTIVE"
    || root == "CREATING"
    || root == "DELETING"
  ) ? root : null;
}
