// Autogenerated API client for: Amazon Detective

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Detective {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Detective.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-10-26",
    "endpointPrefix": "api.detective",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Detective",
    "serviceId": "Detective",
    "signatureVersion": "v4",
    "signingName": "detective",
    "uid": "detective-2018-10-26"
  };

  async acceptInvitation(
    {abortSignal, ...params}: RequestConfig & s.AcceptInvitationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptInvitation",
      method: "PUT",
      requestUri: "/invitation",
    });
  }

  async createGraph(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<s.CreateGraphResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateGraph",
      requestUri: "/graph",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GraphArn": "s",
      },
    }, await resp.json());
  }

  async createMembers(
    {abortSignal, ...params}: RequestConfig & s.CreateMembersRequest,
  ): Promise<s.CreateMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      Message: params["Message"],
      Accounts: params["Accounts"]?.map(x => fromAccount(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMembers",
      requestUri: "/graph/members",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Members": [toMemberDetail],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
    }, await resp.json());
  }

  async deleteGraph(
    {abortSignal, ...params}: RequestConfig & s.DeleteGraphRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGraph",
      requestUri: "/graph/removal",
    });
  }

  async deleteMembers(
    {abortSignal, ...params}: RequestConfig & s.DeleteMembersRequest,
  ): Promise<s.DeleteMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      AccountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMembers",
      requestUri: "/graph/members/removal",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountIds": ["s"],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
    }, await resp.json());
  }

  async disassociateMembership(
    {abortSignal, ...params}: RequestConfig & s.DisassociateMembershipRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateMembership",
      requestUri: "/membership/removal",
    });
  }

  async getMembers(
    {abortSignal, ...params}: RequestConfig & s.GetMembersRequest,
  ): Promise<s.GetMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      AccountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMembers",
      requestUri: "/graph/members/get",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MemberDetails": [toMemberDetail],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
    }, await resp.json());
  }

  async listGraphs(
    {abortSignal, ...params}: RequestConfig & s.ListGraphsRequest = {},
  ): Promise<s.ListGraphsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGraphs",
      requestUri: "/graphs/list",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GraphList": [toGraph],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInvitations(
    {abortSignal, ...params}: RequestConfig & s.ListInvitationsRequest = {},
  ): Promise<s.ListInvitationsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInvitations",
      requestUri: "/invitations/list",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Invitations": [toMemberDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMembers(
    {abortSignal, ...params}: RequestConfig & s.ListMembersRequest,
  ): Promise<s.ListMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMembers",
      requestUri: "/graph/members/list",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MemberDetails": [toMemberDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async rejectInvitation(
    {abortSignal, ...params}: RequestConfig & s.RejectInvitationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectInvitation",
      requestUri: "/invitation/removal",
    });
  }

  async startMonitoringMember(
    {abortSignal, ...params}: RequestConfig & s.StartMonitoringMemberRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      AccountId: params["AccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartMonitoringMember",
      requestUri: "/graph/member/monitoringstate",
    });
  }

}

function fromAccount(input?: s.Account | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    EmailAddress: input["EmailAddress"],
  }
}

function toMemberDetail(root: jsonP.JSONValue): s.MemberDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "EmailAddress": "s",
      "GraphArn": "s",
      "MasterId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.MemberStatus>(x),
      "DisabledReason": (x: jsonP.JSONValue) => cmnP.readEnum<s.MemberDisabledReason>(x),
      "InvitedTime": "d",
      "UpdatedTime": "d",
      "PercentOfGraphUtilization": "n",
      "PercentOfGraphUtilizationUpdatedTime": "d",
    },
  }, root);
}

function toUnprocessedAccount(root: jsonP.JSONValue): s.UnprocessedAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "Reason": "s",
    },
  }, root);
}

function toGraph(root: jsonP.JSONValue): s.Graph {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreatedTime": "d",
    },
  }, root);
}
