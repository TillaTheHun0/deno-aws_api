// Autogenerated API client for: Amazon Detective

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Detective {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Detective.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-10-26",
    "endpointPrefix": "api.detective",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Detective",
    "serviceId": "Detective",
    "signatureVersion": "v4",
    "signingName": "detective",
    "uid": "detective-2018-10-26"
  };

  async acceptInvitation(
    {abortSignal, ...params}: RequestConfig & AcceptInvitationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptInvitation",
      method: "PUT",
      requestUri: "/invitation",
    });
  }

  async createGraph(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<CreateGraphResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateGraph",
      requestUri: "/graph",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GraphArn": "s",
      },
    }, await resp.json());
  }

  async createMembers(
    {abortSignal, ...params}: RequestConfig & CreateMembersRequest,
  ): Promise<CreateMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      Message: params["Message"],
      Accounts: params["Accounts"]?.map(x => fromAccount(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMembers",
      requestUri: "/graph/members",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Members": [toMemberDetail],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
    }, await resp.json());
  }

  async deleteGraph(
    {abortSignal, ...params}: RequestConfig & DeleteGraphRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGraph",
      requestUri: "/graph/removal",
    });
  }

  async deleteMembers(
    {abortSignal, ...params}: RequestConfig & DeleteMembersRequest,
  ): Promise<DeleteMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      AccountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMembers",
      requestUri: "/graph/members/removal",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountIds": ["s"],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
    }, await resp.json());
  }

  async disassociateMembership(
    {abortSignal, ...params}: RequestConfig & DisassociateMembershipRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateMembership",
      requestUri: "/membership/removal",
    });
  }

  async getMembers(
    {abortSignal, ...params}: RequestConfig & GetMembersRequest,
  ): Promise<GetMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      AccountIds: params["AccountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMembers",
      requestUri: "/graph/members/get",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MemberDetails": [toMemberDetail],
        "UnprocessedAccounts": [toUnprocessedAccount],
      },
    }, await resp.json());
  }

  async listGraphs(
    {abortSignal, ...params}: RequestConfig & ListGraphsRequest = {},
  ): Promise<ListGraphsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGraphs",
      requestUri: "/graphs/list",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GraphList": [toGraph],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInvitations(
    {abortSignal, ...params}: RequestConfig & ListInvitationsRequest = {},
  ): Promise<ListInvitationsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInvitations",
      requestUri: "/invitations/list",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Invitations": [toMemberDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMembers(
    {abortSignal, ...params}: RequestConfig & ListMembersRequest,
  ): Promise<ListMembersResponse> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListMembers",
      requestUri: "/graph/members/list",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MemberDetails": [toMemberDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async rejectInvitation(
    {abortSignal, ...params}: RequestConfig & RejectInvitationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectInvitation",
      requestUri: "/invitation/removal",
    });
  }

  async startMonitoringMember(
    {abortSignal, ...params}: RequestConfig & StartMonitoringMemberRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      GraphArn: params["GraphArn"],
      AccountId: params["AccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartMonitoringMember",
      requestUri: "/graph/member/monitoringstate",
    });
  }

}

// refs: 1 - tags: named, input
export interface AcceptInvitationRequest {
  GraphArn: string;
}

// refs: 1 - tags: named, input
export interface CreateMembersRequest {
  GraphArn: string;
  Message?: string | null;
  Accounts: Account[];
}

// refs: 1 - tags: named, input
export interface DeleteGraphRequest {
  GraphArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteMembersRequest {
  GraphArn: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface DisassociateMembershipRequest {
  GraphArn: string;
}

// refs: 1 - tags: named, input
export interface GetMembersRequest {
  GraphArn: string;
  AccountIds: string[];
}

// refs: 1 - tags: named, input
export interface ListGraphsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListInvitationsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListMembersRequest {
  GraphArn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface RejectInvitationRequest {
  GraphArn: string;
}

// refs: 1 - tags: named, input
export interface StartMonitoringMemberRequest {
  GraphArn: string;
  AccountId: string;
}

// refs: 1 - tags: named, output
export interface CreateGraphResponse {
  GraphArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateMembersResponse {
  Members?: MemberDetail[] | null;
  UnprocessedAccounts?: UnprocessedAccount[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteMembersResponse {
  AccountIds?: string[] | null;
  UnprocessedAccounts?: UnprocessedAccount[] | null;
}

// refs: 1 - tags: named, output
export interface GetMembersResponse {
  MemberDetails?: MemberDetail[] | null;
  UnprocessedAccounts?: UnprocessedAccount[] | null;
}

// refs: 1 - tags: named, output
export interface ListGraphsResponse {
  GraphList?: Graph[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInvitationsResponse {
  Invitations?: MemberDetail[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMembersResponse {
  MemberDetails?: MemberDetail[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface Account {
  AccountId: string;
  EmailAddress: string;
}
function fromAccount(input?: Account | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    EmailAddress: input["EmailAddress"],
  }
}

// refs: 4 - tags: output, named, interface
export interface MemberDetail {
  AccountId?: string | null;
  EmailAddress?: string | null;
  GraphArn?: string | null;
  MasterId?: string | null;
  Status?: MemberStatus | null;
  DisabledReason?: MemberDisabledReason | null;
  InvitedTime?: Date | number | null;
  UpdatedTime?: Date | number | null;
  PercentOfGraphUtilization?: number | null;
  PercentOfGraphUtilizationUpdatedTime?: Date | number | null;
}
function toMemberDetail(root: jsonP.JSONValue): MemberDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "EmailAddress": "s",
      "GraphArn": "s",
      "MasterId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MemberStatus>(x),
      "DisabledReason": (x: jsonP.JSONValue) => cmnP.readEnum<MemberDisabledReason>(x),
      "InvitedTime": "d",
      "UpdatedTime": "d",
      "PercentOfGraphUtilization": "n",
      "PercentOfGraphUtilizationUpdatedTime": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type MemberStatus =
| "INVITED"
| "VERIFICATION_IN_PROGRESS"
| "VERIFICATION_FAILED"
| "ENABLED"
| "ACCEPTED_BUT_DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, enum
export type MemberDisabledReason =
| "VOLUME_TOO_HIGH"
| "VOLUME_UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface UnprocessedAccount {
  AccountId?: string | null;
  Reason?: string | null;
}
function toUnprocessedAccount(root: jsonP.JSONValue): UnprocessedAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "Reason": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Graph {
  Arn?: string | null;
  CreatedTime?: Date | number | null;
}
function toGraph(root: jsonP.JSONValue): Graph {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreatedTime": "d",
    },
  }, root);
}
