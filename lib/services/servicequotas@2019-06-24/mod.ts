// Autogenerated API client for: Service Quotas

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class ServiceQuotas {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ServiceQuotas.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-06-24",
    "endpointPrefix": "servicequotas",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Service Quotas",
    "serviceId": "Service Quotas",
    "signatureVersion": "v4",
    "targetPrefix": "ServiceQuotasV20190624",
    "uid": "service-quotas-2019-06-24"
  };

  async associateServiceQuotaTemplate(
    {abortSignal, ...params}: RequestConfig & s.AssociateServiceQuotaTemplateRequest = {},
  ): Promise<s.AssociateServiceQuotaTemplateResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateServiceQuotaTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteServiceQuotaIncreaseRequestFromTemplate(
    {abortSignal, ...params}: RequestConfig & s.DeleteServiceQuotaIncreaseRequestFromTemplateRequest,
  ): Promise<s.DeleteServiceQuotaIncreaseRequestFromTemplateResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      QuotaCode: params["QuotaCode"],
      AwsRegion: params["AwsRegion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteServiceQuotaIncreaseRequestFromTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateServiceQuotaTemplate(
    {abortSignal, ...params}: RequestConfig & s.DisassociateServiceQuotaTemplateRequest = {},
  ): Promise<s.DisassociateServiceQuotaTemplateResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateServiceQuotaTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAWSDefaultServiceQuota(
    {abortSignal, ...params}: RequestConfig & s.GetAWSDefaultServiceQuotaRequest,
  ): Promise<s.GetAWSDefaultServiceQuotaResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      QuotaCode: params["QuotaCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAWSDefaultServiceQuota",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Quota": toServiceQuota,
      },
    }, await resp.json());
  }

  async getAssociationForServiceQuotaTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetAssociationForServiceQuotaTemplateRequest = {},
  ): Promise<s.GetAssociationForServiceQuotaTemplateResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAssociationForServiceQuotaTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceQuotaTemplateAssociationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceQuotaTemplateAssociationStatus>(x),
      },
    }, await resp.json());
  }

  async getRequestedServiceQuotaChange(
    {abortSignal, ...params}: RequestConfig & s.GetRequestedServiceQuotaChangeRequest,
  ): Promise<s.GetRequestedServiceQuotaChangeResponse> {
    const body: jsonP.JSONObject = {
      RequestId: params["RequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRequestedServiceQuotaChange",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RequestedQuota": toRequestedServiceQuotaChange,
      },
    }, await resp.json());
  }

  async getServiceQuota(
    {abortSignal, ...params}: RequestConfig & s.GetServiceQuotaRequest,
  ): Promise<s.GetServiceQuotaResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      QuotaCode: params["QuotaCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetServiceQuota",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Quota": toServiceQuota,
      },
    }, await resp.json());
  }

  async getServiceQuotaIncreaseRequestFromTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetServiceQuotaIncreaseRequestFromTemplateRequest,
  ): Promise<s.GetServiceQuotaIncreaseRequestFromTemplateResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      QuotaCode: params["QuotaCode"],
      AwsRegion: params["AwsRegion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetServiceQuotaIncreaseRequestFromTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceQuotaIncreaseRequestInTemplate": toServiceQuotaIncreaseRequestInTemplate,
      },
    }, await resp.json());
  }

  async listAWSDefaultServiceQuotas(
    {abortSignal, ...params}: RequestConfig & s.ListAWSDefaultServiceQuotasRequest,
  ): Promise<s.ListAWSDefaultServiceQuotasResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAWSDefaultServiceQuotas",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Quotas": [toServiceQuota],
      },
    }, await resp.json());
  }

  async listRequestedServiceQuotaChangeHistory(
    {abortSignal, ...params}: RequestConfig & s.ListRequestedServiceQuotaChangeHistoryRequest = {},
  ): Promise<s.ListRequestedServiceQuotaChangeHistoryResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      Status: params["Status"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRequestedServiceQuotaChangeHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "RequestedQuotas": [toRequestedServiceQuotaChange],
      },
    }, await resp.json());
  }

  async listRequestedServiceQuotaChangeHistoryByQuota(
    {abortSignal, ...params}: RequestConfig & s.ListRequestedServiceQuotaChangeHistoryByQuotaRequest,
  ): Promise<s.ListRequestedServiceQuotaChangeHistoryByQuotaResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      QuotaCode: params["QuotaCode"],
      Status: params["Status"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRequestedServiceQuotaChangeHistoryByQuota",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "RequestedQuotas": [toRequestedServiceQuotaChange],
      },
    }, await resp.json());
  }

  async listServiceQuotaIncreaseRequestsInTemplate(
    {abortSignal, ...params}: RequestConfig & s.ListServiceQuotaIncreaseRequestsInTemplateRequest = {},
  ): Promise<s.ListServiceQuotaIncreaseRequestsInTemplateResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      AwsRegion: params["AwsRegion"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListServiceQuotaIncreaseRequestsInTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceQuotaIncreaseRequestInTemplateList": [toServiceQuotaIncreaseRequestInTemplate],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listServiceQuotas(
    {abortSignal, ...params}: RequestConfig & s.ListServiceQuotasRequest,
  ): Promise<s.ListServiceQuotasResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListServiceQuotas",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Quotas": [toServiceQuota],
      },
    }, await resp.json());
  }

  async listServices(
    {abortSignal, ...params}: RequestConfig & s.ListServicesRequest = {},
  ): Promise<s.ListServicesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListServices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Services": [toServiceInfo],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async putServiceQuotaIncreaseRequestIntoTemplate(
    {abortSignal, ...params}: RequestConfig & s.PutServiceQuotaIncreaseRequestIntoTemplateRequest,
  ): Promise<s.PutServiceQuotaIncreaseRequestIntoTemplateResponse> {
    const body: jsonP.JSONObject = {
      QuotaCode: params["QuotaCode"],
      ServiceCode: params["ServiceCode"],
      AwsRegion: params["AwsRegion"],
      DesiredValue: params["DesiredValue"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutServiceQuotaIncreaseRequestIntoTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceQuotaIncreaseRequestInTemplate": toServiceQuotaIncreaseRequestInTemplate,
      },
    }, await resp.json());
  }

  async requestServiceQuotaIncrease(
    {abortSignal, ...params}: RequestConfig & s.RequestServiceQuotaIncreaseRequest,
  ): Promise<s.RequestServiceQuotaIncreaseResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      QuotaCode: params["QuotaCode"],
      DesiredValue: params["DesiredValue"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RequestServiceQuotaIncrease",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RequestedQuota": toRequestedServiceQuotaChange,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function toServiceQuota(root: jsonP.JSONValue): s.ServiceQuota {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceCode": "s",
      "ServiceName": "s",
      "QuotaArn": "s",
      "QuotaCode": "s",
      "QuotaName": "s",
      "Value": "n",
      "Unit": "s",
      "Adjustable": "b",
      "GlobalQuota": "b",
      "UsageMetric": toMetricInfo,
      "Period": toQuotaPeriod,
      "ErrorReason": toErrorReason,
    },
  }, root);
}

function toMetricInfo(root: jsonP.JSONValue): s.MetricInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "MetricNamespace": "s",
      "MetricName": "s",
      "MetricDimensions": x => jsonP.readMap(String, String, x),
      "MetricStatisticRecommendation": "s",
    },
  }, root);
}

function toQuotaPeriod(root: jsonP.JSONValue): s.QuotaPeriod {
  return jsonP.readObj({
    required: {},
    optional: {
      "PeriodValue": "n",
      "PeriodUnit": (x: jsonP.JSONValue) => cmnP.readEnum<s.PeriodUnit>(x),
    },
  }, root);
}

function toErrorReason(root: jsonP.JSONValue): s.ErrorReason {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

function toRequestedServiceQuotaChange(root: jsonP.JSONValue): s.RequestedServiceQuotaChange {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "CaseId": "s",
      "ServiceCode": "s",
      "ServiceName": "s",
      "QuotaCode": "s",
      "QuotaName": "s",
      "DesiredValue": "n",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.RequestStatus>(x),
      "Created": "d",
      "LastUpdated": "d",
      "Requester": "s",
      "QuotaArn": "s",
      "GlobalQuota": "b",
      "Unit": "s",
    },
  }, root);
}

function toServiceQuotaIncreaseRequestInTemplate(root: jsonP.JSONValue): s.ServiceQuotaIncreaseRequestInTemplate {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceCode": "s",
      "ServiceName": "s",
      "QuotaCode": "s",
      "QuotaName": "s",
      "DesiredValue": "n",
      "AwsRegion": "s",
      "Unit": "s",
      "GlobalQuota": "b",
    },
  }, root);
}

function toServiceInfo(root: jsonP.JSONValue): s.ServiceInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceCode": "s",
      "ServiceName": "s",
    },
  }, root);
}
