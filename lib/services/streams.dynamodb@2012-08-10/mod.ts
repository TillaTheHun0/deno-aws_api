// Autogenerated API client for: Amazon DynamoDB Streams

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class DynamoDBStreams {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DynamoDBStreams.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2012-08-10",
    "endpointPrefix": "streams.dynamodb",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceFullName": "Amazon DynamoDB Streams",
    "serviceId": "DynamoDB Streams",
    "signatureVersion": "v4",
    "signingName": "dynamodb",
    "targetPrefix": "DynamoDBStreams_20120810",
    "uid": "streams-dynamodb-2012-08-10"
  };

  async describeStream(
    {abortSignal, ...params}: RequestConfig & DescribeStreamInput,
  ): Promise<DescribeStreamOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeStream",
    });
    return prt.readObj({
      required: {},
      optional: {
        "StreamDescription": toStreamDescription,
      },
    }, await resp.json());
  }

  async getRecords(
    {abortSignal, ...params}: RequestConfig & GetRecordsInput,
  ): Promise<GetRecordsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRecords",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Records": [toRecord],
        "NextShardIterator": "s",
      },
    }, await resp.json());
  }

  async getShardIterator(
    {abortSignal, ...params}: RequestConfig & GetShardIteratorInput,
  ): Promise<GetShardIteratorOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetShardIterator",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ShardIterator": "s",
      },
    }, await resp.json());
  }

  async listStreams(
    {abortSignal, ...params}: RequestConfig & ListStreamsInput = {},
  ): Promise<ListStreamsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListStreams",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Streams": [toStream],
        "LastEvaluatedStreamArn": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DescribeStreamInput {
  StreamArn: string;
  Limit?: number | null;
  ExclusiveStartShardId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRecordsInput {
  ShardIterator: string;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface GetShardIteratorInput {
  StreamArn: string;
  ShardId: string;
  ShardIteratorType: ShardIteratorType;
  SequenceNumber?: string | null;
}

// refs: 1 - tags: named, input
export interface ListStreamsInput {
  TableName?: string | null;
  Limit?: number | null;
  ExclusiveStartStreamArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeStreamOutput {
  StreamDescription?: StreamDescription | null;
}

// refs: 1 - tags: named, output
export interface GetRecordsOutput {
  Records?: Record[] | null;
  NextShardIterator?: string | null;
}

// refs: 1 - tags: named, output
export interface GetShardIteratorOutput {
  ShardIterator?: string | null;
}

// refs: 1 - tags: named, output
export interface ListStreamsOutput {
  Streams?: Stream[] | null;
  LastEvaluatedStreamArn?: string | null;
}

// refs: 1 - tags: input, named, enum
export type ShardIteratorType =
| "TRIM_HORIZON"
| "LATEST"
| "AT_SEQUENCE_NUMBER"
| "AFTER_SEQUENCE_NUMBER"
;


// refs: 1 - tags: output, named, interface
export interface StreamDescription {
  StreamArn?: string | null;
  StreamLabel?: string | null;
  StreamStatus?: StreamStatus | null;
  StreamViewType?: StreamViewType | null;
  CreationRequestDateTime?: Date | number | null;
  TableName?: string | null;
  KeySchema?: KeySchemaElement[] | null;
  Shards?: Shard[] | null;
  LastEvaluatedShardId?: string | null;
}
function toStreamDescription(root: JSONValue): StreamDescription {
  return prt.readObj({
    required: {},
    optional: {
      "StreamArn": "s",
      "StreamLabel": "s",
      "StreamStatus": toStreamStatus,
      "StreamViewType": toStreamViewType,
      "CreationRequestDateTime": "d",
      "TableName": "s",
      "KeySchema": [toKeySchemaElement],
      "Shards": [toShard],
      "LastEvaluatedShardId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type StreamStatus =
| "ENABLING"
| "ENABLED"
| "DISABLING"
| "DISABLED"
;
function toStreamStatus(root: JSONValue): StreamStatus | null {
  return ( false
    || root == "ENABLING"
    || root == "ENABLED"
    || root == "DISABLING"
    || root == "DISABLED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, enum
export type StreamViewType =
| "NEW_IMAGE"
| "OLD_IMAGE"
| "NEW_AND_OLD_IMAGES"
| "KEYS_ONLY"
;
function toStreamViewType(root: JSONValue): StreamViewType | null {
  return ( false
    || root == "NEW_IMAGE"
    || root == "OLD_IMAGE"
    || root == "NEW_AND_OLD_IMAGES"
    || root == "KEYS_ONLY"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface KeySchemaElement {
  AttributeName: string;
  KeyType: KeyType;
}
function toKeySchemaElement(root: JSONValue): KeySchemaElement {
  return prt.readObj({
    required: {
      "AttributeName": "s",
      "KeyType": toKeyType,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type KeyType =
| "HASH"
| "RANGE"
;
function toKeyType(root: JSONValue): KeyType | null {
  return ( false
    || root == "HASH"
    || root == "RANGE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Shard {
  ShardId?: string | null;
  SequenceNumberRange?: SequenceNumberRange | null;
  ParentShardId?: string | null;
}
function toShard(root: JSONValue): Shard {
  return prt.readObj({
    required: {},
    optional: {
      "ShardId": "s",
      "SequenceNumberRange": toSequenceNumberRange,
      "ParentShardId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SequenceNumberRange {
  StartingSequenceNumber?: string | null;
  EndingSequenceNumber?: string | null;
}
function toSequenceNumberRange(root: JSONValue): SequenceNumberRange {
  return prt.readObj({
    required: {},
    optional: {
      "StartingSequenceNumber": "s",
      "EndingSequenceNumber": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Record {
  eventID?: string | null;
  eventName?: OperationType | null;
  eventVersion?: string | null;
  eventSource?: string | null;
  awsRegion?: string | null;
  dynamodb?: StreamRecord | null;
  userIdentity?: Identity | null;
}
function toRecord(root: JSONValue): Record {
  return prt.readObj({
    required: {},
    optional: {
      "eventID": "s",
      "eventName": toOperationType,
      "eventVersion": "s",
      "eventSource": "s",
      "awsRegion": "s",
      "dynamodb": toStreamRecord,
      "userIdentity": toIdentity,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type OperationType =
| "INSERT"
| "MODIFY"
| "REMOVE"
;
function toOperationType(root: JSONValue): OperationType | null {
  return ( false
    || root == "INSERT"
    || root == "MODIFY"
    || root == "REMOVE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface StreamRecord {
  ApproximateCreationDateTime?: Date | number | null;
  Keys?: { [key: string]: AttributeValue } | null;
  NewImage?: { [key: string]: AttributeValue } | null;
  OldImage?: { [key: string]: AttributeValue } | null;
  SequenceNumber?: string | null;
  SizeBytes?: number | null;
  StreamViewType?: StreamViewType | null;
}
function toStreamRecord(root: JSONValue): StreamRecord {
  return prt.readObj({
    required: {},
    optional: {
      "ApproximateCreationDateTime": "d",
      "Keys": x => prt.readMap(String, toAttributeValue, x),
      "NewImage": x => prt.readMap(String, toAttributeValue, x),
      "OldImage": x => prt.readMap(String, toAttributeValue, x),
      "SequenceNumber": "s",
      "SizeBytes": "n",
      "StreamViewType": toStreamViewType,
    },
  }, root);
}

// refs: 9 - tags: output, named, interface, recursed
export interface AttributeValue {
  S?: string | null;
  N?: string | null;
  B?: Uint8Array | string | null;
  SS?: string[] | null;
  NS?: string[] | null;
  BS?: (Uint8Array | string)[] | null;
  M?: { [key: string]: AttributeValue } | null;
  L?: AttributeValue[] | null;
  NULL?: boolean | null;
  BOOL?: boolean | null;
}
function toAttributeValue(root: JSONValue): AttributeValue {
  return prt.readObj({
    required: {},
    optional: {
      "S": "s",
      "N": "s",
      "B": "a",
      "SS": ["s"],
      "NS": ["s"],
      "BS": ["a"],
      "M": x => prt.readMap(String, toAttributeValue, x),
      "L": [toAttributeValue],
      "NULL": "b",
      "BOOL": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Identity {
  PrincipalId?: string | null;
  Type?: string | null;
}
function toIdentity(root: JSONValue): Identity {
  return prt.readObj({
    required: {},
    optional: {
      "PrincipalId": "s",
      "Type": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Stream {
  StreamArn?: string | null;
  TableName?: string | null;
  StreamLabel?: string | null;
}
function toStream(root: JSONValue): Stream {
  return prt.readObj({
    required: {},
    optional: {
      "StreamArn": "s",
      "TableName": "s",
      "StreamLabel": "s",
    },
  }, root);
}
