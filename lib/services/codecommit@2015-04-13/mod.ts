// Autogenerated API client for: AWS CodeCommit

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class CodeCommit {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CodeCommit.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-04-13",
    "endpointPrefix": "codecommit",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "CodeCommit",
    "serviceFullName": "AWS CodeCommit",
    "serviceId": "CodeCommit",
    "signatureVersion": "v4",
    "targetPrefix": "CodeCommit_20150413",
    "uid": "codecommit-2015-04-13"
  };

  async associateApprovalRuleTemplateWithRepository(
    {abortSignal, ...params}: RequestConfig & AssociateApprovalRuleTemplateWithRepositoryInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateApprovalRuleTemplateWithRepository",
    });
  }

  async batchAssociateApprovalRuleTemplateWithRepositories(
    {abortSignal, ...params}: RequestConfig & BatchAssociateApprovalRuleTemplateWithRepositoriesInput,
  ): Promise<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateApprovalRuleTemplateWithRepositories",
    });
    return prt.readObj({
      required: {
        "associatedRepositoryNames": ["s"],
        "errors": [toBatchAssociateApprovalRuleTemplateWithRepositoriesError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchDescribeMergeConflicts(
    {abortSignal, ...params}: RequestConfig & BatchDescribeMergeConflictsInput,
  ): Promise<BatchDescribeMergeConflictsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDescribeMergeConflicts",
    });
    return prt.readObj({
      required: {
        "conflicts": [toConflict],
        "destinationCommitId": "s",
        "sourceCommitId": "s",
      },
      optional: {
        "nextToken": "s",
        "errors": [toBatchDescribeMergeConflictsError],
        "baseCommitId": "s",
      },
    }, await resp.json());
  }

  async batchDisassociateApprovalRuleTemplateFromRepositories(
    {abortSignal, ...params}: RequestConfig & BatchDisassociateApprovalRuleTemplateFromRepositoriesInput,
  ): Promise<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateApprovalRuleTemplateFromRepositories",
    });
    return prt.readObj({
      required: {
        "disassociatedRepositoryNames": ["s"],
        "errors": [toBatchDisassociateApprovalRuleTemplateFromRepositoriesError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchGetCommits(
    {abortSignal, ...params}: RequestConfig & BatchGetCommitsInput,
  ): Promise<BatchGetCommitsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetCommits",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commits": [toCommit],
        "errors": [toBatchGetCommitsError],
      },
    }, await resp.json());
  }

  async batchGetRepositories(
    {abortSignal, ...params}: RequestConfig & BatchGetRepositoriesInput,
  ): Promise<BatchGetRepositoriesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetRepositories",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositories": [toRepositoryMetadata],
        "repositoriesNotFound": ["s"],
      },
    }, await resp.json());
  }

  async createApprovalRuleTemplate(
    {abortSignal, ...params}: RequestConfig & CreateApprovalRuleTemplateInput,
  ): Promise<CreateApprovalRuleTemplateOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApprovalRuleTemplate",
    });
    return prt.readObj({
      required: {
        "approvalRuleTemplate": toApprovalRuleTemplate,
      },
      optional: {},
    }, await resp.json());
  }

  async createBranch(
    {abortSignal, ...params}: RequestConfig & CreateBranchInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBranch",
    });
  }

  async createCommit(
    {abortSignal, ...params}: RequestConfig & CreateCommitInput,
  ): Promise<CreateCommitOutput> {
    const body: JSONObject = {...params,
    putFiles: params["putFiles"]?.map(x => fromPutFileEntry(x)),
    deleteFiles: params["deleteFiles"]?.map(x => fromDeleteFileEntry(x)),
    setFileModes: params["setFileModes"]?.map(x => fromSetFileModeEntry(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCommit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commitId": "s",
        "treeId": "s",
        "filesAdded": [toFileMetadata],
        "filesUpdated": [toFileMetadata],
        "filesDeleted": [toFileMetadata],
      },
    }, await resp.json());
  }

  async createPullRequest(
    {abortSignal, ...params}: RequestConfig & CreatePullRequestInput,
  ): Promise<CreatePullRequestOutput> {
    const body: JSONObject = {...params,
    targets: params["targets"]?.map(x => fromTarget(x)),
    clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePullRequest",
    });
    return prt.readObj({
      required: {
        "pullRequest": toPullRequest,
      },
      optional: {},
    }, await resp.json());
  }

  async createPullRequestApprovalRule(
    {abortSignal, ...params}: RequestConfig & CreatePullRequestApprovalRuleInput,
  ): Promise<CreatePullRequestApprovalRuleOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePullRequestApprovalRule",
    });
    return prt.readObj({
      required: {
        "approvalRule": toApprovalRule,
      },
      optional: {},
    }, await resp.json());
  }

  async createRepository(
    {abortSignal, ...params}: RequestConfig & CreateRepositoryInput,
  ): Promise<CreateRepositoryOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRepository",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositoryMetadata": toRepositoryMetadata,
      },
    }, await resp.json());
  }

  async createUnreferencedMergeCommit(
    {abortSignal, ...params}: RequestConfig & CreateUnreferencedMergeCommitInput,
  ): Promise<CreateUnreferencedMergeCommitOutput> {
    const body: JSONObject = {...params,
    conflictResolution: fromConflictResolution(params["conflictResolution"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUnreferencedMergeCommit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commitId": "s",
        "treeId": "s",
      },
    }, await resp.json());
  }

  async deleteApprovalRuleTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteApprovalRuleTemplateInput,
  ): Promise<DeleteApprovalRuleTemplateOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteApprovalRuleTemplate",
    });
    return prt.readObj({
      required: {
        "approvalRuleTemplateId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteBranch(
    {abortSignal, ...params}: RequestConfig & DeleteBranchInput,
  ): Promise<DeleteBranchOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBranch",
    });
    return prt.readObj({
      required: {},
      optional: {
        "deletedBranch": toBranchInfo,
      },
    }, await resp.json());
  }

  async deleteCommentContent(
    {abortSignal, ...params}: RequestConfig & DeleteCommentContentInput,
  ): Promise<DeleteCommentContentOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCommentContent",
    });
    return prt.readObj({
      required: {},
      optional: {
        "comment": toComment,
      },
    }, await resp.json());
  }

  async deleteFile(
    {abortSignal, ...params}: RequestConfig & DeleteFileInput,
  ): Promise<DeleteFileOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFile",
    });
    return prt.readObj({
      required: {
        "commitId": "s",
        "blobId": "s",
        "treeId": "s",
        "filePath": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deletePullRequestApprovalRule(
    {abortSignal, ...params}: RequestConfig & DeletePullRequestApprovalRuleInput,
  ): Promise<DeletePullRequestApprovalRuleOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePullRequestApprovalRule",
    });
    return prt.readObj({
      required: {
        "approvalRuleId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteRepository(
    {abortSignal, ...params}: RequestConfig & DeleteRepositoryInput,
  ): Promise<DeleteRepositoryOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRepository",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositoryId": "s",
      },
    }, await resp.json());
  }

  async describeMergeConflicts(
    {abortSignal, ...params}: RequestConfig & DescribeMergeConflictsInput,
  ): Promise<DescribeMergeConflictsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMergeConflicts",
    });
    return prt.readObj({
      required: {
        "conflictMetadata": toConflictMetadata,
        "mergeHunks": [toMergeHunk],
        "destinationCommitId": "s",
        "sourceCommitId": "s",
      },
      optional: {
        "nextToken": "s",
        "baseCommitId": "s",
      },
    }, await resp.json());
  }

  async describePullRequestEvents(
    {abortSignal, ...params}: RequestConfig & DescribePullRequestEventsInput,
  ): Promise<DescribePullRequestEventsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePullRequestEvents",
    });
    return prt.readObj({
      required: {
        "pullRequestEvents": [toPullRequestEvent],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async disassociateApprovalRuleTemplateFromRepository(
    {abortSignal, ...params}: RequestConfig & DisassociateApprovalRuleTemplateFromRepositoryInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateApprovalRuleTemplateFromRepository",
    });
  }

  async evaluatePullRequestApprovalRules(
    {abortSignal, ...params}: RequestConfig & EvaluatePullRequestApprovalRulesInput,
  ): Promise<EvaluatePullRequestApprovalRulesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EvaluatePullRequestApprovalRules",
    });
    return prt.readObj({
      required: {
        "evaluation": toEvaluation,
      },
      optional: {},
    }, await resp.json());
  }

  async getApprovalRuleTemplate(
    {abortSignal, ...params}: RequestConfig & GetApprovalRuleTemplateInput,
  ): Promise<GetApprovalRuleTemplateOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetApprovalRuleTemplate",
    });
    return prt.readObj({
      required: {
        "approvalRuleTemplate": toApprovalRuleTemplate,
      },
      optional: {},
    }, await resp.json());
  }

  async getBlob(
    {abortSignal, ...params}: RequestConfig & GetBlobInput,
  ): Promise<GetBlobOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBlob",
    });
    return prt.readObj({
      required: {
        "content": "a",
      },
      optional: {},
    }, await resp.json());
  }

  async getBranch(
    {abortSignal, ...params}: RequestConfig & GetBranchInput = {},
  ): Promise<GetBranchOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBranch",
    });
    return prt.readObj({
      required: {},
      optional: {
        "branch": toBranchInfo,
      },
    }, await resp.json());
  }

  async getComment(
    {abortSignal, ...params}: RequestConfig & GetCommentInput,
  ): Promise<GetCommentOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComment",
    });
    return prt.readObj({
      required: {},
      optional: {
        "comment": toComment,
      },
    }, await resp.json());
  }

  async getCommentReactions(
    {abortSignal, ...params}: RequestConfig & GetCommentReactionsInput,
  ): Promise<GetCommentReactionsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCommentReactions",
    });
    return prt.readObj({
      required: {
        "reactionsForComment": [toReactionForComment],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getCommentsForComparedCommit(
    {abortSignal, ...params}: RequestConfig & GetCommentsForComparedCommitInput,
  ): Promise<GetCommentsForComparedCommitOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCommentsForComparedCommit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commentsForComparedCommitData": [toCommentsForComparedCommit],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getCommentsForPullRequest(
    {abortSignal, ...params}: RequestConfig & GetCommentsForPullRequestInput,
  ): Promise<GetCommentsForPullRequestOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCommentsForPullRequest",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commentsForPullRequestData": [toCommentsForPullRequest],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getCommit(
    {abortSignal, ...params}: RequestConfig & GetCommitInput,
  ): Promise<GetCommitOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCommit",
    });
    return prt.readObj({
      required: {
        "commit": toCommit,
      },
      optional: {},
    }, await resp.json());
  }

  async getDifferences(
    {abortSignal, ...params}: RequestConfig & GetDifferencesInput,
  ): Promise<GetDifferencesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDifferences",
    });
    return prt.readObj({
      required: {},
      optional: {
        "differences": [toDifference],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getFile(
    {abortSignal, ...params}: RequestConfig & GetFileInput,
  ): Promise<GetFileOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFile",
    });
    return prt.readObj({
      required: {
        "commitId": "s",
        "blobId": "s",
        "filePath": "s",
        "fileMode": toFileModeTypeEnum,
        "fileSize": "n",
        "fileContent": "a",
      },
      optional: {},
    }, await resp.json());
  }

  async getFolder(
    {abortSignal, ...params}: RequestConfig & GetFolderInput,
  ): Promise<GetFolderOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFolder",
    });
    return prt.readObj({
      required: {
        "commitId": "s",
        "folderPath": "s",
      },
      optional: {
        "treeId": "s",
        "subFolders": [toFolder],
        "files": [toFile],
        "symbolicLinks": [toSymbolicLink],
        "subModules": [toSubModule],
      },
    }, await resp.json());
  }

  async getMergeCommit(
    {abortSignal, ...params}: RequestConfig & GetMergeCommitInput,
  ): Promise<GetMergeCommitOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMergeCommit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "sourceCommitId": "s",
        "destinationCommitId": "s",
        "baseCommitId": "s",
        "mergedCommitId": "s",
      },
    }, await resp.json());
  }

  async getMergeConflicts(
    {abortSignal, ...params}: RequestConfig & GetMergeConflictsInput,
  ): Promise<GetMergeConflictsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMergeConflicts",
    });
    return prt.readObj({
      required: {
        "mergeable": "b",
        "destinationCommitId": "s",
        "sourceCommitId": "s",
        "conflictMetadataList": [toConflictMetadata],
      },
      optional: {
        "baseCommitId": "s",
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getMergeOptions(
    {abortSignal, ...params}: RequestConfig & GetMergeOptionsInput,
  ): Promise<GetMergeOptionsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMergeOptions",
    });
    return prt.readObj({
      required: {
        "mergeOptions": [toMergeOptionTypeEnum],
        "sourceCommitId": "s",
        "destinationCommitId": "s",
        "baseCommitId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getPullRequest(
    {abortSignal, ...params}: RequestConfig & GetPullRequestInput,
  ): Promise<GetPullRequestOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPullRequest",
    });
    return prt.readObj({
      required: {
        "pullRequest": toPullRequest,
      },
      optional: {},
    }, await resp.json());
  }

  async getPullRequestApprovalStates(
    {abortSignal, ...params}: RequestConfig & GetPullRequestApprovalStatesInput,
  ): Promise<GetPullRequestApprovalStatesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPullRequestApprovalStates",
    });
    return prt.readObj({
      required: {},
      optional: {
        "approvals": [toApproval],
      },
    }, await resp.json());
  }

  async getPullRequestOverrideState(
    {abortSignal, ...params}: RequestConfig & GetPullRequestOverrideStateInput,
  ): Promise<GetPullRequestOverrideStateOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPullRequestOverrideState",
    });
    return prt.readObj({
      required: {},
      optional: {
        "overridden": "b",
        "overrider": "s",
      },
    }, await resp.json());
  }

  async getRepository(
    {abortSignal, ...params}: RequestConfig & GetRepositoryInput,
  ): Promise<GetRepositoryOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRepository",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositoryMetadata": toRepositoryMetadata,
      },
    }, await resp.json());
  }

  async getRepositoryTriggers(
    {abortSignal, ...params}: RequestConfig & GetRepositoryTriggersInput,
  ): Promise<GetRepositoryTriggersOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRepositoryTriggers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "configurationId": "s",
        "triggers": [toRepositoryTrigger],
      },
    }, await resp.json());
  }

  async listApprovalRuleTemplates(
    {abortSignal, ...params}: RequestConfig & ListApprovalRuleTemplatesInput = {},
  ): Promise<ListApprovalRuleTemplatesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListApprovalRuleTemplates",
    });
    return prt.readObj({
      required: {},
      optional: {
        "approvalRuleTemplateNames": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssociatedApprovalRuleTemplatesForRepository(
    {abortSignal, ...params}: RequestConfig & ListAssociatedApprovalRuleTemplatesForRepositoryInput,
  ): Promise<ListAssociatedApprovalRuleTemplatesForRepositoryOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssociatedApprovalRuleTemplatesForRepository",
    });
    return prt.readObj({
      required: {},
      optional: {
        "approvalRuleTemplateNames": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listBranches(
    {abortSignal, ...params}: RequestConfig & ListBranchesInput,
  ): Promise<ListBranchesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBranches",
    });
    return prt.readObj({
      required: {},
      optional: {
        "branches": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPullRequests(
    {abortSignal, ...params}: RequestConfig & ListPullRequestsInput,
  ): Promise<ListPullRequestsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPullRequests",
    });
    return prt.readObj({
      required: {
        "pullRequestIds": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRepositories(
    {abortSignal, ...params}: RequestConfig & ListRepositoriesInput = {},
  ): Promise<ListRepositoriesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRepositories",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositories": [toRepositoryNameIdPair],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRepositoriesForApprovalRuleTemplate(
    {abortSignal, ...params}: RequestConfig & ListRepositoriesForApprovalRuleTemplateInput,
  ): Promise<ListRepositoriesForApprovalRuleTemplateOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRepositoriesForApprovalRuleTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositoryNames": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "tags": x => prt.readMap(String, String, x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async mergeBranchesByFastForward(
    {abortSignal, ...params}: RequestConfig & MergeBranchesByFastForwardInput,
  ): Promise<MergeBranchesByFastForwardOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergeBranchesByFastForward",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commitId": "s",
        "treeId": "s",
      },
    }, await resp.json());
  }

  async mergeBranchesBySquash(
    {abortSignal, ...params}: RequestConfig & MergeBranchesBySquashInput,
  ): Promise<MergeBranchesBySquashOutput> {
    const body: JSONObject = {...params,
    conflictResolution: fromConflictResolution(params["conflictResolution"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergeBranchesBySquash",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commitId": "s",
        "treeId": "s",
      },
    }, await resp.json());
  }

  async mergeBranchesByThreeWay(
    {abortSignal, ...params}: RequestConfig & MergeBranchesByThreeWayInput,
  ): Promise<MergeBranchesByThreeWayOutput> {
    const body: JSONObject = {...params,
    conflictResolution: fromConflictResolution(params["conflictResolution"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergeBranchesByThreeWay",
    });
    return prt.readObj({
      required: {},
      optional: {
        "commitId": "s",
        "treeId": "s",
      },
    }, await resp.json());
  }

  async mergePullRequestByFastForward(
    {abortSignal, ...params}: RequestConfig & MergePullRequestByFastForwardInput,
  ): Promise<MergePullRequestByFastForwardOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergePullRequestByFastForward",
    });
    return prt.readObj({
      required: {},
      optional: {
        "pullRequest": toPullRequest,
      },
    }, await resp.json());
  }

  async mergePullRequestBySquash(
    {abortSignal, ...params}: RequestConfig & MergePullRequestBySquashInput,
  ): Promise<MergePullRequestBySquashOutput> {
    const body: JSONObject = {...params,
    conflictResolution: fromConflictResolution(params["conflictResolution"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergePullRequestBySquash",
    });
    return prt.readObj({
      required: {},
      optional: {
        "pullRequest": toPullRequest,
      },
    }, await resp.json());
  }

  async mergePullRequestByThreeWay(
    {abortSignal, ...params}: RequestConfig & MergePullRequestByThreeWayInput,
  ): Promise<MergePullRequestByThreeWayOutput> {
    const body: JSONObject = {...params,
    conflictResolution: fromConflictResolution(params["conflictResolution"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergePullRequestByThreeWay",
    });
    return prt.readObj({
      required: {},
      optional: {
        "pullRequest": toPullRequest,
      },
    }, await resp.json());
  }

  async overridePullRequestApprovalRules(
    {abortSignal, ...params}: RequestConfig & OverridePullRequestApprovalRulesInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "OverridePullRequestApprovalRules",
    });
  }

  async postCommentForComparedCommit(
    {abortSignal, ...params}: RequestConfig & PostCommentForComparedCommitInput,
  ): Promise<PostCommentForComparedCommitOutput> {
    const body: JSONObject = {...params,
    location: fromLocation(params["location"]),
    clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PostCommentForComparedCommit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositoryName": "s",
        "beforeCommitId": "s",
        "afterCommitId": "s",
        "beforeBlobId": "s",
        "afterBlobId": "s",
        "location": toLocation,
        "comment": toComment,
      },
    }, await resp.json());
  }

  async postCommentForPullRequest(
    {abortSignal, ...params}: RequestConfig & PostCommentForPullRequestInput,
  ): Promise<PostCommentForPullRequestOutput> {
    const body: JSONObject = {...params,
    location: fromLocation(params["location"]),
    clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PostCommentForPullRequest",
    });
    return prt.readObj({
      required: {},
      optional: {
        "repositoryName": "s",
        "pullRequestId": "s",
        "beforeCommitId": "s",
        "afterCommitId": "s",
        "beforeBlobId": "s",
        "afterBlobId": "s",
        "location": toLocation,
        "comment": toComment,
      },
    }, await resp.json());
  }

  async postCommentReply(
    {abortSignal, ...params}: RequestConfig & PostCommentReplyInput,
  ): Promise<PostCommentReplyOutput> {
    const body: JSONObject = {...params,
    clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PostCommentReply",
    });
    return prt.readObj({
      required: {},
      optional: {
        "comment": toComment,
      },
    }, await resp.json());
  }

  async putCommentReaction(
    {abortSignal, ...params}: RequestConfig & PutCommentReactionInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutCommentReaction",
    });
  }

  async putFile(
    {abortSignal, ...params}: RequestConfig & PutFileInput,
  ): Promise<PutFileOutput> {
    const body: JSONObject = {...params,
    fileContent: prt.serializeBlob(params["fileContent"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutFile",
    });
    return prt.readObj({
      required: {
        "commitId": "s",
        "blobId": "s",
        "treeId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async putRepositoryTriggers(
    {abortSignal, ...params}: RequestConfig & PutRepositoryTriggersInput,
  ): Promise<PutRepositoryTriggersOutput> {
    const body: JSONObject = {...params,
    triggers: params["triggers"]?.map(x => fromRepositoryTrigger(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRepositoryTriggers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "configurationId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async testRepositoryTriggers(
    {abortSignal, ...params}: RequestConfig & TestRepositoryTriggersInput,
  ): Promise<TestRepositoryTriggersOutput> {
    const body: JSONObject = {...params,
    triggers: params["triggers"]?.map(x => fromRepositoryTrigger(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TestRepositoryTriggers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "successfulExecutions": ["s"],
        "failedExecutions": [toRepositoryTriggerExecutionFailure],
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

  async updateApprovalRuleTemplateContent(
    {abortSignal, ...params}: RequestConfig & UpdateApprovalRuleTemplateContentInput,
  ): Promise<UpdateApprovalRuleTemplateContentOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApprovalRuleTemplateContent",
    });
    return prt.readObj({
      required: {
        "approvalRuleTemplate": toApprovalRuleTemplate,
      },
      optional: {},
    }, await resp.json());
  }

  async updateApprovalRuleTemplateDescription(
    {abortSignal, ...params}: RequestConfig & UpdateApprovalRuleTemplateDescriptionInput,
  ): Promise<UpdateApprovalRuleTemplateDescriptionOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApprovalRuleTemplateDescription",
    });
    return prt.readObj({
      required: {
        "approvalRuleTemplate": toApprovalRuleTemplate,
      },
      optional: {},
    }, await resp.json());
  }

  async updateApprovalRuleTemplateName(
    {abortSignal, ...params}: RequestConfig & UpdateApprovalRuleTemplateNameInput,
  ): Promise<UpdateApprovalRuleTemplateNameOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApprovalRuleTemplateName",
    });
    return prt.readObj({
      required: {
        "approvalRuleTemplate": toApprovalRuleTemplate,
      },
      optional: {},
    }, await resp.json());
  }

  async updateComment(
    {abortSignal, ...params}: RequestConfig & UpdateCommentInput,
  ): Promise<UpdateCommentOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateComment",
    });
    return prt.readObj({
      required: {},
      optional: {
        "comment": toComment,
      },
    }, await resp.json());
  }

  async updateDefaultBranch(
    {abortSignal, ...params}: RequestConfig & UpdateDefaultBranchInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDefaultBranch",
    });
  }

  async updatePullRequestApprovalRuleContent(
    {abortSignal, ...params}: RequestConfig & UpdatePullRequestApprovalRuleContentInput,
  ): Promise<UpdatePullRequestApprovalRuleContentOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePullRequestApprovalRuleContent",
    });
    return prt.readObj({
      required: {
        "approvalRule": toApprovalRule,
      },
      optional: {},
    }, await resp.json());
  }

  async updatePullRequestApprovalState(
    {abortSignal, ...params}: RequestConfig & UpdatePullRequestApprovalStateInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePullRequestApprovalState",
    });
  }

  async updatePullRequestDescription(
    {abortSignal, ...params}: RequestConfig & UpdatePullRequestDescriptionInput,
  ): Promise<UpdatePullRequestDescriptionOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePullRequestDescription",
    });
    return prt.readObj({
      required: {
        "pullRequest": toPullRequest,
      },
      optional: {},
    }, await resp.json());
  }

  async updatePullRequestStatus(
    {abortSignal, ...params}: RequestConfig & UpdatePullRequestStatusInput,
  ): Promise<UpdatePullRequestStatusOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePullRequestStatus",
    });
    return prt.readObj({
      required: {
        "pullRequest": toPullRequest,
      },
      optional: {},
    }, await resp.json());
  }

  async updatePullRequestTitle(
    {abortSignal, ...params}: RequestConfig & UpdatePullRequestTitleInput,
  ): Promise<UpdatePullRequestTitleOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePullRequestTitle",
    });
    return prt.readObj({
      required: {
        "pullRequest": toPullRequest,
      },
      optional: {},
    }, await resp.json());
  }

  async updateRepositoryDescription(
    {abortSignal, ...params}: RequestConfig & UpdateRepositoryDescriptionInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRepositoryDescription",
    });
  }

  async updateRepositoryName(
    {abortSignal, ...params}: RequestConfig & UpdateRepositoryNameInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRepositoryName",
    });
  }

}

// refs: 1 - tags: named, input
export interface AssociateApprovalRuleTemplateWithRepositoryInput {
  approvalRuleTemplateName: string;
  repositoryName: string;
}

// refs: 1 - tags: named, input
export interface BatchAssociateApprovalRuleTemplateWithRepositoriesInput {
  approvalRuleTemplateName: string;
  repositoryNames: string[];
}

// refs: 1 - tags: named, input
export interface BatchDescribeMergeConflictsInput {
  repositoryName: string;
  destinationCommitSpecifier: string;
  sourceCommitSpecifier: string;
  mergeOption: MergeOptionTypeEnum;
  maxMergeHunks?: number | null;
  maxConflictFiles?: number | null;
  filePaths?: string[] | null;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesInput {
  approvalRuleTemplateName: string;
  repositoryNames: string[];
}

// refs: 1 - tags: named, input
export interface BatchGetCommitsInput {
  commitIds: string[];
  repositoryName: string;
}

// refs: 1 - tags: named, input
export interface BatchGetRepositoriesInput {
  repositoryNames: string[];
}

// refs: 1 - tags: named, input
export interface CreateApprovalRuleTemplateInput {
  approvalRuleTemplateName: string;
  approvalRuleTemplateContent: string;
  approvalRuleTemplateDescription?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateBranchInput {
  repositoryName: string;
  branchName: string;
  commitId: string;
}

// refs: 1 - tags: named, input
export interface CreateCommitInput {
  repositoryName: string;
  branchName: string;
  parentCommitId?: string | null;
  authorName?: string | null;
  email?: string | null;
  commitMessage?: string | null;
  keepEmptyFolders?: boolean | null;
  putFiles?: PutFileEntry[] | null;
  deleteFiles?: DeleteFileEntry[] | null;
  setFileModes?: SetFileModeEntry[] | null;
}

// refs: 1 - tags: named, input
export interface CreatePullRequestInput {
  title: string;
  description?: string | null;
  targets: Target[];
  clientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreatePullRequestApprovalRuleInput {
  pullRequestId: string;
  approvalRuleName: string;
  approvalRuleContent: string;
}

// refs: 1 - tags: named, input
export interface CreateRepositoryInput {
  repositoryName: string;
  repositoryDescription?: string | null;
  tags?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface CreateUnreferencedMergeCommitInput {
  repositoryName: string;
  sourceCommitSpecifier: string;
  destinationCommitSpecifier: string;
  mergeOption: MergeOptionTypeEnum;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  authorName?: string | null;
  email?: string | null;
  commitMessage?: string | null;
  keepEmptyFolders?: boolean | null;
  conflictResolution?: ConflictResolution | null;
}

// refs: 1 - tags: named, input
export interface DeleteApprovalRuleTemplateInput {
  approvalRuleTemplateName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBranchInput {
  repositoryName: string;
  branchName: string;
}

// refs: 1 - tags: named, input
export interface DeleteCommentContentInput {
  commentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFileInput {
  repositoryName: string;
  branchName: string;
  filePath: string;
  parentCommitId: string;
  keepEmptyFolders?: boolean | null;
  commitMessage?: string | null;
  name?: string | null;
  email?: string | null;
}

// refs: 1 - tags: named, input
export interface DeletePullRequestApprovalRuleInput {
  pullRequestId: string;
  approvalRuleName: string;
}

// refs: 1 - tags: named, input
export interface DeleteRepositoryInput {
  repositoryName: string;
}

// refs: 1 - tags: named, input
export interface DescribeMergeConflictsInput {
  repositoryName: string;
  destinationCommitSpecifier: string;
  sourceCommitSpecifier: string;
  mergeOption: MergeOptionTypeEnum;
  maxMergeHunks?: number | null;
  filePath: string;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePullRequestEventsInput {
  pullRequestId: string;
  pullRequestEventType?: PullRequestEventType | null;
  actorArn?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DisassociateApprovalRuleTemplateFromRepositoryInput {
  approvalRuleTemplateName: string;
  repositoryName: string;
}

// refs: 1 - tags: named, input
export interface EvaluatePullRequestApprovalRulesInput {
  pullRequestId: string;
  revisionId: string;
}

// refs: 1 - tags: named, input
export interface GetApprovalRuleTemplateInput {
  approvalRuleTemplateName: string;
}

// refs: 1 - tags: named, input
export interface GetBlobInput {
  repositoryName: string;
  blobId: string;
}

// refs: 1 - tags: named, input
export interface GetBranchInput {
  repositoryName?: string | null;
  branchName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCommentInput {
  commentId: string;
}

// refs: 1 - tags: named, input
export interface GetCommentReactionsInput {
  commentId: string;
  reactionUserArn?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetCommentsForComparedCommitInput {
  repositoryName: string;
  beforeCommitId?: string | null;
  afterCommitId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetCommentsForPullRequestInput {
  pullRequestId: string;
  repositoryName?: string | null;
  beforeCommitId?: string | null;
  afterCommitId?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetCommitInput {
  repositoryName: string;
  commitId: string;
}

// refs: 1 - tags: named, input
export interface GetDifferencesInput {
  repositoryName: string;
  beforeCommitSpecifier?: string | null;
  afterCommitSpecifier: string;
  beforePath?: string | null;
  afterPath?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetFileInput {
  repositoryName: string;
  commitSpecifier?: string | null;
  filePath: string;
}

// refs: 1 - tags: named, input
export interface GetFolderInput {
  repositoryName: string;
  commitSpecifier?: string | null;
  folderPath: string;
}

// refs: 1 - tags: named, input
export interface GetMergeCommitInput {
  repositoryName: string;
  sourceCommitSpecifier: string;
  destinationCommitSpecifier: string;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
}

// refs: 1 - tags: named, input
export interface GetMergeConflictsInput {
  repositoryName: string;
  destinationCommitSpecifier: string;
  sourceCommitSpecifier: string;
  mergeOption: MergeOptionTypeEnum;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  maxConflictFiles?: number | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetMergeOptionsInput {
  repositoryName: string;
  sourceCommitSpecifier: string;
  destinationCommitSpecifier: string;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
}

// refs: 1 - tags: named, input
export interface GetPullRequestInput {
  pullRequestId: string;
}

// refs: 1 - tags: named, input
export interface GetPullRequestApprovalStatesInput {
  pullRequestId: string;
  revisionId: string;
}

// refs: 1 - tags: named, input
export interface GetPullRequestOverrideStateInput {
  pullRequestId: string;
  revisionId: string;
}

// refs: 1 - tags: named, input
export interface GetRepositoryInput {
  repositoryName: string;
}

// refs: 1 - tags: named, input
export interface GetRepositoryTriggersInput {
  repositoryName: string;
}

// refs: 1 - tags: named, input
export interface ListApprovalRuleTemplatesInput {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssociatedApprovalRuleTemplatesForRepositoryInput {
  repositoryName: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListBranchesInput {
  repositoryName: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPullRequestsInput {
  repositoryName: string;
  authorArn?: string | null;
  pullRequestStatus?: PullRequestStatusEnum | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRepositoriesInput {
  nextToken?: string | null;
  sortBy?: SortByEnum | null;
  order?: OrderEnum | null;
}

// refs: 1 - tags: named, input
export interface ListRepositoriesForApprovalRuleTemplateInput {
  approvalRuleTemplateName: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  resourceArn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface MergeBranchesByFastForwardInput {
  repositoryName: string;
  sourceCommitSpecifier: string;
  destinationCommitSpecifier: string;
  targetBranch?: string | null;
}

// refs: 1 - tags: named, input
export interface MergeBranchesBySquashInput {
  repositoryName: string;
  sourceCommitSpecifier: string;
  destinationCommitSpecifier: string;
  targetBranch?: string | null;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  authorName?: string | null;
  email?: string | null;
  commitMessage?: string | null;
  keepEmptyFolders?: boolean | null;
  conflictResolution?: ConflictResolution | null;
}

// refs: 1 - tags: named, input
export interface MergeBranchesByThreeWayInput {
  repositoryName: string;
  sourceCommitSpecifier: string;
  destinationCommitSpecifier: string;
  targetBranch?: string | null;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  authorName?: string | null;
  email?: string | null;
  commitMessage?: string | null;
  keepEmptyFolders?: boolean | null;
  conflictResolution?: ConflictResolution | null;
}

// refs: 1 - tags: named, input
export interface MergePullRequestByFastForwardInput {
  pullRequestId: string;
  repositoryName: string;
  sourceCommitId?: string | null;
}

// refs: 1 - tags: named, input
export interface MergePullRequestBySquashInput {
  pullRequestId: string;
  repositoryName: string;
  sourceCommitId?: string | null;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  commitMessage?: string | null;
  authorName?: string | null;
  email?: string | null;
  keepEmptyFolders?: boolean | null;
  conflictResolution?: ConflictResolution | null;
}

// refs: 1 - tags: named, input
export interface MergePullRequestByThreeWayInput {
  pullRequestId: string;
  repositoryName: string;
  sourceCommitId?: string | null;
  conflictDetailLevel?: ConflictDetailLevelTypeEnum | null;
  conflictResolutionStrategy?: ConflictResolutionStrategyTypeEnum | null;
  commitMessage?: string | null;
  authorName?: string | null;
  email?: string | null;
  keepEmptyFolders?: boolean | null;
  conflictResolution?: ConflictResolution | null;
}

// refs: 1 - tags: named, input
export interface OverridePullRequestApprovalRulesInput {
  pullRequestId: string;
  revisionId: string;
  overrideStatus: OverrideStatus;
}

// refs: 1 - tags: named, input
export interface PostCommentForComparedCommitInput {
  repositoryName: string;
  beforeCommitId?: string | null;
  afterCommitId: string;
  location?: Location | null;
  content: string;
  clientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PostCommentForPullRequestInput {
  pullRequestId: string;
  repositoryName: string;
  beforeCommitId: string;
  afterCommitId: string;
  location?: Location | null;
  content: string;
  clientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PostCommentReplyInput {
  inReplyTo: string;
  clientRequestToken?: string | null;
  content: string;
}

// refs: 1 - tags: named, input
export interface PutCommentReactionInput {
  commentId: string;
  reactionValue: string;
}

// refs: 1 - tags: named, input
export interface PutFileInput {
  repositoryName: string;
  branchName: string;
  fileContent: Uint8Array | string;
  filePath: string;
  fileMode?: FileModeTypeEnum | null;
  parentCommitId?: string | null;
  commitMessage?: string | null;
  name?: string | null;
  email?: string | null;
}

// refs: 1 - tags: named, input
export interface PutRepositoryTriggersInput {
  repositoryName: string;
  triggers: RepositoryTrigger[];
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  resourceArn: string;
  tags: { [key: string]: string };
}

// refs: 1 - tags: named, input
export interface TestRepositoryTriggersInput {
  repositoryName: string;
  triggers: RepositoryTrigger[];
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateApprovalRuleTemplateContentInput {
  approvalRuleTemplateName: string;
  newRuleContent: string;
  existingRuleContentSha256?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateApprovalRuleTemplateDescriptionInput {
  approvalRuleTemplateName: string;
  approvalRuleTemplateDescription: string;
}

// refs: 1 - tags: named, input
export interface UpdateApprovalRuleTemplateNameInput {
  oldApprovalRuleTemplateName: string;
  newApprovalRuleTemplateName: string;
}

// refs: 1 - tags: named, input
export interface UpdateCommentInput {
  commentId: string;
  content: string;
}

// refs: 1 - tags: named, input
export interface UpdateDefaultBranchInput {
  repositoryName: string;
  defaultBranchName: string;
}

// refs: 1 - tags: named, input
export interface UpdatePullRequestApprovalRuleContentInput {
  pullRequestId: string;
  approvalRuleName: string;
  existingRuleContentSha256?: string | null;
  newRuleContent: string;
}

// refs: 1 - tags: named, input
export interface UpdatePullRequestApprovalStateInput {
  pullRequestId: string;
  revisionId: string;
  approvalState: ApprovalState;
}

// refs: 1 - tags: named, input
export interface UpdatePullRequestDescriptionInput {
  pullRequestId: string;
  description: string;
}

// refs: 1 - tags: named, input
export interface UpdatePullRequestStatusInput {
  pullRequestId: string;
  pullRequestStatus: PullRequestStatusEnum;
}

// refs: 1 - tags: named, input
export interface UpdatePullRequestTitleInput {
  pullRequestId: string;
  title: string;
}

// refs: 1 - tags: named, input
export interface UpdateRepositoryDescriptionInput {
  repositoryName: string;
  repositoryDescription?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRepositoryNameInput {
  oldName: string;
  newName: string;
}

// refs: 1 - tags: named, output
export interface BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
  associatedRepositoryNames: string[];
  errors: BatchAssociateApprovalRuleTemplateWithRepositoriesError[];
}

// refs: 1 - tags: named, output
export interface BatchDescribeMergeConflictsOutput {
  conflicts: Conflict[];
  nextToken?: string | null;
  errors?: BatchDescribeMergeConflictsError[] | null;
  destinationCommitId: string;
  sourceCommitId: string;
  baseCommitId?: string | null;
}

// refs: 1 - tags: named, output
export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
  disassociatedRepositoryNames: string[];
  errors: BatchDisassociateApprovalRuleTemplateFromRepositoriesError[];
}

// refs: 1 - tags: named, output
export interface BatchGetCommitsOutput {
  commits?: Commit[] | null;
  errors?: BatchGetCommitsError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchGetRepositoriesOutput {
  repositories?: RepositoryMetadata[] | null;
  repositoriesNotFound?: string[] | null;
}

// refs: 1 - tags: named, output
export interface CreateApprovalRuleTemplateOutput {
  approvalRuleTemplate: ApprovalRuleTemplate;
}

// refs: 1 - tags: named, output
export interface CreateCommitOutput {
  commitId?: string | null;
  treeId?: string | null;
  filesAdded?: FileMetadata[] | null;
  filesUpdated?: FileMetadata[] | null;
  filesDeleted?: FileMetadata[] | null;
}

// refs: 1 - tags: named, output
export interface CreatePullRequestOutput {
  pullRequest: PullRequest;
}

// refs: 1 - tags: named, output
export interface CreatePullRequestApprovalRuleOutput {
  approvalRule: ApprovalRule;
}

// refs: 1 - tags: named, output
export interface CreateRepositoryOutput {
  repositoryMetadata?: RepositoryMetadata | null;
}

// refs: 1 - tags: named, output
export interface CreateUnreferencedMergeCommitOutput {
  commitId?: string | null;
  treeId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteApprovalRuleTemplateOutput {
  approvalRuleTemplateId: string;
}

// refs: 1 - tags: named, output
export interface DeleteBranchOutput {
  deletedBranch?: BranchInfo | null;
}

// refs: 1 - tags: named, output
export interface DeleteCommentContentOutput {
  comment?: Comment | null;
}

// refs: 1 - tags: named, output
export interface DeleteFileOutput {
  commitId: string;
  blobId: string;
  treeId: string;
  filePath: string;
}

// refs: 1 - tags: named, output
export interface DeletePullRequestApprovalRuleOutput {
  approvalRuleId: string;
}

// refs: 1 - tags: named, output
export interface DeleteRepositoryOutput {
  repositoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMergeConflictsOutput {
  conflictMetadata: ConflictMetadata;
  mergeHunks: MergeHunk[];
  nextToken?: string | null;
  destinationCommitId: string;
  sourceCommitId: string;
  baseCommitId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribePullRequestEventsOutput {
  pullRequestEvents: PullRequestEvent[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface EvaluatePullRequestApprovalRulesOutput {
  evaluation: Evaluation;
}

// refs: 1 - tags: named, output
export interface GetApprovalRuleTemplateOutput {
  approvalRuleTemplate: ApprovalRuleTemplate;
}

// refs: 1 - tags: named, output
export interface GetBlobOutput {
  content: Uint8Array | string;
}

// refs: 1 - tags: named, output
export interface GetBranchOutput {
  branch?: BranchInfo | null;
}

// refs: 1 - tags: named, output
export interface GetCommentOutput {
  comment?: Comment | null;
}

// refs: 1 - tags: named, output
export interface GetCommentReactionsOutput {
  reactionsForComment: ReactionForComment[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCommentsForComparedCommitOutput {
  commentsForComparedCommitData?: CommentsForComparedCommit[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCommentsForPullRequestOutput {
  commentsForPullRequestData?: CommentsForPullRequest[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCommitOutput {
  commit: Commit;
}

// refs: 1 - tags: named, output
export interface GetDifferencesOutput {
  differences?: Difference[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetFileOutput {
  commitId: string;
  blobId: string;
  filePath: string;
  fileMode: FileModeTypeEnum;
  fileSize: number;
  fileContent: Uint8Array | string;
}

// refs: 1 - tags: named, output
export interface GetFolderOutput {
  commitId: string;
  folderPath: string;
  treeId?: string | null;
  subFolders?: Folder[] | null;
  files?: File[] | null;
  symbolicLinks?: SymbolicLink[] | null;
  subModules?: SubModule[] | null;
}

// refs: 1 - tags: named, output
export interface GetMergeCommitOutput {
  sourceCommitId?: string | null;
  destinationCommitId?: string | null;
  baseCommitId?: string | null;
  mergedCommitId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetMergeConflictsOutput {
  mergeable: boolean;
  destinationCommitId: string;
  sourceCommitId: string;
  baseCommitId?: string | null;
  conflictMetadataList: ConflictMetadata[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetMergeOptionsOutput {
  mergeOptions: MergeOptionTypeEnum[];
  sourceCommitId: string;
  destinationCommitId: string;
  baseCommitId: string;
}

// refs: 1 - tags: named, output
export interface GetPullRequestOutput {
  pullRequest: PullRequest;
}

// refs: 1 - tags: named, output
export interface GetPullRequestApprovalStatesOutput {
  approvals?: Approval[] | null;
}

// refs: 1 - tags: named, output
export interface GetPullRequestOverrideStateOutput {
  overridden?: boolean | null;
  overrider?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRepositoryOutput {
  repositoryMetadata?: RepositoryMetadata | null;
}

// refs: 1 - tags: named, output
export interface GetRepositoryTriggersOutput {
  configurationId?: string | null;
  triggers?: RepositoryTrigger[] | null;
}

// refs: 1 - tags: named, output
export interface ListApprovalRuleTemplatesOutput {
  approvalRuleTemplateNames?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssociatedApprovalRuleTemplatesForRepositoryOutput {
  approvalRuleTemplateNames?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBranchesOutput {
  branches?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPullRequestsOutput {
  pullRequestIds: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRepositoriesOutput {
  repositories?: RepositoryNameIdPair[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRepositoriesForApprovalRuleTemplateOutput {
  repositoryNames?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceOutput {
  tags?: { [key: string]: string } | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface MergeBranchesByFastForwardOutput {
  commitId?: string | null;
  treeId?: string | null;
}

// refs: 1 - tags: named, output
export interface MergeBranchesBySquashOutput {
  commitId?: string | null;
  treeId?: string | null;
}

// refs: 1 - tags: named, output
export interface MergeBranchesByThreeWayOutput {
  commitId?: string | null;
  treeId?: string | null;
}

// refs: 1 - tags: named, output
export interface MergePullRequestByFastForwardOutput {
  pullRequest?: PullRequest | null;
}

// refs: 1 - tags: named, output
export interface MergePullRequestBySquashOutput {
  pullRequest?: PullRequest | null;
}

// refs: 1 - tags: named, output
export interface MergePullRequestByThreeWayOutput {
  pullRequest?: PullRequest | null;
}

// refs: 1 - tags: named, output
export interface PostCommentForComparedCommitOutput {
  repositoryName?: string | null;
  beforeCommitId?: string | null;
  afterCommitId?: string | null;
  beforeBlobId?: string | null;
  afterBlobId?: string | null;
  location?: Location | null;
  comment?: Comment | null;
}

// refs: 1 - tags: named, output
export interface PostCommentForPullRequestOutput {
  repositoryName?: string | null;
  pullRequestId?: string | null;
  beforeCommitId?: string | null;
  afterCommitId?: string | null;
  beforeBlobId?: string | null;
  afterBlobId?: string | null;
  location?: Location | null;
  comment?: Comment | null;
}

// refs: 1 - tags: named, output
export interface PostCommentReplyOutput {
  comment?: Comment | null;
}

// refs: 1 - tags: named, output
export interface PutFileOutput {
  commitId: string;
  blobId: string;
  treeId: string;
}

// refs: 1 - tags: named, output
export interface PutRepositoryTriggersOutput {
  configurationId?: string | null;
}

// refs: 1 - tags: named, output
export interface TestRepositoryTriggersOutput {
  successfulExecutions?: string[] | null;
  failedExecutions?: RepositoryTriggerExecutionFailure[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateApprovalRuleTemplateContentOutput {
  approvalRuleTemplate: ApprovalRuleTemplate;
}

// refs: 1 - tags: named, output
export interface UpdateApprovalRuleTemplateDescriptionOutput {
  approvalRuleTemplate: ApprovalRuleTemplate;
}

// refs: 1 - tags: named, output
export interface UpdateApprovalRuleTemplateNameOutput {
  approvalRuleTemplate: ApprovalRuleTemplate;
}

// refs: 1 - tags: named, output
export interface UpdateCommentOutput {
  comment?: Comment | null;
}

// refs: 1 - tags: named, output
export interface UpdatePullRequestApprovalRuleContentOutput {
  approvalRule: ApprovalRule;
}

// refs: 1 - tags: named, output
export interface UpdatePullRequestDescriptionOutput {
  pullRequest: PullRequest;
}

// refs: 1 - tags: named, output
export interface UpdatePullRequestStatusOutput {
  pullRequest: PullRequest;
}

// refs: 1 - tags: named, output
export interface UpdatePullRequestTitleOutput {
  pullRequest: PullRequest;
}

// refs: 14 - tags: input, named, enum, output
export type MergeOptionTypeEnum =
| "FAST_FORWARD_MERGE"
| "SQUASH_MERGE"
| "THREE_WAY_MERGE"
;

function toMergeOptionTypeEnum(root: JSONValue): MergeOptionTypeEnum | null {
  return ( false
    || root == "FAST_FORWARD_MERGE"
    || root == "SQUASH_MERGE"
    || root == "THREE_WAY_MERGE"
  ) ? root : null;
}

// refs: 10 - tags: input, named, enum
export type ConflictDetailLevelTypeEnum =
| "FILE_LEVEL"
| "LINE_LEVEL"
;


// refs: 10 - tags: input, named, enum
export type ConflictResolutionStrategyTypeEnum =
| "NONE"
| "ACCEPT_SOURCE"
| "ACCEPT_DESTINATION"
| "AUTOMERGE"
;


// refs: 1 - tags: input, named, interface
export interface PutFileEntry {
  filePath: string;
  fileMode?: FileModeTypeEnum | null;
  fileContent?: Uint8Array | string | null;
  sourceFile?: SourceFileSpecifier | null;
}
function fromPutFileEntry(input?: PutFileEntry | null): JSONValue {
  if (!input) return input;
  return {...input,
    fileContent: prt.serializeBlob(input["fileContent"]),
    sourceFile: fromSourceFileSpecifier(input["sourceFile"]),
  }
}

// refs: 28 - tags: input, named, enum, output
export type FileModeTypeEnum =
| "EXECUTABLE"
| "NORMAL"
| "SYMLINK"
;

function toFileModeTypeEnum(root: JSONValue): FileModeTypeEnum | null {
  return ( false
    || root == "EXECUTABLE"
    || root == "NORMAL"
    || root == "SYMLINK"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface SourceFileSpecifier {
  filePath: string;
  isMove?: boolean | null;
}
function fromSourceFileSpecifier(input?: SourceFileSpecifier | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 6 - tags: input, named, interface
export interface DeleteFileEntry {
  filePath: string;
}
function fromDeleteFileEntry(input?: DeleteFileEntry | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 6 - tags: input, named, interface
export interface SetFileModeEntry {
  filePath: string;
  fileMode: FileModeTypeEnum;
}
function fromSetFileModeEntry(input?: SetFileModeEntry | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface Target {
  repositoryName: string;
  sourceReference: string;
  destinationReference?: string | null;
}
function fromTarget(input?: Target | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 5 - tags: input, named, interface
export interface ConflictResolution {
  replaceContents?: ReplaceContentEntry[] | null;
  deleteFiles?: DeleteFileEntry[] | null;
  setFileModes?: SetFileModeEntry[] | null;
}
function fromConflictResolution(input?: ConflictResolution | null): JSONValue {
  if (!input) return input;
  return {...input,
    replaceContents: input["replaceContents"]?.map(x => fromReplaceContentEntry(x)),
    deleteFiles: input["deleteFiles"]?.map(x => fromDeleteFileEntry(x)),
    setFileModes: input["setFileModes"]?.map(x => fromSetFileModeEntry(x)),
  }
}

// refs: 5 - tags: input, named, interface
export interface ReplaceContentEntry {
  filePath: string;
  replacementType: ReplacementTypeEnum;
  content?: Uint8Array | string | null;
  fileMode?: FileModeTypeEnum | null;
}
function fromReplaceContentEntry(input?: ReplaceContentEntry | null): JSONValue {
  if (!input) return input;
  return {...input,
    content: prt.serializeBlob(input["content"]),
  }
}

// refs: 5 - tags: input, named, enum
export type ReplacementTypeEnum =
| "KEEP_BASE"
| "KEEP_SOURCE"
| "KEEP_DESTINATION"
| "USE_NEW_CONTENT"
;


// refs: 2 - tags: input, named, enum, output
export type PullRequestEventType =
| "PULL_REQUEST_CREATED"
| "PULL_REQUEST_STATUS_CHANGED"
| "PULL_REQUEST_SOURCE_REFERENCE_UPDATED"
| "PULL_REQUEST_MERGE_STATE_CHANGED"
| "PULL_REQUEST_APPROVAL_RULE_CREATED"
| "PULL_REQUEST_APPROVAL_RULE_UPDATED"
| "PULL_REQUEST_APPROVAL_RULE_DELETED"
| "PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN"
| "PULL_REQUEST_APPROVAL_STATE_CHANGED"
;

function toPullRequestEventType(root: JSONValue): PullRequestEventType | null {
  return ( false
    || root == "PULL_REQUEST_CREATED"
    || root == "PULL_REQUEST_STATUS_CHANGED"
    || root == "PULL_REQUEST_SOURCE_REFERENCE_UPDATED"
    || root == "PULL_REQUEST_MERGE_STATE_CHANGED"
    || root == "PULL_REQUEST_APPROVAL_RULE_CREATED"
    || root == "PULL_REQUEST_APPROVAL_RULE_UPDATED"
    || root == "PULL_REQUEST_APPROVAL_RULE_DELETED"
    || root == "PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN"
    || root == "PULL_REQUEST_APPROVAL_STATE_CHANGED"
  ) ? root : null;
}

// refs: 11 - tags: input, named, enum, output
export type PullRequestStatusEnum =
| "OPEN"
| "CLOSED"
;

function toPullRequestStatusEnum(root: JSONValue): PullRequestStatusEnum | null {
  return ( false
    || root == "OPEN"
    || root == "CLOSED"
  ) ? root : null;
}

// refs: 1 - tags: input, named, enum
export type SortByEnum =
| "repositoryName"
| "lastModifiedDate"
;


// refs: 1 - tags: input, named, enum
export type OrderEnum =
| "ascending"
| "descending"
;


// refs: 2 - tags: input, named, enum, output
export type OverrideStatus =
| "OVERRIDE"
| "REVOKE"
;

function toOverrideStatus(root: JSONValue): OverrideStatus | null {
  return ( false
    || root == "OVERRIDE"
    || root == "REVOKE"
  ) ? root : null;
}

// refs: 6 - tags: input, named, interface, output
export interface Location {
  filePath?: string | null;
  filePosition?: number | null;
  relativeFileVersion?: RelativeFileVersionEnum | null;
}
function fromLocation(input?: Location | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toLocation(root: JSONValue): Location {
  return prt.readObj({
    required: {},
    optional: {
      "filePath": "s",
      "filePosition": "n",
      "relativeFileVersion": toRelativeFileVersionEnum,
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type RelativeFileVersionEnum =
| "BEFORE"
| "AFTER"
;

function toRelativeFileVersionEnum(root: JSONValue): RelativeFileVersionEnum | null {
  return ( false
    || root == "BEFORE"
    || root == "AFTER"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface RepositoryTrigger {
  name: string;
  destinationArn: string;
  customData?: string | null;
  branches?: string[] | null;
  events: RepositoryTriggerEventEnum[];
}
function fromRepositoryTrigger(input?: RepositoryTrigger | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRepositoryTrigger(root: JSONValue): RepositoryTrigger {
  return prt.readObj({
    required: {
      "name": "s",
      "destinationArn": "s",
      "events": [toRepositoryTriggerEventEnum],
    },
    optional: {
      "customData": "s",
      "branches": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type RepositoryTriggerEventEnum =
| "all"
| "updateReference"
| "createReference"
| "deleteReference"
;

function toRepositoryTriggerEventEnum(root: JSONValue): RepositoryTriggerEventEnum | null {
  return ( false
    || root == "all"
    || root == "updateReference"
    || root == "createReference"
    || root == "deleteReference"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type ApprovalState =
| "APPROVE"
| "REVOKE"
;

function toApprovalState(root: JSONValue): ApprovalState | null {
  return ( false
    || root == "APPROVE"
    || root == "REVOKE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface BatchAssociateApprovalRuleTemplateWithRepositoriesError {
  repositoryName?: string | null;
  errorCode?: string | null;
  errorMessage?: string | null;
}
function toBatchAssociateApprovalRuleTemplateWithRepositoriesError(root: JSONValue): BatchAssociateApprovalRuleTemplateWithRepositoriesError {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Conflict {
  conflictMetadata?: ConflictMetadata | null;
  mergeHunks?: MergeHunk[] | null;
}
function toConflict(root: JSONValue): Conflict {
  return prt.readObj({
    required: {},
    optional: {
      "conflictMetadata": toConflictMetadata,
      "mergeHunks": [toMergeHunk],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ConflictMetadata {
  filePath?: string | null;
  fileSizes?: FileSizes | null;
  fileModes?: FileModes | null;
  objectTypes?: ObjectTypes | null;
  numberOfConflicts?: number | null;
  isBinaryFile?: IsBinaryFile | null;
  contentConflict?: boolean | null;
  fileModeConflict?: boolean | null;
  objectTypeConflict?: boolean | null;
  mergeOperations?: MergeOperations | null;
}
function toConflictMetadata(root: JSONValue): ConflictMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "filePath": "s",
      "fileSizes": toFileSizes,
      "fileModes": toFileModes,
      "objectTypes": toObjectTypes,
      "numberOfConflicts": "n",
      "isBinaryFile": toIsBinaryFile,
      "contentConflict": "b",
      "fileModeConflict": "b",
      "objectTypeConflict": "b",
      "mergeOperations": toMergeOperations,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface FileSizes {
  source?: number | null;
  destination?: number | null;
  base?: number | null;
}
function toFileSizes(root: JSONValue): FileSizes {
  return prt.readObj({
    required: {},
    optional: {
      "source": "n",
      "destination": "n",
      "base": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface FileModes {
  source?: FileModeTypeEnum | null;
  destination?: FileModeTypeEnum | null;
  base?: FileModeTypeEnum | null;
}
function toFileModes(root: JSONValue): FileModes {
  return prt.readObj({
    required: {},
    optional: {
      "source": toFileModeTypeEnum,
      "destination": toFileModeTypeEnum,
      "base": toFileModeTypeEnum,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ObjectTypes {
  source?: ObjectTypeEnum | null;
  destination?: ObjectTypeEnum | null;
  base?: ObjectTypeEnum | null;
}
function toObjectTypes(root: JSONValue): ObjectTypes {
  return prt.readObj({
    required: {},
    optional: {
      "source": toObjectTypeEnum,
      "destination": toObjectTypeEnum,
      "base": toObjectTypeEnum,
    },
  }, root);
}

// refs: 9 - tags: output, named, enum
export type ObjectTypeEnum =
| "FILE"
| "DIRECTORY"
| "GIT_LINK"
| "SYMBOLIC_LINK"
;
function toObjectTypeEnum(root: JSONValue): ObjectTypeEnum | null {
  return ( false
    || root == "FILE"
    || root == "DIRECTORY"
    || root == "GIT_LINK"
    || root == "SYMBOLIC_LINK"
  ) ? root : null;
}

// refs: 3 - tags: output, named, interface
export interface IsBinaryFile {
  source?: boolean | null;
  destination?: boolean | null;
  base?: boolean | null;
}
function toIsBinaryFile(root: JSONValue): IsBinaryFile {
  return prt.readObj({
    required: {},
    optional: {
      "source": "b",
      "destination": "b",
      "base": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface MergeOperations {
  source?: ChangeTypeEnum | null;
  destination?: ChangeTypeEnum | null;
}
function toMergeOperations(root: JSONValue): MergeOperations {
  return prt.readObj({
    required: {},
    optional: {
      "source": toChangeTypeEnum,
      "destination": toChangeTypeEnum,
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type ChangeTypeEnum =
| "A"
| "M"
| "D"
;
function toChangeTypeEnum(root: JSONValue): ChangeTypeEnum | null {
  return ( false
    || root == "A"
    || root == "M"
    || root == "D"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface MergeHunk {
  isConflict?: boolean | null;
  source?: MergeHunkDetail | null;
  destination?: MergeHunkDetail | null;
  base?: MergeHunkDetail | null;
}
function toMergeHunk(root: JSONValue): MergeHunk {
  return prt.readObj({
    required: {},
    optional: {
      "isConflict": "b",
      "source": toMergeHunkDetail,
      "destination": toMergeHunkDetail,
      "base": toMergeHunkDetail,
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface MergeHunkDetail {
  startLine?: number | null;
  endLine?: number | null;
  hunkContent?: string | null;
}
function toMergeHunkDetail(root: JSONValue): MergeHunkDetail {
  return prt.readObj({
    required: {},
    optional: {
      "startLine": "n",
      "endLine": "n",
      "hunkContent": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchDescribeMergeConflictsError {
  filePath: string;
  exceptionName: string;
  message: string;
}
function toBatchDescribeMergeConflictsError(root: JSONValue): BatchDescribeMergeConflictsError {
  return prt.readObj({
    required: {
      "filePath": "s",
      "exceptionName": "s",
      "message": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesError {
  repositoryName?: string | null;
  errorCode?: string | null;
  errorMessage?: string | null;
}
function toBatchDisassociateApprovalRuleTemplateFromRepositoriesError(root: JSONValue): BatchDisassociateApprovalRuleTemplateFromRepositoriesError {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Commit {
  commitId?: string | null;
  treeId?: string | null;
  parents?: string[] | null;
  message?: string | null;
  author?: UserInfo | null;
  committer?: UserInfo | null;
  additionalData?: string | null;
}
function toCommit(root: JSONValue): Commit {
  return prt.readObj({
    required: {},
    optional: {
      "commitId": "s",
      "treeId": "s",
      "parents": ["s"],
      "message": "s",
      "author": toUserInfo,
      "committer": toUserInfo,
      "additionalData": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface UserInfo {
  name?: string | null;
  email?: string | null;
  date?: string | null;
}
function toUserInfo(root: JSONValue): UserInfo {
  return prt.readObj({
    required: {},
    optional: {
      "name": "s",
      "email": "s",
      "date": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchGetCommitsError {
  commitId?: string | null;
  errorCode?: string | null;
  errorMessage?: string | null;
}
function toBatchGetCommitsError(root: JSONValue): BatchGetCommitsError {
  return prt.readObj({
    required: {},
    optional: {
      "commitId": "s",
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface RepositoryMetadata {
  accountId?: string | null;
  repositoryId?: string | null;
  repositoryName?: string | null;
  repositoryDescription?: string | null;
  defaultBranch?: string | null;
  lastModifiedDate?: Date | number | null;
  creationDate?: Date | number | null;
  cloneUrlHttp?: string | null;
  cloneUrlSsh?: string | null;
  Arn?: string | null;
}
function toRepositoryMetadata(root: JSONValue): RepositoryMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "repositoryId": "s",
      "repositoryName": "s",
      "repositoryDescription": "s",
      "defaultBranch": "s",
      "lastModifiedDate": "d",
      "creationDate": "d",
      "cloneUrlHttp": "s",
      "cloneUrlSsh": "s",
      "Arn": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface ApprovalRuleTemplate {
  approvalRuleTemplateId?: string | null;
  approvalRuleTemplateName?: string | null;
  approvalRuleTemplateDescription?: string | null;
  approvalRuleTemplateContent?: string | null;
  ruleContentSha256?: string | null;
  lastModifiedDate?: Date | number | null;
  creationDate?: Date | number | null;
  lastModifiedUser?: string | null;
}
function toApprovalRuleTemplate(root: JSONValue): ApprovalRuleTemplate {
  return prt.readObj({
    required: {},
    optional: {
      "approvalRuleTemplateId": "s",
      "approvalRuleTemplateName": "s",
      "approvalRuleTemplateDescription": "s",
      "approvalRuleTemplateContent": "s",
      "ruleContentSha256": "s",
      "lastModifiedDate": "d",
      "creationDate": "d",
      "lastModifiedUser": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface FileMetadata {
  absolutePath?: string | null;
  blobId?: string | null;
  fileMode?: FileModeTypeEnum | null;
}
function toFileMetadata(root: JSONValue): FileMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "absolutePath": "s",
      "blobId": "s",
      "fileMode": toFileModeTypeEnum,
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface PullRequest {
  pullRequestId?: string | null;
  title?: string | null;
  description?: string | null;
  lastActivityDate?: Date | number | null;
  creationDate?: Date | number | null;
  pullRequestStatus?: PullRequestStatusEnum | null;
  authorArn?: string | null;
  pullRequestTargets?: PullRequestTarget[] | null;
  clientRequestToken?: string | null;
  revisionId?: string | null;
  approvalRules?: ApprovalRule[] | null;
}
function toPullRequest(root: JSONValue): PullRequest {
  return prt.readObj({
    required: {},
    optional: {
      "pullRequestId": "s",
      "title": "s",
      "description": "s",
      "lastActivityDate": "d",
      "creationDate": "d",
      "pullRequestStatus": toPullRequestStatusEnum,
      "authorArn": "s",
      "pullRequestTargets": [toPullRequestTarget],
      "clientRequestToken": "s",
      "revisionId": "s",
      "approvalRules": [toApprovalRule],
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface PullRequestTarget {
  repositoryName?: string | null;
  sourceReference?: string | null;
  destinationReference?: string | null;
  destinationCommit?: string | null;
  sourceCommit?: string | null;
  mergeBase?: string | null;
  mergeMetadata?: MergeMetadata | null;
}
function toPullRequestTarget(root: JSONValue): PullRequestTarget {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "sourceReference": "s",
      "destinationReference": "s",
      "destinationCommit": "s",
      "sourceCommit": "s",
      "mergeBase": "s",
      "mergeMetadata": toMergeMetadata,
    },
  }, root);
}

// refs: 9 - tags: output, named, interface
export interface MergeMetadata {
  isMerged?: boolean | null;
  mergedBy?: string | null;
  mergeCommitId?: string | null;
  mergeOption?: MergeOptionTypeEnum | null;
}
function toMergeMetadata(root: JSONValue): MergeMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "isMerged": "b",
      "mergedBy": "s",
      "mergeCommitId": "s",
      "mergeOption": toMergeOptionTypeEnum,
    },
  }, root);
}

// refs: 10 - tags: output, named, interface
export interface ApprovalRule {
  approvalRuleId?: string | null;
  approvalRuleName?: string | null;
  approvalRuleContent?: string | null;
  ruleContentSha256?: string | null;
  lastModifiedDate?: Date | number | null;
  creationDate?: Date | number | null;
  lastModifiedUser?: string | null;
  originApprovalRuleTemplate?: OriginApprovalRuleTemplate | null;
}
function toApprovalRule(root: JSONValue): ApprovalRule {
  return prt.readObj({
    required: {},
    optional: {
      "approvalRuleId": "s",
      "approvalRuleName": "s",
      "approvalRuleContent": "s",
      "ruleContentSha256": "s",
      "lastModifiedDate": "d",
      "creationDate": "d",
      "lastModifiedUser": "s",
      "originApprovalRuleTemplate": toOriginApprovalRuleTemplate,
    },
  }, root);
}

// refs: 10 - tags: output, named, interface
export interface OriginApprovalRuleTemplate {
  approvalRuleTemplateId?: string | null;
  approvalRuleTemplateName?: string | null;
}
function toOriginApprovalRuleTemplate(root: JSONValue): OriginApprovalRuleTemplate {
  return prt.readObj({
    required: {},
    optional: {
      "approvalRuleTemplateId": "s",
      "approvalRuleTemplateName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BranchInfo {
  branchName?: string | null;
  commitId?: string | null;
}
function toBranchInfo(root: JSONValue): BranchInfo {
  return prt.readObj({
    required: {},
    optional: {
      "branchName": "s",
      "commitId": "s",
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface Comment {
  commentId?: string | null;
  content?: string | null;
  inReplyTo?: string | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  authorArn?: string | null;
  deleted?: boolean | null;
  clientRequestToken?: string | null;
  callerReactions?: string[] | null;
  reactionCounts?: { [key: string]: number } | null;
}
function toComment(root: JSONValue): Comment {
  return prt.readObj({
    required: {},
    optional: {
      "commentId": "s",
      "content": "s",
      "inReplyTo": "s",
      "creationDate": "d",
      "lastModifiedDate": "d",
      "authorArn": "s",
      "deleted": "b",
      "clientRequestToken": "s",
      "callerReactions": ["s"],
      "reactionCounts": x => prt.readMap(String, Number, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PullRequestEvent {
  pullRequestId?: string | null;
  eventDate?: Date | number | null;
  pullRequestEventType?: PullRequestEventType | null;
  actorArn?: string | null;
  pullRequestCreatedEventMetadata?: PullRequestCreatedEventMetadata | null;
  pullRequestStatusChangedEventMetadata?: PullRequestStatusChangedEventMetadata | null;
  pullRequestSourceReferenceUpdatedEventMetadata?: PullRequestSourceReferenceUpdatedEventMetadata | null;
  pullRequestMergedStateChangedEventMetadata?: PullRequestMergedStateChangedEventMetadata | null;
  approvalRuleEventMetadata?: ApprovalRuleEventMetadata | null;
  approvalStateChangedEventMetadata?: ApprovalStateChangedEventMetadata | null;
  approvalRuleOverriddenEventMetadata?: ApprovalRuleOverriddenEventMetadata | null;
}
function toPullRequestEvent(root: JSONValue): PullRequestEvent {
  return prt.readObj({
    required: {},
    optional: {
      "pullRequestId": "s",
      "eventDate": "d",
      "pullRequestEventType": toPullRequestEventType,
      "actorArn": "s",
      "pullRequestCreatedEventMetadata": toPullRequestCreatedEventMetadata,
      "pullRequestStatusChangedEventMetadata": toPullRequestStatusChangedEventMetadata,
      "pullRequestSourceReferenceUpdatedEventMetadata": toPullRequestSourceReferenceUpdatedEventMetadata,
      "pullRequestMergedStateChangedEventMetadata": toPullRequestMergedStateChangedEventMetadata,
      "approvalRuleEventMetadata": toApprovalRuleEventMetadata,
      "approvalStateChangedEventMetadata": toApprovalStateChangedEventMetadata,
      "approvalRuleOverriddenEventMetadata": toApprovalRuleOverriddenEventMetadata,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PullRequestCreatedEventMetadata {
  repositoryName?: string | null;
  sourceCommitId?: string | null;
  destinationCommitId?: string | null;
  mergeBase?: string | null;
}
function toPullRequestCreatedEventMetadata(root: JSONValue): PullRequestCreatedEventMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "sourceCommitId": "s",
      "destinationCommitId": "s",
      "mergeBase": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PullRequestStatusChangedEventMetadata {
  pullRequestStatus?: PullRequestStatusEnum | null;
}
function toPullRequestStatusChangedEventMetadata(root: JSONValue): PullRequestStatusChangedEventMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "pullRequestStatus": toPullRequestStatusEnum,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PullRequestSourceReferenceUpdatedEventMetadata {
  repositoryName?: string | null;
  beforeCommitId?: string | null;
  afterCommitId?: string | null;
  mergeBase?: string | null;
}
function toPullRequestSourceReferenceUpdatedEventMetadata(root: JSONValue): PullRequestSourceReferenceUpdatedEventMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "beforeCommitId": "s",
      "afterCommitId": "s",
      "mergeBase": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PullRequestMergedStateChangedEventMetadata {
  repositoryName?: string | null;
  destinationReference?: string | null;
  mergeMetadata?: MergeMetadata | null;
}
function toPullRequestMergedStateChangedEventMetadata(root: JSONValue): PullRequestMergedStateChangedEventMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "destinationReference": "s",
      "mergeMetadata": toMergeMetadata,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ApprovalRuleEventMetadata {
  approvalRuleName?: string | null;
  approvalRuleId?: string | null;
  approvalRuleContent?: string | null;
}
function toApprovalRuleEventMetadata(root: JSONValue): ApprovalRuleEventMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "approvalRuleName": "s",
      "approvalRuleId": "s",
      "approvalRuleContent": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ApprovalStateChangedEventMetadata {
  revisionId?: string | null;
  approvalStatus?: ApprovalState | null;
}
function toApprovalStateChangedEventMetadata(root: JSONValue): ApprovalStateChangedEventMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "revisionId": "s",
      "approvalStatus": toApprovalState,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ApprovalRuleOverriddenEventMetadata {
  revisionId?: string | null;
  overrideStatus?: OverrideStatus | null;
}
function toApprovalRuleOverriddenEventMetadata(root: JSONValue): ApprovalRuleOverriddenEventMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "revisionId": "s",
      "overrideStatus": toOverrideStatus,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Evaluation {
  approved?: boolean | null;
  overridden?: boolean | null;
  approvalRulesSatisfied?: string[] | null;
  approvalRulesNotSatisfied?: string[] | null;
}
function toEvaluation(root: JSONValue): Evaluation {
  return prt.readObj({
    required: {},
    optional: {
      "approved": "b",
      "overridden": "b",
      "approvalRulesSatisfied": ["s"],
      "approvalRulesNotSatisfied": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReactionForComment {
  reaction?: ReactionValueFormats | null;
  reactionUsers?: string[] | null;
  reactionsFromDeletedUsersCount?: number | null;
}
function toReactionForComment(root: JSONValue): ReactionForComment {
  return prt.readObj({
    required: {},
    optional: {
      "reaction": toReactionValueFormats,
      "reactionUsers": ["s"],
      "reactionsFromDeletedUsersCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReactionValueFormats {
  emoji?: string | null;
  shortCode?: string | null;
  unicode?: string | null;
}
function toReactionValueFormats(root: JSONValue): ReactionValueFormats {
  return prt.readObj({
    required: {},
    optional: {
      "emoji": "s",
      "shortCode": "s",
      "unicode": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CommentsForComparedCommit {
  repositoryName?: string | null;
  beforeCommitId?: string | null;
  afterCommitId?: string | null;
  beforeBlobId?: string | null;
  afterBlobId?: string | null;
  location?: Location | null;
  comments?: Comment[] | null;
}
function toCommentsForComparedCommit(root: JSONValue): CommentsForComparedCommit {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "beforeCommitId": "s",
      "afterCommitId": "s",
      "beforeBlobId": "s",
      "afterBlobId": "s",
      "location": toLocation,
      "comments": [toComment],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CommentsForPullRequest {
  pullRequestId?: string | null;
  repositoryName?: string | null;
  beforeCommitId?: string | null;
  afterCommitId?: string | null;
  beforeBlobId?: string | null;
  afterBlobId?: string | null;
  location?: Location | null;
  comments?: Comment[] | null;
}
function toCommentsForPullRequest(root: JSONValue): CommentsForPullRequest {
  return prt.readObj({
    required: {},
    optional: {
      "pullRequestId": "s",
      "repositoryName": "s",
      "beforeCommitId": "s",
      "afterCommitId": "s",
      "beforeBlobId": "s",
      "afterBlobId": "s",
      "location": toLocation,
      "comments": [toComment],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Difference {
  beforeBlob?: BlobMetadata | null;
  afterBlob?: BlobMetadata | null;
  changeType?: ChangeTypeEnum | null;
}
function toDifference(root: JSONValue): Difference {
  return prt.readObj({
    required: {},
    optional: {
      "beforeBlob": toBlobMetadata,
      "afterBlob": toBlobMetadata,
      "changeType": toChangeTypeEnum,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface BlobMetadata {
  blobId?: string | null;
  path?: string | null;
  mode?: string | null;
}
function toBlobMetadata(root: JSONValue): BlobMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "blobId": "s",
      "path": "s",
      "mode": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Folder {
  treeId?: string | null;
  absolutePath?: string | null;
  relativePath?: string | null;
}
function toFolder(root: JSONValue): Folder {
  return prt.readObj({
    required: {},
    optional: {
      "treeId": "s",
      "absolutePath": "s",
      "relativePath": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface File {
  blobId?: string | null;
  absolutePath?: string | null;
  relativePath?: string | null;
  fileMode?: FileModeTypeEnum | null;
}
function toFile(root: JSONValue): File {
  return prt.readObj({
    required: {},
    optional: {
      "blobId": "s",
      "absolutePath": "s",
      "relativePath": "s",
      "fileMode": toFileModeTypeEnum,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SymbolicLink {
  blobId?: string | null;
  absolutePath?: string | null;
  relativePath?: string | null;
  fileMode?: FileModeTypeEnum | null;
}
function toSymbolicLink(root: JSONValue): SymbolicLink {
  return prt.readObj({
    required: {},
    optional: {
      "blobId": "s",
      "absolutePath": "s",
      "relativePath": "s",
      "fileMode": toFileModeTypeEnum,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SubModule {
  commitId?: string | null;
  absolutePath?: string | null;
  relativePath?: string | null;
}
function toSubModule(root: JSONValue): SubModule {
  return prt.readObj({
    required: {},
    optional: {
      "commitId": "s",
      "absolutePath": "s",
      "relativePath": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Approval {
  userArn?: string | null;
  approvalState?: ApprovalState | null;
}
function toApproval(root: JSONValue): Approval {
  return prt.readObj({
    required: {},
    optional: {
      "userArn": "s",
      "approvalState": toApprovalState,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RepositoryNameIdPair {
  repositoryName?: string | null;
  repositoryId?: string | null;
}
function toRepositoryNameIdPair(root: JSONValue): RepositoryNameIdPair {
  return prt.readObj({
    required: {},
    optional: {
      "repositoryName": "s",
      "repositoryId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RepositoryTriggerExecutionFailure {
  trigger?: string | null;
  failureMessage?: string | null;
}
function toRepositoryTriggerExecutionFailure(root: JSONValue): RepositoryTriggerExecutionFailure {
  return prt.readObj({
    required: {},
    optional: {
      "trigger": "s",
      "failureMessage": "s",
    },
  }, root);
}
