// Autogenerated API client for: Amazon Personalize Events

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class PersonalizeEvents {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(PersonalizeEvents.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-03-22",
    "endpointPrefix": "personalize-events",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Personalize Events",
    "serviceId": "Personalize Events",
    "signatureVersion": "v4",
    "signingName": "personalize",
    "uid": "personalize-events-2018-03-22"
  };

  async putEvents(
    {abortSignal, ...params}: RequestConfig & PutEventsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      trackingId: params["trackingId"],
      userId: params["userId"],
      sessionId: params["sessionId"],
      eventList: params["eventList"]?.map(x => fromEvent(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEvents",
      requestUri: "/events",
    });
  }

  async putItems(
    {abortSignal, ...params}: RequestConfig & PutItemsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      datasetArn: params["datasetArn"],
      items: params["items"]?.map(x => fromItem(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutItems",
      requestUri: "/items",
    });
  }

  async putUsers(
    {abortSignal, ...params}: RequestConfig & PutUsersRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      datasetArn: params["datasetArn"],
      users: params["users"]?.map(x => fromUser(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutUsers",
      requestUri: "/users",
    });
  }

}

// refs: 1 - tags: named, input
export interface PutEventsRequest {
  trackingId: string;
  userId?: string | null;
  sessionId: string;
  eventList: Event[];
}

// refs: 1 - tags: named, input
export interface PutItemsRequest {
  datasetArn: string;
  items: Item[];
}

// refs: 1 - tags: named, input
export interface PutUsersRequest {
  datasetArn: string;
  users: User[];
}

// refs: 1 - tags: input, named, interface
export interface Event {
  eventId?: string | null;
  eventType: string;
  eventValue?: number | null;
  itemId?: string | null;
  properties?: jsonP.JSONValue | null;
  sentAt: Date | number;
  recommendationId?: string | null;
  impression?: string[] | null;
}
function fromEvent(input?: Event | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventId: input["eventId"],
    eventType: input["eventType"],
    eventValue: input["eventValue"],
    itemId: input["itemId"],
    properties: jsonP.serializeJsonValue(input["properties"]),
    sentAt: jsonP.serializeDate_unixTimestamp(input["sentAt"]),
    recommendationId: input["recommendationId"],
    impression: input["impression"],
  }
}

// refs: 1 - tags: input, named, interface
export interface Item {
  itemId: string;
  properties?: jsonP.JSONValue | null;
}
function fromItem(input?: Item | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    itemId: input["itemId"],
    properties: jsonP.serializeJsonValue(input["properties"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface User {
  userId: string;
  properties?: jsonP.JSONValue | null;
}
function fromUser(input?: User | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    userId: input["userId"],
    properties: jsonP.serializeJsonValue(input["properties"]),
  }
}
