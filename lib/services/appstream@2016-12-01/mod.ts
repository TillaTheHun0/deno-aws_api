// Autogenerated API client for: Amazon AppStream

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class AppStream {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AppStream.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-12-01",
    "endpointPrefix": "appstream2",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon AppStream",
    "serviceId": "AppStream",
    "signatureVersion": "v4",
    "signingName": "appstream",
    "targetPrefix": "PhotonAdminProxyService",
    "uid": "appstream-2016-12-01"
  };

  async associateFleet(
    {abortSignal, ...params}: RequestConfig & AssociateFleetRequest,
  ): Promise<AssociateFleetResult> {
    const body: jsonP.JSONObject = params ? {
      FleetName: params["FleetName"],
      StackName: params["StackName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchAssociateUserStack(
    {abortSignal, ...params}: RequestConfig & BatchAssociateUserStackRequest,
  ): Promise<BatchAssociateUserStackResult> {
    const body: jsonP.JSONObject = params ? {
      UserStackAssociations: params["UserStackAssociations"]?.map(x => fromUserStackAssociation(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateUserStack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toUserStackAssociationError],
      },
    }, await resp.json());
  }

  async batchDisassociateUserStack(
    {abortSignal, ...params}: RequestConfig & BatchDisassociateUserStackRequest,
  ): Promise<BatchDisassociateUserStackResult> {
    const body: jsonP.JSONObject = params ? {
      UserStackAssociations: params["UserStackAssociations"]?.map(x => fromUserStackAssociation(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateUserStack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toUserStackAssociationError],
      },
    }, await resp.json());
  }

  async copyImage(
    {abortSignal, ...params}: RequestConfig & CopyImageRequest,
  ): Promise<CopyImageResponse> {
    const body: jsonP.JSONObject = params ? {
      SourceImageName: params["SourceImageName"],
      DestinationImageName: params["DestinationImageName"],
      DestinationRegion: params["DestinationRegion"],
      DestinationImageDescription: params["DestinationImageDescription"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DestinationImageName": "s",
      },
    }, await resp.json());
  }

  async createDirectoryConfig(
    {abortSignal, ...params}: RequestConfig & CreateDirectoryConfigRequest,
  ): Promise<CreateDirectoryConfigResult> {
    const body: jsonP.JSONObject = params ? {
      DirectoryName: params["DirectoryName"],
      OrganizationalUnitDistinguishedNames: params["OrganizationalUnitDistinguishedNames"],
      ServiceAccountCredentials: fromServiceAccountCredentials(params["ServiceAccountCredentials"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDirectoryConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DirectoryConfig": toDirectoryConfig,
      },
    }, await resp.json());
  }

  async createFleet(
    {abortSignal, ...params}: RequestConfig & CreateFleetRequest,
  ): Promise<CreateFleetResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      ImageName: params["ImageName"],
      ImageArn: params["ImageArn"],
      InstanceType: params["InstanceType"],
      FleetType: params["FleetType"],
      ComputeCapacity: fromComputeCapacity(params["ComputeCapacity"]),
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
      MaxUserDurationInSeconds: params["MaxUserDurationInSeconds"],
      DisconnectTimeoutInSeconds: params["DisconnectTimeoutInSeconds"],
      Description: params["Description"],
      DisplayName: params["DisplayName"],
      EnableDefaultInternetAccess: params["EnableDefaultInternetAccess"],
      DomainJoinInfo: fromDomainJoinInfo(params["DomainJoinInfo"]),
      Tags: params["Tags"],
      IdleDisconnectTimeoutInSeconds: params["IdleDisconnectTimeoutInSeconds"],
      IamRoleArn: params["IamRoleArn"],
      StreamView: params["StreamView"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Fleet": toFleet,
      },
    }, await resp.json());
  }

  async createImageBuilder(
    {abortSignal, ...params}: RequestConfig & CreateImageBuilderRequest,
  ): Promise<CreateImageBuilderResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      ImageName: params["ImageName"],
      ImageArn: params["ImageArn"],
      InstanceType: params["InstanceType"],
      Description: params["Description"],
      DisplayName: params["DisplayName"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
      IamRoleArn: params["IamRoleArn"],
      EnableDefaultInternetAccess: params["EnableDefaultInternetAccess"],
      DomainJoinInfo: fromDomainJoinInfo(params["DomainJoinInfo"]),
      AppstreamAgentVersion: params["AppstreamAgentVersion"],
      Tags: params["Tags"],
      AccessEndpoints: params["AccessEndpoints"]?.map(x => fromAccessEndpoint(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateImageBuilder",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageBuilder": toImageBuilder,
      },
    }, await resp.json());
  }

  async createImageBuilderStreamingURL(
    {abortSignal, ...params}: RequestConfig & CreateImageBuilderStreamingURLRequest,
  ): Promise<CreateImageBuilderStreamingURLResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Validity: params["Validity"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateImageBuilderStreamingURL",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StreamingURL": "s",
        "Expires": "d",
      },
    }, await resp.json());
  }

  async createStack(
    {abortSignal, ...params}: RequestConfig & CreateStackRequest,
  ): Promise<CreateStackResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      DisplayName: params["DisplayName"],
      StorageConnectors: params["StorageConnectors"]?.map(x => fromStorageConnector(x)),
      RedirectURL: params["RedirectURL"],
      FeedbackURL: params["FeedbackURL"],
      UserSettings: params["UserSettings"]?.map(x => fromUserSetting(x)),
      ApplicationSettings: fromApplicationSettings(params["ApplicationSettings"]),
      Tags: params["Tags"],
      AccessEndpoints: params["AccessEndpoints"]?.map(x => fromAccessEndpoint(x)),
      EmbedHostDomains: params["EmbedHostDomains"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateStack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Stack": toStack,
      },
    }, await resp.json());
  }

  async createStreamingURL(
    {abortSignal, ...params}: RequestConfig & CreateStreamingURLRequest,
  ): Promise<CreateStreamingURLResult> {
    const body: jsonP.JSONObject = params ? {
      StackName: params["StackName"],
      FleetName: params["FleetName"],
      UserId: params["UserId"],
      ApplicationId: params["ApplicationId"],
      Validity: params["Validity"],
      SessionContext: params["SessionContext"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateStreamingURL",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StreamingURL": "s",
        "Expires": "d",
      },
    }, await resp.json());
  }

  async createUsageReportSubscription(
    {abortSignal, ...params}: RequestConfig & CreateUsageReportSubscriptionRequest = {},
  ): Promise<CreateUsageReportSubscriptionResult> {
    const body: jsonP.JSONObject = params ? {
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUsageReportSubscription",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "S3BucketName": "s",
        "Schedule": (x: jsonP.JSONValue) => cmnP.readEnum<UsageReportSchedule>(x),
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & CreateUserRequest,
  ): Promise<CreateUserResult> {
    const body: jsonP.JSONObject = params ? {
      UserName: params["UserName"],
      MessageAction: params["MessageAction"],
      FirstName: params["FirstName"],
      LastName: params["LastName"],
      AuthenticationType: params["AuthenticationType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDirectoryConfig(
    {abortSignal, ...params}: RequestConfig & DeleteDirectoryConfigRequest,
  ): Promise<DeleteDirectoryConfigResult> {
    const body: jsonP.JSONObject = params ? {
      DirectoryName: params["DirectoryName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDirectoryConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteFleet(
    {abortSignal, ...params}: RequestConfig & DeleteFleetRequest,
  ): Promise<DeleteFleetResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteImage(
    {abortSignal, ...params}: RequestConfig & DeleteImageRequest,
  ): Promise<DeleteImageResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteImage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Image": toImage,
      },
    }, await resp.json());
  }

  async deleteImageBuilder(
    {abortSignal, ...params}: RequestConfig & DeleteImageBuilderRequest,
  ): Promise<DeleteImageBuilderResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteImageBuilder",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageBuilder": toImageBuilder,
      },
    }, await resp.json());
  }

  async deleteImagePermissions(
    {abortSignal, ...params}: RequestConfig & DeleteImagePermissionsRequest,
  ): Promise<DeleteImagePermissionsResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      SharedAccountId: params["SharedAccountId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteImagePermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteStack(
    {abortSignal, ...params}: RequestConfig & DeleteStackRequest,
  ): Promise<DeleteStackResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteStack",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUsageReportSubscription(
    {abortSignal, ...params}: RequestConfig & DeleteUsageReportSubscriptionRequest = {},
  ): Promise<DeleteUsageReportSubscriptionResult> {
    const body: jsonP.JSONObject = params ? {
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUsageReportSubscription",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<DeleteUserResult> {
    const body: jsonP.JSONObject = params ? {
      UserName: params["UserName"],
      AuthenticationType: params["AuthenticationType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeDirectoryConfigs(
    {abortSignal, ...params}: RequestConfig & DescribeDirectoryConfigsRequest = {},
  ): Promise<DescribeDirectoryConfigsResult> {
    const body: jsonP.JSONObject = params ? {
      DirectoryNames: params["DirectoryNames"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDirectoryConfigs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DirectoryConfigs": [toDirectoryConfig],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeFleets(
    {abortSignal, ...params}: RequestConfig & DescribeFleetsRequest = {},
  ): Promise<DescribeFleetsResult> {
    const body: jsonP.JSONObject = params ? {
      Names: params["Names"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFleets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Fleets": [toFleet],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeImageBuilders(
    {abortSignal, ...params}: RequestConfig & DescribeImageBuildersRequest = {},
  ): Promise<DescribeImageBuildersResult> {
    const body: jsonP.JSONObject = params ? {
      Names: params["Names"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeImageBuilders",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageBuilders": [toImageBuilder],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeImagePermissions(
    {abortSignal, ...params}: RequestConfig & DescribeImagePermissionsRequest,
  ): Promise<DescribeImagePermissionsResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      MaxResults: params["MaxResults"],
      SharedAwsAccountIds: params["SharedAwsAccountIds"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeImagePermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "SharedImagePermissionsList": [toSharedImagePermissions],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeImages(
    {abortSignal, ...params}: RequestConfig & DescribeImagesRequest = {},
  ): Promise<DescribeImagesResult> {
    const body: jsonP.JSONObject = params ? {
      Names: params["Names"],
      Arns: params["Arns"],
      Type: params["Type"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeImages",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Images": [toImage],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeSessions(
    {abortSignal, ...params}: RequestConfig & DescribeSessionsRequest,
  ): Promise<DescribeSessionsResult> {
    const body: jsonP.JSONObject = params ? {
      StackName: params["StackName"],
      FleetName: params["FleetName"],
      UserId: params["UserId"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
      AuthenticationType: params["AuthenticationType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSessions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Sessions": [toSession],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeStacks(
    {abortSignal, ...params}: RequestConfig & DescribeStacksRequest = {},
  ): Promise<DescribeStacksResult> {
    const body: jsonP.JSONObject = params ? {
      Names: params["Names"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeStacks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Stacks": [toStack],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeUsageReportSubscriptions(
    {abortSignal, ...params}: RequestConfig & DescribeUsageReportSubscriptionsRequest = {},
  ): Promise<DescribeUsageReportSubscriptionsResult> {
    const body: jsonP.JSONObject = params ? {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUsageReportSubscriptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UsageReportSubscriptions": [toUsageReportSubscription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeUserStackAssociations(
    {abortSignal, ...params}: RequestConfig & DescribeUserStackAssociationsRequest = {},
  ): Promise<DescribeUserStackAssociationsResult> {
    const body: jsonP.JSONObject = params ? {
      StackName: params["StackName"],
      UserName: params["UserName"],
      AuthenticationType: params["AuthenticationType"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUserStackAssociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserStackAssociations": [toUserStackAssociation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeUsers(
    {abortSignal, ...params}: RequestConfig & DescribeUsersRequest,
  ): Promise<DescribeUsersResult> {
    const body: jsonP.JSONObject = params ? {
      AuthenticationType: params["AuthenticationType"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUsers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Users": [toUser],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async disableUser(
    {abortSignal, ...params}: RequestConfig & DisableUserRequest,
  ): Promise<DisableUserResult> {
    const body: jsonP.JSONObject = params ? {
      UserName: params["UserName"],
      AuthenticationType: params["AuthenticationType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateFleet(
    {abortSignal, ...params}: RequestConfig & DisassociateFleetRequest,
  ): Promise<DisassociateFleetResult> {
    const body: jsonP.JSONObject = params ? {
      FleetName: params["FleetName"],
      StackName: params["StackName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableUser(
    {abortSignal, ...params}: RequestConfig & EnableUserRequest,
  ): Promise<EnableUserResult> {
    const body: jsonP.JSONObject = params ? {
      UserName: params["UserName"],
      AuthenticationType: params["AuthenticationType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableUser",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async expireSession(
    {abortSignal, ...params}: RequestConfig & ExpireSessionRequest,
  ): Promise<ExpireSessionResult> {
    const body: jsonP.JSONObject = params ? {
      SessionId: params["SessionId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExpireSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async listAssociatedFleets(
    {abortSignal, ...params}: RequestConfig & ListAssociatedFleetsRequest,
  ): Promise<ListAssociatedFleetsResult> {
    const body: jsonP.JSONObject = params ? {
      StackName: params["StackName"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssociatedFleets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Names": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAssociatedStacks(
    {abortSignal, ...params}: RequestConfig & ListAssociatedStacksRequest,
  ): Promise<ListAssociatedStacksResult> {
    const body: jsonP.JSONObject = params ? {
      FleetName: params["FleetName"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssociatedStacks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Names": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceArn: params["ResourceArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async startFleet(
    {abortSignal, ...params}: RequestConfig & StartFleetRequest,
  ): Promise<StartFleetResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startImageBuilder(
    {abortSignal, ...params}: RequestConfig & StartImageBuilderRequest,
  ): Promise<StartImageBuilderResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      AppstreamAgentVersion: params["AppstreamAgentVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartImageBuilder",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageBuilder": toImageBuilder,
      },
    }, await resp.json());
  }

  async stopFleet(
    {abortSignal, ...params}: RequestConfig & StopFleetRequest,
  ): Promise<StopFleetResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopImageBuilder(
    {abortSignal, ...params}: RequestConfig & StopImageBuilderRequest,
  ): Promise<StopImageBuilderResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopImageBuilder",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImageBuilder": toImageBuilder,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDirectoryConfig(
    {abortSignal, ...params}: RequestConfig & UpdateDirectoryConfigRequest,
  ): Promise<UpdateDirectoryConfigResult> {
    const body: jsonP.JSONObject = params ? {
      DirectoryName: params["DirectoryName"],
      OrganizationalUnitDistinguishedNames: params["OrganizationalUnitDistinguishedNames"],
      ServiceAccountCredentials: fromServiceAccountCredentials(params["ServiceAccountCredentials"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDirectoryConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DirectoryConfig": toDirectoryConfig,
      },
    }, await resp.json());
  }

  async updateFleet(
    {abortSignal, ...params}: RequestConfig & UpdateFleetRequest = {},
  ): Promise<UpdateFleetResult> {
    const body: jsonP.JSONObject = params ? {
      ImageName: params["ImageName"],
      ImageArn: params["ImageArn"],
      Name: params["Name"],
      InstanceType: params["InstanceType"],
      ComputeCapacity: fromComputeCapacity(params["ComputeCapacity"]),
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
      MaxUserDurationInSeconds: params["MaxUserDurationInSeconds"],
      DisconnectTimeoutInSeconds: params["DisconnectTimeoutInSeconds"],
      DeleteVpcConfig: params["DeleteVpcConfig"],
      Description: params["Description"],
      DisplayName: params["DisplayName"],
      EnableDefaultInternetAccess: params["EnableDefaultInternetAccess"],
      DomainJoinInfo: fromDomainJoinInfo(params["DomainJoinInfo"]),
      IdleDisconnectTimeoutInSeconds: params["IdleDisconnectTimeoutInSeconds"],
      AttributesToDelete: params["AttributesToDelete"],
      IamRoleArn: params["IamRoleArn"],
      StreamView: params["StreamView"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFleet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Fleet": toFleet,
      },
    }, await resp.json());
  }

  async updateImagePermissions(
    {abortSignal, ...params}: RequestConfig & UpdateImagePermissionsRequest,
  ): Promise<UpdateImagePermissionsResult> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      SharedAccountId: params["SharedAccountId"],
      ImagePermissions: fromImagePermissions(params["ImagePermissions"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateImagePermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateStack(
    {abortSignal, ...params}: RequestConfig & UpdateStackRequest,
  ): Promise<UpdateStackResult> {
    const body: jsonP.JSONObject = params ? {
      DisplayName: params["DisplayName"],
      Description: params["Description"],
      Name: params["Name"],
      StorageConnectors: params["StorageConnectors"]?.map(x => fromStorageConnector(x)),
      DeleteStorageConnectors: params["DeleteStorageConnectors"],
      RedirectURL: params["RedirectURL"],
      FeedbackURL: params["FeedbackURL"],
      AttributesToDelete: params["AttributesToDelete"],
      UserSettings: params["UserSettings"]?.map(x => fromUserSetting(x)),
      ApplicationSettings: fromApplicationSettings(params["ApplicationSettings"]),
      AccessEndpoints: params["AccessEndpoints"]?.map(x => fromAccessEndpoint(x)),
      EmbedHostDomains: params["EmbedHostDomains"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateStack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Stack": toStack,
      },
    }, await resp.json());
  }

  // Resource State Waiters

  /** Checks state up to 40 times, 30 seconds apart (about 20 minutes max wait time). */
  async waitForFleetStarted(
    params: RequestConfig & DescribeFleetsRequest,
  ): Promise<DescribeFleetsResult> {
    const errMessage = 'ResourceNotReady: Resource is not in the state FleetStarted';
    for (let i = 0; i < 40; i++) {
      const resp = await this.describeFleets(params);
      const field = resp?.Fleets?.flatMap(x => x?.State);
      if (field?.every(x => x === "ACTIVE")) return resp;
      if (field?.some(x => x === "PENDING_DEACTIVATE")) throw new Error(errMessage);
      if (field?.some(x => x === "INACTIVE")) throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 30000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 40 times, 30 seconds apart (about 20 minutes max wait time). */
  async waitForFleetStopped(
    params: RequestConfig & DescribeFleetsRequest,
  ): Promise<DescribeFleetsResult> {
    const errMessage = 'ResourceNotReady: Resource is not in the state FleetStopped';
    for (let i = 0; i < 40; i++) {
      const resp = await this.describeFleets(params);
      const field = resp?.Fleets?.flatMap(x => x?.State);
      if (field?.every(x => x === "INACTIVE")) return resp;
      if (field?.some(x => x === "PENDING_ACTIVATE")) throw new Error(errMessage);
      if (field?.some(x => x === "ACTIVE")) throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 30000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface AssociateFleetRequest {
  FleetName: string;
  StackName: string;
}

// refs: 1 - tags: named, input
export interface BatchAssociateUserStackRequest {
  UserStackAssociations: UserStackAssociation[];
}

// refs: 1 - tags: named, input
export interface BatchDisassociateUserStackRequest {
  UserStackAssociations: UserStackAssociation[];
}

// refs: 1 - tags: named, input
export interface CopyImageRequest {
  SourceImageName: string;
  DestinationImageName: string;
  DestinationRegion: string;
  DestinationImageDescription?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDirectoryConfigRequest {
  DirectoryName: string;
  OrganizationalUnitDistinguishedNames: string[];
  ServiceAccountCredentials?: ServiceAccountCredentials | null;
}

// refs: 1 - tags: named, input
export interface CreateFleetRequest {
  Name: string;
  ImageName?: string | null;
  ImageArn?: string | null;
  InstanceType: string;
  FleetType?: FleetType | null;
  ComputeCapacity: ComputeCapacity;
  VpcConfig?: VpcConfig | null;
  MaxUserDurationInSeconds?: number | null;
  DisconnectTimeoutInSeconds?: number | null;
  Description?: string | null;
  DisplayName?: string | null;
  EnableDefaultInternetAccess?: boolean | null;
  DomainJoinInfo?: DomainJoinInfo | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  IdleDisconnectTimeoutInSeconds?: number | null;
  IamRoleArn?: string | null;
  StreamView?: StreamView | null;
}

// refs: 1 - tags: named, input
export interface CreateImageBuilderRequest {
  Name: string;
  ImageName?: string | null;
  ImageArn?: string | null;
  InstanceType: string;
  Description?: string | null;
  DisplayName?: string | null;
  VpcConfig?: VpcConfig | null;
  IamRoleArn?: string | null;
  EnableDefaultInternetAccess?: boolean | null;
  DomainJoinInfo?: DomainJoinInfo | null;
  AppstreamAgentVersion?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  AccessEndpoints?: AccessEndpoint[] | null;
}

// refs: 1 - tags: named, input
export interface CreateImageBuilderStreamingURLRequest {
  Name: string;
  Validity?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateStackRequest {
  Name: string;
  Description?: string | null;
  DisplayName?: string | null;
  StorageConnectors?: StorageConnector[] | null;
  RedirectURL?: string | null;
  FeedbackURL?: string | null;
  UserSettings?: UserSetting[] | null;
  ApplicationSettings?: ApplicationSettings | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  AccessEndpoints?: AccessEndpoint[] | null;
  EmbedHostDomains?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CreateStreamingURLRequest {
  StackName: string;
  FleetName: string;
  UserId: string;
  ApplicationId?: string | null;
  Validity?: number | null;
  SessionContext?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateUsageReportSubscriptionRequest {
}

// refs: 1 - tags: named, input
export interface CreateUserRequest {
  UserName: string;
  MessageAction?: MessageAction | null;
  FirstName?: string | null;
  LastName?: string | null;
  AuthenticationType: AuthenticationType;
}

// refs: 1 - tags: named, input
export interface DeleteDirectoryConfigRequest {
  DirectoryName: string;
}

// refs: 1 - tags: named, input
export interface DeleteFleetRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteImageRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteImageBuilderRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteImagePermissionsRequest {
  Name: string;
  SharedAccountId: string;
}

// refs: 1 - tags: named, input
export interface DeleteStackRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteUsageReportSubscriptionRequest {
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  UserName: string;
  AuthenticationType: AuthenticationType;
}

// refs: 1 - tags: named, input
export interface DescribeDirectoryConfigsRequest {
  DirectoryNames?: string[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFleetsRequest {
  Names?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeImageBuildersRequest {
  Names?: string[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeImagePermissionsRequest {
  Name: string;
  MaxResults?: number | null;
  SharedAwsAccountIds?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeImagesRequest {
  Names?: string[] | null;
  Arns?: string[] | null;
  Type?: VisibilityType | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeSessionsRequest {
  StackName: string;
  FleetName: string;
  UserId?: string | null;
  NextToken?: string | null;
  Limit?: number | null;
  AuthenticationType?: AuthenticationType | null;
}

// refs: 1 - tags: named, input
export interface DescribeStacksRequest {
  Names?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeUsageReportSubscriptionsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeUserStackAssociationsRequest {
  StackName?: string | null;
  UserName?: string | null;
  AuthenticationType?: AuthenticationType | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeUsersRequest {
  AuthenticationType: AuthenticationType;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DisableUserRequest {
  UserName: string;
  AuthenticationType: AuthenticationType;
}

// refs: 1 - tags: named, input
export interface DisassociateFleetRequest {
  FleetName: string;
  StackName: string;
}

// refs: 1 - tags: named, input
export interface EnableUserRequest {
  UserName: string;
  AuthenticationType: AuthenticationType;
}

// refs: 1 - tags: named, input
export interface ExpireSessionRequest {
  SessionId: string;
}

// refs: 1 - tags: named, input
export interface ListAssociatedFleetsRequest {
  StackName: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAssociatedStacksRequest {
  FleetName: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface StartFleetRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface StartImageBuilderRequest {
  Name: string;
  AppstreamAgentVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface StopFleetRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface StopImageBuilderRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDirectoryConfigRequest {
  DirectoryName: string;
  OrganizationalUnitDistinguishedNames?: string[] | null;
  ServiceAccountCredentials?: ServiceAccountCredentials | null;
}

// refs: 1 - tags: named, input
export interface UpdateFleetRequest {
  ImageName?: string | null;
  ImageArn?: string | null;
  Name?: string | null;
  InstanceType?: string | null;
  ComputeCapacity?: ComputeCapacity | null;
  VpcConfig?: VpcConfig | null;
  MaxUserDurationInSeconds?: number | null;
  DisconnectTimeoutInSeconds?: number | null;
  DeleteVpcConfig?: boolean | null;
  Description?: string | null;
  DisplayName?: string | null;
  EnableDefaultInternetAccess?: boolean | null;
  DomainJoinInfo?: DomainJoinInfo | null;
  IdleDisconnectTimeoutInSeconds?: number | null;
  AttributesToDelete?: FleetAttribute[] | null;
  IamRoleArn?: string | null;
  StreamView?: StreamView | null;
}

// refs: 1 - tags: named, input
export interface UpdateImagePermissionsRequest {
  Name: string;
  SharedAccountId: string;
  ImagePermissions: ImagePermissions;
}

// refs: 1 - tags: named, input
export interface UpdateStackRequest {
  DisplayName?: string | null;
  Description?: string | null;
  Name: string;
  StorageConnectors?: StorageConnector[] | null;
  DeleteStorageConnectors?: boolean | null;
  RedirectURL?: string | null;
  FeedbackURL?: string | null;
  AttributesToDelete?: StackAttribute[] | null;
  UserSettings?: UserSetting[] | null;
  ApplicationSettings?: ApplicationSettings | null;
  AccessEndpoints?: AccessEndpoint[] | null;
  EmbedHostDomains?: string[] | null;
}

// refs: 1 - tags: named, output
export interface AssociateFleetResult {
}

// refs: 1 - tags: named, output
export interface BatchAssociateUserStackResult {
  errors?: UserStackAssociationError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchDisassociateUserStackResult {
  errors?: UserStackAssociationError[] | null;
}

// refs: 1 - tags: named, output
export interface CopyImageResponse {
  DestinationImageName?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDirectoryConfigResult {
  DirectoryConfig?: DirectoryConfig | null;
}

// refs: 1 - tags: named, output
export interface CreateFleetResult {
  Fleet?: Fleet | null;
}

// refs: 1 - tags: named, output
export interface CreateImageBuilderResult {
  ImageBuilder?: ImageBuilder | null;
}

// refs: 1 - tags: named, output
export interface CreateImageBuilderStreamingURLResult {
  StreamingURL?: string | null;
  Expires?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateStackResult {
  Stack?: Stack | null;
}

// refs: 1 - tags: named, output
export interface CreateStreamingURLResult {
  StreamingURL?: string | null;
  Expires?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateUsageReportSubscriptionResult {
  S3BucketName?: string | null;
  Schedule?: UsageReportSchedule | null;
}

// refs: 1 - tags: named, output
export interface CreateUserResult {
}

// refs: 1 - tags: named, output
export interface DeleteDirectoryConfigResult {
}

// refs: 1 - tags: named, output
export interface DeleteFleetResult {
}

// refs: 1 - tags: named, output
export interface DeleteImageResult {
  Image?: Image | null;
}

// refs: 1 - tags: named, output
export interface DeleteImageBuilderResult {
  ImageBuilder?: ImageBuilder | null;
}

// refs: 1 - tags: named, output
export interface DeleteImagePermissionsResult {
}

// refs: 1 - tags: named, output
export interface DeleteStackResult {
}

// refs: 1 - tags: named, output
export interface DeleteUsageReportSubscriptionResult {
}

// refs: 1 - tags: named, output
export interface DeleteUserResult {
}

// refs: 1 - tags: named, output
export interface DescribeDirectoryConfigsResult {
  DirectoryConfigs?: DirectoryConfig[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeFleetsResult {
  Fleets?: Fleet[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeImageBuildersResult {
  ImageBuilders?: ImageBuilder[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeImagePermissionsResult {
  Name?: string | null;
  SharedImagePermissionsList?: SharedImagePermissions[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeImagesResult {
  Images?: Image[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSessionsResult {
  Sessions?: Session[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeStacksResult {
  Stacks?: Stack[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeUsageReportSubscriptionsResult {
  UsageReportSubscriptions?: UsageReportSubscription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserStackAssociationsResult {
  UserStackAssociations?: UserStackAssociation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeUsersResult {
  Users?: User[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisableUserResult {
}

// refs: 1 - tags: named, output
export interface DisassociateFleetResult {
}

// refs: 1 - tags: named, output
export interface EnableUserResult {
}

// refs: 1 - tags: named, output
export interface ExpireSessionResult {
}

// refs: 1 - tags: named, output
export interface ListAssociatedFleetsResult {
  Names?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssociatedStacksResult {
  Names?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface StartFleetResult {
}

// refs: 1 - tags: named, output
export interface StartImageBuilderResult {
  ImageBuilder?: ImageBuilder | null;
}

// refs: 1 - tags: named, output
export interface StopFleetResult {
}

// refs: 1 - tags: named, output
export interface StopImageBuilderResult {
  ImageBuilder?: ImageBuilder | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDirectoryConfigResult {
  DirectoryConfig?: DirectoryConfig | null;
}

// refs: 1 - tags: named, output
export interface UpdateFleetResult {
  Fleet?: Fleet | null;
}

// refs: 1 - tags: named, output
export interface UpdateImagePermissionsResult {
}

// refs: 1 - tags: named, output
export interface UpdateStackResult {
  Stack?: Stack | null;
}

// refs: 5 - tags: input, named, interface, output
export interface UserStackAssociation {
  StackName: string;
  UserName: string;
  AuthenticationType: AuthenticationType;
  SendEmailNotification?: boolean | null;
}
function fromUserStackAssociation(input?: UserStackAssociation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StackName: input["StackName"],
    UserName: input["UserName"],
    AuthenticationType: input["AuthenticationType"],
    SendEmailNotification: input["SendEmailNotification"],
  }
}
function toUserStackAssociation(root: jsonP.JSONValue): UserStackAssociation {
  return jsonP.readObj({
    required: {
      "StackName": "s",
      "UserName": "s",
      "AuthenticationType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationType>(x),
    },
    optional: {
      "SendEmailNotification": "b",
    },
  }, root);
}

// refs: 14 - tags: input, named, enum, output
export type AuthenticationType =
| "API"
| "SAML"
| "USERPOOL"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface ServiceAccountCredentials {
  AccountName: string;
  AccountPassword: string;
}
function fromServiceAccountCredentials(input?: ServiceAccountCredentials | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountName: input["AccountName"],
    AccountPassword: input["AccountPassword"],
  }
}
function toServiceAccountCredentials(root: jsonP.JSONValue): ServiceAccountCredentials {
  return jsonP.readObj({
    required: {
      "AccountName": "s",
      "AccountPassword": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type FleetType =
| "ALWAYS_ON"
| "ON_DEMAND"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ComputeCapacity {
  DesiredInstances: number;
}
function fromComputeCapacity(input?: ComputeCapacity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DesiredInstances: input["DesiredInstances"],
  }
}

// refs: 11 - tags: input, named, interface, output
export interface VpcConfig {
  SubnetIds?: string[] | null;
  SecurityGroupIds?: string[] | null;
}
function fromVpcConfig(input?: VpcConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIds: input["SubnetIds"],
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}
function toVpcConfig(root: jsonP.JSONValue): VpcConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "SubnetIds": ["s"],
      "SecurityGroupIds": ["s"],
    },
  }, root);
}

// refs: 11 - tags: input, named, interface, output
export interface DomainJoinInfo {
  DirectoryName?: string | null;
  OrganizationalUnitDistinguishedName?: string | null;
}
function fromDomainJoinInfo(input?: DomainJoinInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DirectoryName: input["DirectoryName"],
    OrganizationalUnitDistinguishedName: input["OrganizationalUnitDistinguishedName"],
  }
}
function toDomainJoinInfo(root: jsonP.JSONValue): DomainJoinInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "DirectoryName": "s",
      "OrganizationalUnitDistinguishedName": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type StreamView =
| "APP"
| "DESKTOP"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, interface, output
export interface AccessEndpoint {
  EndpointType: AccessEndpointType;
  VpceId?: string | null;
}
function fromAccessEndpoint(input?: AccessEndpoint | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EndpointType: input["EndpointType"],
    VpceId: input["VpceId"],
  }
}
function toAccessEndpoint(root: jsonP.JSONValue): AccessEndpoint {
  return jsonP.readObj({
    required: {
      "EndpointType": (x: jsonP.JSONValue) => cmnP.readEnum<AccessEndpointType>(x),
    },
    optional: {
      "VpceId": "s",
    },
  }, root);
}

// refs: 11 - tags: input, named, enum, output
export type AccessEndpointType =
| "STREAMING"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface StorageConnector {
  ConnectorType: StorageConnectorType;
  ResourceIdentifier?: string | null;
  Domains?: string[] | null;
}
function fromStorageConnector(input?: StorageConnector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConnectorType: input["ConnectorType"],
    ResourceIdentifier: input["ResourceIdentifier"],
    Domains: input["Domains"],
  }
}
function toStorageConnector(root: jsonP.JSONValue): StorageConnector {
  return jsonP.readObj({
    required: {
      "ConnectorType": (x: jsonP.JSONValue) => cmnP.readEnum<StorageConnectorType>(x),
    },
    optional: {
      "ResourceIdentifier": "s",
      "Domains": ["s"],
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type StorageConnectorType =
| "HOMEFOLDERS"
| "GOOGLE_DRIVE"
| "ONE_DRIVE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface UserSetting {
  Action: Action;
  Permission: Permission;
}
function fromUserSetting(input?: UserSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Permission: input["Permission"],
  }
}
function toUserSetting(root: jsonP.JSONValue): UserSetting {
  return jsonP.readObj({
    required: {
      "Action": (x: jsonP.JSONValue) => cmnP.readEnum<Action>(x),
      "Permission": (x: jsonP.JSONValue) => cmnP.readEnum<Permission>(x),
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type Action =
| "CLIPBOARD_COPY_FROM_LOCAL_DEVICE"
| "CLIPBOARD_COPY_TO_LOCAL_DEVICE"
| "FILE_UPLOAD"
| "FILE_DOWNLOAD"
| "PRINTING_TO_LOCAL_DEVICE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type Permission =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ApplicationSettings {
  Enabled: boolean;
  SettingsGroup?: string | null;
}
function fromApplicationSettings(input?: ApplicationSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
    SettingsGroup: input["SettingsGroup"],
  }
}

// refs: 1 - tags: input, named, enum
export type MessageAction =
| "SUPPRESS"
| "RESEND"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type VisibilityType =
| "PUBLIC"
| "PRIVATE"
| "SHARED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type FleetAttribute =
| "VPC_CONFIGURATION"
| "VPC_CONFIGURATION_SECURITY_GROUP_IDS"
| "DOMAIN_JOIN_INFO"
| "IAM_ROLE_ARN"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface ImagePermissions {
  allowFleet?: boolean | null;
  allowImageBuilder?: boolean | null;
}
function fromImagePermissions(input?: ImagePermissions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    allowFleet: input["allowFleet"],
    allowImageBuilder: input["allowImageBuilder"],
  }
}
function toImagePermissions(root: jsonP.JSONValue): ImagePermissions {
  return jsonP.readObj({
    required: {},
    optional: {
      "allowFleet": "b",
      "allowImageBuilder": "b",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type StackAttribute =
| "STORAGE_CONNECTORS"
| "STORAGE_CONNECTOR_HOMEFOLDERS"
| "STORAGE_CONNECTOR_GOOGLE_DRIVE"
| "STORAGE_CONNECTOR_ONE_DRIVE"
| "REDIRECT_URL"
| "FEEDBACK_URL"
| "THEME_NAME"
| "USER_SETTINGS"
| "EMBED_HOST_DOMAINS"
| "IAM_ROLE_ARN"
| "ACCESS_ENDPOINTS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface UserStackAssociationError {
  UserStackAssociation?: UserStackAssociation | null;
  ErrorCode?: UserStackAssociationErrorCode | null;
  ErrorMessage?: string | null;
}
function toUserStackAssociationError(root: jsonP.JSONValue): UserStackAssociationError {
  return jsonP.readObj({
    required: {},
    optional: {
      "UserStackAssociation": toUserStackAssociation,
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<UserStackAssociationErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type UserStackAssociationErrorCode =
| "STACK_NOT_FOUND"
| "USER_NAME_NOT_FOUND"
| "DIRECTORY_NOT_FOUND"
| "INTERNAL_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface DirectoryConfig {
  DirectoryName: string;
  OrganizationalUnitDistinguishedNames?: string[] | null;
  ServiceAccountCredentials?: ServiceAccountCredentials | null;
  CreatedTime?: Date | number | null;
}
function toDirectoryConfig(root: jsonP.JSONValue): DirectoryConfig {
  return jsonP.readObj({
    required: {
      "DirectoryName": "s",
    },
    optional: {
      "OrganizationalUnitDistinguishedNames": ["s"],
      "ServiceAccountCredentials": toServiceAccountCredentials,
      "CreatedTime": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Fleet {
  Arn: string;
  Name: string;
  DisplayName?: string | null;
  Description?: string | null;
  ImageName?: string | null;
  ImageArn?: string | null;
  InstanceType: string;
  FleetType?: FleetType | null;
  ComputeCapacityStatus: ComputeCapacityStatus;
  MaxUserDurationInSeconds?: number | null;
  DisconnectTimeoutInSeconds?: number | null;
  State: FleetState;
  VpcConfig?: VpcConfig | null;
  CreatedTime?: Date | number | null;
  FleetErrors?: FleetError[] | null;
  EnableDefaultInternetAccess?: boolean | null;
  DomainJoinInfo?: DomainJoinInfo | null;
  IdleDisconnectTimeoutInSeconds?: number | null;
  IamRoleArn?: string | null;
  StreamView?: StreamView | null;
}
function toFleet(root: jsonP.JSONValue): Fleet {
  return jsonP.readObj({
    required: {
      "Arn": "s",
      "Name": "s",
      "InstanceType": "s",
      "ComputeCapacityStatus": toComputeCapacityStatus,
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<FleetState>(x),
    },
    optional: {
      "DisplayName": "s",
      "Description": "s",
      "ImageName": "s",
      "ImageArn": "s",
      "FleetType": (x: jsonP.JSONValue) => cmnP.readEnum<FleetType>(x),
      "MaxUserDurationInSeconds": "n",
      "DisconnectTimeoutInSeconds": "n",
      "VpcConfig": toVpcConfig,
      "CreatedTime": "d",
      "FleetErrors": [toFleetError],
      "EnableDefaultInternetAccess": "b",
      "DomainJoinInfo": toDomainJoinInfo,
      "IdleDisconnectTimeoutInSeconds": "n",
      "IamRoleArn": "s",
      "StreamView": (x: jsonP.JSONValue) => cmnP.readEnum<StreamView>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ComputeCapacityStatus {
  Desired: number;
  Running?: number | null;
  InUse?: number | null;
  Available?: number | null;
}
function toComputeCapacityStatus(root: jsonP.JSONValue): ComputeCapacityStatus {
  return jsonP.readObj({
    required: {
      "Desired": "n",
    },
    optional: {
      "Running": "n",
      "InUse": "n",
      "Available": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type FleetState =
| "STARTING"
| "RUNNING"
| "STOPPING"
| "STOPPED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface FleetError {
  ErrorCode?: FleetErrorCode | null;
  ErrorMessage?: string | null;
}
function toFleetError(root: jsonP.JSONValue): FleetError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<FleetErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type FleetErrorCode =
| "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION"
| "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION"
| "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION"
| "NETWORK_INTERFACE_LIMIT_EXCEEDED"
| "INTERNAL_SERVICE_ERROR"
| "IAM_SERVICE_ROLE_IS_MISSING"
| "MACHINE_ROLE_IS_MISSING"
| "STS_DISABLED_IN_REGION"
| "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES"
| "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION"
| "SUBNET_NOT_FOUND"
| "IMAGE_NOT_FOUND"
| "INVALID_SUBNET_CONFIGURATION"
| "SECURITY_GROUPS_NOT_FOUND"
| "IGW_NOT_ATTACHED"
| "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION"
| "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND"
| "DOMAIN_JOIN_ERROR_ACCESS_DENIED"
| "DOMAIN_JOIN_ERROR_LOGON_FAILURE"
| "DOMAIN_JOIN_ERROR_INVALID_PARAMETER"
| "DOMAIN_JOIN_ERROR_MORE_DATA"
| "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN"
| "DOMAIN_JOIN_ERROR_NOT_SUPPORTED"
| "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME"
| "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED"
| "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED"
| "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED"
| "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface ImageBuilder {
  Name: string;
  Arn?: string | null;
  ImageArn?: string | null;
  Description?: string | null;
  DisplayName?: string | null;
  VpcConfig?: VpcConfig | null;
  InstanceType?: string | null;
  Platform?: PlatformType | null;
  IamRoleArn?: string | null;
  State?: ImageBuilderState | null;
  StateChangeReason?: ImageBuilderStateChangeReason | null;
  CreatedTime?: Date | number | null;
  EnableDefaultInternetAccess?: boolean | null;
  DomainJoinInfo?: DomainJoinInfo | null;
  NetworkAccessConfiguration?: NetworkAccessConfiguration | null;
  ImageBuilderErrors?: ResourceError[] | null;
  AppstreamAgentVersion?: string | null;
  AccessEndpoints?: AccessEndpoint[] | null;
}
function toImageBuilder(root: jsonP.JSONValue): ImageBuilder {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Arn": "s",
      "ImageArn": "s",
      "Description": "s",
      "DisplayName": "s",
      "VpcConfig": toVpcConfig,
      "InstanceType": "s",
      "Platform": (x: jsonP.JSONValue) => cmnP.readEnum<PlatformType>(x),
      "IamRoleArn": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<ImageBuilderState>(x),
      "StateChangeReason": toImageBuilderStateChangeReason,
      "CreatedTime": "d",
      "EnableDefaultInternetAccess": "b",
      "DomainJoinInfo": toDomainJoinInfo,
      "NetworkAccessConfiguration": toNetworkAccessConfiguration,
      "ImageBuilderErrors": [toResourceError],
      "AppstreamAgentVersion": "s",
      "AccessEndpoints": [toAccessEndpoint],
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type PlatformType =
| "WINDOWS"
| "WINDOWS_SERVER_2016"
| "WINDOWS_SERVER_2019"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type ImageBuilderState =
| "PENDING"
| "UPDATING_AGENT"
| "RUNNING"
| "STOPPING"
| "STOPPED"
| "REBOOTING"
| "SNAPSHOTTING"
| "DELETING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface ImageBuilderStateChangeReason {
  Code?: ImageBuilderStateChangeReasonCode | null;
  Message?: string | null;
}
function toImageBuilderStateChangeReason(root: jsonP.JSONValue): ImageBuilderStateChangeReason {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": (x: jsonP.JSONValue) => cmnP.readEnum<ImageBuilderStateChangeReasonCode>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type ImageBuilderStateChangeReasonCode =
| "INTERNAL_ERROR"
| "IMAGE_UNAVAILABLE"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface NetworkAccessConfiguration {
  EniPrivateIpAddress?: string | null;
  EniId?: string | null;
}
function toNetworkAccessConfiguration(root: jsonP.JSONValue): NetworkAccessConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "EniPrivateIpAddress": "s",
      "EniId": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface ResourceError {
  ErrorCode?: FleetErrorCode | null;
  ErrorMessage?: string | null;
  ErrorTimestamp?: Date | number | null;
}
function toResourceError(root: jsonP.JSONValue): ResourceError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<FleetErrorCode>(x),
      "ErrorMessage": "s",
      "ErrorTimestamp": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Stack {
  Arn?: string | null;
  Name: string;
  Description?: string | null;
  DisplayName?: string | null;
  CreatedTime?: Date | number | null;
  StorageConnectors?: StorageConnector[] | null;
  RedirectURL?: string | null;
  FeedbackURL?: string | null;
  StackErrors?: StackError[] | null;
  UserSettings?: UserSetting[] | null;
  ApplicationSettings?: ApplicationSettingsResponse | null;
  AccessEndpoints?: AccessEndpoint[] | null;
  EmbedHostDomains?: string[] | null;
}
function toStack(root: jsonP.JSONValue): Stack {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Arn": "s",
      "Description": "s",
      "DisplayName": "s",
      "CreatedTime": "d",
      "StorageConnectors": [toStorageConnector],
      "RedirectURL": "s",
      "FeedbackURL": "s",
      "StackErrors": [toStackError],
      "UserSettings": [toUserSetting],
      "ApplicationSettings": toApplicationSettingsResponse,
      "AccessEndpoints": [toAccessEndpoint],
      "EmbedHostDomains": ["s"],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface StackError {
  ErrorCode?: StackErrorCode | null;
  ErrorMessage?: string | null;
}
function toStackError(root: jsonP.JSONValue): StackError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<StackErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type StackErrorCode =
| "STORAGE_CONNECTOR_ERROR"
| "INTERNAL_SERVICE_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface ApplicationSettingsResponse {
  Enabled?: boolean | null;
  SettingsGroup?: string | null;
  S3BucketName?: string | null;
}
function toApplicationSettingsResponse(root: jsonP.JSONValue): ApplicationSettingsResponse {
  return jsonP.readObj({
    required: {},
    optional: {
      "Enabled": "b",
      "SettingsGroup": "s",
      "S3BucketName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type UsageReportSchedule =
| "DAILY"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Image {
  Name: string;
  Arn?: string | null;
  BaseImageArn?: string | null;
  DisplayName?: string | null;
  State?: ImageState | null;
  Visibility?: VisibilityType | null;
  ImageBuilderSupported?: boolean | null;
  ImageBuilderName?: string | null;
  Platform?: PlatformType | null;
  Description?: string | null;
  StateChangeReason?: ImageStateChangeReason | null;
  Applications?: Application[] | null;
  CreatedTime?: Date | number | null;
  PublicBaseImageReleasedDate?: Date | number | null;
  AppstreamAgentVersion?: string | null;
  ImagePermissions?: ImagePermissions | null;
}
function toImage(root: jsonP.JSONValue): Image {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Arn": "s",
      "BaseImageArn": "s",
      "DisplayName": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<ImageState>(x),
      "Visibility": (x: jsonP.JSONValue) => cmnP.readEnum<VisibilityType>(x),
      "ImageBuilderSupported": "b",
      "ImageBuilderName": "s",
      "Platform": (x: jsonP.JSONValue) => cmnP.readEnum<PlatformType>(x),
      "Description": "s",
      "StateChangeReason": toImageStateChangeReason,
      "Applications": [toApplication],
      "CreatedTime": "d",
      "PublicBaseImageReleasedDate": "d",
      "AppstreamAgentVersion": "s",
      "ImagePermissions": toImagePermissions,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ImageState =
| "PENDING"
| "AVAILABLE"
| "FAILED"
| "COPYING"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ImageStateChangeReason {
  Code?: ImageStateChangeReasonCode | null;
  Message?: string | null;
}
function toImageStateChangeReason(root: jsonP.JSONValue): ImageStateChangeReason {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": (x: jsonP.JSONValue) => cmnP.readEnum<ImageStateChangeReasonCode>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ImageStateChangeReasonCode =
| "INTERNAL_ERROR"
| "IMAGE_BUILDER_NOT_AVAILABLE"
| "IMAGE_COPY_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Application {
  Name?: string | null;
  DisplayName?: string | null;
  IconURL?: string | null;
  LaunchPath?: string | null;
  LaunchParameters?: string | null;
  Enabled?: boolean | null;
  Metadata?: { [key: string]: string | null | undefined } | null;
}
function toApplication(root: jsonP.JSONValue): Application {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "DisplayName": "s",
      "IconURL": "s",
      "LaunchPath": "s",
      "LaunchParameters": "s",
      "Enabled": "b",
      "Metadata": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SharedImagePermissions {
  sharedAccountId: string;
  imagePermissions: ImagePermissions;
}
function toSharedImagePermissions(root: jsonP.JSONValue): SharedImagePermissions {
  return jsonP.readObj({
    required: {
      "sharedAccountId": "s",
      "imagePermissions": toImagePermissions,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Session {
  Id: string;
  UserId: string;
  StackName: string;
  FleetName: string;
  State: SessionState;
  ConnectionState?: SessionConnectionState | null;
  StartTime?: Date | number | null;
  MaxExpirationTime?: Date | number | null;
  AuthenticationType?: AuthenticationType | null;
  NetworkAccessConfiguration?: NetworkAccessConfiguration | null;
}
function toSession(root: jsonP.JSONValue): Session {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "UserId": "s",
      "StackName": "s",
      "FleetName": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<SessionState>(x),
    },
    optional: {
      "ConnectionState": (x: jsonP.JSONValue) => cmnP.readEnum<SessionConnectionState>(x),
      "StartTime": "d",
      "MaxExpirationTime": "d",
      "AuthenticationType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationType>(x),
      "NetworkAccessConfiguration": toNetworkAccessConfiguration,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SessionState =
| "ACTIVE"
| "PENDING"
| "EXPIRED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type SessionConnectionState =
| "CONNECTED"
| "NOT_CONNECTED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface UsageReportSubscription {
  S3BucketName?: string | null;
  Schedule?: UsageReportSchedule | null;
  LastGeneratedReportDate?: Date | number | null;
  SubscriptionErrors?: LastReportGenerationExecutionError[] | null;
}
function toUsageReportSubscription(root: jsonP.JSONValue): UsageReportSubscription {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3BucketName": "s",
      "Schedule": (x: jsonP.JSONValue) => cmnP.readEnum<UsageReportSchedule>(x),
      "LastGeneratedReportDate": "d",
      "SubscriptionErrors": [toLastReportGenerationExecutionError],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LastReportGenerationExecutionError {
  ErrorCode?: UsageReportExecutionErrorCode | null;
  ErrorMessage?: string | null;
}
function toLastReportGenerationExecutionError(root: jsonP.JSONValue): LastReportGenerationExecutionError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<UsageReportExecutionErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type UsageReportExecutionErrorCode =
| "RESOURCE_NOT_FOUND"
| "ACCESS_DENIED"
| "INTERNAL_SERVICE_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface User {
  Arn?: string | null;
  UserName?: string | null;
  Enabled?: boolean | null;
  Status?: string | null;
  FirstName?: string | null;
  LastName?: string | null;
  CreatedTime?: Date | number | null;
  AuthenticationType: AuthenticationType;
}
function toUser(root: jsonP.JSONValue): User {
  return jsonP.readObj({
    required: {
      "AuthenticationType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthenticationType>(x),
    },
    optional: {
      "Arn": "s",
      "UserName": "s",
      "Enabled": "b",
      "Status": "s",
      "FirstName": "s",
      "LastName": "s",
      "CreatedTime": "d",
    },
  }, root);
}
