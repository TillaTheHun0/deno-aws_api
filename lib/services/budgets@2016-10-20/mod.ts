// Autogenerated API client for: AWS Budgets

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class Budgets {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Budgets.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-10-20",
    "endpointPrefix": "budgets",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWSBudgets",
    "serviceFullName": "AWS Budgets",
    "serviceId": "Budgets",
    "signatureVersion": "v4",
    "targetPrefix": "AWSBudgetServiceGateway",
    "uid": "budgets-2016-10-20"
  };

  async createBudget(
    {abortSignal, ...params}: RequestConfig & CreateBudgetRequest,
  ): Promise<CreateBudgetResponse> {
    const body: JSONObject = {...params,
    Budget: fromBudget(params["Budget"]),
    NotificationsWithSubscribers: params["NotificationsWithSubscribers"]?.map(x => fromNotificationWithSubscribers(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBudget",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createBudgetAction(
    {abortSignal, ...params}: RequestConfig & CreateBudgetActionRequest,
  ): Promise<CreateBudgetActionResponse> {
    const body: JSONObject = {...params,
    ActionThreshold: fromActionThreshold(params["ActionThreshold"]),
    Definition: fromDefinition(params["Definition"]),
    Subscribers: params["Subscribers"]?.map(x => fromSubscriber(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBudgetAction",
    });
    return prt.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "ActionId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createNotification(
    {abortSignal, ...params}: RequestConfig & CreateNotificationRequest,
  ): Promise<CreateNotificationResponse> {
    const body: JSONObject = {...params,
    Notification: fromNotification(params["Notification"]),
    Subscribers: params["Subscribers"]?.map(x => fromSubscriber(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNotification",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createSubscriber(
    {abortSignal, ...params}: RequestConfig & CreateSubscriberRequest,
  ): Promise<CreateSubscriberResponse> {
    const body: JSONObject = {...params,
    Notification: fromNotification(params["Notification"]),
    Subscriber: fromSubscriber(params["Subscriber"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSubscriber",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteBudget(
    {abortSignal, ...params}: RequestConfig & DeleteBudgetRequest,
  ): Promise<DeleteBudgetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBudget",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteBudgetAction(
    {abortSignal, ...params}: RequestConfig & DeleteBudgetActionRequest,
  ): Promise<DeleteBudgetActionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBudgetAction",
    });
    return prt.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "Action": toAction,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteNotification(
    {abortSignal, ...params}: RequestConfig & DeleteNotificationRequest,
  ): Promise<DeleteNotificationResponse> {
    const body: JSONObject = {...params,
    Notification: fromNotification(params["Notification"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNotification",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSubscriber(
    {abortSignal, ...params}: RequestConfig & DeleteSubscriberRequest,
  ): Promise<DeleteSubscriberResponse> {
    const body: JSONObject = {...params,
    Notification: fromNotification(params["Notification"]),
    Subscriber: fromSubscriber(params["Subscriber"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSubscriber",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeBudget(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetRequest,
  ): Promise<DescribeBudgetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudget",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Budget": toBudget,
      },
    }, await resp.json());
  }

  async describeBudgetAction(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionRequest,
  ): Promise<DescribeBudgetActionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetAction",
    });
    return prt.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "Action": toAction,
      },
      optional: {},
    }, await resp.json());
  }

  async describeBudgetActionHistories(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionHistoriesRequest,
  ): Promise<DescribeBudgetActionHistoriesResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromTimePeriod(params["TimePeriod"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetActionHistories",
    });
    return prt.readObj({
      required: {
        "ActionHistories": [toActionHistory],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgetActionsForAccount(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionsForAccountRequest,
  ): Promise<DescribeBudgetActionsForAccountResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetActionsForAccount",
    });
    return prt.readObj({
      required: {
        "Actions": [toAction],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgetActionsForBudget(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionsForBudgetRequest,
  ): Promise<DescribeBudgetActionsForBudgetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetActionsForBudget",
    });
    return prt.readObj({
      required: {
        "Actions": [toAction],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgetPerformanceHistory(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetPerformanceHistoryRequest,
  ): Promise<DescribeBudgetPerformanceHistoryResponse> {
    const body: JSONObject = {...params,
    TimePeriod: fromTimePeriod(params["TimePeriod"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetPerformanceHistory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "BudgetPerformanceHistory": toBudgetPerformanceHistory,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgets(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetsRequest,
  ): Promise<DescribeBudgetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Budgets": [toBudget],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeNotificationsForBudget(
    {abortSignal, ...params}: RequestConfig & DescribeNotificationsForBudgetRequest,
  ): Promise<DescribeNotificationsForBudgetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeNotificationsForBudget",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Notifications": [toNotification],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeSubscribersForNotification(
    {abortSignal, ...params}: RequestConfig & DescribeSubscribersForNotificationRequest,
  ): Promise<DescribeSubscribersForNotificationResponse> {
    const body: JSONObject = {...params,
    Notification: fromNotification(params["Notification"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSubscribersForNotification",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Subscribers": [toSubscriber],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async executeBudgetAction(
    {abortSignal, ...params}: RequestConfig & ExecuteBudgetActionRequest,
  ): Promise<ExecuteBudgetActionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExecuteBudgetAction",
    });
    return prt.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "ActionId": "s",
        "ExecutionType": toExecutionType,
      },
      optional: {},
    }, await resp.json());
  }

  async updateBudget(
    {abortSignal, ...params}: RequestConfig & UpdateBudgetRequest,
  ): Promise<UpdateBudgetResponse> {
    const body: JSONObject = {...params,
    NewBudget: fromBudget(params["NewBudget"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBudget",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateBudgetAction(
    {abortSignal, ...params}: RequestConfig & UpdateBudgetActionRequest,
  ): Promise<UpdateBudgetActionResponse> {
    const body: JSONObject = {...params,
    ActionThreshold: fromActionThreshold(params["ActionThreshold"]),
    Definition: fromDefinition(params["Definition"]),
    Subscribers: params["Subscribers"]?.map(x => fromSubscriber(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBudgetAction",
    });
    return prt.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "OldAction": toAction,
        "NewAction": toAction,
      },
      optional: {},
    }, await resp.json());
  }

  async updateNotification(
    {abortSignal, ...params}: RequestConfig & UpdateNotificationRequest,
  ): Promise<UpdateNotificationResponse> {
    const body: JSONObject = {...params,
    OldNotification: fromNotification(params["OldNotification"]),
    NewNotification: fromNotification(params["NewNotification"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNotification",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSubscriber(
    {abortSignal, ...params}: RequestConfig & UpdateSubscriberRequest,
  ): Promise<UpdateSubscriberResponse> {
    const body: JSONObject = {...params,
    Notification: fromNotification(params["Notification"]),
    OldSubscriber: fromSubscriber(params["OldSubscriber"]),
    NewSubscriber: fromSubscriber(params["NewSubscriber"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSubscriber",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateBudgetRequest {
  AccountId: string;
  Budget: Budget;
  NotificationsWithSubscribers?: NotificationWithSubscribers[] | null;
}

// refs: 1 - tags: named, input
export interface CreateBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  NotificationType: NotificationType;
  ActionType: ActionType;
  ActionThreshold: ActionThreshold;
  Definition: Definition;
  ExecutionRoleArn: string;
  ApprovalModel: ApprovalModel;
  Subscribers: Subscriber[];
}

// refs: 1 - tags: named, input
export interface CreateNotificationRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  Subscribers: Subscriber[];
}

// refs: 1 - tags: named, input
export interface CreateSubscriberRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  Subscriber: Subscriber;
}

// refs: 1 - tags: named, input
export interface DeleteBudgetRequest {
  AccountId: string;
  BudgetName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteNotificationRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
}

// refs: 1 - tags: named, input
export interface DeleteSubscriberRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  Subscriber: Subscriber;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetRequest {
  AccountId: string;
  BudgetName: string;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionHistoriesRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  TimePeriod?: TimePeriod | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionsForAccountRequest {
  AccountId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionsForBudgetRequest {
  AccountId: string;
  BudgetName: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetPerformanceHistoryRequest {
  AccountId: string;
  BudgetName: string;
  TimePeriod?: TimePeriod | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetsRequest {
  AccountId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeNotificationsForBudgetRequest {
  AccountId: string;
  BudgetName: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeSubscribersForNotificationRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ExecuteBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  ExecutionType: ExecutionType;
}

// refs: 1 - tags: named, input
export interface UpdateBudgetRequest {
  AccountId: string;
  NewBudget: Budget;
}

// refs: 1 - tags: named, input
export interface UpdateBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  NotificationType?: NotificationType | null;
  ActionThreshold?: ActionThreshold | null;
  Definition?: Definition | null;
  ExecutionRoleArn?: string | null;
  ApprovalModel?: ApprovalModel | null;
  Subscribers?: Subscriber[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateNotificationRequest {
  AccountId: string;
  BudgetName: string;
  OldNotification: Notification;
  NewNotification: Notification;
}

// refs: 1 - tags: named, input
export interface UpdateSubscriberRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  OldSubscriber: Subscriber;
  NewSubscriber: Subscriber;
}

// refs: 1 - tags: named, output
export interface CreateBudgetResponse {
}

// refs: 1 - tags: named, output
export interface CreateBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
}

// refs: 1 - tags: named, output
export interface CreateNotificationResponse {
}

// refs: 1 - tags: named, output
export interface CreateSubscriberResponse {
}

// refs: 1 - tags: named, output
export interface DeleteBudgetResponse {
}

// refs: 1 - tags: named, output
export interface DeleteBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  Action: Action;
}

// refs: 1 - tags: named, output
export interface DeleteNotificationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSubscriberResponse {
}

// refs: 1 - tags: named, output
export interface DescribeBudgetResponse {
  Budget?: Budget | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  Action: Action;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionHistoriesResponse {
  ActionHistories: ActionHistory[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionsForAccountResponse {
  Actions: Action[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionsForBudgetResponse {
  Actions: Action[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetPerformanceHistoryResponse {
  BudgetPerformanceHistory?: BudgetPerformanceHistory | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetsResponse {
  Budgets?: Budget[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeNotificationsForBudgetResponse {
  Notifications?: Notification[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSubscribersForNotificationResponse {
  Subscribers?: Subscriber[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ExecuteBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  ExecutionType: ExecutionType;
}

// refs: 1 - tags: named, output
export interface UpdateBudgetResponse {
}

// refs: 1 - tags: named, output
export interface UpdateBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  OldAction: Action;
  NewAction: Action;
}

// refs: 1 - tags: named, output
export interface UpdateNotificationResponse {
}

// refs: 1 - tags: named, output
export interface UpdateSubscriberResponse {
}

// refs: 4 - tags: input, named, interface, output
export interface Budget {
  BudgetName: string;
  BudgetLimit?: Spend | null;
  PlannedBudgetLimits?: { [key: string]: Spend } | null;
  CostFilters?: { [key: string]: string[] } | null;
  CostTypes?: CostTypes | null;
  TimeUnit: TimeUnit;
  TimePeriod?: TimePeriod | null;
  CalculatedSpend?: CalculatedSpend | null;
  BudgetType: BudgetType;
  LastUpdatedTime?: Date | number | null;
}
function fromBudget(input?: Budget | null): JSONValue {
  if (!input) return input;
  return {...input,
    BudgetLimit: fromSpend(input["BudgetLimit"]),
    PlannedBudgetLimits: prt.serializeMap(input["PlannedBudgetLimits"], x => fromSpend(x)),
    CostTypes: fromCostTypes(input["CostTypes"]),
    TimePeriod: fromTimePeriod(input["TimePeriod"]),
    CalculatedSpend: fromCalculatedSpend(input["CalculatedSpend"]),
    LastUpdatedTime: prt.serializeDate_unixTimestamp(input["LastUpdatedTime"]),
  }
}
function toBudget(root: JSONValue): Budget {
  return prt.readObj({
    required: {
      "BudgetName": "s",
      "TimeUnit": toTimeUnit,
      "BudgetType": toBudgetType,
    },
    optional: {
      "BudgetLimit": toSpend,
      "PlannedBudgetLimits": x => prt.readMap(String, toSpend, x),
      "CostFilters": x => prt.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "CostTypes": toCostTypes,
      "TimePeriod": toTimePeriod,
      "CalculatedSpend": toCalculatedSpend,
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface Spend {
  Amount: string;
  Unit: string;
}
function fromSpend(input?: Spend | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSpend(root: JSONValue): Spend {
  return prt.readObj({
    required: {
      "Amount": "s",
      "Unit": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface CostTypes {
  IncludeTax?: boolean | null;
  IncludeSubscription?: boolean | null;
  UseBlended?: boolean | null;
  IncludeRefund?: boolean | null;
  IncludeCredit?: boolean | null;
  IncludeUpfront?: boolean | null;
  IncludeRecurring?: boolean | null;
  IncludeOtherSubscription?: boolean | null;
  IncludeSupport?: boolean | null;
  IncludeDiscount?: boolean | null;
  UseAmortized?: boolean | null;
}
function fromCostTypes(input?: CostTypes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCostTypes(root: JSONValue): CostTypes {
  return prt.readObj({
    required: {},
    optional: {
      "IncludeTax": "b",
      "IncludeSubscription": "b",
      "UseBlended": "b",
      "IncludeRefund": "b",
      "IncludeCredit": "b",
      "IncludeUpfront": "b",
      "IncludeRecurring": "b",
      "IncludeOtherSubscription": "b",
      "IncludeSupport": "b",
      "IncludeDiscount": "b",
      "UseAmortized": "b",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type TimeUnit =
| "DAILY"
| "MONTHLY"
| "QUARTERLY"
| "ANNUALLY"
;

function toTimeUnit(root: JSONValue): TimeUnit | null {
  return ( false
    || root == "DAILY"
    || root == "MONTHLY"
    || root == "QUARTERLY"
    || root == "ANNUALLY"
  ) ? root : null;
}

// refs: 7 - tags: input, named, interface, output
export interface TimePeriod {
  Start?: Date | number | null;
  End?: Date | number | null;
}
function fromTimePeriod(input?: TimePeriod | null): JSONValue {
  if (!input) return input;
  return {...input,
    Start: prt.serializeDate_unixTimestamp(input["Start"]),
    End: prt.serializeDate_unixTimestamp(input["End"]),
  }
}
function toTimePeriod(root: JSONValue): TimePeriod {
  return prt.readObj({
    required: {},
    optional: {
      "Start": "d",
      "End": "d",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CalculatedSpend {
  ActualSpend: Spend;
  ForecastedSpend?: Spend | null;
}
function fromCalculatedSpend(input?: CalculatedSpend | null): JSONValue {
  if (!input) return input;
  return {...input,
    ActualSpend: fromSpend(input["ActualSpend"]),
    ForecastedSpend: fromSpend(input["ForecastedSpend"]),
  }
}
function toCalculatedSpend(root: JSONValue): CalculatedSpend {
  return prt.readObj({
    required: {
      "ActualSpend": toSpend,
    },
    optional: {
      "ForecastedSpend": toSpend,
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type BudgetType =
| "USAGE"
| "COST"
| "RI_UTILIZATION"
| "RI_COVERAGE"
| "SAVINGS_PLANS_UTILIZATION"
| "SAVINGS_PLANS_COVERAGE"
;

function toBudgetType(root: JSONValue): BudgetType | null {
  return ( false
    || root == "USAGE"
    || root == "COST"
    || root == "RI_UTILIZATION"
    || root == "RI_COVERAGE"
    || root == "SAVINGS_PLANS_UTILIZATION"
    || root == "SAVINGS_PLANS_COVERAGE"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface NotificationWithSubscribers {
  Notification: Notification;
  Subscribers: Subscriber[];
}
function fromNotificationWithSubscribers(input?: NotificationWithSubscribers | null): JSONValue {
  if (!input) return input;
  return {...input,
    Notification: fromNotification(input["Notification"]),
    Subscribers: input["Subscribers"]?.map(x => fromSubscriber(x)),
  }
}

// refs: 10 - tags: input, named, interface, output
export interface Notification {
  NotificationType: NotificationType;
  ComparisonOperator: ComparisonOperator;
  Threshold: number;
  ThresholdType?: ThresholdType | null;
  NotificationState?: NotificationState | null;
}
function fromNotification(input?: Notification | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toNotification(root: JSONValue): Notification {
  return prt.readObj({
    required: {
      "NotificationType": toNotificationType,
      "ComparisonOperator": toComparisonOperator,
      "Threshold": "n",
    },
    optional: {
      "ThresholdType": toThresholdType,
      "NotificationState": toNotificationState,
    },
  }, root);
}

// refs: 19 - tags: input, named, enum, output
export type NotificationType =
| "ACTUAL"
| "FORECASTED"
;

function toNotificationType(root: JSONValue): NotificationType | null {
  return ( false
    || root == "ACTUAL"
    || root == "FORECASTED"
  ) ? root : null;
}

// refs: 10 - tags: input, named, enum, output
export type ComparisonOperator =
| "GREATER_THAN"
| "LESS_THAN"
| "EQUAL_TO"
;

function toComparisonOperator(root: JSONValue): ComparisonOperator | null {
  return ( false
    || root == "GREATER_THAN"
    || root == "LESS_THAN"
    || root == "EQUAL_TO"
  ) ? root : null;
}

// refs: 19 - tags: input, named, enum, output
export type ThresholdType =
| "PERCENTAGE"
| "ABSOLUTE_VALUE"
;

function toThresholdType(root: JSONValue): ThresholdType | null {
  return ( false
    || root == "PERCENTAGE"
    || root == "ABSOLUTE_VALUE"
  ) ? root : null;
}

// refs: 10 - tags: input, named, enum, output
export type NotificationState =
| "OK"
| "ALARM"
;

function toNotificationState(root: JSONValue): NotificationState | null {
  return ( false
    || root == "OK"
    || root == "ALARM"
  ) ? root : null;
}

// refs: 16 - tags: input, named, interface, output
export interface Subscriber {
  SubscriptionType: SubscriptionType;
  Address: string;
}
function fromSubscriber(input?: Subscriber | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSubscriber(root: JSONValue): Subscriber {
  return prt.readObj({
    required: {
      "SubscriptionType": toSubscriptionType,
      "Address": "s",
    },
    optional: {},
  }, root);
}

// refs: 16 - tags: input, named, enum, output
export type SubscriptionType =
| "SNS"
| "EMAIL"
;

function toSubscriptionType(root: JSONValue): SubscriptionType | null {
  return ( false
    || root == "SNS"
    || root == "EMAIL"
  ) ? root : null;
}

// refs: 8 - tags: input, named, enum, output
export type ActionType =
| "APPLY_IAM_POLICY"
| "APPLY_SCP_POLICY"
| "RUN_SSM_DOCUMENTS"
;

function toActionType(root: JSONValue): ActionType | null {
  return ( false
    || root == "APPLY_IAM_POLICY"
    || root == "APPLY_SCP_POLICY"
    || root == "RUN_SSM_DOCUMENTS"
  ) ? root : null;
}

// refs: 9 - tags: input, named, interface, output
export interface ActionThreshold {
  ActionThresholdValue: number;
  ActionThresholdType: ThresholdType;
}
function fromActionThreshold(input?: ActionThreshold | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toActionThreshold(root: JSONValue): ActionThreshold {
  return prt.readObj({
    required: {
      "ActionThresholdValue": "n",
      "ActionThresholdType": toThresholdType,
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface Definition {
  IamActionDefinition?: IamActionDefinition | null;
  ScpActionDefinition?: ScpActionDefinition | null;
  SsmActionDefinition?: SsmActionDefinition | null;
}
function fromDefinition(input?: Definition | null): JSONValue {
  if (!input) return input;
  return {...input,
    IamActionDefinition: fromIamActionDefinition(input["IamActionDefinition"]),
    ScpActionDefinition: fromScpActionDefinition(input["ScpActionDefinition"]),
    SsmActionDefinition: fromSsmActionDefinition(input["SsmActionDefinition"]),
  }
}
function toDefinition(root: JSONValue): Definition {
  return prt.readObj({
    required: {},
    optional: {
      "IamActionDefinition": toIamActionDefinition,
      "ScpActionDefinition": toScpActionDefinition,
      "SsmActionDefinition": toSsmActionDefinition,
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface IamActionDefinition {
  PolicyArn: string;
  Roles?: string[] | null;
  Groups?: string[] | null;
  Users?: string[] | null;
}
function fromIamActionDefinition(input?: IamActionDefinition | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toIamActionDefinition(root: JSONValue): IamActionDefinition {
  return prt.readObj({
    required: {
      "PolicyArn": "s",
    },
    optional: {
      "Roles": ["s"],
      "Groups": ["s"],
      "Users": ["s"],
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface ScpActionDefinition {
  PolicyId: string;
  TargetIds: string[];
}
function fromScpActionDefinition(input?: ScpActionDefinition | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toScpActionDefinition(root: JSONValue): ScpActionDefinition {
  return prt.readObj({
    required: {
      "PolicyId": "s",
      "TargetIds": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface SsmActionDefinition {
  ActionSubType: ActionSubType;
  Region: string;
  InstanceIds: string[];
}
function fromSsmActionDefinition(input?: SsmActionDefinition | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSsmActionDefinition(root: JSONValue): SsmActionDefinition {
  return prt.readObj({
    required: {
      "ActionSubType": toActionSubType,
      "Region": "s",
      "InstanceIds": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type ActionSubType =
| "STOP_EC2_INSTANCES"
| "STOP_RDS_INSTANCES"
;

function toActionSubType(root: JSONValue): ActionSubType | null {
  return ( false
    || root == "STOP_EC2_INSTANCES"
    || root == "STOP_RDS_INSTANCES"
  ) ? root : null;
}

// refs: 9 - tags: input, named, enum, output
export type ApprovalModel =
| "AUTOMATIC"
| "MANUAL"
;

function toApprovalModel(root: JSONValue): ApprovalModel | null {
  return ( false
    || root == "AUTOMATIC"
    || root == "MANUAL"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type ExecutionType =
| "APPROVE_BUDGET_ACTION"
| "RETRY_BUDGET_ACTION"
| "REVERSE_BUDGET_ACTION"
| "RESET_BUDGET_ACTION"
;

function toExecutionType(root: JSONValue): ExecutionType | null {
  return ( false
    || root == "APPROVE_BUDGET_ACTION"
    || root == "RETRY_BUDGET_ACTION"
    || root == "REVERSE_BUDGET_ACTION"
    || root == "RESET_BUDGET_ACTION"
  ) ? root : null;
}

// refs: 7 - tags: output, named, interface
export interface Action {
  ActionId: string;
  BudgetName: string;
  NotificationType: NotificationType;
  ActionType: ActionType;
  ActionThreshold: ActionThreshold;
  Definition: Definition;
  ExecutionRoleArn: string;
  ApprovalModel: ApprovalModel;
  Status: ActionStatus;
  Subscribers: Subscriber[];
}
function toAction(root: JSONValue): Action {
  return prt.readObj({
    required: {
      "ActionId": "s",
      "BudgetName": "s",
      "NotificationType": toNotificationType,
      "ActionType": toActionType,
      "ActionThreshold": toActionThreshold,
      "Definition": toDefinition,
      "ExecutionRoleArn": "s",
      "ApprovalModel": toApprovalModel,
      "Status": toActionStatus,
      "Subscribers": [toSubscriber],
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: output, named, enum
export type ActionStatus =
| "STANDBY"
| "PENDING"
| "EXECUTION_IN_PROGRESS"
| "EXECUTION_SUCCESS"
| "EXECUTION_FAILURE"
| "REVERSE_IN_PROGRESS"
| "REVERSE_SUCCESS"
| "REVERSE_FAILURE"
| "RESET_IN_PROGRESS"
| "RESET_FAILURE"
;
function toActionStatus(root: JSONValue): ActionStatus | null {
  return ( false
    || root == "STANDBY"
    || root == "PENDING"
    || root == "EXECUTION_IN_PROGRESS"
    || root == "EXECUTION_SUCCESS"
    || root == "EXECUTION_FAILURE"
    || root == "REVERSE_IN_PROGRESS"
    || root == "REVERSE_SUCCESS"
    || root == "REVERSE_FAILURE"
    || root == "RESET_IN_PROGRESS"
    || root == "RESET_FAILURE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ActionHistory {
  Timestamp: Date | number;
  Status: ActionStatus;
  EventType: EventType;
  ActionHistoryDetails: ActionHistoryDetails;
}
function toActionHistory(root: JSONValue): ActionHistory {
  return prt.readObj({
    required: {
      "Timestamp": "d",
      "Status": toActionStatus,
      "EventType": toEventType,
      "ActionHistoryDetails": toActionHistoryDetails,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EventType =
| "SYSTEM"
| "CREATE_ACTION"
| "DELETE_ACTION"
| "UPDATE_ACTION"
| "EXECUTE_ACTION"
;
function toEventType(root: JSONValue): EventType | null {
  return ( false
    || root == "SYSTEM"
    || root == "CREATE_ACTION"
    || root == "DELETE_ACTION"
    || root == "UPDATE_ACTION"
    || root == "EXECUTE_ACTION"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ActionHistoryDetails {
  Message: string;
  Action: Action;
}
function toActionHistoryDetails(root: JSONValue): ActionHistoryDetails {
  return prt.readObj({
    required: {
      "Message": "s",
      "Action": toAction,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BudgetPerformanceHistory {
  BudgetName?: string | null;
  BudgetType?: BudgetType | null;
  CostFilters?: { [key: string]: string[] } | null;
  CostTypes?: CostTypes | null;
  TimeUnit?: TimeUnit | null;
  BudgetedAndActualAmountsList?: BudgetedAndActualAmounts[] | null;
}
function toBudgetPerformanceHistory(root: JSONValue): BudgetPerformanceHistory {
  return prt.readObj({
    required: {},
    optional: {
      "BudgetName": "s",
      "BudgetType": toBudgetType,
      "CostFilters": x => prt.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "CostTypes": toCostTypes,
      "TimeUnit": toTimeUnit,
      "BudgetedAndActualAmountsList": [toBudgetedAndActualAmounts],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BudgetedAndActualAmounts {
  BudgetedAmount?: Spend | null;
  ActualAmount?: Spend | null;
  TimePeriod?: TimePeriod | null;
}
function toBudgetedAndActualAmounts(root: JSONValue): BudgetedAndActualAmounts {
  return prt.readObj({
    required: {},
    optional: {
      "BudgetedAmount": toSpend,
      "ActualAmount": toSpend,
      "TimePeriod": toTimePeriod,
    },
  }, root);
}
