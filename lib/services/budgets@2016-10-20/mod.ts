// Autogenerated API client for: AWS Budgets

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Budgets {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Budgets.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-10-20",
    "endpointPrefix": "budgets",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWSBudgets",
    "serviceFullName": "AWS Budgets",
    "serviceId": "Budgets",
    "signatureVersion": "v4",
    "targetPrefix": "AWSBudgetServiceGateway",
    "uid": "budgets-2016-10-20"
  };

  async createBudget(
    {abortSignal, ...params}: RequestConfig & CreateBudgetRequest,
  ): Promise<CreateBudgetResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      Budget: fromBudget(params["Budget"]),
      NotificationsWithSubscribers: params["NotificationsWithSubscribers"]?.map(x => fromNotificationWithSubscribers(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBudget",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createBudgetAction(
    {abortSignal, ...params}: RequestConfig & CreateBudgetActionRequest,
  ): Promise<CreateBudgetActionResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      NotificationType: params["NotificationType"],
      ActionType: params["ActionType"],
      ActionThreshold: fromActionThreshold(params["ActionThreshold"]),
      Definition: fromDefinition(params["Definition"]),
      ExecutionRoleArn: params["ExecutionRoleArn"],
      ApprovalModel: params["ApprovalModel"],
      Subscribers: params["Subscribers"]?.map(x => fromSubscriber(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBudgetAction",
    });
    return jsonP.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "ActionId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createNotification(
    {abortSignal, ...params}: RequestConfig & CreateNotificationRequest,
  ): Promise<CreateNotificationResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      Notification: fromNotification(params["Notification"]),
      Subscribers: params["Subscribers"]?.map(x => fromSubscriber(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNotification",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createSubscriber(
    {abortSignal, ...params}: RequestConfig & CreateSubscriberRequest,
  ): Promise<CreateSubscriberResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      Notification: fromNotification(params["Notification"]),
      Subscriber: fromSubscriber(params["Subscriber"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSubscriber",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteBudget(
    {abortSignal, ...params}: RequestConfig & DeleteBudgetRequest,
  ): Promise<DeleteBudgetResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBudget",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteBudgetAction(
    {abortSignal, ...params}: RequestConfig & DeleteBudgetActionRequest,
  ): Promise<DeleteBudgetActionResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      ActionId: params["ActionId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBudgetAction",
    });
    return jsonP.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "Action": toAction,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteNotification(
    {abortSignal, ...params}: RequestConfig & DeleteNotificationRequest,
  ): Promise<DeleteNotificationResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      Notification: fromNotification(params["Notification"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNotification",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSubscriber(
    {abortSignal, ...params}: RequestConfig & DeleteSubscriberRequest,
  ): Promise<DeleteSubscriberResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      Notification: fromNotification(params["Notification"]),
      Subscriber: fromSubscriber(params["Subscriber"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSubscriber",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeBudget(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetRequest,
  ): Promise<DescribeBudgetResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudget",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Budget": toBudget,
      },
    }, await resp.json());
  }

  async describeBudgetAction(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionRequest,
  ): Promise<DescribeBudgetActionResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      ActionId: params["ActionId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetAction",
    });
    return jsonP.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "Action": toAction,
      },
      optional: {},
    }, await resp.json());
  }

  async describeBudgetActionHistories(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionHistoriesRequest,
  ): Promise<DescribeBudgetActionHistoriesResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      ActionId: params["ActionId"],
      TimePeriod: fromTimePeriod(params["TimePeriod"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetActionHistories",
    });
    return jsonP.readObj({
      required: {
        "ActionHistories": [toActionHistory],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgetActionsForAccount(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionsForAccountRequest,
  ): Promise<DescribeBudgetActionsForAccountResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetActionsForAccount",
    });
    return jsonP.readObj({
      required: {
        "Actions": [toAction],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgetActionsForBudget(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetActionsForBudgetRequest,
  ): Promise<DescribeBudgetActionsForBudgetResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetActionsForBudget",
    });
    return jsonP.readObj({
      required: {
        "Actions": [toAction],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgetPerformanceHistory(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetPerformanceHistoryRequest,
  ): Promise<DescribeBudgetPerformanceHistoryResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      TimePeriod: fromTimePeriod(params["TimePeriod"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgetPerformanceHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BudgetPerformanceHistory": toBudgetPerformanceHistory,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBudgets(
    {abortSignal, ...params}: RequestConfig & DescribeBudgetsRequest,
  ): Promise<DescribeBudgetsResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBudgets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Budgets": [toBudget],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeNotificationsForBudget(
    {abortSignal, ...params}: RequestConfig & DescribeNotificationsForBudgetRequest,
  ): Promise<DescribeNotificationsForBudgetResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeNotificationsForBudget",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Notifications": [toNotification],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeSubscribersForNotification(
    {abortSignal, ...params}: RequestConfig & DescribeSubscribersForNotificationRequest,
  ): Promise<DescribeSubscribersForNotificationResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      Notification: fromNotification(params["Notification"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSubscribersForNotification",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Subscribers": [toSubscriber],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async executeBudgetAction(
    {abortSignal, ...params}: RequestConfig & ExecuteBudgetActionRequest,
  ): Promise<ExecuteBudgetActionResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      ActionId: params["ActionId"],
      ExecutionType: params["ExecutionType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExecuteBudgetAction",
    });
    return jsonP.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "ActionId": "s",
        "ExecutionType": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionType>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async updateBudget(
    {abortSignal, ...params}: RequestConfig & UpdateBudgetRequest,
  ): Promise<UpdateBudgetResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      NewBudget: fromBudget(params["NewBudget"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBudget",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateBudgetAction(
    {abortSignal, ...params}: RequestConfig & UpdateBudgetActionRequest,
  ): Promise<UpdateBudgetActionResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      ActionId: params["ActionId"],
      NotificationType: params["NotificationType"],
      ActionThreshold: fromActionThreshold(params["ActionThreshold"]),
      Definition: fromDefinition(params["Definition"]),
      ExecutionRoleArn: params["ExecutionRoleArn"],
      ApprovalModel: params["ApprovalModel"],
      Subscribers: params["Subscribers"]?.map(x => fromSubscriber(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBudgetAction",
    });
    return jsonP.readObj({
      required: {
        "AccountId": "s",
        "BudgetName": "s",
        "OldAction": toAction,
        "NewAction": toAction,
      },
      optional: {},
    }, await resp.json());
  }

  async updateNotification(
    {abortSignal, ...params}: RequestConfig & UpdateNotificationRequest,
  ): Promise<UpdateNotificationResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      OldNotification: fromNotification(params["OldNotification"]),
      NewNotification: fromNotification(params["NewNotification"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNotification",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSubscriber(
    {abortSignal, ...params}: RequestConfig & UpdateSubscriberRequest,
  ): Promise<UpdateSubscriberResponse> {
    const body: jsonP.JSONObject = params ? {
      AccountId: params["AccountId"],
      BudgetName: params["BudgetName"],
      Notification: fromNotification(params["Notification"]),
      OldSubscriber: fromSubscriber(params["OldSubscriber"]),
      NewSubscriber: fromSubscriber(params["NewSubscriber"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSubscriber",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateBudgetRequest {
  AccountId: string;
  Budget: Budget;
  NotificationsWithSubscribers?: NotificationWithSubscribers[] | null;
}

// refs: 1 - tags: named, input
export interface CreateBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  NotificationType: NotificationType;
  ActionType: ActionType;
  ActionThreshold: ActionThreshold;
  Definition: Definition;
  ExecutionRoleArn: string;
  ApprovalModel: ApprovalModel;
  Subscribers: Subscriber[];
}

// refs: 1 - tags: named, input
export interface CreateNotificationRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  Subscribers: Subscriber[];
}

// refs: 1 - tags: named, input
export interface CreateSubscriberRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  Subscriber: Subscriber;
}

// refs: 1 - tags: named, input
export interface DeleteBudgetRequest {
  AccountId: string;
  BudgetName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteNotificationRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
}

// refs: 1 - tags: named, input
export interface DeleteSubscriberRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  Subscriber: Subscriber;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetRequest {
  AccountId: string;
  BudgetName: string;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionHistoriesRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  TimePeriod?: TimePeriod | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionsForAccountRequest {
  AccountId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetActionsForBudgetRequest {
  AccountId: string;
  BudgetName: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetPerformanceHistoryRequest {
  AccountId: string;
  BudgetName: string;
  TimePeriod?: TimePeriod | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBudgetsRequest {
  AccountId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeNotificationsForBudgetRequest {
  AccountId: string;
  BudgetName: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeSubscribersForNotificationRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ExecuteBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  ExecutionType: ExecutionType;
}

// refs: 1 - tags: named, input
export interface UpdateBudgetRequest {
  AccountId: string;
  NewBudget: Budget;
}

// refs: 1 - tags: named, input
export interface UpdateBudgetActionRequest {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  NotificationType?: NotificationType | null;
  ActionThreshold?: ActionThreshold | null;
  Definition?: Definition | null;
  ExecutionRoleArn?: string | null;
  ApprovalModel?: ApprovalModel | null;
  Subscribers?: Subscriber[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateNotificationRequest {
  AccountId: string;
  BudgetName: string;
  OldNotification: Notification;
  NewNotification: Notification;
}

// refs: 1 - tags: named, input
export interface UpdateSubscriberRequest {
  AccountId: string;
  BudgetName: string;
  Notification: Notification;
  OldSubscriber: Subscriber;
  NewSubscriber: Subscriber;
}

// refs: 1 - tags: named, output
export interface CreateBudgetResponse {
}

// refs: 1 - tags: named, output
export interface CreateBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
}

// refs: 1 - tags: named, output
export interface CreateNotificationResponse {
}

// refs: 1 - tags: named, output
export interface CreateSubscriberResponse {
}

// refs: 1 - tags: named, output
export interface DeleteBudgetResponse {
}

// refs: 1 - tags: named, output
export interface DeleteBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  Action: Action;
}

// refs: 1 - tags: named, output
export interface DeleteNotificationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSubscriberResponse {
}

// refs: 1 - tags: named, output
export interface DescribeBudgetResponse {
  Budget?: Budget | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  Action: Action;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionHistoriesResponse {
  ActionHistories: ActionHistory[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionsForAccountResponse {
  Actions: Action[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetActionsForBudgetResponse {
  Actions: Action[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetPerformanceHistoryResponse {
  BudgetPerformanceHistory?: BudgetPerformanceHistory | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBudgetsResponse {
  Budgets?: Budget[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeNotificationsForBudgetResponse {
  Notifications?: Notification[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSubscribersForNotificationResponse {
  Subscribers?: Subscriber[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ExecuteBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  ActionId: string;
  ExecutionType: ExecutionType;
}

// refs: 1 - tags: named, output
export interface UpdateBudgetResponse {
}

// refs: 1 - tags: named, output
export interface UpdateBudgetActionResponse {
  AccountId: string;
  BudgetName: string;
  OldAction: Action;
  NewAction: Action;
}

// refs: 1 - tags: named, output
export interface UpdateNotificationResponse {
}

// refs: 1 - tags: named, output
export interface UpdateSubscriberResponse {
}

// refs: 4 - tags: input, named, interface, output
export interface Budget {
  BudgetName: string;
  BudgetLimit?: Spend | null;
  PlannedBudgetLimits?: { [key: string]: Spend | null | undefined } | null;
  CostFilters?: { [key: string]: string[] | null | undefined } | null;
  CostTypes?: CostTypes | null;
  TimeUnit: TimeUnit;
  TimePeriod?: TimePeriod | null;
  CalculatedSpend?: CalculatedSpend | null;
  BudgetType: BudgetType;
  LastUpdatedTime?: Date | number | null;
}
function fromBudget(input?: Budget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BudgetName: input["BudgetName"],
    BudgetLimit: fromSpend(input["BudgetLimit"]),
    PlannedBudgetLimits: jsonP.serializeMap(input["PlannedBudgetLimits"], x => fromSpend(x)),
    CostFilters: input["CostFilters"],
    CostTypes: fromCostTypes(input["CostTypes"]),
    TimeUnit: input["TimeUnit"],
    TimePeriod: fromTimePeriod(input["TimePeriod"]),
    CalculatedSpend: fromCalculatedSpend(input["CalculatedSpend"]),
    BudgetType: input["BudgetType"],
    LastUpdatedTime: jsonP.serializeDate_unixTimestamp(input["LastUpdatedTime"]),
  }
}
function toBudget(root: jsonP.JSONValue): Budget {
  return jsonP.readObj({
    required: {
      "BudgetName": "s",
      "TimeUnit": (x: jsonP.JSONValue) => cmnP.readEnum<TimeUnit>(x),
      "BudgetType": (x: jsonP.JSONValue) => cmnP.readEnum<BudgetType>(x),
    },
    optional: {
      "BudgetLimit": toSpend,
      "PlannedBudgetLimits": x => jsonP.readMap(String, toSpend, x),
      "CostFilters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "CostTypes": toCostTypes,
      "TimePeriod": toTimePeriod,
      "CalculatedSpend": toCalculatedSpend,
      "LastUpdatedTime": "d",
    },
  }, root);
}

// refs: 18 - tags: input, named, interface, output
export interface Spend {
  Amount: string;
  Unit: string;
}
function fromSpend(input?: Spend | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Amount: input["Amount"],
    Unit: input["Unit"],
  }
}
function toSpend(root: jsonP.JSONValue): Spend {
  return jsonP.readObj({
    required: {
      "Amount": "s",
      "Unit": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface CostTypes {
  IncludeTax?: boolean | null;
  IncludeSubscription?: boolean | null;
  UseBlended?: boolean | null;
  IncludeRefund?: boolean | null;
  IncludeCredit?: boolean | null;
  IncludeUpfront?: boolean | null;
  IncludeRecurring?: boolean | null;
  IncludeOtherSubscription?: boolean | null;
  IncludeSupport?: boolean | null;
  IncludeDiscount?: boolean | null;
  UseAmortized?: boolean | null;
}
function fromCostTypes(input?: CostTypes | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IncludeTax: input["IncludeTax"],
    IncludeSubscription: input["IncludeSubscription"],
    UseBlended: input["UseBlended"],
    IncludeRefund: input["IncludeRefund"],
    IncludeCredit: input["IncludeCredit"],
    IncludeUpfront: input["IncludeUpfront"],
    IncludeRecurring: input["IncludeRecurring"],
    IncludeOtherSubscription: input["IncludeOtherSubscription"],
    IncludeSupport: input["IncludeSupport"],
    IncludeDiscount: input["IncludeDiscount"],
    UseAmortized: input["UseAmortized"],
  }
}
function toCostTypes(root: jsonP.JSONValue): CostTypes {
  return jsonP.readObj({
    required: {},
    optional: {
      "IncludeTax": "b",
      "IncludeSubscription": "b",
      "UseBlended": "b",
      "IncludeRefund": "b",
      "IncludeCredit": "b",
      "IncludeUpfront": "b",
      "IncludeRecurring": "b",
      "IncludeOtherSubscription": "b",
      "IncludeSupport": "b",
      "IncludeDiscount": "b",
      "UseAmortized": "b",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type TimeUnit =
| "DAILY"
| "MONTHLY"
| "QUARTERLY"
| "ANNUALLY"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface TimePeriod {
  Start?: Date | number | null;
  End?: Date | number | null;
}
function fromTimePeriod(input?: TimePeriod | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Start: jsonP.serializeDate_unixTimestamp(input["Start"]),
    End: jsonP.serializeDate_unixTimestamp(input["End"]),
  }
}
function toTimePeriod(root: jsonP.JSONValue): TimePeriod {
  return jsonP.readObj({
    required: {},
    optional: {
      "Start": "d",
      "End": "d",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CalculatedSpend {
  ActualSpend: Spend;
  ForecastedSpend?: Spend | null;
}
function fromCalculatedSpend(input?: CalculatedSpend | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ActualSpend: fromSpend(input["ActualSpend"]),
    ForecastedSpend: fromSpend(input["ForecastedSpend"]),
  }
}
function toCalculatedSpend(root: jsonP.JSONValue): CalculatedSpend {
  return jsonP.readObj({
    required: {
      "ActualSpend": toSpend,
    },
    optional: {
      "ForecastedSpend": toSpend,
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type BudgetType =
| "USAGE"
| "COST"
| "RI_UTILIZATION"
| "RI_COVERAGE"
| "SAVINGS_PLANS_UTILIZATION"
| "SAVINGS_PLANS_COVERAGE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface NotificationWithSubscribers {
  Notification: Notification;
  Subscribers: Subscriber[];
}
function fromNotificationWithSubscribers(input?: NotificationWithSubscribers | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Notification: fromNotification(input["Notification"]),
    Subscribers: input["Subscribers"]?.map(x => fromSubscriber(x)),
  }
}

// refs: 10 - tags: input, named, interface, output
export interface Notification {
  NotificationType: NotificationType;
  ComparisonOperator: ComparisonOperator;
  Threshold: number;
  ThresholdType?: ThresholdType | null;
  NotificationState?: NotificationState | null;
}
function fromNotification(input?: Notification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NotificationType: input["NotificationType"],
    ComparisonOperator: input["ComparisonOperator"],
    Threshold: input["Threshold"],
    ThresholdType: input["ThresholdType"],
    NotificationState: input["NotificationState"],
  }
}
function toNotification(root: jsonP.JSONValue): Notification {
  return jsonP.readObj({
    required: {
      "NotificationType": (x: jsonP.JSONValue) => cmnP.readEnum<NotificationType>(x),
      "ComparisonOperator": (x: jsonP.JSONValue) => cmnP.readEnum<ComparisonOperator>(x),
      "Threshold": "n",
    },
    optional: {
      "ThresholdType": (x: jsonP.JSONValue) => cmnP.readEnum<ThresholdType>(x),
      "NotificationState": (x: jsonP.JSONValue) => cmnP.readEnum<NotificationState>(x),
    },
  }, root);
}

// refs: 19 - tags: input, named, enum, output
export type NotificationType =
| "ACTUAL"
| "FORECASTED"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: input, named, enum, output
export type ComparisonOperator =
| "GREATER_THAN"
| "LESS_THAN"
| "EQUAL_TO"
| cmnP.UnexpectedEnumValue;

// refs: 19 - tags: input, named, enum, output
export type ThresholdType =
| "PERCENTAGE"
| "ABSOLUTE_VALUE"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: input, named, enum, output
export type NotificationState =
| "OK"
| "ALARM"
| cmnP.UnexpectedEnumValue;

// refs: 16 - tags: input, named, interface, output
export interface Subscriber {
  SubscriptionType: SubscriptionType;
  Address: string;
}
function fromSubscriber(input?: Subscriber | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubscriptionType: input["SubscriptionType"],
    Address: input["Address"],
  }
}
function toSubscriber(root: jsonP.JSONValue): Subscriber {
  return jsonP.readObj({
    required: {
      "SubscriptionType": (x: jsonP.JSONValue) => cmnP.readEnum<SubscriptionType>(x),
      "Address": "s",
    },
    optional: {},
  }, root);
}

// refs: 16 - tags: input, named, enum, output
export type SubscriptionType =
| "SNS"
| "EMAIL"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, enum, output
export type ActionType =
| "APPLY_IAM_POLICY"
| "APPLY_SCP_POLICY"
| "RUN_SSM_DOCUMENTS"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, interface, output
export interface ActionThreshold {
  ActionThresholdValue: number;
  ActionThresholdType: ThresholdType;
}
function fromActionThreshold(input?: ActionThreshold | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ActionThresholdValue: input["ActionThresholdValue"],
    ActionThresholdType: input["ActionThresholdType"],
  }
}
function toActionThreshold(root: jsonP.JSONValue): ActionThreshold {
  return jsonP.readObj({
    required: {
      "ActionThresholdValue": "n",
      "ActionThresholdType": (x: jsonP.JSONValue) => cmnP.readEnum<ThresholdType>(x),
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface Definition {
  IamActionDefinition?: IamActionDefinition | null;
  ScpActionDefinition?: ScpActionDefinition | null;
  SsmActionDefinition?: SsmActionDefinition | null;
}
function fromDefinition(input?: Definition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IamActionDefinition: fromIamActionDefinition(input["IamActionDefinition"]),
    ScpActionDefinition: fromScpActionDefinition(input["ScpActionDefinition"]),
    SsmActionDefinition: fromSsmActionDefinition(input["SsmActionDefinition"]),
  }
}
function toDefinition(root: jsonP.JSONValue): Definition {
  return jsonP.readObj({
    required: {},
    optional: {
      "IamActionDefinition": toIamActionDefinition,
      "ScpActionDefinition": toScpActionDefinition,
      "SsmActionDefinition": toSsmActionDefinition,
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface IamActionDefinition {
  PolicyArn: string;
  Roles?: string[] | null;
  Groups?: string[] | null;
  Users?: string[] | null;
}
function fromIamActionDefinition(input?: IamActionDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PolicyArn: input["PolicyArn"],
    Roles: input["Roles"],
    Groups: input["Groups"],
    Users: input["Users"],
  }
}
function toIamActionDefinition(root: jsonP.JSONValue): IamActionDefinition {
  return jsonP.readObj({
    required: {
      "PolicyArn": "s",
    },
    optional: {
      "Roles": ["s"],
      "Groups": ["s"],
      "Users": ["s"],
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface ScpActionDefinition {
  PolicyId: string;
  TargetIds: string[];
}
function fromScpActionDefinition(input?: ScpActionDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PolicyId: input["PolicyId"],
    TargetIds: input["TargetIds"],
  }
}
function toScpActionDefinition(root: jsonP.JSONValue): ScpActionDefinition {
  return jsonP.readObj({
    required: {
      "PolicyId": "s",
      "TargetIds": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface SsmActionDefinition {
  ActionSubType: ActionSubType;
  Region: string;
  InstanceIds: string[];
}
function fromSsmActionDefinition(input?: SsmActionDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ActionSubType: input["ActionSubType"],
    Region: input["Region"],
    InstanceIds: input["InstanceIds"],
  }
}
function toSsmActionDefinition(root: jsonP.JSONValue): SsmActionDefinition {
  return jsonP.readObj({
    required: {
      "ActionSubType": (x: jsonP.JSONValue) => cmnP.readEnum<ActionSubType>(x),
      "Region": "s",
      "InstanceIds": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type ActionSubType =
| "STOP_EC2_INSTANCES"
| "STOP_RDS_INSTANCES"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type ApprovalModel =
| "AUTOMATIC"
| "MANUAL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ExecutionType =
| "APPROVE_BUDGET_ACTION"
| "RETRY_BUDGET_ACTION"
| "REVERSE_BUDGET_ACTION"
| "RESET_BUDGET_ACTION"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: output, named, interface
export interface Action {
  ActionId: string;
  BudgetName: string;
  NotificationType: NotificationType;
  ActionType: ActionType;
  ActionThreshold: ActionThreshold;
  Definition: Definition;
  ExecutionRoleArn: string;
  ApprovalModel: ApprovalModel;
  Status: ActionStatus;
  Subscribers: Subscriber[];
}
function toAction(root: jsonP.JSONValue): Action {
  return jsonP.readObj({
    required: {
      "ActionId": "s",
      "BudgetName": "s",
      "NotificationType": (x: jsonP.JSONValue) => cmnP.readEnum<NotificationType>(x),
      "ActionType": (x: jsonP.JSONValue) => cmnP.readEnum<ActionType>(x),
      "ActionThreshold": toActionThreshold,
      "Definition": toDefinition,
      "ExecutionRoleArn": "s",
      "ApprovalModel": (x: jsonP.JSONValue) => cmnP.readEnum<ApprovalModel>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ActionStatus>(x),
      "Subscribers": [toSubscriber],
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: output, named, enum
export type ActionStatus =
| "STANDBY"
| "PENDING"
| "EXECUTION_IN_PROGRESS"
| "EXECUTION_SUCCESS"
| "EXECUTION_FAILURE"
| "REVERSE_IN_PROGRESS"
| "REVERSE_SUCCESS"
| "REVERSE_FAILURE"
| "RESET_IN_PROGRESS"
| "RESET_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ActionHistory {
  Timestamp: Date | number;
  Status: ActionStatus;
  EventType: EventType;
  ActionHistoryDetails: ActionHistoryDetails;
}
function toActionHistory(root: jsonP.JSONValue): ActionHistory {
  return jsonP.readObj({
    required: {
      "Timestamp": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ActionStatus>(x),
      "EventType": (x: jsonP.JSONValue) => cmnP.readEnum<EventType>(x),
      "ActionHistoryDetails": toActionHistoryDetails,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EventType =
| "SYSTEM"
| "CREATE_ACTION"
| "DELETE_ACTION"
| "UPDATE_ACTION"
| "EXECUTE_ACTION"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ActionHistoryDetails {
  Message: string;
  Action: Action;
}
function toActionHistoryDetails(root: jsonP.JSONValue): ActionHistoryDetails {
  return jsonP.readObj({
    required: {
      "Message": "s",
      "Action": toAction,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BudgetPerformanceHistory {
  BudgetName?: string | null;
  BudgetType?: BudgetType | null;
  CostFilters?: { [key: string]: string[] | null | undefined } | null;
  CostTypes?: CostTypes | null;
  TimeUnit?: TimeUnit | null;
  BudgetedAndActualAmountsList?: BudgetedAndActualAmounts[] | null;
}
function toBudgetPerformanceHistory(root: jsonP.JSONValue): BudgetPerformanceHistory {
  return jsonP.readObj({
    required: {},
    optional: {
      "BudgetName": "s",
      "BudgetType": (x: jsonP.JSONValue) => cmnP.readEnum<BudgetType>(x),
      "CostFilters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "CostTypes": toCostTypes,
      "TimeUnit": (x: jsonP.JSONValue) => cmnP.readEnum<TimeUnit>(x),
      "BudgetedAndActualAmountsList": [toBudgetedAndActualAmounts],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BudgetedAndActualAmounts {
  BudgetedAmount?: Spend | null;
  ActualAmount?: Spend | null;
  TimePeriod?: TimePeriod | null;
}
function toBudgetedAndActualAmounts(root: jsonP.JSONValue): BudgetedAndActualAmounts {
  return jsonP.readObj({
    required: {},
    optional: {
      "BudgetedAmount": toSpend,
      "ActualAmount": toSpend,
      "TimePeriod": toTimePeriod,
    },
  }, root);
}
