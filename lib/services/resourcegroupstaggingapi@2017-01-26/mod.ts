// Autogenerated API client for: AWS Resource Groups Tagging API

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class ResourceGroupsTaggingAPI {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ResourceGroupsTaggingAPI.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-01-26",
    "endpointPrefix": "tagging",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Resource Groups Tagging API",
    "serviceId": "Resource Groups Tagging API",
    "signatureVersion": "v4",
    "targetPrefix": "ResourceGroupsTaggingAPI_20170126",
    "uid": "resourcegroupstaggingapi-2017-01-26"
  };

  async describeReportCreation(
    {abortSignal, ...params}: RequestConfig & DescribeReportCreationInput = {},
  ): Promise<DescribeReportCreationOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeReportCreation",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Status": "s",
        "S3Location": "s",
        "ErrorMessage": "s",
      },
    }, await resp.json());
  }

  async getComplianceSummary(
    {abortSignal, ...params}: RequestConfig & GetComplianceSummaryInput = {},
  ): Promise<GetComplianceSummaryOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceSummary",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SummaryList": [toSummary],
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async getResources(
    {abortSignal, ...params}: RequestConfig & GetResourcesInput = {},
  ): Promise<GetResourcesOutput> {
    const body: JSONObject = {...params,
    TagFilters: params["TagFilters"]?.map(x => fromTagFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResources",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PaginationToken": "s",
        "ResourceTagMappingList": [toResourceTagMapping],
      },
    }, await resp.json());
  }

  async getTagKeys(
    {abortSignal, ...params}: RequestConfig & GetTagKeysInput = {},
  ): Promise<GetTagKeysOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTagKeys",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PaginationToken": "s",
        "TagKeys": ["s"],
      },
    }, await resp.json());
  }

  async getTagValues(
    {abortSignal, ...params}: RequestConfig & GetTagValuesInput,
  ): Promise<GetTagValuesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTagValues",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PaginationToken": "s",
        "TagValues": ["s"],
      },
    }, await resp.json());
  }

  async startReportCreation(
    {abortSignal, ...params}: RequestConfig & StartReportCreationInput,
  ): Promise<StartReportCreationOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartReportCreation",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResources(
    {abortSignal, ...params}: RequestConfig & TagResourcesInput,
  ): Promise<TagResourcesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResources",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FailedResourcesMap": x => prt.readMap(String, toFailureInfo, x),
      },
    }, await resp.json());
  }

  async untagResources(
    {abortSignal, ...params}: RequestConfig & UntagResourcesInput,
  ): Promise<UntagResourcesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResources",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FailedResourcesMap": x => prt.readMap(String, toFailureInfo, x),
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DescribeReportCreationInput {
}

// refs: 1 - tags: named, input
export interface GetComplianceSummaryInput {
  TargetIdFilters?: string[] | null;
  RegionFilters?: string[] | null;
  ResourceTypeFilters?: string[] | null;
  TagKeyFilters?: string[] | null;
  GroupBy?: GroupByAttribute[] | null;
  MaxResults?: number | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetResourcesInput {
  PaginationToken?: string | null;
  TagFilters?: TagFilter[] | null;
  ResourcesPerPage?: number | null;
  TagsPerPage?: number | null;
  ResourceTypeFilters?: string[] | null;
  IncludeComplianceDetails?: boolean | null;
  ExcludeCompliantResources?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetTagKeysInput {
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetTagValuesInput {
  PaginationToken?: string | null;
  Key: string;
}

// refs: 1 - tags: named, input
export interface StartReportCreationInput {
  S3Bucket: string;
}

// refs: 1 - tags: named, input
export interface TagResourcesInput {
  ResourceARNList: string[];
  Tags: { [key: string]: string };
}

// refs: 1 - tags: named, input
export interface UntagResourcesInput {
  ResourceARNList: string[];
  TagKeys: string[];
}

// refs: 1 - tags: named, output
export interface DescribeReportCreationOutput {
  Status?: string | null;
  S3Location?: string | null;
  ErrorMessage?: string | null;
}

// refs: 1 - tags: named, output
export interface GetComplianceSummaryOutput {
  SummaryList?: Summary[] | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourcesOutput {
  PaginationToken?: string | null;
  ResourceTagMappingList?: ResourceTagMapping[] | null;
}

// refs: 1 - tags: named, output
export interface GetTagKeysOutput {
  PaginationToken?: string | null;
  TagKeys?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetTagValuesOutput {
  PaginationToken?: string | null;
  TagValues?: string[] | null;
}

// refs: 1 - tags: named, output
export interface StartReportCreationOutput {
}

// refs: 1 - tags: named, output
export interface TagResourcesOutput {
  FailedResourcesMap?: { [key: string]: FailureInfo } | null;
}

// refs: 1 - tags: named, output
export interface UntagResourcesOutput {
  FailedResourcesMap?: { [key: string]: FailureInfo } | null;
}

// refs: 1 - tags: input, named, enum
export type GroupByAttribute =
| "TARGET_ID"
| "REGION"
| "RESOURCE_TYPE"
;


// refs: 1 - tags: input, named, interface
export interface TagFilter {
  Key?: string | null;
  Values?: string[] | null;
}
function fromTagFilter(input?: TagFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: output, named, interface
export interface Summary {
  LastUpdated?: string | null;
  TargetId?: string | null;
  TargetIdType?: TargetIdType | null;
  Region?: string | null;
  ResourceType?: string | null;
  NonCompliantResources?: number | null;
}
function toSummary(root: JSONValue): Summary {
  return prt.readObj({
    required: {},
    optional: {
      "LastUpdated": "s",
      "TargetId": "s",
      "TargetIdType": toTargetIdType,
      "Region": "s",
      "ResourceType": "s",
      "NonCompliantResources": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type TargetIdType =
| "ACCOUNT"
| "OU"
| "ROOT"
;
function toTargetIdType(root: JSONValue): TargetIdType | null {
  return ( false
    || root == "ACCOUNT"
    || root == "OU"
    || root == "ROOT"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ResourceTagMapping {
  ResourceARN?: string | null;
  Tags?: Tag[] | null;
  ComplianceDetails?: ComplianceDetails | null;
}
function toResourceTagMapping(root: JSONValue): ResourceTagMapping {
  return prt.readObj({
    required: {},
    optional: {
      "ResourceARN": "s",
      "Tags": [toTag],
      "ComplianceDetails": toComplianceDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Tag {
  Key: string;
  Value: string;
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComplianceDetails {
  NoncompliantKeys?: string[] | null;
  KeysWithNoncompliantValues?: string[] | null;
  ComplianceStatus?: boolean | null;
}
function toComplianceDetails(root: JSONValue): ComplianceDetails {
  return prt.readObj({
    required: {},
    optional: {
      "NoncompliantKeys": ["s"],
      "KeysWithNoncompliantValues": ["s"],
      "ComplianceStatus": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface FailureInfo {
  StatusCode?: number | null;
  ErrorCode?: ErrorCode | null;
  ErrorMessage?: string | null;
}
function toFailureInfo(root: JSONValue): FailureInfo {
  return prt.readObj({
    required: {},
    optional: {
      "StatusCode": "n",
      "ErrorCode": toErrorCode,
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ErrorCode =
| "InternalServiceException"
| "InvalidParameterException"
;
function toErrorCode(root: JSONValue): ErrorCode | null {
  return ( false
    || root == "InternalServiceException"
    || root == "InvalidParameterException"
  ) ? root : null;
}
