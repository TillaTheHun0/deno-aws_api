// Autogenerated API client for: AWS Device Farm

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class DeviceFarm {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DeviceFarm.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2015-06-23",
    "endpointPrefix": "devicefarm",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Device Farm",
    "serviceId": "Device Farm",
    "signatureVersion": "v4",
    "targetPrefix": "DeviceFarm_20150623",
    "uid": "devicefarm-2015-06-23"
  };

  async createDevicePool(
    {abortSignal, ...params}: RequestConfig & s.CreateDevicePoolRequest,
  ): Promise<s.CreateDevicePoolResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      description: params["description"],
      rules: params["rules"]?.map(x => fromRule(x)),
      maxDevices: params["maxDevices"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePool": toDevicePool,
      },
    }, await resp.json());
  }

  async createInstanceProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateInstanceProfileRequest,
  ): Promise<s.CreateInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      packageCleanup: params["packageCleanup"],
      excludeAppPackagesFromCleanup: params["excludeAppPackagesFromCleanup"],
      rebootAfterUse: params["rebootAfterUse"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfile": toInstanceProfile,
      },
    }, await resp.json());
  }

  async createNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateNetworkProfileRequest,
  ): Promise<s.CreateNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      description: params["description"],
      type: params["type"],
      uplinkBandwidthBits: params["uplinkBandwidthBits"],
      downlinkBandwidthBits: params["downlinkBandwidthBits"],
      uplinkDelayMs: params["uplinkDelayMs"],
      downlinkDelayMs: params["downlinkDelayMs"],
      uplinkJitterMs: params["uplinkJitterMs"],
      downlinkJitterMs: params["downlinkJitterMs"],
      uplinkLossPercent: params["uplinkLossPercent"],
      downlinkLossPercent: params["downlinkLossPercent"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async createProject(
    {abortSignal, ...params}: RequestConfig & s.CreateProjectRequest,
  ): Promise<s.CreateProjectResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      defaultJobTimeoutMinutes: params["defaultJobTimeoutMinutes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "project": toProject,
      },
    }, await resp.json());
  }

  async createRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & s.CreateRemoteAccessSessionRequest,
  ): Promise<s.CreateRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      deviceArn: params["deviceArn"],
      instanceArn: params["instanceArn"],
      sshPublicKey: params["sshPublicKey"],
      remoteDebugEnabled: params["remoteDebugEnabled"],
      remoteRecordEnabled: params["remoteRecordEnabled"],
      remoteRecordAppArn: params["remoteRecordAppArn"],
      name: params["name"],
      clientId: params["clientId"],
      configuration: fromCreateRemoteAccessSessionConfiguration(params["configuration"]),
      interactionMode: params["interactionMode"],
      skipAppResign: params["skipAppResign"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSession": toRemoteAccessSession,
      },
    }, await resp.json());
  }

  async createTestGridProject(
    {abortSignal, ...params}: RequestConfig & s.CreateTestGridProjectRequest,
  ): Promise<s.CreateTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProject": toTestGridProject,
      },
    }, await resp.json());
  }

  async createTestGridUrl(
    {abortSignal, ...params}: RequestConfig & s.CreateTestGridUrlRequest,
  ): Promise<s.CreateTestGridUrlResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      expiresInSeconds: params["expiresInSeconds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTestGridUrl",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "url": "s",
        "expires": "d",
      },
    }, await resp.json());
  }

  async createUpload(
    {abortSignal, ...params}: RequestConfig & s.CreateUploadRequest,
  ): Promise<s.CreateUploadResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      type: params["type"],
      contentType: params["contentType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "upload": toUpload,
      },
    }, await resp.json());
  }

  async createVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & s.CreateVPCEConfigurationRequest,
  ): Promise<s.CreateVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      vpceConfigurationName: params["vpceConfigurationName"],
      vpceServiceName: params["vpceServiceName"],
      serviceDnsName: params["serviceDnsName"],
      vpceConfigurationDescription: params["vpceConfigurationDescription"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfiguration": toVPCEConfiguration,
      },
    }, await resp.json());
  }

  async deleteDevicePool(
    {abortSignal, ...params}: RequestConfig & s.DeleteDevicePoolRequest,
  ): Promise<s.DeleteDevicePoolResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteInstanceProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteInstanceProfileRequest,
  ): Promise<s.DeleteInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteNetworkProfileRequest,
  ): Promise<s.DeleteNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProject(
    {abortSignal, ...params}: RequestConfig & s.DeleteProjectRequest,
  ): Promise<s.DeleteProjectResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & s.DeleteRemoteAccessSessionRequest,
  ): Promise<s.DeleteRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRun(
    {abortSignal, ...params}: RequestConfig & s.DeleteRunRequest,
  ): Promise<s.DeleteRunResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTestGridProject(
    {abortSignal, ...params}: RequestConfig & s.DeleteTestGridProjectRequest,
  ): Promise<s.DeleteTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUpload(
    {abortSignal, ...params}: RequestConfig & s.DeleteUploadRequest,
  ): Promise<s.DeleteUploadResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteVPCEConfigurationRequest,
  ): Promise<s.DeleteVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccountSettings(
    {abortSignal, ...params}: RequestConfig & s.GetAccountSettingsRequest = {},
  ): Promise<s.GetAccountSettingsResult> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAccountSettings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "accountSettings": toAccountSettings,
      },
    }, await resp.json());
  }

  async getDevice(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceRequest,
  ): Promise<s.GetDeviceResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevice",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "device": toDevice,
      },
    }, await resp.json());
  }

  async getDeviceInstance(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceInstanceRequest,
  ): Promise<s.GetDeviceInstanceResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDeviceInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deviceInstance": toDeviceInstance,
      },
    }, await resp.json());
  }

  async getDevicePool(
    {abortSignal, ...params}: RequestConfig & s.GetDevicePoolRequest,
  ): Promise<s.GetDevicePoolResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePool": toDevicePool,
      },
    }, await resp.json());
  }

  async getDevicePoolCompatibility(
    {abortSignal, ...params}: RequestConfig & s.GetDevicePoolCompatibilityRequest,
  ): Promise<s.GetDevicePoolCompatibilityResult> {
    const body: jsonP.JSONObject = {
      devicePoolArn: params["devicePoolArn"],
      appArn: params["appArn"],
      testType: params["testType"],
      test: fromScheduleRunTest(params["test"]),
      configuration: fromScheduleRunConfiguration(params["configuration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevicePoolCompatibility",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "compatibleDevices": [toDevicePoolCompatibilityResult],
        "incompatibleDevices": [toDevicePoolCompatibilityResult],
      },
    }, await resp.json());
  }

  async getInstanceProfile(
    {abortSignal, ...params}: RequestConfig & s.GetInstanceProfileRequest,
  ): Promise<s.GetInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfile": toInstanceProfile,
      },
    }, await resp.json());
  }

  async getJob(
    {abortSignal, ...params}: RequestConfig & s.GetJobRequest,
  ): Promise<s.GetJobResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "job": toJob,
      },
    }, await resp.json());
  }

  async getNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.GetNetworkProfileRequest,
  ): Promise<s.GetNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async getOfferingStatus(
    {abortSignal, ...params}: RequestConfig & s.GetOfferingStatusRequest = {},
  ): Promise<s.GetOfferingStatusResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOfferingStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "current": x => jsonP.readMap(String, toOfferingStatus, x),
        "nextPeriod": x => jsonP.readMap(String, toOfferingStatus, x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getProject(
    {abortSignal, ...params}: RequestConfig & s.GetProjectRequest,
  ): Promise<s.GetProjectResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "project": toProject,
      },
    }, await resp.json());
  }

  async getRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & s.GetRemoteAccessSessionRequest,
  ): Promise<s.GetRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSession": toRemoteAccessSession,
      },
    }, await resp.json());
  }

  async getRun(
    {abortSignal, ...params}: RequestConfig & s.GetRunRequest,
  ): Promise<s.GetRunResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "run": toRun,
      },
    }, await resp.json());
  }

  async getSuite(
    {abortSignal, ...params}: RequestConfig & s.GetSuiteRequest,
  ): Promise<s.GetSuiteResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSuite",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suite": toSuite,
      },
    }, await resp.json());
  }

  async getTest(
    {abortSignal, ...params}: RequestConfig & s.GetTestRequest,
  ): Promise<s.GetTestResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTest",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "test": toTest,
      },
    }, await resp.json());
  }

  async getTestGridProject(
    {abortSignal, ...params}: RequestConfig & s.GetTestGridProjectRequest,
  ): Promise<s.GetTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProject": toTestGridProject,
      },
    }, await resp.json());
  }

  async getTestGridSession(
    {abortSignal, ...params}: RequestConfig & s.GetTestGridSessionRequest = {},
  ): Promise<s.GetTestGridSessionResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      sessionId: params["sessionId"],
      sessionArn: params["sessionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTestGridSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridSession": toTestGridSession,
      },
    }, await resp.json());
  }

  async getUpload(
    {abortSignal, ...params}: RequestConfig & s.GetUploadRequest,
  ): Promise<s.GetUploadResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "upload": toUpload,
      },
    }, await resp.json());
  }

  async getVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetVPCEConfigurationRequest,
  ): Promise<s.GetVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfiguration": toVPCEConfiguration,
      },
    }, await resp.json());
  }

  async installToRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & s.InstallToRemoteAccessSessionRequest,
  ): Promise<s.InstallToRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      remoteAccessSessionArn: params["remoteAccessSessionArn"],
      appArn: params["appArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InstallToRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "appUpload": toUpload,
      },
    }, await resp.json());
  }

  async listArtifacts(
    {abortSignal, ...params}: RequestConfig & s.ListArtifactsRequest,
  ): Promise<s.ListArtifactsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "artifacts": [toArtifact],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDeviceInstances(
    {abortSignal, ...params}: RequestConfig & s.ListDeviceInstancesRequest = {},
  ): Promise<s.ListDeviceInstancesResult> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDeviceInstances",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deviceInstances": [toDeviceInstance],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDevicePools(
    {abortSignal, ...params}: RequestConfig & s.ListDevicePoolsRequest,
  ): Promise<s.ListDevicePoolsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDevicePools",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePools": [toDevicePool],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDevices(
    {abortSignal, ...params}: RequestConfig & s.ListDevicesRequest = {},
  ): Promise<s.ListDevicesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
      filters: params["filters"]?.map(x => fromDeviceFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDevices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devices": [toDevice],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listInstanceProfiles(
    {abortSignal, ...params}: RequestConfig & s.ListInstanceProfilesRequest = {},
  ): Promise<s.ListInstanceProfilesResult> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInstanceProfiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfiles": [toInstanceProfile],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & s.ListJobsRequest,
  ): Promise<s.ListJobsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobs": [toJob],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listNetworkProfiles(
    {abortSignal, ...params}: RequestConfig & s.ListNetworkProfilesRequest,
  ): Promise<s.ListNetworkProfilesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListNetworkProfiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfiles": [toNetworkProfile],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listOfferingPromotions(
    {abortSignal, ...params}: RequestConfig & s.ListOfferingPromotionsRequest = {},
  ): Promise<s.ListOfferingPromotionsResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOfferingPromotions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringPromotions": [toOfferingPromotion],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listOfferingTransactions(
    {abortSignal, ...params}: RequestConfig & s.ListOfferingTransactionsRequest = {},
  ): Promise<s.ListOfferingTransactionsResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOfferingTransactions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringTransactions": [toOfferingTransaction],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listOfferings(
    {abortSignal, ...params}: RequestConfig & s.ListOfferingsRequest = {},
  ): Promise<s.ListOfferingsResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOfferings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offerings": [toOffering],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listProjects(
    {abortSignal, ...params}: RequestConfig & s.ListProjectsRequest = {},
  ): Promise<s.ListProjectsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProjects",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "projects": [toProject],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRemoteAccessSessions(
    {abortSignal, ...params}: RequestConfig & s.ListRemoteAccessSessionsRequest,
  ): Promise<s.ListRemoteAccessSessionsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRemoteAccessSessions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSessions": [toRemoteAccessSession],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRuns(
    {abortSignal, ...params}: RequestConfig & s.ListRunsRequest,
  ): Promise<s.ListRunsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRuns",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "runs": [toRun],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSamples(
    {abortSignal, ...params}: RequestConfig & s.ListSamplesRequest,
  ): Promise<s.ListSamplesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSamples",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "samples": [toSample],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSuites(
    {abortSignal, ...params}: RequestConfig & s.ListSuitesRequest,
  ): Promise<s.ListSuitesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSuites",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suites": [toSuite],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listTestGridProjects(
    {abortSignal, ...params}: RequestConfig & s.ListTestGridProjectsRequest = {},
  ): Promise<s.ListTestGridProjectsResult> {
    const body: jsonP.JSONObject = {
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridProjects",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProjects": [toTestGridProject],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTestGridSessionActions(
    {abortSignal, ...params}: RequestConfig & s.ListTestGridSessionActionsRequest,
  ): Promise<s.ListTestGridSessionActionsResult> {
    const body: jsonP.JSONObject = {
      sessionArn: params["sessionArn"],
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridSessionActions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "actions": [toTestGridSessionAction],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTestGridSessionArtifacts(
    {abortSignal, ...params}: RequestConfig & s.ListTestGridSessionArtifactsRequest,
  ): Promise<s.ListTestGridSessionArtifactsResult> {
    const body: jsonP.JSONObject = {
      sessionArn: params["sessionArn"],
      type: params["type"],
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridSessionArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "artifacts": [toTestGridSessionArtifact],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTestGridSessions(
    {abortSignal, ...params}: RequestConfig & s.ListTestGridSessionsRequest,
  ): Promise<s.ListTestGridSessionsResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      status: params["status"],
      creationTimeAfter: jsonP.serializeDate_unixTimestamp(params["creationTimeAfter"]),
      creationTimeBefore: jsonP.serializeDate_unixTimestamp(params["creationTimeBefore"]),
      endTimeAfter: jsonP.serializeDate_unixTimestamp(params["endTimeAfter"]),
      endTimeBefore: jsonP.serializeDate_unixTimestamp(params["endTimeBefore"]),
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridSessions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridSessions": [toTestGridSession],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTests(
    {abortSignal, ...params}: RequestConfig & s.ListTestsRequest,
  ): Promise<s.ListTestsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTests",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tests": [toTest],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listUniqueProblems(
    {abortSignal, ...params}: RequestConfig & s.ListUniqueProblemsRequest,
  ): Promise<s.ListUniqueProblemsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUniqueProblems",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "uniqueProblems": x => jsonP.readMap(x => cmnP.readEnumReq<s.ExecutionResult>(x), l => Array.isArray(l) ? l.map(toUniqueProblem) : [], x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listUploads(
    {abortSignal, ...params}: RequestConfig & s.ListUploadsRequest,
  ): Promise<s.ListUploadsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUploads",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "uploads": [toUpload],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listVPCEConfigurations(
    {abortSignal, ...params}: RequestConfig & s.ListVPCEConfigurationsRequest = {},
  ): Promise<s.ListVPCEConfigurationsResult> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListVPCEConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfigurations": [toVPCEConfiguration],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async purchaseOffering(
    {abortSignal, ...params}: RequestConfig & s.PurchaseOfferingRequest = {},
  ): Promise<s.PurchaseOfferingResult> {
    const body: jsonP.JSONObject = {
      offeringId: params["offeringId"],
      quantity: params["quantity"],
      offeringPromotionId: params["offeringPromotionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PurchaseOffering",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringTransaction": toOfferingTransaction,
      },
    }, await resp.json());
  }

  async renewOffering(
    {abortSignal, ...params}: RequestConfig & s.RenewOfferingRequest = {},
  ): Promise<s.RenewOfferingResult> {
    const body: jsonP.JSONObject = {
      offeringId: params["offeringId"],
      quantity: params["quantity"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RenewOffering",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringTransaction": toOfferingTransaction,
      },
    }, await resp.json());
  }

  async scheduleRun(
    {abortSignal, ...params}: RequestConfig & s.ScheduleRunRequest,
  ): Promise<s.ScheduleRunResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      appArn: params["appArn"],
      devicePoolArn: params["devicePoolArn"],
      deviceSelectionConfiguration: fromDeviceSelectionConfiguration(params["deviceSelectionConfiguration"]),
      name: params["name"],
      test: fromScheduleRunTest(params["test"]),
      configuration: fromScheduleRunConfiguration(params["configuration"]),
      executionConfiguration: fromExecutionConfiguration(params["executionConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ScheduleRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "run": toRun,
      },
    }, await resp.json());
  }

  async stopJob(
    {abortSignal, ...params}: RequestConfig & s.StopJobRequest,
  ): Promise<s.StopJobResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "job": toJob,
      },
    }, await resp.json());
  }

  async stopRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & s.StopRemoteAccessSessionRequest,
  ): Promise<s.StopRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSession": toRemoteAccessSession,
      },
    }, await resp.json());
  }

  async stopRun(
    {abortSignal, ...params}: RequestConfig & s.StopRunRequest,
  ): Promise<s.StopRunResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "run": toRun,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDeviceInstance(
    {abortSignal, ...params}: RequestConfig & s.UpdateDeviceInstanceRequest,
  ): Promise<s.UpdateDeviceInstanceResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      profileArn: params["profileArn"],
      labels: params["labels"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeviceInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deviceInstance": toDeviceInstance,
      },
    }, await resp.json());
  }

  async updateDevicePool(
    {abortSignal, ...params}: RequestConfig & s.UpdateDevicePoolRequest,
  ): Promise<s.UpdateDevicePoolResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      description: params["description"],
      rules: params["rules"]?.map(x => fromRule(x)),
      maxDevices: params["maxDevices"],
      clearMaxDevices: params["clearMaxDevices"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePool": toDevicePool,
      },
    }, await resp.json());
  }

  async updateInstanceProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateInstanceProfileRequest,
  ): Promise<s.UpdateInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      description: params["description"],
      packageCleanup: params["packageCleanup"],
      excludeAppPackagesFromCleanup: params["excludeAppPackagesFromCleanup"],
      rebootAfterUse: params["rebootAfterUse"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfile": toInstanceProfile,
      },
    }, await resp.json());
  }

  async updateNetworkProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateNetworkProfileRequest,
  ): Promise<s.UpdateNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      description: params["description"],
      type: params["type"],
      uplinkBandwidthBits: params["uplinkBandwidthBits"],
      downlinkBandwidthBits: params["downlinkBandwidthBits"],
      uplinkDelayMs: params["uplinkDelayMs"],
      downlinkDelayMs: params["downlinkDelayMs"],
      uplinkJitterMs: params["uplinkJitterMs"],
      downlinkJitterMs: params["downlinkJitterMs"],
      uplinkLossPercent: params["uplinkLossPercent"],
      downlinkLossPercent: params["downlinkLossPercent"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async updateProject(
    {abortSignal, ...params}: RequestConfig & s.UpdateProjectRequest,
  ): Promise<s.UpdateProjectResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      defaultJobTimeoutMinutes: params["defaultJobTimeoutMinutes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "project": toProject,
      },
    }, await resp.json());
  }

  async updateTestGridProject(
    {abortSignal, ...params}: RequestConfig & s.UpdateTestGridProjectRequest,
  ): Promise<s.UpdateTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProject": toTestGridProject,
      },
    }, await resp.json());
  }

  async updateUpload(
    {abortSignal, ...params}: RequestConfig & s.UpdateUploadRequest,
  ): Promise<s.UpdateUploadResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      contentType: params["contentType"],
      editContent: params["editContent"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "upload": toUpload,
      },
    }, await resp.json());
  }

  async updateVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateVPCEConfigurationRequest,
  ): Promise<s.UpdateVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      vpceConfigurationName: params["vpceConfigurationName"],
      vpceServiceName: params["vpceServiceName"],
      serviceDnsName: params["serviceDnsName"],
      vpceConfigurationDescription: params["vpceConfigurationDescription"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfiguration": toVPCEConfiguration,
      },
    }, await resp.json());
  }

}

function fromRule(input?: s.Rule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    operator: input["operator"],
    value: input["value"],
  }
}
function toRule(root: jsonP.JSONValue): s.Rule {
  return jsonP.readObj({
    required: {},
    optional: {
      "attribute": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceAttribute>(x),
      "operator": (x: jsonP.JSONValue) => cmnP.readEnum<s.RuleOperator>(x),
      "value": "s",
    },
  }, root);
}

function fromCreateRemoteAccessSessionConfiguration(input?: s.CreateRemoteAccessSessionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    billingMethod: input["billingMethod"],
    vpceConfigurationArns: input["vpceConfigurationArns"],
  }
}

function fromScheduleRunTest(input?: s.ScheduleRunTest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    type: input["type"],
    testPackageArn: input["testPackageArn"],
    testSpecArn: input["testSpecArn"],
    filter: input["filter"],
    parameters: input["parameters"],
  }
}

function fromScheduleRunConfiguration(input?: s.ScheduleRunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    extraDataPackageArn: input["extraDataPackageArn"],
    networkProfileArn: input["networkProfileArn"],
    locale: input["locale"],
    location: fromLocation(input["location"]),
    vpceConfigurationArns: input["vpceConfigurationArns"],
    customerArtifactPaths: fromCustomerArtifactPaths(input["customerArtifactPaths"]),
    radios: fromRadios(input["radios"]),
    auxiliaryApps: input["auxiliaryApps"],
    billingMethod: input["billingMethod"],
  }
}

function fromLocation(input?: s.Location | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    latitude: input["latitude"],
    longitude: input["longitude"],
  }
}
function toLocation(root: jsonP.JSONValue): s.Location {
  return jsonP.readObj({
    required: {
      "latitude": "n",
      "longitude": "n",
    },
    optional: {},
  }, root);
}

function fromCustomerArtifactPaths(input?: s.CustomerArtifactPaths | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    iosPaths: input["iosPaths"],
    androidPaths: input["androidPaths"],
    deviceHostPaths: input["deviceHostPaths"],
  }
}
function toCustomerArtifactPaths(root: jsonP.JSONValue): s.CustomerArtifactPaths {
  return jsonP.readObj({
    required: {},
    optional: {
      "iosPaths": ["s"],
      "androidPaths": ["s"],
      "deviceHostPaths": ["s"],
    },
  }, root);
}

function fromRadios(input?: s.Radios | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    wifi: input["wifi"],
    bluetooth: input["bluetooth"],
    nfc: input["nfc"],
    gps: input["gps"],
  }
}
function toRadios(root: jsonP.JSONValue): s.Radios {
  return jsonP.readObj({
    required: {},
    optional: {
      "wifi": "b",
      "bluetooth": "b",
      "nfc": "b",
      "gps": "b",
    },
  }, root);
}

function fromDeviceFilter(input?: s.DeviceFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    operator: input["operator"],
    values: input["values"],
  }
}
function toDeviceFilter(root: jsonP.JSONValue): s.DeviceFilter {
  return jsonP.readObj({
    required: {},
    optional: {
      "attribute": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceFilterAttribute>(x),
      "operator": (x: jsonP.JSONValue) => cmnP.readEnum<s.RuleOperator>(x),
      "values": ["s"],
    },
  }, root);
}

function fromDeviceSelectionConfiguration(input?: s.DeviceSelectionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    filters: input["filters"]?.map(x => fromDeviceFilter(x)),
    maxDevices: input["maxDevices"],
  }
}

function fromExecutionConfiguration(input?: s.ExecutionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    jobTimeoutMinutes: input["jobTimeoutMinutes"],
    accountsCleanup: input["accountsCleanup"],
    appPackagesCleanup: input["appPackagesCleanup"],
    videoCapture: input["videoCapture"],
    skipAppResign: input["skipAppResign"],
  }
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function toDevicePool(root: jsonP.JSONValue): s.DevicePool {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.DevicePoolType>(x),
      "rules": [toRule],
      "maxDevices": "n",
    },
  }, root);
}

function toInstanceProfile(root: jsonP.JSONValue): s.InstanceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "packageCleanup": "b",
      "excludeAppPackagesFromCleanup": ["s"],
      "rebootAfterUse": "b",
      "name": "s",
      "description": "s",
    },
  }, root);
}

function toNetworkProfile(root: jsonP.JSONValue): s.NetworkProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.NetworkProfileType>(x),
      "uplinkBandwidthBits": "n",
      "downlinkBandwidthBits": "n",
      "uplinkDelayMs": "n",
      "downlinkDelayMs": "n",
      "uplinkJitterMs": "n",
      "downlinkJitterMs": "n",
      "uplinkLossPercent": "n",
      "downlinkLossPercent": "n",
    },
  }, root);
}

function toProject(root: jsonP.JSONValue): s.Project {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "defaultJobTimeoutMinutes": "n",
      "created": "d",
    },
  }, root);
}

function toRemoteAccessSession(root: jsonP.JSONValue): s.RemoteAccessSession {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionResult>(x),
      "message": "s",
      "started": "d",
      "stopped": "d",
      "device": toDevice,
      "instanceArn": "s",
      "remoteDebugEnabled": "b",
      "remoteRecordEnabled": "b",
      "remoteRecordAppArn": "s",
      "hostAddress": "s",
      "clientId": "s",
      "billingMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.BillingMethod>(x),
      "deviceMinutes": toDeviceMinutes,
      "endpoint": "s",
      "deviceUdid": "s",
      "interactionMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.InteractionMode>(x),
      "skipAppResign": "b",
    },
  }, root);
}

function toDevice(root: jsonP.JSONValue): s.Device {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "manufacturer": "s",
      "model": "s",
      "modelId": "s",
      "formFactor": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceFormFactor>(x),
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<s.DevicePlatform>(x),
      "os": "s",
      "cpu": toCPU,
      "resolution": toResolution,
      "heapSize": "n",
      "memory": "n",
      "image": "s",
      "carrier": "s",
      "radio": "s",
      "remoteAccessEnabled": "b",
      "remoteDebugEnabled": "b",
      "fleetType": "s",
      "fleetName": "s",
      "instances": [toDeviceInstance],
      "availability": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceAvailability>(x),
    },
  }, root);
}

function toCPU(root: jsonP.JSONValue): s.CPU {
  return jsonP.readObj({
    required: {},
    optional: {
      "frequency": "s",
      "architecture": "s",
      "clock": "n",
    },
  }, root);
}

function toResolution(root: jsonP.JSONValue): s.Resolution {
  return jsonP.readObj({
    required: {},
    optional: {
      "width": "n",
      "height": "n",
    },
  }, root);
}

function toDeviceInstance(root: jsonP.JSONValue): s.DeviceInstance {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "deviceArn": "s",
      "labels": ["s"],
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.InstanceStatus>(x),
      "udid": "s",
      "instanceProfile": toInstanceProfile,
    },
  }, root);
}

function toDeviceMinutes(root: jsonP.JSONValue): s.DeviceMinutes {
  return jsonP.readObj({
    required: {},
    optional: {
      "total": "n",
      "metered": "n",
      "unmetered": "n",
    },
  }, root);
}

function toTestGridProject(root: jsonP.JSONValue): s.TestGridProject {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "created": "d",
    },
  }, root);
}

function toUpload(root: jsonP.JSONValue): s.Upload {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "created": "d",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.UploadType>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.UploadStatus>(x),
      "url": "s",
      "metadata": "s",
      "contentType": "s",
      "message": "s",
      "category": (x: jsonP.JSONValue) => cmnP.readEnum<s.UploadCategory>(x),
    },
  }, root);
}

function toVPCEConfiguration(root: jsonP.JSONValue): s.VPCEConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "vpceConfigurationName": "s",
      "vpceServiceName": "s",
      "serviceDnsName": "s",
      "vpceConfigurationDescription": "s",
    },
  }, root);
}

function toAccountSettings(root: jsonP.JSONValue): s.AccountSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsAccountNumber": "s",
      "unmeteredDevices": x => jsonP.readMap(x => cmnP.readEnumReq<s.DevicePlatform>(x), Number, x),
      "unmeteredRemoteAccessDevices": x => jsonP.readMap(x => cmnP.readEnumReq<s.DevicePlatform>(x), Number, x),
      "maxJobTimeoutMinutes": "n",
      "trialMinutes": toTrialMinutes,
      "maxSlots": x => jsonP.readMap(String, Number, x),
      "defaultJobTimeoutMinutes": "n",
      "skipAppResign": "b",
    },
  }, root);
}

function toTrialMinutes(root: jsonP.JSONValue): s.TrialMinutes {
  return jsonP.readObj({
    required: {},
    optional: {
      "total": "n",
      "remaining": "n",
    },
  }, root);
}

function toDevicePoolCompatibilityResult(root: jsonP.JSONValue): s.DevicePoolCompatibilityResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "device": toDevice,
      "compatible": "b",
      "incompatibilityMessages": [toIncompatibilityMessage],
    },
  }, root);
}

function toIncompatibilityMessage(root: jsonP.JSONValue): s.IncompatibilityMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "message": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeviceAttribute>(x),
    },
  }, root);
}

function toJob(root: jsonP.JSONValue): s.Job {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.TestType>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "device": toDevice,
      "instanceArn": "s",
      "deviceMinutes": toDeviceMinutes,
      "videoEndpoint": "s",
      "videoCapture": "b",
    },
  }, root);
}

function toCounters(root: jsonP.JSONValue): s.Counters {
  return jsonP.readObj({
    required: {},
    optional: {
      "total": "n",
      "passed": "n",
      "failed": "n",
      "warned": "n",
      "errored": "n",
      "stopped": "n",
      "skipped": "n",
    },
  }, root);
}

function toOfferingStatus(root: jsonP.JSONValue): s.OfferingStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.OfferingTransactionType>(x),
      "offering": toOffering,
      "quantity": "n",
      "effectiveOn": "d",
    },
  }, root);
}

function toOffering(root: jsonP.JSONValue): s.Offering {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "description": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.OfferingType>(x),
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<s.DevicePlatform>(x),
      "recurringCharges": [toRecurringCharge],
    },
  }, root);
}

function toRecurringCharge(root: jsonP.JSONValue): s.RecurringCharge {
  return jsonP.readObj({
    required: {},
    optional: {
      "cost": toMonetaryAmount,
      "frequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecurringChargeFrequency>(x),
    },
  }, root);
}

function toMonetaryAmount(root: jsonP.JSONValue): s.MonetaryAmount {
  return jsonP.readObj({
    required: {},
    optional: {
      "amount": "n",
      "currencyCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.CurrencyCode>(x),
    },
  }, root);
}

function toRun(root: jsonP.JSONValue): s.Run {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.TestType>(x),
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<s.DevicePlatform>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "totalJobs": "n",
      "completedJobs": "n",
      "billingMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.BillingMethod>(x),
      "deviceMinutes": toDeviceMinutes,
      "networkProfile": toNetworkProfile,
      "parsingResultUrl": "s",
      "resultCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionResultCode>(x),
      "seed": "n",
      "appUpload": "s",
      "eventCount": "n",
      "jobTimeoutMinutes": "n",
      "devicePoolArn": "s",
      "locale": "s",
      "radios": toRadios,
      "location": toLocation,
      "customerArtifactPaths": toCustomerArtifactPaths,
      "webUrl": "s",
      "skipAppResign": "b",
      "testSpecArn": "s",
      "deviceSelectionResult": toDeviceSelectionResult,
    },
  }, root);
}

function toDeviceSelectionResult(root: jsonP.JSONValue): s.DeviceSelectionResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "filters": [toDeviceFilter],
      "matchedDevicesCount": "n",
      "maxDevices": "n",
    },
  }, root);
}

function toSuite(root: jsonP.JSONValue): s.Suite {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.TestType>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "deviceMinutes": toDeviceMinutes,
    },
  }, root);
}

function toTest(root: jsonP.JSONValue): s.Test {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.TestType>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "deviceMinutes": toDeviceMinutes,
    },
  }, root);
}

function toTestGridSession(root: jsonP.JSONValue): s.TestGridSession {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.TestGridSessionStatus>(x),
      "created": "d",
      "ended": "d",
      "billingMinutes": "n",
      "seleniumProperties": "s",
    },
  }, root);
}

function toArtifact(root: jsonP.JSONValue): s.Artifact {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ArtifactType>(x),
      "extension": "s",
      "url": "s",
    },
  }, root);
}

function toOfferingPromotion(root: jsonP.JSONValue): s.OfferingPromotion {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "description": "s",
    },
  }, root);
}

function toOfferingTransaction(root: jsonP.JSONValue): s.OfferingTransaction {
  return jsonP.readObj({
    required: {},
    optional: {
      "offeringStatus": toOfferingStatus,
      "transactionId": "s",
      "offeringPromotionId": "s",
      "createdOn": "d",
      "cost": toMonetaryAmount,
    },
  }, root);
}

function toSample(root: jsonP.JSONValue): s.Sample {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.SampleType>(x),
      "url": "s",
    },
  }, root);
}

function toTestGridSessionAction(root: jsonP.JSONValue): s.TestGridSessionAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "action": "s",
      "started": "d",
      "duration": "n",
      "statusCode": "s",
      "requestMethod": "s",
    },
  }, root);
}

function toTestGridSessionArtifact(root: jsonP.JSONValue): s.TestGridSessionArtifact {
  return jsonP.readObj({
    required: {},
    optional: {
      "filename": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.TestGridSessionArtifactType>(x),
      "url": "s",
    },
  }, root);
}

function toUniqueProblem(root: jsonP.JSONValue): s.UniqueProblem {
  return jsonP.readObj({
    required: {},
    optional: {
      "message": "s",
      "problems": [toProblem],
    },
  }, root);
}

function toProblem(root: jsonP.JSONValue): s.Problem {
  return jsonP.readObj({
    required: {},
    optional: {
      "run": toProblemDetail,
      "job": toProblemDetail,
      "suite": toProblemDetail,
      "test": toProblemDetail,
      "device": toDevice,
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExecutionResult>(x),
      "message": "s",
    },
  }, root);
}

function toProblemDetail(root: jsonP.JSONValue): s.ProblemDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
    },
  }, root);
}
