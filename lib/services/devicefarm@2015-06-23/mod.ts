// Autogenerated API client for: AWS Device Farm

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class DeviceFarm {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DeviceFarm.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-06-23",
    "endpointPrefix": "devicefarm",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Device Farm",
    "serviceId": "Device Farm",
    "signatureVersion": "v4",
    "targetPrefix": "DeviceFarm_20150623",
    "uid": "devicefarm-2015-06-23"
  };

  async createDevicePool(
    {abortSignal, ...params}: RequestConfig & CreateDevicePoolRequest,
  ): Promise<CreateDevicePoolResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      description: params["description"],
      rules: params["rules"]?.map(x => fromRule(x)),
      maxDevices: params["maxDevices"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePool": toDevicePool,
      },
    }, await resp.json());
  }

  async createInstanceProfile(
    {abortSignal, ...params}: RequestConfig & CreateInstanceProfileRequest,
  ): Promise<CreateInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      packageCleanup: params["packageCleanup"],
      excludeAppPackagesFromCleanup: params["excludeAppPackagesFromCleanup"],
      rebootAfterUse: params["rebootAfterUse"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfile": toInstanceProfile,
      },
    }, await resp.json());
  }

  async createNetworkProfile(
    {abortSignal, ...params}: RequestConfig & CreateNetworkProfileRequest,
  ): Promise<CreateNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      description: params["description"],
      type: params["type"],
      uplinkBandwidthBits: params["uplinkBandwidthBits"],
      downlinkBandwidthBits: params["downlinkBandwidthBits"],
      uplinkDelayMs: params["uplinkDelayMs"],
      downlinkDelayMs: params["downlinkDelayMs"],
      uplinkJitterMs: params["uplinkJitterMs"],
      downlinkJitterMs: params["downlinkJitterMs"],
      uplinkLossPercent: params["uplinkLossPercent"],
      downlinkLossPercent: params["downlinkLossPercent"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async createProject(
    {abortSignal, ...params}: RequestConfig & CreateProjectRequest,
  ): Promise<CreateProjectResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      defaultJobTimeoutMinutes: params["defaultJobTimeoutMinutes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "project": toProject,
      },
    }, await resp.json());
  }

  async createRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & CreateRemoteAccessSessionRequest,
  ): Promise<CreateRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      deviceArn: params["deviceArn"],
      instanceArn: params["instanceArn"],
      sshPublicKey: params["sshPublicKey"],
      remoteDebugEnabled: params["remoteDebugEnabled"],
      remoteRecordEnabled: params["remoteRecordEnabled"],
      remoteRecordAppArn: params["remoteRecordAppArn"],
      name: params["name"],
      clientId: params["clientId"],
      configuration: fromCreateRemoteAccessSessionConfiguration(params["configuration"]),
      interactionMode: params["interactionMode"],
      skipAppResign: params["skipAppResign"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSession": toRemoteAccessSession,
      },
    }, await resp.json());
  }

  async createTestGridProject(
    {abortSignal, ...params}: RequestConfig & CreateTestGridProjectRequest,
  ): Promise<CreateTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProject": toTestGridProject,
      },
    }, await resp.json());
  }

  async createTestGridUrl(
    {abortSignal, ...params}: RequestConfig & CreateTestGridUrlRequest,
  ): Promise<CreateTestGridUrlResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      expiresInSeconds: params["expiresInSeconds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTestGridUrl",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "url": "s",
        "expires": "d",
      },
    }, await resp.json());
  }

  async createUpload(
    {abortSignal, ...params}: RequestConfig & CreateUploadRequest,
  ): Promise<CreateUploadResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      type: params["type"],
      contentType: params["contentType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "upload": toUpload,
      },
    }, await resp.json());
  }

  async createVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & CreateVPCEConfigurationRequest,
  ): Promise<CreateVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      vpceConfigurationName: params["vpceConfigurationName"],
      vpceServiceName: params["vpceServiceName"],
      serviceDnsName: params["serviceDnsName"],
      vpceConfigurationDescription: params["vpceConfigurationDescription"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfiguration": toVPCEConfiguration,
      },
    }, await resp.json());
  }

  async deleteDevicePool(
    {abortSignal, ...params}: RequestConfig & DeleteDevicePoolRequest,
  ): Promise<DeleteDevicePoolResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteInstanceProfile(
    {abortSignal, ...params}: RequestConfig & DeleteInstanceProfileRequest,
  ): Promise<DeleteInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteNetworkProfile(
    {abortSignal, ...params}: RequestConfig & DeleteNetworkProfileRequest,
  ): Promise<DeleteNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProject(
    {abortSignal, ...params}: RequestConfig & DeleteProjectRequest,
  ): Promise<DeleteProjectResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & DeleteRemoteAccessSessionRequest,
  ): Promise<DeleteRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRun(
    {abortSignal, ...params}: RequestConfig & DeleteRunRequest,
  ): Promise<DeleteRunResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTestGridProject(
    {abortSignal, ...params}: RequestConfig & DeleteTestGridProjectRequest,
  ): Promise<DeleteTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUpload(
    {abortSignal, ...params}: RequestConfig & DeleteUploadRequest,
  ): Promise<DeleteUploadResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteVPCEConfigurationRequest,
  ): Promise<DeleteVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccountSettings(
    {abortSignal, ...params}: RequestConfig & GetAccountSettingsRequest = {},
  ): Promise<GetAccountSettingsResult> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAccountSettings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "accountSettings": toAccountSettings,
      },
    }, await resp.json());
  }

  async getDevice(
    {abortSignal, ...params}: RequestConfig & GetDeviceRequest,
  ): Promise<GetDeviceResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevice",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "device": toDevice,
      },
    }, await resp.json());
  }

  async getDeviceInstance(
    {abortSignal, ...params}: RequestConfig & GetDeviceInstanceRequest,
  ): Promise<GetDeviceInstanceResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDeviceInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deviceInstance": toDeviceInstance,
      },
    }, await resp.json());
  }

  async getDevicePool(
    {abortSignal, ...params}: RequestConfig & GetDevicePoolRequest,
  ): Promise<GetDevicePoolResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePool": toDevicePool,
      },
    }, await resp.json());
  }

  async getDevicePoolCompatibility(
    {abortSignal, ...params}: RequestConfig & GetDevicePoolCompatibilityRequest,
  ): Promise<GetDevicePoolCompatibilityResult> {
    const body: jsonP.JSONObject = {
      devicePoolArn: params["devicePoolArn"],
      appArn: params["appArn"],
      testType: params["testType"],
      test: fromScheduleRunTest(params["test"]),
      configuration: fromScheduleRunConfiguration(params["configuration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevicePoolCompatibility",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "compatibleDevices": [toDevicePoolCompatibilityResult],
        "incompatibleDevices": [toDevicePoolCompatibilityResult],
      },
    }, await resp.json());
  }

  async getInstanceProfile(
    {abortSignal, ...params}: RequestConfig & GetInstanceProfileRequest,
  ): Promise<GetInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfile": toInstanceProfile,
      },
    }, await resp.json());
  }

  async getJob(
    {abortSignal, ...params}: RequestConfig & GetJobRequest,
  ): Promise<GetJobResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "job": toJob,
      },
    }, await resp.json());
  }

  async getNetworkProfile(
    {abortSignal, ...params}: RequestConfig & GetNetworkProfileRequest,
  ): Promise<GetNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async getOfferingStatus(
    {abortSignal, ...params}: RequestConfig & GetOfferingStatusRequest = {},
  ): Promise<GetOfferingStatusResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOfferingStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "current": x => jsonP.readMap(String, toOfferingStatus, x),
        "nextPeriod": x => jsonP.readMap(String, toOfferingStatus, x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getProject(
    {abortSignal, ...params}: RequestConfig & GetProjectRequest,
  ): Promise<GetProjectResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "project": toProject,
      },
    }, await resp.json());
  }

  async getRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & GetRemoteAccessSessionRequest,
  ): Promise<GetRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSession": toRemoteAccessSession,
      },
    }, await resp.json());
  }

  async getRun(
    {abortSignal, ...params}: RequestConfig & GetRunRequest,
  ): Promise<GetRunResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "run": toRun,
      },
    }, await resp.json());
  }

  async getSuite(
    {abortSignal, ...params}: RequestConfig & GetSuiteRequest,
  ): Promise<GetSuiteResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSuite",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suite": toSuite,
      },
    }, await resp.json());
  }

  async getTest(
    {abortSignal, ...params}: RequestConfig & GetTestRequest,
  ): Promise<GetTestResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTest",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "test": toTest,
      },
    }, await resp.json());
  }

  async getTestGridProject(
    {abortSignal, ...params}: RequestConfig & GetTestGridProjectRequest,
  ): Promise<GetTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProject": toTestGridProject,
      },
    }, await resp.json());
  }

  async getTestGridSession(
    {abortSignal, ...params}: RequestConfig & GetTestGridSessionRequest = {},
  ): Promise<GetTestGridSessionResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      sessionId: params["sessionId"],
      sessionArn: params["sessionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTestGridSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridSession": toTestGridSession,
      },
    }, await resp.json());
  }

  async getUpload(
    {abortSignal, ...params}: RequestConfig & GetUploadRequest,
  ): Promise<GetUploadResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "upload": toUpload,
      },
    }, await resp.json());
  }

  async getVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & GetVPCEConfigurationRequest,
  ): Promise<GetVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfiguration": toVPCEConfiguration,
      },
    }, await resp.json());
  }

  async installToRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & InstallToRemoteAccessSessionRequest,
  ): Promise<InstallToRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      remoteAccessSessionArn: params["remoteAccessSessionArn"],
      appArn: params["appArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InstallToRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "appUpload": toUpload,
      },
    }, await resp.json());
  }

  async listArtifacts(
    {abortSignal, ...params}: RequestConfig & ListArtifactsRequest,
  ): Promise<ListArtifactsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "artifacts": [toArtifact],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDeviceInstances(
    {abortSignal, ...params}: RequestConfig & ListDeviceInstancesRequest = {},
  ): Promise<ListDeviceInstancesResult> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDeviceInstances",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deviceInstances": [toDeviceInstance],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDevicePools(
    {abortSignal, ...params}: RequestConfig & ListDevicePoolsRequest,
  ): Promise<ListDevicePoolsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDevicePools",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePools": [toDevicePool],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDevices(
    {abortSignal, ...params}: RequestConfig & ListDevicesRequest = {},
  ): Promise<ListDevicesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
      filters: params["filters"]?.map(x => fromDeviceFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDevices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devices": [toDevice],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listInstanceProfiles(
    {abortSignal, ...params}: RequestConfig & ListInstanceProfilesRequest = {},
  ): Promise<ListInstanceProfilesResult> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInstanceProfiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfiles": [toInstanceProfile],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & ListJobsRequest,
  ): Promise<ListJobsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobs": [toJob],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listNetworkProfiles(
    {abortSignal, ...params}: RequestConfig & ListNetworkProfilesRequest,
  ): Promise<ListNetworkProfilesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListNetworkProfiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfiles": [toNetworkProfile],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listOfferingPromotions(
    {abortSignal, ...params}: RequestConfig & ListOfferingPromotionsRequest = {},
  ): Promise<ListOfferingPromotionsResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOfferingPromotions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringPromotions": [toOfferingPromotion],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listOfferingTransactions(
    {abortSignal, ...params}: RequestConfig & ListOfferingTransactionsRequest = {},
  ): Promise<ListOfferingTransactionsResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOfferingTransactions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringTransactions": [toOfferingTransaction],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listOfferings(
    {abortSignal, ...params}: RequestConfig & ListOfferingsRequest = {},
  ): Promise<ListOfferingsResult> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOfferings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offerings": [toOffering],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listProjects(
    {abortSignal, ...params}: RequestConfig & ListProjectsRequest = {},
  ): Promise<ListProjectsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProjects",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "projects": [toProject],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRemoteAccessSessions(
    {abortSignal, ...params}: RequestConfig & ListRemoteAccessSessionsRequest,
  ): Promise<ListRemoteAccessSessionsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRemoteAccessSessions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSessions": [toRemoteAccessSession],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRuns(
    {abortSignal, ...params}: RequestConfig & ListRunsRequest,
  ): Promise<ListRunsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRuns",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "runs": [toRun],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSamples(
    {abortSignal, ...params}: RequestConfig & ListSamplesRequest,
  ): Promise<ListSamplesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSamples",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "samples": [toSample],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSuites(
    {abortSignal, ...params}: RequestConfig & ListSuitesRequest,
  ): Promise<ListSuitesResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSuites",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "suites": [toSuite],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listTestGridProjects(
    {abortSignal, ...params}: RequestConfig & ListTestGridProjectsRequest = {},
  ): Promise<ListTestGridProjectsResult> {
    const body: jsonP.JSONObject = {
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridProjects",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProjects": [toTestGridProject],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTestGridSessionActions(
    {abortSignal, ...params}: RequestConfig & ListTestGridSessionActionsRequest,
  ): Promise<ListTestGridSessionActionsResult> {
    const body: jsonP.JSONObject = {
      sessionArn: params["sessionArn"],
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridSessionActions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "actions": [toTestGridSessionAction],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTestGridSessionArtifacts(
    {abortSignal, ...params}: RequestConfig & ListTestGridSessionArtifactsRequest,
  ): Promise<ListTestGridSessionArtifactsResult> {
    const body: jsonP.JSONObject = {
      sessionArn: params["sessionArn"],
      type: params["type"],
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridSessionArtifacts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "artifacts": [toTestGridSessionArtifact],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTestGridSessions(
    {abortSignal, ...params}: RequestConfig & ListTestGridSessionsRequest,
  ): Promise<ListTestGridSessionsResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      status: params["status"],
      creationTimeAfter: jsonP.serializeDate_unixTimestamp(params["creationTimeAfter"]),
      creationTimeBefore: jsonP.serializeDate_unixTimestamp(params["creationTimeBefore"]),
      endTimeAfter: jsonP.serializeDate_unixTimestamp(params["endTimeAfter"]),
      endTimeBefore: jsonP.serializeDate_unixTimestamp(params["endTimeBefore"]),
      maxResult: params["maxResult"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTestGridSessions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridSessions": [toTestGridSession],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTests(
    {abortSignal, ...params}: RequestConfig & ListTestsRequest,
  ): Promise<ListTestsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTests",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tests": [toTest],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listUniqueProblems(
    {abortSignal, ...params}: RequestConfig & ListUniqueProblemsRequest,
  ): Promise<ListUniqueProblemsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUniqueProblems",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "uniqueProblems": x => jsonP.readMap(x => cmnP.readEnumReq<ExecutionResult>(x), l => Array.isArray(l) ? l.map(toUniqueProblem) : [], x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listUploads(
    {abortSignal, ...params}: RequestConfig & ListUploadsRequest,
  ): Promise<ListUploadsResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      type: params["type"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUploads",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "uploads": [toUpload],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listVPCEConfigurations(
    {abortSignal, ...params}: RequestConfig & ListVPCEConfigurationsRequest = {},
  ): Promise<ListVPCEConfigurationsResult> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListVPCEConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfigurations": [toVPCEConfiguration],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async purchaseOffering(
    {abortSignal, ...params}: RequestConfig & PurchaseOfferingRequest = {},
  ): Promise<PurchaseOfferingResult> {
    const body: jsonP.JSONObject = {
      offeringId: params["offeringId"],
      quantity: params["quantity"],
      offeringPromotionId: params["offeringPromotionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PurchaseOffering",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringTransaction": toOfferingTransaction,
      },
    }, await resp.json());
  }

  async renewOffering(
    {abortSignal, ...params}: RequestConfig & RenewOfferingRequest = {},
  ): Promise<RenewOfferingResult> {
    const body: jsonP.JSONObject = {
      offeringId: params["offeringId"],
      quantity: params["quantity"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RenewOffering",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "offeringTransaction": toOfferingTransaction,
      },
    }, await resp.json());
  }

  async scheduleRun(
    {abortSignal, ...params}: RequestConfig & ScheduleRunRequest,
  ): Promise<ScheduleRunResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      appArn: params["appArn"],
      devicePoolArn: params["devicePoolArn"],
      deviceSelectionConfiguration: fromDeviceSelectionConfiguration(params["deviceSelectionConfiguration"]),
      name: params["name"],
      test: fromScheduleRunTest(params["test"]),
      configuration: fromScheduleRunConfiguration(params["configuration"]),
      executionConfiguration: fromExecutionConfiguration(params["executionConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ScheduleRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "run": toRun,
      },
    }, await resp.json());
  }

  async stopJob(
    {abortSignal, ...params}: RequestConfig & StopJobRequest,
  ): Promise<StopJobResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "job": toJob,
      },
    }, await resp.json());
  }

  async stopRemoteAccessSession(
    {abortSignal, ...params}: RequestConfig & StopRemoteAccessSessionRequest,
  ): Promise<StopRemoteAccessSessionResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopRemoteAccessSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "remoteAccessSession": toRemoteAccessSession,
      },
    }, await resp.json());
  }

  async stopRun(
    {abortSignal, ...params}: RequestConfig & StopRunRequest,
  ): Promise<StopRunResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopRun",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "run": toRun,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDeviceInstance(
    {abortSignal, ...params}: RequestConfig & UpdateDeviceInstanceRequest,
  ): Promise<UpdateDeviceInstanceResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      profileArn: params["profileArn"],
      labels: params["labels"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeviceInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deviceInstance": toDeviceInstance,
      },
    }, await resp.json());
  }

  async updateDevicePool(
    {abortSignal, ...params}: RequestConfig & UpdateDevicePoolRequest,
  ): Promise<UpdateDevicePoolResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      description: params["description"],
      rules: params["rules"]?.map(x => fromRule(x)),
      maxDevices: params["maxDevices"],
      clearMaxDevices: params["clearMaxDevices"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDevicePool",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "devicePool": toDevicePool,
      },
    }, await resp.json());
  }

  async updateInstanceProfile(
    {abortSignal, ...params}: RequestConfig & UpdateInstanceProfileRequest,
  ): Promise<UpdateInstanceProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      description: params["description"],
      packageCleanup: params["packageCleanup"],
      excludeAppPackagesFromCleanup: params["excludeAppPackagesFromCleanup"],
      rebootAfterUse: params["rebootAfterUse"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateInstanceProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "instanceProfile": toInstanceProfile,
      },
    }, await resp.json());
  }

  async updateNetworkProfile(
    {abortSignal, ...params}: RequestConfig & UpdateNetworkProfileRequest,
  ): Promise<UpdateNetworkProfileResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      description: params["description"],
      type: params["type"],
      uplinkBandwidthBits: params["uplinkBandwidthBits"],
      downlinkBandwidthBits: params["downlinkBandwidthBits"],
      uplinkDelayMs: params["uplinkDelayMs"],
      downlinkDelayMs: params["downlinkDelayMs"],
      uplinkJitterMs: params["uplinkJitterMs"],
      downlinkJitterMs: params["downlinkJitterMs"],
      uplinkLossPercent: params["uplinkLossPercent"],
      downlinkLossPercent: params["downlinkLossPercent"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNetworkProfile",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "networkProfile": toNetworkProfile,
      },
    }, await resp.json());
  }

  async updateProject(
    {abortSignal, ...params}: RequestConfig & UpdateProjectRequest,
  ): Promise<UpdateProjectResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      defaultJobTimeoutMinutes: params["defaultJobTimeoutMinutes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "project": toProject,
      },
    }, await resp.json());
  }

  async updateTestGridProject(
    {abortSignal, ...params}: RequestConfig & UpdateTestGridProjectRequest,
  ): Promise<UpdateTestGridProjectResult> {
    const body: jsonP.JSONObject = {
      projectArn: params["projectArn"],
      name: params["name"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTestGridProject",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "testGridProject": toTestGridProject,
      },
    }, await resp.json());
  }

  async updateUpload(
    {abortSignal, ...params}: RequestConfig & UpdateUploadRequest,
  ): Promise<UpdateUploadResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      name: params["name"],
      contentType: params["contentType"],
      editContent: params["editContent"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUpload",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "upload": toUpload,
      },
    }, await resp.json());
  }

  async updateVPCEConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateVPCEConfigurationRequest,
  ): Promise<UpdateVPCEConfigurationResult> {
    const body: jsonP.JSONObject = {
      arn: params["arn"],
      vpceConfigurationName: params["vpceConfigurationName"],
      vpceServiceName: params["vpceServiceName"],
      serviceDnsName: params["serviceDnsName"],
      vpceConfigurationDescription: params["vpceConfigurationDescription"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVPCEConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "vpceConfiguration": toVPCEConfiguration,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateDevicePoolRequest {
  projectArn: string;
  name: string;
  description?: string | null;
  rules: Rule[];
  maxDevices?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateInstanceProfileRequest {
  name: string;
  description?: string | null;
  packageCleanup?: boolean | null;
  excludeAppPackagesFromCleanup?: string[] | null;
  rebootAfterUse?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateNetworkProfileRequest {
  projectArn: string;
  name: string;
  description?: string | null;
  type?: NetworkProfileType | null;
  uplinkBandwidthBits?: number | null;
  downlinkBandwidthBits?: number | null;
  uplinkDelayMs?: number | null;
  downlinkDelayMs?: number | null;
  uplinkJitterMs?: number | null;
  downlinkJitterMs?: number | null;
  uplinkLossPercent?: number | null;
  downlinkLossPercent?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateProjectRequest {
  name: string;
  defaultJobTimeoutMinutes?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateRemoteAccessSessionRequest {
  projectArn: string;
  deviceArn: string;
  instanceArn?: string | null;
  sshPublicKey?: string | null;
  remoteDebugEnabled?: boolean | null;
  remoteRecordEnabled?: boolean | null;
  remoteRecordAppArn?: string | null;
  name?: string | null;
  clientId?: string | null;
  configuration?: CreateRemoteAccessSessionConfiguration | null;
  interactionMode?: InteractionMode | null;
  skipAppResign?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateTestGridProjectRequest {
  name: string;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateTestGridUrlRequest {
  projectArn: string;
  expiresInSeconds: number;
}

// refs: 1 - tags: named, input
export interface CreateUploadRequest {
  projectArn: string;
  name: string;
  type: UploadType;
  contentType?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateVPCEConfigurationRequest {
  vpceConfigurationName: string;
  vpceServiceName: string;
  serviceDnsName: string;
  vpceConfigurationDescription?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDevicePoolRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteInstanceProfileRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteNetworkProfileRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteProjectRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteRemoteAccessSessionRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteRunRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteTestGridProjectRequest {
  projectArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteUploadRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteVPCEConfigurationRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetAccountSettingsRequest {
}

// refs: 1 - tags: named, input
export interface GetDeviceRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetDeviceInstanceRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetDevicePoolRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetDevicePoolCompatibilityRequest {
  devicePoolArn: string;
  appArn?: string | null;
  testType?: TestType | null;
  test?: ScheduleRunTest | null;
  configuration?: ScheduleRunConfiguration | null;
}

// refs: 1 - tags: named, input
export interface GetInstanceProfileRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetJobRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetNetworkProfileRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetOfferingStatusRequest {
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetProjectRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetRemoteAccessSessionRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetRunRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetSuiteRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetTestRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetTestGridProjectRequest {
  projectArn: string;
}

// refs: 1 - tags: named, input
export interface GetTestGridSessionRequest {
  projectArn?: string | null;
  sessionId?: string | null;
  sessionArn?: string | null;
}

// refs: 1 - tags: named, input
export interface GetUploadRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetVPCEConfigurationRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface InstallToRemoteAccessSessionRequest {
  remoteAccessSessionArn: string;
  appArn: string;
}

// refs: 1 - tags: named, input
export interface ListArtifactsRequest {
  arn: string;
  type: ArtifactCategory;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeviceInstancesRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDevicePoolsRequest {
  arn: string;
  type?: DevicePoolType | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDevicesRequest {
  arn?: string | null;
  nextToken?: string | null;
  filters?: DeviceFilter[] | null;
}

// refs: 1 - tags: named, input
export interface ListInstanceProfilesRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListJobsRequest {
  arn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListNetworkProfilesRequest {
  arn: string;
  type?: NetworkProfileType | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOfferingPromotionsRequest {
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOfferingTransactionsRequest {
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOfferingsRequest {
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProjectsRequest {
  arn?: string | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRemoteAccessSessionsRequest {
  arn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRunsRequest {
  arn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSamplesRequest {
  arn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSuitesRequest {
  arn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface ListTestGridProjectsRequest {
  maxResult?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTestGridSessionActionsRequest {
  sessionArn: string;
  maxResult?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTestGridSessionArtifactsRequest {
  sessionArn: string;
  type?: TestGridSessionArtifactCategory | null;
  maxResult?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTestGridSessionsRequest {
  projectArn: string;
  status?: TestGridSessionStatus | null;
  creationTimeAfter?: Date | number | null;
  creationTimeBefore?: Date | number | null;
  endTimeAfter?: Date | number | null;
  endTimeBefore?: Date | number | null;
  maxResult?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTestsRequest {
  arn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListUniqueProblemsRequest {
  arn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListUploadsRequest {
  arn: string;
  type?: UploadType | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListVPCEConfigurationsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface PurchaseOfferingRequest {
  offeringId?: string | null;
  quantity?: number | null;
  offeringPromotionId?: string | null;
}

// refs: 1 - tags: named, input
export interface RenewOfferingRequest {
  offeringId?: string | null;
  quantity?: number | null;
}

// refs: 1 - tags: named, input
export interface ScheduleRunRequest {
  projectArn: string;
  appArn?: string | null;
  devicePoolArn?: string | null;
  deviceSelectionConfiguration?: DeviceSelectionConfiguration | null;
  name?: string | null;
  test: ScheduleRunTest;
  configuration?: ScheduleRunConfiguration | null;
  executionConfiguration?: ExecutionConfiguration | null;
}

// refs: 1 - tags: named, input
export interface StopJobRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface StopRemoteAccessSessionRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface StopRunRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDeviceInstanceRequest {
  arn: string;
  profileArn?: string | null;
  labels?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateDevicePoolRequest {
  arn: string;
  name?: string | null;
  description?: string | null;
  rules?: Rule[] | null;
  maxDevices?: number | null;
  clearMaxDevices?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateInstanceProfileRequest {
  arn: string;
  name?: string | null;
  description?: string | null;
  packageCleanup?: boolean | null;
  excludeAppPackagesFromCleanup?: string[] | null;
  rebootAfterUse?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateNetworkProfileRequest {
  arn: string;
  name?: string | null;
  description?: string | null;
  type?: NetworkProfileType | null;
  uplinkBandwidthBits?: number | null;
  downlinkBandwidthBits?: number | null;
  uplinkDelayMs?: number | null;
  downlinkDelayMs?: number | null;
  uplinkJitterMs?: number | null;
  downlinkJitterMs?: number | null;
  uplinkLossPercent?: number | null;
  downlinkLossPercent?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateProjectRequest {
  arn: string;
  name?: string | null;
  defaultJobTimeoutMinutes?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateTestGridProjectRequest {
  projectArn: string;
  name?: string | null;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateUploadRequest {
  arn: string;
  name?: string | null;
  contentType?: string | null;
  editContent?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateVPCEConfigurationRequest {
  arn: string;
  vpceConfigurationName?: string | null;
  vpceServiceName?: string | null;
  serviceDnsName?: string | null;
  vpceConfigurationDescription?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDevicePoolResult {
  devicePool?: DevicePool | null;
}

// refs: 1 - tags: named, output
export interface CreateInstanceProfileResult {
  instanceProfile?: InstanceProfile | null;
}

// refs: 1 - tags: named, output
export interface CreateNetworkProfileResult {
  networkProfile?: NetworkProfile | null;
}

// refs: 1 - tags: named, output
export interface CreateProjectResult {
  project?: Project | null;
}

// refs: 1 - tags: named, output
export interface CreateRemoteAccessSessionResult {
  remoteAccessSession?: RemoteAccessSession | null;
}

// refs: 1 - tags: named, output
export interface CreateTestGridProjectResult {
  testGridProject?: TestGridProject | null;
}

// refs: 1 - tags: named, output
export interface CreateTestGridUrlResult {
  url?: string | null;
  expires?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateUploadResult {
  upload?: Upload | null;
}

// refs: 1 - tags: named, output
export interface CreateVPCEConfigurationResult {
  vpceConfiguration?: VPCEConfiguration | null;
}

// refs: 1 - tags: named, output
export interface DeleteDevicePoolResult {
}

// refs: 1 - tags: named, output
export interface DeleteInstanceProfileResult {
}

// refs: 1 - tags: named, output
export interface DeleteNetworkProfileResult {
}

// refs: 1 - tags: named, output
export interface DeleteProjectResult {
}

// refs: 1 - tags: named, output
export interface DeleteRemoteAccessSessionResult {
}

// refs: 1 - tags: named, output
export interface DeleteRunResult {
}

// refs: 1 - tags: named, output
export interface DeleteTestGridProjectResult {
}

// refs: 1 - tags: named, output
export interface DeleteUploadResult {
}

// refs: 1 - tags: named, output
export interface DeleteVPCEConfigurationResult {
}

// refs: 1 - tags: named, output
export interface GetAccountSettingsResult {
  accountSettings?: AccountSettings | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceResult {
  device?: Device | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceInstanceResult {
  deviceInstance?: DeviceInstance | null;
}

// refs: 1 - tags: named, output
export interface GetDevicePoolResult {
  devicePool?: DevicePool | null;
}

// refs: 1 - tags: named, output
export interface GetDevicePoolCompatibilityResult {
  compatibleDevices?: DevicePoolCompatibilityResult[] | null;
  incompatibleDevices?: DevicePoolCompatibilityResult[] | null;
}

// refs: 1 - tags: named, output
export interface GetInstanceProfileResult {
  instanceProfile?: InstanceProfile | null;
}

// refs: 1 - tags: named, output
export interface GetJobResult {
  job?: Job | null;
}

// refs: 1 - tags: named, output
export interface GetNetworkProfileResult {
  networkProfile?: NetworkProfile | null;
}

// refs: 1 - tags: named, output
export interface GetOfferingStatusResult {
  current?: { [key: string]: OfferingStatus | null | undefined } | null;
  nextPeriod?: { [key: string]: OfferingStatus | null | undefined } | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetProjectResult {
  project?: Project | null;
}

// refs: 1 - tags: named, output
export interface GetRemoteAccessSessionResult {
  remoteAccessSession?: RemoteAccessSession | null;
}

// refs: 1 - tags: named, output
export interface GetRunResult {
  run?: Run | null;
}

// refs: 1 - tags: named, output
export interface GetSuiteResult {
  suite?: Suite | null;
}

// refs: 1 - tags: named, output
export interface GetTestResult {
  test?: Test | null;
}

// refs: 1 - tags: named, output
export interface GetTestGridProjectResult {
  testGridProject?: TestGridProject | null;
}

// refs: 1 - tags: named, output
export interface GetTestGridSessionResult {
  testGridSession?: TestGridSession | null;
}

// refs: 1 - tags: named, output
export interface GetUploadResult {
  upload?: Upload | null;
}

// refs: 1 - tags: named, output
export interface GetVPCEConfigurationResult {
  vpceConfiguration?: VPCEConfiguration | null;
}

// refs: 1 - tags: named, output
export interface InstallToRemoteAccessSessionResult {
  appUpload?: Upload | null;
}

// refs: 1 - tags: named, output
export interface ListArtifactsResult {
  artifacts?: Artifact[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeviceInstancesResult {
  deviceInstances?: DeviceInstance[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDevicePoolsResult {
  devicePools?: DevicePool[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDevicesResult {
  devices?: Device[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInstanceProfilesResult {
  instanceProfiles?: InstanceProfile[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListJobsResult {
  jobs?: Job[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListNetworkProfilesResult {
  networkProfiles?: NetworkProfile[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOfferingPromotionsResult {
  offeringPromotions?: OfferingPromotion[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOfferingTransactionsResult {
  offeringTransactions?: OfferingTransaction[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOfferingsResult {
  offerings?: Offering[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProjectsResult {
  projects?: Project[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRemoteAccessSessionsResult {
  remoteAccessSessions?: RemoteAccessSession[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRunsResult {
  runs?: Run[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSamplesResult {
  samples?: Sample[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSuitesResult {
  suites?: Suite[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListTestGridProjectsResult {
  testGridProjects?: TestGridProject[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTestGridSessionActionsResult {
  actions?: TestGridSessionAction[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTestGridSessionArtifactsResult {
  artifacts?: TestGridSessionArtifact[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTestGridSessionsResult {
  testGridSessions?: TestGridSession[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTestsResult {
  tests?: Test[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUniqueProblemsResult {
  uniqueProblems?: { [key in ExecutionResult]: UniqueProblem[] | null | undefined } | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUploadsResult {
  uploads?: Upload[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListVPCEConfigurationsResult {
  vpceConfigurations?: VPCEConfiguration[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PurchaseOfferingResult {
  offeringTransaction?: OfferingTransaction | null;
}

// refs: 1 - tags: named, output
export interface RenewOfferingResult {
  offeringTransaction?: OfferingTransaction | null;
}

// refs: 1 - tags: named, output
export interface ScheduleRunResult {
  run?: Run | null;
}

// refs: 1 - tags: named, output
export interface StopJobResult {
  job?: Job | null;
}

// refs: 1 - tags: named, output
export interface StopRemoteAccessSessionResult {
  remoteAccessSession?: RemoteAccessSession | null;
}

// refs: 1 - tags: named, output
export interface StopRunResult {
  run?: Run | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDeviceInstanceResult {
  deviceInstance?: DeviceInstance | null;
}

// refs: 1 - tags: named, output
export interface UpdateDevicePoolResult {
  devicePool?: DevicePool | null;
}

// refs: 1 - tags: named, output
export interface UpdateInstanceProfileResult {
  instanceProfile?: InstanceProfile | null;
}

// refs: 1 - tags: named, output
export interface UpdateNetworkProfileResult {
  networkProfile?: NetworkProfile | null;
}

// refs: 1 - tags: named, output
export interface UpdateProjectResult {
  project?: Project | null;
}

// refs: 1 - tags: named, output
export interface UpdateTestGridProjectResult {
  testGridProject?: TestGridProject | null;
}

// refs: 1 - tags: named, output
export interface UpdateUploadResult {
  upload?: Upload | null;
}

// refs: 1 - tags: named, output
export interface UpdateVPCEConfigurationResult {
  vpceConfiguration?: VPCEConfiguration | null;
}

// refs: 6 - tags: input, named, interface, output
export interface Rule {
  attribute?: DeviceAttribute | null;
  operator?: RuleOperator | null;
  value?: string | null;
}
function fromRule(input?: Rule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    operator: input["operator"],
    value: input["value"],
  }
}
function toRule(root: jsonP.JSONValue): Rule {
  return jsonP.readObj({
    required: {},
    optional: {
      "attribute": (x: jsonP.JSONValue) => cmnP.readEnum<DeviceAttribute>(x),
      "operator": (x: jsonP.JSONValue) => cmnP.readEnum<RuleOperator>(x),
      "value": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type DeviceAttribute =
| "ARN"
| "PLATFORM"
| "FORM_FACTOR"
| "MANUFACTURER"
| "REMOTE_ACCESS_ENABLED"
| "REMOTE_DEBUG_ENABLED"
| "APPIUM_VERSION"
| "INSTANCE_ARN"
| "INSTANCE_LABELS"
| "FLEET_TYPE"
| "OS_VERSION"
| "MODEL"
| "AVAILABILITY"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, enum, output
export type RuleOperator =
| "EQUALS"
| "LESS_THAN"
| "LESS_THAN_OR_EQUALS"
| "GREATER_THAN"
| "GREATER_THAN_OR_EQUALS"
| "IN"
| "NOT_IN"
| "CONTAINS"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, enum, output
export type NetworkProfileType =
| "CURATED"
| "PRIVATE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface CreateRemoteAccessSessionConfiguration {
  billingMethod?: BillingMethod | null;
  vpceConfigurationArns?: string[] | null;
}
function fromCreateRemoteAccessSessionConfiguration(input?: CreateRemoteAccessSessionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    billingMethod: input["billingMethod"],
    vpceConfigurationArns: input["vpceConfigurationArns"],
  }
}

// refs: 11 - tags: input, named, enum, output
export type BillingMethod =
| "METERED"
| "UNMETERED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type InteractionMode =
| "INTERACTIVE"
| "NO_VIDEO"
| "VIDEO_ONLY"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type UploadType =
| "ANDROID_APP"
| "IOS_APP"
| "WEB_APP"
| "EXTERNAL_DATA"
| "APPIUM_JAVA_JUNIT_TEST_PACKAGE"
| "APPIUM_JAVA_TESTNG_TEST_PACKAGE"
| "APPIUM_PYTHON_TEST_PACKAGE"
| "APPIUM_NODE_TEST_PACKAGE"
| "APPIUM_RUBY_TEST_PACKAGE"
| "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE"
| "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE"
| "APPIUM_WEB_PYTHON_TEST_PACKAGE"
| "APPIUM_WEB_NODE_TEST_PACKAGE"
| "APPIUM_WEB_RUBY_TEST_PACKAGE"
| "CALABASH_TEST_PACKAGE"
| "INSTRUMENTATION_TEST_PACKAGE"
| "UIAUTOMATION_TEST_PACKAGE"
| "UIAUTOMATOR_TEST_PACKAGE"
| "XCTEST_TEST_PACKAGE"
| "XCTEST_UI_TEST_PACKAGE"
| "APPIUM_JAVA_JUNIT_TEST_SPEC"
| "APPIUM_JAVA_TESTNG_TEST_SPEC"
| "APPIUM_PYTHON_TEST_SPEC"
| "APPIUM_NODE_TEST_SPEC"
| "APPIUM_RUBY_TEST_SPEC"
| "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC"
| "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC"
| "APPIUM_WEB_PYTHON_TEST_SPEC"
| "APPIUM_WEB_NODE_TEST_SPEC"
| "APPIUM_WEB_RUBY_TEST_SPEC"
| "INSTRUMENTATION_TEST_SPEC"
| "XCTEST_UI_TEST_SPEC"
| cmnP.UnexpectedEnumValue;

// refs: 14 - tags: input, named, enum, output
export type TestType =
| "BUILTIN_FUZZ"
| "BUILTIN_EXPLORER"
| "WEB_PERFORMANCE_PROFILE"
| "APPIUM_JAVA_JUNIT"
| "APPIUM_JAVA_TESTNG"
| "APPIUM_PYTHON"
| "APPIUM_NODE"
| "APPIUM_RUBY"
| "APPIUM_WEB_JAVA_JUNIT"
| "APPIUM_WEB_JAVA_TESTNG"
| "APPIUM_WEB_PYTHON"
| "APPIUM_WEB_NODE"
| "APPIUM_WEB_RUBY"
| "CALABASH"
| "INSTRUMENTATION"
| "UIAUTOMATION"
| "UIAUTOMATOR"
| "XCTEST"
| "XCTEST_UI"
| "REMOTE_ACCESS_RECORD"
| "REMOTE_ACCESS_REPLAY"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ScheduleRunTest {
  type: TestType;
  testPackageArn?: string | null;
  testSpecArn?: string | null;
  filter?: string | null;
  parameters?: { [key: string]: string | null | undefined } | null;
}
function fromScheduleRunTest(input?: ScheduleRunTest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    type: input["type"],
    testPackageArn: input["testPackageArn"],
    testSpecArn: input["testSpecArn"],
    filter: input["filter"],
    parameters: input["parameters"],
  }
}

// refs: 2 - tags: input, named, interface
export interface ScheduleRunConfiguration {
  extraDataPackageArn?: string | null;
  networkProfileArn?: string | null;
  locale?: string | null;
  location?: Location | null;
  vpceConfigurationArns?: string[] | null;
  customerArtifactPaths?: CustomerArtifactPaths | null;
  radios?: Radios | null;
  auxiliaryApps?: string[] | null;
  billingMethod?: BillingMethod | null;
}
function fromScheduleRunConfiguration(input?: ScheduleRunConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    extraDataPackageArn: input["extraDataPackageArn"],
    networkProfileArn: input["networkProfileArn"],
    locale: input["locale"],
    location: fromLocation(input["location"]),
    vpceConfigurationArns: input["vpceConfigurationArns"],
    customerArtifactPaths: fromCustomerArtifactPaths(input["customerArtifactPaths"]),
    radios: fromRadios(input["radios"]),
    auxiliaryApps: input["auxiliaryApps"],
    billingMethod: input["billingMethod"],
  }
}

// refs: 6 - tags: input, named, interface, output
export interface Location {
  latitude: number;
  longitude: number;
}
function fromLocation(input?: Location | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    latitude: input["latitude"],
    longitude: input["longitude"],
  }
}
function toLocation(root: jsonP.JSONValue): Location {
  return jsonP.readObj({
    required: {
      "latitude": "n",
      "longitude": "n",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface CustomerArtifactPaths {
  iosPaths?: string[] | null;
  androidPaths?: string[] | null;
  deviceHostPaths?: string[] | null;
}
function fromCustomerArtifactPaths(input?: CustomerArtifactPaths | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    iosPaths: input["iosPaths"],
    androidPaths: input["androidPaths"],
    deviceHostPaths: input["deviceHostPaths"],
  }
}
function toCustomerArtifactPaths(root: jsonP.JSONValue): CustomerArtifactPaths {
  return jsonP.readObj({
    required: {},
    optional: {
      "iosPaths": ["s"],
      "androidPaths": ["s"],
      "deviceHostPaths": ["s"],
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Radios {
  wifi?: boolean | null;
  bluetooth?: boolean | null;
  nfc?: boolean | null;
  gps?: boolean | null;
}
function fromRadios(input?: Radios | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    wifi: input["wifi"],
    bluetooth: input["bluetooth"],
    nfc: input["nfc"],
    gps: input["gps"],
  }
}
function toRadios(root: jsonP.JSONValue): Radios {
  return jsonP.readObj({
    required: {},
    optional: {
      "wifi": "b",
      "bluetooth": "b",
      "nfc": "b",
      "gps": "b",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type ArtifactCategory =
| "SCREENSHOT"
| "FILE"
| "LOG"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type DevicePoolType =
| "CURATED"
| "PRIVATE"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface DeviceFilter {
  attribute?: DeviceFilterAttribute | null;
  operator?: RuleOperator | null;
  values?: string[] | null;
}
function fromDeviceFilter(input?: DeviceFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: input["attribute"],
    operator: input["operator"],
    values: input["values"],
  }
}
function toDeviceFilter(root: jsonP.JSONValue): DeviceFilter {
  return jsonP.readObj({
    required: {},
    optional: {
      "attribute": (x: jsonP.JSONValue) => cmnP.readEnum<DeviceFilterAttribute>(x),
      "operator": (x: jsonP.JSONValue) => cmnP.readEnum<RuleOperator>(x),
      "values": ["s"],
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type DeviceFilterAttribute =
| "ARN"
| "PLATFORM"
| "OS_VERSION"
| "MODEL"
| "AVAILABILITY"
| "FORM_FACTOR"
| "MANUFACTURER"
| "REMOTE_ACCESS_ENABLED"
| "REMOTE_DEBUG_ENABLED"
| "INSTANCE_ARN"
| "INSTANCE_LABELS"
| "FLEET_TYPE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type TestGridSessionArtifactCategory =
| "VIDEO"
| "LOG"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type TestGridSessionStatus =
| "ACTIVE"
| "CLOSED"
| "ERRORED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DeviceSelectionConfiguration {
  filters: DeviceFilter[];
  maxDevices: number;
}
function fromDeviceSelectionConfiguration(input?: DeviceSelectionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    filters: input["filters"]?.map(x => fromDeviceFilter(x)),
    maxDevices: input["maxDevices"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ExecutionConfiguration {
  jobTimeoutMinutes?: number | null;
  accountsCleanup?: boolean | null;
  appPackagesCleanup?: boolean | null;
  videoCapture?: boolean | null;
  skipAppResign?: boolean | null;
}
function fromExecutionConfiguration(input?: ExecutionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    jobTimeoutMinutes: input["jobTimeoutMinutes"],
    accountsCleanup: input["accountsCleanup"],
    appPackagesCleanup: input["appPackagesCleanup"],
    videoCapture: input["videoCapture"],
    skipAppResign: input["skipAppResign"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface DevicePool {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  type?: DevicePoolType | null;
  rules?: Rule[] | null;
  maxDevices?: number | null;
}
function toDevicePool(root: jsonP.JSONValue): DevicePool {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<DevicePoolType>(x),
      "rules": [toRule],
      "maxDevices": "n",
    },
  }, root);
}

// refs: 19 - tags: output, named, interface
export interface InstanceProfile {
  arn?: string | null;
  packageCleanup?: boolean | null;
  excludeAppPackagesFromCleanup?: string[] | null;
  rebootAfterUse?: boolean | null;
  name?: string | null;
  description?: string | null;
}
function toInstanceProfile(root: jsonP.JSONValue): InstanceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "packageCleanup": "b",
      "excludeAppPackagesFromCleanup": ["s"],
      "rebootAfterUse": "b",
      "name": "s",
      "description": "s",
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface NetworkProfile {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  type?: NetworkProfileType | null;
  uplinkBandwidthBits?: number | null;
  downlinkBandwidthBits?: number | null;
  uplinkDelayMs?: number | null;
  downlinkDelayMs?: number | null;
  uplinkJitterMs?: number | null;
  downlinkJitterMs?: number | null;
  uplinkLossPercent?: number | null;
  downlinkLossPercent?: number | null;
}
function toNetworkProfile(root: jsonP.JSONValue): NetworkProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<NetworkProfileType>(x),
      "uplinkBandwidthBits": "n",
      "downlinkBandwidthBits": "n",
      "uplinkDelayMs": "n",
      "downlinkDelayMs": "n",
      "uplinkJitterMs": "n",
      "downlinkJitterMs": "n",
      "uplinkLossPercent": "n",
      "downlinkLossPercent": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Project {
  arn?: string | null;
  name?: string | null;
  defaultJobTimeoutMinutes?: number | null;
  created?: Date | number | null;
}
function toProject(root: jsonP.JSONValue): Project {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "defaultJobTimeoutMinutes": "n",
      "created": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface RemoteAccessSession {
  arn?: string | null;
  name?: string | null;
  created?: Date | number | null;
  status?: ExecutionStatus | null;
  result?: ExecutionResult | null;
  message?: string | null;
  started?: Date | number | null;
  stopped?: Date | number | null;
  device?: Device | null;
  instanceArn?: string | null;
  remoteDebugEnabled?: boolean | null;
  remoteRecordEnabled?: boolean | null;
  remoteRecordAppArn?: string | null;
  hostAddress?: string | null;
  clientId?: string | null;
  billingMethod?: BillingMethod | null;
  deviceMinutes?: DeviceMinutes | null;
  endpoint?: string | null;
  deviceUdid?: string | null;
  interactionMode?: InteractionMode | null;
  skipAppResign?: boolean | null;
}
function toRemoteAccessSession(root: jsonP.JSONValue): RemoteAccessSession {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionResult>(x),
      "message": "s",
      "started": "d",
      "stopped": "d",
      "device": toDevice,
      "instanceArn": "s",
      "remoteDebugEnabled": "b",
      "remoteRecordEnabled": "b",
      "remoteRecordAppArn": "s",
      "hostAddress": "s",
      "clientId": "s",
      "billingMethod": (x: jsonP.JSONValue) => cmnP.readEnum<BillingMethod>(x),
      "deviceMinutes": toDeviceMinutes,
      "endpoint": "s",
      "deviceUdid": "s",
      "interactionMode": (x: jsonP.JSONValue) => cmnP.readEnum<InteractionMode>(x),
      "skipAppResign": "b",
    },
  }, root);
}

// refs: 15 - tags: output, named, enum
export type ExecutionStatus =
| "PENDING"
| "PENDING_CONCURRENCY"
| "PENDING_DEVICE"
| "PROCESSING"
| "SCHEDULING"
| "PREPARING"
| "RUNNING"
| "COMPLETED"
| "STOPPING"
| cmnP.UnexpectedEnumValue;

// refs: 17 - tags: output, named, enum
export type ExecutionResult =
| "PENDING"
| "PASSED"
| "WARNED"
| "FAILED"
| "SKIPPED"
| "ERRORED"
| "STOPPED"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: output, named, interface
export interface Device {
  arn?: string | null;
  name?: string | null;
  manufacturer?: string | null;
  model?: string | null;
  modelId?: string | null;
  formFactor?: DeviceFormFactor | null;
  platform?: DevicePlatform | null;
  os?: string | null;
  cpu?: CPU | null;
  resolution?: Resolution | null;
  heapSize?: number | null;
  memory?: number | null;
  image?: string | null;
  carrier?: string | null;
  radio?: string | null;
  remoteAccessEnabled?: boolean | null;
  remoteDebugEnabled?: boolean | null;
  fleetType?: string | null;
  fleetName?: string | null;
  instances?: DeviceInstance[] | null;
  availability?: DeviceAvailability | null;
}
function toDevice(root: jsonP.JSONValue): Device {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "manufacturer": "s",
      "model": "s",
      "modelId": "s",
      "formFactor": (x: jsonP.JSONValue) => cmnP.readEnum<DeviceFormFactor>(x),
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<DevicePlatform>(x),
      "os": "s",
      "cpu": toCPU,
      "resolution": toResolution,
      "heapSize": "n",
      "memory": "n",
      "image": "s",
      "carrier": "s",
      "radio": "s",
      "remoteAccessEnabled": "b",
      "remoteDebugEnabled": "b",
      "fleetType": "s",
      "fleetName": "s",
      "instances": [toDeviceInstance],
      "availability": (x: jsonP.JSONValue) => cmnP.readEnum<DeviceAvailability>(x),
    },
  }, root);
}

// refs: 12 - tags: output, named, enum
export type DeviceFormFactor =
| "PHONE"
| "TABLET"
| cmnP.UnexpectedEnumValue;

// refs: 24 - tags: output, named, enum
export type DevicePlatform =
| "ANDROID"
| "IOS"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: output, named, interface
export interface CPU {
  frequency?: string | null;
  architecture?: string | null;
  clock?: number | null;
}
function toCPU(root: jsonP.JSONValue): CPU {
  return jsonP.readObj({
    required: {},
    optional: {
      "frequency": "s",
      "architecture": "s",
      "clock": "n",
    },
  }, root);
}

// refs: 12 - tags: output, named, interface
export interface Resolution {
  width?: number | null;
  height?: number | null;
}
function toResolution(root: jsonP.JSONValue): Resolution {
  return jsonP.readObj({
    required: {},
    optional: {
      "width": "n",
      "height": "n",
    },
  }, root);
}

// refs: 15 - tags: output, named, interface
export interface DeviceInstance {
  arn?: string | null;
  deviceArn?: string | null;
  labels?: string[] | null;
  status?: InstanceStatus | null;
  udid?: string | null;
  instanceProfile?: InstanceProfile | null;
}
function toDeviceInstance(root: jsonP.JSONValue): DeviceInstance {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "deviceArn": "s",
      "labels": ["s"],
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<InstanceStatus>(x),
      "udid": "s",
      "instanceProfile": toInstanceProfile,
    },
  }, root);
}

// refs: 15 - tags: output, named, enum
export type InstanceStatus =
| "IN_USE"
| "PREPARING"
| "AVAILABLE"
| "NOT_AVAILABLE"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: output, named, enum
export type DeviceAvailability =
| "TEMPORARY_NOT_AVAILABLE"
| "BUSY"
| "AVAILABLE"
| "HIGHLY_AVAILABLE"
| cmnP.UnexpectedEnumValue;

// refs: 15 - tags: output, named, interface
export interface DeviceMinutes {
  total?: number | null;
  metered?: number | null;
  unmetered?: number | null;
}
function toDeviceMinutes(root: jsonP.JSONValue): DeviceMinutes {
  return jsonP.readObj({
    required: {},
    optional: {
      "total": "n",
      "metered": "n",
      "unmetered": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface TestGridProject {
  arn?: string | null;
  name?: string | null;
  description?: string | null;
  created?: Date | number | null;
}
function toTestGridProject(root: jsonP.JSONValue): TestGridProject {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "description": "s",
      "created": "d",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface Upload {
  arn?: string | null;
  name?: string | null;
  created?: Date | number | null;
  type?: UploadType | null;
  status?: UploadStatus | null;
  url?: string | null;
  metadata?: string | null;
  contentType?: string | null;
  message?: string | null;
  category?: UploadCategory | null;
}
function toUpload(root: jsonP.JSONValue): Upload {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "created": "d",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<UploadType>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<UploadStatus>(x),
      "url": "s",
      "metadata": "s",
      "contentType": "s",
      "message": "s",
      "category": (x: jsonP.JSONValue) => cmnP.readEnum<UploadCategory>(x),
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type UploadStatus =
| "INITIALIZED"
| "PROCESSING"
| "SUCCEEDED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type UploadCategory =
| "CURATED"
| "PRIVATE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface VPCEConfiguration {
  arn?: string | null;
  vpceConfigurationName?: string | null;
  vpceServiceName?: string | null;
  serviceDnsName?: string | null;
  vpceConfigurationDescription?: string | null;
}
function toVPCEConfiguration(root: jsonP.JSONValue): VPCEConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "vpceConfigurationName": "s",
      "vpceServiceName": "s",
      "serviceDnsName": "s",
      "vpceConfigurationDescription": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccountSettings {
  awsAccountNumber?: string | null;
  unmeteredDevices?: { [key in DevicePlatform]: number | null | undefined } | null;
  unmeteredRemoteAccessDevices?: { [key in DevicePlatform]: number | null | undefined } | null;
  maxJobTimeoutMinutes?: number | null;
  trialMinutes?: TrialMinutes | null;
  maxSlots?: { [key: string]: number | null | undefined } | null;
  defaultJobTimeoutMinutes?: number | null;
  skipAppResign?: boolean | null;
}
function toAccountSettings(root: jsonP.JSONValue): AccountSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsAccountNumber": "s",
      "unmeteredDevices": x => jsonP.readMap(x => cmnP.readEnumReq<DevicePlatform>(x), Number, x),
      "unmeteredRemoteAccessDevices": x => jsonP.readMap(x => cmnP.readEnumReq<DevicePlatform>(x), Number, x),
      "maxJobTimeoutMinutes": "n",
      "trialMinutes": toTrialMinutes,
      "maxSlots": x => jsonP.readMap(String, Number, x),
      "defaultJobTimeoutMinutes": "n",
      "skipAppResign": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrialMinutes {
  total?: number | null;
  remaining?: number | null;
}
function toTrialMinutes(root: jsonP.JSONValue): TrialMinutes {
  return jsonP.readObj({
    required: {},
    optional: {
      "total": "n",
      "remaining": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DevicePoolCompatibilityResult {
  device?: Device | null;
  compatible?: boolean | null;
  incompatibilityMessages?: IncompatibilityMessage[] | null;
}
function toDevicePoolCompatibilityResult(root: jsonP.JSONValue): DevicePoolCompatibilityResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "device": toDevice,
      "compatible": "b",
      "incompatibilityMessages": [toIncompatibilityMessage],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface IncompatibilityMessage {
  message?: string | null;
  type?: DeviceAttribute | null;
}
function toIncompatibilityMessage(root: jsonP.JSONValue): IncompatibilityMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "message": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<DeviceAttribute>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Job {
  arn?: string | null;
  name?: string | null;
  type?: TestType | null;
  created?: Date | number | null;
  status?: ExecutionStatus | null;
  result?: ExecutionResult | null;
  started?: Date | number | null;
  stopped?: Date | number | null;
  counters?: Counters | null;
  message?: string | null;
  device?: Device | null;
  instanceArn?: string | null;
  deviceMinutes?: DeviceMinutes | null;
  videoEndpoint?: string | null;
  videoCapture?: boolean | null;
}
function toJob(root: jsonP.JSONValue): Job {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<TestType>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "device": toDevice,
      "instanceArn": "s",
      "deviceMinutes": toDeviceMinutes,
      "videoEndpoint": "s",
      "videoCapture": "b",
    },
  }, root);
}

// refs: 11 - tags: output, named, interface
export interface Counters {
  total?: number | null;
  passed?: number | null;
  failed?: number | null;
  warned?: number | null;
  errored?: number | null;
  stopped?: number | null;
  skipped?: number | null;
}
function toCounters(root: jsonP.JSONValue): Counters {
  return jsonP.readObj({
    required: {},
    optional: {
      "total": "n",
      "passed": "n",
      "failed": "n",
      "warned": "n",
      "errored": "n",
      "stopped": "n",
      "skipped": "n",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface OfferingStatus {
  type?: OfferingTransactionType | null;
  offering?: Offering | null;
  quantity?: number | null;
  effectiveOn?: Date | number | null;
}
function toOfferingStatus(root: jsonP.JSONValue): OfferingStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<OfferingTransactionType>(x),
      "offering": toOffering,
      "quantity": "n",
      "effectiveOn": "d",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type OfferingTransactionType =
| "PURCHASE"
| "RENEW"
| "SYSTEM"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface Offering {
  id?: string | null;
  description?: string | null;
  type?: OfferingType | null;
  platform?: DevicePlatform | null;
  recurringCharges?: RecurringCharge[] | null;
}
function toOffering(root: jsonP.JSONValue): Offering {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "description": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<OfferingType>(x),
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<DevicePlatform>(x),
      "recurringCharges": [toRecurringCharge],
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type OfferingType =
| "RECURRING"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface RecurringCharge {
  cost?: MonetaryAmount | null;
  frequency?: RecurringChargeFrequency | null;
}
function toRecurringCharge(root: jsonP.JSONValue): RecurringCharge {
  return jsonP.readObj({
    required: {},
    optional: {
      "cost": toMonetaryAmount,
      "frequency": (x: jsonP.JSONValue) => cmnP.readEnum<RecurringChargeFrequency>(x),
    },
  }, root);
}

// refs: 9 - tags: output, named, interface
export interface MonetaryAmount {
  amount?: number | null;
  currencyCode?: CurrencyCode | null;
}
function toMonetaryAmount(root: jsonP.JSONValue): MonetaryAmount {
  return jsonP.readObj({
    required: {},
    optional: {
      "amount": "n",
      "currencyCode": (x: jsonP.JSONValue) => cmnP.readEnum<CurrencyCode>(x),
    },
  }, root);
}

// refs: 9 - tags: output, named, enum
export type CurrencyCode =
| "USD"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type RecurringChargeFrequency =
| "MONTHLY"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface Run {
  arn?: string | null;
  name?: string | null;
  type?: TestType | null;
  platform?: DevicePlatform | null;
  created?: Date | number | null;
  status?: ExecutionStatus | null;
  result?: ExecutionResult | null;
  started?: Date | number | null;
  stopped?: Date | number | null;
  counters?: Counters | null;
  message?: string | null;
  totalJobs?: number | null;
  completedJobs?: number | null;
  billingMethod?: BillingMethod | null;
  deviceMinutes?: DeviceMinutes | null;
  networkProfile?: NetworkProfile | null;
  parsingResultUrl?: string | null;
  resultCode?: ExecutionResultCode | null;
  seed?: number | null;
  appUpload?: string | null;
  eventCount?: number | null;
  jobTimeoutMinutes?: number | null;
  devicePoolArn?: string | null;
  locale?: string | null;
  radios?: Radios | null;
  location?: Location | null;
  customerArtifactPaths?: CustomerArtifactPaths | null;
  webUrl?: string | null;
  skipAppResign?: boolean | null;
  testSpecArn?: string | null;
  deviceSelectionResult?: DeviceSelectionResult | null;
}
function toRun(root: jsonP.JSONValue): Run {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<TestType>(x),
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<DevicePlatform>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "totalJobs": "n",
      "completedJobs": "n",
      "billingMethod": (x: jsonP.JSONValue) => cmnP.readEnum<BillingMethod>(x),
      "deviceMinutes": toDeviceMinutes,
      "networkProfile": toNetworkProfile,
      "parsingResultUrl": "s",
      "resultCode": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionResultCode>(x),
      "seed": "n",
      "appUpload": "s",
      "eventCount": "n",
      "jobTimeoutMinutes": "n",
      "devicePoolArn": "s",
      "locale": "s",
      "radios": toRadios,
      "location": toLocation,
      "customerArtifactPaths": toCustomerArtifactPaths,
      "webUrl": "s",
      "skipAppResign": "b",
      "testSpecArn": "s",
      "deviceSelectionResult": toDeviceSelectionResult,
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type ExecutionResultCode =
| "PARSING_FAILED"
| "VPC_ENDPOINT_SETUP_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface DeviceSelectionResult {
  filters?: DeviceFilter[] | null;
  matchedDevicesCount?: number | null;
  maxDevices?: number | null;
}
function toDeviceSelectionResult(root: jsonP.JSONValue): DeviceSelectionResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "filters": [toDeviceFilter],
      "matchedDevicesCount": "n",
      "maxDevices": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Suite {
  arn?: string | null;
  name?: string | null;
  type?: TestType | null;
  created?: Date | number | null;
  status?: ExecutionStatus | null;
  result?: ExecutionResult | null;
  started?: Date | number | null;
  stopped?: Date | number | null;
  counters?: Counters | null;
  message?: string | null;
  deviceMinutes?: DeviceMinutes | null;
}
function toSuite(root: jsonP.JSONValue): Suite {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<TestType>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "deviceMinutes": toDeviceMinutes,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Test {
  arn?: string | null;
  name?: string | null;
  type?: TestType | null;
  created?: Date | number | null;
  status?: ExecutionStatus | null;
  result?: ExecutionResult | null;
  started?: Date | number | null;
  stopped?: Date | number | null;
  counters?: Counters | null;
  message?: string | null;
  deviceMinutes?: DeviceMinutes | null;
}
function toTest(root: jsonP.JSONValue): Test {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<TestType>(x),
      "created": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionResult>(x),
      "started": "d",
      "stopped": "d",
      "counters": toCounters,
      "message": "s",
      "deviceMinutes": toDeviceMinutes,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TestGridSession {
  arn?: string | null;
  status?: TestGridSessionStatus | null;
  created?: Date | number | null;
  ended?: Date | number | null;
  billingMinutes?: number | null;
  seleniumProperties?: string | null;
}
function toTestGridSession(root: jsonP.JSONValue): TestGridSession {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<TestGridSessionStatus>(x),
      "created": "d",
      "ended": "d",
      "billingMinutes": "n",
      "seleniumProperties": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Artifact {
  arn?: string | null;
  name?: string | null;
  type?: ArtifactType | null;
  extension?: string | null;
  url?: string | null;
}
function toArtifact(root: jsonP.JSONValue): Artifact {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ArtifactType>(x),
      "extension": "s",
      "url": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ArtifactType =
| "UNKNOWN"
| "SCREENSHOT"
| "DEVICE_LOG"
| "MESSAGE_LOG"
| "VIDEO_LOG"
| "RESULT_LOG"
| "SERVICE_LOG"
| "WEBKIT_LOG"
| "INSTRUMENTATION_OUTPUT"
| "EXERCISER_MONKEY_OUTPUT"
| "CALABASH_JSON_OUTPUT"
| "CALABASH_PRETTY_OUTPUT"
| "CALABASH_STANDARD_OUTPUT"
| "CALABASH_JAVA_XML_OUTPUT"
| "AUTOMATION_OUTPUT"
| "APPIUM_SERVER_OUTPUT"
| "APPIUM_JAVA_OUTPUT"
| "APPIUM_JAVA_XML_OUTPUT"
| "APPIUM_PYTHON_OUTPUT"
| "APPIUM_PYTHON_XML_OUTPUT"
| "EXPLORER_EVENT_LOG"
| "EXPLORER_SUMMARY_LOG"
| "APPLICATION_CRASH_REPORT"
| "XCTEST_LOG"
| "VIDEO"
| "CUSTOMER_ARTIFACT"
| "CUSTOMER_ARTIFACT_LOG"
| "TESTSPEC_OUTPUT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface OfferingPromotion {
  id?: string | null;
  description?: string | null;
}
function toOfferingPromotion(root: jsonP.JSONValue): OfferingPromotion {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "description": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface OfferingTransaction {
  offeringStatus?: OfferingStatus | null;
  transactionId?: string | null;
  offeringPromotionId?: string | null;
  createdOn?: Date | number | null;
  cost?: MonetaryAmount | null;
}
function toOfferingTransaction(root: jsonP.JSONValue): OfferingTransaction {
  return jsonP.readObj({
    required: {},
    optional: {
      "offeringStatus": toOfferingStatus,
      "transactionId": "s",
      "offeringPromotionId": "s",
      "createdOn": "d",
      "cost": toMonetaryAmount,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Sample {
  arn?: string | null;
  type?: SampleType | null;
  url?: string | null;
}
function toSample(root: jsonP.JSONValue): Sample {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<SampleType>(x),
      "url": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SampleType =
| "CPU"
| "MEMORY"
| "THREADS"
| "RX_RATE"
| "TX_RATE"
| "RX"
| "TX"
| "NATIVE_FRAMES"
| "NATIVE_FPS"
| "NATIVE_MIN_DRAWTIME"
| "NATIVE_AVG_DRAWTIME"
| "NATIVE_MAX_DRAWTIME"
| "OPENGL_FRAMES"
| "OPENGL_FPS"
| "OPENGL_MIN_DRAWTIME"
| "OPENGL_AVG_DRAWTIME"
| "OPENGL_MAX_DRAWTIME"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface TestGridSessionAction {
  action?: string | null;
  started?: Date | number | null;
  duration?: number | null;
  statusCode?: string | null;
  requestMethod?: string | null;
}
function toTestGridSessionAction(root: jsonP.JSONValue): TestGridSessionAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "action": "s",
      "started": "d",
      "duration": "n",
      "statusCode": "s",
      "requestMethod": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TestGridSessionArtifact {
  filename?: string | null;
  type?: TestGridSessionArtifactType | null;
  url?: string | null;
}
function toTestGridSessionArtifact(root: jsonP.JSONValue): TestGridSessionArtifact {
  return jsonP.readObj({
    required: {},
    optional: {
      "filename": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<TestGridSessionArtifactType>(x),
      "url": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type TestGridSessionArtifactType =
| "UNKNOWN"
| "VIDEO"
| "SELENIUM_LOG"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface UniqueProblem {
  message?: string | null;
  problems?: Problem[] | null;
}
function toUniqueProblem(root: jsonP.JSONValue): UniqueProblem {
  return jsonP.readObj({
    required: {},
    optional: {
      "message": "s",
      "problems": [toProblem],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Problem {
  run?: ProblemDetail | null;
  job?: ProblemDetail | null;
  suite?: ProblemDetail | null;
  test?: ProblemDetail | null;
  device?: Device | null;
  result?: ExecutionResult | null;
  message?: string | null;
}
function toProblem(root: jsonP.JSONValue): Problem {
  return jsonP.readObj({
    required: {},
    optional: {
      "run": toProblemDetail,
      "job": toProblemDetail,
      "suite": toProblemDetail,
      "test": toProblemDetail,
      "device": toDevice,
      "result": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionResult>(x),
      "message": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ProblemDetail {
  arn?: string | null;
  name?: string | null;
}
function toProblemDetail(root: jsonP.JSONValue): ProblemDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "name": "s",
    },
  }, root);
}
