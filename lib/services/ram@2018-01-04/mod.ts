// Autogenerated API client for: AWS Resource Access Manager

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class RAM {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(RAM.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-01-04",
    "endpointPrefix": "ram",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "RAM",
    "serviceFullName": "AWS Resource Access Manager",
    "serviceId": "RAM",
    "signatureVersion": "v4",
    "uid": "ram-2018-01-04"
  };

  async acceptResourceShareInvitation(
    {abortSignal, ...params}: RequestConfig & s.AcceptResourceShareInvitationRequest,
  ): Promise<s.AcceptResourceShareInvitationResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArn: params["resourceShareInvitationArn"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptResourceShareInvitation",
      requestUri: "/acceptresourceshareinvitation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareInvitation": toResourceShareInvitation,
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async associateResourceShare(
    {abortSignal, ...params}: RequestConfig & s.AssociateResourceShareRequest,
  ): Promise<s.AssociateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      resourceArns: params["resourceArns"],
      principals: params["principals"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateResourceShare",
      requestUri: "/associateresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareAssociations": [toResourceShareAssociation],
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async associateResourceSharePermission(
    {abortSignal, ...params}: RequestConfig & s.AssociateResourceSharePermissionRequest,
  ): Promise<s.AssociateResourceSharePermissionResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      permissionArn: params["permissionArn"],
      replace: params["replace"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateResourceSharePermission",
      requestUri: "/associateresourcesharepermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async createResourceShare(
    {abortSignal, ...params}: RequestConfig & s.CreateResourceShareRequest,
  ): Promise<s.CreateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      resourceArns: params["resourceArns"],
      principals: params["principals"],
      tags: params["tags"]?.map(x => fromTag(x)),
      allowExternalPrincipals: params["allowExternalPrincipals"],
      clientToken: params["clientToken"],
      permissionArns: params["permissionArns"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResourceShare",
      requestUri: "/createresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShare": toResourceShare,
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async deleteResourceShare(
    {abortSignal, ...params}: RequestConfig & s.DeleteResourceShareRequest,
  ): Promise<s.DeleteResourceShareResponse> {
    const query = new URLSearchParams;
    query.set("resourceShareArn", params["resourceShareArn"]?.toString() ?? "");
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteResourceShare",
      method: "DELETE",
      requestUri: "/deleteresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async disassociateResourceShare(
    {abortSignal, ...params}: RequestConfig & s.DisassociateResourceShareRequest,
  ): Promise<s.DisassociateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      resourceArns: params["resourceArns"],
      principals: params["principals"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateResourceShare",
      requestUri: "/disassociateresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareAssociations": [toResourceShareAssociation],
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async disassociateResourceSharePermission(
    {abortSignal, ...params}: RequestConfig & s.DisassociateResourceSharePermissionRequest,
  ): Promise<s.DisassociateResourceSharePermissionResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      permissionArn: params["permissionArn"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateResourceSharePermission",
      requestUri: "/disassociateresourcesharepermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async enableSharingWithAwsOrganization(
    {abortSignal, ...params}: RequestConfig & s.EnableSharingWithAwsOrganizationRequest = {},
  ): Promise<s.EnableSharingWithAwsOrganizationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "EnableSharingWithAwsOrganization",
      requestUri: "/enablesharingwithawsorganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
      },
    }, await resp.json());
  }

  async getPermission(
    {abortSignal, ...params}: RequestConfig & s.GetPermissionRequest,
  ): Promise<s.GetPermissionResponse> {
    const body: jsonP.JSONObject = {
      permissionArn: params["permissionArn"],
      permissionVersion: params["permissionVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPermission",
      requestUri: "/getpermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "permission": toResourceSharePermissionDetail,
      },
    }, await resp.json());
  }

  async getResourcePolicies(
    {abortSignal, ...params}: RequestConfig & s.GetResourcePoliciesRequest,
  ): Promise<s.GetResourcePoliciesResponse> {
    const body: jsonP.JSONObject = {
      resourceArns: params["resourceArns"],
      principal: params["principal"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourcePolicies",
      requestUri: "/getresourcepolicies",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "policies": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceShareAssociations(
    {abortSignal, ...params}: RequestConfig & s.GetResourceShareAssociationsRequest,
  ): Promise<s.GetResourceShareAssociationsResponse> {
    const body: jsonP.JSONObject = {
      associationType: params["associationType"],
      resourceShareArns: params["resourceShareArns"],
      resourceArn: params["resourceArn"],
      principal: params["principal"],
      associationStatus: params["associationStatus"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceShareAssociations",
      requestUri: "/getresourceshareassociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareAssociations": [toResourceShareAssociation],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceShareInvitations(
    {abortSignal, ...params}: RequestConfig & s.GetResourceShareInvitationsRequest = {},
  ): Promise<s.GetResourceShareInvitationsResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArns: params["resourceShareInvitationArns"],
      resourceShareArns: params["resourceShareArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceShareInvitations",
      requestUri: "/getresourceshareinvitations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareInvitations": [toResourceShareInvitation],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceShares(
    {abortSignal, ...params}: RequestConfig & s.GetResourceSharesRequest,
  ): Promise<s.GetResourceSharesResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArns: params["resourceShareArns"],
      resourceShareStatus: params["resourceShareStatus"],
      resourceOwner: params["resourceOwner"],
      name: params["name"],
      tagFilters: params["tagFilters"]?.map(x => fromTagFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceShares",
      requestUri: "/getresourceshares",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShares": [toResourceShare],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPendingInvitationResources(
    {abortSignal, ...params}: RequestConfig & s.ListPendingInvitationResourcesRequest,
  ): Promise<s.ListPendingInvitationResourcesResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArn: params["resourceShareInvitationArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPendingInvitationResources",
      requestUri: "/listpendinginvitationresources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resources": [toResource],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissions(
    {abortSignal, ...params}: RequestConfig & s.ListPermissionsRequest = {},
  ): Promise<s.ListPermissionsResponse> {
    const body: jsonP.JSONObject = {
      resourceType: params["resourceType"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissions",
      requestUri: "/listpermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "permissions": [toResourceSharePermissionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPrincipals(
    {abortSignal, ...params}: RequestConfig & s.ListPrincipalsRequest,
  ): Promise<s.ListPrincipalsResponse> {
    const body: jsonP.JSONObject = {
      resourceOwner: params["resourceOwner"],
      resourceArn: params["resourceArn"],
      principals: params["principals"],
      resourceType: params["resourceType"],
      resourceShareArns: params["resourceShareArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPrincipals",
      requestUri: "/listprincipals",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "principals": [toPrincipal],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceSharePermissions(
    {abortSignal, ...params}: RequestConfig & s.ListResourceSharePermissionsRequest,
  ): Promise<s.ListResourceSharePermissionsResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceSharePermissions",
      requestUri: "/listresourcesharepermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "permissions": [toResourceSharePermissionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceTypes(
    {abortSignal, ...params}: RequestConfig & s.ListResourceTypesRequest = {},
  ): Promise<s.ListResourceTypesResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceTypes",
      requestUri: "/listresourcetypes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceTypes": [toServiceNameAndResourceType],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listResources(
    {abortSignal, ...params}: RequestConfig & s.ListResourcesRequest,
  ): Promise<s.ListResourcesResponse> {
    const body: jsonP.JSONObject = {
      resourceOwner: params["resourceOwner"],
      principal: params["principal"],
      resourceType: params["resourceType"],
      resourceArns: params["resourceArns"],
      resourceShareArns: params["resourceShareArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResources",
      requestUri: "/listresources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resources": [toResource],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async promoteResourceShareCreatedFromPolicy(
    {abortSignal, ...params}: RequestConfig & s.PromoteResourceShareCreatedFromPolicyRequest,
  ): Promise<s.PromoteResourceShareCreatedFromPolicyResponse> {
    const query = new URLSearchParams;
    query.set("resourceShareArn", params["resourceShareArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "PromoteResourceShareCreatedFromPolicy",
      requestUri: "/promoteresourcesharecreatedfrompolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
      },
    }, await resp.json());
  }

  async rejectResourceShareInvitation(
    {abortSignal, ...params}: RequestConfig & s.RejectResourceShareInvitationRequest,
  ): Promise<s.RejectResourceShareInvitationResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArn: params["resourceShareInvitationArn"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectResourceShareInvitation",
      requestUri: "/rejectresourceshareinvitation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareInvitation": toResourceShareInvitation,
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/tagresource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: "/untagresource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateResourceShare(
    {abortSignal, ...params}: RequestConfig & s.UpdateResourceShareRequest,
  ): Promise<s.UpdateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      name: params["name"],
      allowExternalPrincipals: params["allowExternalPrincipals"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResourceShare",
      requestUri: "/updateresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShare": toResourceShare,
        "clientToken": "s",
      },
    }, await resp.json());
  }

}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "key": "s",
      "value": "s",
    },
  }, root);
}

function fromTagFilter(input?: s.TagFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tagKey: input["tagKey"],
    tagValues: input["tagValues"],
  }
}

function toResourceShareInvitation(root: jsonP.JSONValue): s.ResourceShareInvitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceShareInvitationArn": "s",
      "resourceShareName": "s",
      "resourceShareArn": "s",
      "senderAccountId": "s",
      "receiverAccountId": "s",
      "invitationTimestamp": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceShareInvitationStatus>(x),
      "resourceShareAssociations": [toResourceShareAssociation],
    },
  }, root);
}

function toResourceShareAssociation(root: jsonP.JSONValue): s.ResourceShareAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceShareArn": "s",
      "resourceShareName": "s",
      "associatedEntity": "s",
      "associationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceShareAssociationType>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceShareAssociationStatus>(x),
      "statusMessage": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
      "external": "b",
    },
  }, root);
}

function toResourceShare(root: jsonP.JSONValue): s.ResourceShare {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceShareArn": "s",
      "name": "s",
      "owningAccountId": "s",
      "allowExternalPrincipals": "b",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceShareStatus>(x),
      "statusMessage": "s",
      "tags": [toTag],
      "creationTime": "d",
      "lastUpdatedTime": "d",
      "featureSet": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceShareFeatureSet>(x),
    },
  }, root);
}

function toResourceSharePermissionDetail(root: jsonP.JSONValue): s.ResourceSharePermissionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "version": "s",
      "defaultVersion": "b",
      "name": "s",
      "resourceType": "s",
      "permission": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
    },
  }, root);
}

function toResource(root: jsonP.JSONValue): s.Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "type": "s",
      "resourceShareArn": "s",
      "resourceGroupArn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceStatus>(x),
      "statusMessage": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
    },
  }, root);
}

function toResourceSharePermissionSummary(root: jsonP.JSONValue): s.ResourceSharePermissionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "version": "s",
      "defaultVersion": "b",
      "name": "s",
      "resourceType": "s",
      "status": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
    },
  }, root);
}

function toPrincipal(root: jsonP.JSONValue): s.Principal {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "resourceShareArn": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
      "external": "b",
    },
  }, root);
}

function toServiceNameAndResourceType(root: jsonP.JSONValue): s.ServiceNameAndResourceType {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": "s",
      "serviceName": "s",
    },
  }, root);
}
