// Autogenerated API client for: AWS Resource Access Manager

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class RAM {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(RAM.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-01-04",
    "endpointPrefix": "ram",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "RAM",
    "serviceFullName": "AWS Resource Access Manager",
    "serviceId": "RAM",
    "signatureVersion": "v4",
    "uid": "ram-2018-01-04"
  };

  async acceptResourceShareInvitation(
    {abortSignal, ...params}: RequestConfig & AcceptResourceShareInvitationRequest,
  ): Promise<AcceptResourceShareInvitationResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArn: params["resourceShareInvitationArn"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptResourceShareInvitation",
      requestUri: "/acceptresourceshareinvitation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareInvitation": toResourceShareInvitation,
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async associateResourceShare(
    {abortSignal, ...params}: RequestConfig & AssociateResourceShareRequest,
  ): Promise<AssociateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      resourceArns: params["resourceArns"],
      principals: params["principals"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateResourceShare",
      requestUri: "/associateresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareAssociations": [toResourceShareAssociation],
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async associateResourceSharePermission(
    {abortSignal, ...params}: RequestConfig & AssociateResourceSharePermissionRequest,
  ): Promise<AssociateResourceSharePermissionResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      permissionArn: params["permissionArn"],
      replace: params["replace"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateResourceSharePermission",
      requestUri: "/associateresourcesharepermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async createResourceShare(
    {abortSignal, ...params}: RequestConfig & CreateResourceShareRequest,
  ): Promise<CreateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      resourceArns: params["resourceArns"],
      principals: params["principals"],
      tags: params["tags"]?.map(x => fromTag(x)),
      allowExternalPrincipals: params["allowExternalPrincipals"],
      clientToken: params["clientToken"],
      permissionArns: params["permissionArns"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResourceShare",
      requestUri: "/createresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShare": toResourceShare,
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async deleteResourceShare(
    {abortSignal, ...params}: RequestConfig & DeleteResourceShareRequest,
  ): Promise<DeleteResourceShareResponse> {
    const query = new URLSearchParams;
    query.set("resourceShareArn", params["resourceShareArn"]?.toString() ?? "");
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteResourceShare",
      method: "DELETE",
      requestUri: "/deleteresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async disassociateResourceShare(
    {abortSignal, ...params}: RequestConfig & DisassociateResourceShareRequest,
  ): Promise<DisassociateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      resourceArns: params["resourceArns"],
      principals: params["principals"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateResourceShare",
      requestUri: "/disassociateresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareAssociations": [toResourceShareAssociation],
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async disassociateResourceSharePermission(
    {abortSignal, ...params}: RequestConfig & DisassociateResourceSharePermissionRequest,
  ): Promise<DisassociateResourceSharePermissionResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      permissionArn: params["permissionArn"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateResourceSharePermission",
      requestUri: "/disassociateresourcesharepermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async enableSharingWithAwsOrganization(
    {abortSignal, ...params}: RequestConfig & EnableSharingWithAwsOrganizationRequest = {},
  ): Promise<EnableSharingWithAwsOrganizationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "EnableSharingWithAwsOrganization",
      requestUri: "/enablesharingwithawsorganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
      },
    }, await resp.json());
  }

  async getPermission(
    {abortSignal, ...params}: RequestConfig & GetPermissionRequest,
  ): Promise<GetPermissionResponse> {
    const body: jsonP.JSONObject = {
      permissionArn: params["permissionArn"],
      permissionVersion: params["permissionVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPermission",
      requestUri: "/getpermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "permission": toResourceSharePermissionDetail,
      },
    }, await resp.json());
  }

  async getResourcePolicies(
    {abortSignal, ...params}: RequestConfig & GetResourcePoliciesRequest,
  ): Promise<GetResourcePoliciesResponse> {
    const body: jsonP.JSONObject = {
      resourceArns: params["resourceArns"],
      principal: params["principal"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourcePolicies",
      requestUri: "/getresourcepolicies",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "policies": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceShareAssociations(
    {abortSignal, ...params}: RequestConfig & GetResourceShareAssociationsRequest,
  ): Promise<GetResourceShareAssociationsResponse> {
    const body: jsonP.JSONObject = {
      associationType: params["associationType"],
      resourceShareArns: params["resourceShareArns"],
      resourceArn: params["resourceArn"],
      principal: params["principal"],
      associationStatus: params["associationStatus"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceShareAssociations",
      requestUri: "/getresourceshareassociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareAssociations": [toResourceShareAssociation],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceShareInvitations(
    {abortSignal, ...params}: RequestConfig & GetResourceShareInvitationsRequest = {},
  ): Promise<GetResourceShareInvitationsResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArns: params["resourceShareInvitationArns"],
      resourceShareArns: params["resourceShareArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceShareInvitations",
      requestUri: "/getresourceshareinvitations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareInvitations": [toResourceShareInvitation],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceShares(
    {abortSignal, ...params}: RequestConfig & GetResourceSharesRequest,
  ): Promise<GetResourceSharesResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArns: params["resourceShareArns"],
      resourceShareStatus: params["resourceShareStatus"],
      resourceOwner: params["resourceOwner"],
      name: params["name"],
      tagFilters: params["tagFilters"]?.map(x => fromTagFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceShares",
      requestUri: "/getresourceshares",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShares": [toResourceShare],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPendingInvitationResources(
    {abortSignal, ...params}: RequestConfig & ListPendingInvitationResourcesRequest,
  ): Promise<ListPendingInvitationResourcesResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArn: params["resourceShareInvitationArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPendingInvitationResources",
      requestUri: "/listpendinginvitationresources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resources": [toResource],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissions(
    {abortSignal, ...params}: RequestConfig & ListPermissionsRequest = {},
  ): Promise<ListPermissionsResponse> {
    const body: jsonP.JSONObject = {
      resourceType: params["resourceType"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissions",
      requestUri: "/listpermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "permissions": [toResourceSharePermissionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPrincipals(
    {abortSignal, ...params}: RequestConfig & ListPrincipalsRequest,
  ): Promise<ListPrincipalsResponse> {
    const body: jsonP.JSONObject = {
      resourceOwner: params["resourceOwner"],
      resourceArn: params["resourceArn"],
      principals: params["principals"],
      resourceType: params["resourceType"],
      resourceShareArns: params["resourceShareArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPrincipals",
      requestUri: "/listprincipals",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "principals": [toPrincipal],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceSharePermissions(
    {abortSignal, ...params}: RequestConfig & ListResourceSharePermissionsRequest,
  ): Promise<ListResourceSharePermissionsResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceSharePermissions",
      requestUri: "/listresourcesharepermissions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "permissions": [toResourceSharePermissionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceTypes(
    {abortSignal, ...params}: RequestConfig & ListResourceTypesRequest = {},
  ): Promise<ListResourceTypesResponse> {
    const body: jsonP.JSONObject = {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceTypes",
      requestUri: "/listresourcetypes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceTypes": [toServiceNameAndResourceType],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listResources(
    {abortSignal, ...params}: RequestConfig & ListResourcesRequest,
  ): Promise<ListResourcesResponse> {
    const body: jsonP.JSONObject = {
      resourceOwner: params["resourceOwner"],
      principal: params["principal"],
      resourceType: params["resourceType"],
      resourceArns: params["resourceArns"],
      resourceShareArns: params["resourceShareArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResources",
      requestUri: "/listresources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resources": [toResource],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async promoteResourceShareCreatedFromPolicy(
    {abortSignal, ...params}: RequestConfig & PromoteResourceShareCreatedFromPolicyRequest,
  ): Promise<PromoteResourceShareCreatedFromPolicyResponse> {
    const query = new URLSearchParams;
    query.set("resourceShareArn", params["resourceShareArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "PromoteResourceShareCreatedFromPolicy",
      requestUri: "/promoteresourcesharecreatedfrompolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "returnValue": "b",
      },
    }, await resp.json());
  }

  async rejectResourceShareInvitation(
    {abortSignal, ...params}: RequestConfig & RejectResourceShareInvitationRequest,
  ): Promise<RejectResourceShareInvitationResponse> {
    const body: jsonP.JSONObject = {
      resourceShareInvitationArn: params["resourceShareInvitationArn"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectResourceShareInvitation",
      requestUri: "/rejectresourceshareinvitation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShareInvitation": toResourceShareInvitation,
        "clientToken": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/tagresource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: "/untagresource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateResourceShare(
    {abortSignal, ...params}: RequestConfig & UpdateResourceShareRequest,
  ): Promise<UpdateResourceShareResponse> {
    const body: jsonP.JSONObject = {
      resourceShareArn: params["resourceShareArn"],
      name: params["name"],
      allowExternalPrincipals: params["allowExternalPrincipals"],
      clientToken: params["clientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResourceShare",
      requestUri: "/updateresourceshare",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceShare": toResourceShare,
        "clientToken": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcceptResourceShareInvitationRequest {
  resourceShareInvitationArn: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateResourceShareRequest {
  resourceShareArn: string;
  resourceArns?: string[] | null;
  principals?: string[] | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateResourceSharePermissionRequest {
  resourceShareArn: string;
  permissionArn: string;
  replace?: boolean | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateResourceShareRequest {
  name: string;
  resourceArns?: string[] | null;
  principals?: string[] | null;
  tags?: Tag[] | null;
  allowExternalPrincipals?: boolean | null;
  clientToken?: string | null;
  permissionArns?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteResourceShareRequest {
  resourceShareArn: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateResourceShareRequest {
  resourceShareArn: string;
  resourceArns?: string[] | null;
  principals?: string[] | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateResourceSharePermissionRequest {
  resourceShareArn: string;
  permissionArn: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface EnableSharingWithAwsOrganizationRequest {
}

// refs: 1 - tags: named, input
export interface GetPermissionRequest {
  permissionArn: string;
  permissionVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface GetResourcePoliciesRequest {
  resourceArns: string[];
  principal?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetResourceShareAssociationsRequest {
  associationType: ResourceShareAssociationType;
  resourceShareArns?: string[] | null;
  resourceArn?: string | null;
  principal?: string | null;
  associationStatus?: ResourceShareAssociationStatus | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetResourceShareInvitationsRequest {
  resourceShareInvitationArns?: string[] | null;
  resourceShareArns?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetResourceSharesRequest {
  resourceShareArns?: string[] | null;
  resourceShareStatus?: ResourceShareStatus | null;
  resourceOwner: ResourceOwner;
  name?: string | null;
  tagFilters?: TagFilter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPendingInvitationResourcesRequest {
  resourceShareInvitationArn: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPermissionsRequest {
  resourceType?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPrincipalsRequest {
  resourceOwner: ResourceOwner;
  resourceArn?: string | null;
  principals?: string[] | null;
  resourceType?: string | null;
  resourceShareArns?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListResourceSharePermissionsRequest {
  resourceShareArn: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListResourceTypesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListResourcesRequest {
  resourceOwner: ResourceOwner;
  principal?: string | null;
  resourceType?: string | null;
  resourceArns?: string[] | null;
  resourceShareArns?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface PromoteResourceShareCreatedFromPolicyRequest {
  resourceShareArn: string;
}

// refs: 1 - tags: named, input
export interface RejectResourceShareInvitationRequest {
  resourceShareInvitationArn: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceShareArn: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceShareArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateResourceShareRequest {
  resourceShareArn: string;
  name?: string | null;
  allowExternalPrincipals?: boolean | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface AcceptResourceShareInvitationResponse {
  resourceShareInvitation?: ResourceShareInvitation | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateResourceShareResponse {
  resourceShareAssociations?: ResourceShareAssociation[] | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateResourceSharePermissionResponse {
  returnValue?: boolean | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateResourceShareResponse {
  resourceShare?: ResourceShare | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteResourceShareResponse {
  returnValue?: boolean | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisassociateResourceShareResponse {
  resourceShareAssociations?: ResourceShareAssociation[] | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisassociateResourceSharePermissionResponse {
  returnValue?: boolean | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface EnableSharingWithAwsOrganizationResponse {
  returnValue?: boolean | null;
}

// refs: 1 - tags: named, output
export interface GetPermissionResponse {
  permission?: ResourceSharePermissionDetail | null;
}

// refs: 1 - tags: named, output
export interface GetResourcePoliciesResponse {
  policies?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourceShareAssociationsResponse {
  resourceShareAssociations?: ResourceShareAssociation[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourceShareInvitationsResponse {
  resourceShareInvitations?: ResourceShareInvitation[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourceSharesResponse {
  resourceShares?: ResourceShare[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPendingInvitationResourcesResponse {
  resources?: Resource[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPermissionsResponse {
  permissions?: ResourceSharePermissionSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPrincipalsResponse {
  principals?: Principal[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourceSharePermissionsResponse {
  permissions?: ResourceSharePermissionSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourceTypesResponse {
  resourceTypes?: ServiceNameAndResourceType[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourcesResponse {
  resources?: Resource[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PromoteResourceShareCreatedFromPolicyResponse {
  returnValue?: boolean | null;
}

// refs: 1 - tags: named, output
export interface RejectResourceShareInvitationResponse {
  resourceShareInvitation?: ResourceShareInvitation | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateResourceShareResponse {
  resourceShare?: ResourceShare | null;
  clientToken?: string | null;
}

// refs: 5 - tags: input, named, interface, output
export interface Tag {
  key?: string | null;
  value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "key": "s",
      "value": "s",
    },
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type ResourceShareAssociationType =
| "PRINCIPAL"
| "RESOURCE"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type ResourceShareAssociationStatus =
| "ASSOCIATING"
| "ASSOCIATED"
| "FAILED"
| "DISASSOCIATING"
| "DISASSOCIATED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type ResourceShareStatus =
| "PENDING"
| "ACTIVE"
| "FAILED"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum
export type ResourceOwner =
| "SELF"
| "OTHER-ACCOUNTS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface TagFilter {
  tagKey?: string | null;
  tagValues?: string[] | null;
}
function fromTagFilter(input?: TagFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tagKey: input["tagKey"],
    tagValues: input["tagValues"],
  }
}

// refs: 3 - tags: output, named, interface
export interface ResourceShareInvitation {
  resourceShareInvitationArn?: string | null;
  resourceShareName?: string | null;
  resourceShareArn?: string | null;
  senderAccountId?: string | null;
  receiverAccountId?: string | null;
  invitationTimestamp?: Date | number | null;
  status?: ResourceShareInvitationStatus | null;
  resourceShareAssociations?: ResourceShareAssociation[] | null;
}
function toResourceShareInvitation(root: jsonP.JSONValue): ResourceShareInvitation {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceShareInvitationArn": "s",
      "resourceShareName": "s",
      "resourceShareArn": "s",
      "senderAccountId": "s",
      "receiverAccountId": "s",
      "invitationTimestamp": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceShareInvitationStatus>(x),
      "resourceShareAssociations": [toResourceShareAssociation],
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ResourceShareInvitationStatus =
| "PENDING"
| "ACCEPTED"
| "REJECTED"
| "EXPIRED"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface ResourceShareAssociation {
  resourceShareArn?: string | null;
  resourceShareName?: string | null;
  associatedEntity?: string | null;
  associationType?: ResourceShareAssociationType | null;
  status?: ResourceShareAssociationStatus | null;
  statusMessage?: string | null;
  creationTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
  external?: boolean | null;
}
function toResourceShareAssociation(root: jsonP.JSONValue): ResourceShareAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceShareArn": "s",
      "resourceShareName": "s",
      "associatedEntity": "s",
      "associationType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceShareAssociationType>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceShareAssociationStatus>(x),
      "statusMessage": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
      "external": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ResourceShare {
  resourceShareArn?: string | null;
  name?: string | null;
  owningAccountId?: string | null;
  allowExternalPrincipals?: boolean | null;
  status?: ResourceShareStatus | null;
  statusMessage?: string | null;
  tags?: Tag[] | null;
  creationTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
  featureSet?: ResourceShareFeatureSet | null;
}
function toResourceShare(root: jsonP.JSONValue): ResourceShare {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceShareArn": "s",
      "name": "s",
      "owningAccountId": "s",
      "allowExternalPrincipals": "b",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceShareStatus>(x),
      "statusMessage": "s",
      "tags": [toTag],
      "creationTime": "d",
      "lastUpdatedTime": "d",
      "featureSet": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceShareFeatureSet>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ResourceShareFeatureSet =
| "CREATED_FROM_POLICY"
| "PROMOTING_TO_STANDARD"
| "STANDARD"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ResourceSharePermissionDetail {
  arn?: string | null;
  version?: string | null;
  defaultVersion?: boolean | null;
  name?: string | null;
  resourceType?: string | null;
  permission?: string | null;
  creationTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
}
function toResourceSharePermissionDetail(root: jsonP.JSONValue): ResourceSharePermissionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "version": "s",
      "defaultVersion": "b",
      "name": "s",
      "resourceType": "s",
      "permission": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Resource {
  arn?: string | null;
  type?: string | null;
  resourceShareArn?: string | null;
  resourceGroupArn?: string | null;
  status?: ResourceStatus | null;
  statusMessage?: string | null;
  creationTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
}
function toResource(root: jsonP.JSONValue): Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "type": "s",
      "resourceShareArn": "s",
      "resourceGroupArn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStatus>(x),
      "statusMessage": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ResourceStatus =
| "AVAILABLE"
| "ZONAL_RESOURCE_INACCESSIBLE"
| "LIMIT_EXCEEDED"
| "UNAVAILABLE"
| "PENDING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ResourceSharePermissionSummary {
  arn?: string | null;
  version?: string | null;
  defaultVersion?: boolean | null;
  name?: string | null;
  resourceType?: string | null;
  status?: string | null;
  creationTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
}
function toResourceSharePermissionSummary(root: jsonP.JSONValue): ResourceSharePermissionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "version": "s",
      "defaultVersion": "b",
      "name": "s",
      "resourceType": "s",
      "status": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Principal {
  id?: string | null;
  resourceShareArn?: string | null;
  creationTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
  external?: boolean | null;
}
function toPrincipal(root: jsonP.JSONValue): Principal {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "resourceShareArn": "s",
      "creationTime": "d",
      "lastUpdatedTime": "d",
      "external": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ServiceNameAndResourceType {
  resourceType?: string | null;
  serviceName?: string | null;
}
function toServiceNameAndResourceType(root: jsonP.JSONValue): ServiceNameAndResourceType {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": "s",
      "serviceName": "s",
    },
  }, root);
}
