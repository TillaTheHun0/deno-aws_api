// Autogenerated API client for: AWS IoT 1-Click Projects Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class IoT1ClickProjects {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoT1ClickProjects.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-05-14",
    "endpointPrefix": "projects.iot1click",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AWS IoT 1-Click Projects",
    "serviceFullName": "AWS IoT 1-Click Projects Service",
    "serviceId": "IoT 1Click Projects",
    "signatureVersion": "v4",
    "signingName": "iot1click",
    "uid": "iot1click-projects-2018-05-14"
  };

  async associateDeviceWithPlacement(
    {abortSignal, ...params}: RequestConfig & s.AssociateDeviceWithPlacementRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      deviceId: params["deviceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDeviceWithPlacement",
      method: "PUT",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements/${params["placementName"]}/devices/${params["deviceTemplateName"]}`,
    });
    await resp.text();
  }

  async createPlacement(
    {abortSignal, ...params}: RequestConfig & s.CreatePlacementRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      placementName: params["placementName"],
      attributes: params["attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePlacement",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements`,
    });
    await resp.text();
  }

  async createProject(
    {abortSignal, ...params}: RequestConfig & s.CreateProjectRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      projectName: params["projectName"],
      description: params["description"],
      placementTemplate: fromPlacementTemplate(params["placementTemplate"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProject",
      requestUri: "/projects",
    });
    await resp.text();
  }

  async deletePlacement(
    {abortSignal, ...params}: RequestConfig & s.DeletePlacementRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePlacement",
      method: "DELETE",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements/${params["placementName"]}`,
    });
    await resp.text();
  }

  async deleteProject(
    {abortSignal, ...params}: RequestConfig & s.DeleteProjectRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProject",
      method: "DELETE",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}`,
    });
    await resp.text();
  }

  async describePlacement(
    {abortSignal, ...params}: RequestConfig & s.DescribePlacementRequest,
  ): Promise<s.DescribePlacementResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePlacement",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements/${params["placementName"]}`,
    });
    return jsonP.readObj({
      required: {
        "placement": toPlacementDescription,
      },
      optional: {},
    }, await resp.json());
  }

  async describeProject(
    {abortSignal, ...params}: RequestConfig & s.DescribeProjectRequest,
  ): Promise<s.DescribeProjectResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProject",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}`,
    });
    return jsonP.readObj({
      required: {
        "project": toProjectDescription,
      },
      optional: {},
    }, await resp.json());
  }

  async disassociateDeviceFromPlacement(
    {abortSignal, ...params}: RequestConfig & s.DisassociateDeviceFromPlacementRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateDeviceFromPlacement",
      method: "DELETE",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements/${params["placementName"]}/devices/${params["deviceTemplateName"]}`,
    });
    await resp.text();
  }

  async getDevicesInPlacement(
    {abortSignal, ...params}: RequestConfig & s.GetDevicesInPlacementRequest,
  ): Promise<s.GetDevicesInPlacementResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDevicesInPlacement",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements/${params["placementName"]}/devices`,
    });
    return jsonP.readObj({
      required: {
        "devices": x => jsonP.readMap(String, String, x),
      },
      optional: {},
    }, await resp.json());
  }

  async listPlacements(
    {abortSignal, ...params}: RequestConfig & s.ListPlacementsRequest,
  ): Promise<s.ListPlacementsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPlacements",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements`,
    });
    return jsonP.readObj({
      required: {
        "placements": [toPlacementSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listProjects(
    {abortSignal, ...params}: RequestConfig & s.ListProjectsRequest = {},
  ): Promise<s.ListProjectsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProjects",
      method: "GET",
      requestUri: "/projects",
    });
    return jsonP.readObj({
      required: {
        "projects": [toProjectSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    await resp.text();
  }

  async updatePlacement(
    {abortSignal, ...params}: RequestConfig & s.UpdatePlacementRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      attributes: params["attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePlacement",
      method: "PUT",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}/placements/${params["placementName"]}`,
    });
    await resp.text();
  }

  async updateProject(
    {abortSignal, ...params}: RequestConfig & s.UpdateProjectRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      description: params["description"],
      placementTemplate: fromPlacementTemplate(params["placementTemplate"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProject",
      method: "PUT",
      requestUri: cmnP.encodePath`/projects/${params["projectName"]}`,
    });
    await resp.text();
  }

}

function fromPlacementTemplate(input?: s.PlacementTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultAttributes: input["defaultAttributes"],
    deviceTemplates: jsonP.serializeMap(input["deviceTemplates"], x => fromDeviceTemplate(x)),
  }
}
function toPlacementTemplate(root: jsonP.JSONValue): s.PlacementTemplate {
  return jsonP.readObj({
    required: {},
    optional: {
      "defaultAttributes": x => jsonP.readMap(String, String, x),
      "deviceTemplates": x => jsonP.readMap(String, toDeviceTemplate, x),
    },
  }, root);
}

function fromDeviceTemplate(input?: s.DeviceTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deviceType: input["deviceType"],
    callbackOverrides: input["callbackOverrides"],
  }
}
function toDeviceTemplate(root: jsonP.JSONValue): s.DeviceTemplate {
  return jsonP.readObj({
    required: {},
    optional: {
      "deviceType": "s",
      "callbackOverrides": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toPlacementDescription(root: jsonP.JSONValue): s.PlacementDescription {
  return jsonP.readObj({
    required: {
      "projectName": "s",
      "placementName": "s",
      "attributes": x => jsonP.readMap(String, String, x),
      "createdDate": "d",
      "updatedDate": "d",
    },
    optional: {},
  }, root);
}

function toProjectDescription(root: jsonP.JSONValue): s.ProjectDescription {
  return jsonP.readObj({
    required: {
      "projectName": "s",
      "createdDate": "d",
      "updatedDate": "d",
    },
    optional: {
      "arn": "s",
      "description": "s",
      "placementTemplate": toPlacementTemplate,
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toPlacementSummary(root: jsonP.JSONValue): s.PlacementSummary {
  return jsonP.readObj({
    required: {
      "projectName": "s",
      "placementName": "s",
      "createdDate": "d",
      "updatedDate": "d",
    },
    optional: {},
  }, root);
}

function toProjectSummary(root: jsonP.JSONValue): s.ProjectSummary {
  return jsonP.readObj({
    required: {
      "projectName": "s",
      "createdDate": "d",
      "updatedDate": "d",
    },
    optional: {
      "arn": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
