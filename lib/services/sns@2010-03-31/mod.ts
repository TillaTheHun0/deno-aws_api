// Autogenerated API client for: Amazon Simple Notification Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { readXmlResult, readXmlMap, parseTimestamp, XmlNode } from '../../encoding/xml.ts';
import * as prt from "../../encoding/querystring.ts";

export default class SNS {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SNS.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2010-03-31",
    "endpointPrefix": "sns",
    "protocol": "query",
    "serviceAbbreviation": "Amazon SNS",
    "serviceFullName": "Amazon Simple Notification Service",
    "serviceId": "SNS",
    "signatureVersion": "v4",
    "uid": "sns-2010-03-31",
    "xmlNamespace": "http://sns.amazonaws.com/doc/2010-03-31/"
  };

  async addPermission(
    {abortSignal, ...params}: RequestConfig & AddPermissionInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    body.append(prefix+"Label", (params["Label"] ?? '').toString());
    if (params["AWSAccountId"]) prt.appendList(body, prefix+"AWSAccountId", params["AWSAccountId"], {"entryPrefix":".member."})
    if (params["ActionName"]) prt.appendList(body, prefix+"ActionName", params["ActionName"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddPermission",
    });
  }

  async checkIfPhoneNumberIsOptedOut(
    {abortSignal, ...params}: RequestConfig & CheckIfPhoneNumberIsOptedOutInput,
  ): Promise<CheckIfPhoneNumberIsOptedOutResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"phoneNumber", (params["phoneNumber"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckIfPhoneNumberIsOptedOut",
    });
    const xml = readXmlResult(await resp.text(), "CheckIfPhoneNumberIsOptedOutResult");
    return {
      isOptedOut: xml.first("isOptedOut", false, x => x.content === 'true'),
    };
  }

  async confirmSubscription(
    {abortSignal, ...params}: RequestConfig & ConfirmSubscriptionInput,
  ): Promise<ConfirmSubscriptionResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    body.append(prefix+"Token", (params["Token"] ?? '').toString());
    if ("AuthenticateOnUnsubscribe" in params) body.append(prefix+"AuthenticateOnUnsubscribe", (params["AuthenticateOnUnsubscribe"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmSubscription",
    });
    const xml = readXmlResult(await resp.text(), "ConfirmSubscriptionResult");
    return xml.strings({
      optional: {"SubscriptionArn":true},
    });
  }

  async createPlatformApplication(
    {abortSignal, ...params}: RequestConfig & CreatePlatformApplicationInput,
  ): Promise<CreatePlatformApplicationResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"Name", (params["Name"] ?? '').toString());
    body.append(prefix+"Platform", (params["Platform"] ?? '').toString());
    if (params["Attributes"]) prt.appendMap(body, prefix+"Attributes", params["Attributes"], {"entryPrefix":".entry."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePlatformApplication",
    });
    const xml = readXmlResult(await resp.text(), "CreatePlatformApplicationResult");
    return xml.strings({
      optional: {"PlatformApplicationArn":true},
    });
  }

  async createPlatformEndpoint(
    {abortSignal, ...params}: RequestConfig & CreatePlatformEndpointInput,
  ): Promise<CreateEndpointResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"PlatformApplicationArn", (params["PlatformApplicationArn"] ?? '').toString());
    body.append(prefix+"Token", (params["Token"] ?? '').toString());
    if ("CustomUserData" in params) body.append(prefix+"CustomUserData", (params["CustomUserData"] ?? '').toString());
    if (params["Attributes"]) prt.appendMap(body, prefix+"Attributes", params["Attributes"], {"entryPrefix":".entry."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePlatformEndpoint",
    });
    const xml = readXmlResult(await resp.text(), "CreatePlatformEndpointResult");
    return xml.strings({
      optional: {"EndpointArn":true},
    });
  }

  async createTopic(
    {abortSignal, ...params}: RequestConfig & CreateTopicInput,
  ): Promise<CreateTopicResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"Name", (params["Name"] ?? '').toString());
    if (params["Attributes"]) prt.appendMap(body, prefix+"Attributes", params["Attributes"], {"entryPrefix":".entry."})
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTopic",
    });
    const xml = readXmlResult(await resp.text(), "CreateTopicResult");
    return xml.strings({
      optional: {"TopicArn":true},
    });
  }

  async deleteEndpoint(
    {abortSignal, ...params}: RequestConfig & DeleteEndpointInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"EndpointArn", (params["EndpointArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEndpoint",
    });
  }

  async deletePlatformApplication(
    {abortSignal, ...params}: RequestConfig & DeletePlatformApplicationInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"PlatformApplicationArn", (params["PlatformApplicationArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePlatformApplication",
    });
  }

  async deleteTopic(
    {abortSignal, ...params}: RequestConfig & DeleteTopicInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTopic",
    });
  }

  async getEndpointAttributes(
    {abortSignal, ...params}: RequestConfig & GetEndpointAttributesInput,
  ): Promise<GetEndpointAttributesResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"EndpointArn", (params["EndpointArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEndpointAttributes",
    });
    const xml = readXmlResult(await resp.text(), "GetEndpointAttributesResult");
    return {
      Attributes: readXmlMap(xml.getList("Attributes", "entry"), x => x.content ?? '', {}),
    };
  }

  async getPlatformApplicationAttributes(
    {abortSignal, ...params}: RequestConfig & GetPlatformApplicationAttributesInput,
  ): Promise<GetPlatformApplicationAttributesResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"PlatformApplicationArn", (params["PlatformApplicationArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPlatformApplicationAttributes",
    });
    const xml = readXmlResult(await resp.text(), "GetPlatformApplicationAttributesResult");
    return {
      Attributes: readXmlMap(xml.getList("Attributes", "entry"), x => x.content ?? '', {}),
    };
  }

  async getSMSAttributes(
    {abortSignal, ...params}: RequestConfig & GetSMSAttributesInput = {},
  ): Promise<GetSMSAttributesResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if (params["attributes"]) prt.appendList(body, prefix+"attributes", params["attributes"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSMSAttributes",
    });
    const xml = readXmlResult(await resp.text(), "GetSMSAttributesResult");
    return {
      attributes: readXmlMap(xml.getList("attributes", "entry"), x => x.content ?? '', {}),
    };
  }

  async getSubscriptionAttributes(
    {abortSignal, ...params}: RequestConfig & GetSubscriptionAttributesInput,
  ): Promise<GetSubscriptionAttributesResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionArn", (params["SubscriptionArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSubscriptionAttributes",
    });
    const xml = readXmlResult(await resp.text(), "GetSubscriptionAttributesResult");
    return {
      Attributes: readXmlMap(xml.getList("Attributes", "entry"), x => x.content ?? '', {}),
    };
  }

  async getTopicAttributes(
    {abortSignal, ...params}: RequestConfig & GetTopicAttributesInput,
  ): Promise<GetTopicAttributesResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTopicAttributes",
    });
    const xml = readXmlResult(await resp.text(), "GetTopicAttributesResult");
    return {
      Attributes: readXmlMap(xml.getList("Attributes", "entry"), x => x.content ?? '', {}),
    };
  }

  async listEndpointsByPlatformApplication(
    {abortSignal, ...params}: RequestConfig & ListEndpointsByPlatformApplicationInput,
  ): Promise<ListEndpointsByPlatformApplicationResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"PlatformApplicationArn", (params["PlatformApplicationArn"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEndpointsByPlatformApplication",
    });
    const xml = readXmlResult(await resp.text(), "ListEndpointsByPlatformApplicationResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      Endpoints: xml.getList("Endpoints", "member").map(Endpoint_Parse),
    };
  }

  async listPhoneNumbersOptedOut(
    {abortSignal, ...params}: RequestConfig & ListPhoneNumbersOptedOutInput = {},
  ): Promise<ListPhoneNumbersOptedOutResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("nextToken" in params) body.append(prefix+"nextToken", (params["nextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPhoneNumbersOptedOut",
    });
    const xml = readXmlResult(await resp.text(), "ListPhoneNumbersOptedOutResult");
    return {
      ...xml.strings({
        optional: {"nextToken":true},
      }),
      phoneNumbers: xml.getList("phoneNumbers", "member").map(x => x.content ?? ''),
    };
  }

  async listPlatformApplications(
    {abortSignal, ...params}: RequestConfig & ListPlatformApplicationsInput = {},
  ): Promise<ListPlatformApplicationsResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPlatformApplications",
    });
    const xml = readXmlResult(await resp.text(), "ListPlatformApplicationsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      PlatformApplications: xml.getList("PlatformApplications", "member").map(PlatformApplication_Parse),
    };
  }

  async listSubscriptions(
    {abortSignal, ...params}: RequestConfig & ListSubscriptionsInput = {},
  ): Promise<ListSubscriptionsResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSubscriptions",
    });
    const xml = readXmlResult(await resp.text(), "ListSubscriptionsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      Subscriptions: xml.getList("Subscriptions", "member").map(Subscription_Parse),
    };
  }

  async listSubscriptionsByTopic(
    {abortSignal, ...params}: RequestConfig & ListSubscriptionsByTopicInput,
  ): Promise<ListSubscriptionsByTopicResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSubscriptionsByTopic",
    });
    const xml = readXmlResult(await resp.text(), "ListSubscriptionsByTopicResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      Subscriptions: xml.getList("Subscriptions", "member").map(Subscription_Parse),
    };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceArn", (params["ResourceArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    const xml = readXmlResult(await resp.text(), "ListTagsForResourceResult");
    return {
      Tags: xml.getList("Tags", "member").map(Tag_Parse),
    };
  }

  async listTopics(
    {abortSignal, ...params}: RequestConfig & ListTopicsInput = {},
  ): Promise<ListTopicsResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("NextToken" in params) body.append(prefix+"NextToken", (params["NextToken"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTopics",
    });
    const xml = readXmlResult(await resp.text(), "ListTopicsResult");
    return {
      ...xml.strings({
        optional: {"NextToken":true},
      }),
      Topics: xml.getList("Topics", "member").map(Topic_Parse),
    };
  }

  async optInPhoneNumber(
    {abortSignal, ...params}: RequestConfig & OptInPhoneNumberInput,
  ): Promise<OptInPhoneNumberResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"phoneNumber", (params["phoneNumber"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "OptInPhoneNumber",
    });
    const xml = readXmlResult(await resp.text(), "OptInPhoneNumberResult");
    return {};
  }

  async publish(
    {abortSignal, ...params}: RequestConfig & PublishInput,
  ): Promise<PublishResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("TopicArn" in params) body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    if ("TargetArn" in params) body.append(prefix+"TargetArn", (params["TargetArn"] ?? '').toString());
    if ("PhoneNumber" in params) body.append(prefix+"PhoneNumber", (params["PhoneNumber"] ?? '').toString());
    body.append(prefix+"Message", (params["Message"] ?? '').toString());
    if ("Subject" in params) body.append(prefix+"Subject", (params["Subject"] ?? '').toString());
    if ("MessageStructure" in params) body.append(prefix+"MessageStructure", (params["MessageStructure"] ?? '').toString());
    if (params["MessageAttributes"]) prt.appendMap(body, prefix+"MessageAttributes", params["MessageAttributes"], {"appender":MessageAttributeValue_Serialize,"keyName":".Name","valName":".Value","entryPrefix":".entry."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Publish",
    });
    const xml = readXmlResult(await resp.text(), "PublishResult");
    return xml.strings({
      optional: {"MessageId":true},
    });
  }

  async removePermission(
    {abortSignal, ...params}: RequestConfig & RemovePermissionInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    body.append(prefix+"Label", (params["Label"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemovePermission",
    });
  }

  async setEndpointAttributes(
    {abortSignal, ...params}: RequestConfig & SetEndpointAttributesInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"EndpointArn", (params["EndpointArn"] ?? '').toString());
    if (params["Attributes"]) prt.appendMap(body, prefix+"Attributes", params["Attributes"], {"entryPrefix":".entry."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetEndpointAttributes",
    });
  }

  async setPlatformApplicationAttributes(
    {abortSignal, ...params}: RequestConfig & SetPlatformApplicationAttributesInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"PlatformApplicationArn", (params["PlatformApplicationArn"] ?? '').toString());
    if (params["Attributes"]) prt.appendMap(body, prefix+"Attributes", params["Attributes"], {"entryPrefix":".entry."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetPlatformApplicationAttributes",
    });
  }

  async setSMSAttributes(
    {abortSignal, ...params}: RequestConfig & SetSMSAttributesInput,
  ): Promise<SetSMSAttributesResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if (params["attributes"]) prt.appendMap(body, prefix+"attributes", params["attributes"], {"entryPrefix":".entry."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetSMSAttributes",
    });
    const xml = readXmlResult(await resp.text(), "SetSMSAttributesResult");
    return {};
  }

  async setSubscriptionAttributes(
    {abortSignal, ...params}: RequestConfig & SetSubscriptionAttributesInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionArn", (params["SubscriptionArn"] ?? '').toString());
    body.append(prefix+"AttributeName", (params["AttributeName"] ?? '').toString());
    if ("AttributeValue" in params) body.append(prefix+"AttributeValue", (params["AttributeValue"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetSubscriptionAttributes",
    });
  }

  async setTopicAttributes(
    {abortSignal, ...params}: RequestConfig & SetTopicAttributesInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    body.append(prefix+"AttributeName", (params["AttributeName"] ?? '').toString());
    if ("AttributeValue" in params) body.append(prefix+"AttributeValue", (params["AttributeValue"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetTopicAttributes",
    });
  }

  async subscribe(
    {abortSignal, ...params}: RequestConfig & SubscribeInput,
  ): Promise<SubscribeResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"TopicArn", (params["TopicArn"] ?? '').toString());
    body.append(prefix+"Protocol", (params["Protocol"] ?? '').toString());
    if ("Endpoint" in params) body.append(prefix+"Endpoint", (params["Endpoint"] ?? '').toString());
    if (params["Attributes"]) prt.appendMap(body, prefix+"Attributes", params["Attributes"], {"entryPrefix":".entry."})
    if ("ReturnSubscriptionArn" in params) body.append(prefix+"ReturnSubscriptionArn", (params["ReturnSubscriptionArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Subscribe",
    });
    const xml = readXmlResult(await resp.text(), "SubscribeResult");
    return xml.strings({
      optional: {"SubscriptionArn":true},
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceArn", (params["ResourceArn"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    const xml = readXmlResult(await resp.text(), "TagResourceResult");
    return {};
  }

  async unsubscribe(
    {abortSignal, ...params}: RequestConfig & UnsubscribeInput,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionArn", (params["SubscriptionArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Unsubscribe",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceArn", (params["ResourceArn"] ?? '').toString());
    if (params["TagKeys"]) prt.appendList(body, prefix+"TagKeys", params["TagKeys"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    const xml = readXmlResult(await resp.text(), "UntagResourceResult");
    return {};
  }

}

// refs: 1 - tags: named, input
export interface AddPermissionInput {
  TopicArn: string;
  Label: string;
  AWSAccountId: string[];
  ActionName: string[];
}

// refs: 1 - tags: named, input
export interface CheckIfPhoneNumberIsOptedOutInput {
  phoneNumber: string;
}

// refs: 1 - tags: named, input
export interface ConfirmSubscriptionInput {
  TopicArn: string;
  Token: string;
  AuthenticateOnUnsubscribe?: string | null;
}

// refs: 1 - tags: named, input
export interface CreatePlatformApplicationInput {
  Name: string;
  Platform: string;
  Attributes: { [key: string]: string };
}

// refs: 1 - tags: named, input
export interface CreatePlatformEndpointInput {
  PlatformApplicationArn: string;
  Token: string;
  CustomUserData?: string | null;
  Attributes?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface CreateTopicInput {
  Name: string;
  Attributes?: { [key: string]: string } | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteEndpointInput {
  EndpointArn: string;
}

// refs: 1 - tags: named, input
export interface DeletePlatformApplicationInput {
  PlatformApplicationArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteTopicInput {
  TopicArn: string;
}

// refs: 1 - tags: named, input
export interface GetEndpointAttributesInput {
  EndpointArn: string;
}

// refs: 1 - tags: named, input
export interface GetPlatformApplicationAttributesInput {
  PlatformApplicationArn: string;
}

// refs: 1 - tags: named, input
export interface GetSMSAttributesInput {
  attributes?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GetSubscriptionAttributesInput {
  SubscriptionArn: string;
}

// refs: 1 - tags: named, input
export interface GetTopicAttributesInput {
  TopicArn: string;
}

// refs: 1 - tags: named, input
export interface ListEndpointsByPlatformApplicationInput {
  PlatformApplicationArn: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPhoneNumbersOptedOutInput {
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPlatformApplicationsInput {
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSubscriptionsInput {
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSubscriptionsByTopicInput {
  TopicArn: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListTopicsInput {
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface OptInPhoneNumberInput {
  phoneNumber: string;
}

// refs: 1 - tags: named, input
export interface PublishInput {
  TopicArn?: string | null;
  TargetArn?: string | null;
  PhoneNumber?: string | null;
  Message: string;
  Subject?: string | null;
  MessageStructure?: string | null;
  MessageAttributes?: { [key: string]: MessageAttributeValue } | null;
}

// refs: 1 - tags: named, input
export interface RemovePermissionInput {
  TopicArn: string;
  Label: string;
}

// refs: 1 - tags: named, input
export interface SetEndpointAttributesInput {
  EndpointArn: string;
  Attributes: { [key: string]: string };
}

// refs: 1 - tags: named, input
export interface SetPlatformApplicationAttributesInput {
  PlatformApplicationArn: string;
  Attributes: { [key: string]: string };
}

// refs: 1 - tags: named, input
export interface SetSMSAttributesInput {
  attributes: { [key: string]: string };
}

// refs: 1 - tags: named, input
export interface SetSubscriptionAttributesInput {
  SubscriptionArn: string;
  AttributeName: string;
  AttributeValue?: string | null;
}

// refs: 1 - tags: named, input
export interface SetTopicAttributesInput {
  TopicArn: string;
  AttributeName: string;
  AttributeValue?: string | null;
}

// refs: 1 - tags: named, input
export interface SubscribeInput {
  TopicArn: string;
  Protocol: string;
  Endpoint?: string | null;
  Attributes?: { [key: string]: string } | null;
  ReturnSubscriptionArn?: boolean | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UnsubscribeInput {
  SubscriptionArn: string;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, output
export interface CheckIfPhoneNumberIsOptedOutResponse {
  isOptedOut?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ConfirmSubscriptionResponse {
  SubscriptionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreatePlatformApplicationResponse {
  PlatformApplicationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateEndpointResponse {
  EndpointArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTopicResponse {
  TopicArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetEndpointAttributesResponse {
  Attributes: { [key: string]: string };
}

// refs: 1 - tags: named, output
export interface GetPlatformApplicationAttributesResponse {
  Attributes: { [key: string]: string };
}

// refs: 1 - tags: named, output
export interface GetSMSAttributesResponse {
  attributes: { [key: string]: string };
}

// refs: 1 - tags: named, output
export interface GetSubscriptionAttributesResponse {
  Attributes: { [key: string]: string };
}

// refs: 1 - tags: named, output
export interface GetTopicAttributesResponse {
  Attributes: { [key: string]: string };
}

// refs: 1 - tags: named, output
export interface ListEndpointsByPlatformApplicationResponse {
  Endpoints: Endpoint[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPhoneNumbersOptedOutResponse {
  phoneNumbers: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPlatformApplicationsResponse {
  PlatformApplications: PlatformApplication[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSubscriptionsResponse {
  Subscriptions: Subscription[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSubscriptionsByTopicResponse {
  Subscriptions: Subscription[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags: Tag[];
}

// refs: 1 - tags: named, output
export interface ListTopicsResponse {
  Topics: Topic[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface OptInPhoneNumberResponse {
}

// refs: 1 - tags: named, output
export interface PublishResponse {
  MessageId?: string | null;
}

// refs: 1 - tags: named, output
export interface SetSMSAttributesResponse {
}

// refs: 1 - tags: named, output
export interface SubscribeResponse {
  SubscriptionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function Tag_Serialize(body: URLSearchParams, prefix: string, params: Tag) {
    body.append(prefix+".Key", (params["Key"] ?? '').toString());
    body.append(prefix+".Value", (params["Value"] ?? '').toString());
}
function Tag_Parse(node: XmlNode): Tag {
  return node.strings({
    required: {"Key":true,"Value":true},
  });
}

// refs: 1 - tags: input, named, interface
export interface MessageAttributeValue {
  DataType: string;
  StringValue?: string | null;
  BinaryValue?: Uint8Array | string | null;
}
function MessageAttributeValue_Serialize(body: URLSearchParams, prefix: string, params: MessageAttributeValue) {
    body.append(prefix+".DataType", (params["DataType"] ?? '').toString());
    if ("StringValue" in params) body.append(prefix+".StringValue", (params["StringValue"] ?? '').toString());
    if ("BinaryValue" in params) body.append(prefix+".BinaryValue", prt.encodeBlob(params["BinaryValue"]));
}

// refs: 1 - tags: output, named, interface
export interface Endpoint {
  EndpointArn?: string | null;
  Attributes: { [key: string]: string };
}
function Endpoint_Parse(node: XmlNode): Endpoint {
  return {
    ...node.strings({
      optional: {"EndpointArn":true},
    }),
    Attributes: readXmlMap(node.getList("Attributes", "entry"), x => x.content ?? '', {}),
  };
}

// refs: 1 - tags: output, named, interface
export interface PlatformApplication {
  PlatformApplicationArn?: string | null;
  Attributes: { [key: string]: string };
}
function PlatformApplication_Parse(node: XmlNode): PlatformApplication {
  return {
    ...node.strings({
      optional: {"PlatformApplicationArn":true},
    }),
    Attributes: readXmlMap(node.getList("Attributes", "entry"), x => x.content ?? '', {}),
  };
}

// refs: 2 - tags: output, named, interface
export interface Subscription {
  SubscriptionArn?: string | null;
  Owner?: string | null;
  Protocol?: string | null;
  Endpoint?: string | null;
  TopicArn?: string | null;
}
function Subscription_Parse(node: XmlNode): Subscription {
  return node.strings({
    optional: {"SubscriptionArn":true,"Owner":true,"Protocol":true,"Endpoint":true,"TopicArn":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface Topic {
  TopicArn?: string | null;
}
function Topic_Parse(node: XmlNode): Topic {
  return node.strings({
    optional: {"TopicArn":true},
  });
}
