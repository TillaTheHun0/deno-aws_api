// Autogenerated API client for: AWS Greengrass

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Greengrass {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Greengrass.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-06-07",
    "endpointPrefix": "greengrass",
    "signingName": "greengrass",
    "serviceFullName": "AWS Greengrass",
    "serviceId": "Greengrass",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "greengrass-2017-06-07",
    "signatureVersion": "v4"
  };

  async associateRoleToGroup(
    {abortSignal, ...params}: RequestConfig & s.AssociateRoleToGroupRequest,
  ): Promise<s.AssociateRoleToGroupResponse> {
    const body: jsonP.JSONObject = {
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateRoleToGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/role`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
      },
    }, await resp.json());
  }

  async associateServiceRoleToAccount(
    {abortSignal, ...params}: RequestConfig & s.AssociateServiceRoleToAccountRequest,
  ): Promise<s.AssociateServiceRoleToAccountResponse> {
    const body: jsonP.JSONObject = {
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateServiceRoleToAccount",
      method: "PUT",
      requestUri: "/greengrass/servicerole",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
      },
    }, await resp.json());
  }

  async createConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateConnectorDefinitionRequest = {},
  ): Promise<s.CreateConnectorDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromConnectorDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateConnectorDefinition",
      requestUri: "/greengrass/definition/connectors",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createConnectorDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateConnectorDefinitionVersionRequest,
  ): Promise<s.CreateConnectorDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Connectors: params["Connectors"]?.map(x => fromConnector(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateConnectorDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createCoreDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateCoreDefinitionRequest = {},
  ): Promise<s.CreateCoreDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromCoreDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateCoreDefinition",
      requestUri: "/greengrass/definition/cores",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createCoreDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateCoreDefinitionVersionRequest,
  ): Promise<s.CreateCoreDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Cores: params["Cores"]?.map(x => fromCore(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateCoreDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createDeployment(
    {abortSignal, ...params}: RequestConfig & s.CreateDeploymentRequest,
  ): Promise<s.CreateDeploymentResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      DeploymentId: params["DeploymentId"],
      DeploymentType: params["DeploymentType"],
      GroupVersionId: params["GroupVersionId"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateDeployment",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeploymentArn": "s",
        "DeploymentId": "s",
      },
    }, await resp.json());
  }

  async createDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateDeviceDefinitionRequest = {},
  ): Promise<s.CreateDeviceDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromDeviceDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateDeviceDefinition",
      requestUri: "/greengrass/definition/devices",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createDeviceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateDeviceDefinitionVersionRequest,
  ): Promise<s.CreateDeviceDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Devices: params["Devices"]?.map(x => fromDevice(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateDeviceDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateFunctionDefinitionRequest = {},
  ): Promise<s.CreateFunctionDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromFunctionDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateFunctionDefinition",
      requestUri: "/greengrass/definition/functions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createFunctionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateFunctionDefinitionVersionRequest,
  ): Promise<s.CreateFunctionDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      DefaultConfig: fromFunctionDefaultConfig(params["DefaultConfig"]),
      Functions: params["Functions"]?.map(x => fromFunction(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateFunctionDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateGroupRequest = {},
  ): Promise<s.CreateGroupResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromGroupVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateGroup",
      requestUri: "/greengrass/groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createGroupCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & s.CreateGroupCertificateAuthorityRequest,
  ): Promise<s.CreateGroupCertificateAuthorityResponse> {
    const headers = new Headers;
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "CreateGroupCertificateAuthority",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupCertificateAuthorityArn": "s",
      },
    }, await resp.json());
  }

  async createGroupVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateGroupVersionRequest,
  ): Promise<s.CreateGroupVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      ConnectorDefinitionVersionArn: params["ConnectorDefinitionVersionArn"],
      CoreDefinitionVersionArn: params["CoreDefinitionVersionArn"],
      DeviceDefinitionVersionArn: params["DeviceDefinitionVersionArn"],
      FunctionDefinitionVersionArn: params["FunctionDefinitionVersionArn"],
      LoggerDefinitionVersionArn: params["LoggerDefinitionVersionArn"],
      ResourceDefinitionVersionArn: params["ResourceDefinitionVersionArn"],
      SubscriptionDefinitionVersionArn: params["SubscriptionDefinitionVersionArn"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateGroupVersion",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateLoggerDefinitionRequest = {},
  ): Promise<s.CreateLoggerDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromLoggerDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateLoggerDefinition",
      requestUri: "/greengrass/definition/loggers",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createLoggerDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateLoggerDefinitionVersionRequest,
  ): Promise<s.CreateLoggerDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Loggers: params["Loggers"]?.map(x => fromLogger(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateLoggerDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createResourceDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateResourceDefinitionRequest = {},
  ): Promise<s.CreateResourceDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromResourceDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateResourceDefinition",
      requestUri: "/greengrass/definition/resources",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createResourceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateResourceDefinitionVersionRequest,
  ): Promise<s.CreateResourceDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Resources: params["Resources"]?.map(x => fromResource(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateResourceDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createSoftwareUpdateJob(
    {abortSignal, ...params}: RequestConfig & s.CreateSoftwareUpdateJobRequest,
  ): Promise<s.CreateSoftwareUpdateJobResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      S3UrlSignerRole: params["S3UrlSignerRole"],
      SoftwareToUpdate: params["SoftwareToUpdate"],
      UpdateAgentLogLevel: params["UpdateAgentLogLevel"],
      UpdateTargets: params["UpdateTargets"],
      UpdateTargetsArchitecture: params["UpdateTargetsArchitecture"],
      UpdateTargetsOperatingSystem: params["UpdateTargetsOperatingSystem"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateSoftwareUpdateJob",
      requestUri: "/greengrass/updates",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IotJobArn": "s",
        "IotJobId": "s",
        "PlatformSoftwareVersion": "s",
      },
    }, await resp.json());
  }

  async createSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateSubscriptionDefinitionRequest = {},
  ): Promise<s.CreateSubscriptionDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromSubscriptionDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateSubscriptionDefinition",
      requestUri: "/greengrass/definition/subscriptions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createSubscriptionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateSubscriptionDefinitionVersionRequest,
  ): Promise<s.CreateSubscriptionDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Subscriptions: params["Subscriptions"]?.map(x => fromSubscription(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateSubscriptionDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async deleteConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteConnectorDefinitionRequest,
  ): Promise<s.DeleteConnectorDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConnectorDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteCoreDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteCoreDefinitionRequest,
  ): Promise<s.DeleteCoreDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCoreDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteDeviceDefinitionRequest,
  ): Promise<s.DeleteDeviceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDeviceDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteFunctionDefinitionRequest,
  ): Promise<s.DeleteFunctionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFunctionDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteGroupRequest,
  ): Promise<s.DeleteGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteLoggerDefinitionRequest,
  ): Promise<s.DeleteLoggerDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteLoggerDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteResourceDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteResourceDefinitionRequest,
  ): Promise<s.DeleteResourceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteResourceDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteSubscriptionDefinitionRequest,
  ): Promise<s.DeleteSubscriptionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSubscriptionDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateRoleFromGroup(
    {abortSignal, ...params}: RequestConfig & s.DisassociateRoleFromGroupRequest,
  ): Promise<s.DisassociateRoleFromGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateRoleFromGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/role`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DisassociatedAt": "s",
      },
    }, await resp.json());
  }

  async disassociateServiceRoleFromAccount(
    {abortSignal, ...params}: RequestConfig & s.DisassociateServiceRoleFromAccountRequest = {},
  ): Promise<s.DisassociateServiceRoleFromAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateServiceRoleFromAccount",
      method: "DELETE",
      requestUri: "/greengrass/servicerole",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DisassociatedAt": "s",
      },
    }, await resp.json());
  }

  async getAssociatedRole(
    {abortSignal, ...params}: RequestConfig & s.GetAssociatedRoleRequest,
  ): Promise<s.GetAssociatedRoleResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssociatedRole",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/role`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
        "RoleArn": "s",
      },
    }, await resp.json());
  }

  async getBulkDeploymentStatus(
    {abortSignal, ...params}: RequestConfig & s.GetBulkDeploymentStatusRequest,
  ): Promise<s.GetBulkDeploymentStatusResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBulkDeploymentStatus",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/bulk/deployments/${params["BulkDeploymentId"]}/status`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BulkDeploymentMetrics": toBulkDeploymentMetrics,
        "BulkDeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.BulkDeploymentStatus>(x),
        "CreatedAt": "s",
        "ErrorDetails": [toErrorDetail],
        "ErrorMessage": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getConnectivityInfo(
    {abortSignal, ...params}: RequestConfig & s.GetConnectivityInfoRequest,
  ): Promise<s.GetConnectivityInfoResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConnectivityInfo",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/connectivityInfo`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConnectivityInfo": [toConnectivityInfo],
        "Message": "s",
      },
    }, await resp.json());
  }

  async getConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetConnectorDefinitionRequest,
  ): Promise<s.GetConnectorDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConnectorDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getConnectorDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.GetConnectorDefinitionVersionRequest,
  ): Promise<s.GetConnectorDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetConnectorDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}/versions/${params["ConnectorDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toConnectorDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getCoreDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetCoreDefinitionRequest,
  ): Promise<s.GetCoreDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCoreDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getCoreDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.GetCoreDefinitionVersionRequest,
  ): Promise<s.GetCoreDefinitionVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCoreDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}/versions/${params["CoreDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toCoreDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getDeploymentStatus(
    {abortSignal, ...params}: RequestConfig & s.GetDeploymentStatusRequest,
  ): Promise<s.GetDeploymentStatusResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeploymentStatus",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments/${params["DeploymentId"]}/status`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeploymentStatus": "s",
        "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentType>(x),
        "ErrorDetails": [toErrorDetail],
        "ErrorMessage": "s",
        "UpdatedAt": "s",
      },
    }, await resp.json());
  }

  async getDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceDefinitionRequest,
  ): Promise<s.GetDeviceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeviceDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getDeviceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceDefinitionVersionRequest,
  ): Promise<s.GetDeviceDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDeviceDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}/versions/${params["DeviceDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toDeviceDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetFunctionDefinitionRequest,
  ): Promise<s.GetFunctionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFunctionDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getFunctionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.GetFunctionDefinitionVersionRequest,
  ): Promise<s.GetFunctionDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetFunctionDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}/versions/${params["FunctionDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toFunctionDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getGroup(
    {abortSignal, ...params}: RequestConfig & s.GetGroupRequest,
  ): Promise<s.GetGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getGroupCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & s.GetGroupCertificateAuthorityRequest,
  ): Promise<s.GetGroupCertificateAuthorityResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroupCertificateAuthority",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities/${params["CertificateAuthorityId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupCertificateAuthorityArn": "s",
        "GroupCertificateAuthorityId": "s",
        "PemEncodedCertificate": "s",
      },
    }, await resp.json());
  }

  async getGroupCertificateConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetGroupCertificateConfigurationRequest,
  ): Promise<s.GetGroupCertificateConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroupCertificateConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities/configuration/expiry`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CertificateAuthorityExpiryInMilliseconds": "s",
        "CertificateExpiryInMilliseconds": "s",
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async getGroupVersion(
    {abortSignal, ...params}: RequestConfig & s.GetGroupVersionRequest,
  ): Promise<s.GetGroupVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroupVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/versions/${params["GroupVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toGroupVersion,
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetLoggerDefinitionRequest,
  ): Promise<s.GetLoggerDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetLoggerDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getLoggerDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.GetLoggerDefinitionVersionRequest,
  ): Promise<s.GetLoggerDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLoggerDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}/versions/${params["LoggerDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toLoggerDefinitionVersion,
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getResourceDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetResourceDefinitionRequest,
  ): Promise<s.GetResourceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetResourceDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getResourceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.GetResourceDefinitionVersionRequest,
  ): Promise<s.GetResourceDefinitionVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetResourceDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}/versions/${params["ResourceDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toResourceDefinitionVersion,
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getServiceRoleForAccount(
    {abortSignal, ...params}: RequestConfig & s.GetServiceRoleForAccountRequest = {},
  ): Promise<s.GetServiceRoleForAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetServiceRoleForAccount",
      method: "GET",
      requestUri: "/greengrass/servicerole",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
        "RoleArn": "s",
      },
    }, await resp.json());
  }

  async getSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetSubscriptionDefinitionRequest,
  ): Promise<s.GetSubscriptionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSubscriptionDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getSubscriptionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & s.GetSubscriptionDefinitionVersionRequest,
  ): Promise<s.GetSubscriptionDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSubscriptionDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}/versions/${params["SubscriptionDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toSubscriptionDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getThingRuntimeConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetThingRuntimeConfigurationRequest,
  ): Promise<s.GetThingRuntimeConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetThingRuntimeConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/runtimeconfig`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuntimeConfiguration": toRuntimeConfiguration,
      },
    }, await resp.json());
  }

  async listBulkDeploymentDetailedReports(
    {abortSignal, ...params}: RequestConfig & s.ListBulkDeploymentDetailedReportsRequest,
  ): Promise<s.ListBulkDeploymentDetailedReportsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBulkDeploymentDetailedReports",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/bulk/deployments/${params["BulkDeploymentId"]}/detailed-reports`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Deployments": [toBulkDeploymentResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listBulkDeployments(
    {abortSignal, ...params}: RequestConfig & s.ListBulkDeploymentsRequest = {},
  ): Promise<s.ListBulkDeploymentsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBulkDeployments",
      method: "GET",
      requestUri: "/greengrass/bulk/deployments",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BulkDeployments": [toBulkDeployment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConnectorDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & s.ListConnectorDefinitionVersionsRequest,
  ): Promise<s.ListConnectorDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConnectorDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listConnectorDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListConnectorDefinitionsRequest = {},
  ): Promise<s.ListConnectorDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConnectorDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/connectors",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCoreDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & s.ListCoreDefinitionVersionsRequest,
  ): Promise<s.ListCoreDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCoreDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listCoreDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListCoreDefinitionsRequest = {},
  ): Promise<s.ListCoreDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCoreDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/cores",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeployments(
    {abortSignal, ...params}: RequestConfig & s.ListDeploymentsRequest,
  ): Promise<s.ListDeploymentsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeployments",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Deployments": [toDeployment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeviceDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & s.ListDeviceDefinitionVersionsRequest,
  ): Promise<s.ListDeviceDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listDeviceDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListDeviceDefinitionsRequest = {},
  ): Promise<s.ListDeviceDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/devices",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFunctionDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & s.ListFunctionDefinitionVersionsRequest,
  ): Promise<s.ListFunctionDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFunctionDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listFunctionDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListFunctionDefinitionsRequest = {},
  ): Promise<s.ListFunctionDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFunctionDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/functions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGroupCertificateAuthorities(
    {abortSignal, ...params}: RequestConfig & s.ListGroupCertificateAuthoritiesRequest,
  ): Promise<s.ListGroupCertificateAuthoritiesResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListGroupCertificateAuthorities",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupCertificateAuthorities": [toGroupCertificateAuthorityProperties],
      },
    }, await resp.json());
  }

  async listGroupVersions(
    {abortSignal, ...params}: RequestConfig & s.ListGroupVersionsRequest,
  ): Promise<s.ListGroupVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGroupVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & s.ListGroupsRequest = {},
  ): Promise<s.ListGroupsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGroups",
      method: "GET",
      requestUri: "/greengrass/groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Groups": [toGroupInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLoggerDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & s.ListLoggerDefinitionVersionsRequest,
  ): Promise<s.ListLoggerDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLoggerDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listLoggerDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListLoggerDefinitionsRequest = {},
  ): Promise<s.ListLoggerDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLoggerDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/loggers",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & s.ListResourceDefinitionVersionsRequest,
  ): Promise<s.ListResourceDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListResourceDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listResourceDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListResourceDefinitionsRequest = {},
  ): Promise<s.ListResourceDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListResourceDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/resources",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSubscriptionDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & s.ListSubscriptionDefinitionVersionsRequest,
  ): Promise<s.ListSubscriptionDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSubscriptionDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listSubscriptionDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListSubscriptionDefinitionsRequest = {},
  ): Promise<s.ListSubscriptionDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSubscriptionDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/subscriptions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async resetDeployments(
    {abortSignal, ...params}: RequestConfig & s.ResetDeploymentsRequest,
  ): Promise<s.ResetDeploymentsResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Force: params["Force"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "ResetDeployments",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments/$reset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeploymentArn": "s",
        "DeploymentId": "s",
      },
    }, await resp.json());
  }

  async startBulkDeployment(
    {abortSignal, ...params}: RequestConfig & s.StartBulkDeploymentRequest,
  ): Promise<s.StartBulkDeploymentResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      ExecutionRoleArn: params["ExecutionRoleArn"],
      InputFileUri: params["InputFileUri"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "StartBulkDeployment",
      requestUri: "/greengrass/bulk/deployments",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BulkDeploymentArn": "s",
        "BulkDeploymentId": "s",
      },
    }, await resp.json());
  }

  async stopBulkDeployment(
    {abortSignal, ...params}: RequestConfig & s.StopBulkDeploymentRequest,
  ): Promise<s.StopBulkDeploymentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopBulkDeployment",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/bulk/deployments/${params["BulkDeploymentId"]}/$stop`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateConnectivityInfo(
    {abortSignal, ...params}: RequestConfig & s.UpdateConnectivityInfoRequest,
  ): Promise<s.UpdateConnectivityInfoResponse> {
    const body: jsonP.JSONObject = {
      ConnectivityInfo: params["ConnectivityInfo"]?.map(x => fromConnectivityInfo(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectivityInfo",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/connectivityInfo`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async updateConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & s.UpdateConnectorDefinitionRequest,
  ): Promise<s.UpdateConnectorDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectorDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateCoreDefinition(
    {abortSignal, ...params}: RequestConfig & s.UpdateCoreDefinitionRequest,
  ): Promise<s.UpdateCoreDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCoreDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & s.UpdateDeviceDefinitionRequest,
  ): Promise<s.UpdateDeviceDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeviceDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & s.UpdateFunctionDefinitionRequest,
  ): Promise<s.UpdateFunctionDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFunctionDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateGroupRequest,
  ): Promise<s.UpdateGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGroupCertificateConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateGroupCertificateConfigurationRequest,
  ): Promise<s.UpdateGroupCertificateConfigurationResponse> {
    const body: jsonP.JSONObject = {
      CertificateExpiryInMilliseconds: params["CertificateExpiryInMilliseconds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroupCertificateConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities/configuration/expiry`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CertificateAuthorityExpiryInMilliseconds": "s",
        "CertificateExpiryInMilliseconds": "s",
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async updateLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & s.UpdateLoggerDefinitionRequest,
  ): Promise<s.UpdateLoggerDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLoggerDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateResourceDefinition(
    {abortSignal, ...params}: RequestConfig & s.UpdateResourceDefinitionRequest,
  ): Promise<s.UpdateResourceDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResourceDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & s.UpdateSubscriptionDefinitionRequest,
  ): Promise<s.UpdateSubscriptionDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSubscriptionDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateThingRuntimeConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateThingRuntimeConfigurationRequest,
  ): Promise<s.UpdateThingRuntimeConfigurationResponse> {
    const body: jsonP.JSONObject = {
      TelemetryConfiguration: fromTelemetryConfigurationUpdate(params["TelemetryConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThingRuntimeConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/runtimeconfig`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromConnectorDefinitionVersion(input?: s.ConnectorDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Connectors: input["Connectors"]?.map(x => fromConnector(x)),
  }
}
function toConnectorDefinitionVersion(root: jsonP.JSONValue): s.ConnectorDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Connectors": [toConnector],
    },
  }, root);
}

function fromConnector(input?: s.Connector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConnectorArn: input["ConnectorArn"],
    Id: input["Id"],
    Parameters: input["Parameters"],
  }
}
function toConnector(root: jsonP.JSONValue): s.Connector {
  return jsonP.readObj({
    required: {
      "ConnectorArn": "s",
      "Id": "s",
    },
    optional: {
      "Parameters": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function fromCoreDefinitionVersion(input?: s.CoreDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Cores: input["Cores"]?.map(x => fromCore(x)),
  }
}
function toCoreDefinitionVersion(root: jsonP.JSONValue): s.CoreDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Cores": [toCore],
    },
  }, root);
}

function fromCore(input?: s.Core | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CertificateArn: input["CertificateArn"],
    Id: input["Id"],
    SyncShadow: input["SyncShadow"],
    ThingArn: input["ThingArn"],
  }
}
function toCore(root: jsonP.JSONValue): s.Core {
  return jsonP.readObj({
    required: {
      "CertificateArn": "s",
      "Id": "s",
      "ThingArn": "s",
    },
    optional: {
      "SyncShadow": "b",
    },
  }, root);
}

function fromDeviceDefinitionVersion(input?: s.DeviceDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Devices: input["Devices"]?.map(x => fromDevice(x)),
  }
}
function toDeviceDefinitionVersion(root: jsonP.JSONValue): s.DeviceDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Devices": [toDevice],
    },
  }, root);
}

function fromDevice(input?: s.Device | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CertificateArn: input["CertificateArn"],
    Id: input["Id"],
    SyncShadow: input["SyncShadow"],
    ThingArn: input["ThingArn"],
  }
}
function toDevice(root: jsonP.JSONValue): s.Device {
  return jsonP.readObj({
    required: {
      "CertificateArn": "s",
      "Id": "s",
      "ThingArn": "s",
    },
    optional: {
      "SyncShadow": "b",
    },
  }, root);
}

function fromFunctionDefinitionVersion(input?: s.FunctionDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DefaultConfig: fromFunctionDefaultConfig(input["DefaultConfig"]),
    Functions: input["Functions"]?.map(x => fromFunction(x)),
  }
}
function toFunctionDefinitionVersion(root: jsonP.JSONValue): s.FunctionDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "DefaultConfig": toFunctionDefaultConfig,
      "Functions": [toFunction],
    },
  }, root);
}

function fromFunctionDefaultConfig(input?: s.FunctionDefaultConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Execution: fromFunctionDefaultExecutionConfig(input["Execution"]),
  }
}
function toFunctionDefaultConfig(root: jsonP.JSONValue): s.FunctionDefaultConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Execution": toFunctionDefaultExecutionConfig,
    },
  }, root);
}

function fromFunctionDefaultExecutionConfig(input?: s.FunctionDefaultExecutionConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsolationMode: input["IsolationMode"],
    RunAs: fromFunctionRunAsConfig(input["RunAs"]),
  }
}
function toFunctionDefaultExecutionConfig(root: jsonP.JSONValue): s.FunctionDefaultExecutionConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "IsolationMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.FunctionIsolationMode>(x),
      "RunAs": toFunctionRunAsConfig,
    },
  }, root);
}

function fromFunctionRunAsConfig(input?: s.FunctionRunAsConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Gid: input["Gid"],
    Uid: input["Uid"],
  }
}
function toFunctionRunAsConfig(root: jsonP.JSONValue): s.FunctionRunAsConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Gid": "n",
      "Uid": "n",
    },
  }, root);
}

function fromFunction(input?: s.Function | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FunctionArn: input["FunctionArn"],
    FunctionConfiguration: fromFunctionConfiguration(input["FunctionConfiguration"]),
    Id: input["Id"],
  }
}
function toFunction(root: jsonP.JSONValue): s.Function {
  return jsonP.readObj({
    required: {
      "Id": "s",
    },
    optional: {
      "FunctionArn": "s",
      "FunctionConfiguration": toFunctionConfiguration,
    },
  }, root);
}

function fromFunctionConfiguration(input?: s.FunctionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EncodingType: input["EncodingType"],
    Environment: fromFunctionConfigurationEnvironment(input["Environment"]),
    ExecArgs: input["ExecArgs"],
    Executable: input["Executable"],
    MemorySize: input["MemorySize"],
    Pinned: input["Pinned"],
    Timeout: input["Timeout"],
  }
}
function toFunctionConfiguration(root: jsonP.JSONValue): s.FunctionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "EncodingType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EncodingType>(x),
      "Environment": toFunctionConfigurationEnvironment,
      "ExecArgs": "s",
      "Executable": "s",
      "MemorySize": "n",
      "Pinned": "b",
      "Timeout": "n",
    },
  }, root);
}

function fromFunctionConfigurationEnvironment(input?: s.FunctionConfigurationEnvironment | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccessSysfs: input["AccessSysfs"],
    Execution: fromFunctionExecutionConfig(input["Execution"]),
    ResourceAccessPolicies: input["ResourceAccessPolicies"]?.map(x => fromResourceAccessPolicy(x)),
    Variables: input["Variables"],
  }
}
function toFunctionConfigurationEnvironment(root: jsonP.JSONValue): s.FunctionConfigurationEnvironment {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessSysfs": "b",
      "Execution": toFunctionExecutionConfig,
      "ResourceAccessPolicies": [toResourceAccessPolicy],
      "Variables": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function fromFunctionExecutionConfig(input?: s.FunctionExecutionConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsolationMode: input["IsolationMode"],
    RunAs: fromFunctionRunAsConfig(input["RunAs"]),
  }
}
function toFunctionExecutionConfig(root: jsonP.JSONValue): s.FunctionExecutionConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "IsolationMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.FunctionIsolationMode>(x),
      "RunAs": toFunctionRunAsConfig,
    },
  }, root);
}

function fromResourceAccessPolicy(input?: s.ResourceAccessPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Permission: input["Permission"],
    ResourceId: input["ResourceId"],
  }
}
function toResourceAccessPolicy(root: jsonP.JSONValue): s.ResourceAccessPolicy {
  return jsonP.readObj({
    required: {
      "ResourceId": "s",
    },
    optional: {
      "Permission": (x: jsonP.JSONValue) => cmnP.readEnum<s.Permission>(x),
    },
  }, root);
}

function fromGroupVersion(input?: s.GroupVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConnectorDefinitionVersionArn: input["ConnectorDefinitionVersionArn"],
    CoreDefinitionVersionArn: input["CoreDefinitionVersionArn"],
    DeviceDefinitionVersionArn: input["DeviceDefinitionVersionArn"],
    FunctionDefinitionVersionArn: input["FunctionDefinitionVersionArn"],
    LoggerDefinitionVersionArn: input["LoggerDefinitionVersionArn"],
    ResourceDefinitionVersionArn: input["ResourceDefinitionVersionArn"],
    SubscriptionDefinitionVersionArn: input["SubscriptionDefinitionVersionArn"],
  }
}
function toGroupVersion(root: jsonP.JSONValue): s.GroupVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConnectorDefinitionVersionArn": "s",
      "CoreDefinitionVersionArn": "s",
      "DeviceDefinitionVersionArn": "s",
      "FunctionDefinitionVersionArn": "s",
      "LoggerDefinitionVersionArn": "s",
      "ResourceDefinitionVersionArn": "s",
      "SubscriptionDefinitionVersionArn": "s",
    },
  }, root);
}

function fromLoggerDefinitionVersion(input?: s.LoggerDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Loggers: input["Loggers"]?.map(x => fromLogger(x)),
  }
}
function toLoggerDefinitionVersion(root: jsonP.JSONValue): s.LoggerDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Loggers": [toLogger],
    },
  }, root);
}

function fromLogger(input?: s.Logger | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Component: input["Component"],
    Id: input["Id"],
    Level: input["Level"],
    Space: input["Space"],
    Type: input["Type"],
  }
}
function toLogger(root: jsonP.JSONValue): s.Logger {
  return jsonP.readObj({
    required: {
      "Component": (x: jsonP.JSONValue) => cmnP.readEnum<s.LoggerComponent>(x),
      "Id": "s",
      "Level": (x: jsonP.JSONValue) => cmnP.readEnum<s.LoggerLevel>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.LoggerType>(x),
    },
    optional: {
      "Space": "n",
    },
  }, root);
}

function fromResourceDefinitionVersion(input?: s.ResourceDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Resources: input["Resources"]?.map(x => fromResource(x)),
  }
}
function toResourceDefinitionVersion(root: jsonP.JSONValue): s.ResourceDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Resources": [toResource],
    },
  }, root);
}

function fromResource(input?: s.Resource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Name: input["Name"],
    ResourceDataContainer: fromResourceDataContainer(input["ResourceDataContainer"]),
  }
}
function toResource(root: jsonP.JSONValue): s.Resource {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "Name": "s",
      "ResourceDataContainer": toResourceDataContainer,
    },
    optional: {},
  }, root);
}

function fromResourceDataContainer(input?: s.ResourceDataContainer | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LocalDeviceResourceData: fromLocalDeviceResourceData(input["LocalDeviceResourceData"]),
    LocalVolumeResourceData: fromLocalVolumeResourceData(input["LocalVolumeResourceData"]),
    S3MachineLearningModelResourceData: fromS3MachineLearningModelResourceData(input["S3MachineLearningModelResourceData"]),
    SageMakerMachineLearningModelResourceData: fromSageMakerMachineLearningModelResourceData(input["SageMakerMachineLearningModelResourceData"]),
    SecretsManagerSecretResourceData: fromSecretsManagerSecretResourceData(input["SecretsManagerSecretResourceData"]),
  }
}
function toResourceDataContainer(root: jsonP.JSONValue): s.ResourceDataContainer {
  return jsonP.readObj({
    required: {},
    optional: {
      "LocalDeviceResourceData": toLocalDeviceResourceData,
      "LocalVolumeResourceData": toLocalVolumeResourceData,
      "S3MachineLearningModelResourceData": toS3MachineLearningModelResourceData,
      "SageMakerMachineLearningModelResourceData": toSageMakerMachineLearningModelResourceData,
      "SecretsManagerSecretResourceData": toSecretsManagerSecretResourceData,
    },
  }, root);
}

function fromLocalDeviceResourceData(input?: s.LocalDeviceResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GroupOwnerSetting: fromGroupOwnerSetting(input["GroupOwnerSetting"]),
    SourcePath: input["SourcePath"],
  }
}
function toLocalDeviceResourceData(root: jsonP.JSONValue): s.LocalDeviceResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupOwnerSetting": toGroupOwnerSetting,
      "SourcePath": "s",
    },
  }, root);
}

function fromGroupOwnerSetting(input?: s.GroupOwnerSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AutoAddGroupOwner: input["AutoAddGroupOwner"],
    GroupOwner: input["GroupOwner"],
  }
}
function toGroupOwnerSetting(root: jsonP.JSONValue): s.GroupOwnerSetting {
  return jsonP.readObj({
    required: {},
    optional: {
      "AutoAddGroupOwner": "b",
      "GroupOwner": "s",
    },
  }, root);
}

function fromLocalVolumeResourceData(input?: s.LocalVolumeResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationPath: input["DestinationPath"],
    GroupOwnerSetting: fromGroupOwnerSetting(input["GroupOwnerSetting"]),
    SourcePath: input["SourcePath"],
  }
}
function toLocalVolumeResourceData(root: jsonP.JSONValue): s.LocalVolumeResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationPath": "s",
      "GroupOwnerSetting": toGroupOwnerSetting,
      "SourcePath": "s",
    },
  }, root);
}

function fromS3MachineLearningModelResourceData(input?: s.S3MachineLearningModelResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationPath: input["DestinationPath"],
    OwnerSetting: fromResourceDownloadOwnerSetting(input["OwnerSetting"]),
    S3Uri: input["S3Uri"],
  }
}
function toS3MachineLearningModelResourceData(root: jsonP.JSONValue): s.S3MachineLearningModelResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationPath": "s",
      "OwnerSetting": toResourceDownloadOwnerSetting,
      "S3Uri": "s",
    },
  }, root);
}

function fromResourceDownloadOwnerSetting(input?: s.ResourceDownloadOwnerSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GroupOwner: input["GroupOwner"],
    GroupPermission: input["GroupPermission"],
  }
}
function toResourceDownloadOwnerSetting(root: jsonP.JSONValue): s.ResourceDownloadOwnerSetting {
  return jsonP.readObj({
    required: {
      "GroupOwner": "s",
      "GroupPermission": (x: jsonP.JSONValue) => cmnP.readEnum<s.Permission>(x),
    },
    optional: {},
  }, root);
}

function fromSageMakerMachineLearningModelResourceData(input?: s.SageMakerMachineLearningModelResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationPath: input["DestinationPath"],
    OwnerSetting: fromResourceDownloadOwnerSetting(input["OwnerSetting"]),
    SageMakerJobArn: input["SageMakerJobArn"],
  }
}
function toSageMakerMachineLearningModelResourceData(root: jsonP.JSONValue): s.SageMakerMachineLearningModelResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationPath": "s",
      "OwnerSetting": toResourceDownloadOwnerSetting,
      "SageMakerJobArn": "s",
    },
  }, root);
}

function fromSecretsManagerSecretResourceData(input?: s.SecretsManagerSecretResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ARN: input["ARN"],
    AdditionalStagingLabelsToDownload: input["AdditionalStagingLabelsToDownload"],
  }
}
function toSecretsManagerSecretResourceData(root: jsonP.JSONValue): s.SecretsManagerSecretResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "ARN": "s",
      "AdditionalStagingLabelsToDownload": ["s"],
    },
  }, root);
}

function fromSubscriptionDefinitionVersion(input?: s.SubscriptionDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Subscriptions: input["Subscriptions"]?.map(x => fromSubscription(x)),
  }
}
function toSubscriptionDefinitionVersion(root: jsonP.JSONValue): s.SubscriptionDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Subscriptions": [toSubscription],
    },
  }, root);
}

function fromSubscription(input?: s.Subscription | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Source: input["Source"],
    Subject: input["Subject"],
    Target: input["Target"],
  }
}
function toSubscription(root: jsonP.JSONValue): s.Subscription {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "Source": "s",
      "Subject": "s",
      "Target": "s",
    },
    optional: {},
  }, root);
}

function fromConnectivityInfo(input?: s.ConnectivityInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    HostAddress: input["HostAddress"],
    Id: input["Id"],
    Metadata: input["Metadata"],
    PortNumber: input["PortNumber"],
  }
}
function toConnectivityInfo(root: jsonP.JSONValue): s.ConnectivityInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "HostAddress": "s",
      "Id": "s",
      "Metadata": "s",
      "PortNumber": "n",
    },
  }, root);
}

function fromTelemetryConfigurationUpdate(input?: s.TelemetryConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Telemetry: input["Telemetry"],
  }
}

function toBulkDeploymentMetrics(root: jsonP.JSONValue): s.BulkDeploymentMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "InvalidInputRecords": "n",
      "RecordsProcessed": "n",
      "RetryAttempts": "n",
    },
  }, root);
}

function toErrorDetail(root: jsonP.JSONValue): s.ErrorDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "DetailedErrorCode": "s",
      "DetailedErrorMessage": "s",
    },
  }, root);
}

function toRuntimeConfiguration(root: jsonP.JSONValue): s.RuntimeConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "TelemetryConfiguration": toTelemetryConfiguration,
    },
  }, root);
}

function toTelemetryConfiguration(root: jsonP.JSONValue): s.TelemetryConfiguration {
  return jsonP.readObj({
    required: {
      "Telemetry": (x: jsonP.JSONValue) => cmnP.readEnum<s.Telemetry>(x),
    },
    optional: {
      "ConfigurationSyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationSyncStatus>(x),
    },
  }, root);
}

function toBulkDeploymentResult(root: jsonP.JSONValue): s.BulkDeploymentResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedAt": "s",
      "DeploymentArn": "s",
      "DeploymentId": "s",
      "DeploymentStatus": "s",
      "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentType>(x),
      "ErrorDetails": [toErrorDetail],
      "ErrorMessage": "s",
      "GroupArn": "s",
    },
  }, root);
}

function toBulkDeployment(root: jsonP.JSONValue): s.BulkDeployment {
  return jsonP.readObj({
    required: {},
    optional: {
      "BulkDeploymentArn": "s",
      "BulkDeploymentId": "s",
      "CreatedAt": "s",
    },
  }, root);
}

function toVersionInformation(root: jsonP.JSONValue): s.VersionInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreationTimestamp": "s",
      "Id": "s",
      "Version": "s",
    },
  }, root);
}

function toDefinitionInformation(root: jsonP.JSONValue): s.DefinitionInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreationTimestamp": "s",
      "Id": "s",
      "LastUpdatedTimestamp": "s",
      "LatestVersion": "s",
      "LatestVersionArn": "s",
      "Name": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toDeployment(root: jsonP.JSONValue): s.Deployment {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedAt": "s",
      "DeploymentArn": "s",
      "DeploymentId": "s",
      "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentType>(x),
      "GroupArn": "s",
    },
  }, root);
}

function toGroupCertificateAuthorityProperties(root: jsonP.JSONValue): s.GroupCertificateAuthorityProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupCertificateAuthorityArn": "s",
      "GroupCertificateAuthorityId": "s",
    },
  }, root);
}

function toGroupInformation(root: jsonP.JSONValue): s.GroupInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreationTimestamp": "s",
      "Id": "s",
      "LastUpdatedTimestamp": "s",
      "LatestVersion": "s",
      "LatestVersionArn": "s",
      "Name": "s",
    },
  }, root);
}
