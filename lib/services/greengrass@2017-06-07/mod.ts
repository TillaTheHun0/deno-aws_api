// Autogenerated API client for: AWS Greengrass

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Greengrass {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Greengrass.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-06-07",
    "endpointPrefix": "greengrass",
    "signingName": "greengrass",
    "serviceFullName": "AWS Greengrass",
    "serviceId": "Greengrass",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "greengrass-2017-06-07",
    "signatureVersion": "v4"
  };

  async associateRoleToGroup(
    {abortSignal, ...params}: RequestConfig & AssociateRoleToGroupRequest,
  ): Promise<AssociateRoleToGroupResponse> {
    const body: jsonP.JSONObject = {
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateRoleToGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/role`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
      },
    }, await resp.json());
  }

  async associateServiceRoleToAccount(
    {abortSignal, ...params}: RequestConfig & AssociateServiceRoleToAccountRequest,
  ): Promise<AssociateServiceRoleToAccountResponse> {
    const body: jsonP.JSONObject = {
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateServiceRoleToAccount",
      method: "PUT",
      requestUri: "/greengrass/servicerole",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
      },
    }, await resp.json());
  }

  async createConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & CreateConnectorDefinitionRequest = {},
  ): Promise<CreateConnectorDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromConnectorDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateConnectorDefinition",
      requestUri: "/greengrass/definition/connectors",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createConnectorDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & CreateConnectorDefinitionVersionRequest,
  ): Promise<CreateConnectorDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Connectors: params["Connectors"]?.map(x => fromConnector(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateConnectorDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createCoreDefinition(
    {abortSignal, ...params}: RequestConfig & CreateCoreDefinitionRequest = {},
  ): Promise<CreateCoreDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromCoreDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateCoreDefinition",
      requestUri: "/greengrass/definition/cores",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createCoreDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & CreateCoreDefinitionVersionRequest,
  ): Promise<CreateCoreDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Cores: params["Cores"]?.map(x => fromCore(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateCoreDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createDeployment(
    {abortSignal, ...params}: RequestConfig & CreateDeploymentRequest,
  ): Promise<CreateDeploymentResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      DeploymentId: params["DeploymentId"],
      DeploymentType: params["DeploymentType"],
      GroupVersionId: params["GroupVersionId"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateDeployment",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeploymentArn": "s",
        "DeploymentId": "s",
      },
    }, await resp.json());
  }

  async createDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & CreateDeviceDefinitionRequest = {},
  ): Promise<CreateDeviceDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromDeviceDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateDeviceDefinition",
      requestUri: "/greengrass/definition/devices",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createDeviceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & CreateDeviceDefinitionVersionRequest,
  ): Promise<CreateDeviceDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Devices: params["Devices"]?.map(x => fromDevice(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateDeviceDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & CreateFunctionDefinitionRequest = {},
  ): Promise<CreateFunctionDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromFunctionDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateFunctionDefinition",
      requestUri: "/greengrass/definition/functions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createFunctionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & CreateFunctionDefinitionVersionRequest,
  ): Promise<CreateFunctionDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      DefaultConfig: fromFunctionDefaultConfig(params["DefaultConfig"]),
      Functions: params["Functions"]?.map(x => fromFunction(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateFunctionDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createGroup(
    {abortSignal, ...params}: RequestConfig & CreateGroupRequest = {},
  ): Promise<CreateGroupResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromGroupVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateGroup",
      requestUri: "/greengrass/groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createGroupCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & CreateGroupCertificateAuthorityRequest,
  ): Promise<CreateGroupCertificateAuthorityResponse> {
    const headers = new Headers;
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "CreateGroupCertificateAuthority",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupCertificateAuthorityArn": "s",
      },
    }, await resp.json());
  }

  async createGroupVersion(
    {abortSignal, ...params}: RequestConfig & CreateGroupVersionRequest,
  ): Promise<CreateGroupVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      ConnectorDefinitionVersionArn: params["ConnectorDefinitionVersionArn"],
      CoreDefinitionVersionArn: params["CoreDefinitionVersionArn"],
      DeviceDefinitionVersionArn: params["DeviceDefinitionVersionArn"],
      FunctionDefinitionVersionArn: params["FunctionDefinitionVersionArn"],
      LoggerDefinitionVersionArn: params["LoggerDefinitionVersionArn"],
      ResourceDefinitionVersionArn: params["ResourceDefinitionVersionArn"],
      SubscriptionDefinitionVersionArn: params["SubscriptionDefinitionVersionArn"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateGroupVersion",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & CreateLoggerDefinitionRequest = {},
  ): Promise<CreateLoggerDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromLoggerDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateLoggerDefinition",
      requestUri: "/greengrass/definition/loggers",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createLoggerDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & CreateLoggerDefinitionVersionRequest,
  ): Promise<CreateLoggerDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Loggers: params["Loggers"]?.map(x => fromLogger(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateLoggerDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createResourceDefinition(
    {abortSignal, ...params}: RequestConfig & CreateResourceDefinitionRequest = {},
  ): Promise<CreateResourceDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromResourceDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateResourceDefinition",
      requestUri: "/greengrass/definition/resources",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createResourceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & CreateResourceDefinitionVersionRequest,
  ): Promise<CreateResourceDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Resources: params["Resources"]?.map(x => fromResource(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateResourceDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async createSoftwareUpdateJob(
    {abortSignal, ...params}: RequestConfig & CreateSoftwareUpdateJobRequest,
  ): Promise<CreateSoftwareUpdateJobResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      S3UrlSignerRole: params["S3UrlSignerRole"],
      SoftwareToUpdate: params["SoftwareToUpdate"],
      UpdateAgentLogLevel: params["UpdateAgentLogLevel"],
      UpdateTargets: params["UpdateTargets"],
      UpdateTargetsArchitecture: params["UpdateTargetsArchitecture"],
      UpdateTargetsOperatingSystem: params["UpdateTargetsOperatingSystem"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateSoftwareUpdateJob",
      requestUri: "/greengrass/updates",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IotJobArn": "s",
        "IotJobId": "s",
        "PlatformSoftwareVersion": "s",
      },
    }, await resp.json());
  }

  async createSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & CreateSubscriptionDefinitionRequest = {},
  ): Promise<CreateSubscriptionDefinitionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      InitialVersion: fromSubscriptionDefinitionVersion(params["InitialVersion"]),
      Name: params["Name"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateSubscriptionDefinition",
      requestUri: "/greengrass/definition/subscriptions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createSubscriptionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & CreateSubscriptionDefinitionVersionRequest,
  ): Promise<CreateSubscriptionDefinitionVersionResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Subscriptions: params["Subscriptions"]?.map(x => fromSubscription(x)),
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateSubscriptionDefinitionVersion",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async deleteConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteConnectorDefinitionRequest,
  ): Promise<DeleteConnectorDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConnectorDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteCoreDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteCoreDefinitionRequest,
  ): Promise<DeleteCoreDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCoreDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteDeviceDefinitionRequest,
  ): Promise<DeleteDeviceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDeviceDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteFunctionDefinitionRequest,
  ): Promise<DeleteFunctionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFunctionDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGroup(
    {abortSignal, ...params}: RequestConfig & DeleteGroupRequest,
  ): Promise<DeleteGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteLoggerDefinitionRequest,
  ): Promise<DeleteLoggerDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteLoggerDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteResourceDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteResourceDefinitionRequest,
  ): Promise<DeleteResourceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteResourceDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteSubscriptionDefinitionRequest,
  ): Promise<DeleteSubscriptionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSubscriptionDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateRoleFromGroup(
    {abortSignal, ...params}: RequestConfig & DisassociateRoleFromGroupRequest,
  ): Promise<DisassociateRoleFromGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateRoleFromGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/role`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DisassociatedAt": "s",
      },
    }, await resp.json());
  }

  async disassociateServiceRoleFromAccount(
    {abortSignal, ...params}: RequestConfig & DisassociateServiceRoleFromAccountRequest = {},
  ): Promise<DisassociateServiceRoleFromAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateServiceRoleFromAccount",
      method: "DELETE",
      requestUri: "/greengrass/servicerole",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DisassociatedAt": "s",
      },
    }, await resp.json());
  }

  async getAssociatedRole(
    {abortSignal, ...params}: RequestConfig & GetAssociatedRoleRequest,
  ): Promise<GetAssociatedRoleResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssociatedRole",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/role`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
        "RoleArn": "s",
      },
    }, await resp.json());
  }

  async getBulkDeploymentStatus(
    {abortSignal, ...params}: RequestConfig & GetBulkDeploymentStatusRequest,
  ): Promise<GetBulkDeploymentStatusResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBulkDeploymentStatus",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/bulk/deployments/${params["BulkDeploymentId"]}/status`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BulkDeploymentMetrics": toBulkDeploymentMetrics,
        "BulkDeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BulkDeploymentStatus>(x),
        "CreatedAt": "s",
        "ErrorDetails": [toErrorDetail],
        "ErrorMessage": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getConnectivityInfo(
    {abortSignal, ...params}: RequestConfig & GetConnectivityInfoRequest,
  ): Promise<GetConnectivityInfoResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConnectivityInfo",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/connectivityInfo`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConnectivityInfo": [toConnectivityInfo],
        "Message": "s",
      },
    }, await resp.json());
  }

  async getConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & GetConnectorDefinitionRequest,
  ): Promise<GetConnectorDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConnectorDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getConnectorDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & GetConnectorDefinitionVersionRequest,
  ): Promise<GetConnectorDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetConnectorDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}/versions/${params["ConnectorDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toConnectorDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getCoreDefinition(
    {abortSignal, ...params}: RequestConfig & GetCoreDefinitionRequest,
  ): Promise<GetCoreDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCoreDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getCoreDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & GetCoreDefinitionVersionRequest,
  ): Promise<GetCoreDefinitionVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCoreDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}/versions/${params["CoreDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toCoreDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getDeploymentStatus(
    {abortSignal, ...params}: RequestConfig & GetDeploymentStatusRequest,
  ): Promise<GetDeploymentStatusResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeploymentStatus",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments/${params["DeploymentId"]}/status`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeploymentStatus": "s",
        "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentType>(x),
        "ErrorDetails": [toErrorDetail],
        "ErrorMessage": "s",
        "UpdatedAt": "s",
      },
    }, await resp.json());
  }

  async getDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & GetDeviceDefinitionRequest,
  ): Promise<GetDeviceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeviceDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getDeviceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & GetDeviceDefinitionVersionRequest,
  ): Promise<GetDeviceDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDeviceDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}/versions/${params["DeviceDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toDeviceDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & GetFunctionDefinitionRequest,
  ): Promise<GetFunctionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetFunctionDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getFunctionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & GetFunctionDefinitionVersionRequest,
  ): Promise<GetFunctionDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetFunctionDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}/versions/${params["FunctionDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toFunctionDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getGroup(
    {abortSignal, ...params}: RequestConfig & GetGroupRequest,
  ): Promise<GetGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getGroupCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & GetGroupCertificateAuthorityRequest,
  ): Promise<GetGroupCertificateAuthorityResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroupCertificateAuthority",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities/${params["CertificateAuthorityId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupCertificateAuthorityArn": "s",
        "GroupCertificateAuthorityId": "s",
        "PemEncodedCertificate": "s",
      },
    }, await resp.json());
  }

  async getGroupCertificateConfiguration(
    {abortSignal, ...params}: RequestConfig & GetGroupCertificateConfigurationRequest,
  ): Promise<GetGroupCertificateConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroupCertificateConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities/configuration/expiry`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CertificateAuthorityExpiryInMilliseconds": "s",
        "CertificateExpiryInMilliseconds": "s",
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async getGroupVersion(
    {abortSignal, ...params}: RequestConfig & GetGroupVersionRequest,
  ): Promise<GetGroupVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGroupVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/versions/${params["GroupVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toGroupVersion,
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & GetLoggerDefinitionRequest,
  ): Promise<GetLoggerDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetLoggerDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getLoggerDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & GetLoggerDefinitionVersionRequest,
  ): Promise<GetLoggerDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLoggerDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}/versions/${params["LoggerDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toLoggerDefinitionVersion,
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getResourceDefinition(
    {abortSignal, ...params}: RequestConfig & GetResourceDefinitionRequest,
  ): Promise<GetResourceDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetResourceDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getResourceDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & GetResourceDefinitionVersionRequest,
  ): Promise<GetResourceDefinitionVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetResourceDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}/versions/${params["ResourceDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toResourceDefinitionVersion,
        "Id": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getServiceRoleForAccount(
    {abortSignal, ...params}: RequestConfig & GetServiceRoleForAccountRequest = {},
  ): Promise<GetServiceRoleForAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetServiceRoleForAccount",
      method: "GET",
      requestUri: "/greengrass/servicerole",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociatedAt": "s",
        "RoleArn": "s",
      },
    }, await resp.json());
  }

  async getSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & GetSubscriptionDefinitionRequest,
  ): Promise<GetSubscriptionDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSubscriptionDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Id": "s",
        "LastUpdatedTimestamp": "s",
        "LatestVersion": "s",
        "LatestVersionArn": "s",
        "Name": "s",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getSubscriptionDefinitionVersion(
    {abortSignal, ...params}: RequestConfig & GetSubscriptionDefinitionVersionRequest,
  ): Promise<GetSubscriptionDefinitionVersionResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSubscriptionDefinitionVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}/versions/${params["SubscriptionDefinitionVersionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreationTimestamp": "s",
        "Definition": toSubscriptionDefinitionVersion,
        "Id": "s",
        "NextToken": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async getThingRuntimeConfiguration(
    {abortSignal, ...params}: RequestConfig & GetThingRuntimeConfigurationRequest,
  ): Promise<GetThingRuntimeConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetThingRuntimeConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/runtimeconfig`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuntimeConfiguration": toRuntimeConfiguration,
      },
    }, await resp.json());
  }

  async listBulkDeploymentDetailedReports(
    {abortSignal, ...params}: RequestConfig & ListBulkDeploymentDetailedReportsRequest,
  ): Promise<ListBulkDeploymentDetailedReportsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBulkDeploymentDetailedReports",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/bulk/deployments/${params["BulkDeploymentId"]}/detailed-reports`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Deployments": [toBulkDeploymentResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listBulkDeployments(
    {abortSignal, ...params}: RequestConfig & ListBulkDeploymentsRequest = {},
  ): Promise<ListBulkDeploymentsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBulkDeployments",
      method: "GET",
      requestUri: "/greengrass/bulk/deployments",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BulkDeployments": [toBulkDeployment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConnectorDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & ListConnectorDefinitionVersionsRequest,
  ): Promise<ListConnectorDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConnectorDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listConnectorDefinitions(
    {abortSignal, ...params}: RequestConfig & ListConnectorDefinitionsRequest = {},
  ): Promise<ListConnectorDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConnectorDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/connectors",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCoreDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & ListCoreDefinitionVersionsRequest,
  ): Promise<ListCoreDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCoreDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listCoreDefinitions(
    {abortSignal, ...params}: RequestConfig & ListCoreDefinitionsRequest = {},
  ): Promise<ListCoreDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCoreDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/cores",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeployments(
    {abortSignal, ...params}: RequestConfig & ListDeploymentsRequest,
  ): Promise<ListDeploymentsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeployments",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Deployments": [toDeployment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeviceDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & ListDeviceDefinitionVersionsRequest,
  ): Promise<ListDeviceDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listDeviceDefinitions(
    {abortSignal, ...params}: RequestConfig & ListDeviceDefinitionsRequest = {},
  ): Promise<ListDeviceDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/devices",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFunctionDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & ListFunctionDefinitionVersionsRequest,
  ): Promise<ListFunctionDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFunctionDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listFunctionDefinitions(
    {abortSignal, ...params}: RequestConfig & ListFunctionDefinitionsRequest = {},
  ): Promise<ListFunctionDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFunctionDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/functions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listGroupCertificateAuthorities(
    {abortSignal, ...params}: RequestConfig & ListGroupCertificateAuthoritiesRequest,
  ): Promise<ListGroupCertificateAuthoritiesResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListGroupCertificateAuthorities",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupCertificateAuthorities": [toGroupCertificateAuthorityProperties],
      },
    }, await resp.json());
  }

  async listGroupVersions(
    {abortSignal, ...params}: RequestConfig & ListGroupVersionsRequest,
  ): Promise<ListGroupVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGroupVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & ListGroupsRequest = {},
  ): Promise<ListGroupsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGroups",
      method: "GET",
      requestUri: "/greengrass/groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Groups": [toGroupInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLoggerDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & ListLoggerDefinitionVersionsRequest,
  ): Promise<ListLoggerDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLoggerDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listLoggerDefinitions(
    {abortSignal, ...params}: RequestConfig & ListLoggerDefinitionsRequest = {},
  ): Promise<ListLoggerDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListLoggerDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/loggers",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & ListResourceDefinitionVersionsRequest,
  ): Promise<ListResourceDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListResourceDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listResourceDefinitions(
    {abortSignal, ...params}: RequestConfig & ListResourceDefinitionsRequest = {},
  ): Promise<ListResourceDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListResourceDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/resources",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSubscriptionDefinitionVersions(
    {abortSignal, ...params}: RequestConfig & ListSubscriptionDefinitionVersionsRequest,
  ): Promise<ListSubscriptionDefinitionVersionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSubscriptionDefinitionVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Versions": [toVersionInformation],
      },
    }, await resp.json());
  }

  async listSubscriptionDefinitions(
    {abortSignal, ...params}: RequestConfig & ListSubscriptionDefinitionsRequest = {},
  ): Promise<ListSubscriptionDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSubscriptionDefinitions",
      method: "GET",
      requestUri: "/greengrass/definition/subscriptions",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Definitions": [toDefinitionInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async resetDeployments(
    {abortSignal, ...params}: RequestConfig & ResetDeploymentsRequest,
  ): Promise<ResetDeploymentsResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Force: params["Force"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "ResetDeployments",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/deployments/$reset`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeploymentArn": "s",
        "DeploymentId": "s",
      },
    }, await resp.json());
  }

  async startBulkDeployment(
    {abortSignal, ...params}: RequestConfig & StartBulkDeploymentRequest,
  ): Promise<StartBulkDeploymentResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      ExecutionRoleArn: params["ExecutionRoleArn"],
      InputFileUri: params["InputFileUri"],
      tags: params["tags"],
    };
    if (params["AmznClientToken"] != null) headers.append("X-Amzn-Client-Token", params["AmznClientToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "StartBulkDeployment",
      requestUri: "/greengrass/bulk/deployments",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BulkDeploymentArn": "s",
        "BulkDeploymentId": "s",
      },
    }, await resp.json());
  }

  async stopBulkDeployment(
    {abortSignal, ...params}: RequestConfig & StopBulkDeploymentRequest,
  ): Promise<StopBulkDeploymentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopBulkDeployment",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/bulk/deployments/${params["BulkDeploymentId"]}/$stop`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateConnectivityInfo(
    {abortSignal, ...params}: RequestConfig & UpdateConnectivityInfoRequest,
  ): Promise<UpdateConnectivityInfoResponse> {
    const body: jsonP.JSONObject = {
      ConnectivityInfo: params["ConnectivityInfo"]?.map(x => fromConnectivityInfo(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectivityInfo",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/connectivityInfo`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
        "Version": "s",
      },
    }, await resp.json());
  }

  async updateConnectorDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateConnectorDefinitionRequest,
  ): Promise<UpdateConnectorDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConnectorDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/connectors/${params["ConnectorDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateCoreDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateCoreDefinitionRequest,
  ): Promise<UpdateCoreDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCoreDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/cores/${params["CoreDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDeviceDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateDeviceDefinitionRequest,
  ): Promise<UpdateDeviceDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeviceDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/devices/${params["DeviceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFunctionDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateFunctionDefinitionRequest,
  ): Promise<UpdateFunctionDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFunctionDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/functions/${params["FunctionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGroup(
    {abortSignal, ...params}: RequestConfig & UpdateGroupRequest,
  ): Promise<UpdateGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGroupCertificateConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateGroupCertificateConfigurationRequest,
  ): Promise<UpdateGroupCertificateConfigurationResponse> {
    const body: jsonP.JSONObject = {
      CertificateExpiryInMilliseconds: params["CertificateExpiryInMilliseconds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroupCertificateConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/groups/${params["GroupId"]}/certificateauthorities/configuration/expiry`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CertificateAuthorityExpiryInMilliseconds": "s",
        "CertificateExpiryInMilliseconds": "s",
        "GroupId": "s",
      },
    }, await resp.json());
  }

  async updateLoggerDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateLoggerDefinitionRequest,
  ): Promise<UpdateLoggerDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLoggerDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/loggers/${params["LoggerDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateResourceDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateResourceDefinitionRequest,
  ): Promise<UpdateResourceDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResourceDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/resources/${params["ResourceDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSubscriptionDefinition(
    {abortSignal, ...params}: RequestConfig & UpdateSubscriptionDefinitionRequest,
  ): Promise<UpdateSubscriptionDefinitionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSubscriptionDefinition",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/definition/subscriptions/${params["SubscriptionDefinitionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateThingRuntimeConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateThingRuntimeConfigurationRequest,
  ): Promise<UpdateThingRuntimeConfigurationResponse> {
    const body: jsonP.JSONObject = {
      TelemetryConfiguration: fromTelemetryConfigurationUpdate(params["TelemetryConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThingRuntimeConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/greengrass/things/${params["ThingName"]}/runtimeconfig`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateRoleToGroupRequest {
  GroupId: string;
  RoleArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateServiceRoleToAccountRequest {
  RoleArn: string;
}

// refs: 1 - tags: named, input
export interface CreateConnectorDefinitionRequest {
  AmznClientToken?: string | null;
  InitialVersion?: ConnectorDefinitionVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateConnectorDefinitionVersionRequest {
  AmznClientToken?: string | null;
  ConnectorDefinitionId: string;
  Connectors?: Connector[] | null;
}

// refs: 1 - tags: named, input
export interface CreateCoreDefinitionRequest {
  AmznClientToken?: string | null;
  InitialVersion?: CoreDefinitionVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateCoreDefinitionVersionRequest {
  AmznClientToken?: string | null;
  CoreDefinitionId: string;
  Cores?: Core[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDeploymentRequest {
  AmznClientToken?: string | null;
  DeploymentId?: string | null;
  DeploymentType: DeploymentType;
  GroupId: string;
  GroupVersionId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDeviceDefinitionRequest {
  AmznClientToken?: string | null;
  InitialVersion?: DeviceDefinitionVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateDeviceDefinitionVersionRequest {
  AmznClientToken?: string | null;
  DeviceDefinitionId: string;
  Devices?: Device[] | null;
}

// refs: 1 - tags: named, input
export interface CreateFunctionDefinitionRequest {
  AmznClientToken?: string | null;
  InitialVersion?: FunctionDefinitionVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateFunctionDefinitionVersionRequest {
  AmznClientToken?: string | null;
  DefaultConfig?: FunctionDefaultConfig | null;
  FunctionDefinitionId: string;
  Functions?: Function[] | null;
}

// refs: 1 - tags: named, input
export interface CreateGroupRequest {
  AmznClientToken?: string | null;
  InitialVersion?: GroupVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateGroupCertificateAuthorityRequest {
  AmznClientToken?: string | null;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface CreateGroupVersionRequest {
  AmznClientToken?: string | null;
  ConnectorDefinitionVersionArn?: string | null;
  CoreDefinitionVersionArn?: string | null;
  DeviceDefinitionVersionArn?: string | null;
  FunctionDefinitionVersionArn?: string | null;
  GroupId: string;
  LoggerDefinitionVersionArn?: string | null;
  ResourceDefinitionVersionArn?: string | null;
  SubscriptionDefinitionVersionArn?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateLoggerDefinitionRequest {
  AmznClientToken?: string | null;
  InitialVersion?: LoggerDefinitionVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateLoggerDefinitionVersionRequest {
  AmznClientToken?: string | null;
  LoggerDefinitionId: string;
  Loggers?: Logger[] | null;
}

// refs: 1 - tags: named, input
export interface CreateResourceDefinitionRequest {
  AmznClientToken?: string | null;
  InitialVersion?: ResourceDefinitionVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateResourceDefinitionVersionRequest {
  AmznClientToken?: string | null;
  ResourceDefinitionId: string;
  Resources?: Resource[] | null;
}

// refs: 1 - tags: named, input
export interface CreateSoftwareUpdateJobRequest {
  AmznClientToken?: string | null;
  S3UrlSignerRole: string;
  SoftwareToUpdate: SoftwareToUpdate;
  UpdateAgentLogLevel?: UpdateAgentLogLevel | null;
  UpdateTargets: string[];
  UpdateTargetsArchitecture: UpdateTargetsArchitecture;
  UpdateTargetsOperatingSystem: UpdateTargetsOperatingSystem;
}

// refs: 1 - tags: named, input
export interface CreateSubscriptionDefinitionRequest {
  AmznClientToken?: string | null;
  InitialVersion?: SubscriptionDefinitionVersion | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateSubscriptionDefinitionVersionRequest {
  AmznClientToken?: string | null;
  SubscriptionDefinitionId: string;
  Subscriptions?: Subscription[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteConnectorDefinitionRequest {
  ConnectorDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteCoreDefinitionRequest {
  CoreDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDeviceDefinitionRequest {
  DeviceDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFunctionDefinitionRequest {
  FunctionDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteGroupRequest {
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface DeleteLoggerDefinitionRequest {
  LoggerDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteResourceDefinitionRequest {
  ResourceDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSubscriptionDefinitionRequest {
  SubscriptionDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateRoleFromGroupRequest {
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateServiceRoleFromAccountRequest {
}

// refs: 1 - tags: named, input
export interface GetAssociatedRoleRequest {
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface GetBulkDeploymentStatusRequest {
  BulkDeploymentId: string;
}

// refs: 1 - tags: named, input
export interface GetConnectivityInfoRequest {
  ThingName: string;
}

// refs: 1 - tags: named, input
export interface GetConnectorDefinitionRequest {
  ConnectorDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetConnectorDefinitionVersionRequest {
  ConnectorDefinitionId: string;
  ConnectorDefinitionVersionId: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCoreDefinitionRequest {
  CoreDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetCoreDefinitionVersionRequest {
  CoreDefinitionId: string;
  CoreDefinitionVersionId: string;
}

// refs: 1 - tags: named, input
export interface GetDeploymentStatusRequest {
  DeploymentId: string;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface GetDeviceDefinitionRequest {
  DeviceDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetDeviceDefinitionVersionRequest {
  DeviceDefinitionId: string;
  DeviceDefinitionVersionId: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetFunctionDefinitionRequest {
  FunctionDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetFunctionDefinitionVersionRequest {
  FunctionDefinitionId: string;
  FunctionDefinitionVersionId: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetGroupRequest {
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface GetGroupCertificateAuthorityRequest {
  CertificateAuthorityId: string;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface GetGroupCertificateConfigurationRequest {
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface GetGroupVersionRequest {
  GroupId: string;
  GroupVersionId: string;
}

// refs: 1 - tags: named, input
export interface GetLoggerDefinitionRequest {
  LoggerDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetLoggerDefinitionVersionRequest {
  LoggerDefinitionId: string;
  LoggerDefinitionVersionId: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetResourceDefinitionRequest {
  ResourceDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetResourceDefinitionVersionRequest {
  ResourceDefinitionId: string;
  ResourceDefinitionVersionId: string;
}

// refs: 1 - tags: named, input
export interface GetServiceRoleForAccountRequest {
}

// refs: 1 - tags: named, input
export interface GetSubscriptionDefinitionRequest {
  SubscriptionDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface GetSubscriptionDefinitionVersionRequest {
  NextToken?: string | null;
  SubscriptionDefinitionId: string;
  SubscriptionDefinitionVersionId: string;
}

// refs: 1 - tags: named, input
export interface GetThingRuntimeConfigurationRequest {
  ThingName: string;
}

// refs: 1 - tags: named, input
export interface ListBulkDeploymentDetailedReportsRequest {
  BulkDeploymentId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListBulkDeploymentsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConnectorDefinitionVersionsRequest {
  ConnectorDefinitionId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConnectorDefinitionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListCoreDefinitionVersionsRequest {
  CoreDefinitionId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListCoreDefinitionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeploymentsRequest {
  GroupId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeviceDefinitionVersionsRequest {
  DeviceDefinitionId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeviceDefinitionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFunctionDefinitionVersionsRequest {
  FunctionDefinitionId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFunctionDefinitionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGroupCertificateAuthoritiesRequest {
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface ListGroupVersionsRequest {
  GroupId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGroupsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListLoggerDefinitionVersionsRequest {
  LoggerDefinitionId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListLoggerDefinitionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListResourceDefinitionVersionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
  ResourceDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface ListResourceDefinitionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSubscriptionDefinitionVersionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
  SubscriptionDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface ListSubscriptionDefinitionsRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ResetDeploymentsRequest {
  AmznClientToken?: string | null;
  Force?: boolean | null;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface StartBulkDeploymentRequest {
  AmznClientToken?: string | null;
  ExecutionRoleArn: string;
  InputFileUri: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface StopBulkDeploymentRequest {
  BulkDeploymentId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateConnectivityInfoRequest {
  ConnectivityInfo?: ConnectivityInfo[] | null;
  ThingName: string;
}

// refs: 1 - tags: named, input
export interface UpdateConnectorDefinitionRequest {
  ConnectorDefinitionId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateCoreDefinitionRequest {
  CoreDefinitionId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDeviceDefinitionRequest {
  DeviceDefinitionId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateFunctionDefinitionRequest {
  FunctionDefinitionId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGroupRequest {
  GroupId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGroupCertificateConfigurationRequest {
  CertificateExpiryInMilliseconds?: string | null;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface UpdateLoggerDefinitionRequest {
  LoggerDefinitionId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateResourceDefinitionRequest {
  Name?: string | null;
  ResourceDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface UpdateSubscriptionDefinitionRequest {
  Name?: string | null;
  SubscriptionDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface UpdateThingRuntimeConfigurationRequest {
  TelemetryConfiguration?: TelemetryConfigurationUpdate | null;
  ThingName: string;
}

// refs: 1 - tags: named, output
export interface AssociateRoleToGroupResponse {
  AssociatedAt?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateServiceRoleToAccountResponse {
  AssociatedAt?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateConnectorDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateConnectorDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateCoreDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateCoreDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDeploymentResponse {
  DeploymentArn?: string | null;
  DeploymentId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDeviceDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDeviceDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateFunctionDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateFunctionDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateGroupResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateGroupCertificateAuthorityResponse {
  GroupCertificateAuthorityArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateGroupVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLoggerDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLoggerDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateResourceDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateResourceDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSoftwareUpdateJobResponse {
  IotJobArn?: string | null;
  IotJobId?: string | null;
  PlatformSoftwareVersion?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSubscriptionDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSubscriptionDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteConnectorDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteCoreDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDeviceDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteFunctionDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteGroupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteLoggerDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteResourceDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSubscriptionDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateRoleFromGroupResponse {
  DisassociatedAt?: string | null;
}

// refs: 1 - tags: named, output
export interface DisassociateServiceRoleFromAccountResponse {
  DisassociatedAt?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAssociatedRoleResponse {
  AssociatedAt?: string | null;
  RoleArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBulkDeploymentStatusResponse {
  BulkDeploymentMetrics?: BulkDeploymentMetrics | null;
  BulkDeploymentStatus?: BulkDeploymentStatus | null;
  CreatedAt?: string | null;
  ErrorDetails?: ErrorDetail[] | null;
  ErrorMessage?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetConnectivityInfoResponse {
  ConnectivityInfo?: ConnectivityInfo[] | null;
  Message?: string | null;
}

// refs: 1 - tags: named, output
export interface GetConnectorDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetConnectorDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: ConnectorDefinitionVersion | null;
  Id?: string | null;
  NextToken?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCoreDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetCoreDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: CoreDefinitionVersion | null;
  Id?: string | null;
  NextToken?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDeploymentStatusResponse {
  DeploymentStatus?: string | null;
  DeploymentType?: DeploymentType | null;
  ErrorDetails?: ErrorDetail[] | null;
  ErrorMessage?: string | null;
  UpdatedAt?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: DeviceDefinitionVersion | null;
  Id?: string | null;
  NextToken?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetFunctionDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetFunctionDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: FunctionDefinitionVersion | null;
  Id?: string | null;
  NextToken?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetGroupResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetGroupCertificateAuthorityResponse {
  GroupCertificateAuthorityArn?: string | null;
  GroupCertificateAuthorityId?: string | null;
  PemEncodedCertificate?: string | null;
}

// refs: 1 - tags: named, output
export interface GetGroupCertificateConfigurationResponse {
  CertificateAuthorityExpiryInMilliseconds?: string | null;
  CertificateExpiryInMilliseconds?: string | null;
  GroupId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetGroupVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: GroupVersion | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetLoggerDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetLoggerDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: LoggerDefinitionVersion | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetResourceDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetResourceDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: ResourceDefinitionVersion | null;
  Id?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetServiceRoleForAccountResponse {
  AssociatedAt?: string | null;
  RoleArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSubscriptionDefinitionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetSubscriptionDefinitionVersionResponse {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Definition?: SubscriptionDefinitionVersion | null;
  Id?: string | null;
  NextToken?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface GetThingRuntimeConfigurationResponse {
  RuntimeConfiguration?: RuntimeConfiguration | null;
}

// refs: 1 - tags: named, output
export interface ListBulkDeploymentDetailedReportsResponse {
  Deployments?: BulkDeploymentResult[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBulkDeploymentsResponse {
  BulkDeployments?: BulkDeployment[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListConnectorDefinitionVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListConnectorDefinitionsResponse {
  Definitions?: DefinitionInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCoreDefinitionVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListCoreDefinitionsResponse {
  Definitions?: DefinitionInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeploymentsResponse {
  Deployments?: Deployment[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeviceDefinitionVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListDeviceDefinitionsResponse {
  Definitions?: DefinitionInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFunctionDefinitionVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListFunctionDefinitionsResponse {
  Definitions?: DefinitionInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGroupCertificateAuthoritiesResponse {
  GroupCertificateAuthorities?: GroupCertificateAuthorityProperties[] | null;
}

// refs: 1 - tags: named, output
export interface ListGroupVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListGroupsResponse {
  Groups?: GroupInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLoggerDefinitionVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListLoggerDefinitionsResponse {
  Definitions?: DefinitionInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourceDefinitionVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListResourceDefinitionsResponse {
  Definitions?: DefinitionInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSubscriptionDefinitionVersionsResponse {
  NextToken?: string | null;
  Versions?: VersionInformation[] | null;
}

// refs: 1 - tags: named, output
export interface ListSubscriptionDefinitionsResponse {
  Definitions?: DefinitionInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ResetDeploymentsResponse {
  DeploymentArn?: string | null;
  DeploymentId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartBulkDeploymentResponse {
  BulkDeploymentArn?: string | null;
  BulkDeploymentId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopBulkDeploymentResponse {
}

// refs: 1 - tags: named, output
export interface UpdateConnectivityInfoResponse {
  Message?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateConnectorDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateCoreDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDeviceDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateFunctionDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateGroupResponse {
}

// refs: 1 - tags: named, output
export interface UpdateGroupCertificateConfigurationResponse {
  CertificateAuthorityExpiryInMilliseconds?: string | null;
  CertificateExpiryInMilliseconds?: string | null;
  GroupId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateLoggerDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateResourceDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateSubscriptionDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateThingRuntimeConfigurationResponse {
}

// refs: 2 - tags: input, named, interface, output
export interface ConnectorDefinitionVersion {
  Connectors?: Connector[] | null;
}
function fromConnectorDefinitionVersion(input?: ConnectorDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Connectors: input["Connectors"]?.map(x => fromConnector(x)),
  }
}
function toConnectorDefinitionVersion(root: jsonP.JSONValue): ConnectorDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Connectors": [toConnector],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Connector {
  ConnectorArn: string;
  Id: string;
  Parameters?: { [key: string]: string | null | undefined } | null;
}
function fromConnector(input?: Connector | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConnectorArn: input["ConnectorArn"],
    Id: input["Id"],
    Parameters: input["Parameters"],
  }
}
function toConnector(root: jsonP.JSONValue): Connector {
  return jsonP.readObj({
    required: {
      "ConnectorArn": "s",
      "Id": "s",
    },
    optional: {
      "Parameters": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CoreDefinitionVersion {
  Cores?: Core[] | null;
}
function fromCoreDefinitionVersion(input?: CoreDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Cores: input["Cores"]?.map(x => fromCore(x)),
  }
}
function toCoreDefinitionVersion(root: jsonP.JSONValue): CoreDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Cores": [toCore],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Core {
  CertificateArn: string;
  Id: string;
  SyncShadow?: boolean | null;
  ThingArn: string;
}
function fromCore(input?: Core | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CertificateArn: input["CertificateArn"],
    Id: input["Id"],
    SyncShadow: input["SyncShadow"],
    ThingArn: input["ThingArn"],
  }
}
function toCore(root: jsonP.JSONValue): Core {
  return jsonP.readObj({
    required: {
      "CertificateArn": "s",
      "Id": "s",
      "ThingArn": "s",
    },
    optional: {
      "SyncShadow": "b",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type DeploymentType =
| "NewDeployment"
| "Redeployment"
| "ResetDeployment"
| "ForceResetDeployment"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface DeviceDefinitionVersion {
  Devices?: Device[] | null;
}
function fromDeviceDefinitionVersion(input?: DeviceDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Devices: input["Devices"]?.map(x => fromDevice(x)),
  }
}
function toDeviceDefinitionVersion(root: jsonP.JSONValue): DeviceDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Devices": [toDevice],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Device {
  CertificateArn: string;
  Id: string;
  SyncShadow?: boolean | null;
  ThingArn: string;
}
function fromDevice(input?: Device | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CertificateArn: input["CertificateArn"],
    Id: input["Id"],
    SyncShadow: input["SyncShadow"],
    ThingArn: input["ThingArn"],
  }
}
function toDevice(root: jsonP.JSONValue): Device {
  return jsonP.readObj({
    required: {
      "CertificateArn": "s",
      "Id": "s",
      "ThingArn": "s",
    },
    optional: {
      "SyncShadow": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface FunctionDefinitionVersion {
  DefaultConfig?: FunctionDefaultConfig | null;
  Functions?: Function[] | null;
}
function fromFunctionDefinitionVersion(input?: FunctionDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DefaultConfig: fromFunctionDefaultConfig(input["DefaultConfig"]),
    Functions: input["Functions"]?.map(x => fromFunction(x)),
  }
}
function toFunctionDefinitionVersion(root: jsonP.JSONValue): FunctionDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "DefaultConfig": toFunctionDefaultConfig,
      "Functions": [toFunction],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface FunctionDefaultConfig {
  Execution?: FunctionDefaultExecutionConfig | null;
}
function fromFunctionDefaultConfig(input?: FunctionDefaultConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Execution: fromFunctionDefaultExecutionConfig(input["Execution"]),
  }
}
function toFunctionDefaultConfig(root: jsonP.JSONValue): FunctionDefaultConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Execution": toFunctionDefaultExecutionConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface FunctionDefaultExecutionConfig {
  IsolationMode?: FunctionIsolationMode | null;
  RunAs?: FunctionRunAsConfig | null;
}
function fromFunctionDefaultExecutionConfig(input?: FunctionDefaultExecutionConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsolationMode: input["IsolationMode"],
    RunAs: fromFunctionRunAsConfig(input["RunAs"]),
  }
}
function toFunctionDefaultExecutionConfig(root: jsonP.JSONValue): FunctionDefaultExecutionConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "IsolationMode": (x: jsonP.JSONValue) => cmnP.readEnum<FunctionIsolationMode>(x),
      "RunAs": toFunctionRunAsConfig,
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type FunctionIsolationMode =
| "GreengrassContainer"
| "NoContainer"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface FunctionRunAsConfig {
  Gid?: number | null;
  Uid?: number | null;
}
function fromFunctionRunAsConfig(input?: FunctionRunAsConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Gid: input["Gid"],
    Uid: input["Uid"],
  }
}
function toFunctionRunAsConfig(root: jsonP.JSONValue): FunctionRunAsConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Gid": "n",
      "Uid": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Function {
  FunctionArn?: string | null;
  FunctionConfiguration?: FunctionConfiguration | null;
  Id: string;
}
function fromFunction(input?: Function | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FunctionArn: input["FunctionArn"],
    FunctionConfiguration: fromFunctionConfiguration(input["FunctionConfiguration"]),
    Id: input["Id"],
  }
}
function toFunction(root: jsonP.JSONValue): Function {
  return jsonP.readObj({
    required: {
      "Id": "s",
    },
    optional: {
      "FunctionArn": "s",
      "FunctionConfiguration": toFunctionConfiguration,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface FunctionConfiguration {
  EncodingType?: EncodingType | null;
  Environment?: FunctionConfigurationEnvironment | null;
  ExecArgs?: string | null;
  Executable?: string | null;
  MemorySize?: number | null;
  Pinned?: boolean | null;
  Timeout?: number | null;
}
function fromFunctionConfiguration(input?: FunctionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EncodingType: input["EncodingType"],
    Environment: fromFunctionConfigurationEnvironment(input["Environment"]),
    ExecArgs: input["ExecArgs"],
    Executable: input["Executable"],
    MemorySize: input["MemorySize"],
    Pinned: input["Pinned"],
    Timeout: input["Timeout"],
  }
}
function toFunctionConfiguration(root: jsonP.JSONValue): FunctionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "EncodingType": (x: jsonP.JSONValue) => cmnP.readEnum<EncodingType>(x),
      "Environment": toFunctionConfigurationEnvironment,
      "ExecArgs": "s",
      "Executable": "s",
      "MemorySize": "n",
      "Pinned": "b",
      "Timeout": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type EncodingType =
| "binary"
| "json"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface FunctionConfigurationEnvironment {
  AccessSysfs?: boolean | null;
  Execution?: FunctionExecutionConfig | null;
  ResourceAccessPolicies?: ResourceAccessPolicy[] | null;
  Variables?: { [key: string]: string | null | undefined } | null;
}
function fromFunctionConfigurationEnvironment(input?: FunctionConfigurationEnvironment | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccessSysfs: input["AccessSysfs"],
    Execution: fromFunctionExecutionConfig(input["Execution"]),
    ResourceAccessPolicies: input["ResourceAccessPolicies"]?.map(x => fromResourceAccessPolicy(x)),
    Variables: input["Variables"],
  }
}
function toFunctionConfigurationEnvironment(root: jsonP.JSONValue): FunctionConfigurationEnvironment {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessSysfs": "b",
      "Execution": toFunctionExecutionConfig,
      "ResourceAccessPolicies": [toResourceAccessPolicy],
      "Variables": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface FunctionExecutionConfig {
  IsolationMode?: FunctionIsolationMode | null;
  RunAs?: FunctionRunAsConfig | null;
}
function fromFunctionExecutionConfig(input?: FunctionExecutionConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsolationMode: input["IsolationMode"],
    RunAs: fromFunctionRunAsConfig(input["RunAs"]),
  }
}
function toFunctionExecutionConfig(root: jsonP.JSONValue): FunctionExecutionConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "IsolationMode": (x: jsonP.JSONValue) => cmnP.readEnum<FunctionIsolationMode>(x),
      "RunAs": toFunctionRunAsConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ResourceAccessPolicy {
  Permission?: Permission | null;
  ResourceId: string;
}
function fromResourceAccessPolicy(input?: ResourceAccessPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Permission: input["Permission"],
    ResourceId: input["ResourceId"],
  }
}
function toResourceAccessPolicy(root: jsonP.JSONValue): ResourceAccessPolicy {
  return jsonP.readObj({
    required: {
      "ResourceId": "s",
    },
    optional: {
      "Permission": (x: jsonP.JSONValue) => cmnP.readEnum<Permission>(x),
    },
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type Permission =
| "ro"
| "rw"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface GroupVersion {
  ConnectorDefinitionVersionArn?: string | null;
  CoreDefinitionVersionArn?: string | null;
  DeviceDefinitionVersionArn?: string | null;
  FunctionDefinitionVersionArn?: string | null;
  LoggerDefinitionVersionArn?: string | null;
  ResourceDefinitionVersionArn?: string | null;
  SubscriptionDefinitionVersionArn?: string | null;
}
function fromGroupVersion(input?: GroupVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConnectorDefinitionVersionArn: input["ConnectorDefinitionVersionArn"],
    CoreDefinitionVersionArn: input["CoreDefinitionVersionArn"],
    DeviceDefinitionVersionArn: input["DeviceDefinitionVersionArn"],
    FunctionDefinitionVersionArn: input["FunctionDefinitionVersionArn"],
    LoggerDefinitionVersionArn: input["LoggerDefinitionVersionArn"],
    ResourceDefinitionVersionArn: input["ResourceDefinitionVersionArn"],
    SubscriptionDefinitionVersionArn: input["SubscriptionDefinitionVersionArn"],
  }
}
function toGroupVersion(root: jsonP.JSONValue): GroupVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConnectorDefinitionVersionArn": "s",
      "CoreDefinitionVersionArn": "s",
      "DeviceDefinitionVersionArn": "s",
      "FunctionDefinitionVersionArn": "s",
      "LoggerDefinitionVersionArn": "s",
      "ResourceDefinitionVersionArn": "s",
      "SubscriptionDefinitionVersionArn": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface LoggerDefinitionVersion {
  Loggers?: Logger[] | null;
}
function fromLoggerDefinitionVersion(input?: LoggerDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Loggers: input["Loggers"]?.map(x => fromLogger(x)),
  }
}
function toLoggerDefinitionVersion(root: jsonP.JSONValue): LoggerDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Loggers": [toLogger],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Logger {
  Component: LoggerComponent;
  Id: string;
  Level: LoggerLevel;
  Space?: number | null;
  Type: LoggerType;
}
function fromLogger(input?: Logger | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Component: input["Component"],
    Id: input["Id"],
    Level: input["Level"],
    Space: input["Space"],
    Type: input["Type"],
  }
}
function toLogger(root: jsonP.JSONValue): Logger {
  return jsonP.readObj({
    required: {
      "Component": (x: jsonP.JSONValue) => cmnP.readEnum<LoggerComponent>(x),
      "Id": "s",
      "Level": (x: jsonP.JSONValue) => cmnP.readEnum<LoggerLevel>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<LoggerType>(x),
    },
    optional: {
      "Space": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type LoggerComponent =
| "GreengrassSystem"
| "Lambda"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type LoggerLevel =
| "DEBUG"
| "INFO"
| "WARN"
| "ERROR"
| "FATAL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type LoggerType =
| "FileSystem"
| "AWSCloudWatch"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ResourceDefinitionVersion {
  Resources?: Resource[] | null;
}
function fromResourceDefinitionVersion(input?: ResourceDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Resources: input["Resources"]?.map(x => fromResource(x)),
  }
}
function toResourceDefinitionVersion(root: jsonP.JSONValue): ResourceDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Resources": [toResource],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Resource {
  Id: string;
  Name: string;
  ResourceDataContainer: ResourceDataContainer;
}
function fromResource(input?: Resource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Name: input["Name"],
    ResourceDataContainer: fromResourceDataContainer(input["ResourceDataContainer"]),
  }
}
function toResource(root: jsonP.JSONValue): Resource {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "Name": "s",
      "ResourceDataContainer": toResourceDataContainer,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ResourceDataContainer {
  LocalDeviceResourceData?: LocalDeviceResourceData | null;
  LocalVolumeResourceData?: LocalVolumeResourceData | null;
  S3MachineLearningModelResourceData?: S3MachineLearningModelResourceData | null;
  SageMakerMachineLearningModelResourceData?: SageMakerMachineLearningModelResourceData | null;
  SecretsManagerSecretResourceData?: SecretsManagerSecretResourceData | null;
}
function fromResourceDataContainer(input?: ResourceDataContainer | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LocalDeviceResourceData: fromLocalDeviceResourceData(input["LocalDeviceResourceData"]),
    LocalVolumeResourceData: fromLocalVolumeResourceData(input["LocalVolumeResourceData"]),
    S3MachineLearningModelResourceData: fromS3MachineLearningModelResourceData(input["S3MachineLearningModelResourceData"]),
    SageMakerMachineLearningModelResourceData: fromSageMakerMachineLearningModelResourceData(input["SageMakerMachineLearningModelResourceData"]),
    SecretsManagerSecretResourceData: fromSecretsManagerSecretResourceData(input["SecretsManagerSecretResourceData"]),
  }
}
function toResourceDataContainer(root: jsonP.JSONValue): ResourceDataContainer {
  return jsonP.readObj({
    required: {},
    optional: {
      "LocalDeviceResourceData": toLocalDeviceResourceData,
      "LocalVolumeResourceData": toLocalVolumeResourceData,
      "S3MachineLearningModelResourceData": toS3MachineLearningModelResourceData,
      "SageMakerMachineLearningModelResourceData": toSageMakerMachineLearningModelResourceData,
      "SecretsManagerSecretResourceData": toSecretsManagerSecretResourceData,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface LocalDeviceResourceData {
  GroupOwnerSetting?: GroupOwnerSetting | null;
  SourcePath?: string | null;
}
function fromLocalDeviceResourceData(input?: LocalDeviceResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GroupOwnerSetting: fromGroupOwnerSetting(input["GroupOwnerSetting"]),
    SourcePath: input["SourcePath"],
  }
}
function toLocalDeviceResourceData(root: jsonP.JSONValue): LocalDeviceResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupOwnerSetting": toGroupOwnerSetting,
      "SourcePath": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface GroupOwnerSetting {
  AutoAddGroupOwner?: boolean | null;
  GroupOwner?: string | null;
}
function fromGroupOwnerSetting(input?: GroupOwnerSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AutoAddGroupOwner: input["AutoAddGroupOwner"],
    GroupOwner: input["GroupOwner"],
  }
}
function toGroupOwnerSetting(root: jsonP.JSONValue): GroupOwnerSetting {
  return jsonP.readObj({
    required: {},
    optional: {
      "AutoAddGroupOwner": "b",
      "GroupOwner": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface LocalVolumeResourceData {
  DestinationPath?: string | null;
  GroupOwnerSetting?: GroupOwnerSetting | null;
  SourcePath?: string | null;
}
function fromLocalVolumeResourceData(input?: LocalVolumeResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationPath: input["DestinationPath"],
    GroupOwnerSetting: fromGroupOwnerSetting(input["GroupOwnerSetting"]),
    SourcePath: input["SourcePath"],
  }
}
function toLocalVolumeResourceData(root: jsonP.JSONValue): LocalVolumeResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationPath": "s",
      "GroupOwnerSetting": toGroupOwnerSetting,
      "SourcePath": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface S3MachineLearningModelResourceData {
  DestinationPath?: string | null;
  OwnerSetting?: ResourceDownloadOwnerSetting | null;
  S3Uri?: string | null;
}
function fromS3MachineLearningModelResourceData(input?: S3MachineLearningModelResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationPath: input["DestinationPath"],
    OwnerSetting: fromResourceDownloadOwnerSetting(input["OwnerSetting"]),
    S3Uri: input["S3Uri"],
  }
}
function toS3MachineLearningModelResourceData(root: jsonP.JSONValue): S3MachineLearningModelResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationPath": "s",
      "OwnerSetting": toResourceDownloadOwnerSetting,
      "S3Uri": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface ResourceDownloadOwnerSetting {
  GroupOwner: string;
  GroupPermission: Permission;
}
function fromResourceDownloadOwnerSetting(input?: ResourceDownloadOwnerSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GroupOwner: input["GroupOwner"],
    GroupPermission: input["GroupPermission"],
  }
}
function toResourceDownloadOwnerSetting(root: jsonP.JSONValue): ResourceDownloadOwnerSetting {
  return jsonP.readObj({
    required: {
      "GroupOwner": "s",
      "GroupPermission": (x: jsonP.JSONValue) => cmnP.readEnum<Permission>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SageMakerMachineLearningModelResourceData {
  DestinationPath?: string | null;
  OwnerSetting?: ResourceDownloadOwnerSetting | null;
  SageMakerJobArn?: string | null;
}
function fromSageMakerMachineLearningModelResourceData(input?: SageMakerMachineLearningModelResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationPath: input["DestinationPath"],
    OwnerSetting: fromResourceDownloadOwnerSetting(input["OwnerSetting"]),
    SageMakerJobArn: input["SageMakerJobArn"],
  }
}
function toSageMakerMachineLearningModelResourceData(root: jsonP.JSONValue): SageMakerMachineLearningModelResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationPath": "s",
      "OwnerSetting": toResourceDownloadOwnerSetting,
      "SageMakerJobArn": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SecretsManagerSecretResourceData {
  ARN?: string | null;
  AdditionalStagingLabelsToDownload?: string[] | null;
}
function fromSecretsManagerSecretResourceData(input?: SecretsManagerSecretResourceData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ARN: input["ARN"],
    AdditionalStagingLabelsToDownload: input["AdditionalStagingLabelsToDownload"],
  }
}
function toSecretsManagerSecretResourceData(root: jsonP.JSONValue): SecretsManagerSecretResourceData {
  return jsonP.readObj({
    required: {},
    optional: {
      "ARN": "s",
      "AdditionalStagingLabelsToDownload": ["s"],
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type SoftwareToUpdate =
| "core"
| "ota_agent"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UpdateAgentLogLevel =
| "NONE"
| "TRACE"
| "DEBUG"
| "VERBOSE"
| "INFO"
| "WARN"
| "ERROR"
| "FATAL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UpdateTargetsArchitecture =
| "armv6l"
| "armv7l"
| "x86_64"
| "aarch64"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UpdateTargetsOperatingSystem =
| "ubuntu"
| "raspbian"
| "amazon_linux"
| "openwrt"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface SubscriptionDefinitionVersion {
  Subscriptions?: Subscription[] | null;
}
function fromSubscriptionDefinitionVersion(input?: SubscriptionDefinitionVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Subscriptions: input["Subscriptions"]?.map(x => fromSubscription(x)),
  }
}
function toSubscriptionDefinitionVersion(root: jsonP.JSONValue): SubscriptionDefinitionVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "Subscriptions": [toSubscription],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Subscription {
  Id: string;
  Source: string;
  Subject: string;
  Target: string;
}
function fromSubscription(input?: Subscription | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Source: input["Source"],
    Subject: input["Subject"],
    Target: input["Target"],
  }
}
function toSubscription(root: jsonP.JSONValue): Subscription {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "Source": "s",
      "Subject": "s",
      "Target": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ConnectivityInfo {
  HostAddress?: string | null;
  Id?: string | null;
  Metadata?: string | null;
  PortNumber?: number | null;
}
function fromConnectivityInfo(input?: ConnectivityInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    HostAddress: input["HostAddress"],
    Id: input["Id"],
    Metadata: input["Metadata"],
    PortNumber: input["PortNumber"],
  }
}
function toConnectivityInfo(root: jsonP.JSONValue): ConnectivityInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "HostAddress": "s",
      "Id": "s",
      "Metadata": "s",
      "PortNumber": "n",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface TelemetryConfigurationUpdate {
  Telemetry: Telemetry;
}
function fromTelemetryConfigurationUpdate(input?: TelemetryConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Telemetry: input["Telemetry"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type Telemetry =
| "On"
| "Off"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BulkDeploymentMetrics {
  InvalidInputRecords?: number | null;
  RecordsProcessed?: number | null;
  RetryAttempts?: number | null;
}
function toBulkDeploymentMetrics(root: jsonP.JSONValue): BulkDeploymentMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "InvalidInputRecords": "n",
      "RecordsProcessed": "n",
      "RetryAttempts": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type BulkDeploymentStatus =
| "Initializing"
| "Running"
| "Completed"
| "Stopping"
| "Stopped"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface ErrorDetail {
  DetailedErrorCode?: string | null;
  DetailedErrorMessage?: string | null;
}
function toErrorDetail(root: jsonP.JSONValue): ErrorDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "DetailedErrorCode": "s",
      "DetailedErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RuntimeConfiguration {
  TelemetryConfiguration?: TelemetryConfiguration | null;
}
function toRuntimeConfiguration(root: jsonP.JSONValue): RuntimeConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "TelemetryConfiguration": toTelemetryConfiguration,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TelemetryConfiguration {
  ConfigurationSyncStatus?: ConfigurationSyncStatus | null;
  Telemetry: Telemetry;
}
function toTelemetryConfiguration(root: jsonP.JSONValue): TelemetryConfiguration {
  return jsonP.readObj({
    required: {
      "Telemetry": (x: jsonP.JSONValue) => cmnP.readEnum<Telemetry>(x),
    },
    optional: {
      "ConfigurationSyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationSyncStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ConfigurationSyncStatus =
| "InSync"
| "OutOfSync"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BulkDeploymentResult {
  CreatedAt?: string | null;
  DeploymentArn?: string | null;
  DeploymentId?: string | null;
  DeploymentStatus?: string | null;
  DeploymentType?: DeploymentType | null;
  ErrorDetails?: ErrorDetail[] | null;
  ErrorMessage?: string | null;
  GroupArn?: string | null;
}
function toBulkDeploymentResult(root: jsonP.JSONValue): BulkDeploymentResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedAt": "s",
      "DeploymentArn": "s",
      "DeploymentId": "s",
      "DeploymentStatus": "s",
      "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentType>(x),
      "ErrorDetails": [toErrorDetail],
      "ErrorMessage": "s",
      "GroupArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BulkDeployment {
  BulkDeploymentArn?: string | null;
  BulkDeploymentId?: string | null;
  CreatedAt?: string | null;
}
function toBulkDeployment(root: jsonP.JSONValue): BulkDeployment {
  return jsonP.readObj({
    required: {},
    optional: {
      "BulkDeploymentArn": "s",
      "BulkDeploymentId": "s",
      "CreatedAt": "s",
    },
  }, root);
}

// refs: 8 - tags: output, named, interface
export interface VersionInformation {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  Version?: string | null;
}
function toVersionInformation(root: jsonP.JSONValue): VersionInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreationTimestamp": "s",
      "Id": "s",
      "Version": "s",
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface DefinitionInformation {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toDefinitionInformation(root: jsonP.JSONValue): DefinitionInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreationTimestamp": "s",
      "Id": "s",
      "LastUpdatedTimestamp": "s",
      "LatestVersion": "s",
      "LatestVersionArn": "s",
      "Name": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Deployment {
  CreatedAt?: string | null;
  DeploymentArn?: string | null;
  DeploymentId?: string | null;
  DeploymentType?: DeploymentType | null;
  GroupArn?: string | null;
}
function toDeployment(root: jsonP.JSONValue): Deployment {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedAt": "s",
      "DeploymentArn": "s",
      "DeploymentId": "s",
      "DeploymentType": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentType>(x),
      "GroupArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GroupCertificateAuthorityProperties {
  GroupCertificateAuthorityArn?: string | null;
  GroupCertificateAuthorityId?: string | null;
}
function toGroupCertificateAuthorityProperties(root: jsonP.JSONValue): GroupCertificateAuthorityProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupCertificateAuthorityArn": "s",
      "GroupCertificateAuthorityId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GroupInformation {
  Arn?: string | null;
  CreationTimestamp?: string | null;
  Id?: string | null;
  LastUpdatedTimestamp?: string | null;
  LatestVersion?: string | null;
  LatestVersionArn?: string | null;
  Name?: string | null;
}
function toGroupInformation(root: jsonP.JSONValue): GroupInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreationTimestamp": "s",
      "Id": "s",
      "LastUpdatedTimestamp": "s",
      "LatestVersion": "s",
      "LatestVersionArn": "s",
      "Name": "s",
    },
  }, root);
}
