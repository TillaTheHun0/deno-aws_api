// Autogenerated API client for: Amazon Neptune

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { readXmlResult, readXmlMap, parseTimestamp, XmlNode } from '../../encoding/xml.ts';
import * as prt from "../../encoding/querystring.ts";

export default class Neptune {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Neptune.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-10-31",
    "endpointPrefix": "rds",
    "protocol": "query",
    "serviceAbbreviation": "Amazon Neptune",
    "serviceFullName": "Amazon Neptune",
    "serviceId": "Neptune",
    "signatureVersion": "v4",
    "signingName": "rds",
    "uid": "neptune-2014-10-31",
    "xmlNamespace": "http://rds.amazonaws.com/doc/2014-10-31/"
  };

  async addRoleToDBCluster(
    {abortSignal, ...params}: RequestConfig & AddRoleToDBClusterMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    body.append(prefix+"RoleArn", (params["RoleArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddRoleToDBCluster",
    });
  }

  async addSourceIdentifierToSubscription(
    {abortSignal, ...params}: RequestConfig & AddSourceIdentifierToSubscriptionMessage,
  ): Promise<AddSourceIdentifierToSubscriptionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionName", (params["SubscriptionName"] ?? '').toString());
    body.append(prefix+"SourceIdentifier", (params["SourceIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddSourceIdentifierToSubscription",
    });
    const xml = readXmlResult(await resp.text(), "AddSourceIdentifierToSubscriptionResult");
    return {
      EventSubscription: xml.first("EventSubscription", false, EventSubscription_Parse),
    };
  }

  async addTagsToResource(
    {abortSignal, ...params}: RequestConfig & AddTagsToResourceMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceName", (params["ResourceName"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTagsToResource",
    });
  }

  async applyPendingMaintenanceAction(
    {abortSignal, ...params}: RequestConfig & ApplyPendingMaintenanceActionMessage,
  ): Promise<ApplyPendingMaintenanceActionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceIdentifier", (params["ResourceIdentifier"] ?? '').toString());
    body.append(prefix+"ApplyAction", (params["ApplyAction"] ?? '').toString());
    body.append(prefix+"OptInType", (params["OptInType"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ApplyPendingMaintenanceAction",
    });
    const xml = readXmlResult(await resp.text(), "ApplyPendingMaintenanceActionResult");
    return {
      ResourcePendingMaintenanceActions: xml.first("ResourcePendingMaintenanceActions", false, ResourcePendingMaintenanceActions_Parse),
    };
  }

  async copyDBClusterParameterGroup(
    {abortSignal, ...params}: RequestConfig & CopyDBClusterParameterGroupMessage,
  ): Promise<CopyDBClusterParameterGroupResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SourceDBClusterParameterGroupIdentifier", (params["SourceDBClusterParameterGroupIdentifier"] ?? '').toString());
    body.append(prefix+"TargetDBClusterParameterGroupIdentifier", (params["TargetDBClusterParameterGroupIdentifier"] ?? '').toString());
    body.append(prefix+"TargetDBClusterParameterGroupDescription", (params["TargetDBClusterParameterGroupDescription"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyDBClusterParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "CopyDBClusterParameterGroupResult");
    return {
      DBClusterParameterGroup: xml.first("DBClusterParameterGroup", false, DBClusterParameterGroup_Parse),
    };
  }

  async copyDBClusterSnapshot(
    {abortSignal, ...params}: RequestConfig & CopyDBClusterSnapshotMessage,
  ): Promise<CopyDBClusterSnapshotResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SourceDBClusterSnapshotIdentifier", (params["SourceDBClusterSnapshotIdentifier"] ?? '').toString());
    body.append(prefix+"TargetDBClusterSnapshotIdentifier", (params["TargetDBClusterSnapshotIdentifier"] ?? '').toString());
    if ("KmsKeyId" in params) body.append(prefix+"KmsKeyId", (params["KmsKeyId"] ?? '').toString());
    if ("PreSignedUrl" in params) body.append(prefix+"PreSignedUrl", (params["PreSignedUrl"] ?? '').toString());
    if ("CopyTags" in params) body.append(prefix+"CopyTags", (params["CopyTags"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyDBClusterSnapshot",
    });
    const xml = readXmlResult(await resp.text(), "CopyDBClusterSnapshotResult");
    return {
      DBClusterSnapshot: xml.first("DBClusterSnapshot", false, DBClusterSnapshot_Parse),
    };
  }

  async copyDBParameterGroup(
    {abortSignal, ...params}: RequestConfig & CopyDBParameterGroupMessage,
  ): Promise<CopyDBParameterGroupResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SourceDBParameterGroupIdentifier", (params["SourceDBParameterGroupIdentifier"] ?? '').toString());
    body.append(prefix+"TargetDBParameterGroupIdentifier", (params["TargetDBParameterGroupIdentifier"] ?? '').toString());
    body.append(prefix+"TargetDBParameterGroupDescription", (params["TargetDBParameterGroupDescription"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyDBParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "CopyDBParameterGroupResult");
    return {
      DBParameterGroup: xml.first("DBParameterGroup", false, DBParameterGroup_Parse),
    };
  }

  async createDBCluster(
    {abortSignal, ...params}: RequestConfig & CreateDBClusterMessage,
  ): Promise<CreateDBClusterResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if (params["AvailabilityZones"]) prt.appendList(body, prefix+"AvailabilityZones", params["AvailabilityZones"], {"entryPrefix":".AvailabilityZone."})
    if ("BackupRetentionPeriod" in params) body.append(prefix+"BackupRetentionPeriod", (params["BackupRetentionPeriod"] ?? '').toString());
    if ("CharacterSetName" in params) body.append(prefix+"CharacterSetName", (params["CharacterSetName"] ?? '').toString());
    if ("DatabaseName" in params) body.append(prefix+"DatabaseName", (params["DatabaseName"] ?? '').toString());
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if ("DBClusterParameterGroupName" in params) body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if (params["VpcSecurityGroupIds"]) prt.appendList(body, prefix+"VpcSecurityGroupIds", params["VpcSecurityGroupIds"], {"entryPrefix":".VpcSecurityGroupId."})
    if ("DBSubnetGroupName" in params) body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    body.append(prefix+"Engine", (params["Engine"] ?? '').toString());
    if ("EngineVersion" in params) body.append(prefix+"EngineVersion", (params["EngineVersion"] ?? '').toString());
    if ("Port" in params) body.append(prefix+"Port", (params["Port"] ?? '').toString());
    if ("MasterUsername" in params) body.append(prefix+"MasterUsername", (params["MasterUsername"] ?? '').toString());
    if ("MasterUserPassword" in params) body.append(prefix+"MasterUserPassword", (params["MasterUserPassword"] ?? '').toString());
    if ("OptionGroupName" in params) body.append(prefix+"OptionGroupName", (params["OptionGroupName"] ?? '').toString());
    if ("PreferredBackupWindow" in params) body.append(prefix+"PreferredBackupWindow", (params["PreferredBackupWindow"] ?? '').toString());
    if ("PreferredMaintenanceWindow" in params) body.append(prefix+"PreferredMaintenanceWindow", (params["PreferredMaintenanceWindow"] ?? '').toString());
    if ("ReplicationSourceIdentifier" in params) body.append(prefix+"ReplicationSourceIdentifier", (params["ReplicationSourceIdentifier"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    if ("StorageEncrypted" in params) body.append(prefix+"StorageEncrypted", (params["StorageEncrypted"] ?? '').toString());
    if ("KmsKeyId" in params) body.append(prefix+"KmsKeyId", (params["KmsKeyId"] ?? '').toString());
    if ("PreSignedUrl" in params) body.append(prefix+"PreSignedUrl", (params["PreSignedUrl"] ?? '').toString());
    if ("EnableIAMDatabaseAuthentication" in params) body.append(prefix+"EnableIAMDatabaseAuthentication", (params["EnableIAMDatabaseAuthentication"] ?? '').toString());
    if (params["EnableCloudwatchLogsExports"]) prt.appendList(body, prefix+"EnableCloudwatchLogsExports", params["EnableCloudwatchLogsExports"], {"entryPrefix":".member."})
    if ("DeletionProtection" in params) body.append(prefix+"DeletionProtection", (params["DeletionProtection"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDBCluster",
    });
    const xml = readXmlResult(await resp.text(), "CreateDBClusterResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async createDBClusterParameterGroup(
    {abortSignal, ...params}: RequestConfig & CreateDBClusterParameterGroupMessage,
  ): Promise<CreateDBClusterParameterGroupResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    body.append(prefix+"DBParameterGroupFamily", (params["DBParameterGroupFamily"] ?? '').toString());
    body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDBClusterParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "CreateDBClusterParameterGroupResult");
    return {
      DBClusterParameterGroup: xml.first("DBClusterParameterGroup", false, DBClusterParameterGroup_Parse),
    };
  }

  async createDBClusterSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateDBClusterSnapshotMessage,
  ): Promise<CreateDBClusterSnapshotResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterSnapshotIdentifier", (params["DBClusterSnapshotIdentifier"] ?? '').toString());
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDBClusterSnapshot",
    });
    const xml = readXmlResult(await resp.text(), "CreateDBClusterSnapshotResult");
    return {
      DBClusterSnapshot: xml.first("DBClusterSnapshot", false, DBClusterSnapshot_Parse),
    };
  }

  async createDBInstance(
    {abortSignal, ...params}: RequestConfig & CreateDBInstanceMessage,
  ): Promise<CreateDBInstanceResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBName" in params) body.append(prefix+"DBName", (params["DBName"] ?? '').toString());
    body.append(prefix+"DBInstanceIdentifier", (params["DBInstanceIdentifier"] ?? '').toString());
    if ("AllocatedStorage" in params) body.append(prefix+"AllocatedStorage", (params["AllocatedStorage"] ?? '').toString());
    body.append(prefix+"DBInstanceClass", (params["DBInstanceClass"] ?? '').toString());
    body.append(prefix+"Engine", (params["Engine"] ?? '').toString());
    if ("MasterUsername" in params) body.append(prefix+"MasterUsername", (params["MasterUsername"] ?? '').toString());
    if ("MasterUserPassword" in params) body.append(prefix+"MasterUserPassword", (params["MasterUserPassword"] ?? '').toString());
    if (params["DBSecurityGroups"]) prt.appendList(body, prefix+"DBSecurityGroups", params["DBSecurityGroups"], {"entryPrefix":".DBSecurityGroupName."})
    if (params["VpcSecurityGroupIds"]) prt.appendList(body, prefix+"VpcSecurityGroupIds", params["VpcSecurityGroupIds"], {"entryPrefix":".VpcSecurityGroupId."})
    if ("AvailabilityZone" in params) body.append(prefix+"AvailabilityZone", (params["AvailabilityZone"] ?? '').toString());
    if ("DBSubnetGroupName" in params) body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    if ("PreferredMaintenanceWindow" in params) body.append(prefix+"PreferredMaintenanceWindow", (params["PreferredMaintenanceWindow"] ?? '').toString());
    if ("DBParameterGroupName" in params) body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    if ("BackupRetentionPeriod" in params) body.append(prefix+"BackupRetentionPeriod", (params["BackupRetentionPeriod"] ?? '').toString());
    if ("PreferredBackupWindow" in params) body.append(prefix+"PreferredBackupWindow", (params["PreferredBackupWindow"] ?? '').toString());
    if ("Port" in params) body.append(prefix+"Port", (params["Port"] ?? '').toString());
    if ("MultiAZ" in params) body.append(prefix+"MultiAZ", (params["MultiAZ"] ?? '').toString());
    if ("EngineVersion" in params) body.append(prefix+"EngineVersion", (params["EngineVersion"] ?? '').toString());
    if ("AutoMinorVersionUpgrade" in params) body.append(prefix+"AutoMinorVersionUpgrade", (params["AutoMinorVersionUpgrade"] ?? '').toString());
    if ("LicenseModel" in params) body.append(prefix+"LicenseModel", (params["LicenseModel"] ?? '').toString());
    if ("Iops" in params) body.append(prefix+"Iops", (params["Iops"] ?? '').toString());
    if ("OptionGroupName" in params) body.append(prefix+"OptionGroupName", (params["OptionGroupName"] ?? '').toString());
    if ("CharacterSetName" in params) body.append(prefix+"CharacterSetName", (params["CharacterSetName"] ?? '').toString());
    if ("PubliclyAccessible" in params) body.append(prefix+"PubliclyAccessible", (params["PubliclyAccessible"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    if ("DBClusterIdentifier" in params) body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if ("StorageType" in params) body.append(prefix+"StorageType", (params["StorageType"] ?? '').toString());
    if ("TdeCredentialArn" in params) body.append(prefix+"TdeCredentialArn", (params["TdeCredentialArn"] ?? '').toString());
    if ("TdeCredentialPassword" in params) body.append(prefix+"TdeCredentialPassword", (params["TdeCredentialPassword"] ?? '').toString());
    if ("StorageEncrypted" in params) body.append(prefix+"StorageEncrypted", (params["StorageEncrypted"] ?? '').toString());
    if ("KmsKeyId" in params) body.append(prefix+"KmsKeyId", (params["KmsKeyId"] ?? '').toString());
    if ("Domain" in params) body.append(prefix+"Domain", (params["Domain"] ?? '').toString());
    if ("CopyTagsToSnapshot" in params) body.append(prefix+"CopyTagsToSnapshot", (params["CopyTagsToSnapshot"] ?? '').toString());
    if ("MonitoringInterval" in params) body.append(prefix+"MonitoringInterval", (params["MonitoringInterval"] ?? '').toString());
    if ("MonitoringRoleArn" in params) body.append(prefix+"MonitoringRoleArn", (params["MonitoringRoleArn"] ?? '').toString());
    if ("DomainIAMRoleName" in params) body.append(prefix+"DomainIAMRoleName", (params["DomainIAMRoleName"] ?? '').toString());
    if ("PromotionTier" in params) body.append(prefix+"PromotionTier", (params["PromotionTier"] ?? '').toString());
    if ("Timezone" in params) body.append(prefix+"Timezone", (params["Timezone"] ?? '').toString());
    if ("EnableIAMDatabaseAuthentication" in params) body.append(prefix+"EnableIAMDatabaseAuthentication", (params["EnableIAMDatabaseAuthentication"] ?? '').toString());
    if ("EnablePerformanceInsights" in params) body.append(prefix+"EnablePerformanceInsights", (params["EnablePerformanceInsights"] ?? '').toString());
    if ("PerformanceInsightsKMSKeyId" in params) body.append(prefix+"PerformanceInsightsKMSKeyId", (params["PerformanceInsightsKMSKeyId"] ?? '').toString());
    if (params["EnableCloudwatchLogsExports"]) prt.appendList(body, prefix+"EnableCloudwatchLogsExports", params["EnableCloudwatchLogsExports"], {"entryPrefix":".member."})
    if ("DeletionProtection" in params) body.append(prefix+"DeletionProtection", (params["DeletionProtection"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDBInstance",
    });
    const xml = readXmlResult(await resp.text(), "CreateDBInstanceResult");
    return {
      DBInstance: xml.first("DBInstance", false, DBInstance_Parse),
    };
  }

  async createDBParameterGroup(
    {abortSignal, ...params}: RequestConfig & CreateDBParameterGroupMessage,
  ): Promise<CreateDBParameterGroupResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    body.append(prefix+"DBParameterGroupFamily", (params["DBParameterGroupFamily"] ?? '').toString());
    body.append(prefix+"Description", (params["Description"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDBParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "CreateDBParameterGroupResult");
    return {
      DBParameterGroup: xml.first("DBParameterGroup", false, DBParameterGroup_Parse),
    };
  }

  async createDBSubnetGroup(
    {abortSignal, ...params}: RequestConfig & CreateDBSubnetGroupMessage,
  ): Promise<CreateDBSubnetGroupResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    body.append(prefix+"DBSubnetGroupDescription", (params["DBSubnetGroupDescription"] ?? '').toString());
    if (params["SubnetIds"]) prt.appendList(body, prefix+"SubnetIds", params["SubnetIds"], {"entryPrefix":".SubnetIdentifier."})
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDBSubnetGroup",
    });
    const xml = readXmlResult(await resp.text(), "CreateDBSubnetGroupResult");
    return {
      DBSubnetGroup: xml.first("DBSubnetGroup", false, DBSubnetGroup_Parse),
    };
  }

  async createEventSubscription(
    {abortSignal, ...params}: RequestConfig & CreateEventSubscriptionMessage,
  ): Promise<CreateEventSubscriptionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionName", (params["SubscriptionName"] ?? '').toString());
    body.append(prefix+"SnsTopicArn", (params["SnsTopicArn"] ?? '').toString());
    if ("SourceType" in params) body.append(prefix+"SourceType", (params["SourceType"] ?? '').toString());
    if (params["EventCategories"]) prt.appendList(body, prefix+"EventCategories", params["EventCategories"], {"entryPrefix":".EventCategory."})
    if (params["SourceIds"]) prt.appendList(body, prefix+"SourceIds", params["SourceIds"], {"entryPrefix":".SourceId."})
    if ("Enabled" in params) body.append(prefix+"Enabled", (params["Enabled"] ?? '').toString());
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEventSubscription",
    });
    const xml = readXmlResult(await resp.text(), "CreateEventSubscriptionResult");
    return {
      EventSubscription: xml.first("EventSubscription", false, EventSubscription_Parse),
    };
  }

  async deleteDBCluster(
    {abortSignal, ...params}: RequestConfig & DeleteDBClusterMessage,
  ): Promise<DeleteDBClusterResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if ("SkipFinalSnapshot" in params) body.append(prefix+"SkipFinalSnapshot", (params["SkipFinalSnapshot"] ?? '').toString());
    if ("FinalDBSnapshotIdentifier" in params) body.append(prefix+"FinalDBSnapshotIdentifier", (params["FinalDBSnapshotIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDBCluster",
    });
    const xml = readXmlResult(await resp.text(), "DeleteDBClusterResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async deleteDBClusterParameterGroup(
    {abortSignal, ...params}: RequestConfig & DeleteDBClusterParameterGroupMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDBClusterParameterGroup",
    });
  }

  async deleteDBClusterSnapshot(
    {abortSignal, ...params}: RequestConfig & DeleteDBClusterSnapshotMessage,
  ): Promise<DeleteDBClusterSnapshotResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterSnapshotIdentifier", (params["DBClusterSnapshotIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDBClusterSnapshot",
    });
    const xml = readXmlResult(await resp.text(), "DeleteDBClusterSnapshotResult");
    return {
      DBClusterSnapshot: xml.first("DBClusterSnapshot", false, DBClusterSnapshot_Parse),
    };
  }

  async deleteDBInstance(
    {abortSignal, ...params}: RequestConfig & DeleteDBInstanceMessage,
  ): Promise<DeleteDBInstanceResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBInstanceIdentifier", (params["DBInstanceIdentifier"] ?? '').toString());
    if ("SkipFinalSnapshot" in params) body.append(prefix+"SkipFinalSnapshot", (params["SkipFinalSnapshot"] ?? '').toString());
    if ("FinalDBSnapshotIdentifier" in params) body.append(prefix+"FinalDBSnapshotIdentifier", (params["FinalDBSnapshotIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDBInstance",
    });
    const xml = readXmlResult(await resp.text(), "DeleteDBInstanceResult");
    return {
      DBInstance: xml.first("DBInstance", false, DBInstance_Parse),
    };
  }

  async deleteDBParameterGroup(
    {abortSignal, ...params}: RequestConfig & DeleteDBParameterGroupMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDBParameterGroup",
    });
  }

  async deleteDBSubnetGroup(
    {abortSignal, ...params}: RequestConfig & DeleteDBSubnetGroupMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDBSubnetGroup",
    });
  }

  async deleteEventSubscription(
    {abortSignal, ...params}: RequestConfig & DeleteEventSubscriptionMessage,
  ): Promise<DeleteEventSubscriptionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionName", (params["SubscriptionName"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEventSubscription",
    });
    const xml = readXmlResult(await resp.text(), "DeleteEventSubscriptionResult");
    return {
      EventSubscription: xml.first("EventSubscription", false, EventSubscription_Parse),
    };
  }

  async describeDBClusterParameterGroups(
    {abortSignal, ...params}: RequestConfig & DescribeDBClusterParameterGroupsMessage = {},
  ): Promise<DBClusterParameterGroupsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBClusterParameterGroupName" in params) body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBClusterParameterGroups",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBClusterParameterGroupsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      DBClusterParameterGroups: xml.getList("DBClusterParameterGroups", "DBClusterParameterGroup").map(DBClusterParameterGroup_Parse),
    };
  }

  async describeDBClusterParameters(
    {abortSignal, ...params}: RequestConfig & DescribeDBClusterParametersMessage,
  ): Promise<DBClusterParameterGroupDetails> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if ("Source" in params) body.append(prefix+"Source", (params["Source"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBClusterParameters",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBClusterParametersResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      Parameters: xml.getList("Parameters", "Parameter").map(Parameter_Parse),
    };
  }

  async describeDBClusterSnapshotAttributes(
    {abortSignal, ...params}: RequestConfig & DescribeDBClusterSnapshotAttributesMessage,
  ): Promise<DescribeDBClusterSnapshotAttributesResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterSnapshotIdentifier", (params["DBClusterSnapshotIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBClusterSnapshotAttributes",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBClusterSnapshotAttributesResult");
    return {
      DBClusterSnapshotAttributesResult: xml.first("DBClusterSnapshotAttributesResult", false, DBClusterSnapshotAttributesResult_Parse),
    };
  }

  async describeDBClusterSnapshots(
    {abortSignal, ...params}: RequestConfig & DescribeDBClusterSnapshotsMessage = {},
  ): Promise<DBClusterSnapshotMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBClusterIdentifier" in params) body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if ("DBClusterSnapshotIdentifier" in params) body.append(prefix+"DBClusterSnapshotIdentifier", (params["DBClusterSnapshotIdentifier"] ?? '').toString());
    if ("SnapshotType" in params) body.append(prefix+"SnapshotType", (params["SnapshotType"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    if ("IncludeShared" in params) body.append(prefix+"IncludeShared", (params["IncludeShared"] ?? '').toString());
    if ("IncludePublic" in params) body.append(prefix+"IncludePublic", (params["IncludePublic"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBClusterSnapshots",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBClusterSnapshotsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      DBClusterSnapshots: xml.getList("DBClusterSnapshots", "DBClusterSnapshot").map(DBClusterSnapshot_Parse),
    };
  }

  async describeDBClusters(
    {abortSignal, ...params}: RequestConfig & DescribeDBClustersMessage = {},
  ): Promise<DBClusterMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBClusterIdentifier" in params) body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBClusters",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBClustersResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      DBClusters: xml.getList("DBClusters", "DBCluster").map(DBCluster_Parse),
    };
  }

  async describeDBEngineVersions(
    {abortSignal, ...params}: RequestConfig & DescribeDBEngineVersionsMessage = {},
  ): Promise<DBEngineVersionMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("Engine" in params) body.append(prefix+"Engine", (params["Engine"] ?? '').toString());
    if ("EngineVersion" in params) body.append(prefix+"EngineVersion", (params["EngineVersion"] ?? '').toString());
    if ("DBParameterGroupFamily" in params) body.append(prefix+"DBParameterGroupFamily", (params["DBParameterGroupFamily"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    if ("DefaultOnly" in params) body.append(prefix+"DefaultOnly", (params["DefaultOnly"] ?? '').toString());
    if ("ListSupportedCharacterSets" in params) body.append(prefix+"ListSupportedCharacterSets", (params["ListSupportedCharacterSets"] ?? '').toString());
    if ("ListSupportedTimezones" in params) body.append(prefix+"ListSupportedTimezones", (params["ListSupportedTimezones"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBEngineVersions",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBEngineVersionsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      DBEngineVersions: xml.getList("DBEngineVersions", "DBEngineVersion").map(DBEngineVersion_Parse),
    };
  }

  async describeDBInstances(
    {abortSignal, ...params}: RequestConfig & DescribeDBInstancesMessage = {},
  ): Promise<DBInstanceMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBInstanceIdentifier" in params) body.append(prefix+"DBInstanceIdentifier", (params["DBInstanceIdentifier"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBInstances",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBInstancesResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      DBInstances: xml.getList("DBInstances", "DBInstance").map(DBInstance_Parse),
    };
  }

  async describeDBParameterGroups(
    {abortSignal, ...params}: RequestConfig & DescribeDBParameterGroupsMessage = {},
  ): Promise<DBParameterGroupsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBParameterGroupName" in params) body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBParameterGroups",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBParameterGroupsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      DBParameterGroups: xml.getList("DBParameterGroups", "DBParameterGroup").map(DBParameterGroup_Parse),
    };
  }

  async describeDBParameters(
    {abortSignal, ...params}: RequestConfig & DescribeDBParametersMessage,
  ): Promise<DBParameterGroupDetails> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    if ("Source" in params) body.append(prefix+"Source", (params["Source"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBParameters",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBParametersResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      Parameters: xml.getList("Parameters", "Parameter").map(Parameter_Parse),
    };
  }

  async describeDBSubnetGroups(
    {abortSignal, ...params}: RequestConfig & DescribeDBSubnetGroupsMessage = {},
  ): Promise<DBSubnetGroupMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBSubnetGroupName" in params) body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDBSubnetGroups",
    });
    const xml = readXmlResult(await resp.text(), "DescribeDBSubnetGroupsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      DBSubnetGroups: xml.getList("DBSubnetGroups", "DBSubnetGroup").map(DBSubnetGroup_Parse),
    };
  }

  async describeEngineDefaultClusterParameters(
    {abortSignal, ...params}: RequestConfig & DescribeEngineDefaultClusterParametersMessage,
  ): Promise<DescribeEngineDefaultClusterParametersResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBParameterGroupFamily", (params["DBParameterGroupFamily"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEngineDefaultClusterParameters",
    });
    const xml = readXmlResult(await resp.text(), "DescribeEngineDefaultClusterParametersResult");
    return {
      EngineDefaults: xml.first("EngineDefaults", false, EngineDefaults_Parse),
    };
  }

  async describeEngineDefaultParameters(
    {abortSignal, ...params}: RequestConfig & DescribeEngineDefaultParametersMessage,
  ): Promise<DescribeEngineDefaultParametersResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBParameterGroupFamily", (params["DBParameterGroupFamily"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEngineDefaultParameters",
    });
    const xml = readXmlResult(await resp.text(), "DescribeEngineDefaultParametersResult");
    return {
      EngineDefaults: xml.first("EngineDefaults", false, EngineDefaults_Parse),
    };
  }

  async describeEventCategories(
    {abortSignal, ...params}: RequestConfig & DescribeEventCategoriesMessage = {},
  ): Promise<EventCategoriesMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("SourceType" in params) body.append(prefix+"SourceType", (params["SourceType"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventCategories",
    });
    const xml = readXmlResult(await resp.text(), "DescribeEventCategoriesResult");
    return {
      EventCategoriesMapList: xml.getList("EventCategoriesMapList", "EventCategoriesMap").map(EventCategoriesMap_Parse),
    };
  }

  async describeEventSubscriptions(
    {abortSignal, ...params}: RequestConfig & DescribeEventSubscriptionsMessage = {},
  ): Promise<EventSubscriptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("SubscriptionName" in params) body.append(prefix+"SubscriptionName", (params["SubscriptionName"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventSubscriptions",
    });
    const xml = readXmlResult(await resp.text(), "DescribeEventSubscriptionsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      EventSubscriptionsList: xml.getList("EventSubscriptionsList", "EventSubscription").map(EventSubscription_Parse),
    };
  }

  async describeEvents(
    {abortSignal, ...params}: RequestConfig & DescribeEventsMessage = {},
  ): Promise<EventsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("SourceIdentifier" in params) body.append(prefix+"SourceIdentifier", (params["SourceIdentifier"] ?? '').toString());
    if ("SourceType" in params) body.append(prefix+"SourceType", (params["SourceType"] ?? '').toString());
    if ("StartTime" in params) body.append(prefix+"StartTime", prt.encodeDate_iso8601(params["StartTime"]));
    if ("EndTime" in params) body.append(prefix+"EndTime", prt.encodeDate_iso8601(params["EndTime"]));
    if ("Duration" in params) body.append(prefix+"Duration", (params["Duration"] ?? '').toString());
    if (params["EventCategories"]) prt.appendList(body, prefix+"EventCategories", params["EventCategories"], {"entryPrefix":".EventCategory."})
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEvents",
    });
    const xml = readXmlResult(await resp.text(), "DescribeEventsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      Events: xml.getList("Events", "Event").map(Event_Parse),
    };
  }

  async describeOrderableDBInstanceOptions(
    {abortSignal, ...params}: RequestConfig & DescribeOrderableDBInstanceOptionsMessage,
  ): Promise<OrderableDBInstanceOptionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"Engine", (params["Engine"] ?? '').toString());
    if ("EngineVersion" in params) body.append(prefix+"EngineVersion", (params["EngineVersion"] ?? '').toString());
    if ("DBInstanceClass" in params) body.append(prefix+"DBInstanceClass", (params["DBInstanceClass"] ?? '').toString());
    if ("LicenseModel" in params) body.append(prefix+"LicenseModel", (params["LicenseModel"] ?? '').toString());
    if ("Vpc" in params) body.append(prefix+"Vpc", (params["Vpc"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrderableDBInstanceOptions",
    });
    const xml = readXmlResult(await resp.text(), "DescribeOrderableDBInstanceOptionsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      OrderableDBInstanceOptions: xml.getList("OrderableDBInstanceOptions", "OrderableDBInstanceOption").map(OrderableDBInstanceOption_Parse),
    };
  }

  async describePendingMaintenanceActions(
    {abortSignal, ...params}: RequestConfig & DescribePendingMaintenanceActionsMessage = {},
  ): Promise<PendingMaintenanceActionsMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("ResourceIdentifier" in params) body.append(prefix+"ResourceIdentifier", (params["ResourceIdentifier"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    if ("Marker" in params) body.append(prefix+"Marker", (params["Marker"] ?? '').toString());
    if ("MaxRecords" in params) body.append(prefix+"MaxRecords", (params["MaxRecords"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePendingMaintenanceActions",
    });
    const xml = readXmlResult(await resp.text(), "DescribePendingMaintenanceActionsResult");
    return {
      ...xml.strings({
        optional: {"Marker":true},
      }),
      PendingMaintenanceActions: xml.getList("PendingMaintenanceActions", "ResourcePendingMaintenanceActions").map(ResourcePendingMaintenanceActions_Parse),
    };
  }

  async describeValidDBInstanceModifications(
    {abortSignal, ...params}: RequestConfig & DescribeValidDBInstanceModificationsMessage,
  ): Promise<DescribeValidDBInstanceModificationsResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBInstanceIdentifier", (params["DBInstanceIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeValidDBInstanceModifications",
    });
    const xml = readXmlResult(await resp.text(), "DescribeValidDBInstanceModificationsResult");
    return {
      ValidDBInstanceModificationsMessage: xml.first("ValidDBInstanceModificationsMessage", false, ValidDBInstanceModificationsMessage_Parse),
    };
  }

  async failoverDBCluster(
    {abortSignal, ...params}: RequestConfig & FailoverDBClusterMessage = {},
  ): Promise<FailoverDBClusterResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DBClusterIdentifier" in params) body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if ("TargetDBInstanceIdentifier" in params) body.append(prefix+"TargetDBInstanceIdentifier", (params["TargetDBInstanceIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "FailoverDBCluster",
    });
    const xml = readXmlResult(await resp.text(), "FailoverDBClusterResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceMessage,
  ): Promise<TagListMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceName", (params["ResourceName"] ?? '').toString());
    if (params["Filters"]) prt.appendList(body, prefix+"Filters", params["Filters"], {"appender":Filter_Serialize,"entryPrefix":".Filter."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    const xml = readXmlResult(await resp.text(), "ListTagsForResourceResult");
    return {
      TagList: xml.getList("TagList", "Tag").map(Tag_Parse),
    };
  }

  async modifyDBCluster(
    {abortSignal, ...params}: RequestConfig & ModifyDBClusterMessage,
  ): Promise<ModifyDBClusterResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if ("NewDBClusterIdentifier" in params) body.append(prefix+"NewDBClusterIdentifier", (params["NewDBClusterIdentifier"] ?? '').toString());
    if ("ApplyImmediately" in params) body.append(prefix+"ApplyImmediately", (params["ApplyImmediately"] ?? '').toString());
    if ("BackupRetentionPeriod" in params) body.append(prefix+"BackupRetentionPeriod", (params["BackupRetentionPeriod"] ?? '').toString());
    if ("DBClusterParameterGroupName" in params) body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if (params["VpcSecurityGroupIds"]) prt.appendList(body, prefix+"VpcSecurityGroupIds", params["VpcSecurityGroupIds"], {"entryPrefix":".VpcSecurityGroupId."})
    if ("Port" in params) body.append(prefix+"Port", (params["Port"] ?? '').toString());
    if ("MasterUserPassword" in params) body.append(prefix+"MasterUserPassword", (params["MasterUserPassword"] ?? '').toString());
    if ("OptionGroupName" in params) body.append(prefix+"OptionGroupName", (params["OptionGroupName"] ?? '').toString());
    if ("PreferredBackupWindow" in params) body.append(prefix+"PreferredBackupWindow", (params["PreferredBackupWindow"] ?? '').toString());
    if ("PreferredMaintenanceWindow" in params) body.append(prefix+"PreferredMaintenanceWindow", (params["PreferredMaintenanceWindow"] ?? '').toString());
    if ("EnableIAMDatabaseAuthentication" in params) body.append(prefix+"EnableIAMDatabaseAuthentication", (params["EnableIAMDatabaseAuthentication"] ?? '').toString());
    if (params["CloudwatchLogsExportConfiguration"] != null) CloudwatchLogsExportConfiguration_Serialize(body, prefix+"CloudwatchLogsExportConfiguration", params["CloudwatchLogsExportConfiguration"]);
    if ("EngineVersion" in params) body.append(prefix+"EngineVersion", (params["EngineVersion"] ?? '').toString());
    if ("DeletionProtection" in params) body.append(prefix+"DeletionProtection", (params["DeletionProtection"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyDBCluster",
    });
    const xml = readXmlResult(await resp.text(), "ModifyDBClusterResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async modifyDBClusterParameterGroup(
    {abortSignal, ...params}: RequestConfig & ModifyDBClusterParameterGroupMessage,
  ): Promise<DBClusterParameterGroupNameMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if (params["Parameters"]) prt.appendList(body, prefix+"Parameters", params["Parameters"], {"appender":Parameter_Serialize,"entryPrefix":".Parameter."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyDBClusterParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "ModifyDBClusterParameterGroupResult");
    return xml.strings({
      optional: {"DBClusterParameterGroupName":true},
    });
  }

  async modifyDBClusterSnapshotAttribute(
    {abortSignal, ...params}: RequestConfig & ModifyDBClusterSnapshotAttributeMessage,
  ): Promise<ModifyDBClusterSnapshotAttributeResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterSnapshotIdentifier", (params["DBClusterSnapshotIdentifier"] ?? '').toString());
    body.append(prefix+"AttributeName", (params["AttributeName"] ?? '').toString());
    if (params["ValuesToAdd"]) prt.appendList(body, prefix+"ValuesToAdd", params["ValuesToAdd"], {"entryPrefix":".AttributeValue."})
    if (params["ValuesToRemove"]) prt.appendList(body, prefix+"ValuesToRemove", params["ValuesToRemove"], {"entryPrefix":".AttributeValue."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyDBClusterSnapshotAttribute",
    });
    const xml = readXmlResult(await resp.text(), "ModifyDBClusterSnapshotAttributeResult");
    return {
      DBClusterSnapshotAttributesResult: xml.first("DBClusterSnapshotAttributesResult", false, DBClusterSnapshotAttributesResult_Parse),
    };
  }

  async modifyDBInstance(
    {abortSignal, ...params}: RequestConfig & ModifyDBInstanceMessage,
  ): Promise<ModifyDBInstanceResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBInstanceIdentifier", (params["DBInstanceIdentifier"] ?? '').toString());
    if ("AllocatedStorage" in params) body.append(prefix+"AllocatedStorage", (params["AllocatedStorage"] ?? '').toString());
    if ("DBInstanceClass" in params) body.append(prefix+"DBInstanceClass", (params["DBInstanceClass"] ?? '').toString());
    if ("DBSubnetGroupName" in params) body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    if (params["DBSecurityGroups"]) prt.appendList(body, prefix+"DBSecurityGroups", params["DBSecurityGroups"], {"entryPrefix":".DBSecurityGroupName."})
    if (params["VpcSecurityGroupIds"]) prt.appendList(body, prefix+"VpcSecurityGroupIds", params["VpcSecurityGroupIds"], {"entryPrefix":".VpcSecurityGroupId."})
    if ("ApplyImmediately" in params) body.append(prefix+"ApplyImmediately", (params["ApplyImmediately"] ?? '').toString());
    if ("MasterUserPassword" in params) body.append(prefix+"MasterUserPassword", (params["MasterUserPassword"] ?? '').toString());
    if ("DBParameterGroupName" in params) body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    if ("BackupRetentionPeriod" in params) body.append(prefix+"BackupRetentionPeriod", (params["BackupRetentionPeriod"] ?? '').toString());
    if ("PreferredBackupWindow" in params) body.append(prefix+"PreferredBackupWindow", (params["PreferredBackupWindow"] ?? '').toString());
    if ("PreferredMaintenanceWindow" in params) body.append(prefix+"PreferredMaintenanceWindow", (params["PreferredMaintenanceWindow"] ?? '').toString());
    if ("MultiAZ" in params) body.append(prefix+"MultiAZ", (params["MultiAZ"] ?? '').toString());
    if ("EngineVersion" in params) body.append(prefix+"EngineVersion", (params["EngineVersion"] ?? '').toString());
    if ("AllowMajorVersionUpgrade" in params) body.append(prefix+"AllowMajorVersionUpgrade", (params["AllowMajorVersionUpgrade"] ?? '').toString());
    if ("AutoMinorVersionUpgrade" in params) body.append(prefix+"AutoMinorVersionUpgrade", (params["AutoMinorVersionUpgrade"] ?? '').toString());
    if ("LicenseModel" in params) body.append(prefix+"LicenseModel", (params["LicenseModel"] ?? '').toString());
    if ("Iops" in params) body.append(prefix+"Iops", (params["Iops"] ?? '').toString());
    if ("OptionGroupName" in params) body.append(prefix+"OptionGroupName", (params["OptionGroupName"] ?? '').toString());
    if ("NewDBInstanceIdentifier" in params) body.append(prefix+"NewDBInstanceIdentifier", (params["NewDBInstanceIdentifier"] ?? '').toString());
    if ("StorageType" in params) body.append(prefix+"StorageType", (params["StorageType"] ?? '').toString());
    if ("TdeCredentialArn" in params) body.append(prefix+"TdeCredentialArn", (params["TdeCredentialArn"] ?? '').toString());
    if ("TdeCredentialPassword" in params) body.append(prefix+"TdeCredentialPassword", (params["TdeCredentialPassword"] ?? '').toString());
    if ("CACertificateIdentifier" in params) body.append(prefix+"CACertificateIdentifier", (params["CACertificateIdentifier"] ?? '').toString());
    if ("Domain" in params) body.append(prefix+"Domain", (params["Domain"] ?? '').toString());
    if ("CopyTagsToSnapshot" in params) body.append(prefix+"CopyTagsToSnapshot", (params["CopyTagsToSnapshot"] ?? '').toString());
    if ("MonitoringInterval" in params) body.append(prefix+"MonitoringInterval", (params["MonitoringInterval"] ?? '').toString());
    if ("DBPortNumber" in params) body.append(prefix+"DBPortNumber", (params["DBPortNumber"] ?? '').toString());
    if ("PubliclyAccessible" in params) body.append(prefix+"PubliclyAccessible", (params["PubliclyAccessible"] ?? '').toString());
    if ("MonitoringRoleArn" in params) body.append(prefix+"MonitoringRoleArn", (params["MonitoringRoleArn"] ?? '').toString());
    if ("DomainIAMRoleName" in params) body.append(prefix+"DomainIAMRoleName", (params["DomainIAMRoleName"] ?? '').toString());
    if ("PromotionTier" in params) body.append(prefix+"PromotionTier", (params["PromotionTier"] ?? '').toString());
    if ("EnableIAMDatabaseAuthentication" in params) body.append(prefix+"EnableIAMDatabaseAuthentication", (params["EnableIAMDatabaseAuthentication"] ?? '').toString());
    if ("EnablePerformanceInsights" in params) body.append(prefix+"EnablePerformanceInsights", (params["EnablePerformanceInsights"] ?? '').toString());
    if ("PerformanceInsightsKMSKeyId" in params) body.append(prefix+"PerformanceInsightsKMSKeyId", (params["PerformanceInsightsKMSKeyId"] ?? '').toString());
    if (params["CloudwatchLogsExportConfiguration"] != null) CloudwatchLogsExportConfiguration_Serialize(body, prefix+"CloudwatchLogsExportConfiguration", params["CloudwatchLogsExportConfiguration"]);
    if ("DeletionProtection" in params) body.append(prefix+"DeletionProtection", (params["DeletionProtection"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyDBInstance",
    });
    const xml = readXmlResult(await resp.text(), "ModifyDBInstanceResult");
    return {
      DBInstance: xml.first("DBInstance", false, DBInstance_Parse),
    };
  }

  async modifyDBParameterGroup(
    {abortSignal, ...params}: RequestConfig & ModifyDBParameterGroupMessage,
  ): Promise<DBParameterGroupNameMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    if (params["Parameters"]) prt.appendList(body, prefix+"Parameters", params["Parameters"], {"appender":Parameter_Serialize,"entryPrefix":".Parameter."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyDBParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "ModifyDBParameterGroupResult");
    return xml.strings({
      optional: {"DBParameterGroupName":true},
    });
  }

  async modifyDBSubnetGroup(
    {abortSignal, ...params}: RequestConfig & ModifyDBSubnetGroupMessage,
  ): Promise<ModifyDBSubnetGroupResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    if ("DBSubnetGroupDescription" in params) body.append(prefix+"DBSubnetGroupDescription", (params["DBSubnetGroupDescription"] ?? '').toString());
    if (params["SubnetIds"]) prt.appendList(body, prefix+"SubnetIds", params["SubnetIds"], {"entryPrefix":".SubnetIdentifier."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyDBSubnetGroup",
    });
    const xml = readXmlResult(await resp.text(), "ModifyDBSubnetGroupResult");
    return {
      DBSubnetGroup: xml.first("DBSubnetGroup", false, DBSubnetGroup_Parse),
    };
  }

  async modifyEventSubscription(
    {abortSignal, ...params}: RequestConfig & ModifyEventSubscriptionMessage,
  ): Promise<ModifyEventSubscriptionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionName", (params["SubscriptionName"] ?? '').toString());
    if ("SnsTopicArn" in params) body.append(prefix+"SnsTopicArn", (params["SnsTopicArn"] ?? '').toString());
    if ("SourceType" in params) body.append(prefix+"SourceType", (params["SourceType"] ?? '').toString());
    if (params["EventCategories"]) prt.appendList(body, prefix+"EventCategories", params["EventCategories"], {"entryPrefix":".EventCategory."})
    if ("Enabled" in params) body.append(prefix+"Enabled", (params["Enabled"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyEventSubscription",
    });
    const xml = readXmlResult(await resp.text(), "ModifyEventSubscriptionResult");
    return {
      EventSubscription: xml.first("EventSubscription", false, EventSubscription_Parse),
    };
  }

  async promoteReadReplicaDBCluster(
    {abortSignal, ...params}: RequestConfig & PromoteReadReplicaDBClusterMessage,
  ): Promise<PromoteReadReplicaDBClusterResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PromoteReadReplicaDBCluster",
    });
    const xml = readXmlResult(await resp.text(), "PromoteReadReplicaDBClusterResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async rebootDBInstance(
    {abortSignal, ...params}: RequestConfig & RebootDBInstanceMessage,
  ): Promise<RebootDBInstanceResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBInstanceIdentifier", (params["DBInstanceIdentifier"] ?? '').toString());
    if ("ForceFailover" in params) body.append(prefix+"ForceFailover", (params["ForceFailover"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RebootDBInstance",
    });
    const xml = readXmlResult(await resp.text(), "RebootDBInstanceResult");
    return {
      DBInstance: xml.first("DBInstance", false, DBInstance_Parse),
    };
  }

  async removeRoleFromDBCluster(
    {abortSignal, ...params}: RequestConfig & RemoveRoleFromDBClusterMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    body.append(prefix+"RoleArn", (params["RoleArn"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveRoleFromDBCluster",
    });
  }

  async removeSourceIdentifierFromSubscription(
    {abortSignal, ...params}: RequestConfig & RemoveSourceIdentifierFromSubscriptionMessage,
  ): Promise<RemoveSourceIdentifierFromSubscriptionResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"SubscriptionName", (params["SubscriptionName"] ?? '').toString());
    body.append(prefix+"SourceIdentifier", (params["SourceIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveSourceIdentifierFromSubscription",
    });
    const xml = readXmlResult(await resp.text(), "RemoveSourceIdentifierFromSubscriptionResult");
    return {
      EventSubscription: xml.first("EventSubscription", false, EventSubscription_Parse),
    };
  }

  async removeTagsFromResource(
    {abortSignal, ...params}: RequestConfig & RemoveTagsFromResourceMessage,
  ): Promise<void> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"ResourceName", (params["ResourceName"] ?? '').toString());
    if (params["TagKeys"]) prt.appendList(body, prefix+"TagKeys", params["TagKeys"], {"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTagsFromResource",
    });
  }

  async resetDBClusterParameterGroup(
    {abortSignal, ...params}: RequestConfig & ResetDBClusterParameterGroupMessage,
  ): Promise<DBClusterParameterGroupNameMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if ("ResetAllParameters" in params) body.append(prefix+"ResetAllParameters", (params["ResetAllParameters"] ?? '').toString());
    if (params["Parameters"]) prt.appendList(body, prefix+"Parameters", params["Parameters"], {"appender":Parameter_Serialize,"entryPrefix":".Parameter."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetDBClusterParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "ResetDBClusterParameterGroupResult");
    return xml.strings({
      optional: {"DBClusterParameterGroupName":true},
    });
  }

  async resetDBParameterGroup(
    {abortSignal, ...params}: RequestConfig & ResetDBParameterGroupMessage,
  ): Promise<DBParameterGroupNameMessage> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBParameterGroupName", (params["DBParameterGroupName"] ?? '').toString());
    if ("ResetAllParameters" in params) body.append(prefix+"ResetAllParameters", (params["ResetAllParameters"] ?? '').toString());
    if (params["Parameters"]) prt.appendList(body, prefix+"Parameters", params["Parameters"], {"appender":Parameter_Serialize,"entryPrefix":".Parameter."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetDBParameterGroup",
    });
    const xml = readXmlResult(await resp.text(), "ResetDBParameterGroupResult");
    return xml.strings({
      optional: {"DBParameterGroupName":true},
    });
  }

  async restoreDBClusterFromSnapshot(
    {abortSignal, ...params}: RequestConfig & RestoreDBClusterFromSnapshotMessage,
  ): Promise<RestoreDBClusterFromSnapshotResult> {
    const body = new URLSearchParams;
    const prefix = '';
    if (params["AvailabilityZones"]) prt.appendList(body, prefix+"AvailabilityZones", params["AvailabilityZones"], {"entryPrefix":".AvailabilityZone."})
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    body.append(prefix+"SnapshotIdentifier", (params["SnapshotIdentifier"] ?? '').toString());
    body.append(prefix+"Engine", (params["Engine"] ?? '').toString());
    if ("EngineVersion" in params) body.append(prefix+"EngineVersion", (params["EngineVersion"] ?? '').toString());
    if ("Port" in params) body.append(prefix+"Port", (params["Port"] ?? '').toString());
    if ("DBSubnetGroupName" in params) body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    if ("DatabaseName" in params) body.append(prefix+"DatabaseName", (params["DatabaseName"] ?? '').toString());
    if ("OptionGroupName" in params) body.append(prefix+"OptionGroupName", (params["OptionGroupName"] ?? '').toString());
    if (params["VpcSecurityGroupIds"]) prt.appendList(body, prefix+"VpcSecurityGroupIds", params["VpcSecurityGroupIds"], {"entryPrefix":".VpcSecurityGroupId."})
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    if ("KmsKeyId" in params) body.append(prefix+"KmsKeyId", (params["KmsKeyId"] ?? '').toString());
    if ("EnableIAMDatabaseAuthentication" in params) body.append(prefix+"EnableIAMDatabaseAuthentication", (params["EnableIAMDatabaseAuthentication"] ?? '').toString());
    if (params["EnableCloudwatchLogsExports"]) prt.appendList(body, prefix+"EnableCloudwatchLogsExports", params["EnableCloudwatchLogsExports"], {"entryPrefix":".member."})
    if ("DBClusterParameterGroupName" in params) body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if ("DeletionProtection" in params) body.append(prefix+"DeletionProtection", (params["DeletionProtection"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreDBClusterFromSnapshot",
    });
    const xml = readXmlResult(await resp.text(), "RestoreDBClusterFromSnapshotResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async restoreDBClusterToPointInTime(
    {abortSignal, ...params}: RequestConfig & RestoreDBClusterToPointInTimeMessage,
  ): Promise<RestoreDBClusterToPointInTimeResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    if ("RestoreType" in params) body.append(prefix+"RestoreType", (params["RestoreType"] ?? '').toString());
    body.append(prefix+"SourceDBClusterIdentifier", (params["SourceDBClusterIdentifier"] ?? '').toString());
    if ("RestoreToTime" in params) body.append(prefix+"RestoreToTime", prt.encodeDate_iso8601(params["RestoreToTime"]));
    if ("UseLatestRestorableTime" in params) body.append(prefix+"UseLatestRestorableTime", (params["UseLatestRestorableTime"] ?? '').toString());
    if ("Port" in params) body.append(prefix+"Port", (params["Port"] ?? '').toString());
    if ("DBSubnetGroupName" in params) body.append(prefix+"DBSubnetGroupName", (params["DBSubnetGroupName"] ?? '').toString());
    if ("OptionGroupName" in params) body.append(prefix+"OptionGroupName", (params["OptionGroupName"] ?? '').toString());
    if (params["VpcSecurityGroupIds"]) prt.appendList(body, prefix+"VpcSecurityGroupIds", params["VpcSecurityGroupIds"], {"entryPrefix":".VpcSecurityGroupId."})
    if (params["Tags"]) prt.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".Tag."})
    if ("KmsKeyId" in params) body.append(prefix+"KmsKeyId", (params["KmsKeyId"] ?? '').toString());
    if ("EnableIAMDatabaseAuthentication" in params) body.append(prefix+"EnableIAMDatabaseAuthentication", (params["EnableIAMDatabaseAuthentication"] ?? '').toString());
    if (params["EnableCloudwatchLogsExports"]) prt.appendList(body, prefix+"EnableCloudwatchLogsExports", params["EnableCloudwatchLogsExports"], {"entryPrefix":".member."})
    if ("DBClusterParameterGroupName" in params) body.append(prefix+"DBClusterParameterGroupName", (params["DBClusterParameterGroupName"] ?? '').toString());
    if ("DeletionProtection" in params) body.append(prefix+"DeletionProtection", (params["DeletionProtection"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreDBClusterToPointInTime",
    });
    const xml = readXmlResult(await resp.text(), "RestoreDBClusterToPointInTimeResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async startDBCluster(
    {abortSignal, ...params}: RequestConfig & StartDBClusterMessage,
  ): Promise<StartDBClusterResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDBCluster",
    });
    const xml = readXmlResult(await resp.text(), "StartDBClusterResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  async stopDBCluster(
    {abortSignal, ...params}: RequestConfig & StopDBClusterMessage,
  ): Promise<StopDBClusterResult> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"DBClusterIdentifier", (params["DBClusterIdentifier"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopDBCluster",
    });
    const xml = readXmlResult(await resp.text(), "StopDBClusterResult");
    return {
      DBCluster: xml.first("DBCluster", false, DBCluster_Parse),
    };
  }

  // Resource State Waiters

  /** Checks state up to 60 times, 30 seconds apart (about 30 minutes max wait time). */
  async waitForDBInstanceAvailable(
    params: RequestConfig & DescribeDBInstancesMessage,
  ): Promise<DBInstanceMessage> {
    const errMessage = 'ResourceNotReady: Resource is not in the state DBInstanceAvailable';
    for (let i = 0; i < 60; i++) {
      const resp = await this.describeDBInstances(params);
      const field = resp["DBInstances"].flatMap(x => x["DBInstanceStatus"]);
      if (field.every(x => x === "available")) return resp;
      if (field.some(x => x === "deleted")) throw new Error(errMessage);
      if (field.some(x => x === "deleting")) throw new Error(errMessage);
      if (field.some(x => x === "failed")) throw new Error(errMessage);
      if (field.some(x => x === "incompatible-restore")) throw new Error(errMessage);
      if (field.some(x => x === "incompatible-parameters")) throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 30000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 60 times, 30 seconds apart (about 30 minutes max wait time). */
  async waitForDBInstanceDeleted(
    params: RequestConfig & DescribeDBInstancesMessage,
  ): Promise<Error | DBInstanceMessage> {
    const errMessage = 'ResourceNotReady: Resource is not in the state DBInstanceDeleted';
    for (let i = 0; i < 60; i++) {
      try {
        const resp = await this.describeDBInstances(params);
        const field = resp["DBInstances"].flatMap(x => x["DBInstanceStatus"]);
        if (field.every(x => x === "deleted")) return resp;
        if (field.some(x => x === "creating")) throw new Error(errMessage);
        if (field.some(x => x === "modifying")) throw new Error(errMessage);
        if (field.some(x => x === "rebooting")) throw new Error(errMessage);
        if (field.some(x => x === "resetting-master-credentials")) throw new Error(errMessage);
      } catch (err) {
        if (["DBInstanceNotFound"].includes(err.code)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 30000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface AddRoleToDBClusterMessage {
  DBClusterIdentifier: string;
  RoleArn: string;
}

// refs: 1 - tags: named, input
export interface AddSourceIdentifierToSubscriptionMessage {
  SubscriptionName: string;
  SourceIdentifier: string;
}

// refs: 1 - tags: named, input
export interface AddTagsToResourceMessage {
  ResourceName: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface ApplyPendingMaintenanceActionMessage {
  ResourceIdentifier: string;
  ApplyAction: string;
  OptInType: string;
}

// refs: 1 - tags: named, input
export interface CopyDBClusterParameterGroupMessage {
  SourceDBClusterParameterGroupIdentifier: string;
  TargetDBClusterParameterGroupIdentifier: string;
  TargetDBClusterParameterGroupDescription: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CopyDBClusterSnapshotMessage {
  SourceDBClusterSnapshotIdentifier: string;
  TargetDBClusterSnapshotIdentifier: string;
  KmsKeyId?: string | null;
  PreSignedUrl?: string | null;
  CopyTags?: boolean | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CopyDBParameterGroupMessage {
  SourceDBParameterGroupIdentifier: string;
  TargetDBParameterGroupIdentifier: string;
  TargetDBParameterGroupDescription: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDBClusterMessage {
  AvailabilityZones?: string[] | null;
  BackupRetentionPeriod?: number | null;
  CharacterSetName?: string | null;
  DatabaseName?: string | null;
  DBClusterIdentifier: string;
  DBClusterParameterGroupName?: string | null;
  VpcSecurityGroupIds?: string[] | null;
  DBSubnetGroupName?: string | null;
  Engine: string;
  EngineVersion?: string | null;
  Port?: number | null;
  MasterUsername?: string | null;
  MasterUserPassword?: string | null;
  OptionGroupName?: string | null;
  PreferredBackupWindow?: string | null;
  PreferredMaintenanceWindow?: string | null;
  ReplicationSourceIdentifier?: string | null;
  Tags?: Tag[] | null;
  StorageEncrypted?: boolean | null;
  KmsKeyId?: string | null;
  PreSignedUrl?: string | null;
  EnableIAMDatabaseAuthentication?: boolean | null;
  EnableCloudwatchLogsExports?: string[] | null;
  DeletionProtection?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string;
  DBParameterGroupFamily: string;
  Description: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDBClusterSnapshotMessage {
  DBClusterSnapshotIdentifier: string;
  DBClusterIdentifier: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDBInstanceMessage {
  DBName?: string | null;
  DBInstanceIdentifier: string;
  AllocatedStorage?: number | null;
  DBInstanceClass: string;
  Engine: string;
  MasterUsername?: string | null;
  MasterUserPassword?: string | null;
  DBSecurityGroups?: string[] | null;
  VpcSecurityGroupIds?: string[] | null;
  AvailabilityZone?: string | null;
  DBSubnetGroupName?: string | null;
  PreferredMaintenanceWindow?: string | null;
  DBParameterGroupName?: string | null;
  BackupRetentionPeriod?: number | null;
  PreferredBackupWindow?: string | null;
  Port?: number | null;
  MultiAZ?: boolean | null;
  EngineVersion?: string | null;
  AutoMinorVersionUpgrade?: boolean | null;
  LicenseModel?: string | null;
  Iops?: number | null;
  OptionGroupName?: string | null;
  CharacterSetName?: string | null;
  PubliclyAccessible?: boolean | null;
  Tags?: Tag[] | null;
  DBClusterIdentifier?: string | null;
  StorageType?: string | null;
  TdeCredentialArn?: string | null;
  TdeCredentialPassword?: string | null;
  StorageEncrypted?: boolean | null;
  KmsKeyId?: string | null;
  Domain?: string | null;
  CopyTagsToSnapshot?: boolean | null;
  MonitoringInterval?: number | null;
  MonitoringRoleArn?: string | null;
  DomainIAMRoleName?: string | null;
  PromotionTier?: number | null;
  Timezone?: string | null;
  EnableIAMDatabaseAuthentication?: boolean | null;
  EnablePerformanceInsights?: boolean | null;
  PerformanceInsightsKMSKeyId?: string | null;
  EnableCloudwatchLogsExports?: string[] | null;
  DeletionProtection?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateDBParameterGroupMessage {
  DBParameterGroupName: string;
  DBParameterGroupFamily: string;
  Description: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDBSubnetGroupMessage {
  DBSubnetGroupName: string;
  DBSubnetGroupDescription: string;
  SubnetIds: string[];
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateEventSubscriptionMessage {
  SubscriptionName: string;
  SnsTopicArn: string;
  SourceType?: string | null;
  EventCategories?: string[] | null;
  SourceIds?: string[] | null;
  Enabled?: boolean | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteDBClusterMessage {
  DBClusterIdentifier: string;
  SkipFinalSnapshot?: boolean | null;
  FinalDBSnapshotIdentifier?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDBClusterSnapshotMessage {
  DBClusterSnapshotIdentifier: string;
}

// refs: 1 - tags: named, input
export interface DeleteDBInstanceMessage {
  DBInstanceIdentifier: string;
  SkipFinalSnapshot?: boolean | null;
  FinalDBSnapshotIdentifier?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDBParameterGroupMessage {
  DBParameterGroupName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDBSubnetGroupMessage {
  DBSubnetGroupName: string;
}

// refs: 1 - tags: named, input
export interface DeleteEventSubscriptionMessage {
  SubscriptionName: string;
}

// refs: 1 - tags: named, input
export interface DescribeDBClusterParameterGroupsMessage {
  DBClusterParameterGroupName?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBClusterParametersMessage {
  DBClusterParameterGroupName: string;
  Source?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBClusterSnapshotAttributesMessage {
  DBClusterSnapshotIdentifier: string;
}

// refs: 1 - tags: named, input
export interface DescribeDBClusterSnapshotsMessage {
  DBClusterIdentifier?: string | null;
  DBClusterSnapshotIdentifier?: string | null;
  SnapshotType?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
  IncludeShared?: boolean | null;
  IncludePublic?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBClustersMessage {
  DBClusterIdentifier?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBEngineVersionsMessage {
  Engine?: string | null;
  EngineVersion?: string | null;
  DBParameterGroupFamily?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
  DefaultOnly?: boolean | null;
  ListSupportedCharacterSets?: boolean | null;
  ListSupportedTimezones?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBInstancesMessage {
  DBInstanceIdentifier?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBParameterGroupsMessage {
  DBParameterGroupName?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBParametersMessage {
  DBParameterGroupName: string;
  Source?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDBSubnetGroupsMessage {
  DBSubnetGroupName?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEngineDefaultClusterParametersMessage {
  DBParameterGroupFamily: string;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEngineDefaultParametersMessage {
  DBParameterGroupFamily: string;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventCategoriesMessage {
  SourceType?: string | null;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventSubscriptionsMessage {
  SubscriptionName?: string | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventsMessage {
  SourceIdentifier?: string | null;
  SourceType?: SourceType | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  Duration?: number | null;
  EventCategories?: string[] | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeOrderableDBInstanceOptionsMessage {
  Engine: string;
  EngineVersion?: string | null;
  DBInstanceClass?: string | null;
  LicenseModel?: string | null;
  Vpc?: boolean | null;
  Filters?: Filter[] | null;
  MaxRecords?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePendingMaintenanceActionsMessage {
  ResourceIdentifier?: string | null;
  Filters?: Filter[] | null;
  Marker?: string | null;
  MaxRecords?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeValidDBInstanceModificationsMessage {
  DBInstanceIdentifier: string;
}

// refs: 1 - tags: named, input
export interface FailoverDBClusterMessage {
  DBClusterIdentifier?: string | null;
  TargetDBInstanceIdentifier?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceMessage {
  ResourceName: string;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ModifyDBClusterMessage {
  DBClusterIdentifier: string;
  NewDBClusterIdentifier?: string | null;
  ApplyImmediately?: boolean | null;
  BackupRetentionPeriod?: number | null;
  DBClusterParameterGroupName?: string | null;
  VpcSecurityGroupIds?: string[] | null;
  Port?: number | null;
  MasterUserPassword?: string | null;
  OptionGroupName?: string | null;
  PreferredBackupWindow?: string | null;
  PreferredMaintenanceWindow?: string | null;
  EnableIAMDatabaseAuthentication?: boolean | null;
  CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration | null;
  EngineVersion?: string | null;
  DeletionProtection?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ModifyDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string;
  Parameters: Parameter[];
}

// refs: 1 - tags: named, input
export interface ModifyDBClusterSnapshotAttributeMessage {
  DBClusterSnapshotIdentifier: string;
  AttributeName: string;
  ValuesToAdd?: string[] | null;
  ValuesToRemove?: string[] | null;
}

// refs: 1 - tags: named, input
export interface ModifyDBInstanceMessage {
  DBInstanceIdentifier: string;
  AllocatedStorage?: number | null;
  DBInstanceClass?: string | null;
  DBSubnetGroupName?: string | null;
  DBSecurityGroups?: string[] | null;
  VpcSecurityGroupIds?: string[] | null;
  ApplyImmediately?: boolean | null;
  MasterUserPassword?: string | null;
  DBParameterGroupName?: string | null;
  BackupRetentionPeriod?: number | null;
  PreferredBackupWindow?: string | null;
  PreferredMaintenanceWindow?: string | null;
  MultiAZ?: boolean | null;
  EngineVersion?: string | null;
  AllowMajorVersionUpgrade?: boolean | null;
  AutoMinorVersionUpgrade?: boolean | null;
  LicenseModel?: string | null;
  Iops?: number | null;
  OptionGroupName?: string | null;
  NewDBInstanceIdentifier?: string | null;
  StorageType?: string | null;
  TdeCredentialArn?: string | null;
  TdeCredentialPassword?: string | null;
  CACertificateIdentifier?: string | null;
  Domain?: string | null;
  CopyTagsToSnapshot?: boolean | null;
  MonitoringInterval?: number | null;
  DBPortNumber?: number | null;
  PubliclyAccessible?: boolean | null;
  MonitoringRoleArn?: string | null;
  DomainIAMRoleName?: string | null;
  PromotionTier?: number | null;
  EnableIAMDatabaseAuthentication?: boolean | null;
  EnablePerformanceInsights?: boolean | null;
  PerformanceInsightsKMSKeyId?: string | null;
  CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration | null;
  DeletionProtection?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ModifyDBParameterGroupMessage {
  DBParameterGroupName: string;
  Parameters: Parameter[];
}

// refs: 1 - tags: named, input
export interface ModifyDBSubnetGroupMessage {
  DBSubnetGroupName: string;
  DBSubnetGroupDescription?: string | null;
  SubnetIds: string[];
}

// refs: 1 - tags: named, input
export interface ModifyEventSubscriptionMessage {
  SubscriptionName: string;
  SnsTopicArn?: string | null;
  SourceType?: string | null;
  EventCategories?: string[] | null;
  Enabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PromoteReadReplicaDBClusterMessage {
  DBClusterIdentifier: string;
}

// refs: 1 - tags: named, input
export interface RebootDBInstanceMessage {
  DBInstanceIdentifier: string;
  ForceFailover?: boolean | null;
}

// refs: 1 - tags: named, input
export interface RemoveRoleFromDBClusterMessage {
  DBClusterIdentifier: string;
  RoleArn: string;
}

// refs: 1 - tags: named, input
export interface RemoveSourceIdentifierFromSubscriptionMessage {
  SubscriptionName: string;
  SourceIdentifier: string;
}

// refs: 1 - tags: named, input
export interface RemoveTagsFromResourceMessage {
  ResourceName: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface ResetDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string;
  ResetAllParameters?: boolean | null;
  Parameters?: Parameter[] | null;
}

// refs: 1 - tags: named, input
export interface ResetDBParameterGroupMessage {
  DBParameterGroupName: string;
  ResetAllParameters?: boolean | null;
  Parameters?: Parameter[] | null;
}

// refs: 1 - tags: named, input
export interface RestoreDBClusterFromSnapshotMessage {
  AvailabilityZones?: string[] | null;
  DBClusterIdentifier: string;
  SnapshotIdentifier: string;
  Engine: string;
  EngineVersion?: string | null;
  Port?: number | null;
  DBSubnetGroupName?: string | null;
  DatabaseName?: string | null;
  OptionGroupName?: string | null;
  VpcSecurityGroupIds?: string[] | null;
  Tags?: Tag[] | null;
  KmsKeyId?: string | null;
  EnableIAMDatabaseAuthentication?: boolean | null;
  EnableCloudwatchLogsExports?: string[] | null;
  DBClusterParameterGroupName?: string | null;
  DeletionProtection?: boolean | null;
}

// refs: 1 - tags: named, input
export interface RestoreDBClusterToPointInTimeMessage {
  DBClusterIdentifier: string;
  RestoreType?: string | null;
  SourceDBClusterIdentifier: string;
  RestoreToTime?: Date | number | null;
  UseLatestRestorableTime?: boolean | null;
  Port?: number | null;
  DBSubnetGroupName?: string | null;
  OptionGroupName?: string | null;
  VpcSecurityGroupIds?: string[] | null;
  Tags?: Tag[] | null;
  KmsKeyId?: string | null;
  EnableIAMDatabaseAuthentication?: boolean | null;
  EnableCloudwatchLogsExports?: string[] | null;
  DBClusterParameterGroupName?: string | null;
  DeletionProtection?: boolean | null;
}

// refs: 1 - tags: named, input
export interface StartDBClusterMessage {
  DBClusterIdentifier: string;
}

// refs: 1 - tags: named, input
export interface StopDBClusterMessage {
  DBClusterIdentifier: string;
}

// refs: 1 - tags: named, output
export interface AddSourceIdentifierToSubscriptionResult {
  EventSubscription?: EventSubscription | null;
}

// refs: 1 - tags: named, output
export interface ApplyPendingMaintenanceActionResult {
  ResourcePendingMaintenanceActions?: ResourcePendingMaintenanceActions | null;
}

// refs: 1 - tags: named, output
export interface CopyDBClusterParameterGroupResult {
  DBClusterParameterGroup?: DBClusterParameterGroup | null;
}

// refs: 1 - tags: named, output
export interface CopyDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot | null;
}

// refs: 1 - tags: named, output
export interface CopyDBParameterGroupResult {
  DBParameterGroup?: DBParameterGroup | null;
}

// refs: 1 - tags: named, output
export interface CreateDBClusterResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface CreateDBClusterParameterGroupResult {
  DBClusterParameterGroup?: DBClusterParameterGroup | null;
}

// refs: 1 - tags: named, output
export interface CreateDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot | null;
}

// refs: 1 - tags: named, output
export interface CreateDBInstanceResult {
  DBInstance?: DBInstance | null;
}

// refs: 1 - tags: named, output
export interface CreateDBParameterGroupResult {
  DBParameterGroup?: DBParameterGroup | null;
}

// refs: 1 - tags: named, output
export interface CreateDBSubnetGroupResult {
  DBSubnetGroup?: DBSubnetGroup | null;
}

// refs: 1 - tags: named, output
export interface CreateEventSubscriptionResult {
  EventSubscription?: EventSubscription | null;
}

// refs: 1 - tags: named, output
export interface DeleteDBClusterResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface DeleteDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot | null;
}

// refs: 1 - tags: named, output
export interface DeleteDBInstanceResult {
  DBInstance?: DBInstance | null;
}

// refs: 1 - tags: named, output
export interface DeleteEventSubscriptionResult {
  EventSubscription?: EventSubscription | null;
}

// refs: 1 - tags: named, output
export interface DBClusterParameterGroupsMessage {
  Marker?: string | null;
  DBClusterParameterGroups: DBClusterParameterGroup[];
}

// refs: 1 - tags: named, output
export interface DBClusterParameterGroupDetails {
  Parameters: Parameter[];
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDBClusterSnapshotAttributesResult {
  DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult | null;
}

// refs: 1 - tags: named, output
export interface DBClusterSnapshotMessage {
  Marker?: string | null;
  DBClusterSnapshots: DBClusterSnapshot[];
}

// refs: 1 - tags: named, output
export interface DBClusterMessage {
  Marker?: string | null;
  DBClusters: DBCluster[];
}

// refs: 1 - tags: named, output
export interface DBEngineVersionMessage {
  Marker?: string | null;
  DBEngineVersions: DBEngineVersion[];
}

// refs: 1 - tags: named, output
export interface DBInstanceMessage {
  Marker?: string | null;
  DBInstances: DBInstance[];
}

// refs: 1 - tags: named, output
export interface DBParameterGroupsMessage {
  Marker?: string | null;
  DBParameterGroups: DBParameterGroup[];
}

// refs: 1 - tags: named, output
export interface DBParameterGroupDetails {
  Parameters: Parameter[];
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DBSubnetGroupMessage {
  Marker?: string | null;
  DBSubnetGroups: DBSubnetGroup[];
}

// refs: 1 - tags: named, output
export interface DescribeEngineDefaultClusterParametersResult {
  EngineDefaults?: EngineDefaults | null;
}

// refs: 1 - tags: named, output
export interface DescribeEngineDefaultParametersResult {
  EngineDefaults?: EngineDefaults | null;
}

// refs: 1 - tags: named, output
export interface EventCategoriesMessage {
  EventCategoriesMapList: EventCategoriesMap[];
}

// refs: 1 - tags: named, output
export interface EventSubscriptionsMessage {
  Marker?: string | null;
  EventSubscriptionsList: EventSubscription[];
}

// refs: 1 - tags: named, output
export interface EventsMessage {
  Marker?: string | null;
  Events: Event[];
}

// refs: 1 - tags: named, output
export interface OrderableDBInstanceOptionsMessage {
  OrderableDBInstanceOptions: OrderableDBInstanceOption[];
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface PendingMaintenanceActionsMessage {
  PendingMaintenanceActions: ResourcePendingMaintenanceActions[];
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeValidDBInstanceModificationsResult {
  ValidDBInstanceModificationsMessage?: ValidDBInstanceModificationsMessage | null;
}

// refs: 1 - tags: named, output
export interface FailoverDBClusterResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface TagListMessage {
  TagList: Tag[];
}

// refs: 1 - tags: named, output
export interface ModifyDBClusterResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface DBClusterParameterGroupNameMessage {
  DBClusterParameterGroupName?: string | null;
}

// refs: 1 - tags: named, output
export interface ModifyDBClusterSnapshotAttributeResult {
  DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult | null;
}

// refs: 1 - tags: named, output
export interface ModifyDBInstanceResult {
  DBInstance?: DBInstance | null;
}

// refs: 1 - tags: named, output
export interface DBParameterGroupNameMessage {
  DBParameterGroupName?: string | null;
}

// refs: 1 - tags: named, output
export interface ModifyDBSubnetGroupResult {
  DBSubnetGroup?: DBSubnetGroup | null;
}

// refs: 1 - tags: named, output
export interface ModifyEventSubscriptionResult {
  EventSubscription?: EventSubscription | null;
}

// refs: 1 - tags: named, output
export interface PromoteReadReplicaDBClusterResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface RebootDBInstanceResult {
  DBInstance?: DBInstance | null;
}

// refs: 1 - tags: named, output
export interface RemoveSourceIdentifierFromSubscriptionResult {
  EventSubscription?: EventSubscription | null;
}

// refs: 1 - tags: named, output
export interface RestoreDBClusterFromSnapshotResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface RestoreDBClusterToPointInTimeResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface StartDBClusterResult {
  DBCluster?: DBCluster | null;
}

// refs: 1 - tags: named, output
export interface StopDBClusterResult {
  DBCluster?: DBCluster | null;
}

// refs: 14 - tags: input, named, interface, output
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function Tag_Serialize(body: URLSearchParams, prefix: string, params: Tag) {
    if ("Key" in params) body.append(prefix+".Key", (params["Key"] ?? '').toString());
    if ("Value" in params) body.append(prefix+".Value", (params["Value"] ?? '').toString());
}
function Tag_Parse(node: XmlNode): Tag {
  return node.strings({
    optional: {"Key":true,"Value":true},
  });
}

// refs: 17 - tags: input, named, interface
export interface Filter {
  Name: string;
  Values: string[];
}
function Filter_Serialize(body: URLSearchParams, prefix: string, params: Filter) {
    body.append(prefix+".Name", (params["Name"] ?? '').toString());
    if (params["Values"]) prt.appendList(body, prefix+".Values", params["Values"], {"entryPrefix":".Value."})
}

// refs: 2 - tags: input, named, enum, output
export type SourceType =
| "db-instance"
| "db-parameter-group"
| "db-security-group"
| "db-snapshot"
| "db-cluster"
| "db-cluster-snapshot"
;



// refs: 2 - tags: input, named, interface
export interface CloudwatchLogsExportConfiguration {
  EnableLogTypes?: string[] | null;
  DisableLogTypes?: string[] | null;
}
function CloudwatchLogsExportConfiguration_Serialize(body: URLSearchParams, prefix: string, params: CloudwatchLogsExportConfiguration) {
    if (params["EnableLogTypes"]) prt.appendList(body, prefix+".EnableLogTypes", params["EnableLogTypes"], {"entryPrefix":".member."})
    if (params["DisableLogTypes"]) prt.appendList(body, prefix+".DisableLogTypes", params["DisableLogTypes"], {"entryPrefix":".member."})
}

// refs: 8 - tags: input, named, interface, output
export interface Parameter {
  ParameterName?: string | null;
  ParameterValue?: string | null;
  Description?: string | null;
  Source?: string | null;
  ApplyType?: string | null;
  DataType?: string | null;
  AllowedValues?: string | null;
  IsModifiable?: boolean | null;
  MinimumEngineVersion?: string | null;
  ApplyMethod?: ApplyMethod | null;
}
function Parameter_Serialize(body: URLSearchParams, prefix: string, params: Parameter) {
    if ("ParameterName" in params) body.append(prefix+".ParameterName", (params["ParameterName"] ?? '').toString());
    if ("ParameterValue" in params) body.append(prefix+".ParameterValue", (params["ParameterValue"] ?? '').toString());
    if ("Description" in params) body.append(prefix+".Description", (params["Description"] ?? '').toString());
    if ("Source" in params) body.append(prefix+".Source", (params["Source"] ?? '').toString());
    if ("ApplyType" in params) body.append(prefix+".ApplyType", (params["ApplyType"] ?? '').toString());
    if ("DataType" in params) body.append(prefix+".DataType", (params["DataType"] ?? '').toString());
    if ("AllowedValues" in params) body.append(prefix+".AllowedValues", (params["AllowedValues"] ?? '').toString());
    if ("IsModifiable" in params) body.append(prefix+".IsModifiable", (params["IsModifiable"] ?? '').toString());
    if ("MinimumEngineVersion" in params) body.append(prefix+".MinimumEngineVersion", (params["MinimumEngineVersion"] ?? '').toString());
    if ("ApplyMethod" in params) body.append(prefix+".ApplyMethod", (params["ApplyMethod"] ?? '').toString());
}
function Parameter_Parse(node: XmlNode): Parameter {
  return {
    ...node.strings({
      optional: {"ParameterName":true,"ParameterValue":true,"Description":true,"Source":true,"ApplyType":true,"DataType":true,"AllowedValues":true,"MinimumEngineVersion":true},
    }),
    IsModifiable: node.first("IsModifiable", false, x => x.content === 'true'),
    ApplyMethod: node.first("ApplyMethod", false, x => (x.content ?? '') as ApplyMethod),
  };
}

// refs: 8 - tags: input, named, enum, output
export type ApplyMethod =
| "immediate"
| "pending-reboot"
;



// refs: 6 - tags: output, named, interface
export interface EventSubscription {
  CustomerAwsId?: string | null;
  CustSubscriptionId?: string | null;
  SnsTopicArn?: string | null;
  Status?: string | null;
  SubscriptionCreationTime?: string | null;
  SourceType?: string | null;
  SourceIdsList: string[];
  EventCategoriesList: string[];
  Enabled?: boolean | null;
  EventSubscriptionArn?: string | null;
}
function EventSubscription_Parse(node: XmlNode): EventSubscription {
  return {
    ...node.strings({
      optional: {"CustomerAwsId":true,"CustSubscriptionId":true,"SnsTopicArn":true,"Status":true,"SubscriptionCreationTime":true,"SourceType":true,"EventSubscriptionArn":true},
    }),
    SourceIdsList: node.getList("SourceIdsList", "SourceId").map(x => x.content ?? ''),
    EventCategoriesList: node.getList("EventCategoriesList", "EventCategory").map(x => x.content ?? ''),
    Enabled: node.first("Enabled", false, x => x.content === 'true'),
  };
}

// refs: 2 - tags: output, named, interface
export interface ResourcePendingMaintenanceActions {
  ResourceIdentifier?: string | null;
  PendingMaintenanceActionDetails: PendingMaintenanceAction[];
}
function ResourcePendingMaintenanceActions_Parse(node: XmlNode): ResourcePendingMaintenanceActions {
  return {
    ...node.strings({
      optional: {"ResourceIdentifier":true},
    }),
    PendingMaintenanceActionDetails: node.getList("PendingMaintenanceActionDetails", "PendingMaintenanceAction").map(PendingMaintenanceAction_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface PendingMaintenanceAction {
  Action?: string | null;
  AutoAppliedAfterDate?: Date | number | null;
  ForcedApplyDate?: Date | number | null;
  OptInStatus?: string | null;
  CurrentApplyDate?: Date | number | null;
  Description?: string | null;
}
function PendingMaintenanceAction_Parse(node: XmlNode): PendingMaintenanceAction {
  return {
    ...node.strings({
      optional: {"Action":true,"OptInStatus":true,"Description":true},
    }),
    AutoAppliedAfterDate: node.first("AutoAppliedAfterDate", false, x => parseTimestamp(x.content)),
    ForcedApplyDate: node.first("ForcedApplyDate", false, x => parseTimestamp(x.content)),
    CurrentApplyDate: node.first("CurrentApplyDate", false, x => parseTimestamp(x.content)),
  };
}

// refs: 3 - tags: output, named, interface
export interface DBClusterParameterGroup {
  DBClusterParameterGroupName?: string | null;
  DBParameterGroupFamily?: string | null;
  Description?: string | null;
  DBClusterParameterGroupArn?: string | null;
}
function DBClusterParameterGroup_Parse(node: XmlNode): DBClusterParameterGroup {
  return node.strings({
    optional: {"DBClusterParameterGroupName":true,"DBParameterGroupFamily":true,"Description":true,"DBClusterParameterGroupArn":true},
  });
}

// refs: 4 - tags: output, named, interface
export interface DBClusterSnapshot {
  AvailabilityZones: string[];
  DBClusterSnapshotIdentifier?: string | null;
  DBClusterIdentifier?: string | null;
  SnapshotCreateTime?: Date | number | null;
  Engine?: string | null;
  AllocatedStorage?: number | null;
  Status?: string | null;
  Port?: number | null;
  VpcId?: string | null;
  ClusterCreateTime?: Date | number | null;
  MasterUsername?: string | null;
  EngineVersion?: string | null;
  LicenseModel?: string | null;
  SnapshotType?: string | null;
  PercentProgress?: number | null;
  StorageEncrypted?: boolean | null;
  KmsKeyId?: string | null;
  DBClusterSnapshotArn?: string | null;
  SourceDBClusterSnapshotArn?: string | null;
  IAMDatabaseAuthenticationEnabled?: boolean | null;
}
function DBClusterSnapshot_Parse(node: XmlNode): DBClusterSnapshot {
  return {
    ...node.strings({
      optional: {"DBClusterSnapshotIdentifier":true,"DBClusterIdentifier":true,"Engine":true,"Status":true,"VpcId":true,"MasterUsername":true,"EngineVersion":true,"LicenseModel":true,"SnapshotType":true,"KmsKeyId":true,"DBClusterSnapshotArn":true,"SourceDBClusterSnapshotArn":true},
    }),
    AvailabilityZones: node.getList("AvailabilityZones", "AvailabilityZone").map(x => x.content ?? ''),
    SnapshotCreateTime: node.first("SnapshotCreateTime", false, x => parseTimestamp(x.content)),
    AllocatedStorage: node.first("AllocatedStorage", false, x => parseInt(x.content ?? '0')),
    Port: node.first("Port", false, x => parseInt(x.content ?? '0')),
    ClusterCreateTime: node.first("ClusterCreateTime", false, x => parseTimestamp(x.content)),
    PercentProgress: node.first("PercentProgress", false, x => parseInt(x.content ?? '0')),
    StorageEncrypted: node.first("StorageEncrypted", false, x => x.content === 'true'),
    IAMDatabaseAuthenticationEnabled: node.first("IAMDatabaseAuthenticationEnabled", false, x => x.content === 'true'),
  };
}

// refs: 3 - tags: output, named, interface
export interface DBParameterGroup {
  DBParameterGroupName?: string | null;
  DBParameterGroupFamily?: string | null;
  Description?: string | null;
  DBParameterGroupArn?: string | null;
}
function DBParameterGroup_Parse(node: XmlNode): DBParameterGroup {
  return node.strings({
    optional: {"DBParameterGroupName":true,"DBParameterGroupFamily":true,"Description":true,"DBParameterGroupArn":true},
  });
}

// refs: 10 - tags: output, named, interface
export interface DBCluster {
  AllocatedStorage?: number | null;
  AvailabilityZones: string[];
  BackupRetentionPeriod?: number | null;
  CharacterSetName?: string | null;
  DatabaseName?: string | null;
  DBClusterIdentifier?: string | null;
  DBClusterParameterGroup?: string | null;
  DBSubnetGroup?: string | null;
  Status?: string | null;
  PercentProgress?: string | null;
  EarliestRestorableTime?: Date | number | null;
  Endpoint?: string | null;
  ReaderEndpoint?: string | null;
  MultiAZ?: boolean | null;
  Engine?: string | null;
  EngineVersion?: string | null;
  LatestRestorableTime?: Date | number | null;
  Port?: number | null;
  MasterUsername?: string | null;
  DBClusterOptionGroupMemberships: DBClusterOptionGroupStatus[];
  PreferredBackupWindow?: string | null;
  PreferredMaintenanceWindow?: string | null;
  ReplicationSourceIdentifier?: string | null;
  ReadReplicaIdentifiers: string[];
  DBClusterMembers: DBClusterMember[];
  VpcSecurityGroups: VpcSecurityGroupMembership[];
  HostedZoneId?: string | null;
  StorageEncrypted?: boolean | null;
  KmsKeyId?: string | null;
  DbClusterResourceId?: string | null;
  DBClusterArn?: string | null;
  AssociatedRoles: DBClusterRole[];
  IAMDatabaseAuthenticationEnabled?: boolean | null;
  CloneGroupId?: string | null;
  ClusterCreateTime?: Date | number | null;
  EnabledCloudwatchLogsExports: string[];
  DeletionProtection?: boolean | null;
}
function DBCluster_Parse(node: XmlNode): DBCluster {
  return {
    ...node.strings({
      optional: {"CharacterSetName":true,"DatabaseName":true,"DBClusterIdentifier":true,"DBClusterParameterGroup":true,"DBSubnetGroup":true,"Status":true,"PercentProgress":true,"Endpoint":true,"ReaderEndpoint":true,"Engine":true,"EngineVersion":true,"MasterUsername":true,"PreferredBackupWindow":true,"PreferredMaintenanceWindow":true,"ReplicationSourceIdentifier":true,"HostedZoneId":true,"KmsKeyId":true,"DbClusterResourceId":true,"DBClusterArn":true,"CloneGroupId":true},
    }),
    AllocatedStorage: node.first("AllocatedStorage", false, x => parseInt(x.content ?? '0')),
    AvailabilityZones: node.getList("AvailabilityZones", "AvailabilityZone").map(x => x.content ?? ''),
    BackupRetentionPeriod: node.first("BackupRetentionPeriod", false, x => parseInt(x.content ?? '0')),
    EarliestRestorableTime: node.first("EarliestRestorableTime", false, x => parseTimestamp(x.content)),
    MultiAZ: node.first("MultiAZ", false, x => x.content === 'true'),
    LatestRestorableTime: node.first("LatestRestorableTime", false, x => parseTimestamp(x.content)),
    Port: node.first("Port", false, x => parseInt(x.content ?? '0')),
    DBClusterOptionGroupMemberships: node.getList("DBClusterOptionGroupMemberships", "DBClusterOptionGroup").map(DBClusterOptionGroupStatus_Parse),
    ReadReplicaIdentifiers: node.getList("ReadReplicaIdentifiers", "ReadReplicaIdentifier").map(x => x.content ?? ''),
    DBClusterMembers: node.getList("DBClusterMembers", "DBClusterMember").map(DBClusterMember_Parse),
    VpcSecurityGroups: node.getList("VpcSecurityGroups", "VpcSecurityGroupMembership").map(VpcSecurityGroupMembership_Parse),
    StorageEncrypted: node.first("StorageEncrypted", false, x => x.content === 'true'),
    AssociatedRoles: node.getList("AssociatedRoles", "DBClusterRole").map(DBClusterRole_Parse),
    IAMDatabaseAuthenticationEnabled: node.first("IAMDatabaseAuthenticationEnabled", false, x => x.content === 'true'),
    ClusterCreateTime: node.first("ClusterCreateTime", false, x => parseTimestamp(x.content)),
    EnabledCloudwatchLogsExports: node.getList("EnabledCloudwatchLogsExports", "member").map(x => x.content ?? ''),
    DeletionProtection: node.first("DeletionProtection", false, x => x.content === 'true'),
  };
}

// refs: 10 - tags: output, named, interface
export interface DBClusterOptionGroupStatus {
  DBClusterOptionGroupName?: string | null;
  Status?: string | null;
}
function DBClusterOptionGroupStatus_Parse(node: XmlNode): DBClusterOptionGroupStatus {
  return node.strings({
    optional: {"DBClusterOptionGroupName":true,"Status":true},
  });
}

// refs: 10 - tags: output, named, interface
export interface DBClusterMember {
  DBInstanceIdentifier?: string | null;
  IsClusterWriter?: boolean | null;
  DBClusterParameterGroupStatus?: string | null;
  PromotionTier?: number | null;
}
function DBClusterMember_Parse(node: XmlNode): DBClusterMember {
  return {
    ...node.strings({
      optional: {"DBInstanceIdentifier":true,"DBClusterParameterGroupStatus":true},
    }),
    IsClusterWriter: node.first("IsClusterWriter", false, x => x.content === 'true'),
    PromotionTier: node.first("PromotionTier", false, x => parseInt(x.content ?? '0')),
  };
}

// refs: 15 - tags: output, named, interface
export interface VpcSecurityGroupMembership {
  VpcSecurityGroupId?: string | null;
  Status?: string | null;
}
function VpcSecurityGroupMembership_Parse(node: XmlNode): VpcSecurityGroupMembership {
  return node.strings({
    optional: {"VpcSecurityGroupId":true,"Status":true},
  });
}

// refs: 10 - tags: output, named, interface
export interface DBClusterRole {
  RoleArn?: string | null;
  Status?: string | null;
}
function DBClusterRole_Parse(node: XmlNode): DBClusterRole {
  return node.strings({
    optional: {"RoleArn":true,"Status":true},
  });
}

// refs: 5 - tags: output, named, interface
export interface DBInstance {
  DBInstanceIdentifier?: string | null;
  DBInstanceClass?: string | null;
  Engine?: string | null;
  DBInstanceStatus?: string | null;
  MasterUsername?: string | null;
  DBName?: string | null;
  Endpoint?: Endpoint | null;
  AllocatedStorage?: number | null;
  InstanceCreateTime?: Date | number | null;
  PreferredBackupWindow?: string | null;
  BackupRetentionPeriod?: number | null;
  DBSecurityGroups: DBSecurityGroupMembership[];
  VpcSecurityGroups: VpcSecurityGroupMembership[];
  DBParameterGroups: DBParameterGroupStatus[];
  AvailabilityZone?: string | null;
  DBSubnetGroup?: DBSubnetGroup | null;
  PreferredMaintenanceWindow?: string | null;
  PendingModifiedValues?: PendingModifiedValues | null;
  LatestRestorableTime?: Date | number | null;
  MultiAZ?: boolean | null;
  EngineVersion?: string | null;
  AutoMinorVersionUpgrade?: boolean | null;
  ReadReplicaSourceDBInstanceIdentifier?: string | null;
  ReadReplicaDBInstanceIdentifiers: string[];
  ReadReplicaDBClusterIdentifiers: string[];
  LicenseModel?: string | null;
  Iops?: number | null;
  OptionGroupMemberships: OptionGroupMembership[];
  CharacterSetName?: string | null;
  SecondaryAvailabilityZone?: string | null;
  PubliclyAccessible?: boolean | null;
  StatusInfos: DBInstanceStatusInfo[];
  StorageType?: string | null;
  TdeCredentialArn?: string | null;
  DbInstancePort?: number | null;
  DBClusterIdentifier?: string | null;
  StorageEncrypted?: boolean | null;
  KmsKeyId?: string | null;
  DbiResourceId?: string | null;
  CACertificateIdentifier?: string | null;
  DomainMemberships: DomainMembership[];
  CopyTagsToSnapshot?: boolean | null;
  MonitoringInterval?: number | null;
  EnhancedMonitoringResourceArn?: string | null;
  MonitoringRoleArn?: string | null;
  PromotionTier?: number | null;
  DBInstanceArn?: string | null;
  Timezone?: string | null;
  IAMDatabaseAuthenticationEnabled?: boolean | null;
  PerformanceInsightsEnabled?: boolean | null;
  PerformanceInsightsKMSKeyId?: string | null;
  EnabledCloudwatchLogsExports: string[];
  DeletionProtection?: boolean | null;
}
function DBInstance_Parse(node: XmlNode): DBInstance {
  return {
    ...node.strings({
      optional: {"DBInstanceIdentifier":true,"DBInstanceClass":true,"Engine":true,"DBInstanceStatus":true,"MasterUsername":true,"DBName":true,"PreferredBackupWindow":true,"AvailabilityZone":true,"PreferredMaintenanceWindow":true,"EngineVersion":true,"ReadReplicaSourceDBInstanceIdentifier":true,"LicenseModel":true,"CharacterSetName":true,"SecondaryAvailabilityZone":true,"StorageType":true,"TdeCredentialArn":true,"DBClusterIdentifier":true,"KmsKeyId":true,"DbiResourceId":true,"CACertificateIdentifier":true,"EnhancedMonitoringResourceArn":true,"MonitoringRoleArn":true,"DBInstanceArn":true,"Timezone":true,"PerformanceInsightsKMSKeyId":true},
    }),
    Endpoint: node.first("Endpoint", false, Endpoint_Parse),
    AllocatedStorage: node.first("AllocatedStorage", false, x => parseInt(x.content ?? '0')),
    InstanceCreateTime: node.first("InstanceCreateTime", false, x => parseTimestamp(x.content)),
    BackupRetentionPeriod: node.first("BackupRetentionPeriod", false, x => parseInt(x.content ?? '0')),
    DBSecurityGroups: node.getList("DBSecurityGroups", "DBSecurityGroup").map(DBSecurityGroupMembership_Parse),
    VpcSecurityGroups: node.getList("VpcSecurityGroups", "VpcSecurityGroupMembership").map(VpcSecurityGroupMembership_Parse),
    DBParameterGroups: node.getList("DBParameterGroups", "DBParameterGroup").map(DBParameterGroupStatus_Parse),
    DBSubnetGroup: node.first("DBSubnetGroup", false, DBSubnetGroup_Parse),
    PendingModifiedValues: node.first("PendingModifiedValues", false, PendingModifiedValues_Parse),
    LatestRestorableTime: node.first("LatestRestorableTime", false, x => parseTimestamp(x.content)),
    MultiAZ: node.first("MultiAZ", false, x => x.content === 'true'),
    AutoMinorVersionUpgrade: node.first("AutoMinorVersionUpgrade", false, x => x.content === 'true'),
    ReadReplicaDBInstanceIdentifiers: node.getList("ReadReplicaDBInstanceIdentifiers", "ReadReplicaDBInstanceIdentifier").map(x => x.content ?? ''),
    ReadReplicaDBClusterIdentifiers: node.getList("ReadReplicaDBClusterIdentifiers", "ReadReplicaDBClusterIdentifier").map(x => x.content ?? ''),
    Iops: node.first("Iops", false, x => parseInt(x.content ?? '0')),
    OptionGroupMemberships: node.getList("OptionGroupMemberships", "OptionGroupMembership").map(OptionGroupMembership_Parse),
    PubliclyAccessible: node.first("PubliclyAccessible", false, x => x.content === 'true'),
    StatusInfos: node.getList("StatusInfos", "DBInstanceStatusInfo").map(DBInstanceStatusInfo_Parse),
    DbInstancePort: node.first("DbInstancePort", false, x => parseInt(x.content ?? '0')),
    StorageEncrypted: node.first("StorageEncrypted", false, x => x.content === 'true'),
    DomainMemberships: node.getList("DomainMemberships", "DomainMembership").map(DomainMembership_Parse),
    CopyTagsToSnapshot: node.first("CopyTagsToSnapshot", false, x => x.content === 'true'),
    MonitoringInterval: node.first("MonitoringInterval", false, x => parseInt(x.content ?? '0')),
    PromotionTier: node.first("PromotionTier", false, x => parseInt(x.content ?? '0')),
    IAMDatabaseAuthenticationEnabled: node.first("IAMDatabaseAuthenticationEnabled", false, x => x.content === 'true'),
    PerformanceInsightsEnabled: node.first("PerformanceInsightsEnabled", false, x => x.content === 'true'),
    EnabledCloudwatchLogsExports: node.getList("EnabledCloudwatchLogsExports", "member").map(x => x.content ?? ''),
    DeletionProtection: node.first("DeletionProtection", false, x => x.content === 'true'),
  };
}

// refs: 5 - tags: output, named, interface
export interface Endpoint {
  Address?: string | null;
  Port?: number | null;
  HostedZoneId?: string | null;
}
function Endpoint_Parse(node: XmlNode): Endpoint {
  return {
    ...node.strings({
      optional: {"Address":true,"HostedZoneId":true},
    }),
    Port: node.first("Port", false, x => parseInt(x.content ?? '0')),
  };
}

// refs: 5 - tags: output, named, interface
export interface DBSecurityGroupMembership {
  DBSecurityGroupName?: string | null;
  Status?: string | null;
}
function DBSecurityGroupMembership_Parse(node: XmlNode): DBSecurityGroupMembership {
  return node.strings({
    optional: {"DBSecurityGroupName":true,"Status":true},
  });
}

// refs: 5 - tags: output, named, interface
export interface DBParameterGroupStatus {
  DBParameterGroupName?: string | null;
  ParameterApplyStatus?: string | null;
}
function DBParameterGroupStatus_Parse(node: XmlNode): DBParameterGroupStatus {
  return node.strings({
    optional: {"DBParameterGroupName":true,"ParameterApplyStatus":true},
  });
}

// refs: 8 - tags: output, named, interface
export interface DBSubnetGroup {
  DBSubnetGroupName?: string | null;
  DBSubnetGroupDescription?: string | null;
  VpcId?: string | null;
  SubnetGroupStatus?: string | null;
  Subnets: Subnet[];
  DBSubnetGroupArn?: string | null;
}
function DBSubnetGroup_Parse(node: XmlNode): DBSubnetGroup {
  return {
    ...node.strings({
      optional: {"DBSubnetGroupName":true,"DBSubnetGroupDescription":true,"VpcId":true,"SubnetGroupStatus":true,"DBSubnetGroupArn":true},
    }),
    Subnets: node.getList("Subnets", "Subnet").map(Subnet_Parse),
  };
}

// refs: 8 - tags: output, named, interface
export interface Subnet {
  SubnetIdentifier?: string | null;
  SubnetAvailabilityZone?: AvailabilityZone | null;
  SubnetStatus?: string | null;
}
function Subnet_Parse(node: XmlNode): Subnet {
  return {
    ...node.strings({
      optional: {"SubnetIdentifier":true,"SubnetStatus":true},
    }),
    SubnetAvailabilityZone: node.first("SubnetAvailabilityZone", false, AvailabilityZone_Parse),
  };
}

// refs: 9 - tags: output, named, interface
export interface AvailabilityZone {
  Name?: string | null;
}
function AvailabilityZone_Parse(node: XmlNode): AvailabilityZone {
  return node.strings({
    optional: {"Name":true},
  });
}

// refs: 5 - tags: output, named, interface
export interface PendingModifiedValues {
  DBInstanceClass?: string | null;
  AllocatedStorage?: number | null;
  MasterUserPassword?: string | null;
  Port?: number | null;
  BackupRetentionPeriod?: number | null;
  MultiAZ?: boolean | null;
  EngineVersion?: string | null;
  LicenseModel?: string | null;
  Iops?: number | null;
  DBInstanceIdentifier?: string | null;
  StorageType?: string | null;
  CACertificateIdentifier?: string | null;
  DBSubnetGroupName?: string | null;
  PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports | null;
}
function PendingModifiedValues_Parse(node: XmlNode): PendingModifiedValues {
  return {
    ...node.strings({
      optional: {"DBInstanceClass":true,"MasterUserPassword":true,"EngineVersion":true,"LicenseModel":true,"DBInstanceIdentifier":true,"StorageType":true,"CACertificateIdentifier":true,"DBSubnetGroupName":true},
    }),
    AllocatedStorage: node.first("AllocatedStorage", false, x => parseInt(x.content ?? '0')),
    Port: node.first("Port", false, x => parseInt(x.content ?? '0')),
    BackupRetentionPeriod: node.first("BackupRetentionPeriod", false, x => parseInt(x.content ?? '0')),
    MultiAZ: node.first("MultiAZ", false, x => x.content === 'true'),
    Iops: node.first("Iops", false, x => parseInt(x.content ?? '0')),
    PendingCloudwatchLogsExports: node.first("PendingCloudwatchLogsExports", false, PendingCloudwatchLogsExports_Parse),
  };
}

// refs: 5 - tags: output, named, interface
export interface PendingCloudwatchLogsExports {
  LogTypesToEnable: string[];
  LogTypesToDisable: string[];
}
function PendingCloudwatchLogsExports_Parse(node: XmlNode): PendingCloudwatchLogsExports {
  return {
    LogTypesToEnable: node.getList("LogTypesToEnable", "member").map(x => x.content ?? ''),
    LogTypesToDisable: node.getList("LogTypesToDisable", "member").map(x => x.content ?? ''),
  };
}

// refs: 5 - tags: output, named, interface
export interface OptionGroupMembership {
  OptionGroupName?: string | null;
  Status?: string | null;
}
function OptionGroupMembership_Parse(node: XmlNode): OptionGroupMembership {
  return node.strings({
    optional: {"OptionGroupName":true,"Status":true},
  });
}

// refs: 5 - tags: output, named, interface
export interface DBInstanceStatusInfo {
  StatusType?: string | null;
  Normal?: boolean | null;
  Status?: string | null;
  Message?: string | null;
}
function DBInstanceStatusInfo_Parse(node: XmlNode): DBInstanceStatusInfo {
  return {
    ...node.strings({
      optional: {"StatusType":true,"Status":true,"Message":true},
    }),
    Normal: node.first("Normal", false, x => x.content === 'true'),
  };
}

// refs: 5 - tags: output, named, interface
export interface DomainMembership {
  Domain?: string | null;
  Status?: string | null;
  FQDN?: string | null;
  IAMRoleName?: string | null;
}
function DomainMembership_Parse(node: XmlNode): DomainMembership {
  return node.strings({
    optional: {"Domain":true,"Status":true,"FQDN":true,"IAMRoleName":true},
  });
}

// refs: 2 - tags: output, named, interface
export interface DBClusterSnapshotAttributesResult {
  DBClusterSnapshotIdentifier?: string | null;
  DBClusterSnapshotAttributes: DBClusterSnapshotAttribute[];
}
function DBClusterSnapshotAttributesResult_Parse(node: XmlNode): DBClusterSnapshotAttributesResult {
  return {
    ...node.strings({
      optional: {"DBClusterSnapshotIdentifier":true},
    }),
    DBClusterSnapshotAttributes: node.getList("DBClusterSnapshotAttributes", "DBClusterSnapshotAttribute").map(DBClusterSnapshotAttribute_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface DBClusterSnapshotAttribute {
  AttributeName?: string | null;
  AttributeValues: string[];
}
function DBClusterSnapshotAttribute_Parse(node: XmlNode): DBClusterSnapshotAttribute {
  return {
    ...node.strings({
      optional: {"AttributeName":true},
    }),
    AttributeValues: node.getList("AttributeValues", "AttributeValue").map(x => x.content ?? ''),
  };
}

// refs: 1 - tags: output, named, interface
export interface DBEngineVersion {
  Engine?: string | null;
  EngineVersion?: string | null;
  DBParameterGroupFamily?: string | null;
  DBEngineDescription?: string | null;
  DBEngineVersionDescription?: string | null;
  DefaultCharacterSet?: CharacterSet | null;
  SupportedCharacterSets: CharacterSet[];
  ValidUpgradeTarget: UpgradeTarget[];
  SupportedTimezones: Timezone[];
  ExportableLogTypes: string[];
  SupportsLogExportsToCloudwatchLogs?: boolean | null;
  SupportsReadReplica?: boolean | null;
}
function DBEngineVersion_Parse(node: XmlNode): DBEngineVersion {
  return {
    ...node.strings({
      optional: {"Engine":true,"EngineVersion":true,"DBParameterGroupFamily":true,"DBEngineDescription":true,"DBEngineVersionDescription":true},
    }),
    DefaultCharacterSet: node.first("DefaultCharacterSet", false, CharacterSet_Parse),
    SupportedCharacterSets: node.getList("SupportedCharacterSets", "CharacterSet").map(CharacterSet_Parse),
    ValidUpgradeTarget: node.getList("ValidUpgradeTarget", "UpgradeTarget").map(UpgradeTarget_Parse),
    SupportedTimezones: node.getList("SupportedTimezones", "Timezone").map(Timezone_Parse),
    ExportableLogTypes: node.getList("ExportableLogTypes", "member").map(x => x.content ?? ''),
    SupportsLogExportsToCloudwatchLogs: node.first("SupportsLogExportsToCloudwatchLogs", false, x => x.content === 'true'),
    SupportsReadReplica: node.first("SupportsReadReplica", false, x => x.content === 'true'),
  };
}

// refs: 2 - tags: output, named, interface
export interface CharacterSet {
  CharacterSetName?: string | null;
  CharacterSetDescription?: string | null;
}
function CharacterSet_Parse(node: XmlNode): CharacterSet {
  return node.strings({
    optional: {"CharacterSetName":true,"CharacterSetDescription":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface UpgradeTarget {
  Engine?: string | null;
  EngineVersion?: string | null;
  Description?: string | null;
  AutoUpgrade?: boolean | null;
  IsMajorVersionUpgrade?: boolean | null;
}
function UpgradeTarget_Parse(node: XmlNode): UpgradeTarget {
  return {
    ...node.strings({
      optional: {"Engine":true,"EngineVersion":true,"Description":true},
    }),
    AutoUpgrade: node.first("AutoUpgrade", false, x => x.content === 'true'),
    IsMajorVersionUpgrade: node.first("IsMajorVersionUpgrade", false, x => x.content === 'true'),
  };
}

// refs: 1 - tags: output, named, interface
export interface Timezone {
  TimezoneName?: string | null;
}
function Timezone_Parse(node: XmlNode): Timezone {
  return node.strings({
    optional: {"TimezoneName":true},
  });
}

// refs: 2 - tags: output, named, interface
export interface EngineDefaults {
  DBParameterGroupFamily?: string | null;
  Marker?: string | null;
  Parameters: Parameter[];
}
function EngineDefaults_Parse(node: XmlNode): EngineDefaults {
  return {
    ...node.strings({
      optional: {"DBParameterGroupFamily":true,"Marker":true},
    }),
    Parameters: node.getList("Parameters", "Parameter").map(Parameter_Parse),
  };
}

// refs: 1 - tags: output, named, interface
export interface EventCategoriesMap {
  SourceType?: string | null;
  EventCategories: string[];
}
function EventCategoriesMap_Parse(node: XmlNode): EventCategoriesMap {
  return {
    ...node.strings({
      optional: {"SourceType":true},
    }),
    EventCategories: node.getList("EventCategories", "EventCategory").map(x => x.content ?? ''),
  };
}

// refs: 1 - tags: output, named, interface
export interface Event {
  SourceIdentifier?: string | null;
  SourceType?: SourceType | null;
  Message?: string | null;
  EventCategories: string[];
  Date?: Date | number | null;
  SourceArn?: string | null;
}
function Event_Parse(node: XmlNode): Event {
  return {
    ...node.strings({
      optional: {"SourceIdentifier":true,"Message":true,"SourceArn":true},
    }),
    SourceType: node.first("SourceType", false, x => (x.content ?? '') as SourceType),
    EventCategories: node.getList("EventCategories", "EventCategory").map(x => x.content ?? ''),
    Date: node.first("Date", false, x => parseTimestamp(x.content)),
  };
}

// refs: 1 - tags: output, named, interface
export interface OrderableDBInstanceOption {
  Engine?: string | null;
  EngineVersion?: string | null;
  DBInstanceClass?: string | null;
  LicenseModel?: string | null;
  AvailabilityZones: AvailabilityZone[];
  MultiAZCapable?: boolean | null;
  ReadReplicaCapable?: boolean | null;
  Vpc?: boolean | null;
  SupportsStorageEncryption?: boolean | null;
  StorageType?: string | null;
  SupportsIops?: boolean | null;
  SupportsEnhancedMonitoring?: boolean | null;
  SupportsIAMDatabaseAuthentication?: boolean | null;
  SupportsPerformanceInsights?: boolean | null;
  MinStorageSize?: number | null;
  MaxStorageSize?: number | null;
  MinIopsPerDbInstance?: number | null;
  MaxIopsPerDbInstance?: number | null;
  MinIopsPerGib?: number | null;
  MaxIopsPerGib?: number | null;
}
function OrderableDBInstanceOption_Parse(node: XmlNode): OrderableDBInstanceOption {
  return {
    ...node.strings({
      optional: {"Engine":true,"EngineVersion":true,"DBInstanceClass":true,"LicenseModel":true,"StorageType":true},
    }),
    AvailabilityZones: node.getList("AvailabilityZones", "AvailabilityZone").map(AvailabilityZone_Parse),
    MultiAZCapable: node.first("MultiAZCapable", false, x => x.content === 'true'),
    ReadReplicaCapable: node.first("ReadReplicaCapable", false, x => x.content === 'true'),
    Vpc: node.first("Vpc", false, x => x.content === 'true'),
    SupportsStorageEncryption: node.first("SupportsStorageEncryption", false, x => x.content === 'true'),
    SupportsIops: node.first("SupportsIops", false, x => x.content === 'true'),
    SupportsEnhancedMonitoring: node.first("SupportsEnhancedMonitoring", false, x => x.content === 'true'),
    SupportsIAMDatabaseAuthentication: node.first("SupportsIAMDatabaseAuthentication", false, x => x.content === 'true'),
    SupportsPerformanceInsights: node.first("SupportsPerformanceInsights", false, x => x.content === 'true'),
    MinStorageSize: node.first("MinStorageSize", false, x => parseInt(x.content ?? '0')),
    MaxStorageSize: node.first("MaxStorageSize", false, x => parseInt(x.content ?? '0')),
    MinIopsPerDbInstance: node.first("MinIopsPerDbInstance", false, x => parseInt(x.content ?? '0')),
    MaxIopsPerDbInstance: node.first("MaxIopsPerDbInstance", false, x => parseInt(x.content ?? '0')),
    MinIopsPerGib: node.first("MinIopsPerGib", false, x => parseFloat(x.content ?? '0')),
    MaxIopsPerGib: node.first("MaxIopsPerGib", false, x => parseFloat(x.content ?? '0')),
  };
}

// refs: 1 - tags: output, named, interface
export interface ValidDBInstanceModificationsMessage {
  Storage: ValidStorageOptions[];
}
function ValidDBInstanceModificationsMessage_Parse(node: XmlNode): ValidDBInstanceModificationsMessage {
  return {
    Storage: node.getList("Storage", "ValidStorageOptions").map(ValidStorageOptions_Parse),
  };
}

// refs: 1 - tags: output, named, interface
export interface ValidStorageOptions {
  StorageType?: string | null;
  StorageSize: Range[];
  ProvisionedIops: Range[];
  IopsToStorageRatio: DoubleRange[];
}
function ValidStorageOptions_Parse(node: XmlNode): ValidStorageOptions {
  return {
    ...node.strings({
      optional: {"StorageType":true},
    }),
    StorageSize: node.getList("StorageSize", "Range").map(Range_Parse),
    ProvisionedIops: node.getList("ProvisionedIops", "Range").map(Range_Parse),
    IopsToStorageRatio: node.getList("IopsToStorageRatio", "DoubleRange").map(DoubleRange_Parse),
  };
}

// refs: 2 - tags: output, named, interface
export interface Range {
  From?: number | null;
  To?: number | null;
  Step?: number | null;
}
function Range_Parse(node: XmlNode): Range {
  return {
    From: node.first("From", false, x => parseInt(x.content ?? '0')),
    To: node.first("To", false, x => parseInt(x.content ?? '0')),
    Step: node.first("Step", false, x => parseInt(x.content ?? '0')),
  };
}

// refs: 1 - tags: output, named, interface
export interface DoubleRange {
  From?: number | null;
  To?: number | null;
}
function DoubleRange_Parse(node: XmlNode): DoubleRange {
  return {
    From: node.first("From", false, x => parseFloat(x.content ?? '0')),
    To: node.first("To", false, x => parseFloat(x.content ?? '0')),
  };
}
