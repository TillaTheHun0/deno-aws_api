// Autogenerated API client for: AWS Price List Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class Pricing {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Pricing.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-10-15",
    "endpointPrefix": "api.pricing",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWS Pricing",
    "serviceFullName": "AWS Price List Service",
    "serviceId": "Pricing",
    "signatureVersion": "v4",
    "signingName": "pricing",
    "targetPrefix": "AWSPriceListService",
    "uid": "pricing-2017-10-15"
  };

  async describeServices(
    {abortSignal, ...params}: RequestConfig & DescribeServicesRequest = {},
  ): Promise<DescribeServicesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeServices",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Services": [toService],
        "FormatVersion": "s",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAttributeValues(
    {abortSignal, ...params}: RequestConfig & GetAttributeValuesRequest,
  ): Promise<GetAttributeValuesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAttributeValues",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AttributeValues": [toAttributeValue],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getProducts(
    {abortSignal, ...params}: RequestConfig & GetProductsRequest = {},
  ): Promise<GetProductsResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetProducts",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FormatVersion": "s",
        "PriceList": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DescribeServicesRequest {
  ServiceCode?: string | null;
  FormatVersion?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetAttributeValuesRequest {
  ServiceCode: string;
  AttributeName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetProductsRequest {
  ServiceCode?: string | null;
  Filters?: Filter[] | null;
  FormatVersion?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeServicesResponse {
  Services?: Service[] | null;
  FormatVersion?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAttributeValuesResponse {
  AttributeValues?: AttributeValue[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetProductsResponse {
  FormatVersion?: string | null;
  PriceList?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface Filter {
  Type: FilterType;
  Field: string;
  Value: string;
}
function fromFilter(input?: Filter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type FilterType =
| "TERM_MATCH"
;


// refs: 1 - tags: output, named, interface
export interface Service {
  ServiceCode?: string | null;
  AttributeNames?: string[] | null;
}
function toService(root: JSONValue): Service {
  return prt.readObj({
    required: {},
    optional: {
      "ServiceCode": "s",
      "AttributeNames": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AttributeValue {
  Value?: string | null;
}
function toAttributeValue(root: JSONValue): AttributeValue {
  return prt.readObj({
    required: {},
    optional: {
      "Value": "s",
    },
  }, root);
}
