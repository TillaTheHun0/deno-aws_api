// Autogenerated API client for: AmazonApiGatewayV2

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class ApiGatewayV2 {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ApiGatewayV2.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-29",
    "endpointPrefix": "apigateway",
    "signingName": "apigateway",
    "serviceFullName": "AmazonApiGatewayV2",
    "serviceId": "ApiGatewayV2",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "apigatewayv2-2018-11-29",
    "signatureVersion": "v4"
  };

  async createApi(
    {abortSignal, ...params}: RequestConfig & CreateApiRequest,
  ): Promise<CreateApiResponse> {
    const body: jsonP.JSONObject = {
      apiKeySelectionExpression: params["ApiKeySelectionExpression"],
      corsConfiguration: fromCors(params["CorsConfiguration"]),
      credentialsArn: params["CredentialsArn"],
      description: params["Description"],
      disableSchemaValidation: params["DisableSchemaValidation"],
      disableExecuteApiEndpoint: params["DisableExecuteApiEndpoint"],
      name: params["Name"],
      protocolType: params["ProtocolType"],
      routeKey: params["RouteKey"],
      routeSelectionExpression: params["RouteSelectionExpression"],
      tags: params["Tags"],
      target: params["Target"],
      version: params["Version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApi",
      requestUri: "/v2/apis",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiEndpoint": "s",
        "ApiGatewayManaged": "b",
        "ApiId": "s",
        "ApiKeySelectionExpression": "s",
        "CorsConfiguration": toCors,
        "CreatedDate": "d",
        "Description": "s",
        "DisableSchemaValidation": "b",
        "DisableExecuteApiEndpoint": "b",
        "ImportInfo": ["s"],
        "Name": "s",
        "ProtocolType": (x: jsonP.JSONValue) => cmnP.readEnum<ProtocolType>(x),
        "RouteSelectionExpression": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Version": "s",
        "Warnings": ["s"],
      },
    }, await resp.json());
  }

  async createApiMapping(
    {abortSignal, ...params}: RequestConfig & CreateApiMappingRequest,
  ): Promise<CreateApiMappingResponse> {
    const body: jsonP.JSONObject = {
      apiId: params["ApiId"],
      apiMappingKey: params["ApiMappingKey"],
      stage: params["Stage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApiMapping",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}/apimappings`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiId": "s",
        "ApiMappingId": "s",
        "ApiMappingKey": "s",
        "Stage": "s",
      },
    }, await resp.json());
  }

  async createAuthorizer(
    {abortSignal, ...params}: RequestConfig & CreateAuthorizerRequest,
  ): Promise<CreateAuthorizerResponse> {
    const body: jsonP.JSONObject = {
      authorizerCredentialsArn: params["AuthorizerCredentialsArn"],
      authorizerPayloadFormatVersion: params["AuthorizerPayloadFormatVersion"],
      authorizerResultTtlInSeconds: params["AuthorizerResultTtlInSeconds"],
      authorizerType: params["AuthorizerType"],
      authorizerUri: params["AuthorizerUri"],
      enableSimpleResponses: params["EnableSimpleResponses"],
      identitySource: params["IdentitySource"],
      identityValidationExpression: params["IdentityValidationExpression"],
      jwtConfiguration: fromJWTConfiguration(params["JwtConfiguration"]),
      name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAuthorizer",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/authorizers`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuthorizerCredentialsArn": "s",
        "AuthorizerId": "s",
        "AuthorizerPayloadFormatVersion": "s",
        "AuthorizerResultTtlInSeconds": "n",
        "AuthorizerType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizerType>(x),
        "AuthorizerUri": "s",
        "EnableSimpleResponses": "b",
        "IdentitySource": ["s"],
        "IdentityValidationExpression": "s",
        "JwtConfiguration": toJWTConfiguration,
        "Name": "s",
      },
    }, await resp.json());
  }

  async createDeployment(
    {abortSignal, ...params}: RequestConfig & CreateDeploymentRequest,
  ): Promise<CreateDeploymentResponse> {
    const body: jsonP.JSONObject = {
      description: params["Description"],
      stageName: params["StageName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeployment",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/deployments`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutoDeployed": "b",
        "CreatedDate": "d",
        "DeploymentId": "s",
        "DeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "DeploymentStatusMessage": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async createDomainName(
    {abortSignal, ...params}: RequestConfig & CreateDomainNameRequest,
  ): Promise<CreateDomainNameResponse> {
    const body: jsonP.JSONObject = {
      domainName: params["DomainName"],
      domainNameConfigurations: params["DomainNameConfigurations"]?.map(x => fromDomainNameConfiguration(x)),
      mutualTlsAuthentication: fromMutualTlsAuthenticationInput(params["MutualTlsAuthentication"]),
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomainName",
      requestUri: "/v2/domainnames",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiMappingSelectionExpression": "s",
        "DomainName": "s",
        "DomainNameConfigurations": [toDomainNameConfiguration],
        "MutualTlsAuthentication": toMutualTlsAuthentication,
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createIntegration(
    {abortSignal, ...params}: RequestConfig & CreateIntegrationRequest,
  ): Promise<CreateIntegrationResult> {
    const body: jsonP.JSONObject = {
      connectionId: params["ConnectionId"],
      connectionType: params["ConnectionType"],
      contentHandlingStrategy: params["ContentHandlingStrategy"],
      credentialsArn: params["CredentialsArn"],
      description: params["Description"],
      integrationMethod: params["IntegrationMethod"],
      integrationSubtype: params["IntegrationSubtype"],
      integrationType: params["IntegrationType"],
      integrationUri: params["IntegrationUri"],
      passthroughBehavior: params["PassthroughBehavior"],
      payloadFormatVersion: params["PayloadFormatVersion"],
      requestParameters: params["RequestParameters"],
      requestTemplates: params["RequestTemplates"],
      responseParameters: params["ResponseParameters"],
      templateSelectionExpression: params["TemplateSelectionExpression"],
      timeoutInMillis: params["TimeoutInMillis"],
      tlsConfig: fromTlsConfigInput(params["TlsConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIntegration",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiGatewayManaged": "b",
        "ConnectionId": "s",
        "ConnectionType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionType>(x),
        "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
        "CredentialsArn": "s",
        "Description": "s",
        "IntegrationId": "s",
        "IntegrationMethod": "s",
        "IntegrationResponseSelectionExpression": "s",
        "IntegrationSubtype": "s",
        "IntegrationType": (x: jsonP.JSONValue) => cmnP.readEnum<IntegrationType>(x),
        "IntegrationUri": "s",
        "PassthroughBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<PassthroughBehavior>(x),
        "PayloadFormatVersion": "s",
        "RequestParameters": x => jsonP.readMap(String, String, x),
        "RequestTemplates": x => jsonP.readMap(String, String, x),
        "ResponseParameters": x => jsonP.readMap(String, y => jsonP.readMap(String, String, y)!, x),
        "TemplateSelectionExpression": "s",
        "TimeoutInMillis": "n",
        "TlsConfig": toTlsConfig,
      },
    }, await resp.json());
  }

  async createIntegrationResponse(
    {abortSignal, ...params}: RequestConfig & CreateIntegrationResponseRequest,
  ): Promise<CreateIntegrationResponseResponse> {
    const body: jsonP.JSONObject = {
      contentHandlingStrategy: params["ContentHandlingStrategy"],
      integrationResponseKey: params["IntegrationResponseKey"],
      responseParameters: params["ResponseParameters"],
      responseTemplates: params["ResponseTemplates"],
      templateSelectionExpression: params["TemplateSelectionExpression"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIntegrationResponse",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}/integrationresponses`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
        "IntegrationResponseId": "s",
        "IntegrationResponseKey": "s",
        "ResponseParameters": x => jsonP.readMap(String, String, x),
        "ResponseTemplates": x => jsonP.readMap(String, String, x),
        "TemplateSelectionExpression": "s",
      },
    }, await resp.json());
  }

  async createModel(
    {abortSignal, ...params}: RequestConfig & CreateModelRequest,
  ): Promise<CreateModelResponse> {
    const body: jsonP.JSONObject = {
      contentType: params["ContentType"],
      description: params["Description"],
      name: params["Name"],
      schema: params["Schema"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateModel",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/models`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContentType": "s",
        "Description": "s",
        "ModelId": "s",
        "Name": "s",
        "Schema": "s",
      },
    }, await resp.json());
  }

  async createRoute(
    {abortSignal, ...params}: RequestConfig & CreateRouteRequest,
  ): Promise<CreateRouteResult> {
    const body: jsonP.JSONObject = {
      apiKeyRequired: params["ApiKeyRequired"],
      authorizationScopes: params["AuthorizationScopes"],
      authorizationType: params["AuthorizationType"],
      authorizerId: params["AuthorizerId"],
      modelSelectionExpression: params["ModelSelectionExpression"],
      operationName: params["OperationName"],
      requestModels: params["RequestModels"],
      requestParameters: jsonP.serializeMap(params["RequestParameters"], x => fromParameterConstraints(x)),
      routeKey: params["RouteKey"],
      routeResponseSelectionExpression: params["RouteResponseSelectionExpression"],
      target: params["Target"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoute",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiGatewayManaged": "b",
        "ApiKeyRequired": "b",
        "AuthorizationScopes": ["s"],
        "AuthorizationType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizationType>(x),
        "AuthorizerId": "s",
        "ModelSelectionExpression": "s",
        "OperationName": "s",
        "RequestModels": x => jsonP.readMap(String, String, x),
        "RequestParameters": x => jsonP.readMap(String, toParameterConstraints, x),
        "RouteId": "s",
        "RouteKey": "s",
        "RouteResponseSelectionExpression": "s",
        "Target": "s",
      },
    }, await resp.json());
  }

  async createRouteResponse(
    {abortSignal, ...params}: RequestConfig & CreateRouteResponseRequest,
  ): Promise<CreateRouteResponseResponse> {
    const body: jsonP.JSONObject = {
      modelSelectionExpression: params["ModelSelectionExpression"],
      responseModels: params["ResponseModels"],
      responseParameters: jsonP.serializeMap(params["ResponseParameters"], x => fromParameterConstraints(x)),
      routeResponseKey: params["RouteResponseKey"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRouteResponse",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}/routeresponses`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ModelSelectionExpression": "s",
        "ResponseModels": x => jsonP.readMap(String, String, x),
        "ResponseParameters": x => jsonP.readMap(String, toParameterConstraints, x),
        "RouteResponseId": "s",
        "RouteResponseKey": "s",
      },
    }, await resp.json());
  }

  async createStage(
    {abortSignal, ...params}: RequestConfig & CreateStageRequest,
  ): Promise<CreateStageResponse> {
    const body: jsonP.JSONObject = {
      accessLogSettings: fromAccessLogSettings(params["AccessLogSettings"]),
      autoDeploy: params["AutoDeploy"],
      clientCertificateId: params["ClientCertificateId"],
      defaultRouteSettings: fromRouteSettings(params["DefaultRouteSettings"]),
      deploymentId: params["DeploymentId"],
      description: params["Description"],
      routeSettings: jsonP.serializeMap(params["RouteSettings"], x => fromRouteSettings(x)),
      stageName: params["StageName"],
      stageVariables: params["StageVariables"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateStage",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccessLogSettings": toAccessLogSettings,
        "ApiGatewayManaged": "b",
        "AutoDeploy": "b",
        "ClientCertificateId": "s",
        "CreatedDate": "d",
        "DefaultRouteSettings": toRouteSettings,
        "DeploymentId": "s",
        "Description": "s",
        "LastDeploymentStatusMessage": "s",
        "LastUpdatedDate": "d",
        "RouteSettings": x => jsonP.readMap(String, toRouteSettings, x),
        "StageName": "s",
        "StageVariables": x => jsonP.readMap(String, String, x),
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createVpcLink(
    {abortSignal, ...params}: RequestConfig & CreateVpcLinkRequest,
  ): Promise<CreateVpcLinkResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
      securityGroupIds: params["SecurityGroupIds"],
      subnetIds: params["SubnetIds"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVpcLink",
      requestUri: "/v2/vpclinks",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreatedDate": "d",
        "Name": "s",
        "SecurityGroupIds": ["s"],
        "SubnetIds": ["s"],
        "Tags": x => jsonP.readMap(String, String, x),
        "VpcLinkId": "s",
        "VpcLinkStatus": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkStatus>(x),
        "VpcLinkStatusMessage": "s",
        "VpcLinkVersion": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkVersion>(x),
      },
    }, await resp.json());
  }

  async deleteAccessLogSettings(
    {abortSignal, ...params}: RequestConfig & DeleteAccessLogSettingsRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAccessLogSettings",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages/${params["StageName"]}/accesslogsettings`,
      responseCode: 204,
    });
  }

  async deleteApi(
    {abortSignal, ...params}: RequestConfig & DeleteApiRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApi",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}`,
      responseCode: 204,
    });
  }

  async deleteApiMapping(
    {abortSignal, ...params}: RequestConfig & DeleteApiMappingRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApiMapping",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}/apimappings/${params["ApiMappingId"]}`,
      responseCode: 204,
    });
  }

  async deleteAuthorizer(
    {abortSignal, ...params}: RequestConfig & DeleteAuthorizerRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAuthorizer",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/authorizers/${params["AuthorizerId"]}`,
      responseCode: 204,
    });
  }

  async deleteCorsConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteCorsConfigurationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCorsConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/cors`,
      responseCode: 204,
    });
  }

  async deleteDeployment(
    {abortSignal, ...params}: RequestConfig & DeleteDeploymentRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDeployment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/deployments/${params["DeploymentId"]}`,
      responseCode: 204,
    });
  }

  async deleteDomainName(
    {abortSignal, ...params}: RequestConfig & DeleteDomainNameRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDomainName",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}`,
      responseCode: 204,
    });
  }

  async deleteIntegration(
    {abortSignal, ...params}: RequestConfig & DeleteIntegrationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIntegration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}`,
      responseCode: 204,
    });
  }

  async deleteIntegrationResponse(
    {abortSignal, ...params}: RequestConfig & DeleteIntegrationResponseRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteIntegrationResponse",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}/integrationresponses/${params["IntegrationResponseId"]}`,
      responseCode: 204,
    });
  }

  async deleteModel(
    {abortSignal, ...params}: RequestConfig & DeleteModelRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteModel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/models/${params["ModelId"]}`,
      responseCode: 204,
    });
  }

  async deleteRoute(
    {abortSignal, ...params}: RequestConfig & DeleteRouteRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRoute",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}`,
      responseCode: 204,
    });
  }

  async deleteRouteRequestParameter(
    {abortSignal, ...params}: RequestConfig & DeleteRouteRequestParameterRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRouteRequestParameter",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}/requestparameters/${params["RequestParameterKey"]}`,
      responseCode: 204,
    });
  }

  async deleteRouteResponse(
    {abortSignal, ...params}: RequestConfig & DeleteRouteResponseRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRouteResponse",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}/routeresponses/${params["RouteResponseId"]}`,
      responseCode: 204,
    });
  }

  async deleteRouteSettings(
    {abortSignal, ...params}: RequestConfig & DeleteRouteSettingsRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRouteSettings",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages/${params["StageName"]}/routesettings/${params["RouteKey"]}`,
      responseCode: 204,
    });
  }

  async deleteStage(
    {abortSignal, ...params}: RequestConfig & DeleteStageRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteStage",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages/${params["StageName"]}`,
      responseCode: 204,
    });
  }

  async deleteVpcLink(
    {abortSignal, ...params}: RequestConfig & DeleteVpcLinkRequest,
  ): Promise<DeleteVpcLinkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVpcLink",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/vpclinks/${params["VpcLinkId"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async exportApi(
    {abortSignal, ...params}: RequestConfig & ExportApiRequest,
  ): Promise<ExportApiResponse> {
    const query = new URLSearchParams;
    if (params["ExportVersion"] != null) query.set("exportVersion", params["ExportVersion"]?.toString() ?? "");
    if (params["IncludeExtensions"] != null) query.set("includeExtensions", params["IncludeExtensions"]?.toString() ?? "");
    query.set("outputType", params["OutputType"]?.toString() ?? "");
    if (params["StageName"] != null) query.set("stageName", params["StageName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ExportApi",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/exports/${params["Specification"]}`,
      responseCode: 200,
    });
  return {
    body: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async resetAuthorizersCache(
    {abortSignal, ...params}: RequestConfig & ResetAuthorizersCacheRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ResetAuthorizersCache",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages/${params["StageName"]}/cache/authorizers`,
      responseCode: 204,
    });
  }

  async getApi(
    {abortSignal, ...params}: RequestConfig & GetApiRequest,
  ): Promise<GetApiResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApi",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiEndpoint": "s",
        "ApiGatewayManaged": "b",
        "ApiId": "s",
        "ApiKeySelectionExpression": "s",
        "CorsConfiguration": toCors,
        "CreatedDate": "d",
        "Description": "s",
        "DisableSchemaValidation": "b",
        "DisableExecuteApiEndpoint": "b",
        "ImportInfo": ["s"],
        "Name": "s",
        "ProtocolType": (x: jsonP.JSONValue) => cmnP.readEnum<ProtocolType>(x),
        "RouteSelectionExpression": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Version": "s",
        "Warnings": ["s"],
      },
    }, await resp.json());
  }

  async getApiMapping(
    {abortSignal, ...params}: RequestConfig & GetApiMappingRequest,
  ): Promise<GetApiMappingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApiMapping",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}/apimappings/${params["ApiMappingId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiId": "s",
        "ApiMappingId": "s",
        "ApiMappingKey": "s",
        "Stage": "s",
      },
    }, await resp.json());
  }

  async getApiMappings(
    {abortSignal, ...params}: RequestConfig & GetApiMappingsRequest,
  ): Promise<GetApiMappingsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetApiMappings",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}/apimappings`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toApiMapping],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getApis(
    {abortSignal, ...params}: RequestConfig & GetApisRequest = {},
  ): Promise<GetApisResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetApis",
      method: "GET",
      requestUri: "/v2/apis",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toApi],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAuthorizer(
    {abortSignal, ...params}: RequestConfig & GetAuthorizerRequest,
  ): Promise<GetAuthorizerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAuthorizer",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/authorizers/${params["AuthorizerId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuthorizerCredentialsArn": "s",
        "AuthorizerId": "s",
        "AuthorizerPayloadFormatVersion": "s",
        "AuthorizerResultTtlInSeconds": "n",
        "AuthorizerType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizerType>(x),
        "AuthorizerUri": "s",
        "EnableSimpleResponses": "b",
        "IdentitySource": ["s"],
        "IdentityValidationExpression": "s",
        "JwtConfiguration": toJWTConfiguration,
        "Name": "s",
      },
    }, await resp.json());
  }

  async getAuthorizers(
    {abortSignal, ...params}: RequestConfig & GetAuthorizersRequest,
  ): Promise<GetAuthorizersResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAuthorizers",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/authorizers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toAuthorizer],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getDeployment(
    {abortSignal, ...params}: RequestConfig & GetDeploymentRequest,
  ): Promise<GetDeploymentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeployment",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/deployments/${params["DeploymentId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutoDeployed": "b",
        "CreatedDate": "d",
        "DeploymentId": "s",
        "DeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "DeploymentStatusMessage": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async getDeployments(
    {abortSignal, ...params}: RequestConfig & GetDeploymentsRequest,
  ): Promise<GetDeploymentsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDeployments",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/deployments`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toDeployment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getDomainName(
    {abortSignal, ...params}: RequestConfig & GetDomainNameRequest,
  ): Promise<GetDomainNameResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDomainName",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiMappingSelectionExpression": "s",
        "DomainName": "s",
        "DomainNameConfigurations": [toDomainNameConfiguration],
        "MutualTlsAuthentication": toMutualTlsAuthentication,
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getDomainNames(
    {abortSignal, ...params}: RequestConfig & GetDomainNamesRequest = {},
  ): Promise<GetDomainNamesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDomainNames",
      method: "GET",
      requestUri: "/v2/domainnames",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toDomainName],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getIntegration(
    {abortSignal, ...params}: RequestConfig & GetIntegrationRequest,
  ): Promise<GetIntegrationResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetIntegration",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiGatewayManaged": "b",
        "ConnectionId": "s",
        "ConnectionType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionType>(x),
        "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
        "CredentialsArn": "s",
        "Description": "s",
        "IntegrationId": "s",
        "IntegrationMethod": "s",
        "IntegrationResponseSelectionExpression": "s",
        "IntegrationSubtype": "s",
        "IntegrationType": (x: jsonP.JSONValue) => cmnP.readEnum<IntegrationType>(x),
        "IntegrationUri": "s",
        "PassthroughBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<PassthroughBehavior>(x),
        "PayloadFormatVersion": "s",
        "RequestParameters": x => jsonP.readMap(String, String, x),
        "RequestTemplates": x => jsonP.readMap(String, String, x),
        "ResponseParameters": x => jsonP.readMap(String, y => jsonP.readMap(String, String, y)!, x),
        "TemplateSelectionExpression": "s",
        "TimeoutInMillis": "n",
        "TlsConfig": toTlsConfig,
      },
    }, await resp.json());
  }

  async getIntegrationResponse(
    {abortSignal, ...params}: RequestConfig & GetIntegrationResponseRequest,
  ): Promise<GetIntegrationResponseResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetIntegrationResponse",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}/integrationresponses/${params["IntegrationResponseId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
        "IntegrationResponseId": "s",
        "IntegrationResponseKey": "s",
        "ResponseParameters": x => jsonP.readMap(String, String, x),
        "ResponseTemplates": x => jsonP.readMap(String, String, x),
        "TemplateSelectionExpression": "s",
      },
    }, await resp.json());
  }

  async getIntegrationResponses(
    {abortSignal, ...params}: RequestConfig & GetIntegrationResponsesRequest,
  ): Promise<GetIntegrationResponsesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetIntegrationResponses",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}/integrationresponses`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toIntegrationResponse],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getIntegrations(
    {abortSignal, ...params}: RequestConfig & GetIntegrationsRequest,
  ): Promise<GetIntegrationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetIntegrations",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toIntegration],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getModel(
    {abortSignal, ...params}: RequestConfig & GetModelRequest,
  ): Promise<GetModelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetModel",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/models/${params["ModelId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContentType": "s",
        "Description": "s",
        "ModelId": "s",
        "Name": "s",
        "Schema": "s",
      },
    }, await resp.json());
  }

  async getModelTemplate(
    {abortSignal, ...params}: RequestConfig & GetModelTemplateRequest,
  ): Promise<GetModelTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetModelTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/models/${params["ModelId"]}/template`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Value": "s",
      },
    }, await resp.json());
  }

  async getModels(
    {abortSignal, ...params}: RequestConfig & GetModelsRequest,
  ): Promise<GetModelsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetModels",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/models`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toModel],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getRoute(
    {abortSignal, ...params}: RequestConfig & GetRouteRequest,
  ): Promise<GetRouteResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRoute",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiGatewayManaged": "b",
        "ApiKeyRequired": "b",
        "AuthorizationScopes": ["s"],
        "AuthorizationType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizationType>(x),
        "AuthorizerId": "s",
        "ModelSelectionExpression": "s",
        "OperationName": "s",
        "RequestModels": x => jsonP.readMap(String, String, x),
        "RequestParameters": x => jsonP.readMap(String, toParameterConstraints, x),
        "RouteId": "s",
        "RouteKey": "s",
        "RouteResponseSelectionExpression": "s",
        "Target": "s",
      },
    }, await resp.json());
  }

  async getRouteResponse(
    {abortSignal, ...params}: RequestConfig & GetRouteResponseRequest,
  ): Promise<GetRouteResponseResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRouteResponse",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}/routeresponses/${params["RouteResponseId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ModelSelectionExpression": "s",
        "ResponseModels": x => jsonP.readMap(String, String, x),
        "ResponseParameters": x => jsonP.readMap(String, toParameterConstraints, x),
        "RouteResponseId": "s",
        "RouteResponseKey": "s",
      },
    }, await resp.json());
  }

  async getRouteResponses(
    {abortSignal, ...params}: RequestConfig & GetRouteResponsesRequest,
  ): Promise<GetRouteResponsesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetRouteResponses",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}/routeresponses`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toRouteResponse],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getRoutes(
    {abortSignal, ...params}: RequestConfig & GetRoutesRequest,
  ): Promise<GetRoutesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetRoutes",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toRoute],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getStage(
    {abortSignal, ...params}: RequestConfig & GetStageRequest,
  ): Promise<GetStageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetStage",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages/${params["StageName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccessLogSettings": toAccessLogSettings,
        "ApiGatewayManaged": "b",
        "AutoDeploy": "b",
        "ClientCertificateId": "s",
        "CreatedDate": "d",
        "DefaultRouteSettings": toRouteSettings,
        "DeploymentId": "s",
        "Description": "s",
        "LastDeploymentStatusMessage": "s",
        "LastUpdatedDate": "d",
        "RouteSettings": x => jsonP.readMap(String, toRouteSettings, x),
        "StageName": "s",
        "StageVariables": x => jsonP.readMap(String, String, x),
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getStages(
    {abortSignal, ...params}: RequestConfig & GetStagesRequest,
  ): Promise<GetStagesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetStages",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toStage],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getTags(
    {abortSignal, ...params}: RequestConfig & GetTagsRequest,
  ): Promise<GetTagsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetTags",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getVpcLink(
    {abortSignal, ...params}: RequestConfig & GetVpcLinkRequest,
  ): Promise<GetVpcLinkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVpcLink",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/vpclinks/${params["VpcLinkId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreatedDate": "d",
        "Name": "s",
        "SecurityGroupIds": ["s"],
        "SubnetIds": ["s"],
        "Tags": x => jsonP.readMap(String, String, x),
        "VpcLinkId": "s",
        "VpcLinkStatus": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkStatus>(x),
        "VpcLinkStatusMessage": "s",
        "VpcLinkVersion": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkVersion>(x),
      },
    }, await resp.json());
  }

  async getVpcLinks(
    {abortSignal, ...params}: RequestConfig & GetVpcLinksRequest = {},
  ): Promise<GetVpcLinksResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetVpcLinks",
      method: "GET",
      requestUri: "/v2/vpclinks",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toVpcLink],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async importApi(
    {abortSignal, ...params}: RequestConfig & ImportApiRequest,
  ): Promise<ImportApiResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      body: params["Body"],
    };
    if (params["Basepath"] != null) query.set("basepath", params["Basepath"]?.toString() ?? "");
    if (params["FailOnWarnings"] != null) query.set("failOnWarnings", params["FailOnWarnings"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ImportApi",
      method: "PUT",
      requestUri: "/v2/apis",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiEndpoint": "s",
        "ApiGatewayManaged": "b",
        "ApiId": "s",
        "ApiKeySelectionExpression": "s",
        "CorsConfiguration": toCors,
        "CreatedDate": "d",
        "Description": "s",
        "DisableSchemaValidation": "b",
        "DisableExecuteApiEndpoint": "b",
        "ImportInfo": ["s"],
        "Name": "s",
        "ProtocolType": (x: jsonP.JSONValue) => cmnP.readEnum<ProtocolType>(x),
        "RouteSelectionExpression": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Version": "s",
        "Warnings": ["s"],
      },
    }, await resp.json());
  }

  async reimportApi(
    {abortSignal, ...params}: RequestConfig & ReimportApiRequest,
  ): Promise<ReimportApiResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      body: params["Body"],
    };
    if (params["Basepath"] != null) query.set("basepath", params["Basepath"]?.toString() ?? "");
    if (params["FailOnWarnings"] != null) query.set("failOnWarnings", params["FailOnWarnings"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ReimportApi",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiEndpoint": "s",
        "ApiGatewayManaged": "b",
        "ApiId": "s",
        "ApiKeySelectionExpression": "s",
        "CorsConfiguration": toCors,
        "CreatedDate": "d",
        "Description": "s",
        "DisableSchemaValidation": "b",
        "DisableExecuteApiEndpoint": "b",
        "ImportInfo": ["s"],
        "Name": "s",
        "ProtocolType": (x: jsonP.JSONValue) => cmnP.readEnum<ProtocolType>(x),
        "RouteSelectionExpression": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Version": "s",
        "Warnings": ["s"],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/v2/tags/${params["ResourceArn"]}`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateApi(
    {abortSignal, ...params}: RequestConfig & UpdateApiRequest,
  ): Promise<UpdateApiResponse> {
    const body: jsonP.JSONObject = {
      apiKeySelectionExpression: params["ApiKeySelectionExpression"],
      corsConfiguration: fromCors(params["CorsConfiguration"]),
      credentialsArn: params["CredentialsArn"],
      description: params["Description"],
      disableSchemaValidation: params["DisableSchemaValidation"],
      disableExecuteApiEndpoint: params["DisableExecuteApiEndpoint"],
      name: params["Name"],
      routeKey: params["RouteKey"],
      routeSelectionExpression: params["RouteSelectionExpression"],
      target: params["Target"],
      version: params["Version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApi",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiEndpoint": "s",
        "ApiGatewayManaged": "b",
        "ApiId": "s",
        "ApiKeySelectionExpression": "s",
        "CorsConfiguration": toCors,
        "CreatedDate": "d",
        "Description": "s",
        "DisableSchemaValidation": "b",
        "DisableExecuteApiEndpoint": "b",
        "ImportInfo": ["s"],
        "Name": "s",
        "ProtocolType": (x: jsonP.JSONValue) => cmnP.readEnum<ProtocolType>(x),
        "RouteSelectionExpression": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Version": "s",
        "Warnings": ["s"],
      },
    }, await resp.json());
  }

  async updateApiMapping(
    {abortSignal, ...params}: RequestConfig & UpdateApiMappingRequest,
  ): Promise<UpdateApiMappingResponse> {
    const body: jsonP.JSONObject = {
      apiId: params["ApiId"],
      apiMappingKey: params["ApiMappingKey"],
      stage: params["Stage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApiMapping",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}/apimappings/${params["ApiMappingId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiId": "s",
        "ApiMappingId": "s",
        "ApiMappingKey": "s",
        "Stage": "s",
      },
    }, await resp.json());
  }

  async updateAuthorizer(
    {abortSignal, ...params}: RequestConfig & UpdateAuthorizerRequest,
  ): Promise<UpdateAuthorizerResponse> {
    const body: jsonP.JSONObject = {
      authorizerCredentialsArn: params["AuthorizerCredentialsArn"],
      authorizerPayloadFormatVersion: params["AuthorizerPayloadFormatVersion"],
      authorizerResultTtlInSeconds: params["AuthorizerResultTtlInSeconds"],
      authorizerType: params["AuthorizerType"],
      authorizerUri: params["AuthorizerUri"],
      enableSimpleResponses: params["EnableSimpleResponses"],
      identitySource: params["IdentitySource"],
      identityValidationExpression: params["IdentityValidationExpression"],
      jwtConfiguration: fromJWTConfiguration(params["JwtConfiguration"]),
      name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAuthorizer",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/authorizers/${params["AuthorizerId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AuthorizerCredentialsArn": "s",
        "AuthorizerId": "s",
        "AuthorizerPayloadFormatVersion": "s",
        "AuthorizerResultTtlInSeconds": "n",
        "AuthorizerType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizerType>(x),
        "AuthorizerUri": "s",
        "EnableSimpleResponses": "b",
        "IdentitySource": ["s"],
        "IdentityValidationExpression": "s",
        "JwtConfiguration": toJWTConfiguration,
        "Name": "s",
      },
    }, await resp.json());
  }

  async updateDeployment(
    {abortSignal, ...params}: RequestConfig & UpdateDeploymentRequest,
  ): Promise<UpdateDeploymentResponse> {
    const body: jsonP.JSONObject = {
      description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeployment",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/deployments/${params["DeploymentId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutoDeployed": "b",
        "CreatedDate": "d",
        "DeploymentId": "s",
        "DeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "DeploymentStatusMessage": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async updateDomainName(
    {abortSignal, ...params}: RequestConfig & UpdateDomainNameRequest,
  ): Promise<UpdateDomainNameResponse> {
    const body: jsonP.JSONObject = {
      domainNameConfigurations: params["DomainNameConfigurations"]?.map(x => fromDomainNameConfiguration(x)),
      mutualTlsAuthentication: fromMutualTlsAuthenticationInput(params["MutualTlsAuthentication"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainName",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/domainnames/${params["DomainName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiMappingSelectionExpression": "s",
        "DomainName": "s",
        "DomainNameConfigurations": [toDomainNameConfiguration],
        "MutualTlsAuthentication": toMutualTlsAuthentication,
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async updateIntegration(
    {abortSignal, ...params}: RequestConfig & UpdateIntegrationRequest,
  ): Promise<UpdateIntegrationResult> {
    const body: jsonP.JSONObject = {
      connectionId: params["ConnectionId"],
      connectionType: params["ConnectionType"],
      contentHandlingStrategy: params["ContentHandlingStrategy"],
      credentialsArn: params["CredentialsArn"],
      description: params["Description"],
      integrationMethod: params["IntegrationMethod"],
      integrationSubtype: params["IntegrationSubtype"],
      integrationType: params["IntegrationType"],
      integrationUri: params["IntegrationUri"],
      passthroughBehavior: params["PassthroughBehavior"],
      payloadFormatVersion: params["PayloadFormatVersion"],
      requestParameters: params["RequestParameters"],
      requestTemplates: params["RequestTemplates"],
      responseParameters: params["ResponseParameters"],
      templateSelectionExpression: params["TemplateSelectionExpression"],
      timeoutInMillis: params["TimeoutInMillis"],
      tlsConfig: fromTlsConfigInput(params["TlsConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIntegration",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiGatewayManaged": "b",
        "ConnectionId": "s",
        "ConnectionType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionType>(x),
        "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
        "CredentialsArn": "s",
        "Description": "s",
        "IntegrationId": "s",
        "IntegrationMethod": "s",
        "IntegrationResponseSelectionExpression": "s",
        "IntegrationSubtype": "s",
        "IntegrationType": (x: jsonP.JSONValue) => cmnP.readEnum<IntegrationType>(x),
        "IntegrationUri": "s",
        "PassthroughBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<PassthroughBehavior>(x),
        "PayloadFormatVersion": "s",
        "RequestParameters": x => jsonP.readMap(String, String, x),
        "RequestTemplates": x => jsonP.readMap(String, String, x),
        "ResponseParameters": x => jsonP.readMap(String, y => jsonP.readMap(String, String, y)!, x),
        "TemplateSelectionExpression": "s",
        "TimeoutInMillis": "n",
        "TlsConfig": toTlsConfig,
      },
    }, await resp.json());
  }

  async updateIntegrationResponse(
    {abortSignal, ...params}: RequestConfig & UpdateIntegrationResponseRequest,
  ): Promise<UpdateIntegrationResponseResponse> {
    const body: jsonP.JSONObject = {
      contentHandlingStrategy: params["ContentHandlingStrategy"],
      integrationResponseKey: params["IntegrationResponseKey"],
      responseParameters: params["ResponseParameters"],
      responseTemplates: params["ResponseTemplates"],
      templateSelectionExpression: params["TemplateSelectionExpression"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIntegrationResponse",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/integrations/${params["IntegrationId"]}/integrationresponses/${params["IntegrationResponseId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
        "IntegrationResponseId": "s",
        "IntegrationResponseKey": "s",
        "ResponseParameters": x => jsonP.readMap(String, String, x),
        "ResponseTemplates": x => jsonP.readMap(String, String, x),
        "TemplateSelectionExpression": "s",
      },
    }, await resp.json());
  }

  async updateModel(
    {abortSignal, ...params}: RequestConfig & UpdateModelRequest,
  ): Promise<UpdateModelResponse> {
    const body: jsonP.JSONObject = {
      contentType: params["ContentType"],
      description: params["Description"],
      name: params["Name"],
      schema: params["Schema"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateModel",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/models/${params["ModelId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContentType": "s",
        "Description": "s",
        "ModelId": "s",
        "Name": "s",
        "Schema": "s",
      },
    }, await resp.json());
  }

  async updateRoute(
    {abortSignal, ...params}: RequestConfig & UpdateRouteRequest,
  ): Promise<UpdateRouteResult> {
    const body: jsonP.JSONObject = {
      apiKeyRequired: params["ApiKeyRequired"],
      authorizationScopes: params["AuthorizationScopes"],
      authorizationType: params["AuthorizationType"],
      authorizerId: params["AuthorizerId"],
      modelSelectionExpression: params["ModelSelectionExpression"],
      operationName: params["OperationName"],
      requestModels: params["RequestModels"],
      requestParameters: jsonP.serializeMap(params["RequestParameters"], x => fromParameterConstraints(x)),
      routeKey: params["RouteKey"],
      routeResponseSelectionExpression: params["RouteResponseSelectionExpression"],
      target: params["Target"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoute",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApiGatewayManaged": "b",
        "ApiKeyRequired": "b",
        "AuthorizationScopes": ["s"],
        "AuthorizationType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizationType>(x),
        "AuthorizerId": "s",
        "ModelSelectionExpression": "s",
        "OperationName": "s",
        "RequestModels": x => jsonP.readMap(String, String, x),
        "RequestParameters": x => jsonP.readMap(String, toParameterConstraints, x),
        "RouteId": "s",
        "RouteKey": "s",
        "RouteResponseSelectionExpression": "s",
        "Target": "s",
      },
    }, await resp.json());
  }

  async updateRouteResponse(
    {abortSignal, ...params}: RequestConfig & UpdateRouteResponseRequest,
  ): Promise<UpdateRouteResponseResponse> {
    const body: jsonP.JSONObject = {
      modelSelectionExpression: params["ModelSelectionExpression"],
      responseModels: params["ResponseModels"],
      responseParameters: jsonP.serializeMap(params["ResponseParameters"], x => fromParameterConstraints(x)),
      routeResponseKey: params["RouteResponseKey"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRouteResponse",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/routes/${params["RouteId"]}/routeresponses/${params["RouteResponseId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ModelSelectionExpression": "s",
        "ResponseModels": x => jsonP.readMap(String, String, x),
        "ResponseParameters": x => jsonP.readMap(String, toParameterConstraints, x),
        "RouteResponseId": "s",
        "RouteResponseKey": "s",
      },
    }, await resp.json());
  }

  async updateStage(
    {abortSignal, ...params}: RequestConfig & UpdateStageRequest,
  ): Promise<UpdateStageResponse> {
    const body: jsonP.JSONObject = {
      accessLogSettings: fromAccessLogSettings(params["AccessLogSettings"]),
      autoDeploy: params["AutoDeploy"],
      clientCertificateId: params["ClientCertificateId"],
      defaultRouteSettings: fromRouteSettings(params["DefaultRouteSettings"]),
      deploymentId: params["DeploymentId"],
      description: params["Description"],
      routeSettings: jsonP.serializeMap(params["RouteSettings"], x => fromRouteSettings(x)),
      stageVariables: params["StageVariables"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateStage",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/apis/${params["ApiId"]}/stages/${params["StageName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccessLogSettings": toAccessLogSettings,
        "ApiGatewayManaged": "b",
        "AutoDeploy": "b",
        "ClientCertificateId": "s",
        "CreatedDate": "d",
        "DefaultRouteSettings": toRouteSettings,
        "DeploymentId": "s",
        "Description": "s",
        "LastDeploymentStatusMessage": "s",
        "LastUpdatedDate": "d",
        "RouteSettings": x => jsonP.readMap(String, toRouteSettings, x),
        "StageName": "s",
        "StageVariables": x => jsonP.readMap(String, String, x),
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async updateVpcLink(
    {abortSignal, ...params}: RequestConfig & UpdateVpcLinkRequest,
  ): Promise<UpdateVpcLinkResponse> {
    const body: jsonP.JSONObject = {
      name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVpcLink",
      method: "PATCH",
      requestUri: cmnP.encodePath`/v2/vpclinks/${params["VpcLinkId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreatedDate": "d",
        "Name": "s",
        "SecurityGroupIds": ["s"],
        "SubnetIds": ["s"],
        "Tags": x => jsonP.readMap(String, String, x),
        "VpcLinkId": "s",
        "VpcLinkStatus": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkStatus>(x),
        "VpcLinkStatusMessage": "s",
        "VpcLinkVersion": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkVersion>(x),
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateApiRequest {
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  Name: string;
  ProtocolType: ProtocolType;
  RouteKey?: string | null;
  RouteSelectionExpression?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Target?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateApiMappingRequest {
  ApiId: string;
  ApiMappingKey?: string | null;
  DomainName: string;
  Stage: string;
}

// refs: 1 - tags: named, input
export interface CreateAuthorizerRequest {
  ApiId: string;
  AuthorizerCredentialsArn?: string | null;
  AuthorizerPayloadFormatVersion?: string | null;
  AuthorizerResultTtlInSeconds?: number | null;
  AuthorizerType: AuthorizerType;
  AuthorizerUri?: string | null;
  EnableSimpleResponses?: boolean | null;
  IdentitySource: string[];
  IdentityValidationExpression?: string | null;
  JwtConfiguration?: JWTConfiguration | null;
  Name: string;
}

// refs: 1 - tags: named, input
export interface CreateDeploymentRequest {
  ApiId: string;
  Description?: string | null;
  StageName?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDomainNameRequest {
  DomainName: string;
  DomainNameConfigurations?: DomainNameConfiguration[] | null;
  MutualTlsAuthentication?: MutualTlsAuthenticationInput | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateIntegrationRequest {
  ApiId: string;
  ConnectionId?: string | null;
  ConnectionType?: ConnectionType | null;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  IntegrationMethod?: string | null;
  IntegrationSubtype?: string | null;
  IntegrationType: IntegrationType;
  IntegrationUri?: string | null;
  PassthroughBehavior?: PassthroughBehavior | null;
  PayloadFormatVersion?: string | null;
  RequestParameters?: { [key: string]: string | null | undefined } | null;
  RequestTemplates?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: { [key: string]: string | null | undefined } | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
  TimeoutInMillis?: number | null;
  TlsConfig?: TlsConfigInput | null;
}

// refs: 1 - tags: named, input
export interface CreateIntegrationResponseRequest {
  ApiId: string;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  IntegrationId: string;
  IntegrationResponseKey: string;
  ResponseParameters?: { [key: string]: string | null | undefined } | null;
  ResponseTemplates?: { [key: string]: string | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateModelRequest {
  ApiId: string;
  ContentType?: string | null;
  Description?: string | null;
  Name: string;
  Schema: string;
}

// refs: 1 - tags: named, input
export interface CreateRouteRequest {
  ApiId: string;
  ApiKeyRequired?: boolean | null;
  AuthorizationScopes?: string[] | null;
  AuthorizationType?: AuthorizationType | null;
  AuthorizerId?: string | null;
  ModelSelectionExpression?: string | null;
  OperationName?: string | null;
  RequestModels?: { [key: string]: string | null | undefined } | null;
  RequestParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteKey: string;
  RouteResponseSelectionExpression?: string | null;
  Target?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateRouteResponseRequest {
  ApiId: string;
  ModelSelectionExpression?: string | null;
  ResponseModels?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteId: string;
  RouteResponseKey: string;
}

// refs: 1 - tags: named, input
export interface CreateStageRequest {
  AccessLogSettings?: AccessLogSettings | null;
  ApiId: string;
  AutoDeploy?: boolean | null;
  ClientCertificateId?: string | null;
  DefaultRouteSettings?: RouteSettings | null;
  DeploymentId?: string | null;
  Description?: string | null;
  RouteSettings?: { [key: string]: RouteSettings | null | undefined } | null;
  StageName: string;
  StageVariables?: { [key: string]: string | null | undefined } | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateVpcLinkRequest {
  Name: string;
  SecurityGroupIds?: string[] | null;
  SubnetIds: string[];
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteAccessLogSettingsRequest {
  ApiId: string;
  StageName: string;
}

// refs: 1 - tags: named, input
export interface DeleteApiRequest {
  ApiId: string;
}

// refs: 1 - tags: named, input
export interface DeleteApiMappingRequest {
  ApiMappingId: string;
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteAuthorizerRequest {
  ApiId: string;
  AuthorizerId: string;
}

// refs: 1 - tags: named, input
export interface DeleteCorsConfigurationRequest {
  ApiId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDeploymentRequest {
  ApiId: string;
  DeploymentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDomainNameRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteIntegrationRequest {
  ApiId: string;
  IntegrationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteIntegrationResponseRequest {
  ApiId: string;
  IntegrationId: string;
  IntegrationResponseId: string;
}

// refs: 1 - tags: named, input
export interface DeleteModelRequest {
  ApiId: string;
  ModelId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRouteRequest {
  ApiId: string;
  RouteId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRouteRequestParameterRequest {
  ApiId: string;
  RequestParameterKey: string;
  RouteId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRouteResponseRequest {
  ApiId: string;
  RouteId: string;
  RouteResponseId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRouteSettingsRequest {
  ApiId: string;
  RouteKey: string;
  StageName: string;
}

// refs: 1 - tags: named, input
export interface DeleteStageRequest {
  ApiId: string;
  StageName: string;
}

// refs: 1 - tags: named, input
export interface DeleteVpcLinkRequest {
  VpcLinkId: string;
}

// refs: 1 - tags: named, input
export interface ExportApiRequest {
  ApiId: string;
  ExportVersion?: string | null;
  IncludeExtensions?: boolean | null;
  OutputType: string;
  Specification: string;
  StageName?: string | null;
}

// refs: 1 - tags: named, input
export interface ResetAuthorizersCacheRequest {
  ApiId: string;
  StageName: string;
}

// refs: 1 - tags: named, input
export interface GetApiRequest {
  ApiId: string;
}

// refs: 1 - tags: named, input
export interface GetApiMappingRequest {
  ApiMappingId: string;
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface GetApiMappingsRequest {
  DomainName: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetApisRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAuthorizerRequest {
  ApiId: string;
  AuthorizerId: string;
}

// refs: 1 - tags: named, input
export interface GetAuthorizersRequest {
  ApiId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDeploymentRequest {
  ApiId: string;
  DeploymentId: string;
}

// refs: 1 - tags: named, input
export interface GetDeploymentsRequest {
  ApiId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDomainNameRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface GetDomainNamesRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetIntegrationRequest {
  ApiId: string;
  IntegrationId: string;
}

// refs: 1 - tags: named, input
export interface GetIntegrationResponseRequest {
  ApiId: string;
  IntegrationId: string;
  IntegrationResponseId: string;
}

// refs: 1 - tags: named, input
export interface GetIntegrationResponsesRequest {
  ApiId: string;
  IntegrationId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetIntegrationsRequest {
  ApiId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetModelRequest {
  ApiId: string;
  ModelId: string;
}

// refs: 1 - tags: named, input
export interface GetModelTemplateRequest {
  ApiId: string;
  ModelId: string;
}

// refs: 1 - tags: named, input
export interface GetModelsRequest {
  ApiId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRouteRequest {
  ApiId: string;
  RouteId: string;
}

// refs: 1 - tags: named, input
export interface GetRouteResponseRequest {
  ApiId: string;
  RouteId: string;
  RouteResponseId: string;
}

// refs: 1 - tags: named, input
export interface GetRouteResponsesRequest {
  ApiId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
  RouteId: string;
}

// refs: 1 - tags: named, input
export interface GetRoutesRequest {
  ApiId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetStageRequest {
  ApiId: string;
  StageName: string;
}

// refs: 1 - tags: named, input
export interface GetStagesRequest {
  ApiId: string;
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetTagsRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface GetVpcLinkRequest {
  VpcLinkId: string;
}

// refs: 1 - tags: named, input
export interface GetVpcLinksRequest {
  MaxResults?: string | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ImportApiRequest {
  Basepath?: string | null;
  Body: string;
  FailOnWarnings?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ReimportApiRequest {
  ApiId: string;
  Basepath?: string | null;
  Body: string;
  FailOnWarnings?: boolean | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateApiRequest {
  ApiId: string;
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  Name?: string | null;
  RouteKey?: string | null;
  RouteSelectionExpression?: string | null;
  Target?: string | null;
  Version?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateApiMappingRequest {
  ApiId: string;
  ApiMappingId: string;
  ApiMappingKey?: string | null;
  DomainName: string;
  Stage?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAuthorizerRequest {
  ApiId: string;
  AuthorizerCredentialsArn?: string | null;
  AuthorizerId: string;
  AuthorizerPayloadFormatVersion?: string | null;
  AuthorizerResultTtlInSeconds?: number | null;
  AuthorizerType?: AuthorizerType | null;
  AuthorizerUri?: string | null;
  EnableSimpleResponses?: boolean | null;
  IdentitySource?: string[] | null;
  IdentityValidationExpression?: string | null;
  JwtConfiguration?: JWTConfiguration | null;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDeploymentRequest {
  ApiId: string;
  DeploymentId: string;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDomainNameRequest {
  DomainName: string;
  DomainNameConfigurations?: DomainNameConfiguration[] | null;
  MutualTlsAuthentication?: MutualTlsAuthenticationInput | null;
}

// refs: 1 - tags: named, input
export interface UpdateIntegrationRequest {
  ApiId: string;
  ConnectionId?: string | null;
  ConnectionType?: ConnectionType | null;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  IntegrationId: string;
  IntegrationMethod?: string | null;
  IntegrationSubtype?: string | null;
  IntegrationType?: IntegrationType | null;
  IntegrationUri?: string | null;
  PassthroughBehavior?: PassthroughBehavior | null;
  PayloadFormatVersion?: string | null;
  RequestParameters?: { [key: string]: string | null | undefined } | null;
  RequestTemplates?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: { [key: string]: string | null | undefined } | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
  TimeoutInMillis?: number | null;
  TlsConfig?: TlsConfigInput | null;
}

// refs: 1 - tags: named, input
export interface UpdateIntegrationResponseRequest {
  ApiId: string;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  IntegrationId: string;
  IntegrationResponseId: string;
  IntegrationResponseKey?: string | null;
  ResponseParameters?: { [key: string]: string | null | undefined } | null;
  ResponseTemplates?: { [key: string]: string | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateModelRequest {
  ApiId: string;
  ContentType?: string | null;
  Description?: string | null;
  ModelId: string;
  Name?: string | null;
  Schema?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRouteRequest {
  ApiId: string;
  ApiKeyRequired?: boolean | null;
  AuthorizationScopes?: string[] | null;
  AuthorizationType?: AuthorizationType | null;
  AuthorizerId?: string | null;
  ModelSelectionExpression?: string | null;
  OperationName?: string | null;
  RequestModels?: { [key: string]: string | null | undefined } | null;
  RequestParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteId: string;
  RouteKey?: string | null;
  RouteResponseSelectionExpression?: string | null;
  Target?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRouteResponseRequest {
  ApiId: string;
  ModelSelectionExpression?: string | null;
  ResponseModels?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteId: string;
  RouteResponseId: string;
  RouteResponseKey?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateStageRequest {
  AccessLogSettings?: AccessLogSettings | null;
  ApiId: string;
  AutoDeploy?: boolean | null;
  ClientCertificateId?: string | null;
  DefaultRouteSettings?: RouteSettings | null;
  DeploymentId?: string | null;
  Description?: string | null;
  RouteSettings?: { [key: string]: RouteSettings | null | undefined } | null;
  StageName: string;
  StageVariables?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UpdateVpcLinkRequest {
  Name?: string | null;
  VpcLinkId: string;
}

// refs: 1 - tags: named, output
export interface CreateApiResponse {
  ApiEndpoint?: string | null;
  ApiGatewayManaged?: boolean | null;
  ApiId?: string | null;
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CreatedDate?: Date | number | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  ImportInfo?: string[] | null;
  Name?: string | null;
  ProtocolType?: ProtocolType | null;
  RouteSelectionExpression?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Version?: string | null;
  Warnings?: string[] | null;
}

// refs: 1 - tags: named, output
export interface CreateApiMappingResponse {
  ApiId?: string | null;
  ApiMappingId?: string | null;
  ApiMappingKey?: string | null;
  Stage?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateAuthorizerResponse {
  AuthorizerCredentialsArn?: string | null;
  AuthorizerId?: string | null;
  AuthorizerPayloadFormatVersion?: string | null;
  AuthorizerResultTtlInSeconds?: number | null;
  AuthorizerType?: AuthorizerType | null;
  AuthorizerUri?: string | null;
  EnableSimpleResponses?: boolean | null;
  IdentitySource?: string[] | null;
  IdentityValidationExpression?: string | null;
  JwtConfiguration?: JWTConfiguration | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDeploymentResponse {
  AutoDeployed?: boolean | null;
  CreatedDate?: Date | number | null;
  DeploymentId?: string | null;
  DeploymentStatus?: DeploymentStatus | null;
  DeploymentStatusMessage?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDomainNameResponse {
  ApiMappingSelectionExpression?: string | null;
  DomainName?: string | null;
  DomainNameConfigurations?: DomainNameConfiguration[] | null;
  MutualTlsAuthentication?: MutualTlsAuthentication | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateIntegrationResult {
  ApiGatewayManaged?: boolean | null;
  ConnectionId?: string | null;
  ConnectionType?: ConnectionType | null;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  IntegrationId?: string | null;
  IntegrationMethod?: string | null;
  IntegrationResponseSelectionExpression?: string | null;
  IntegrationSubtype?: string | null;
  IntegrationType?: IntegrationType | null;
  IntegrationUri?: string | null;
  PassthroughBehavior?: PassthroughBehavior | null;
  PayloadFormatVersion?: string | null;
  RequestParameters?: { [key: string]: string | null | undefined } | null;
  RequestTemplates?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: { [key: string]: string | null | undefined } | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
  TimeoutInMillis?: number | null;
  TlsConfig?: TlsConfig | null;
}

// refs: 1 - tags: named, output
export interface CreateIntegrationResponseResponse {
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  IntegrationResponseId?: string | null;
  IntegrationResponseKey?: string | null;
  ResponseParameters?: { [key: string]: string | null | undefined } | null;
  ResponseTemplates?: { [key: string]: string | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateModelResponse {
  ContentType?: string | null;
  Description?: string | null;
  ModelId?: string | null;
  Name?: string | null;
  Schema?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRouteResult {
  ApiGatewayManaged?: boolean | null;
  ApiKeyRequired?: boolean | null;
  AuthorizationScopes?: string[] | null;
  AuthorizationType?: AuthorizationType | null;
  AuthorizerId?: string | null;
  ModelSelectionExpression?: string | null;
  OperationName?: string | null;
  RequestModels?: { [key: string]: string | null | undefined } | null;
  RequestParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteId?: string | null;
  RouteKey?: string | null;
  RouteResponseSelectionExpression?: string | null;
  Target?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRouteResponseResponse {
  ModelSelectionExpression?: string | null;
  ResponseModels?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteResponseId?: string | null;
  RouteResponseKey?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateStageResponse {
  AccessLogSettings?: AccessLogSettings | null;
  ApiGatewayManaged?: boolean | null;
  AutoDeploy?: boolean | null;
  ClientCertificateId?: string | null;
  CreatedDate?: Date | number | null;
  DefaultRouteSettings?: RouteSettings | null;
  DeploymentId?: string | null;
  Description?: string | null;
  LastDeploymentStatusMessage?: string | null;
  LastUpdatedDate?: Date | number | null;
  RouteSettings?: { [key: string]: RouteSettings | null | undefined } | null;
  StageName?: string | null;
  StageVariables?: { [key: string]: string | null | undefined } | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateVpcLinkResponse {
  CreatedDate?: Date | number | null;
  Name?: string | null;
  SecurityGroupIds?: string[] | null;
  SubnetIds?: string[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  VpcLinkId?: string | null;
  VpcLinkStatus?: VpcLinkStatus | null;
  VpcLinkStatusMessage?: string | null;
  VpcLinkVersion?: VpcLinkVersion | null;
}

// refs: 1 - tags: named, output
export interface DeleteVpcLinkResponse {
}

// refs: 1 - tags: named, output
export interface ExportApiResponse {
  body?: Uint8Array | string | null;
}

// refs: 1 - tags: named, output
export interface GetApiResponse {
  ApiEndpoint?: string | null;
  ApiGatewayManaged?: boolean | null;
  ApiId?: string | null;
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CreatedDate?: Date | number | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  ImportInfo?: string[] | null;
  Name?: string | null;
  ProtocolType?: ProtocolType | null;
  RouteSelectionExpression?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Version?: string | null;
  Warnings?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetApiMappingResponse {
  ApiId?: string | null;
  ApiMappingId?: string | null;
  ApiMappingKey?: string | null;
  Stage?: string | null;
}

// refs: 1 - tags: named, output
export interface GetApiMappingsResponse {
  Items?: ApiMapping[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetApisResponse {
  Items?: Api[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAuthorizerResponse {
  AuthorizerCredentialsArn?: string | null;
  AuthorizerId?: string | null;
  AuthorizerPayloadFormatVersion?: string | null;
  AuthorizerResultTtlInSeconds?: number | null;
  AuthorizerType?: AuthorizerType | null;
  AuthorizerUri?: string | null;
  EnableSimpleResponses?: boolean | null;
  IdentitySource?: string[] | null;
  IdentityValidationExpression?: string | null;
  JwtConfiguration?: JWTConfiguration | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAuthorizersResponse {
  Items?: Authorizer[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDeploymentResponse {
  AutoDeployed?: boolean | null;
  CreatedDate?: Date | number | null;
  DeploymentId?: string | null;
  DeploymentStatus?: DeploymentStatus | null;
  DeploymentStatusMessage?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDeploymentsResponse {
  Items?: Deployment[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDomainNameResponse {
  ApiMappingSelectionExpression?: string | null;
  DomainName?: string | null;
  DomainNameConfigurations?: DomainNameConfiguration[] | null;
  MutualTlsAuthentication?: MutualTlsAuthentication | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetDomainNamesResponse {
  Items?: DomainName[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetIntegrationResult {
  ApiGatewayManaged?: boolean | null;
  ConnectionId?: string | null;
  ConnectionType?: ConnectionType | null;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  IntegrationId?: string | null;
  IntegrationMethod?: string | null;
  IntegrationResponseSelectionExpression?: string | null;
  IntegrationSubtype?: string | null;
  IntegrationType?: IntegrationType | null;
  IntegrationUri?: string | null;
  PassthroughBehavior?: PassthroughBehavior | null;
  PayloadFormatVersion?: string | null;
  RequestParameters?: { [key: string]: string | null | undefined } | null;
  RequestTemplates?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: { [key: string]: string | null | undefined } | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
  TimeoutInMillis?: number | null;
  TlsConfig?: TlsConfig | null;
}

// refs: 1 - tags: named, output
export interface GetIntegrationResponseResponse {
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  IntegrationResponseId?: string | null;
  IntegrationResponseKey?: string | null;
  ResponseParameters?: { [key: string]: string | null | undefined } | null;
  ResponseTemplates?: { [key: string]: string | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
}

// refs: 1 - tags: named, output
export interface GetIntegrationResponsesResponse {
  Items?: IntegrationResponse[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetIntegrationsResponse {
  Items?: Integration[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetModelResponse {
  ContentType?: string | null;
  Description?: string | null;
  ModelId?: string | null;
  Name?: string | null;
  Schema?: string | null;
}

// refs: 1 - tags: named, output
export interface GetModelTemplateResponse {
  Value?: string | null;
}

// refs: 1 - tags: named, output
export interface GetModelsResponse {
  Items?: Model[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRouteResult {
  ApiGatewayManaged?: boolean | null;
  ApiKeyRequired?: boolean | null;
  AuthorizationScopes?: string[] | null;
  AuthorizationType?: AuthorizationType | null;
  AuthorizerId?: string | null;
  ModelSelectionExpression?: string | null;
  OperationName?: string | null;
  RequestModels?: { [key: string]: string | null | undefined } | null;
  RequestParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteId?: string | null;
  RouteKey?: string | null;
  RouteResponseSelectionExpression?: string | null;
  Target?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRouteResponseResponse {
  ModelSelectionExpression?: string | null;
  ResponseModels?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteResponseId?: string | null;
  RouteResponseKey?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRouteResponsesResponse {
  Items?: RouteResponse[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRoutesResponse {
  Items?: Route[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetStageResponse {
  AccessLogSettings?: AccessLogSettings | null;
  ApiGatewayManaged?: boolean | null;
  AutoDeploy?: boolean | null;
  ClientCertificateId?: string | null;
  CreatedDate?: Date | number | null;
  DefaultRouteSettings?: RouteSettings | null;
  DeploymentId?: string | null;
  Description?: string | null;
  LastDeploymentStatusMessage?: string | null;
  LastUpdatedDate?: Date | number | null;
  RouteSettings?: { [key: string]: RouteSettings | null | undefined } | null;
  StageName?: string | null;
  StageVariables?: { [key: string]: string | null | undefined } | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetStagesResponse {
  Items?: Stage[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetTagsResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetVpcLinkResponse {
  CreatedDate?: Date | number | null;
  Name?: string | null;
  SecurityGroupIds?: string[] | null;
  SubnetIds?: string[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  VpcLinkId?: string | null;
  VpcLinkStatus?: VpcLinkStatus | null;
  VpcLinkStatusMessage?: string | null;
  VpcLinkVersion?: VpcLinkVersion | null;
}

// refs: 1 - tags: named, output
export interface GetVpcLinksResponse {
  Items?: VpcLink[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ImportApiResponse {
  ApiEndpoint?: string | null;
  ApiGatewayManaged?: boolean | null;
  ApiId?: string | null;
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CreatedDate?: Date | number | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  ImportInfo?: string[] | null;
  Name?: string | null;
  ProtocolType?: ProtocolType | null;
  RouteSelectionExpression?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Version?: string | null;
  Warnings?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ReimportApiResponse {
  ApiEndpoint?: string | null;
  ApiGatewayManaged?: boolean | null;
  ApiId?: string | null;
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CreatedDate?: Date | number | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  ImportInfo?: string[] | null;
  Name?: string | null;
  ProtocolType?: ProtocolType | null;
  RouteSelectionExpression?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Version?: string | null;
  Warnings?: string[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateApiResponse {
  ApiEndpoint?: string | null;
  ApiGatewayManaged?: boolean | null;
  ApiId?: string | null;
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CreatedDate?: Date | number | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  ImportInfo?: string[] | null;
  Name?: string | null;
  ProtocolType?: ProtocolType | null;
  RouteSelectionExpression?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Version?: string | null;
  Warnings?: string[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateApiMappingResponse {
  ApiId?: string | null;
  ApiMappingId?: string | null;
  ApiMappingKey?: string | null;
  Stage?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateAuthorizerResponse {
  AuthorizerCredentialsArn?: string | null;
  AuthorizerId?: string | null;
  AuthorizerPayloadFormatVersion?: string | null;
  AuthorizerResultTtlInSeconds?: number | null;
  AuthorizerType?: AuthorizerType | null;
  AuthorizerUri?: string | null;
  EnableSimpleResponses?: boolean | null;
  IdentitySource?: string[] | null;
  IdentityValidationExpression?: string | null;
  JwtConfiguration?: JWTConfiguration | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateDeploymentResponse {
  AutoDeployed?: boolean | null;
  CreatedDate?: Date | number | null;
  DeploymentId?: string | null;
  DeploymentStatus?: DeploymentStatus | null;
  DeploymentStatusMessage?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateDomainNameResponse {
  ApiMappingSelectionExpression?: string | null;
  DomainName?: string | null;
  DomainNameConfigurations?: DomainNameConfiguration[] | null;
  MutualTlsAuthentication?: MutualTlsAuthentication | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface UpdateIntegrationResult {
  ApiGatewayManaged?: boolean | null;
  ConnectionId?: string | null;
  ConnectionType?: ConnectionType | null;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  IntegrationId?: string | null;
  IntegrationMethod?: string | null;
  IntegrationResponseSelectionExpression?: string | null;
  IntegrationSubtype?: string | null;
  IntegrationType?: IntegrationType | null;
  IntegrationUri?: string | null;
  PassthroughBehavior?: PassthroughBehavior | null;
  PayloadFormatVersion?: string | null;
  RequestParameters?: { [key: string]: string | null | undefined } | null;
  RequestTemplates?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: { [key: string]: string | null | undefined } | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
  TimeoutInMillis?: number | null;
  TlsConfig?: TlsConfig | null;
}

// refs: 1 - tags: named, output
export interface UpdateIntegrationResponseResponse {
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  IntegrationResponseId?: string | null;
  IntegrationResponseKey?: string | null;
  ResponseParameters?: { [key: string]: string | null | undefined } | null;
  ResponseTemplates?: { [key: string]: string | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateModelResponse {
  ContentType?: string | null;
  Description?: string | null;
  ModelId?: string | null;
  Name?: string | null;
  Schema?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateRouteResult {
  ApiGatewayManaged?: boolean | null;
  ApiKeyRequired?: boolean | null;
  AuthorizationScopes?: string[] | null;
  AuthorizationType?: AuthorizationType | null;
  AuthorizerId?: string | null;
  ModelSelectionExpression?: string | null;
  OperationName?: string | null;
  RequestModels?: { [key: string]: string | null | undefined } | null;
  RequestParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteId?: string | null;
  RouteKey?: string | null;
  RouteResponseSelectionExpression?: string | null;
  Target?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateRouteResponseResponse {
  ModelSelectionExpression?: string | null;
  ResponseModels?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteResponseId?: string | null;
  RouteResponseKey?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateStageResponse {
  AccessLogSettings?: AccessLogSettings | null;
  ApiGatewayManaged?: boolean | null;
  AutoDeploy?: boolean | null;
  ClientCertificateId?: string | null;
  CreatedDate?: Date | number | null;
  DefaultRouteSettings?: RouteSettings | null;
  DeploymentId?: string | null;
  Description?: string | null;
  LastDeploymentStatusMessage?: string | null;
  LastUpdatedDate?: Date | number | null;
  RouteSettings?: { [key: string]: RouteSettings | null | undefined } | null;
  StageName?: string | null;
  StageVariables?: { [key: string]: string | null | undefined } | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface UpdateVpcLinkResponse {
  CreatedDate?: Date | number | null;
  Name?: string | null;
  SecurityGroupIds?: string[] | null;
  SubnetIds?: string[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  VpcLinkId?: string | null;
  VpcLinkStatus?: VpcLinkStatus | null;
  VpcLinkStatusMessage?: string | null;
  VpcLinkVersion?: VpcLinkVersion | null;
}

// refs: 8 - tags: input, named, interface, output
export interface Cors {
  AllowCredentials?: boolean | null;
  AllowHeaders?: string[] | null;
  AllowMethods?: string[] | null;
  AllowOrigins?: string[] | null;
  ExposeHeaders?: string[] | null;
  MaxAge?: number | null;
}
function fromCors(input?: Cors | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    allowCredentials: input["AllowCredentials"],
    allowHeaders: input["AllowHeaders"],
    allowMethods: input["AllowMethods"],
    allowOrigins: input["AllowOrigins"],
    exposeHeaders: input["ExposeHeaders"],
    maxAge: input["MaxAge"],
  }
}
function toCors(root: jsonP.JSONValue): Cors {
  return jsonP.readObj({
    required: {},
    optional: {
      "AllowCredentials": "b",
      "AllowHeaders": ["s"],
      "AllowMethods": ["s"],
      "AllowOrigins": ["s"],
      "ExposeHeaders": ["s"],
      "MaxAge": "n",
    },
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type ProtocolType =
| "WEBSOCKET"
| "HTTP"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type AuthorizerType =
| "REQUEST"
| "JWT"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface JWTConfiguration {
  Audience?: string[] | null;
  Issuer?: string | null;
}
function fromJWTConfiguration(input?: JWTConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    audience: input["Audience"],
    issuer: input["Issuer"],
  }
}
function toJWTConfiguration(root: jsonP.JSONValue): JWTConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Audience": ["s"],
      "Issuer": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface DomainNameConfiguration {
  ApiGatewayDomainName?: string | null;
  CertificateArn?: string | null;
  CertificateName?: string | null;
  CertificateUploadDate?: Date | number | null;
  DomainNameStatus?: DomainNameStatus | null;
  DomainNameStatusMessage?: string | null;
  EndpointType?: EndpointType | null;
  HostedZoneId?: string | null;
  SecurityPolicy?: SecurityPolicy | null;
}
function fromDomainNameConfiguration(input?: DomainNameConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    apiGatewayDomainName: input["ApiGatewayDomainName"],
    certificateArn: input["CertificateArn"],
    certificateName: input["CertificateName"],
    certificateUploadDate: jsonP.serializeDate_iso8601(input["CertificateUploadDate"]),
    domainNameStatus: input["DomainNameStatus"],
    domainNameStatusMessage: input["DomainNameStatusMessage"],
    endpointType: input["EndpointType"],
    hostedZoneId: input["HostedZoneId"],
    securityPolicy: input["SecurityPolicy"],
  }
}
function toDomainNameConfiguration(root: jsonP.JSONValue): DomainNameConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApiGatewayDomainName": "s",
      "CertificateArn": "s",
      "CertificateName": "s",
      "CertificateUploadDate": "d",
      "DomainNameStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DomainNameStatus>(x),
      "DomainNameStatusMessage": "s",
      "EndpointType": (x: jsonP.JSONValue) => cmnP.readEnum<EndpointType>(x),
      "HostedZoneId": "s",
      "SecurityPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<SecurityPolicy>(x),
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type DomainNameStatus =
| "AVAILABLE"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type EndpointType =
| "REGIONAL"
| "EDGE"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type SecurityPolicy =
| "TLS_1_0"
| "TLS_1_2"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface MutualTlsAuthenticationInput {
  TruststoreUri?: string | null;
  TruststoreVersion?: string | null;
}
function fromMutualTlsAuthenticationInput(input?: MutualTlsAuthenticationInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    truststoreUri: input["TruststoreUri"],
    truststoreVersion: input["TruststoreVersion"],
  }
}

// refs: 6 - tags: input, named, enum, output
export type ConnectionType =
| "INTERNET"
| "VPC_LINK"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, enum, output
export type ContentHandlingStrategy =
| "CONVERT_TO_BINARY"
| "CONVERT_TO_TEXT"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type IntegrationType =
| "AWS"
| "HTTP"
| "MOCK"
| "HTTP_PROXY"
| "AWS_PROXY"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type PassthroughBehavior =
| "WHEN_NO_MATCH"
| "NEVER"
| "WHEN_NO_TEMPLATES"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface TlsConfigInput {
  ServerNameToVerify?: string | null;
}
function fromTlsConfigInput(input?: TlsConfigInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    serverNameToVerify: input["ServerNameToVerify"],
  }
}

// refs: 6 - tags: input, named, enum, output
export type AuthorizationType =
| "NONE"
| "AWS_IAM"
| "CUSTOM"
| "JWT"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, interface, output
export interface ParameterConstraints {
  Required?: boolean | null;
}
function fromParameterConstraints(input?: ParameterConstraints | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    required: input["Required"],
  }
}
function toParameterConstraints(root: jsonP.JSONValue): ParameterConstraints {
  return jsonP.readObj({
    required: {},
    optional: {
      "Required": "b",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface AccessLogSettings {
  DestinationArn?: string | null;
  Format?: string | null;
}
function fromAccessLogSettings(input?: AccessLogSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    destinationArn: input["DestinationArn"],
    format: input["Format"],
  }
}
function toAccessLogSettings(root: jsonP.JSONValue): AccessLogSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationArn": "s",
      "Format": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface RouteSettings {
  DataTraceEnabled?: boolean | null;
  DetailedMetricsEnabled?: boolean | null;
  LoggingLevel?: LoggingLevel | null;
  ThrottlingBurstLimit?: number | null;
  ThrottlingRateLimit?: number | null;
}
function fromRouteSettings(input?: RouteSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dataTraceEnabled: input["DataTraceEnabled"],
    detailedMetricsEnabled: input["DetailedMetricsEnabled"],
    loggingLevel: input["LoggingLevel"],
    throttlingBurstLimit: input["ThrottlingBurstLimit"],
    throttlingRateLimit: input["ThrottlingRateLimit"],
  }
}
function toRouteSettings(root: jsonP.JSONValue): RouteSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataTraceEnabled": "b",
      "DetailedMetricsEnabled": "b",
      "LoggingLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LoggingLevel>(x),
      "ThrottlingBurstLimit": "n",
      "ThrottlingRateLimit": "n",
    },
  }, root);
}

// refs: 12 - tags: input, named, enum, output
export type LoggingLevel =
| "ERROR"
| "INFO"
| "OFF"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, enum
export type DeploymentStatus =
| "PENDING"
| "FAILED"
| "DEPLOYED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface MutualTlsAuthentication {
  TruststoreUri?: string | null;
  TruststoreVersion?: string | null;
  TruststoreWarnings?: string[] | null;
}
function toMutualTlsAuthentication(root: jsonP.JSONValue): MutualTlsAuthentication {
  return jsonP.readObj({
    required: {},
    optional: {
      "TruststoreUri": "s",
      "TruststoreVersion": "s",
      "TruststoreWarnings": ["s"],
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface TlsConfig {
  ServerNameToVerify?: string | null;
}
function toTlsConfig(root: jsonP.JSONValue): TlsConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServerNameToVerify": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type VpcLinkStatus =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "FAILED"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, enum
export type VpcLinkVersion =
| "V2"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ApiMapping {
  ApiId: string;
  ApiMappingId?: string | null;
  ApiMappingKey?: string | null;
  Stage: string;
}
function toApiMapping(root: jsonP.JSONValue): ApiMapping {
  return jsonP.readObj({
    required: {
      "ApiId": "s",
      "Stage": "s",
    },
    optional: {
      "ApiMappingId": "s",
      "ApiMappingKey": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Api {
  ApiEndpoint?: string | null;
  ApiGatewayManaged?: boolean | null;
  ApiId?: string | null;
  ApiKeySelectionExpression?: string | null;
  CorsConfiguration?: Cors | null;
  CreatedDate?: Date | number | null;
  Description?: string | null;
  DisableSchemaValidation?: boolean | null;
  DisableExecuteApiEndpoint?: boolean | null;
  ImportInfo?: string[] | null;
  Name: string;
  ProtocolType: ProtocolType;
  RouteSelectionExpression: string;
  Tags?: { [key: string]: string | null | undefined } | null;
  Version?: string | null;
  Warnings?: string[] | null;
}
function toApi(root: jsonP.JSONValue): Api {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "ProtocolType": (x: jsonP.JSONValue) => cmnP.readEnum<ProtocolType>(x),
      "RouteSelectionExpression": "s",
    },
    optional: {
      "ApiEndpoint": "s",
      "ApiGatewayManaged": "b",
      "ApiId": "s",
      "ApiKeySelectionExpression": "s",
      "CorsConfiguration": toCors,
      "CreatedDate": "d",
      "Description": "s",
      "DisableSchemaValidation": "b",
      "DisableExecuteApiEndpoint": "b",
      "ImportInfo": ["s"],
      "Tags": x => jsonP.readMap(String, String, x),
      "Version": "s",
      "Warnings": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Authorizer {
  AuthorizerCredentialsArn?: string | null;
  AuthorizerId?: string | null;
  AuthorizerPayloadFormatVersion?: string | null;
  AuthorizerResultTtlInSeconds?: number | null;
  AuthorizerType?: AuthorizerType | null;
  AuthorizerUri?: string | null;
  EnableSimpleResponses?: boolean | null;
  IdentitySource?: string[] | null;
  IdentityValidationExpression?: string | null;
  JwtConfiguration?: JWTConfiguration | null;
  Name: string;
}
function toAuthorizer(root: jsonP.JSONValue): Authorizer {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "AuthorizerCredentialsArn": "s",
      "AuthorizerId": "s",
      "AuthorizerPayloadFormatVersion": "s",
      "AuthorizerResultTtlInSeconds": "n",
      "AuthorizerType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizerType>(x),
      "AuthorizerUri": "s",
      "EnableSimpleResponses": "b",
      "IdentitySource": ["s"],
      "IdentityValidationExpression": "s",
      "JwtConfiguration": toJWTConfiguration,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Deployment {
  AutoDeployed?: boolean | null;
  CreatedDate?: Date | number | null;
  DeploymentId?: string | null;
  DeploymentStatus?: DeploymentStatus | null;
  DeploymentStatusMessage?: string | null;
  Description?: string | null;
}
function toDeployment(root: jsonP.JSONValue): Deployment {
  return jsonP.readObj({
    required: {},
    optional: {
      "AutoDeployed": "b",
      "CreatedDate": "d",
      "DeploymentId": "s",
      "DeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
      "DeploymentStatusMessage": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DomainName {
  ApiMappingSelectionExpression?: string | null;
  DomainName: string;
  DomainNameConfigurations?: DomainNameConfiguration[] | null;
  MutualTlsAuthentication?: MutualTlsAuthentication | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toDomainName(root: jsonP.JSONValue): DomainName {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
    },
    optional: {
      "ApiMappingSelectionExpression": "s",
      "DomainNameConfigurations": [toDomainNameConfiguration],
      "MutualTlsAuthentication": toMutualTlsAuthentication,
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IntegrationResponse {
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  IntegrationResponseId?: string | null;
  IntegrationResponseKey: string;
  ResponseParameters?: { [key: string]: string | null | undefined } | null;
  ResponseTemplates?: { [key: string]: string | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
}
function toIntegrationResponse(root: jsonP.JSONValue): IntegrationResponse {
  return jsonP.readObj({
    required: {
      "IntegrationResponseKey": "s",
    },
    optional: {
      "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
      "IntegrationResponseId": "s",
      "ResponseParameters": x => jsonP.readMap(String, String, x),
      "ResponseTemplates": x => jsonP.readMap(String, String, x),
      "TemplateSelectionExpression": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Integration {
  ApiGatewayManaged?: boolean | null;
  ConnectionId?: string | null;
  ConnectionType?: ConnectionType | null;
  ContentHandlingStrategy?: ContentHandlingStrategy | null;
  CredentialsArn?: string | null;
  Description?: string | null;
  IntegrationId?: string | null;
  IntegrationMethod?: string | null;
  IntegrationResponseSelectionExpression?: string | null;
  IntegrationSubtype?: string | null;
  IntegrationType?: IntegrationType | null;
  IntegrationUri?: string | null;
  PassthroughBehavior?: PassthroughBehavior | null;
  PayloadFormatVersion?: string | null;
  RequestParameters?: { [key: string]: string | null | undefined } | null;
  RequestTemplates?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: { [key: string]: string | null | undefined } | null | undefined } | null;
  TemplateSelectionExpression?: string | null;
  TimeoutInMillis?: number | null;
  TlsConfig?: TlsConfig | null;
}
function toIntegration(root: jsonP.JSONValue): Integration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApiGatewayManaged": "b",
      "ConnectionId": "s",
      "ConnectionType": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionType>(x),
      "ContentHandlingStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ContentHandlingStrategy>(x),
      "CredentialsArn": "s",
      "Description": "s",
      "IntegrationId": "s",
      "IntegrationMethod": "s",
      "IntegrationResponseSelectionExpression": "s",
      "IntegrationSubtype": "s",
      "IntegrationType": (x: jsonP.JSONValue) => cmnP.readEnum<IntegrationType>(x),
      "IntegrationUri": "s",
      "PassthroughBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<PassthroughBehavior>(x),
      "PayloadFormatVersion": "s",
      "RequestParameters": x => jsonP.readMap(String, String, x),
      "RequestTemplates": x => jsonP.readMap(String, String, x),
      "ResponseParameters": x => jsonP.readMap(String, y => jsonP.readMap(String, String, y)!, x),
      "TemplateSelectionExpression": "s",
      "TimeoutInMillis": "n",
      "TlsConfig": toTlsConfig,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Model {
  ContentType?: string | null;
  Description?: string | null;
  ModelId?: string | null;
  Name: string;
  Schema?: string | null;
}
function toModel(root: jsonP.JSONValue): Model {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "ContentType": "s",
      "Description": "s",
      "ModelId": "s",
      "Schema": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RouteResponse {
  ModelSelectionExpression?: string | null;
  ResponseModels?: { [key: string]: string | null | undefined } | null;
  ResponseParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteResponseId?: string | null;
  RouteResponseKey: string;
}
function toRouteResponse(root: jsonP.JSONValue): RouteResponse {
  return jsonP.readObj({
    required: {
      "RouteResponseKey": "s",
    },
    optional: {
      "ModelSelectionExpression": "s",
      "ResponseModels": x => jsonP.readMap(String, String, x),
      "ResponseParameters": x => jsonP.readMap(String, toParameterConstraints, x),
      "RouteResponseId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Route {
  ApiGatewayManaged?: boolean | null;
  ApiKeyRequired?: boolean | null;
  AuthorizationScopes?: string[] | null;
  AuthorizationType?: AuthorizationType | null;
  AuthorizerId?: string | null;
  ModelSelectionExpression?: string | null;
  OperationName?: string | null;
  RequestModels?: { [key: string]: string | null | undefined } | null;
  RequestParameters?: { [key: string]: ParameterConstraints | null | undefined } | null;
  RouteId?: string | null;
  RouteKey: string;
  RouteResponseSelectionExpression?: string | null;
  Target?: string | null;
}
function toRoute(root: jsonP.JSONValue): Route {
  return jsonP.readObj({
    required: {
      "RouteKey": "s",
    },
    optional: {
      "ApiGatewayManaged": "b",
      "ApiKeyRequired": "b",
      "AuthorizationScopes": ["s"],
      "AuthorizationType": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizationType>(x),
      "AuthorizerId": "s",
      "ModelSelectionExpression": "s",
      "OperationName": "s",
      "RequestModels": x => jsonP.readMap(String, String, x),
      "RequestParameters": x => jsonP.readMap(String, toParameterConstraints, x),
      "RouteId": "s",
      "RouteResponseSelectionExpression": "s",
      "Target": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Stage {
  AccessLogSettings?: AccessLogSettings | null;
  ApiGatewayManaged?: boolean | null;
  AutoDeploy?: boolean | null;
  ClientCertificateId?: string | null;
  CreatedDate?: Date | number | null;
  DefaultRouteSettings?: RouteSettings | null;
  DeploymentId?: string | null;
  Description?: string | null;
  LastDeploymentStatusMessage?: string | null;
  LastUpdatedDate?: Date | number | null;
  RouteSettings?: { [key: string]: RouteSettings | null | undefined } | null;
  StageName: string;
  StageVariables?: { [key: string]: string | null | undefined } | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toStage(root: jsonP.JSONValue): Stage {
  return jsonP.readObj({
    required: {
      "StageName": "s",
    },
    optional: {
      "AccessLogSettings": toAccessLogSettings,
      "ApiGatewayManaged": "b",
      "AutoDeploy": "b",
      "ClientCertificateId": "s",
      "CreatedDate": "d",
      "DefaultRouteSettings": toRouteSettings,
      "DeploymentId": "s",
      "Description": "s",
      "LastDeploymentStatusMessage": "s",
      "LastUpdatedDate": "d",
      "RouteSettings": x => jsonP.readMap(String, toRouteSettings, x),
      "StageVariables": x => jsonP.readMap(String, String, x),
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VpcLink {
  CreatedDate?: Date | number | null;
  Name: string;
  SecurityGroupIds: string[];
  SubnetIds: string[];
  Tags?: { [key: string]: string | null | undefined } | null;
  VpcLinkId: string;
  VpcLinkStatus?: VpcLinkStatus | null;
  VpcLinkStatusMessage?: string | null;
  VpcLinkVersion?: VpcLinkVersion | null;
}
function toVpcLink(root: jsonP.JSONValue): VpcLink {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "SecurityGroupIds": ["s"],
      "SubnetIds": ["s"],
      "VpcLinkId": "s",
    },
    optional: {
      "CreatedDate": "d",
      "Tags": x => jsonP.readMap(String, String, x),
      "VpcLinkStatus": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkStatus>(x),
      "VpcLinkStatusMessage": "s",
      "VpcLinkVersion": (x: jsonP.JSONValue) => cmnP.readEnum<VpcLinkVersion>(x),
    },
  }, root);
}
