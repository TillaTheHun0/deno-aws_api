// Autogenerated API client for: Amazon Inspector

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Inspector {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Inspector.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-02-16",
    "endpointPrefix": "inspector",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Inspector",
    "serviceId": "Inspector",
    "signatureVersion": "v4",
    "targetPrefix": "InspectorService",
    "uid": "inspector-2016-02-16"
  };

  async addAttributesToFindings(
    {abortSignal, ...params}: RequestConfig & AddAttributesToFindingsRequest,
  ): Promise<AddAttributesToFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      findingArns: params["findingArns"],
      attributes: params["attributes"]?.map(x => fromAttribute(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddAttributesToFindings",
    });
    return jsonP.readObj({
      required: {
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async createAssessmentTarget(
    {abortSignal, ...params}: RequestConfig & CreateAssessmentTargetRequest,
  ): Promise<CreateAssessmentTargetResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTargetName: params["assessmentTargetName"],
      resourceGroupArn: params["resourceGroupArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessmentTarget",
    });
    return jsonP.readObj({
      required: {
        "assessmentTargetArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createAssessmentTemplate(
    {abortSignal, ...params}: RequestConfig & CreateAssessmentTemplateRequest,
  ): Promise<CreateAssessmentTemplateResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTargetArn: params["assessmentTargetArn"],
      assessmentTemplateName: params["assessmentTemplateName"],
      durationInSeconds: params["durationInSeconds"],
      rulesPackageArns: params["rulesPackageArns"],
      userAttributesForFindings: params["userAttributesForFindings"]?.map(x => fromAttribute(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessmentTemplate",
    });
    return jsonP.readObj({
      required: {
        "assessmentTemplateArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createExclusionsPreview(
    {abortSignal, ...params}: RequestConfig & CreateExclusionsPreviewRequest,
  ): Promise<CreateExclusionsPreviewResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTemplateArn: params["assessmentTemplateArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateExclusionsPreview",
    });
    return jsonP.readObj({
      required: {
        "previewToken": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createResourceGroup(
    {abortSignal, ...params}: RequestConfig & CreateResourceGroupRequest,
  ): Promise<CreateResourceGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      resourceGroupTags: params["resourceGroupTags"]?.map(x => fromResourceGroupTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResourceGroup",
    });
    return jsonP.readObj({
      required: {
        "resourceGroupArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteAssessmentRun(
    {abortSignal, ...params}: RequestConfig & DeleteAssessmentRunRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArn: params["assessmentRunArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAssessmentRun",
    });
  }

  async deleteAssessmentTarget(
    {abortSignal, ...params}: RequestConfig & DeleteAssessmentTargetRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      assessmentTargetArn: params["assessmentTargetArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAssessmentTarget",
    });
  }

  async deleteAssessmentTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteAssessmentTemplateRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      assessmentTemplateArn: params["assessmentTemplateArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAssessmentTemplate",
    });
  }

  async describeAssessmentRuns(
    {abortSignal, ...params}: RequestConfig & DescribeAssessmentRunsRequest,
  ): Promise<DescribeAssessmentRunsResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArns: params["assessmentRunArns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAssessmentRuns",
    });
    return jsonP.readObj({
      required: {
        "assessmentRuns": [toAssessmentRun],
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeAssessmentTargets(
    {abortSignal, ...params}: RequestConfig & DescribeAssessmentTargetsRequest,
  ): Promise<DescribeAssessmentTargetsResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTargetArns: params["assessmentTargetArns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAssessmentTargets",
    });
    return jsonP.readObj({
      required: {
        "assessmentTargets": [toAssessmentTarget],
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeAssessmentTemplates(
    {abortSignal, ...params}: RequestConfig & DescribeAssessmentTemplatesRequest,
  ): Promise<DescribeAssessmentTemplatesResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTemplateArns: params["assessmentTemplateArns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAssessmentTemplates",
    });
    return jsonP.readObj({
      required: {
        "assessmentTemplates": [toAssessmentTemplate],
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeCrossAccountAccessRole(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<DescribeCrossAccountAccessRoleResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeCrossAccountAccessRole",
    });
    return jsonP.readObj({
      required: {
        "roleArn": "s",
        "valid": "b",
        "registeredAt": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async describeExclusions(
    {abortSignal, ...params}: RequestConfig & DescribeExclusionsRequest,
  ): Promise<DescribeExclusionsResponse> {
    const body: jsonP.JSONObject = params ? {
      exclusionArns: params["exclusionArns"],
      locale: params["locale"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeExclusions",
    });
    return jsonP.readObj({
      required: {
        "exclusions": x => jsonP.readMap(String, toExclusion, x),
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeFindings(
    {abortSignal, ...params}: RequestConfig & DescribeFindingsRequest,
  ): Promise<DescribeFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      findingArns: params["findingArns"],
      locale: params["locale"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFindings",
    });
    return jsonP.readObj({
      required: {
        "findings": [toFinding],
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeResourceGroups(
    {abortSignal, ...params}: RequestConfig & DescribeResourceGroupsRequest,
  ): Promise<DescribeResourceGroupsResponse> {
    const body: jsonP.JSONObject = params ? {
      resourceGroupArns: params["resourceGroupArns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeResourceGroups",
    });
    return jsonP.readObj({
      required: {
        "resourceGroups": [toResourceGroup],
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeRulesPackages(
    {abortSignal, ...params}: RequestConfig & DescribeRulesPackagesRequest,
  ): Promise<DescribeRulesPackagesResponse> {
    const body: jsonP.JSONObject = params ? {
      rulesPackageArns: params["rulesPackageArns"],
      locale: params["locale"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRulesPackages",
    });
    return jsonP.readObj({
      required: {
        "rulesPackages": [toRulesPackage],
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async getAssessmentReport(
    {abortSignal, ...params}: RequestConfig & GetAssessmentReportRequest,
  ): Promise<GetAssessmentReportResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArn: params["assessmentRunArn"],
      reportFileFormat: params["reportFileFormat"],
      reportType: params["reportType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAssessmentReport",
    });
    return jsonP.readObj({
      required: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<ReportStatus>(x),
      },
      optional: {
        "url": "s",
      },
    }, await resp.json());
  }

  async getExclusionsPreview(
    {abortSignal, ...params}: RequestConfig & GetExclusionsPreviewRequest,
  ): Promise<GetExclusionsPreviewResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTemplateArn: params["assessmentTemplateArn"],
      previewToken: params["previewToken"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      locale: params["locale"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetExclusionsPreview",
    });
    return jsonP.readObj({
      required: {
        "previewStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PreviewStatus>(x),
      },
      optional: {
        "exclusionPreviews": [toExclusionPreview],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getTelemetryMetadata(
    {abortSignal, ...params}: RequestConfig & GetTelemetryMetadataRequest,
  ): Promise<GetTelemetryMetadataResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArn: params["assessmentRunArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetTelemetryMetadata",
    });
    return jsonP.readObj({
      required: {
        "telemetryMetadata": [toTelemetryMetadata],
      },
      optional: {},
    }, await resp.json());
  }

  async listAssessmentRunAgents(
    {abortSignal, ...params}: RequestConfig & ListAssessmentRunAgentsRequest,
  ): Promise<ListAssessmentRunAgentsResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArn: params["assessmentRunArn"],
      filter: fromAgentFilter(params["filter"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssessmentRunAgents",
    });
    return jsonP.readObj({
      required: {
        "assessmentRunAgents": [toAssessmentRunAgent],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssessmentRuns(
    {abortSignal, ...params}: RequestConfig & ListAssessmentRunsRequest = {},
  ): Promise<ListAssessmentRunsResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTemplateArns: params["assessmentTemplateArns"],
      filter: fromAssessmentRunFilter(params["filter"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssessmentRuns",
    });
    return jsonP.readObj({
      required: {
        "assessmentRunArns": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssessmentTargets(
    {abortSignal, ...params}: RequestConfig & ListAssessmentTargetsRequest = {},
  ): Promise<ListAssessmentTargetsResponse> {
    const body: jsonP.JSONObject = params ? {
      filter: fromAssessmentTargetFilter(params["filter"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssessmentTargets",
    });
    return jsonP.readObj({
      required: {
        "assessmentTargetArns": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssessmentTemplates(
    {abortSignal, ...params}: RequestConfig & ListAssessmentTemplatesRequest = {},
  ): Promise<ListAssessmentTemplatesResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTargetArns: params["assessmentTargetArns"],
      filter: fromAssessmentTemplateFilter(params["filter"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssessmentTemplates",
    });
    return jsonP.readObj({
      required: {
        "assessmentTemplateArns": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listEventSubscriptions(
    {abortSignal, ...params}: RequestConfig & ListEventSubscriptionsRequest = {},
  ): Promise<ListEventSubscriptionsResponse> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEventSubscriptions",
    });
    return jsonP.readObj({
      required: {
        "subscriptions": [toSubscription],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listExclusions(
    {abortSignal, ...params}: RequestConfig & ListExclusionsRequest,
  ): Promise<ListExclusionsResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArn: params["assessmentRunArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListExclusions",
    });
    return jsonP.readObj({
      required: {
        "exclusionArns": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listFindings(
    {abortSignal, ...params}: RequestConfig & ListFindingsRequest = {},
  ): Promise<ListFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArns: params["assessmentRunArns"],
      filter: fromFindingFilter(params["filter"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFindings",
    });
    return jsonP.readObj({
      required: {
        "findingArns": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listRulesPackages(
    {abortSignal, ...params}: RequestConfig & ListRulesPackagesRequest = {},
  ): Promise<ListRulesPackagesResponse> {
    const body: jsonP.JSONObject = params ? {
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRulesPackages",
    });
    return jsonP.readObj({
      required: {
        "rulesPackageArns": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {
        "tags": [toTag],
      },
      optional: {},
    }, await resp.json());
  }

  async previewAgents(
    {abortSignal, ...params}: RequestConfig & PreviewAgentsRequest,
  ): Promise<PreviewAgentsResponse> {
    const body: jsonP.JSONObject = params ? {
      previewAgentsArn: params["previewAgentsArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PreviewAgents",
    });
    return jsonP.readObj({
      required: {
        "agentPreviews": [toAgentPreview],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async registerCrossAccountAccessRole(
    {abortSignal, ...params}: RequestConfig & RegisterCrossAccountAccessRoleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      roleArn: params["roleArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterCrossAccountAccessRole",
    });
  }

  async removeAttributesFromFindings(
    {abortSignal, ...params}: RequestConfig & RemoveAttributesFromFindingsRequest,
  ): Promise<RemoveAttributesFromFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      findingArns: params["findingArns"],
      attributeKeys: params["attributeKeys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveAttributesFromFindings",
    });
    return jsonP.readObj({
      required: {
        "failedItems": x => jsonP.readMap(String, toFailedItemDetails, x),
      },
      optional: {},
    }, await resp.json());
  }

  async setTagsForResource(
    {abortSignal, ...params}: RequestConfig & SetTagsForResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetTagsForResource",
    });
  }

  async startAssessmentRun(
    {abortSignal, ...params}: RequestConfig & StartAssessmentRunRequest,
  ): Promise<StartAssessmentRunResponse> {
    const body: jsonP.JSONObject = params ? {
      assessmentTemplateArn: params["assessmentTemplateArn"],
      assessmentRunName: params["assessmentRunName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartAssessmentRun",
    });
    return jsonP.readObj({
      required: {
        "assessmentRunArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async stopAssessmentRun(
    {abortSignal, ...params}: RequestConfig & StopAssessmentRunRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      assessmentRunArn: params["assessmentRunArn"],
      stopAction: params["stopAction"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopAssessmentRun",
    });
  }

  async subscribeToEvent(
    {abortSignal, ...params}: RequestConfig & SubscribeToEventRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      event: params["event"],
      topicArn: params["topicArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SubscribeToEvent",
    });
  }

  async unsubscribeFromEvent(
    {abortSignal, ...params}: RequestConfig & UnsubscribeFromEventRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      event: params["event"],
      topicArn: params["topicArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnsubscribeFromEvent",
    });
  }

  async updateAssessmentTarget(
    {abortSignal, ...params}: RequestConfig & UpdateAssessmentTargetRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      assessmentTargetArn: params["assessmentTargetArn"],
      assessmentTargetName: params["assessmentTargetName"],
      resourceGroupArn: params["resourceGroupArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentTarget",
    });
  }

}

// refs: 1 - tags: named, input
export interface AddAttributesToFindingsRequest {
  findingArns: string[];
  attributes: Attribute[];
}

// refs: 1 - tags: named, input
export interface CreateAssessmentTargetRequest {
  assessmentTargetName: string;
  resourceGroupArn?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateAssessmentTemplateRequest {
  assessmentTargetArn: string;
  assessmentTemplateName: string;
  durationInSeconds: number;
  rulesPackageArns: string[];
  userAttributesForFindings?: Attribute[] | null;
}

// refs: 1 - tags: named, input
export interface CreateExclusionsPreviewRequest {
  assessmentTemplateArn: string;
}

// refs: 1 - tags: named, input
export interface CreateResourceGroupRequest {
  resourceGroupTags: ResourceGroupTag[];
}

// refs: 1 - tags: named, input
export interface DeleteAssessmentRunRequest {
  assessmentRunArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteAssessmentTargetRequest {
  assessmentTargetArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteAssessmentTemplateRequest {
  assessmentTemplateArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeAssessmentRunsRequest {
  assessmentRunArns: string[];
}

// refs: 1 - tags: named, input
export interface DescribeAssessmentTargetsRequest {
  assessmentTargetArns: string[];
}

// refs: 1 - tags: named, input
export interface DescribeAssessmentTemplatesRequest {
  assessmentTemplateArns: string[];
}

// refs: 1 - tags: named, input
export interface DescribeExclusionsRequest {
  exclusionArns: string[];
  locale?: Locale | null;
}

// refs: 1 - tags: named, input
export interface DescribeFindingsRequest {
  findingArns: string[];
  locale?: Locale | null;
}

// refs: 1 - tags: named, input
export interface DescribeResourceGroupsRequest {
  resourceGroupArns: string[];
}

// refs: 1 - tags: named, input
export interface DescribeRulesPackagesRequest {
  rulesPackageArns: string[];
  locale?: Locale | null;
}

// refs: 1 - tags: named, input
export interface GetAssessmentReportRequest {
  assessmentRunArn: string;
  reportFileFormat: ReportFileFormat;
  reportType: ReportType;
}

// refs: 1 - tags: named, input
export interface GetExclusionsPreviewRequest {
  assessmentTemplateArn: string;
  previewToken: string;
  nextToken?: string | null;
  maxResults?: number | null;
  locale?: Locale | null;
}

// refs: 1 - tags: named, input
export interface GetTelemetryMetadataRequest {
  assessmentRunArn: string;
}

// refs: 1 - tags: named, input
export interface ListAssessmentRunAgentsRequest {
  assessmentRunArn: string;
  filter?: AgentFilter | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssessmentRunsRequest {
  assessmentTemplateArns?: string[] | null;
  filter?: AssessmentRunFilter | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssessmentTargetsRequest {
  filter?: AssessmentTargetFilter | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssessmentTemplatesRequest {
  assessmentTargetArns?: string[] | null;
  filter?: AssessmentTemplateFilter | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListEventSubscriptionsRequest {
  resourceArn?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListExclusionsRequest {
  assessmentRunArn: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListFindingsRequest {
  assessmentRunArns?: string[] | null;
  filter?: FindingFilter | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRulesPackagesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PreviewAgentsRequest {
  previewAgentsArn: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface RegisterCrossAccountAccessRoleRequest {
  roleArn: string;
}

// refs: 1 - tags: named, input
export interface RemoveAttributesFromFindingsRequest {
  findingArns: string[];
  attributeKeys: string[];
}

// refs: 1 - tags: named, input
export interface SetTagsForResourceRequest {
  resourceArn: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface StartAssessmentRunRequest {
  assessmentTemplateArn: string;
  assessmentRunName?: string | null;
}

// refs: 1 - tags: named, input
export interface StopAssessmentRunRequest {
  assessmentRunArn: string;
  stopAction?: StopAction | null;
}

// refs: 1 - tags: named, input
export interface SubscribeToEventRequest {
  resourceArn: string;
  event: InspectorEvent;
  topicArn: string;
}

// refs: 1 - tags: named, input
export interface UnsubscribeFromEventRequest {
  resourceArn: string;
  event: InspectorEvent;
  topicArn: string;
}

// refs: 1 - tags: named, input
export interface UpdateAssessmentTargetRequest {
  assessmentTargetArn: string;
  assessmentTargetName: string;
  resourceGroupArn?: string | null;
}

// refs: 1 - tags: named, output
export interface AddAttributesToFindingsResponse {
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface CreateAssessmentTargetResponse {
  assessmentTargetArn: string;
}

// refs: 1 - tags: named, output
export interface CreateAssessmentTemplateResponse {
  assessmentTemplateArn: string;
}

// refs: 1 - tags: named, output
export interface CreateExclusionsPreviewResponse {
  previewToken: string;
}

// refs: 1 - tags: named, output
export interface CreateResourceGroupResponse {
  resourceGroupArn: string;
}

// refs: 1 - tags: named, output
export interface DescribeAssessmentRunsResponse {
  assessmentRuns: AssessmentRun[];
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface DescribeAssessmentTargetsResponse {
  assessmentTargets: AssessmentTarget[];
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface DescribeAssessmentTemplatesResponse {
  assessmentTemplates: AssessmentTemplate[];
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface DescribeCrossAccountAccessRoleResponse {
  roleArn: string;
  valid: boolean;
  registeredAt: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribeExclusionsResponse {
  exclusions: { [key: string]: Exclusion | null | undefined };
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface DescribeFindingsResponse {
  findings: Finding[];
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface DescribeResourceGroupsResponse {
  resourceGroups: ResourceGroup[];
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface DescribeRulesPackagesResponse {
  rulesPackages: RulesPackage[];
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface GetAssessmentReportResponse {
  status: ReportStatus;
  url?: string | null;
}

// refs: 1 - tags: named, output
export interface GetExclusionsPreviewResponse {
  previewStatus: PreviewStatus;
  exclusionPreviews?: ExclusionPreview[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetTelemetryMetadataResponse {
  telemetryMetadata: TelemetryMetadata[];
}

// refs: 1 - tags: named, output
export interface ListAssessmentRunAgentsResponse {
  assessmentRunAgents: AssessmentRunAgent[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssessmentRunsResponse {
  assessmentRunArns: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssessmentTargetsResponse {
  assessmentTargetArns: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssessmentTemplatesResponse {
  assessmentTemplateArns: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEventSubscriptionsResponse {
  subscriptions: Subscription[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListExclusionsResponse {
  exclusionArns: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListFindingsResponse {
  findingArns: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRulesPackagesResponse {
  rulesPackageArns: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags: Tag[];
}

// refs: 1 - tags: named, output
export interface PreviewAgentsResponse {
  agentPreviews: AgentPreview[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveAttributesFromFindingsResponse {
  failedItems: { [key: string]: FailedItemDetails | null | undefined };
}

// refs: 1 - tags: named, output
export interface StartAssessmentRunResponse {
  assessmentRunArn: string;
}

// refs: 10 - tags: input, named, interface, output
export interface Attribute {
  key: string;
  value?: string | null;
}
function fromAttribute(input?: Attribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toAttribute(root: jsonP.JSONValue): Attribute {
  return jsonP.readObj({
    required: {
      "key": "s",
    },
    optional: {
      "value": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ResourceGroupTag {
  key: string;
  value?: string | null;
}
function fromResourceGroupTag(input?: ResourceGroupTag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toResourceGroupTag(root: jsonP.JSONValue): ResourceGroupTag {
  return jsonP.readObj({
    required: {
      "key": "s",
    },
    optional: {
      "value": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum
export type Locale =
| "EN_US"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ReportFileFormat =
| "HTML"
| "PDF"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ReportType =
| "FINDING"
| "FULL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AgentFilter {
  agentHealths: AgentHealth[];
  agentHealthCodes: AgentHealthCode[];
}
function fromAgentFilter(input?: AgentFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    agentHealths: input["agentHealths"],
    agentHealthCodes: input["agentHealthCodes"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type AgentHealth =
| "HEALTHY"
| "UNHEALTHY"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type AgentHealthCode =
| "IDLE"
| "RUNNING"
| "SHUTDOWN"
| "UNHEALTHY"
| "THROTTLED"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AssessmentRunFilter {
  namePattern?: string | null;
  states?: AssessmentRunState[] | null;
  durationRange?: DurationRange | null;
  rulesPackageArns?: string[] | null;
  startTimeRange?: TimestampRange | null;
  completionTimeRange?: TimestampRange | null;
  stateChangeTimeRange?: TimestampRange | null;
}
function fromAssessmentRunFilter(input?: AssessmentRunFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    namePattern: input["namePattern"],
    states: input["states"],
    durationRange: fromDurationRange(input["durationRange"]),
    rulesPackageArns: input["rulesPackageArns"],
    startTimeRange: fromTimestampRange(input["startTimeRange"]),
    completionTimeRange: fromTimestampRange(input["completionTimeRange"]),
    stateChangeTimeRange: fromTimestampRange(input["stateChangeTimeRange"]),
  }
}

// refs: 3 - tags: input, named, enum, output
export type AssessmentRunState =
| "CREATED"
| "START_DATA_COLLECTION_PENDING"
| "START_DATA_COLLECTION_IN_PROGRESS"
| "COLLECTING_DATA"
| "STOP_DATA_COLLECTION_PENDING"
| "DATA_COLLECTED"
| "START_EVALUATING_RULES_PENDING"
| "EVALUATING_RULES"
| "FAILED"
| "ERROR"
| "COMPLETED"
| "COMPLETED_WITH_ERRORS"
| "CANCELED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface DurationRange {
  minSeconds?: number | null;
  maxSeconds?: number | null;
}
function fromDurationRange(input?: DurationRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    minSeconds: input["minSeconds"],
    maxSeconds: input["maxSeconds"],
  }
}

// refs: 4 - tags: input, named, interface
export interface TimestampRange {
  beginDate?: Date | number | null;
  endDate?: Date | number | null;
}
function fromTimestampRange(input?: TimestampRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    beginDate: jsonP.serializeDate_unixTimestamp(input["beginDate"]),
    endDate: jsonP.serializeDate_unixTimestamp(input["endDate"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface AssessmentTargetFilter {
  assessmentTargetNamePattern?: string | null;
}
function fromAssessmentTargetFilter(input?: AssessmentTargetFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    assessmentTargetNamePattern: input["assessmentTargetNamePattern"],
  }
}

// refs: 1 - tags: input, named, interface
export interface AssessmentTemplateFilter {
  namePattern?: string | null;
  durationRange?: DurationRange | null;
  rulesPackageArns?: string[] | null;
}
function fromAssessmentTemplateFilter(input?: AssessmentTemplateFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    namePattern: input["namePattern"],
    durationRange: fromDurationRange(input["durationRange"]),
    rulesPackageArns: input["rulesPackageArns"],
  }
}

// refs: 1 - tags: input, named, interface
export interface FindingFilter {
  agentIds?: string[] | null;
  autoScalingGroups?: string[] | null;
  ruleNames?: string[] | null;
  severities?: Severity[] | null;
  rulesPackageArns?: string[] | null;
  attributes?: Attribute[] | null;
  userAttributes?: Attribute[] | null;
  creationTimeRange?: TimestampRange | null;
}
function fromFindingFilter(input?: FindingFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    agentIds: input["agentIds"],
    autoScalingGroups: input["autoScalingGroups"],
    ruleNames: input["ruleNames"],
    severities: input["severities"],
    rulesPackageArns: input["rulesPackageArns"],
    attributes: input["attributes"]?.map(x => fromAttribute(x)),
    userAttributes: input["userAttributes"]?.map(x => fromAttribute(x)),
    creationTimeRange: fromTimestampRange(input["creationTimeRange"]),
  }
}

// refs: 3 - tags: input, named, enum, output
export type Severity =
| "Low"
| "Medium"
| "High"
| "Informational"
| "Undefined"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  key: string;
  value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "key": "s",
    },
    optional: {
      "value": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type StopAction =
| "START_EVALUATION"
| "SKIP_EVALUATION"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type InspectorEvent =
| "ASSESSMENT_RUN_STARTED"
| "ASSESSMENT_RUN_COMPLETED"
| "ASSESSMENT_RUN_STATE_CHANGED"
| "FINDING_REPORTED"
| "OTHER"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: output, named, interface
export interface FailedItemDetails {
  failureCode: FailedItemErrorCode;
  retryable: boolean;
}
function toFailedItemDetails(root: jsonP.JSONValue): FailedItemDetails {
  return jsonP.readObj({
    required: {
      "failureCode": (x: jsonP.JSONValue) => cmnP.readEnum<FailedItemErrorCode>(x),
      "retryable": "b",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: output, named, enum
export type FailedItemErrorCode =
| "INVALID_ARN"
| "DUPLICATE_ARN"
| "ITEM_DOES_NOT_EXIST"
| "ACCESS_DENIED"
| "LIMIT_EXCEEDED"
| "INTERNAL_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AssessmentRun {
  arn: string;
  name: string;
  assessmentTemplateArn: string;
  state: AssessmentRunState;
  durationInSeconds: number;
  rulesPackageArns: string[];
  userAttributesForFindings: Attribute[];
  createdAt: Date | number;
  startedAt?: Date | number | null;
  completedAt?: Date | number | null;
  stateChangedAt: Date | number;
  dataCollected: boolean;
  stateChanges: AssessmentRunStateChange[];
  notifications: AssessmentRunNotification[];
  findingCounts: { [key in Severity]: number | null | undefined };
}
function toAssessmentRun(root: jsonP.JSONValue): AssessmentRun {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "name": "s",
      "assessmentTemplateArn": "s",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentRunState>(x),
      "durationInSeconds": "n",
      "rulesPackageArns": ["s"],
      "userAttributesForFindings": [toAttribute],
      "createdAt": "d",
      "stateChangedAt": "d",
      "dataCollected": "b",
      "stateChanges": [toAssessmentRunStateChange],
      "notifications": [toAssessmentRunNotification],
      "findingCounts": x => jsonP.readMap(x => cmnP.readEnumReq<Severity>(x), Number, x),
    },
    optional: {
      "startedAt": "d",
      "completedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentRunStateChange {
  stateChangedAt: Date | number;
  state: AssessmentRunState;
}
function toAssessmentRunStateChange(root: jsonP.JSONValue): AssessmentRunStateChange {
  return jsonP.readObj({
    required: {
      "stateChangedAt": "d",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentRunState>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentRunNotification {
  date: Date | number;
  event: InspectorEvent;
  message?: string | null;
  error: boolean;
  snsTopicArn?: string | null;
  snsPublishStatusCode?: AssessmentRunNotificationSnsStatusCode | null;
}
function toAssessmentRunNotification(root: jsonP.JSONValue): AssessmentRunNotification {
  return jsonP.readObj({
    required: {
      "date": "d",
      "event": (x: jsonP.JSONValue) => cmnP.readEnum<InspectorEvent>(x),
      "error": "b",
    },
    optional: {
      "message": "s",
      "snsTopicArn": "s",
      "snsPublishStatusCode": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentRunNotificationSnsStatusCode>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AssessmentRunNotificationSnsStatusCode =
| "SUCCESS"
| "TOPIC_DOES_NOT_EXIST"
| "ACCESS_DENIED"
| "INTERNAL_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AssessmentTarget {
  arn: string;
  name: string;
  resourceGroupArn?: string | null;
  createdAt: Date | number;
  updatedAt: Date | number;
}
function toAssessmentTarget(root: jsonP.JSONValue): AssessmentTarget {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "name": "s",
      "createdAt": "d",
      "updatedAt": "d",
    },
    optional: {
      "resourceGroupArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentTemplate {
  arn: string;
  name: string;
  assessmentTargetArn: string;
  durationInSeconds: number;
  rulesPackageArns: string[];
  userAttributesForFindings: Attribute[];
  lastAssessmentRunArn?: string | null;
  assessmentRunCount: number;
  createdAt: Date | number;
}
function toAssessmentTemplate(root: jsonP.JSONValue): AssessmentTemplate {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "name": "s",
      "assessmentTargetArn": "s",
      "durationInSeconds": "n",
      "rulesPackageArns": ["s"],
      "userAttributesForFindings": [toAttribute],
      "assessmentRunCount": "n",
      "createdAt": "d",
    },
    optional: {
      "lastAssessmentRunArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Exclusion {
  arn: string;
  title: string;
  description: string;
  recommendation: string;
  scopes: Scope[];
  attributes?: Attribute[] | null;
}
function toExclusion(root: jsonP.JSONValue): Exclusion {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "title": "s",
      "description": "s",
      "recommendation": "s",
      "scopes": [toScope],
    },
    optional: {
      "attributes": [toAttribute],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Scope {
  key?: ScopeType | null;
  value?: string | null;
}
function toScope(root: jsonP.JSONValue): Scope {
  return jsonP.readObj({
    required: {},
    optional: {
      "key": (x: jsonP.JSONValue) => cmnP.readEnum<ScopeType>(x),
      "value": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ScopeType =
| "INSTANCE_ID"
| "RULES_PACKAGE_ARN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Finding {
  arn: string;
  schemaVersion?: number | null;
  service?: string | null;
  serviceAttributes?: InspectorServiceAttributes | null;
  assetType?: AssetType | null;
  assetAttributes?: AssetAttributes | null;
  id?: string | null;
  title?: string | null;
  description?: string | null;
  recommendation?: string | null;
  severity?: Severity | null;
  numericSeverity?: number | null;
  confidence?: number | null;
  indicatorOfCompromise?: boolean | null;
  attributes: Attribute[];
  userAttributes: Attribute[];
  createdAt: Date | number;
  updatedAt: Date | number;
}
function toFinding(root: jsonP.JSONValue): Finding {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "attributes": [toAttribute],
      "userAttributes": [toAttribute],
      "createdAt": "d",
      "updatedAt": "d",
    },
    optional: {
      "schemaVersion": "n",
      "service": "s",
      "serviceAttributes": toInspectorServiceAttributes,
      "assetType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetType>(x),
      "assetAttributes": toAssetAttributes,
      "id": "s",
      "title": "s",
      "description": "s",
      "recommendation": "s",
      "severity": (x: jsonP.JSONValue) => cmnP.readEnum<Severity>(x),
      "numericSeverity": "n",
      "confidence": "n",
      "indicatorOfCompromise": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InspectorServiceAttributes {
  schemaVersion: number;
  assessmentRunArn?: string | null;
  rulesPackageArn?: string | null;
}
function toInspectorServiceAttributes(root: jsonP.JSONValue): InspectorServiceAttributes {
  return jsonP.readObj({
    required: {
      "schemaVersion": "n",
    },
    optional: {
      "assessmentRunArn": "s",
      "rulesPackageArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AssetType =
| "ec2-instance"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AssetAttributes {
  schemaVersion: number;
  agentId?: string | null;
  autoScalingGroup?: string | null;
  amiId?: string | null;
  hostname?: string | null;
  ipv4Addresses?: string[] | null;
  tags?: Tag[] | null;
  networkInterfaces?: NetworkInterface[] | null;
}
function toAssetAttributes(root: jsonP.JSONValue): AssetAttributes {
  return jsonP.readObj({
    required: {
      "schemaVersion": "n",
    },
    optional: {
      "agentId": "s",
      "autoScalingGroup": "s",
      "amiId": "s",
      "hostname": "s",
      "ipv4Addresses": ["s"],
      "tags": [toTag],
      "networkInterfaces": [toNetworkInterface],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkInterface {
  networkInterfaceId?: string | null;
  subnetId?: string | null;
  vpcId?: string | null;
  privateDnsName?: string | null;
  privateIpAddress?: string | null;
  privateIpAddresses?: PrivateIp[] | null;
  publicDnsName?: string | null;
  publicIp?: string | null;
  ipv6Addresses?: string[] | null;
  securityGroups?: SecurityGroup[] | null;
}
function toNetworkInterface(root: jsonP.JSONValue): NetworkInterface {
  return jsonP.readObj({
    required: {},
    optional: {
      "networkInterfaceId": "s",
      "subnetId": "s",
      "vpcId": "s",
      "privateDnsName": "s",
      "privateIpAddress": "s",
      "privateIpAddresses": [toPrivateIp],
      "publicDnsName": "s",
      "publicIp": "s",
      "ipv6Addresses": ["s"],
      "securityGroups": [toSecurityGroup],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PrivateIp {
  privateDnsName?: string | null;
  privateIpAddress?: string | null;
}
function toPrivateIp(root: jsonP.JSONValue): PrivateIp {
  return jsonP.readObj({
    required: {},
    optional: {
      "privateDnsName": "s",
      "privateIpAddress": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecurityGroup {
  groupName?: string | null;
  groupId?: string | null;
}
function toSecurityGroup(root: jsonP.JSONValue): SecurityGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "groupName": "s",
      "groupId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceGroup {
  arn: string;
  tags: ResourceGroupTag[];
  createdAt: Date | number;
}
function toResourceGroup(root: jsonP.JSONValue): ResourceGroup {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "tags": [toResourceGroupTag],
      "createdAt": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RulesPackage {
  arn: string;
  name: string;
  version: string;
  provider: string;
  description?: string | null;
}
function toRulesPackage(root: jsonP.JSONValue): RulesPackage {
  return jsonP.readObj({
    required: {
      "arn": "s",
      "name": "s",
      "version": "s",
      "provider": "s",
    },
    optional: {
      "description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ReportStatus =
| "WORK_IN_PROGRESS"
| "FAILED"
| "COMPLETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type PreviewStatus =
| "WORK_IN_PROGRESS"
| "COMPLETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ExclusionPreview {
  title: string;
  description: string;
  recommendation: string;
  scopes: Scope[];
  attributes?: Attribute[] | null;
}
function toExclusionPreview(root: jsonP.JSONValue): ExclusionPreview {
  return jsonP.readObj({
    required: {
      "title": "s",
      "description": "s",
      "recommendation": "s",
      "scopes": [toScope],
    },
    optional: {
      "attributes": [toAttribute],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TelemetryMetadata {
  messageType: string;
  count: number;
  dataSize?: number | null;
}
function toTelemetryMetadata(root: jsonP.JSONValue): TelemetryMetadata {
  return jsonP.readObj({
    required: {
      "messageType": "s",
      "count": "n",
    },
    optional: {
      "dataSize": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentRunAgent {
  agentId: string;
  assessmentRunArn: string;
  agentHealth: AgentHealth;
  agentHealthCode: AgentHealthCode;
  agentHealthDetails?: string | null;
  autoScalingGroup?: string | null;
  telemetryMetadata: TelemetryMetadata[];
}
function toAssessmentRunAgent(root: jsonP.JSONValue): AssessmentRunAgent {
  return jsonP.readObj({
    required: {
      "agentId": "s",
      "assessmentRunArn": "s",
      "agentHealth": (x: jsonP.JSONValue) => cmnP.readEnum<AgentHealth>(x),
      "agentHealthCode": (x: jsonP.JSONValue) => cmnP.readEnum<AgentHealthCode>(x),
      "telemetryMetadata": [toTelemetryMetadata],
    },
    optional: {
      "agentHealthDetails": "s",
      "autoScalingGroup": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Subscription {
  resourceArn: string;
  topicArn: string;
  eventSubscriptions: EventSubscription[];
}
function toSubscription(root: jsonP.JSONValue): Subscription {
  return jsonP.readObj({
    required: {
      "resourceArn": "s",
      "topicArn": "s",
      "eventSubscriptions": [toEventSubscription],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventSubscription {
  event: InspectorEvent;
  subscribedAt: Date | number;
}
function toEventSubscription(root: jsonP.JSONValue): EventSubscription {
  return jsonP.readObj({
    required: {
      "event": (x: jsonP.JSONValue) => cmnP.readEnum<InspectorEvent>(x),
      "subscribedAt": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AgentPreview {
  hostname?: string | null;
  agentId: string;
  autoScalingGroup?: string | null;
  agentHealth?: AgentHealth | null;
  agentVersion?: string | null;
  operatingSystem?: string | null;
  kernelVersion?: string | null;
  ipv4Address?: string | null;
}
function toAgentPreview(root: jsonP.JSONValue): AgentPreview {
  return jsonP.readObj({
    required: {
      "agentId": "s",
    },
    optional: {
      "hostname": "s",
      "autoScalingGroup": "s",
      "agentHealth": (x: jsonP.JSONValue) => cmnP.readEnum<AgentHealth>(x),
      "agentVersion": "s",
      "operatingSystem": "s",
      "kernelVersion": "s",
      "ipv4Address": "s",
    },
  }, root);
}
