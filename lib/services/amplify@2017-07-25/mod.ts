// Autogenerated API client for: AWS Amplify

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Amplify {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Amplify.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "amplify",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amplify",
    "serviceFullName": "AWS Amplify",
    "serviceId": "Amplify",
    "signatureVersion": "v4",
    "signingName": "amplify",
    "uid": "amplify-2017-07-25"
  };

  async createApp(
    {abortSignal, ...params}: RequestConfig & s.CreateAppRequest,
  ): Promise<s.CreateAppResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      repository: params["repository"],
      platform: params["platform"],
      iamServiceRoleArn: params["iamServiceRoleArn"],
      oauthToken: params["oauthToken"],
      accessToken: params["accessToken"],
      environmentVariables: params["environmentVariables"],
      enableBranchAutoBuild: params["enableBranchAutoBuild"],
      enableBranchAutoDeletion: params["enableBranchAutoDeletion"],
      enableBasicAuth: params["enableBasicAuth"],
      basicAuthCredentials: params["basicAuthCredentials"],
      customRules: params["customRules"]?.map(x => fromCustomRule(x)),
      tags: params["tags"],
      buildSpec: params["buildSpec"],
      customHeaders: params["customHeaders"],
      enableAutoBranchCreation: params["enableAutoBranchCreation"],
      autoBranchCreationPatterns: params["autoBranchCreationPatterns"],
      autoBranchCreationConfig: fromAutoBranchCreationConfig(params["autoBranchCreationConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApp",
      requestUri: "/apps",
    });
    return jsonP.readObj({
      required: {
        "app": toApp,
      },
      optional: {},
    }, await resp.json());
  }

  async createBackendEnvironment(
    {abortSignal, ...params}: RequestConfig & s.CreateBackendEnvironmentRequest,
  ): Promise<s.CreateBackendEnvironmentResult> {
    const body: jsonP.JSONObject = {
      environmentName: params["environmentName"],
      stackName: params["stackName"],
      deploymentArtifacts: params["deploymentArtifacts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendEnvironment",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments`,
    });
    return jsonP.readObj({
      required: {
        "backendEnvironment": toBackendEnvironment,
      },
      optional: {},
    }, await resp.json());
  }

  async createBranch(
    {abortSignal, ...params}: RequestConfig & s.CreateBranchRequest,
  ): Promise<s.CreateBranchResult> {
    const body: jsonP.JSONObject = {
      branchName: params["branchName"],
      description: params["description"],
      stage: params["stage"],
      framework: params["framework"],
      enableNotification: params["enableNotification"],
      enableAutoBuild: params["enableAutoBuild"],
      environmentVariables: params["environmentVariables"],
      basicAuthCredentials: params["basicAuthCredentials"],
      enableBasicAuth: params["enableBasicAuth"],
      enablePerformanceMode: params["enablePerformanceMode"],
      tags: params["tags"],
      buildSpec: params["buildSpec"],
      ttl: params["ttl"],
      displayName: params["displayName"],
      enablePullRequestPreview: params["enablePullRequestPreview"],
      pullRequestEnvironmentName: params["pullRequestEnvironmentName"],
      backendEnvironmentArn: params["backendEnvironmentArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBranch",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches`,
    });
    return jsonP.readObj({
      required: {
        "branch": toBranch,
      },
      optional: {},
    }, await resp.json());
  }

  async createDeployment(
    {abortSignal, ...params}: RequestConfig & s.CreateDeploymentRequest,
  ): Promise<s.CreateDeploymentResult> {
    const body: jsonP.JSONObject = {
      fileMap: params["fileMap"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeployment",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/deployments`,
    });
    return jsonP.readObj({
      required: {
        "fileUploadUrls": x => jsonP.readMap(String, String, x),
        "zipUploadUrl": "s",
      },
      optional: {
        "jobId": "s",
      },
    }, await resp.json());
  }

  async createDomainAssociation(
    {abortSignal, ...params}: RequestConfig & s.CreateDomainAssociationRequest,
  ): Promise<s.CreateDomainAssociationResult> {
    const body: jsonP.JSONObject = {
      domainName: params["domainName"],
      enableAutoSubDomain: params["enableAutoSubDomain"],
      subDomainSettings: params["subDomainSettings"]?.map(x => fromSubDomainSetting(x)),
      autoSubDomainCreationPatterns: params["autoSubDomainCreationPatterns"],
      autoSubDomainIAMRole: params["autoSubDomainIAMRole"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomainAssociation",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains`,
    });
    return jsonP.readObj({
      required: {
        "domainAssociation": toDomainAssociation,
      },
      optional: {},
    }, await resp.json());
  }

  async createWebhook(
    {abortSignal, ...params}: RequestConfig & s.CreateWebhookRequest,
  ): Promise<s.CreateWebhookResult> {
    const body: jsonP.JSONObject = {
      branchName: params["branchName"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWebhook",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/webhooks`,
    });
    return jsonP.readObj({
      required: {
        "webhook": toWebhook,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteApp(
    {abortSignal, ...params}: RequestConfig & s.DeleteAppRequest,
  ): Promise<s.DeleteAppResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApp",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}`,
    });
    return jsonP.readObj({
      required: {
        "app": toApp,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteBackendEnvironment(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackendEnvironmentRequest,
  ): Promise<s.DeleteBackendEnvironmentResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackendEnvironment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments/${params["environmentName"]}`,
    });
    return jsonP.readObj({
      required: {
        "backendEnvironment": toBackendEnvironment,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteBranch(
    {abortSignal, ...params}: RequestConfig & s.DeleteBranchRequest,
  ): Promise<s.DeleteBranchResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBranch",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}`,
    });
    return jsonP.readObj({
      required: {
        "branch": toBranch,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteDomainAssociation(
    {abortSignal, ...params}: RequestConfig & s.DeleteDomainAssociationRequest,
  ): Promise<s.DeleteDomainAssociationResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDomainAssociation",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains/${params["domainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "domainAssociation": toDomainAssociation,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteJob(
    {abortSignal, ...params}: RequestConfig & s.DeleteJobRequest,
  ): Promise<s.DeleteJobResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteJob",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}`,
    });
    return jsonP.readObj({
      required: {
        "jobSummary": toJobSummary,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteWebhook(
    {abortSignal, ...params}: RequestConfig & s.DeleteWebhookRequest,
  ): Promise<s.DeleteWebhookResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWebhook",
      method: "DELETE",
      requestUri: cmnP.encodePath`/webhooks/${params["webhookId"]}`,
    });
    return jsonP.readObj({
      required: {
        "webhook": toWebhook,
      },
      optional: {},
    }, await resp.json());
  }

  async generateAccessLogs(
    {abortSignal, ...params}: RequestConfig & s.GenerateAccessLogsRequest,
  ): Promise<s.GenerateAccessLogsResult> {
    const body: jsonP.JSONObject = {
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      domainName: params["domainName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateAccessLogs",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/accesslogs`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "logUrl": "s",
      },
    }, await resp.json());
  }

  async getApp(
    {abortSignal, ...params}: RequestConfig & s.GetAppRequest,
  ): Promise<s.GetAppResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApp",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}`,
    });
    return jsonP.readObj({
      required: {
        "app": toApp,
      },
      optional: {},
    }, await resp.json());
  }

  async getArtifactUrl(
    {abortSignal, ...params}: RequestConfig & s.GetArtifactUrlRequest,
  ): Promise<s.GetArtifactUrlResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetArtifactUrl",
      method: "GET",
      requestUri: cmnP.encodePath`/artifacts/${params["artifactId"]}`,
    });
    return jsonP.readObj({
      required: {
        "artifactId": "s",
        "artifactUrl": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getBackendEnvironment(
    {abortSignal, ...params}: RequestConfig & s.GetBackendEnvironmentRequest,
  ): Promise<s.GetBackendEnvironmentResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackendEnvironment",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments/${params["environmentName"]}`,
    });
    return jsonP.readObj({
      required: {
        "backendEnvironment": toBackendEnvironment,
      },
      optional: {},
    }, await resp.json());
  }

  async getBranch(
    {abortSignal, ...params}: RequestConfig & s.GetBranchRequest,
  ): Promise<s.GetBranchResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBranch",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}`,
    });
    return jsonP.readObj({
      required: {
        "branch": toBranch,
      },
      optional: {},
    }, await resp.json());
  }

  async getDomainAssociation(
    {abortSignal, ...params}: RequestConfig & s.GetDomainAssociationRequest,
  ): Promise<s.GetDomainAssociationResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDomainAssociation",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains/${params["domainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "domainAssociation": toDomainAssociation,
      },
      optional: {},
    }, await resp.json());
  }

  async getJob(
    {abortSignal, ...params}: RequestConfig & s.GetJobRequest,
  ): Promise<s.GetJobResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetJob",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}`,
    });
    return jsonP.readObj({
      required: {
        "job": toJob,
      },
      optional: {},
    }, await resp.json());
  }

  async getWebhook(
    {abortSignal, ...params}: RequestConfig & s.GetWebhookRequest,
  ): Promise<s.GetWebhookResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWebhook",
      method: "GET",
      requestUri: cmnP.encodePath`/webhooks/${params["webhookId"]}`,
    });
    return jsonP.readObj({
      required: {
        "webhook": toWebhook,
      },
      optional: {},
    }, await resp.json());
  }

  async listApps(
    {abortSignal, ...params}: RequestConfig & s.ListAppsRequest = {},
  ): Promise<s.ListAppsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListApps",
      method: "GET",
      requestUri: "/apps",
    });
    return jsonP.readObj({
      required: {
        "apps": [toApp],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listArtifacts(
    {abortSignal, ...params}: RequestConfig & s.ListArtifactsRequest,
  ): Promise<s.ListArtifactsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListArtifacts",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}/artifacts`,
    });
    return jsonP.readObj({
      required: {
        "artifacts": [toArtifact],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listBackendEnvironments(
    {abortSignal, ...params}: RequestConfig & s.ListBackendEnvironmentsRequest,
  ): Promise<s.ListBackendEnvironmentsResult> {
    const query = new URLSearchParams;
    if (params["environmentName"] != null) query.set("environmentName", params["environmentName"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackendEnvironments",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments`,
    });
    return jsonP.readObj({
      required: {
        "backendEnvironments": [toBackendEnvironment],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listBranches(
    {abortSignal, ...params}: RequestConfig & s.ListBranchesRequest,
  ): Promise<s.ListBranchesResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBranches",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches`,
    });
    return jsonP.readObj({
      required: {
        "branches": [toBranch],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDomainAssociations(
    {abortSignal, ...params}: RequestConfig & s.ListDomainAssociationsRequest,
  ): Promise<s.ListDomainAssociationsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDomainAssociations",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains`,
    });
    return jsonP.readObj({
      required: {
        "domainAssociations": [toDomainAssociation],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & s.ListJobsRequest,
  ): Promise<s.ListJobsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJobs",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs`,
    });
    return jsonP.readObj({
      required: {
        "jobSummaries": [toJobSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listWebhooks(
    {abortSignal, ...params}: RequestConfig & s.ListWebhooksRequest,
  ): Promise<s.ListWebhooksResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWebhooks",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/webhooks`,
    });
    return jsonP.readObj({
      required: {
        "webhooks": [toWebhook],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async startDeployment(
    {abortSignal, ...params}: RequestConfig & s.StartDeploymentRequest,
  ): Promise<s.StartDeploymentResult> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      sourceUrl: params["sourceUrl"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDeployment",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/deployments/start`,
    });
    return jsonP.readObj({
      required: {
        "jobSummary": toJobSummary,
      },
      optional: {},
    }, await resp.json());
  }

  async startJob(
    {abortSignal, ...params}: RequestConfig & s.StartJobRequest,
  ): Promise<s.StartJobResult> {
    const body: jsonP.JSONObject = {
      jobId: params["jobId"],
      jobType: params["jobType"],
      jobReason: params["jobReason"],
      commitId: params["commitId"],
      commitMessage: params["commitMessage"],
      commitTime: jsonP.serializeDate_unixTimestamp(params["commitTime"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartJob",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs`,
    });
    return jsonP.readObj({
      required: {
        "jobSummary": toJobSummary,
      },
      optional: {},
    }, await resp.json());
  }

  async stopJob(
    {abortSignal, ...params}: RequestConfig & s.StopJobRequest,
  ): Promise<s.StopJobResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopJob",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}/stop`,
    });
    return jsonP.readObj({
      required: {
        "jobSummary": toJobSummary,
      },
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    await resp.text();
  }

  async updateApp(
    {abortSignal, ...params}: RequestConfig & s.UpdateAppRequest,
  ): Promise<s.UpdateAppResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      platform: params["platform"],
      iamServiceRoleArn: params["iamServiceRoleArn"],
      environmentVariables: params["environmentVariables"],
      enableBranchAutoBuild: params["enableBranchAutoBuild"],
      enableBranchAutoDeletion: params["enableBranchAutoDeletion"],
      enableBasicAuth: params["enableBasicAuth"],
      basicAuthCredentials: params["basicAuthCredentials"],
      customRules: params["customRules"]?.map(x => fromCustomRule(x)),
      buildSpec: params["buildSpec"],
      customHeaders: params["customHeaders"],
      enableAutoBranchCreation: params["enableAutoBranchCreation"],
      autoBranchCreationPatterns: params["autoBranchCreationPatterns"],
      autoBranchCreationConfig: fromAutoBranchCreationConfig(params["autoBranchCreationConfig"]),
      repository: params["repository"],
      oauthToken: params["oauthToken"],
      accessToken: params["accessToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApp",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}`,
    });
    return jsonP.readObj({
      required: {
        "app": toApp,
      },
      optional: {},
    }, await resp.json());
  }

  async updateBranch(
    {abortSignal, ...params}: RequestConfig & s.UpdateBranchRequest,
  ): Promise<s.UpdateBranchResult> {
    const body: jsonP.JSONObject = {
      description: params["description"],
      framework: params["framework"],
      stage: params["stage"],
      enableNotification: params["enableNotification"],
      enableAutoBuild: params["enableAutoBuild"],
      environmentVariables: params["environmentVariables"],
      basicAuthCredentials: params["basicAuthCredentials"],
      enableBasicAuth: params["enableBasicAuth"],
      enablePerformanceMode: params["enablePerformanceMode"],
      buildSpec: params["buildSpec"],
      ttl: params["ttl"],
      displayName: params["displayName"],
      enablePullRequestPreview: params["enablePullRequestPreview"],
      pullRequestEnvironmentName: params["pullRequestEnvironmentName"],
      backendEnvironmentArn: params["backendEnvironmentArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBranch",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}`,
    });
    return jsonP.readObj({
      required: {
        "branch": toBranch,
      },
      optional: {},
    }, await resp.json());
  }

  async updateDomainAssociation(
    {abortSignal, ...params}: RequestConfig & s.UpdateDomainAssociationRequest,
  ): Promise<s.UpdateDomainAssociationResult> {
    const body: jsonP.JSONObject = {
      enableAutoSubDomain: params["enableAutoSubDomain"],
      subDomainSettings: params["subDomainSettings"]?.map(x => fromSubDomainSetting(x)),
      autoSubDomainCreationPatterns: params["autoSubDomainCreationPatterns"],
      autoSubDomainIAMRole: params["autoSubDomainIAMRole"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainAssociation",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains/${params["domainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "domainAssociation": toDomainAssociation,
      },
      optional: {},
    }, await resp.json());
  }

  async updateWebhook(
    {abortSignal, ...params}: RequestConfig & s.UpdateWebhookRequest,
  ): Promise<s.UpdateWebhookResult> {
    const body: jsonP.JSONObject = {
      branchName: params["branchName"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWebhook",
      requestUri: cmnP.encodePath`/webhooks/${params["webhookId"]}`,
    });
    return jsonP.readObj({
      required: {
        "webhook": toWebhook,
      },
      optional: {},
    }, await resp.json());
  }

}

function fromCustomRule(input?: s.CustomRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    source: input["source"],
    target: input["target"],
    status: input["status"],
    condition: input["condition"],
  }
}
function toCustomRule(root: jsonP.JSONValue): s.CustomRule {
  return jsonP.readObj({
    required: {
      "source": "s",
      "target": "s",
    },
    optional: {
      "status": "s",
      "condition": "s",
    },
  }, root);
}

function fromAutoBranchCreationConfig(input?: s.AutoBranchCreationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stage: input["stage"],
    framework: input["framework"],
    enableAutoBuild: input["enableAutoBuild"],
    environmentVariables: input["environmentVariables"],
    basicAuthCredentials: input["basicAuthCredentials"],
    enableBasicAuth: input["enableBasicAuth"],
    enablePerformanceMode: input["enablePerformanceMode"],
    buildSpec: input["buildSpec"],
    enablePullRequestPreview: input["enablePullRequestPreview"],
    pullRequestEnvironmentName: input["pullRequestEnvironmentName"],
  }
}
function toAutoBranchCreationConfig(root: jsonP.JSONValue): s.AutoBranchCreationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "stage": (x: jsonP.JSONValue) => cmnP.readEnum<s.Stage>(x),
      "framework": "s",
      "enableAutoBuild": "b",
      "environmentVariables": x => jsonP.readMap(String, String, x),
      "basicAuthCredentials": "s",
      "enableBasicAuth": "b",
      "enablePerformanceMode": "b",
      "buildSpec": "s",
      "enablePullRequestPreview": "b",
      "pullRequestEnvironmentName": "s",
    },
  }, root);
}

function fromSubDomainSetting(input?: s.SubDomainSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    prefix: input["prefix"],
    branchName: input["branchName"],
  }
}
function toSubDomainSetting(root: jsonP.JSONValue): s.SubDomainSetting {
  return jsonP.readObj({
    required: {
      "prefix": "s",
      "branchName": "s",
    },
    optional: {},
  }, root);
}

function toApp(root: jsonP.JSONValue): s.App {
  return jsonP.readObj({
    required: {
      "appId": "s",
      "appArn": "s",
      "name": "s",
      "description": "s",
      "repository": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<s.Platform>(x),
      "createTime": "d",
      "updateTime": "d",
      "environmentVariables": x => jsonP.readMap(String, String, x),
      "defaultDomain": "s",
      "enableBranchAutoBuild": "b",
      "enableBasicAuth": "b",
    },
    optional: {
      "tags": x => jsonP.readMap(String, String, x),
      "iamServiceRoleArn": "s",
      "enableBranchAutoDeletion": "b",
      "basicAuthCredentials": "s",
      "customRules": [toCustomRule],
      "productionBranch": toProductionBranch,
      "buildSpec": "s",
      "customHeaders": "s",
      "enableAutoBranchCreation": "b",
      "autoBranchCreationPatterns": ["s"],
      "autoBranchCreationConfig": toAutoBranchCreationConfig,
    },
  }, root);
}

function toProductionBranch(root: jsonP.JSONValue): s.ProductionBranch {
  return jsonP.readObj({
    required: {},
    optional: {
      "lastDeployTime": "d",
      "status": "s",
      "thumbnailUrl": "s",
      "branchName": "s",
    },
  }, root);
}

function toBackendEnvironment(root: jsonP.JSONValue): s.BackendEnvironment {
  return jsonP.readObj({
    required: {
      "backendEnvironmentArn": "s",
      "environmentName": "s",
      "createTime": "d",
      "updateTime": "d",
    },
    optional: {
      "stackName": "s",
      "deploymentArtifacts": "s",
    },
  }, root);
}

function toBranch(root: jsonP.JSONValue): s.Branch {
  return jsonP.readObj({
    required: {
      "branchArn": "s",
      "branchName": "s",
      "description": "s",
      "stage": (x: jsonP.JSONValue) => cmnP.readEnum<s.Stage>(x),
      "displayName": "s",
      "enableNotification": "b",
      "createTime": "d",
      "updateTime": "d",
      "environmentVariables": x => jsonP.readMap(String, String, x),
      "enableAutoBuild": "b",
      "customDomains": ["s"],
      "framework": "s",
      "activeJobId": "s",
      "totalNumberOfJobs": "s",
      "enableBasicAuth": "b",
      "ttl": "s",
      "enablePullRequestPreview": "b",
    },
    optional: {
      "tags": x => jsonP.readMap(String, String, x),
      "enablePerformanceMode": "b",
      "thumbnailUrl": "s",
      "basicAuthCredentials": "s",
      "buildSpec": "s",
      "associatedResources": ["s"],
      "pullRequestEnvironmentName": "s",
      "destinationBranch": "s",
      "sourceBranch": "s",
      "backendEnvironmentArn": "s",
    },
  }, root);
}

function toDomainAssociation(root: jsonP.JSONValue): s.DomainAssociation {
  return jsonP.readObj({
    required: {
      "domainAssociationArn": "s",
      "domainName": "s",
      "enableAutoSubDomain": "b",
      "domainStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DomainStatus>(x),
      "statusReason": "s",
      "subDomains": [toSubDomain],
    },
    optional: {
      "autoSubDomainCreationPatterns": ["s"],
      "autoSubDomainIAMRole": "s",
      "certificateVerificationDNSRecord": "s",
    },
  }, root);
}

function toSubDomain(root: jsonP.JSONValue): s.SubDomain {
  return jsonP.readObj({
    required: {
      "subDomainSetting": toSubDomainSetting,
      "verified": "b",
      "dnsRecord": "s",
    },
    optional: {},
  }, root);
}

function toWebhook(root: jsonP.JSONValue): s.Webhook {
  return jsonP.readObj({
    required: {
      "webhookArn": "s",
      "webhookId": "s",
      "webhookUrl": "s",
      "branchName": "s",
      "description": "s",
      "createTime": "d",
      "updateTime": "d",
    },
    optional: {},
  }, root);
}

function toJobSummary(root: jsonP.JSONValue): s.JobSummary {
  return jsonP.readObj({
    required: {
      "jobArn": "s",
      "jobId": "s",
      "commitId": "s",
      "commitMessage": "s",
      "commitTime": "d",
      "startTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
      "jobType": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobType>(x),
    },
    optional: {
      "endTime": "d",
    },
  }, root);
}

function toJob(root: jsonP.JSONValue): s.Job {
  return jsonP.readObj({
    required: {
      "summary": toJobSummary,
      "steps": [toStep],
    },
    optional: {},
  }, root);
}

function toStep(root: jsonP.JSONValue): s.Step {
  return jsonP.readObj({
    required: {
      "stepName": "s",
      "startTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
      "endTime": "d",
    },
    optional: {
      "logUrl": "s",
      "artifactsUrl": "s",
      "testArtifactsUrl": "s",
      "testConfigUrl": "s",
      "screenshots": x => jsonP.readMap(String, String, x),
      "statusReason": "s",
      "context": "s",
    },
  }, root);
}

function toArtifact(root: jsonP.JSONValue): s.Artifact {
  return jsonP.readObj({
    required: {
      "artifactFileName": "s",
      "artifactId": "s",
    },
    optional: {},
  }, root);
}
