// Autogenerated API client for: AWS Amplify

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Amplify {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Amplify.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "amplify",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amplify",
    "serviceFullName": "AWS Amplify",
    "serviceId": "Amplify",
    "signatureVersion": "v4",
    "signingName": "amplify",
    "uid": "amplify-2017-07-25"
  };

  async createApp(
    {abortSignal, ...params}: RequestConfig & CreateAppRequest,
  ): Promise<CreateAppResult> {
    const body: jsonP.JSONObject = params ? {
      name: params["name"],
      description: params["description"],
      repository: params["repository"],
      platform: params["platform"],
      iamServiceRoleArn: params["iamServiceRoleArn"],
      oauthToken: params["oauthToken"],
      accessToken: params["accessToken"],
      environmentVariables: params["environmentVariables"],
      enableBranchAutoBuild: params["enableBranchAutoBuild"],
      enableBranchAutoDeletion: params["enableBranchAutoDeletion"],
      enableBasicAuth: params["enableBasicAuth"],
      basicAuthCredentials: params["basicAuthCredentials"],
      customRules: params["customRules"]?.map(x => fromCustomRule(x)),
      tags: params["tags"],
      buildSpec: params["buildSpec"],
      enableAutoBranchCreation: params["enableAutoBranchCreation"],
      autoBranchCreationPatterns: params["autoBranchCreationPatterns"],
      autoBranchCreationConfig: fromAutoBranchCreationConfig(params["autoBranchCreationConfig"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApp",
      requestUri: "/apps",
    });
  return {
    ...jsonP.readObj({
        required: {
          "app": toApp,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async createBackendEnvironment(
    {abortSignal, ...params}: RequestConfig & CreateBackendEnvironmentRequest,
  ): Promise<CreateBackendEnvironmentResult> {
    const body: jsonP.JSONObject = params ? {
      environmentName: params["environmentName"],
      stackName: params["stackName"],
      deploymentArtifacts: params["deploymentArtifacts"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendEnvironment",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "backendEnvironment": toBackendEnvironment,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async createBranch(
    {abortSignal, ...params}: RequestConfig & CreateBranchRequest,
  ): Promise<CreateBranchResult> {
    const body: jsonP.JSONObject = params ? {
      branchName: params["branchName"],
      description: params["description"],
      stage: params["stage"],
      framework: params["framework"],
      enableNotification: params["enableNotification"],
      enableAutoBuild: params["enableAutoBuild"],
      environmentVariables: params["environmentVariables"],
      basicAuthCredentials: params["basicAuthCredentials"],
      enableBasicAuth: params["enableBasicAuth"],
      enablePerformanceMode: params["enablePerformanceMode"],
      tags: params["tags"],
      buildSpec: params["buildSpec"],
      ttl: params["ttl"],
      displayName: params["displayName"],
      enablePullRequestPreview: params["enablePullRequestPreview"],
      pullRequestEnvironmentName: params["pullRequestEnvironmentName"],
      backendEnvironmentArn: params["backendEnvironmentArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBranch",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "branch": toBranch,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async createDeployment(
    {abortSignal, ...params}: RequestConfig & CreateDeploymentRequest,
  ): Promise<CreateDeploymentResult> {
    const body: jsonP.JSONObject = params ? {
      fileMap: params["fileMap"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeployment",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/deployments`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "fileUploadUrls": x => jsonP.readMap(String, String, x),
          "zipUploadUrl": "s",
        },
        optional: {
          "jobId": "s",
        },
      }, await resp.json()),
  };
  }

  async createDomainAssociation(
    {abortSignal, ...params}: RequestConfig & CreateDomainAssociationRequest,
  ): Promise<CreateDomainAssociationResult> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
      enableAutoSubDomain: params["enableAutoSubDomain"],
      subDomainSettings: params["subDomainSettings"]?.map(x => fromSubDomainSetting(x)),
      autoSubDomainCreationPatterns: params["autoSubDomainCreationPatterns"],
      autoSubDomainIAMRole: params["autoSubDomainIAMRole"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomainAssociation",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "domainAssociation": toDomainAssociation,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async createWebhook(
    {abortSignal, ...params}: RequestConfig & CreateWebhookRequest,
  ): Promise<CreateWebhookResult> {
    const body: jsonP.JSONObject = params ? {
      branchName: params["branchName"],
      description: params["description"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWebhook",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/webhooks`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "webhook": toWebhook,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteApp(
    {abortSignal, ...params}: RequestConfig & DeleteAppRequest,
  ): Promise<DeleteAppResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApp",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "app": toApp,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteBackendEnvironment(
    {abortSignal, ...params}: RequestConfig & DeleteBackendEnvironmentRequest,
  ): Promise<DeleteBackendEnvironmentResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackendEnvironment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments/${params["environmentName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "backendEnvironment": toBackendEnvironment,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteBranch(
    {abortSignal, ...params}: RequestConfig & DeleteBranchRequest,
  ): Promise<DeleteBranchResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBranch",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "branch": toBranch,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteDomainAssociation(
    {abortSignal, ...params}: RequestConfig & DeleteDomainAssociationRequest,
  ): Promise<DeleteDomainAssociationResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDomainAssociation",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains/${params["domainName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "domainAssociation": toDomainAssociation,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteJob(
    {abortSignal, ...params}: RequestConfig & DeleteJobRequest,
  ): Promise<DeleteJobResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteJob",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "jobSummary": toJobSummary,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteWebhook(
    {abortSignal, ...params}: RequestConfig & DeleteWebhookRequest,
  ): Promise<DeleteWebhookResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWebhook",
      method: "DELETE",
      requestUri: cmnP.encodePath`/webhooks/${params["webhookId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "webhook": toWebhook,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async generateAccessLogs(
    {abortSignal, ...params}: RequestConfig & GenerateAccessLogsRequest,
  ): Promise<GenerateAccessLogsResult> {
    const body: jsonP.JSONObject = params ? {
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      domainName: params["domainName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateAccessLogs",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/accesslogs`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "logUrl": "s",
        },
      }, await resp.json()),
  };
  }

  async getApp(
    {abortSignal, ...params}: RequestConfig & GetAppRequest,
  ): Promise<GetAppResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApp",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "app": toApp,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getArtifactUrl(
    {abortSignal, ...params}: RequestConfig & GetArtifactUrlRequest,
  ): Promise<GetArtifactUrlResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetArtifactUrl",
      method: "GET",
      requestUri: cmnP.encodePath`/artifacts/${params["artifactId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "artifactId": "s",
          "artifactUrl": "s",
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getBackendEnvironment(
    {abortSignal, ...params}: RequestConfig & GetBackendEnvironmentRequest,
  ): Promise<GetBackendEnvironmentResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackendEnvironment",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments/${params["environmentName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "backendEnvironment": toBackendEnvironment,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getBranch(
    {abortSignal, ...params}: RequestConfig & GetBranchRequest,
  ): Promise<GetBranchResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBranch",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "branch": toBranch,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getDomainAssociation(
    {abortSignal, ...params}: RequestConfig & GetDomainAssociationRequest,
  ): Promise<GetDomainAssociationResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDomainAssociation",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains/${params["domainName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "domainAssociation": toDomainAssociation,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getJob(
    {abortSignal, ...params}: RequestConfig & GetJobRequest,
  ): Promise<GetJobResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetJob",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "job": toJob,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getWebhook(
    {abortSignal, ...params}: RequestConfig & GetWebhookRequest,
  ): Promise<GetWebhookResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWebhook",
      method: "GET",
      requestUri: cmnP.encodePath`/webhooks/${params["webhookId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "webhook": toWebhook,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async listApps(
    {abortSignal, ...params}: RequestConfig & ListAppsRequest = {},
  ): Promise<ListAppsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListApps",
      method: "GET",
      requestUri: "/apps",
    });
  return {
    ...jsonP.readObj({
        required: {
          "apps": [toApp],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listArtifacts(
    {abortSignal, ...params}: RequestConfig & ListArtifactsRequest,
  ): Promise<ListArtifactsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListArtifacts",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}/artifacts`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "artifacts": [toArtifact],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listBackendEnvironments(
    {abortSignal, ...params}: RequestConfig & ListBackendEnvironmentsRequest,
  ): Promise<ListBackendEnvironmentsResult> {
    const query = new URLSearchParams;
    if (params["environmentName"] != null) query.set("environmentName", params["environmentName"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBackendEnvironments",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/backendenvironments`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "backendEnvironments": [toBackendEnvironment],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listBranches(
    {abortSignal, ...params}: RequestConfig & ListBranchesRequest,
  ): Promise<ListBranchesResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBranches",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "branches": [toBranch],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listDomainAssociations(
    {abortSignal, ...params}: RequestConfig & ListDomainAssociationsRequest,
  ): Promise<ListDomainAssociationsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDomainAssociations",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "domainAssociations": [toDomainAssociation],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & ListJobsRequest,
  ): Promise<ListJobsResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJobs",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "jobSummaries": [toJobSummary],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async listWebhooks(
    {abortSignal, ...params}: RequestConfig & ListWebhooksRequest,
  ): Promise<ListWebhooksResult> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWebhooks",
      method: "GET",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/webhooks`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "webhooks": [toWebhook],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async startDeployment(
    {abortSignal, ...params}: RequestConfig & StartDeploymentRequest,
  ): Promise<StartDeploymentResult> {
    const body: jsonP.JSONObject = params ? {
      jobId: params["jobId"],
      sourceUrl: params["sourceUrl"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDeployment",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/deployments/start`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "jobSummary": toJobSummary,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async startJob(
    {abortSignal, ...params}: RequestConfig & StartJobRequest,
  ): Promise<StartJobResult> {
    const body: jsonP.JSONObject = params ? {
      jobId: params["jobId"],
      jobType: params["jobType"],
      jobReason: params["jobReason"],
      commitId: params["commitId"],
      commitMessage: params["commitMessage"],
      commitTime: jsonP.serializeDate_unixTimestamp(params["commitTime"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartJob",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "jobSummary": toJobSummary,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async stopJob(
    {abortSignal, ...params}: RequestConfig & StopJobRequest,
  ): Promise<StopJobResult> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopJob",
      method: "DELETE",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}/jobs/${params["jobId"]}/stop`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "jobSummary": toJobSummary,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateApp(
    {abortSignal, ...params}: RequestConfig & UpdateAppRequest,
  ): Promise<UpdateAppResult> {
    const body: jsonP.JSONObject = params ? {
      name: params["name"],
      description: params["description"],
      platform: params["platform"],
      iamServiceRoleArn: params["iamServiceRoleArn"],
      environmentVariables: params["environmentVariables"],
      enableBranchAutoBuild: params["enableBranchAutoBuild"],
      enableBranchAutoDeletion: params["enableBranchAutoDeletion"],
      enableBasicAuth: params["enableBasicAuth"],
      basicAuthCredentials: params["basicAuthCredentials"],
      customRules: params["customRules"]?.map(x => fromCustomRule(x)),
      buildSpec: params["buildSpec"],
      enableAutoBranchCreation: params["enableAutoBranchCreation"],
      autoBranchCreationPatterns: params["autoBranchCreationPatterns"],
      autoBranchCreationConfig: fromAutoBranchCreationConfig(params["autoBranchCreationConfig"]),
      repository: params["repository"],
      oauthToken: params["oauthToken"],
      accessToken: params["accessToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApp",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "app": toApp,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async updateBranch(
    {abortSignal, ...params}: RequestConfig & UpdateBranchRequest,
  ): Promise<UpdateBranchResult> {
    const body: jsonP.JSONObject = params ? {
      description: params["description"],
      framework: params["framework"],
      stage: params["stage"],
      enableNotification: params["enableNotification"],
      enableAutoBuild: params["enableAutoBuild"],
      environmentVariables: params["environmentVariables"],
      basicAuthCredentials: params["basicAuthCredentials"],
      enableBasicAuth: params["enableBasicAuth"],
      enablePerformanceMode: params["enablePerformanceMode"],
      buildSpec: params["buildSpec"],
      ttl: params["ttl"],
      displayName: params["displayName"],
      enablePullRequestPreview: params["enablePullRequestPreview"],
      pullRequestEnvironmentName: params["pullRequestEnvironmentName"],
      backendEnvironmentArn: params["backendEnvironmentArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBranch",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/branches/${params["branchName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "branch": toBranch,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async updateDomainAssociation(
    {abortSignal, ...params}: RequestConfig & UpdateDomainAssociationRequest,
  ): Promise<UpdateDomainAssociationResult> {
    const body: jsonP.JSONObject = params ? {
      enableAutoSubDomain: params["enableAutoSubDomain"],
      subDomainSettings: params["subDomainSettings"]?.map(x => fromSubDomainSetting(x)),
      autoSubDomainCreationPatterns: params["autoSubDomainCreationPatterns"],
      autoSubDomainIAMRole: params["autoSubDomainIAMRole"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainAssociation",
      requestUri: cmnP.encodePath`/apps/${params["appId"]}/domains/${params["domainName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "domainAssociation": toDomainAssociation,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async updateWebhook(
    {abortSignal, ...params}: RequestConfig & UpdateWebhookRequest,
  ): Promise<UpdateWebhookResult> {
    const body: jsonP.JSONObject = params ? {
      branchName: params["branchName"],
      description: params["description"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWebhook",
      requestUri: cmnP.encodePath`/webhooks/${params["webhookId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {
          "webhook": toWebhook,
        },
        optional: {},
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface CreateAppRequest {
  name: string;
  description?: string | null;
  repository?: string | null;
  platform?: Platform | null;
  iamServiceRoleArn?: string | null;
  oauthToken?: string | null;
  accessToken?: string | null;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
  enableBranchAutoBuild?: boolean | null;
  enableBranchAutoDeletion?: boolean | null;
  enableBasicAuth?: boolean | null;
  basicAuthCredentials?: string | null;
  customRules?: CustomRule[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
  buildSpec?: string | null;
  enableAutoBranchCreation?: boolean | null;
  autoBranchCreationPatterns?: string[] | null;
  autoBranchCreationConfig?: AutoBranchCreationConfig | null;
}

// refs: 1 - tags: named, input
export interface CreateBackendEnvironmentRequest {
  appId: string;
  environmentName: string;
  stackName?: string | null;
  deploymentArtifacts?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateBranchRequest {
  appId: string;
  branchName: string;
  description?: string | null;
  stage?: Stage | null;
  framework?: string | null;
  enableNotification?: boolean | null;
  enableAutoBuild?: boolean | null;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
  basicAuthCredentials?: string | null;
  enableBasicAuth?: boolean | null;
  enablePerformanceMode?: boolean | null;
  tags?: { [key: string]: string | null | undefined } | null;
  buildSpec?: string | null;
  ttl?: string | null;
  displayName?: string | null;
  enablePullRequestPreview?: boolean | null;
  pullRequestEnvironmentName?: string | null;
  backendEnvironmentArn?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDeploymentRequest {
  appId: string;
  branchName: string;
  fileMap?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateDomainAssociationRequest {
  appId: string;
  domainName: string;
  enableAutoSubDomain?: boolean | null;
  subDomainSettings: SubDomainSetting[];
  autoSubDomainCreationPatterns?: string[] | null;
  autoSubDomainIAMRole?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateWebhookRequest {
  appId: string;
  branchName: string;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteAppRequest {
  appId: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackendEnvironmentRequest {
  appId: string;
  environmentName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBranchRequest {
  appId: string;
  branchName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDomainAssociationRequest {
  appId: string;
  domainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteJobRequest {
  appId: string;
  branchName: string;
  jobId: string;
}

// refs: 1 - tags: named, input
export interface DeleteWebhookRequest {
  webhookId: string;
}

// refs: 1 - tags: named, input
export interface GenerateAccessLogsRequest {
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  domainName: string;
  appId: string;
}

// refs: 1 - tags: named, input
export interface GetAppRequest {
  appId: string;
}

// refs: 1 - tags: named, input
export interface GetArtifactUrlRequest {
  artifactId: string;
}

// refs: 1 - tags: named, input
export interface GetBackendEnvironmentRequest {
  appId: string;
  environmentName: string;
}

// refs: 1 - tags: named, input
export interface GetBranchRequest {
  appId: string;
  branchName: string;
}

// refs: 1 - tags: named, input
export interface GetDomainAssociationRequest {
  appId: string;
  domainName: string;
}

// refs: 1 - tags: named, input
export interface GetJobRequest {
  appId: string;
  branchName: string;
  jobId: string;
}

// refs: 1 - tags: named, input
export interface GetWebhookRequest {
  webhookId: string;
}

// refs: 1 - tags: named, input
export interface ListAppsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListArtifactsRequest {
  appId: string;
  branchName: string;
  jobId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListBackendEnvironmentsRequest {
  appId: string;
  environmentName?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListBranchesRequest {
  appId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDomainAssociationsRequest {
  appId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListJobsRequest {
  appId: string;
  branchName: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListWebhooksRequest {
  appId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface StartDeploymentRequest {
  appId: string;
  branchName: string;
  jobId?: string | null;
  sourceUrl?: string | null;
}

// refs: 1 - tags: named, input
export interface StartJobRequest {
  appId: string;
  branchName: string;
  jobId?: string | null;
  jobType: JobType;
  jobReason?: string | null;
  commitId?: string | null;
  commitMessage?: string | null;
  commitTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface StopJobRequest {
  appId: string;
  branchName: string;
  jobId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAppRequest {
  appId: string;
  name?: string | null;
  description?: string | null;
  platform?: Platform | null;
  iamServiceRoleArn?: string | null;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
  enableBranchAutoBuild?: boolean | null;
  enableBranchAutoDeletion?: boolean | null;
  enableBasicAuth?: boolean | null;
  basicAuthCredentials?: string | null;
  customRules?: CustomRule[] | null;
  buildSpec?: string | null;
  enableAutoBranchCreation?: boolean | null;
  autoBranchCreationPatterns?: string[] | null;
  autoBranchCreationConfig?: AutoBranchCreationConfig | null;
  repository?: string | null;
  oauthToken?: string | null;
  accessToken?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateBranchRequest {
  appId: string;
  branchName: string;
  description?: string | null;
  framework?: string | null;
  stage?: Stage | null;
  enableNotification?: boolean | null;
  enableAutoBuild?: boolean | null;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
  basicAuthCredentials?: string | null;
  enableBasicAuth?: boolean | null;
  enablePerformanceMode?: boolean | null;
  buildSpec?: string | null;
  ttl?: string | null;
  displayName?: string | null;
  enablePullRequestPreview?: boolean | null;
  pullRequestEnvironmentName?: string | null;
  backendEnvironmentArn?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDomainAssociationRequest {
  appId: string;
  domainName: string;
  enableAutoSubDomain?: boolean | null;
  subDomainSettings: SubDomainSetting[];
  autoSubDomainCreationPatterns?: string[] | null;
  autoSubDomainIAMRole?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateWebhookRequest {
  webhookId: string;
  branchName?: string | null;
  description?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateAppResult {
  app: App;
}

// refs: 1 - tags: named, output
export interface CreateBackendEnvironmentResult {
  backendEnvironment: BackendEnvironment;
}

// refs: 1 - tags: named, output
export interface CreateBranchResult {
  branch: Branch;
}

// refs: 1 - tags: named, output
export interface CreateDeploymentResult {
  jobId?: string | null;
  fileUploadUrls: { [key: string]: string | null | undefined };
  zipUploadUrl: string;
}

// refs: 1 - tags: named, output
export interface CreateDomainAssociationResult {
  domainAssociation: DomainAssociation;
}

// refs: 1 - tags: named, output
export interface CreateWebhookResult {
  webhook: Webhook;
}

// refs: 1 - tags: named, output
export interface DeleteAppResult {
  app: App;
}

// refs: 1 - tags: named, output
export interface DeleteBackendEnvironmentResult {
  backendEnvironment: BackendEnvironment;
}

// refs: 1 - tags: named, output
export interface DeleteBranchResult {
  branch: Branch;
}

// refs: 1 - tags: named, output
export interface DeleteDomainAssociationResult {
  domainAssociation: DomainAssociation;
}

// refs: 1 - tags: named, output
export interface DeleteJobResult {
  jobSummary: JobSummary;
}

// refs: 1 - tags: named, output
export interface DeleteWebhookResult {
  webhook: Webhook;
}

// refs: 1 - tags: named, output
export interface GenerateAccessLogsResult {
  logUrl?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAppResult {
  app: App;
}

// refs: 1 - tags: named, output
export interface GetArtifactUrlResult {
  artifactId: string;
  artifactUrl: string;
}

// refs: 1 - tags: named, output
export interface GetBackendEnvironmentResult {
  backendEnvironment: BackendEnvironment;
}

// refs: 1 - tags: named, output
export interface GetBranchResult {
  branch: Branch;
}

// refs: 1 - tags: named, output
export interface GetDomainAssociationResult {
  domainAssociation: DomainAssociation;
}

// refs: 1 - tags: named, output
export interface GetJobResult {
  job: Job;
}

// refs: 1 - tags: named, output
export interface GetWebhookResult {
  webhook: Webhook;
}

// refs: 1 - tags: named, output
export interface ListAppsResult {
  apps: App[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListArtifactsResult {
  artifacts: Artifact[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBackendEnvironmentsResult {
  backendEnvironments: BackendEnvironment[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBranchesResult {
  branches: Branch[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDomainAssociationsResult {
  domainAssociations: DomainAssociation[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListJobsResult {
  jobSummaries: JobSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListWebhooksResult {
  webhooks: Webhook[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartDeploymentResult {
  jobSummary: JobSummary;
}

// refs: 1 - tags: named, output
export interface StartJobResult {
  jobSummary: JobSummary;
}

// refs: 1 - tags: named, output
export interface StopJobResult {
  jobSummary: JobSummary;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAppResult {
  app: App;
}

// refs: 1 - tags: named, output
export interface UpdateBranchResult {
  branch: Branch;
}

// refs: 1 - tags: named, output
export interface UpdateDomainAssociationResult {
  domainAssociation: DomainAssociation;
}

// refs: 1 - tags: named, output
export interface UpdateWebhookResult {
  webhook: Webhook;
}

// refs: 7 - tags: input, named, enum, output
export type Platform =
| "WEB"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface CustomRule {
  source: string;
  target: string;
  status?: string | null;
  condition?: string | null;
}
function fromCustomRule(input?: CustomRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    source: input["source"],
    target: input["target"],
    status: input["status"],
    condition: input["condition"],
  }
}
function toCustomRule(root: jsonP.JSONValue): CustomRule {
  return jsonP.readObj({
    required: {
      "source": "s",
      "target": "s",
    },
    optional: {
      "status": "s",
      "condition": "s",
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface AutoBranchCreationConfig {
  stage?: Stage | null;
  framework?: string | null;
  enableAutoBuild?: boolean | null;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
  basicAuthCredentials?: string | null;
  enableBasicAuth?: boolean | null;
  enablePerformanceMode?: boolean | null;
  buildSpec?: string | null;
  enablePullRequestPreview?: boolean | null;
  pullRequestEnvironmentName?: string | null;
}
function fromAutoBranchCreationConfig(input?: AutoBranchCreationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stage: input["stage"],
    framework: input["framework"],
    enableAutoBuild: input["enableAutoBuild"],
    environmentVariables: input["environmentVariables"],
    basicAuthCredentials: input["basicAuthCredentials"],
    enableBasicAuth: input["enableBasicAuth"],
    enablePerformanceMode: input["enablePerformanceMode"],
    buildSpec: input["buildSpec"],
    enablePullRequestPreview: input["enablePullRequestPreview"],
    pullRequestEnvironmentName: input["pullRequestEnvironmentName"],
  }
}
function toAutoBranchCreationConfig(root: jsonP.JSONValue): AutoBranchCreationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "stage": (x: jsonP.JSONValue) => cmnP.readEnum<Stage>(x),
      "framework": "s",
      "enableAutoBuild": "b",
      "environmentVariables": x => jsonP.readMap(String, String, x),
      "basicAuthCredentials": "s",
      "enableBasicAuth": "b",
      "enablePerformanceMode": "b",
      "buildSpec": "s",
      "enablePullRequestPreview": "b",
      "pullRequestEnvironmentName": "s",
    },
  }, root);
}

// refs: 14 - tags: input, named, enum, output
export type Stage =
| "PRODUCTION"
| "BETA"
| "DEVELOPMENT"
| "EXPERIMENTAL"
| "PULL_REQUEST"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface SubDomainSetting {
  prefix: string;
  branchName: string;
}
function fromSubDomainSetting(input?: SubDomainSetting | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    prefix: input["prefix"],
    branchName: input["branchName"],
  }
}
function toSubDomainSetting(root: jsonP.JSONValue): SubDomainSetting {
  return jsonP.readObj({
    required: {
      "prefix": "s",
      "branchName": "s",
    },
    optional: {},
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type JobType =
| "RELEASE"
| "RETRY"
| "MANUAL"
| "WEB_HOOK"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface App {
  appId: string;
  appArn: string;
  name: string;
  tags?: { [key: string]: string | null | undefined } | null;
  description: string;
  repository: string;
  platform: Platform;
  createTime: Date | number;
  updateTime: Date | number;
  iamServiceRoleArn?: string | null;
  environmentVariables: { [key: string]: string | null | undefined };
  defaultDomain: string;
  enableBranchAutoBuild: boolean;
  enableBranchAutoDeletion?: boolean | null;
  enableBasicAuth: boolean;
  basicAuthCredentials?: string | null;
  customRules?: CustomRule[] | null;
  productionBranch?: ProductionBranch | null;
  buildSpec?: string | null;
  enableAutoBranchCreation?: boolean | null;
  autoBranchCreationPatterns?: string[] | null;
  autoBranchCreationConfig?: AutoBranchCreationConfig | null;
}
function toApp(root: jsonP.JSONValue): App {
  return jsonP.readObj({
    required: {
      "appId": "s",
      "appArn": "s",
      "name": "s",
      "description": "s",
      "repository": "s",
      "platform": (x: jsonP.JSONValue) => cmnP.readEnum<Platform>(x),
      "createTime": "d",
      "updateTime": "d",
      "environmentVariables": x => jsonP.readMap(String, String, x),
      "defaultDomain": "s",
      "enableBranchAutoBuild": "b",
      "enableBasicAuth": "b",
    },
    optional: {
      "tags": x => jsonP.readMap(String, String, x),
      "iamServiceRoleArn": "s",
      "enableBranchAutoDeletion": "b",
      "basicAuthCredentials": "s",
      "customRules": [toCustomRule],
      "productionBranch": toProductionBranch,
      "buildSpec": "s",
      "enableAutoBranchCreation": "b",
      "autoBranchCreationPatterns": ["s"],
      "autoBranchCreationConfig": toAutoBranchCreationConfig,
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface ProductionBranch {
  lastDeployTime?: Date | number | null;
  status?: string | null;
  thumbnailUrl?: string | null;
  branchName?: string | null;
}
function toProductionBranch(root: jsonP.JSONValue): ProductionBranch {
  return jsonP.readObj({
    required: {},
    optional: {
      "lastDeployTime": "d",
      "status": "s",
      "thumbnailUrl": "s",
      "branchName": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface BackendEnvironment {
  backendEnvironmentArn: string;
  environmentName: string;
  stackName?: string | null;
  deploymentArtifacts?: string | null;
  createTime: Date | number;
  updateTime: Date | number;
}
function toBackendEnvironment(root: jsonP.JSONValue): BackendEnvironment {
  return jsonP.readObj({
    required: {
      "backendEnvironmentArn": "s",
      "environmentName": "s",
      "createTime": "d",
      "updateTime": "d",
    },
    optional: {
      "stackName": "s",
      "deploymentArtifacts": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface Branch {
  branchArn: string;
  branchName: string;
  description: string;
  tags?: { [key: string]: string | null | undefined } | null;
  stage: Stage;
  displayName: string;
  enableNotification: boolean;
  createTime: Date | number;
  updateTime: Date | number;
  environmentVariables: { [key: string]: string | null | undefined };
  enableAutoBuild: boolean;
  customDomains: string[];
  framework: string;
  activeJobId: string;
  totalNumberOfJobs: string;
  enableBasicAuth: boolean;
  enablePerformanceMode?: boolean | null;
  thumbnailUrl?: string | null;
  basicAuthCredentials?: string | null;
  buildSpec?: string | null;
  ttl: string;
  associatedResources?: string[] | null;
  enablePullRequestPreview: boolean;
  pullRequestEnvironmentName?: string | null;
  destinationBranch?: string | null;
  sourceBranch?: string | null;
  backendEnvironmentArn?: string | null;
}
function toBranch(root: jsonP.JSONValue): Branch {
  return jsonP.readObj({
    required: {
      "branchArn": "s",
      "branchName": "s",
      "description": "s",
      "stage": (x: jsonP.JSONValue) => cmnP.readEnum<Stage>(x),
      "displayName": "s",
      "enableNotification": "b",
      "createTime": "d",
      "updateTime": "d",
      "environmentVariables": x => jsonP.readMap(String, String, x),
      "enableAutoBuild": "b",
      "customDomains": ["s"],
      "framework": "s",
      "activeJobId": "s",
      "totalNumberOfJobs": "s",
      "enableBasicAuth": "b",
      "ttl": "s",
      "enablePullRequestPreview": "b",
    },
    optional: {
      "tags": x => jsonP.readMap(String, String, x),
      "enablePerformanceMode": "b",
      "thumbnailUrl": "s",
      "basicAuthCredentials": "s",
      "buildSpec": "s",
      "associatedResources": ["s"],
      "pullRequestEnvironmentName": "s",
      "destinationBranch": "s",
      "sourceBranch": "s",
      "backendEnvironmentArn": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface DomainAssociation {
  domainAssociationArn: string;
  domainName: string;
  enableAutoSubDomain: boolean;
  autoSubDomainCreationPatterns?: string[] | null;
  autoSubDomainIAMRole?: string | null;
  domainStatus: DomainStatus;
  statusReason: string;
  certificateVerificationDNSRecord?: string | null;
  subDomains: SubDomain[];
}
function toDomainAssociation(root: jsonP.JSONValue): DomainAssociation {
  return jsonP.readObj({
    required: {
      "domainAssociationArn": "s",
      "domainName": "s",
      "enableAutoSubDomain": "b",
      "domainStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DomainStatus>(x),
      "statusReason": "s",
      "subDomains": [toSubDomain],
    },
    optional: {
      "autoSubDomainCreationPatterns": ["s"],
      "autoSubDomainIAMRole": "s",
      "certificateVerificationDNSRecord": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type DomainStatus =
| "PENDING_VERIFICATION"
| "IN_PROGRESS"
| "AVAILABLE"
| "PENDING_DEPLOYMENT"
| "FAILED"
| "CREATING"
| "REQUESTING_CERTIFICATE"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface SubDomain {
  subDomainSetting: SubDomainSetting;
  verified: boolean;
  dnsRecord: string;
}
function toSubDomain(root: jsonP.JSONValue): SubDomain {
  return jsonP.readObj({
    required: {
      "subDomainSetting": toSubDomainSetting,
      "verified": "b",
      "dnsRecord": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface Webhook {
  webhookArn: string;
  webhookId: string;
  webhookUrl: string;
  branchName: string;
  description: string;
  createTime: Date | number;
  updateTime: Date | number;
}
function toWebhook(root: jsonP.JSONValue): Webhook {
  return jsonP.readObj({
    required: {
      "webhookArn": "s",
      "webhookId": "s",
      "webhookUrl": "s",
      "branchName": "s",
      "description": "s",
      "createTime": "d",
      "updateTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface JobSummary {
  jobArn: string;
  jobId: string;
  commitId: string;
  commitMessage: string;
  commitTime: Date | number;
  startTime: Date | number;
  status: JobStatus;
  endTime?: Date | number | null;
  jobType: JobType;
}
function toJobSummary(root: jsonP.JSONValue): JobSummary {
  return jsonP.readObj({
    required: {
      "jobArn": "s",
      "jobId": "s",
      "commitId": "s",
      "commitMessage": "s",
      "commitTime": "d",
      "startTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "jobType": (x: jsonP.JSONValue) => cmnP.readEnum<JobType>(x),
    },
    optional: {
      "endTime": "d",
    },
  }, root);
}

// refs: 7 - tags: output, named, enum
export type JobStatus =
| "PENDING"
| "PROVISIONING"
| "RUNNING"
| "FAILED"
| "SUCCEED"
| "CANCELLING"
| "CANCELLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Job {
  summary: JobSummary;
  steps: Step[];
}
function toJob(root: jsonP.JSONValue): Job {
  return jsonP.readObj({
    required: {
      "summary": toJobSummary,
      "steps": [toStep],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Step {
  stepName: string;
  startTime: Date | number;
  status: JobStatus;
  endTime: Date | number;
  logUrl?: string | null;
  artifactsUrl?: string | null;
  testArtifactsUrl?: string | null;
  testConfigUrl?: string | null;
  screenshots?: { [key: string]: string | null | undefined } | null;
  statusReason?: string | null;
  context?: string | null;
}
function toStep(root: jsonP.JSONValue): Step {
  return jsonP.readObj({
    required: {
      "stepName": "s",
      "startTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "endTime": "d",
    },
    optional: {
      "logUrl": "s",
      "artifactsUrl": "s",
      "testArtifactsUrl": "s",
      "testConfigUrl": "s",
      "screenshots": x => jsonP.readMap(String, String, x),
      "statusReason": "s",
      "context": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Artifact {
  artifactFileName: string;
  artifactId: string;
}
function toArtifact(root: jsonP.JSONValue): Artifact {
  return jsonP.readObj({
    required: {
      "artifactFileName": "s",
      "artifactId": "s",
    },
    optional: {},
  }, root);
}
