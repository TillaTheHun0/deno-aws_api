// Autogenerated API client for: Amazon Simple Workflow Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class SWF {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SWF.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2012-01-25",
    "endpointPrefix": "swf",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "Amazon SWF",
    "serviceFullName": "Amazon Simple Workflow Service",
    "serviceId": "SWF",
    "signatureVersion": "v4",
    "targetPrefix": "SimpleWorkflowService",
    "uid": "swf-2012-01-25"
  };

  async countClosedWorkflowExecutions(
    {abortSignal, ...params}: RequestConfig & CountClosedWorkflowExecutionsInput,
  ): Promise<WorkflowExecutionCount> {
    const body: JSONObject = {...params,
    startTimeFilter: fromExecutionTimeFilter(params["startTimeFilter"]),
    closeTimeFilter: fromExecutionTimeFilter(params["closeTimeFilter"]),
    executionFilter: fromWorkflowExecutionFilter(params["executionFilter"]),
    typeFilter: fromWorkflowTypeFilter(params["typeFilter"]),
    tagFilter: fromTagFilter(params["tagFilter"]),
    closeStatusFilter: fromCloseStatusFilter(params["closeStatusFilter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CountClosedWorkflowExecutions",
    });
    return prt.readObj({
      required: {
        "count": "n",
      },
      optional: {
        "truncated": "b",
      },
    }, await resp.json());
  }

  async countOpenWorkflowExecutions(
    {abortSignal, ...params}: RequestConfig & CountOpenWorkflowExecutionsInput,
  ): Promise<WorkflowExecutionCount> {
    const body: JSONObject = {...params,
    startTimeFilter: fromExecutionTimeFilter(params["startTimeFilter"]),
    typeFilter: fromWorkflowTypeFilter(params["typeFilter"]),
    tagFilter: fromTagFilter(params["tagFilter"]),
    executionFilter: fromWorkflowExecutionFilter(params["executionFilter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CountOpenWorkflowExecutions",
    });
    return prt.readObj({
      required: {
        "count": "n",
      },
      optional: {
        "truncated": "b",
      },
    }, await resp.json());
  }

  async countPendingActivityTasks(
    {abortSignal, ...params}: RequestConfig & CountPendingActivityTasksInput,
  ): Promise<PendingTaskCount> {
    const body: JSONObject = {...params,
    taskList: fromTaskList(params["taskList"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CountPendingActivityTasks",
    });
    return prt.readObj({
      required: {
        "count": "n",
      },
      optional: {
        "truncated": "b",
      },
    }, await resp.json());
  }

  async countPendingDecisionTasks(
    {abortSignal, ...params}: RequestConfig & CountPendingDecisionTasksInput,
  ): Promise<PendingTaskCount> {
    const body: JSONObject = {...params,
    taskList: fromTaskList(params["taskList"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CountPendingDecisionTasks",
    });
    return prt.readObj({
      required: {
        "count": "n",
      },
      optional: {
        "truncated": "b",
      },
    }, await resp.json());
  }

  async deprecateActivityType(
    {abortSignal, ...params}: RequestConfig & DeprecateActivityTypeInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    activityType: fromActivityType(params["activityType"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateActivityType",
    });
  }

  async deprecateDomain(
    {abortSignal, ...params}: RequestConfig & DeprecateDomainInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateDomain",
    });
  }

  async deprecateWorkflowType(
    {abortSignal, ...params}: RequestConfig & DeprecateWorkflowTypeInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    workflowType: fromWorkflowType(params["workflowType"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateWorkflowType",
    });
  }

  async describeActivityType(
    {abortSignal, ...params}: RequestConfig & DescribeActivityTypeInput,
  ): Promise<ActivityTypeDetail> {
    const body: JSONObject = {...params,
    activityType: fromActivityType(params["activityType"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeActivityType",
    });
    return prt.readObj({
      required: {
        "typeInfo": toActivityTypeInfo,
        "configuration": toActivityTypeConfiguration,
      },
      optional: {},
    }, await resp.json());
  }

  async describeDomain(
    {abortSignal, ...params}: RequestConfig & DescribeDomainInput,
  ): Promise<DomainDetail> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDomain",
    });
    return prt.readObj({
      required: {
        "domainInfo": toDomainInfo,
        "configuration": toDomainConfiguration,
      },
      optional: {},
    }, await resp.json());
  }

  async describeWorkflowExecution(
    {abortSignal, ...params}: RequestConfig & DescribeWorkflowExecutionInput,
  ): Promise<WorkflowExecutionDetail> {
    const body: JSONObject = {...params,
    execution: fromWorkflowExecution(params["execution"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkflowExecution",
    });
    return prt.readObj({
      required: {
        "executionInfo": toWorkflowExecutionInfo,
        "executionConfiguration": toWorkflowExecutionConfiguration,
        "openCounts": toWorkflowExecutionOpenCounts,
      },
      optional: {
        "latestActivityTaskTimestamp": "d",
        "latestExecutionContext": "s",
      },
    }, await resp.json());
  }

  async describeWorkflowType(
    {abortSignal, ...params}: RequestConfig & DescribeWorkflowTypeInput,
  ): Promise<WorkflowTypeDetail> {
    const body: JSONObject = {...params,
    workflowType: fromWorkflowType(params["workflowType"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkflowType",
    });
    return prt.readObj({
      required: {
        "typeInfo": toWorkflowTypeInfo,
        "configuration": toWorkflowTypeConfiguration,
      },
      optional: {},
    }, await resp.json());
  }

  async getWorkflowExecutionHistory(
    {abortSignal, ...params}: RequestConfig & GetWorkflowExecutionHistoryInput,
  ): Promise<History> {
    const body: JSONObject = {...params,
    execution: fromWorkflowExecution(params["execution"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetWorkflowExecutionHistory",
    });
    return prt.readObj({
      required: {
        "events": [toHistoryEvent],
      },
      optional: {
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async listActivityTypes(
    {abortSignal, ...params}: RequestConfig & ListActivityTypesInput,
  ): Promise<ActivityTypeInfos> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListActivityTypes",
    });
    return prt.readObj({
      required: {
        "typeInfos": [toActivityTypeInfo],
      },
      optional: {
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async listClosedWorkflowExecutions(
    {abortSignal, ...params}: RequestConfig & ListClosedWorkflowExecutionsInput,
  ): Promise<WorkflowExecutionInfos> {
    const body: JSONObject = {...params,
    startTimeFilter: fromExecutionTimeFilter(params["startTimeFilter"]),
    closeTimeFilter: fromExecutionTimeFilter(params["closeTimeFilter"]),
    executionFilter: fromWorkflowExecutionFilter(params["executionFilter"]),
    closeStatusFilter: fromCloseStatusFilter(params["closeStatusFilter"]),
    typeFilter: fromWorkflowTypeFilter(params["typeFilter"]),
    tagFilter: fromTagFilter(params["tagFilter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListClosedWorkflowExecutions",
    });
    return prt.readObj({
      required: {
        "executionInfos": [toWorkflowExecutionInfo],
      },
      optional: {
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async listDomains(
    {abortSignal, ...params}: RequestConfig & ListDomainsInput,
  ): Promise<DomainInfos> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDomains",
    });
    return prt.readObj({
      required: {
        "domainInfos": [toDomainInfo],
      },
      optional: {
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async listOpenWorkflowExecutions(
    {abortSignal, ...params}: RequestConfig & ListOpenWorkflowExecutionsInput,
  ): Promise<WorkflowExecutionInfos> {
    const body: JSONObject = {...params,
    startTimeFilter: fromExecutionTimeFilter(params["startTimeFilter"]),
    typeFilter: fromWorkflowTypeFilter(params["typeFilter"]),
    tagFilter: fromTagFilter(params["tagFilter"]),
    executionFilter: fromWorkflowExecutionFilter(params["executionFilter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOpenWorkflowExecutions",
    });
    return prt.readObj({
      required: {
        "executionInfos": [toWorkflowExecutionInfo],
      },
      optional: {
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "tags": [toResourceTag],
      },
    }, await resp.json());
  }

  async listWorkflowTypes(
    {abortSignal, ...params}: RequestConfig & ListWorkflowTypesInput,
  ): Promise<WorkflowTypeInfos> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWorkflowTypes",
    });
    return prt.readObj({
      required: {
        "typeInfos": [toWorkflowTypeInfo],
      },
      optional: {
        "nextPageToken": "s",
      },
    }, await resp.json());
  }

  async pollForActivityTask(
    {abortSignal, ...params}: RequestConfig & PollForActivityTaskInput,
  ): Promise<ActivityTask> {
    const body: JSONObject = {...params,
    taskList: fromTaskList(params["taskList"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PollForActivityTask",
    });
    return prt.readObj({
      required: {
        "taskToken": "s",
        "activityId": "s",
        "startedEventId": "n",
        "workflowExecution": toWorkflowExecution,
        "activityType": toActivityType,
      },
      optional: {
        "input": "s",
      },
    }, await resp.json());
  }

  async pollForDecisionTask(
    {abortSignal, ...params}: RequestConfig & PollForDecisionTaskInput,
  ): Promise<DecisionTask> {
    const body: JSONObject = {...params,
    taskList: fromTaskList(params["taskList"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PollForDecisionTask",
    });
    return prt.readObj({
      required: {
        "taskToken": "s",
        "startedEventId": "n",
        "workflowExecution": toWorkflowExecution,
        "workflowType": toWorkflowType,
        "events": [toHistoryEvent],
      },
      optional: {
        "nextPageToken": "s",
        "previousStartedEventId": "n",
      },
    }, await resp.json());
  }

  async recordActivityTaskHeartbeat(
    {abortSignal, ...params}: RequestConfig & RecordActivityTaskHeartbeatInput,
  ): Promise<ActivityTaskStatus> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RecordActivityTaskHeartbeat",
    });
    return prt.readObj({
      required: {
        "cancelRequested": "b",
      },
      optional: {},
    }, await resp.json());
  }

  async registerActivityType(
    {abortSignal, ...params}: RequestConfig & RegisterActivityTypeInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    defaultTaskList: fromTaskList(params["defaultTaskList"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterActivityType",
    });
  }

  async registerDomain(
    {abortSignal, ...params}: RequestConfig & RegisterDomainInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    tags: params["tags"]?.map(x => fromResourceTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDomain",
    });
  }

  async registerWorkflowType(
    {abortSignal, ...params}: RequestConfig & RegisterWorkflowTypeInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    defaultTaskList: fromTaskList(params["defaultTaskList"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterWorkflowType",
    });
  }

  async requestCancelWorkflowExecution(
    {abortSignal, ...params}: RequestConfig & RequestCancelWorkflowExecutionInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RequestCancelWorkflowExecution",
    });
  }

  async respondActivityTaskCanceled(
    {abortSignal, ...params}: RequestConfig & RespondActivityTaskCanceledInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RespondActivityTaskCanceled",
    });
  }

  async respondActivityTaskCompleted(
    {abortSignal, ...params}: RequestConfig & RespondActivityTaskCompletedInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RespondActivityTaskCompleted",
    });
  }

  async respondActivityTaskFailed(
    {abortSignal, ...params}: RequestConfig & RespondActivityTaskFailedInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RespondActivityTaskFailed",
    });
  }

  async respondDecisionTaskCompleted(
    {abortSignal, ...params}: RequestConfig & RespondDecisionTaskCompletedInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    decisions: params["decisions"]?.map(x => fromDecision(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RespondDecisionTaskCompleted",
    });
  }

  async signalWorkflowExecution(
    {abortSignal, ...params}: RequestConfig & SignalWorkflowExecutionInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SignalWorkflowExecution",
    });
  }

  async startWorkflowExecution(
    {abortSignal, ...params}: RequestConfig & StartWorkflowExecutionInput,
  ): Promise<Run> {
    const body: JSONObject = {...params,
    workflowType: fromWorkflowType(params["workflowType"]),
    taskList: fromTaskList(params["taskList"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartWorkflowExecution",
    });
    return prt.readObj({
      required: {},
      optional: {
        "runId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    tags: params["tags"]?.map(x => fromResourceTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async terminateWorkflowExecution(
    {abortSignal, ...params}: RequestConfig & TerminateWorkflowExecutionInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateWorkflowExecution",
    });
  }

  async undeprecateActivityType(
    {abortSignal, ...params}: RequestConfig & UndeprecateActivityTypeInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    activityType: fromActivityType(params["activityType"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UndeprecateActivityType",
    });
  }

  async undeprecateDomain(
    {abortSignal, ...params}: RequestConfig & UndeprecateDomainInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UndeprecateDomain",
    });
  }

  async undeprecateWorkflowType(
    {abortSignal, ...params}: RequestConfig & UndeprecateWorkflowTypeInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
    workflowType: fromWorkflowType(params["workflowType"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UndeprecateWorkflowType",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

}

// refs: 1 - tags: named, input
export interface CountClosedWorkflowExecutionsInput {
  domain: string;
  startTimeFilter?: ExecutionTimeFilter | null;
  closeTimeFilter?: ExecutionTimeFilter | null;
  executionFilter?: WorkflowExecutionFilter | null;
  typeFilter?: WorkflowTypeFilter | null;
  tagFilter?: TagFilter | null;
  closeStatusFilter?: CloseStatusFilter | null;
}

// refs: 1 - tags: named, input
export interface CountOpenWorkflowExecutionsInput {
  domain: string;
  startTimeFilter: ExecutionTimeFilter;
  typeFilter?: WorkflowTypeFilter | null;
  tagFilter?: TagFilter | null;
  executionFilter?: WorkflowExecutionFilter | null;
}

// refs: 1 - tags: named, input
export interface CountPendingActivityTasksInput {
  domain: string;
  taskList: TaskList;
}

// refs: 1 - tags: named, input
export interface CountPendingDecisionTasksInput {
  domain: string;
  taskList: TaskList;
}

// refs: 1 - tags: named, input
export interface DeprecateActivityTypeInput {
  domain: string;
  activityType: ActivityType;
}

// refs: 1 - tags: named, input
export interface DeprecateDomainInput {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeprecateWorkflowTypeInput {
  domain: string;
  workflowType: WorkflowType;
}

// refs: 1 - tags: named, input
export interface DescribeActivityTypeInput {
  domain: string;
  activityType: ActivityType;
}

// refs: 1 - tags: named, input
export interface DescribeDomainInput {
  name: string;
}

// refs: 1 - tags: named, input
export interface DescribeWorkflowExecutionInput {
  domain: string;
  execution: WorkflowExecution;
}

// refs: 1 - tags: named, input
export interface DescribeWorkflowTypeInput {
  domain: string;
  workflowType: WorkflowType;
}

// refs: 1 - tags: named, input
export interface GetWorkflowExecutionHistoryInput {
  domain: string;
  execution: WorkflowExecution;
  nextPageToken?: string | null;
  maximumPageSize?: number | null;
  reverseOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListActivityTypesInput {
  domain: string;
  name?: string | null;
  registrationStatus: RegistrationStatus;
  nextPageToken?: string | null;
  maximumPageSize?: number | null;
  reverseOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListClosedWorkflowExecutionsInput {
  domain: string;
  startTimeFilter?: ExecutionTimeFilter | null;
  closeTimeFilter?: ExecutionTimeFilter | null;
  executionFilter?: WorkflowExecutionFilter | null;
  closeStatusFilter?: CloseStatusFilter | null;
  typeFilter?: WorkflowTypeFilter | null;
  tagFilter?: TagFilter | null;
  nextPageToken?: string | null;
  maximumPageSize?: number | null;
  reverseOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListDomainsInput {
  nextPageToken?: string | null;
  registrationStatus: RegistrationStatus;
  maximumPageSize?: number | null;
  reverseOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListOpenWorkflowExecutionsInput {
  domain: string;
  startTimeFilter: ExecutionTimeFilter;
  typeFilter?: WorkflowTypeFilter | null;
  tagFilter?: TagFilter | null;
  nextPageToken?: string | null;
  maximumPageSize?: number | null;
  reverseOrder?: boolean | null;
  executionFilter?: WorkflowExecutionFilter | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListWorkflowTypesInput {
  domain: string;
  name?: string | null;
  registrationStatus: RegistrationStatus;
  nextPageToken?: string | null;
  maximumPageSize?: number | null;
  reverseOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PollForActivityTaskInput {
  domain: string;
  taskList: TaskList;
  identity?: string | null;
}

// refs: 1 - tags: named, input
export interface PollForDecisionTaskInput {
  domain: string;
  taskList: TaskList;
  identity?: string | null;
  nextPageToken?: string | null;
  maximumPageSize?: number | null;
  reverseOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface RecordActivityTaskHeartbeatInput {
  taskToken: string;
  details?: string | null;
}

// refs: 1 - tags: named, input
export interface RegisterActivityTypeInput {
  domain: string;
  name: string;
  version: string;
  description?: string | null;
  defaultTaskStartToCloseTimeout?: string | null;
  defaultTaskHeartbeatTimeout?: string | null;
  defaultTaskList?: TaskList | null;
  defaultTaskPriority?: string | null;
  defaultTaskScheduleToStartTimeout?: string | null;
  defaultTaskScheduleToCloseTimeout?: string | null;
}

// refs: 1 - tags: named, input
export interface RegisterDomainInput {
  name: string;
  description?: string | null;
  workflowExecutionRetentionPeriodInDays: string;
  tags?: ResourceTag[] | null;
}

// refs: 1 - tags: named, input
export interface RegisterWorkflowTypeInput {
  domain: string;
  name: string;
  version: string;
  description?: string | null;
  defaultTaskStartToCloseTimeout?: string | null;
  defaultExecutionStartToCloseTimeout?: string | null;
  defaultTaskList?: TaskList | null;
  defaultTaskPriority?: string | null;
  defaultChildPolicy?: ChildPolicy | null;
  defaultLambdaRole?: string | null;
}

// refs: 1 - tags: named, input
export interface RequestCancelWorkflowExecutionInput {
  domain: string;
  workflowId: string;
  runId?: string | null;
}

// refs: 1 - tags: named, input
export interface RespondActivityTaskCanceledInput {
  taskToken: string;
  details?: string | null;
}

// refs: 1 - tags: named, input
export interface RespondActivityTaskCompletedInput {
  taskToken: string;
  result?: string | null;
}

// refs: 1 - tags: named, input
export interface RespondActivityTaskFailedInput {
  taskToken: string;
  reason?: string | null;
  details?: string | null;
}

// refs: 1 - tags: named, input
export interface RespondDecisionTaskCompletedInput {
  taskToken: string;
  decisions?: Decision[] | null;
  executionContext?: string | null;
}

// refs: 1 - tags: named, input
export interface SignalWorkflowExecutionInput {
  domain: string;
  workflowId: string;
  runId?: string | null;
  signalName: string;
  input?: string | null;
}

// refs: 1 - tags: named, input
export interface StartWorkflowExecutionInput {
  domain: string;
  workflowId: string;
  workflowType: WorkflowType;
  taskList?: TaskList | null;
  taskPriority?: string | null;
  input?: string | null;
  executionStartToCloseTimeout?: string | null;
  tagList?: string[] | null;
  taskStartToCloseTimeout?: string | null;
  childPolicy?: ChildPolicy | null;
  lambdaRole?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  resourceArn: string;
  tags: ResourceTag[];
}

// refs: 1 - tags: named, input
export interface TerminateWorkflowExecutionInput {
  domain: string;
  workflowId: string;
  runId?: string | null;
  reason?: string | null;
  details?: string | null;
  childPolicy?: ChildPolicy | null;
}

// refs: 1 - tags: named, input
export interface UndeprecateActivityTypeInput {
  domain: string;
  activityType: ActivityType;
}

// refs: 1 - tags: named, input
export interface UndeprecateDomainInput {
  name: string;
}

// refs: 1 - tags: named, input
export interface UndeprecateWorkflowTypeInput {
  domain: string;
  workflowType: WorkflowType;
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, output
export interface WorkflowExecutionCount {
  count: number;
  truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface PendingTaskCount {
  count: number;
  truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ActivityTypeDetail {
  typeInfo: ActivityTypeInfo;
  configuration: ActivityTypeConfiguration;
}

// refs: 1 - tags: named, output
export interface DomainDetail {
  domainInfo: DomainInfo;
  configuration: DomainConfiguration;
}

// refs: 1 - tags: named, output
export interface WorkflowExecutionDetail {
  executionInfo: WorkflowExecutionInfo;
  executionConfiguration: WorkflowExecutionConfiguration;
  openCounts: WorkflowExecutionOpenCounts;
  latestActivityTaskTimestamp?: Date | number | null;
  latestExecutionContext?: string | null;
}

// refs: 1 - tags: named, output
export interface WorkflowTypeDetail {
  typeInfo: WorkflowTypeInfo;
  configuration: WorkflowTypeConfiguration;
}

// refs: 1 - tags: named, output
export interface History {
  events: HistoryEvent[];
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ActivityTypeInfos {
  typeInfos: ActivityTypeInfo[];
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface WorkflowExecutionInfos {
  executionInfos: WorkflowExecutionInfo[];
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DomainInfos {
  domainInfos: DomainInfo[];
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceOutput {
  tags?: ResourceTag[] | null;
}

// refs: 1 - tags: named, output
export interface WorkflowTypeInfos {
  typeInfos: WorkflowTypeInfo[];
  nextPageToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ActivityTask {
  taskToken: string;
  activityId: string;
  startedEventId: number;
  workflowExecution: WorkflowExecution;
  activityType: ActivityType;
  input?: string | null;
}

// refs: 1 - tags: named, output
export interface DecisionTask {
  taskToken: string;
  startedEventId: number;
  workflowExecution: WorkflowExecution;
  workflowType: WorkflowType;
  events: HistoryEvent[];
  nextPageToken?: string | null;
  previousStartedEventId?: number | null;
}

// refs: 1 - tags: named, output
export interface ActivityTaskStatus {
  cancelRequested: boolean;
}

// refs: 1 - tags: named, output
export interface Run {
  runId?: string | null;
}

// refs: 6 - tags: input, named, interface
export interface ExecutionTimeFilter {
  oldestDate: Date | number;
  latestDate?: Date | number | null;
}
function fromExecutionTimeFilter(input?: ExecutionTimeFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
    oldestDate: prt.serializeDate_unixTimestamp(input["oldestDate"]),
    latestDate: prt.serializeDate_unixTimestamp(input["latestDate"]),
  }
}

// refs: 4 - tags: input, named, interface
export interface WorkflowExecutionFilter {
  workflowId: string;
}
function fromWorkflowExecutionFilter(input?: WorkflowExecutionFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 4 - tags: input, named, interface
export interface WorkflowTypeFilter {
  name: string;
  version?: string | null;
}
function fromWorkflowTypeFilter(input?: WorkflowTypeFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 4 - tags: input, named, interface
export interface TagFilter {
  tag: string;
}
function fromTagFilter(input?: TagFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, interface
export interface CloseStatusFilter {
  status: CloseStatus;
}
function fromCloseStatusFilter(input?: CloseStatusFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 4 - tags: input, named, enum, output
export type CloseStatus =
| "COMPLETED"
| "FAILED"
| "CANCELED"
| "TERMINATED"
| "CONTINUED_AS_NEW"
| "TIMED_OUT"
;

function toCloseStatus(root: JSONValue): CloseStatus | null {
  return ( false
    || root == "COMPLETED"
    || root == "FAILED"
    || root == "CANCELED"
    || root == "TERMINATED"
    || root == "CONTINUED_AS_NEW"
    || root == "TIMED_OUT"
  ) ? root : null;
}

// refs: 23 - tags: input, named, interface, output
export interface TaskList {
  name: string;
}
function fromTaskList(input?: TaskList | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTaskList(root: JSONValue): TaskList {
  return prt.readObj({
    required: {
      "name": "s",
    },
    optional: {},
  }, root);
}

// refs: 11 - tags: input, named, interface, output
export interface ActivityType {
  name: string;
  version: string;
}
function fromActivityType(input?: ActivityType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toActivityType(root: JSONValue): ActivityType {
  return prt.readObj({
    required: {
      "name": "s",
      "version": "s",
    },
    optional: {},
  }, root);
}

// refs: 30 - tags: input, named, interface, output
export interface WorkflowType {
  name: string;
  version: string;
}
function fromWorkflowType(input?: WorkflowType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toWorkflowType(root: JSONValue): WorkflowType {
  return prt.readObj({
    required: {
      "name": "s",
      "version": "s",
    },
    optional: {},
  }, root);
}

// refs: 30 - tags: input, named, interface, output
export interface WorkflowExecution {
  workflowId: string;
  runId: string;
}
function fromWorkflowExecution(input?: WorkflowExecution | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toWorkflowExecution(root: JSONValue): WorkflowExecution {
  return prt.readObj({
    required: {
      "workflowId": "s",
      "runId": "s",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type RegistrationStatus =
| "REGISTERED"
| "DEPRECATED"
;

function toRegistrationStatus(root: JSONValue): RegistrationStatus | null {
  return ( false
    || root == "REGISTERED"
    || root == "DEPRECATED"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface ResourceTag {
  key: string;
  value?: string | null;
}
function fromResourceTag(input?: ResourceTag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toResourceTag(root: JSONValue): ResourceTag {
  return prt.readObj({
    required: {
      "key": "s",
    },
    optional: {
      "value": "s",
    },
  }, root);
}

// refs: 17 - tags: input, named, enum, output
export type ChildPolicy =
| "TERMINATE"
| "REQUEST_CANCEL"
| "ABANDON"
;

function toChildPolicy(root: JSONValue): ChildPolicy | null {
  return ( false
    || root == "TERMINATE"
    || root == "REQUEST_CANCEL"
    || root == "ABANDON"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface Decision {
  decisionType: DecisionType;
  scheduleActivityTaskDecisionAttributes?: ScheduleActivityTaskDecisionAttributes | null;
  requestCancelActivityTaskDecisionAttributes?: RequestCancelActivityTaskDecisionAttributes | null;
  completeWorkflowExecutionDecisionAttributes?: CompleteWorkflowExecutionDecisionAttributes | null;
  failWorkflowExecutionDecisionAttributes?: FailWorkflowExecutionDecisionAttributes | null;
  cancelWorkflowExecutionDecisionAttributes?: CancelWorkflowExecutionDecisionAttributes | null;
  continueAsNewWorkflowExecutionDecisionAttributes?: ContinueAsNewWorkflowExecutionDecisionAttributes | null;
  recordMarkerDecisionAttributes?: RecordMarkerDecisionAttributes | null;
  startTimerDecisionAttributes?: StartTimerDecisionAttributes | null;
  cancelTimerDecisionAttributes?: CancelTimerDecisionAttributes | null;
  signalExternalWorkflowExecutionDecisionAttributes?: SignalExternalWorkflowExecutionDecisionAttributes | null;
  requestCancelExternalWorkflowExecutionDecisionAttributes?: RequestCancelExternalWorkflowExecutionDecisionAttributes | null;
  startChildWorkflowExecutionDecisionAttributes?: StartChildWorkflowExecutionDecisionAttributes | null;
  scheduleLambdaFunctionDecisionAttributes?: ScheduleLambdaFunctionDecisionAttributes | null;
}
function fromDecision(input?: Decision | null): JSONValue {
  if (!input) return input;
  return {...input,
    scheduleActivityTaskDecisionAttributes: fromScheduleActivityTaskDecisionAttributes(input["scheduleActivityTaskDecisionAttributes"]),
    requestCancelActivityTaskDecisionAttributes: fromRequestCancelActivityTaskDecisionAttributes(input["requestCancelActivityTaskDecisionAttributes"]),
    completeWorkflowExecutionDecisionAttributes: fromCompleteWorkflowExecutionDecisionAttributes(input["completeWorkflowExecutionDecisionAttributes"]),
    failWorkflowExecutionDecisionAttributes: fromFailWorkflowExecutionDecisionAttributes(input["failWorkflowExecutionDecisionAttributes"]),
    cancelWorkflowExecutionDecisionAttributes: fromCancelWorkflowExecutionDecisionAttributes(input["cancelWorkflowExecutionDecisionAttributes"]),
    continueAsNewWorkflowExecutionDecisionAttributes: fromContinueAsNewWorkflowExecutionDecisionAttributes(input["continueAsNewWorkflowExecutionDecisionAttributes"]),
    recordMarkerDecisionAttributes: fromRecordMarkerDecisionAttributes(input["recordMarkerDecisionAttributes"]),
    startTimerDecisionAttributes: fromStartTimerDecisionAttributes(input["startTimerDecisionAttributes"]),
    cancelTimerDecisionAttributes: fromCancelTimerDecisionAttributes(input["cancelTimerDecisionAttributes"]),
    signalExternalWorkflowExecutionDecisionAttributes: fromSignalExternalWorkflowExecutionDecisionAttributes(input["signalExternalWorkflowExecutionDecisionAttributes"]),
    requestCancelExternalWorkflowExecutionDecisionAttributes: fromRequestCancelExternalWorkflowExecutionDecisionAttributes(input["requestCancelExternalWorkflowExecutionDecisionAttributes"]),
    startChildWorkflowExecutionDecisionAttributes: fromStartChildWorkflowExecutionDecisionAttributes(input["startChildWorkflowExecutionDecisionAttributes"]),
    scheduleLambdaFunctionDecisionAttributes: fromScheduleLambdaFunctionDecisionAttributes(input["scheduleLambdaFunctionDecisionAttributes"]),
  }
}

// refs: 1 - tags: input, named, enum
export type DecisionType =
| "ScheduleActivityTask"
| "RequestCancelActivityTask"
| "CompleteWorkflowExecution"
| "FailWorkflowExecution"
| "CancelWorkflowExecution"
| "ContinueAsNewWorkflowExecution"
| "RecordMarker"
| "StartTimer"
| "CancelTimer"
| "SignalExternalWorkflowExecution"
| "RequestCancelExternalWorkflowExecution"
| "StartChildWorkflowExecution"
| "ScheduleLambdaFunction"
;


// refs: 1 - tags: input, named, interface
export interface ScheduleActivityTaskDecisionAttributes {
  activityType: ActivityType;
  activityId: string;
  control?: string | null;
  input?: string | null;
  scheduleToCloseTimeout?: string | null;
  taskList?: TaskList | null;
  taskPriority?: string | null;
  scheduleToStartTimeout?: string | null;
  startToCloseTimeout?: string | null;
  heartbeatTimeout?: string | null;
}
function fromScheduleActivityTaskDecisionAttributes(input?: ScheduleActivityTaskDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
    activityType: fromActivityType(input["activityType"]),
    taskList: fromTaskList(input["taskList"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface RequestCancelActivityTaskDecisionAttributes {
  activityId: string;
}
function fromRequestCancelActivityTaskDecisionAttributes(input?: RequestCancelActivityTaskDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface CompleteWorkflowExecutionDecisionAttributes {
  result?: string | null;
}
function fromCompleteWorkflowExecutionDecisionAttributes(input?: CompleteWorkflowExecutionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface FailWorkflowExecutionDecisionAttributes {
  reason?: string | null;
  details?: string | null;
}
function fromFailWorkflowExecutionDecisionAttributes(input?: FailWorkflowExecutionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface CancelWorkflowExecutionDecisionAttributes {
  details?: string | null;
}
function fromCancelWorkflowExecutionDecisionAttributes(input?: CancelWorkflowExecutionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface ContinueAsNewWorkflowExecutionDecisionAttributes {
  input?: string | null;
  executionStartToCloseTimeout?: string | null;
  taskList?: TaskList | null;
  taskPriority?: string | null;
  taskStartToCloseTimeout?: string | null;
  childPolicy?: ChildPolicy | null;
  tagList?: string[] | null;
  workflowTypeVersion?: string | null;
  lambdaRole?: string | null;
}
function fromContinueAsNewWorkflowExecutionDecisionAttributes(input?: ContinueAsNewWorkflowExecutionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
    taskList: fromTaskList(input["taskList"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface RecordMarkerDecisionAttributes {
  markerName: string;
  details?: string | null;
}
function fromRecordMarkerDecisionAttributes(input?: RecordMarkerDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface StartTimerDecisionAttributes {
  timerId: string;
  control?: string | null;
  startToFireTimeout: string;
}
function fromStartTimerDecisionAttributes(input?: StartTimerDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface CancelTimerDecisionAttributes {
  timerId: string;
}
function fromCancelTimerDecisionAttributes(input?: CancelTimerDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface SignalExternalWorkflowExecutionDecisionAttributes {
  workflowId: string;
  runId?: string | null;
  signalName: string;
  input?: string | null;
  control?: string | null;
}
function fromSignalExternalWorkflowExecutionDecisionAttributes(input?: SignalExternalWorkflowExecutionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface RequestCancelExternalWorkflowExecutionDecisionAttributes {
  workflowId: string;
  runId?: string | null;
  control?: string | null;
}
function fromRequestCancelExternalWorkflowExecutionDecisionAttributes(input?: RequestCancelExternalWorkflowExecutionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface StartChildWorkflowExecutionDecisionAttributes {
  workflowType: WorkflowType;
  workflowId: string;
  control?: string | null;
  input?: string | null;
  executionStartToCloseTimeout?: string | null;
  taskList?: TaskList | null;
  taskPriority?: string | null;
  taskStartToCloseTimeout?: string | null;
  childPolicy?: ChildPolicy | null;
  tagList?: string[] | null;
  lambdaRole?: string | null;
}
function fromStartChildWorkflowExecutionDecisionAttributes(input?: StartChildWorkflowExecutionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
    workflowType: fromWorkflowType(input["workflowType"]),
    taskList: fromTaskList(input["taskList"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface ScheduleLambdaFunctionDecisionAttributes {
  id: string;
  name: string;
  control?: string | null;
  input?: string | null;
  startToCloseTimeout?: string | null;
}
function fromScheduleLambdaFunctionDecisionAttributes(input?: ScheduleLambdaFunctionDecisionAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: output, named, interface
export interface ActivityTypeInfo {
  activityType: ActivityType;
  status: RegistrationStatus;
  description?: string | null;
  creationDate: Date | number;
  deprecationDate?: Date | number | null;
}
function toActivityTypeInfo(root: JSONValue): ActivityTypeInfo {
  return prt.readObj({
    required: {
      "activityType": toActivityType,
      "status": toRegistrationStatus,
      "creationDate": "d",
    },
    optional: {
      "description": "s",
      "deprecationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivityTypeConfiguration {
  defaultTaskStartToCloseTimeout?: string | null;
  defaultTaskHeartbeatTimeout?: string | null;
  defaultTaskList?: TaskList | null;
  defaultTaskPriority?: string | null;
  defaultTaskScheduleToStartTimeout?: string | null;
  defaultTaskScheduleToCloseTimeout?: string | null;
}
function toActivityTypeConfiguration(root: JSONValue): ActivityTypeConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "defaultTaskStartToCloseTimeout": "s",
      "defaultTaskHeartbeatTimeout": "s",
      "defaultTaskList": toTaskList,
      "defaultTaskPriority": "s",
      "defaultTaskScheduleToStartTimeout": "s",
      "defaultTaskScheduleToCloseTimeout": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DomainInfo {
  name: string;
  status: RegistrationStatus;
  description?: string | null;
  arn?: string | null;
}
function toDomainInfo(root: JSONValue): DomainInfo {
  return prt.readObj({
    required: {
      "name": "s",
      "status": toRegistrationStatus,
    },
    optional: {
      "description": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DomainConfiguration {
  workflowExecutionRetentionPeriodInDays: string;
}
function toDomainConfiguration(root: JSONValue): DomainConfiguration {
  return prt.readObj({
    required: {
      "workflowExecutionRetentionPeriodInDays": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionInfo {
  execution: WorkflowExecution;
  workflowType: WorkflowType;
  startTimestamp: Date | number;
  closeTimestamp?: Date | number | null;
  executionStatus: ExecutionStatus;
  closeStatus?: CloseStatus | null;
  parent?: WorkflowExecution | null;
  tagList?: string[] | null;
  cancelRequested?: boolean | null;
}
function toWorkflowExecutionInfo(root: JSONValue): WorkflowExecutionInfo {
  return prt.readObj({
    required: {
      "execution": toWorkflowExecution,
      "workflowType": toWorkflowType,
      "startTimestamp": "d",
      "executionStatus": toExecutionStatus,
    },
    optional: {
      "closeTimestamp": "d",
      "closeStatus": toCloseStatus,
      "parent": toWorkflowExecution,
      "tagList": ["s"],
      "cancelRequested": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ExecutionStatus =
| "OPEN"
| "CLOSED"
;
function toExecutionStatus(root: JSONValue): ExecutionStatus | null {
  return ( false
    || root == "OPEN"
    || root == "CLOSED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface WorkflowExecutionConfiguration {
  taskStartToCloseTimeout: string;
  executionStartToCloseTimeout: string;
  taskList: TaskList;
  taskPriority?: string | null;
  childPolicy: ChildPolicy;
  lambdaRole?: string | null;
}
function toWorkflowExecutionConfiguration(root: JSONValue): WorkflowExecutionConfiguration {
  return prt.readObj({
    required: {
      "taskStartToCloseTimeout": "s",
      "executionStartToCloseTimeout": "s",
      "taskList": toTaskList,
      "childPolicy": toChildPolicy,
    },
    optional: {
      "taskPriority": "s",
      "lambdaRole": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkflowExecutionOpenCounts {
  openActivityTasks: number;
  openDecisionTasks: number;
  openTimers: number;
  openChildWorkflowExecutions: number;
  openLambdaFunctions?: number | null;
}
function toWorkflowExecutionOpenCounts(root: JSONValue): WorkflowExecutionOpenCounts {
  return prt.readObj({
    required: {
      "openActivityTasks": "n",
      "openDecisionTasks": "n",
      "openTimers": "n",
      "openChildWorkflowExecutions": "n",
    },
    optional: {
      "openLambdaFunctions": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface WorkflowTypeInfo {
  workflowType: WorkflowType;
  status: RegistrationStatus;
  description?: string | null;
  creationDate: Date | number;
  deprecationDate?: Date | number | null;
}
function toWorkflowTypeInfo(root: JSONValue): WorkflowTypeInfo {
  return prt.readObj({
    required: {
      "workflowType": toWorkflowType,
      "status": toRegistrationStatus,
      "creationDate": "d",
    },
    optional: {
      "description": "s",
      "deprecationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WorkflowTypeConfiguration {
  defaultTaskStartToCloseTimeout?: string | null;
  defaultExecutionStartToCloseTimeout?: string | null;
  defaultTaskList?: TaskList | null;
  defaultTaskPriority?: string | null;
  defaultChildPolicy?: ChildPolicy | null;
  defaultLambdaRole?: string | null;
}
function toWorkflowTypeConfiguration(root: JSONValue): WorkflowTypeConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "defaultTaskStartToCloseTimeout": "s",
      "defaultExecutionStartToCloseTimeout": "s",
      "defaultTaskList": toTaskList,
      "defaultTaskPriority": "s",
      "defaultChildPolicy": toChildPolicy,
      "defaultLambdaRole": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface HistoryEvent {
  eventTimestamp: Date | number;
  eventType: EventType;
  eventId: number;
  workflowExecutionStartedEventAttributes?: WorkflowExecutionStartedEventAttributes | null;
  workflowExecutionCompletedEventAttributes?: WorkflowExecutionCompletedEventAttributes | null;
  completeWorkflowExecutionFailedEventAttributes?: CompleteWorkflowExecutionFailedEventAttributes | null;
  workflowExecutionFailedEventAttributes?: WorkflowExecutionFailedEventAttributes | null;
  failWorkflowExecutionFailedEventAttributes?: FailWorkflowExecutionFailedEventAttributes | null;
  workflowExecutionTimedOutEventAttributes?: WorkflowExecutionTimedOutEventAttributes | null;
  workflowExecutionCanceledEventAttributes?: WorkflowExecutionCanceledEventAttributes | null;
  cancelWorkflowExecutionFailedEventAttributes?: CancelWorkflowExecutionFailedEventAttributes | null;
  workflowExecutionContinuedAsNewEventAttributes?: WorkflowExecutionContinuedAsNewEventAttributes | null;
  continueAsNewWorkflowExecutionFailedEventAttributes?: ContinueAsNewWorkflowExecutionFailedEventAttributes | null;
  workflowExecutionTerminatedEventAttributes?: WorkflowExecutionTerminatedEventAttributes | null;
  workflowExecutionCancelRequestedEventAttributes?: WorkflowExecutionCancelRequestedEventAttributes | null;
  decisionTaskScheduledEventAttributes?: DecisionTaskScheduledEventAttributes | null;
  decisionTaskStartedEventAttributes?: DecisionTaskStartedEventAttributes | null;
  decisionTaskCompletedEventAttributes?: DecisionTaskCompletedEventAttributes | null;
  decisionTaskTimedOutEventAttributes?: DecisionTaskTimedOutEventAttributes | null;
  activityTaskScheduledEventAttributes?: ActivityTaskScheduledEventAttributes | null;
  activityTaskStartedEventAttributes?: ActivityTaskStartedEventAttributes | null;
  activityTaskCompletedEventAttributes?: ActivityTaskCompletedEventAttributes | null;
  activityTaskFailedEventAttributes?: ActivityTaskFailedEventAttributes | null;
  activityTaskTimedOutEventAttributes?: ActivityTaskTimedOutEventAttributes | null;
  activityTaskCanceledEventAttributes?: ActivityTaskCanceledEventAttributes | null;
  activityTaskCancelRequestedEventAttributes?: ActivityTaskCancelRequestedEventAttributes | null;
  workflowExecutionSignaledEventAttributes?: WorkflowExecutionSignaledEventAttributes | null;
  markerRecordedEventAttributes?: MarkerRecordedEventAttributes | null;
  recordMarkerFailedEventAttributes?: RecordMarkerFailedEventAttributes | null;
  timerStartedEventAttributes?: TimerStartedEventAttributes | null;
  timerFiredEventAttributes?: TimerFiredEventAttributes | null;
  timerCanceledEventAttributes?: TimerCanceledEventAttributes | null;
  startChildWorkflowExecutionInitiatedEventAttributes?: StartChildWorkflowExecutionInitiatedEventAttributes | null;
  childWorkflowExecutionStartedEventAttributes?: ChildWorkflowExecutionStartedEventAttributes | null;
  childWorkflowExecutionCompletedEventAttributes?: ChildWorkflowExecutionCompletedEventAttributes | null;
  childWorkflowExecutionFailedEventAttributes?: ChildWorkflowExecutionFailedEventAttributes | null;
  childWorkflowExecutionTimedOutEventAttributes?: ChildWorkflowExecutionTimedOutEventAttributes | null;
  childWorkflowExecutionCanceledEventAttributes?: ChildWorkflowExecutionCanceledEventAttributes | null;
  childWorkflowExecutionTerminatedEventAttributes?: ChildWorkflowExecutionTerminatedEventAttributes | null;
  signalExternalWorkflowExecutionInitiatedEventAttributes?: SignalExternalWorkflowExecutionInitiatedEventAttributes | null;
  externalWorkflowExecutionSignaledEventAttributes?: ExternalWorkflowExecutionSignaledEventAttributes | null;
  signalExternalWorkflowExecutionFailedEventAttributes?: SignalExternalWorkflowExecutionFailedEventAttributes | null;
  externalWorkflowExecutionCancelRequestedEventAttributes?: ExternalWorkflowExecutionCancelRequestedEventAttributes | null;
  requestCancelExternalWorkflowExecutionInitiatedEventAttributes?: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes | null;
  requestCancelExternalWorkflowExecutionFailedEventAttributes?: RequestCancelExternalWorkflowExecutionFailedEventAttributes | null;
  scheduleActivityTaskFailedEventAttributes?: ScheduleActivityTaskFailedEventAttributes | null;
  requestCancelActivityTaskFailedEventAttributes?: RequestCancelActivityTaskFailedEventAttributes | null;
  startTimerFailedEventAttributes?: StartTimerFailedEventAttributes | null;
  cancelTimerFailedEventAttributes?: CancelTimerFailedEventAttributes | null;
  startChildWorkflowExecutionFailedEventAttributes?: StartChildWorkflowExecutionFailedEventAttributes | null;
  lambdaFunctionScheduledEventAttributes?: LambdaFunctionScheduledEventAttributes | null;
  lambdaFunctionStartedEventAttributes?: LambdaFunctionStartedEventAttributes | null;
  lambdaFunctionCompletedEventAttributes?: LambdaFunctionCompletedEventAttributes | null;
  lambdaFunctionFailedEventAttributes?: LambdaFunctionFailedEventAttributes | null;
  lambdaFunctionTimedOutEventAttributes?: LambdaFunctionTimedOutEventAttributes | null;
  scheduleLambdaFunctionFailedEventAttributes?: ScheduleLambdaFunctionFailedEventAttributes | null;
  startLambdaFunctionFailedEventAttributes?: StartLambdaFunctionFailedEventAttributes | null;
}
function toHistoryEvent(root: JSONValue): HistoryEvent {
  return prt.readObj({
    required: {
      "eventTimestamp": "d",
      "eventType": toEventType,
      "eventId": "n",
    },
    optional: {
      "workflowExecutionStartedEventAttributes": toWorkflowExecutionStartedEventAttributes,
      "workflowExecutionCompletedEventAttributes": toWorkflowExecutionCompletedEventAttributes,
      "completeWorkflowExecutionFailedEventAttributes": toCompleteWorkflowExecutionFailedEventAttributes,
      "workflowExecutionFailedEventAttributes": toWorkflowExecutionFailedEventAttributes,
      "failWorkflowExecutionFailedEventAttributes": toFailWorkflowExecutionFailedEventAttributes,
      "workflowExecutionTimedOutEventAttributes": toWorkflowExecutionTimedOutEventAttributes,
      "workflowExecutionCanceledEventAttributes": toWorkflowExecutionCanceledEventAttributes,
      "cancelWorkflowExecutionFailedEventAttributes": toCancelWorkflowExecutionFailedEventAttributes,
      "workflowExecutionContinuedAsNewEventAttributes": toWorkflowExecutionContinuedAsNewEventAttributes,
      "continueAsNewWorkflowExecutionFailedEventAttributes": toContinueAsNewWorkflowExecutionFailedEventAttributes,
      "workflowExecutionTerminatedEventAttributes": toWorkflowExecutionTerminatedEventAttributes,
      "workflowExecutionCancelRequestedEventAttributes": toWorkflowExecutionCancelRequestedEventAttributes,
      "decisionTaskScheduledEventAttributes": toDecisionTaskScheduledEventAttributes,
      "decisionTaskStartedEventAttributes": toDecisionTaskStartedEventAttributes,
      "decisionTaskCompletedEventAttributes": toDecisionTaskCompletedEventAttributes,
      "decisionTaskTimedOutEventAttributes": toDecisionTaskTimedOutEventAttributes,
      "activityTaskScheduledEventAttributes": toActivityTaskScheduledEventAttributes,
      "activityTaskStartedEventAttributes": toActivityTaskStartedEventAttributes,
      "activityTaskCompletedEventAttributes": toActivityTaskCompletedEventAttributes,
      "activityTaskFailedEventAttributes": toActivityTaskFailedEventAttributes,
      "activityTaskTimedOutEventAttributes": toActivityTaskTimedOutEventAttributes,
      "activityTaskCanceledEventAttributes": toActivityTaskCanceledEventAttributes,
      "activityTaskCancelRequestedEventAttributes": toActivityTaskCancelRequestedEventAttributes,
      "workflowExecutionSignaledEventAttributes": toWorkflowExecutionSignaledEventAttributes,
      "markerRecordedEventAttributes": toMarkerRecordedEventAttributes,
      "recordMarkerFailedEventAttributes": toRecordMarkerFailedEventAttributes,
      "timerStartedEventAttributes": toTimerStartedEventAttributes,
      "timerFiredEventAttributes": toTimerFiredEventAttributes,
      "timerCanceledEventAttributes": toTimerCanceledEventAttributes,
      "startChildWorkflowExecutionInitiatedEventAttributes": toStartChildWorkflowExecutionInitiatedEventAttributes,
      "childWorkflowExecutionStartedEventAttributes": toChildWorkflowExecutionStartedEventAttributes,
      "childWorkflowExecutionCompletedEventAttributes": toChildWorkflowExecutionCompletedEventAttributes,
      "childWorkflowExecutionFailedEventAttributes": toChildWorkflowExecutionFailedEventAttributes,
      "childWorkflowExecutionTimedOutEventAttributes": toChildWorkflowExecutionTimedOutEventAttributes,
      "childWorkflowExecutionCanceledEventAttributes": toChildWorkflowExecutionCanceledEventAttributes,
      "childWorkflowExecutionTerminatedEventAttributes": toChildWorkflowExecutionTerminatedEventAttributes,
      "signalExternalWorkflowExecutionInitiatedEventAttributes": toSignalExternalWorkflowExecutionInitiatedEventAttributes,
      "externalWorkflowExecutionSignaledEventAttributes": toExternalWorkflowExecutionSignaledEventAttributes,
      "signalExternalWorkflowExecutionFailedEventAttributes": toSignalExternalWorkflowExecutionFailedEventAttributes,
      "externalWorkflowExecutionCancelRequestedEventAttributes": toExternalWorkflowExecutionCancelRequestedEventAttributes,
      "requestCancelExternalWorkflowExecutionInitiatedEventAttributes": toRequestCancelExternalWorkflowExecutionInitiatedEventAttributes,
      "requestCancelExternalWorkflowExecutionFailedEventAttributes": toRequestCancelExternalWorkflowExecutionFailedEventAttributes,
      "scheduleActivityTaskFailedEventAttributes": toScheduleActivityTaskFailedEventAttributes,
      "requestCancelActivityTaskFailedEventAttributes": toRequestCancelActivityTaskFailedEventAttributes,
      "startTimerFailedEventAttributes": toStartTimerFailedEventAttributes,
      "cancelTimerFailedEventAttributes": toCancelTimerFailedEventAttributes,
      "startChildWorkflowExecutionFailedEventAttributes": toStartChildWorkflowExecutionFailedEventAttributes,
      "lambdaFunctionScheduledEventAttributes": toLambdaFunctionScheduledEventAttributes,
      "lambdaFunctionStartedEventAttributes": toLambdaFunctionStartedEventAttributes,
      "lambdaFunctionCompletedEventAttributes": toLambdaFunctionCompletedEventAttributes,
      "lambdaFunctionFailedEventAttributes": toLambdaFunctionFailedEventAttributes,
      "lambdaFunctionTimedOutEventAttributes": toLambdaFunctionTimedOutEventAttributes,
      "scheduleLambdaFunctionFailedEventAttributes": toScheduleLambdaFunctionFailedEventAttributes,
      "startLambdaFunctionFailedEventAttributes": toStartLambdaFunctionFailedEventAttributes,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type EventType =
| "WorkflowExecutionStarted"
| "WorkflowExecutionCancelRequested"
| "WorkflowExecutionCompleted"
| "CompleteWorkflowExecutionFailed"
| "WorkflowExecutionFailed"
| "FailWorkflowExecutionFailed"
| "WorkflowExecutionTimedOut"
| "WorkflowExecutionCanceled"
| "CancelWorkflowExecutionFailed"
| "WorkflowExecutionContinuedAsNew"
| "ContinueAsNewWorkflowExecutionFailed"
| "WorkflowExecutionTerminated"
| "DecisionTaskScheduled"
| "DecisionTaskStarted"
| "DecisionTaskCompleted"
| "DecisionTaskTimedOut"
| "ActivityTaskScheduled"
| "ScheduleActivityTaskFailed"
| "ActivityTaskStarted"
| "ActivityTaskCompleted"
| "ActivityTaskFailed"
| "ActivityTaskTimedOut"
| "ActivityTaskCanceled"
| "ActivityTaskCancelRequested"
| "RequestCancelActivityTaskFailed"
| "WorkflowExecutionSignaled"
| "MarkerRecorded"
| "RecordMarkerFailed"
| "TimerStarted"
| "StartTimerFailed"
| "TimerFired"
| "TimerCanceled"
| "CancelTimerFailed"
| "StartChildWorkflowExecutionInitiated"
| "StartChildWorkflowExecutionFailed"
| "ChildWorkflowExecutionStarted"
| "ChildWorkflowExecutionCompleted"
| "ChildWorkflowExecutionFailed"
| "ChildWorkflowExecutionTimedOut"
| "ChildWorkflowExecutionCanceled"
| "ChildWorkflowExecutionTerminated"
| "SignalExternalWorkflowExecutionInitiated"
| "SignalExternalWorkflowExecutionFailed"
| "ExternalWorkflowExecutionSignaled"
| "RequestCancelExternalWorkflowExecutionInitiated"
| "RequestCancelExternalWorkflowExecutionFailed"
| "ExternalWorkflowExecutionCancelRequested"
| "LambdaFunctionScheduled"
| "LambdaFunctionStarted"
| "LambdaFunctionCompleted"
| "LambdaFunctionFailed"
| "LambdaFunctionTimedOut"
| "ScheduleLambdaFunctionFailed"
| "StartLambdaFunctionFailed"
;
function toEventType(root: JSONValue): EventType | null {
  return ( false
    || root == "WorkflowExecutionStarted"
    || root == "WorkflowExecutionCancelRequested"
    || root == "WorkflowExecutionCompleted"
    || root == "CompleteWorkflowExecutionFailed"
    || root == "WorkflowExecutionFailed"
    || root == "FailWorkflowExecutionFailed"
    || root == "WorkflowExecutionTimedOut"
    || root == "WorkflowExecutionCanceled"
    || root == "CancelWorkflowExecutionFailed"
    || root == "WorkflowExecutionContinuedAsNew"
    || root == "ContinueAsNewWorkflowExecutionFailed"
    || root == "WorkflowExecutionTerminated"
    || root == "DecisionTaskScheduled"
    || root == "DecisionTaskStarted"
    || root == "DecisionTaskCompleted"
    || root == "DecisionTaskTimedOut"
    || root == "ActivityTaskScheduled"
    || root == "ScheduleActivityTaskFailed"
    || root == "ActivityTaskStarted"
    || root == "ActivityTaskCompleted"
    || root == "ActivityTaskFailed"
    || root == "ActivityTaskTimedOut"
    || root == "ActivityTaskCanceled"
    || root == "ActivityTaskCancelRequested"
    || root == "RequestCancelActivityTaskFailed"
    || root == "WorkflowExecutionSignaled"
    || root == "MarkerRecorded"
    || root == "RecordMarkerFailed"
    || root == "TimerStarted"
    || root == "StartTimerFailed"
    || root == "TimerFired"
    || root == "TimerCanceled"
    || root == "CancelTimerFailed"
    || root == "StartChildWorkflowExecutionInitiated"
    || root == "StartChildWorkflowExecutionFailed"
    || root == "ChildWorkflowExecutionStarted"
    || root == "ChildWorkflowExecutionCompleted"
    || root == "ChildWorkflowExecutionFailed"
    || root == "ChildWorkflowExecutionTimedOut"
    || root == "ChildWorkflowExecutionCanceled"
    || root == "ChildWorkflowExecutionTerminated"
    || root == "SignalExternalWorkflowExecutionInitiated"
    || root == "SignalExternalWorkflowExecutionFailed"
    || root == "ExternalWorkflowExecutionSignaled"
    || root == "RequestCancelExternalWorkflowExecutionInitiated"
    || root == "RequestCancelExternalWorkflowExecutionFailed"
    || root == "ExternalWorkflowExecutionCancelRequested"
    || root == "LambdaFunctionScheduled"
    || root == "LambdaFunctionStarted"
    || root == "LambdaFunctionCompleted"
    || root == "LambdaFunctionFailed"
    || root == "LambdaFunctionTimedOut"
    || root == "ScheduleLambdaFunctionFailed"
    || root == "StartLambdaFunctionFailed"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionStartedEventAttributes {
  input?: string | null;
  executionStartToCloseTimeout?: string | null;
  taskStartToCloseTimeout?: string | null;
  childPolicy: ChildPolicy;
  taskList: TaskList;
  taskPriority?: string | null;
  workflowType: WorkflowType;
  tagList?: string[] | null;
  continuedExecutionRunId?: string | null;
  parentWorkflowExecution?: WorkflowExecution | null;
  parentInitiatedEventId?: number | null;
  lambdaRole?: string | null;
}
function toWorkflowExecutionStartedEventAttributes(root: JSONValue): WorkflowExecutionStartedEventAttributes {
  return prt.readObj({
    required: {
      "childPolicy": toChildPolicy,
      "taskList": toTaskList,
      "workflowType": toWorkflowType,
    },
    optional: {
      "input": "s",
      "executionStartToCloseTimeout": "s",
      "taskStartToCloseTimeout": "s",
      "taskPriority": "s",
      "tagList": ["s"],
      "continuedExecutionRunId": "s",
      "parentWorkflowExecution": toWorkflowExecution,
      "parentInitiatedEventId": "n",
      "lambdaRole": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionCompletedEventAttributes {
  result?: string | null;
  decisionTaskCompletedEventId: number;
}
function toWorkflowExecutionCompletedEventAttributes(root: JSONValue): WorkflowExecutionCompletedEventAttributes {
  return prt.readObj({
    required: {
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "result": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CompleteWorkflowExecutionFailedEventAttributes {
  cause: CompleteWorkflowExecutionFailedCause;
  decisionTaskCompletedEventId: number;
}
function toCompleteWorkflowExecutionFailedEventAttributes(root: JSONValue): CompleteWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "cause": toCompleteWorkflowExecutionFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type CompleteWorkflowExecutionFailedCause =
| "UNHANDLED_DECISION"
| "OPERATION_NOT_PERMITTED"
;
function toCompleteWorkflowExecutionFailedCause(root: JSONValue): CompleteWorkflowExecutionFailedCause | null {
  return ( false
    || root == "UNHANDLED_DECISION"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionFailedEventAttributes {
  reason?: string | null;
  details?: string | null;
  decisionTaskCompletedEventId: number;
}
function toWorkflowExecutionFailedEventAttributes(root: JSONValue): WorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "reason": "s",
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface FailWorkflowExecutionFailedEventAttributes {
  cause: FailWorkflowExecutionFailedCause;
  decisionTaskCompletedEventId: number;
}
function toFailWorkflowExecutionFailedEventAttributes(root: JSONValue): FailWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "cause": toFailWorkflowExecutionFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type FailWorkflowExecutionFailedCause =
| "UNHANDLED_DECISION"
| "OPERATION_NOT_PERMITTED"
;
function toFailWorkflowExecutionFailedCause(root: JSONValue): FailWorkflowExecutionFailedCause | null {
  return ( false
    || root == "UNHANDLED_DECISION"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionTimedOutEventAttributes {
  timeoutType: WorkflowExecutionTimeoutType;
  childPolicy: ChildPolicy;
}
function toWorkflowExecutionTimedOutEventAttributes(root: JSONValue): WorkflowExecutionTimedOutEventAttributes {
  return prt.readObj({
    required: {
      "timeoutType": toWorkflowExecutionTimeoutType,
      "childPolicy": toChildPolicy,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: output, named, enum
export type WorkflowExecutionTimeoutType =
| "START_TO_CLOSE"
;
function toWorkflowExecutionTimeoutType(root: JSONValue): WorkflowExecutionTimeoutType | null {
  return ( false
    || root == "START_TO_CLOSE"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionCanceledEventAttributes {
  details?: string | null;
  decisionTaskCompletedEventId: number;
}
function toWorkflowExecutionCanceledEventAttributes(root: JSONValue): WorkflowExecutionCanceledEventAttributes {
  return prt.readObj({
    required: {
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CancelWorkflowExecutionFailedEventAttributes {
  cause: CancelWorkflowExecutionFailedCause;
  decisionTaskCompletedEventId: number;
}
function toCancelWorkflowExecutionFailedEventAttributes(root: JSONValue): CancelWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "cause": toCancelWorkflowExecutionFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type CancelWorkflowExecutionFailedCause =
| "UNHANDLED_DECISION"
| "OPERATION_NOT_PERMITTED"
;
function toCancelWorkflowExecutionFailedCause(root: JSONValue): CancelWorkflowExecutionFailedCause | null {
  return ( false
    || root == "UNHANDLED_DECISION"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionContinuedAsNewEventAttributes {
  input?: string | null;
  decisionTaskCompletedEventId: number;
  newExecutionRunId: string;
  executionStartToCloseTimeout?: string | null;
  taskList: TaskList;
  taskPriority?: string | null;
  taskStartToCloseTimeout?: string | null;
  childPolicy: ChildPolicy;
  tagList?: string[] | null;
  workflowType: WorkflowType;
  lambdaRole?: string | null;
}
function toWorkflowExecutionContinuedAsNewEventAttributes(root: JSONValue): WorkflowExecutionContinuedAsNewEventAttributes {
  return prt.readObj({
    required: {
      "decisionTaskCompletedEventId": "n",
      "newExecutionRunId": "s",
      "taskList": toTaskList,
      "childPolicy": toChildPolicy,
      "workflowType": toWorkflowType,
    },
    optional: {
      "input": "s",
      "executionStartToCloseTimeout": "s",
      "taskPriority": "s",
      "taskStartToCloseTimeout": "s",
      "tagList": ["s"],
      "lambdaRole": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ContinueAsNewWorkflowExecutionFailedEventAttributes {
  cause: ContinueAsNewWorkflowExecutionFailedCause;
  decisionTaskCompletedEventId: number;
}
function toContinueAsNewWorkflowExecutionFailedEventAttributes(root: JSONValue): ContinueAsNewWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "cause": toContinueAsNewWorkflowExecutionFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ContinueAsNewWorkflowExecutionFailedCause =
| "UNHANDLED_DECISION"
| "WORKFLOW_TYPE_DEPRECATED"
| "WORKFLOW_TYPE_DOES_NOT_EXIST"
| "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
| "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
| "DEFAULT_TASK_LIST_UNDEFINED"
| "DEFAULT_CHILD_POLICY_UNDEFINED"
| "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED"
| "OPERATION_NOT_PERMITTED"
;
function toContinueAsNewWorkflowExecutionFailedCause(root: JSONValue): ContinueAsNewWorkflowExecutionFailedCause | null {
  return ( false
    || root == "UNHANDLED_DECISION"
    || root == "WORKFLOW_TYPE_DEPRECATED"
    || root == "WORKFLOW_TYPE_DOES_NOT_EXIST"
    || root == "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
    || root == "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
    || root == "DEFAULT_TASK_LIST_UNDEFINED"
    || root == "DEFAULT_CHILD_POLICY_UNDEFINED"
    || root == "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionTerminatedEventAttributes {
  reason?: string | null;
  details?: string | null;
  childPolicy: ChildPolicy;
  cause?: WorkflowExecutionTerminatedCause | null;
}
function toWorkflowExecutionTerminatedEventAttributes(root: JSONValue): WorkflowExecutionTerminatedEventAttributes {
  return prt.readObj({
    required: {
      "childPolicy": toChildPolicy,
    },
    optional: {
      "reason": "s",
      "details": "s",
      "cause": toWorkflowExecutionTerminatedCause,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type WorkflowExecutionTerminatedCause =
| "CHILD_POLICY_APPLIED"
| "EVENT_LIMIT_EXCEEDED"
| "OPERATOR_INITIATED"
;
function toWorkflowExecutionTerminatedCause(root: JSONValue): WorkflowExecutionTerminatedCause | null {
  return ( false
    || root == "CHILD_POLICY_APPLIED"
    || root == "EVENT_LIMIT_EXCEEDED"
    || root == "OPERATOR_INITIATED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionCancelRequestedEventAttributes {
  externalWorkflowExecution?: WorkflowExecution | null;
  externalInitiatedEventId?: number | null;
  cause?: WorkflowExecutionCancelRequestedCause | null;
}
function toWorkflowExecutionCancelRequestedEventAttributes(root: JSONValue): WorkflowExecutionCancelRequestedEventAttributes {
  return prt.readObj({
    required: {},
    optional: {
      "externalWorkflowExecution": toWorkflowExecution,
      "externalInitiatedEventId": "n",
      "cause": toWorkflowExecutionCancelRequestedCause,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type WorkflowExecutionCancelRequestedCause =
| "CHILD_POLICY_APPLIED"
;
function toWorkflowExecutionCancelRequestedCause(root: JSONValue): WorkflowExecutionCancelRequestedCause | null {
  return ( false
    || root == "CHILD_POLICY_APPLIED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface DecisionTaskScheduledEventAttributes {
  taskList: TaskList;
  taskPriority?: string | null;
  startToCloseTimeout?: string | null;
}
function toDecisionTaskScheduledEventAttributes(root: JSONValue): DecisionTaskScheduledEventAttributes {
  return prt.readObj({
    required: {
      "taskList": toTaskList,
    },
    optional: {
      "taskPriority": "s",
      "startToCloseTimeout": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DecisionTaskStartedEventAttributes {
  identity?: string | null;
  scheduledEventId: number;
}
function toDecisionTaskStartedEventAttributes(root: JSONValue): DecisionTaskStartedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
    },
    optional: {
      "identity": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DecisionTaskCompletedEventAttributes {
  executionContext?: string | null;
  scheduledEventId: number;
  startedEventId: number;
}
function toDecisionTaskCompletedEventAttributes(root: JSONValue): DecisionTaskCompletedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "executionContext": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DecisionTaskTimedOutEventAttributes {
  timeoutType: DecisionTaskTimeoutType;
  scheduledEventId: number;
  startedEventId: number;
}
function toDecisionTaskTimedOutEventAttributes(root: JSONValue): DecisionTaskTimedOutEventAttributes {
  return prt.readObj({
    required: {
      "timeoutType": toDecisionTaskTimeoutType,
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DecisionTaskTimeoutType =
| "START_TO_CLOSE"
;
function toDecisionTaskTimeoutType(root: JSONValue): DecisionTaskTimeoutType | null {
  return ( false
    || root == "START_TO_CLOSE"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface ActivityTaskScheduledEventAttributes {
  activityType: ActivityType;
  activityId: string;
  input?: string | null;
  control?: string | null;
  scheduleToStartTimeout?: string | null;
  scheduleToCloseTimeout?: string | null;
  startToCloseTimeout?: string | null;
  taskList: TaskList;
  taskPriority?: string | null;
  decisionTaskCompletedEventId: number;
  heartbeatTimeout?: string | null;
}
function toActivityTaskScheduledEventAttributes(root: JSONValue): ActivityTaskScheduledEventAttributes {
  return prt.readObj({
    required: {
      "activityType": toActivityType,
      "activityId": "s",
      "taskList": toTaskList,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "input": "s",
      "control": "s",
      "scheduleToStartTimeout": "s",
      "scheduleToCloseTimeout": "s",
      "startToCloseTimeout": "s",
      "taskPriority": "s",
      "heartbeatTimeout": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ActivityTaskStartedEventAttributes {
  identity?: string | null;
  scheduledEventId: number;
}
function toActivityTaskStartedEventAttributes(root: JSONValue): ActivityTaskStartedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
    },
    optional: {
      "identity": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ActivityTaskCompletedEventAttributes {
  result?: string | null;
  scheduledEventId: number;
  startedEventId: number;
}
function toActivityTaskCompletedEventAttributes(root: JSONValue): ActivityTaskCompletedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "result": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ActivityTaskFailedEventAttributes {
  reason?: string | null;
  details?: string | null;
  scheduledEventId: number;
  startedEventId: number;
}
function toActivityTaskFailedEventAttributes(root: JSONValue): ActivityTaskFailedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "reason": "s",
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ActivityTaskTimedOutEventAttributes {
  timeoutType: ActivityTaskTimeoutType;
  scheduledEventId: number;
  startedEventId: number;
  details?: string | null;
}
function toActivityTaskTimedOutEventAttributes(root: JSONValue): ActivityTaskTimedOutEventAttributes {
  return prt.readObj({
    required: {
      "timeoutType": toActivityTaskTimeoutType,
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ActivityTaskTimeoutType =
| "START_TO_CLOSE"
| "SCHEDULE_TO_START"
| "SCHEDULE_TO_CLOSE"
| "HEARTBEAT"
;
function toActivityTaskTimeoutType(root: JSONValue): ActivityTaskTimeoutType | null {
  return ( false
    || root == "START_TO_CLOSE"
    || root == "SCHEDULE_TO_START"
    || root == "SCHEDULE_TO_CLOSE"
    || root == "HEARTBEAT"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface ActivityTaskCanceledEventAttributes {
  details?: string | null;
  scheduledEventId: number;
  startedEventId: number;
  latestCancelRequestedEventId?: number | null;
}
function toActivityTaskCanceledEventAttributes(root: JSONValue): ActivityTaskCanceledEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "details": "s",
      "latestCancelRequestedEventId": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ActivityTaskCancelRequestedEventAttributes {
  decisionTaskCompletedEventId: number;
  activityId: string;
}
function toActivityTaskCancelRequestedEventAttributes(root: JSONValue): ActivityTaskCancelRequestedEventAttributes {
  return prt.readObj({
    required: {
      "decisionTaskCompletedEventId": "n",
      "activityId": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface WorkflowExecutionSignaledEventAttributes {
  signalName: string;
  input?: string | null;
  externalWorkflowExecution?: WorkflowExecution | null;
  externalInitiatedEventId?: number | null;
}
function toWorkflowExecutionSignaledEventAttributes(root: JSONValue): WorkflowExecutionSignaledEventAttributes {
  return prt.readObj({
    required: {
      "signalName": "s",
    },
    optional: {
      "input": "s",
      "externalWorkflowExecution": toWorkflowExecution,
      "externalInitiatedEventId": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface MarkerRecordedEventAttributes {
  markerName: string;
  details?: string | null;
  decisionTaskCompletedEventId: number;
}
function toMarkerRecordedEventAttributes(root: JSONValue): MarkerRecordedEventAttributes {
  return prt.readObj({
    required: {
      "markerName": "s",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RecordMarkerFailedEventAttributes {
  markerName: string;
  cause: RecordMarkerFailedCause;
  decisionTaskCompletedEventId: number;
}
function toRecordMarkerFailedEventAttributes(root: JSONValue): RecordMarkerFailedEventAttributes {
  return prt.readObj({
    required: {
      "markerName": "s",
      "cause": toRecordMarkerFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RecordMarkerFailedCause =
| "OPERATION_NOT_PERMITTED"
;
function toRecordMarkerFailedCause(root: JSONValue): RecordMarkerFailedCause | null {
  return ( false
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface TimerStartedEventAttributes {
  timerId: string;
  control?: string | null;
  startToFireTimeout: string;
  decisionTaskCompletedEventId: number;
}
function toTimerStartedEventAttributes(root: JSONValue): TimerStartedEventAttributes {
  return prt.readObj({
    required: {
      "timerId": "s",
      "startToFireTimeout": "s",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "control": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TimerFiredEventAttributes {
  timerId: string;
  startedEventId: number;
}
function toTimerFiredEventAttributes(root: JSONValue): TimerFiredEventAttributes {
  return prt.readObj({
    required: {
      "timerId": "s",
      "startedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TimerCanceledEventAttributes {
  timerId: string;
  startedEventId: number;
  decisionTaskCompletedEventId: number;
}
function toTimerCanceledEventAttributes(root: JSONValue): TimerCanceledEventAttributes {
  return prt.readObj({
    required: {
      "timerId": "s",
      "startedEventId": "n",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface StartChildWorkflowExecutionInitiatedEventAttributes {
  workflowId: string;
  workflowType: WorkflowType;
  control?: string | null;
  input?: string | null;
  executionStartToCloseTimeout?: string | null;
  taskList: TaskList;
  taskPriority?: string | null;
  decisionTaskCompletedEventId: number;
  childPolicy: ChildPolicy;
  taskStartToCloseTimeout?: string | null;
  tagList?: string[] | null;
  lambdaRole?: string | null;
}
function toStartChildWorkflowExecutionInitiatedEventAttributes(root: JSONValue): StartChildWorkflowExecutionInitiatedEventAttributes {
  return prt.readObj({
    required: {
      "workflowId": "s",
      "workflowType": toWorkflowType,
      "taskList": toTaskList,
      "decisionTaskCompletedEventId": "n",
      "childPolicy": toChildPolicy,
    },
    optional: {
      "control": "s",
      "input": "s",
      "executionStartToCloseTimeout": "s",
      "taskPriority": "s",
      "taskStartToCloseTimeout": "s",
      "tagList": ["s"],
      "lambdaRole": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ChildWorkflowExecutionStartedEventAttributes {
  workflowExecution: WorkflowExecution;
  workflowType: WorkflowType;
  initiatedEventId: number;
}
function toChildWorkflowExecutionStartedEventAttributes(root: JSONValue): ChildWorkflowExecutionStartedEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "workflowType": toWorkflowType,
      "initiatedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ChildWorkflowExecutionCompletedEventAttributes {
  workflowExecution: WorkflowExecution;
  workflowType: WorkflowType;
  result?: string | null;
  initiatedEventId: number;
  startedEventId: number;
}
function toChildWorkflowExecutionCompletedEventAttributes(root: JSONValue): ChildWorkflowExecutionCompletedEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "workflowType": toWorkflowType,
      "initiatedEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "result": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ChildWorkflowExecutionFailedEventAttributes {
  workflowExecution: WorkflowExecution;
  workflowType: WorkflowType;
  reason?: string | null;
  details?: string | null;
  initiatedEventId: number;
  startedEventId: number;
}
function toChildWorkflowExecutionFailedEventAttributes(root: JSONValue): ChildWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "workflowType": toWorkflowType,
      "initiatedEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "reason": "s",
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ChildWorkflowExecutionTimedOutEventAttributes {
  workflowExecution: WorkflowExecution;
  workflowType: WorkflowType;
  timeoutType: WorkflowExecutionTimeoutType;
  initiatedEventId: number;
  startedEventId: number;
}
function toChildWorkflowExecutionTimedOutEventAttributes(root: JSONValue): ChildWorkflowExecutionTimedOutEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "workflowType": toWorkflowType,
      "timeoutType": toWorkflowExecutionTimeoutType,
      "initiatedEventId": "n",
      "startedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ChildWorkflowExecutionCanceledEventAttributes {
  workflowExecution: WorkflowExecution;
  workflowType: WorkflowType;
  details?: string | null;
  initiatedEventId: number;
  startedEventId: number;
}
function toChildWorkflowExecutionCanceledEventAttributes(root: JSONValue): ChildWorkflowExecutionCanceledEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "workflowType": toWorkflowType,
      "initiatedEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ChildWorkflowExecutionTerminatedEventAttributes {
  workflowExecution: WorkflowExecution;
  workflowType: WorkflowType;
  initiatedEventId: number;
  startedEventId: number;
}
function toChildWorkflowExecutionTerminatedEventAttributes(root: JSONValue): ChildWorkflowExecutionTerminatedEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "workflowType": toWorkflowType,
      "initiatedEventId": "n",
      "startedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SignalExternalWorkflowExecutionInitiatedEventAttributes {
  workflowId: string;
  runId?: string | null;
  signalName: string;
  input?: string | null;
  decisionTaskCompletedEventId: number;
  control?: string | null;
}
function toSignalExternalWorkflowExecutionInitiatedEventAttributes(root: JSONValue): SignalExternalWorkflowExecutionInitiatedEventAttributes {
  return prt.readObj({
    required: {
      "workflowId": "s",
      "signalName": "s",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "runId": "s",
      "input": "s",
      "control": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ExternalWorkflowExecutionSignaledEventAttributes {
  workflowExecution: WorkflowExecution;
  initiatedEventId: number;
}
function toExternalWorkflowExecutionSignaledEventAttributes(root: JSONValue): ExternalWorkflowExecutionSignaledEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "initiatedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SignalExternalWorkflowExecutionFailedEventAttributes {
  workflowId: string;
  runId?: string | null;
  cause: SignalExternalWorkflowExecutionFailedCause;
  initiatedEventId: number;
  decisionTaskCompletedEventId: number;
  control?: string | null;
}
function toSignalExternalWorkflowExecutionFailedEventAttributes(root: JSONValue): SignalExternalWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "workflowId": "s",
      "cause": toSignalExternalWorkflowExecutionFailedCause,
      "initiatedEventId": "n",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "runId": "s",
      "control": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type SignalExternalWorkflowExecutionFailedCause =
| "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
| "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
| "OPERATION_NOT_PERMITTED"
;
function toSignalExternalWorkflowExecutionFailedCause(root: JSONValue): SignalExternalWorkflowExecutionFailedCause | null {
  return ( false
    || root == "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
    || root == "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface ExternalWorkflowExecutionCancelRequestedEventAttributes {
  workflowExecution: WorkflowExecution;
  initiatedEventId: number;
}
function toExternalWorkflowExecutionCancelRequestedEventAttributes(root: JSONValue): ExternalWorkflowExecutionCancelRequestedEventAttributes {
  return prt.readObj({
    required: {
      "workflowExecution": toWorkflowExecution,
      "initiatedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RequestCancelExternalWorkflowExecutionInitiatedEventAttributes {
  workflowId: string;
  runId?: string | null;
  decisionTaskCompletedEventId: number;
  control?: string | null;
}
function toRequestCancelExternalWorkflowExecutionInitiatedEventAttributes(root: JSONValue): RequestCancelExternalWorkflowExecutionInitiatedEventAttributes {
  return prt.readObj({
    required: {
      "workflowId": "s",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "runId": "s",
      "control": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RequestCancelExternalWorkflowExecutionFailedEventAttributes {
  workflowId: string;
  runId?: string | null;
  cause: RequestCancelExternalWorkflowExecutionFailedCause;
  initiatedEventId: number;
  decisionTaskCompletedEventId: number;
  control?: string | null;
}
function toRequestCancelExternalWorkflowExecutionFailedEventAttributes(root: JSONValue): RequestCancelExternalWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "workflowId": "s",
      "cause": toRequestCancelExternalWorkflowExecutionFailedCause,
      "initiatedEventId": "n",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "runId": "s",
      "control": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RequestCancelExternalWorkflowExecutionFailedCause =
| "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
| "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
| "OPERATION_NOT_PERMITTED"
;
function toRequestCancelExternalWorkflowExecutionFailedCause(root: JSONValue): RequestCancelExternalWorkflowExecutionFailedCause | null {
  return ( false
    || root == "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
    || root == "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface ScheduleActivityTaskFailedEventAttributes {
  activityType: ActivityType;
  activityId: string;
  cause: ScheduleActivityTaskFailedCause;
  decisionTaskCompletedEventId: number;
}
function toScheduleActivityTaskFailedEventAttributes(root: JSONValue): ScheduleActivityTaskFailedEventAttributes {
  return prt.readObj({
    required: {
      "activityType": toActivityType,
      "activityId": "s",
      "cause": toScheduleActivityTaskFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ScheduleActivityTaskFailedCause =
| "ACTIVITY_TYPE_DEPRECATED"
| "ACTIVITY_TYPE_DOES_NOT_EXIST"
| "ACTIVITY_ID_ALREADY_IN_USE"
| "OPEN_ACTIVITIES_LIMIT_EXCEEDED"
| "ACTIVITY_CREATION_RATE_EXCEEDED"
| "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED"
| "DEFAULT_TASK_LIST_UNDEFINED"
| "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED"
| "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED"
| "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED"
| "OPERATION_NOT_PERMITTED"
;
function toScheduleActivityTaskFailedCause(root: JSONValue): ScheduleActivityTaskFailedCause | null {
  return ( false
    || root == "ACTIVITY_TYPE_DEPRECATED"
    || root == "ACTIVITY_TYPE_DOES_NOT_EXIST"
    || root == "ACTIVITY_ID_ALREADY_IN_USE"
    || root == "OPEN_ACTIVITIES_LIMIT_EXCEEDED"
    || root == "ACTIVITY_CREATION_RATE_EXCEEDED"
    || root == "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED"
    || root == "DEFAULT_TASK_LIST_UNDEFINED"
    || root == "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED"
    || root == "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED"
    || root == "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface RequestCancelActivityTaskFailedEventAttributes {
  activityId: string;
  cause: RequestCancelActivityTaskFailedCause;
  decisionTaskCompletedEventId: number;
}
function toRequestCancelActivityTaskFailedEventAttributes(root: JSONValue): RequestCancelActivityTaskFailedEventAttributes {
  return prt.readObj({
    required: {
      "activityId": "s",
      "cause": toRequestCancelActivityTaskFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RequestCancelActivityTaskFailedCause =
| "ACTIVITY_ID_UNKNOWN"
| "OPERATION_NOT_PERMITTED"
;
function toRequestCancelActivityTaskFailedCause(root: JSONValue): RequestCancelActivityTaskFailedCause | null {
  return ( false
    || root == "ACTIVITY_ID_UNKNOWN"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface StartTimerFailedEventAttributes {
  timerId: string;
  cause: StartTimerFailedCause;
  decisionTaskCompletedEventId: number;
}
function toStartTimerFailedEventAttributes(root: JSONValue): StartTimerFailedEventAttributes {
  return prt.readObj({
    required: {
      "timerId": "s",
      "cause": toStartTimerFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type StartTimerFailedCause =
| "TIMER_ID_ALREADY_IN_USE"
| "OPEN_TIMERS_LIMIT_EXCEEDED"
| "TIMER_CREATION_RATE_EXCEEDED"
| "OPERATION_NOT_PERMITTED"
;
function toStartTimerFailedCause(root: JSONValue): StartTimerFailedCause | null {
  return ( false
    || root == "TIMER_ID_ALREADY_IN_USE"
    || root == "OPEN_TIMERS_LIMIT_EXCEEDED"
    || root == "TIMER_CREATION_RATE_EXCEEDED"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface CancelTimerFailedEventAttributes {
  timerId: string;
  cause: CancelTimerFailedCause;
  decisionTaskCompletedEventId: number;
}
function toCancelTimerFailedEventAttributes(root: JSONValue): CancelTimerFailedEventAttributes {
  return prt.readObj({
    required: {
      "timerId": "s",
      "cause": toCancelTimerFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type CancelTimerFailedCause =
| "TIMER_ID_UNKNOWN"
| "OPERATION_NOT_PERMITTED"
;
function toCancelTimerFailedCause(root: JSONValue): CancelTimerFailedCause | null {
  return ( false
    || root == "TIMER_ID_UNKNOWN"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface StartChildWorkflowExecutionFailedEventAttributes {
  workflowType: WorkflowType;
  cause: StartChildWorkflowExecutionFailedCause;
  workflowId: string;
  initiatedEventId: number;
  decisionTaskCompletedEventId: number;
  control?: string | null;
}
function toStartChildWorkflowExecutionFailedEventAttributes(root: JSONValue): StartChildWorkflowExecutionFailedEventAttributes {
  return prt.readObj({
    required: {
      "workflowType": toWorkflowType,
      "cause": toStartChildWorkflowExecutionFailedCause,
      "workflowId": "s",
      "initiatedEventId": "n",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "control": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type StartChildWorkflowExecutionFailedCause =
| "WORKFLOW_TYPE_DOES_NOT_EXIST"
| "WORKFLOW_TYPE_DEPRECATED"
| "OPEN_CHILDREN_LIMIT_EXCEEDED"
| "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
| "CHILD_CREATION_RATE_EXCEEDED"
| "WORKFLOW_ALREADY_RUNNING"
| "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
| "DEFAULT_TASK_LIST_UNDEFINED"
| "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
| "DEFAULT_CHILD_POLICY_UNDEFINED"
| "OPERATION_NOT_PERMITTED"
;
function toStartChildWorkflowExecutionFailedCause(root: JSONValue): StartChildWorkflowExecutionFailedCause | null {
  return ( false
    || root == "WORKFLOW_TYPE_DOES_NOT_EXIST"
    || root == "WORKFLOW_TYPE_DEPRECATED"
    || root == "OPEN_CHILDREN_LIMIT_EXCEEDED"
    || root == "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
    || root == "CHILD_CREATION_RATE_EXCEEDED"
    || root == "WORKFLOW_ALREADY_RUNNING"
    || root == "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
    || root == "DEFAULT_TASK_LIST_UNDEFINED"
    || root == "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
    || root == "DEFAULT_CHILD_POLICY_UNDEFINED"
    || root == "OPERATION_NOT_PERMITTED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface LambdaFunctionScheduledEventAttributes {
  id: string;
  name: string;
  control?: string | null;
  input?: string | null;
  startToCloseTimeout?: string | null;
  decisionTaskCompletedEventId: number;
}
function toLambdaFunctionScheduledEventAttributes(root: JSONValue): LambdaFunctionScheduledEventAttributes {
  return prt.readObj({
    required: {
      "id": "s",
      "name": "s",
      "decisionTaskCompletedEventId": "n",
    },
    optional: {
      "control": "s",
      "input": "s",
      "startToCloseTimeout": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface LambdaFunctionStartedEventAttributes {
  scheduledEventId: number;
}
function toLambdaFunctionStartedEventAttributes(root: JSONValue): LambdaFunctionStartedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface LambdaFunctionCompletedEventAttributes {
  scheduledEventId: number;
  startedEventId: number;
  result?: string | null;
}
function toLambdaFunctionCompletedEventAttributes(root: JSONValue): LambdaFunctionCompletedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "result": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface LambdaFunctionFailedEventAttributes {
  scheduledEventId: number;
  startedEventId: number;
  reason?: string | null;
  details?: string | null;
}
function toLambdaFunctionFailedEventAttributes(root: JSONValue): LambdaFunctionFailedEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "reason": "s",
      "details": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface LambdaFunctionTimedOutEventAttributes {
  scheduledEventId: number;
  startedEventId: number;
  timeoutType?: LambdaFunctionTimeoutType | null;
}
function toLambdaFunctionTimedOutEventAttributes(root: JSONValue): LambdaFunctionTimedOutEventAttributes {
  return prt.readObj({
    required: {
      "scheduledEventId": "n",
      "startedEventId": "n",
    },
    optional: {
      "timeoutType": toLambdaFunctionTimeoutType,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type LambdaFunctionTimeoutType =
| "START_TO_CLOSE"
;
function toLambdaFunctionTimeoutType(root: JSONValue): LambdaFunctionTimeoutType | null {
  return ( false
    || root == "START_TO_CLOSE"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface ScheduleLambdaFunctionFailedEventAttributes {
  id: string;
  name: string;
  cause: ScheduleLambdaFunctionFailedCause;
  decisionTaskCompletedEventId: number;
}
function toScheduleLambdaFunctionFailedEventAttributes(root: JSONValue): ScheduleLambdaFunctionFailedEventAttributes {
  return prt.readObj({
    required: {
      "id": "s",
      "name": "s",
      "cause": toScheduleLambdaFunctionFailedCause,
      "decisionTaskCompletedEventId": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ScheduleLambdaFunctionFailedCause =
| "ID_ALREADY_IN_USE"
| "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
| "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
| "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
;
function toScheduleLambdaFunctionFailedCause(root: JSONValue): ScheduleLambdaFunctionFailedCause | null {
  return ( false
    || root == "ID_ALREADY_IN_USE"
    || root == "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
    || root == "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
    || root == "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface StartLambdaFunctionFailedEventAttributes {
  scheduledEventId?: number | null;
  cause?: StartLambdaFunctionFailedCause | null;
  message?: string | null;
}
function toStartLambdaFunctionFailedEventAttributes(root: JSONValue): StartLambdaFunctionFailedEventAttributes {
  return prt.readObj({
    required: {},
    optional: {
      "scheduledEventId": "n",
      "cause": toStartLambdaFunctionFailedCause,
      "message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type StartLambdaFunctionFailedCause =
| "ASSUME_ROLE_FAILED"
;
function toStartLambdaFunctionFailedCause(root: JSONValue): StartLambdaFunctionFailedCause | null {
  return ( false
    || root == "ASSUME_ROLE_FAILED"
  ) ? root : null;
}
