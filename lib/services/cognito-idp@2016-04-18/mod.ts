// Autogenerated API client for: Amazon Cognito Identity Provider

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class CognitoIdentityServiceProvider {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CognitoIdentityServiceProvider.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-04-18",
    "endpointPrefix": "cognito-idp",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Cognito Identity Provider",
    "serviceId": "Cognito Identity Provider",
    "signatureVersion": "v4",
    "targetPrefix": "AWSCognitoIdentityProviderService",
    "uid": "cognito-idp-2016-04-18"
  };

  async addCustomAttributes(
    {abortSignal, ...params}: RequestConfig & AddCustomAttributesRequest,
  ): Promise<AddCustomAttributesResponse> {
    const body: JSONObject = {...params,
    CustomAttributes: params["CustomAttributes"]?.map(x => fromSchemaAttributeType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddCustomAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminAddUserToGroup(
    {abortSignal, ...params}: RequestConfig & AdminAddUserToGroupRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminAddUserToGroup",
    });
  }

  async adminConfirmSignUp(
    {abortSignal, ...params}: RequestConfig & AdminConfirmSignUpRequest,
  ): Promise<AdminConfirmSignUpResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminConfirmSignUp",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminCreateUser(
    {abortSignal, ...params}: RequestConfig & AdminCreateUserRequest,
  ): Promise<AdminCreateUserResponse> {
    const body: JSONObject = {...params,
    UserAttributes: params["UserAttributes"]?.map(x => fromAttributeType(x)),
    ValidationData: params["ValidationData"]?.map(x => fromAttributeType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminCreateUser",
    });
    return prt.readObj({
      required: {},
      optional: {
        "User": toUserType,
      },
    }, await resp.json());
  }

  async adminDeleteUser(
    {abortSignal, ...params}: RequestConfig & AdminDeleteUserRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminDeleteUser",
    });
  }

  async adminDeleteUserAttributes(
    {abortSignal, ...params}: RequestConfig & AdminDeleteUserAttributesRequest,
  ): Promise<AdminDeleteUserAttributesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminDeleteUserAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminDisableProviderForUser(
    {abortSignal, ...params}: RequestConfig & AdminDisableProviderForUserRequest,
  ): Promise<AdminDisableProviderForUserResponse> {
    const body: JSONObject = {...params,
    User: fromProviderUserIdentifierType(params["User"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminDisableProviderForUser",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminDisableUser(
    {abortSignal, ...params}: RequestConfig & AdminDisableUserRequest,
  ): Promise<AdminDisableUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminDisableUser",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminEnableUser(
    {abortSignal, ...params}: RequestConfig & AdminEnableUserRequest,
  ): Promise<AdminEnableUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminEnableUser",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminForgetDevice(
    {abortSignal, ...params}: RequestConfig & AdminForgetDeviceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminForgetDevice",
    });
  }

  async adminGetDevice(
    {abortSignal, ...params}: RequestConfig & AdminGetDeviceRequest,
  ): Promise<AdminGetDeviceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminGetDevice",
    });
    return prt.readObj({
      required: {
        "Device": toDeviceType,
      },
      optional: {},
    }, await resp.json());
  }

  async adminGetUser(
    {abortSignal, ...params}: RequestConfig & AdminGetUserRequest,
  ): Promise<AdminGetUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminGetUser",
    });
    return prt.readObj({
      required: {
        "Username": "s",
      },
      optional: {
        "UserAttributes": [toAttributeType],
        "UserCreateDate": "d",
        "UserLastModifiedDate": "d",
        "Enabled": "b",
        "UserStatus": toUserStatusType,
        "MFAOptions": [toMFAOptionType],
        "PreferredMfaSetting": "s",
        "UserMFASettingList": ["s"],
      },
    }, await resp.json());
  }

  async adminInitiateAuth(
    {abortSignal, ...params}: RequestConfig & AdminInitiateAuthRequest,
  ): Promise<AdminInitiateAuthResponse> {
    const body: JSONObject = {...params,
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
    ContextData: fromContextDataType(params["ContextData"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminInitiateAuth",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChallengeName": toChallengeNameType,
        "Session": "s",
        "ChallengeParameters": x => prt.readMap(String, String, x),
        "AuthenticationResult": toAuthenticationResultType,
      },
    }, await resp.json());
  }

  async adminLinkProviderForUser(
    {abortSignal, ...params}: RequestConfig & AdminLinkProviderForUserRequest,
  ): Promise<AdminLinkProviderForUserResponse> {
    const body: JSONObject = {...params,
    DestinationUser: fromProviderUserIdentifierType(params["DestinationUser"]),
    SourceUser: fromProviderUserIdentifierType(params["SourceUser"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminLinkProviderForUser",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminListDevices(
    {abortSignal, ...params}: RequestConfig & AdminListDevicesRequest,
  ): Promise<AdminListDevicesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminListDevices",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Devices": [toDeviceType],
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async adminListGroupsForUser(
    {abortSignal, ...params}: RequestConfig & AdminListGroupsForUserRequest,
  ): Promise<AdminListGroupsForUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminListGroupsForUser",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Groups": [toGroupType],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async adminListUserAuthEvents(
    {abortSignal, ...params}: RequestConfig & AdminListUserAuthEventsRequest,
  ): Promise<AdminListUserAuthEventsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminListUserAuthEvents",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AuthEvents": [toAuthEventType],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async adminRemoveUserFromGroup(
    {abortSignal, ...params}: RequestConfig & AdminRemoveUserFromGroupRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminRemoveUserFromGroup",
    });
  }

  async adminResetUserPassword(
    {abortSignal, ...params}: RequestConfig & AdminResetUserPasswordRequest,
  ): Promise<AdminResetUserPasswordResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminResetUserPassword",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminRespondToAuthChallenge(
    {abortSignal, ...params}: RequestConfig & AdminRespondToAuthChallengeRequest,
  ): Promise<AdminRespondToAuthChallengeResponse> {
    const body: JSONObject = {...params,
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
    ContextData: fromContextDataType(params["ContextData"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminRespondToAuthChallenge",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChallengeName": toChallengeNameType,
        "Session": "s",
        "ChallengeParameters": x => prt.readMap(String, String, x),
        "AuthenticationResult": toAuthenticationResultType,
      },
    }, await resp.json());
  }

  async adminSetUserMFAPreference(
    {abortSignal, ...params}: RequestConfig & AdminSetUserMFAPreferenceRequest,
  ): Promise<AdminSetUserMFAPreferenceResponse> {
    const body: JSONObject = {...params,
    SMSMfaSettings: fromSMSMfaSettingsType(params["SMSMfaSettings"]),
    SoftwareTokenMfaSettings: fromSoftwareTokenMfaSettingsType(params["SoftwareTokenMfaSettings"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminSetUserMFAPreference",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminSetUserPassword(
    {abortSignal, ...params}: RequestConfig & AdminSetUserPasswordRequest,
  ): Promise<AdminSetUserPasswordResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminSetUserPassword",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminSetUserSettings(
    {abortSignal, ...params}: RequestConfig & AdminSetUserSettingsRequest,
  ): Promise<AdminSetUserSettingsResponse> {
    const body: JSONObject = {...params,
    MFAOptions: params["MFAOptions"]?.map(x => fromMFAOptionType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminSetUserSettings",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminUpdateAuthEventFeedback(
    {abortSignal, ...params}: RequestConfig & AdminUpdateAuthEventFeedbackRequest,
  ): Promise<AdminUpdateAuthEventFeedbackResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminUpdateAuthEventFeedback",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminUpdateDeviceStatus(
    {abortSignal, ...params}: RequestConfig & AdminUpdateDeviceStatusRequest,
  ): Promise<AdminUpdateDeviceStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminUpdateDeviceStatus",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminUpdateUserAttributes(
    {abortSignal, ...params}: RequestConfig & AdminUpdateUserAttributesRequest,
  ): Promise<AdminUpdateUserAttributesResponse> {
    const body: JSONObject = {...params,
    UserAttributes: params["UserAttributes"]?.map(x => fromAttributeType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminUpdateUserAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async adminUserGlobalSignOut(
    {abortSignal, ...params}: RequestConfig & AdminUserGlobalSignOutRequest,
  ): Promise<AdminUserGlobalSignOutResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AdminUserGlobalSignOut",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateSoftwareToken(
    {abortSignal, ...params}: RequestConfig & AssociateSoftwareTokenRequest = {},
  ): Promise<AssociateSoftwareTokenResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSoftwareToken",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SecretCode": "s",
        "Session": "s",
      },
    }, await resp.json());
  }

  async changePassword(
    {abortSignal, ...params}: RequestConfig & ChangePasswordRequest,
  ): Promise<ChangePasswordResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ChangePassword",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async confirmDevice(
    {abortSignal, ...params}: RequestConfig & ConfirmDeviceRequest,
  ): Promise<ConfirmDeviceResponse> {
    const body: JSONObject = {...params,
    DeviceSecretVerifierConfig: fromDeviceSecretVerifierConfigType(params["DeviceSecretVerifierConfig"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmDevice",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserConfirmationNecessary": "b",
      },
    }, await resp.json());
  }

  async confirmForgotPassword(
    {abortSignal, ...params}: RequestConfig & ConfirmForgotPasswordRequest,
  ): Promise<ConfirmForgotPasswordResponse> {
    const body: JSONObject = {...params,
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
    UserContextData: fromUserContextDataType(params["UserContextData"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmForgotPassword",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async confirmSignUp(
    {abortSignal, ...params}: RequestConfig & ConfirmSignUpRequest,
  ): Promise<ConfirmSignUpResponse> {
    const body: JSONObject = {...params,
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
    UserContextData: fromUserContextDataType(params["UserContextData"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfirmSignUp",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createGroup(
    {abortSignal, ...params}: RequestConfig & CreateGroupRequest,
  ): Promise<CreateGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Group": toGroupType,
      },
    }, await resp.json());
  }

  async createIdentityProvider(
    {abortSignal, ...params}: RequestConfig & CreateIdentityProviderRequest,
  ): Promise<CreateIdentityProviderResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIdentityProvider",
    });
    return prt.readObj({
      required: {
        "IdentityProvider": toIdentityProviderType,
      },
      optional: {},
    }, await resp.json());
  }

  async createResourceServer(
    {abortSignal, ...params}: RequestConfig & CreateResourceServerRequest,
  ): Promise<CreateResourceServerResponse> {
    const body: JSONObject = {...params,
    Scopes: params["Scopes"]?.map(x => fromResourceServerScopeType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResourceServer",
    });
    return prt.readObj({
      required: {
        "ResourceServer": toResourceServerType,
      },
      optional: {},
    }, await resp.json());
  }

  async createUserImportJob(
    {abortSignal, ...params}: RequestConfig & CreateUserImportJobRequest,
  ): Promise<CreateUserImportJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUserImportJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserImportJob": toUserImportJobType,
      },
    }, await resp.json());
  }

  async createUserPool(
    {abortSignal, ...params}: RequestConfig & CreateUserPoolRequest,
  ): Promise<CreateUserPoolResponse> {
    const body: JSONObject = {...params,
    Policies: fromUserPoolPolicyType(params["Policies"]),
    LambdaConfig: fromLambdaConfigType(params["LambdaConfig"]),
    VerificationMessageTemplate: fromVerificationMessageTemplateType(params["VerificationMessageTemplate"]),
    DeviceConfiguration: fromDeviceConfigurationType(params["DeviceConfiguration"]),
    EmailConfiguration: fromEmailConfigurationType(params["EmailConfiguration"]),
    SmsConfiguration: fromSmsConfigurationType(params["SmsConfiguration"]),
    AdminCreateUserConfig: fromAdminCreateUserConfigType(params["AdminCreateUserConfig"]),
    Schema: params["Schema"]?.map(x => fromSchemaAttributeType(x)),
    UserPoolAddOns: fromUserPoolAddOnsType(params["UserPoolAddOns"]),
    UsernameConfiguration: fromUsernameConfigurationType(params["UsernameConfiguration"]),
    AccountRecoverySetting: fromAccountRecoverySettingType(params["AccountRecoverySetting"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUserPool",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPool": toUserPoolType,
      },
    }, await resp.json());
  }

  async createUserPoolClient(
    {abortSignal, ...params}: RequestConfig & CreateUserPoolClientRequest,
  ): Promise<CreateUserPoolClientResponse> {
    const body: JSONObject = {...params,
    TokenValidityUnits: fromTokenValidityUnitsType(params["TokenValidityUnits"]),
    AnalyticsConfiguration: fromAnalyticsConfigurationType(params["AnalyticsConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUserPoolClient",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPoolClient": toUserPoolClientType,
      },
    }, await resp.json());
  }

  async createUserPoolDomain(
    {abortSignal, ...params}: RequestConfig & CreateUserPoolDomainRequest,
  ): Promise<CreateUserPoolDomainResponse> {
    const body: JSONObject = {...params,
    CustomDomainConfig: fromCustomDomainConfigType(params["CustomDomainConfig"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUserPoolDomain",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CloudFrontDomain": "s",
      },
    }, await resp.json());
  }

  async deleteGroup(
    {abortSignal, ...params}: RequestConfig & DeleteGroupRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGroup",
    });
  }

  async deleteIdentityProvider(
    {abortSignal, ...params}: RequestConfig & DeleteIdentityProviderRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIdentityProvider",
    });
  }

  async deleteResourceServer(
    {abortSignal, ...params}: RequestConfig & DeleteResourceServerRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResourceServer",
    });
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUser",
    });
  }

  async deleteUserAttributes(
    {abortSignal, ...params}: RequestConfig & DeleteUserAttributesRequest,
  ): Promise<DeleteUserAttributesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUserAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteUserPool(
    {abortSignal, ...params}: RequestConfig & DeleteUserPoolRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUserPool",
    });
  }

  async deleteUserPoolClient(
    {abortSignal, ...params}: RequestConfig & DeleteUserPoolClientRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUserPoolClient",
    });
  }

  async deleteUserPoolDomain(
    {abortSignal, ...params}: RequestConfig & DeleteUserPoolDomainRequest,
  ): Promise<DeleteUserPoolDomainResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteUserPoolDomain",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeIdentityProvider(
    {abortSignal, ...params}: RequestConfig & DescribeIdentityProviderRequest,
  ): Promise<DescribeIdentityProviderResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIdentityProvider",
    });
    return prt.readObj({
      required: {
        "IdentityProvider": toIdentityProviderType,
      },
      optional: {},
    }, await resp.json());
  }

  async describeResourceServer(
    {abortSignal, ...params}: RequestConfig & DescribeResourceServerRequest,
  ): Promise<DescribeResourceServerResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeResourceServer",
    });
    return prt.readObj({
      required: {
        "ResourceServer": toResourceServerType,
      },
      optional: {},
    }, await resp.json());
  }

  async describeRiskConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeRiskConfigurationRequest,
  ): Promise<DescribeRiskConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRiskConfiguration",
    });
    return prt.readObj({
      required: {
        "RiskConfiguration": toRiskConfigurationType,
      },
      optional: {},
    }, await resp.json());
  }

  async describeUserImportJob(
    {abortSignal, ...params}: RequestConfig & DescribeUserImportJobRequest,
  ): Promise<DescribeUserImportJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUserImportJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserImportJob": toUserImportJobType,
      },
    }, await resp.json());
  }

  async describeUserPool(
    {abortSignal, ...params}: RequestConfig & DescribeUserPoolRequest,
  ): Promise<DescribeUserPoolResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUserPool",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPool": toUserPoolType,
      },
    }, await resp.json());
  }

  async describeUserPoolClient(
    {abortSignal, ...params}: RequestConfig & DescribeUserPoolClientRequest,
  ): Promise<DescribeUserPoolClientResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUserPoolClient",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPoolClient": toUserPoolClientType,
      },
    }, await resp.json());
  }

  async describeUserPoolDomain(
    {abortSignal, ...params}: RequestConfig & DescribeUserPoolDomainRequest,
  ): Promise<DescribeUserPoolDomainResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUserPoolDomain",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DomainDescription": toDomainDescriptionType,
      },
    }, await resp.json());
  }

  async forgetDevice(
    {abortSignal, ...params}: RequestConfig & ForgetDeviceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ForgetDevice",
    });
  }

  async forgotPassword(
    {abortSignal, ...params}: RequestConfig & ForgotPasswordRequest,
  ): Promise<ForgotPasswordResponse> {
    const body: JSONObject = {...params,
    UserContextData: fromUserContextDataType(params["UserContextData"]),
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ForgotPassword",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CodeDeliveryDetails": toCodeDeliveryDetailsType,
      },
    }, await resp.json());
  }

  async getCSVHeader(
    {abortSignal, ...params}: RequestConfig & GetCSVHeaderRequest,
  ): Promise<GetCSVHeaderResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCSVHeader",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPoolId": "s",
        "CSVHeader": ["s"],
      },
    }, await resp.json());
  }

  async getDevice(
    {abortSignal, ...params}: RequestConfig & GetDeviceRequest,
  ): Promise<GetDeviceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDevice",
    });
    return prt.readObj({
      required: {
        "Device": toDeviceType,
      },
      optional: {},
    }, await resp.json());
  }

  async getGroup(
    {abortSignal, ...params}: RequestConfig & GetGroupRequest,
  ): Promise<GetGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Group": toGroupType,
      },
    }, await resp.json());
  }

  async getIdentityProviderByIdentifier(
    {abortSignal, ...params}: RequestConfig & GetIdentityProviderByIdentifierRequest,
  ): Promise<GetIdentityProviderByIdentifierResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIdentityProviderByIdentifier",
    });
    return prt.readObj({
      required: {
        "IdentityProvider": toIdentityProviderType,
      },
      optional: {},
    }, await resp.json());
  }

  async getSigningCertificate(
    {abortSignal, ...params}: RequestConfig & GetSigningCertificateRequest,
  ): Promise<GetSigningCertificateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSigningCertificate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Certificate": "s",
      },
    }, await resp.json());
  }

  async getUICustomization(
    {abortSignal, ...params}: RequestConfig & GetUICustomizationRequest,
  ): Promise<GetUICustomizationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUICustomization",
    });
    return prt.readObj({
      required: {
        "UICustomization": toUICustomizationType,
      },
      optional: {},
    }, await resp.json());
  }

  async getUser(
    {abortSignal, ...params}: RequestConfig & GetUserRequest,
  ): Promise<GetUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUser",
    });
    return prt.readObj({
      required: {
        "Username": "s",
        "UserAttributes": [toAttributeType],
      },
      optional: {
        "MFAOptions": [toMFAOptionType],
        "PreferredMfaSetting": "s",
        "UserMFASettingList": ["s"],
      },
    }, await resp.json());
  }

  async getUserAttributeVerificationCode(
    {abortSignal, ...params}: RequestConfig & GetUserAttributeVerificationCodeRequest,
  ): Promise<GetUserAttributeVerificationCodeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUserAttributeVerificationCode",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CodeDeliveryDetails": toCodeDeliveryDetailsType,
      },
    }, await resp.json());
  }

  async getUserPoolMfaConfig(
    {abortSignal, ...params}: RequestConfig & GetUserPoolMfaConfigRequest,
  ): Promise<GetUserPoolMfaConfigResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUserPoolMfaConfig",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SmsMfaConfiguration": toSmsMfaConfigType,
        "SoftwareTokenMfaConfiguration": toSoftwareTokenMfaConfigType,
        "MfaConfiguration": toUserPoolMfaType,
      },
    }, await resp.json());
  }

  async globalSignOut(
    {abortSignal, ...params}: RequestConfig & GlobalSignOutRequest,
  ): Promise<GlobalSignOutResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GlobalSignOut",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async initiateAuth(
    {abortSignal, ...params}: RequestConfig & InitiateAuthRequest,
  ): Promise<InitiateAuthResponse> {
    const body: JSONObject = {...params,
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
    UserContextData: fromUserContextDataType(params["UserContextData"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InitiateAuth",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChallengeName": toChallengeNameType,
        "Session": "s",
        "ChallengeParameters": x => prt.readMap(String, String, x),
        "AuthenticationResult": toAuthenticationResultType,
      },
    }, await resp.json());
  }

  async listDevices(
    {abortSignal, ...params}: RequestConfig & ListDevicesRequest,
  ): Promise<ListDevicesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDevices",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Devices": [toDeviceType],
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & ListGroupsRequest,
  ): Promise<ListGroupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Groups": [toGroupType],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIdentityProviders(
    {abortSignal, ...params}: RequestConfig & ListIdentityProvidersRequest,
  ): Promise<ListIdentityProvidersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIdentityProviders",
    });
    return prt.readObj({
      required: {
        "Providers": [toProviderDescription],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceServers(
    {abortSignal, ...params}: RequestConfig & ListResourceServersRequest,
  ): Promise<ListResourceServersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceServers",
    });
    return prt.readObj({
      required: {
        "ResourceServers": [toResourceServerType],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": x => prt.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listUserImportJobs(
    {abortSignal, ...params}: RequestConfig & ListUserImportJobsRequest,
  ): Promise<ListUserImportJobsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUserImportJobs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserImportJobs": [toUserImportJobType],
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async listUserPoolClients(
    {abortSignal, ...params}: RequestConfig & ListUserPoolClientsRequest,
  ): Promise<ListUserPoolClientsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUserPoolClients",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPoolClients": [toUserPoolClientDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUserPools(
    {abortSignal, ...params}: RequestConfig & ListUserPoolsRequest,
  ): Promise<ListUserPoolsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUserPools",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPools": [toUserPoolDescriptionType],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & ListUsersRequest,
  ): Promise<ListUsersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUsers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Users": [toUserType],
        "PaginationToken": "s",
      },
    }, await resp.json());
  }

  async listUsersInGroup(
    {abortSignal, ...params}: RequestConfig & ListUsersInGroupRequest,
  ): Promise<ListUsersInGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUsersInGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Users": [toUserType],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async resendConfirmationCode(
    {abortSignal, ...params}: RequestConfig & ResendConfirmationCodeRequest,
  ): Promise<ResendConfirmationCodeResponse> {
    const body: JSONObject = {...params,
    UserContextData: fromUserContextDataType(params["UserContextData"]),
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResendConfirmationCode",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CodeDeliveryDetails": toCodeDeliveryDetailsType,
      },
    }, await resp.json());
  }

  async respondToAuthChallenge(
    {abortSignal, ...params}: RequestConfig & RespondToAuthChallengeRequest,
  ): Promise<RespondToAuthChallengeResponse> {
    const body: JSONObject = {...params,
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
    UserContextData: fromUserContextDataType(params["UserContextData"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RespondToAuthChallenge",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChallengeName": toChallengeNameType,
        "Session": "s",
        "ChallengeParameters": x => prt.readMap(String, String, x),
        "AuthenticationResult": toAuthenticationResultType,
      },
    }, await resp.json());
  }

  async setRiskConfiguration(
    {abortSignal, ...params}: RequestConfig & SetRiskConfigurationRequest,
  ): Promise<SetRiskConfigurationResponse> {
    const body: JSONObject = {...params,
    CompromisedCredentialsRiskConfiguration: fromCompromisedCredentialsRiskConfigurationType(params["CompromisedCredentialsRiskConfiguration"]),
    AccountTakeoverRiskConfiguration: fromAccountTakeoverRiskConfigurationType(params["AccountTakeoverRiskConfiguration"]),
    RiskExceptionConfiguration: fromRiskExceptionConfigurationType(params["RiskExceptionConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetRiskConfiguration",
    });
    return prt.readObj({
      required: {
        "RiskConfiguration": toRiskConfigurationType,
      },
      optional: {},
    }, await resp.json());
  }

  async setUICustomization(
    {abortSignal, ...params}: RequestConfig & SetUICustomizationRequest,
  ): Promise<SetUICustomizationResponse> {
    const body: JSONObject = {...params,
    ImageFile: prt.serializeBlob(params["ImageFile"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetUICustomization",
    });
    return prt.readObj({
      required: {
        "UICustomization": toUICustomizationType,
      },
      optional: {},
    }, await resp.json());
  }

  async setUserMFAPreference(
    {abortSignal, ...params}: RequestConfig & SetUserMFAPreferenceRequest,
  ): Promise<SetUserMFAPreferenceResponse> {
    const body: JSONObject = {...params,
    SMSMfaSettings: fromSMSMfaSettingsType(params["SMSMfaSettings"]),
    SoftwareTokenMfaSettings: fromSoftwareTokenMfaSettingsType(params["SoftwareTokenMfaSettings"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetUserMFAPreference",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async setUserPoolMfaConfig(
    {abortSignal, ...params}: RequestConfig & SetUserPoolMfaConfigRequest,
  ): Promise<SetUserPoolMfaConfigResponse> {
    const body: JSONObject = {...params,
    SmsMfaConfiguration: fromSmsMfaConfigType(params["SmsMfaConfiguration"]),
    SoftwareTokenMfaConfiguration: fromSoftwareTokenMfaConfigType(params["SoftwareTokenMfaConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetUserPoolMfaConfig",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SmsMfaConfiguration": toSmsMfaConfigType,
        "SoftwareTokenMfaConfiguration": toSoftwareTokenMfaConfigType,
        "MfaConfiguration": toUserPoolMfaType,
      },
    }, await resp.json());
  }

  async setUserSettings(
    {abortSignal, ...params}: RequestConfig & SetUserSettingsRequest,
  ): Promise<SetUserSettingsResponse> {
    const body: JSONObject = {...params,
    MFAOptions: params["MFAOptions"]?.map(x => fromMFAOptionType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetUserSettings",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async signUp(
    {abortSignal, ...params}: RequestConfig & SignUpRequest,
  ): Promise<SignUpResponse> {
    const body: JSONObject = {...params,
    UserAttributes: params["UserAttributes"]?.map(x => fromAttributeType(x)),
    ValidationData: params["ValidationData"]?.map(x => fromAttributeType(x)),
    AnalyticsMetadata: fromAnalyticsMetadataType(params["AnalyticsMetadata"]),
    UserContextData: fromUserContextDataType(params["UserContextData"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SignUp",
    });
    return prt.readObj({
      required: {
        "UserConfirmed": "b",
        "UserSub": "s",
      },
      optional: {
        "CodeDeliveryDetails": toCodeDeliveryDetailsType,
      },
    }, await resp.json());
  }

  async startUserImportJob(
    {abortSignal, ...params}: RequestConfig & StartUserImportJobRequest,
  ): Promise<StartUserImportJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartUserImportJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserImportJob": toUserImportJobType,
      },
    }, await resp.json());
  }

  async stopUserImportJob(
    {abortSignal, ...params}: RequestConfig & StopUserImportJobRequest,
  ): Promise<StopUserImportJobResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopUserImportJob",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserImportJob": toUserImportJobType,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAuthEventFeedback(
    {abortSignal, ...params}: RequestConfig & UpdateAuthEventFeedbackRequest,
  ): Promise<UpdateAuthEventFeedbackResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAuthEventFeedback",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDeviceStatus(
    {abortSignal, ...params}: RequestConfig & UpdateDeviceStatusRequest,
  ): Promise<UpdateDeviceStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeviceStatus",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGroup(
    {abortSignal, ...params}: RequestConfig & UpdateGroupRequest,
  ): Promise<UpdateGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Group": toGroupType,
      },
    }, await resp.json());
  }

  async updateIdentityProvider(
    {abortSignal, ...params}: RequestConfig & UpdateIdentityProviderRequest,
  ): Promise<UpdateIdentityProviderResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIdentityProvider",
    });
    return prt.readObj({
      required: {
        "IdentityProvider": toIdentityProviderType,
      },
      optional: {},
    }, await resp.json());
  }

  async updateResourceServer(
    {abortSignal, ...params}: RequestConfig & UpdateResourceServerRequest,
  ): Promise<UpdateResourceServerResponse> {
    const body: JSONObject = {...params,
    Scopes: params["Scopes"]?.map(x => fromResourceServerScopeType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResourceServer",
    });
    return prt.readObj({
      required: {
        "ResourceServer": toResourceServerType,
      },
      optional: {},
    }, await resp.json());
  }

  async updateUserAttributes(
    {abortSignal, ...params}: RequestConfig & UpdateUserAttributesRequest,
  ): Promise<UpdateUserAttributesResponse> {
    const body: JSONObject = {...params,
    UserAttributes: params["UserAttributes"]?.map(x => fromAttributeType(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserAttributes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CodeDeliveryDetailsList": [toCodeDeliveryDetailsType],
      },
    }, await resp.json());
  }

  async updateUserPool(
    {abortSignal, ...params}: RequestConfig & UpdateUserPoolRequest,
  ): Promise<UpdateUserPoolResponse> {
    const body: JSONObject = {...params,
    Policies: fromUserPoolPolicyType(params["Policies"]),
    LambdaConfig: fromLambdaConfigType(params["LambdaConfig"]),
    VerificationMessageTemplate: fromVerificationMessageTemplateType(params["VerificationMessageTemplate"]),
    DeviceConfiguration: fromDeviceConfigurationType(params["DeviceConfiguration"]),
    EmailConfiguration: fromEmailConfigurationType(params["EmailConfiguration"]),
    SmsConfiguration: fromSmsConfigurationType(params["SmsConfiguration"]),
    AdminCreateUserConfig: fromAdminCreateUserConfigType(params["AdminCreateUserConfig"]),
    UserPoolAddOns: fromUserPoolAddOnsType(params["UserPoolAddOns"]),
    AccountRecoverySetting: fromAccountRecoverySettingType(params["AccountRecoverySetting"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserPool",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateUserPoolClient(
    {abortSignal, ...params}: RequestConfig & UpdateUserPoolClientRequest,
  ): Promise<UpdateUserPoolClientResponse> {
    const body: JSONObject = {...params,
    TokenValidityUnits: fromTokenValidityUnitsType(params["TokenValidityUnits"]),
    AnalyticsConfiguration: fromAnalyticsConfigurationType(params["AnalyticsConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserPoolClient",
    });
    return prt.readObj({
      required: {},
      optional: {
        "UserPoolClient": toUserPoolClientType,
      },
    }, await resp.json());
  }

  async updateUserPoolDomain(
    {abortSignal, ...params}: RequestConfig & UpdateUserPoolDomainRequest,
  ): Promise<UpdateUserPoolDomainResponse> {
    const body: JSONObject = {...params,
    CustomDomainConfig: fromCustomDomainConfigType(params["CustomDomainConfig"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserPoolDomain",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CloudFrontDomain": "s",
      },
    }, await resp.json());
  }

  async verifySoftwareToken(
    {abortSignal, ...params}: RequestConfig & VerifySoftwareTokenRequest,
  ): Promise<VerifySoftwareTokenResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "VerifySoftwareToken",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Status": toVerifySoftwareTokenResponseType,
        "Session": "s",
      },
    }, await resp.json());
  }

  async verifyUserAttribute(
    {abortSignal, ...params}: RequestConfig & VerifyUserAttributeRequest,
  ): Promise<VerifyUserAttributeResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "VerifyUserAttribute",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AddCustomAttributesRequest {
  UserPoolId: string;
  CustomAttributes: SchemaAttributeType[];
}

// refs: 1 - tags: named, input
export interface AdminAddUserToGroupRequest {
  UserPoolId: string;
  Username: string;
  GroupName: string;
}

// refs: 1 - tags: named, input
export interface AdminConfirmSignUpRequest {
  UserPoolId: string;
  Username: string;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface AdminCreateUserRequest {
  UserPoolId: string;
  Username: string;
  UserAttributes?: AttributeType[] | null;
  ValidationData?: AttributeType[] | null;
  TemporaryPassword?: string | null;
  ForceAliasCreation?: boolean | null;
  MessageAction?: MessageActionType | null;
  DesiredDeliveryMediums?: DeliveryMediumType[] | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface AdminDeleteUserRequest {
  UserPoolId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface AdminDeleteUserAttributesRequest {
  UserPoolId: string;
  Username: string;
  UserAttributeNames: string[];
}

// refs: 1 - tags: named, input
export interface AdminDisableProviderForUserRequest {
  UserPoolId: string;
  User: ProviderUserIdentifierType;
}

// refs: 1 - tags: named, input
export interface AdminDisableUserRequest {
  UserPoolId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface AdminEnableUserRequest {
  UserPoolId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface AdminForgetDeviceRequest {
  UserPoolId: string;
  Username: string;
  DeviceKey: string;
}

// refs: 1 - tags: named, input
export interface AdminGetDeviceRequest {
  DeviceKey: string;
  UserPoolId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface AdminGetUserRequest {
  UserPoolId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface AdminInitiateAuthRequest {
  UserPoolId: string;
  ClientId: string;
  AuthFlow: AuthFlowType;
  AuthParameters?: { [key: string]: string } | null;
  ClientMetadata?: { [key: string]: string } | null;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  ContextData?: ContextDataType | null;
}

// refs: 1 - tags: named, input
export interface AdminLinkProviderForUserRequest {
  UserPoolId: string;
  DestinationUser: ProviderUserIdentifierType;
  SourceUser: ProviderUserIdentifierType;
}

// refs: 1 - tags: named, input
export interface AdminListDevicesRequest {
  UserPoolId: string;
  Username: string;
  Limit?: number | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface AdminListGroupsForUserRequest {
  Username: string;
  UserPoolId: string;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface AdminListUserAuthEventsRequest {
  UserPoolId: string;
  Username: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface AdminRemoveUserFromGroupRequest {
  UserPoolId: string;
  Username: string;
  GroupName: string;
}

// refs: 1 - tags: named, input
export interface AdminResetUserPasswordRequest {
  UserPoolId: string;
  Username: string;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface AdminRespondToAuthChallengeRequest {
  UserPoolId: string;
  ClientId: string;
  ChallengeName: ChallengeNameType;
  ChallengeResponses?: { [key: string]: string } | null;
  Session?: string | null;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  ContextData?: ContextDataType | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface AdminSetUserMFAPreferenceRequest {
  SMSMfaSettings?: SMSMfaSettingsType | null;
  SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType | null;
  Username: string;
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface AdminSetUserPasswordRequest {
  UserPoolId: string;
  Username: string;
  Password: string;
  Permanent?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AdminSetUserSettingsRequest {
  UserPoolId: string;
  Username: string;
  MFAOptions: MFAOptionType[];
}

// refs: 1 - tags: named, input
export interface AdminUpdateAuthEventFeedbackRequest {
  UserPoolId: string;
  Username: string;
  EventId: string;
  FeedbackValue: FeedbackValueType;
}

// refs: 1 - tags: named, input
export interface AdminUpdateDeviceStatusRequest {
  UserPoolId: string;
  Username: string;
  DeviceKey: string;
  DeviceRememberedStatus?: DeviceRememberedStatusType | null;
}

// refs: 1 - tags: named, input
export interface AdminUpdateUserAttributesRequest {
  UserPoolId: string;
  Username: string;
  UserAttributes: AttributeType[];
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface AdminUserGlobalSignOutRequest {
  UserPoolId: string;
  Username: string;
}

// refs: 1 - tags: named, input
export interface AssociateSoftwareTokenRequest {
  AccessToken?: string | null;
  Session?: string | null;
}

// refs: 1 - tags: named, input
export interface ChangePasswordRequest {
  PreviousPassword: string;
  ProposedPassword: string;
  AccessToken: string;
}

// refs: 1 - tags: named, input
export interface ConfirmDeviceRequest {
  AccessToken: string;
  DeviceKey: string;
  DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType | null;
  DeviceName?: string | null;
}

// refs: 1 - tags: named, input
export interface ConfirmForgotPasswordRequest {
  ClientId: string;
  SecretHash?: string | null;
  Username: string;
  ConfirmationCode: string;
  Password: string;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  UserContextData?: UserContextDataType | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface ConfirmSignUpRequest {
  ClientId: string;
  SecretHash?: string | null;
  Username: string;
  ConfirmationCode: string;
  ForceAliasCreation?: boolean | null;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  UserContextData?: UserContextDataType | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface CreateGroupRequest {
  GroupName: string;
  UserPoolId: string;
  Description?: string | null;
  RoleArn?: string | null;
  Precedence?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateIdentityProviderRequest {
  UserPoolId: string;
  ProviderName: string;
  ProviderType: IdentityProviderTypeType;
  ProviderDetails: { [key: string]: string };
  AttributeMapping?: { [key: string]: string } | null;
  IdpIdentifiers?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CreateResourceServerRequest {
  UserPoolId: string;
  Identifier: string;
  Name: string;
  Scopes?: ResourceServerScopeType[] | null;
}

// refs: 1 - tags: named, input
export interface CreateUserImportJobRequest {
  JobName: string;
  UserPoolId: string;
  CloudWatchLogsRoleArn: string;
}

// refs: 1 - tags: named, input
export interface CreateUserPoolRequest {
  PoolName: string;
  Policies?: UserPoolPolicyType | null;
  LambdaConfig?: LambdaConfigType | null;
  AutoVerifiedAttributes?: VerifiedAttributeType[] | null;
  AliasAttributes?: AliasAttributeType[] | null;
  UsernameAttributes?: UsernameAttributeType[] | null;
  SmsVerificationMessage?: string | null;
  EmailVerificationMessage?: string | null;
  EmailVerificationSubject?: string | null;
  VerificationMessageTemplate?: VerificationMessageTemplateType | null;
  SmsAuthenticationMessage?: string | null;
  MfaConfiguration?: UserPoolMfaType | null;
  DeviceConfiguration?: DeviceConfigurationType | null;
  EmailConfiguration?: EmailConfigurationType | null;
  SmsConfiguration?: SmsConfigurationType | null;
  UserPoolTags?: { [key: string]: string } | null;
  AdminCreateUserConfig?: AdminCreateUserConfigType | null;
  Schema?: SchemaAttributeType[] | null;
  UserPoolAddOns?: UserPoolAddOnsType | null;
  UsernameConfiguration?: UsernameConfigurationType | null;
  AccountRecoverySetting?: AccountRecoverySettingType | null;
}

// refs: 1 - tags: named, input
export interface CreateUserPoolClientRequest {
  UserPoolId: string;
  ClientName: string;
  GenerateSecret?: boolean | null;
  RefreshTokenValidity?: number | null;
  AccessTokenValidity?: number | null;
  IdTokenValidity?: number | null;
  TokenValidityUnits?: TokenValidityUnitsType | null;
  ReadAttributes?: string[] | null;
  WriteAttributes?: string[] | null;
  ExplicitAuthFlows?: ExplicitAuthFlowsType[] | null;
  SupportedIdentityProviders?: string[] | null;
  CallbackURLs?: string[] | null;
  LogoutURLs?: string[] | null;
  DefaultRedirectURI?: string | null;
  AllowedOAuthFlows?: OAuthFlowType[] | null;
  AllowedOAuthScopes?: string[] | null;
  AllowedOAuthFlowsUserPoolClient?: boolean | null;
  AnalyticsConfiguration?: AnalyticsConfigurationType | null;
  PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | null;
}

// refs: 1 - tags: named, input
export interface CreateUserPoolDomainRequest {
  Domain: string;
  UserPoolId: string;
  CustomDomainConfig?: CustomDomainConfigType | null;
}

// refs: 1 - tags: named, input
export interface DeleteGroupRequest {
  GroupName: string;
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface DeleteIdentityProviderRequest {
  UserPoolId: string;
  ProviderName: string;
}

// refs: 1 - tags: named, input
export interface DeleteResourceServerRequest {
  UserPoolId: string;
  Identifier: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  AccessToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserAttributesRequest {
  UserAttributeNames: string[];
  AccessToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserPoolRequest {
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserPoolClientRequest {
  UserPoolId: string;
  ClientId: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserPoolDomainRequest {
  Domain: string;
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface DescribeIdentityProviderRequest {
  UserPoolId: string;
  ProviderName: string;
}

// refs: 1 - tags: named, input
export interface DescribeResourceServerRequest {
  UserPoolId: string;
  Identifier: string;
}

// refs: 1 - tags: named, input
export interface DescribeRiskConfigurationRequest {
  UserPoolId: string;
  ClientId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeUserImportJobRequest {
  UserPoolId: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserPoolRequest {
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserPoolClientRequest {
  UserPoolId: string;
  ClientId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserPoolDomainRequest {
  Domain: string;
}

// refs: 1 - tags: named, input
export interface ForgetDeviceRequest {
  AccessToken?: string | null;
  DeviceKey: string;
}

// refs: 1 - tags: named, input
export interface ForgotPasswordRequest {
  ClientId: string;
  SecretHash?: string | null;
  UserContextData?: UserContextDataType | null;
  Username: string;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface GetCSVHeaderRequest {
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface GetDeviceRequest {
  DeviceKey: string;
  AccessToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetGroupRequest {
  GroupName: string;
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface GetIdentityProviderByIdentifierRequest {
  UserPoolId: string;
  IdpIdentifier: string;
}

// refs: 1 - tags: named, input
export interface GetSigningCertificateRequest {
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface GetUICustomizationRequest {
  UserPoolId: string;
  ClientId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetUserRequest {
  AccessToken: string;
}

// refs: 1 - tags: named, input
export interface GetUserAttributeVerificationCodeRequest {
  AccessToken: string;
  AttributeName: string;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface GetUserPoolMfaConfigRequest {
  UserPoolId: string;
}

// refs: 1 - tags: named, input
export interface GlobalSignOutRequest {
  AccessToken: string;
}

// refs: 1 - tags: named, input
export interface InitiateAuthRequest {
  AuthFlow: AuthFlowType;
  AuthParameters?: { [key: string]: string } | null;
  ClientMetadata?: { [key: string]: string } | null;
  ClientId: string;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  UserContextData?: UserContextDataType | null;
}

// refs: 1 - tags: named, input
export interface ListDevicesRequest {
  AccessToken: string;
  Limit?: number | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGroupsRequest {
  UserPoolId: string;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListIdentityProvidersRequest {
  UserPoolId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListResourceServersRequest {
  UserPoolId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListUserImportJobsRequest {
  UserPoolId: string;
  MaxResults: number;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListUserPoolClientsRequest {
  UserPoolId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListUserPoolsRequest {
  NextToken?: string | null;
  MaxResults: number;
}

// refs: 1 - tags: named, input
export interface ListUsersRequest {
  UserPoolId: string;
  AttributesToGet?: string[] | null;
  Limit?: number | null;
  PaginationToken?: string | null;
  Filter?: string | null;
}

// refs: 1 - tags: named, input
export interface ListUsersInGroupRequest {
  UserPoolId: string;
  GroupName: string;
  Limit?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ResendConfirmationCodeRequest {
  ClientId: string;
  SecretHash?: string | null;
  UserContextData?: UserContextDataType | null;
  Username: string;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface RespondToAuthChallengeRequest {
  ClientId: string;
  ChallengeName: ChallengeNameType;
  Session?: string | null;
  ChallengeResponses?: { [key: string]: string } | null;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  UserContextData?: UserContextDataType | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface SetRiskConfigurationRequest {
  UserPoolId: string;
  ClientId?: string | null;
  CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType | null;
  AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType | null;
  RiskExceptionConfiguration?: RiskExceptionConfigurationType | null;
}

// refs: 1 - tags: named, input
export interface SetUICustomizationRequest {
  UserPoolId: string;
  ClientId?: string | null;
  CSS?: string | null;
  ImageFile?: Uint8Array | string | null;
}

// refs: 1 - tags: named, input
export interface SetUserMFAPreferenceRequest {
  SMSMfaSettings?: SMSMfaSettingsType | null;
  SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType | null;
  AccessToken: string;
}

// refs: 1 - tags: named, input
export interface SetUserPoolMfaConfigRequest {
  UserPoolId: string;
  SmsMfaConfiguration?: SmsMfaConfigType | null;
  SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType | null;
  MfaConfiguration?: UserPoolMfaType | null;
}

// refs: 1 - tags: named, input
export interface SetUserSettingsRequest {
  AccessToken: string;
  MFAOptions: MFAOptionType[];
}

// refs: 1 - tags: named, input
export interface SignUpRequest {
  ClientId: string;
  SecretHash?: string | null;
  Username: string;
  Password: string;
  UserAttributes?: AttributeType[] | null;
  ValidationData?: AttributeType[] | null;
  AnalyticsMetadata?: AnalyticsMetadataType | null;
  UserContextData?: UserContextDataType | null;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface StartUserImportJobRequest {
  UserPoolId: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopUserImportJobRequest {
  UserPoolId: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAuthEventFeedbackRequest {
  UserPoolId: string;
  Username: string;
  EventId: string;
  FeedbackToken: string;
  FeedbackValue: FeedbackValueType;
}

// refs: 1 - tags: named, input
export interface UpdateDeviceStatusRequest {
  AccessToken: string;
  DeviceKey: string;
  DeviceRememberedStatus?: DeviceRememberedStatusType | null;
}

// refs: 1 - tags: named, input
export interface UpdateGroupRequest {
  GroupName: string;
  UserPoolId: string;
  Description?: string | null;
  RoleArn?: string | null;
  Precedence?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateIdentityProviderRequest {
  UserPoolId: string;
  ProviderName: string;
  ProviderDetails?: { [key: string]: string } | null;
  AttributeMapping?: { [key: string]: string } | null;
  IdpIdentifiers?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateResourceServerRequest {
  UserPoolId: string;
  Identifier: string;
  Name: string;
  Scopes?: ResourceServerScopeType[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserAttributesRequest {
  UserAttributes: AttributeType[];
  AccessToken: string;
  ClientMetadata?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserPoolRequest {
  UserPoolId: string;
  Policies?: UserPoolPolicyType | null;
  LambdaConfig?: LambdaConfigType | null;
  AutoVerifiedAttributes?: VerifiedAttributeType[] | null;
  SmsVerificationMessage?: string | null;
  EmailVerificationMessage?: string | null;
  EmailVerificationSubject?: string | null;
  VerificationMessageTemplate?: VerificationMessageTemplateType | null;
  SmsAuthenticationMessage?: string | null;
  MfaConfiguration?: UserPoolMfaType | null;
  DeviceConfiguration?: DeviceConfigurationType | null;
  EmailConfiguration?: EmailConfigurationType | null;
  SmsConfiguration?: SmsConfigurationType | null;
  UserPoolTags?: { [key: string]: string } | null;
  AdminCreateUserConfig?: AdminCreateUserConfigType | null;
  UserPoolAddOns?: UserPoolAddOnsType | null;
  AccountRecoverySetting?: AccountRecoverySettingType | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserPoolClientRequest {
  UserPoolId: string;
  ClientId: string;
  ClientName?: string | null;
  RefreshTokenValidity?: number | null;
  AccessTokenValidity?: number | null;
  IdTokenValidity?: number | null;
  TokenValidityUnits?: TokenValidityUnitsType | null;
  ReadAttributes?: string[] | null;
  WriteAttributes?: string[] | null;
  ExplicitAuthFlows?: ExplicitAuthFlowsType[] | null;
  SupportedIdentityProviders?: string[] | null;
  CallbackURLs?: string[] | null;
  LogoutURLs?: string[] | null;
  DefaultRedirectURI?: string | null;
  AllowedOAuthFlows?: OAuthFlowType[] | null;
  AllowedOAuthScopes?: string[] | null;
  AllowedOAuthFlowsUserPoolClient?: boolean | null;
  AnalyticsConfiguration?: AnalyticsConfigurationType | null;
  PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserPoolDomainRequest {
  Domain: string;
  UserPoolId: string;
  CustomDomainConfig: CustomDomainConfigType;
}

// refs: 1 - tags: named, input
export interface VerifySoftwareTokenRequest {
  AccessToken?: string | null;
  Session?: string | null;
  UserCode: string;
  FriendlyDeviceName?: string | null;
}

// refs: 1 - tags: named, input
export interface VerifyUserAttributeRequest {
  AccessToken: string;
  AttributeName: string;
  Code: string;
}

// refs: 1 - tags: named, output
export interface AddCustomAttributesResponse {
}

// refs: 1 - tags: named, output
export interface AdminConfirmSignUpResponse {
}

// refs: 1 - tags: named, output
export interface AdminCreateUserResponse {
  User?: UserType | null;
}

// refs: 1 - tags: named, output
export interface AdminDeleteUserAttributesResponse {
}

// refs: 1 - tags: named, output
export interface AdminDisableProviderForUserResponse {
}

// refs: 1 - tags: named, output
export interface AdminDisableUserResponse {
}

// refs: 1 - tags: named, output
export interface AdminEnableUserResponse {
}

// refs: 1 - tags: named, output
export interface AdminGetDeviceResponse {
  Device: DeviceType;
}

// refs: 1 - tags: named, output
export interface AdminGetUserResponse {
  Username: string;
  UserAttributes?: AttributeType[] | null;
  UserCreateDate?: Date | number | null;
  UserLastModifiedDate?: Date | number | null;
  Enabled?: boolean | null;
  UserStatus?: UserStatusType | null;
  MFAOptions?: MFAOptionType[] | null;
  PreferredMfaSetting?: string | null;
  UserMFASettingList?: string[] | null;
}

// refs: 1 - tags: named, output
export interface AdminInitiateAuthResponse {
  ChallengeName?: ChallengeNameType | null;
  Session?: string | null;
  ChallengeParameters?: { [key: string]: string } | null;
  AuthenticationResult?: AuthenticationResultType | null;
}

// refs: 1 - tags: named, output
export interface AdminLinkProviderForUserResponse {
}

// refs: 1 - tags: named, output
export interface AdminListDevicesResponse {
  Devices?: DeviceType[] | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, output
export interface AdminListGroupsForUserResponse {
  Groups?: GroupType[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface AdminListUserAuthEventsResponse {
  AuthEvents?: AuthEventType[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface AdminResetUserPasswordResponse {
}

// refs: 1 - tags: named, output
export interface AdminRespondToAuthChallengeResponse {
  ChallengeName?: ChallengeNameType | null;
  Session?: string | null;
  ChallengeParameters?: { [key: string]: string } | null;
  AuthenticationResult?: AuthenticationResultType | null;
}

// refs: 1 - tags: named, output
export interface AdminSetUserMFAPreferenceResponse {
}

// refs: 1 - tags: named, output
export interface AdminSetUserPasswordResponse {
}

// refs: 1 - tags: named, output
export interface AdminSetUserSettingsResponse {
}

// refs: 1 - tags: named, output
export interface AdminUpdateAuthEventFeedbackResponse {
}

// refs: 1 - tags: named, output
export interface AdminUpdateDeviceStatusResponse {
}

// refs: 1 - tags: named, output
export interface AdminUpdateUserAttributesResponse {
}

// refs: 1 - tags: named, output
export interface AdminUserGlobalSignOutResponse {
}

// refs: 1 - tags: named, output
export interface AssociateSoftwareTokenResponse {
  SecretCode?: string | null;
  Session?: string | null;
}

// refs: 1 - tags: named, output
export interface ChangePasswordResponse {
}

// refs: 1 - tags: named, output
export interface ConfirmDeviceResponse {
  UserConfirmationNecessary?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ConfirmForgotPasswordResponse {
}

// refs: 1 - tags: named, output
export interface ConfirmSignUpResponse {
}

// refs: 1 - tags: named, output
export interface CreateGroupResponse {
  Group?: GroupType | null;
}

// refs: 1 - tags: named, output
export interface CreateIdentityProviderResponse {
  IdentityProvider: IdentityProviderType;
}

// refs: 1 - tags: named, output
export interface CreateResourceServerResponse {
  ResourceServer: ResourceServerType;
}

// refs: 1 - tags: named, output
export interface CreateUserImportJobResponse {
  UserImportJob?: UserImportJobType | null;
}

// refs: 1 - tags: named, output
export interface CreateUserPoolResponse {
  UserPool?: UserPoolType | null;
}

// refs: 1 - tags: named, output
export interface CreateUserPoolClientResponse {
  UserPoolClient?: UserPoolClientType | null;
}

// refs: 1 - tags: named, output
export interface CreateUserPoolDomainResponse {
  CloudFrontDomain?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteUserAttributesResponse {
}

// refs: 1 - tags: named, output
export interface DeleteUserPoolDomainResponse {
}

// refs: 1 - tags: named, output
export interface DescribeIdentityProviderResponse {
  IdentityProvider: IdentityProviderType;
}

// refs: 1 - tags: named, output
export interface DescribeResourceServerResponse {
  ResourceServer: ResourceServerType;
}

// refs: 1 - tags: named, output
export interface DescribeRiskConfigurationResponse {
  RiskConfiguration: RiskConfigurationType;
}

// refs: 1 - tags: named, output
export interface DescribeUserImportJobResponse {
  UserImportJob?: UserImportJobType | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserPoolResponse {
  UserPool?: UserPoolType | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserPoolClientResponse {
  UserPoolClient?: UserPoolClientType | null;
}

// refs: 1 - tags: named, output
export interface DescribeUserPoolDomainResponse {
  DomainDescription?: DomainDescriptionType | null;
}

// refs: 1 - tags: named, output
export interface ForgotPasswordResponse {
  CodeDeliveryDetails?: CodeDeliveryDetailsType | null;
}

// refs: 1 - tags: named, output
export interface GetCSVHeaderResponse {
  UserPoolId?: string | null;
  CSVHeader?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceResponse {
  Device: DeviceType;
}

// refs: 1 - tags: named, output
export interface GetGroupResponse {
  Group?: GroupType | null;
}

// refs: 1 - tags: named, output
export interface GetIdentityProviderByIdentifierResponse {
  IdentityProvider: IdentityProviderType;
}

// refs: 1 - tags: named, output
export interface GetSigningCertificateResponse {
  Certificate?: string | null;
}

// refs: 1 - tags: named, output
export interface GetUICustomizationResponse {
  UICustomization: UICustomizationType;
}

// refs: 1 - tags: named, output
export interface GetUserResponse {
  Username: string;
  UserAttributes: AttributeType[];
  MFAOptions?: MFAOptionType[] | null;
  PreferredMfaSetting?: string | null;
  UserMFASettingList?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetUserAttributeVerificationCodeResponse {
  CodeDeliveryDetails?: CodeDeliveryDetailsType | null;
}

// refs: 1 - tags: named, output
export interface GetUserPoolMfaConfigResponse {
  SmsMfaConfiguration?: SmsMfaConfigType | null;
  SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType | null;
  MfaConfiguration?: UserPoolMfaType | null;
}

// refs: 1 - tags: named, output
export interface GlobalSignOutResponse {
}

// refs: 1 - tags: named, output
export interface InitiateAuthResponse {
  ChallengeName?: ChallengeNameType | null;
  Session?: string | null;
  ChallengeParameters?: { [key: string]: string } | null;
  AuthenticationResult?: AuthenticationResultType | null;
}

// refs: 1 - tags: named, output
export interface ListDevicesResponse {
  Devices?: DeviceType[] | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGroupsResponse {
  Groups?: GroupType[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIdentityProvidersResponse {
  Providers: ProviderDescription[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourceServersResponse {
  ResourceServers: ResourceServerType[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string } | null;
}

// refs: 1 - tags: named, output
export interface ListUserImportJobsResponse {
  UserImportJobs?: UserImportJobType[] | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUserPoolClientsResponse {
  UserPoolClients?: UserPoolClientDescription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUserPoolsResponse {
  UserPools?: UserPoolDescriptionType[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUsersResponse {
  Users?: UserType[] | null;
  PaginationToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUsersInGroupResponse {
  Users?: UserType[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ResendConfirmationCodeResponse {
  CodeDeliveryDetails?: CodeDeliveryDetailsType | null;
}

// refs: 1 - tags: named, output
export interface RespondToAuthChallengeResponse {
  ChallengeName?: ChallengeNameType | null;
  Session?: string | null;
  ChallengeParameters?: { [key: string]: string } | null;
  AuthenticationResult?: AuthenticationResultType | null;
}

// refs: 1 - tags: named, output
export interface SetRiskConfigurationResponse {
  RiskConfiguration: RiskConfigurationType;
}

// refs: 1 - tags: named, output
export interface SetUICustomizationResponse {
  UICustomization: UICustomizationType;
}

// refs: 1 - tags: named, output
export interface SetUserMFAPreferenceResponse {
}

// refs: 1 - tags: named, output
export interface SetUserPoolMfaConfigResponse {
  SmsMfaConfiguration?: SmsMfaConfigType | null;
  SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType | null;
  MfaConfiguration?: UserPoolMfaType | null;
}

// refs: 1 - tags: named, output
export interface SetUserSettingsResponse {
}

// refs: 1 - tags: named, output
export interface SignUpResponse {
  UserConfirmed: boolean;
  CodeDeliveryDetails?: CodeDeliveryDetailsType | null;
  UserSub: string;
}

// refs: 1 - tags: named, output
export interface StartUserImportJobResponse {
  UserImportJob?: UserImportJobType | null;
}

// refs: 1 - tags: named, output
export interface StopUserImportJobResponse {
  UserImportJob?: UserImportJobType | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAuthEventFeedbackResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDeviceStatusResponse {
}

// refs: 1 - tags: named, output
export interface UpdateGroupResponse {
  Group?: GroupType | null;
}

// refs: 1 - tags: named, output
export interface UpdateIdentityProviderResponse {
  IdentityProvider: IdentityProviderType;
}

// refs: 1 - tags: named, output
export interface UpdateResourceServerResponse {
  ResourceServer: ResourceServerType;
}

// refs: 1 - tags: named, output
export interface UpdateUserAttributesResponse {
  CodeDeliveryDetailsList?: CodeDeliveryDetailsType[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateUserPoolResponse {
}

// refs: 1 - tags: named, output
export interface UpdateUserPoolClientResponse {
  UserPoolClient?: UserPoolClientType | null;
}

// refs: 1 - tags: named, output
export interface UpdateUserPoolDomainResponse {
  CloudFrontDomain?: string | null;
}

// refs: 1 - tags: named, output
export interface VerifySoftwareTokenResponse {
  Status?: VerifySoftwareTokenResponseType | null;
  Session?: string | null;
}

// refs: 1 - tags: named, output
export interface VerifyUserAttributeResponse {
}

// refs: 4 - tags: input, named, interface, output
export interface SchemaAttributeType {
  Name?: string | null;
  AttributeDataType?: AttributeDataType | null;
  DeveloperOnlyAttribute?: boolean | null;
  Mutable?: boolean | null;
  Required?: boolean | null;
  NumberAttributeConstraints?: NumberAttributeConstraintsType | null;
  StringAttributeConstraints?: StringAttributeConstraintsType | null;
}
function fromSchemaAttributeType(input?: SchemaAttributeType | null): JSONValue {
  if (!input) return input;
  return {...input,
    NumberAttributeConstraints: fromNumberAttributeConstraintsType(input["NumberAttributeConstraints"]),
    StringAttributeConstraints: fromStringAttributeConstraintsType(input["StringAttributeConstraints"]),
  }
}
function toSchemaAttributeType(root: JSONValue): SchemaAttributeType {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "AttributeDataType": toAttributeDataType,
      "DeveloperOnlyAttribute": "b",
      "Mutable": "b",
      "Required": "b",
      "NumberAttributeConstraints": toNumberAttributeConstraintsType,
      "StringAttributeConstraints": toStringAttributeConstraintsType,
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type AttributeDataType =
| "String"
| "Number"
| "DateTime"
| "Boolean"
;

function toAttributeDataType(root: JSONValue): AttributeDataType | null {
  return ( false
    || root == "String"
    || root == "Number"
    || root == "DateTime"
    || root == "Boolean"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface NumberAttributeConstraintsType {
  MinValue?: string | null;
  MaxValue?: string | null;
}
function fromNumberAttributeConstraintsType(input?: NumberAttributeConstraintsType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toNumberAttributeConstraintsType(root: JSONValue): NumberAttributeConstraintsType {
  return prt.readObj({
    required: {},
    optional: {
      "MinValue": "s",
      "MaxValue": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface StringAttributeConstraintsType {
  MinLength?: string | null;
  MaxLength?: string | null;
}
function fromStringAttributeConstraintsType(input?: StringAttributeConstraintsType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toStringAttributeConstraintsType(root: JSONValue): StringAttributeConstraintsType {
  return prt.readObj({
    required: {},
    optional: {
      "MinLength": "s",
      "MaxLength": "s",
    },
  }, root);
}

// refs: 15 - tags: input, named, interface, output
export interface AttributeType {
  Name: string;
  Value?: string | null;
}
function fromAttributeType(input?: AttributeType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toAttributeType(root: JSONValue): AttributeType {
  return prt.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type MessageActionType =
| "RESEND"
| "SUPPRESS"
;


// refs: 13 - tags: input, named, enum, output
export type DeliveryMediumType =
| "SMS"
| "EMAIL"
;

function toDeliveryMediumType(root: JSONValue): DeliveryMediumType | null {
  return ( false
    || root == "SMS"
    || root == "EMAIL"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface
export interface ProviderUserIdentifierType {
  ProviderName?: string | null;
  ProviderAttributeName?: string | null;
  ProviderAttributeValue?: string | null;
}
function fromProviderUserIdentifierType(input?: ProviderUserIdentifierType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, enum
export type AuthFlowType =
| "USER_SRP_AUTH"
| "REFRESH_TOKEN_AUTH"
| "REFRESH_TOKEN"
| "CUSTOM_AUTH"
| "ADMIN_NO_SRP_AUTH"
| "USER_PASSWORD_AUTH"
| "ADMIN_USER_PASSWORD_AUTH"
;


// refs: 9 - tags: input, named, interface
export interface AnalyticsMetadataType {
  AnalyticsEndpointId?: string | null;
}
function fromAnalyticsMetadataType(input?: AnalyticsMetadataType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, interface
export interface ContextDataType {
  IpAddress: string;
  ServerName: string;
  ServerPath: string;
  HttpHeaders: HttpHeader[];
  EncodedData?: string | null;
}
function fromContextDataType(input?: ContextDataType | null): JSONValue {
  if (!input) return input;
  return {...input,
    HttpHeaders: input["HttpHeaders"]?.map(x => fromHttpHeader(x)),
  }
}

// refs: 2 - tags: input, named, interface
export interface HttpHeader {
  headerName?: string | null;
  headerValue?: string | null;
}
function fromHttpHeader(input?: HttpHeader | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 6 - tags: input, named, enum, output
export type ChallengeNameType =
| "SMS_MFA"
| "SOFTWARE_TOKEN_MFA"
| "SELECT_MFA_TYPE"
| "MFA_SETUP"
| "PASSWORD_VERIFIER"
| "CUSTOM_CHALLENGE"
| "DEVICE_SRP_AUTH"
| "DEVICE_PASSWORD_VERIFIER"
| "ADMIN_NO_SRP_AUTH"
| "NEW_PASSWORD_REQUIRED"
;

function toChallengeNameType(root: JSONValue): ChallengeNameType | null {
  return ( false
    || root == "SMS_MFA"
    || root == "SOFTWARE_TOKEN_MFA"
    || root == "SELECT_MFA_TYPE"
    || root == "MFA_SETUP"
    || root == "PASSWORD_VERIFIER"
    || root == "CUSTOM_CHALLENGE"
    || root == "DEVICE_SRP_AUTH"
    || root == "DEVICE_PASSWORD_VERIFIER"
    || root == "ADMIN_NO_SRP_AUTH"
    || root == "NEW_PASSWORD_REQUIRED"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface
export interface SMSMfaSettingsType {
  Enabled?: boolean | null;
  PreferredMfa?: boolean | null;
}
function fromSMSMfaSettingsType(input?: SMSMfaSettingsType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, interface
export interface SoftwareTokenMfaSettingsType {
  Enabled?: boolean | null;
  PreferredMfa?: boolean | null;
}
function fromSoftwareTokenMfaSettingsType(input?: SoftwareTokenMfaSettingsType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 7 - tags: input, named, interface, output
export interface MFAOptionType {
  DeliveryMedium?: DeliveryMediumType | null;
  AttributeName?: string | null;
}
function fromMFAOptionType(input?: MFAOptionType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toMFAOptionType(root: JSONValue): MFAOptionType {
  return prt.readObj({
    required: {},
    optional: {
      "DeliveryMedium": toDeliveryMediumType,
      "AttributeName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type FeedbackValueType =
| "Valid"
| "Invalid"
;

function toFeedbackValueType(root: JSONValue): FeedbackValueType | null {
  return ( false
    || root == "Valid"
    || root == "Invalid"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum
export type DeviceRememberedStatusType =
| "remembered"
| "not_remembered"
;


// refs: 1 - tags: input, named, interface
export interface DeviceSecretVerifierConfigType {
  PasswordVerifier?: string | null;
  Salt?: string | null;
}
function fromDeviceSecretVerifierConfigType(input?: DeviceSecretVerifierConfigType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 7 - tags: input, named, interface
export interface UserContextDataType {
  EncodedData?: string | null;
}
function fromUserContextDataType(input?: UserContextDataType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 6 - tags: input, named, enum, output
export type IdentityProviderTypeType =
| "SAML"
| "Facebook"
| "Google"
| "LoginWithAmazon"
| "SignInWithApple"
| "OIDC"
;

function toIdentityProviderTypeType(root: JSONValue): IdentityProviderTypeType | null {
  return ( false
    || root == "SAML"
    || root == "Facebook"
    || root == "Google"
    || root == "LoginWithAmazon"
    || root == "SignInWithApple"
    || root == "OIDC"
  ) ? root : null;
}

// refs: 6 - tags: input, named, interface, output
export interface ResourceServerScopeType {
  ScopeName: string;
  ScopeDescription: string;
}
function fromResourceServerScopeType(input?: ResourceServerScopeType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toResourceServerScopeType(root: JSONValue): ResourceServerScopeType {
  return prt.readObj({
    required: {
      "ScopeName": "s",
      "ScopeDescription": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface UserPoolPolicyType {
  PasswordPolicy?: PasswordPolicyType | null;
}
function fromUserPoolPolicyType(input?: UserPoolPolicyType | null): JSONValue {
  if (!input) return input;
  return {...input,
    PasswordPolicy: fromPasswordPolicyType(input["PasswordPolicy"]),
  }
}
function toUserPoolPolicyType(root: JSONValue): UserPoolPolicyType {
  return prt.readObj({
    required: {},
    optional: {
      "PasswordPolicy": toPasswordPolicyType,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface PasswordPolicyType {
  MinimumLength?: number | null;
  RequireUppercase?: boolean | null;
  RequireLowercase?: boolean | null;
  RequireNumbers?: boolean | null;
  RequireSymbols?: boolean | null;
  TemporaryPasswordValidityDays?: number | null;
}
function fromPasswordPolicyType(input?: PasswordPolicyType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toPasswordPolicyType(root: JSONValue): PasswordPolicyType {
  return prt.readObj({
    required: {},
    optional: {
      "MinimumLength": "n",
      "RequireUppercase": "b",
      "RequireLowercase": "b",
      "RequireNumbers": "b",
      "RequireSymbols": "b",
      "TemporaryPasswordValidityDays": "n",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface LambdaConfigType {
  PreSignUp?: string | null;
  CustomMessage?: string | null;
  PostConfirmation?: string | null;
  PreAuthentication?: string | null;
  PostAuthentication?: string | null;
  DefineAuthChallenge?: string | null;
  CreateAuthChallenge?: string | null;
  VerifyAuthChallengeResponse?: string | null;
  PreTokenGeneration?: string | null;
  UserMigration?: string | null;
}
function fromLambdaConfigType(input?: LambdaConfigType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toLambdaConfigType(root: JSONValue): LambdaConfigType {
  return prt.readObj({
    required: {},
    optional: {
      "PreSignUp": "s",
      "CustomMessage": "s",
      "PostConfirmation": "s",
      "PreAuthentication": "s",
      "PostAuthentication": "s",
      "DefineAuthChallenge": "s",
      "CreateAuthChallenge": "s",
      "VerifyAuthChallengeResponse": "s",
      "PreTokenGeneration": "s",
      "UserMigration": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type VerifiedAttributeType =
| "phone_number"
| "email"
;

function toVerifiedAttributeType(root: JSONValue): VerifiedAttributeType | null {
  return ( false
    || root == "phone_number"
    || root == "email"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type AliasAttributeType =
| "phone_number"
| "email"
| "preferred_username"
;

function toAliasAttributeType(root: JSONValue): AliasAttributeType | null {
  return ( false
    || root == "phone_number"
    || root == "email"
    || root == "preferred_username"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type UsernameAttributeType =
| "phone_number"
| "email"
;

function toUsernameAttributeType(root: JSONValue): UsernameAttributeType | null {
  return ( false
    || root == "phone_number"
    || root == "email"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface VerificationMessageTemplateType {
  SmsMessage?: string | null;
  EmailMessage?: string | null;
  EmailSubject?: string | null;
  EmailMessageByLink?: string | null;
  EmailSubjectByLink?: string | null;
  DefaultEmailOption?: DefaultEmailOptionType | null;
}
function fromVerificationMessageTemplateType(input?: VerificationMessageTemplateType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toVerificationMessageTemplateType(root: JSONValue): VerificationMessageTemplateType {
  return prt.readObj({
    required: {},
    optional: {
      "SmsMessage": "s",
      "EmailMessage": "s",
      "EmailSubject": "s",
      "EmailMessageByLink": "s",
      "EmailSubjectByLink": "s",
      "DefaultEmailOption": toDefaultEmailOptionType,
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type DefaultEmailOptionType =
| "CONFIRM_WITH_LINK"
| "CONFIRM_WITH_CODE"
;

function toDefaultEmailOptionType(root: JSONValue): DefaultEmailOptionType | null {
  return ( false
    || root == "CONFIRM_WITH_LINK"
    || root == "CONFIRM_WITH_CODE"
  ) ? root : null;
}

// refs: 7 - tags: input, named, enum, output
export type UserPoolMfaType =
| "OFF"
| "ON"
| "OPTIONAL"
;

function toUserPoolMfaType(root: JSONValue): UserPoolMfaType | null {
  return ( false
    || root == "OFF"
    || root == "ON"
    || root == "OPTIONAL"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface DeviceConfigurationType {
  ChallengeRequiredOnNewDevice?: boolean | null;
  DeviceOnlyRememberedOnUserPrompt?: boolean | null;
}
function fromDeviceConfigurationType(input?: DeviceConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toDeviceConfigurationType(root: JSONValue): DeviceConfigurationType {
  return prt.readObj({
    required: {},
    optional: {
      "ChallengeRequiredOnNewDevice": "b",
      "DeviceOnlyRememberedOnUserPrompt": "b",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface EmailConfigurationType {
  SourceArn?: string | null;
  ReplyToEmailAddress?: string | null;
  EmailSendingAccount?: EmailSendingAccountType | null;
  From?: string | null;
  ConfigurationSet?: string | null;
}
function fromEmailConfigurationType(input?: EmailConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toEmailConfigurationType(root: JSONValue): EmailConfigurationType {
  return prt.readObj({
    required: {},
    optional: {
      "SourceArn": "s",
      "ReplyToEmailAddress": "s",
      "EmailSendingAccount": toEmailSendingAccountType,
      "From": "s",
      "ConfigurationSet": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type EmailSendingAccountType =
| "COGNITO_DEFAULT"
| "DEVELOPER"
;

function toEmailSendingAccountType(root: JSONValue): EmailSendingAccountType | null {
  return ( false
    || root == "COGNITO_DEFAULT"
    || root == "DEVELOPER"
  ) ? root : null;
}

// refs: 7 - tags: input, named, interface, output
export interface SmsConfigurationType {
  SnsCallerArn: string;
  ExternalId?: string | null;
}
function fromSmsConfigurationType(input?: SmsConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSmsConfigurationType(root: JSONValue): SmsConfigurationType {
  return prt.readObj({
    required: {
      "SnsCallerArn": "s",
    },
    optional: {
      "ExternalId": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface AdminCreateUserConfigType {
  AllowAdminCreateUserOnly?: boolean | null;
  UnusedAccountValidityDays?: number | null;
  InviteMessageTemplate?: MessageTemplateType | null;
}
function fromAdminCreateUserConfigType(input?: AdminCreateUserConfigType | null): JSONValue {
  if (!input) return input;
  return {...input,
    InviteMessageTemplate: fromMessageTemplateType(input["InviteMessageTemplate"]),
  }
}
function toAdminCreateUserConfigType(root: JSONValue): AdminCreateUserConfigType {
  return prt.readObj({
    required: {},
    optional: {
      "AllowAdminCreateUserOnly": "b",
      "UnusedAccountValidityDays": "n",
      "InviteMessageTemplate": toMessageTemplateType,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MessageTemplateType {
  SMSMessage?: string | null;
  EmailMessage?: string | null;
  EmailSubject?: string | null;
}
function fromMessageTemplateType(input?: MessageTemplateType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toMessageTemplateType(root: JSONValue): MessageTemplateType {
  return prt.readObj({
    required: {},
    optional: {
      "SMSMessage": "s",
      "EmailMessage": "s",
      "EmailSubject": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface UserPoolAddOnsType {
  AdvancedSecurityMode: AdvancedSecurityModeType;
}
function fromUserPoolAddOnsType(input?: UserPoolAddOnsType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toUserPoolAddOnsType(root: JSONValue): UserPoolAddOnsType {
  return prt.readObj({
    required: {
      "AdvancedSecurityMode": toAdvancedSecurityModeType,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type AdvancedSecurityModeType =
| "OFF"
| "AUDIT"
| "ENFORCED"
;

function toAdvancedSecurityModeType(root: JSONValue): AdvancedSecurityModeType | null {
  return ( false
    || root == "OFF"
    || root == "AUDIT"
    || root == "ENFORCED"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface UsernameConfigurationType {
  CaseSensitive: boolean;
}
function fromUsernameConfigurationType(input?: UsernameConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toUsernameConfigurationType(root: JSONValue): UsernameConfigurationType {
  return prt.readObj({
    required: {
      "CaseSensitive": "b",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface AccountRecoverySettingType {
  RecoveryMechanisms?: RecoveryOptionType[] | null;
}
function fromAccountRecoverySettingType(input?: AccountRecoverySettingType | null): JSONValue {
  if (!input) return input;
  return {...input,
    RecoveryMechanisms: input["RecoveryMechanisms"]?.map(x => fromRecoveryOptionType(x)),
  }
}
function toAccountRecoverySettingType(root: JSONValue): AccountRecoverySettingType {
  return prt.readObj({
    required: {},
    optional: {
      "RecoveryMechanisms": [toRecoveryOptionType],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface RecoveryOptionType {
  Priority: number;
  Name: RecoveryOptionNameType;
}
function fromRecoveryOptionType(input?: RecoveryOptionType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRecoveryOptionType(root: JSONValue): RecoveryOptionType {
  return prt.readObj({
    required: {
      "Priority": "n",
      "Name": toRecoveryOptionNameType,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type RecoveryOptionNameType =
| "verified_email"
| "verified_phone_number"
| "admin_only"
;

function toRecoveryOptionNameType(root: JSONValue): RecoveryOptionNameType | null {
  return ( false
    || root == "verified_email"
    || root == "verified_phone_number"
    || root == "admin_only"
  ) ? root : null;
}

// refs: 5 - tags: input, named, interface, output
export interface TokenValidityUnitsType {
  AccessToken?: TimeUnitsType | null;
  IdToken?: TimeUnitsType | null;
  RefreshToken?: TimeUnitsType | null;
}
function fromTokenValidityUnitsType(input?: TokenValidityUnitsType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTokenValidityUnitsType(root: JSONValue): TokenValidityUnitsType {
  return prt.readObj({
    required: {},
    optional: {
      "AccessToken": toTimeUnitsType,
      "IdToken": toTimeUnitsType,
      "RefreshToken": toTimeUnitsType,
    },
  }, root);
}

// refs: 15 - tags: input, named, enum, output
export type TimeUnitsType =
| "seconds"
| "minutes"
| "hours"
| "days"
;

function toTimeUnitsType(root: JSONValue): TimeUnitsType | null {
  return ( false
    || root == "seconds"
    || root == "minutes"
    || root == "hours"
    || root == "days"
  ) ? root : null;
}

// refs: 5 - tags: input, named, enum, output
export type ExplicitAuthFlowsType =
| "ADMIN_NO_SRP_AUTH"
| "CUSTOM_AUTH_FLOW_ONLY"
| "USER_PASSWORD_AUTH"
| "ALLOW_ADMIN_USER_PASSWORD_AUTH"
| "ALLOW_CUSTOM_AUTH"
| "ALLOW_USER_PASSWORD_AUTH"
| "ALLOW_USER_SRP_AUTH"
| "ALLOW_REFRESH_TOKEN_AUTH"
;

function toExplicitAuthFlowsType(root: JSONValue): ExplicitAuthFlowsType | null {
  return ( false
    || root == "ADMIN_NO_SRP_AUTH"
    || root == "CUSTOM_AUTH_FLOW_ONLY"
    || root == "USER_PASSWORD_AUTH"
    || root == "ALLOW_ADMIN_USER_PASSWORD_AUTH"
    || root == "ALLOW_CUSTOM_AUTH"
    || root == "ALLOW_USER_PASSWORD_AUTH"
    || root == "ALLOW_USER_SRP_AUTH"
    || root == "ALLOW_REFRESH_TOKEN_AUTH"
  ) ? root : null;
}

// refs: 5 - tags: input, named, enum, output
export type OAuthFlowType =
| "code"
| "implicit"
| "client_credentials"
;

function toOAuthFlowType(root: JSONValue): OAuthFlowType | null {
  return ( false
    || root == "code"
    || root == "implicit"
    || root == "client_credentials"
  ) ? root : null;
}

// refs: 5 - tags: input, named, interface, output
export interface AnalyticsConfigurationType {
  ApplicationId?: string | null;
  ApplicationArn?: string | null;
  RoleArn?: string | null;
  ExternalId?: string | null;
  UserDataShared?: boolean | null;
}
function fromAnalyticsConfigurationType(input?: AnalyticsConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toAnalyticsConfigurationType(root: JSONValue): AnalyticsConfigurationType {
  return prt.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "ApplicationArn": "s",
      "RoleArn": "s",
      "ExternalId": "s",
      "UserDataShared": "b",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type PreventUserExistenceErrorTypes =
| "LEGACY"
| "ENABLED"
;

function toPreventUserExistenceErrorTypes(root: JSONValue): PreventUserExistenceErrorTypes | null {
  return ( false
    || root == "LEGACY"
    || root == "ENABLED"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface CustomDomainConfigType {
  CertificateArn: string;
}
function fromCustomDomainConfigType(input?: CustomDomainConfigType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCustomDomainConfigType(root: JSONValue): CustomDomainConfigType {
  return prt.readObj({
    required: {
      "CertificateArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CompromisedCredentialsRiskConfigurationType {
  EventFilter?: EventFilterType[] | null;
  Actions: CompromisedCredentialsActionsType;
}
function fromCompromisedCredentialsRiskConfigurationType(input?: CompromisedCredentialsRiskConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
    Actions: fromCompromisedCredentialsActionsType(input["Actions"]),
  }
}
function toCompromisedCredentialsRiskConfigurationType(root: JSONValue): CompromisedCredentialsRiskConfigurationType {
  return prt.readObj({
    required: {
      "Actions": toCompromisedCredentialsActionsType,
    },
    optional: {
      "EventFilter": [toEventFilterType],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type EventFilterType =
| "SIGN_IN"
| "PASSWORD_CHANGE"
| "SIGN_UP"
;

function toEventFilterType(root: JSONValue): EventFilterType | null {
  return ( false
    || root == "SIGN_IN"
    || root == "PASSWORD_CHANGE"
    || root == "SIGN_UP"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface CompromisedCredentialsActionsType {
  EventAction: CompromisedCredentialsEventActionType;
}
function fromCompromisedCredentialsActionsType(input?: CompromisedCredentialsActionsType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCompromisedCredentialsActionsType(root: JSONValue): CompromisedCredentialsActionsType {
  return prt.readObj({
    required: {
      "EventAction": toCompromisedCredentialsEventActionType,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type CompromisedCredentialsEventActionType =
| "BLOCK"
| "NO_ACTION"
;

function toCompromisedCredentialsEventActionType(root: JSONValue): CompromisedCredentialsEventActionType | null {
  return ( false
    || root == "BLOCK"
    || root == "NO_ACTION"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface AccountTakeoverRiskConfigurationType {
  NotifyConfiguration?: NotifyConfigurationType | null;
  Actions: AccountTakeoverActionsType;
}
function fromAccountTakeoverRiskConfigurationType(input?: AccountTakeoverRiskConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
    NotifyConfiguration: fromNotifyConfigurationType(input["NotifyConfiguration"]),
    Actions: fromAccountTakeoverActionsType(input["Actions"]),
  }
}
function toAccountTakeoverRiskConfigurationType(root: JSONValue): AccountTakeoverRiskConfigurationType {
  return prt.readObj({
    required: {
      "Actions": toAccountTakeoverActionsType,
    },
    optional: {
      "NotifyConfiguration": toNotifyConfigurationType,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface NotifyConfigurationType {
  From?: string | null;
  ReplyTo?: string | null;
  SourceArn: string;
  BlockEmail?: NotifyEmailType | null;
  NoActionEmail?: NotifyEmailType | null;
  MfaEmail?: NotifyEmailType | null;
}
function fromNotifyConfigurationType(input?: NotifyConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
    BlockEmail: fromNotifyEmailType(input["BlockEmail"]),
    NoActionEmail: fromNotifyEmailType(input["NoActionEmail"]),
    MfaEmail: fromNotifyEmailType(input["MfaEmail"]),
  }
}
function toNotifyConfigurationType(root: JSONValue): NotifyConfigurationType {
  return prt.readObj({
    required: {
      "SourceArn": "s",
    },
    optional: {
      "From": "s",
      "ReplyTo": "s",
      "BlockEmail": toNotifyEmailType,
      "NoActionEmail": toNotifyEmailType,
      "MfaEmail": toNotifyEmailType,
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface NotifyEmailType {
  Subject: string;
  HtmlBody?: string | null;
  TextBody?: string | null;
}
function fromNotifyEmailType(input?: NotifyEmailType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toNotifyEmailType(root: JSONValue): NotifyEmailType {
  return prt.readObj({
    required: {
      "Subject": "s",
    },
    optional: {
      "HtmlBody": "s",
      "TextBody": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AccountTakeoverActionsType {
  LowAction?: AccountTakeoverActionType | null;
  MediumAction?: AccountTakeoverActionType | null;
  HighAction?: AccountTakeoverActionType | null;
}
function fromAccountTakeoverActionsType(input?: AccountTakeoverActionsType | null): JSONValue {
  if (!input) return input;
  return {...input,
    LowAction: fromAccountTakeoverActionType(input["LowAction"]),
    MediumAction: fromAccountTakeoverActionType(input["MediumAction"]),
    HighAction: fromAccountTakeoverActionType(input["HighAction"]),
  }
}
function toAccountTakeoverActionsType(root: JSONValue): AccountTakeoverActionsType {
  return prt.readObj({
    required: {},
    optional: {
      "LowAction": toAccountTakeoverActionType,
      "MediumAction": toAccountTakeoverActionType,
      "HighAction": toAccountTakeoverActionType,
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface AccountTakeoverActionType {
  Notify: boolean;
  EventAction: AccountTakeoverEventActionType;
}
function fromAccountTakeoverActionType(input?: AccountTakeoverActionType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toAccountTakeoverActionType(root: JSONValue): AccountTakeoverActionType {
  return prt.readObj({
    required: {
      "Notify": "b",
      "EventAction": toAccountTakeoverEventActionType,
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type AccountTakeoverEventActionType =
| "BLOCK"
| "MFA_IF_CONFIGURED"
| "MFA_REQUIRED"
| "NO_ACTION"
;

function toAccountTakeoverEventActionType(root: JSONValue): AccountTakeoverEventActionType | null {
  return ( false
    || root == "BLOCK"
    || root == "MFA_IF_CONFIGURED"
    || root == "MFA_REQUIRED"
    || root == "NO_ACTION"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface RiskExceptionConfigurationType {
  BlockedIPRangeList?: string[] | null;
  SkippedIPRangeList?: string[] | null;
}
function fromRiskExceptionConfigurationType(input?: RiskExceptionConfigurationType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRiskExceptionConfigurationType(root: JSONValue): RiskExceptionConfigurationType {
  return prt.readObj({
    required: {},
    optional: {
      "BlockedIPRangeList": ["s"],
      "SkippedIPRangeList": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SmsMfaConfigType {
  SmsAuthenticationMessage?: string | null;
  SmsConfiguration?: SmsConfigurationType | null;
}
function fromSmsMfaConfigType(input?: SmsMfaConfigType | null): JSONValue {
  if (!input) return input;
  return {...input,
    SmsConfiguration: fromSmsConfigurationType(input["SmsConfiguration"]),
  }
}
function toSmsMfaConfigType(root: JSONValue): SmsMfaConfigType {
  return prt.readObj({
    required: {},
    optional: {
      "SmsAuthenticationMessage": "s",
      "SmsConfiguration": toSmsConfigurationType,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SoftwareTokenMfaConfigType {
  Enabled?: boolean | null;
}
function fromSoftwareTokenMfaConfigType(input?: SoftwareTokenMfaConfigType | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSoftwareTokenMfaConfigType(root: JSONValue): SoftwareTokenMfaConfigType {
  return prt.readObj({
    required: {},
    optional: {
      "Enabled": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface UserType {
  Username?: string | null;
  Attributes?: AttributeType[] | null;
  UserCreateDate?: Date | number | null;
  UserLastModifiedDate?: Date | number | null;
  Enabled?: boolean | null;
  UserStatus?: UserStatusType | null;
  MFAOptions?: MFAOptionType[] | null;
}
function toUserType(root: JSONValue): UserType {
  return prt.readObj({
    required: {},
    optional: {
      "Username": "s",
      "Attributes": [toAttributeType],
      "UserCreateDate": "d",
      "UserLastModifiedDate": "d",
      "Enabled": "b",
      "UserStatus": toUserStatusType,
      "MFAOptions": [toMFAOptionType],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type UserStatusType =
| "UNCONFIRMED"
| "CONFIRMED"
| "ARCHIVED"
| "COMPROMISED"
| "UNKNOWN"
| "RESET_REQUIRED"
| "FORCE_CHANGE_PASSWORD"
;
function toUserStatusType(root: JSONValue): UserStatusType | null {
  return ( false
    || root == "UNCONFIRMED"
    || root == "CONFIRMED"
    || root == "ARCHIVED"
    || root == "COMPROMISED"
    || root == "UNKNOWN"
    || root == "RESET_REQUIRED"
    || root == "FORCE_CHANGE_PASSWORD"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface DeviceType {
  DeviceKey?: string | null;
  DeviceAttributes?: AttributeType[] | null;
  DeviceCreateDate?: Date | number | null;
  DeviceLastModifiedDate?: Date | number | null;
  DeviceLastAuthenticatedDate?: Date | number | null;
}
function toDeviceType(root: JSONValue): DeviceType {
  return prt.readObj({
    required: {},
    optional: {
      "DeviceKey": "s",
      "DeviceAttributes": [toAttributeType],
      "DeviceCreateDate": "d",
      "DeviceLastModifiedDate": "d",
      "DeviceLastAuthenticatedDate": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface AuthenticationResultType {
  AccessToken?: string | null;
  ExpiresIn?: number | null;
  TokenType?: string | null;
  RefreshToken?: string | null;
  IdToken?: string | null;
  NewDeviceMetadata?: NewDeviceMetadataType | null;
}
function toAuthenticationResultType(root: JSONValue): AuthenticationResultType {
  return prt.readObj({
    required: {},
    optional: {
      "AccessToken": "s",
      "ExpiresIn": "n",
      "TokenType": "s",
      "RefreshToken": "s",
      "IdToken": "s",
      "NewDeviceMetadata": toNewDeviceMetadataType,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface NewDeviceMetadataType {
  DeviceKey?: string | null;
  DeviceGroupKey?: string | null;
}
function toNewDeviceMetadataType(root: JSONValue): NewDeviceMetadataType {
  return prt.readObj({
    required: {},
    optional: {
      "DeviceKey": "s",
      "DeviceGroupKey": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface GroupType {
  GroupName?: string | null;
  UserPoolId?: string | null;
  Description?: string | null;
  RoleArn?: string | null;
  Precedence?: number | null;
  LastModifiedDate?: Date | number | null;
  CreationDate?: Date | number | null;
}
function toGroupType(root: JSONValue): GroupType {
  return prt.readObj({
    required: {},
    optional: {
      "GroupName": "s",
      "UserPoolId": "s",
      "Description": "s",
      "RoleArn": "s",
      "Precedence": "n",
      "LastModifiedDate": "d",
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuthEventType {
  EventId?: string | null;
  EventType?: EventType | null;
  CreationDate?: Date | number | null;
  EventResponse?: EventResponseType | null;
  EventRisk?: EventRiskType | null;
  ChallengeResponses?: ChallengeResponseType[] | null;
  EventContextData?: EventContextDataType | null;
  EventFeedback?: EventFeedbackType | null;
}
function toAuthEventType(root: JSONValue): AuthEventType {
  return prt.readObj({
    required: {},
    optional: {
      "EventId": "s",
      "EventType": toEventType,
      "CreationDate": "d",
      "EventResponse": toEventResponseType,
      "EventRisk": toEventRiskType,
      "ChallengeResponses": [toChallengeResponseType],
      "EventContextData": toEventContextDataType,
      "EventFeedback": toEventFeedbackType,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EventType =
| "SignIn"
| "SignUp"
| "ForgotPassword"
;
function toEventType(root: JSONValue): EventType | null {
  return ( false
    || root == "SignIn"
    || root == "SignUp"
    || root == "ForgotPassword"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type EventResponseType =
| "Success"
| "Failure"
;
function toEventResponseType(root: JSONValue): EventResponseType | null {
  return ( false
    || root == "Success"
    || root == "Failure"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface EventRiskType {
  RiskDecision?: RiskDecisionType | null;
  RiskLevel?: RiskLevelType | null;
  CompromisedCredentialsDetected?: boolean | null;
}
function toEventRiskType(root: JSONValue): EventRiskType {
  return prt.readObj({
    required: {},
    optional: {
      "RiskDecision": toRiskDecisionType,
      "RiskLevel": toRiskLevelType,
      "CompromisedCredentialsDetected": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RiskDecisionType =
| "NoRisk"
| "AccountTakeover"
| "Block"
;
function toRiskDecisionType(root: JSONValue): RiskDecisionType | null {
  return ( false
    || root == "NoRisk"
    || root == "AccountTakeover"
    || root == "Block"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type RiskLevelType =
| "Low"
| "Medium"
| "High"
;
function toRiskLevelType(root: JSONValue): RiskLevelType | null {
  return ( false
    || root == "Low"
    || root == "Medium"
    || root == "High"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ChallengeResponseType {
  ChallengeName?: ChallengeName | null;
  ChallengeResponse?: ChallengeResponse | null;
}
function toChallengeResponseType(root: JSONValue): ChallengeResponseType {
  return prt.readObj({
    required: {},
    optional: {
      "ChallengeName": toChallengeName,
      "ChallengeResponse": toChallengeResponse,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ChallengeName =
| "Password"
| "Mfa"
;
function toChallengeName(root: JSONValue): ChallengeName | null {
  return ( false
    || root == "Password"
    || root == "Mfa"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type ChallengeResponse =
| "Success"
| "Failure"
;
function toChallengeResponse(root: JSONValue): ChallengeResponse | null {
  return ( false
    || root == "Success"
    || root == "Failure"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface EventContextDataType {
  IpAddress?: string | null;
  DeviceName?: string | null;
  Timezone?: string | null;
  City?: string | null;
  Country?: string | null;
}
function toEventContextDataType(root: JSONValue): EventContextDataType {
  return prt.readObj({
    required: {},
    optional: {
      "IpAddress": "s",
      "DeviceName": "s",
      "Timezone": "s",
      "City": "s",
      "Country": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventFeedbackType {
  FeedbackValue: FeedbackValueType;
  Provider: string;
  FeedbackDate?: Date | number | null;
}
function toEventFeedbackType(root: JSONValue): EventFeedbackType {
  return prt.readObj({
    required: {
      "FeedbackValue": toFeedbackValueType,
      "Provider": "s",
    },
    optional: {
      "FeedbackDate": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface IdentityProviderType {
  UserPoolId?: string | null;
  ProviderName?: string | null;
  ProviderType?: IdentityProviderTypeType | null;
  ProviderDetails?: { [key: string]: string } | null;
  AttributeMapping?: { [key: string]: string } | null;
  IdpIdentifiers?: string[] | null;
  LastModifiedDate?: Date | number | null;
  CreationDate?: Date | number | null;
}
function toIdentityProviderType(root: JSONValue): IdentityProviderType {
  return prt.readObj({
    required: {},
    optional: {
      "UserPoolId": "s",
      "ProviderName": "s",
      "ProviderType": toIdentityProviderTypeType,
      "ProviderDetails": x => prt.readMap(String, String, x),
      "AttributeMapping": x => prt.readMap(String, String, x),
      "IdpIdentifiers": ["s"],
      "LastModifiedDate": "d",
      "CreationDate": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ResourceServerType {
  UserPoolId?: string | null;
  Identifier?: string | null;
  Name?: string | null;
  Scopes?: ResourceServerScopeType[] | null;
}
function toResourceServerType(root: JSONValue): ResourceServerType {
  return prt.readObj({
    required: {},
    optional: {
      "UserPoolId": "s",
      "Identifier": "s",
      "Name": "s",
      "Scopes": [toResourceServerScopeType],
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface UserImportJobType {
  JobName?: string | null;
  JobId?: string | null;
  UserPoolId?: string | null;
  PreSignedUrl?: string | null;
  CreationDate?: Date | number | null;
  StartDate?: Date | number | null;
  CompletionDate?: Date | number | null;
  Status?: UserImportJobStatusType | null;
  CloudWatchLogsRoleArn?: string | null;
  ImportedUsers?: number | null;
  SkippedUsers?: number | null;
  FailedUsers?: number | null;
  CompletionMessage?: string | null;
}
function toUserImportJobType(root: JSONValue): UserImportJobType {
  return prt.readObj({
    required: {},
    optional: {
      "JobName": "s",
      "JobId": "s",
      "UserPoolId": "s",
      "PreSignedUrl": "s",
      "CreationDate": "d",
      "StartDate": "d",
      "CompletionDate": "d",
      "Status": toUserImportJobStatusType,
      "CloudWatchLogsRoleArn": "s",
      "ImportedUsers": "n",
      "SkippedUsers": "n",
      "FailedUsers": "n",
      "CompletionMessage": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type UserImportJobStatusType =
| "Created"
| "Pending"
| "InProgress"
| "Stopping"
| "Expired"
| "Stopped"
| "Failed"
| "Succeeded"
;
function toUserImportJobStatusType(root: JSONValue): UserImportJobStatusType | null {
  return ( false
    || root == "Created"
    || root == "Pending"
    || root == "InProgress"
    || root == "Stopping"
    || root == "Expired"
    || root == "Stopped"
    || root == "Failed"
    || root == "Succeeded"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface UserPoolType {
  Id?: string | null;
  Name?: string | null;
  Policies?: UserPoolPolicyType | null;
  LambdaConfig?: LambdaConfigType | null;
  Status?: StatusType | null;
  LastModifiedDate?: Date | number | null;
  CreationDate?: Date | number | null;
  SchemaAttributes?: SchemaAttributeType[] | null;
  AutoVerifiedAttributes?: VerifiedAttributeType[] | null;
  AliasAttributes?: AliasAttributeType[] | null;
  UsernameAttributes?: UsernameAttributeType[] | null;
  SmsVerificationMessage?: string | null;
  EmailVerificationMessage?: string | null;
  EmailVerificationSubject?: string | null;
  VerificationMessageTemplate?: VerificationMessageTemplateType | null;
  SmsAuthenticationMessage?: string | null;
  MfaConfiguration?: UserPoolMfaType | null;
  DeviceConfiguration?: DeviceConfigurationType | null;
  EstimatedNumberOfUsers?: number | null;
  EmailConfiguration?: EmailConfigurationType | null;
  SmsConfiguration?: SmsConfigurationType | null;
  UserPoolTags?: { [key: string]: string } | null;
  SmsConfigurationFailure?: string | null;
  EmailConfigurationFailure?: string | null;
  Domain?: string | null;
  CustomDomain?: string | null;
  AdminCreateUserConfig?: AdminCreateUserConfigType | null;
  UserPoolAddOns?: UserPoolAddOnsType | null;
  UsernameConfiguration?: UsernameConfigurationType | null;
  Arn?: string | null;
  AccountRecoverySetting?: AccountRecoverySettingType | null;
}
function toUserPoolType(root: JSONValue): UserPoolType {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Policies": toUserPoolPolicyType,
      "LambdaConfig": toLambdaConfigType,
      "Status": toStatusType,
      "LastModifiedDate": "d",
      "CreationDate": "d",
      "SchemaAttributes": [toSchemaAttributeType],
      "AutoVerifiedAttributes": [toVerifiedAttributeType],
      "AliasAttributes": [toAliasAttributeType],
      "UsernameAttributes": [toUsernameAttributeType],
      "SmsVerificationMessage": "s",
      "EmailVerificationMessage": "s",
      "EmailVerificationSubject": "s",
      "VerificationMessageTemplate": toVerificationMessageTemplateType,
      "SmsAuthenticationMessage": "s",
      "MfaConfiguration": toUserPoolMfaType,
      "DeviceConfiguration": toDeviceConfigurationType,
      "EstimatedNumberOfUsers": "n",
      "EmailConfiguration": toEmailConfigurationType,
      "SmsConfiguration": toSmsConfigurationType,
      "UserPoolTags": x => prt.readMap(String, String, x),
      "SmsConfigurationFailure": "s",
      "EmailConfigurationFailure": "s",
      "Domain": "s",
      "CustomDomain": "s",
      "AdminCreateUserConfig": toAdminCreateUserConfigType,
      "UserPoolAddOns": toUserPoolAddOnsType,
      "UsernameConfiguration": toUsernameConfigurationType,
      "Arn": "s",
      "AccountRecoverySetting": toAccountRecoverySettingType,
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type StatusType =
| "Enabled"
| "Disabled"
;
function toStatusType(root: JSONValue): StatusType | null {
  return ( false
    || root == "Enabled"
    || root == "Disabled"
  ) ? root : null;
}

// refs: 3 - tags: output, named, interface
export interface UserPoolClientType {
  UserPoolId?: string | null;
  ClientName?: string | null;
  ClientId?: string | null;
  ClientSecret?: string | null;
  LastModifiedDate?: Date | number | null;
  CreationDate?: Date | number | null;
  RefreshTokenValidity?: number | null;
  AccessTokenValidity?: number | null;
  IdTokenValidity?: number | null;
  TokenValidityUnits?: TokenValidityUnitsType | null;
  ReadAttributes?: string[] | null;
  WriteAttributes?: string[] | null;
  ExplicitAuthFlows?: ExplicitAuthFlowsType[] | null;
  SupportedIdentityProviders?: string[] | null;
  CallbackURLs?: string[] | null;
  LogoutURLs?: string[] | null;
  DefaultRedirectURI?: string | null;
  AllowedOAuthFlows?: OAuthFlowType[] | null;
  AllowedOAuthScopes?: string[] | null;
  AllowedOAuthFlowsUserPoolClient?: boolean | null;
  AnalyticsConfiguration?: AnalyticsConfigurationType | null;
  PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | null;
}
function toUserPoolClientType(root: JSONValue): UserPoolClientType {
  return prt.readObj({
    required: {},
    optional: {
      "UserPoolId": "s",
      "ClientName": "s",
      "ClientId": "s",
      "ClientSecret": "s",
      "LastModifiedDate": "d",
      "CreationDate": "d",
      "RefreshTokenValidity": "n",
      "AccessTokenValidity": "n",
      "IdTokenValidity": "n",
      "TokenValidityUnits": toTokenValidityUnitsType,
      "ReadAttributes": ["s"],
      "WriteAttributes": ["s"],
      "ExplicitAuthFlows": [toExplicitAuthFlowsType],
      "SupportedIdentityProviders": ["s"],
      "CallbackURLs": ["s"],
      "LogoutURLs": ["s"],
      "DefaultRedirectURI": "s",
      "AllowedOAuthFlows": [toOAuthFlowType],
      "AllowedOAuthScopes": ["s"],
      "AllowedOAuthFlowsUserPoolClient": "b",
      "AnalyticsConfiguration": toAnalyticsConfigurationType,
      "PreventUserExistenceErrors": toPreventUserExistenceErrorTypes,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RiskConfigurationType {
  UserPoolId?: string | null;
  ClientId?: string | null;
  CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType | null;
  AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType | null;
  RiskExceptionConfiguration?: RiskExceptionConfigurationType | null;
  LastModifiedDate?: Date | number | null;
}
function toRiskConfigurationType(root: JSONValue): RiskConfigurationType {
  return prt.readObj({
    required: {},
    optional: {
      "UserPoolId": "s",
      "ClientId": "s",
      "CompromisedCredentialsRiskConfiguration": toCompromisedCredentialsRiskConfigurationType,
      "AccountTakeoverRiskConfiguration": toAccountTakeoverRiskConfigurationType,
      "RiskExceptionConfiguration": toRiskExceptionConfigurationType,
      "LastModifiedDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DomainDescriptionType {
  UserPoolId?: string | null;
  AWSAccountId?: string | null;
  Domain?: string | null;
  S3Bucket?: string | null;
  CloudFrontDistribution?: string | null;
  Version?: string | null;
  Status?: DomainStatusType | null;
  CustomDomainConfig?: CustomDomainConfigType | null;
}
function toDomainDescriptionType(root: JSONValue): DomainDescriptionType {
  return prt.readObj({
    required: {},
    optional: {
      "UserPoolId": "s",
      "AWSAccountId": "s",
      "Domain": "s",
      "S3Bucket": "s",
      "CloudFrontDistribution": "s",
      "Version": "s",
      "Status": toDomainStatusType,
      "CustomDomainConfig": toCustomDomainConfigType,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DomainStatusType =
| "CREATING"
| "DELETING"
| "UPDATING"
| "ACTIVE"
| "FAILED"
;
function toDomainStatusType(root: JSONValue): DomainStatusType | null {
  return ( false
    || root == "CREATING"
    || root == "DELETING"
    || root == "UPDATING"
    || root == "ACTIVE"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 5 - tags: output, named, interface
export interface CodeDeliveryDetailsType {
  Destination?: string | null;
  DeliveryMedium?: DeliveryMediumType | null;
  AttributeName?: string | null;
}
function toCodeDeliveryDetailsType(root: JSONValue): CodeDeliveryDetailsType {
  return prt.readObj({
    required: {},
    optional: {
      "Destination": "s",
      "DeliveryMedium": toDeliveryMediumType,
      "AttributeName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface UICustomizationType {
  UserPoolId?: string | null;
  ClientId?: string | null;
  ImageUrl?: string | null;
  CSS?: string | null;
  CSSVersion?: string | null;
  LastModifiedDate?: Date | number | null;
  CreationDate?: Date | number | null;
}
function toUICustomizationType(root: JSONValue): UICustomizationType {
  return prt.readObj({
    required: {},
    optional: {
      "UserPoolId": "s",
      "ClientId": "s",
      "ImageUrl": "s",
      "CSS": "s",
      "CSSVersion": "s",
      "LastModifiedDate": "d",
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProviderDescription {
  ProviderName?: string | null;
  ProviderType?: IdentityProviderTypeType | null;
  LastModifiedDate?: Date | number | null;
  CreationDate?: Date | number | null;
}
function toProviderDescription(root: JSONValue): ProviderDescription {
  return prt.readObj({
    required: {},
    optional: {
      "ProviderName": "s",
      "ProviderType": toIdentityProviderTypeType,
      "LastModifiedDate": "d",
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserPoolClientDescription {
  ClientId?: string | null;
  UserPoolId?: string | null;
  ClientName?: string | null;
}
function toUserPoolClientDescription(root: JSONValue): UserPoolClientDescription {
  return prt.readObj({
    required: {},
    optional: {
      "ClientId": "s",
      "UserPoolId": "s",
      "ClientName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserPoolDescriptionType {
  Id?: string | null;
  Name?: string | null;
  LambdaConfig?: LambdaConfigType | null;
  Status?: StatusType | null;
  LastModifiedDate?: Date | number | null;
  CreationDate?: Date | number | null;
}
function toUserPoolDescriptionType(root: JSONValue): UserPoolDescriptionType {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "LambdaConfig": toLambdaConfigType,
      "Status": toStatusType,
      "LastModifiedDate": "d",
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type VerifySoftwareTokenResponseType =
| "SUCCESS"
| "ERROR"
;
function toVerifySoftwareTokenResponseType(root: JSONValue): VerifySoftwareTokenResponseType | null {
  return ( false
    || root == "SUCCESS"
    || root == "ERROR"
  ) ? root : null;
}
