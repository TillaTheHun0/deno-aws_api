// Autogenerated API client for: Amazon Cognito Identity

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CognitoIdentity {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CognitoIdentity.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-06-30",
    "endpointPrefix": "cognito-identity",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Cognito Identity",
    "serviceId": "Cognito Identity",
    "signatureVersion": "v4",
    "targetPrefix": "AWSCognitoIdentityService",
    "uid": "cognito-identity-2014-06-30"
  };

  async createIdentityPool(
    {abortSignal, ...params}: RequestConfig & CreateIdentityPoolInput,
  ): Promise<IdentityPool> {
    const body: jsonP.JSONObject = {
      IdentityPoolName: params["IdentityPoolName"],
      AllowUnauthenticatedIdentities: params["AllowUnauthenticatedIdentities"],
      AllowClassicFlow: params["AllowClassicFlow"],
      SupportedLoginProviders: params["SupportedLoginProviders"],
      DeveloperProviderName: params["DeveloperProviderName"],
      OpenIdConnectProviderARNs: params["OpenIdConnectProviderARNs"],
      CognitoIdentityProviders: params["CognitoIdentityProviders"]?.map(x => fromCognitoIdentityProvider(x)),
      SamlProviderARNs: params["SamlProviderARNs"],
      IdentityPoolTags: params["IdentityPoolTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIdentityPool",
    });
    return toIdentityPool(await resp.json());
  }

  async deleteIdentities(
    {abortSignal, ...params}: RequestConfig & DeleteIdentitiesInput,
  ): Promise<DeleteIdentitiesResponse> {
    const body: jsonP.JSONObject = {
      IdentityIdsToDelete: params["IdentityIdsToDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIdentities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UnprocessedIdentityIds": [toUnprocessedIdentityId],
      },
    }, await resp.json());
  }

  async deleteIdentityPool(
    {abortSignal, ...params}: RequestConfig & DeleteIdentityPoolInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIdentityPool",
    });
  }

  async describeIdentity(
    {abortSignal, ...params}: RequestConfig & DescribeIdentityInput,
  ): Promise<IdentityDescription> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIdentity",
    });
    return toIdentityDescription(await resp.json());
  }

  async describeIdentityPool(
    {abortSignal, ...params}: RequestConfig & DescribeIdentityPoolInput,
  ): Promise<IdentityPool> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIdentityPool",
    });
    return toIdentityPool(await resp.json());
  }

  async getCredentialsForIdentity(
    {abortSignal, ...params}: RequestConfig & GetCredentialsForIdentityInput,
  ): Promise<GetCredentialsForIdentityResponse> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
      CustomRoleArn: params["CustomRoleArn"],
    };
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "GetCredentialsForIdentity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "Credentials": toCredentials,
      },
    }, await resp.json());
  }

  async getId(
    {abortSignal, ...params}: RequestConfig & GetIdInput,
  ): Promise<GetIdResponse> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
      IdentityPoolId: params["IdentityPoolId"],
      Logins: params["Logins"],
    };
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "GetId",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
      },
    }, await resp.json());
  }

  async getIdentityPoolRoles(
    {abortSignal, ...params}: RequestConfig & GetIdentityPoolRolesInput,
  ): Promise<GetIdentityPoolRolesResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIdentityPoolRoles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "Roles": x => jsonP.readMap(String, String, x),
        "RoleMappings": x => jsonP.readMap(String, toRoleMapping, x),
      },
    }, await resp.json());
  }

  async getOpenIdToken(
    {abortSignal, ...params}: RequestConfig & GetOpenIdTokenInput,
  ): Promise<GetOpenIdTokenResponse> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
    };
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "GetOpenIdToken",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "Token": "s",
      },
    }, await resp.json());
  }

  async getOpenIdTokenForDeveloperIdentity(
    {abortSignal, ...params}: RequestConfig & GetOpenIdTokenForDeveloperIdentityInput,
  ): Promise<GetOpenIdTokenForDeveloperIdentityResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
      TokenDuration: params["TokenDuration"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOpenIdTokenForDeveloperIdentity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "Token": "s",
      },
    }, await resp.json());
  }

  async listIdentities(
    {abortSignal, ...params}: RequestConfig & ListIdentitiesInput,
  ): Promise<ListIdentitiesResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      HideDisabled: params["HideDisabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIdentities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "Identities": [toIdentityDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIdentityPools(
    {abortSignal, ...params}: RequestConfig & ListIdentityPoolsInput,
  ): Promise<ListIdentityPoolsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIdentityPools",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPools": [toIdentityPoolShortDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async lookupDeveloperIdentity(
    {abortSignal, ...params}: RequestConfig & LookupDeveloperIdentityInput,
  ): Promise<LookupDeveloperIdentityResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityId: params["IdentityId"],
      DeveloperUserIdentifier: params["DeveloperUserIdentifier"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "LookupDeveloperIdentity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "DeveloperUserIdentifierList": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async mergeDeveloperIdentities(
    {abortSignal, ...params}: RequestConfig & MergeDeveloperIdentitiesInput,
  ): Promise<MergeDeveloperIdentitiesResponse> {
    const body: jsonP.JSONObject = {
      SourceUserIdentifier: params["SourceUserIdentifier"],
      DestinationUserIdentifier: params["DestinationUserIdentifier"],
      DeveloperProviderName: params["DeveloperProviderName"],
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergeDeveloperIdentities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
      },
    }, await resp.json());
  }

  async setIdentityPoolRoles(
    {abortSignal, ...params}: RequestConfig & SetIdentityPoolRolesInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      Roles: params["Roles"],
      RoleMappings: jsonP.serializeMap(params["RoleMappings"], x => fromRoleMapping(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetIdentityPoolRoles",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async unlinkDeveloperIdentity(
    {abortSignal, ...params}: RequestConfig & UnlinkDeveloperIdentityInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      IdentityPoolId: params["IdentityPoolId"],
      DeveloperProviderName: params["DeveloperProviderName"],
      DeveloperUserIdentifier: params["DeveloperUserIdentifier"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnlinkDeveloperIdentity",
    });
  }

  async unlinkIdentity(
    {abortSignal, ...params}: RequestConfig & UnlinkIdentityInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
      LoginsToRemove: params["LoginsToRemove"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnlinkIdentity",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateIdentityPool(
    {abortSignal, ...params}: RequestConfig & IdentityPool,
  ): Promise<IdentityPool> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityPoolName: params["IdentityPoolName"],
      AllowUnauthenticatedIdentities: params["AllowUnauthenticatedIdentities"],
      AllowClassicFlow: params["AllowClassicFlow"],
      SupportedLoginProviders: params["SupportedLoginProviders"],
      DeveloperProviderName: params["DeveloperProviderName"],
      OpenIdConnectProviderARNs: params["OpenIdConnectProviderARNs"],
      CognitoIdentityProviders: params["CognitoIdentityProviders"]?.map(x => fromCognitoIdentityProvider(x)),
      SamlProviderARNs: params["SamlProviderARNs"],
      IdentityPoolTags: params["IdentityPoolTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIdentityPool",
    });
    return toIdentityPool(await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateIdentityPoolInput {
  IdentityPoolName: string;
  AllowUnauthenticatedIdentities: boolean;
  AllowClassicFlow?: boolean | null;
  SupportedLoginProviders?: { [key: string]: string | null | undefined } | null;
  DeveloperProviderName?: string | null;
  OpenIdConnectProviderARNs?: string[] | null;
  CognitoIdentityProviders?: CognitoIdentityProvider[] | null;
  SamlProviderARNs?: string[] | null;
  IdentityPoolTags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteIdentitiesInput {
  IdentityIdsToDelete: string[];
}

// refs: 1 - tags: named, input
export interface DeleteIdentityPoolInput {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface DescribeIdentityInput {
  IdentityId: string;
}

// refs: 1 - tags: named, input
export interface DescribeIdentityPoolInput {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface GetCredentialsForIdentityInput {
  IdentityId: string;
  Logins?: { [key: string]: string | null | undefined } | null;
  CustomRoleArn?: string | null;
}

// refs: 1 - tags: named, input
export interface GetIdInput {
  AccountId?: string | null;
  IdentityPoolId: string;
  Logins?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface GetIdentityPoolRolesInput {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface GetOpenIdTokenInput {
  IdentityId: string;
  Logins?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface GetOpenIdTokenForDeveloperIdentityInput {
  IdentityPoolId: string;
  IdentityId?: string | null;
  Logins: { [key: string]: string | null | undefined };
  TokenDuration?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIdentitiesInput {
  IdentityPoolId: string;
  MaxResults: number;
  NextToken?: string | null;
  HideDisabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListIdentityPoolsInput {
  MaxResults: number;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface LookupDeveloperIdentityInput {
  IdentityPoolId: string;
  IdentityId?: string | null;
  DeveloperUserIdentifier?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface MergeDeveloperIdentitiesInput {
  SourceUserIdentifier: string;
  DestinationUserIdentifier: string;
  DeveloperProviderName: string;
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface SetIdentityPoolRolesInput {
  IdentityPoolId: string;
  Roles: { [key: string]: string | null | undefined };
  RoleMappings?: { [key: string]: RoleMapping | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UnlinkDeveloperIdentityInput {
  IdentityId: string;
  IdentityPoolId: string;
  DeveloperProviderName: string;
  DeveloperUserIdentifier: string;
}

// refs: 1 - tags: named, input
export interface UnlinkIdentityInput {
  IdentityId: string;
  Logins: { [key: string]: string | null | undefined };
  LoginsToRemove: string[];
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 2 - tags: named, input, output
export interface IdentityPool {
  IdentityPoolId: string;
  IdentityPoolName: string;
  AllowUnauthenticatedIdentities: boolean;
  AllowClassicFlow?: boolean | null;
  SupportedLoginProviders?: { [key: string]: string | null | undefined } | null;
  DeveloperProviderName?: string | null;
  OpenIdConnectProviderARNs?: string[] | null;
  CognitoIdentityProviders?: CognitoIdentityProvider[] | null;
  SamlProviderARNs?: string[] | null;
  IdentityPoolTags?: { [key: string]: string | null | undefined } | null;
}
function fromIdentityPool(input?: IdentityPool | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IdentityPoolId: input["IdentityPoolId"],
    IdentityPoolName: input["IdentityPoolName"],
    AllowUnauthenticatedIdentities: input["AllowUnauthenticatedIdentities"],
    AllowClassicFlow: input["AllowClassicFlow"],
    SupportedLoginProviders: input["SupportedLoginProviders"],
    DeveloperProviderName: input["DeveloperProviderName"],
    OpenIdConnectProviderARNs: input["OpenIdConnectProviderARNs"],
    CognitoIdentityProviders: input["CognitoIdentityProviders"]?.map(x => fromCognitoIdentityProvider(x)),
    SamlProviderARNs: input["SamlProviderARNs"],
    IdentityPoolTags: input["IdentityPoolTags"],
  }
}
function toIdentityPool(root: jsonP.JSONValue): IdentityPool {
  return jsonP.readObj({
    required: {
      "IdentityPoolId": "s",
      "IdentityPoolName": "s",
      "AllowUnauthenticatedIdentities": "b",
    },
    optional: {
      "AllowClassicFlow": "b",
      "SupportedLoginProviders": x => jsonP.readMap(String, String, x),
      "DeveloperProviderName": "s",
      "OpenIdConnectProviderARNs": ["s"],
      "CognitoIdentityProviders": [toCognitoIdentityProvider],
      "SamlProviderARNs": ["s"],
      "IdentityPoolTags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface DeleteIdentitiesResponse {
  UnprocessedIdentityIds?: UnprocessedIdentityId[] | null;
}

// refs: 2 - tags: named, output, interface
export interface IdentityDescription {
  IdentityId?: string | null;
  Logins?: string[] | null;
  CreationDate?: Date | number | null;
  LastModifiedDate?: Date | number | null;
}
function toIdentityDescription(root: jsonP.JSONValue): IdentityDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "Logins": ["s"],
      "CreationDate": "d",
      "LastModifiedDate": "d",
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface GetCredentialsForIdentityResponse {
  IdentityId?: string | null;
  Credentials?: Credentials | null;
}

// refs: 1 - tags: named, output
export interface GetIdResponse {
  IdentityId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetIdentityPoolRolesResponse {
  IdentityPoolId?: string | null;
  Roles?: { [key: string]: string | null | undefined } | null;
  RoleMappings?: { [key: string]: RoleMapping | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetOpenIdTokenResponse {
  IdentityId?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOpenIdTokenForDeveloperIdentityResponse {
  IdentityId?: string | null;
  Token?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIdentitiesResponse {
  IdentityPoolId?: string | null;
  Identities?: IdentityDescription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIdentityPoolsResponse {
  IdentityPools?: IdentityPoolShortDescription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface LookupDeveloperIdentityResponse {
  IdentityId?: string | null;
  DeveloperUserIdentifierList?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface MergeDeveloperIdentitiesResponse {
  IdentityId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 3 - tags: input, named, interface, output
export interface CognitoIdentityProvider {
  ProviderName?: string | null;
  ClientId?: string | null;
  ServerSideTokenCheck?: boolean | null;
}
function fromCognitoIdentityProvider(input?: CognitoIdentityProvider | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ProviderName: input["ProviderName"],
    ClientId: input["ClientId"],
    ServerSideTokenCheck: input["ServerSideTokenCheck"],
  }
}
function toCognitoIdentityProvider(root: jsonP.JSONValue): CognitoIdentityProvider {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProviderName": "s",
      "ClientId": "s",
      "ServerSideTokenCheck": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface RoleMapping {
  Type: RoleMappingType;
  AmbiguousRoleResolution?: AmbiguousRoleResolutionType | null;
  RulesConfiguration?: RulesConfigurationType | null;
}
function fromRoleMapping(input?: RoleMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    AmbiguousRoleResolution: input["AmbiguousRoleResolution"],
    RulesConfiguration: fromRulesConfigurationType(input["RulesConfiguration"]),
  }
}
function toRoleMapping(root: jsonP.JSONValue): RoleMapping {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<RoleMappingType>(x),
    },
    optional: {
      "AmbiguousRoleResolution": (x: jsonP.JSONValue) => cmnP.readEnum<AmbiguousRoleResolutionType>(x),
      "RulesConfiguration": toRulesConfigurationType,
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type RoleMappingType =
| "Token"
| "Rules"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type AmbiguousRoleResolutionType =
| "AuthenticatedRole"
| "Deny"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface RulesConfigurationType {
  Rules: MappingRule[];
}
function fromRulesConfigurationType(input?: RulesConfigurationType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Rules: input["Rules"]?.map(x => fromMappingRule(x)),
  }
}
function toRulesConfigurationType(root: jsonP.JSONValue): RulesConfigurationType {
  return jsonP.readObj({
    required: {
      "Rules": [toMappingRule],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface MappingRule {
  Claim: string;
  MatchType: MappingRuleMatchType;
  Value: string;
  RoleARN: string;
}
function fromMappingRule(input?: MappingRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Claim: input["Claim"],
    MatchType: input["MatchType"],
    Value: input["Value"],
    RoleARN: input["RoleARN"],
  }
}
function toMappingRule(root: jsonP.JSONValue): MappingRule {
  return jsonP.readObj({
    required: {
      "Claim": "s",
      "MatchType": (x: jsonP.JSONValue) => cmnP.readEnum<MappingRuleMatchType>(x),
      "Value": "s",
      "RoleARN": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type MappingRuleMatchType =
| "Equals"
| "Contains"
| "StartsWith"
| "NotEqual"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface UnprocessedIdentityId {
  IdentityId?: string | null;
  ErrorCode?: ErrorCode | null;
}
function toUnprocessedIdentityId(root: jsonP.JSONValue): UnprocessedIdentityId {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ErrorCode =
| "AccessDenied"
| "InternalServerError"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Credentials {
  AccessKeyId?: string | null;
  SecretKey?: string | null;
  SessionToken?: string | null;
  Expiration?: Date | number | null;
}
function toCredentials(root: jsonP.JSONValue): Credentials {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessKeyId": "s",
      "SecretKey": "s",
      "SessionToken": "s",
      "Expiration": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IdentityPoolShortDescription {
  IdentityPoolId?: string | null;
  IdentityPoolName?: string | null;
}
function toIdentityPoolShortDescription(root: jsonP.JSONValue): IdentityPoolShortDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityPoolId": "s",
      "IdentityPoolName": "s",
    },
  }, root);
}
