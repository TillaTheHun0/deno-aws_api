// Autogenerated API client for: AWS Single Sign-On Admin

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class SSOAdmin {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SSOAdmin.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-07-20",
    "endpointPrefix": "sso",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "SSO Admin",
    "serviceFullName": "AWS Single Sign-On Admin",
    "serviceId": "SSO Admin",
    "signatureVersion": "v4",
    "signingName": "sso",
    "targetPrefix": "SWBExternalService",
    "uid": "sso-admin-2020-07-20"
  };

  async attachManagedPolicyToPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.AttachManagedPolicyToPermissionSetRequest,
  ): Promise<s.AttachManagedPolicyToPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
      ManagedPolicyArn: params["ManagedPolicyArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachManagedPolicyToPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAccountAssignment(
    {abortSignal, ...params}: RequestConfig & s.CreateAccountAssignmentRequest,
  ): Promise<s.CreateAccountAssignmentResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      TargetId: params["TargetId"],
      TargetType: params["TargetType"],
      PermissionSetArn: params["PermissionSetArn"],
      PrincipalType: params["PrincipalType"],
      PrincipalId: params["PrincipalId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccountAssignment",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountAssignmentCreationStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async createInstanceAccessControlAttributeConfiguration(
    {abortSignal, ...params}: RequestConfig & s.CreateInstanceAccessControlAttributeConfigurationRequest,
  ): Promise<s.CreateInstanceAccessControlAttributeConfigurationResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      InstanceAccessControlAttributeConfiguration: fromInstanceAccessControlAttributeConfiguration(params["InstanceAccessControlAttributeConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInstanceAccessControlAttributeConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.CreatePermissionSetRequest,
  ): Promise<s.CreatePermissionSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      InstanceArn: params["InstanceArn"],
      SessionDuration: params["SessionDuration"],
      RelayState: params["RelayState"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PermissionSet": toPermissionSet,
      },
    }, await resp.json());
  }

  async deleteAccountAssignment(
    {abortSignal, ...params}: RequestConfig & s.DeleteAccountAssignmentRequest,
  ): Promise<s.DeleteAccountAssignmentResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      TargetId: params["TargetId"],
      TargetType: params["TargetType"],
      PermissionSetArn: params["PermissionSetArn"],
      PrincipalType: params["PrincipalType"],
      PrincipalId: params["PrincipalId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAccountAssignment",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountAssignmentDeletionStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async deleteInlinePolicyFromPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteInlinePolicyFromPermissionSetRequest,
  ): Promise<s.DeleteInlinePolicyFromPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInlinePolicyFromPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteInstanceAccessControlAttributeConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteInstanceAccessControlAttributeConfigurationRequest,
  ): Promise<s.DeleteInstanceAccessControlAttributeConfigurationResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInstanceAccessControlAttributeConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePermissionSet(
    {abortSignal, ...params}: RequestConfig & s.DeletePermissionSetRequest,
  ): Promise<s.DeletePermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAccountAssignmentCreationStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeAccountAssignmentCreationStatusRequest,
  ): Promise<s.DescribeAccountAssignmentCreationStatusResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      AccountAssignmentCreationRequestId: params["AccountAssignmentCreationRequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountAssignmentCreationStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountAssignmentCreationStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async describeAccountAssignmentDeletionStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeAccountAssignmentDeletionStatusRequest,
  ): Promise<s.DescribeAccountAssignmentDeletionStatusResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      AccountAssignmentDeletionRequestId: params["AccountAssignmentDeletionRequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountAssignmentDeletionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountAssignmentDeletionStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async describeInstanceAccessControlAttributeConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeInstanceAccessControlAttributeConfigurationRequest,
  ): Promise<s.DescribeInstanceAccessControlAttributeConfigurationResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInstanceAccessControlAttributeConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.InstanceAccessControlAttributeConfigurationStatus>(x),
        "StatusReason": "s",
        "InstanceAccessControlAttributeConfiguration": toInstanceAccessControlAttributeConfiguration,
      },
    }, await resp.json());
  }

  async describePermissionSet(
    {abortSignal, ...params}: RequestConfig & s.DescribePermissionSetRequest,
  ): Promise<s.DescribePermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PermissionSet": toPermissionSet,
      },
    }, await resp.json());
  }

  async describePermissionSetProvisioningStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribePermissionSetProvisioningStatusRequest,
  ): Promise<s.DescribePermissionSetProvisioningStatusResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      ProvisionPermissionSetRequestId: params["ProvisionPermissionSetRequestId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePermissionSetProvisioningStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PermissionSetProvisioningStatus": toPermissionSetProvisioningStatus,
      },
    }, await resp.json());
  }

  async detachManagedPolicyFromPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.DetachManagedPolicyFromPermissionSetRequest,
  ): Promise<s.DetachManagedPolicyFromPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
      ManagedPolicyArn: params["ManagedPolicyArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachManagedPolicyFromPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getInlinePolicyForPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.GetInlinePolicyForPermissionSetRequest,
  ): Promise<s.GetInlinePolicyForPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInlinePolicyForPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InlinePolicy": "s",
      },
    }, await resp.json());
  }

  async listAccountAssignmentCreationStatus(
    {abortSignal, ...params}: RequestConfig & s.ListAccountAssignmentCreationStatusRequest,
  ): Promise<s.ListAccountAssignmentCreationStatusResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filter: fromOperationStatusFilter(params["Filter"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountAssignmentCreationStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountAssignmentsCreationStatus": [toAccountAssignmentOperationStatusMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountAssignmentDeletionStatus(
    {abortSignal, ...params}: RequestConfig & s.ListAccountAssignmentDeletionStatusRequest,
  ): Promise<s.ListAccountAssignmentDeletionStatusResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filter: fromOperationStatusFilter(params["Filter"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountAssignmentDeletionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountAssignmentsDeletionStatus": [toAccountAssignmentOperationStatusMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountAssignments(
    {abortSignal, ...params}: RequestConfig & s.ListAccountAssignmentsRequest,
  ): Promise<s.ListAccountAssignmentsResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      AccountId: params["AccountId"],
      PermissionSetArn: params["PermissionSetArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountAssignments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountAssignments": [toAccountAssignment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountsForProvisionedPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.ListAccountsForProvisionedPermissionSetRequest,
  ): Promise<s.ListAccountsForProvisionedPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
      ProvisioningStatus: params["ProvisioningStatus"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountsForProvisionedPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountIds": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstances(
    {abortSignal, ...params}: RequestConfig & s.ListInstancesRequest = {},
  ): Promise<s.ListInstancesResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInstances",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Instances": [toInstanceMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listManagedPoliciesInPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.ListManagedPoliciesInPermissionSetRequest,
  ): Promise<s.ListManagedPoliciesInPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListManagedPoliciesInPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AttachedManagedPolicies": [toAttachedManagedPolicy],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissionSetProvisioningStatus(
    {abortSignal, ...params}: RequestConfig & s.ListPermissionSetProvisioningStatusRequest,
  ): Promise<s.ListPermissionSetProvisioningStatusResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filter: fromOperationStatusFilter(params["Filter"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissionSetProvisioningStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PermissionSetsProvisioningStatus": [toPermissionSetProvisioningStatusMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissionSets(
    {abortSignal, ...params}: RequestConfig & s.ListPermissionSetsRequest,
  ): Promise<s.ListPermissionSetsResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissionSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PermissionSets": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissionSetsProvisionedToAccount(
    {abortSignal, ...params}: RequestConfig & s.ListPermissionSetsProvisionedToAccountRequest,
  ): Promise<s.ListPermissionSetsProvisionedToAccountResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      AccountId: params["AccountId"],
      ProvisioningStatus: params["ProvisioningStatus"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissionSetsProvisionedToAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "PermissionSets": ["s"],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      ResourceArn: params["ResourceArn"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async provisionPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.ProvisionPermissionSetRequest,
  ): Promise<s.ProvisionPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
      TargetId: params["TargetId"],
      TargetType: params["TargetType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ProvisionPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PermissionSetProvisioningStatus": toPermissionSetProvisioningStatus,
      },
    }, await resp.json());
  }

  async putInlinePolicyToPermissionSet(
    {abortSignal, ...params}: RequestConfig & s.PutInlinePolicyToPermissionSetRequest,
  ): Promise<s.PutInlinePolicyToPermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
      InlinePolicy: params["InlinePolicy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInlinePolicyToPermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateInstanceAccessControlAttributeConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateInstanceAccessControlAttributeConfigurationRequest,
  ): Promise<s.UpdateInstanceAccessControlAttributeConfigurationResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      InstanceAccessControlAttributeConfiguration: fromInstanceAccessControlAttributeConfiguration(params["InstanceAccessControlAttributeConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateInstanceAccessControlAttributeConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePermissionSet(
    {abortSignal, ...params}: RequestConfig & s.UpdatePermissionSetRequest,
  ): Promise<s.UpdatePermissionSetResponse> {
    const body: jsonP.JSONObject = {
      InstanceArn: params["InstanceArn"],
      PermissionSetArn: params["PermissionSetArn"],
      Description: params["Description"],
      SessionDuration: params["SessionDuration"],
      RelayState: params["RelayState"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePermissionSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromInstanceAccessControlAttributeConfiguration(input?: s.InstanceAccessControlAttributeConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccessControlAttributes: input["AccessControlAttributes"]?.map(x => fromAccessControlAttribute(x)),
  }
}
function toInstanceAccessControlAttributeConfiguration(root: jsonP.JSONValue): s.InstanceAccessControlAttributeConfiguration {
  return jsonP.readObj({
    required: {
      "AccessControlAttributes": [toAccessControlAttribute],
    },
    optional: {},
  }, root);
}

function fromAccessControlAttribute(input?: s.AccessControlAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: fromAccessControlAttributeValue(input["Value"]),
  }
}
function toAccessControlAttribute(root: jsonP.JSONValue): s.AccessControlAttribute {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": toAccessControlAttributeValue,
    },
    optional: {},
  }, root);
}

function fromAccessControlAttributeValue(input?: s.AccessControlAttributeValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Source: input["Source"],
  }
}
function toAccessControlAttributeValue(root: jsonP.JSONValue): s.AccessControlAttributeValue {
  return jsonP.readObj({
    required: {
      "Source": ["s"],
    },
    optional: {},
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

function fromOperationStatusFilter(input?: s.OperationStatusFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Status: input["Status"],
  }
}

function toAccountAssignmentOperationStatus(root: jsonP.JSONValue): s.AccountAssignmentOperationStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.StatusValues>(x),
      "RequestId": "s",
      "FailureReason": "s",
      "TargetId": "s",
      "TargetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.TargetType>(x),
      "PermissionSetArn": "s",
      "PrincipalType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PrincipalType>(x),
      "PrincipalId": "s",
      "CreatedDate": "d",
    },
  }, root);
}

function toPermissionSet(root: jsonP.JSONValue): s.PermissionSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "PermissionSetArn": "s",
      "Description": "s",
      "CreatedDate": "d",
      "SessionDuration": "s",
      "RelayState": "s",
    },
  }, root);
}

function toPermissionSetProvisioningStatus(root: jsonP.JSONValue): s.PermissionSetProvisioningStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.StatusValues>(x),
      "RequestId": "s",
      "AccountId": "s",
      "PermissionSetArn": "s",
      "FailureReason": "s",
      "CreatedDate": "d",
    },
  }, root);
}

function toAccountAssignmentOperationStatusMetadata(root: jsonP.JSONValue): s.AccountAssignmentOperationStatusMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.StatusValues>(x),
      "RequestId": "s",
      "CreatedDate": "d",
    },
  }, root);
}

function toAccountAssignment(root: jsonP.JSONValue): s.AccountAssignment {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "PermissionSetArn": "s",
      "PrincipalType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PrincipalType>(x),
      "PrincipalId": "s",
    },
  }, root);
}

function toInstanceMetadata(root: jsonP.JSONValue): s.InstanceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "InstanceArn": "s",
      "IdentityStoreId": "s",
    },
  }, root);
}

function toAttachedManagedPolicy(root: jsonP.JSONValue): s.AttachedManagedPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
    },
  }, root);
}

function toPermissionSetProvisioningStatusMetadata(root: jsonP.JSONValue): s.PermissionSetProvisioningStatusMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.StatusValues>(x),
      "RequestId": "s",
      "CreatedDate": "d",
    },
  }, root);
}
