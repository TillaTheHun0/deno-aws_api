// Autogenerated API client for: AWS IoT SiteWise

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class IoTSiteWise {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoTSiteWise.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-12-02",
    "endpointPrefix": "iotsitewise",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT SiteWise",
    "serviceId": "IoTSiteWise",
    "signatureVersion": "v4",
    "signingName": "iotsitewise",
    "uid": "iotsitewise-2019-12-02"
  };

  async associateAssets(
    {abortSignal, ...params}: RequestConfig & s.AssociateAssetsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      hierarchyId: params["hierarchyId"],
      childAssetId: params["childAssetId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateAssets",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/associate`,
      hostPrefix: `model.`,
    });
  }

  async batchAssociateProjectAssets(
    {abortSignal, ...params}: RequestConfig & s.BatchAssociateProjectAssetsRequest,
  ): Promise<s.BatchAssociateProjectAssetsResponse> {
    const body: jsonP.JSONObject = {
      assetIds: params["assetIds"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateProjectAssets",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}/assets/associate`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toAssetErrorDetails],
      },
    }, await resp.json());
  }

  async batchDisassociateProjectAssets(
    {abortSignal, ...params}: RequestConfig & s.BatchDisassociateProjectAssetsRequest,
  ): Promise<s.BatchDisassociateProjectAssetsResponse> {
    const body: jsonP.JSONObject = {
      assetIds: params["assetIds"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateProjectAssets",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}/assets/disassociate`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toAssetErrorDetails],
      },
    }, await resp.json());
  }

  async batchPutAssetPropertyValue(
    {abortSignal, ...params}: RequestConfig & s.BatchPutAssetPropertyValueRequest,
  ): Promise<s.BatchPutAssetPropertyValueResponse> {
    const body: jsonP.JSONObject = {
      entries: params["entries"]?.map(x => fromPutAssetPropertyValueEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchPutAssetPropertyValue",
      requestUri: "/properties",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {
        "errorEntries": [toBatchPutAssetPropertyErrorEntry],
      },
      optional: {},
    }, await resp.json());
  }

  async createAccessPolicy(
    {abortSignal, ...params}: RequestConfig & s.CreateAccessPolicyRequest,
  ): Promise<s.CreateAccessPolicyResponse> {
    const body: jsonP.JSONObject = {
      accessPolicyIdentity: fromIdentity(params["accessPolicyIdentity"]),
      accessPolicyResource: fromResource(params["accessPolicyResource"]),
      accessPolicyPermission: params["accessPolicyPermission"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccessPolicy",
      requestUri: "/access-policies",
      responseCode: 201,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "accessPolicyId": "s",
        "accessPolicyArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createAsset(
    {abortSignal, ...params}: RequestConfig & s.CreateAssetRequest,
  ): Promise<s.CreateAssetResponse> {
    const body: jsonP.JSONObject = {
      assetName: params["assetName"],
      assetModelId: params["assetModelId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAsset",
      requestUri: "/assets",
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetId": "s",
        "assetArn": "s",
        "assetStatus": toAssetStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async createAssetModel(
    {abortSignal, ...params}: RequestConfig & s.CreateAssetModelRequest,
  ): Promise<s.CreateAssetModelResponse> {
    const body: jsonP.JSONObject = {
      assetModelName: params["assetModelName"],
      assetModelDescription: params["assetModelDescription"],
      assetModelProperties: params["assetModelProperties"]?.map(x => fromAssetModelPropertyDefinition(x)),
      assetModelHierarchies: params["assetModelHierarchies"]?.map(x => fromAssetModelHierarchyDefinition(x)),
      assetModelCompositeModels: params["assetModelCompositeModels"]?.map(x => fromAssetModelCompositeModelDefinition(x)),
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssetModel",
      requestUri: "/asset-models",
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelId": "s",
        "assetModelArn": "s",
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async createDashboard(
    {abortSignal, ...params}: RequestConfig & s.CreateDashboardRequest,
  ): Promise<s.CreateDashboardResponse> {
    const body: jsonP.JSONObject = {
      projectId: params["projectId"],
      dashboardName: params["dashboardName"],
      dashboardDescription: params["dashboardDescription"],
      dashboardDefinition: params["dashboardDefinition"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDashboard",
      requestUri: "/dashboards",
      responseCode: 201,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "dashboardId": "s",
        "dashboardArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createGateway(
    {abortSignal, ...params}: RequestConfig & s.CreateGatewayRequest,
  ): Promise<s.CreateGatewayResponse> {
    const body: jsonP.JSONObject = {
      gatewayName: params["gatewayName"],
      gatewayPlatform: fromGatewayPlatform(params["gatewayPlatform"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGateway",
      requestUri: "/20200301/gateways",
      responseCode: 201,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewayId": "s",
        "gatewayArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createPortal(
    {abortSignal, ...params}: RequestConfig & s.CreatePortalRequest,
  ): Promise<s.CreatePortalResponse> {
    const body: jsonP.JSONObject = {
      portalName: params["portalName"],
      portalDescription: params["portalDescription"],
      portalContactEmail: params["portalContactEmail"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      portalLogoImageFile: fromImageFile(params["portalLogoImageFile"]),
      roleArn: params["roleArn"],
      tags: params["tags"],
      portalAuthMode: params["portalAuthMode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePortal",
      requestUri: "/portals",
      responseCode: 202,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalId": "s",
        "portalArn": "s",
        "portalStartUrl": "s",
        "portalStatus": toPortalStatus,
        "ssoApplicationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createPresignedPortalUrl(
    {abortSignal, ...params}: RequestConfig & s.CreatePresignedPortalUrlRequest,
  ): Promise<s.CreatePresignedPortalUrlResponse> {
    const body: jsonP.JSONObject = {
      sessionDurationSeconds: params["sessionDurationSeconds"],
      state: params["state"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePresignedPortalUrl",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}/presigned-url`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "presignedPortalUrl": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createProject(
    {abortSignal, ...params}: RequestConfig & s.CreateProjectRequest,
  ): Promise<s.CreateProjectResponse> {
    const body: jsonP.JSONObject = {
      portalId: params["portalId"],
      projectName: params["projectName"],
      projectDescription: params["projectDescription"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProject",
      requestUri: "/projects",
      responseCode: 201,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "projectId": "s",
        "projectArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteAccessPolicy(
    {abortSignal, ...params}: RequestConfig & s.DeleteAccessPolicyRequest,
  ): Promise<s.DeleteAccessPolicyResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAccessPolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/access-policies/${params["accessPolicyId"]}`,
      responseCode: 204,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAsset(
    {abortSignal, ...params}: RequestConfig & s.DeleteAssetRequest,
  ): Promise<s.DeleteAssetResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAsset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetStatus": toAssetStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteAssetModel(
    {abortSignal, ...params}: RequestConfig & s.DeleteAssetModelRequest,
  ): Promise<s.DeleteAssetModelResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAssetModel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/asset-models/${params["assetModelId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteDashboard(
    {abortSignal, ...params}: RequestConfig & s.DeleteDashboardRequest,
  ): Promise<s.DeleteDashboardResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteDashboard",
      method: "DELETE",
      requestUri: cmnP.encodePath`/dashboards/${params["dashboardId"]}`,
      responseCode: 204,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGateway(
    {abortSignal, ...params}: RequestConfig & s.DeleteGatewayRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGateway",
      method: "DELETE",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}`,
      hostPrefix: `edge.`,
    });
  }

  async deletePortal(
    {abortSignal, ...params}: RequestConfig & s.DeletePortalRequest,
  ): Promise<s.DeletePortalResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeletePortal",
      method: "DELETE",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}`,
      responseCode: 202,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalStatus": toPortalStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteProject(
    {abortSignal, ...params}: RequestConfig & s.DeleteProjectRequest,
  ): Promise<s.DeleteProjectResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteProject",
      method: "DELETE",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}`,
      responseCode: 204,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAccessPolicy(
    {abortSignal, ...params}: RequestConfig & s.DescribeAccessPolicyRequest,
  ): Promise<s.DescribeAccessPolicyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAccessPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/access-policies/${params["accessPolicyId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "accessPolicyId": "s",
        "accessPolicyArn": "s",
        "accessPolicyIdentity": toIdentity,
        "accessPolicyResource": toResource,
        "accessPolicyPermission": (x: jsonP.JSONValue) => cmnP.readEnum<s.Permission>(x),
        "accessPolicyCreationDate": "d",
        "accessPolicyLastUpdateDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async describeAsset(
    {abortSignal, ...params}: RequestConfig & s.DescribeAssetRequest,
  ): Promise<s.DescribeAssetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAsset",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetId": "s",
        "assetArn": "s",
        "assetName": "s",
        "assetModelId": "s",
        "assetProperties": [toAssetProperty],
        "assetHierarchies": [toAssetHierarchy],
        "assetCreationDate": "d",
        "assetLastUpdateDate": "d",
        "assetStatus": toAssetStatus,
      },
      optional: {
        "assetCompositeModels": [toAssetCompositeModel],
      },
    }, await resp.json());
  }

  async describeAssetModel(
    {abortSignal, ...params}: RequestConfig & s.DescribeAssetModelRequest,
  ): Promise<s.DescribeAssetModelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAssetModel",
      method: "GET",
      requestUri: cmnP.encodePath`/asset-models/${params["assetModelId"]}`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelId": "s",
        "assetModelArn": "s",
        "assetModelName": "s",
        "assetModelDescription": "s",
        "assetModelProperties": [toAssetModelProperty],
        "assetModelHierarchies": [toAssetModelHierarchy],
        "assetModelCreationDate": "d",
        "assetModelLastUpdateDate": "d",
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {
        "assetModelCompositeModels": [toAssetModelCompositeModel],
      },
    }, await resp.json());
  }

  async describeAssetProperty(
    {abortSignal, ...params}: RequestConfig & s.DescribeAssetPropertyRequest,
  ): Promise<s.DescribeAssetPropertyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAssetProperty",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/properties/${params["propertyId"]}`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetId": "s",
        "assetName": "s",
        "assetModelId": "s",
      },
      optional: {
        "assetProperty": toProperty,
        "compositeModel": toCompositeModelProperty,
      },
    }, await resp.json());
  }

  async describeDashboard(
    {abortSignal, ...params}: RequestConfig & s.DescribeDashboardRequest,
  ): Promise<s.DescribeDashboardResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDashboard",
      method: "GET",
      requestUri: cmnP.encodePath`/dashboards/${params["dashboardId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "dashboardId": "s",
        "dashboardArn": "s",
        "dashboardName": "s",
        "projectId": "s",
        "dashboardDefinition": "s",
        "dashboardCreationDate": "d",
        "dashboardLastUpdateDate": "d",
      },
      optional: {
        "dashboardDescription": "s",
      },
    }, await resp.json());
  }

  async describeDefaultEncryptionConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeDefaultEncryptionConfigurationRequest = {},
  ): Promise<s.DescribeDefaultEncryptionConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDefaultEncryptionConfiguration",
      method: "GET",
      requestUri: "/configuration/account/encryption",
    });
    return jsonP.readObj({
      required: {
        "encryptionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EncryptionType>(x),
        "configurationStatus": toConfigurationStatus,
      },
      optional: {
        "kmsKeyArn": "s",
      },
    }, await resp.json());
  }

  async describeGateway(
    {abortSignal, ...params}: RequestConfig & s.DescribeGatewayRequest,
  ): Promise<s.DescribeGatewayResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeGateway",
      method: "GET",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}`,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewayId": "s",
        "gatewayName": "s",
        "gatewayArn": "s",
        "gatewayCapabilitySummaries": [toGatewayCapabilitySummary],
        "creationDate": "d",
        "lastUpdateDate": "d",
      },
      optional: {
        "gatewayPlatform": toGatewayPlatform,
      },
    }, await resp.json());
  }

  async describeGatewayCapabilityConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DescribeGatewayCapabilityConfigurationRequest,
  ): Promise<s.DescribeGatewayCapabilityConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeGatewayCapabilityConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}/capability/${params["capabilityNamespace"]}`,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewayId": "s",
        "capabilityNamespace": "s",
        "capabilityConfiguration": "s",
        "capabilitySyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.CapabilitySyncStatus>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeLoggingOptions(
    {abortSignal, ...params}: RequestConfig & s.DescribeLoggingOptionsRequest = {},
  ): Promise<s.DescribeLoggingOptionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeLoggingOptions",
      method: "GET",
      requestUri: "/logging",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "loggingOptions": toLoggingOptions,
      },
      optional: {},
    }, await resp.json());
  }

  async describePortal(
    {abortSignal, ...params}: RequestConfig & s.DescribePortalRequest,
  ): Promise<s.DescribePortalResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePortal",
      method: "GET",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalId": "s",
        "portalArn": "s",
        "portalName": "s",
        "portalClientId": "s",
        "portalStartUrl": "s",
        "portalContactEmail": "s",
        "portalStatus": toPortalStatus,
        "portalCreationDate": "d",
        "portalLastUpdateDate": "d",
      },
      optional: {
        "portalDescription": "s",
        "portalLogoImageLocation": toImageLocation,
        "roleArn": "s",
        "portalAuthMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.AuthMode>(x),
      },
    }, await resp.json());
  }

  async describeProject(
    {abortSignal, ...params}: RequestConfig & s.DescribeProjectRequest,
  ): Promise<s.DescribeProjectResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProject",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "projectId": "s",
        "projectArn": "s",
        "projectName": "s",
        "portalId": "s",
        "projectCreationDate": "d",
        "projectLastUpdateDate": "d",
      },
      optional: {
        "projectDescription": "s",
      },
    }, await resp.json());
  }

  async disassociateAssets(
    {abortSignal, ...params}: RequestConfig & s.DisassociateAssetsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      hierarchyId: params["hierarchyId"],
      childAssetId: params["childAssetId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateAssets",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/disassociate`,
      hostPrefix: `model.`,
    });
  }

  async getAssetPropertyAggregates(
    {abortSignal, ...params}: RequestConfig & s.GetAssetPropertyAggregatesRequest,
  ): Promise<s.GetAssetPropertyAggregatesResponse> {
    const query = new URLSearchParams;
    if (params["assetId"] != null) query.set("assetId", params["assetId"]?.toString() ?? "");
    if (params["propertyId"] != null) query.set("propertyId", params["propertyId"]?.toString() ?? "");
    if (params["propertyAlias"] != null) query.set("propertyAlias", params["propertyAlias"]?.toString() ?? "");
    for (const item of params["aggregateTypes"]) {
      query.append("aggregateTypes", item?.toString() ?? "");
    }
    query.set("resolution", params["resolution"]?.toString() ?? "");
    for (const item of params["qualities"] ?? []) {
      query.append("qualities", item?.toString() ?? "");
    }
    query.set("startDate", cmnP.serializeDate_iso8601(params["startDate"]) ?? "");
    query.set("endDate", cmnP.serializeDate_iso8601(params["endDate"]) ?? "");
    if (params["timeOrdering"] != null) query.set("timeOrdering", params["timeOrdering"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAssetPropertyAggregates",
      method: "GET",
      requestUri: "/properties/aggregates",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {
        "aggregatedValues": [toAggregatedValue],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getAssetPropertyValue(
    {abortSignal, ...params}: RequestConfig & s.GetAssetPropertyValueRequest = {},
  ): Promise<s.GetAssetPropertyValueResponse> {
    const query = new URLSearchParams;
    if (params["assetId"] != null) query.set("assetId", params["assetId"]?.toString() ?? "");
    if (params["propertyId"] != null) query.set("propertyId", params["propertyId"]?.toString() ?? "");
    if (params["propertyAlias"] != null) query.set("propertyAlias", params["propertyAlias"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAssetPropertyValue",
      method: "GET",
      requestUri: "/properties/latest",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "propertyValue": toAssetPropertyValue,
      },
    }, await resp.json());
  }

  async getAssetPropertyValueHistory(
    {abortSignal, ...params}: RequestConfig & s.GetAssetPropertyValueHistoryRequest = {},
  ): Promise<s.GetAssetPropertyValueHistoryResponse> {
    const query = new URLSearchParams;
    if (params["assetId"] != null) query.set("assetId", params["assetId"]?.toString() ?? "");
    if (params["propertyId"] != null) query.set("propertyId", params["propertyId"]?.toString() ?? "");
    if (params["propertyAlias"] != null) query.set("propertyAlias", params["propertyAlias"]?.toString() ?? "");
    if (params["startDate"] != null) query.set("startDate", cmnP.serializeDate_iso8601(params["startDate"]) ?? "");
    if (params["endDate"] != null) query.set("endDate", cmnP.serializeDate_iso8601(params["endDate"]) ?? "");
    for (const item of params["qualities"] ?? []) {
      query.append("qualities", item?.toString() ?? "");
    }
    if (params["timeOrdering"] != null) query.set("timeOrdering", params["timeOrdering"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAssetPropertyValueHistory",
      method: "GET",
      requestUri: "/properties/history",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {
        "assetPropertyValueHistory": [toAssetPropertyValue],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAccessPolicies(
    {abortSignal, ...params}: RequestConfig & s.ListAccessPoliciesRequest = {},
  ): Promise<s.ListAccessPoliciesResponse> {
    const query = new URLSearchParams;
    if (params["identityType"] != null) query.set("identityType", params["identityType"]?.toString() ?? "");
    if (params["identityId"] != null) query.set("identityId", params["identityId"]?.toString() ?? "");
    if (params["resourceType"] != null) query.set("resourceType", params["resourceType"]?.toString() ?? "");
    if (params["resourceId"] != null) query.set("resourceId", params["resourceId"]?.toString() ?? "");
    if (params["iamArn"] != null) query.set("iamArn", params["iamArn"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAccessPolicies",
      method: "GET",
      requestUri: "/access-policies",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "accessPolicySummaries": [toAccessPolicySummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssetModels(
    {abortSignal, ...params}: RequestConfig & s.ListAssetModelsRequest = {},
  ): Promise<s.ListAssetModelsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssetModels",
      method: "GET",
      requestUri: "/asset-models",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelSummaries": [toAssetModelSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssetRelationships(
    {abortSignal, ...params}: RequestConfig & s.ListAssetRelationshipsRequest,
  ): Promise<s.ListAssetRelationshipsResponse> {
    const query = new URLSearchParams;
    query.set("traversalType", params["traversalType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssetRelationships",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/assetRelationships`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetRelationshipSummaries": [toAssetRelationshipSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssets(
    {abortSignal, ...params}: RequestConfig & s.ListAssetsRequest = {},
  ): Promise<s.ListAssetsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["assetModelId"] != null) query.set("assetModelId", params["assetModelId"]?.toString() ?? "");
    if (params["filter"] != null) query.set("filter", params["filter"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssets",
      method: "GET",
      requestUri: "/assets",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetSummaries": [toAssetSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssociatedAssets(
    {abortSignal, ...params}: RequestConfig & s.ListAssociatedAssetsRequest,
  ): Promise<s.ListAssociatedAssetsResponse> {
    const query = new URLSearchParams;
    if (params["hierarchyId"] != null) query.set("hierarchyId", params["hierarchyId"]?.toString() ?? "");
    if (params["traversalDirection"] != null) query.set("traversalDirection", params["traversalDirection"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssociatedAssets",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/hierarchies`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetSummaries": [toAssociatedAssetsSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDashboards(
    {abortSignal, ...params}: RequestConfig & s.ListDashboardsRequest,
  ): Promise<s.ListDashboardsResponse> {
    const query = new URLSearchParams;
    query.set("projectId", params["projectId"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDashboards",
      method: "GET",
      requestUri: "/dashboards",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "dashboardSummaries": [toDashboardSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listGateways(
    {abortSignal, ...params}: RequestConfig & s.ListGatewaysRequest = {},
  ): Promise<s.ListGatewaysResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGateways",
      method: "GET",
      requestUri: "/20200301/gateways",
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewaySummaries": [toGatewaySummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPortals(
    {abortSignal, ...params}: RequestConfig & s.ListPortalsRequest = {},
  ): Promise<s.ListPortalsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPortals",
      method: "GET",
      requestUri: "/portals",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "portalSummaries": [toPortalSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listProjectAssets(
    {abortSignal, ...params}: RequestConfig & s.ListProjectAssetsRequest,
  ): Promise<s.ListProjectAssetsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProjectAssets",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}/assets`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "assetIds": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listProjects(
    {abortSignal, ...params}: RequestConfig & s.ListProjectsRequest,
  ): Promise<s.ListProjectsResponse> {
    const query = new URLSearchParams;
    query.set("portalId", params["portalId"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProjects",
      method: "GET",
      requestUri: "/projects",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "projectSummaries": [toProjectSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putDefaultEncryptionConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutDefaultEncryptionConfigurationRequest,
  ): Promise<s.PutDefaultEncryptionConfigurationResponse> {
    const body: jsonP.JSONObject = {
      encryptionType: params["encryptionType"],
      kmsKeyId: params["kmsKeyId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDefaultEncryptionConfiguration",
      requestUri: "/configuration/account/encryption",
    });
    return jsonP.readObj({
      required: {
        "encryptionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EncryptionType>(x),
        "configurationStatus": toConfigurationStatus,
      },
      optional: {
        "kmsKeyArn": "s",
      },
    }, await resp.json());
  }

  async putLoggingOptions(
    {abortSignal, ...params}: RequestConfig & s.PutLoggingOptionsRequest,
  ): Promise<s.PutLoggingOptionsResponse> {
    const body: jsonP.JSONObject = {
      loggingOptions: fromLoggingOptions(params["loggingOptions"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLoggingOptions",
      method: "PUT",
      requestUri: "/logging",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "TagResource",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAccessPolicy(
    {abortSignal, ...params}: RequestConfig & s.UpdateAccessPolicyRequest,
  ): Promise<s.UpdateAccessPolicyResponse> {
    const body: jsonP.JSONObject = {
      accessPolicyIdentity: fromIdentity(params["accessPolicyIdentity"]),
      accessPolicyResource: fromResource(params["accessPolicyResource"]),
      accessPolicyPermission: params["accessPolicyPermission"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccessPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/access-policies/${params["accessPolicyId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAsset(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssetRequest,
  ): Promise<s.UpdateAssetResponse> {
    const body: jsonP.JSONObject = {
      assetName: params["assetName"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAsset",
      method: "PUT",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetStatus": toAssetStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async updateAssetModel(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssetModelRequest,
  ): Promise<s.UpdateAssetModelResponse> {
    const body: jsonP.JSONObject = {
      assetModelName: params["assetModelName"],
      assetModelDescription: params["assetModelDescription"],
      assetModelProperties: params["assetModelProperties"]?.map(x => fromAssetModelProperty(x)),
      assetModelHierarchies: params["assetModelHierarchies"]?.map(x => fromAssetModelHierarchy(x)),
      assetModelCompositeModels: params["assetModelCompositeModels"]?.map(x => fromAssetModelCompositeModel(x)),
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssetModel",
      method: "PUT",
      requestUri: cmnP.encodePath`/asset-models/${params["assetModelId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async updateAssetProperty(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssetPropertyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      propertyAlias: params["propertyAlias"],
      propertyNotificationState: params["propertyNotificationState"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssetProperty",
      method: "PUT",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/properties/${params["propertyId"]}`,
      hostPrefix: `model.`,
    });
  }

  async updateDashboard(
    {abortSignal, ...params}: RequestConfig & s.UpdateDashboardRequest,
  ): Promise<s.UpdateDashboardResponse> {
    const body: jsonP.JSONObject = {
      dashboardName: params["dashboardName"],
      dashboardDescription: params["dashboardDescription"],
      dashboardDefinition: params["dashboardDefinition"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDashboard",
      method: "PUT",
      requestUri: cmnP.encodePath`/dashboards/${params["dashboardId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGateway(
    {abortSignal, ...params}: RequestConfig & s.UpdateGatewayRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      gatewayName: params["gatewayName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGateway",
      method: "PUT",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}`,
      hostPrefix: `edge.`,
    });
  }

  async updateGatewayCapabilityConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateGatewayCapabilityConfigurationRequest,
  ): Promise<s.UpdateGatewayCapabilityConfigurationResponse> {
    const body: jsonP.JSONObject = {
      capabilityNamespace: params["capabilityNamespace"],
      capabilityConfiguration: params["capabilityConfiguration"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGatewayCapabilityConfiguration",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}/capability`,
      responseCode: 201,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "capabilityNamespace": "s",
        "capabilitySyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.CapabilitySyncStatus>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async updatePortal(
    {abortSignal, ...params}: RequestConfig & s.UpdatePortalRequest,
  ): Promise<s.UpdatePortalResponse> {
    const body: jsonP.JSONObject = {
      portalName: params["portalName"],
      portalDescription: params["portalDescription"],
      portalContactEmail: params["portalContactEmail"],
      portalLogoImage: fromImage(params["portalLogoImage"]),
      roleArn: params["roleArn"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePortal",
      method: "PUT",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}`,
      responseCode: 202,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalStatus": toPortalStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async updateProject(
    {abortSignal, ...params}: RequestConfig & s.UpdateProjectRequest,
  ): Promise<s.UpdateProjectResponse> {
    const body: jsonP.JSONObject = {
      projectName: params["projectName"],
      projectDescription: params["projectDescription"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProject",
      method: "PUT",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  // Resource State Waiters

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetModelNotExists(
    params: RequestConfig & s.DescribeAssetModelRequest,
  ): Promise<Error | s.DescribeAssetModelResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetModelNotExists';
    for (let i = 0; i < 20; i++) {
      try {
        const resp = await this.describeAssetModel(params);
      } catch (err) {
        if (["ResourceNotFoundException"].includes(err.shortCode)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetModelActive(
    params: RequestConfig & s.DescribeAssetModelRequest,
  ): Promise<s.DescribeAssetModelResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetModelActive';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describeAssetModel(params);
      const field = resp?.assetModelStatus?.state;
      if (field === "ACTIVE") return resp;
      if (field === "FAILED") throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetNotExists(
    params: RequestConfig & s.DescribeAssetRequest,
  ): Promise<Error | s.DescribeAssetResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetNotExists';
    for (let i = 0; i < 20; i++) {
      try {
        const resp = await this.describeAsset(params);
      } catch (err) {
        if (["ResourceNotFoundException"].includes(err.shortCode)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetActive(
    params: RequestConfig & s.DescribeAssetRequest,
  ): Promise<s.DescribeAssetResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetActive';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describeAsset(params);
      const field = resp?.assetStatus?.state;
      if (field === "ACTIVE") return resp;
      if (field === "FAILED") throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForPortalNotExists(
    params: RequestConfig & s.DescribePortalRequest,
  ): Promise<Error | s.DescribePortalResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state PortalNotExists';
    for (let i = 0; i < 20; i++) {
      try {
        const resp = await this.describePortal(params);
      } catch (err) {
        if (["ResourceNotFoundException"].includes(err.shortCode)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForPortalActive(
    params: RequestConfig & s.DescribePortalRequest,
  ): Promise<s.DescribePortalResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state PortalActive';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describePortal(params);
      if (resp?.portalStatus?.state === "ACTIVE") return resp;
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

}

function fromPutAssetPropertyValueEntry(input?: s.PutAssetPropertyValueEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    entryId: input["entryId"],
    assetId: input["assetId"],
    propertyId: input["propertyId"],
    propertyAlias: input["propertyAlias"],
    propertyValues: input["propertyValues"]?.map(x => fromAssetPropertyValue(x)),
  }
}

function fromAssetPropertyValue(input?: s.AssetPropertyValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: fromVariant(input["value"]),
    timestamp: fromTimeInNanos(input["timestamp"]),
    quality: input["quality"],
  }
}
function toAssetPropertyValue(root: jsonP.JSONValue): s.AssetPropertyValue {
  return jsonP.readObj({
    required: {
      "value": toVariant,
      "timestamp": toTimeInNanos,
    },
    optional: {
      "quality": (x: jsonP.JSONValue) => cmnP.readEnum<s.Quality>(x),
    },
  }, root);
}

function fromVariant(input?: s.Variant | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stringValue: input["stringValue"],
    integerValue: input["integerValue"],
    doubleValue: input["doubleValue"],
    booleanValue: input["booleanValue"],
  }
}
function toVariant(root: jsonP.JSONValue): s.Variant {
  return jsonP.readObj({
    required: {},
    optional: {
      "stringValue": "s",
      "integerValue": "n",
      "doubleValue": "n",
      "booleanValue": "b",
    },
  }, root);
}

function fromTimeInNanos(input?: s.TimeInNanos | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timeInSeconds: input["timeInSeconds"],
    offsetInNanos: input["offsetInNanos"],
  }
}
function toTimeInNanos(root: jsonP.JSONValue): s.TimeInNanos {
  return jsonP.readObj({
    required: {
      "timeInSeconds": "n",
    },
    optional: {
      "offsetInNanos": "n",
    },
  }, root);
}

function fromIdentity(input?: s.Identity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    user: fromUserIdentity(input["user"]),
    group: fromGroupIdentity(input["group"]),
    iamUser: fromIAMUserIdentity(input["iamUser"]),
    iamRole: fromIAMRoleIdentity(input["iamRole"]),
  }
}
function toIdentity(root: jsonP.JSONValue): s.Identity {
  return jsonP.readObj({
    required: {},
    optional: {
      "user": toUserIdentity,
      "group": toGroupIdentity,
      "iamUser": toIAMUserIdentity,
      "iamRole": toIAMRoleIdentity,
    },
  }, root);
}

function fromUserIdentity(input?: s.UserIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toUserIdentity(root: jsonP.JSONValue): s.UserIdentity {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

function fromGroupIdentity(input?: s.GroupIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toGroupIdentity(root: jsonP.JSONValue): s.GroupIdentity {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

function fromIAMUserIdentity(input?: s.IAMUserIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    arn: input["arn"],
  }
}
function toIAMUserIdentity(root: jsonP.JSONValue): s.IAMUserIdentity {
  return jsonP.readObj({
    required: {
      "arn": "s",
    },
    optional: {},
  }, root);
}

function fromIAMRoleIdentity(input?: s.IAMRoleIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    arn: input["arn"],
  }
}
function toIAMRoleIdentity(root: jsonP.JSONValue): s.IAMRoleIdentity {
  return jsonP.readObj({
    required: {
      "arn": "s",
    },
    optional: {},
  }, root);
}

function fromResource(input?: s.Resource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    portal: fromPortalResource(input["portal"]),
    project: fromProjectResource(input["project"]),
  }
}
function toResource(root: jsonP.JSONValue): s.Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "portal": toPortalResource,
      "project": toProjectResource,
    },
  }, root);
}

function fromPortalResource(input?: s.PortalResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toPortalResource(root: jsonP.JSONValue): s.PortalResource {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

function fromProjectResource(input?: s.ProjectResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toProjectResource(root: jsonP.JSONValue): s.ProjectResource {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

function fromAssetModelPropertyDefinition(input?: s.AssetModelPropertyDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    dataType: input["dataType"],
    dataTypeSpec: input["dataTypeSpec"],
    unit: input["unit"],
    type: fromPropertyType(input["type"]),
  }
}

function fromPropertyType(input?: s.PropertyType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: fromAttribute(input["attribute"]),
    measurement: fromMeasurement(input["measurement"]),
    transform: fromTransform(input["transform"]),
    metric: fromMetric(input["metric"]),
  }
}
function toPropertyType(root: jsonP.JSONValue): s.PropertyType {
  return jsonP.readObj({
    required: {},
    optional: {
      "attribute": toAttribute,
      "measurement": toMeasurement,
      "transform": toTransform,
      "metric": toMetric,
    },
  }, root);
}

function fromAttribute(input?: s.Attribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultValue: input["defaultValue"],
  }
}
function toAttribute(root: jsonP.JSONValue): s.Attribute {
  return jsonP.readObj({
    required: {},
    optional: {
      "defaultValue": "s",
    },
  }, root);
}

function fromMeasurement(input?: s.Measurement | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toMeasurement(root: jsonP.JSONValue): s.Measurement {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

function fromTransform(input?: s.Transform | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    expression: input["expression"],
    variables: input["variables"]?.map(x => fromExpressionVariable(x)),
  }
}
function toTransform(root: jsonP.JSONValue): s.Transform {
  return jsonP.readObj({
    required: {
      "expression": "s",
      "variables": [toExpressionVariable],
    },
    optional: {},
  }, root);
}

function fromExpressionVariable(input?: s.ExpressionVariable | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    value: fromVariableValue(input["value"]),
  }
}
function toExpressionVariable(root: jsonP.JSONValue): s.ExpressionVariable {
  return jsonP.readObj({
    required: {
      "name": "s",
      "value": toVariableValue,
    },
    optional: {},
  }, root);
}

function fromVariableValue(input?: s.VariableValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    propertyId: input["propertyId"],
    hierarchyId: input["hierarchyId"],
  }
}
function toVariableValue(root: jsonP.JSONValue): s.VariableValue {
  return jsonP.readObj({
    required: {
      "propertyId": "s",
    },
    optional: {
      "hierarchyId": "s",
    },
  }, root);
}

function fromMetric(input?: s.Metric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    expression: input["expression"],
    variables: input["variables"]?.map(x => fromExpressionVariable(x)),
    window: fromMetricWindow(input["window"]),
  }
}
function toMetric(root: jsonP.JSONValue): s.Metric {
  return jsonP.readObj({
    required: {
      "expression": "s",
      "variables": [toExpressionVariable],
      "window": toMetricWindow,
    },
    optional: {},
  }, root);
}

function fromMetricWindow(input?: s.MetricWindow | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tumbling: fromTumblingWindow(input["tumbling"]),
  }
}
function toMetricWindow(root: jsonP.JSONValue): s.MetricWindow {
  return jsonP.readObj({
    required: {},
    optional: {
      "tumbling": toTumblingWindow,
    },
  }, root);
}

function fromTumblingWindow(input?: s.TumblingWindow | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    interval: input["interval"],
  }
}
function toTumblingWindow(root: jsonP.JSONValue): s.TumblingWindow {
  return jsonP.readObj({
    required: {
      "interval": "s",
    },
    optional: {},
  }, root);
}

function fromAssetModelHierarchyDefinition(input?: s.AssetModelHierarchyDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    childAssetModelId: input["childAssetModelId"],
  }
}

function fromAssetModelCompositeModelDefinition(input?: s.AssetModelCompositeModelDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    description: input["description"],
    type: input["type"],
    properties: input["properties"]?.map(x => fromAssetModelPropertyDefinition(x)),
  }
}

function fromGatewayPlatform(input?: s.GatewayPlatform | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    greengrass: fromGreengrass(input["greengrass"]),
  }
}
function toGatewayPlatform(root: jsonP.JSONValue): s.GatewayPlatform {
  return jsonP.readObj({
    required: {
      "greengrass": toGreengrass,
    },
    optional: {},
  }, root);
}

function fromGreengrass(input?: s.Greengrass | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    groupArn: input["groupArn"],
  }
}
function toGreengrass(root: jsonP.JSONValue): s.Greengrass {
  return jsonP.readObj({
    required: {
      "groupArn": "s",
    },
    optional: {},
  }, root);
}

function fromImageFile(input?: s.ImageFile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    data: jsonP.serializeBlob(input["data"]),
    type: input["type"],
  }
}

function fromLoggingOptions(input?: s.LoggingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    level: input["level"],
  }
}
function toLoggingOptions(root: jsonP.JSONValue): s.LoggingOptions {
  return jsonP.readObj({
    required: {
      "level": (x: jsonP.JSONValue) => cmnP.readEnum<s.LoggingLevel>(x),
    },
    optional: {},
  }, root);
}

function fromAssetModelProperty(input?: s.AssetModelProperty | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    dataType: input["dataType"],
    dataTypeSpec: input["dataTypeSpec"],
    unit: input["unit"],
    type: fromPropertyType(input["type"]),
  }
}
function toAssetModelProperty(root: jsonP.JSONValue): s.AssetModelProperty {
  return jsonP.readObj({
    required: {
      "name": "s",
      "dataType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PropertyDataType>(x),
      "type": toPropertyType,
    },
    optional: {
      "id": "s",
      "dataTypeSpec": "s",
      "unit": "s",
    },
  }, root);
}

function fromAssetModelHierarchy(input?: s.AssetModelHierarchy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    childAssetModelId: input["childAssetModelId"],
  }
}
function toAssetModelHierarchy(root: jsonP.JSONValue): s.AssetModelHierarchy {
  return jsonP.readObj({
    required: {
      "name": "s",
      "childAssetModelId": "s",
    },
    optional: {
      "id": "s",
    },
  }, root);
}

function fromAssetModelCompositeModel(input?: s.AssetModelCompositeModel | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    description: input["description"],
    type: input["type"],
    properties: input["properties"]?.map(x => fromAssetModelProperty(x)),
  }
}
function toAssetModelCompositeModel(root: jsonP.JSONValue): s.AssetModelCompositeModel {
  return jsonP.readObj({
    required: {
      "name": "s",
      "type": "s",
    },
    optional: {
      "description": "s",
      "properties": [toAssetModelProperty],
    },
  }, root);
}

function fromImage(input?: s.Image | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    file: fromImageFile(input["file"]),
  }
}

function toAssetErrorDetails(root: jsonP.JSONValue): s.AssetErrorDetails {
  return jsonP.readObj({
    required: {
      "assetId": "s",
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetErrorCode>(x),
      "message": "s",
    },
    optional: {},
  }, root);
}

function toBatchPutAssetPropertyErrorEntry(root: jsonP.JSONValue): s.BatchPutAssetPropertyErrorEntry {
  return jsonP.readObj({
    required: {
      "entryId": "s",
      "errors": [toBatchPutAssetPropertyError],
    },
    optional: {},
  }, root);
}

function toBatchPutAssetPropertyError(root: jsonP.JSONValue): s.BatchPutAssetPropertyError {
  return jsonP.readObj({
    required: {
      "errorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.BatchPutAssetPropertyValueErrorCode>(x),
      "errorMessage": "s",
      "timestamps": [toTimeInNanos],
    },
    optional: {},
  }, root);
}

function toAssetStatus(root: jsonP.JSONValue): s.AssetStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetState>(x),
    },
    optional: {
      "error": toErrorDetails,
    },
  }, root);
}

function toErrorDetails(root: jsonP.JSONValue): s.ErrorDetails {
  return jsonP.readObj({
    required: {
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "message": "s",
    },
    optional: {},
  }, root);
}

function toAssetModelStatus(root: jsonP.JSONValue): s.AssetModelStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetModelState>(x),
    },
    optional: {
      "error": toErrorDetails,
    },
  }, root);
}

function toPortalStatus(root: jsonP.JSONValue): s.PortalStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<s.PortalState>(x),
    },
    optional: {
      "error": toMonitorErrorDetails,
    },
  }, root);
}

function toMonitorErrorDetails(root: jsonP.JSONValue): s.MonitorErrorDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<s.MonitorErrorCode>(x),
      "message": "s",
    },
  }, root);
}

function toAssetProperty(root: jsonP.JSONValue): s.AssetProperty {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "dataType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PropertyDataType>(x),
    },
    optional: {
      "alias": "s",
      "notification": toPropertyNotification,
      "dataTypeSpec": "s",
      "unit": "s",
    },
  }, root);
}

function toPropertyNotification(root: jsonP.JSONValue): s.PropertyNotification {
  return jsonP.readObj({
    required: {
      "topic": "s",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<s.PropertyNotificationState>(x),
    },
    optional: {},
  }, root);
}

function toAssetHierarchy(root: jsonP.JSONValue): s.AssetHierarchy {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {
      "id": "s",
    },
  }, root);
}

function toAssetCompositeModel(root: jsonP.JSONValue): s.AssetCompositeModel {
  return jsonP.readObj({
    required: {
      "name": "s",
      "type": "s",
      "properties": [toAssetProperty],
    },
    optional: {
      "description": "s",
    },
  }, root);
}

function toProperty(root: jsonP.JSONValue): s.Property {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "dataType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PropertyDataType>(x),
    },
    optional: {
      "alias": "s",
      "notification": toPropertyNotification,
      "unit": "s",
      "type": toPropertyType,
    },
  }, root);
}

function toCompositeModelProperty(root: jsonP.JSONValue): s.CompositeModelProperty {
  return jsonP.readObj({
    required: {
      "name": "s",
      "type": "s",
      "assetProperty": toProperty,
    },
    optional: {},
  }, root);
}

function toConfigurationStatus(root: jsonP.JSONValue): s.ConfigurationStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationState>(x),
    },
    optional: {
      "error": toConfigurationErrorDetails,
    },
  }, root);
}

function toConfigurationErrorDetails(root: jsonP.JSONValue): s.ConfigurationErrorDetails {
  return jsonP.readObj({
    required: {
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "message": "s",
    },
    optional: {},
  }, root);
}

function toGatewayCapabilitySummary(root: jsonP.JSONValue): s.GatewayCapabilitySummary {
  return jsonP.readObj({
    required: {
      "capabilityNamespace": "s",
      "capabilitySyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.CapabilitySyncStatus>(x),
    },
    optional: {},
  }, root);
}

function toImageLocation(root: jsonP.JSONValue): s.ImageLocation {
  return jsonP.readObj({
    required: {
      "id": "s",
      "url": "s",
    },
    optional: {},
  }, root);
}

function toAggregatedValue(root: jsonP.JSONValue): s.AggregatedValue {
  return jsonP.readObj({
    required: {
      "timestamp": "d",
      "value": toAggregates,
    },
    optional: {
      "quality": (x: jsonP.JSONValue) => cmnP.readEnum<s.Quality>(x),
    },
  }, root);
}

function toAggregates(root: jsonP.JSONValue): s.Aggregates {
  return jsonP.readObj({
    required: {},
    optional: {
      "average": "n",
      "count": "n",
      "maximum": "n",
      "minimum": "n",
      "sum": "n",
      "standardDeviation": "n",
    },
  }, root);
}

function toAccessPolicySummary(root: jsonP.JSONValue): s.AccessPolicySummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "identity": toIdentity,
      "resource": toResource,
      "permission": (x: jsonP.JSONValue) => cmnP.readEnum<s.Permission>(x),
    },
    optional: {
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
  }, root);
}

function toAssetModelSummary(root: jsonP.JSONValue): s.AssetModelSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "status": toAssetModelStatus,
    },
    optional: {},
  }, root);
}

function toAssetRelationshipSummary(root: jsonP.JSONValue): s.AssetRelationshipSummary {
  return jsonP.readObj({
    required: {
      "relationshipType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssetRelationshipType>(x),
    },
    optional: {
      "hierarchyInfo": toAssetHierarchyInfo,
    },
  }, root);
}

function toAssetHierarchyInfo(root: jsonP.JSONValue): s.AssetHierarchyInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "parentAssetId": "s",
      "childAssetId": "s",
    },
  }, root);
}

function toAssetSummary(root: jsonP.JSONValue): s.AssetSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "assetModelId": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "status": toAssetStatus,
      "hierarchies": [toAssetHierarchy],
    },
    optional: {},
  }, root);
}

function toAssociatedAssetsSummary(root: jsonP.JSONValue): s.AssociatedAssetsSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "assetModelId": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "status": toAssetStatus,
      "hierarchies": [toAssetHierarchy],
    },
    optional: {},
  }, root);
}

function toDashboardSummary(root: jsonP.JSONValue): s.DashboardSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
    },
    optional: {
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
  }, root);
}

function toGatewaySummary(root: jsonP.JSONValue): s.GatewaySummary {
  return jsonP.readObj({
    required: {
      "gatewayId": "s",
      "gatewayName": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
    optional: {
      "gatewayCapabilitySummaries": [toGatewayCapabilitySummary],
    },
  }, root);
}

function toPortalSummary(root: jsonP.JSONValue): s.PortalSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "startUrl": "s",
      "status": toPortalStatus,
    },
    optional: {
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "roleArn": "s",
    },
  }, root);
}

function toProjectSummary(root: jsonP.JSONValue): s.ProjectSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
    },
    optional: {
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
  }, root);
}
