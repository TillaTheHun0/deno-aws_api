// Autogenerated API client for: AWS IoT SiteWise

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class IoTSiteWise {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoTSiteWise.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-12-02",
    "endpointPrefix": "iotsitewise",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT SiteWise",
    "serviceId": "IoTSiteWise",
    "signatureVersion": "v4",
    "signingName": "iotsitewise",
    "uid": "iotsitewise-2019-12-02"
  };

  async associateAssets(
    {abortSignal, ...params}: RequestConfig & AssociateAssetsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      hierarchyId: params["hierarchyId"],
      childAssetId: params["childAssetId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateAssets",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/associate`,
      hostPrefix: `model.`,
    });
  }

  async batchAssociateProjectAssets(
    {abortSignal, ...params}: RequestConfig & BatchAssociateProjectAssetsRequest,
  ): Promise<BatchAssociateProjectAssetsResponse> {
    const body: jsonP.JSONObject = {
      assetIds: params["assetIds"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateProjectAssets",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}/assets/associate`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toAssetErrorDetails],
      },
    }, await resp.json());
  }

  async batchDisassociateProjectAssets(
    {abortSignal, ...params}: RequestConfig & BatchDisassociateProjectAssetsRequest,
  ): Promise<BatchDisassociateProjectAssetsResponse> {
    const body: jsonP.JSONObject = {
      assetIds: params["assetIds"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateProjectAssets",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}/assets/disassociate`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toAssetErrorDetails],
      },
    }, await resp.json());
  }

  async batchPutAssetPropertyValue(
    {abortSignal, ...params}: RequestConfig & BatchPutAssetPropertyValueRequest,
  ): Promise<BatchPutAssetPropertyValueResponse> {
    const body: jsonP.JSONObject = {
      entries: params["entries"]?.map(x => fromPutAssetPropertyValueEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchPutAssetPropertyValue",
      requestUri: "/properties",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {
        "errorEntries": [toBatchPutAssetPropertyErrorEntry],
      },
      optional: {},
    }, await resp.json());
  }

  async createAccessPolicy(
    {abortSignal, ...params}: RequestConfig & CreateAccessPolicyRequest,
  ): Promise<CreateAccessPolicyResponse> {
    const body: jsonP.JSONObject = {
      accessPolicyIdentity: fromIdentity(params["accessPolicyIdentity"]),
      accessPolicyResource: fromResource(params["accessPolicyResource"]),
      accessPolicyPermission: params["accessPolicyPermission"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccessPolicy",
      requestUri: "/access-policies",
      responseCode: 201,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "accessPolicyId": "s",
        "accessPolicyArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createAsset(
    {abortSignal, ...params}: RequestConfig & CreateAssetRequest,
  ): Promise<CreateAssetResponse> {
    const body: jsonP.JSONObject = {
      assetName: params["assetName"],
      assetModelId: params["assetModelId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAsset",
      requestUri: "/assets",
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetId": "s",
        "assetArn": "s",
        "assetStatus": toAssetStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async createAssetModel(
    {abortSignal, ...params}: RequestConfig & CreateAssetModelRequest,
  ): Promise<CreateAssetModelResponse> {
    const body: jsonP.JSONObject = {
      assetModelName: params["assetModelName"],
      assetModelDescription: params["assetModelDescription"],
      assetModelProperties: params["assetModelProperties"]?.map(x => fromAssetModelPropertyDefinition(x)),
      assetModelHierarchies: params["assetModelHierarchies"]?.map(x => fromAssetModelHierarchyDefinition(x)),
      assetModelCompositeModels: params["assetModelCompositeModels"]?.map(x => fromAssetModelCompositeModelDefinition(x)),
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssetModel",
      requestUri: "/asset-models",
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelId": "s",
        "assetModelArn": "s",
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async createDashboard(
    {abortSignal, ...params}: RequestConfig & CreateDashboardRequest,
  ): Promise<CreateDashboardResponse> {
    const body: jsonP.JSONObject = {
      projectId: params["projectId"],
      dashboardName: params["dashboardName"],
      dashboardDescription: params["dashboardDescription"],
      dashboardDefinition: params["dashboardDefinition"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDashboard",
      requestUri: "/dashboards",
      responseCode: 201,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "dashboardId": "s",
        "dashboardArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createGateway(
    {abortSignal, ...params}: RequestConfig & CreateGatewayRequest,
  ): Promise<CreateGatewayResponse> {
    const body: jsonP.JSONObject = {
      gatewayName: params["gatewayName"],
      gatewayPlatform: fromGatewayPlatform(params["gatewayPlatform"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGateway",
      requestUri: "/20200301/gateways",
      responseCode: 201,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewayId": "s",
        "gatewayArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createPortal(
    {abortSignal, ...params}: RequestConfig & CreatePortalRequest,
  ): Promise<CreatePortalResponse> {
    const body: jsonP.JSONObject = {
      portalName: params["portalName"],
      portalDescription: params["portalDescription"],
      portalContactEmail: params["portalContactEmail"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      portalLogoImageFile: fromImageFile(params["portalLogoImageFile"]),
      roleArn: params["roleArn"],
      tags: params["tags"],
      portalAuthMode: params["portalAuthMode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePortal",
      requestUri: "/portals",
      responseCode: 202,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalId": "s",
        "portalArn": "s",
        "portalStartUrl": "s",
        "portalStatus": toPortalStatus,
        "ssoApplicationId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createPresignedPortalUrl(
    {abortSignal, ...params}: RequestConfig & CreatePresignedPortalUrlRequest,
  ): Promise<CreatePresignedPortalUrlResponse> {
    const body: jsonP.JSONObject = {
      sessionDurationSeconds: params["sessionDurationSeconds"],
      state: params["state"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePresignedPortalUrl",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}/presigned-url`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "presignedPortalUrl": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createProject(
    {abortSignal, ...params}: RequestConfig & CreateProjectRequest,
  ): Promise<CreateProjectResponse> {
    const body: jsonP.JSONObject = {
      portalId: params["portalId"],
      projectName: params["projectName"],
      projectDescription: params["projectDescription"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProject",
      requestUri: "/projects",
      responseCode: 201,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "projectId": "s",
        "projectArn": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteAccessPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteAccessPolicyRequest,
  ): Promise<DeleteAccessPolicyResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAccessPolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/access-policies/${params["accessPolicyId"]}`,
      responseCode: 204,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAsset(
    {abortSignal, ...params}: RequestConfig & DeleteAssetRequest,
  ): Promise<DeleteAssetResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAsset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetStatus": toAssetStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteAssetModel(
    {abortSignal, ...params}: RequestConfig & DeleteAssetModelRequest,
  ): Promise<DeleteAssetModelResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAssetModel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/asset-models/${params["assetModelId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteDashboard(
    {abortSignal, ...params}: RequestConfig & DeleteDashboardRequest,
  ): Promise<DeleteDashboardResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteDashboard",
      method: "DELETE",
      requestUri: cmnP.encodePath`/dashboards/${params["dashboardId"]}`,
      responseCode: 204,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteGateway(
    {abortSignal, ...params}: RequestConfig & DeleteGatewayRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGateway",
      method: "DELETE",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}`,
      hostPrefix: `edge.`,
    });
  }

  async deletePortal(
    {abortSignal, ...params}: RequestConfig & DeletePortalRequest,
  ): Promise<DeletePortalResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeletePortal",
      method: "DELETE",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}`,
      responseCode: 202,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalStatus": toPortalStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async deleteProject(
    {abortSignal, ...params}: RequestConfig & DeleteProjectRequest,
  ): Promise<DeleteProjectResponse> {
    const query = new URLSearchParams;
    if (params["clientToken"] != null) query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteProject",
      method: "DELETE",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}`,
      responseCode: 204,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAccessPolicy(
    {abortSignal, ...params}: RequestConfig & DescribeAccessPolicyRequest,
  ): Promise<DescribeAccessPolicyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAccessPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/access-policies/${params["accessPolicyId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "accessPolicyId": "s",
        "accessPolicyArn": "s",
        "accessPolicyIdentity": toIdentity,
        "accessPolicyResource": toResource,
        "accessPolicyPermission": (x: jsonP.JSONValue) => cmnP.readEnum<Permission>(x),
        "accessPolicyCreationDate": "d",
        "accessPolicyLastUpdateDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async describeAsset(
    {abortSignal, ...params}: RequestConfig & DescribeAssetRequest,
  ): Promise<DescribeAssetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAsset",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetId": "s",
        "assetArn": "s",
        "assetName": "s",
        "assetModelId": "s",
        "assetProperties": [toAssetProperty],
        "assetHierarchies": [toAssetHierarchy],
        "assetCreationDate": "d",
        "assetLastUpdateDate": "d",
        "assetStatus": toAssetStatus,
      },
      optional: {
        "assetCompositeModels": [toAssetCompositeModel],
      },
    }, await resp.json());
  }

  async describeAssetModel(
    {abortSignal, ...params}: RequestConfig & DescribeAssetModelRequest,
  ): Promise<DescribeAssetModelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAssetModel",
      method: "GET",
      requestUri: cmnP.encodePath`/asset-models/${params["assetModelId"]}`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelId": "s",
        "assetModelArn": "s",
        "assetModelName": "s",
        "assetModelDescription": "s",
        "assetModelProperties": [toAssetModelProperty],
        "assetModelHierarchies": [toAssetModelHierarchy],
        "assetModelCreationDate": "d",
        "assetModelLastUpdateDate": "d",
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {
        "assetModelCompositeModels": [toAssetModelCompositeModel],
      },
    }, await resp.json());
  }

  async describeAssetProperty(
    {abortSignal, ...params}: RequestConfig & DescribeAssetPropertyRequest,
  ): Promise<DescribeAssetPropertyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAssetProperty",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/properties/${params["propertyId"]}`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetId": "s",
        "assetName": "s",
        "assetModelId": "s",
      },
      optional: {
        "assetProperty": toProperty,
        "compositeModel": toCompositeModelProperty,
      },
    }, await resp.json());
  }

  async describeDashboard(
    {abortSignal, ...params}: RequestConfig & DescribeDashboardRequest,
  ): Promise<DescribeDashboardResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDashboard",
      method: "GET",
      requestUri: cmnP.encodePath`/dashboards/${params["dashboardId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "dashboardId": "s",
        "dashboardArn": "s",
        "dashboardName": "s",
        "projectId": "s",
        "dashboardDefinition": "s",
        "dashboardCreationDate": "d",
        "dashboardLastUpdateDate": "d",
      },
      optional: {
        "dashboardDescription": "s",
      },
    }, await resp.json());
  }

  async describeDefaultEncryptionConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeDefaultEncryptionConfigurationRequest = {},
  ): Promise<DescribeDefaultEncryptionConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDefaultEncryptionConfiguration",
      method: "GET",
      requestUri: "/configuration/account/encryption",
    });
    return jsonP.readObj({
      required: {
        "encryptionType": (x: jsonP.JSONValue) => cmnP.readEnum<EncryptionType>(x),
        "configurationStatus": toConfigurationStatus,
      },
      optional: {
        "kmsKeyArn": "s",
      },
    }, await resp.json());
  }

  async describeGateway(
    {abortSignal, ...params}: RequestConfig & DescribeGatewayRequest,
  ): Promise<DescribeGatewayResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeGateway",
      method: "GET",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}`,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewayId": "s",
        "gatewayName": "s",
        "gatewayArn": "s",
        "gatewayCapabilitySummaries": [toGatewayCapabilitySummary],
        "creationDate": "d",
        "lastUpdateDate": "d",
      },
      optional: {
        "gatewayPlatform": toGatewayPlatform,
      },
    }, await resp.json());
  }

  async describeGatewayCapabilityConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeGatewayCapabilityConfigurationRequest,
  ): Promise<DescribeGatewayCapabilityConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeGatewayCapabilityConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}/capability/${params["capabilityNamespace"]}`,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewayId": "s",
        "capabilityNamespace": "s",
        "capabilityConfiguration": "s",
        "capabilitySyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<CapabilitySyncStatus>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async describeLoggingOptions(
    {abortSignal, ...params}: RequestConfig & DescribeLoggingOptionsRequest = {},
  ): Promise<DescribeLoggingOptionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeLoggingOptions",
      method: "GET",
      requestUri: "/logging",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "loggingOptions": toLoggingOptions,
      },
      optional: {},
    }, await resp.json());
  }

  async describePortal(
    {abortSignal, ...params}: RequestConfig & DescribePortalRequest,
  ): Promise<DescribePortalResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePortal",
      method: "GET",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalId": "s",
        "portalArn": "s",
        "portalName": "s",
        "portalClientId": "s",
        "portalStartUrl": "s",
        "portalContactEmail": "s",
        "portalStatus": toPortalStatus,
        "portalCreationDate": "d",
        "portalLastUpdateDate": "d",
      },
      optional: {
        "portalDescription": "s",
        "portalLogoImageLocation": toImageLocation,
        "roleArn": "s",
        "portalAuthMode": (x: jsonP.JSONValue) => cmnP.readEnum<AuthMode>(x),
      },
    }, await resp.json());
  }

  async describeProject(
    {abortSignal, ...params}: RequestConfig & DescribeProjectRequest,
  ): Promise<DescribeProjectResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProject",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "projectId": "s",
        "projectArn": "s",
        "projectName": "s",
        "portalId": "s",
        "projectCreationDate": "d",
        "projectLastUpdateDate": "d",
      },
      optional: {
        "projectDescription": "s",
      },
    }, await resp.json());
  }

  async disassociateAssets(
    {abortSignal, ...params}: RequestConfig & DisassociateAssetsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      hierarchyId: params["hierarchyId"],
      childAssetId: params["childAssetId"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateAssets",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/disassociate`,
      hostPrefix: `model.`,
    });
  }

  async getAssetPropertyAggregates(
    {abortSignal, ...params}: RequestConfig & GetAssetPropertyAggregatesRequest,
  ): Promise<GetAssetPropertyAggregatesResponse> {
    const query = new URLSearchParams;
    if (params["assetId"] != null) query.set("assetId", params["assetId"]?.toString() ?? "");
    if (params["propertyId"] != null) query.set("propertyId", params["propertyId"]?.toString() ?? "");
    if (params["propertyAlias"] != null) query.set("propertyAlias", params["propertyAlias"]?.toString() ?? "");
    for (const item of params["aggregateTypes"]) {
      query.append("aggregateTypes", item?.toString() ?? "");
    }
    query.set("resolution", params["resolution"]?.toString() ?? "");
    for (const item of params["qualities"] ?? []) {
      query.append("qualities", item?.toString() ?? "");
    }
    query.set("startDate", cmnP.serializeDate_iso8601(params["startDate"]) ?? "");
    query.set("endDate", cmnP.serializeDate_iso8601(params["endDate"]) ?? "");
    if (params["timeOrdering"] != null) query.set("timeOrdering", params["timeOrdering"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAssetPropertyAggregates",
      method: "GET",
      requestUri: "/properties/aggregates",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {
        "aggregatedValues": [toAggregatedValue],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getAssetPropertyValue(
    {abortSignal, ...params}: RequestConfig & GetAssetPropertyValueRequest = {},
  ): Promise<GetAssetPropertyValueResponse> {
    const query = new URLSearchParams;
    if (params["assetId"] != null) query.set("assetId", params["assetId"]?.toString() ?? "");
    if (params["propertyId"] != null) query.set("propertyId", params["propertyId"]?.toString() ?? "");
    if (params["propertyAlias"] != null) query.set("propertyAlias", params["propertyAlias"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAssetPropertyValue",
      method: "GET",
      requestUri: "/properties/latest",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "propertyValue": toAssetPropertyValue,
      },
    }, await resp.json());
  }

  async getAssetPropertyValueHistory(
    {abortSignal, ...params}: RequestConfig & GetAssetPropertyValueHistoryRequest = {},
  ): Promise<GetAssetPropertyValueHistoryResponse> {
    const query = new URLSearchParams;
    if (params["assetId"] != null) query.set("assetId", params["assetId"]?.toString() ?? "");
    if (params["propertyId"] != null) query.set("propertyId", params["propertyId"]?.toString() ?? "");
    if (params["propertyAlias"] != null) query.set("propertyAlias", params["propertyAlias"]?.toString() ?? "");
    if (params["startDate"] != null) query.set("startDate", cmnP.serializeDate_iso8601(params["startDate"]) ?? "");
    if (params["endDate"] != null) query.set("endDate", cmnP.serializeDate_iso8601(params["endDate"]) ?? "");
    for (const item of params["qualities"] ?? []) {
      query.append("qualities", item?.toString() ?? "");
    }
    if (params["timeOrdering"] != null) query.set("timeOrdering", params["timeOrdering"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetAssetPropertyValueHistory",
      method: "GET",
      requestUri: "/properties/history",
      hostPrefix: `data.`,
    });
    return jsonP.readObj({
      required: {
        "assetPropertyValueHistory": [toAssetPropertyValue],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAccessPolicies(
    {abortSignal, ...params}: RequestConfig & ListAccessPoliciesRequest = {},
  ): Promise<ListAccessPoliciesResponse> {
    const query = new URLSearchParams;
    if (params["identityType"] != null) query.set("identityType", params["identityType"]?.toString() ?? "");
    if (params["identityId"] != null) query.set("identityId", params["identityId"]?.toString() ?? "");
    if (params["resourceType"] != null) query.set("resourceType", params["resourceType"]?.toString() ?? "");
    if (params["resourceId"] != null) query.set("resourceId", params["resourceId"]?.toString() ?? "");
    if (params["iamArn"] != null) query.set("iamArn", params["iamArn"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAccessPolicies",
      method: "GET",
      requestUri: "/access-policies",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "accessPolicySummaries": [toAccessPolicySummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssetModels(
    {abortSignal, ...params}: RequestConfig & ListAssetModelsRequest = {},
  ): Promise<ListAssetModelsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssetModels",
      method: "GET",
      requestUri: "/asset-models",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelSummaries": [toAssetModelSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssetRelationships(
    {abortSignal, ...params}: RequestConfig & ListAssetRelationshipsRequest,
  ): Promise<ListAssetRelationshipsResponse> {
    const query = new URLSearchParams;
    query.set("traversalType", params["traversalType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssetRelationships",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/assetRelationships`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetRelationshipSummaries": [toAssetRelationshipSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssets(
    {abortSignal, ...params}: RequestConfig & ListAssetsRequest = {},
  ): Promise<ListAssetsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["assetModelId"] != null) query.set("assetModelId", params["assetModelId"]?.toString() ?? "");
    if (params["filter"] != null) query.set("filter", params["filter"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssets",
      method: "GET",
      requestUri: "/assets",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetSummaries": [toAssetSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssociatedAssets(
    {abortSignal, ...params}: RequestConfig & ListAssociatedAssetsRequest,
  ): Promise<ListAssociatedAssetsResponse> {
    const query = new URLSearchParams;
    if (params["hierarchyId"] != null) query.set("hierarchyId", params["hierarchyId"]?.toString() ?? "");
    if (params["traversalDirection"] != null) query.set("traversalDirection", params["traversalDirection"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssociatedAssets",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/hierarchies`,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetSummaries": [toAssociatedAssetsSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDashboards(
    {abortSignal, ...params}: RequestConfig & ListDashboardsRequest,
  ): Promise<ListDashboardsResponse> {
    const query = new URLSearchParams;
    query.set("projectId", params["projectId"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDashboards",
      method: "GET",
      requestUri: "/dashboards",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "dashboardSummaries": [toDashboardSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listGateways(
    {abortSignal, ...params}: RequestConfig & ListGatewaysRequest = {},
  ): Promise<ListGatewaysResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGateways",
      method: "GET",
      requestUri: "/20200301/gateways",
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "gatewaySummaries": [toGatewaySummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listPortals(
    {abortSignal, ...params}: RequestConfig & ListPortalsRequest = {},
  ): Promise<ListPortalsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPortals",
      method: "GET",
      requestUri: "/portals",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "portalSummaries": [toPortalSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listProjectAssets(
    {abortSignal, ...params}: RequestConfig & ListProjectAssetsRequest,
  ): Promise<ListProjectAssetsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProjectAssets",
      method: "GET",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}/assets`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "assetIds": ["s"],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listProjects(
    {abortSignal, ...params}: RequestConfig & ListProjectsRequest,
  ): Promise<ListProjectsResponse> {
    const query = new URLSearchParams;
    query.set("portalId", params["portalId"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProjects",
      method: "GET",
      requestUri: "/projects",
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "projectSummaries": [toProjectSummary],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putDefaultEncryptionConfiguration(
    {abortSignal, ...params}: RequestConfig & PutDefaultEncryptionConfigurationRequest,
  ): Promise<PutDefaultEncryptionConfigurationResponse> {
    const body: jsonP.JSONObject = {
      encryptionType: params["encryptionType"],
      kmsKeyId: params["kmsKeyId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDefaultEncryptionConfiguration",
      requestUri: "/configuration/account/encryption",
    });
    return jsonP.readObj({
      required: {
        "encryptionType": (x: jsonP.JSONValue) => cmnP.readEnum<EncryptionType>(x),
        "configurationStatus": toConfigurationStatus,
      },
      optional: {
        "kmsKeyArn": "s",
      },
    }, await resp.json());
  }

  async putLoggingOptions(
    {abortSignal, ...params}: RequestConfig & PutLoggingOptionsRequest,
  ): Promise<PutLoggingOptionsResponse> {
    const body: jsonP.JSONObject = {
      loggingOptions: fromLoggingOptions(params["loggingOptions"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLoggingOptions",
      method: "PUT",
      requestUri: "/logging",
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "TagResource",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAccessPolicy(
    {abortSignal, ...params}: RequestConfig & UpdateAccessPolicyRequest,
  ): Promise<UpdateAccessPolicyResponse> {
    const body: jsonP.JSONObject = {
      accessPolicyIdentity: fromIdentity(params["accessPolicyIdentity"]),
      accessPolicyResource: fromResource(params["accessPolicyResource"]),
      accessPolicyPermission: params["accessPolicyPermission"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccessPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/access-policies/${params["accessPolicyId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAsset(
    {abortSignal, ...params}: RequestConfig & UpdateAssetRequest,
  ): Promise<UpdateAssetResponse> {
    const body: jsonP.JSONObject = {
      assetName: params["assetName"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAsset",
      method: "PUT",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetStatus": toAssetStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async updateAssetModel(
    {abortSignal, ...params}: RequestConfig & UpdateAssetModelRequest,
  ): Promise<UpdateAssetModelResponse> {
    const body: jsonP.JSONObject = {
      assetModelName: params["assetModelName"],
      assetModelDescription: params["assetModelDescription"],
      assetModelProperties: params["assetModelProperties"]?.map(x => fromAssetModelProperty(x)),
      assetModelHierarchies: params["assetModelHierarchies"]?.map(x => fromAssetModelHierarchy(x)),
      assetModelCompositeModels: params["assetModelCompositeModels"]?.map(x => fromAssetModelCompositeModel(x)),
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssetModel",
      method: "PUT",
      requestUri: cmnP.encodePath`/asset-models/${params["assetModelId"]}`,
      responseCode: 202,
      hostPrefix: `model.`,
    });
    return jsonP.readObj({
      required: {
        "assetModelStatus": toAssetModelStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async updateAssetProperty(
    {abortSignal, ...params}: RequestConfig & UpdateAssetPropertyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      propertyAlias: params["propertyAlias"],
      propertyNotificationState: params["propertyNotificationState"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssetProperty",
      method: "PUT",
      requestUri: cmnP.encodePath`/assets/${params["assetId"]}/properties/${params["propertyId"]}`,
      hostPrefix: `model.`,
    });
  }

  async updateDashboard(
    {abortSignal, ...params}: RequestConfig & UpdateDashboardRequest,
  ): Promise<UpdateDashboardResponse> {
    const body: jsonP.JSONObject = {
      dashboardName: params["dashboardName"],
      dashboardDescription: params["dashboardDescription"],
      dashboardDefinition: params["dashboardDefinition"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDashboard",
      method: "PUT",
      requestUri: cmnP.encodePath`/dashboards/${params["dashboardId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateGateway(
    {abortSignal, ...params}: RequestConfig & UpdateGatewayRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      gatewayName: params["gatewayName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGateway",
      method: "PUT",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}`,
      hostPrefix: `edge.`,
    });
  }

  async updateGatewayCapabilityConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateGatewayCapabilityConfigurationRequest,
  ): Promise<UpdateGatewayCapabilityConfigurationResponse> {
    const body: jsonP.JSONObject = {
      capabilityNamespace: params["capabilityNamespace"],
      capabilityConfiguration: params["capabilityConfiguration"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGatewayCapabilityConfiguration",
      requestUri: cmnP.encodePath`/20200301/gateways/${params["gatewayId"]}/capability`,
      responseCode: 201,
      hostPrefix: `edge.`,
    });
    return jsonP.readObj({
      required: {
        "capabilityNamespace": "s",
        "capabilitySyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<CapabilitySyncStatus>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async updatePortal(
    {abortSignal, ...params}: RequestConfig & UpdatePortalRequest,
  ): Promise<UpdatePortalResponse> {
    const body: jsonP.JSONObject = {
      portalName: params["portalName"],
      portalDescription: params["portalDescription"],
      portalContactEmail: params["portalContactEmail"],
      portalLogoImage: fromImage(params["portalLogoImage"]),
      roleArn: params["roleArn"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePortal",
      method: "PUT",
      requestUri: cmnP.encodePath`/portals/${params["portalId"]}`,
      responseCode: 202,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {
        "portalStatus": toPortalStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async updateProject(
    {abortSignal, ...params}: RequestConfig & UpdateProjectRequest,
  ): Promise<UpdateProjectResponse> {
    const body: jsonP.JSONObject = {
      projectName: params["projectName"],
      projectDescription: params["projectDescription"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProject",
      method: "PUT",
      requestUri: cmnP.encodePath`/projects/${params["projectId"]}`,
      responseCode: 200,
      hostPrefix: `monitor.`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  // Resource State Waiters

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetModelNotExists(
    params: RequestConfig & DescribeAssetModelRequest,
  ): Promise<Error | DescribeAssetModelResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetModelNotExists';
    for (let i = 0; i < 20; i++) {
      try {
        const resp = await this.describeAssetModel(params);
      } catch (err) {
        if (["ResourceNotFoundException"].includes(err.shortCode)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetModelActive(
    params: RequestConfig & DescribeAssetModelRequest,
  ): Promise<DescribeAssetModelResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetModelActive';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describeAssetModel(params);
      const field = resp?.assetModelStatus?.state;
      if (field === "ACTIVE") return resp;
      if (field === "FAILED") throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetNotExists(
    params: RequestConfig & DescribeAssetRequest,
  ): Promise<Error | DescribeAssetResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetNotExists';
    for (let i = 0; i < 20; i++) {
      try {
        const resp = await this.describeAsset(params);
      } catch (err) {
        if (["ResourceNotFoundException"].includes(err.shortCode)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForAssetActive(
    params: RequestConfig & DescribeAssetRequest,
  ): Promise<DescribeAssetResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AssetActive';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describeAsset(params);
      const field = resp?.assetStatus?.state;
      if (field === "ACTIVE") return resp;
      if (field === "FAILED") throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForPortalNotExists(
    params: RequestConfig & DescribePortalRequest,
  ): Promise<Error | DescribePortalResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state PortalNotExists';
    for (let i = 0; i < 20; i++) {
      try {
        const resp = await this.describePortal(params);
      } catch (err) {
        if (["ResourceNotFoundException"].includes(err.shortCode)) return err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /** Checks state up to 20 times, 3 seconds apart (about 1 minutes max wait time). */
  async waitForPortalActive(
    params: RequestConfig & DescribePortalRequest,
  ): Promise<DescribePortalResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state PortalActive';
    for (let i = 0; i < 20; i++) {
      const resp = await this.describePortal(params);
      if (resp?.portalStatus?.state === "ACTIVE") return resp;
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface AssociateAssetsRequest {
  assetId: string;
  hierarchyId: string;
  childAssetId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface BatchAssociateProjectAssetsRequest {
  projectId: string;
  assetIds: string[];
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface BatchDisassociateProjectAssetsRequest {
  projectId: string;
  assetIds: string[];
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface BatchPutAssetPropertyValueRequest {
  entries: PutAssetPropertyValueEntry[];
}

// refs: 1 - tags: named, input
export interface CreateAccessPolicyRequest {
  accessPolicyIdentity: Identity;
  accessPolicyResource: Resource;
  accessPolicyPermission: Permission;
  clientToken?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateAssetRequest {
  assetName: string;
  assetModelId: string;
  clientToken?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateAssetModelRequest {
  assetModelName: string;
  assetModelDescription?: string | null;
  assetModelProperties?: AssetModelPropertyDefinition[] | null;
  assetModelHierarchies?: AssetModelHierarchyDefinition[] | null;
  assetModelCompositeModels?: AssetModelCompositeModelDefinition[] | null;
  clientToken?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateDashboardRequest {
  projectId: string;
  dashboardName: string;
  dashboardDescription?: string | null;
  dashboardDefinition: string;
  clientToken?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateGatewayRequest {
  gatewayName: string;
  gatewayPlatform: GatewayPlatform;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreatePortalRequest {
  portalName: string;
  portalDescription?: string | null;
  portalContactEmail: string;
  clientToken?: string | null;
  portalLogoImageFile?: ImageFile | null;
  roleArn: string;
  tags?: { [key: string]: string | null | undefined } | null;
  portalAuthMode?: AuthMode | null;
}

// refs: 1 - tags: named, input
export interface CreatePresignedPortalUrlRequest {
  portalId: string;
  sessionDurationSeconds?: number | null;
  state?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateProjectRequest {
  portalId: string;
  projectName: string;
  projectDescription?: string | null;
  clientToken?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteAccessPolicyRequest {
  accessPolicyId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteAssetRequest {
  assetId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteAssetModelRequest {
  assetModelId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDashboardRequest {
  dashboardId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteGatewayRequest {
  gatewayId: string;
}

// refs: 1 - tags: named, input
export interface DeletePortalRequest {
  portalId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteProjectRequest {
  projectId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAccessPolicyRequest {
  accessPolicyId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAssetRequest {
  assetId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAssetModelRequest {
  assetModelId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAssetPropertyRequest {
  assetId: string;
  propertyId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDashboardRequest {
  dashboardId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDefaultEncryptionConfigurationRequest {
}

// refs: 1 - tags: named, input
export interface DescribeGatewayRequest {
  gatewayId: string;
}

// refs: 1 - tags: named, input
export interface DescribeGatewayCapabilityConfigurationRequest {
  gatewayId: string;
  capabilityNamespace: string;
}

// refs: 1 - tags: named, input
export interface DescribeLoggingOptionsRequest {
}

// refs: 1 - tags: named, input
export interface DescribePortalRequest {
  portalId: string;
}

// refs: 1 - tags: named, input
export interface DescribeProjectRequest {
  projectId: string;
}

// refs: 1 - tags: named, input
export interface DisassociateAssetsRequest {
  assetId: string;
  hierarchyId: string;
  childAssetId: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAssetPropertyAggregatesRequest {
  assetId?: string | null;
  propertyId?: string | null;
  propertyAlias?: string | null;
  aggregateTypes: AggregateType[];
  resolution: string;
  qualities?: Quality[] | null;
  startDate: Date | number;
  endDate: Date | number;
  timeOrdering?: TimeOrdering | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetAssetPropertyValueRequest {
  assetId?: string | null;
  propertyId?: string | null;
  propertyAlias?: string | null;
}

// refs: 1 - tags: named, input
export interface GetAssetPropertyValueHistoryRequest {
  assetId?: string | null;
  propertyId?: string | null;
  propertyAlias?: string | null;
  startDate?: Date | number | null;
  endDate?: Date | number | null;
  qualities?: Quality[] | null;
  timeOrdering?: TimeOrdering | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAccessPoliciesRequest {
  identityType?: IdentityType | null;
  identityId?: string | null;
  resourceType?: ResourceType | null;
  resourceId?: string | null;
  iamArn?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssetModelsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssetRelationshipsRequest {
  assetId: string;
  traversalType: TraversalType;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssetsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  assetModelId?: string | null;
  filter?: ListAssetsFilter | null;
}

// refs: 1 - tags: named, input
export interface ListAssociatedAssetsRequest {
  assetId: string;
  hierarchyId?: string | null;
  traversalDirection?: TraversalDirection | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDashboardsRequest {
  projectId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListGatewaysRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPortalsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListProjectAssetsRequest {
  projectId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListProjectsRequest {
  portalId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutDefaultEncryptionConfigurationRequest {
  encryptionType: EncryptionType;
  kmsKeyId?: string | null;
}

// refs: 1 - tags: named, input
export interface PutLoggingOptionsRequest {
  loggingOptions: LoggingOptions;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAccessPolicyRequest {
  accessPolicyId: string;
  accessPolicyIdentity: Identity;
  accessPolicyResource: Resource;
  accessPolicyPermission: Permission;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAssetRequest {
  assetId: string;
  assetName: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAssetModelRequest {
  assetModelId: string;
  assetModelName: string;
  assetModelDescription?: string | null;
  assetModelProperties?: AssetModelProperty[] | null;
  assetModelHierarchies?: AssetModelHierarchy[] | null;
  assetModelCompositeModels?: AssetModelCompositeModel[] | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAssetPropertyRequest {
  assetId: string;
  propertyId: string;
  propertyAlias?: string | null;
  propertyNotificationState?: PropertyNotificationState | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDashboardRequest {
  dashboardId: string;
  dashboardName: string;
  dashboardDescription?: string | null;
  dashboardDefinition: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGatewayRequest {
  gatewayId: string;
  gatewayName: string;
}

// refs: 1 - tags: named, input
export interface UpdateGatewayCapabilityConfigurationRequest {
  gatewayId: string;
  capabilityNamespace: string;
  capabilityConfiguration: string;
}

// refs: 1 - tags: named, input
export interface UpdatePortalRequest {
  portalId: string;
  portalName: string;
  portalDescription?: string | null;
  portalContactEmail: string;
  portalLogoImage?: Image | null;
  roleArn: string;
  clientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateProjectRequest {
  projectId: string;
  projectName: string;
  projectDescription?: string | null;
  clientToken?: string | null;
}

// refs: 1 - tags: named, output
export interface BatchAssociateProjectAssetsResponse {
  errors?: AssetErrorDetails[] | null;
}

// refs: 1 - tags: named, output
export interface BatchDisassociateProjectAssetsResponse {
  errors?: AssetErrorDetails[] | null;
}

// refs: 1 - tags: named, output
export interface BatchPutAssetPropertyValueResponse {
  errorEntries: BatchPutAssetPropertyErrorEntry[];
}

// refs: 1 - tags: named, output
export interface CreateAccessPolicyResponse {
  accessPolicyId: string;
  accessPolicyArn: string;
}

// refs: 1 - tags: named, output
export interface CreateAssetResponse {
  assetId: string;
  assetArn: string;
  assetStatus: AssetStatus;
}

// refs: 1 - tags: named, output
export interface CreateAssetModelResponse {
  assetModelId: string;
  assetModelArn: string;
  assetModelStatus: AssetModelStatus;
}

// refs: 1 - tags: named, output
export interface CreateDashboardResponse {
  dashboardId: string;
  dashboardArn: string;
}

// refs: 1 - tags: named, output
export interface CreateGatewayResponse {
  gatewayId: string;
  gatewayArn: string;
}

// refs: 1 - tags: named, output
export interface CreatePortalResponse {
  portalId: string;
  portalArn: string;
  portalStartUrl: string;
  portalStatus: PortalStatus;
  ssoApplicationId: string;
}

// refs: 1 - tags: named, output
export interface CreatePresignedPortalUrlResponse {
  presignedPortalUrl: string;
}

// refs: 1 - tags: named, output
export interface CreateProjectResponse {
  projectId: string;
  projectArn: string;
}

// refs: 1 - tags: named, output
export interface DeleteAccessPolicyResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAssetResponse {
  assetStatus: AssetStatus;
}

// refs: 1 - tags: named, output
export interface DeleteAssetModelResponse {
  assetModelStatus: AssetModelStatus;
}

// refs: 1 - tags: named, output
export interface DeleteDashboardResponse {
}

// refs: 1 - tags: named, output
export interface DeletePortalResponse {
  portalStatus: PortalStatus;
}

// refs: 1 - tags: named, output
export interface DeleteProjectResponse {
}

// refs: 1 - tags: named, output
export interface DescribeAccessPolicyResponse {
  accessPolicyId: string;
  accessPolicyArn: string;
  accessPolicyIdentity: Identity;
  accessPolicyResource: Resource;
  accessPolicyPermission: Permission;
  accessPolicyCreationDate: Date | number;
  accessPolicyLastUpdateDate: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribeAssetResponse {
  assetId: string;
  assetArn: string;
  assetName: string;
  assetModelId: string;
  assetProperties: AssetProperty[];
  assetHierarchies: AssetHierarchy[];
  assetCompositeModels?: AssetCompositeModel[] | null;
  assetCreationDate: Date | number;
  assetLastUpdateDate: Date | number;
  assetStatus: AssetStatus;
}

// refs: 1 - tags: named, output
export interface DescribeAssetModelResponse {
  assetModelId: string;
  assetModelArn: string;
  assetModelName: string;
  assetModelDescription: string;
  assetModelProperties: AssetModelProperty[];
  assetModelHierarchies: AssetModelHierarchy[];
  assetModelCompositeModels?: AssetModelCompositeModel[] | null;
  assetModelCreationDate: Date | number;
  assetModelLastUpdateDate: Date | number;
  assetModelStatus: AssetModelStatus;
}

// refs: 1 - tags: named, output
export interface DescribeAssetPropertyResponse {
  assetId: string;
  assetName: string;
  assetModelId: string;
  assetProperty?: Property | null;
  compositeModel?: CompositeModelProperty | null;
}

// refs: 1 - tags: named, output
export interface DescribeDashboardResponse {
  dashboardId: string;
  dashboardArn: string;
  dashboardName: string;
  projectId: string;
  dashboardDescription?: string | null;
  dashboardDefinition: string;
  dashboardCreationDate: Date | number;
  dashboardLastUpdateDate: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribeDefaultEncryptionConfigurationResponse {
  encryptionType: EncryptionType;
  kmsKeyArn?: string | null;
  configurationStatus: ConfigurationStatus;
}

// refs: 1 - tags: named, output
export interface DescribeGatewayResponse {
  gatewayId: string;
  gatewayName: string;
  gatewayArn: string;
  gatewayPlatform?: GatewayPlatform | null;
  gatewayCapabilitySummaries: GatewayCapabilitySummary[];
  creationDate: Date | number;
  lastUpdateDate: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribeGatewayCapabilityConfigurationResponse {
  gatewayId: string;
  capabilityNamespace: string;
  capabilityConfiguration: string;
  capabilitySyncStatus: CapabilitySyncStatus;
}

// refs: 1 - tags: named, output
export interface DescribeLoggingOptionsResponse {
  loggingOptions: LoggingOptions;
}

// refs: 1 - tags: named, output
export interface DescribePortalResponse {
  portalId: string;
  portalArn: string;
  portalName: string;
  portalDescription?: string | null;
  portalClientId: string;
  portalStartUrl: string;
  portalContactEmail: string;
  portalStatus: PortalStatus;
  portalCreationDate: Date | number;
  portalLastUpdateDate: Date | number;
  portalLogoImageLocation?: ImageLocation | null;
  roleArn?: string | null;
  portalAuthMode?: AuthMode | null;
}

// refs: 1 - tags: named, output
export interface DescribeProjectResponse {
  projectId: string;
  projectArn: string;
  projectName: string;
  portalId: string;
  projectDescription?: string | null;
  projectCreationDate: Date | number;
  projectLastUpdateDate: Date | number;
}

// refs: 1 - tags: named, output
export interface GetAssetPropertyAggregatesResponse {
  aggregatedValues: AggregatedValue[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAssetPropertyValueResponse {
  propertyValue?: AssetPropertyValue | null;
}

// refs: 1 - tags: named, output
export interface GetAssetPropertyValueHistoryResponse {
  assetPropertyValueHistory: AssetPropertyValue[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAccessPoliciesResponse {
  accessPolicySummaries: AccessPolicySummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssetModelsResponse {
  assetModelSummaries: AssetModelSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssetRelationshipsResponse {
  assetRelationshipSummaries: AssetRelationshipSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssetsResponse {
  assetSummaries: AssetSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssociatedAssetsResponse {
  assetSummaries: AssociatedAssetsSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDashboardsResponse {
  dashboardSummaries: DashboardSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGatewaysResponse {
  gatewaySummaries: GatewaySummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPortalsResponse {
  portalSummaries?: PortalSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProjectAssetsResponse {
  assetIds: string[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProjectsResponse {
  projectSummaries: ProjectSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PutDefaultEncryptionConfigurationResponse {
  encryptionType: EncryptionType;
  kmsKeyArn?: string | null;
  configurationStatus: ConfigurationStatus;
}

// refs: 1 - tags: named, output
export interface PutLoggingOptionsResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAccessPolicyResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAssetResponse {
  assetStatus: AssetStatus;
}

// refs: 1 - tags: named, output
export interface UpdateAssetModelResponse {
  assetModelStatus: AssetModelStatus;
}

// refs: 1 - tags: named, output
export interface UpdateDashboardResponse {
}

// refs: 1 - tags: named, output
export interface UpdateGatewayCapabilityConfigurationResponse {
  capabilityNamespace: string;
  capabilitySyncStatus: CapabilitySyncStatus;
}

// refs: 1 - tags: named, output
export interface UpdatePortalResponse {
  portalStatus: PortalStatus;
}

// refs: 1 - tags: named, output
export interface UpdateProjectResponse {
}

// refs: 1 - tags: input, named, interface
export interface PutAssetPropertyValueEntry {
  entryId: string;
  assetId?: string | null;
  propertyId?: string | null;
  propertyAlias?: string | null;
  propertyValues: AssetPropertyValue[];
}
function fromPutAssetPropertyValueEntry(input?: PutAssetPropertyValueEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    entryId: input["entryId"],
    assetId: input["assetId"],
    propertyId: input["propertyId"],
    propertyAlias: input["propertyAlias"],
    propertyValues: input["propertyValues"]?.map(x => fromAssetPropertyValue(x)),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface AssetPropertyValue {
  value: Variant;
  timestamp: TimeInNanos;
  quality?: Quality | null;
}
function fromAssetPropertyValue(input?: AssetPropertyValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: fromVariant(input["value"]),
    timestamp: fromTimeInNanos(input["timestamp"]),
    quality: input["quality"],
  }
}
function toAssetPropertyValue(root: jsonP.JSONValue): AssetPropertyValue {
  return jsonP.readObj({
    required: {
      "value": toVariant,
      "timestamp": toTimeInNanos,
    },
    optional: {
      "quality": (x: jsonP.JSONValue) => cmnP.readEnum<Quality>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Variant {
  stringValue?: string | null;
  integerValue?: number | null;
  doubleValue?: number | null;
  booleanValue?: boolean | null;
}
function fromVariant(input?: Variant | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stringValue: input["stringValue"],
    integerValue: input["integerValue"],
    doubleValue: input["doubleValue"],
    booleanValue: input["booleanValue"],
  }
}
function toVariant(root: jsonP.JSONValue): Variant {
  return jsonP.readObj({
    required: {},
    optional: {
      "stringValue": "s",
      "integerValue": "n",
      "doubleValue": "n",
      "booleanValue": "b",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface TimeInNanos {
  timeInSeconds: number;
  offsetInNanos?: number | null;
}
function fromTimeInNanos(input?: TimeInNanos | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timeInSeconds: input["timeInSeconds"],
    offsetInNanos: input["offsetInNanos"],
  }
}
function toTimeInNanos(root: jsonP.JSONValue): TimeInNanos {
  return jsonP.readObj({
    required: {
      "timeInSeconds": "n",
    },
    optional: {
      "offsetInNanos": "n",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type Quality =
| "GOOD"
| "BAD"
| "UNCERTAIN"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface Identity {
  user?: UserIdentity | null;
  group?: GroupIdentity | null;
  iamUser?: IAMUserIdentity | null;
  iamRole?: IAMRoleIdentity | null;
}
function fromIdentity(input?: Identity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    user: fromUserIdentity(input["user"]),
    group: fromGroupIdentity(input["group"]),
    iamUser: fromIAMUserIdentity(input["iamUser"]),
    iamRole: fromIAMRoleIdentity(input["iamRole"]),
  }
}
function toIdentity(root: jsonP.JSONValue): Identity {
  return jsonP.readObj({
    required: {},
    optional: {
      "user": toUserIdentity,
      "group": toGroupIdentity,
      "iamUser": toIAMUserIdentity,
      "iamRole": toIAMRoleIdentity,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface UserIdentity {
  id: string;
}
function fromUserIdentity(input?: UserIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toUserIdentity(root: jsonP.JSONValue): UserIdentity {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface GroupIdentity {
  id: string;
}
function fromGroupIdentity(input?: GroupIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toGroupIdentity(root: jsonP.JSONValue): GroupIdentity {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface IAMUserIdentity {
  arn: string;
}
function fromIAMUserIdentity(input?: IAMUserIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    arn: input["arn"],
  }
}
function toIAMUserIdentity(root: jsonP.JSONValue): IAMUserIdentity {
  return jsonP.readObj({
    required: {
      "arn": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface IAMRoleIdentity {
  arn: string;
}
function fromIAMRoleIdentity(input?: IAMRoleIdentity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    arn: input["arn"],
  }
}
function toIAMRoleIdentity(root: jsonP.JSONValue): IAMRoleIdentity {
  return jsonP.readObj({
    required: {
      "arn": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface Resource {
  portal?: PortalResource | null;
  project?: ProjectResource | null;
}
function fromResource(input?: Resource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    portal: fromPortalResource(input["portal"]),
    project: fromProjectResource(input["project"]),
  }
}
function toResource(root: jsonP.JSONValue): Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "portal": toPortalResource,
      "project": toProjectResource,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface PortalResource {
  id: string;
}
function fromPortalResource(input?: PortalResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toPortalResource(root: jsonP.JSONValue): PortalResource {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ProjectResource {
  id: string;
}
function fromProjectResource(input?: ProjectResource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}
function toProjectResource(root: jsonP.JSONValue): ProjectResource {
  return jsonP.readObj({
    required: {
      "id": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type Permission =
| "ADMINISTRATOR"
| "VIEWER"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface AssetModelPropertyDefinition {
  name: string;
  dataType: PropertyDataType;
  dataTypeSpec?: string | null;
  unit?: string | null;
  type: PropertyType;
}
function fromAssetModelPropertyDefinition(input?: AssetModelPropertyDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    dataType: input["dataType"],
    dataTypeSpec: input["dataTypeSpec"],
    unit: input["unit"],
    type: fromPropertyType(input["type"]),
  }
}

// refs: 10 - tags: input, named, enum, output
export type PropertyDataType =
| "STRING"
| "INTEGER"
| "DOUBLE"
| "BOOLEAN"
| "STRUCT"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface PropertyType {
  attribute?: Attribute | null;
  measurement?: Measurement | null;
  transform?: Transform | null;
  metric?: Metric | null;
}
function fromPropertyType(input?: PropertyType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attribute: fromAttribute(input["attribute"]),
    measurement: fromMeasurement(input["measurement"]),
    transform: fromTransform(input["transform"]),
    metric: fromMetric(input["metric"]),
  }
}
function toPropertyType(root: jsonP.JSONValue): PropertyType {
  return jsonP.readObj({
    required: {},
    optional: {
      "attribute": toAttribute,
      "measurement": toMeasurement,
      "transform": toTransform,
      "metric": toMetric,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface Attribute {
  defaultValue?: string | null;
}
function fromAttribute(input?: Attribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultValue: input["defaultValue"],
  }
}
function toAttribute(root: jsonP.JSONValue): Attribute {
  return jsonP.readObj({
    required: {},
    optional: {
      "defaultValue": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface Measurement {
}
function fromMeasurement(input?: Measurement | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}
function toMeasurement(root: jsonP.JSONValue): Measurement {
  return jsonP.readObj({
    required: {},
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface Transform {
  expression: string;
  variables: ExpressionVariable[];
}
function fromTransform(input?: Transform | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    expression: input["expression"],
    variables: input["variables"]?.map(x => fromExpressionVariable(x)),
  }
}
function toTransform(root: jsonP.JSONValue): Transform {
  return jsonP.readObj({
    required: {
      "expression": "s",
      "variables": [toExpressionVariable],
    },
    optional: {},
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface ExpressionVariable {
  name: string;
  value: VariableValue;
}
function fromExpressionVariable(input?: ExpressionVariable | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    value: fromVariableValue(input["value"]),
  }
}
function toExpressionVariable(root: jsonP.JSONValue): ExpressionVariable {
  return jsonP.readObj({
    required: {
      "name": "s",
      "value": toVariableValue,
    },
    optional: {},
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface VariableValue {
  propertyId: string;
  hierarchyId?: string | null;
}
function fromVariableValue(input?: VariableValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    propertyId: input["propertyId"],
    hierarchyId: input["hierarchyId"],
  }
}
function toVariableValue(root: jsonP.JSONValue): VariableValue {
  return jsonP.readObj({
    required: {
      "propertyId": "s",
    },
    optional: {
      "hierarchyId": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface Metric {
  expression: string;
  variables: ExpressionVariable[];
  window: MetricWindow;
}
function fromMetric(input?: Metric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    expression: input["expression"],
    variables: input["variables"]?.map(x => fromExpressionVariable(x)),
    window: fromMetricWindow(input["window"]),
  }
}
function toMetric(root: jsonP.JSONValue): Metric {
  return jsonP.readObj({
    required: {
      "expression": "s",
      "variables": [toExpressionVariable],
      "window": toMetricWindow,
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface MetricWindow {
  tumbling?: TumblingWindow | null;
}
function fromMetricWindow(input?: MetricWindow | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tumbling: fromTumblingWindow(input["tumbling"]),
  }
}
function toMetricWindow(root: jsonP.JSONValue): MetricWindow {
  return jsonP.readObj({
    required: {},
    optional: {
      "tumbling": toTumblingWindow,
    },
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface TumblingWindow {
  interval: string;
}
function fromTumblingWindow(input?: TumblingWindow | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    interval: input["interval"],
  }
}
function toTumblingWindow(root: jsonP.JSONValue): TumblingWindow {
  return jsonP.readObj({
    required: {
      "interval": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface AssetModelHierarchyDefinition {
  name: string;
  childAssetModelId: string;
}
function fromAssetModelHierarchyDefinition(input?: AssetModelHierarchyDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    childAssetModelId: input["childAssetModelId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface AssetModelCompositeModelDefinition {
  name: string;
  description?: string | null;
  type: string;
  properties?: AssetModelPropertyDefinition[] | null;
}
function fromAssetModelCompositeModelDefinition(input?: AssetModelCompositeModelDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    description: input["description"],
    type: input["type"],
    properties: input["properties"]?.map(x => fromAssetModelPropertyDefinition(x)),
  }
}

// refs: 2 - tags: input, named, interface, output
export interface GatewayPlatform {
  greengrass: Greengrass;
}
function fromGatewayPlatform(input?: GatewayPlatform | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    greengrass: fromGreengrass(input["greengrass"]),
  }
}
function toGatewayPlatform(root: jsonP.JSONValue): GatewayPlatform {
  return jsonP.readObj({
    required: {
      "greengrass": toGreengrass,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Greengrass {
  groupArn: string;
}
function fromGreengrass(input?: Greengrass | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    groupArn: input["groupArn"],
  }
}
function toGreengrass(root: jsonP.JSONValue): Greengrass {
  return jsonP.readObj({
    required: {
      "groupArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface ImageFile {
  data: Uint8Array | string;
  type: ImageFileType;
}
function fromImageFile(input?: ImageFile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    data: jsonP.serializeBlob(input["data"]),
    type: input["type"],
  }
}

// refs: 2 - tags: input, named, enum
export type ImageFileType =
| "PNG"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type AuthMode =
| "IAM"
| "SSO"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type AggregateType =
| "AVERAGE"
| "COUNT"
| "MAXIMUM"
| "MINIMUM"
| "SUM"
| "STANDARD_DEVIATION"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum
export type TimeOrdering =
| "ASCENDING"
| "DESCENDING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type IdentityType =
| "USER"
| "GROUP"
| "IAM"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ResourceType =
| "PORTAL"
| "PROJECT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type TraversalType =
| "PATH_TO_ROOT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ListAssetsFilter =
| "ALL"
| "TOP_LEVEL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type TraversalDirection =
| "PARENT"
| "CHILD"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type EncryptionType =
| "SITEWISE_DEFAULT_ENCRYPTION"
| "KMS_BASED_ENCRYPTION"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface LoggingOptions {
  level: LoggingLevel;
}
function fromLoggingOptions(input?: LoggingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    level: input["level"],
  }
}
function toLoggingOptions(root: jsonP.JSONValue): LoggingOptions {
  return jsonP.readObj({
    required: {
      "level": (x: jsonP.JSONValue) => cmnP.readEnum<LoggingLevel>(x),
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type LoggingLevel =
| "ERROR"
| "INFO"
| "OFF"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface AssetModelProperty {
  id?: string | null;
  name: string;
  dataType: PropertyDataType;
  dataTypeSpec?: string | null;
  unit?: string | null;
  type: PropertyType;
}
function fromAssetModelProperty(input?: AssetModelProperty | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    dataType: input["dataType"],
    dataTypeSpec: input["dataTypeSpec"],
    unit: input["unit"],
    type: fromPropertyType(input["type"]),
  }
}
function toAssetModelProperty(root: jsonP.JSONValue): AssetModelProperty {
  return jsonP.readObj({
    required: {
      "name": "s",
      "dataType": (x: jsonP.JSONValue) => cmnP.readEnum<PropertyDataType>(x),
      "type": toPropertyType,
    },
    optional: {
      "id": "s",
      "dataTypeSpec": "s",
      "unit": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AssetModelHierarchy {
  id?: string | null;
  name: string;
  childAssetModelId: string;
}
function fromAssetModelHierarchy(input?: AssetModelHierarchy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    childAssetModelId: input["childAssetModelId"],
  }
}
function toAssetModelHierarchy(root: jsonP.JSONValue): AssetModelHierarchy {
  return jsonP.readObj({
    required: {
      "name": "s",
      "childAssetModelId": "s",
    },
    optional: {
      "id": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AssetModelCompositeModel {
  name: string;
  description?: string | null;
  type: string;
  properties?: AssetModelProperty[] | null;
}
function fromAssetModelCompositeModel(input?: AssetModelCompositeModel | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    description: input["description"],
    type: input["type"],
    properties: input["properties"]?.map(x => fromAssetModelProperty(x)),
  }
}
function toAssetModelCompositeModel(root: jsonP.JSONValue): AssetModelCompositeModel {
  return jsonP.readObj({
    required: {
      "name": "s",
      "type": "s",
    },
    optional: {
      "description": "s",
      "properties": [toAssetModelProperty],
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type PropertyNotificationState =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface Image {
  id?: string | null;
  file?: ImageFile | null;
}
function fromImage(input?: Image | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    file: fromImageFile(input["file"]),
  }
}

// refs: 2 - tags: output, named, interface
export interface AssetErrorDetails {
  assetId: string;
  code: AssetErrorCode;
  message: string;
}
function toAssetErrorDetails(root: jsonP.JSONValue): AssetErrorDetails {
  return jsonP.readObj({
    required: {
      "assetId": "s",
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<AssetErrorCode>(x),
      "message": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type AssetErrorCode =
| "INTERNAL_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchPutAssetPropertyErrorEntry {
  entryId: string;
  errors: BatchPutAssetPropertyError[];
}
function toBatchPutAssetPropertyErrorEntry(root: jsonP.JSONValue): BatchPutAssetPropertyErrorEntry {
  return jsonP.readObj({
    required: {
      "entryId": "s",
      "errors": [toBatchPutAssetPropertyError],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchPutAssetPropertyError {
  errorCode: BatchPutAssetPropertyValueErrorCode;
  errorMessage: string;
  timestamps: TimeInNanos[];
}
function toBatchPutAssetPropertyError(root: jsonP.JSONValue): BatchPutAssetPropertyError {
  return jsonP.readObj({
    required: {
      "errorCode": (x: jsonP.JSONValue) => cmnP.readEnum<BatchPutAssetPropertyValueErrorCode>(x),
      "errorMessage": "s",
      "timestamps": [toTimeInNanos],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type BatchPutAssetPropertyValueErrorCode =
| "ResourceNotFoundException"
| "InvalidRequestException"
| "InternalFailureException"
| "ServiceUnavailableException"
| "ThrottlingException"
| "LimitExceededException"
| "ConflictingOperationException"
| "TimestampOutOfRangeException"
| "AccessDeniedException"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface AssetStatus {
  state: AssetState;
  error?: ErrorDetails | null;
}
function toAssetStatus(root: jsonP.JSONValue): AssetStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<AssetState>(x),
    },
    optional: {
      "error": toErrorDetails,
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type AssetState =
| "CREATING"
| "ACTIVE"
| "UPDATING"
| "DELETING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: output, named, interface
export interface ErrorDetails {
  code: ErrorCode;
  message: string;
}
function toErrorDetails(root: jsonP.JSONValue): ErrorDetails {
  return jsonP.readObj({
    required: {
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "message": "s",
    },
    optional: {},
  }, root);
}

// refs: 13 - tags: output, named, enum
export type ErrorCode =
| "VALIDATION_ERROR"
| "INTERNAL_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface AssetModelStatus {
  state: AssetModelState;
  error?: ErrorDetails | null;
}
function toAssetModelStatus(root: jsonP.JSONValue): AssetModelStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<AssetModelState>(x),
    },
    optional: {
      "error": toErrorDetails,
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type AssetModelState =
| "CREATING"
| "ACTIVE"
| "UPDATING"
| "PROPAGATING"
| "DELETING"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface PortalStatus {
  state: PortalState;
  error?: MonitorErrorDetails | null;
}
function toPortalStatus(root: jsonP.JSONValue): PortalStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<PortalState>(x),
    },
    optional: {
      "error": toMonitorErrorDetails,
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type PortalState =
| "CREATING"
| "UPDATING"
| "DELETING"
| "ACTIVE"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface MonitorErrorDetails {
  code?: MonitorErrorCode | null;
  message?: string | null;
}
function toMonitorErrorDetails(root: jsonP.JSONValue): MonitorErrorDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<MonitorErrorCode>(x),
      "message": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type MonitorErrorCode =
| "INTERNAL_FAILURE"
| "VALIDATION_ERROR"
| "LIMIT_EXCEEDED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface AssetProperty {
  id: string;
  name: string;
  alias?: string | null;
  notification?: PropertyNotification | null;
  dataType: PropertyDataType;
  dataTypeSpec?: string | null;
  unit?: string | null;
}
function toAssetProperty(root: jsonP.JSONValue): AssetProperty {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "dataType": (x: jsonP.JSONValue) => cmnP.readEnum<PropertyDataType>(x),
    },
    optional: {
      "alias": "s",
      "notification": toPropertyNotification,
      "dataTypeSpec": "s",
      "unit": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface PropertyNotification {
  topic: string;
  state: PropertyNotificationState;
}
function toPropertyNotification(root: jsonP.JSONValue): PropertyNotification {
  return jsonP.readObj({
    required: {
      "topic": "s",
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<PropertyNotificationState>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface AssetHierarchy {
  id?: string | null;
  name: string;
}
function toAssetHierarchy(root: jsonP.JSONValue): AssetHierarchy {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {
      "id": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssetCompositeModel {
  name: string;
  description?: string | null;
  type: string;
  properties: AssetProperty[];
}
function toAssetCompositeModel(root: jsonP.JSONValue): AssetCompositeModel {
  return jsonP.readObj({
    required: {
      "name": "s",
      "type": "s",
      "properties": [toAssetProperty],
    },
    optional: {
      "description": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Property {
  id: string;
  name: string;
  alias?: string | null;
  notification?: PropertyNotification | null;
  dataType: PropertyDataType;
  unit?: string | null;
  type?: PropertyType | null;
}
function toProperty(root: jsonP.JSONValue): Property {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "dataType": (x: jsonP.JSONValue) => cmnP.readEnum<PropertyDataType>(x),
    },
    optional: {
      "alias": "s",
      "notification": toPropertyNotification,
      "unit": "s",
      "type": toPropertyType,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CompositeModelProperty {
  name: string;
  type: string;
  assetProperty: Property;
}
function toCompositeModelProperty(root: jsonP.JSONValue): CompositeModelProperty {
  return jsonP.readObj({
    required: {
      "name": "s",
      "type": "s",
      "assetProperty": toProperty,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ConfigurationStatus {
  state: ConfigurationState;
  error?: ConfigurationErrorDetails | null;
}
function toConfigurationStatus(root: jsonP.JSONValue): ConfigurationStatus {
  return jsonP.readObj({
    required: {
      "state": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigurationState>(x),
    },
    optional: {
      "error": toConfigurationErrorDetails,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ConfigurationState =
| "ACTIVE"
| "UPDATE_IN_PROGRESS"
| "UPDATE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ConfigurationErrorDetails {
  code: ErrorCode;
  message: string;
}
function toConfigurationErrorDetails(root: jsonP.JSONValue): ConfigurationErrorDetails {
  return jsonP.readObj({
    required: {
      "code": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "message": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface GatewayCapabilitySummary {
  capabilityNamespace: string;
  capabilitySyncStatus: CapabilitySyncStatus;
}
function toGatewayCapabilitySummary(root: jsonP.JSONValue): GatewayCapabilitySummary {
  return jsonP.readObj({
    required: {
      "capabilityNamespace": "s",
      "capabilitySyncStatus": (x: jsonP.JSONValue) => cmnP.readEnum<CapabilitySyncStatus>(x),
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: output, named, enum
export type CapabilitySyncStatus =
| "IN_SYNC"
| "OUT_OF_SYNC"
| "SYNC_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ImageLocation {
  id: string;
  url: string;
}
function toImageLocation(root: jsonP.JSONValue): ImageLocation {
  return jsonP.readObj({
    required: {
      "id": "s",
      "url": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AggregatedValue {
  timestamp: Date | number;
  quality?: Quality | null;
  value: Aggregates;
}
function toAggregatedValue(root: jsonP.JSONValue): AggregatedValue {
  return jsonP.readObj({
    required: {
      "timestamp": "d",
      "value": toAggregates,
    },
    optional: {
      "quality": (x: jsonP.JSONValue) => cmnP.readEnum<Quality>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Aggregates {
  average?: number | null;
  count?: number | null;
  maximum?: number | null;
  minimum?: number | null;
  sum?: number | null;
  standardDeviation?: number | null;
}
function toAggregates(root: jsonP.JSONValue): Aggregates {
  return jsonP.readObj({
    required: {},
    optional: {
      "average": "n",
      "count": "n",
      "maximum": "n",
      "minimum": "n",
      "sum": "n",
      "standardDeviation": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccessPolicySummary {
  id: string;
  identity: Identity;
  resource: Resource;
  permission: Permission;
  creationDate?: Date | number | null;
  lastUpdateDate?: Date | number | null;
}
function toAccessPolicySummary(root: jsonP.JSONValue): AccessPolicySummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "identity": toIdentity,
      "resource": toResource,
      "permission": (x: jsonP.JSONValue) => cmnP.readEnum<Permission>(x),
    },
    optional: {
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssetModelSummary {
  id: string;
  arn: string;
  name: string;
  description: string;
  creationDate: Date | number;
  lastUpdateDate: Date | number;
  status: AssetModelStatus;
}
function toAssetModelSummary(root: jsonP.JSONValue): AssetModelSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "status": toAssetModelStatus,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssetRelationshipSummary {
  hierarchyInfo?: AssetHierarchyInfo | null;
  relationshipType: AssetRelationshipType;
}
function toAssetRelationshipSummary(root: jsonP.JSONValue): AssetRelationshipSummary {
  return jsonP.readObj({
    required: {
      "relationshipType": (x: jsonP.JSONValue) => cmnP.readEnum<AssetRelationshipType>(x),
    },
    optional: {
      "hierarchyInfo": toAssetHierarchyInfo,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssetHierarchyInfo {
  parentAssetId?: string | null;
  childAssetId?: string | null;
}
function toAssetHierarchyInfo(root: jsonP.JSONValue): AssetHierarchyInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "parentAssetId": "s",
      "childAssetId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AssetRelationshipType =
| "HIERARCHY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AssetSummary {
  id: string;
  arn: string;
  name: string;
  assetModelId: string;
  creationDate: Date | number;
  lastUpdateDate: Date | number;
  status: AssetStatus;
  hierarchies: AssetHierarchy[];
}
function toAssetSummary(root: jsonP.JSONValue): AssetSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "assetModelId": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "status": toAssetStatus,
      "hierarchies": [toAssetHierarchy],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssociatedAssetsSummary {
  id: string;
  arn: string;
  name: string;
  assetModelId: string;
  creationDate: Date | number;
  lastUpdateDate: Date | number;
  status: AssetStatus;
  hierarchies: AssetHierarchy[];
}
function toAssociatedAssetsSummary(root: jsonP.JSONValue): AssociatedAssetsSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "assetModelId": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "status": toAssetStatus,
      "hierarchies": [toAssetHierarchy],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DashboardSummary {
  id: string;
  name: string;
  description?: string | null;
  creationDate?: Date | number | null;
  lastUpdateDate?: Date | number | null;
}
function toDashboardSummary(root: jsonP.JSONValue): DashboardSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
    },
    optional: {
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GatewaySummary {
  gatewayId: string;
  gatewayName: string;
  gatewayCapabilitySummaries?: GatewayCapabilitySummary[] | null;
  creationDate: Date | number;
  lastUpdateDate: Date | number;
}
function toGatewaySummary(root: jsonP.JSONValue): GatewaySummary {
  return jsonP.readObj({
    required: {
      "gatewayId": "s",
      "gatewayName": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
    optional: {
      "gatewayCapabilitySummaries": [toGatewayCapabilitySummary],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PortalSummary {
  id: string;
  name: string;
  description?: string | null;
  startUrl: string;
  creationDate?: Date | number | null;
  lastUpdateDate?: Date | number | null;
  roleArn?: string | null;
  status: PortalStatus;
}
function toPortalSummary(root: jsonP.JSONValue): PortalSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "startUrl": "s",
      "status": toPortalStatus,
    },
    optional: {
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
      "roleArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProjectSummary {
  id: string;
  name: string;
  description?: string | null;
  creationDate?: Date | number | null;
  lastUpdateDate?: Date | number | null;
}
function toProjectSummary(root: jsonP.JSONValue): ProjectSummary {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
    },
    optional: {
      "description": "s",
      "creationDate": "d",
      "lastUpdateDate": "d",
    },
  }, root);
}
