// Autogenerated API client for: AWS Security Token Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as xmlP from "../../encoding/xml.ts";
import * as qsP from "../../encoding/querystring.ts";

export default class STS {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(STS.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2011-06-15",
    "endpointPrefix": "sts",
    "globalEndpoint": "sts.amazonaws.com",
    "protocol": "query",
    "serviceAbbreviation": "AWS STS",
    "serviceFullName": "AWS Security Token Service",
    "serviceId": "STS",
    "signatureVersion": "v4",
    "uid": "sts-2011-06-15",
    "xmlNamespace": "https://sts.amazonaws.com/doc/2011-06-15/"
  };

  async assumeRole(
    {abortSignal, ...params}: RequestConfig & AssumeRoleRequest,
  ): Promise<AssumeRoleResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"RoleArn", (params["RoleArn"] ?? '').toString());
    body.append(prefix+"RoleSessionName", (params["RoleSessionName"] ?? '').toString());
    if (params["PolicyArns"]) qsP.appendList(body, prefix+"PolicyArns", params["PolicyArns"], {"appender":PolicyDescriptorType_Serialize,"entryPrefix":".member."})
    if ("Policy" in params) body.append(prefix+"Policy", (params["Policy"] ?? '').toString());
    if ("DurationSeconds" in params) body.append(prefix+"DurationSeconds", (params["DurationSeconds"] ?? '').toString());
    if (params["Tags"]) qsP.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    if (params["TransitiveTagKeys"]) qsP.appendList(body, prefix+"TransitiveTagKeys", params["TransitiveTagKeys"], {"entryPrefix":".member."})
    if ("ExternalId" in params) body.append(prefix+"ExternalId", (params["ExternalId"] ?? '').toString());
    if ("SerialNumber" in params) body.append(prefix+"SerialNumber", (params["SerialNumber"] ?? '').toString());
    if ("TokenCode" in params) body.append(prefix+"TokenCode", (params["TokenCode"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssumeRole",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "AssumeRoleResult");
    return {
      Credentials: xml.first("Credentials", false, Credentials_Parse),
      AssumedRoleUser: xml.first("AssumedRoleUser", false, AssumedRoleUser_Parse),
      PackedPolicySize: xml.first("PackedPolicySize", false, x => parseInt(x.content ?? '0')),
    };
  }

  async assumeRoleWithSAML(
    {abortSignal, ...params}: RequestConfig & AssumeRoleWithSAMLRequest,
  ): Promise<AssumeRoleWithSAMLResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"RoleArn", (params["RoleArn"] ?? '').toString());
    body.append(prefix+"PrincipalArn", (params["PrincipalArn"] ?? '').toString());
    body.append(prefix+"SAMLAssertion", (params["SAMLAssertion"] ?? '').toString());
    if (params["PolicyArns"]) qsP.appendList(body, prefix+"PolicyArns", params["PolicyArns"], {"appender":PolicyDescriptorType_Serialize,"entryPrefix":".member."})
    if ("Policy" in params) body.append(prefix+"Policy", (params["Policy"] ?? '').toString());
    if ("DurationSeconds" in params) body.append(prefix+"DurationSeconds", (params["DurationSeconds"] ?? '').toString());
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "AssumeRoleWithSAML",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "AssumeRoleWithSAMLResult");
    return {
      ...xml.strings({
        optional: {"Subject":true,"SubjectType":true,"Issuer":true,"Audience":true,"NameQualifier":true},
      }),
      Credentials: xml.first("Credentials", false, Credentials_Parse),
      AssumedRoleUser: xml.first("AssumedRoleUser", false, AssumedRoleUser_Parse),
      PackedPolicySize: xml.first("PackedPolicySize", false, x => parseInt(x.content ?? '0')),
    };
  }

  async assumeRoleWithWebIdentity(
    {abortSignal, ...params}: RequestConfig & AssumeRoleWithWebIdentityRequest,
  ): Promise<AssumeRoleWithWebIdentityResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"RoleArn", (params["RoleArn"] ?? '').toString());
    body.append(prefix+"RoleSessionName", (params["RoleSessionName"] ?? '').toString());
    body.append(prefix+"WebIdentityToken", (params["WebIdentityToken"] ?? '').toString());
    if ("ProviderId" in params) body.append(prefix+"ProviderId", (params["ProviderId"] ?? '').toString());
    if (params["PolicyArns"]) qsP.appendList(body, prefix+"PolicyArns", params["PolicyArns"], {"appender":PolicyDescriptorType_Serialize,"entryPrefix":".member."})
    if ("Policy" in params) body.append(prefix+"Policy", (params["Policy"] ?? '').toString());
    if ("DurationSeconds" in params) body.append(prefix+"DurationSeconds", (params["DurationSeconds"] ?? '').toString());
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "AssumeRoleWithWebIdentity",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "AssumeRoleWithWebIdentityResult");
    return {
      ...xml.strings({
        optional: {"SubjectFromWebIdentityToken":true,"Provider":true,"Audience":true},
      }),
      Credentials: xml.first("Credentials", false, Credentials_Parse),
      AssumedRoleUser: xml.first("AssumedRoleUser", false, AssumedRoleUser_Parse),
      PackedPolicySize: xml.first("PackedPolicySize", false, x => parseInt(x.content ?? '0')),
    };
  }

  async decodeAuthorizationMessage(
    {abortSignal, ...params}: RequestConfig & DecodeAuthorizationMessageRequest,
  ): Promise<DecodeAuthorizationMessageResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"EncodedMessage", (params["EncodedMessage"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DecodeAuthorizationMessage",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "DecodeAuthorizationMessageResult");
    return xml.strings({
      optional: {"DecodedMessage":true},
    });
  }

  async getAccessKeyInfo(
    {abortSignal, ...params}: RequestConfig & GetAccessKeyInfoRequest,
  ): Promise<GetAccessKeyInfoResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"AccessKeyId", (params["AccessKeyId"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAccessKeyInfo",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "GetAccessKeyInfoResult");
    return xml.strings({
      optional: {"Account":true},
    });
  }

  async getCallerIdentity(
    {abortSignal, ...params}: RequestConfig & GetCallerIdentityRequest = {},
  ): Promise<GetCallerIdentityResponse> {
    const body = new URLSearchParams;
    const prefix = '';

    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCallerIdentity",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "GetCallerIdentityResult");
    return xml.strings({
      optional: {"UserId":true,"Account":true,"Arn":true},
    });
  }

  async getFederationToken(
    {abortSignal, ...params}: RequestConfig & GetFederationTokenRequest,
  ): Promise<GetFederationTokenResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    body.append(prefix+"Name", (params["Name"] ?? '').toString());
    if ("Policy" in params) body.append(prefix+"Policy", (params["Policy"] ?? '').toString());
    if (params["PolicyArns"]) qsP.appendList(body, prefix+"PolicyArns", params["PolicyArns"], {"appender":PolicyDescriptorType_Serialize,"entryPrefix":".member."})
    if ("DurationSeconds" in params) body.append(prefix+"DurationSeconds", (params["DurationSeconds"] ?? '').toString());
    if (params["Tags"]) qsP.appendList(body, prefix+"Tags", params["Tags"], {"appender":Tag_Serialize,"entryPrefix":".member."})
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFederationToken",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "GetFederationTokenResult");
    return {
      Credentials: xml.first("Credentials", false, Credentials_Parse),
      FederatedUser: xml.first("FederatedUser", false, FederatedUser_Parse),
      PackedPolicySize: xml.first("PackedPolicySize", false, x => parseInt(x.content ?? '0')),
    };
  }

  async getSessionToken(
    {abortSignal, ...params}: RequestConfig & GetSessionTokenRequest = {},
  ): Promise<GetSessionTokenResponse> {
    const body = new URLSearchParams;
    const prefix = '';
    if ("DurationSeconds" in params) body.append(prefix+"DurationSeconds", (params["DurationSeconds"] ?? '').toString());
    if ("SerialNumber" in params) body.append(prefix+"SerialNumber", (params["SerialNumber"] ?? '').toString());
    if ("TokenCode" in params) body.append(prefix+"TokenCode", (params["TokenCode"] ?? '').toString());
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSessionToken",
    });
    const xml = xmlP.readXmlResult(await resp.text(), "GetSessionTokenResult");
    return {
      Credentials: xml.first("Credentials", false, Credentials_Parse),
    };
  }

}

// refs: 1 - tags: named, input
export interface AssumeRoleRequest {
  RoleArn: string;
  RoleSessionName: string;
  PolicyArns?: PolicyDescriptorType[] | null;
  Policy?: string | null;
  DurationSeconds?: number | null;
  Tags?: Tag[] | null;
  TransitiveTagKeys?: string[] | null;
  ExternalId?: string | null;
  SerialNumber?: string | null;
  TokenCode?: string | null;
}

// refs: 1 - tags: named, input
export interface AssumeRoleWithSAMLRequest {
  RoleArn: string;
  PrincipalArn: string;
  SAMLAssertion: string;
  PolicyArns?: PolicyDescriptorType[] | null;
  Policy?: string | null;
  DurationSeconds?: number | null;
}

// refs: 1 - tags: named, input
export interface AssumeRoleWithWebIdentityRequest {
  RoleArn: string;
  RoleSessionName: string;
  WebIdentityToken: string;
  ProviderId?: string | null;
  PolicyArns?: PolicyDescriptorType[] | null;
  Policy?: string | null;
  DurationSeconds?: number | null;
}

// refs: 1 - tags: named, input
export interface DecodeAuthorizationMessageRequest {
  EncodedMessage: string;
}

// refs: 1 - tags: named, input
export interface GetAccessKeyInfoRequest {
  AccessKeyId: string;
}

// refs: 1 - tags: named, input
export interface GetCallerIdentityRequest {
}

// refs: 1 - tags: named, input
export interface GetFederationTokenRequest {
  Name: string;
  Policy?: string | null;
  PolicyArns?: PolicyDescriptorType[] | null;
  DurationSeconds?: number | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface GetSessionTokenRequest {
  DurationSeconds?: number | null;
  SerialNumber?: string | null;
  TokenCode?: string | null;
}

// refs: 1 - tags: named, output
export interface AssumeRoleResponse {
  Credentials?: Credentials | null;
  AssumedRoleUser?: AssumedRoleUser | null;
  PackedPolicySize?: number | null;
}

// refs: 1 - tags: named, output
export interface AssumeRoleWithSAMLResponse {
  Credentials?: Credentials | null;
  AssumedRoleUser?: AssumedRoleUser | null;
  PackedPolicySize?: number | null;
  Subject?: string | null;
  SubjectType?: string | null;
  Issuer?: string | null;
  Audience?: string | null;
  NameQualifier?: string | null;
}

// refs: 1 - tags: named, output
export interface AssumeRoleWithWebIdentityResponse {
  Credentials?: Credentials | null;
  SubjectFromWebIdentityToken?: string | null;
  AssumedRoleUser?: AssumedRoleUser | null;
  PackedPolicySize?: number | null;
  Provider?: string | null;
  Audience?: string | null;
}

// refs: 1 - tags: named, output
export interface DecodeAuthorizationMessageResponse {
  DecodedMessage?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAccessKeyInfoResponse {
  Account?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCallerIdentityResponse {
  UserId?: string | null;
  Account?: string | null;
  Arn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetFederationTokenResponse {
  Credentials?: Credentials | null;
  FederatedUser?: FederatedUser | null;
  PackedPolicySize?: number | null;
}

// refs: 1 - tags: named, output
export interface GetSessionTokenResponse {
  Credentials?: Credentials | null;
}

// refs: 4 - tags: input, named, interface
export interface PolicyDescriptorType {
  arn?: string | null;
}
function PolicyDescriptorType_Serialize(body: URLSearchParams, prefix: string, params: PolicyDescriptorType) {
    if ("arn" in params) body.append(prefix+".arn", (params["arn"] ?? '').toString());
}

// refs: 2 - tags: input, named, interface
export interface Tag {
  Key: string;
  Value: string;
}
function Tag_Serialize(body: URLSearchParams, prefix: string, params: Tag) {
    body.append(prefix+".Key", (params["Key"] ?? '').toString());
    body.append(prefix+".Value", (params["Value"] ?? '').toString());
}

// refs: 5 - tags: output, named, interface
export interface Credentials {
  AccessKeyId: string;
  SecretAccessKey: string;
  SessionToken: string;
  Expiration: Date | number;
}
function Credentials_Parse(node: xmlP.XmlNode): Credentials {
  return {
    ...node.strings({
      required: {"AccessKeyId":true,"SecretAccessKey":true,"SessionToken":true},
    }),
    Expiration: node.first("Expiration", true, x => xmlP.parseTimestamp(x.content)),
  };
}

// refs: 3 - tags: output, named, interface
export interface AssumedRoleUser {
  AssumedRoleId: string;
  Arn: string;
}
function AssumedRoleUser_Parse(node: xmlP.XmlNode): AssumedRoleUser {
  return node.strings({
    required: {"AssumedRoleId":true,"Arn":true},
  });
}

// refs: 1 - tags: output, named, interface
export interface FederatedUser {
  FederatedUserId: string;
  Arn: string;
}
function FederatedUser_Parse(node: xmlP.XmlNode): FederatedUser {
  return node.strings({
    required: {"FederatedUserId":true,"Arn":true},
  });
}
