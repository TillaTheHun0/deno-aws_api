// Autogenerated API client for: Amazon AppConfig

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class AppConfig {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AppConfig.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-10-09",
    "endpointPrefix": "appconfig",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AppConfig",
    "serviceFullName": "Amazon AppConfig",
    "serviceId": "AppConfig",
    "signatureVersion": "v4",
    "signingName": "appconfig",
    "uid": "appconfig-2019-10-09"
  };

  async createApplication(
    {abortSignal, ...params}: RequestConfig & s.CreateApplicationRequest,
  ): Promise<s.Application> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
      requestUri: "/applications",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async createConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateConfigurationProfileRequest,
  ): Promise<s.ConfigurationProfile> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      LocationUri: params["LocationUri"],
      RetrievalRoleArn: params["RetrievalRoleArn"],
      Validators: params["Validators"]?.map(x => fromValidator(x)),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationProfile",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "LocationUri": "s",
        "RetrievalRoleArn": "s",
        "Validators": [toValidator],
      },
    }, await resp.json());
  }

  async createDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & s.CreateDeploymentStrategyRequest,
  ): Promise<s.DeploymentStrategy> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      DeploymentDurationInMinutes: params["DeploymentDurationInMinutes"],
      FinalBakeTimeInMinutes: params["FinalBakeTimeInMinutes"],
      GrowthFactor: params["GrowthFactor"],
      GrowthType: params["GrowthType"],
      ReplicateTo: params["ReplicateTo"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeploymentStrategy",
      requestUri: "/deploymentstrategies",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "DeploymentDurationInMinutes": "n",
        "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
        "GrowthFactor": "n",
        "FinalBakeTimeInMinutes": "n",
        "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReplicateTo>(x),
      },
    }, await resp.json());
  }

  async createEnvironment(
    {abortSignal, ...params}: RequestConfig & s.CreateEnvironmentRequest,
  ): Promise<s.Environment> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      Monitors: params["Monitors"]?.map(x => fromMonitor(x)),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEnvironment",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EnvironmentState>(x),
        "Monitors": [toMonitor],
      },
    }, await resp.json());
  }

  async createHostedConfigurationVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateHostedConfigurationVersionRequest,
  ): Promise<s.HostedConfigurationVersion> {
    const body = typeof params["Content"] === 'string' ? new TextEncoder().encode(params["Content"]) : params["Content"];
    const headers = new Headers;
    if (params["Description"] != null) headers.append("Description", params["Description"]);
    headers.append("Content-Type", params["ContentType"]);
    if (params["LatestVersionNumber"] != null) headers.append("Latest-Version-Number", params["LatestVersionNumber"]?.toString() ?? '');
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateHostedConfigurationVersion",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions`,
      responseCode: 201,
    });
    return {
      ApplicationId: resp.headers.get("Application-Id"),
      ConfigurationProfileId: resp.headers.get("Configuration-Profile-Id"),
      VersionNumber: cmnP.readNum(resp.headers.get("Version-Number")),
      Description: resp.headers.get("Description"),
      ContentType: resp.headers.get("Content-Type"),
      Content: await resp.text(), // TODO: maybe allow proper body streaming,
    };
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApplication",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async deleteConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteConfigurationProfileRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async deleteDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & s.DeleteDeploymentStrategyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDeploymentStrategy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/deployementstrategies/${params["DeploymentStrategyId"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async deleteEnvironment(
    {abortSignal, ...params}: RequestConfig & s.DeleteEnvironmentRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEnvironment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async deleteHostedConfigurationVersion(
    {abortSignal, ...params}: RequestConfig & s.DeleteHostedConfigurationVersionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteHostedConfigurationVersion",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions/${params["VersionNumber"].toString()}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async getApplication(
    {abortSignal, ...params}: RequestConfig & s.GetApplicationRequest,
  ): Promise<s.Application> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApplication",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async getConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetConfigurationRequest,
  ): Promise<s.Configuration> {
    const query = new URLSearchParams;
    query.set("client_id", params["ClientId"]?.toString() ?? "");
    if (params["ClientConfigurationVersion"] != null) query.set("client_configuration_version", params["ClientConfigurationVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["Application"]}/environments/${params["Environment"]}/configurations/${params["Configuration"]}`,
      responseCode: 200,
    });
    return {
      ConfigurationVersion: resp.headers.get("Configuration-Version"),
      ContentType: resp.headers.get("Content-Type"),
      Content: await resp.text(), // TODO: maybe allow proper body streaming,
    };
  }

  async getConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & s.GetConfigurationProfileRequest,
  ): Promise<s.ConfigurationProfile> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfigurationProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "LocationUri": "s",
        "RetrievalRoleArn": "s",
        "Validators": [toValidator],
      },
    }, await resp.json());
  }

  async getDeployment(
    {abortSignal, ...params}: RequestConfig & s.GetDeploymentRequest,
  ): Promise<s.Deployment> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeployment",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments/${params["DeploymentNumber"].toString()}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "EnvironmentId": "s",
        "DeploymentStrategyId": "s",
        "ConfigurationProfileId": "s",
        "DeploymentNumber": "n",
        "ConfigurationName": "s",
        "ConfigurationLocationUri": "s",
        "ConfigurationVersion": "s",
        "Description": "s",
        "DeploymentDurationInMinutes": "n",
        "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
        "GrowthFactor": "n",
        "FinalBakeTimeInMinutes": "n",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentState>(x),
        "EventLog": [toDeploymentEvent],
        "PercentageComplete": "n",
        "StartedAt": "d",
        "CompletedAt": "d",
      },
    }, await resp.json());
  }

  async getDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & s.GetDeploymentStrategyRequest,
  ): Promise<s.DeploymentStrategy> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeploymentStrategy",
      method: "GET",
      requestUri: cmnP.encodePath`/deploymentstrategies/${params["DeploymentStrategyId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "DeploymentDurationInMinutes": "n",
        "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
        "GrowthFactor": "n",
        "FinalBakeTimeInMinutes": "n",
        "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReplicateTo>(x),
      },
    }, await resp.json());
  }

  async getEnvironment(
    {abortSignal, ...params}: RequestConfig & s.GetEnvironmentRequest,
  ): Promise<s.Environment> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEnvironment",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EnvironmentState>(x),
        "Monitors": [toMonitor],
      },
    }, await resp.json());
  }

  async getHostedConfigurationVersion(
    {abortSignal, ...params}: RequestConfig & s.GetHostedConfigurationVersionRequest,
  ): Promise<s.HostedConfigurationVersion> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetHostedConfigurationVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions/${params["VersionNumber"].toString()}`,
      responseCode: 200,
    });
    return {
      ApplicationId: resp.headers.get("Application-Id"),
      ConfigurationProfileId: resp.headers.get("Configuration-Profile-Id"),
      VersionNumber: cmnP.readNum(resp.headers.get("Version-Number")),
      Description: resp.headers.get("Description"),
      ContentType: resp.headers.get("Content-Type"),
      Content: await resp.text(), // TODO: maybe allow proper body streaming,
    };
  }

  async listApplications(
    {abortSignal, ...params}: RequestConfig & s.ListApplicationsRequest = {},
  ): Promise<s.Applications> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListApplications",
      method: "GET",
      requestUri: "/applications",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toApplication],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listConfigurationProfiles(
    {abortSignal, ...params}: RequestConfig & s.ListConfigurationProfilesRequest,
  ): Promise<s.ConfigurationProfiles> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigurationProfiles",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toConfigurationProfileSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeploymentStrategies(
    {abortSignal, ...params}: RequestConfig & s.ListDeploymentStrategiesRequest = {},
  ): Promise<s.DeploymentStrategies> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeploymentStrategies",
      method: "GET",
      requestUri: "/deploymentstrategies",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toDeploymentStrategy],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeployments(
    {abortSignal, ...params}: RequestConfig & s.ListDeploymentsRequest,
  ): Promise<s.Deployments> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeployments",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toDeploymentSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEnvironments(
    {abortSignal, ...params}: RequestConfig & s.ListEnvironmentsRequest,
  ): Promise<s.Environments> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEnvironments",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toEnvironment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHostedConfigurationVersions(
    {abortSignal, ...params}: RequestConfig & s.ListHostedConfigurationVersionsRequest,
  ): Promise<s.HostedConfigurationVersions> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListHostedConfigurationVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toHostedConfigurationVersionSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ResourceTags> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async startDeployment(
    {abortSignal, ...params}: RequestConfig & s.StartDeploymentRequest,
  ): Promise<s.Deployment> {
    const body: jsonP.JSONObject = {
      DeploymentStrategyId: params["DeploymentStrategyId"],
      ConfigurationProfileId: params["ConfigurationProfileId"],
      ConfigurationVersion: params["ConfigurationVersion"],
      Description: params["Description"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDeployment",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "EnvironmentId": "s",
        "DeploymentStrategyId": "s",
        "ConfigurationProfileId": "s",
        "DeploymentNumber": "n",
        "ConfigurationName": "s",
        "ConfigurationLocationUri": "s",
        "ConfigurationVersion": "s",
        "Description": "s",
        "DeploymentDurationInMinutes": "n",
        "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
        "GrowthFactor": "n",
        "FinalBakeTimeInMinutes": "n",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentState>(x),
        "EventLog": [toDeploymentEvent],
        "PercentageComplete": "n",
        "StartedAt": "d",
        "CompletedAt": "d",
      },
    }, await resp.json());
  }

  async stopDeployment(
    {abortSignal, ...params}: RequestConfig & s.StopDeploymentRequest,
  ): Promise<s.Deployment> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopDeployment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments/${params["DeploymentNumber"].toString()}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "EnvironmentId": "s",
        "DeploymentStrategyId": "s",
        "ConfigurationProfileId": "s",
        "DeploymentNumber": "n",
        "ConfigurationName": "s",
        "ConfigurationLocationUri": "s",
        "ConfigurationVersion": "s",
        "Description": "s",
        "DeploymentDurationInMinutes": "n",
        "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
        "GrowthFactor": "n",
        "FinalBakeTimeInMinutes": "n",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentState>(x),
        "EventLog": [toDeploymentEvent],
        "PercentageComplete": "n",
        "StartedAt": "d",
        "CompletedAt": "d",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
    await resp.text();
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & s.UpdateApplicationRequest,
  ): Promise<s.Application> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
      method: "PATCH",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async updateConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateConfigurationProfileRequest,
  ): Promise<s.ConfigurationProfile> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      RetrievalRoleArn: params["RetrievalRoleArn"],
      Validators: params["Validators"]?.map(x => fromValidator(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfigurationProfile",
      method: "PATCH",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "LocationUri": "s",
        "RetrievalRoleArn": "s",
        "Validators": [toValidator],
      },
    }, await resp.json());
  }

  async updateDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & s.UpdateDeploymentStrategyRequest,
  ): Promise<s.DeploymentStrategy> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      DeploymentDurationInMinutes: params["DeploymentDurationInMinutes"],
      FinalBakeTimeInMinutes: params["FinalBakeTimeInMinutes"],
      GrowthFactor: params["GrowthFactor"],
      GrowthType: params["GrowthType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeploymentStrategy",
      method: "PATCH",
      requestUri: cmnP.encodePath`/deploymentstrategies/${params["DeploymentStrategyId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "DeploymentDurationInMinutes": "n",
        "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
        "GrowthFactor": "n",
        "FinalBakeTimeInMinutes": "n",
        "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReplicateTo>(x),
      },
    }, await resp.json());
  }

  async updateEnvironment(
    {abortSignal, ...params}: RequestConfig & s.UpdateEnvironmentRequest,
  ): Promise<s.Environment> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      Monitors: params["Monitors"]?.map(x => fromMonitor(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEnvironment",
      method: "PATCH",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ApplicationId": "s",
        "Id": "s",
        "Name": "s",
        "Description": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EnvironmentState>(x),
        "Monitors": [toMonitor],
      },
    }, await resp.json());
  }

  async validateConfiguration(
    {abortSignal, ...params}: RequestConfig & s.ValidateConfigurationRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("configuration_version", params["ConfigurationVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ValidateConfiguration",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/validators`,
      responseCode: 204,
    });
    await resp.text();
  }

}

function toApplication(root: jsonP.JSONValue): s.Application {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

function toDeploymentStrategy(root: jsonP.JSONValue): s.DeploymentStrategy {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "DeploymentDurationInMinutes": "n",
      "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
      "GrowthFactor": "n",
      "FinalBakeTimeInMinutes": "n",
      "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReplicateTo>(x),
    },
  }, root);
}

function toEnvironment(root: jsonP.JSONValue): s.Environment {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.EnvironmentState>(x),
      "Monitors": [toMonitor],
    },
  }, root);
}

function fromValidator(input?: s.Validator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Content: input["Content"],
  }
}
function toValidator(root: jsonP.JSONValue): s.Validator {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ValidatorType>(x),
      "Content": "s",
    },
    optional: {},
  }, root);
}

function fromMonitor(input?: s.Monitor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AlarmArn: input["AlarmArn"],
    AlarmRoleArn: input["AlarmRoleArn"],
  }
}
function toMonitor(root: jsonP.JSONValue): s.Monitor {
  return jsonP.readObj({
    required: {},
    optional: {
      "AlarmArn": "s",
      "AlarmRoleArn": "s",
    },
  }, root);
}

function toDeploymentEvent(root: jsonP.JSONValue): s.DeploymentEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventType": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentEventType>(x),
      "TriggeredBy": (x: jsonP.JSONValue) => cmnP.readEnum<s.TriggeredBy>(x),
      "Description": "s",
      "OccurredAt": "d",
    },
  }, root);
}

function toConfigurationProfileSummary(root: jsonP.JSONValue): s.ConfigurationProfileSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "Id": "s",
      "Name": "s",
      "LocationUri": "s",
      "ValidatorTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.ValidatorType>(x)],
    },
  }, root);
}

function toDeploymentSummary(root: jsonP.JSONValue): s.DeploymentSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeploymentNumber": "n",
      "ConfigurationName": "s",
      "ConfigurationVersion": "s",
      "DeploymentDurationInMinutes": "n",
      "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrowthType>(x),
      "GrowthFactor": "n",
      "FinalBakeTimeInMinutes": "n",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentState>(x),
      "PercentageComplete": "n",
      "StartedAt": "d",
      "CompletedAt": "d",
    },
  }, root);
}

function toHostedConfigurationVersionSummary(root: jsonP.JSONValue): s.HostedConfigurationVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "ConfigurationProfileId": "s",
      "VersionNumber": "n",
      "Description": "s",
      "ContentType": "s",
    },
  }, root);
}
