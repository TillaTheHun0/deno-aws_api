// Autogenerated API client for: Amazon AppConfig

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class AppConfig {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AppConfig.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-10-09",
    "endpointPrefix": "appconfig",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AppConfig",
    "serviceFullName": "Amazon AppConfig",
    "serviceId": "AppConfig",
    "signatureVersion": "v4",
    "signingName": "appconfig",
    "uid": "appconfig-2019-10-09"
  };

  async createApplication(
    {abortSignal, ...params}: RequestConfig & CreateApplicationRequest,
  ): Promise<Application> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
      requestUri: "/applications",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Id": "s",
          "Name": "s",
          "Description": "s",
        },
      }, await resp.json()),
  };
  }

  async createConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & CreateConfigurationProfileRequest,
  ): Promise<ConfigurationProfile> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      LocationUri: params["LocationUri"],
      RetrievalRoleArn: params["RetrievalRoleArn"],
      Validators: params["Validators"]?.map(x => fromValidator(x)),
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationProfile",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "LocationUri": "s",
          "RetrievalRoleArn": "s",
          "Validators": [toValidator],
        },
      }, await resp.json()),
  };
  }

  async createDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & CreateDeploymentStrategyRequest,
  ): Promise<DeploymentStrategy> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      DeploymentDurationInMinutes: params["DeploymentDurationInMinutes"],
      FinalBakeTimeInMinutes: params["FinalBakeTimeInMinutes"],
      GrowthFactor: params["GrowthFactor"],
      GrowthType: params["GrowthType"],
      ReplicateTo: params["ReplicateTo"],
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeploymentStrategy",
      requestUri: "/deploymentstrategies",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "DeploymentDurationInMinutes": "n",
          "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
          "GrowthFactor": "n",
          "FinalBakeTimeInMinutes": "n",
          "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<ReplicateTo>(x),
        },
      }, await resp.json()),
  };
  }

  async createEnvironment(
    {abortSignal, ...params}: RequestConfig & CreateEnvironmentRequest,
  ): Promise<Environment> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      Monitors: params["Monitors"]?.map(x => fromMonitor(x)),
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEnvironment",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<EnvironmentState>(x),
          "Monitors": [toMonitor],
        },
      }, await resp.json()),
  };
  }

  async createHostedConfigurationVersion(
    {abortSignal, ...params}: RequestConfig & CreateHostedConfigurationVersionRequest,
  ): Promise<HostedConfigurationVersion> {
    const headers = new Headers;
    if (params["Description"] != null) headers.append("Description", params["Description"]);
    headers.append("Content-Type", params["ContentType"]);
    if (params["LatestVersionNumber"] != null) headers.append("Latest-Version-Number", params["LatestVersionNumber"]?.toString() ?? '');
    const body = typeof params["Content"] === 'string' ? new TextEncoder().encode(params["Content"]) : params["Content"];
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateHostedConfigurationVersion",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions`,
      responseCode: 201,
    });
  return {
    ApplicationId: resp.headers.get("Application-Id"),
    ConfigurationProfileId: resp.headers.get("Configuration-Profile-Id"),
    VersionNumber: cmnP.readNum(resp.headers.get("Version-Number")),
    Description: resp.headers.get("Description"),
    ContentType: resp.headers.get("Content-Type"),
    Content: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & DeleteApplicationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApplication",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}`,
      responseCode: 204,
    });
  }

  async deleteConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & DeleteConfigurationProfileRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}`,
      responseCode: 204,
    });
  }

  async deleteDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & DeleteDeploymentStrategyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDeploymentStrategy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/deployementstrategies/${params["DeploymentStrategyId"]}`,
      responseCode: 204,
    });
  }

  async deleteEnvironment(
    {abortSignal, ...params}: RequestConfig & DeleteEnvironmentRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEnvironment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}`,
      responseCode: 204,
    });
  }

  async deleteHostedConfigurationVersion(
    {abortSignal, ...params}: RequestConfig & DeleteHostedConfigurationVersionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteHostedConfigurationVersion",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions/${params["VersionNumber"].toString()}`,
      responseCode: 204,
    });
  }

  async getApplication(
    {abortSignal, ...params}: RequestConfig & GetApplicationRequest,
  ): Promise<Application> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApplication",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Id": "s",
          "Name": "s",
          "Description": "s",
        },
      }, await resp.json()),
  };
  }

  async getConfiguration(
    {abortSignal, ...params}: RequestConfig & GetConfigurationRequest,
  ): Promise<Configuration> {
    const query = new URLSearchParams;
    query.set("client_id", params["ClientId"]?.toString() ?? "");
    if (params["ClientConfigurationVersion"] != null) query.set("client_configuration_version", params["ClientConfigurationVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["Application"]}/environments/${params["Environment"]}/configurations/${params["Configuration"]}`,
      responseCode: 200,
    });
  return {
    ConfigurationVersion: resp.headers.get("Configuration-Version"),
    ContentType: resp.headers.get("Content-Type"),
    Content: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async getConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & GetConfigurationProfileRequest,
  ): Promise<ConfigurationProfile> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfigurationProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "LocationUri": "s",
          "RetrievalRoleArn": "s",
          "Validators": [toValidator],
        },
      }, await resp.json()),
  };
  }

  async getDeployment(
    {abortSignal, ...params}: RequestConfig & GetDeploymentRequest,
  ): Promise<Deployment> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeployment",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments/${params["DeploymentNumber"].toString()}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "EnvironmentId": "s",
          "DeploymentStrategyId": "s",
          "ConfigurationProfileId": "s",
          "DeploymentNumber": "n",
          "ConfigurationName": "s",
          "ConfigurationLocationUri": "s",
          "ConfigurationVersion": "s",
          "Description": "s",
          "DeploymentDurationInMinutes": "n",
          "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
          "GrowthFactor": "n",
          "FinalBakeTimeInMinutes": "n",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentState>(x),
          "EventLog": [toDeploymentEvent],
          "PercentageComplete": "n",
          "StartedAt": "d",
          "CompletedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async getDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & GetDeploymentStrategyRequest,
  ): Promise<DeploymentStrategy> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeploymentStrategy",
      method: "GET",
      requestUri: cmnP.encodePath`/deploymentstrategies/${params["DeploymentStrategyId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "DeploymentDurationInMinutes": "n",
          "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
          "GrowthFactor": "n",
          "FinalBakeTimeInMinutes": "n",
          "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<ReplicateTo>(x),
        },
      }, await resp.json()),
  };
  }

  async getEnvironment(
    {abortSignal, ...params}: RequestConfig & GetEnvironmentRequest,
  ): Promise<Environment> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEnvironment",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<EnvironmentState>(x),
          "Monitors": [toMonitor],
        },
      }, await resp.json()),
  };
  }

  async getHostedConfigurationVersion(
    {abortSignal, ...params}: RequestConfig & GetHostedConfigurationVersionRequest,
  ): Promise<HostedConfigurationVersion> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetHostedConfigurationVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions/${params["VersionNumber"].toString()}`,
      responseCode: 200,
    });
  return {
    ApplicationId: resp.headers.get("Application-Id"),
    ConfigurationProfileId: resp.headers.get("Configuration-Profile-Id"),
    VersionNumber: cmnP.readNum(resp.headers.get("Version-Number")),
    Description: resp.headers.get("Description"),
    ContentType: resp.headers.get("Content-Type"),
    Content: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async listApplications(
    {abortSignal, ...params}: RequestConfig & ListApplicationsRequest = {},
  ): Promise<Applications> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListApplications",
      method: "GET",
      requestUri: "/applications",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Items": [toApplication],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listConfigurationProfiles(
    {abortSignal, ...params}: RequestConfig & ListConfigurationProfilesRequest,
  ): Promise<ConfigurationProfiles> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigurationProfiles",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Items": [toConfigurationProfileSummary],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listDeploymentStrategies(
    {abortSignal, ...params}: RequestConfig & ListDeploymentStrategiesRequest = {},
  ): Promise<DeploymentStrategies> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeploymentStrategies",
      method: "GET",
      requestUri: "/deploymentstrategies",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Items": [toDeploymentStrategy],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listDeployments(
    {abortSignal, ...params}: RequestConfig & ListDeploymentsRequest,
  ): Promise<Deployments> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeployments",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Items": [toDeploymentSummary],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listEnvironments(
    {abortSignal, ...params}: RequestConfig & ListEnvironmentsRequest,
  ): Promise<Environments> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEnvironments",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Items": [toEnvironment],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listHostedConfigurationVersions(
    {abortSignal, ...params}: RequestConfig & ListHostedConfigurationVersionsRequest,
  ): Promise<HostedConfigurationVersions> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max_results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next_token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListHostedConfigurationVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/hostedconfigurationversions`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Items": [toHostedConfigurationVersionSummary],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ResourceTags> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async startDeployment(
    {abortSignal, ...params}: RequestConfig & StartDeploymentRequest,
  ): Promise<Deployment> {
    const body: jsonP.JSONObject = params ? {
      DeploymentStrategyId: params["DeploymentStrategyId"],
      ConfigurationProfileId: params["ConfigurationProfileId"],
      ConfigurationVersion: params["ConfigurationVersion"],
      Description: params["Description"],
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDeployment",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "EnvironmentId": "s",
          "DeploymentStrategyId": "s",
          "ConfigurationProfileId": "s",
          "DeploymentNumber": "n",
          "ConfigurationName": "s",
          "ConfigurationLocationUri": "s",
          "ConfigurationVersion": "s",
          "Description": "s",
          "DeploymentDurationInMinutes": "n",
          "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
          "GrowthFactor": "n",
          "FinalBakeTimeInMinutes": "n",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentState>(x),
          "EventLog": [toDeploymentEvent],
          "PercentageComplete": "n",
          "StartedAt": "d",
          "CompletedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async stopDeployment(
    {abortSignal, ...params}: RequestConfig & StopDeploymentRequest,
  ): Promise<Deployment> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopDeployment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}/deployments/${params["DeploymentNumber"].toString()}`,
      responseCode: 202,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "EnvironmentId": "s",
          "DeploymentStrategyId": "s",
          "ConfigurationProfileId": "s",
          "DeploymentNumber": "n",
          "ConfigurationName": "s",
          "ConfigurationLocationUri": "s",
          "ConfigurationVersion": "s",
          "Description": "s",
          "DeploymentDurationInMinutes": "n",
          "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
          "GrowthFactor": "n",
          "FinalBakeTimeInMinutes": "n",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentState>(x),
          "EventLog": [toDeploymentEvent],
          "PercentageComplete": "n",
          "StartedAt": "d",
          "CompletedAt": "d",
        },
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & UpdateApplicationRequest,
  ): Promise<Application> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
      method: "PATCH",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Id": "s",
          "Name": "s",
          "Description": "s",
        },
      }, await resp.json()),
  };
  }

  async updateConfigurationProfile(
    {abortSignal, ...params}: RequestConfig & UpdateConfigurationProfileRequest,
  ): Promise<ConfigurationProfile> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      RetrievalRoleArn: params["RetrievalRoleArn"],
      Validators: params["Validators"]?.map(x => fromValidator(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfigurationProfile",
      method: "PATCH",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "LocationUri": "s",
          "RetrievalRoleArn": "s",
          "Validators": [toValidator],
        },
      }, await resp.json()),
  };
  }

  async updateDeploymentStrategy(
    {abortSignal, ...params}: RequestConfig & UpdateDeploymentStrategyRequest,
  ): Promise<DeploymentStrategy> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      DeploymentDurationInMinutes: params["DeploymentDurationInMinutes"],
      FinalBakeTimeInMinutes: params["FinalBakeTimeInMinutes"],
      GrowthFactor: params["GrowthFactor"],
      GrowthType: params["GrowthType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDeploymentStrategy",
      method: "PATCH",
      requestUri: cmnP.encodePath`/deploymentstrategies/${params["DeploymentStrategyId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "DeploymentDurationInMinutes": "n",
          "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
          "GrowthFactor": "n",
          "FinalBakeTimeInMinutes": "n",
          "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<ReplicateTo>(x),
        },
      }, await resp.json()),
  };
  }

  async updateEnvironment(
    {abortSignal, ...params}: RequestConfig & UpdateEnvironmentRequest,
  ): Promise<Environment> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      Monitors: params["Monitors"]?.map(x => fromMonitor(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEnvironment",
      method: "PATCH",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/environments/${params["EnvironmentId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ApplicationId": "s",
          "Id": "s",
          "Name": "s",
          "Description": "s",
          "State": (x: jsonP.JSONValue) => cmnP.readEnum<EnvironmentState>(x),
          "Monitors": [toMonitor],
        },
      }, await resp.json()),
  };
  }

  async validateConfiguration(
    {abortSignal, ...params}: RequestConfig & ValidateConfigurationRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("configuration_version", params["ConfigurationVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ValidateConfiguration",
      requestUri: cmnP.encodePath`/applications/${params["ApplicationId"]}/configurationprofiles/${params["ConfigurationProfileId"]}/validators`,
      responseCode: 204,
    });
  }

}

// refs: 1 - tags: named, input
export interface CreateApplicationRequest {
  Name: string;
  Description?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateConfigurationProfileRequest {
  ApplicationId: string;
  Name: string;
  Description?: string | null;
  LocationUri: string;
  RetrievalRoleArn?: string | null;
  Validators?: Validator[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateDeploymentStrategyRequest {
  Name: string;
  Description?: string | null;
  DeploymentDurationInMinutes: number;
  FinalBakeTimeInMinutes?: number | null;
  GrowthFactor: number;
  GrowthType?: GrowthType | null;
  ReplicateTo: ReplicateTo;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateEnvironmentRequest {
  ApplicationId: string;
  Name: string;
  Description?: string | null;
  Monitors?: Monitor[] | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateHostedConfigurationVersionRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
  Description?: string | null;
  Content: Uint8Array | string;
  ContentType: string;
  LatestVersionNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteApplicationRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteConfigurationProfileRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDeploymentStrategyRequest {
  DeploymentStrategyId: string;
}

// refs: 1 - tags: named, input
export interface DeleteEnvironmentRequest {
  ApplicationId: string;
  EnvironmentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteHostedConfigurationVersionRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
  VersionNumber: number;
}

// refs: 1 - tags: named, input
export interface GetApplicationRequest {
  ApplicationId: string;
}

// refs: 1 - tags: named, input
export interface GetConfigurationRequest {
  Application: string;
  Environment: string;
  Configuration: string;
  ClientId: string;
  ClientConfigurationVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface GetConfigurationProfileRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
}

// refs: 1 - tags: named, input
export interface GetDeploymentRequest {
  ApplicationId: string;
  EnvironmentId: string;
  DeploymentNumber: number;
}

// refs: 1 - tags: named, input
export interface GetDeploymentStrategyRequest {
  DeploymentStrategyId: string;
}

// refs: 1 - tags: named, input
export interface GetEnvironmentRequest {
  ApplicationId: string;
  EnvironmentId: string;
}

// refs: 1 - tags: named, input
export interface GetHostedConfigurationVersionRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
  VersionNumber: number;
}

// refs: 1 - tags: named, input
export interface ListApplicationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListConfigurationProfilesRequest {
  ApplicationId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeploymentStrategiesRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeploymentsRequest {
  ApplicationId: string;
  EnvironmentId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListEnvironmentsRequest {
  ApplicationId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListHostedConfigurationVersionsRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface StartDeploymentRequest {
  ApplicationId: string;
  EnvironmentId: string;
  DeploymentStrategyId: string;
  ConfigurationProfileId: string;
  ConfigurationVersion: string;
  Description?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface StopDeploymentRequest {
  ApplicationId: string;
  EnvironmentId: string;
  DeploymentNumber: number;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateApplicationRequest {
  ApplicationId: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateConfigurationProfileRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
  Name?: string | null;
  Description?: string | null;
  RetrievalRoleArn?: string | null;
  Validators?: Validator[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateDeploymentStrategyRequest {
  DeploymentStrategyId: string;
  Description?: string | null;
  DeploymentDurationInMinutes?: number | null;
  FinalBakeTimeInMinutes?: number | null;
  GrowthFactor?: number | null;
  GrowthType?: GrowthType | null;
}

// refs: 1 - tags: named, input
export interface UpdateEnvironmentRequest {
  ApplicationId: string;
  EnvironmentId: string;
  Name?: string | null;
  Description?: string | null;
  Monitors?: Monitor[] | null;
}

// refs: 1 - tags: named, input
export interface ValidateConfigurationRequest {
  ApplicationId: string;
  ConfigurationProfileId: string;
  ConfigurationVersion: string;
}

// refs: 2 - tags: named, output, interface
export interface Application {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
}
function toApplication(root: jsonP.JSONValue): Application {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface ConfigurationProfile {
  ApplicationId?: string | null;
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  LocationUri?: string | null;
  RetrievalRoleArn?: string | null;
  Validators?: Validator[] | null;
}

// refs: 2 - tags: named, output, interface
export interface DeploymentStrategy {
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  DeploymentDurationInMinutes?: number | null;
  GrowthType?: GrowthType | null;
  GrowthFactor?: number | null;
  FinalBakeTimeInMinutes?: number | null;
  ReplicateTo?: ReplicateTo | null;
}
function toDeploymentStrategy(root: jsonP.JSONValue): DeploymentStrategy {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "DeploymentDurationInMinutes": "n",
      "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
      "GrowthFactor": "n",
      "FinalBakeTimeInMinutes": "n",
      "ReplicateTo": (x: jsonP.JSONValue) => cmnP.readEnum<ReplicateTo>(x),
    },
  }, root);
}

// refs: 2 - tags: named, output, interface
export interface Environment {
  ApplicationId?: string | null;
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  State?: EnvironmentState | null;
  Monitors?: Monitor[] | null;
}
function toEnvironment(root: jsonP.JSONValue): Environment {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<EnvironmentState>(x),
      "Monitors": [toMonitor],
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface HostedConfigurationVersion {
  ApplicationId?: string | null;
  ConfigurationProfileId?: string | null;
  VersionNumber?: number | null;
  Description?: string | null;
  Content?: Uint8Array | string | null;
  ContentType?: string | null;
}

// refs: 1 - tags: named, output
export interface Configuration {
  Content?: Uint8Array | string | null;
  ConfigurationVersion?: string | null;
  ContentType?: string | null;
}

// refs: 1 - tags: named, output
export interface Deployment {
  ApplicationId?: string | null;
  EnvironmentId?: string | null;
  DeploymentStrategyId?: string | null;
  ConfigurationProfileId?: string | null;
  DeploymentNumber?: number | null;
  ConfigurationName?: string | null;
  ConfigurationLocationUri?: string | null;
  ConfigurationVersion?: string | null;
  Description?: string | null;
  DeploymentDurationInMinutes?: number | null;
  GrowthType?: GrowthType | null;
  GrowthFactor?: number | null;
  FinalBakeTimeInMinutes?: number | null;
  State?: DeploymentState | null;
  EventLog?: DeploymentEvent[] | null;
  PercentageComplete?: number | null;
  StartedAt?: Date | number | null;
  CompletedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface Applications {
  Items?: Application[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ConfigurationProfiles {
  Items?: ConfigurationProfileSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeploymentStrategies {
  Items?: DeploymentStrategy[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface Deployments {
  Items?: DeploymentSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface Environments {
  Items?: Environment[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface HostedConfigurationVersions {
  Items?: HostedConfigurationVersionSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ResourceTags {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 3 - tags: input, named, interface, output
export interface Validator {
  Type: ValidatorType;
  Content: string;
}
function fromValidator(input?: Validator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Content: input["Content"],
  }
}
function toValidator(root: jsonP.JSONValue): Validator {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ValidatorType>(x),
      "Content": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ValidatorType =
| "JSON_SCHEMA"
| "LAMBDA"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type GrowthType =
| "LINEAR"
| "EXPONENTIAL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ReplicateTo =
| "NONE"
| "SSM_DOCUMENT"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface Monitor {
  AlarmArn?: string | null;
  AlarmRoleArn?: string | null;
}
function fromMonitor(input?: Monitor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AlarmArn: input["AlarmArn"],
    AlarmRoleArn: input["AlarmRoleArn"],
  }
}
function toMonitor(root: jsonP.JSONValue): Monitor {
  return jsonP.readObj({
    required: {},
    optional: {
      "AlarmArn": "s",
      "AlarmRoleArn": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type EnvironmentState =
| "READY_FOR_DEPLOYMENT"
| "DEPLOYING"
| "ROLLING_BACK"
| "ROLLED_BACK"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type DeploymentState =
| "BAKING"
| "VALIDATING"
| "DEPLOYING"
| "COMPLETE"
| "ROLLING_BACK"
| "ROLLED_BACK"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DeploymentEvent {
  EventType?: DeploymentEventType | null;
  TriggeredBy?: TriggeredBy | null;
  Description?: string | null;
  OccurredAt?: Date | number | null;
}
function toDeploymentEvent(root: jsonP.JSONValue): DeploymentEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventType": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentEventType>(x),
      "TriggeredBy": (x: jsonP.JSONValue) => cmnP.readEnum<TriggeredBy>(x),
      "Description": "s",
      "OccurredAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DeploymentEventType =
| "PERCENTAGE_UPDATED"
| "ROLLBACK_STARTED"
| "ROLLBACK_COMPLETED"
| "BAKE_TIME_STARTED"
| "DEPLOYMENT_STARTED"
| "DEPLOYMENT_COMPLETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type TriggeredBy =
| "USER"
| "APPCONFIG"
| "CLOUDWATCH_ALARM"
| "INTERNAL_ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConfigurationProfileSummary {
  ApplicationId?: string | null;
  Id?: string | null;
  Name?: string | null;
  LocationUri?: string | null;
  ValidatorTypes?: ValidatorType[] | null;
}
function toConfigurationProfileSummary(root: jsonP.JSONValue): ConfigurationProfileSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "Id": "s",
      "Name": "s",
      "LocationUri": "s",
      "ValidatorTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<ValidatorType>(x)],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeploymentSummary {
  DeploymentNumber?: number | null;
  ConfigurationName?: string | null;
  ConfigurationVersion?: string | null;
  DeploymentDurationInMinutes?: number | null;
  GrowthType?: GrowthType | null;
  GrowthFactor?: number | null;
  FinalBakeTimeInMinutes?: number | null;
  State?: DeploymentState | null;
  PercentageComplete?: number | null;
  StartedAt?: Date | number | null;
  CompletedAt?: Date | number | null;
}
function toDeploymentSummary(root: jsonP.JSONValue): DeploymentSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeploymentNumber": "n",
      "ConfigurationName": "s",
      "ConfigurationVersion": "s",
      "DeploymentDurationInMinutes": "n",
      "GrowthType": (x: jsonP.JSONValue) => cmnP.readEnum<GrowthType>(x),
      "GrowthFactor": "n",
      "FinalBakeTimeInMinutes": "n",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentState>(x),
      "PercentageComplete": "n",
      "StartedAt": "d",
      "CompletedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HostedConfigurationVersionSummary {
  ApplicationId?: string | null;
  ConfigurationProfileId?: string | null;
  VersionNumber?: number | null;
  Description?: string | null;
  ContentType?: string | null;
}
function toHostedConfigurationVersionSummary(root: jsonP.JSONValue): HostedConfigurationVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationId": "s",
      "ConfigurationProfileId": "s",
      "VersionNumber": "n",
      "Description": "s",
      "ContentType": "s",
    },
  }, root);
}
