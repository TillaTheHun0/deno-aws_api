// Autogenerated API client for: AWS Storage Gateway

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class StorageGateway {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(StorageGateway.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2013-06-30",
    "endpointPrefix": "storagegateway",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Storage Gateway",
    "serviceId": "Storage Gateway",
    "signatureVersion": "v4",
    "targetPrefix": "StorageGateway_20130630",
    "uid": "storagegateway-2013-06-30"
  };

  async activateGateway(
    {abortSignal, ...params}: RequestConfig & ActivateGatewayInput,
  ): Promise<ActivateGatewayOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ActivateGateway",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async addCache(
    {abortSignal, ...params}: RequestConfig & AddCacheInput,
  ): Promise<AddCacheOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddCache",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async addTagsToResource(
    {abortSignal, ...params}: RequestConfig & AddTagsToResourceInput,
  ): Promise<AddTagsToResourceOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTagsToResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ResourceARN": "s",
      },
    }, await resp.json());
  }

  async addUploadBuffer(
    {abortSignal, ...params}: RequestConfig & AddUploadBufferInput,
  ): Promise<AddUploadBufferOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddUploadBuffer",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async addWorkingStorage(
    {abortSignal, ...params}: RequestConfig & AddWorkingStorageInput,
  ): Promise<AddWorkingStorageOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddWorkingStorage",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async assignTapePool(
    {abortSignal, ...params}: RequestConfig & AssignTapePoolInput,
  ): Promise<AssignTapePoolOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssignTapePool",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async attachVolume(
    {abortSignal, ...params}: RequestConfig & AttachVolumeInput,
  ): Promise<AttachVolumeOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachVolume",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
        "TargetARN": "s",
      },
    }, await resp.json());
  }

  async cancelArchival(
    {abortSignal, ...params}: RequestConfig & CancelArchivalInput,
  ): Promise<CancelArchivalOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelArchival",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async cancelRetrieval(
    {abortSignal, ...params}: RequestConfig & CancelRetrievalInput,
  ): Promise<CancelRetrievalOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelRetrieval",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async createCachediSCSIVolume(
    {abortSignal, ...params}: RequestConfig & CreateCachediSCSIVolumeInput,
  ): Promise<CreateCachediSCSIVolumeOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCachediSCSIVolume",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
        "TargetARN": "s",
      },
    }, await resp.json());
  }

  async createNFSFileShare(
    {abortSignal, ...params}: RequestConfig & CreateNFSFileShareInput,
  ): Promise<CreateNFSFileShareOutput> {
    const body: JSONObject = {...params,
    NFSFileShareDefaults: fromNFSFileShareDefaults(params["NFSFileShareDefaults"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
    CacheAttributes: fromCacheAttributes(params["CacheAttributes"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNFSFileShare",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FileShareARN": "s",
      },
    }, await resp.json());
  }

  async createSMBFileShare(
    {abortSignal, ...params}: RequestConfig & CreateSMBFileShareInput,
  ): Promise<CreateSMBFileShareOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
    CacheAttributes: fromCacheAttributes(params["CacheAttributes"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSMBFileShare",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FileShareARN": "s",
      },
    }, await resp.json());
  }

  async createSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateSnapshotInput,
  ): Promise<CreateSnapshotOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSnapshot",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
        "SnapshotId": "s",
      },
    }, await resp.json());
  }

  async createSnapshotFromVolumeRecoveryPoint(
    {abortSignal, ...params}: RequestConfig & CreateSnapshotFromVolumeRecoveryPointInput,
  ): Promise<CreateSnapshotFromVolumeRecoveryPointOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSnapshotFromVolumeRecoveryPoint",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SnapshotId": "s",
        "VolumeARN": "s",
        "VolumeRecoveryPointTime": "s",
      },
    }, await resp.json());
  }

  async createStorediSCSIVolume(
    {abortSignal, ...params}: RequestConfig & CreateStorediSCSIVolumeInput,
  ): Promise<CreateStorediSCSIVolumeOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateStorediSCSIVolume",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
        "VolumeSizeInBytes": "n",
        "TargetARN": "s",
      },
    }, await resp.json());
  }

  async createTapePool(
    {abortSignal, ...params}: RequestConfig & CreateTapePoolInput,
  ): Promise<CreateTapePoolOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTapePool",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PoolARN": "s",
      },
    }, await resp.json());
  }

  async createTapeWithBarcode(
    {abortSignal, ...params}: RequestConfig & CreateTapeWithBarcodeInput,
  ): Promise<CreateTapeWithBarcodeOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTapeWithBarcode",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async createTapes(
    {abortSignal, ...params}: RequestConfig & CreateTapesInput,
  ): Promise<CreateTapesOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTapes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARNs": ["s"],
      },
    }, await resp.json());
  }

  async deleteAutomaticTapeCreationPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteAutomaticTapeCreationPolicyInput,
  ): Promise<DeleteAutomaticTapeCreationPolicyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAutomaticTapeCreationPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async deleteBandwidthRateLimit(
    {abortSignal, ...params}: RequestConfig & DeleteBandwidthRateLimitInput,
  ): Promise<DeleteBandwidthRateLimitOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBandwidthRateLimit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async deleteChapCredentials(
    {abortSignal, ...params}: RequestConfig & DeleteChapCredentialsInput,
  ): Promise<DeleteChapCredentialsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteChapCredentials",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TargetARN": "s",
        "InitiatorName": "s",
      },
    }, await resp.json());
  }

  async deleteFileShare(
    {abortSignal, ...params}: RequestConfig & DeleteFileShareInput,
  ): Promise<DeleteFileShareOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFileShare",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FileShareARN": "s",
      },
    }, await resp.json());
  }

  async deleteGateway(
    {abortSignal, ...params}: RequestConfig & DeleteGatewayInput,
  ): Promise<DeleteGatewayOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGateway",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async deleteSnapshotSchedule(
    {abortSignal, ...params}: RequestConfig & DeleteSnapshotScheduleInput,
  ): Promise<DeleteSnapshotScheduleOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSnapshotSchedule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
      },
    }, await resp.json());
  }

  async deleteTape(
    {abortSignal, ...params}: RequestConfig & DeleteTapeInput,
  ): Promise<DeleteTapeOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTape",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async deleteTapeArchive(
    {abortSignal, ...params}: RequestConfig & DeleteTapeArchiveInput,
  ): Promise<DeleteTapeArchiveOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTapeArchive",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async deleteTapePool(
    {abortSignal, ...params}: RequestConfig & DeleteTapePoolInput,
  ): Promise<DeleteTapePoolOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTapePool",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PoolARN": "s",
      },
    }, await resp.json());
  }

  async deleteVolume(
    {abortSignal, ...params}: RequestConfig & DeleteVolumeInput,
  ): Promise<DeleteVolumeOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteVolume",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
      },
    }, await resp.json());
  }

  async describeAvailabilityMonitorTest(
    {abortSignal, ...params}: RequestConfig & DescribeAvailabilityMonitorTestInput,
  ): Promise<DescribeAvailabilityMonitorTestOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAvailabilityMonitorTest",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "Status": toAvailabilityMonitorTestStatus,
        "StartTime": "d",
      },
    }, await resp.json());
  }

  async describeBandwidthRateLimit(
    {abortSignal, ...params}: RequestConfig & DescribeBandwidthRateLimitInput,
  ): Promise<DescribeBandwidthRateLimitOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBandwidthRateLimit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "AverageUploadRateLimitInBitsPerSec": "n",
        "AverageDownloadRateLimitInBitsPerSec": "n",
      },
    }, await resp.json());
  }

  async describeCache(
    {abortSignal, ...params}: RequestConfig & DescribeCacheInput,
  ): Promise<DescribeCacheOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCache",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "DiskIds": ["s"],
        "CacheAllocatedInBytes": "n",
        "CacheUsedPercentage": "n",
        "CacheDirtyPercentage": "n",
        "CacheHitPercentage": "n",
        "CacheMissPercentage": "n",
      },
    }, await resp.json());
  }

  async describeCachediSCSIVolumes(
    {abortSignal, ...params}: RequestConfig & DescribeCachediSCSIVolumesInput,
  ): Promise<DescribeCachediSCSIVolumesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCachediSCSIVolumes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CachediSCSIVolumes": [toCachediSCSIVolume],
      },
    }, await resp.json());
  }

  async describeChapCredentials(
    {abortSignal, ...params}: RequestConfig & DescribeChapCredentialsInput,
  ): Promise<DescribeChapCredentialsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeChapCredentials",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChapCredentials": [toChapInfo],
      },
    }, await resp.json());
  }

  async describeGatewayInformation(
    {abortSignal, ...params}: RequestConfig & DescribeGatewayInformationInput,
  ): Promise<DescribeGatewayInformationOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeGatewayInformation",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "GatewayId": "s",
        "GatewayName": "s",
        "GatewayTimezone": "s",
        "GatewayState": "s",
        "GatewayNetworkInterfaces": [toNetworkInterface],
        "GatewayType": "s",
        "NextUpdateAvailabilityDate": "s",
        "LastSoftwareUpdate": "s",
        "Ec2InstanceId": "s",
        "Ec2InstanceRegion": "s",
        "Tags": [toTag],
        "VPCEndpoint": "s",
        "CloudWatchLogGroupARN": "s",
        "HostEnvironment": toHostEnvironment,
        "EndpointType": "s",
        "SoftwareUpdatesEndDate": "s",
        "DeprecationDate": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceStartTime(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceStartTimeInput,
  ): Promise<DescribeMaintenanceStartTimeOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceStartTime",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "HourOfDay": "n",
        "MinuteOfHour": "n",
        "DayOfWeek": "n",
        "DayOfMonth": "n",
        "Timezone": "s",
      },
    }, await resp.json());
  }

  async describeNFSFileShares(
    {abortSignal, ...params}: RequestConfig & DescribeNFSFileSharesInput,
  ): Promise<DescribeNFSFileSharesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeNFSFileShares",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NFSFileShareInfoList": [toNFSFileShareInfo],
      },
    }, await resp.json());
  }

  async describeSMBFileShares(
    {abortSignal, ...params}: RequestConfig & DescribeSMBFileSharesInput,
  ): Promise<DescribeSMBFileSharesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSMBFileShares",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SMBFileShareInfoList": [toSMBFileShareInfo],
      },
    }, await resp.json());
  }

  async describeSMBSettings(
    {abortSignal, ...params}: RequestConfig & DescribeSMBSettingsInput,
  ): Promise<DescribeSMBSettingsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSMBSettings",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "DomainName": "s",
        "ActiveDirectoryStatus": toActiveDirectoryStatus,
        "SMBGuestPasswordSet": "b",
        "SMBSecurityStrategy": toSMBSecurityStrategy,
      },
    }, await resp.json());
  }

  async describeSnapshotSchedule(
    {abortSignal, ...params}: RequestConfig & DescribeSnapshotScheduleInput,
  ): Promise<DescribeSnapshotScheduleOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSnapshotSchedule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
        "StartAt": "n",
        "RecurrenceInHours": "n",
        "Description": "s",
        "Timezone": "s",
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async describeStorediSCSIVolumes(
    {abortSignal, ...params}: RequestConfig & DescribeStorediSCSIVolumesInput,
  ): Promise<DescribeStorediSCSIVolumesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeStorediSCSIVolumes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "StorediSCSIVolumes": [toStorediSCSIVolume],
      },
    }, await resp.json());
  }

  async describeTapeArchives(
    {abortSignal, ...params}: RequestConfig & DescribeTapeArchivesInput = {},
  ): Promise<DescribeTapeArchivesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTapeArchives",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeArchives": [toTapeArchive],
        "Marker": "s",
      },
    }, await resp.json());
  }

  async describeTapeRecoveryPoints(
    {abortSignal, ...params}: RequestConfig & DescribeTapeRecoveryPointsInput,
  ): Promise<DescribeTapeRecoveryPointsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTapeRecoveryPoints",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "TapeRecoveryPointInfos": [toTapeRecoveryPointInfo],
        "Marker": "s",
      },
    }, await resp.json());
  }

  async describeTapes(
    {abortSignal, ...params}: RequestConfig & DescribeTapesInput,
  ): Promise<DescribeTapesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTapes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tapes": [toTape],
        "Marker": "s",
      },
    }, await resp.json());
  }

  async describeUploadBuffer(
    {abortSignal, ...params}: RequestConfig & DescribeUploadBufferInput,
  ): Promise<DescribeUploadBufferOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUploadBuffer",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "DiskIds": ["s"],
        "UploadBufferUsedInBytes": "n",
        "UploadBufferAllocatedInBytes": "n",
      },
    }, await resp.json());
  }

  async describeVTLDevices(
    {abortSignal, ...params}: RequestConfig & DescribeVTLDevicesInput,
  ): Promise<DescribeVTLDevicesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeVTLDevices",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "VTLDevices": [toVTLDevice],
        "Marker": "s",
      },
    }, await resp.json());
  }

  async describeWorkingStorage(
    {abortSignal, ...params}: RequestConfig & DescribeWorkingStorageInput,
  ): Promise<DescribeWorkingStorageOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeWorkingStorage",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "DiskIds": ["s"],
        "WorkingStorageUsedInBytes": "n",
        "WorkingStorageAllocatedInBytes": "n",
      },
    }, await resp.json());
  }

  async detachVolume(
    {abortSignal, ...params}: RequestConfig & DetachVolumeInput,
  ): Promise<DetachVolumeOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachVolume",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
      },
    }, await resp.json());
  }

  async disableGateway(
    {abortSignal, ...params}: RequestConfig & DisableGatewayInput,
  ): Promise<DisableGatewayOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableGateway",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async joinDomain(
    {abortSignal, ...params}: RequestConfig & JoinDomainInput,
  ): Promise<JoinDomainOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "JoinDomain",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "ActiveDirectoryStatus": toActiveDirectoryStatus,
      },
    }, await resp.json());
  }

  async listAutomaticTapeCreationPolicies(
    {abortSignal, ...params}: RequestConfig & ListAutomaticTapeCreationPoliciesInput = {},
  ): Promise<ListAutomaticTapeCreationPoliciesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAutomaticTapeCreationPolicies",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AutomaticTapeCreationPolicyInfos": [toAutomaticTapeCreationPolicyInfo],
      },
    }, await resp.json());
  }

  async listFileShares(
    {abortSignal, ...params}: RequestConfig & ListFileSharesInput = {},
  ): Promise<ListFileSharesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFileShares",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Marker": "s",
        "NextMarker": "s",
        "FileShareInfoList": [toFileShareInfo],
      },
    }, await resp.json());
  }

  async listGateways(
    {abortSignal, ...params}: RequestConfig & ListGatewaysInput = {},
  ): Promise<ListGatewaysOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGateways",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Gateways": [toGatewayInfo],
        "Marker": "s",
      },
    }, await resp.json());
  }

  async listLocalDisks(
    {abortSignal, ...params}: RequestConfig & ListLocalDisksInput,
  ): Promise<ListLocalDisksOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLocalDisks",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "Disks": [toDisk],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ResourceARN": "s",
        "Marker": "s",
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listTapePools(
    {abortSignal, ...params}: RequestConfig & ListTapePoolsInput = {},
  ): Promise<ListTapePoolsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTapePools",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PoolInfos": [toPoolInfo],
        "Marker": "s",
      },
    }, await resp.json());
  }

  async listTapes(
    {abortSignal, ...params}: RequestConfig & ListTapesInput = {},
  ): Promise<ListTapesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTapes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeInfos": [toTapeInfo],
        "Marker": "s",
      },
    }, await resp.json());
  }

  async listVolumeInitiators(
    {abortSignal, ...params}: RequestConfig & ListVolumeInitiatorsInput,
  ): Promise<ListVolumeInitiatorsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListVolumeInitiators",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Initiators": ["s"],
      },
    }, await resp.json());
  }

  async listVolumeRecoveryPoints(
    {abortSignal, ...params}: RequestConfig & ListVolumeRecoveryPointsInput,
  ): Promise<ListVolumeRecoveryPointsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListVolumeRecoveryPoints",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "VolumeRecoveryPointInfos": [toVolumeRecoveryPointInfo],
      },
    }, await resp.json());
  }

  async listVolumes(
    {abortSignal, ...params}: RequestConfig & ListVolumesInput = {},
  ): Promise<ListVolumesOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListVolumes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "Marker": "s",
        "VolumeInfos": [toVolumeInfo],
      },
    }, await resp.json());
  }

  async notifyWhenUploaded(
    {abortSignal, ...params}: RequestConfig & NotifyWhenUploadedInput,
  ): Promise<NotifyWhenUploadedOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "NotifyWhenUploaded",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FileShareARN": "s",
        "NotificationId": "s",
      },
    }, await resp.json());
  }

  async refreshCache(
    {abortSignal, ...params}: RequestConfig & RefreshCacheInput,
  ): Promise<RefreshCacheOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RefreshCache",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FileShareARN": "s",
        "NotificationId": "s",
      },
    }, await resp.json());
  }

  async removeTagsFromResource(
    {abortSignal, ...params}: RequestConfig & RemoveTagsFromResourceInput,
  ): Promise<RemoveTagsFromResourceOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTagsFromResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ResourceARN": "s",
      },
    }, await resp.json());
  }

  async resetCache(
    {abortSignal, ...params}: RequestConfig & ResetCacheInput,
  ): Promise<ResetCacheOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetCache",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async retrieveTapeArchive(
    {abortSignal, ...params}: RequestConfig & RetrieveTapeArchiveInput,
  ): Promise<RetrieveTapeArchiveOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RetrieveTapeArchive",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async retrieveTapeRecoveryPoint(
    {abortSignal, ...params}: RequestConfig & RetrieveTapeRecoveryPointInput,
  ): Promise<RetrieveTapeRecoveryPointOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RetrieveTapeRecoveryPoint",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TapeARN": "s",
      },
    }, await resp.json());
  }

  async setLocalConsolePassword(
    {abortSignal, ...params}: RequestConfig & SetLocalConsolePasswordInput,
  ): Promise<SetLocalConsolePasswordOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetLocalConsolePassword",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async setSMBGuestPassword(
    {abortSignal, ...params}: RequestConfig & SetSMBGuestPasswordInput,
  ): Promise<SetSMBGuestPasswordOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetSMBGuestPassword",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async shutdownGateway(
    {abortSignal, ...params}: RequestConfig & ShutdownGatewayInput,
  ): Promise<ShutdownGatewayOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ShutdownGateway",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async startAvailabilityMonitorTest(
    {abortSignal, ...params}: RequestConfig & StartAvailabilityMonitorTestInput,
  ): Promise<StartAvailabilityMonitorTestOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartAvailabilityMonitorTest",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async startGateway(
    {abortSignal, ...params}: RequestConfig & StartGatewayInput,
  ): Promise<StartGatewayOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartGateway",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async updateAutomaticTapeCreationPolicy(
    {abortSignal, ...params}: RequestConfig & UpdateAutomaticTapeCreationPolicyInput,
  ): Promise<UpdateAutomaticTapeCreationPolicyOutput> {
    const body: JSONObject = {...params,
    AutomaticTapeCreationRules: params["AutomaticTapeCreationRules"]?.map(x => fromAutomaticTapeCreationRule(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAutomaticTapeCreationPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async updateBandwidthRateLimit(
    {abortSignal, ...params}: RequestConfig & UpdateBandwidthRateLimitInput,
  ): Promise<UpdateBandwidthRateLimitOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBandwidthRateLimit",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async updateChapCredentials(
    {abortSignal, ...params}: RequestConfig & UpdateChapCredentialsInput,
  ): Promise<UpdateChapCredentialsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateChapCredentials",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TargetARN": "s",
        "InitiatorName": "s",
      },
    }, await resp.json());
  }

  async updateGatewayInformation(
    {abortSignal, ...params}: RequestConfig & UpdateGatewayInformationInput,
  ): Promise<UpdateGatewayInformationOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGatewayInformation",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
        "GatewayName": "s",
      },
    }, await resp.json());
  }

  async updateGatewaySoftwareNow(
    {abortSignal, ...params}: RequestConfig & UpdateGatewaySoftwareNowInput,
  ): Promise<UpdateGatewaySoftwareNowOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGatewaySoftwareNow",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async updateMaintenanceStartTime(
    {abortSignal, ...params}: RequestConfig & UpdateMaintenanceStartTimeInput,
  ): Promise<UpdateMaintenanceStartTimeOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMaintenanceStartTime",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async updateNFSFileShare(
    {abortSignal, ...params}: RequestConfig & UpdateNFSFileShareInput,
  ): Promise<UpdateNFSFileShareOutput> {
    const body: JSONObject = {...params,
    NFSFileShareDefaults: fromNFSFileShareDefaults(params["NFSFileShareDefaults"]),
    CacheAttributes: fromCacheAttributes(params["CacheAttributes"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNFSFileShare",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FileShareARN": "s",
      },
    }, await resp.json());
  }

  async updateSMBFileShare(
    {abortSignal, ...params}: RequestConfig & UpdateSMBFileShareInput,
  ): Promise<UpdateSMBFileShareOutput> {
    const body: JSONObject = {...params,
    CacheAttributes: fromCacheAttributes(params["CacheAttributes"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSMBFileShare",
    });
    return prt.readObj({
      required: {},
      optional: {
        "FileShareARN": "s",
      },
    }, await resp.json());
  }

  async updateSMBSecurityStrategy(
    {abortSignal, ...params}: RequestConfig & UpdateSMBSecurityStrategyInput,
  ): Promise<UpdateSMBSecurityStrategyOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSMBSecurityStrategy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GatewayARN": "s",
      },
    }, await resp.json());
  }

  async updateSnapshotSchedule(
    {abortSignal, ...params}: RequestConfig & UpdateSnapshotScheduleInput,
  ): Promise<UpdateSnapshotScheduleOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSnapshotSchedule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VolumeARN": "s",
      },
    }, await resp.json());
  }

  async updateVTLDeviceType(
    {abortSignal, ...params}: RequestConfig & UpdateVTLDeviceTypeInput,
  ): Promise<UpdateVTLDeviceTypeOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVTLDeviceType",
    });
    return prt.readObj({
      required: {},
      optional: {
        "VTLDeviceARN": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface ActivateGatewayInput {
  ActivationKey: string;
  GatewayName: string;
  GatewayTimezone: string;
  GatewayRegion: string;
  GatewayType?: string | null;
  TapeDriveType?: string | null;
  MediumChangerType?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface AddCacheInput {
  GatewayARN: string;
  DiskIds: string[];
}

// refs: 1 - tags: named, input
export interface AddTagsToResourceInput {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface AddUploadBufferInput {
  GatewayARN: string;
  DiskIds: string[];
}

// refs: 1 - tags: named, input
export interface AddWorkingStorageInput {
  GatewayARN: string;
  DiskIds: string[];
}

// refs: 1 - tags: named, input
export interface AssignTapePoolInput {
  TapeARN: string;
  PoolId: string;
  BypassGovernanceRetention?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AttachVolumeInput {
  GatewayARN: string;
  TargetName?: string | null;
  VolumeARN: string;
  NetworkInterfaceId: string;
  DiskId?: string | null;
}

// refs: 1 - tags: named, input
export interface CancelArchivalInput {
  GatewayARN: string;
  TapeARN: string;
}

// refs: 1 - tags: named, input
export interface CancelRetrievalInput {
  GatewayARN: string;
  TapeARN: string;
}

// refs: 1 - tags: named, input
export interface CreateCachediSCSIVolumeInput {
  GatewayARN: string;
  VolumeSizeInBytes: number;
  SnapshotId?: string | null;
  TargetName: string;
  SourceVolumeARN?: string | null;
  NetworkInterfaceId: string;
  ClientToken: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateNFSFileShareInput {
  ClientToken: string;
  NFSFileShareDefaults?: NFSFileShareDefaults | null;
  GatewayARN: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  Role: string;
  LocationARN: string;
  DefaultStorageClass?: string | null;
  ObjectACL?: ObjectACL | null;
  ClientList?: string[] | null;
  Squash?: string | null;
  ReadOnly?: boolean | null;
  GuessMIMETypeEnabled?: boolean | null;
  RequesterPays?: boolean | null;
  Tags?: Tag[] | null;
  FileShareName?: string | null;
  CacheAttributes?: CacheAttributes | null;
}

// refs: 1 - tags: named, input
export interface CreateSMBFileShareInput {
  ClientToken: string;
  GatewayARN: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  Role: string;
  LocationARN: string;
  DefaultStorageClass?: string | null;
  ObjectACL?: ObjectACL | null;
  ReadOnly?: boolean | null;
  GuessMIMETypeEnabled?: boolean | null;
  RequesterPays?: boolean | null;
  SMBACLEnabled?: boolean | null;
  AdminUserList?: string[] | null;
  ValidUserList?: string[] | null;
  InvalidUserList?: string[] | null;
  AuditDestinationARN?: string | null;
  Authentication?: string | null;
  CaseSensitivity?: CaseSensitivity | null;
  Tags?: Tag[] | null;
  FileShareName?: string | null;
  CacheAttributes?: CacheAttributes | null;
}

// refs: 1 - tags: named, input
export interface CreateSnapshotInput {
  VolumeARN: string;
  SnapshotDescription: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateSnapshotFromVolumeRecoveryPointInput {
  VolumeARN: string;
  SnapshotDescription: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateStorediSCSIVolumeInput {
  GatewayARN: string;
  DiskId: string;
  SnapshotId?: string | null;
  PreserveExistingData: boolean;
  TargetName: string;
  NetworkInterfaceId: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTapePoolInput {
  PoolName: string;
  StorageClass: TapeStorageClass;
  RetentionLockType?: RetentionLockType | null;
  RetentionLockTimeInDays?: number | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTapeWithBarcodeInput {
  GatewayARN: string;
  TapeSizeInBytes: number;
  TapeBarcode: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  PoolId?: string | null;
  Worm?: boolean | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTapesInput {
  GatewayARN: string;
  TapeSizeInBytes: number;
  ClientToken: string;
  NumTapesToCreate: number;
  TapeBarcodePrefix: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  PoolId?: string | null;
  Worm?: boolean | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteAutomaticTapeCreationPolicyInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DeleteBandwidthRateLimitInput {
  GatewayARN: string;
  BandwidthType: string;
}

// refs: 1 - tags: named, input
export interface DeleteChapCredentialsInput {
  TargetARN: string;
  InitiatorName: string;
}

// refs: 1 - tags: named, input
export interface DeleteFileShareInput {
  FileShareARN: string;
  ForceDelete?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteGatewayInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DeleteSnapshotScheduleInput {
  VolumeARN: string;
}

// refs: 1 - tags: named, input
export interface DeleteTapeInput {
  GatewayARN: string;
  TapeARN: string;
  BypassGovernanceRetention?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteTapeArchiveInput {
  TapeARN: string;
  BypassGovernanceRetention?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteTapePoolInput {
  PoolARN: string;
}

// refs: 1 - tags: named, input
export interface DeleteVolumeInput {
  VolumeARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeAvailabilityMonitorTestInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeBandwidthRateLimitInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeCacheInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeCachediSCSIVolumesInput {
  VolumeARNs: string[];
}

// refs: 1 - tags: named, input
export interface DescribeChapCredentialsInput {
  TargetARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeGatewayInformationInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceStartTimeInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeNFSFileSharesInput {
  FileShareARNList: string[];
}

// refs: 1 - tags: named, input
export interface DescribeSMBFileSharesInput {
  FileShareARNList: string[];
}

// refs: 1 - tags: named, input
export interface DescribeSMBSettingsInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeSnapshotScheduleInput {
  VolumeARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeStorediSCSIVolumesInput {
  VolumeARNs: string[];
}

// refs: 1 - tags: named, input
export interface DescribeTapeArchivesInput {
  TapeARNs?: string[] | null;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeTapeRecoveryPointsInput {
  GatewayARN: string;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeTapesInput {
  GatewayARN: string;
  TapeARNs?: string[] | null;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeUploadBufferInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DescribeVTLDevicesInput {
  GatewayARN: string;
  VTLDeviceARNs?: string[] | null;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeWorkingStorageInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface DetachVolumeInput {
  VolumeARN: string;
  ForceDetach?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DisableGatewayInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface JoinDomainInput {
  GatewayARN: string;
  DomainName: string;
  OrganizationalUnit?: string | null;
  DomainControllers?: string[] | null;
  TimeoutInSeconds?: number | null;
  UserName: string;
  Password: string;
}

// refs: 1 - tags: named, input
export interface ListAutomaticTapeCreationPoliciesInput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, input
export interface ListFileSharesInput {
  GatewayARN?: string | null;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGatewaysInput {
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLocalDisksInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  ResourceARN: string;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTapePoolsInput {
  PoolARNs?: string[] | null;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTapesInput {
  TapeARNs?: string[] | null;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListVolumeInitiatorsInput {
  VolumeARN: string;
}

// refs: 1 - tags: named, input
export interface ListVolumeRecoveryPointsInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface ListVolumesInput {
  GatewayARN?: string | null;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface NotifyWhenUploadedInput {
  FileShareARN: string;
}

// refs: 1 - tags: named, input
export interface RefreshCacheInput {
  FileShareARN: string;
  FolderList?: string[] | null;
  Recursive?: boolean | null;
}

// refs: 1 - tags: named, input
export interface RemoveTagsFromResourceInput {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface ResetCacheInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface RetrieveTapeArchiveInput {
  TapeARN: string;
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface RetrieveTapeRecoveryPointInput {
  TapeARN: string;
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface SetLocalConsolePasswordInput {
  GatewayARN: string;
  LocalConsolePassword: string;
}

// refs: 1 - tags: named, input
export interface SetSMBGuestPasswordInput {
  GatewayARN: string;
  Password: string;
}

// refs: 1 - tags: named, input
export interface ShutdownGatewayInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface StartAvailabilityMonitorTestInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface StartGatewayInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface UpdateAutomaticTapeCreationPolicyInput {
  AutomaticTapeCreationRules: AutomaticTapeCreationRule[];
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface UpdateBandwidthRateLimitInput {
  GatewayARN: string;
  AverageUploadRateLimitInBitsPerSec?: number | null;
  AverageDownloadRateLimitInBitsPerSec?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateChapCredentialsInput {
  TargetARN: string;
  SecretToAuthenticateInitiator: string;
  InitiatorName: string;
  SecretToAuthenticateTarget?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGatewayInformationInput {
  GatewayARN: string;
  GatewayName?: string | null;
  GatewayTimezone?: string | null;
  CloudWatchLogGroupARN?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGatewaySoftwareNowInput {
  GatewayARN: string;
}

// refs: 1 - tags: named, input
export interface UpdateMaintenanceStartTimeInput {
  GatewayARN: string;
  HourOfDay: number;
  MinuteOfHour: number;
  DayOfWeek?: number | null;
  DayOfMonth?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateNFSFileShareInput {
  FileShareARN: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  NFSFileShareDefaults?: NFSFileShareDefaults | null;
  DefaultStorageClass?: string | null;
  ObjectACL?: ObjectACL | null;
  ClientList?: string[] | null;
  Squash?: string | null;
  ReadOnly?: boolean | null;
  GuessMIMETypeEnabled?: boolean | null;
  RequesterPays?: boolean | null;
  FileShareName?: string | null;
  CacheAttributes?: CacheAttributes | null;
}

// refs: 1 - tags: named, input
export interface UpdateSMBFileShareInput {
  FileShareARN: string;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  DefaultStorageClass?: string | null;
  ObjectACL?: ObjectACL | null;
  ReadOnly?: boolean | null;
  GuessMIMETypeEnabled?: boolean | null;
  RequesterPays?: boolean | null;
  SMBACLEnabled?: boolean | null;
  AdminUserList?: string[] | null;
  ValidUserList?: string[] | null;
  InvalidUserList?: string[] | null;
  AuditDestinationARN?: string | null;
  CaseSensitivity?: CaseSensitivity | null;
  FileShareName?: string | null;
  CacheAttributes?: CacheAttributes | null;
}

// refs: 1 - tags: named, input
export interface UpdateSMBSecurityStrategyInput {
  GatewayARN: string;
  SMBSecurityStrategy: SMBSecurityStrategy;
}

// refs: 1 - tags: named, input
export interface UpdateSnapshotScheduleInput {
  VolumeARN: string;
  StartAt: number;
  RecurrenceInHours: number;
  Description?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateVTLDeviceTypeInput {
  VTLDeviceARN: string;
  DeviceType: string;
}

// refs: 1 - tags: named, output
export interface ActivateGatewayOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface AddCacheOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface AddTagsToResourceOutput {
  ResourceARN?: string | null;
}

// refs: 1 - tags: named, output
export interface AddUploadBufferOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface AddWorkingStorageOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface AssignTapePoolOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface AttachVolumeOutput {
  VolumeARN?: string | null;
  TargetARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CancelArchivalOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CancelRetrievalOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateCachediSCSIVolumeOutput {
  VolumeARN?: string | null;
  TargetARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateNFSFileShareOutput {
  FileShareARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSMBFileShareOutput {
  FileShareARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSnapshotOutput {
  VolumeARN?: string | null;
  SnapshotId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSnapshotFromVolumeRecoveryPointOutput {
  SnapshotId?: string | null;
  VolumeARN?: string | null;
  VolumeRecoveryPointTime?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateStorediSCSIVolumeOutput {
  VolumeARN?: string | null;
  VolumeSizeInBytes?: number | null;
  TargetARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTapePoolOutput {
  PoolARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTapeWithBarcodeOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTapesOutput {
  TapeARNs?: string[] | null;
}

// refs: 1 - tags: named, output
export interface DeleteAutomaticTapeCreationPolicyOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteBandwidthRateLimitOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteChapCredentialsOutput {
  TargetARN?: string | null;
  InitiatorName?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteFileShareOutput {
  FileShareARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteGatewayOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteSnapshotScheduleOutput {
  VolumeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteTapeOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteTapeArchiveOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteTapePoolOutput {
  PoolARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteVolumeOutput {
  VolumeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAvailabilityMonitorTestOutput {
  GatewayARN?: string | null;
  Status?: AvailabilityMonitorTestStatus | null;
  StartTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeBandwidthRateLimitOutput {
  GatewayARN?: string | null;
  AverageUploadRateLimitInBitsPerSec?: number | null;
  AverageDownloadRateLimitInBitsPerSec?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeCacheOutput {
  GatewayARN?: string | null;
  DiskIds?: string[] | null;
  CacheAllocatedInBytes?: number | null;
  CacheUsedPercentage?: number | null;
  CacheDirtyPercentage?: number | null;
  CacheHitPercentage?: number | null;
  CacheMissPercentage?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeCachediSCSIVolumesOutput {
  CachediSCSIVolumes?: CachediSCSIVolume[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeChapCredentialsOutput {
  ChapCredentials?: ChapInfo[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeGatewayInformationOutput {
  GatewayARN?: string | null;
  GatewayId?: string | null;
  GatewayName?: string | null;
  GatewayTimezone?: string | null;
  GatewayState?: string | null;
  GatewayNetworkInterfaces?: NetworkInterface[] | null;
  GatewayType?: string | null;
  NextUpdateAvailabilityDate?: string | null;
  LastSoftwareUpdate?: string | null;
  Ec2InstanceId?: string | null;
  Ec2InstanceRegion?: string | null;
  Tags?: Tag[] | null;
  VPCEndpoint?: string | null;
  CloudWatchLogGroupARN?: string | null;
  HostEnvironment?: HostEnvironment | null;
  EndpointType?: string | null;
  SoftwareUpdatesEndDate?: string | null;
  DeprecationDate?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceStartTimeOutput {
  GatewayARN?: string | null;
  HourOfDay?: number | null;
  MinuteOfHour?: number | null;
  DayOfWeek?: number | null;
  DayOfMonth?: number | null;
  Timezone?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeNFSFileSharesOutput {
  NFSFileShareInfoList?: NFSFileShareInfo[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeSMBFileSharesOutput {
  SMBFileShareInfoList?: SMBFileShareInfo[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeSMBSettingsOutput {
  GatewayARN?: string | null;
  DomainName?: string | null;
  ActiveDirectoryStatus?: ActiveDirectoryStatus | null;
  SMBGuestPasswordSet?: boolean | null;
  SMBSecurityStrategy?: SMBSecurityStrategy | null;
}

// refs: 1 - tags: named, output
export interface DescribeSnapshotScheduleOutput {
  VolumeARN?: string | null;
  StartAt?: number | null;
  RecurrenceInHours?: number | null;
  Description?: string | null;
  Timezone?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeStorediSCSIVolumesOutput {
  StorediSCSIVolumes?: StorediSCSIVolume[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeTapeArchivesOutput {
  TapeArchives?: TapeArchive[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTapeRecoveryPointsOutput {
  GatewayARN?: string | null;
  TapeRecoveryPointInfos?: TapeRecoveryPointInfo[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTapesOutput {
  Tapes?: Tape[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeUploadBufferOutput {
  GatewayARN?: string | null;
  DiskIds?: string[] | null;
  UploadBufferUsedInBytes?: number | null;
  UploadBufferAllocatedInBytes?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeVTLDevicesOutput {
  GatewayARN?: string | null;
  VTLDevices?: VTLDevice[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeWorkingStorageOutput {
  GatewayARN?: string | null;
  DiskIds?: string[] | null;
  WorkingStorageUsedInBytes?: number | null;
  WorkingStorageAllocatedInBytes?: number | null;
}

// refs: 1 - tags: named, output
export interface DetachVolumeOutput {
  VolumeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DisableGatewayOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface JoinDomainOutput {
  GatewayARN?: string | null;
  ActiveDirectoryStatus?: ActiveDirectoryStatus | null;
}

// refs: 1 - tags: named, output
export interface ListAutomaticTapeCreationPoliciesOutput {
  AutomaticTapeCreationPolicyInfos?: AutomaticTapeCreationPolicyInfo[] | null;
}

// refs: 1 - tags: named, output
export interface ListFileSharesOutput {
  Marker?: string | null;
  NextMarker?: string | null;
  FileShareInfoList?: FileShareInfo[] | null;
}

// refs: 1 - tags: named, output
export interface ListGatewaysOutput {
  Gateways?: GatewayInfo[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLocalDisksOutput {
  GatewayARN?: string | null;
  Disks?: Disk[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceOutput {
  ResourceARN?: string | null;
  Marker?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListTapePoolsOutput {
  PoolInfos?: PoolInfo[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTapesOutput {
  TapeInfos?: TapeInfo[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListVolumeInitiatorsOutput {
  Initiators?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ListVolumeRecoveryPointsOutput {
  GatewayARN?: string | null;
  VolumeRecoveryPointInfos?: VolumeRecoveryPointInfo[] | null;
}

// refs: 1 - tags: named, output
export interface ListVolumesOutput {
  GatewayARN?: string | null;
  Marker?: string | null;
  VolumeInfos?: VolumeInfo[] | null;
}

// refs: 1 - tags: named, output
export interface NotifyWhenUploadedOutput {
  FileShareARN?: string | null;
  NotificationId?: string | null;
}

// refs: 1 - tags: named, output
export interface RefreshCacheOutput {
  FileShareARN?: string | null;
  NotificationId?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveTagsFromResourceOutput {
  ResourceARN?: string | null;
}

// refs: 1 - tags: named, output
export interface ResetCacheOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface RetrieveTapeArchiveOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface RetrieveTapeRecoveryPointOutput {
  TapeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface SetLocalConsolePasswordOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface SetSMBGuestPasswordOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface ShutdownGatewayOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface StartAvailabilityMonitorTestOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface StartGatewayOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateAutomaticTapeCreationPolicyOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateBandwidthRateLimitOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateChapCredentialsOutput {
  TargetARN?: string | null;
  InitiatorName?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateGatewayInformationOutput {
  GatewayARN?: string | null;
  GatewayName?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateGatewaySoftwareNowOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateMaintenanceStartTimeOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateNFSFileShareOutput {
  FileShareARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSMBFileShareOutput {
  FileShareARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSMBSecurityStrategyOutput {
  GatewayARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSnapshotScheduleOutput {
  VolumeARN?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateVTLDeviceTypeOutput {
  VTLDeviceARN?: string | null;
}

// refs: 17 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface NFSFileShareDefaults {
  FileMode?: string | null;
  DirectoryMode?: string | null;
  GroupId?: number | null;
  OwnerId?: number | null;
}
function fromNFSFileShareDefaults(input?: NFSFileShareDefaults | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toNFSFileShareDefaults(root: JSONValue): NFSFileShareDefaults {
  return prt.readObj({
    required: {},
    optional: {
      "FileMode": "s",
      "DirectoryMode": "s",
      "GroupId": "n",
      "OwnerId": "n",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type ObjectACL =
| "private"
| "public-read"
| "public-read-write"
| "authenticated-read"
| "bucket-owner-read"
| "bucket-owner-full-control"
| "aws-exec-read"
;

function toObjectACL(root: JSONValue): ObjectACL | null {
  return ( false
    || root == "private"
    || root == "public-read"
    || root == "public-read-write"
    || root == "authenticated-read"
    || root == "bucket-owner-read"
    || root == "bucket-owner-full-control"
    || root == "aws-exec-read"
  ) ? root : null;
}

// refs: 6 - tags: input, named, interface, output
export interface CacheAttributes {
  CacheStaleTimeoutInSeconds?: number | null;
}
function fromCacheAttributes(input?: CacheAttributes | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCacheAttributes(root: JSONValue): CacheAttributes {
  return prt.readObj({
    required: {},
    optional: {
      "CacheStaleTimeoutInSeconds": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type CaseSensitivity =
| "ClientSpecified"
| "CaseSensitive"
;

function toCaseSensitivity(root: JSONValue): CaseSensitivity | null {
  return ( false
    || root == "ClientSpecified"
    || root == "CaseSensitive"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type TapeStorageClass =
| "DEEP_ARCHIVE"
| "GLACIER"
;

function toTapeStorageClass(root: JSONValue): TapeStorageClass | null {
  return ( false
    || root == "DEEP_ARCHIVE"
    || root == "GLACIER"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type RetentionLockType =
| "COMPLIANCE"
| "GOVERNANCE"
| "NONE"
;

function toRetentionLockType(root: JSONValue): RetentionLockType | null {
  return ( false
    || root == "COMPLIANCE"
    || root == "GOVERNANCE"
    || root == "NONE"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface AutomaticTapeCreationRule {
  TapeBarcodePrefix: string;
  PoolId: string;
  TapeSizeInBytes: number;
  MinimumNumTapes: number;
  Worm?: boolean | null;
}
function fromAutomaticTapeCreationRule(input?: AutomaticTapeCreationRule | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toAutomaticTapeCreationRule(root: JSONValue): AutomaticTapeCreationRule {
  return prt.readObj({
    required: {
      "TapeBarcodePrefix": "s",
      "PoolId": "s",
      "TapeSizeInBytes": "n",
      "MinimumNumTapes": "n",
    },
    optional: {
      "Worm": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type SMBSecurityStrategy =
| "ClientSpecified"
| "MandatorySigning"
| "MandatoryEncryption"
;

function toSMBSecurityStrategy(root: JSONValue): SMBSecurityStrategy | null {
  return ( false
    || root == "ClientSpecified"
    || root == "MandatorySigning"
    || root == "MandatoryEncryption"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type AvailabilityMonitorTestStatus =
| "COMPLETE"
| "FAILED"
| "PENDING"
;
function toAvailabilityMonitorTestStatus(root: JSONValue): AvailabilityMonitorTestStatus | null {
  return ( false
    || root == "COMPLETE"
    || root == "FAILED"
    || root == "PENDING"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface CachediSCSIVolume {
  VolumeARN?: string | null;
  VolumeId?: string | null;
  VolumeType?: string | null;
  VolumeStatus?: string | null;
  VolumeAttachmentStatus?: string | null;
  VolumeSizeInBytes?: number | null;
  VolumeProgress?: number | null;
  SourceSnapshotId?: string | null;
  VolumeiSCSIAttributes?: VolumeiSCSIAttributes | null;
  CreatedDate?: Date | number | null;
  VolumeUsedInBytes?: number | null;
  KMSKey?: string | null;
  TargetName?: string | null;
}
function toCachediSCSIVolume(root: JSONValue): CachediSCSIVolume {
  return prt.readObj({
    required: {},
    optional: {
      "VolumeARN": "s",
      "VolumeId": "s",
      "VolumeType": "s",
      "VolumeStatus": "s",
      "VolumeAttachmentStatus": "s",
      "VolumeSizeInBytes": "n",
      "VolumeProgress": "n",
      "SourceSnapshotId": "s",
      "VolumeiSCSIAttributes": toVolumeiSCSIAttributes,
      "CreatedDate": "d",
      "VolumeUsedInBytes": "n",
      "KMSKey": "s",
      "TargetName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface VolumeiSCSIAttributes {
  TargetARN?: string | null;
  NetworkInterfaceId?: string | null;
  NetworkInterfacePort?: number | null;
  LunNumber?: number | null;
  ChapEnabled?: boolean | null;
}
function toVolumeiSCSIAttributes(root: JSONValue): VolumeiSCSIAttributes {
  return prt.readObj({
    required: {},
    optional: {
      "TargetARN": "s",
      "NetworkInterfaceId": "s",
      "NetworkInterfacePort": "n",
      "LunNumber": "n",
      "ChapEnabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ChapInfo {
  TargetARN?: string | null;
  SecretToAuthenticateInitiator?: string | null;
  InitiatorName?: string | null;
  SecretToAuthenticateTarget?: string | null;
}
function toChapInfo(root: JSONValue): ChapInfo {
  return prt.readObj({
    required: {},
    optional: {
      "TargetARN": "s",
      "SecretToAuthenticateInitiator": "s",
      "InitiatorName": "s",
      "SecretToAuthenticateTarget": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface NetworkInterface {
  Ipv4Address?: string | null;
  MacAddress?: string | null;
  Ipv6Address?: string | null;
}
function toNetworkInterface(root: JSONValue): NetworkInterface {
  return prt.readObj({
    required: {},
    optional: {
      "Ipv4Address": "s",
      "MacAddress": "s",
      "Ipv6Address": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type HostEnvironment =
| "VMWARE"
| "HYPER-V"
| "EC2"
| "KVM"
| "OTHER"
;
function toHostEnvironment(root: JSONValue): HostEnvironment | null {
  return ( false
    || root == "VMWARE"
    || root == "HYPER-V"
    || root == "EC2"
    || root == "KVM"
    || root == "OTHER"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface NFSFileShareInfo {
  NFSFileShareDefaults?: NFSFileShareDefaults | null;
  FileShareARN?: string | null;
  FileShareId?: string | null;
  FileShareStatus?: string | null;
  GatewayARN?: string | null;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  Path?: string | null;
  Role?: string | null;
  LocationARN?: string | null;
  DefaultStorageClass?: string | null;
  ObjectACL?: ObjectACL | null;
  ClientList?: string[] | null;
  Squash?: string | null;
  ReadOnly?: boolean | null;
  GuessMIMETypeEnabled?: boolean | null;
  RequesterPays?: boolean | null;
  Tags?: Tag[] | null;
  FileShareName?: string | null;
  CacheAttributes?: CacheAttributes | null;
}
function toNFSFileShareInfo(root: JSONValue): NFSFileShareInfo {
  return prt.readObj({
    required: {},
    optional: {
      "NFSFileShareDefaults": toNFSFileShareDefaults,
      "FileShareARN": "s",
      "FileShareId": "s",
      "FileShareStatus": "s",
      "GatewayARN": "s",
      "KMSEncrypted": "b",
      "KMSKey": "s",
      "Path": "s",
      "Role": "s",
      "LocationARN": "s",
      "DefaultStorageClass": "s",
      "ObjectACL": toObjectACL,
      "ClientList": ["s"],
      "Squash": "s",
      "ReadOnly": "b",
      "GuessMIMETypeEnabled": "b",
      "RequesterPays": "b",
      "Tags": [toTag],
      "FileShareName": "s",
      "CacheAttributes": toCacheAttributes,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SMBFileShareInfo {
  FileShareARN?: string | null;
  FileShareId?: string | null;
  FileShareStatus?: string | null;
  GatewayARN?: string | null;
  KMSEncrypted?: boolean | null;
  KMSKey?: string | null;
  Path?: string | null;
  Role?: string | null;
  LocationARN?: string | null;
  DefaultStorageClass?: string | null;
  ObjectACL?: ObjectACL | null;
  ReadOnly?: boolean | null;
  GuessMIMETypeEnabled?: boolean | null;
  RequesterPays?: boolean | null;
  SMBACLEnabled?: boolean | null;
  AdminUserList?: string[] | null;
  ValidUserList?: string[] | null;
  InvalidUserList?: string[] | null;
  AuditDestinationARN?: string | null;
  Authentication?: string | null;
  CaseSensitivity?: CaseSensitivity | null;
  Tags?: Tag[] | null;
  FileShareName?: string | null;
  CacheAttributes?: CacheAttributes | null;
}
function toSMBFileShareInfo(root: JSONValue): SMBFileShareInfo {
  return prt.readObj({
    required: {},
    optional: {
      "FileShareARN": "s",
      "FileShareId": "s",
      "FileShareStatus": "s",
      "GatewayARN": "s",
      "KMSEncrypted": "b",
      "KMSKey": "s",
      "Path": "s",
      "Role": "s",
      "LocationARN": "s",
      "DefaultStorageClass": "s",
      "ObjectACL": toObjectACL,
      "ReadOnly": "b",
      "GuessMIMETypeEnabled": "b",
      "RequesterPays": "b",
      "SMBACLEnabled": "b",
      "AdminUserList": ["s"],
      "ValidUserList": ["s"],
      "InvalidUserList": ["s"],
      "AuditDestinationARN": "s",
      "Authentication": "s",
      "CaseSensitivity": toCaseSensitivity,
      "Tags": [toTag],
      "FileShareName": "s",
      "CacheAttributes": toCacheAttributes,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ActiveDirectoryStatus =
| "ACCESS_DENIED"
| "DETACHED"
| "JOINED"
| "JOINING"
| "NETWORK_ERROR"
| "TIMEOUT"
| "UNKNOWN_ERROR"
;
function toActiveDirectoryStatus(root: JSONValue): ActiveDirectoryStatus | null {
  return ( false
    || root == "ACCESS_DENIED"
    || root == "DETACHED"
    || root == "JOINED"
    || root == "JOINING"
    || root == "NETWORK_ERROR"
    || root == "TIMEOUT"
    || root == "UNKNOWN_ERROR"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface StorediSCSIVolume {
  VolumeARN?: string | null;
  VolumeId?: string | null;
  VolumeType?: string | null;
  VolumeStatus?: string | null;
  VolumeAttachmentStatus?: string | null;
  VolumeSizeInBytes?: number | null;
  VolumeProgress?: number | null;
  VolumeDiskId?: string | null;
  SourceSnapshotId?: string | null;
  PreservedExistingData?: boolean | null;
  VolumeiSCSIAttributes?: VolumeiSCSIAttributes | null;
  CreatedDate?: Date | number | null;
  VolumeUsedInBytes?: number | null;
  KMSKey?: string | null;
  TargetName?: string | null;
}
function toStorediSCSIVolume(root: JSONValue): StorediSCSIVolume {
  return prt.readObj({
    required: {},
    optional: {
      "VolumeARN": "s",
      "VolumeId": "s",
      "VolumeType": "s",
      "VolumeStatus": "s",
      "VolumeAttachmentStatus": "s",
      "VolumeSizeInBytes": "n",
      "VolumeProgress": "n",
      "VolumeDiskId": "s",
      "SourceSnapshotId": "s",
      "PreservedExistingData": "b",
      "VolumeiSCSIAttributes": toVolumeiSCSIAttributes,
      "CreatedDate": "d",
      "VolumeUsedInBytes": "n",
      "KMSKey": "s",
      "TargetName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TapeArchive {
  TapeARN?: string | null;
  TapeBarcode?: string | null;
  TapeCreatedDate?: Date | number | null;
  TapeSizeInBytes?: number | null;
  CompletionTime?: Date | number | null;
  RetrievedTo?: string | null;
  TapeStatus?: string | null;
  TapeUsedInBytes?: number | null;
  KMSKey?: string | null;
  PoolId?: string | null;
  Worm?: boolean | null;
  RetentionStartDate?: Date | number | null;
  PoolEntryDate?: Date | number | null;
}
function toTapeArchive(root: JSONValue): TapeArchive {
  return prt.readObj({
    required: {},
    optional: {
      "TapeARN": "s",
      "TapeBarcode": "s",
      "TapeCreatedDate": "d",
      "TapeSizeInBytes": "n",
      "CompletionTime": "d",
      "RetrievedTo": "s",
      "TapeStatus": "s",
      "TapeUsedInBytes": "n",
      "KMSKey": "s",
      "PoolId": "s",
      "Worm": "b",
      "RetentionStartDate": "d",
      "PoolEntryDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TapeRecoveryPointInfo {
  TapeARN?: string | null;
  TapeRecoveryPointTime?: Date | number | null;
  TapeSizeInBytes?: number | null;
  TapeStatus?: string | null;
}
function toTapeRecoveryPointInfo(root: JSONValue): TapeRecoveryPointInfo {
  return prt.readObj({
    required: {},
    optional: {
      "TapeARN": "s",
      "TapeRecoveryPointTime": "d",
      "TapeSizeInBytes": "n",
      "TapeStatus": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Tape {
  TapeARN?: string | null;
  TapeBarcode?: string | null;
  TapeCreatedDate?: Date | number | null;
  TapeSizeInBytes?: number | null;
  TapeStatus?: string | null;
  VTLDevice?: string | null;
  Progress?: number | null;
  TapeUsedInBytes?: number | null;
  KMSKey?: string | null;
  PoolId?: string | null;
  Worm?: boolean | null;
  RetentionStartDate?: Date | number | null;
  PoolEntryDate?: Date | number | null;
}
function toTape(root: JSONValue): Tape {
  return prt.readObj({
    required: {},
    optional: {
      "TapeARN": "s",
      "TapeBarcode": "s",
      "TapeCreatedDate": "d",
      "TapeSizeInBytes": "n",
      "TapeStatus": "s",
      "VTLDevice": "s",
      "Progress": "n",
      "TapeUsedInBytes": "n",
      "KMSKey": "s",
      "PoolId": "s",
      "Worm": "b",
      "RetentionStartDate": "d",
      "PoolEntryDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VTLDevice {
  VTLDeviceARN?: string | null;
  VTLDeviceType?: string | null;
  VTLDeviceVendor?: string | null;
  VTLDeviceProductIdentifier?: string | null;
  DeviceiSCSIAttributes?: DeviceiSCSIAttributes | null;
}
function toVTLDevice(root: JSONValue): VTLDevice {
  return prt.readObj({
    required: {},
    optional: {
      "VTLDeviceARN": "s",
      "VTLDeviceType": "s",
      "VTLDeviceVendor": "s",
      "VTLDeviceProductIdentifier": "s",
      "DeviceiSCSIAttributes": toDeviceiSCSIAttributes,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeviceiSCSIAttributes {
  TargetARN?: string | null;
  NetworkInterfaceId?: string | null;
  NetworkInterfacePort?: number | null;
  ChapEnabled?: boolean | null;
}
function toDeviceiSCSIAttributes(root: JSONValue): DeviceiSCSIAttributes {
  return prt.readObj({
    required: {},
    optional: {
      "TargetARN": "s",
      "NetworkInterfaceId": "s",
      "NetworkInterfacePort": "n",
      "ChapEnabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AutomaticTapeCreationPolicyInfo {
  AutomaticTapeCreationRules?: AutomaticTapeCreationRule[] | null;
  GatewayARN?: string | null;
}
function toAutomaticTapeCreationPolicyInfo(root: JSONValue): AutomaticTapeCreationPolicyInfo {
  return prt.readObj({
    required: {},
    optional: {
      "AutomaticTapeCreationRules": [toAutomaticTapeCreationRule],
      "GatewayARN": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FileShareInfo {
  FileShareType?: FileShareType | null;
  FileShareARN?: string | null;
  FileShareId?: string | null;
  FileShareStatus?: string | null;
  GatewayARN?: string | null;
}
function toFileShareInfo(root: JSONValue): FileShareInfo {
  return prt.readObj({
    required: {},
    optional: {
      "FileShareType": toFileShareType,
      "FileShareARN": "s",
      "FileShareId": "s",
      "FileShareStatus": "s",
      "GatewayARN": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type FileShareType =
| "NFS"
| "SMB"
;
function toFileShareType(root: JSONValue): FileShareType | null {
  return ( false
    || root == "NFS"
    || root == "SMB"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface GatewayInfo {
  GatewayId?: string | null;
  GatewayARN?: string | null;
  GatewayType?: string | null;
  GatewayOperationalState?: string | null;
  GatewayName?: string | null;
  Ec2InstanceId?: string | null;
  Ec2InstanceRegion?: string | null;
}
function toGatewayInfo(root: JSONValue): GatewayInfo {
  return prt.readObj({
    required: {},
    optional: {
      "GatewayId": "s",
      "GatewayARN": "s",
      "GatewayType": "s",
      "GatewayOperationalState": "s",
      "GatewayName": "s",
      "Ec2InstanceId": "s",
      "Ec2InstanceRegion": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Disk {
  DiskId?: string | null;
  DiskPath?: string | null;
  DiskNode?: string | null;
  DiskStatus?: string | null;
  DiskSizeInBytes?: number | null;
  DiskAllocationType?: string | null;
  DiskAllocationResource?: string | null;
  DiskAttributeList?: string[] | null;
}
function toDisk(root: JSONValue): Disk {
  return prt.readObj({
    required: {},
    optional: {
      "DiskId": "s",
      "DiskPath": "s",
      "DiskNode": "s",
      "DiskStatus": "s",
      "DiskSizeInBytes": "n",
      "DiskAllocationType": "s",
      "DiskAllocationResource": "s",
      "DiskAttributeList": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PoolInfo {
  PoolARN?: string | null;
  PoolName?: string | null;
  StorageClass?: TapeStorageClass | null;
  RetentionLockType?: RetentionLockType | null;
  RetentionLockTimeInDays?: number | null;
  PoolStatus?: PoolStatus | null;
}
function toPoolInfo(root: JSONValue): PoolInfo {
  return prt.readObj({
    required: {},
    optional: {
      "PoolARN": "s",
      "PoolName": "s",
      "StorageClass": toTapeStorageClass,
      "RetentionLockType": toRetentionLockType,
      "RetentionLockTimeInDays": "n",
      "PoolStatus": toPoolStatus,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type PoolStatus =
| "ACTIVE"
| "DELETED"
;
function toPoolStatus(root: JSONValue): PoolStatus | null {
  return ( false
    || root == "ACTIVE"
    || root == "DELETED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface TapeInfo {
  TapeARN?: string | null;
  TapeBarcode?: string | null;
  TapeSizeInBytes?: number | null;
  TapeStatus?: string | null;
  GatewayARN?: string | null;
  PoolId?: string | null;
  RetentionStartDate?: Date | number | null;
  PoolEntryDate?: Date | number | null;
}
function toTapeInfo(root: JSONValue): TapeInfo {
  return prt.readObj({
    required: {},
    optional: {
      "TapeARN": "s",
      "TapeBarcode": "s",
      "TapeSizeInBytes": "n",
      "TapeStatus": "s",
      "GatewayARN": "s",
      "PoolId": "s",
      "RetentionStartDate": "d",
      "PoolEntryDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VolumeRecoveryPointInfo {
  VolumeARN?: string | null;
  VolumeSizeInBytes?: number | null;
  VolumeUsageInBytes?: number | null;
  VolumeRecoveryPointTime?: string | null;
}
function toVolumeRecoveryPointInfo(root: JSONValue): VolumeRecoveryPointInfo {
  return prt.readObj({
    required: {},
    optional: {
      "VolumeARN": "s",
      "VolumeSizeInBytes": "n",
      "VolumeUsageInBytes": "n",
      "VolumeRecoveryPointTime": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VolumeInfo {
  VolumeARN?: string | null;
  VolumeId?: string | null;
  GatewayARN?: string | null;
  GatewayId?: string | null;
  VolumeType?: string | null;
  VolumeSizeInBytes?: number | null;
  VolumeAttachmentStatus?: string | null;
}
function toVolumeInfo(root: JSONValue): VolumeInfo {
  return prt.readObj({
    required: {},
    optional: {
      "VolumeARN": "s",
      "VolumeId": "s",
      "GatewayARN": "s",
      "GatewayId": "s",
      "VolumeType": "s",
      "VolumeSizeInBytes": "n",
      "VolumeAttachmentStatus": "s",
    },
  }, root);
}
