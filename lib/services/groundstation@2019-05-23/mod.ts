// Autogenerated API client for: AWS Ground Station

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class GroundStation {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(GroundStation.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-05-23",
    "endpointPrefix": "groundstation",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS Ground Station",
    "serviceId": "GroundStation",
    "signatureVersion": "v4",
    "signingName": "groundstation",
    "uid": "groundstation-2019-05-23"
  };

  async cancelContact(
    {abortSignal, ...params}: RequestConfig & CancelContactRequest,
  ): Promise<ContactIdResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelContact",
      method: "DELETE",
      requestUri: cmnP.encodePath`/contact/${params["contactId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "contactId": "s",
      },
    }, await resp.json());
  }

  async createConfig(
    {abortSignal, ...params}: RequestConfig & CreateConfigRequest,
  ): Promise<ConfigIdResponse> {
    const body: jsonP.JSONObject = {
      configData: fromConfigTypeData(params["configData"]),
      name: params["name"],
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfig",
      requestUri: "/config",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configArn": "s",
        "configId": "s",
        "configType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigCapabilityType>(x),
      },
    }, await resp.json());
  }

  async createDataflowEndpointGroup(
    {abortSignal, ...params}: RequestConfig & CreateDataflowEndpointGroupRequest,
  ): Promise<DataflowEndpointGroupIdResponse> {
    const body: jsonP.JSONObject = {
      endpointDetails: params["endpointDetails"]?.map(x => fromEndpointDetails(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDataflowEndpointGroup",
      requestUri: "/dataflowEndpointGroup",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "dataflowEndpointGroupId": "s",
      },
    }, await resp.json());
  }

  async createMissionProfile(
    {abortSignal, ...params}: RequestConfig & CreateMissionProfileRequest,
  ): Promise<MissionProfileIdResponse> {
    const body: jsonP.JSONObject = {
      contactPostPassDurationSeconds: params["contactPostPassDurationSeconds"],
      contactPrePassDurationSeconds: params["contactPrePassDurationSeconds"],
      dataflowEdges: params["dataflowEdges"],
      minimumViableContactDurationSeconds: params["minimumViableContactDurationSeconds"],
      name: params["name"],
      tags: params["tags"],
      trackingConfigArn: params["trackingConfigArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMissionProfile",
      requestUri: "/missionprofile",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "missionProfileId": "s",
      },
    }, await resp.json());
  }

  async deleteConfig(
    {abortSignal, ...params}: RequestConfig & DeleteConfigRequest,
  ): Promise<ConfigIdResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfig",
      method: "DELETE",
      requestUri: cmnP.encodePath`/config/${params["configType"]}/${params["configId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configArn": "s",
        "configId": "s",
        "configType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigCapabilityType>(x),
      },
    }, await resp.json());
  }

  async deleteDataflowEndpointGroup(
    {abortSignal, ...params}: RequestConfig & DeleteDataflowEndpointGroupRequest,
  ): Promise<DataflowEndpointGroupIdResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDataflowEndpointGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/dataflowEndpointGroup/${params["dataflowEndpointGroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "dataflowEndpointGroupId": "s",
      },
    }, await resp.json());
  }

  async deleteMissionProfile(
    {abortSignal, ...params}: RequestConfig & DeleteMissionProfileRequest,
  ): Promise<MissionProfileIdResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMissionProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/missionprofile/${params["missionProfileId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "missionProfileId": "s",
      },
    }, await resp.json());
  }

  async describeContact(
    {abortSignal, ...params}: RequestConfig & DescribeContactRequest,
  ): Promise<DescribeContactResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeContact",
      method: "GET",
      requestUri: cmnP.encodePath`/contact/${params["contactId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "contactId": "s",
        "contactStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ContactStatus>(x),
        "dataflowList": [toDataflowDetail],
        "endTime": "d",
        "errorMessage": "s",
        "groundStation": "s",
        "maximumElevation": toElevation,
        "missionProfileArn": "s",
        "postPassEndTime": "d",
        "prePassStartTime": "d",
        "region": "s",
        "satelliteArn": "s",
        "startTime": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getConfig(
    {abortSignal, ...params}: RequestConfig & GetConfigRequest,
  ): Promise<GetConfigResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfig",
      method: "GET",
      requestUri: cmnP.encodePath`/config/${params["configType"]}/${params["configId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "configArn": "s",
        "configData": toConfigTypeData,
        "configId": "s",
        "name": "s",
      },
      optional: {
        "configType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigCapabilityType>(x),
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getDataflowEndpointGroup(
    {abortSignal, ...params}: RequestConfig & GetDataflowEndpointGroupRequest,
  ): Promise<GetDataflowEndpointGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDataflowEndpointGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/dataflowEndpointGroup/${params["dataflowEndpointGroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "dataflowEndpointGroupArn": "s",
        "dataflowEndpointGroupId": "s",
        "endpointsDetails": [toEndpointDetails],
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getMinuteUsage(
    {abortSignal, ...params}: RequestConfig & GetMinuteUsageRequest,
  ): Promise<GetMinuteUsageResponse> {
    const body: jsonP.JSONObject = {
      month: params["month"],
      year: params["year"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMinuteUsage",
      requestUri: "/minute-usage",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "estimatedMinutesRemaining": "n",
        "isReservedMinutesCustomer": "b",
        "totalReservedMinuteAllocation": "n",
        "totalScheduledMinutes": "n",
        "upcomingMinutesScheduled": "n",
      },
    }, await resp.json());
  }

  async getMissionProfile(
    {abortSignal, ...params}: RequestConfig & GetMissionProfileRequest,
  ): Promise<GetMissionProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMissionProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/missionprofile/${params["missionProfileId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "contactPostPassDurationSeconds": "n",
        "contactPrePassDurationSeconds": "n",
        "dataflowEdges": [x => jsonP.readList(String, x)],
        "minimumViableContactDurationSeconds": "n",
        "missionProfileArn": "s",
        "missionProfileId": "s",
        "name": "s",
        "region": "s",
        "tags": x => jsonP.readMap(String, String, x),
        "trackingConfigArn": "s",
      },
    }, await resp.json());
  }

  async getSatellite(
    {abortSignal, ...params}: RequestConfig & GetSatelliteRequest,
  ): Promise<GetSatelliteResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSatellite",
      method: "GET",
      requestUri: cmnP.encodePath`/satellite/${params["satelliteId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "groundStations": ["s"],
        "noradSatelliteID": "n",
        "satelliteArn": "s",
        "satelliteId": "s",
      },
    }, await resp.json());
  }

  async listConfigs(
    {abortSignal, ...params}: RequestConfig & ListConfigsRequest = {},
  ): Promise<ListConfigsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigs",
      method: "GET",
      requestUri: "/config",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configList": [toConfigListItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listContacts(
    {abortSignal, ...params}: RequestConfig & ListContactsRequest,
  ): Promise<ListContactsResponse> {
    const body: jsonP.JSONObject = {
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      groundStation: params["groundStation"],
      maxResults: params["maxResults"],
      missionProfileArn: params["missionProfileArn"],
      nextToken: params["nextToken"],
      satelliteArn: params["satelliteArn"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      statusList: params["statusList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListContacts",
      requestUri: "/contacts",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "contactList": [toContactData],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDataflowEndpointGroups(
    {abortSignal, ...params}: RequestConfig & ListDataflowEndpointGroupsRequest = {},
  ): Promise<ListDataflowEndpointGroupsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDataflowEndpointGroups",
      method: "GET",
      requestUri: "/dataflowEndpointGroup",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "dataflowEndpointGroupList": [toDataflowEndpointListItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listGroundStations(
    {abortSignal, ...params}: RequestConfig & ListGroundStationsRequest = {},
  ): Promise<ListGroundStationsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["satelliteId"] != null) query.set("satelliteId", params["satelliteId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListGroundStations",
      method: "GET",
      requestUri: "/groundstation",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "groundStationList": [toGroundStationData],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listMissionProfiles(
    {abortSignal, ...params}: RequestConfig & ListMissionProfilesRequest = {},
  ): Promise<ListMissionProfilesResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMissionProfiles",
      method: "GET",
      requestUri: "/missionprofile",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "missionProfileList": [toMissionProfileListItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listSatellites(
    {abortSignal, ...params}: RequestConfig & ListSatellitesRequest = {},
  ): Promise<ListSatellitesResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSatellites",
      method: "GET",
      requestUri: "/satellite",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "satellites": [toSatelliteListItem],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async reserveContact(
    {abortSignal, ...params}: RequestConfig & ReserveContactRequest,
  ): Promise<ContactIdResponse> {
    const body: jsonP.JSONObject = {
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      groundStation: params["groundStation"],
      missionProfileArn: params["missionProfileArn"],
      satelliteArn: params["satelliteArn"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ReserveContact",
      requestUri: "/contact",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "contactId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateConfig(
    {abortSignal, ...params}: RequestConfig & UpdateConfigRequest,
  ): Promise<ConfigIdResponse> {
    const body: jsonP.JSONObject = {
      configData: fromConfigTypeData(params["configData"]),
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfig",
      method: "PUT",
      requestUri: cmnP.encodePath`/config/${params["configType"]}/${params["configId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configArn": "s",
        "configId": "s",
        "configType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigCapabilityType>(x),
      },
    }, await resp.json());
  }

  async updateMissionProfile(
    {abortSignal, ...params}: RequestConfig & UpdateMissionProfileRequest,
  ): Promise<MissionProfileIdResponse> {
    const body: jsonP.JSONObject = {
      contactPostPassDurationSeconds: params["contactPostPassDurationSeconds"],
      contactPrePassDurationSeconds: params["contactPrePassDurationSeconds"],
      dataflowEdges: params["dataflowEdges"],
      minimumViableContactDurationSeconds: params["minimumViableContactDurationSeconds"],
      name: params["name"],
      trackingConfigArn: params["trackingConfigArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMissionProfile",
      method: "PUT",
      requestUri: cmnP.encodePath`/missionprofile/${params["missionProfileId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "missionProfileId": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CancelContactRequest {
  contactId: string;
}

// refs: 1 - tags: named, input
export interface CreateConfigRequest {
  configData: ConfigTypeData;
  name: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateDataflowEndpointGroupRequest {
  endpointDetails: EndpointDetails[];
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateMissionProfileRequest {
  contactPostPassDurationSeconds?: number | null;
  contactPrePassDurationSeconds?: number | null;
  dataflowEdges: string[][];
  minimumViableContactDurationSeconds: number;
  name: string;
  tags?: { [key: string]: string | null | undefined } | null;
  trackingConfigArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteConfigRequest {
  configId: string;
  configType: ConfigCapabilityType;
}

// refs: 1 - tags: named, input
export interface DeleteDataflowEndpointGroupRequest {
  dataflowEndpointGroupId: string;
}

// refs: 1 - tags: named, input
export interface DeleteMissionProfileRequest {
  missionProfileId: string;
}

// refs: 1 - tags: named, input
export interface DescribeContactRequest {
  contactId: string;
}

// refs: 1 - tags: named, input
export interface GetConfigRequest {
  configId: string;
  configType: ConfigCapabilityType;
}

// refs: 1 - tags: named, input
export interface GetDataflowEndpointGroupRequest {
  dataflowEndpointGroupId: string;
}

// refs: 1 - tags: named, input
export interface GetMinuteUsageRequest {
  month: number;
  year: number;
}

// refs: 1 - tags: named, input
export interface GetMissionProfileRequest {
  missionProfileId: string;
}

// refs: 1 - tags: named, input
export interface GetSatelliteRequest {
  satelliteId: string;
}

// refs: 1 - tags: named, input
export interface ListConfigsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListContactsRequest {
  endTime: Date | number;
  groundStation?: string | null;
  maxResults?: number | null;
  missionProfileArn?: string | null;
  nextToken?: string | null;
  satelliteArn?: string | null;
  startTime: Date | number;
  statusList: ContactStatus[];
}

// refs: 1 - tags: named, input
export interface ListDataflowEndpointGroupsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGroundStationsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
  satelliteId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListMissionProfilesRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSatellitesRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface ReserveContactRequest {
  endTime: Date | number;
  groundStation: string;
  missionProfileArn: string;
  satelliteArn: string;
  startTime: Date | number;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateConfigRequest {
  configData: ConfigTypeData;
  configId: string;
  configType: ConfigCapabilityType;
  name: string;
}

// refs: 1 - tags: named, input
export interface UpdateMissionProfileRequest {
  contactPostPassDurationSeconds?: number | null;
  contactPrePassDurationSeconds?: number | null;
  dataflowEdges?: string[][] | null;
  minimumViableContactDurationSeconds?: number | null;
  missionProfileId: string;
  name?: string | null;
  trackingConfigArn?: string | null;
}

// refs: 1 - tags: named, output
export interface ContactIdResponse {
  contactId?: string | null;
}

// refs: 1 - tags: named, output
export interface ConfigIdResponse {
  configArn?: string | null;
  configId?: string | null;
  configType?: ConfigCapabilityType | null;
}

// refs: 1 - tags: named, output
export interface DataflowEndpointGroupIdResponse {
  dataflowEndpointGroupId?: string | null;
}

// refs: 1 - tags: named, output
export interface MissionProfileIdResponse {
  missionProfileId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeContactResponse {
  contactId?: string | null;
  contactStatus?: ContactStatus | null;
  dataflowList?: DataflowDetail[] | null;
  endTime?: Date | number | null;
  errorMessage?: string | null;
  groundStation?: string | null;
  maximumElevation?: Elevation | null;
  missionProfileArn?: string | null;
  postPassEndTime?: Date | number | null;
  prePassStartTime?: Date | number | null;
  region?: string | null;
  satelliteArn?: string | null;
  startTime?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetConfigResponse {
  configArn: string;
  configData: ConfigTypeData;
  configId: string;
  configType?: ConfigCapabilityType | null;
  name: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetDataflowEndpointGroupResponse {
  dataflowEndpointGroupArn?: string | null;
  dataflowEndpointGroupId?: string | null;
  endpointsDetails?: EndpointDetails[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetMinuteUsageResponse {
  estimatedMinutesRemaining?: number | null;
  isReservedMinutesCustomer?: boolean | null;
  totalReservedMinuteAllocation?: number | null;
  totalScheduledMinutes?: number | null;
  upcomingMinutesScheduled?: number | null;
}

// refs: 1 - tags: named, output
export interface GetMissionProfileResponse {
  contactPostPassDurationSeconds?: number | null;
  contactPrePassDurationSeconds?: number | null;
  dataflowEdges?: string[][] | null;
  minimumViableContactDurationSeconds?: number | null;
  missionProfileArn?: string | null;
  missionProfileId?: string | null;
  name?: string | null;
  region?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
  trackingConfigArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSatelliteResponse {
  groundStations?: string[] | null;
  noradSatelliteID?: number | null;
  satelliteArn?: string | null;
  satelliteId?: string | null;
}

// refs: 1 - tags: named, output
export interface ListConfigsResponse {
  configList?: ConfigListItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListContactsResponse {
  contactList?: ContactData[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDataflowEndpointGroupsResponse {
  dataflowEndpointGroupList?: DataflowEndpointListItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListGroundStationsResponse {
  groundStationList?: GroundStationData[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMissionProfilesResponse {
  missionProfileList?: MissionProfileListItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSatellitesResponse {
  nextToken?: string | null;
  satellites?: SatelliteListItem[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 3 - tags: input, named, interface, output
export interface ConfigTypeData {
  antennaDownlinkConfig?: AntennaDownlinkConfig | null;
  antennaDownlinkDemodDecodeConfig?: AntennaDownlinkDemodDecodeConfig | null;
  antennaUplinkConfig?: AntennaUplinkConfig | null;
  dataflowEndpointConfig?: DataflowEndpointConfig | null;
  trackingConfig?: TrackingConfig | null;
  uplinkEchoConfig?: UplinkEchoConfig | null;
}
function fromConfigTypeData(input?: ConfigTypeData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    antennaDownlinkConfig: fromAntennaDownlinkConfig(input["antennaDownlinkConfig"]),
    antennaDownlinkDemodDecodeConfig: fromAntennaDownlinkDemodDecodeConfig(input["antennaDownlinkDemodDecodeConfig"]),
    antennaUplinkConfig: fromAntennaUplinkConfig(input["antennaUplinkConfig"]),
    dataflowEndpointConfig: fromDataflowEndpointConfig(input["dataflowEndpointConfig"]),
    trackingConfig: fromTrackingConfig(input["trackingConfig"]),
    uplinkEchoConfig: fromUplinkEchoConfig(input["uplinkEchoConfig"]),
  }
}
function toConfigTypeData(root: jsonP.JSONValue): ConfigTypeData {
  return jsonP.readObj({
    required: {},
    optional: {
      "antennaDownlinkConfig": toAntennaDownlinkConfig,
      "antennaDownlinkDemodDecodeConfig": toAntennaDownlinkDemodDecodeConfig,
      "antennaUplinkConfig": toAntennaUplinkConfig,
      "dataflowEndpointConfig": toDataflowEndpointConfig,
      "trackingConfig": toTrackingConfig,
      "uplinkEchoConfig": toUplinkEchoConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AntennaDownlinkConfig {
  spectrumConfig: SpectrumConfig;
}
function fromAntennaDownlinkConfig(input?: AntennaDownlinkConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    spectrumConfig: fromSpectrumConfig(input["spectrumConfig"]),
  }
}
function toAntennaDownlinkConfig(root: jsonP.JSONValue): AntennaDownlinkConfig {
  return jsonP.readObj({
    required: {
      "spectrumConfig": toSpectrumConfig,
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface SpectrumConfig {
  bandwidth: FrequencyBandwidth;
  centerFrequency: Frequency;
  polarization?: Polarization | null;
}
function fromSpectrumConfig(input?: SpectrumConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bandwidth: fromFrequencyBandwidth(input["bandwidth"]),
    centerFrequency: fromFrequency(input["centerFrequency"]),
    polarization: input["polarization"],
  }
}
function toSpectrumConfig(root: jsonP.JSONValue): SpectrumConfig {
  return jsonP.readObj({
    required: {
      "bandwidth": toFrequencyBandwidth,
      "centerFrequency": toFrequency,
    },
    optional: {
      "polarization": (x: jsonP.JSONValue) => cmnP.readEnum<Polarization>(x),
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface FrequencyBandwidth {
  units: BandwidthUnits;
  value: number;
}
function fromFrequencyBandwidth(input?: FrequencyBandwidth | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    units: input["units"],
    value: input["value"],
  }
}
function toFrequencyBandwidth(root: jsonP.JSONValue): FrequencyBandwidth {
  return jsonP.readObj({
    required: {
      "units": (x: jsonP.JSONValue) => cmnP.readEnum<BandwidthUnits>(x),
      "value": "n",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type BandwidthUnits =
| "GHz"
| "MHz"
| "kHz"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, interface, output
export interface Frequency {
  units: FrequencyUnits;
  value: number;
}
function fromFrequency(input?: Frequency | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    units: input["units"],
    value: input["value"],
  }
}
function toFrequency(root: jsonP.JSONValue): Frequency {
  return jsonP.readObj({
    required: {
      "units": (x: jsonP.JSONValue) => cmnP.readEnum<FrequencyUnits>(x),
      "value": "n",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type FrequencyUnits =
| "GHz"
| "MHz"
| "kHz"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type Polarization =
| "LEFT_HAND"
| "NONE"
| "RIGHT_HAND"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface AntennaDownlinkDemodDecodeConfig {
  decodeConfig: DecodeConfig;
  demodulationConfig: DemodulationConfig;
  spectrumConfig: SpectrumConfig;
}
function fromAntennaDownlinkDemodDecodeConfig(input?: AntennaDownlinkDemodDecodeConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    decodeConfig: fromDecodeConfig(input["decodeConfig"]),
    demodulationConfig: fromDemodulationConfig(input["demodulationConfig"]),
    spectrumConfig: fromSpectrumConfig(input["spectrumConfig"]),
  }
}
function toAntennaDownlinkDemodDecodeConfig(root: jsonP.JSONValue): AntennaDownlinkDemodDecodeConfig {
  return jsonP.readObj({
    required: {
      "decodeConfig": toDecodeConfig,
      "demodulationConfig": toDemodulationConfig,
      "spectrumConfig": toSpectrumConfig,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DecodeConfig {
  unvalidatedJSON: string;
}
function fromDecodeConfig(input?: DecodeConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    unvalidatedJSON: input["unvalidatedJSON"],
  }
}
function toDecodeConfig(root: jsonP.JSONValue): DecodeConfig {
  return jsonP.readObj({
    required: {
      "unvalidatedJSON": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DemodulationConfig {
  unvalidatedJSON: string;
}
function fromDemodulationConfig(input?: DemodulationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    unvalidatedJSON: input["unvalidatedJSON"],
  }
}
function toDemodulationConfig(root: jsonP.JSONValue): DemodulationConfig {
  return jsonP.readObj({
    required: {
      "unvalidatedJSON": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AntennaUplinkConfig {
  spectrumConfig: UplinkSpectrumConfig;
  targetEirp: Eirp;
  transmitDisabled?: boolean | null;
}
function fromAntennaUplinkConfig(input?: AntennaUplinkConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    spectrumConfig: fromUplinkSpectrumConfig(input["spectrumConfig"]),
    targetEirp: fromEirp(input["targetEirp"]),
    transmitDisabled: input["transmitDisabled"],
  }
}
function toAntennaUplinkConfig(root: jsonP.JSONValue): AntennaUplinkConfig {
  return jsonP.readObj({
    required: {
      "spectrumConfig": toUplinkSpectrumConfig,
      "targetEirp": toEirp,
    },
    optional: {
      "transmitDisabled": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface UplinkSpectrumConfig {
  centerFrequency: Frequency;
  polarization?: Polarization | null;
}
function fromUplinkSpectrumConfig(input?: UplinkSpectrumConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    centerFrequency: fromFrequency(input["centerFrequency"]),
    polarization: input["polarization"],
  }
}
function toUplinkSpectrumConfig(root: jsonP.JSONValue): UplinkSpectrumConfig {
  return jsonP.readObj({
    required: {
      "centerFrequency": toFrequency,
    },
    optional: {
      "polarization": (x: jsonP.JSONValue) => cmnP.readEnum<Polarization>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Eirp {
  units: EirpUnits;
  value: number;
}
function fromEirp(input?: Eirp | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    units: input["units"],
    value: input["value"],
  }
}
function toEirp(root: jsonP.JSONValue): Eirp {
  return jsonP.readObj({
    required: {
      "units": (x: jsonP.JSONValue) => cmnP.readEnum<EirpUnits>(x),
      "value": "n",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type EirpUnits =
| "dBW"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface DataflowEndpointConfig {
  dataflowEndpointName: string;
  dataflowEndpointRegion?: string | null;
}
function fromDataflowEndpointConfig(input?: DataflowEndpointConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dataflowEndpointName: input["dataflowEndpointName"],
    dataflowEndpointRegion: input["dataflowEndpointRegion"],
  }
}
function toDataflowEndpointConfig(root: jsonP.JSONValue): DataflowEndpointConfig {
  return jsonP.readObj({
    required: {
      "dataflowEndpointName": "s",
    },
    optional: {
      "dataflowEndpointRegion": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TrackingConfig {
  autotrack: Criticality;
}
function fromTrackingConfig(input?: TrackingConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    autotrack: input["autotrack"],
  }
}
function toTrackingConfig(root: jsonP.JSONValue): TrackingConfig {
  return jsonP.readObj({
    required: {
      "autotrack": (x: jsonP.JSONValue) => cmnP.readEnum<Criticality>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type Criticality =
| "PREFERRED"
| "REMOVED"
| "REQUIRED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface UplinkEchoConfig {
  antennaUplinkConfigArn: string;
  enabled: boolean;
}
function fromUplinkEchoConfig(input?: UplinkEchoConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    antennaUplinkConfigArn: input["antennaUplinkConfigArn"],
    enabled: input["enabled"],
  }
}
function toUplinkEchoConfig(root: jsonP.JSONValue): UplinkEchoConfig {
  return jsonP.readObj({
    required: {
      "antennaUplinkConfigArn": "s",
      "enabled": "b",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface EndpointDetails {
  endpoint?: DataflowEndpoint | null;
  securityDetails?: SecurityDetails | null;
}
function fromEndpointDetails(input?: EndpointDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    endpoint: fromDataflowEndpoint(input["endpoint"]),
    securityDetails: fromSecurityDetails(input["securityDetails"]),
  }
}
function toEndpointDetails(root: jsonP.JSONValue): EndpointDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "endpoint": toDataflowEndpoint,
      "securityDetails": toSecurityDetails,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface DataflowEndpoint {
  address?: SocketAddress | null;
  mtu?: number | null;
  name?: string | null;
  status?: EndpointStatus | null;
}
function fromDataflowEndpoint(input?: DataflowEndpoint | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    address: fromSocketAddress(input["address"]),
    mtu: input["mtu"],
    name: input["name"],
    status: input["status"],
  }
}
function toDataflowEndpoint(root: jsonP.JSONValue): DataflowEndpoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "address": toSocketAddress,
      "mtu": "n",
      "name": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<EndpointStatus>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface SocketAddress {
  name: string;
  port: number;
}
function fromSocketAddress(input?: SocketAddress | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    port: input["port"],
  }
}
function toSocketAddress(root: jsonP.JSONValue): SocketAddress {
  return jsonP.readObj({
    required: {
      "name": "s",
      "port": "n",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type EndpointStatus =
| "created"
| "creating"
| "deleted"
| "deleting"
| "failed"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface SecurityDetails {
  roleArn: string;
  securityGroupIds: string[];
  subnetIds: string[];
}
function fromSecurityDetails(input?: SecurityDetails | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    securityGroupIds: input["securityGroupIds"],
    subnetIds: input["subnetIds"],
  }
}
function toSecurityDetails(root: jsonP.JSONValue): SecurityDetails {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "securityGroupIds": ["s"],
      "subnetIds": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type ConfigCapabilityType =
| "antenna-downlink"
| "antenna-downlink-demod-decode"
| "antenna-uplink"
| "dataflow-endpoint"
| "tracking"
| "uplink-echo"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ContactStatus =
| "AVAILABLE"
| "AWS_CANCELLED"
| "AWS_FAILED"
| "CANCELLED"
| "CANCELLING"
| "COMPLETED"
| "FAILED"
| "FAILED_TO_SCHEDULE"
| "PASS"
| "POSTPASS"
| "PREPASS"
| "SCHEDULED"
| "SCHEDULING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DataflowDetail {
  destination?: Destination | null;
  errorMessage?: string | null;
  source?: Source | null;
}
function toDataflowDetail(root: jsonP.JSONValue): DataflowDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "destination": toDestination,
      "errorMessage": "s",
      "source": toSource,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Destination {
  configDetails?: ConfigDetails | null;
  configId?: string | null;
  configType?: ConfigCapabilityType | null;
  dataflowDestinationRegion?: string | null;
}
function toDestination(root: jsonP.JSONValue): Destination {
  return jsonP.readObj({
    required: {},
    optional: {
      "configDetails": toConfigDetails,
      "configId": "s",
      "configType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigCapabilityType>(x),
      "dataflowDestinationRegion": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ConfigDetails {
  antennaDemodDecodeDetails?: AntennaDemodDecodeDetails | null;
  endpointDetails?: EndpointDetails | null;
}
function toConfigDetails(root: jsonP.JSONValue): ConfigDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "antennaDemodDecodeDetails": toAntennaDemodDecodeDetails,
      "endpointDetails": toEndpointDetails,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AntennaDemodDecodeDetails {
  outputNode?: string | null;
}
function toAntennaDemodDecodeDetails(root: jsonP.JSONValue): AntennaDemodDecodeDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "outputNode": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Source {
  configDetails?: ConfigDetails | null;
  configId?: string | null;
  configType?: ConfigCapabilityType | null;
  dataflowSourceRegion?: string | null;
}
function toSource(root: jsonP.JSONValue): Source {
  return jsonP.readObj({
    required: {},
    optional: {
      "configDetails": toConfigDetails,
      "configId": "s",
      "configType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigCapabilityType>(x),
      "dataflowSourceRegion": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Elevation {
  unit: AngleUnits;
  value: number;
}
function toElevation(root: jsonP.JSONValue): Elevation {
  return jsonP.readObj({
    required: {
      "unit": (x: jsonP.JSONValue) => cmnP.readEnum<AngleUnits>(x),
      "value": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type AngleUnits =
| "DEGREE_ANGLE"
| "RADIAN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ConfigListItem {
  configArn?: string | null;
  configId?: string | null;
  configType?: ConfigCapabilityType | null;
  name?: string | null;
}
function toConfigListItem(root: jsonP.JSONValue): ConfigListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "configArn": "s",
      "configId": "s",
      "configType": (x: jsonP.JSONValue) => cmnP.readEnum<ConfigCapabilityType>(x),
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ContactData {
  contactId?: string | null;
  contactStatus?: ContactStatus | null;
  endTime?: Date | number | null;
  errorMessage?: string | null;
  groundStation?: string | null;
  maximumElevation?: Elevation | null;
  missionProfileArn?: string | null;
  postPassEndTime?: Date | number | null;
  prePassStartTime?: Date | number | null;
  region?: string | null;
  satelliteArn?: string | null;
  startTime?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toContactData(root: jsonP.JSONValue): ContactData {
  return jsonP.readObj({
    required: {},
    optional: {
      "contactId": "s",
      "contactStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ContactStatus>(x),
      "endTime": "d",
      "errorMessage": "s",
      "groundStation": "s",
      "maximumElevation": toElevation,
      "missionProfileArn": "s",
      "postPassEndTime": "d",
      "prePassStartTime": "d",
      "region": "s",
      "satelliteArn": "s",
      "startTime": "d",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataflowEndpointListItem {
  dataflowEndpointGroupArn?: string | null;
  dataflowEndpointGroupId?: string | null;
}
function toDataflowEndpointListItem(root: jsonP.JSONValue): DataflowEndpointListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "dataflowEndpointGroupArn": "s",
      "dataflowEndpointGroupId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GroundStationData {
  groundStationId?: string | null;
  groundStationName?: string | null;
  region?: string | null;
}
function toGroundStationData(root: jsonP.JSONValue): GroundStationData {
  return jsonP.readObj({
    required: {},
    optional: {
      "groundStationId": "s",
      "groundStationName": "s",
      "region": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MissionProfileListItem {
  missionProfileArn?: string | null;
  missionProfileId?: string | null;
  name?: string | null;
  region?: string | null;
}
function toMissionProfileListItem(root: jsonP.JSONValue): MissionProfileListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "missionProfileArn": "s",
      "missionProfileId": "s",
      "name": "s",
      "region": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SatelliteListItem {
  groundStations?: string[] | null;
  noradSatelliteID?: number | null;
  satelliteArn?: string | null;
  satelliteId?: string | null;
}
function toSatelliteListItem(root: jsonP.JSONValue): SatelliteListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "groundStations": ["s"],
      "noradSatelliteID": "n",
      "satelliteArn": "s",
      "satelliteId": "s",
    },
  }, root);
}
