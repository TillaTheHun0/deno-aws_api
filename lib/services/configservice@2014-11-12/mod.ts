// Autogenerated API client for: AWS Config

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class ConfigService {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ConfigService.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2014-11-12",
    "endpointPrefix": "config",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Config Service",
    "serviceFullName": "AWS Config",
    "serviceId": "Config Service",
    "signatureVersion": "v4",
    "targetPrefix": "StarlingDoveService",
    "uid": "config-2014-11-12"
  };

  async batchGetAggregateResourceConfig(
    {abortSignal, ...params}: RequestConfig & s.BatchGetAggregateResourceConfigRequest,
  ): Promise<s.BatchGetAggregateResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ResourceIdentifiers: params["ResourceIdentifiers"]?.map(x => fromAggregateResourceIdentifier(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetAggregateResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaseConfigurationItems": [toBaseConfigurationItem],
        "UnprocessedResourceIdentifiers": [toAggregateResourceIdentifier],
      },
    }, await resp.json());
  }

  async batchGetResourceConfig(
    {abortSignal, ...params}: RequestConfig & s.BatchGetResourceConfigRequest,
  ): Promise<s.BatchGetResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      resourceKeys: params["resourceKeys"]?.map(x => fromResourceKey(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "baseConfigurationItems": [toBaseConfigurationItem],
        "unprocessedResourceKeys": [toResourceKey],
      },
    }, await resp.json());
  }

  async deleteAggregationAuthorization(
    {abortSignal, ...params}: RequestConfig & s.DeleteAggregationAuthorizationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      AuthorizedAccountId: params["AuthorizedAccountId"],
      AuthorizedAwsRegion: params["AuthorizedAwsRegion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAggregationAuthorization",
    });
  }

  async deleteConfigRule(
    {abortSignal, ...params}: RequestConfig & s.DeleteConfigRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConfigRule",
    });
  }

  async deleteConfigurationAggregator(
    {abortSignal, ...params}: RequestConfig & s.DeleteConfigurationAggregatorRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConfigurationAggregator",
    });
  }

  async deleteConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & s.DeleteConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderName: params["ConfigurationRecorderName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConfigurationRecorder",
    });
  }

  async deleteConformancePack(
    {abortSignal, ...params}: RequestConfig & s.DeleteConformancePackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConformancePack",
    });
  }

  async deleteDeliveryChannel(
    {abortSignal, ...params}: RequestConfig & s.DeleteDeliveryChannelRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      DeliveryChannelName: params["DeliveryChannelName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDeliveryChannel",
    });
  }

  async deleteEvaluationResults(
    {abortSignal, ...params}: RequestConfig & s.DeleteEvaluationResultsRequest,
  ): Promise<s.DeleteEvaluationResultsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEvaluationResults",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteOrganizationConfigRule(
    {abortSignal, ...params}: RequestConfig & s.DeleteOrganizationConfigRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleName: params["OrganizationConfigRuleName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganizationConfigRule",
    });
  }

  async deleteOrganizationConformancePack(
    {abortSignal, ...params}: RequestConfig & s.DeleteOrganizationConformancePackRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackName: params["OrganizationConformancePackName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOrganizationConformancePack",
    });
  }

  async deletePendingAggregationRequest(
    {abortSignal, ...params}: RequestConfig & s.DeletePendingAggregationRequestRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      RequesterAccountId: params["RequesterAccountId"],
      RequesterAwsRegion: params["RequesterAwsRegion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePendingAggregationRequest",
    });
  }

  async deleteRemediationConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteRemediationConfigurationRequest,
  ): Promise<s.DeleteRemediationConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceType: params["ResourceType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRemediationConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRemediationExceptions(
    {abortSignal, ...params}: RequestConfig & s.DeleteRemediationExceptionsRequest,
  ): Promise<s.DeleteRemediationExceptionsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromRemediationExceptionResourceKey(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRemediationExceptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedBatches": [toFailedDeleteRemediationExceptionsBatch],
      },
    }, await resp.json());
  }

  async deleteResourceConfig(
    {abortSignal, ...params}: RequestConfig & s.DeleteResourceConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResourceConfig",
    });
  }

  async deleteRetentionConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteRetentionConfigurationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      RetentionConfigurationName: params["RetentionConfigurationName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRetentionConfiguration",
    });
  }

  async deleteStoredQuery(
    {abortSignal, ...params}: RequestConfig & s.DeleteStoredQueryRequest,
  ): Promise<s.DeleteStoredQueryResponse> {
    const body: jsonP.JSONObject = {
      QueryName: params["QueryName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteStoredQuery",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deliverConfigSnapshot(
    {abortSignal, ...params}: RequestConfig & s.DeliverConfigSnapshotRequest,
  ): Promise<s.DeliverConfigSnapshotResponse> {
    const body: jsonP.JSONObject = {
      deliveryChannelName: params["deliveryChannelName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeliverConfigSnapshot",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configSnapshotId": "s",
      },
    }, await resp.json());
  }

  async describeAggregateComplianceByConfigRules(
    {abortSignal, ...params}: RequestConfig & s.DescribeAggregateComplianceByConfigRulesRequest,
  ): Promise<s.DescribeAggregateComplianceByConfigRulesResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Filters: fromConfigRuleComplianceFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAggregateComplianceByConfigRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregateComplianceByConfigRules": [toAggregateComplianceByConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAggregationAuthorizations(
    {abortSignal, ...params}: RequestConfig & s.DescribeAggregationAuthorizationsRequest = {},
  ): Promise<s.DescribeAggregationAuthorizationsResponse> {
    const body: jsonP.JSONObject = {
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAggregationAuthorizations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregationAuthorizations": [toAggregationAuthorization],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeComplianceByConfigRule(
    {abortSignal, ...params}: RequestConfig & s.DescribeComplianceByConfigRuleRequest = {},
  ): Promise<s.DescribeComplianceByConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
      ComplianceTypes: params["ComplianceTypes"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComplianceByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceByConfigRules": [toComplianceByConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeComplianceByResource(
    {abortSignal, ...params}: RequestConfig & s.DescribeComplianceByResourceRequest = {},
  ): Promise<s.DescribeComplianceByResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
      ComplianceTypes: params["ComplianceTypes"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeComplianceByResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceByResources": [toComplianceByResource],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigRuleEvaluationStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeConfigRuleEvaluationStatusRequest = {},
  ): Promise<s.DescribeConfigRuleEvaluationStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigRuleEvaluationStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigRulesEvaluationStatus": [toConfigRuleEvaluationStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigRules(
    {abortSignal, ...params}: RequestConfig & s.DescribeConfigRulesRequest = {},
  ): Promise<s.DescribeConfigRulesResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigRules": [toConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigurationAggregatorSourcesStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeConfigurationAggregatorSourcesStatusRequest,
  ): Promise<s.DescribeConfigurationAggregatorSourcesStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      UpdateStatus: params["UpdateStatus"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationAggregatorSourcesStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregatedSourceStatusList": [toAggregatedSourceStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigurationAggregators(
    {abortSignal, ...params}: RequestConfig & s.DescribeConfigurationAggregatorsRequest = {},
  ): Promise<s.DescribeConfigurationAggregatorsResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorNames: params["ConfigurationAggregatorNames"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationAggregators",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationAggregators": [toConfigurationAggregator],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConfigurationRecorderStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeConfigurationRecorderStatusRequest = {},
  ): Promise<s.DescribeConfigurationRecorderStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderNames: params["ConfigurationRecorderNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationRecorderStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationRecordersStatus": [toConfigurationRecorderStatus],
      },
    }, await resp.json());
  }

  async describeConfigurationRecorders(
    {abortSignal, ...params}: RequestConfig & s.DescribeConfigurationRecordersRequest = {},
  ): Promise<s.DescribeConfigurationRecordersResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderNames: params["ConfigurationRecorderNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConfigurationRecorders",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationRecorders": [toConfigurationRecorder],
      },
    }, await resp.json());
  }

  async describeConformancePackCompliance(
    {abortSignal, ...params}: RequestConfig & s.DescribeConformancePackComplianceRequest,
  ): Promise<s.DescribeConformancePackComplianceResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
      Filters: fromConformancePackComplianceFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConformancePackCompliance",
    });
    return jsonP.readObj({
      required: {
        "ConformancePackName": "s",
        "ConformancePackRuleComplianceList": [toConformancePackRuleCompliance],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConformancePackStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeConformancePackStatusRequest = {},
  ): Promise<s.DescribeConformancePackStatusResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackNames: params["ConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConformancePackStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackStatusDetails": [toConformancePackStatusDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeConformancePacks(
    {abortSignal, ...params}: RequestConfig & s.DescribeConformancePacksRequest = {},
  ): Promise<s.DescribeConformancePacksResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackNames: params["ConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConformancePacks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackDetails": [toConformancePackDetail],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeDeliveryChannelStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeDeliveryChannelStatusRequest = {},
  ): Promise<s.DescribeDeliveryChannelStatusResponse> {
    const body: jsonP.JSONObject = {
      DeliveryChannelNames: params["DeliveryChannelNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDeliveryChannelStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeliveryChannelsStatus": [toDeliveryChannelStatus],
      },
    }, await resp.json());
  }

  async describeDeliveryChannels(
    {abortSignal, ...params}: RequestConfig & s.DescribeDeliveryChannelsRequest = {},
  ): Promise<s.DescribeDeliveryChannelsResponse> {
    const body: jsonP.JSONObject = {
      DeliveryChannelNames: params["DeliveryChannelNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDeliveryChannels",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeliveryChannels": [toDeliveryChannel],
      },
    }, await resp.json());
  }

  async describeOrganizationConfigRuleStatuses(
    {abortSignal, ...params}: RequestConfig & s.DescribeOrganizationConfigRuleStatusesRequest = {},
  ): Promise<s.DescribeOrganizationConfigRuleStatusesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleNames: params["OrganizationConfigRuleNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConfigRuleStatuses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRuleStatuses": [toOrganizationConfigRuleStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeOrganizationConfigRules(
    {abortSignal, ...params}: RequestConfig & s.DescribeOrganizationConfigRulesRequest = {},
  ): Promise<s.DescribeOrganizationConfigRulesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleNames: params["OrganizationConfigRuleNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConfigRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRules": [toOrganizationConfigRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeOrganizationConformancePackStatuses(
    {abortSignal, ...params}: RequestConfig & s.DescribeOrganizationConformancePackStatusesRequest = {},
  ): Promise<s.DescribeOrganizationConformancePackStatusesResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackNames: params["OrganizationConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConformancePackStatuses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePackStatuses": [toOrganizationConformancePackStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeOrganizationConformancePacks(
    {abortSignal, ...params}: RequestConfig & s.DescribeOrganizationConformancePacksRequest = {},
  ): Promise<s.DescribeOrganizationConformancePacksResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackNames: params["OrganizationConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOrganizationConformancePacks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePacks": [toOrganizationConformancePack],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describePendingAggregationRequests(
    {abortSignal, ...params}: RequestConfig & s.DescribePendingAggregationRequestsRequest = {},
  ): Promise<s.DescribePendingAggregationRequestsResponse> {
    const body: jsonP.JSONObject = {
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePendingAggregationRequests",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PendingAggregationRequests": [toPendingAggregationRequest],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRemediationConfigurations(
    {abortSignal, ...params}: RequestConfig & s.DescribeRemediationConfigurationsRequest,
  ): Promise<s.DescribeRemediationConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRemediationConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RemediationConfigurations": [toRemediationConfiguration],
      },
    }, await resp.json());
  }

  async describeRemediationExceptions(
    {abortSignal, ...params}: RequestConfig & s.DescribeRemediationExceptionsRequest,
  ): Promise<s.DescribeRemediationExceptionsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromRemediationExceptionResourceKey(x)),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRemediationExceptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RemediationExceptions": [toRemediationException],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRemediationExecutionStatus(
    {abortSignal, ...params}: RequestConfig & s.DescribeRemediationExecutionStatusRequest,
  ): Promise<s.DescribeRemediationExecutionStatusResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromResourceKey(x)),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRemediationExecutionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RemediationExecutionStatuses": [toRemediationExecutionStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRetentionConfigurations(
    {abortSignal, ...params}: RequestConfig & s.DescribeRetentionConfigurationsRequest = {},
  ): Promise<s.DescribeRetentionConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      RetentionConfigurationNames: params["RetentionConfigurationNames"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRetentionConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionConfigurations": [toRetentionConfiguration],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateComplianceDetailsByConfigRule(
    {abortSignal, ...params}: RequestConfig & s.GetAggregateComplianceDetailsByConfigRuleRequest,
  ): Promise<s.GetAggregateComplianceDetailsByConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ConfigRuleName: params["ConfigRuleName"],
      AccountId: params["AccountId"],
      AwsRegion: params["AwsRegion"],
      ComplianceType: params["ComplianceType"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateComplianceDetailsByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregateEvaluationResults": [toAggregateEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateConfigRuleComplianceSummary(
    {abortSignal, ...params}: RequestConfig & s.GetAggregateConfigRuleComplianceSummaryRequest,
  ): Promise<s.GetAggregateConfigRuleComplianceSummaryResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Filters: fromConfigRuleComplianceSummaryFilters(params["Filters"]),
      GroupByKey: params["GroupByKey"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateConfigRuleComplianceSummary",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GroupByKey": "s",
        "AggregateComplianceCounts": [toAggregateComplianceCount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateDiscoveredResourceCounts(
    {abortSignal, ...params}: RequestConfig & s.GetAggregateDiscoveredResourceCountsRequest,
  ): Promise<s.GetAggregateDiscoveredResourceCountsResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Filters: fromResourceCountFilters(params["Filters"]),
      GroupByKey: params["GroupByKey"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateDiscoveredResourceCounts",
    });
    return jsonP.readObj({
      required: {
        "TotalDiscoveredResources": "n",
      },
      optional: {
        "GroupByKey": "s",
        "GroupedResourceCounts": [toGroupedResourceCount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAggregateResourceConfig(
    {abortSignal, ...params}: RequestConfig & s.GetAggregateResourceConfigRequest,
  ): Promise<s.GetAggregateResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ResourceIdentifier: fromAggregateResourceIdentifier(params["ResourceIdentifier"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAggregateResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationItem": toConfigurationItem,
      },
    }, await resp.json());
  }

  async getComplianceDetailsByConfigRule(
    {abortSignal, ...params}: RequestConfig & s.GetComplianceDetailsByConfigRuleRequest,
  ): Promise<s.GetComplianceDetailsByConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ComplianceTypes: params["ComplianceTypes"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceDetailsByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EvaluationResults": [toEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getComplianceDetailsByResource(
    {abortSignal, ...params}: RequestConfig & s.GetComplianceDetailsByResourceRequest,
  ): Promise<s.GetComplianceDetailsByResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
      ComplianceTypes: params["ComplianceTypes"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceDetailsByResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EvaluationResults": [toEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getComplianceSummaryByConfigRule(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<s.GetComplianceSummaryByConfigRuleResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetComplianceSummaryByConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceSummary": toComplianceSummary,
      },
    }, await resp.json());
  }

  async getComplianceSummaryByResourceType(
    {abortSignal, ...params}: RequestConfig & s.GetComplianceSummaryByResourceTypeRequest = {},
  ): Promise<s.GetComplianceSummaryByResourceTypeResponse> {
    const body: jsonP.JSONObject = {
      ResourceTypes: params["ResourceTypes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetComplianceSummaryByResourceType",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceSummariesByResourceType": [toComplianceSummaryByResourceType],
      },
    }, await resp.json());
  }

  async getConformancePackComplianceDetails(
    {abortSignal, ...params}: RequestConfig & s.GetConformancePackComplianceDetailsRequest,
  ): Promise<s.GetConformancePackComplianceDetailsResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
      Filters: fromConformancePackEvaluationFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConformancePackComplianceDetails",
    });
    return jsonP.readObj({
      required: {
        "ConformancePackName": "s",
      },
      optional: {
        "ConformancePackRuleEvaluationResults": [toConformancePackEvaluationResult],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getConformancePackComplianceSummary(
    {abortSignal, ...params}: RequestConfig & s.GetConformancePackComplianceSummaryRequest,
  ): Promise<s.GetConformancePackComplianceSummaryResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackNames: params["ConformancePackNames"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConformancePackComplianceSummary",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackComplianceSummaryList": [toConformancePackComplianceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getDiscoveredResourceCounts(
    {abortSignal, ...params}: RequestConfig & s.GetDiscoveredResourceCountsRequest = {},
  ): Promise<s.GetDiscoveredResourceCountsResponse> {
    const body: jsonP.JSONObject = {
      resourceTypes: params["resourceTypes"],
      limit: params["limit"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDiscoveredResourceCounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "totalDiscoveredResources": "n",
        "resourceCounts": [toResourceCount],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getOrganizationConfigRuleDetailedStatus(
    {abortSignal, ...params}: RequestConfig & s.GetOrganizationConfigRuleDetailedStatusRequest,
  ): Promise<s.GetOrganizationConfigRuleDetailedStatusResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleName: params["OrganizationConfigRuleName"],
      Filters: fromStatusDetailFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOrganizationConfigRuleDetailedStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRuleDetailedStatus": [toMemberAccountStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getOrganizationConformancePackDetailedStatus(
    {abortSignal, ...params}: RequestConfig & s.GetOrganizationConformancePackDetailedStatusRequest,
  ): Promise<s.GetOrganizationConformancePackDetailedStatusResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackName: params["OrganizationConformancePackName"],
      Filters: fromOrganizationResourceDetailedStatusFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOrganizationConformancePackDetailedStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePackDetailedStatuses": [toOrganizationConformancePackDetailedStatus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getResourceConfigHistory(
    {abortSignal, ...params}: RequestConfig & s.GetResourceConfigHistoryRequest,
  ): Promise<s.GetResourceConfigHistoryResponse> {
    const body: jsonP.JSONObject = {
      resourceType: params["resourceType"],
      resourceId: params["resourceId"],
      laterTime: jsonP.serializeDate_unixTimestamp(params["laterTime"]),
      earlierTime: jsonP.serializeDate_unixTimestamp(params["earlierTime"]),
      chronologicalOrder: params["chronologicalOrder"],
      limit: params["limit"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetResourceConfigHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "configurationItems": [toConfigurationItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getStoredQuery(
    {abortSignal, ...params}: RequestConfig & s.GetStoredQueryRequest,
  ): Promise<s.GetStoredQueryResponse> {
    const body: jsonP.JSONObject = {
      QueryName: params["QueryName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetStoredQuery",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StoredQuery": toStoredQuery,
      },
    }, await resp.json());
  }

  async listAggregateDiscoveredResources(
    {abortSignal, ...params}: RequestConfig & s.ListAggregateDiscoveredResourcesRequest,
  ): Promise<s.ListAggregateDiscoveredResourcesResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      ResourceType: params["ResourceType"],
      Filters: fromResourceFilters(params["Filters"]),
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAggregateDiscoveredResources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceIdentifiers": [toAggregateResourceIdentifier],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDiscoveredResources(
    {abortSignal, ...params}: RequestConfig & s.ListDiscoveredResourcesRequest,
  ): Promise<s.ListDiscoveredResourcesResponse> {
    const body: jsonP.JSONObject = {
      resourceType: params["resourceType"],
      resourceIds: params["resourceIds"],
      resourceName: params["resourceName"],
      limit: params["limit"],
      includeDeletedResources: params["includeDeletedResources"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDiscoveredResources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resourceIdentifiers": [toResourceIdentifier],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listStoredQueries(
    {abortSignal, ...params}: RequestConfig & s.ListStoredQueriesRequest = {},
  ): Promise<s.ListStoredQueriesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListStoredQueries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StoredQueryMetadata": [toStoredQueryMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putAggregationAuthorization(
    {abortSignal, ...params}: RequestConfig & s.PutAggregationAuthorizationRequest,
  ): Promise<s.PutAggregationAuthorizationResponse> {
    const body: jsonP.JSONObject = {
      AuthorizedAccountId: params["AuthorizedAccountId"],
      AuthorizedAwsRegion: params["AuthorizedAwsRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAggregationAuthorization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AggregationAuthorization": toAggregationAuthorization,
      },
    }, await resp.json());
  }

  async putConfigRule(
    {abortSignal, ...params}: RequestConfig & s.PutConfigRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigRule: fromConfigRule(params["ConfigRule"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigRule",
    });
  }

  async putConfigurationAggregator(
    {abortSignal, ...params}: RequestConfig & s.PutConfigurationAggregatorRequest,
  ): Promise<s.PutConfigurationAggregatorResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      AccountAggregationSources: params["AccountAggregationSources"]?.map(x => fromAccountAggregationSource(x)),
      OrganizationAggregationSource: fromOrganizationAggregationSource(params["OrganizationAggregationSource"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationAggregator",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationAggregator": toConfigurationAggregator,
      },
    }, await resp.json());
  }

  async putConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & s.PutConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorder: fromConfigurationRecorder(params["ConfigurationRecorder"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationRecorder",
    });
  }

  async putConformancePack(
    {abortSignal, ...params}: RequestConfig & s.PutConformancePackRequest,
  ): Promise<s.PutConformancePackResponse> {
    const body: jsonP.JSONObject = {
      ConformancePackName: params["ConformancePackName"],
      TemplateS3Uri: params["TemplateS3Uri"],
      TemplateBody: params["TemplateBody"],
      DeliveryS3Bucket: params["DeliveryS3Bucket"],
      DeliveryS3KeyPrefix: params["DeliveryS3KeyPrefix"],
      ConformancePackInputParameters: params["ConformancePackInputParameters"]?.map(x => fromConformancePackInputParameter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConformancePack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConformancePackArn": "s",
      },
    }, await resp.json());
  }

  async putDeliveryChannel(
    {abortSignal, ...params}: RequestConfig & s.PutDeliveryChannelRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      DeliveryChannel: fromDeliveryChannel(params["DeliveryChannel"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDeliveryChannel",
    });
  }

  async putEvaluations(
    {abortSignal, ...params}: RequestConfig & s.PutEvaluationsRequest,
  ): Promise<s.PutEvaluationsResponse> {
    const body: jsonP.JSONObject = {
      Evaluations: params["Evaluations"]?.map(x => fromEvaluation(x)),
      ResultToken: params["ResultToken"],
      TestMode: params["TestMode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEvaluations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedEvaluations": [toEvaluation],
      },
    }, await resp.json());
  }

  async putExternalEvaluation(
    {abortSignal, ...params}: RequestConfig & s.PutExternalEvaluationRequest,
  ): Promise<s.PutExternalEvaluationResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ExternalEvaluation: fromExternalEvaluation(params["ExternalEvaluation"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutExternalEvaluation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putOrganizationConfigRule(
    {abortSignal, ...params}: RequestConfig & s.PutOrganizationConfigRuleRequest,
  ): Promise<s.PutOrganizationConfigRuleResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConfigRuleName: params["OrganizationConfigRuleName"],
      OrganizationManagedRuleMetadata: fromOrganizationManagedRuleMetadata(params["OrganizationManagedRuleMetadata"]),
      OrganizationCustomRuleMetadata: fromOrganizationCustomRuleMetadata(params["OrganizationCustomRuleMetadata"]),
      ExcludedAccounts: params["ExcludedAccounts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutOrganizationConfigRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConfigRuleArn": "s",
      },
    }, await resp.json());
  }

  async putOrganizationConformancePack(
    {abortSignal, ...params}: RequestConfig & s.PutOrganizationConformancePackRequest,
  ): Promise<s.PutOrganizationConformancePackResponse> {
    const body: jsonP.JSONObject = {
      OrganizationConformancePackName: params["OrganizationConformancePackName"],
      TemplateS3Uri: params["TemplateS3Uri"],
      TemplateBody: params["TemplateBody"],
      DeliveryS3Bucket: params["DeliveryS3Bucket"],
      DeliveryS3KeyPrefix: params["DeliveryS3KeyPrefix"],
      ConformancePackInputParameters: params["ConformancePackInputParameters"]?.map(x => fromConformancePackInputParameter(x)),
      ExcludedAccounts: params["ExcludedAccounts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutOrganizationConformancePack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OrganizationConformancePackArn": "s",
      },
    }, await resp.json());
  }

  async putRemediationConfigurations(
    {abortSignal, ...params}: RequestConfig & s.PutRemediationConfigurationsRequest,
  ): Promise<s.PutRemediationConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      RemediationConfigurations: params["RemediationConfigurations"]?.map(x => fromRemediationConfiguration(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRemediationConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedBatches": [toFailedRemediationBatch],
      },
    }, await resp.json());
  }

  async putRemediationExceptions(
    {abortSignal, ...params}: RequestConfig & s.PutRemediationExceptionsRequest,
  ): Promise<s.PutRemediationExceptionsResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromRemediationExceptionResourceKey(x)),
      Message: params["Message"],
      ExpirationTime: jsonP.serializeDate_unixTimestamp(params["ExpirationTime"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRemediationExceptions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedBatches": [toFailedRemediationExceptionBatch],
      },
    }, await resp.json());
  }

  async putResourceConfig(
    {abortSignal, ...params}: RequestConfig & s.PutResourceConfigRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      SchemaVersionId: params["SchemaVersionId"],
      ResourceId: params["ResourceId"],
      ResourceName: params["ResourceName"],
      Configuration: params["Configuration"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutResourceConfig",
    });
  }

  async putRetentionConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutRetentionConfigurationRequest,
  ): Promise<s.PutRetentionConfigurationResponse> {
    const body: jsonP.JSONObject = {
      RetentionPeriodInDays: params["RetentionPeriodInDays"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRetentionConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionConfiguration": toRetentionConfiguration,
      },
    }, await resp.json());
  }

  async putStoredQuery(
    {abortSignal, ...params}: RequestConfig & s.PutStoredQueryRequest,
  ): Promise<s.PutStoredQueryResponse> {
    const body: jsonP.JSONObject = {
      StoredQuery: fromStoredQuery(params["StoredQuery"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutStoredQuery",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "QueryArn": "s",
      },
    }, await resp.json());
  }

  async selectAggregateResourceConfig(
    {abortSignal, ...params}: RequestConfig & s.SelectAggregateResourceConfigRequest,
  ): Promise<s.SelectAggregateResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      Expression: params["Expression"],
      ConfigurationAggregatorName: params["ConfigurationAggregatorName"],
      Limit: params["Limit"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SelectAggregateResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Results": ["s"],
        "QueryInfo": toQueryInfo,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async selectResourceConfig(
    {abortSignal, ...params}: RequestConfig & s.SelectResourceConfigRequest,
  ): Promise<s.SelectResourceConfigResponse> {
    const body: jsonP.JSONObject = {
      Expression: params["Expression"],
      Limit: params["Limit"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SelectResourceConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Results": ["s"],
        "QueryInfo": toQueryInfo,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startConfigRulesEvaluation(
    {abortSignal, ...params}: RequestConfig & s.StartConfigRulesEvaluationRequest = {},
  ): Promise<s.StartConfigRulesEvaluationResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleNames: params["ConfigRuleNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartConfigRulesEvaluation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & s.StartConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderName: params["ConfigurationRecorderName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartConfigurationRecorder",
    });
  }

  async startRemediationExecution(
    {abortSignal, ...params}: RequestConfig & s.StartRemediationExecutionRequest,
  ): Promise<s.StartRemediationExecutionResponse> {
    const body: jsonP.JSONObject = {
      ConfigRuleName: params["ConfigRuleName"],
      ResourceKeys: params["ResourceKeys"]?.map(x => fromResourceKey(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartRemediationExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailureMessage": "s",
        "FailedItems": [toResourceKey],
      },
    }, await resp.json());
  }

  async stopConfigurationRecorder(
    {abortSignal, ...params}: RequestConfig & s.StopConfigurationRecorderRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ConfigurationRecorderName: params["ConfigurationRecorderName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopConfigurationRecorder",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

}

function fromAggregateResourceIdentifier(input?: s.AggregateResourceIdentifier | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SourceAccountId: input["SourceAccountId"],
    SourceRegion: input["SourceRegion"],
    ResourceId: input["ResourceId"],
    ResourceType: input["ResourceType"],
    ResourceName: input["ResourceName"],
  }
}
function toAggregateResourceIdentifier(root: jsonP.JSONValue): s.AggregateResourceIdentifier {
  return jsonP.readObj({
    required: {
      "SourceAccountId": "s",
      "SourceRegion": "s",
      "ResourceId": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
    },
    optional: {
      "ResourceName": "s",
    },
  }, root);
}

function fromResourceKey(input?: s.ResourceKey | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    resourceType: input["resourceType"],
    resourceId: input["resourceId"],
  }
}
function toResourceKey(root: jsonP.JSONValue): s.ResourceKey {
  return jsonP.readObj({
    required: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "resourceId": "s",
    },
    optional: {},
  }, root);
}

function fromRemediationExceptionResourceKey(input?: s.RemediationExceptionResourceKey | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceType: input["ResourceType"],
    ResourceId: input["ResourceId"],
  }
}
function toRemediationExceptionResourceKey(root: jsonP.JSONValue): s.RemediationExceptionResourceKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ResourceId": "s",
    },
  }, root);
}

function fromConfigRuleComplianceFilters(input?: s.ConfigRuleComplianceFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleName: input["ConfigRuleName"],
    ComplianceType: input["ComplianceType"],
    AccountId: input["AccountId"],
    AwsRegion: input["AwsRegion"],
  }
}

function fromConformancePackComplianceFilters(input?: s.ConformancePackComplianceFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleNames: input["ConfigRuleNames"],
    ComplianceType: input["ComplianceType"],
  }
}

function fromConfigRuleComplianceSummaryFilters(input?: s.ConfigRuleComplianceSummaryFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    AwsRegion: input["AwsRegion"],
  }
}

function fromResourceCountFilters(input?: s.ResourceCountFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceType: input["ResourceType"],
    AccountId: input["AccountId"],
    Region: input["Region"],
  }
}

function fromConformancePackEvaluationFilters(input?: s.ConformancePackEvaluationFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleNames: input["ConfigRuleNames"],
    ComplianceType: input["ComplianceType"],
    ResourceType: input["ResourceType"],
    ResourceIds: input["ResourceIds"],
  }
}

function fromStatusDetailFilters(input?: s.StatusDetailFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    MemberAccountRuleStatus: input["MemberAccountRuleStatus"],
  }
}

function fromOrganizationResourceDetailedStatusFilters(input?: s.OrganizationResourceDetailedStatusFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    Status: input["Status"],
  }
}

function fromResourceFilters(input?: s.ResourceFilters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountId: input["AccountId"],
    ResourceId: input["ResourceId"],
    ResourceName: input["ResourceName"],
    Region: input["Region"],
  }
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

function fromConfigRule(input?: s.ConfigRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleName: input["ConfigRuleName"],
    ConfigRuleArn: input["ConfigRuleArn"],
    ConfigRuleId: input["ConfigRuleId"],
    Description: input["Description"],
    Scope: fromScope(input["Scope"]),
    Source: fromSource(input["Source"]),
    InputParameters: input["InputParameters"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
    ConfigRuleState: input["ConfigRuleState"],
    CreatedBy: input["CreatedBy"],
  }
}
function toConfigRule(root: jsonP.JSONValue): s.ConfigRule {
  return jsonP.readObj({
    required: {
      "Source": toSource,
    },
    optional: {
      "ConfigRuleName": "s",
      "ConfigRuleArn": "s",
      "ConfigRuleId": "s",
      "Description": "s",
      "Scope": toScope,
      "InputParameters": "s",
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.MaximumExecutionFrequency>(x),
      "ConfigRuleState": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigRuleState>(x),
      "CreatedBy": "s",
    },
  }, root);
}

function fromScope(input?: s.Scope | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ComplianceResourceTypes: input["ComplianceResourceTypes"],
    TagKey: input["TagKey"],
    TagValue: input["TagValue"],
    ComplianceResourceId: input["ComplianceResourceId"],
  }
}
function toScope(root: jsonP.JSONValue): s.Scope {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceResourceTypes": ["s"],
      "TagKey": "s",
      "TagValue": "s",
      "ComplianceResourceId": "s",
    },
  }, root);
}

function fromSource(input?: s.Source | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Owner: input["Owner"],
    SourceIdentifier: input["SourceIdentifier"],
    SourceDetails: input["SourceDetails"]?.map(x => fromSourceDetail(x)),
  }
}
function toSource(root: jsonP.JSONValue): s.Source {
  return jsonP.readObj({
    required: {
      "Owner": (x: jsonP.JSONValue) => cmnP.readEnum<s.Owner>(x),
      "SourceIdentifier": "s",
    },
    optional: {
      "SourceDetails": [toSourceDetail],
    },
  }, root);
}

function fromSourceDetail(input?: s.SourceDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EventSource: input["EventSource"],
    MessageType: input["MessageType"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
  }
}
function toSourceDetail(root: jsonP.JSONValue): s.SourceDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventSource": (x: jsonP.JSONValue) => cmnP.readEnum<s.EventSource>(x),
      "MessageType": (x: jsonP.JSONValue) => cmnP.readEnum<s.MessageType>(x),
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.MaximumExecutionFrequency>(x),
    },
  }, root);
}

function fromAccountAggregationSource(input?: s.AccountAggregationSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AccountIds: input["AccountIds"],
    AllAwsRegions: input["AllAwsRegions"],
    AwsRegions: input["AwsRegions"],
  }
}
function toAccountAggregationSource(root: jsonP.JSONValue): s.AccountAggregationSource {
  return jsonP.readObj({
    required: {
      "AccountIds": ["s"],
    },
    optional: {
      "AllAwsRegions": "b",
      "AwsRegions": ["s"],
    },
  }, root);
}

function fromOrganizationAggregationSource(input?: s.OrganizationAggregationSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoleArn: input["RoleArn"],
    AwsRegions: input["AwsRegions"],
    AllAwsRegions: input["AllAwsRegions"],
  }
}
function toOrganizationAggregationSource(root: jsonP.JSONValue): s.OrganizationAggregationSource {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
    },
    optional: {
      "AwsRegions": ["s"],
      "AllAwsRegions": "b",
    },
  }, root);
}

function fromConfigurationRecorder(input?: s.ConfigurationRecorder | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    roleARN: input["roleARN"],
    recordingGroup: fromRecordingGroup(input["recordingGroup"]),
  }
}
function toConfigurationRecorder(root: jsonP.JSONValue): s.ConfigurationRecorder {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "roleARN": "s",
      "recordingGroup": toRecordingGroup,
    },
  }, root);
}

function fromRecordingGroup(input?: s.RecordingGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    allSupported: input["allSupported"],
    includeGlobalResourceTypes: input["includeGlobalResourceTypes"],
    resourceTypes: input["resourceTypes"],
  }
}
function toRecordingGroup(root: jsonP.JSONValue): s.RecordingGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "allSupported": "b",
      "includeGlobalResourceTypes": "b",
      "resourceTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x)],
    },
  }, root);
}

function fromConformancePackInputParameter(input?: s.ConformancePackInputParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ParameterName: input["ParameterName"],
    ParameterValue: input["ParameterValue"],
  }
}
function toConformancePackInputParameter(root: jsonP.JSONValue): s.ConformancePackInputParameter {
  return jsonP.readObj({
    required: {
      "ParameterName": "s",
      "ParameterValue": "s",
    },
    optional: {},
  }, root);
}

function fromDeliveryChannel(input?: s.DeliveryChannel | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    s3BucketName: input["s3BucketName"],
    s3KeyPrefix: input["s3KeyPrefix"],
    snsTopicARN: input["snsTopicARN"],
    configSnapshotDeliveryProperties: fromConfigSnapshotDeliveryProperties(input["configSnapshotDeliveryProperties"]),
  }
}
function toDeliveryChannel(root: jsonP.JSONValue): s.DeliveryChannel {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "s3BucketName": "s",
      "s3KeyPrefix": "s",
      "snsTopicARN": "s",
      "configSnapshotDeliveryProperties": toConfigSnapshotDeliveryProperties,
    },
  }, root);
}

function fromConfigSnapshotDeliveryProperties(input?: s.ConfigSnapshotDeliveryProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deliveryFrequency: input["deliveryFrequency"],
  }
}
function toConfigSnapshotDeliveryProperties(root: jsonP.JSONValue): s.ConfigSnapshotDeliveryProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "deliveryFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.MaximumExecutionFrequency>(x),
    },
  }, root);
}

function fromEvaluation(input?: s.Evaluation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ComplianceResourceType: input["ComplianceResourceType"],
    ComplianceResourceId: input["ComplianceResourceId"],
    ComplianceType: input["ComplianceType"],
    Annotation: input["Annotation"],
    OrderingTimestamp: jsonP.serializeDate_unixTimestamp(input["OrderingTimestamp"]),
  }
}
function toEvaluation(root: jsonP.JSONValue): s.Evaluation {
  return jsonP.readObj({
    required: {
      "ComplianceResourceType": "s",
      "ComplianceResourceId": "s",
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ComplianceType>(x),
      "OrderingTimestamp": "d",
    },
    optional: {
      "Annotation": "s",
    },
  }, root);
}

function fromExternalEvaluation(input?: s.ExternalEvaluation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ComplianceResourceType: input["ComplianceResourceType"],
    ComplianceResourceId: input["ComplianceResourceId"],
    ComplianceType: input["ComplianceType"],
    Annotation: input["Annotation"],
    OrderingTimestamp: jsonP.serializeDate_unixTimestamp(input["OrderingTimestamp"]),
  }
}

function fromOrganizationManagedRuleMetadata(input?: s.OrganizationManagedRuleMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Description: input["Description"],
    RuleIdentifier: input["RuleIdentifier"],
    InputParameters: input["InputParameters"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
    ResourceTypesScope: input["ResourceTypesScope"],
    ResourceIdScope: input["ResourceIdScope"],
    TagKeyScope: input["TagKeyScope"],
    TagValueScope: input["TagValueScope"],
  }
}
function toOrganizationManagedRuleMetadata(root: jsonP.JSONValue): s.OrganizationManagedRuleMetadata {
  return jsonP.readObj({
    required: {
      "RuleIdentifier": "s",
    },
    optional: {
      "Description": "s",
      "InputParameters": "s",
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.MaximumExecutionFrequency>(x),
      "ResourceTypesScope": ["s"],
      "ResourceIdScope": "s",
      "TagKeyScope": "s",
      "TagValueScope": "s",
    },
  }, root);
}

function fromOrganizationCustomRuleMetadata(input?: s.OrganizationCustomRuleMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Description: input["Description"],
    LambdaFunctionArn: input["LambdaFunctionArn"],
    OrganizationConfigRuleTriggerTypes: input["OrganizationConfigRuleTriggerTypes"],
    InputParameters: input["InputParameters"],
    MaximumExecutionFrequency: input["MaximumExecutionFrequency"],
    ResourceTypesScope: input["ResourceTypesScope"],
    ResourceIdScope: input["ResourceIdScope"],
    TagKeyScope: input["TagKeyScope"],
    TagValueScope: input["TagValueScope"],
  }
}
function toOrganizationCustomRuleMetadata(root: jsonP.JSONValue): s.OrganizationCustomRuleMetadata {
  return jsonP.readObj({
    required: {
      "LambdaFunctionArn": "s",
      "OrganizationConfigRuleTriggerTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.OrganizationConfigRuleTriggerType>(x)],
    },
    optional: {
      "Description": "s",
      "InputParameters": "s",
      "MaximumExecutionFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.MaximumExecutionFrequency>(x),
      "ResourceTypesScope": ["s"],
      "ResourceIdScope": "s",
      "TagKeyScope": "s",
      "TagValueScope": "s",
    },
  }, root);
}

function fromRemediationConfiguration(input?: s.RemediationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConfigRuleName: input["ConfigRuleName"],
    TargetType: input["TargetType"],
    TargetId: input["TargetId"],
    TargetVersion: input["TargetVersion"],
    Parameters: jsonP.serializeMap(input["Parameters"], x => fromRemediationParameterValue(x)),
    ResourceType: input["ResourceType"],
    Automatic: input["Automatic"],
    ExecutionControls: fromExecutionControls(input["ExecutionControls"]),
    MaximumAutomaticAttempts: input["MaximumAutomaticAttempts"],
    RetryAttemptSeconds: input["RetryAttemptSeconds"],
    Arn: input["Arn"],
    CreatedByService: input["CreatedByService"],
  }
}
function toRemediationConfiguration(root: jsonP.JSONValue): s.RemediationConfiguration {
  return jsonP.readObj({
    required: {
      "ConfigRuleName": "s",
      "TargetType": (x: jsonP.JSONValue) => cmnP.readEnum<s.RemediationTargetType>(x),
      "TargetId": "s",
    },
    optional: {
      "TargetVersion": "s",
      "Parameters": x => jsonP.readMap(String, toRemediationParameterValue, x),
      "ResourceType": "s",
      "Automatic": "b",
      "ExecutionControls": toExecutionControls,
      "MaximumAutomaticAttempts": "n",
      "RetryAttemptSeconds": "n",
      "Arn": "s",
      "CreatedByService": "s",
    },
  }, root);
}

function fromRemediationParameterValue(input?: s.RemediationParameterValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceValue: fromResourceValue(input["ResourceValue"]),
    StaticValue: fromStaticValue(input["StaticValue"]),
  }
}
function toRemediationParameterValue(root: jsonP.JSONValue): s.RemediationParameterValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceValue": toResourceValue,
      "StaticValue": toStaticValue,
    },
  }, root);
}

function fromResourceValue(input?: s.ResourceValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Value: input["Value"],
  }
}
function toResourceValue(root: jsonP.JSONValue): s.ResourceValue {
  return jsonP.readObj({
    required: {
      "Value": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceValueType>(x),
    },
    optional: {},
  }, root);
}

function fromStaticValue(input?: s.StaticValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Values: input["Values"],
  }
}
function toStaticValue(root: jsonP.JSONValue): s.StaticValue {
  return jsonP.readObj({
    required: {
      "Values": ["s"],
    },
    optional: {},
  }, root);
}

function fromExecutionControls(input?: s.ExecutionControls | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SsmControls: fromSsmControls(input["SsmControls"]),
  }
}
function toExecutionControls(root: jsonP.JSONValue): s.ExecutionControls {
  return jsonP.readObj({
    required: {},
    optional: {
      "SsmControls": toSsmControls,
    },
  }, root);
}

function fromSsmControls(input?: s.SsmControls | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConcurrentExecutionRatePercentage: input["ConcurrentExecutionRatePercentage"],
    ErrorPercentage: input["ErrorPercentage"],
  }
}
function toSsmControls(root: jsonP.JSONValue): s.SsmControls {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConcurrentExecutionRatePercentage": "n",
      "ErrorPercentage": "n",
    },
  }, root);
}

function fromStoredQuery(input?: s.StoredQuery | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    QueryId: input["QueryId"],
    QueryArn: input["QueryArn"],
    QueryName: input["QueryName"],
    Description: input["Description"],
    Expression: input["Expression"],
  }
}
function toStoredQuery(root: jsonP.JSONValue): s.StoredQuery {
  return jsonP.readObj({
    required: {
      "QueryName": "s",
    },
    optional: {
      "QueryId": "s",
      "QueryArn": "s",
      "Description": "s",
      "Expression": "s",
    },
  }, root);
}

function toBaseConfigurationItem(root: jsonP.JSONValue): s.BaseConfigurationItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "version": "s",
      "accountId": "s",
      "configurationItemCaptureTime": "d",
      "configurationItemStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationItemStatus>(x),
      "configurationStateId": "s",
      "arn": "s",
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "awsRegion": "s",
      "availabilityZone": "s",
      "resourceCreationTime": "d",
      "configuration": "s",
      "supplementaryConfiguration": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toFailedDeleteRemediationExceptionsBatch(root: jsonP.JSONValue): s.FailedDeleteRemediationExceptionsBatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailureMessage": "s",
      "FailedItems": [toRemediationExceptionResourceKey],
    },
  }, root);
}

function toAggregateComplianceByConfigRule(root: jsonP.JSONValue): s.AggregateComplianceByConfigRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "Compliance": toCompliance,
      "AccountId": "s",
      "AwsRegion": "s",
    },
  }, root);
}

function toCompliance(root: jsonP.JSONValue): s.Compliance {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ComplianceType>(x),
      "ComplianceContributorCount": toComplianceContributorCount,
    },
  }, root);
}

function toComplianceContributorCount(root: jsonP.JSONValue): s.ComplianceContributorCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "CappedCount": "n",
      "CapExceeded": "b",
    },
  }, root);
}

function toAggregationAuthorization(root: jsonP.JSONValue): s.AggregationAuthorization {
  return jsonP.readObj({
    required: {},
    optional: {
      "AggregationAuthorizationArn": "s",
      "AuthorizedAccountId": "s",
      "AuthorizedAwsRegion": "s",
      "CreationTime": "d",
    },
  }, root);
}

function toComplianceByConfigRule(root: jsonP.JSONValue): s.ComplianceByConfigRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "Compliance": toCompliance,
    },
  }, root);
}

function toComplianceByResource(root: jsonP.JSONValue): s.ComplianceByResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ResourceId": "s",
      "Compliance": toCompliance,
    },
  }, root);
}

function toConfigRuleEvaluationStatus(root: jsonP.JSONValue): s.ConfigRuleEvaluationStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "ConfigRuleArn": "s",
      "ConfigRuleId": "s",
      "LastSuccessfulInvocationTime": "d",
      "LastFailedInvocationTime": "d",
      "LastSuccessfulEvaluationTime": "d",
      "LastFailedEvaluationTime": "d",
      "FirstActivatedTime": "d",
      "LastDeactivatedTime": "d",
      "LastErrorCode": "s",
      "LastErrorMessage": "s",
      "FirstEvaluationStarted": "b",
    },
  }, root);
}

function toAggregatedSourceStatus(root: jsonP.JSONValue): s.AggregatedSourceStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "SourceId": "s",
      "SourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AggregatedSourceType>(x),
      "AwsRegion": "s",
      "LastUpdateStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.AggregatedSourceStatusType>(x),
      "LastUpdateTime": "d",
      "LastErrorCode": "s",
      "LastErrorMessage": "s",
    },
  }, root);
}

function toConfigurationAggregator(root: jsonP.JSONValue): s.ConfigurationAggregator {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigurationAggregatorName": "s",
      "ConfigurationAggregatorArn": "s",
      "AccountAggregationSources": [toAccountAggregationSource],
      "OrganizationAggregationSource": toOrganizationAggregationSource,
      "CreationTime": "d",
      "LastUpdatedTime": "d",
      "CreatedBy": "s",
    },
  }, root);
}

function toConfigurationRecorderStatus(root: jsonP.JSONValue): s.ConfigurationRecorderStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "lastStartTime": "d",
      "lastStopTime": "d",
      "recording": "b",
      "lastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.RecorderStatus>(x),
      "lastErrorCode": "s",
      "lastErrorMessage": "s",
      "lastStatusChangeTime": "d",
    },
  }, root);
}

function toConformancePackRuleCompliance(root: jsonP.JSONValue): s.ConformancePackRuleCompliance {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConformancePackComplianceType>(x),
    },
  }, root);
}

function toConformancePackStatusDetail(root: jsonP.JSONValue): s.ConformancePackStatusDetail {
  return jsonP.readObj({
    required: {
      "ConformancePackName": "s",
      "ConformancePackId": "s",
      "ConformancePackArn": "s",
      "ConformancePackState": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConformancePackState>(x),
      "StackArn": "s",
      "LastUpdateRequestedTime": "d",
    },
    optional: {
      "ConformancePackStatusReason": "s",
      "LastUpdateCompletedTime": "d",
    },
  }, root);
}

function toConformancePackDetail(root: jsonP.JSONValue): s.ConformancePackDetail {
  return jsonP.readObj({
    required: {
      "ConformancePackName": "s",
      "ConformancePackArn": "s",
      "ConformancePackId": "s",
    },
    optional: {
      "DeliveryS3Bucket": "s",
      "DeliveryS3KeyPrefix": "s",
      "ConformancePackInputParameters": [toConformancePackInputParameter],
      "LastUpdateRequestedTime": "d",
      "CreatedBy": "s",
    },
  }, root);
}

function toDeliveryChannelStatus(root: jsonP.JSONValue): s.DeliveryChannelStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "configSnapshotDeliveryInfo": toConfigExportDeliveryInfo,
      "configHistoryDeliveryInfo": toConfigExportDeliveryInfo,
      "configStreamDeliveryInfo": toConfigStreamDeliveryInfo,
    },
  }, root);
}

function toConfigExportDeliveryInfo(root: jsonP.JSONValue): s.ConfigExportDeliveryInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "lastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeliveryStatus>(x),
      "lastErrorCode": "s",
      "lastErrorMessage": "s",
      "lastAttemptTime": "d",
      "lastSuccessfulTime": "d",
      "nextDeliveryTime": "d",
    },
  }, root);
}

function toConfigStreamDeliveryInfo(root: jsonP.JSONValue): s.ConfigStreamDeliveryInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "lastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeliveryStatus>(x),
      "lastErrorCode": "s",
      "lastErrorMessage": "s",
      "lastStatusChangeTime": "d",
    },
  }, root);
}

function toOrganizationConfigRuleStatus(root: jsonP.JSONValue): s.OrganizationConfigRuleStatus {
  return jsonP.readObj({
    required: {
      "OrganizationConfigRuleName": "s",
      "OrganizationRuleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.OrganizationRuleStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

function toOrganizationConfigRule(root: jsonP.JSONValue): s.OrganizationConfigRule {
  return jsonP.readObj({
    required: {
      "OrganizationConfigRuleName": "s",
      "OrganizationConfigRuleArn": "s",
    },
    optional: {
      "OrganizationManagedRuleMetadata": toOrganizationManagedRuleMetadata,
      "OrganizationCustomRuleMetadata": toOrganizationCustomRuleMetadata,
      "ExcludedAccounts": ["s"],
      "LastUpdateTime": "d",
    },
  }, root);
}

function toOrganizationConformancePackStatus(root: jsonP.JSONValue): s.OrganizationConformancePackStatus {
  return jsonP.readObj({
    required: {
      "OrganizationConformancePackName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.OrganizationResourceStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

function toOrganizationConformancePack(root: jsonP.JSONValue): s.OrganizationConformancePack {
  return jsonP.readObj({
    required: {
      "OrganizationConformancePackName": "s",
      "OrganizationConformancePackArn": "s",
      "LastUpdateTime": "d",
    },
    optional: {
      "DeliveryS3Bucket": "s",
      "DeliveryS3KeyPrefix": "s",
      "ConformancePackInputParameters": [toConformancePackInputParameter],
      "ExcludedAccounts": ["s"],
    },
  }, root);
}

function toPendingAggregationRequest(root: jsonP.JSONValue): s.PendingAggregationRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "RequesterAccountId": "s",
      "RequesterAwsRegion": "s",
    },
  }, root);
}

function toRemediationException(root: jsonP.JSONValue): s.RemediationException {
  return jsonP.readObj({
    required: {
      "ConfigRuleName": "s",
      "ResourceType": "s",
      "ResourceId": "s",
    },
    optional: {
      "Message": "s",
      "ExpirationTime": "d",
    },
  }, root);
}

function toRemediationExecutionStatus(root: jsonP.JSONValue): s.RemediationExecutionStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceKey": toResourceKey,
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.RemediationExecutionState>(x),
      "StepDetails": [toRemediationExecutionStep],
      "InvocationTime": "d",
      "LastUpdatedTime": "d",
    },
  }, root);
}

function toRemediationExecutionStep(root: jsonP.JSONValue): s.RemediationExecutionStep {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.RemediationExecutionStepState>(x),
      "ErrorMessage": "s",
      "StartTime": "d",
      "StopTime": "d",
    },
  }, root);
}

function toRetentionConfiguration(root: jsonP.JSONValue): s.RetentionConfiguration {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "RetentionPeriodInDays": "n",
    },
    optional: {},
  }, root);
}

function toAggregateEvaluationResult(root: jsonP.JSONValue): s.AggregateEvaluationResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "EvaluationResultIdentifier": toEvaluationResultIdentifier,
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ComplianceType>(x),
      "ResultRecordedTime": "d",
      "ConfigRuleInvokedTime": "d",
      "Annotation": "s",
      "AccountId": "s",
      "AwsRegion": "s",
    },
  }, root);
}

function toEvaluationResultIdentifier(root: jsonP.JSONValue): s.EvaluationResultIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "EvaluationResultQualifier": toEvaluationResultQualifier,
      "OrderingTimestamp": "d",
    },
  }, root);
}

function toEvaluationResultQualifier(root: jsonP.JSONValue): s.EvaluationResultQualifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "ConfigRuleName": "s",
      "ResourceType": "s",
      "ResourceId": "s",
    },
  }, root);
}

function toAggregateComplianceCount(root: jsonP.JSONValue): s.AggregateComplianceCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupName": "s",
      "ComplianceSummary": toComplianceSummary,
    },
  }, root);
}

function toComplianceSummary(root: jsonP.JSONValue): s.ComplianceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "CompliantResourceCount": toComplianceContributorCount,
      "NonCompliantResourceCount": toComplianceContributorCount,
      "ComplianceSummaryTimestamp": "d",
    },
  }, root);
}

function toGroupedResourceCount(root: jsonP.JSONValue): s.GroupedResourceCount {
  return jsonP.readObj({
    required: {
      "GroupName": "s",
      "ResourceCount": "n",
    },
    optional: {},
  }, root);
}

function toConfigurationItem(root: jsonP.JSONValue): s.ConfigurationItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "version": "s",
      "accountId": "s",
      "configurationItemCaptureTime": "d",
      "configurationItemStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConfigurationItemStatus>(x),
      "configurationStateId": "s",
      "configurationItemMD5Hash": "s",
      "arn": "s",
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "awsRegion": "s",
      "availabilityZone": "s",
      "resourceCreationTime": "d",
      "tags": x => jsonP.readMap(String, String, x),
      "relatedEvents": ["s"],
      "relationships": [toRelationship],
      "configuration": "s",
      "supplementaryConfiguration": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toRelationship(root: jsonP.JSONValue): s.Relationship {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "relationshipName": "s",
    },
  }, root);
}

function toEvaluationResult(root: jsonP.JSONValue): s.EvaluationResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "EvaluationResultIdentifier": toEvaluationResultIdentifier,
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ComplianceType>(x),
      "ResultRecordedTime": "d",
      "ConfigRuleInvokedTime": "d",
      "Annotation": "s",
      "ResultToken": "s",
    },
  }, root);
}

function toComplianceSummaryByResourceType(root: jsonP.JSONValue): s.ComplianceSummaryByResourceType {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": "s",
      "ComplianceSummary": toComplianceSummary,
    },
  }, root);
}

function toConformancePackEvaluationResult(root: jsonP.JSONValue): s.ConformancePackEvaluationResult {
  return jsonP.readObj({
    required: {
      "ComplianceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConformancePackComplianceType>(x),
      "EvaluationResultIdentifier": toEvaluationResultIdentifier,
      "ConfigRuleInvokedTime": "d",
      "ResultRecordedTime": "d",
    },
    optional: {
      "Annotation": "s",
    },
  }, root);
}

function toConformancePackComplianceSummary(root: jsonP.JSONValue): s.ConformancePackComplianceSummary {
  return jsonP.readObj({
    required: {
      "ConformancePackName": "s",
      "ConformancePackComplianceStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ConformancePackComplianceType>(x),
    },
    optional: {},
  }, root);
}

function toResourceCount(root: jsonP.JSONValue): s.ResourceCount {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "count": "n",
    },
  }, root);
}

function toMemberAccountStatus(root: jsonP.JSONValue): s.MemberAccountStatus {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "ConfigRuleName": "s",
      "MemberAccountRuleStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.MemberAccountRuleStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

function toOrganizationConformancePackDetailedStatus(root: jsonP.JSONValue): s.OrganizationConformancePackDetailedStatus {
  return jsonP.readObj({
    required: {
      "AccountId": "s",
      "ConformancePackName": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.OrganizationResourceDetailedStatus>(x),
    },
    optional: {
      "ErrorCode": "s",
      "ErrorMessage": "s",
      "LastUpdateTime": "d",
    },
  }, root);
}

function toResourceIdentifier(root: jsonP.JSONValue): s.ResourceIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "resourceId": "s",
      "resourceName": "s",
      "resourceDeletionTime": "d",
    },
  }, root);
}

function toStoredQueryMetadata(root: jsonP.JSONValue): s.StoredQueryMetadata {
  return jsonP.readObj({
    required: {
      "QueryId": "s",
      "QueryArn": "s",
      "QueryName": "s",
    },
    optional: {
      "Description": "s",
    },
  }, root);
}

function toFailedRemediationBatch(root: jsonP.JSONValue): s.FailedRemediationBatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailureMessage": "s",
      "FailedItems": [toRemediationConfiguration],
    },
  }, root);
}

function toFailedRemediationExceptionBatch(root: jsonP.JSONValue): s.FailedRemediationExceptionBatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailureMessage": "s",
      "FailedItems": [toRemediationException],
    },
  }, root);
}

function toQueryInfo(root: jsonP.JSONValue): s.QueryInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "SelectFields": [toFieldInfo],
    },
  }, root);
}

function toFieldInfo(root: jsonP.JSONValue): s.FieldInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}
