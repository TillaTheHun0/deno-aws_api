// Autogenerated API client for: AmplifyBackend

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class AmplifyBackend {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AmplifyBackend.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-08-11",
    "endpointPrefix": "amplifybackend",
    "signingName": "amplifybackend",
    "serviceFullName": "AmplifyBackend",
    "serviceId": "AmplifyBackend",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "amplifybackend-2020-08-11",
    "signatureVersion": "v4"
  };

  async cloneBackend(
    {abortSignal, ...params}: RequestConfig & s.CloneBackendRequest,
  ): Promise<s.CloneBackendResponse> {
    const body: jsonP.JSONObject = {
      targetEnvironmentName: params["TargetEnvironmentName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CloneBackend",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/environments/${params["BackendEnvironmentName"]}/clone`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackend(
    {abortSignal, ...params}: RequestConfig & s.CreateBackendRequest,
  ): Promise<s.CreateBackendResponse> {
    const body: jsonP.JSONObject = {
      appId: params["AppId"],
      appName: params["AppName"],
      backendEnvironmentName: params["BackendEnvironmentName"],
      resourceConfig: fromResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackend",
      requestUri: "/backend",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackendAPI(
    {abortSignal, ...params}: RequestConfig & s.CreateBackendAPIRequest,
  ): Promise<s.CreateBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      backendEnvironmentName: params["BackendEnvironmentName"],
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackendAuth(
    {abortSignal, ...params}: RequestConfig & s.CreateBackendAuthRequest,
  ): Promise<s.CreateBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      backendEnvironmentName: params["BackendEnvironmentName"],
      resourceConfig: fromCreateBackendAuthResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackendConfig(
    {abortSignal, ...params}: RequestConfig & s.CreateBackendConfigRequest,
  ): Promise<s.CreateBackendConfigResponse> {
    const body: jsonP.JSONObject = {
      backendManagerAppId: params["BackendManagerAppId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendConfig",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/config`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "JobId": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createToken(
    {abortSignal, ...params}: RequestConfig & s.CreateTokenRequest,
  ): Promise<s.CreateTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateToken",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/challenge`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "ChallengeCode": "s",
        "SessionId": "s",
        "Ttl": "s",
      },
    }, await resp.json());
  }

  async deleteBackend(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackendRequest,
  ): Promise<s.DeleteBackendResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackend",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/environments/${params["BackendEnvironmentName"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async deleteBackendAPI(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackendAPIRequest,
  ): Promise<s.DeleteBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async deleteBackendAuth(
    {abortSignal, ...params}: RequestConfig & s.DeleteBackendAuthRequest,
  ): Promise<s.DeleteBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth/${params["BackendEnvironmentName"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async deleteToken(
    {abortSignal, ...params}: RequestConfig & s.DeleteTokenRequest,
  ): Promise<s.DeleteTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteToken",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/challenge/${params["SessionId"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IsSuccess": "b",
      },
    }, await resp.json());
  }

  async generateBackendAPIModels(
    {abortSignal, ...params}: RequestConfig & s.GenerateBackendAPIModelsRequest,
  ): Promise<s.GenerateBackendAPIModelsResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateBackendAPIModels",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/generateModels`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async getBackend(
    {abortSignal, ...params}: RequestConfig & s.GetBackendRequest,
  ): Promise<s.GetBackendResponse> {
    const body: jsonP.JSONObject = {
      backendEnvironmentName: params["BackendEnvironmentName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackend",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/details`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AmplifyMetaConfig": "s",
        "AppId": "s",
        "AppName": "s",
        "BackendEnvironmentList": ["s"],
        "BackendEnvironmentName": "s",
        "Error": "s",
      },
    }, await resp.json());
  }

  async getBackendAPI(
    {abortSignal, ...params}: RequestConfig & s.GetBackendAPIRequest,
  ): Promise<s.GetBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/details`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "ResourceConfig": toBackendAPIResourceConfig,
        "ResourceName": "s",
      },
    }, await resp.json());
  }

  async getBackendAPIModels(
    {abortSignal, ...params}: RequestConfig & s.GetBackendAPIModelsRequest,
  ): Promise<s.GetBackendAPIModelsResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackendAPIModels",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/getModels`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Models": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.Status>(x),
      },
    }, await resp.json());
  }

  async getBackendAuth(
    {abortSignal, ...params}: RequestConfig & s.GetBackendAuthRequest,
  ): Promise<s.GetBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth/${params["BackendEnvironmentName"]}/details`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "ResourceConfig": toCreateBackendAuthResourceConfig,
        "ResourceName": "s",
      },
    }, await resp.json());
  }

  async getBackendJob(
    {abortSignal, ...params}: RequestConfig & s.GetBackendJobRequest,
  ): Promise<s.GetBackendJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackendJob",
      method: "GET",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/job/${params["BackendEnvironmentName"]}/${params["JobId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "CreateTime": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
        "UpdateTime": "s",
      },
    }, await resp.json());
  }

  async getToken(
    {abortSignal, ...params}: RequestConfig & s.GetTokenRequest,
  ): Promise<s.GetTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetToken",
      method: "GET",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/challenge/${params["SessionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "ChallengeCode": "s",
        "SessionId": "s",
        "Ttl": "s",
      },
    }, await resp.json());
  }

  async listBackendJobs(
    {abortSignal, ...params}: RequestConfig & s.ListBackendJobsRequest,
  ): Promise<s.ListBackendJobsResponse> {
    const body: jsonP.JSONObject = {
      jobId: params["JobId"],
      maxResults: params["MaxResults"],
      nextToken: params["NextToken"],
      operation: params["Operation"],
      status: params["Status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBackendJobs",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/job/${params["BackendEnvironmentName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Jobs": [toBackendJobRespObj],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async removeAllBackends(
    {abortSignal, ...params}: RequestConfig & s.RemoveAllBackendsRequest,
  ): Promise<s.RemoveAllBackendsResponse> {
    const body: jsonP.JSONObject = {
      cleanAmplifyApp: params["CleanAmplifyApp"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveAllBackends",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async removeBackendConfig(
    {abortSignal, ...params}: RequestConfig & s.RemoveBackendConfigRequest,
  ): Promise<s.RemoveBackendConfigResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveBackendConfig",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/config/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Error": "s",
      },
    }, await resp.json());
  }

  async updateBackendAPI(
    {abortSignal, ...params}: RequestConfig & s.UpdateBackendAPIRequest,
  ): Promise<s.UpdateBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async updateBackendAuth(
    {abortSignal, ...params}: RequestConfig & s.UpdateBackendAuthRequest,
  ): Promise<s.UpdateBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromUpdateBackendAuthResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth/${params["BackendEnvironmentName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async updateBackendConfig(
    {abortSignal, ...params}: RequestConfig & s.UpdateBackendConfigRequest,
  ): Promise<s.UpdateBackendConfigResponse> {
    const body: jsonP.JSONObject = {
      loginAuthConfig: fromLoginAuthConfigReqObj(params["LoginAuthConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendConfig",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/config/update`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendManagerAppId": "s",
        "Error": "s",
        "LoginAuthConfig": toLoginAuthConfigReqObj,
      },
    }, await resp.json());
  }

  async updateBackendJob(
    {abortSignal, ...params}: RequestConfig & s.UpdateBackendJobRequest,
  ): Promise<s.UpdateBackendJobResponse> {
    const body: jsonP.JSONObject = {
      operation: params["Operation"],
      status: params["Status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendJob",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/job/${params["BackendEnvironmentName"]}/${params["JobId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "CreateTime": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
        "UpdateTime": "s",
      },
    }, await resp.json());
  }

}

function fromResourceConfig(input?: s.ResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}

function fromBackendAPIResourceConfig(input?: s.BackendAPIResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    additionalAuthTypes: input["AdditionalAuthTypes"]?.map(x => fromBackendAPIAuthType(x)),
    apiName: input["ApiName"],
    conflictResolution: fromBackendAPIConflictResolution(input["ConflictResolution"]),
    defaultAuthType: fromBackendAPIAuthType(input["DefaultAuthType"]),
    service: input["Service"],
    transformSchema: input["TransformSchema"],
  }
}
function toBackendAPIResourceConfig(root: jsonP.JSONValue): s.BackendAPIResourceConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdditionalAuthTypes": [toBackendAPIAuthType],
      "ApiName": "s",
      "ConflictResolution": toBackendAPIConflictResolution,
      "DefaultAuthType": toBackendAPIAuthType,
      "Service": "s",
      "TransformSchema": "s",
    },
  }, root);
}

function fromBackendAPIAuthType(input?: s.BackendAPIAuthType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    mode: input["Mode"],
    settings: fromBackendAPIAppSyncAuthSettings(input["Settings"]),
  }
}
function toBackendAPIAuthType(root: jsonP.JSONValue): s.BackendAPIAuthType {
  return jsonP.readObj({
    required: {},
    optional: {
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.Mode>(x),
      "Settings": toBackendAPIAppSyncAuthSettings,
    },
  }, root);
}

function fromBackendAPIAppSyncAuthSettings(input?: s.BackendAPIAppSyncAuthSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cognitoUserPoolId: input["CognitoUserPoolId"],
    description: input["Description"],
    expirationTime: input["ExpirationTime"],
    openIDAuthTTL: input["OpenIDAuthTTL"],
    openIDClientId: input["OpenIDClientId"],
    openIDIatTTL: input["OpenIDIatTTL"],
    openIDIssueURL: input["OpenIDIssueURL"],
    openIDProviderName: input["OpenIDProviderName"],
  }
}
function toBackendAPIAppSyncAuthSettings(root: jsonP.JSONValue): s.BackendAPIAppSyncAuthSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "CognitoUserPoolId": "s",
      "Description": "s",
      "ExpirationTime": "n",
      "OpenIDAuthTTL": "s",
      "OpenIDClientId": "s",
      "OpenIDIatTTL": "s",
      "OpenIDIssueURL": "s",
      "OpenIDProviderName": "s",
    },
  }, root);
}

function fromBackendAPIConflictResolution(input?: s.BackendAPIConflictResolution | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    resolutionStrategy: input["ResolutionStrategy"],
  }
}
function toBackendAPIConflictResolution(root: jsonP.JSONValue): s.BackendAPIConflictResolution {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResolutionStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResolutionStrategy>(x),
    },
  }, root);
}

function fromCreateBackendAuthResourceConfig(input?: s.CreateBackendAuthResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    authResources: input["AuthResources"],
    identityPoolConfigs: fromCreateBackendAuthIdentityPoolConfig(input["IdentityPoolConfigs"]),
    service: input["Service"],
    userPoolConfigs: fromCreateBackendAuthUserPoolConfig(input["UserPoolConfigs"]),
  }
}
function toCreateBackendAuthResourceConfig(root: jsonP.JSONValue): s.CreateBackendAuthResourceConfig {
  return jsonP.readObj({
    required: {
      "AuthResources": (x: jsonP.JSONValue) => cmnP.readEnum<s.AuthResources>(x),
      "Service": (x: jsonP.JSONValue) => cmnP.readEnum<s.Service>(x),
      "UserPoolConfigs": toCreateBackendAuthUserPoolConfig,
    },
    optional: {
      "IdentityPoolConfigs": toCreateBackendAuthIdentityPoolConfig,
    },
  }, root);
}

function fromCreateBackendAuthIdentityPoolConfig(input?: s.CreateBackendAuthIdentityPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    identityPoolName: input["IdentityPoolName"],
    unauthenticatedLogin: input["UnauthenticatedLogin"],
  }
}
function toCreateBackendAuthIdentityPoolConfig(root: jsonP.JSONValue): s.CreateBackendAuthIdentityPoolConfig {
  return jsonP.readObj({
    required: {
      "IdentityPoolName": "s",
      "UnauthenticatedLogin": "b",
    },
    optional: {},
  }, root);
}

function fromCreateBackendAuthUserPoolConfig(input?: s.CreateBackendAuthUserPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    forgotPassword: fromCreateBackendAuthForgotPasswordConfig(input["ForgotPassword"]),
    mfa: fromCreateBackendAuthMFAConfig(input["Mfa"]),
    oAuth: fromCreateBackendAuthOAuthConfig(input["OAuth"]),
    passwordPolicy: fromCreateBackendAuthPasswordPolicyConfig(input["PasswordPolicy"]),
    requiredSignUpAttributes: input["RequiredSignUpAttributes"],
    signInMethod: input["SignInMethod"],
    userPoolName: input["UserPoolName"],
  }
}
function toCreateBackendAuthUserPoolConfig(root: jsonP.JSONValue): s.CreateBackendAuthUserPoolConfig {
  return jsonP.readObj({
    required: {
      "RequiredSignUpAttributes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.RequiredSignUpAttributesElement>(x)],
      "SignInMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.SignInMethod>(x),
      "UserPoolName": "s",
    },
    optional: {
      "ForgotPassword": toCreateBackendAuthForgotPasswordConfig,
      "Mfa": toCreateBackendAuthMFAConfig,
      "OAuth": toCreateBackendAuthOAuthConfig,
      "PasswordPolicy": toCreateBackendAuthPasswordPolicyConfig,
    },
  }, root);
}

function fromCreateBackendAuthForgotPasswordConfig(input?: s.CreateBackendAuthForgotPasswordConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deliveryMethod: input["DeliveryMethod"],
    emailSettings: fromEmailSettings(input["EmailSettings"]),
    smsSettings: fromSmsSettings(input["SmsSettings"]),
  }
}
function toCreateBackendAuthForgotPasswordConfig(root: jsonP.JSONValue): s.CreateBackendAuthForgotPasswordConfig {
  return jsonP.readObj({
    required: {
      "DeliveryMethod": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeliveryMethod>(x),
    },
    optional: {
      "EmailSettings": toEmailSettings,
      "SmsSettings": toSmsSettings,
    },
  }, root);
}

function fromEmailSettings(input?: s.EmailSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    emailMessage: input["EmailMessage"],
    emailSubject: input["EmailSubject"],
  }
}
function toEmailSettings(root: jsonP.JSONValue): s.EmailSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "EmailMessage": "s",
      "EmailSubject": "s",
    },
  }, root);
}

function fromSmsSettings(input?: s.SmsSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    smsMessage: input["SmsMessage"],
  }
}
function toSmsSettings(root: jsonP.JSONValue): s.SmsSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "SmsMessage": "s",
    },
  }, root);
}

function fromCreateBackendAuthMFAConfig(input?: s.CreateBackendAuthMFAConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MFAMode: input["MFAMode"],
    settings: fromSettings(input["Settings"]),
  }
}
function toCreateBackendAuthMFAConfig(root: jsonP.JSONValue): s.CreateBackendAuthMFAConfig {
  return jsonP.readObj({
    required: {
      "MFAMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.MFAMode>(x),
    },
    optional: {
      "Settings": toSettings,
    },
  }, root);
}

function fromSettings(input?: s.Settings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    mfaTypes: input["MfaTypes"],
    smsMessage: input["SmsMessage"],
  }
}
function toSettings(root: jsonP.JSONValue): s.Settings {
  return jsonP.readObj({
    required: {},
    optional: {
      "MfaTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.MfaTypesElement>(x)],
      "SmsMessage": "s",
    },
  }, root);
}

function fromCreateBackendAuthOAuthConfig(input?: s.CreateBackendAuthOAuthConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    domainPrefix: input["DomainPrefix"],
    oAuthGrantType: input["OAuthGrantType"],
    oAuthScopes: input["OAuthScopes"],
    redirectSignInURIs: input["RedirectSignInURIs"],
    redirectSignOutURIs: input["RedirectSignOutURIs"],
    socialProviderSettings: fromSocialProviderSettings(input["SocialProviderSettings"]),
  }
}
function toCreateBackendAuthOAuthConfig(root: jsonP.JSONValue): s.CreateBackendAuthOAuthConfig {
  return jsonP.readObj({
    required: {
      "OAuthGrantType": (x: jsonP.JSONValue) => cmnP.readEnum<s.OAuthGrantType>(x),
      "OAuthScopes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.OAuthScopesElement>(x)],
      "RedirectSignInURIs": ["s"],
      "RedirectSignOutURIs": ["s"],
    },
    optional: {
      "DomainPrefix": "s",
      "SocialProviderSettings": toSocialProviderSettings,
    },
  }, root);
}

function fromSocialProviderSettings(input?: s.SocialProviderSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Facebook: fromBackendAuthSocialProviderConfig(input["Facebook"]),
    Google: fromBackendAuthSocialProviderConfig(input["Google"]),
    LoginWithAmazon: fromBackendAuthSocialProviderConfig(input["LoginWithAmazon"]),
  }
}
function toSocialProviderSettings(root: jsonP.JSONValue): s.SocialProviderSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "Facebook": toBackendAuthSocialProviderConfig,
      "Google": toBackendAuthSocialProviderConfig,
      "LoginWithAmazon": toBackendAuthSocialProviderConfig,
    },
  }, root);
}

function fromBackendAuthSocialProviderConfig(input?: s.BackendAuthSocialProviderConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    client_id: input["ClientId"],
    client_secret: input["ClientSecret"],
  }
}
function toBackendAuthSocialProviderConfig(root: jsonP.JSONValue): s.BackendAuthSocialProviderConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "ClientId": "s",
      "ClientSecret": "s",
    },
  }, root);
}

function fromCreateBackendAuthPasswordPolicyConfig(input?: s.CreateBackendAuthPasswordPolicyConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    additionalConstraints: input["AdditionalConstraints"],
    minimumLength: input["MinimumLength"],
  }
}
function toCreateBackendAuthPasswordPolicyConfig(root: jsonP.JSONValue): s.CreateBackendAuthPasswordPolicyConfig {
  return jsonP.readObj({
    required: {
      "MinimumLength": "n",
    },
    optional: {
      "AdditionalConstraints": [(x: jsonP.JSONValue) => cmnP.readEnum<s.AdditionalConstraintsElement>(x)],
    },
  }, root);
}

function fromUpdateBackendAuthResourceConfig(input?: s.UpdateBackendAuthResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    authResources: input["AuthResources"],
    identityPoolConfigs: fromUpdateBackendAuthIdentityPoolConfig(input["IdentityPoolConfigs"]),
    service: input["Service"],
    userPoolConfigs: fromUpdateBackendAuthUserPoolConfig(input["UserPoolConfigs"]),
  }
}

function fromUpdateBackendAuthIdentityPoolConfig(input?: s.UpdateBackendAuthIdentityPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    unauthenticatedLogin: input["UnauthenticatedLogin"],
  }
}

function fromUpdateBackendAuthUserPoolConfig(input?: s.UpdateBackendAuthUserPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    forgotPassword: fromUpdateBackendAuthForgotPasswordConfig(input["ForgotPassword"]),
    mfa: fromUpdateBackendAuthMFAConfig(input["Mfa"]),
    oAuth: fromUpdateBackendAuthOAuthConfig(input["OAuth"]),
    passwordPolicy: fromUpdateBackendAuthPasswordPolicyConfig(input["PasswordPolicy"]),
  }
}

function fromUpdateBackendAuthForgotPasswordConfig(input?: s.UpdateBackendAuthForgotPasswordConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deliveryMethod: input["DeliveryMethod"],
    emailSettings: fromEmailSettings(input["EmailSettings"]),
    smsSettings: fromSmsSettings(input["SmsSettings"]),
  }
}

function fromUpdateBackendAuthMFAConfig(input?: s.UpdateBackendAuthMFAConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MFAMode: input["MFAMode"],
    settings: fromSettings(input["Settings"]),
  }
}

function fromUpdateBackendAuthOAuthConfig(input?: s.UpdateBackendAuthOAuthConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    domainPrefix: input["DomainPrefix"],
    oAuthGrantType: input["OAuthGrantType"],
    oAuthScopes: input["OAuthScopes"],
    redirectSignInURIs: input["RedirectSignInURIs"],
    redirectSignOutURIs: input["RedirectSignOutURIs"],
    socialProviderSettings: fromSocialProviderSettings(input["SocialProviderSettings"]),
  }
}

function fromUpdateBackendAuthPasswordPolicyConfig(input?: s.UpdateBackendAuthPasswordPolicyConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    additionalConstraints: input["AdditionalConstraints"],
    minimumLength: input["MinimumLength"],
  }
}

function fromLoginAuthConfigReqObj(input?: s.LoginAuthConfigReqObj | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    aws_cognito_identity_pool_id: input["AwsCognitoIdentityPoolId"],
    aws_cognito_region: input["AwsCognitoRegion"],
    aws_user_pools_id: input["AwsUserPoolsId"],
    aws_user_pools_web_client_id: input["AwsUserPoolsWebClientId"],
  }
}
function toLoginAuthConfigReqObj(root: jsonP.JSONValue): s.LoginAuthConfigReqObj {
  return jsonP.readObj({
    required: {},
    optional: {
      "AwsCognitoIdentityPoolId": "s",
      "AwsCognitoRegion": "s",
      "AwsUserPoolsId": "s",
      "AwsUserPoolsWebClientId": "s",
    },
  }, root);
}

function toBackendJobRespObj(root: jsonP.JSONValue): s.BackendJobRespObj {
  return jsonP.readObj({
    required: {
      "AppId": "s",
      "BackendEnvironmentName": "s",
    },
    optional: {
      "CreateTime": "s",
      "Error": "s",
      "JobId": "s",
      "Operation": "s",
      "Status": "s",
      "UpdateTime": "s",
    },
  }, root);
}
