// Autogenerated API client for: AmplifyBackend

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class AmplifyBackend {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AmplifyBackend.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-08-11",
    "endpointPrefix": "amplifybackend",
    "signingName": "amplifybackend",
    "serviceFullName": "AmplifyBackend",
    "serviceId": "AmplifyBackend",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "amplifybackend-2020-08-11",
    "signatureVersion": "v4"
  };

  async cloneBackend(
    {abortSignal, ...params}: RequestConfig & CloneBackendRequest,
  ): Promise<CloneBackendResponse> {
    const body: jsonP.JSONObject = {
      targetEnvironmentName: params["TargetEnvironmentName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CloneBackend",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/environments/${params["BackendEnvironmentName"]}/clone`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackend(
    {abortSignal, ...params}: RequestConfig & CreateBackendRequest,
  ): Promise<CreateBackendResponse> {
    const body: jsonP.JSONObject = {
      appId: params["AppId"],
      appName: params["AppName"],
      backendEnvironmentName: params["BackendEnvironmentName"],
      resourceConfig: fromResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackend",
      requestUri: "/backend",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackendAPI(
    {abortSignal, ...params}: RequestConfig & CreateBackendAPIRequest,
  ): Promise<CreateBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      backendEnvironmentName: params["BackendEnvironmentName"],
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackendAuth(
    {abortSignal, ...params}: RequestConfig & CreateBackendAuthRequest,
  ): Promise<CreateBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      backendEnvironmentName: params["BackendEnvironmentName"],
      resourceConfig: fromCreateBackendAuthResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createBackendConfig(
    {abortSignal, ...params}: RequestConfig & CreateBackendConfigRequest,
  ): Promise<CreateBackendConfigResponse> {
    const body: jsonP.JSONObject = {
      backendManagerAppId: params["BackendManagerAppId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBackendConfig",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/config`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "JobId": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async createToken(
    {abortSignal, ...params}: RequestConfig & CreateTokenRequest,
  ): Promise<CreateTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateToken",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/challenge`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "ChallengeCode": "s",
        "SessionId": "s",
        "Ttl": "s",
      },
    }, await resp.json());
  }

  async deleteBackend(
    {abortSignal, ...params}: RequestConfig & DeleteBackendRequest,
  ): Promise<DeleteBackendResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteBackend",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/environments/${params["BackendEnvironmentName"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async deleteBackendAPI(
    {abortSignal, ...params}: RequestConfig & DeleteBackendAPIRequest,
  ): Promise<DeleteBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async deleteBackendAuth(
    {abortSignal, ...params}: RequestConfig & DeleteBackendAuthRequest,
  ): Promise<DeleteBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth/${params["BackendEnvironmentName"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async deleteToken(
    {abortSignal, ...params}: RequestConfig & DeleteTokenRequest,
  ): Promise<DeleteTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteToken",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/challenge/${params["SessionId"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IsSuccess": "b",
      },
    }, await resp.json());
  }

  async generateBackendAPIModels(
    {abortSignal, ...params}: RequestConfig & GenerateBackendAPIModelsRequest,
  ): Promise<GenerateBackendAPIModelsResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateBackendAPIModels",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/generateModels`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async getBackend(
    {abortSignal, ...params}: RequestConfig & GetBackendRequest,
  ): Promise<GetBackendResponse> {
    const body: jsonP.JSONObject = {
      backendEnvironmentName: params["BackendEnvironmentName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackend",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/details`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AmplifyMetaConfig": "s",
        "AppId": "s",
        "AppName": "s",
        "BackendEnvironmentList": ["s"],
        "BackendEnvironmentName": "s",
        "Error": "s",
      },
    }, await resp.json());
  }

  async getBackendAPI(
    {abortSignal, ...params}: RequestConfig & GetBackendAPIRequest,
  ): Promise<GetBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/details`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "ResourceConfig": toBackendAPIResourceConfig,
        "ResourceName": "s",
      },
    }, await resp.json());
  }

  async getBackendAPIModels(
    {abortSignal, ...params}: RequestConfig & GetBackendAPIModelsRequest,
  ): Promise<GetBackendAPIModelsResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackendAPIModels",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}/getModels`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Models": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
      },
    }, await resp.json());
  }

  async getBackendAuth(
    {abortSignal, ...params}: RequestConfig & GetBackendAuthRequest,
  ): Promise<GetBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth/${params["BackendEnvironmentName"]}/details`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "ResourceConfig": toCreateBackendAuthResourceConfig,
        "ResourceName": "s",
      },
    }, await resp.json());
  }

  async getBackendJob(
    {abortSignal, ...params}: RequestConfig & GetBackendJobRequest,
  ): Promise<GetBackendJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBackendJob",
      method: "GET",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/job/${params["BackendEnvironmentName"]}/${params["JobId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "CreateTime": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
        "UpdateTime": "s",
      },
    }, await resp.json());
  }

  async getToken(
    {abortSignal, ...params}: RequestConfig & GetTokenRequest,
  ): Promise<GetTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetToken",
      method: "GET",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/challenge/${params["SessionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "ChallengeCode": "s",
        "SessionId": "s",
        "Ttl": "s",
      },
    }, await resp.json());
  }

  async listBackendJobs(
    {abortSignal, ...params}: RequestConfig & ListBackendJobsRequest,
  ): Promise<ListBackendJobsResponse> {
    const body: jsonP.JSONObject = {
      jobId: params["JobId"],
      maxResults: params["MaxResults"],
      nextToken: params["NextToken"],
      operation: params["Operation"],
      status: params["Status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListBackendJobs",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/job/${params["BackendEnvironmentName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Jobs": [toBackendJobRespObj],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async removeAllBackends(
    {abortSignal, ...params}: RequestConfig & RemoveAllBackendsRequest,
  ): Promise<RemoveAllBackendsResponse> {
    const body: jsonP.JSONObject = {
      cleanAmplifyApp: params["CleanAmplifyApp"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveAllBackends",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async removeBackendConfig(
    {abortSignal, ...params}: RequestConfig & RemoveBackendConfigRequest,
  ): Promise<RemoveBackendConfigResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveBackendConfig",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/config/remove`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Error": "s",
      },
    }, await resp.json());
  }

  async updateBackendAPI(
    {abortSignal, ...params}: RequestConfig & UpdateBackendAPIRequest,
  ): Promise<UpdateBackendAPIResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromBackendAPIResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendAPI",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/api/${params["BackendEnvironmentName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async updateBackendAuth(
    {abortSignal, ...params}: RequestConfig & UpdateBackendAuthRequest,
  ): Promise<UpdateBackendAuthResponse> {
    const body: jsonP.JSONObject = {
      resourceConfig: fromUpdateBackendAuthResourceConfig(params["ResourceConfig"]),
      resourceName: params["ResourceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendAuth",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/auth/${params["BackendEnvironmentName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
      },
    }, await resp.json());
  }

  async updateBackendConfig(
    {abortSignal, ...params}: RequestConfig & UpdateBackendConfigRequest,
  ): Promise<UpdateBackendConfigResponse> {
    const body: jsonP.JSONObject = {
      loginAuthConfig: fromLoginAuthConfigReqObj(params["LoginAuthConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendConfig",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/config/update`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendManagerAppId": "s",
        "Error": "s",
        "LoginAuthConfig": toLoginAuthConfigReqObj,
      },
    }, await resp.json());
  }

  async updateBackendJob(
    {abortSignal, ...params}: RequestConfig & UpdateBackendJobRequest,
  ): Promise<UpdateBackendJobResponse> {
    const body: jsonP.JSONObject = {
      operation: params["Operation"],
      status: params["Status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBackendJob",
      requestUri: cmnP.encodePath`/backend/${params["AppId"]}/job/${params["BackendEnvironmentName"]}/${params["JobId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppId": "s",
        "BackendEnvironmentName": "s",
        "CreateTime": "s",
        "Error": "s",
        "JobId": "s",
        "Operation": "s",
        "Status": "s",
        "UpdateTime": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CloneBackendRequest {
  AppId: string;
  BackendEnvironmentName: string;
  TargetEnvironmentName: string;
}

// refs: 1 - tags: named, input
export interface CreateBackendRequest {
  AppId: string;
  AppName: string;
  BackendEnvironmentName: string;
  ResourceConfig?: ResourceConfig | null;
  ResourceName?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateBackendAPIRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceConfig: BackendAPIResourceConfig;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface CreateBackendAuthRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceConfig: CreateBackendAuthResourceConfig;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface CreateBackendConfigRequest {
  AppId: string;
  BackendManagerAppId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateTokenRequest {
  AppId: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackendRequest {
  AppId: string;
  BackendEnvironmentName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackendAPIRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceConfig?: BackendAPIResourceConfig | null;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBackendAuthRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface DeleteTokenRequest {
  AppId: string;
  SessionId: string;
}

// refs: 1 - tags: named, input
export interface GenerateBackendAPIModelsRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface GetBackendRequest {
  AppId: string;
  BackendEnvironmentName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetBackendAPIRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceConfig?: BackendAPIResourceConfig | null;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface GetBackendAPIModelsRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface GetBackendAuthRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface GetBackendJobRequest {
  AppId: string;
  BackendEnvironmentName: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface GetTokenRequest {
  AppId: string;
  SessionId: string;
}

// refs: 1 - tags: named, input
export interface ListBackendJobsRequest {
  AppId: string;
  BackendEnvironmentName: string;
  JobId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, input
export interface RemoveAllBackendsRequest {
  AppId: string;
  CleanAmplifyApp?: boolean | null;
}

// refs: 1 - tags: named, input
export interface RemoveBackendConfigRequest {
  AppId: string;
}

// refs: 1 - tags: named, input
export interface UpdateBackendAPIRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceConfig?: BackendAPIResourceConfig | null;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface UpdateBackendAuthRequest {
  AppId: string;
  BackendEnvironmentName: string;
  ResourceConfig: UpdateBackendAuthResourceConfig;
  ResourceName: string;
}

// refs: 1 - tags: named, input
export interface UpdateBackendConfigRequest {
  AppId: string;
  LoginAuthConfig?: LoginAuthConfigReqObj | null;
}

// refs: 1 - tags: named, input
export interface UpdateBackendJobRequest {
  AppId: string;
  BackendEnvironmentName: string;
  JobId: string;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface CloneBackendResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBackendResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBackendAPIResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBackendAuthResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBackendConfigResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  JobId?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTokenResponse {
  AppId?: string | null;
  ChallengeCode?: string | null;
  SessionId?: string | null;
  Ttl?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteBackendResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteBackendAPIResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteBackendAuthResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteTokenResponse {
  IsSuccess?: boolean | null;
}

// refs: 1 - tags: named, output
export interface GenerateBackendAPIModelsResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBackendResponse {
  AmplifyMetaConfig?: string | null;
  AppId?: string | null;
  AppName?: string | null;
  BackendEnvironmentList?: string[] | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBackendAPIResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  ResourceConfig?: BackendAPIResourceConfig | null;
  ResourceName?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBackendAPIModelsResponse {
  Models?: string | null;
  Status?: Status | null;
}

// refs: 1 - tags: named, output
export interface GetBackendAuthResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  ResourceConfig?: CreateBackendAuthResourceConfig | null;
  ResourceName?: string | null;
}

// refs: 1 - tags: named, output
export interface GetBackendJobResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  CreateTime?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
  UpdateTime?: string | null;
}

// refs: 1 - tags: named, output
export interface GetTokenResponse {
  AppId?: string | null;
  ChallengeCode?: string | null;
  SessionId?: string | null;
  Ttl?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBackendJobsResponse {
  Jobs?: BackendJobRespObj[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveAllBackendsResponse {
  AppId?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveBackendConfigResponse {
  Error?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateBackendAPIResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateBackendAuthResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateBackendConfigResponse {
  AppId?: string | null;
  BackendManagerAppId?: string | null;
  Error?: string | null;
  LoginAuthConfig?: LoginAuthConfigReqObj | null;
}

// refs: 1 - tags: named, output
export interface UpdateBackendJobResponse {
  AppId?: string | null;
  BackendEnvironmentName?: string | null;
  CreateTime?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
  UpdateTime?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface ResourceConfig {
}
function fromResourceConfig(input?: ResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
  }
}

// refs: 5 - tags: input, named, interface, output
export interface BackendAPIResourceConfig {
  AdditionalAuthTypes?: BackendAPIAuthType[] | null;
  ApiName?: string | null;
  ConflictResolution?: BackendAPIConflictResolution | null;
  DefaultAuthType?: BackendAPIAuthType | null;
  Service?: string | null;
  TransformSchema?: string | null;
}
function fromBackendAPIResourceConfig(input?: BackendAPIResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    additionalAuthTypes: input["AdditionalAuthTypes"]?.map(x => fromBackendAPIAuthType(x)),
    apiName: input["ApiName"],
    conflictResolution: fromBackendAPIConflictResolution(input["ConflictResolution"]),
    defaultAuthType: fromBackendAPIAuthType(input["DefaultAuthType"]),
    service: input["Service"],
    transformSchema: input["TransformSchema"],
  }
}
function toBackendAPIResourceConfig(root: jsonP.JSONValue): BackendAPIResourceConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdditionalAuthTypes": [toBackendAPIAuthType],
      "ApiName": "s",
      "ConflictResolution": toBackendAPIConflictResolution,
      "DefaultAuthType": toBackendAPIAuthType,
      "Service": "s",
      "TransformSchema": "s",
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface BackendAPIAuthType {
  Mode?: Mode | null;
  Settings?: BackendAPIAppSyncAuthSettings | null;
}
function fromBackendAPIAuthType(input?: BackendAPIAuthType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    mode: input["Mode"],
    settings: fromBackendAPIAppSyncAuthSettings(input["Settings"]),
  }
}
function toBackendAPIAuthType(root: jsonP.JSONValue): BackendAPIAuthType {
  return jsonP.readObj({
    required: {},
    optional: {
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<Mode>(x),
      "Settings": toBackendAPIAppSyncAuthSettings,
    },
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type Mode =
| "API_KEY"
| "AWS_IAM"
| "AMAZON_COGNITO_USER_POOLS"
| "OPENID_CONNECT"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: input, named, interface, output
export interface BackendAPIAppSyncAuthSettings {
  CognitoUserPoolId?: string | null;
  Description?: string | null;
  ExpirationTime?: number | null;
  OpenIDAuthTTL?: string | null;
  OpenIDClientId?: string | null;
  OpenIDIatTTL?: string | null;
  OpenIDIssueURL?: string | null;
  OpenIDProviderName?: string | null;
}
function fromBackendAPIAppSyncAuthSettings(input?: BackendAPIAppSyncAuthSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cognitoUserPoolId: input["CognitoUserPoolId"],
    description: input["Description"],
    expirationTime: input["ExpirationTime"],
    openIDAuthTTL: input["OpenIDAuthTTL"],
    openIDClientId: input["OpenIDClientId"],
    openIDIatTTL: input["OpenIDIatTTL"],
    openIDIssueURL: input["OpenIDIssueURL"],
    openIDProviderName: input["OpenIDProviderName"],
  }
}
function toBackendAPIAppSyncAuthSettings(root: jsonP.JSONValue): BackendAPIAppSyncAuthSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "CognitoUserPoolId": "s",
      "Description": "s",
      "ExpirationTime": "n",
      "OpenIDAuthTTL": "s",
      "OpenIDClientId": "s",
      "OpenIDIatTTL": "s",
      "OpenIDIssueURL": "s",
      "OpenIDProviderName": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface BackendAPIConflictResolution {
  ResolutionStrategy?: ResolutionStrategy | null;
}
function fromBackendAPIConflictResolution(input?: BackendAPIConflictResolution | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    resolutionStrategy: input["ResolutionStrategy"],
  }
}
function toBackendAPIConflictResolution(root: jsonP.JSONValue): BackendAPIConflictResolution {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResolutionStrategy": (x: jsonP.JSONValue) => cmnP.readEnum<ResolutionStrategy>(x),
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type ResolutionStrategy =
| "OPTIMISTIC_CONCURRENCY"
| "LAMBDA"
| "AUTOMERGE"
| "NONE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface CreateBackendAuthResourceConfig {
  AuthResources: AuthResources;
  IdentityPoolConfigs?: CreateBackendAuthIdentityPoolConfig | null;
  Service: Service;
  UserPoolConfigs: CreateBackendAuthUserPoolConfig;
}
function fromCreateBackendAuthResourceConfig(input?: CreateBackendAuthResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    authResources: input["AuthResources"],
    identityPoolConfigs: fromCreateBackendAuthIdentityPoolConfig(input["IdentityPoolConfigs"]),
    service: input["Service"],
    userPoolConfigs: fromCreateBackendAuthUserPoolConfig(input["UserPoolConfigs"]),
  }
}
function toCreateBackendAuthResourceConfig(root: jsonP.JSONValue): CreateBackendAuthResourceConfig {
  return jsonP.readObj({
    required: {
      "AuthResources": (x: jsonP.JSONValue) => cmnP.readEnum<AuthResources>(x),
      "Service": (x: jsonP.JSONValue) => cmnP.readEnum<Service>(x),
      "UserPoolConfigs": toCreateBackendAuthUserPoolConfig,
    },
    optional: {
      "IdentityPoolConfigs": toCreateBackendAuthIdentityPoolConfig,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type AuthResources =
| "USER_POOL_ONLY"
| "IDENTITY_POOL_AND_USER_POOL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface CreateBackendAuthIdentityPoolConfig {
  IdentityPoolName: string;
  UnauthenticatedLogin: boolean;
}
function fromCreateBackendAuthIdentityPoolConfig(input?: CreateBackendAuthIdentityPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    identityPoolName: input["IdentityPoolName"],
    unauthenticatedLogin: input["UnauthenticatedLogin"],
  }
}
function toCreateBackendAuthIdentityPoolConfig(root: jsonP.JSONValue): CreateBackendAuthIdentityPoolConfig {
  return jsonP.readObj({
    required: {
      "IdentityPoolName": "s",
      "UnauthenticatedLogin": "b",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type Service =
| "COGNITO"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface CreateBackendAuthUserPoolConfig {
  ForgotPassword?: CreateBackendAuthForgotPasswordConfig | null;
  Mfa?: CreateBackendAuthMFAConfig | null;
  OAuth?: CreateBackendAuthOAuthConfig | null;
  PasswordPolicy?: CreateBackendAuthPasswordPolicyConfig | null;
  RequiredSignUpAttributes: RequiredSignUpAttributesElement[];
  SignInMethod: SignInMethod;
  UserPoolName: string;
}
function fromCreateBackendAuthUserPoolConfig(input?: CreateBackendAuthUserPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    forgotPassword: fromCreateBackendAuthForgotPasswordConfig(input["ForgotPassword"]),
    mfa: fromCreateBackendAuthMFAConfig(input["Mfa"]),
    oAuth: fromCreateBackendAuthOAuthConfig(input["OAuth"]),
    passwordPolicy: fromCreateBackendAuthPasswordPolicyConfig(input["PasswordPolicy"]),
    requiredSignUpAttributes: input["RequiredSignUpAttributes"],
    signInMethod: input["SignInMethod"],
    userPoolName: input["UserPoolName"],
  }
}
function toCreateBackendAuthUserPoolConfig(root: jsonP.JSONValue): CreateBackendAuthUserPoolConfig {
  return jsonP.readObj({
    required: {
      "RequiredSignUpAttributes": [(x: jsonP.JSONValue) => cmnP.readEnum<RequiredSignUpAttributesElement>(x)],
      "SignInMethod": (x: jsonP.JSONValue) => cmnP.readEnum<SignInMethod>(x),
      "UserPoolName": "s",
    },
    optional: {
      "ForgotPassword": toCreateBackendAuthForgotPasswordConfig,
      "Mfa": toCreateBackendAuthMFAConfig,
      "OAuth": toCreateBackendAuthOAuthConfig,
      "PasswordPolicy": toCreateBackendAuthPasswordPolicyConfig,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CreateBackendAuthForgotPasswordConfig {
  DeliveryMethod: DeliveryMethod;
  EmailSettings?: EmailSettings | null;
  SmsSettings?: SmsSettings | null;
}
function fromCreateBackendAuthForgotPasswordConfig(input?: CreateBackendAuthForgotPasswordConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deliveryMethod: input["DeliveryMethod"],
    emailSettings: fromEmailSettings(input["EmailSettings"]),
    smsSettings: fromSmsSettings(input["SmsSettings"]),
  }
}
function toCreateBackendAuthForgotPasswordConfig(root: jsonP.JSONValue): CreateBackendAuthForgotPasswordConfig {
  return jsonP.readObj({
    required: {
      "DeliveryMethod": (x: jsonP.JSONValue) => cmnP.readEnum<DeliveryMethod>(x),
    },
    optional: {
      "EmailSettings": toEmailSettings,
      "SmsSettings": toSmsSettings,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DeliveryMethod =
| "EMAIL"
| "SMS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface EmailSettings {
  EmailMessage?: string | null;
  EmailSubject?: string | null;
}
function fromEmailSettings(input?: EmailSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    emailMessage: input["EmailMessage"],
    emailSubject: input["EmailSubject"],
  }
}
function toEmailSettings(root: jsonP.JSONValue): EmailSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "EmailMessage": "s",
      "EmailSubject": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SmsSettings {
  SmsMessage?: string | null;
}
function fromSmsSettings(input?: SmsSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    smsMessage: input["SmsMessage"],
  }
}
function toSmsSettings(root: jsonP.JSONValue): SmsSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "SmsMessage": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CreateBackendAuthMFAConfig {
  MFAMode: MFAMode;
  Settings?: Settings | null;
}
function fromCreateBackendAuthMFAConfig(input?: CreateBackendAuthMFAConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MFAMode: input["MFAMode"],
    settings: fromSettings(input["Settings"]),
  }
}
function toCreateBackendAuthMFAConfig(root: jsonP.JSONValue): CreateBackendAuthMFAConfig {
  return jsonP.readObj({
    required: {
      "MFAMode": (x: jsonP.JSONValue) => cmnP.readEnum<MFAMode>(x),
    },
    optional: {
      "Settings": toSettings,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type MFAMode =
| "ON"
| "OFF"
| "OPTIONAL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface Settings {
  MfaTypes?: MfaTypesElement[] | null;
  SmsMessage?: string | null;
}
function fromSettings(input?: Settings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    mfaTypes: input["MfaTypes"],
    smsMessage: input["SmsMessage"],
  }
}
function toSettings(root: jsonP.JSONValue): Settings {
  return jsonP.readObj({
    required: {},
    optional: {
      "MfaTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<MfaTypesElement>(x)],
      "SmsMessage": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type MfaTypesElement =
| "SMS"
| "TOTP"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface CreateBackendAuthOAuthConfig {
  DomainPrefix?: string | null;
  OAuthGrantType: OAuthGrantType;
  OAuthScopes: OAuthScopesElement[];
  RedirectSignInURIs: string[];
  RedirectSignOutURIs: string[];
  SocialProviderSettings?: SocialProviderSettings | null;
}
function fromCreateBackendAuthOAuthConfig(input?: CreateBackendAuthOAuthConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    domainPrefix: input["DomainPrefix"],
    oAuthGrantType: input["OAuthGrantType"],
    oAuthScopes: input["OAuthScopes"],
    redirectSignInURIs: input["RedirectSignInURIs"],
    redirectSignOutURIs: input["RedirectSignOutURIs"],
    socialProviderSettings: fromSocialProviderSettings(input["SocialProviderSettings"]),
  }
}
function toCreateBackendAuthOAuthConfig(root: jsonP.JSONValue): CreateBackendAuthOAuthConfig {
  return jsonP.readObj({
    required: {
      "OAuthGrantType": (x: jsonP.JSONValue) => cmnP.readEnum<OAuthGrantType>(x),
      "OAuthScopes": [(x: jsonP.JSONValue) => cmnP.readEnum<OAuthScopesElement>(x)],
      "RedirectSignInURIs": ["s"],
      "RedirectSignOutURIs": ["s"],
    },
    optional: {
      "DomainPrefix": "s",
      "SocialProviderSettings": toSocialProviderSettings,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type OAuthGrantType =
| "CODE"
| "IMPLICIT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type OAuthScopesElement =
| "PHONE"
| "EMAIL"
| "OPENID"
| "PROFILE"
| "AWS_COGNITO_SIGNIN_USER_ADMIN"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface SocialProviderSettings {
  Facebook?: BackendAuthSocialProviderConfig | null;
  Google?: BackendAuthSocialProviderConfig | null;
  LoginWithAmazon?: BackendAuthSocialProviderConfig | null;
}
function fromSocialProviderSettings(input?: SocialProviderSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Facebook: fromBackendAuthSocialProviderConfig(input["Facebook"]),
    Google: fromBackendAuthSocialProviderConfig(input["Google"]),
    LoginWithAmazon: fromBackendAuthSocialProviderConfig(input["LoginWithAmazon"]),
  }
}
function toSocialProviderSettings(root: jsonP.JSONValue): SocialProviderSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "Facebook": toBackendAuthSocialProviderConfig,
      "Google": toBackendAuthSocialProviderConfig,
      "LoginWithAmazon": toBackendAuthSocialProviderConfig,
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface BackendAuthSocialProviderConfig {
  ClientId?: string | null;
  ClientSecret?: string | null;
}
function fromBackendAuthSocialProviderConfig(input?: BackendAuthSocialProviderConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    client_id: input["ClientId"],
    client_secret: input["ClientSecret"],
  }
}
function toBackendAuthSocialProviderConfig(root: jsonP.JSONValue): BackendAuthSocialProviderConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "ClientId": "s",
      "ClientSecret": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CreateBackendAuthPasswordPolicyConfig {
  AdditionalConstraints?: AdditionalConstraintsElement[] | null;
  MinimumLength: number;
}
function fromCreateBackendAuthPasswordPolicyConfig(input?: CreateBackendAuthPasswordPolicyConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    additionalConstraints: input["AdditionalConstraints"],
    minimumLength: input["MinimumLength"],
  }
}
function toCreateBackendAuthPasswordPolicyConfig(root: jsonP.JSONValue): CreateBackendAuthPasswordPolicyConfig {
  return jsonP.readObj({
    required: {
      "MinimumLength": "n",
    },
    optional: {
      "AdditionalConstraints": [(x: jsonP.JSONValue) => cmnP.readEnum<AdditionalConstraintsElement>(x)],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type AdditionalConstraintsElement =
| "REQUIRE_DIGIT"
| "REQUIRE_LOWERCASE"
| "REQUIRE_SYMBOL"
| "REQUIRE_UPPERCASE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type RequiredSignUpAttributesElement =
| "ADDRESS"
| "BIRTHDATE"
| "EMAIL"
| "FAMILY_NAME"
| "GENDER"
| "GIVEN_NAME"
| "LOCALE"
| "MIDDLE_NAME"
| "NAME"
| "NICKNAME"
| "PHONE_NUMBER"
| "PICTURE"
| "PREFERRED_USERNAME"
| "PROFILE"
| "UPDATED_AT"
| "WEBSITE"
| "ZONE_INFO"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type SignInMethod =
| "EMAIL"
| "EMAIL_AND_PHONE_NUMBER"
| "PHONE_NUMBER"
| "USERNAME"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateBackendAuthResourceConfig {
  AuthResources: AuthResources;
  IdentityPoolConfigs?: UpdateBackendAuthIdentityPoolConfig | null;
  Service: Service;
  UserPoolConfigs: UpdateBackendAuthUserPoolConfig;
}
function fromUpdateBackendAuthResourceConfig(input?: UpdateBackendAuthResourceConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    authResources: input["AuthResources"],
    identityPoolConfigs: fromUpdateBackendAuthIdentityPoolConfig(input["IdentityPoolConfigs"]),
    service: input["Service"],
    userPoolConfigs: fromUpdateBackendAuthUserPoolConfig(input["UserPoolConfigs"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateBackendAuthIdentityPoolConfig {
  UnauthenticatedLogin?: boolean | null;
}
function fromUpdateBackendAuthIdentityPoolConfig(input?: UpdateBackendAuthIdentityPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    unauthenticatedLogin: input["UnauthenticatedLogin"],
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateBackendAuthUserPoolConfig {
  ForgotPassword?: UpdateBackendAuthForgotPasswordConfig | null;
  Mfa?: UpdateBackendAuthMFAConfig | null;
  OAuth?: UpdateBackendAuthOAuthConfig | null;
  PasswordPolicy?: UpdateBackendAuthPasswordPolicyConfig | null;
}
function fromUpdateBackendAuthUserPoolConfig(input?: UpdateBackendAuthUserPoolConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    forgotPassword: fromUpdateBackendAuthForgotPasswordConfig(input["ForgotPassword"]),
    mfa: fromUpdateBackendAuthMFAConfig(input["Mfa"]),
    oAuth: fromUpdateBackendAuthOAuthConfig(input["OAuth"]),
    passwordPolicy: fromUpdateBackendAuthPasswordPolicyConfig(input["PasswordPolicy"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateBackendAuthForgotPasswordConfig {
  DeliveryMethod?: DeliveryMethod | null;
  EmailSettings?: EmailSettings | null;
  SmsSettings?: SmsSettings | null;
}
function fromUpdateBackendAuthForgotPasswordConfig(input?: UpdateBackendAuthForgotPasswordConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deliveryMethod: input["DeliveryMethod"],
    emailSettings: fromEmailSettings(input["EmailSettings"]),
    smsSettings: fromSmsSettings(input["SmsSettings"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateBackendAuthMFAConfig {
  MFAMode?: MFAMode | null;
  Settings?: Settings | null;
}
function fromUpdateBackendAuthMFAConfig(input?: UpdateBackendAuthMFAConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MFAMode: input["MFAMode"],
    settings: fromSettings(input["Settings"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateBackendAuthOAuthConfig {
  DomainPrefix?: string | null;
  OAuthGrantType?: OAuthGrantType | null;
  OAuthScopes?: OAuthScopesElement[] | null;
  RedirectSignInURIs?: string[] | null;
  RedirectSignOutURIs?: string[] | null;
  SocialProviderSettings?: SocialProviderSettings | null;
}
function fromUpdateBackendAuthOAuthConfig(input?: UpdateBackendAuthOAuthConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    domainPrefix: input["DomainPrefix"],
    oAuthGrantType: input["OAuthGrantType"],
    oAuthScopes: input["OAuthScopes"],
    redirectSignInURIs: input["RedirectSignInURIs"],
    redirectSignOutURIs: input["RedirectSignOutURIs"],
    socialProviderSettings: fromSocialProviderSettings(input["SocialProviderSettings"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface UpdateBackendAuthPasswordPolicyConfig {
  AdditionalConstraints?: AdditionalConstraintsElement[] | null;
  MinimumLength?: number | null;
}
function fromUpdateBackendAuthPasswordPolicyConfig(input?: UpdateBackendAuthPasswordPolicyConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    additionalConstraints: input["AdditionalConstraints"],
    minimumLength: input["MinimumLength"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface LoginAuthConfigReqObj {
  AwsCognitoIdentityPoolId?: string | null;
  AwsCognitoRegion?: string | null;
  AwsUserPoolsId?: string | null;
  AwsUserPoolsWebClientId?: string | null;
}
function fromLoginAuthConfigReqObj(input?: LoginAuthConfigReqObj | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    aws_cognito_identity_pool_id: input["AwsCognitoIdentityPoolId"],
    aws_cognito_region: input["AwsCognitoRegion"],
    aws_user_pools_id: input["AwsUserPoolsId"],
    aws_user_pools_web_client_id: input["AwsUserPoolsWebClientId"],
  }
}
function toLoginAuthConfigReqObj(root: jsonP.JSONValue): LoginAuthConfigReqObj {
  return jsonP.readObj({
    required: {},
    optional: {
      "AwsCognitoIdentityPoolId": "s",
      "AwsCognitoRegion": "s",
      "AwsUserPoolsId": "s",
      "AwsUserPoolsWebClientId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Status =
| "LATEST"
| "STALE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BackendJobRespObj {
  AppId: string;
  BackendEnvironmentName: string;
  CreateTime?: string | null;
  Error?: string | null;
  JobId?: string | null;
  Operation?: string | null;
  Status?: string | null;
  UpdateTime?: string | null;
}
function toBackendJobRespObj(root: jsonP.JSONValue): BackendJobRespObj {
  return jsonP.readObj({
    required: {
      "AppId": "s",
      "BackendEnvironmentName": "s",
    },
    optional: {
      "CreateTime": "s",
      "Error": "s",
      "JobId": "s",
      "Operation": "s",
      "Status": "s",
      "UpdateTime": "s",
    },
  }, root);
}
