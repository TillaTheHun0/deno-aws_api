// Autogenerated API client for: AWS IoT Events

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class IoTEvents {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoTEvents.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-07-27",
    "endpointPrefix": "iotevents",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT Events",
    "serviceId": "IoT Events",
    "signatureVersion": "v4",
    "signingName": "iotevents",
    "uid": "iotevents-2018-07-27"
  };

  async createDetectorModel(
    {abortSignal, ...params}: RequestConfig & CreateDetectorModelRequest,
  ): Promise<CreateDetectorModelResponse> {
    const body: jsonP.JSONObject = params ? {
      detectorModelName: params["detectorModelName"],
      detectorModelDefinition: fromDetectorModelDefinition(params["detectorModelDefinition"]),
      detectorModelDescription: params["detectorModelDescription"],
      key: params["key"],
      roleArn: params["roleArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
      evaluationMethod: params["evaluationMethod"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDetectorModel",
      requestUri: "/detector-models",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "detectorModelConfiguration": toDetectorModelConfiguration,
        },
      }, await resp.json()),
  };
  }

  async createInput(
    {abortSignal, ...params}: RequestConfig & CreateInputRequest,
  ): Promise<CreateInputResponse> {
    const body: jsonP.JSONObject = params ? {
      inputName: params["inputName"],
      inputDescription: params["inputDescription"],
      inputDefinition: fromInputDefinition(params["inputDefinition"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateInput",
      requestUri: "/inputs",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "inputConfiguration": toInputConfiguration,
        },
      }, await resp.json()),
  };
  }

  async deleteDetectorModel(
    {abortSignal, ...params}: RequestConfig & DeleteDetectorModelRequest,
  ): Promise<DeleteDetectorModelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDetectorModel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/detector-models/${params["detectorModelName"]}`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteInput(
    {abortSignal, ...params}: RequestConfig & DeleteInputRequest,
  ): Promise<DeleteInputResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteInput",
      method: "DELETE",
      requestUri: cmnP.encodePath`/inputs/${params["inputName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async describeDetectorModel(
    {abortSignal, ...params}: RequestConfig & DescribeDetectorModelRequest,
  ): Promise<DescribeDetectorModelResponse> {
    const query = new URLSearchParams;
    if (params["detectorModelVersion"] != null) query.set("version", params["detectorModelVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeDetectorModel",
      method: "GET",
      requestUri: cmnP.encodePath`/detector-models/${params["detectorModelName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "detectorModel": toDetectorModel,
        },
      }, await resp.json()),
  };
  }

  async describeInput(
    {abortSignal, ...params}: RequestConfig & DescribeInputRequest,
  ): Promise<DescribeInputResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeInput",
      method: "GET",
      requestUri: cmnP.encodePath`/inputs/${params["inputName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "input": toInput,
        },
      }, await resp.json()),
  };
  }

  async describeLoggingOptions(
    {abortSignal, ...params}: RequestConfig & DescribeLoggingOptionsRequest = {},
  ): Promise<DescribeLoggingOptionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeLoggingOptions",
      method: "GET",
      requestUri: "/logging",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "loggingOptions": toLoggingOptions,
        },
      }, await resp.json()),
  };
  }

  async listDetectorModelVersions(
    {abortSignal, ...params}: RequestConfig & ListDetectorModelVersionsRequest,
  ): Promise<ListDetectorModelVersionsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDetectorModelVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/detector-models/${params["detectorModelName"]}/versions`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "detectorModelVersionSummaries": [toDetectorModelVersionSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listDetectorModels(
    {abortSignal, ...params}: RequestConfig & ListDetectorModelsRequest = {},
  ): Promise<ListDetectorModelsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDetectorModels",
      method: "GET",
      requestUri: "/detector-models",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "detectorModelSummaries": [toDetectorModelSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listInputs(
    {abortSignal, ...params}: RequestConfig & ListInputsRequest = {},
  ): Promise<ListInputsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInputs",
      method: "GET",
      requestUri: "/inputs",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "inputSummaries": [toInputSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "tags": [toTag],
        },
      }, await resp.json()),
  };
  }

  async putLoggingOptions(
    {abortSignal, ...params}: RequestConfig & PutLoggingOptionsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      loggingOptions: fromLoggingOptions(params["loggingOptions"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLoggingOptions",
      method: "PUT",
      requestUri: "/logging",
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "TagResource",
      requestUri: "/tags",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: "/tags",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateDetectorModel(
    {abortSignal, ...params}: RequestConfig & UpdateDetectorModelRequest,
  ): Promise<UpdateDetectorModelResponse> {
    const body: jsonP.JSONObject = params ? {
      detectorModelDefinition: fromDetectorModelDefinition(params["detectorModelDefinition"]),
      detectorModelDescription: params["detectorModelDescription"],
      roleArn: params["roleArn"],
      evaluationMethod: params["evaluationMethod"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDetectorModel",
      requestUri: cmnP.encodePath`/detector-models/${params["detectorModelName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "detectorModelConfiguration": toDetectorModelConfiguration,
        },
      }, await resp.json()),
  };
  }

  async updateInput(
    {abortSignal, ...params}: RequestConfig & UpdateInputRequest,
  ): Promise<UpdateInputResponse> {
    const body: jsonP.JSONObject = params ? {
      inputDescription: params["inputDescription"],
      inputDefinition: fromInputDefinition(params["inputDefinition"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateInput",
      method: "PUT",
      requestUri: cmnP.encodePath`/inputs/${params["inputName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "inputConfiguration": toInputConfiguration,
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface CreateDetectorModelRequest {
  detectorModelName: string;
  detectorModelDefinition: DetectorModelDefinition;
  detectorModelDescription?: string | null;
  key?: string | null;
  roleArn: string;
  tags?: Tag[] | null;
  evaluationMethod?: EvaluationMethod | null;
}

// refs: 1 - tags: named, input
export interface CreateInputRequest {
  inputName: string;
  inputDescription?: string | null;
  inputDefinition: InputDefinition;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteDetectorModelRequest {
  detectorModelName: string;
}

// refs: 1 - tags: named, input
export interface DeleteInputRequest {
  inputName: string;
}

// refs: 1 - tags: named, input
export interface DescribeDetectorModelRequest {
  detectorModelName: string;
  detectorModelVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeInputRequest {
  inputName: string;
}

// refs: 1 - tags: named, input
export interface DescribeLoggingOptionsRequest {
}

// refs: 1 - tags: named, input
export interface ListDetectorModelVersionsRequest {
  detectorModelName: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDetectorModelsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListInputsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutLoggingOptionsRequest {
  loggingOptions: LoggingOptions;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDetectorModelRequest {
  detectorModelName: string;
  detectorModelDefinition: DetectorModelDefinition;
  detectorModelDescription?: string | null;
  roleArn: string;
  evaluationMethod?: EvaluationMethod | null;
}

// refs: 1 - tags: named, input
export interface UpdateInputRequest {
  inputName: string;
  inputDescription?: string | null;
  inputDefinition: InputDefinition;
}

// refs: 1 - tags: named, output
export interface CreateDetectorModelResponse {
  detectorModelConfiguration?: DetectorModelConfiguration | null;
}

// refs: 1 - tags: named, output
export interface CreateInputResponse {
  inputConfiguration?: InputConfiguration | null;
}

// refs: 1 - tags: named, output
export interface DeleteDetectorModelResponse {
}

// refs: 1 - tags: named, output
export interface DeleteInputResponse {
}

// refs: 1 - tags: named, output
export interface DescribeDetectorModelResponse {
  detectorModel?: DetectorModel | null;
}

// refs: 1 - tags: named, output
export interface DescribeInputResponse {
  input?: Input | null;
}

// refs: 1 - tags: named, output
export interface DescribeLoggingOptionsResponse {
  loggingOptions?: LoggingOptions | null;
}

// refs: 1 - tags: named, output
export interface ListDetectorModelVersionsResponse {
  detectorModelVersionSummaries?: DetectorModelVersionSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDetectorModelsResponse {
  detectorModelSummaries?: DetectorModelSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInputsResponse {
  inputSummaries?: InputSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDetectorModelResponse {
  detectorModelConfiguration?: DetectorModelConfiguration | null;
}

// refs: 1 - tags: named, output
export interface UpdateInputResponse {
  inputConfiguration?: InputConfiguration | null;
}

// refs: 3 - tags: input, named, interface, output
export interface DetectorModelDefinition {
  states: State[];
  initialStateName: string;
}
function fromDetectorModelDefinition(input?: DetectorModelDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    states: input["states"]?.map(x => fromState(x)),
    initialStateName: input["initialStateName"],
  }
}
function toDetectorModelDefinition(root: jsonP.JSONValue): DetectorModelDefinition {
  return jsonP.readObj({
    required: {
      "states": [toState],
      "initialStateName": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface State {
  stateName: string;
  onInput?: OnInputLifecycle | null;
  onEnter?: OnEnterLifecycle | null;
  onExit?: OnExitLifecycle | null;
}
function fromState(input?: State | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stateName: input["stateName"],
    onInput: fromOnInputLifecycle(input["onInput"]),
    onEnter: fromOnEnterLifecycle(input["onEnter"]),
    onExit: fromOnExitLifecycle(input["onExit"]),
  }
}
function toState(root: jsonP.JSONValue): State {
  return jsonP.readObj({
    required: {
      "stateName": "s",
    },
    optional: {
      "onInput": toOnInputLifecycle,
      "onEnter": toOnEnterLifecycle,
      "onExit": toOnExitLifecycle,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OnInputLifecycle {
  events?: Event[] | null;
  transitionEvents?: TransitionEvent[] | null;
}
function fromOnInputLifecycle(input?: OnInputLifecycle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    events: input["events"]?.map(x => fromEvent(x)),
    transitionEvents: input["transitionEvents"]?.map(x => fromTransitionEvent(x)),
  }
}
function toOnInputLifecycle(root: jsonP.JSONValue): OnInputLifecycle {
  return jsonP.readObj({
    required: {},
    optional: {
      "events": [toEvent],
      "transitionEvents": [toTransitionEvent],
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface Event {
  eventName: string;
  condition?: string | null;
  actions?: Action[] | null;
}
function fromEvent(input?: Event | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventName: input["eventName"],
    condition: input["condition"],
    actions: input["actions"]?.map(x => fromAction(x)),
  }
}
function toEvent(root: jsonP.JSONValue): Event {
  return jsonP.readObj({
    required: {
      "eventName": "s",
    },
    optional: {
      "condition": "s",
      "actions": [toAction],
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface Action {
  setVariable?: SetVariableAction | null;
  sns?: SNSTopicPublishAction | null;
  iotTopicPublish?: IotTopicPublishAction | null;
  setTimer?: SetTimerAction | null;
  clearTimer?: ClearTimerAction | null;
  resetTimer?: ResetTimerAction | null;
  lambda?: LambdaAction | null;
  iotEvents?: IotEventsAction | null;
  sqs?: SqsAction | null;
  firehose?: FirehoseAction | null;
  dynamoDB?: DynamoDBAction | null;
  dynamoDBv2?: DynamoDBv2Action | null;
  iotSiteWise?: IotSiteWiseAction | null;
}
function fromAction(input?: Action | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    setVariable: fromSetVariableAction(input["setVariable"]),
    sns: fromSNSTopicPublishAction(input["sns"]),
    iotTopicPublish: fromIotTopicPublishAction(input["iotTopicPublish"]),
    setTimer: fromSetTimerAction(input["setTimer"]),
    clearTimer: fromClearTimerAction(input["clearTimer"]),
    resetTimer: fromResetTimerAction(input["resetTimer"]),
    lambda: fromLambdaAction(input["lambda"]),
    iotEvents: fromIotEventsAction(input["iotEvents"]),
    sqs: fromSqsAction(input["sqs"]),
    firehose: fromFirehoseAction(input["firehose"]),
    dynamoDB: fromDynamoDBAction(input["dynamoDB"]),
    dynamoDBv2: fromDynamoDBv2Action(input["dynamoDBv2"]),
    iotSiteWise: fromIotSiteWiseAction(input["iotSiteWise"]),
  }
}
function toAction(root: jsonP.JSONValue): Action {
  return jsonP.readObj({
    required: {},
    optional: {
      "setVariable": toSetVariableAction,
      "sns": toSNSTopicPublishAction,
      "iotTopicPublish": toIotTopicPublishAction,
      "setTimer": toSetTimerAction,
      "clearTimer": toClearTimerAction,
      "resetTimer": toResetTimerAction,
      "lambda": toLambdaAction,
      "iotEvents": toIotEventsAction,
      "sqs": toSqsAction,
      "firehose": toFirehoseAction,
      "dynamoDB": toDynamoDBAction,
      "dynamoDBv2": toDynamoDBv2Action,
      "iotSiteWise": toIotSiteWiseAction,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface SetVariableAction {
  variableName: string;
  value: string;
}
function fromSetVariableAction(input?: SetVariableAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    variableName: input["variableName"],
    value: input["value"],
  }
}
function toSetVariableAction(root: jsonP.JSONValue): SetVariableAction {
  return jsonP.readObj({
    required: {
      "variableName": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface SNSTopicPublishAction {
  targetArn: string;
  payload?: Payload | null;
}
function fromSNSTopicPublishAction(input?: SNSTopicPublishAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    targetArn: input["targetArn"],
    payload: fromPayload(input["payload"]),
  }
}
function toSNSTopicPublishAction(root: jsonP.JSONValue): SNSTopicPublishAction {
  return jsonP.readObj({
    required: {
      "targetArn": "s",
    },
    optional: {
      "payload": toPayload,
    },
  }, root);
}

// refs: 96 - tags: input, named, interface, output
export interface Payload {
  contentExpression: string;
  type: PayloadType;
}
function fromPayload(input?: Payload | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    contentExpression: input["contentExpression"],
    type: input["type"],
  }
}
function toPayload(root: jsonP.JSONValue): Payload {
  return jsonP.readObj({
    required: {
      "contentExpression": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<PayloadType>(x),
    },
    optional: {},
  }, root);
}

// refs: 96 - tags: input, named, enum, output
export type PayloadType =
| "STRING"
| "JSON"
| cmnP.UnexpectedEnumValue;

// refs: 12 - tags: input, named, interface, output
export interface IotTopicPublishAction {
  mqttTopic: string;
  payload?: Payload | null;
}
function fromIotTopicPublishAction(input?: IotTopicPublishAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    mqttTopic: input["mqttTopic"],
    payload: fromPayload(input["payload"]),
  }
}
function toIotTopicPublishAction(root: jsonP.JSONValue): IotTopicPublishAction {
  return jsonP.readObj({
    required: {
      "mqttTopic": "s",
    },
    optional: {
      "payload": toPayload,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface SetTimerAction {
  timerName: string;
  seconds?: number | null;
  durationExpression?: string | null;
}
function fromSetTimerAction(input?: SetTimerAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timerName: input["timerName"],
    seconds: input["seconds"],
    durationExpression: input["durationExpression"],
  }
}
function toSetTimerAction(root: jsonP.JSONValue): SetTimerAction {
  return jsonP.readObj({
    required: {
      "timerName": "s",
    },
    optional: {
      "seconds": "n",
      "durationExpression": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface ClearTimerAction {
  timerName: string;
}
function fromClearTimerAction(input?: ClearTimerAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timerName: input["timerName"],
  }
}
function toClearTimerAction(root: jsonP.JSONValue): ClearTimerAction {
  return jsonP.readObj({
    required: {
      "timerName": "s",
    },
    optional: {},
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface ResetTimerAction {
  timerName: string;
}
function fromResetTimerAction(input?: ResetTimerAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timerName: input["timerName"],
  }
}
function toResetTimerAction(root: jsonP.JSONValue): ResetTimerAction {
  return jsonP.readObj({
    required: {
      "timerName": "s",
    },
    optional: {},
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface LambdaAction {
  functionArn: string;
  payload?: Payload | null;
}
function fromLambdaAction(input?: LambdaAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    functionArn: input["functionArn"],
    payload: fromPayload(input["payload"]),
  }
}
function toLambdaAction(root: jsonP.JSONValue): LambdaAction {
  return jsonP.readObj({
    required: {
      "functionArn": "s",
    },
    optional: {
      "payload": toPayload,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface IotEventsAction {
  inputName: string;
  payload?: Payload | null;
}
function fromIotEventsAction(input?: IotEventsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    inputName: input["inputName"],
    payload: fromPayload(input["payload"]),
  }
}
function toIotEventsAction(root: jsonP.JSONValue): IotEventsAction {
  return jsonP.readObj({
    required: {
      "inputName": "s",
    },
    optional: {
      "payload": toPayload,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface SqsAction {
  queueUrl: string;
  useBase64?: boolean | null;
  payload?: Payload | null;
}
function fromSqsAction(input?: SqsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    queueUrl: input["queueUrl"],
    useBase64: input["useBase64"],
    payload: fromPayload(input["payload"]),
  }
}
function toSqsAction(root: jsonP.JSONValue): SqsAction {
  return jsonP.readObj({
    required: {
      "queueUrl": "s",
    },
    optional: {
      "useBase64": "b",
      "payload": toPayload,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface FirehoseAction {
  deliveryStreamName: string;
  separator?: string | null;
  payload?: Payload | null;
}
function fromFirehoseAction(input?: FirehoseAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deliveryStreamName: input["deliveryStreamName"],
    separator: input["separator"],
    payload: fromPayload(input["payload"]),
  }
}
function toFirehoseAction(root: jsonP.JSONValue): FirehoseAction {
  return jsonP.readObj({
    required: {
      "deliveryStreamName": "s",
    },
    optional: {
      "separator": "s",
      "payload": toPayload,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface DynamoDBAction {
  hashKeyType?: string | null;
  hashKeyField: string;
  hashKeyValue: string;
  rangeKeyType?: string | null;
  rangeKeyField?: string | null;
  rangeKeyValue?: string | null;
  operation?: string | null;
  payloadField?: string | null;
  tableName: string;
  payload?: Payload | null;
}
function fromDynamoDBAction(input?: DynamoDBAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    hashKeyType: input["hashKeyType"],
    hashKeyField: input["hashKeyField"],
    hashKeyValue: input["hashKeyValue"],
    rangeKeyType: input["rangeKeyType"],
    rangeKeyField: input["rangeKeyField"],
    rangeKeyValue: input["rangeKeyValue"],
    operation: input["operation"],
    payloadField: input["payloadField"],
    tableName: input["tableName"],
    payload: fromPayload(input["payload"]),
  }
}
function toDynamoDBAction(root: jsonP.JSONValue): DynamoDBAction {
  return jsonP.readObj({
    required: {
      "hashKeyField": "s",
      "hashKeyValue": "s",
      "tableName": "s",
    },
    optional: {
      "hashKeyType": "s",
      "rangeKeyType": "s",
      "rangeKeyField": "s",
      "rangeKeyValue": "s",
      "operation": "s",
      "payloadField": "s",
      "payload": toPayload,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface DynamoDBv2Action {
  tableName: string;
  payload?: Payload | null;
}
function fromDynamoDBv2Action(input?: DynamoDBv2Action | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tableName: input["tableName"],
    payload: fromPayload(input["payload"]),
  }
}
function toDynamoDBv2Action(root: jsonP.JSONValue): DynamoDBv2Action {
  return jsonP.readObj({
    required: {
      "tableName": "s",
    },
    optional: {
      "payload": toPayload,
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface IotSiteWiseAction {
  entryId?: string | null;
  assetId?: string | null;
  propertyId?: string | null;
  propertyAlias?: string | null;
  propertyValue: AssetPropertyValue;
}
function fromIotSiteWiseAction(input?: IotSiteWiseAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    entryId: input["entryId"],
    assetId: input["assetId"],
    propertyId: input["propertyId"],
    propertyAlias: input["propertyAlias"],
    propertyValue: fromAssetPropertyValue(input["propertyValue"]),
  }
}
function toIotSiteWiseAction(root: jsonP.JSONValue): IotSiteWiseAction {
  return jsonP.readObj({
    required: {
      "propertyValue": toAssetPropertyValue,
    },
    optional: {
      "entryId": "s",
      "assetId": "s",
      "propertyId": "s",
      "propertyAlias": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface AssetPropertyValue {
  value: AssetPropertyVariant;
  timestamp?: AssetPropertyTimestamp | null;
  quality?: string | null;
}
function fromAssetPropertyValue(input?: AssetPropertyValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: fromAssetPropertyVariant(input["value"]),
    timestamp: fromAssetPropertyTimestamp(input["timestamp"]),
    quality: input["quality"],
  }
}
function toAssetPropertyValue(root: jsonP.JSONValue): AssetPropertyValue {
  return jsonP.readObj({
    required: {
      "value": toAssetPropertyVariant,
    },
    optional: {
      "timestamp": toAssetPropertyTimestamp,
      "quality": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface AssetPropertyVariant {
  stringValue?: string | null;
  integerValue?: string | null;
  doubleValue?: string | null;
  booleanValue?: string | null;
}
function fromAssetPropertyVariant(input?: AssetPropertyVariant | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stringValue: input["stringValue"],
    integerValue: input["integerValue"],
    doubleValue: input["doubleValue"],
    booleanValue: input["booleanValue"],
  }
}
function toAssetPropertyVariant(root: jsonP.JSONValue): AssetPropertyVariant {
  return jsonP.readObj({
    required: {},
    optional: {
      "stringValue": "s",
      "integerValue": "s",
      "doubleValue": "s",
      "booleanValue": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface AssetPropertyTimestamp {
  timeInSeconds: string;
  offsetInNanos?: string | null;
}
function fromAssetPropertyTimestamp(input?: AssetPropertyTimestamp | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timeInSeconds: input["timeInSeconds"],
    offsetInNanos: input["offsetInNanos"],
  }
}
function toAssetPropertyTimestamp(root: jsonP.JSONValue): AssetPropertyTimestamp {
  return jsonP.readObj({
    required: {
      "timeInSeconds": "s",
    },
    optional: {
      "offsetInNanos": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface TransitionEvent {
  eventName: string;
  condition: string;
  actions?: Action[] | null;
  nextState: string;
}
function fromTransitionEvent(input?: TransitionEvent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventName: input["eventName"],
    condition: input["condition"],
    actions: input["actions"]?.map(x => fromAction(x)),
    nextState: input["nextState"],
  }
}
function toTransitionEvent(root: jsonP.JSONValue): TransitionEvent {
  return jsonP.readObj({
    required: {
      "eventName": "s",
      "condition": "s",
      "nextState": "s",
    },
    optional: {
      "actions": [toAction],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OnEnterLifecycle {
  events?: Event[] | null;
}
function fromOnEnterLifecycle(input?: OnEnterLifecycle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    events: input["events"]?.map(x => fromEvent(x)),
  }
}
function toOnEnterLifecycle(root: jsonP.JSONValue): OnEnterLifecycle {
  return jsonP.readObj({
    required: {},
    optional: {
      "events": [toEvent],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OnExitLifecycle {
  events?: Event[] | null;
}
function fromOnExitLifecycle(input?: OnExitLifecycle | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    events: input["events"]?.map(x => fromEvent(x)),
  }
}
function toOnExitLifecycle(root: jsonP.JSONValue): OnExitLifecycle {
  return jsonP.readObj({
    required: {},
    optional: {
      "events": [toEvent],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  key: string;
  value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "key": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type EvaluationMethod =
| "BATCH"
| "SERIAL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface InputDefinition {
  attributes: Attribute[];
}
function fromInputDefinition(input?: InputDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributes: input["attributes"]?.map(x => fromAttribute(x)),
  }
}
function toInputDefinition(root: jsonP.JSONValue): InputDefinition {
  return jsonP.readObj({
    required: {
      "attributes": [toAttribute],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Attribute {
  jsonPath: string;
}
function fromAttribute(input?: Attribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    jsonPath: input["jsonPath"],
  }
}
function toAttribute(root: jsonP.JSONValue): Attribute {
  return jsonP.readObj({
    required: {
      "jsonPath": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface LoggingOptions {
  roleArn: string;
  level: LoggingLevel;
  enabled: boolean;
  detectorDebugOptions?: DetectorDebugOption[] | null;
}
function fromLoggingOptions(input?: LoggingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    level: input["level"],
    enabled: input["enabled"],
    detectorDebugOptions: input["detectorDebugOptions"]?.map(x => fromDetectorDebugOption(x)),
  }
}
function toLoggingOptions(root: jsonP.JSONValue): LoggingOptions {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "level": (x: jsonP.JSONValue) => cmnP.readEnum<LoggingLevel>(x),
      "enabled": "b",
    },
    optional: {
      "detectorDebugOptions": [toDetectorDebugOption],
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type LoggingLevel =
| "ERROR"
| "INFO"
| "DEBUG"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface DetectorDebugOption {
  detectorModelName: string;
  keyValue?: string | null;
}
function fromDetectorDebugOption(input?: DetectorDebugOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    detectorModelName: input["detectorModelName"],
    keyValue: input["keyValue"],
  }
}
function toDetectorDebugOption(root: jsonP.JSONValue): DetectorDebugOption {
  return jsonP.readObj({
    required: {
      "detectorModelName": "s",
    },
    optional: {
      "keyValue": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface DetectorModelConfiguration {
  detectorModelName?: string | null;
  detectorModelVersion?: string | null;
  detectorModelDescription?: string | null;
  detectorModelArn?: string | null;
  roleArn?: string | null;
  creationTime?: Date | number | null;
  lastUpdateTime?: Date | number | null;
  status?: DetectorModelVersionStatus | null;
  key?: string | null;
  evaluationMethod?: EvaluationMethod | null;
}
function toDetectorModelConfiguration(root: jsonP.JSONValue): DetectorModelConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "detectorModelName": "s",
      "detectorModelVersion": "s",
      "detectorModelDescription": "s",
      "detectorModelArn": "s",
      "roleArn": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<DetectorModelVersionStatus>(x),
      "key": "s",
      "evaluationMethod": (x: jsonP.JSONValue) => cmnP.readEnum<EvaluationMethod>(x),
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type DetectorModelVersionStatus =
| "ACTIVE"
| "ACTIVATING"
| "INACTIVE"
| "DEPRECATED"
| "DRAFT"
| "PAUSED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface InputConfiguration {
  inputName: string;
  inputDescription?: string | null;
  inputArn: string;
  creationTime: Date | number;
  lastUpdateTime: Date | number;
  status: InputStatus;
}
function toInputConfiguration(root: jsonP.JSONValue): InputConfiguration {
  return jsonP.readObj({
    required: {
      "inputName": "s",
      "inputArn": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<InputStatus>(x),
    },
    optional: {
      "inputDescription": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type InputStatus =
| "CREATING"
| "UPDATING"
| "ACTIVE"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DetectorModel {
  detectorModelDefinition?: DetectorModelDefinition | null;
  detectorModelConfiguration?: DetectorModelConfiguration | null;
}
function toDetectorModel(root: jsonP.JSONValue): DetectorModel {
  return jsonP.readObj({
    required: {},
    optional: {
      "detectorModelDefinition": toDetectorModelDefinition,
      "detectorModelConfiguration": toDetectorModelConfiguration,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Input {
  inputConfiguration?: InputConfiguration | null;
  inputDefinition?: InputDefinition | null;
}
function toInput(root: jsonP.JSONValue): Input {
  return jsonP.readObj({
    required: {},
    optional: {
      "inputConfiguration": toInputConfiguration,
      "inputDefinition": toInputDefinition,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DetectorModelVersionSummary {
  detectorModelName?: string | null;
  detectorModelVersion?: string | null;
  detectorModelArn?: string | null;
  roleArn?: string | null;
  creationTime?: Date | number | null;
  lastUpdateTime?: Date | number | null;
  status?: DetectorModelVersionStatus | null;
  evaluationMethod?: EvaluationMethod | null;
}
function toDetectorModelVersionSummary(root: jsonP.JSONValue): DetectorModelVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "detectorModelName": "s",
      "detectorModelVersion": "s",
      "detectorModelArn": "s",
      "roleArn": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<DetectorModelVersionStatus>(x),
      "evaluationMethod": (x: jsonP.JSONValue) => cmnP.readEnum<EvaluationMethod>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DetectorModelSummary {
  detectorModelName?: string | null;
  detectorModelDescription?: string | null;
  creationTime?: Date | number | null;
}
function toDetectorModelSummary(root: jsonP.JSONValue): DetectorModelSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "detectorModelName": "s",
      "detectorModelDescription": "s",
      "creationTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InputSummary {
  inputName?: string | null;
  inputDescription?: string | null;
  inputArn?: string | null;
  creationTime?: Date | number | null;
  lastUpdateTime?: Date | number | null;
  status?: InputStatus | null;
}
function toInputSummary(root: jsonP.JSONValue): InputSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "inputName": "s",
      "inputDescription": "s",
      "inputArn": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<InputStatus>(x),
    },
  }, root);
}
