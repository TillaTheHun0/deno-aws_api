// Autogenerated API client for: Application Auto Scaling

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class ApplicationAutoScaling {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ApplicationAutoScaling.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2016-02-06",
    "endpointPrefix": "application-autoscaling",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Application Auto Scaling",
    "serviceId": "Application Auto Scaling",
    "signatureVersion": "v4",
    "signingName": "application-autoscaling",
    "targetPrefix": "AnyScaleFrontendService",
    "uid": "application-autoscaling-2016-02-06"
  };

  async deleteScalingPolicy(
    {abortSignal, ...params}: RequestConfig & s.DeleteScalingPolicyRequest,
  ): Promise<s.DeleteScalingPolicyResponse> {
    const body: jsonP.JSONObject = {
      PolicyName: params["PolicyName"],
      ServiceNamespace: params["ServiceNamespace"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteScalingPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteScheduledAction(
    {abortSignal, ...params}: RequestConfig & s.DeleteScheduledActionRequest,
  ): Promise<s.DeleteScheduledActionResponse> {
    const body: jsonP.JSONObject = {
      ServiceNamespace: params["ServiceNamespace"],
      ScheduledActionName: params["ScheduledActionName"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteScheduledAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterScalableTarget(
    {abortSignal, ...params}: RequestConfig & s.DeregisterScalableTargetRequest,
  ): Promise<s.DeregisterScalableTargetResponse> {
    const body: jsonP.JSONObject = {
      ServiceNamespace: params["ServiceNamespace"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterScalableTarget",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeScalableTargets(
    {abortSignal, ...params}: RequestConfig & s.DescribeScalableTargetsRequest,
  ): Promise<s.DescribeScalableTargetsResponse> {
    const body: jsonP.JSONObject = {
      ServiceNamespace: params["ServiceNamespace"],
      ResourceIds: params["ResourceIds"],
      ScalableDimension: params["ScalableDimension"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeScalableTargets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ScalableTargets": [toScalableTarget],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeScalingActivities(
    {abortSignal, ...params}: RequestConfig & s.DescribeScalingActivitiesRequest,
  ): Promise<s.DescribeScalingActivitiesResponse> {
    const body: jsonP.JSONObject = {
      ServiceNamespace: params["ServiceNamespace"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeScalingActivities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ScalingActivities": [toScalingActivity],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeScalingPolicies(
    {abortSignal, ...params}: RequestConfig & s.DescribeScalingPoliciesRequest,
  ): Promise<s.DescribeScalingPoliciesResponse> {
    const body: jsonP.JSONObject = {
      PolicyNames: params["PolicyNames"],
      ServiceNamespace: params["ServiceNamespace"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeScalingPolicies",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ScalingPolicies": [toScalingPolicy],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeScheduledActions(
    {abortSignal, ...params}: RequestConfig & s.DescribeScheduledActionsRequest,
  ): Promise<s.DescribeScheduledActionsResponse> {
    const body: jsonP.JSONObject = {
      ScheduledActionNames: params["ScheduledActionNames"],
      ServiceNamespace: params["ServiceNamespace"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeScheduledActions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ScheduledActions": [toScheduledAction],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putScalingPolicy(
    {abortSignal, ...params}: RequestConfig & s.PutScalingPolicyRequest,
  ): Promise<s.PutScalingPolicyResponse> {
    const body: jsonP.JSONObject = {
      PolicyName: params["PolicyName"],
      ServiceNamespace: params["ServiceNamespace"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
      PolicyType: params["PolicyType"],
      StepScalingPolicyConfiguration: fromStepScalingPolicyConfiguration(params["StepScalingPolicyConfiguration"]),
      TargetTrackingScalingPolicyConfiguration: fromTargetTrackingScalingPolicyConfiguration(params["TargetTrackingScalingPolicyConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutScalingPolicy",
    });
    return jsonP.readObj({
      required: {
        "PolicyARN": "s",
      },
      optional: {
        "Alarms": [toAlarm],
      },
    }, await resp.json());
  }

  async putScheduledAction(
    {abortSignal, ...params}: RequestConfig & s.PutScheduledActionRequest,
  ): Promise<s.PutScheduledActionResponse> {
    const body: jsonP.JSONObject = {
      ServiceNamespace: params["ServiceNamespace"],
      Schedule: params["Schedule"],
      Timezone: params["Timezone"],
      ScheduledActionName: params["ScheduledActionName"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
      StartTime: jsonP.serializeDate_unixTimestamp(params["StartTime"]),
      EndTime: jsonP.serializeDate_unixTimestamp(params["EndTime"]),
      ScalableTargetAction: fromScalableTargetAction(params["ScalableTargetAction"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutScheduledAction",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async registerScalableTarget(
    {abortSignal, ...params}: RequestConfig & s.RegisterScalableTargetRequest,
  ): Promise<s.RegisterScalableTargetResponse> {
    const body: jsonP.JSONObject = {
      ServiceNamespace: params["ServiceNamespace"],
      ResourceId: params["ResourceId"],
      ScalableDimension: params["ScalableDimension"],
      MinCapacity: params["MinCapacity"],
      MaxCapacity: params["MaxCapacity"],
      RoleARN: params["RoleARN"],
      SuspendedState: fromSuspendedState(params["SuspendedState"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterScalableTarget",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromStepScalingPolicyConfiguration(input?: s.StepScalingPolicyConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdjustmentType: input["AdjustmentType"],
    StepAdjustments: input["StepAdjustments"]?.map(x => fromStepAdjustment(x)),
    MinAdjustmentMagnitude: input["MinAdjustmentMagnitude"],
    Cooldown: input["Cooldown"],
    MetricAggregationType: input["MetricAggregationType"],
  }
}
function toStepScalingPolicyConfiguration(root: jsonP.JSONValue): s.StepScalingPolicyConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdjustmentType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AdjustmentType>(x),
      "StepAdjustments": [toStepAdjustment],
      "MinAdjustmentMagnitude": "n",
      "Cooldown": "n",
      "MetricAggregationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.MetricAggregationType>(x),
    },
  }, root);
}

function fromStepAdjustment(input?: s.StepAdjustment | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MetricIntervalLowerBound: input["MetricIntervalLowerBound"],
    MetricIntervalUpperBound: input["MetricIntervalUpperBound"],
    ScalingAdjustment: input["ScalingAdjustment"],
  }
}
function toStepAdjustment(root: jsonP.JSONValue): s.StepAdjustment {
  return jsonP.readObj({
    required: {
      "ScalingAdjustment": "n",
    },
    optional: {
      "MetricIntervalLowerBound": "n",
      "MetricIntervalUpperBound": "n",
    },
  }, root);
}

function fromTargetTrackingScalingPolicyConfiguration(input?: s.TargetTrackingScalingPolicyConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TargetValue: input["TargetValue"],
    PredefinedMetricSpecification: fromPredefinedMetricSpecification(input["PredefinedMetricSpecification"]),
    CustomizedMetricSpecification: fromCustomizedMetricSpecification(input["CustomizedMetricSpecification"]),
    ScaleOutCooldown: input["ScaleOutCooldown"],
    ScaleInCooldown: input["ScaleInCooldown"],
    DisableScaleIn: input["DisableScaleIn"],
  }
}
function toTargetTrackingScalingPolicyConfiguration(root: jsonP.JSONValue): s.TargetTrackingScalingPolicyConfiguration {
  return jsonP.readObj({
    required: {
      "TargetValue": "n",
    },
    optional: {
      "PredefinedMetricSpecification": toPredefinedMetricSpecification,
      "CustomizedMetricSpecification": toCustomizedMetricSpecification,
      "ScaleOutCooldown": "n",
      "ScaleInCooldown": "n",
      "DisableScaleIn": "b",
    },
  }, root);
}

function fromPredefinedMetricSpecification(input?: s.PredefinedMetricSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PredefinedMetricType: input["PredefinedMetricType"],
    ResourceLabel: input["ResourceLabel"],
  }
}
function toPredefinedMetricSpecification(root: jsonP.JSONValue): s.PredefinedMetricSpecification {
  return jsonP.readObj({
    required: {
      "PredefinedMetricType": (x: jsonP.JSONValue) => cmnP.readEnum<s.MetricType>(x),
    },
    optional: {
      "ResourceLabel": "s",
    },
  }, root);
}

function fromCustomizedMetricSpecification(input?: s.CustomizedMetricSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MetricName: input["MetricName"],
    Namespace: input["Namespace"],
    Dimensions: input["Dimensions"]?.map(x => fromMetricDimension(x)),
    Statistic: input["Statistic"],
    Unit: input["Unit"],
  }
}
function toCustomizedMetricSpecification(root: jsonP.JSONValue): s.CustomizedMetricSpecification {
  return jsonP.readObj({
    required: {
      "MetricName": "s",
      "Namespace": "s",
      "Statistic": (x: jsonP.JSONValue) => cmnP.readEnum<s.MetricStatistic>(x),
    },
    optional: {
      "Dimensions": [toMetricDimension],
      "Unit": "s",
    },
  }, root);
}

function fromMetricDimension(input?: s.MetricDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}
function toMetricDimension(root: jsonP.JSONValue): s.MetricDimension {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromScalableTargetAction(input?: s.ScalableTargetAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MinCapacity: input["MinCapacity"],
    MaxCapacity: input["MaxCapacity"],
  }
}
function toScalableTargetAction(root: jsonP.JSONValue): s.ScalableTargetAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "MinCapacity": "n",
      "MaxCapacity": "n",
    },
  }, root);
}

function fromSuspendedState(input?: s.SuspendedState | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DynamicScalingInSuspended: input["DynamicScalingInSuspended"],
    DynamicScalingOutSuspended: input["DynamicScalingOutSuspended"],
    ScheduledScalingSuspended: input["ScheduledScalingSuspended"],
  }
}
function toSuspendedState(root: jsonP.JSONValue): s.SuspendedState {
  return jsonP.readObj({
    required: {},
    optional: {
      "DynamicScalingInSuspended": "b",
      "DynamicScalingOutSuspended": "b",
      "ScheduledScalingSuspended": "b",
    },
  }, root);
}

function toScalableTarget(root: jsonP.JSONValue): s.ScalableTarget {
  return jsonP.readObj({
    required: {
      "ServiceNamespace": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceNamespace>(x),
      "ResourceId": "s",
      "ScalableDimension": (x: jsonP.JSONValue) => cmnP.readEnum<s.ScalableDimension>(x),
      "MinCapacity": "n",
      "MaxCapacity": "n",
      "RoleARN": "s",
      "CreationTime": "d",
    },
    optional: {
      "SuspendedState": toSuspendedState,
    },
  }, root);
}

function toScalingActivity(root: jsonP.JSONValue): s.ScalingActivity {
  return jsonP.readObj({
    required: {
      "ActivityId": "s",
      "ServiceNamespace": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceNamespace>(x),
      "ResourceId": "s",
      "ScalableDimension": (x: jsonP.JSONValue) => cmnP.readEnum<s.ScalableDimension>(x),
      "Description": "s",
      "Cause": "s",
      "StartTime": "d",
      "StatusCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ScalingActivityStatusCode>(x),
    },
    optional: {
      "EndTime": "d",
      "StatusMessage": "s",
      "Details": "s",
    },
  }, root);
}

function toScalingPolicy(root: jsonP.JSONValue): s.ScalingPolicy {
  return jsonP.readObj({
    required: {
      "PolicyARN": "s",
      "PolicyName": "s",
      "ServiceNamespace": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceNamespace>(x),
      "ResourceId": "s",
      "ScalableDimension": (x: jsonP.JSONValue) => cmnP.readEnum<s.ScalableDimension>(x),
      "PolicyType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PolicyType>(x),
      "CreationTime": "d",
    },
    optional: {
      "StepScalingPolicyConfiguration": toStepScalingPolicyConfiguration,
      "TargetTrackingScalingPolicyConfiguration": toTargetTrackingScalingPolicyConfiguration,
      "Alarms": [toAlarm],
    },
  }, root);
}

function toAlarm(root: jsonP.JSONValue): s.Alarm {
  return jsonP.readObj({
    required: {
      "AlarmName": "s",
      "AlarmARN": "s",
    },
    optional: {},
  }, root);
}

function toScheduledAction(root: jsonP.JSONValue): s.ScheduledAction {
  return jsonP.readObj({
    required: {
      "ScheduledActionName": "s",
      "ScheduledActionARN": "s",
      "ServiceNamespace": (x: jsonP.JSONValue) => cmnP.readEnum<s.ServiceNamespace>(x),
      "Schedule": "s",
      "ResourceId": "s",
      "CreationTime": "d",
    },
    optional: {
      "Timezone": "s",
      "ScalableDimension": (x: jsonP.JSONValue) => cmnP.readEnum<s.ScalableDimension>(x),
      "StartTime": "d",
      "EndTime": "d",
      "ScalableTargetAction": toScalableTargetAction,
    },
  }, root);
}
