// Autogenerated API client for: AWS WAF

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class WAF {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WAF.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-08-24",
    "endpointPrefix": "waf",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "WAF",
    "serviceFullName": "AWS WAF",
    "serviceId": "WAF",
    "signatureVersion": "v4",
    "targetPrefix": "AWSWAF_20150824",
    "uid": "waf-2015-08-24"
  };

  async createByteMatchSet(
    {abortSignal, ...params}: RequestConfig & CreateByteMatchSetRequest,
  ): Promise<CreateByteMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateByteMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ByteMatchSet": toByteMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & CreateGeoMatchSetRequest,
  ): Promise<CreateGeoMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGeoMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GeoMatchSet": toGeoMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createIPSet(
    {abortSignal, ...params}: RequestConfig & CreateIPSetRequest,
  ): Promise<CreateIPSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIPSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "IPSet": toIPSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRateBasedRule(
    {abortSignal, ...params}: RequestConfig & CreateRateBasedRuleRequest,
  ): Promise<CreateRateBasedRuleResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRateBasedRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Rule": toRateBasedRule,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & CreateRegexMatchSetRequest,
  ): Promise<CreateRegexMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRegexMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RegexMatchSet": toRegexMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & CreateRegexPatternSetRequest,
  ): Promise<CreateRegexPatternSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRegexPatternSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RegexPatternSet": toRegexPatternSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRule(
    {abortSignal, ...params}: RequestConfig & CreateRuleRequest,
  ): Promise<CreateRuleResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Rule": toRule,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRuleGroup(
    {abortSignal, ...params}: RequestConfig & CreateRuleGroupRequest,
  ): Promise<CreateRuleGroupResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRuleGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RuleGroup": toRuleGroup,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & CreateSizeConstraintSetRequest,
  ): Promise<CreateSizeConstraintSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSizeConstraintSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SizeConstraintSet": toSizeConstraintSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & CreateSqlInjectionMatchSetRequest,
  ): Promise<CreateSqlInjectionMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSqlInjectionMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SqlInjectionMatchSet": toSqlInjectionMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createWebACL(
    {abortSignal, ...params}: RequestConfig & CreateWebACLRequest,
  ): Promise<CreateWebACLResponse> {
    const body: JSONObject = {...params,
    DefaultAction: fromWafAction(params["DefaultAction"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWebACL",
    });
    return prt.readObj({
      required: {},
      optional: {
        "WebACL": toWebACL,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createWebACLMigrationStack(
    {abortSignal, ...params}: RequestConfig & CreateWebACLMigrationStackRequest,
  ): Promise<CreateWebACLMigrationStackResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWebACLMigrationStack",
    });
    return prt.readObj({
      required: {
        "S3ObjectUrl": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createXssMatchSet(
    {abortSignal, ...params}: RequestConfig & CreateXssMatchSetRequest,
  ): Promise<CreateXssMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateXssMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "XssMatchSet": toXssMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteByteMatchSet(
    {abortSignal, ...params}: RequestConfig & DeleteByteMatchSetRequest,
  ): Promise<DeleteByteMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteByteMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & DeleteGeoMatchSetRequest,
  ): Promise<DeleteGeoMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGeoMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteIPSet(
    {abortSignal, ...params}: RequestConfig & DeleteIPSetRequest,
  ): Promise<DeleteIPSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIPSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteLoggingConfigurationRequest,
  ): Promise<DeleteLoggingConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLoggingConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePermissionPolicy(
    {abortSignal, ...params}: RequestConfig & DeletePermissionPolicyRequest,
  ): Promise<DeletePermissionPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePermissionPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRateBasedRule(
    {abortSignal, ...params}: RequestConfig & DeleteRateBasedRuleRequest,
  ): Promise<DeleteRateBasedRuleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRateBasedRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & DeleteRegexMatchSetRequest,
  ): Promise<DeleteRegexMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRegexMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & DeleteRegexPatternSetRequest,
  ): Promise<DeleteRegexPatternSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRegexPatternSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRule(
    {abortSignal, ...params}: RequestConfig & DeleteRuleRequest,
  ): Promise<DeleteRuleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRuleGroup(
    {abortSignal, ...params}: RequestConfig & DeleteRuleGroupRequest,
  ): Promise<DeleteRuleGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRuleGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & DeleteSizeConstraintSetRequest,
  ): Promise<DeleteSizeConstraintSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSizeConstraintSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & DeleteSqlInjectionMatchSetRequest,
  ): Promise<DeleteSqlInjectionMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSqlInjectionMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteWebACL(
    {abortSignal, ...params}: RequestConfig & DeleteWebACLRequest,
  ): Promise<DeleteWebACLResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteWebACL",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteXssMatchSet(
    {abortSignal, ...params}: RequestConfig & DeleteXssMatchSetRequest,
  ): Promise<DeleteXssMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteXssMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async getByteMatchSet(
    {abortSignal, ...params}: RequestConfig & GetByteMatchSetRequest,
  ): Promise<GetByteMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetByteMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ByteMatchSet": toByteMatchSet,
      },
    }, await resp.json());
  }

  async getChangeToken(
    {abortSignal, ...params}: RequestConfig & GetChangeTokenRequest = {},
  ): Promise<GetChangeTokenResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetChangeToken",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async getChangeTokenStatus(
    {abortSignal, ...params}: RequestConfig & GetChangeTokenStatusRequest,
  ): Promise<GetChangeTokenStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetChangeTokenStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeTokenStatus": toChangeTokenStatus,
      },
    }, await resp.json());
  }

  async getGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & GetGeoMatchSetRequest,
  ): Promise<GetGeoMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGeoMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GeoMatchSet": toGeoMatchSet,
      },
    }, await resp.json());
  }

  async getIPSet(
    {abortSignal, ...params}: RequestConfig & GetIPSetRequest,
  ): Promise<GetIPSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIPSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "IPSet": toIPSet,
      },
    }, await resp.json());
  }

  async getLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & GetLoggingConfigurationRequest,
  ): Promise<GetLoggingConfigurationResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLoggingConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async getPermissionPolicy(
    {abortSignal, ...params}: RequestConfig & GetPermissionPolicyRequest,
  ): Promise<GetPermissionPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPermissionPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policy": "s",
      },
    }, await resp.json());
  }

  async getRateBasedRule(
    {abortSignal, ...params}: RequestConfig & GetRateBasedRuleRequest,
  ): Promise<GetRateBasedRuleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRateBasedRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Rule": toRateBasedRule,
      },
    }, await resp.json());
  }

  async getRateBasedRuleManagedKeys(
    {abortSignal, ...params}: RequestConfig & GetRateBasedRuleManagedKeysRequest,
  ): Promise<GetRateBasedRuleManagedKeysResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRateBasedRuleManagedKeys",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ManagedKeys": ["s"],
        "NextMarker": "s",
      },
    }, await resp.json());
  }

  async getRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & GetRegexMatchSetRequest,
  ): Promise<GetRegexMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRegexMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RegexMatchSet": toRegexMatchSet,
      },
    }, await resp.json());
  }

  async getRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & GetRegexPatternSetRequest,
  ): Promise<GetRegexPatternSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRegexPatternSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RegexPatternSet": toRegexPatternSet,
      },
    }, await resp.json());
  }

  async getRule(
    {abortSignal, ...params}: RequestConfig & GetRuleRequest,
  ): Promise<GetRuleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Rule": toRule,
      },
    }, await resp.json());
  }

  async getRuleGroup(
    {abortSignal, ...params}: RequestConfig & GetRuleGroupRequest,
  ): Promise<GetRuleGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRuleGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RuleGroup": toRuleGroup,
      },
    }, await resp.json());
  }

  async getSampledRequests(
    {abortSignal, ...params}: RequestConfig & GetSampledRequestsRequest,
  ): Promise<GetSampledRequestsResponse> {
    const body: JSONObject = {...params,
    TimeWindow: fromTimeWindow(params["TimeWindow"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSampledRequests",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SampledRequests": [toSampledHTTPRequest],
        "PopulationSize": "n",
        "TimeWindow": toTimeWindow,
      },
    }, await resp.json());
  }

  async getSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & GetSizeConstraintSetRequest,
  ): Promise<GetSizeConstraintSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSizeConstraintSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SizeConstraintSet": toSizeConstraintSet,
      },
    }, await resp.json());
  }

  async getSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & GetSqlInjectionMatchSetRequest,
  ): Promise<GetSqlInjectionMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSqlInjectionMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SqlInjectionMatchSet": toSqlInjectionMatchSet,
      },
    }, await resp.json());
  }

  async getWebACL(
    {abortSignal, ...params}: RequestConfig & GetWebACLRequest,
  ): Promise<GetWebACLResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetWebACL",
    });
    return prt.readObj({
      required: {},
      optional: {
        "WebACL": toWebACL,
      },
    }, await resp.json());
  }

  async getXssMatchSet(
    {abortSignal, ...params}: RequestConfig & GetXssMatchSetRequest,
  ): Promise<GetXssMatchSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetXssMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "XssMatchSet": toXssMatchSet,
      },
    }, await resp.json());
  }

  async listActivatedRulesInRuleGroup(
    {abortSignal, ...params}: RequestConfig & ListActivatedRulesInRuleGroupRequest = {},
  ): Promise<ListActivatedRulesInRuleGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListActivatedRulesInRuleGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "ActivatedRules": [toActivatedRule],
      },
    }, await resp.json());
  }

  async listByteMatchSets(
    {abortSignal, ...params}: RequestConfig & ListByteMatchSetsRequest = {},
  ): Promise<ListByteMatchSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListByteMatchSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "ByteMatchSets": [toByteMatchSetSummary],
      },
    }, await resp.json());
  }

  async listGeoMatchSets(
    {abortSignal, ...params}: RequestConfig & ListGeoMatchSetsRequest = {},
  ): Promise<ListGeoMatchSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGeoMatchSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "GeoMatchSets": [toGeoMatchSetSummary],
      },
    }, await resp.json());
  }

  async listIPSets(
    {abortSignal, ...params}: RequestConfig & ListIPSetsRequest = {},
  ): Promise<ListIPSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIPSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "IPSets": [toIPSetSummary],
      },
    }, await resp.json());
  }

  async listLoggingConfigurations(
    {abortSignal, ...params}: RequestConfig & ListLoggingConfigurationsRequest = {},
  ): Promise<ListLoggingConfigurationsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLoggingConfigurations",
    });
    return prt.readObj({
      required: {},
      optional: {
        "LoggingConfigurations": [toLoggingConfiguration],
        "NextMarker": "s",
      },
    }, await resp.json());
  }

  async listRateBasedRules(
    {abortSignal, ...params}: RequestConfig & ListRateBasedRulesRequest = {},
  ): Promise<ListRateBasedRulesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRateBasedRules",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "Rules": [toRuleSummary],
      },
    }, await resp.json());
  }

  async listRegexMatchSets(
    {abortSignal, ...params}: RequestConfig & ListRegexMatchSetsRequest = {},
  ): Promise<ListRegexMatchSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRegexMatchSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RegexMatchSets": [toRegexMatchSetSummary],
      },
    }, await resp.json());
  }

  async listRegexPatternSets(
    {abortSignal, ...params}: RequestConfig & ListRegexPatternSetsRequest = {},
  ): Promise<ListRegexPatternSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRegexPatternSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RegexPatternSets": [toRegexPatternSetSummary],
      },
    }, await resp.json());
  }

  async listRuleGroups(
    {abortSignal, ...params}: RequestConfig & ListRuleGroupsRequest = {},
  ): Promise<ListRuleGroupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRuleGroups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RuleGroups": [toRuleGroupSummary],
      },
    }, await resp.json());
  }

  async listRules(
    {abortSignal, ...params}: RequestConfig & ListRulesRequest = {},
  ): Promise<ListRulesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRules",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "Rules": [toRuleSummary],
      },
    }, await resp.json());
  }

  async listSizeConstraintSets(
    {abortSignal, ...params}: RequestConfig & ListSizeConstraintSetsRequest = {},
  ): Promise<ListSizeConstraintSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSizeConstraintSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "SizeConstraintSets": [toSizeConstraintSetSummary],
      },
    }, await resp.json());
  }

  async listSqlInjectionMatchSets(
    {abortSignal, ...params}: RequestConfig & ListSqlInjectionMatchSetsRequest = {},
  ): Promise<ListSqlInjectionMatchSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSqlInjectionMatchSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "SqlInjectionMatchSets": [toSqlInjectionMatchSetSummary],
      },
    }, await resp.json());
  }

  async listSubscribedRuleGroups(
    {abortSignal, ...params}: RequestConfig & ListSubscribedRuleGroupsRequest = {},
  ): Promise<ListSubscribedRuleGroupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSubscribedRuleGroups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RuleGroups": [toSubscribedRuleGroupSummary],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "TagInfoForResource": toTagInfoForResource,
      },
    }, await resp.json());
  }

  async listWebACLs(
    {abortSignal, ...params}: RequestConfig & ListWebACLsRequest = {},
  ): Promise<ListWebACLsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWebACLs",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "WebACLs": [toWebACLSummary],
      },
    }, await resp.json());
  }

  async listXssMatchSets(
    {abortSignal, ...params}: RequestConfig & ListXssMatchSetsRequest = {},
  ): Promise<ListXssMatchSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListXssMatchSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "XssMatchSets": [toXssMatchSetSummary],
      },
    }, await resp.json());
  }

  async putLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & PutLoggingConfigurationRequest,
  ): Promise<PutLoggingConfigurationResponse> {
    const body: JSONObject = {...params,
    LoggingConfiguration: fromLoggingConfiguration(params["LoggingConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLoggingConfiguration",
    });
    return prt.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async putPermissionPolicy(
    {abortSignal, ...params}: RequestConfig & PutPermissionPolicyRequest,
  ): Promise<PutPermissionPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPermissionPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateByteMatchSet(
    {abortSignal, ...params}: RequestConfig & UpdateByteMatchSetRequest,
  ): Promise<UpdateByteMatchSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromByteMatchSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateByteMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & UpdateGeoMatchSetRequest,
  ): Promise<UpdateGeoMatchSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromGeoMatchSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGeoMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateIPSet(
    {abortSignal, ...params}: RequestConfig & UpdateIPSetRequest,
  ): Promise<UpdateIPSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromIPSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIPSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRateBasedRule(
    {abortSignal, ...params}: RequestConfig & UpdateRateBasedRuleRequest,
  ): Promise<UpdateRateBasedRuleResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromRuleUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRateBasedRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & UpdateRegexMatchSetRequest,
  ): Promise<UpdateRegexMatchSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromRegexMatchSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRegexMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & UpdateRegexPatternSetRequest,
  ): Promise<UpdateRegexPatternSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromRegexPatternSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRegexPatternSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRule(
    {abortSignal, ...params}: RequestConfig & UpdateRuleRequest,
  ): Promise<UpdateRuleResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromRuleUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRule",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRuleGroup(
    {abortSignal, ...params}: RequestConfig & UpdateRuleGroupRequest,
  ): Promise<UpdateRuleGroupResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromRuleGroupUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRuleGroup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & UpdateSizeConstraintSetRequest,
  ): Promise<UpdateSizeConstraintSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromSizeConstraintSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSizeConstraintSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & UpdateSqlInjectionMatchSetRequest,
  ): Promise<UpdateSqlInjectionMatchSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromSqlInjectionMatchSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSqlInjectionMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateWebACL(
    {abortSignal, ...params}: RequestConfig & UpdateWebACLRequest,
  ): Promise<UpdateWebACLResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromWebACLUpdate(x)),
    DefaultAction: fromWafAction(params["DefaultAction"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWebACL",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateXssMatchSet(
    {abortSignal, ...params}: RequestConfig & UpdateXssMatchSetRequest,
  ): Promise<UpdateXssMatchSetResponse> {
    const body: JSONObject = {...params,
    Updates: params["Updates"]?.map(x => fromXssMatchSetUpdate(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateXssMatchSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateByteMatchSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface CreateGeoMatchSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface CreateIPSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface CreateRateBasedRuleRequest {
  Name: string;
  MetricName: string;
  RateKey: RateKey;
  RateLimit: number;
  ChangeToken: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateRegexMatchSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface CreateRegexPatternSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface CreateRuleRequest {
  Name: string;
  MetricName: string;
  ChangeToken: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateRuleGroupRequest {
  Name: string;
  MetricName: string;
  ChangeToken: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateSizeConstraintSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface CreateSqlInjectionMatchSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface CreateWebACLRequest {
  Name: string;
  MetricName: string;
  DefaultAction: WafAction;
  ChangeToken: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateWebACLMigrationStackRequest {
  WebACLId: string;
  S3BucketName: string;
  IgnoreUnsupportedType: boolean;
}

// refs: 1 - tags: named, input
export interface CreateXssMatchSetRequest {
  Name: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteByteMatchSetRequest {
  ByteMatchSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteGeoMatchSetRequest {
  GeoMatchSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteIPSetRequest {
  IPSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteLoggingConfigurationRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface DeletePermissionPolicyRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteRateBasedRuleRequest {
  RuleId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteRegexMatchSetRequest {
  RegexMatchSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteRegexPatternSetRequest {
  RegexPatternSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteRuleRequest {
  RuleId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteRuleGroupRequest {
  RuleGroupId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteSizeConstraintSetRequest {
  SizeConstraintSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteSqlInjectionMatchSetRequest {
  SqlInjectionMatchSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteWebACLRequest {
  WebACLId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface DeleteXssMatchSetRequest {
  XssMatchSetId: string;
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface GetByteMatchSetRequest {
  ByteMatchSetId: string;
}

// refs: 1 - tags: named, input
export interface GetChangeTokenRequest {
}

// refs: 1 - tags: named, input
export interface GetChangeTokenStatusRequest {
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface GetGeoMatchSetRequest {
  GeoMatchSetId: string;
}

// refs: 1 - tags: named, input
export interface GetIPSetRequest {
  IPSetId: string;
}

// refs: 1 - tags: named, input
export interface GetLoggingConfigurationRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface GetPermissionPolicyRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface GetRateBasedRuleRequest {
  RuleId: string;
}

// refs: 1 - tags: named, input
export interface GetRateBasedRuleManagedKeysRequest {
  RuleId: string;
  NextMarker?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRegexMatchSetRequest {
  RegexMatchSetId: string;
}

// refs: 1 - tags: named, input
export interface GetRegexPatternSetRequest {
  RegexPatternSetId: string;
}

// refs: 1 - tags: named, input
export interface GetRuleRequest {
  RuleId: string;
}

// refs: 1 - tags: named, input
export interface GetRuleGroupRequest {
  RuleGroupId: string;
}

// refs: 1 - tags: named, input
export interface GetSampledRequestsRequest {
  WebAclId: string;
  RuleId: string;
  TimeWindow: TimeWindow;
  MaxItems: number;
}

// refs: 1 - tags: named, input
export interface GetSizeConstraintSetRequest {
  SizeConstraintSetId: string;
}

// refs: 1 - tags: named, input
export interface GetSqlInjectionMatchSetRequest {
  SqlInjectionMatchSetId: string;
}

// refs: 1 - tags: named, input
export interface GetWebACLRequest {
  WebACLId: string;
}

// refs: 1 - tags: named, input
export interface GetXssMatchSetRequest {
  XssMatchSetId: string;
}

// refs: 1 - tags: named, input
export interface ListActivatedRulesInRuleGroupRequest {
  RuleGroupId?: string | null;
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListByteMatchSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListGeoMatchSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIPSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLoggingConfigurationsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRateBasedRulesRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRegexMatchSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRegexPatternSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRuleGroupsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRulesRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSizeConstraintSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSqlInjectionMatchSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSubscribedRuleGroupsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  NextMarker?: string | null;
  Limit?: number | null;
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface ListWebACLsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListXssMatchSetsRequest {
  NextMarker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface PutLoggingConfigurationRequest {
  LoggingConfiguration: LoggingConfiguration;
}

// refs: 1 - tags: named, input
export interface PutPermissionPolicyRequest {
  ResourceArn: string;
  Policy: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateByteMatchSetRequest {
  ByteMatchSetId: string;
  ChangeToken: string;
  Updates: ByteMatchSetUpdate[];
}

// refs: 1 - tags: named, input
export interface UpdateGeoMatchSetRequest {
  GeoMatchSetId: string;
  ChangeToken: string;
  Updates: GeoMatchSetUpdate[];
}

// refs: 1 - tags: named, input
export interface UpdateIPSetRequest {
  IPSetId: string;
  ChangeToken: string;
  Updates: IPSetUpdate[];
}

// refs: 1 - tags: named, input
export interface UpdateRateBasedRuleRequest {
  RuleId: string;
  ChangeToken: string;
  Updates: RuleUpdate[];
  RateLimit: number;
}

// refs: 1 - tags: named, input
export interface UpdateRegexMatchSetRequest {
  RegexMatchSetId: string;
  Updates: RegexMatchSetUpdate[];
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface UpdateRegexPatternSetRequest {
  RegexPatternSetId: string;
  Updates: RegexPatternSetUpdate[];
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface UpdateRuleRequest {
  RuleId: string;
  ChangeToken: string;
  Updates: RuleUpdate[];
}

// refs: 1 - tags: named, input
export interface UpdateRuleGroupRequest {
  RuleGroupId: string;
  Updates: RuleGroupUpdate[];
  ChangeToken: string;
}

// refs: 1 - tags: named, input
export interface UpdateSizeConstraintSetRequest {
  SizeConstraintSetId: string;
  ChangeToken: string;
  Updates: SizeConstraintSetUpdate[];
}

// refs: 1 - tags: named, input
export interface UpdateSqlInjectionMatchSetRequest {
  SqlInjectionMatchSetId: string;
  ChangeToken: string;
  Updates: SqlInjectionMatchSetUpdate[];
}

// refs: 1 - tags: named, input
export interface UpdateWebACLRequest {
  WebACLId: string;
  ChangeToken: string;
  Updates?: WebACLUpdate[] | null;
  DefaultAction?: WafAction | null;
}

// refs: 1 - tags: named, input
export interface UpdateXssMatchSetRequest {
  XssMatchSetId: string;
  ChangeToken: string;
  Updates: XssMatchSetUpdate[];
}

// refs: 1 - tags: named, output
export interface CreateByteMatchSetResponse {
  ByteMatchSet?: ByteMatchSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateGeoMatchSetResponse {
  GeoMatchSet?: GeoMatchSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateIPSetResponse {
  IPSet?: IPSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRateBasedRuleResponse {
  Rule?: RateBasedRule | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRegexMatchSetResponse {
  RegexMatchSet?: RegexMatchSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRegexPatternSetResponse {
  RegexPatternSet?: RegexPatternSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRuleResponse {
  Rule?: Rule | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRuleGroupResponse {
  RuleGroup?: RuleGroup | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSizeConstraintSetResponse {
  SizeConstraintSet?: SizeConstraintSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSqlInjectionMatchSetResponse {
  SqlInjectionMatchSet?: SqlInjectionMatchSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateWebACLResponse {
  WebACL?: WebACL | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateWebACLMigrationStackResponse {
  S3ObjectUrl: string;
}

// refs: 1 - tags: named, output
export interface CreateXssMatchSetResponse {
  XssMatchSet?: XssMatchSet | null;
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteByteMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteGeoMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteIPSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteLoggingConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeletePermissionPolicyResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRateBasedRuleResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteRegexMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteRegexPatternSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteRuleResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteRuleGroupResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteSizeConstraintSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteSqlInjectionMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteWebACLResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteXssMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetByteMatchSetResponse {
  ByteMatchSet?: ByteMatchSet | null;
}

// refs: 1 - tags: named, output
export interface GetChangeTokenResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetChangeTokenStatusResponse {
  ChangeTokenStatus?: ChangeTokenStatus | null;
}

// refs: 1 - tags: named, output
export interface GetGeoMatchSetResponse {
  GeoMatchSet?: GeoMatchSet | null;
}

// refs: 1 - tags: named, output
export interface GetIPSetResponse {
  IPSet?: IPSet | null;
}

// refs: 1 - tags: named, output
export interface GetLoggingConfigurationResponse {
  LoggingConfiguration?: LoggingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetPermissionPolicyResponse {
  Policy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRateBasedRuleResponse {
  Rule?: RateBasedRule | null;
}

// refs: 1 - tags: named, output
export interface GetRateBasedRuleManagedKeysResponse {
  ManagedKeys?: string[] | null;
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRegexMatchSetResponse {
  RegexMatchSet?: RegexMatchSet | null;
}

// refs: 1 - tags: named, output
export interface GetRegexPatternSetResponse {
  RegexPatternSet?: RegexPatternSet | null;
}

// refs: 1 - tags: named, output
export interface GetRuleResponse {
  Rule?: Rule | null;
}

// refs: 1 - tags: named, output
export interface GetRuleGroupResponse {
  RuleGroup?: RuleGroup | null;
}

// refs: 1 - tags: named, output
export interface GetSampledRequestsResponse {
  SampledRequests?: SampledHTTPRequest[] | null;
  PopulationSize?: number | null;
  TimeWindow?: TimeWindow | null;
}

// refs: 1 - tags: named, output
export interface GetSizeConstraintSetResponse {
  SizeConstraintSet?: SizeConstraintSet | null;
}

// refs: 1 - tags: named, output
export interface GetSqlInjectionMatchSetResponse {
  SqlInjectionMatchSet?: SqlInjectionMatchSet | null;
}

// refs: 1 - tags: named, output
export interface GetWebACLResponse {
  WebACL?: WebACL | null;
}

// refs: 1 - tags: named, output
export interface GetXssMatchSetResponse {
  XssMatchSet?: XssMatchSet | null;
}

// refs: 1 - tags: named, output
export interface ListActivatedRulesInRuleGroupResponse {
  NextMarker?: string | null;
  ActivatedRules?: ActivatedRule[] | null;
}

// refs: 1 - tags: named, output
export interface ListByteMatchSetsResponse {
  NextMarker?: string | null;
  ByteMatchSets?: ByteMatchSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListGeoMatchSetsResponse {
  NextMarker?: string | null;
  GeoMatchSets?: GeoMatchSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListIPSetsResponse {
  NextMarker?: string | null;
  IPSets?: IPSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListLoggingConfigurationsResponse {
  LoggingConfigurations?: LoggingConfiguration[] | null;
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRateBasedRulesResponse {
  NextMarker?: string | null;
  Rules?: RuleSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListRegexMatchSetsResponse {
  NextMarker?: string | null;
  RegexMatchSets?: RegexMatchSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListRegexPatternSetsResponse {
  NextMarker?: string | null;
  RegexPatternSets?: RegexPatternSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListRuleGroupsResponse {
  NextMarker?: string | null;
  RuleGroups?: RuleGroupSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListRulesResponse {
  NextMarker?: string | null;
  Rules?: RuleSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListSizeConstraintSetsResponse {
  NextMarker?: string | null;
  SizeConstraintSets?: SizeConstraintSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListSqlInjectionMatchSetsResponse {
  NextMarker?: string | null;
  SqlInjectionMatchSets?: SqlInjectionMatchSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListSubscribedRuleGroupsResponse {
  NextMarker?: string | null;
  RuleGroups?: SubscribedRuleGroupSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  NextMarker?: string | null;
  TagInfoForResource?: TagInfoForResource | null;
}

// refs: 1 - tags: named, output
export interface ListWebACLsResponse {
  NextMarker?: string | null;
  WebACLs?: WebACLSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListXssMatchSetsResponse {
  NextMarker?: string | null;
  XssMatchSets?: XssMatchSetSummary[] | null;
}

// refs: 1 - tags: named, output
export interface PutLoggingConfigurationResponse {
  LoggingConfiguration?: LoggingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface PutPermissionPolicyResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateByteMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateGeoMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateIPSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateRateBasedRuleResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateRegexMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateRegexPatternSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateRuleResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateRuleGroupResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSizeConstraintSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSqlInjectionMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateWebACLResponse {
  ChangeToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateXssMatchSetResponse {
  ChangeToken?: string | null;
}

// refs: 3 - tags: input, named, enum, output
export type RateKey =
| "IP"
;

function toRateKey(root: JSONValue): RateKey | null {
  return ( false
    || root == "IP"
  ) ? root : null;
}

// refs: 6 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface WafAction {
  Type: WafActionType;
}
function fromWafAction(input?: WafAction | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toWafAction(root: JSONValue): WafAction {
  return prt.readObj({
    required: {
      "Type": toWafActionType,
    },
    optional: {},
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type WafActionType =
| "BLOCK"
| "ALLOW"
| "COUNT"
;

function toWafActionType(root: JSONValue): WafActionType | null {
  return ( false
    || root == "BLOCK"
    || root == "ALLOW"
    || root == "COUNT"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface TimeWindow {
  StartTime: Date | number;
  EndTime: Date | number;
}
function fromTimeWindow(input?: TimeWindow | null): JSONValue {
  if (!input) return input;
  return {...input,
    StartTime: prt.serializeDate_unixTimestamp(input["StartTime"]),
    EndTime: prt.serializeDate_unixTimestamp(input["EndTime"]),
  }
}
function toTimeWindow(root: JSONValue): TimeWindow {
  return prt.readObj({
    required: {
      "StartTime": "d",
      "EndTime": "d",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface LoggingConfiguration {
  ResourceArn: string;
  LogDestinationConfigs: string[];
  RedactedFields?: FieldToMatch[] | null;
}
function fromLoggingConfiguration(input?: LoggingConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    RedactedFields: input["RedactedFields"]?.map(x => fromFieldToMatch(x)),
  }
}
function toLoggingConfiguration(root: JSONValue): LoggingConfiguration {
  return prt.readObj({
    required: {
      "ResourceArn": "s",
      "LogDestinationConfigs": ["s"],
    },
    optional: {
      "RedactedFields": [toFieldToMatch],
    },
  }, root);
}

// refs: 19 - tags: input, named, interface, output
export interface FieldToMatch {
  Type: MatchFieldType;
  Data?: string | null;
}
function fromFieldToMatch(input?: FieldToMatch | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toFieldToMatch(root: JSONValue): FieldToMatch {
  return prt.readObj({
    required: {
      "Type": toMatchFieldType,
    },
    optional: {
      "Data": "s",
    },
  }, root);
}

// refs: 19 - tags: input, named, enum, output
export type MatchFieldType =
| "URI"
| "QUERY_STRING"
| "HEADER"
| "METHOD"
| "BODY"
| "SINGLE_QUERY_ARG"
| "ALL_QUERY_ARGS"
;

function toMatchFieldType(root: JSONValue): MatchFieldType | null {
  return ( false
    || root == "URI"
    || root == "QUERY_STRING"
    || root == "HEADER"
    || root == "METHOD"
    || root == "BODY"
    || root == "SINGLE_QUERY_ARG"
    || root == "ALL_QUERY_ARGS"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface ByteMatchSetUpdate {
  Action: ChangeAction;
  ByteMatchTuple: ByteMatchTuple;
}
function fromByteMatchSetUpdate(input?: ByteMatchSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    ByteMatchTuple: fromByteMatchTuple(input["ByteMatchTuple"]),
  }
}

// refs: 12 - tags: input, named, enum
export type ChangeAction =
| "INSERT"
| "DELETE"
;


// refs: 3 - tags: input, named, interface, output
export interface ByteMatchTuple {
  FieldToMatch: FieldToMatch;
  TargetString: Uint8Array | string;
  TextTransformation: TextTransformation;
  PositionalConstraint: PositionalConstraint;
}
function fromByteMatchTuple(input?: ByteMatchTuple | null): JSONValue {
  if (!input) return input;
  return {...input,
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
    TargetString: prt.serializeBlob(input["TargetString"]),
  }
}
function toByteMatchTuple(root: JSONValue): ByteMatchTuple {
  return prt.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TargetString": "a",
      "TextTransformation": toTextTransformation,
      "PositionalConstraint": toPositionalConstraint,
    },
    optional: {},
  }, root);
}

// refs: 15 - tags: input, named, enum, output
export type TextTransformation =
| "NONE"
| "COMPRESS_WHITE_SPACE"
| "HTML_ENTITY_DECODE"
| "LOWERCASE"
| "CMD_LINE"
| "URL_DECODE"
;

function toTextTransformation(root: JSONValue): TextTransformation | null {
  return ( false
    || root == "NONE"
    || root == "COMPRESS_WHITE_SPACE"
    || root == "HTML_ENTITY_DECODE"
    || root == "LOWERCASE"
    || root == "CMD_LINE"
    || root == "URL_DECODE"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type PositionalConstraint =
| "EXACTLY"
| "STARTS_WITH"
| "ENDS_WITH"
| "CONTAINS"
| "CONTAINS_WORD"
;

function toPositionalConstraint(root: JSONValue): PositionalConstraint | null {
  return ( false
    || root == "EXACTLY"
    || root == "STARTS_WITH"
    || root == "ENDS_WITH"
    || root == "CONTAINS"
    || root == "CONTAINS_WORD"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface GeoMatchSetUpdate {
  Action: ChangeAction;
  GeoMatchConstraint: GeoMatchConstraint;
}
function fromGeoMatchSetUpdate(input?: GeoMatchSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    GeoMatchConstraint: fromGeoMatchConstraint(input["GeoMatchConstraint"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface GeoMatchConstraint {
  Type: GeoMatchConstraintType;
  Value: GeoMatchConstraintValue;
}
function fromGeoMatchConstraint(input?: GeoMatchConstraint | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toGeoMatchConstraint(root: JSONValue): GeoMatchConstraint {
  return prt.readObj({
    required: {
      "Type": toGeoMatchConstraintType,
      "Value": toGeoMatchConstraintValue,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type GeoMatchConstraintType =
| "Country"
;

function toGeoMatchConstraintType(root: JSONValue): GeoMatchConstraintType | null {
  return ( false
    || root == "Country"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type GeoMatchConstraintValue =
| "AF"
| "AX"
| "AL"
| "DZ"
| "AS"
| "AD"
| "AO"
| "AI"
| "AQ"
| "AG"
| "AR"
| "AM"
| "AW"
| "AU"
| "AT"
| "AZ"
| "BS"
| "BH"
| "BD"
| "BB"
| "BY"
| "BE"
| "BZ"
| "BJ"
| "BM"
| "BT"
| "BO"
| "BQ"
| "BA"
| "BW"
| "BV"
| "BR"
| "IO"
| "BN"
| "BG"
| "BF"
| "BI"
| "KH"
| "CM"
| "CA"
| "CV"
| "KY"
| "CF"
| "TD"
| "CL"
| "CN"
| "CX"
| "CC"
| "CO"
| "KM"
| "CG"
| "CD"
| "CK"
| "CR"
| "CI"
| "HR"
| "CU"
| "CW"
| "CY"
| "CZ"
| "DK"
| "DJ"
| "DM"
| "DO"
| "EC"
| "EG"
| "SV"
| "GQ"
| "ER"
| "EE"
| "ET"
| "FK"
| "FO"
| "FJ"
| "FI"
| "FR"
| "GF"
| "PF"
| "TF"
| "GA"
| "GM"
| "GE"
| "DE"
| "GH"
| "GI"
| "GR"
| "GL"
| "GD"
| "GP"
| "GU"
| "GT"
| "GG"
| "GN"
| "GW"
| "GY"
| "HT"
| "HM"
| "VA"
| "HN"
| "HK"
| "HU"
| "IS"
| "IN"
| "ID"
| "IR"
| "IQ"
| "IE"
| "IM"
| "IL"
| "IT"
| "JM"
| "JP"
| "JE"
| "JO"
| "KZ"
| "KE"
| "KI"
| "KP"
| "KR"
| "KW"
| "KG"
| "LA"
| "LV"
| "LB"
| "LS"
| "LR"
| "LY"
| "LI"
| "LT"
| "LU"
| "MO"
| "MK"
| "MG"
| "MW"
| "MY"
| "MV"
| "ML"
| "MT"
| "MH"
| "MQ"
| "MR"
| "MU"
| "YT"
| "MX"
| "FM"
| "MD"
| "MC"
| "MN"
| "ME"
| "MS"
| "MA"
| "MZ"
| "MM"
| "NA"
| "NR"
| "NP"
| "NL"
| "NC"
| "NZ"
| "NI"
| "NE"
| "NG"
| "NU"
| "NF"
| "MP"
| "NO"
| "OM"
| "PK"
| "PW"
| "PS"
| "PA"
| "PG"
| "PY"
| "PE"
| "PH"
| "PN"
| "PL"
| "PT"
| "PR"
| "QA"
| "RE"
| "RO"
| "RU"
| "RW"
| "BL"
| "SH"
| "KN"
| "LC"
| "MF"
| "PM"
| "VC"
| "WS"
| "SM"
| "ST"
| "SA"
| "SN"
| "RS"
| "SC"
| "SL"
| "SG"
| "SX"
| "SK"
| "SI"
| "SB"
| "SO"
| "ZA"
| "GS"
| "SS"
| "ES"
| "LK"
| "SD"
| "SR"
| "SJ"
| "SZ"
| "SE"
| "CH"
| "SY"
| "TW"
| "TJ"
| "TZ"
| "TH"
| "TL"
| "TG"
| "TK"
| "TO"
| "TT"
| "TN"
| "TR"
| "TM"
| "TC"
| "TV"
| "UG"
| "UA"
| "AE"
| "GB"
| "US"
| "UM"
| "UY"
| "UZ"
| "VU"
| "VE"
| "VN"
| "VG"
| "VI"
| "WF"
| "EH"
| "YE"
| "ZM"
| "ZW"
;

function toGeoMatchConstraintValue(root: JSONValue): GeoMatchConstraintValue | null {
  return ( false
    || root == "AF"
    || root == "AX"
    || root == "AL"
    || root == "DZ"
    || root == "AS"
    || root == "AD"
    || root == "AO"
    || root == "AI"
    || root == "AQ"
    || root == "AG"
    || root == "AR"
    || root == "AM"
    || root == "AW"
    || root == "AU"
    || root == "AT"
    || root == "AZ"
    || root == "BS"
    || root == "BH"
    || root == "BD"
    || root == "BB"
    || root == "BY"
    || root == "BE"
    || root == "BZ"
    || root == "BJ"
    || root == "BM"
    || root == "BT"
    || root == "BO"
    || root == "BQ"
    || root == "BA"
    || root == "BW"
    || root == "BV"
    || root == "BR"
    || root == "IO"
    || root == "BN"
    || root == "BG"
    || root == "BF"
    || root == "BI"
    || root == "KH"
    || root == "CM"
    || root == "CA"
    || root == "CV"
    || root == "KY"
    || root == "CF"
    || root == "TD"
    || root == "CL"
    || root == "CN"
    || root == "CX"
    || root == "CC"
    || root == "CO"
    || root == "KM"
    || root == "CG"
    || root == "CD"
    || root == "CK"
    || root == "CR"
    || root == "CI"
    || root == "HR"
    || root == "CU"
    || root == "CW"
    || root == "CY"
    || root == "CZ"
    || root == "DK"
    || root == "DJ"
    || root == "DM"
    || root == "DO"
    || root == "EC"
    || root == "EG"
    || root == "SV"
    || root == "GQ"
    || root == "ER"
    || root == "EE"
    || root == "ET"
    || root == "FK"
    || root == "FO"
    || root == "FJ"
    || root == "FI"
    || root == "FR"
    || root == "GF"
    || root == "PF"
    || root == "TF"
    || root == "GA"
    || root == "GM"
    || root == "GE"
    || root == "DE"
    || root == "GH"
    || root == "GI"
    || root == "GR"
    || root == "GL"
    || root == "GD"
    || root == "GP"
    || root == "GU"
    || root == "GT"
    || root == "GG"
    || root == "GN"
    || root == "GW"
    || root == "GY"
    || root == "HT"
    || root == "HM"
    || root == "VA"
    || root == "HN"
    || root == "HK"
    || root == "HU"
    || root == "IS"
    || root == "IN"
    || root == "ID"
    || root == "IR"
    || root == "IQ"
    || root == "IE"
    || root == "IM"
    || root == "IL"
    || root == "IT"
    || root == "JM"
    || root == "JP"
    || root == "JE"
    || root == "JO"
    || root == "KZ"
    || root == "KE"
    || root == "KI"
    || root == "KP"
    || root == "KR"
    || root == "KW"
    || root == "KG"
    || root == "LA"
    || root == "LV"
    || root == "LB"
    || root == "LS"
    || root == "LR"
    || root == "LY"
    || root == "LI"
    || root == "LT"
    || root == "LU"
    || root == "MO"
    || root == "MK"
    || root == "MG"
    || root == "MW"
    || root == "MY"
    || root == "MV"
    || root == "ML"
    || root == "MT"
    || root == "MH"
    || root == "MQ"
    || root == "MR"
    || root == "MU"
    || root == "YT"
    || root == "MX"
    || root == "FM"
    || root == "MD"
    || root == "MC"
    || root == "MN"
    || root == "ME"
    || root == "MS"
    || root == "MA"
    || root == "MZ"
    || root == "MM"
    || root == "NA"
    || root == "NR"
    || root == "NP"
    || root == "NL"
    || root == "NC"
    || root == "NZ"
    || root == "NI"
    || root == "NE"
    || root == "NG"
    || root == "NU"
    || root == "NF"
    || root == "MP"
    || root == "NO"
    || root == "OM"
    || root == "PK"
    || root == "PW"
    || root == "PS"
    || root == "PA"
    || root == "PG"
    || root == "PY"
    || root == "PE"
    || root == "PH"
    || root == "PN"
    || root == "PL"
    || root == "PT"
    || root == "PR"
    || root == "QA"
    || root == "RE"
    || root == "RO"
    || root == "RU"
    || root == "RW"
    || root == "BL"
    || root == "SH"
    || root == "KN"
    || root == "LC"
    || root == "MF"
    || root == "PM"
    || root == "VC"
    || root == "WS"
    || root == "SM"
    || root == "ST"
    || root == "SA"
    || root == "SN"
    || root == "RS"
    || root == "SC"
    || root == "SL"
    || root == "SG"
    || root == "SX"
    || root == "SK"
    || root == "SI"
    || root == "SB"
    || root == "SO"
    || root == "ZA"
    || root == "GS"
    || root == "SS"
    || root == "ES"
    || root == "LK"
    || root == "SD"
    || root == "SR"
    || root == "SJ"
    || root == "SZ"
    || root == "SE"
    || root == "CH"
    || root == "SY"
    || root == "TW"
    || root == "TJ"
    || root == "TZ"
    || root == "TH"
    || root == "TL"
    || root == "TG"
    || root == "TK"
    || root == "TO"
    || root == "TT"
    || root == "TN"
    || root == "TR"
    || root == "TM"
    || root == "TC"
    || root == "TV"
    || root == "UG"
    || root == "UA"
    || root == "AE"
    || root == "GB"
    || root == "US"
    || root == "UM"
    || root == "UY"
    || root == "UZ"
    || root == "VU"
    || root == "VE"
    || root == "VN"
    || root == "VG"
    || root == "VI"
    || root == "WF"
    || root == "EH"
    || root == "YE"
    || root == "ZM"
    || root == "ZW"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface IPSetUpdate {
  Action: ChangeAction;
  IPSetDescriptor: IPSetDescriptor;
}
function fromIPSetUpdate(input?: IPSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    IPSetDescriptor: fromIPSetDescriptor(input["IPSetDescriptor"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface IPSetDescriptor {
  Type: IPSetDescriptorType;
  Value: string;
}
function fromIPSetDescriptor(input?: IPSetDescriptor | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toIPSetDescriptor(root: JSONValue): IPSetDescriptor {
  return prt.readObj({
    required: {
      "Type": toIPSetDescriptorType,
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type IPSetDescriptorType =
| "IPV4"
| "IPV6"
;

function toIPSetDescriptorType(root: JSONValue): IPSetDescriptorType | null {
  return ( false
    || root == "IPV4"
    || root == "IPV6"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface
export interface RuleUpdate {
  Action: ChangeAction;
  Predicate: Predicate;
}
function fromRuleUpdate(input?: RuleUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    Predicate: fromPredicate(input["Predicate"]),
  }
}

// refs: 6 - tags: input, named, interface, output
export interface Predicate {
  Negated: boolean;
  Type: PredicateType;
  DataId: string;
}
function fromPredicate(input?: Predicate | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toPredicate(root: JSONValue): Predicate {
  return prt.readObj({
    required: {
      "Negated": "b",
      "Type": toPredicateType,
      "DataId": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type PredicateType =
| "IPMatch"
| "ByteMatch"
| "SqlInjectionMatch"
| "GeoMatch"
| "SizeConstraint"
| "XssMatch"
| "RegexMatch"
;

function toPredicateType(root: JSONValue): PredicateType | null {
  return ( false
    || root == "IPMatch"
    || root == "ByteMatch"
    || root == "SqlInjectionMatch"
    || root == "GeoMatch"
    || root == "SizeConstraint"
    || root == "XssMatch"
    || root == "RegexMatch"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface RegexMatchSetUpdate {
  Action: ChangeAction;
  RegexMatchTuple: RegexMatchTuple;
}
function fromRegexMatchSetUpdate(input?: RegexMatchSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    RegexMatchTuple: fromRegexMatchTuple(input["RegexMatchTuple"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface RegexMatchTuple {
  FieldToMatch: FieldToMatch;
  TextTransformation: TextTransformation;
  RegexPatternSetId: string;
}
function fromRegexMatchTuple(input?: RegexMatchTuple | null): JSONValue {
  if (!input) return input;
  return {...input,
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
  }
}
function toRegexMatchTuple(root: JSONValue): RegexMatchTuple {
  return prt.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": toTextTransformation,
      "RegexPatternSetId": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface RegexPatternSetUpdate {
  Action: ChangeAction;
  RegexPatternString: string;
}
function fromRegexPatternSetUpdate(input?: RegexPatternSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface RuleGroupUpdate {
  Action: ChangeAction;
  ActivatedRule: ActivatedRule;
}
function fromRuleGroupUpdate(input?: RuleGroupUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    ActivatedRule: fromActivatedRule(input["ActivatedRule"]),
  }
}

// refs: 5 - tags: input, named, interface, output
export interface ActivatedRule {
  Priority: number;
  RuleId: string;
  Action?: WafAction | null;
  OverrideAction?: WafOverrideAction | null;
  Type?: WafRuleType | null;
  ExcludedRules?: ExcludedRule[] | null;
}
function fromActivatedRule(input?: ActivatedRule | null): JSONValue {
  if (!input) return input;
  return {...input,
    Action: fromWafAction(input["Action"]),
    OverrideAction: fromWafOverrideAction(input["OverrideAction"]),
    ExcludedRules: input["ExcludedRules"]?.map(x => fromExcludedRule(x)),
  }
}
function toActivatedRule(root: JSONValue): ActivatedRule {
  return prt.readObj({
    required: {
      "Priority": "n",
      "RuleId": "s",
    },
    optional: {
      "Action": toWafAction,
      "OverrideAction": toWafOverrideAction,
      "Type": toWafRuleType,
      "ExcludedRules": [toExcludedRule],
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface WafOverrideAction {
  Type: WafOverrideActionType;
}
function fromWafOverrideAction(input?: WafOverrideAction | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toWafOverrideAction(root: JSONValue): WafOverrideAction {
  return prt.readObj({
    required: {
      "Type": toWafOverrideActionType,
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type WafOverrideActionType =
| "NONE"
| "COUNT"
;

function toWafOverrideActionType(root: JSONValue): WafOverrideActionType | null {
  return ( false
    || root == "NONE"
    || root == "COUNT"
  ) ? root : null;
}

// refs: 5 - tags: input, named, enum, output
export type WafRuleType =
| "REGULAR"
| "RATE_BASED"
| "GROUP"
;

function toWafRuleType(root: JSONValue): WafRuleType | null {
  return ( false
    || root == "REGULAR"
    || root == "RATE_BASED"
    || root == "GROUP"
  ) ? root : null;
}

// refs: 5 - tags: input, named, interface, output
export interface ExcludedRule {
  RuleId: string;
}
function fromExcludedRule(input?: ExcludedRule | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toExcludedRule(root: JSONValue): ExcludedRule {
  return prt.readObj({
    required: {
      "RuleId": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface SizeConstraintSetUpdate {
  Action: ChangeAction;
  SizeConstraint: SizeConstraint;
}
function fromSizeConstraintSetUpdate(input?: SizeConstraintSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    SizeConstraint: fromSizeConstraint(input["SizeConstraint"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface SizeConstraint {
  FieldToMatch: FieldToMatch;
  TextTransformation: TextTransformation;
  ComparisonOperator: ComparisonOperator;
  Size: number;
}
function fromSizeConstraint(input?: SizeConstraint | null): JSONValue {
  if (!input) return input;
  return {...input,
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
  }
}
function toSizeConstraint(root: JSONValue): SizeConstraint {
  return prt.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": toTextTransformation,
      "ComparisonOperator": toComparisonOperator,
      "Size": "n",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ComparisonOperator =
| "EQ"
| "NE"
| "LE"
| "LT"
| "GE"
| "GT"
;

function toComparisonOperator(root: JSONValue): ComparisonOperator | null {
  return ( false
    || root == "EQ"
    || root == "NE"
    || root == "LE"
    || root == "LT"
    || root == "GE"
    || root == "GT"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface SqlInjectionMatchSetUpdate {
  Action: ChangeAction;
  SqlInjectionMatchTuple: SqlInjectionMatchTuple;
}
function fromSqlInjectionMatchSetUpdate(input?: SqlInjectionMatchSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    SqlInjectionMatchTuple: fromSqlInjectionMatchTuple(input["SqlInjectionMatchTuple"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface SqlInjectionMatchTuple {
  FieldToMatch: FieldToMatch;
  TextTransformation: TextTransformation;
}
function fromSqlInjectionMatchTuple(input?: SqlInjectionMatchTuple | null): JSONValue {
  if (!input) return input;
  return {...input,
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
  }
}
function toSqlInjectionMatchTuple(root: JSONValue): SqlInjectionMatchTuple {
  return prt.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": toTextTransformation,
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface WebACLUpdate {
  Action: ChangeAction;
  ActivatedRule: ActivatedRule;
}
function fromWebACLUpdate(input?: WebACLUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    ActivatedRule: fromActivatedRule(input["ActivatedRule"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface XssMatchSetUpdate {
  Action: ChangeAction;
  XssMatchTuple: XssMatchTuple;
}
function fromXssMatchSetUpdate(input?: XssMatchSetUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    XssMatchTuple: fromXssMatchTuple(input["XssMatchTuple"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface XssMatchTuple {
  FieldToMatch: FieldToMatch;
  TextTransformation: TextTransformation;
}
function fromXssMatchTuple(input?: XssMatchTuple | null): JSONValue {
  if (!input) return input;
  return {...input,
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
  }
}
function toXssMatchTuple(root: JSONValue): XssMatchTuple {
  return prt.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": toTextTransformation,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ByteMatchSet {
  ByteMatchSetId: string;
  Name?: string | null;
  ByteMatchTuples: ByteMatchTuple[];
}
function toByteMatchSet(root: JSONValue): ByteMatchSet {
  return prt.readObj({
    required: {
      "ByteMatchSetId": "s",
      "ByteMatchTuples": [toByteMatchTuple],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface GeoMatchSet {
  GeoMatchSetId: string;
  Name?: string | null;
  GeoMatchConstraints: GeoMatchConstraint[];
}
function toGeoMatchSet(root: JSONValue): GeoMatchSet {
  return prt.readObj({
    required: {
      "GeoMatchSetId": "s",
      "GeoMatchConstraints": [toGeoMatchConstraint],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface IPSet {
  IPSetId: string;
  Name?: string | null;
  IPSetDescriptors: IPSetDescriptor[];
}
function toIPSet(root: JSONValue): IPSet {
  return prt.readObj({
    required: {
      "IPSetId": "s",
      "IPSetDescriptors": [toIPSetDescriptor],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RateBasedRule {
  RuleId: string;
  Name?: string | null;
  MetricName?: string | null;
  MatchPredicates: Predicate[];
  RateKey: RateKey;
  RateLimit: number;
}
function toRateBasedRule(root: JSONValue): RateBasedRule {
  return prt.readObj({
    required: {
      "RuleId": "s",
      "MatchPredicates": [toPredicate],
      "RateKey": toRateKey,
      "RateLimit": "n",
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RegexMatchSet {
  RegexMatchSetId?: string | null;
  Name?: string | null;
  RegexMatchTuples?: RegexMatchTuple[] | null;
}
function toRegexMatchSet(root: JSONValue): RegexMatchSet {
  return prt.readObj({
    required: {},
    optional: {
      "RegexMatchSetId": "s",
      "Name": "s",
      "RegexMatchTuples": [toRegexMatchTuple],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RegexPatternSet {
  RegexPatternSetId: string;
  Name?: string | null;
  RegexPatternStrings: string[];
}
function toRegexPatternSet(root: JSONValue): RegexPatternSet {
  return prt.readObj({
    required: {
      "RegexPatternSetId": "s",
      "RegexPatternStrings": ["s"],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Rule {
  RuleId: string;
  Name?: string | null;
  MetricName?: string | null;
  Predicates: Predicate[];
}
function toRule(root: JSONValue): Rule {
  return prt.readObj({
    required: {
      "RuleId": "s",
      "Predicates": [toPredicate],
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RuleGroup {
  RuleGroupId: string;
  Name?: string | null;
  MetricName?: string | null;
}
function toRuleGroup(root: JSONValue): RuleGroup {
  return prt.readObj({
    required: {
      "RuleGroupId": "s",
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SizeConstraintSet {
  SizeConstraintSetId: string;
  Name?: string | null;
  SizeConstraints: SizeConstraint[];
}
function toSizeConstraintSet(root: JSONValue): SizeConstraintSet {
  return prt.readObj({
    required: {
      "SizeConstraintSetId": "s",
      "SizeConstraints": [toSizeConstraint],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SqlInjectionMatchSet {
  SqlInjectionMatchSetId: string;
  Name?: string | null;
  SqlInjectionMatchTuples: SqlInjectionMatchTuple[];
}
function toSqlInjectionMatchSet(root: JSONValue): SqlInjectionMatchSet {
  return prt.readObj({
    required: {
      "SqlInjectionMatchSetId": "s",
      "SqlInjectionMatchTuples": [toSqlInjectionMatchTuple],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface WebACL {
  WebACLId: string;
  Name?: string | null;
  MetricName?: string | null;
  DefaultAction: WafAction;
  Rules: ActivatedRule[];
  WebACLArn?: string | null;
}
function toWebACL(root: JSONValue): WebACL {
  return prt.readObj({
    required: {
      "WebACLId": "s",
      "DefaultAction": toWafAction,
      "Rules": [toActivatedRule],
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
      "WebACLArn": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface XssMatchSet {
  XssMatchSetId: string;
  Name?: string | null;
  XssMatchTuples: XssMatchTuple[];
}
function toXssMatchSet(root: JSONValue): XssMatchSet {
  return prt.readObj({
    required: {
      "XssMatchSetId": "s",
      "XssMatchTuples": [toXssMatchTuple],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ChangeTokenStatus =
| "PROVISIONED"
| "PENDING"
| "INSYNC"
;
function toChangeTokenStatus(root: JSONValue): ChangeTokenStatus | null {
  return ( false
    || root == "PROVISIONED"
    || root == "PENDING"
    || root == "INSYNC"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface SampledHTTPRequest {
  Request: HTTPRequest;
  Weight: number;
  Timestamp?: Date | number | null;
  Action?: string | null;
  RuleWithinRuleGroup?: string | null;
}
function toSampledHTTPRequest(root: JSONValue): SampledHTTPRequest {
  return prt.readObj({
    required: {
      "Request": toHTTPRequest,
      "Weight": "n",
    },
    optional: {
      "Timestamp": "d",
      "Action": "s",
      "RuleWithinRuleGroup": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HTTPRequest {
  ClientIP?: string | null;
  Country?: string | null;
  URI?: string | null;
  Method?: string | null;
  HTTPVersion?: string | null;
  Headers?: HTTPHeader[] | null;
}
function toHTTPRequest(root: JSONValue): HTTPRequest {
  return prt.readObj({
    required: {},
    optional: {
      "ClientIP": "s",
      "Country": "s",
      "URI": "s",
      "Method": "s",
      "HTTPVersion": "s",
      "Headers": [toHTTPHeader],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HTTPHeader {
  Name?: string | null;
  Value?: string | null;
}
function toHTTPHeader(root: JSONValue): HTTPHeader {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ByteMatchSetSummary {
  ByteMatchSetId: string;
  Name: string;
}
function toByteMatchSetSummary(root: JSONValue): ByteMatchSetSummary {
  return prt.readObj({
    required: {
      "ByteMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GeoMatchSetSummary {
  GeoMatchSetId: string;
  Name: string;
}
function toGeoMatchSetSummary(root: JSONValue): GeoMatchSetSummary {
  return prt.readObj({
    required: {
      "GeoMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IPSetSummary {
  IPSetId: string;
  Name: string;
}
function toIPSetSummary(root: JSONValue): IPSetSummary {
  return prt.readObj({
    required: {
      "IPSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface RuleSummary {
  RuleId: string;
  Name: string;
}
function toRuleSummary(root: JSONValue): RuleSummary {
  return prt.readObj({
    required: {
      "RuleId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RegexMatchSetSummary {
  RegexMatchSetId: string;
  Name: string;
}
function toRegexMatchSetSummary(root: JSONValue): RegexMatchSetSummary {
  return prt.readObj({
    required: {
      "RegexMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RegexPatternSetSummary {
  RegexPatternSetId: string;
  Name: string;
}
function toRegexPatternSetSummary(root: JSONValue): RegexPatternSetSummary {
  return prt.readObj({
    required: {
      "RegexPatternSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RuleGroupSummary {
  RuleGroupId: string;
  Name: string;
}
function toRuleGroupSummary(root: JSONValue): RuleGroupSummary {
  return prt.readObj({
    required: {
      "RuleGroupId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SizeConstraintSetSummary {
  SizeConstraintSetId: string;
  Name: string;
}
function toSizeConstraintSetSummary(root: JSONValue): SizeConstraintSetSummary {
  return prt.readObj({
    required: {
      "SizeConstraintSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SqlInjectionMatchSetSummary {
  SqlInjectionMatchSetId: string;
  Name: string;
}
function toSqlInjectionMatchSetSummary(root: JSONValue): SqlInjectionMatchSetSummary {
  return prt.readObj({
    required: {
      "SqlInjectionMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SubscribedRuleGroupSummary {
  RuleGroupId: string;
  Name: string;
  MetricName: string;
}
function toSubscribedRuleGroupSummary(root: JSONValue): SubscribedRuleGroupSummary {
  return prt.readObj({
    required: {
      "RuleGroupId": "s",
      "Name": "s",
      "MetricName": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TagInfoForResource {
  ResourceARN?: string | null;
  TagList?: Tag[] | null;
}
function toTagInfoForResource(root: JSONValue): TagInfoForResource {
  return prt.readObj({
    required: {},
    optional: {
      "ResourceARN": "s",
      "TagList": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WebACLSummary {
  WebACLId: string;
  Name: string;
}
function toWebACLSummary(root: JSONValue): WebACLSummary {
  return prt.readObj({
    required: {
      "WebACLId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface XssMatchSetSummary {
  XssMatchSetId: string;
  Name: string;
}
function toXssMatchSetSummary(root: JSONValue): XssMatchSetSummary {
  return prt.readObj({
    required: {
      "XssMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}
