// Autogenerated API client for: AWS WAF

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as Base64 from "https://deno.land/std@0.86.0/encoding/base64.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";
function serializeBlob(input: string | Uint8Array | null | undefined) {
  if (input == null) return input;
  return Base64.encode(input);
}

export default class WAF {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WAF.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2015-08-24",
    "endpointPrefix": "waf",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "WAF",
    "serviceFullName": "AWS WAF",
    "serviceId": "WAF",
    "signatureVersion": "v4",
    "targetPrefix": "AWSWAF_20150824",
    "uid": "waf-2015-08-24"
  };

  async createByteMatchSet(
    {abortSignal, ...params}: RequestConfig & s.CreateByteMatchSetRequest,
  ): Promise<s.CreateByteMatchSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateByteMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ByteMatchSet": toByteMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & s.CreateGeoMatchSetRequest,
  ): Promise<s.CreateGeoMatchSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGeoMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GeoMatchSet": toGeoMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createIPSet(
    {abortSignal, ...params}: RequestConfig & s.CreateIPSetRequest,
  ): Promise<s.CreateIPSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIPSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IPSet": toIPSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRateBasedRule(
    {abortSignal, ...params}: RequestConfig & s.CreateRateBasedRuleRequest,
  ): Promise<s.CreateRateBasedRuleResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      MetricName: params["MetricName"],
      RateKey: params["RateKey"],
      RateLimit: params["RateLimit"],
      ChangeToken: params["ChangeToken"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRateBasedRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rule": toRateBasedRule,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & s.CreateRegexMatchSetRequest,
  ): Promise<s.CreateRegexMatchSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRegexMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RegexMatchSet": toRegexMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & s.CreateRegexPatternSetRequest,
  ): Promise<s.CreateRegexPatternSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRegexPatternSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RegexPatternSet": toRegexPatternSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRule(
    {abortSignal, ...params}: RequestConfig & s.CreateRuleRequest,
  ): Promise<s.CreateRuleResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      MetricName: params["MetricName"],
      ChangeToken: params["ChangeToken"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rule": toRule,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createRuleGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateRuleGroupRequest,
  ): Promise<s.CreateRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      MetricName: params["MetricName"],
      ChangeToken: params["ChangeToken"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRuleGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuleGroup": toRuleGroup,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & s.CreateSizeConstraintSetRequest,
  ): Promise<s.CreateSizeConstraintSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSizeConstraintSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SizeConstraintSet": toSizeConstraintSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & s.CreateSqlInjectionMatchSetRequest,
  ): Promise<s.CreateSqlInjectionMatchSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSqlInjectionMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SqlInjectionMatchSet": toSqlInjectionMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createWebACL(
    {abortSignal, ...params}: RequestConfig & s.CreateWebACLRequest,
  ): Promise<s.CreateWebACLResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      MetricName: params["MetricName"],
      DefaultAction: fromWafAction(params["DefaultAction"]),
      ChangeToken: params["ChangeToken"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWebACL",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WebACL": toWebACL,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async createWebACLMigrationStack(
    {abortSignal, ...params}: RequestConfig & s.CreateWebACLMigrationStackRequest,
  ): Promise<s.CreateWebACLMigrationStackResponse> {
    const body: jsonP.JSONObject = {
      WebACLId: params["WebACLId"],
      S3BucketName: params["S3BucketName"],
      IgnoreUnsupportedType: params["IgnoreUnsupportedType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWebACLMigrationStack",
    });
    return jsonP.readObj({
      required: {
        "S3ObjectUrl": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createXssMatchSet(
    {abortSignal, ...params}: RequestConfig & s.CreateXssMatchSetRequest,
  ): Promise<s.CreateXssMatchSetResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateXssMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "XssMatchSet": toXssMatchSet,
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteByteMatchSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteByteMatchSetRequest,
  ): Promise<s.DeleteByteMatchSetResponse> {
    const body: jsonP.JSONObject = {
      ByteMatchSetId: params["ByteMatchSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteByteMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteGeoMatchSetRequest,
  ): Promise<s.DeleteGeoMatchSetResponse> {
    const body: jsonP.JSONObject = {
      GeoMatchSetId: params["GeoMatchSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGeoMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteIPSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteIPSetRequest,
  ): Promise<s.DeleteIPSetResponse> {
    const body: jsonP.JSONObject = {
      IPSetId: params["IPSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIPSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteLoggingConfigurationRequest,
  ): Promise<s.DeleteLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLoggingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePermissionPolicy(
    {abortSignal, ...params}: RequestConfig & s.DeletePermissionPolicyRequest,
  ): Promise<s.DeletePermissionPolicyResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePermissionPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRateBasedRule(
    {abortSignal, ...params}: RequestConfig & s.DeleteRateBasedRuleRequest,
  ): Promise<s.DeleteRateBasedRuleResponse> {
    const body: jsonP.JSONObject = {
      RuleId: params["RuleId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRateBasedRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteRegexMatchSetRequest,
  ): Promise<s.DeleteRegexMatchSetResponse> {
    const body: jsonP.JSONObject = {
      RegexMatchSetId: params["RegexMatchSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRegexMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteRegexPatternSetRequest,
  ): Promise<s.DeleteRegexPatternSetResponse> {
    const body: jsonP.JSONObject = {
      RegexPatternSetId: params["RegexPatternSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRegexPatternSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRule(
    {abortSignal, ...params}: RequestConfig & s.DeleteRuleRequest,
  ): Promise<s.DeleteRuleResponse> {
    const body: jsonP.JSONObject = {
      RuleId: params["RuleId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteRuleGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteRuleGroupRequest,
  ): Promise<s.DeleteRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      RuleGroupId: params["RuleGroupId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRuleGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteSizeConstraintSetRequest,
  ): Promise<s.DeleteSizeConstraintSetResponse> {
    const body: jsonP.JSONObject = {
      SizeConstraintSetId: params["SizeConstraintSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSizeConstraintSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteSqlInjectionMatchSetRequest,
  ): Promise<s.DeleteSqlInjectionMatchSetResponse> {
    const body: jsonP.JSONObject = {
      SqlInjectionMatchSetId: params["SqlInjectionMatchSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSqlInjectionMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteWebACL(
    {abortSignal, ...params}: RequestConfig & s.DeleteWebACLRequest,
  ): Promise<s.DeleteWebACLResponse> {
    const body: jsonP.JSONObject = {
      WebACLId: params["WebACLId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteWebACL",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async deleteXssMatchSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteXssMatchSetRequest,
  ): Promise<s.DeleteXssMatchSetResponse> {
    const body: jsonP.JSONObject = {
      XssMatchSetId: params["XssMatchSetId"],
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteXssMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async getByteMatchSet(
    {abortSignal, ...params}: RequestConfig & s.GetByteMatchSetRequest,
  ): Promise<s.GetByteMatchSetResponse> {
    const body: jsonP.JSONObject = {
      ByteMatchSetId: params["ByteMatchSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetByteMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ByteMatchSet": toByteMatchSet,
      },
    }, await resp.json());
  }

  async getChangeToken(
    {abortSignal, ...params}: RequestConfig & s.GetChangeTokenRequest = {},
  ): Promise<s.GetChangeTokenResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetChangeToken",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async getChangeTokenStatus(
    {abortSignal, ...params}: RequestConfig & s.GetChangeTokenStatusRequest,
  ): Promise<s.GetChangeTokenStatusResponse> {
    const body: jsonP.JSONObject = {
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetChangeTokenStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeTokenStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChangeTokenStatus>(x),
      },
    }, await resp.json());
  }

  async getGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & s.GetGeoMatchSetRequest,
  ): Promise<s.GetGeoMatchSetResponse> {
    const body: jsonP.JSONObject = {
      GeoMatchSetId: params["GeoMatchSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGeoMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GeoMatchSet": toGeoMatchSet,
      },
    }, await resp.json());
  }

  async getIPSet(
    {abortSignal, ...params}: RequestConfig & s.GetIPSetRequest,
  ): Promise<s.GetIPSetResponse> {
    const body: jsonP.JSONObject = {
      IPSetId: params["IPSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIPSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IPSet": toIPSet,
      },
    }, await resp.json());
  }

  async getLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetLoggingConfigurationRequest,
  ): Promise<s.GetLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLoggingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async getPermissionPolicy(
    {abortSignal, ...params}: RequestConfig & s.GetPermissionPolicyRequest,
  ): Promise<s.GetPermissionPolicyResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPermissionPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": "s",
      },
    }, await resp.json());
  }

  async getRateBasedRule(
    {abortSignal, ...params}: RequestConfig & s.GetRateBasedRuleRequest,
  ): Promise<s.GetRateBasedRuleResponse> {
    const body: jsonP.JSONObject = {
      RuleId: params["RuleId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRateBasedRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rule": toRateBasedRule,
      },
    }, await resp.json());
  }

  async getRateBasedRuleManagedKeys(
    {abortSignal, ...params}: RequestConfig & s.GetRateBasedRuleManagedKeysRequest,
  ): Promise<s.GetRateBasedRuleManagedKeysResponse> {
    const body: jsonP.JSONObject = {
      RuleId: params["RuleId"],
      NextMarker: params["NextMarker"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRateBasedRuleManagedKeys",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ManagedKeys": ["s"],
        "NextMarker": "s",
      },
    }, await resp.json());
  }

  async getRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & s.GetRegexMatchSetRequest,
  ): Promise<s.GetRegexMatchSetResponse> {
    const body: jsonP.JSONObject = {
      RegexMatchSetId: params["RegexMatchSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRegexMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RegexMatchSet": toRegexMatchSet,
      },
    }, await resp.json());
  }

  async getRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & s.GetRegexPatternSetRequest,
  ): Promise<s.GetRegexPatternSetResponse> {
    const body: jsonP.JSONObject = {
      RegexPatternSetId: params["RegexPatternSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRegexPatternSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RegexPatternSet": toRegexPatternSet,
      },
    }, await resp.json());
  }

  async getRule(
    {abortSignal, ...params}: RequestConfig & s.GetRuleRequest,
  ): Promise<s.GetRuleResponse> {
    const body: jsonP.JSONObject = {
      RuleId: params["RuleId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rule": toRule,
      },
    }, await resp.json());
  }

  async getRuleGroup(
    {abortSignal, ...params}: RequestConfig & s.GetRuleGroupRequest,
  ): Promise<s.GetRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      RuleGroupId: params["RuleGroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRuleGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuleGroup": toRuleGroup,
      },
    }, await resp.json());
  }

  async getSampledRequests(
    {abortSignal, ...params}: RequestConfig & s.GetSampledRequestsRequest,
  ): Promise<s.GetSampledRequestsResponse> {
    const body: jsonP.JSONObject = {
      WebAclId: params["WebAclId"],
      RuleId: params["RuleId"],
      TimeWindow: fromTimeWindow(params["TimeWindow"]),
      MaxItems: params["MaxItems"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSampledRequests",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SampledRequests": [toSampledHTTPRequest],
        "PopulationSize": "n",
        "TimeWindow": toTimeWindow,
      },
    }, await resp.json());
  }

  async getSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & s.GetSizeConstraintSetRequest,
  ): Promise<s.GetSizeConstraintSetResponse> {
    const body: jsonP.JSONObject = {
      SizeConstraintSetId: params["SizeConstraintSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSizeConstraintSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SizeConstraintSet": toSizeConstraintSet,
      },
    }, await resp.json());
  }

  async getSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & s.GetSqlInjectionMatchSetRequest,
  ): Promise<s.GetSqlInjectionMatchSetResponse> {
    const body: jsonP.JSONObject = {
      SqlInjectionMatchSetId: params["SqlInjectionMatchSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSqlInjectionMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SqlInjectionMatchSet": toSqlInjectionMatchSet,
      },
    }, await resp.json());
  }

  async getWebACL(
    {abortSignal, ...params}: RequestConfig & s.GetWebACLRequest,
  ): Promise<s.GetWebACLResponse> {
    const body: jsonP.JSONObject = {
      WebACLId: params["WebACLId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetWebACL",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WebACL": toWebACL,
      },
    }, await resp.json());
  }

  async getXssMatchSet(
    {abortSignal, ...params}: RequestConfig & s.GetXssMatchSetRequest,
  ): Promise<s.GetXssMatchSetResponse> {
    const body: jsonP.JSONObject = {
      XssMatchSetId: params["XssMatchSetId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetXssMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "XssMatchSet": toXssMatchSet,
      },
    }, await resp.json());
  }

  async listActivatedRulesInRuleGroup(
    {abortSignal, ...params}: RequestConfig & s.ListActivatedRulesInRuleGroupRequest = {},
  ): Promise<s.ListActivatedRulesInRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      RuleGroupId: params["RuleGroupId"],
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListActivatedRulesInRuleGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "ActivatedRules": [toActivatedRule],
      },
    }, await resp.json());
  }

  async listByteMatchSets(
    {abortSignal, ...params}: RequestConfig & s.ListByteMatchSetsRequest = {},
  ): Promise<s.ListByteMatchSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListByteMatchSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "ByteMatchSets": [toByteMatchSetSummary],
      },
    }, await resp.json());
  }

  async listGeoMatchSets(
    {abortSignal, ...params}: RequestConfig & s.ListGeoMatchSetsRequest = {},
  ): Promise<s.ListGeoMatchSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGeoMatchSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "GeoMatchSets": [toGeoMatchSetSummary],
      },
    }, await resp.json());
  }

  async listIPSets(
    {abortSignal, ...params}: RequestConfig & s.ListIPSetsRequest = {},
  ): Promise<s.ListIPSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIPSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "IPSets": [toIPSetSummary],
      },
    }, await resp.json());
  }

  async listLoggingConfigurations(
    {abortSignal, ...params}: RequestConfig & s.ListLoggingConfigurationsRequest = {},
  ): Promise<s.ListLoggingConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLoggingConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoggingConfigurations": [toLoggingConfiguration],
        "NextMarker": "s",
      },
    }, await resp.json());
  }

  async listRateBasedRules(
    {abortSignal, ...params}: RequestConfig & s.ListRateBasedRulesRequest = {},
  ): Promise<s.ListRateBasedRulesResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRateBasedRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "Rules": [toRuleSummary],
      },
    }, await resp.json());
  }

  async listRegexMatchSets(
    {abortSignal, ...params}: RequestConfig & s.ListRegexMatchSetsRequest = {},
  ): Promise<s.ListRegexMatchSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRegexMatchSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RegexMatchSets": [toRegexMatchSetSummary],
      },
    }, await resp.json());
  }

  async listRegexPatternSets(
    {abortSignal, ...params}: RequestConfig & s.ListRegexPatternSetsRequest = {},
  ): Promise<s.ListRegexPatternSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRegexPatternSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RegexPatternSets": [toRegexPatternSetSummary],
      },
    }, await resp.json());
  }

  async listRuleGroups(
    {abortSignal, ...params}: RequestConfig & s.ListRuleGroupsRequest = {},
  ): Promise<s.ListRuleGroupsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRuleGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RuleGroups": [toRuleGroupSummary],
      },
    }, await resp.json());
  }

  async listRules(
    {abortSignal, ...params}: RequestConfig & s.ListRulesRequest = {},
  ): Promise<s.ListRulesResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "Rules": [toRuleSummary],
      },
    }, await resp.json());
  }

  async listSizeConstraintSets(
    {abortSignal, ...params}: RequestConfig & s.ListSizeConstraintSetsRequest = {},
  ): Promise<s.ListSizeConstraintSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSizeConstraintSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "SizeConstraintSets": [toSizeConstraintSetSummary],
      },
    }, await resp.json());
  }

  async listSqlInjectionMatchSets(
    {abortSignal, ...params}: RequestConfig & s.ListSqlInjectionMatchSetsRequest = {},
  ): Promise<s.ListSqlInjectionMatchSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSqlInjectionMatchSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "SqlInjectionMatchSets": [toSqlInjectionMatchSetSummary],
      },
    }, await resp.json());
  }

  async listSubscribedRuleGroups(
    {abortSignal, ...params}: RequestConfig & s.ListSubscribedRuleGroupsRequest = {},
  ): Promise<s.ListSubscribedRuleGroupsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSubscribedRuleGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "RuleGroups": [toSubscribedRuleGroupSummary],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "TagInfoForResource": toTagInfoForResource,
      },
    }, await resp.json());
  }

  async listWebACLs(
    {abortSignal, ...params}: RequestConfig & s.ListWebACLsRequest = {},
  ): Promise<s.ListWebACLsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListWebACLs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "WebACLs": [toWebACLSummary],
      },
    }, await resp.json());
  }

  async listXssMatchSets(
    {abortSignal, ...params}: RequestConfig & s.ListXssMatchSetsRequest = {},
  ): Promise<s.ListXssMatchSetsResponse> {
    const body: jsonP.JSONObject = {
      NextMarker: params["NextMarker"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListXssMatchSets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextMarker": "s",
        "XssMatchSets": [toXssMatchSetSummary],
      },
    }, await resp.json());
  }

  async putLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutLoggingConfigurationRequest,
  ): Promise<s.PutLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      LoggingConfiguration: fromLoggingConfiguration(params["LoggingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLoggingConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async putPermissionPolicy(
    {abortSignal, ...params}: RequestConfig & s.PutPermissionPolicyRequest,
  ): Promise<s.PutPermissionPolicyResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Policy: params["Policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPermissionPolicy",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateByteMatchSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateByteMatchSetRequest,
  ): Promise<s.UpdateByteMatchSetResponse> {
    const body: jsonP.JSONObject = {
      ByteMatchSetId: params["ByteMatchSetId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromByteMatchSetUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateByteMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateGeoMatchSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateGeoMatchSetRequest,
  ): Promise<s.UpdateGeoMatchSetResponse> {
    const body: jsonP.JSONObject = {
      GeoMatchSetId: params["GeoMatchSetId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromGeoMatchSetUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGeoMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateIPSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateIPSetRequest,
  ): Promise<s.UpdateIPSetResponse> {
    const body: jsonP.JSONObject = {
      IPSetId: params["IPSetId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromIPSetUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIPSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRateBasedRule(
    {abortSignal, ...params}: RequestConfig & s.UpdateRateBasedRuleRequest,
  ): Promise<s.UpdateRateBasedRuleResponse> {
    const body: jsonP.JSONObject = {
      RuleId: params["RuleId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromRuleUpdate(x)),
      RateLimit: params["RateLimit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRateBasedRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRegexMatchSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateRegexMatchSetRequest,
  ): Promise<s.UpdateRegexMatchSetResponse> {
    const body: jsonP.JSONObject = {
      RegexMatchSetId: params["RegexMatchSetId"],
      Updates: params["Updates"]?.map(x => fromRegexMatchSetUpdate(x)),
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRegexMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRegexPatternSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateRegexPatternSetRequest,
  ): Promise<s.UpdateRegexPatternSetResponse> {
    const body: jsonP.JSONObject = {
      RegexPatternSetId: params["RegexPatternSetId"],
      Updates: params["Updates"]?.map(x => fromRegexPatternSetUpdate(x)),
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRegexPatternSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRule(
    {abortSignal, ...params}: RequestConfig & s.UpdateRuleRequest,
  ): Promise<s.UpdateRuleResponse> {
    const body: jsonP.JSONObject = {
      RuleId: params["RuleId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromRuleUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateRuleGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateRuleGroupRequest,
  ): Promise<s.UpdateRuleGroupResponse> {
    const body: jsonP.JSONObject = {
      RuleGroupId: params["RuleGroupId"],
      Updates: params["Updates"]?.map(x => fromRuleGroupUpdate(x)),
      ChangeToken: params["ChangeToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRuleGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateSizeConstraintSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateSizeConstraintSetRequest,
  ): Promise<s.UpdateSizeConstraintSetResponse> {
    const body: jsonP.JSONObject = {
      SizeConstraintSetId: params["SizeConstraintSetId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromSizeConstraintSetUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSizeConstraintSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateSqlInjectionMatchSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateSqlInjectionMatchSetRequest,
  ): Promise<s.UpdateSqlInjectionMatchSetResponse> {
    const body: jsonP.JSONObject = {
      SqlInjectionMatchSetId: params["SqlInjectionMatchSetId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromSqlInjectionMatchSetUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSqlInjectionMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateWebACL(
    {abortSignal, ...params}: RequestConfig & s.UpdateWebACLRequest,
  ): Promise<s.UpdateWebACLResponse> {
    const body: jsonP.JSONObject = {
      WebACLId: params["WebACLId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromWebACLUpdate(x)),
      DefaultAction: fromWafAction(params["DefaultAction"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWebACL",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

  async updateXssMatchSet(
    {abortSignal, ...params}: RequestConfig & s.UpdateXssMatchSetRequest,
  ): Promise<s.UpdateXssMatchSetResponse> {
    const body: jsonP.JSONObject = {
      XssMatchSetId: params["XssMatchSetId"],
      ChangeToken: params["ChangeToken"],
      Updates: params["Updates"]?.map(x => fromXssMatchSetUpdate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateXssMatchSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChangeToken": "s",
      },
    }, await resp.json());
  }

}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromWafAction(input?: s.WafAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
  }
}
function toWafAction(root: jsonP.JSONValue): s.WafAction {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.WafActionType>(x),
    },
    optional: {},
  }, root);
}

function fromTimeWindow(input?: s.TimeWindow | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StartTime: jsonP.serializeDate_unixTimestamp(input["StartTime"]),
    EndTime: jsonP.serializeDate_unixTimestamp(input["EndTime"]),
  }
}
function toTimeWindow(root: jsonP.JSONValue): s.TimeWindow {
  return jsonP.readObj({
    required: {
      "StartTime": "d",
      "EndTime": "d",
    },
    optional: {},
  }, root);
}

function fromLoggingConfiguration(input?: s.LoggingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceArn: input["ResourceArn"],
    LogDestinationConfigs: input["LogDestinationConfigs"],
    RedactedFields: input["RedactedFields"]?.map(x => fromFieldToMatch(x)),
  }
}
function toLoggingConfiguration(root: jsonP.JSONValue): s.LoggingConfiguration {
  return jsonP.readObj({
    required: {
      "ResourceArn": "s",
      "LogDestinationConfigs": ["s"],
    },
    optional: {
      "RedactedFields": [toFieldToMatch],
    },
  }, root);
}

function fromFieldToMatch(input?: s.FieldToMatch | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Data: input["Data"],
  }
}
function toFieldToMatch(root: jsonP.JSONValue): s.FieldToMatch {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.MatchFieldType>(x),
    },
    optional: {
      "Data": "s",
    },
  }, root);
}

function fromByteMatchSetUpdate(input?: s.ByteMatchSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    ByteMatchTuple: fromByteMatchTuple(input["ByteMatchTuple"]),
  }
}

function fromByteMatchTuple(input?: s.ByteMatchTuple | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
    TargetString: serializeBlob(input["TargetString"]),
    TextTransformation: input["TextTransformation"],
    PositionalConstraint: input["PositionalConstraint"],
  }
}
function toByteMatchTuple(root: jsonP.JSONValue): s.ByteMatchTuple {
  return jsonP.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TargetString": "a",
      "TextTransformation": (x: jsonP.JSONValue) => cmnP.readEnum<s.TextTransformation>(x),
      "PositionalConstraint": (x: jsonP.JSONValue) => cmnP.readEnum<s.PositionalConstraint>(x),
    },
    optional: {},
  }, root);
}

function fromGeoMatchSetUpdate(input?: s.GeoMatchSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    GeoMatchConstraint: fromGeoMatchConstraint(input["GeoMatchConstraint"]),
  }
}

function fromGeoMatchConstraint(input?: s.GeoMatchConstraint | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Value: input["Value"],
  }
}
function toGeoMatchConstraint(root: jsonP.JSONValue): s.GeoMatchConstraint {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.GeoMatchConstraintType>(x),
      "Value": (x: jsonP.JSONValue) => cmnP.readEnum<s.GeoMatchConstraintValue>(x),
    },
    optional: {},
  }, root);
}

function fromIPSetUpdate(input?: s.IPSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    IPSetDescriptor: fromIPSetDescriptor(input["IPSetDescriptor"]),
  }
}

function fromIPSetDescriptor(input?: s.IPSetDescriptor | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Value: input["Value"],
  }
}
function toIPSetDescriptor(root: jsonP.JSONValue): s.IPSetDescriptor {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.IPSetDescriptorType>(x),
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromRuleUpdate(input?: s.RuleUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Predicate: fromPredicate(input["Predicate"]),
  }
}

function fromPredicate(input?: s.Predicate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Negated: input["Negated"],
    Type: input["Type"],
    DataId: input["DataId"],
  }
}
function toPredicate(root: jsonP.JSONValue): s.Predicate {
  return jsonP.readObj({
    required: {
      "Negated": "b",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.PredicateType>(x),
      "DataId": "s",
    },
    optional: {},
  }, root);
}

function fromRegexMatchSetUpdate(input?: s.RegexMatchSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    RegexMatchTuple: fromRegexMatchTuple(input["RegexMatchTuple"]),
  }
}

function fromRegexMatchTuple(input?: s.RegexMatchTuple | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
    TextTransformation: input["TextTransformation"],
    RegexPatternSetId: input["RegexPatternSetId"],
  }
}
function toRegexMatchTuple(root: jsonP.JSONValue): s.RegexMatchTuple {
  return jsonP.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": (x: jsonP.JSONValue) => cmnP.readEnum<s.TextTransformation>(x),
      "RegexPatternSetId": "s",
    },
    optional: {},
  }, root);
}

function fromRegexPatternSetUpdate(input?: s.RegexPatternSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    RegexPatternString: input["RegexPatternString"],
  }
}

function fromRuleGroupUpdate(input?: s.RuleGroupUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    ActivatedRule: fromActivatedRule(input["ActivatedRule"]),
  }
}

function fromActivatedRule(input?: s.ActivatedRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Priority: input["Priority"],
    RuleId: input["RuleId"],
    Action: fromWafAction(input["Action"]),
    OverrideAction: fromWafOverrideAction(input["OverrideAction"]),
    Type: input["Type"],
    ExcludedRules: input["ExcludedRules"]?.map(x => fromExcludedRule(x)),
  }
}
function toActivatedRule(root: jsonP.JSONValue): s.ActivatedRule {
  return jsonP.readObj({
    required: {
      "Priority": "n",
      "RuleId": "s",
    },
    optional: {
      "Action": toWafAction,
      "OverrideAction": toWafOverrideAction,
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.WafRuleType>(x),
      "ExcludedRules": [toExcludedRule],
    },
  }, root);
}

function fromWafOverrideAction(input?: s.WafOverrideAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
  }
}
function toWafOverrideAction(root: jsonP.JSONValue): s.WafOverrideAction {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.WafOverrideActionType>(x),
    },
    optional: {},
  }, root);
}

function fromExcludedRule(input?: s.ExcludedRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RuleId: input["RuleId"],
  }
}
function toExcludedRule(root: jsonP.JSONValue): s.ExcludedRule {
  return jsonP.readObj({
    required: {
      "RuleId": "s",
    },
    optional: {},
  }, root);
}

function fromSizeConstraintSetUpdate(input?: s.SizeConstraintSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    SizeConstraint: fromSizeConstraint(input["SizeConstraint"]),
  }
}

function fromSizeConstraint(input?: s.SizeConstraint | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
    TextTransformation: input["TextTransformation"],
    ComparisonOperator: input["ComparisonOperator"],
    Size: input["Size"],
  }
}
function toSizeConstraint(root: jsonP.JSONValue): s.SizeConstraint {
  return jsonP.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": (x: jsonP.JSONValue) => cmnP.readEnum<s.TextTransformation>(x),
      "ComparisonOperator": (x: jsonP.JSONValue) => cmnP.readEnum<s.ComparisonOperator>(x),
      "Size": "n",
    },
    optional: {},
  }, root);
}

function fromSqlInjectionMatchSetUpdate(input?: s.SqlInjectionMatchSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    SqlInjectionMatchTuple: fromSqlInjectionMatchTuple(input["SqlInjectionMatchTuple"]),
  }
}

function fromSqlInjectionMatchTuple(input?: s.SqlInjectionMatchTuple | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
    TextTransformation: input["TextTransformation"],
  }
}
function toSqlInjectionMatchTuple(root: jsonP.JSONValue): s.SqlInjectionMatchTuple {
  return jsonP.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": (x: jsonP.JSONValue) => cmnP.readEnum<s.TextTransformation>(x),
    },
    optional: {},
  }, root);
}

function fromWebACLUpdate(input?: s.WebACLUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    ActivatedRule: fromActivatedRule(input["ActivatedRule"]),
  }
}

function fromXssMatchSetUpdate(input?: s.XssMatchSetUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    XssMatchTuple: fromXssMatchTuple(input["XssMatchTuple"]),
  }
}

function fromXssMatchTuple(input?: s.XssMatchTuple | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FieldToMatch: fromFieldToMatch(input["FieldToMatch"]),
    TextTransformation: input["TextTransformation"],
  }
}
function toXssMatchTuple(root: jsonP.JSONValue): s.XssMatchTuple {
  return jsonP.readObj({
    required: {
      "FieldToMatch": toFieldToMatch,
      "TextTransformation": (x: jsonP.JSONValue) => cmnP.readEnum<s.TextTransformation>(x),
    },
    optional: {},
  }, root);
}

function toByteMatchSet(root: jsonP.JSONValue): s.ByteMatchSet {
  return jsonP.readObj({
    required: {
      "ByteMatchSetId": "s",
      "ByteMatchTuples": [toByteMatchTuple],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function toGeoMatchSet(root: jsonP.JSONValue): s.GeoMatchSet {
  return jsonP.readObj({
    required: {
      "GeoMatchSetId": "s",
      "GeoMatchConstraints": [toGeoMatchConstraint],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function toIPSet(root: jsonP.JSONValue): s.IPSet {
  return jsonP.readObj({
    required: {
      "IPSetId": "s",
      "IPSetDescriptors": [toIPSetDescriptor],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function toRateBasedRule(root: jsonP.JSONValue): s.RateBasedRule {
  return jsonP.readObj({
    required: {
      "RuleId": "s",
      "MatchPredicates": [toPredicate],
      "RateKey": (x: jsonP.JSONValue) => cmnP.readEnum<s.RateKey>(x),
      "RateLimit": "n",
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
    },
  }, root);
}

function toRegexMatchSet(root: jsonP.JSONValue): s.RegexMatchSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "RegexMatchSetId": "s",
      "Name": "s",
      "RegexMatchTuples": [toRegexMatchTuple],
    },
  }, root);
}

function toRegexPatternSet(root: jsonP.JSONValue): s.RegexPatternSet {
  return jsonP.readObj({
    required: {
      "RegexPatternSetId": "s",
      "RegexPatternStrings": ["s"],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function toRule(root: jsonP.JSONValue): s.Rule {
  return jsonP.readObj({
    required: {
      "RuleId": "s",
      "Predicates": [toPredicate],
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
    },
  }, root);
}

function toRuleGroup(root: jsonP.JSONValue): s.RuleGroup {
  return jsonP.readObj({
    required: {
      "RuleGroupId": "s",
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
    },
  }, root);
}

function toSizeConstraintSet(root: jsonP.JSONValue): s.SizeConstraintSet {
  return jsonP.readObj({
    required: {
      "SizeConstraintSetId": "s",
      "SizeConstraints": [toSizeConstraint],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function toSqlInjectionMatchSet(root: jsonP.JSONValue): s.SqlInjectionMatchSet {
  return jsonP.readObj({
    required: {
      "SqlInjectionMatchSetId": "s",
      "SqlInjectionMatchTuples": [toSqlInjectionMatchTuple],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function toWebACL(root: jsonP.JSONValue): s.WebACL {
  return jsonP.readObj({
    required: {
      "WebACLId": "s",
      "DefaultAction": toWafAction,
      "Rules": [toActivatedRule],
    },
    optional: {
      "Name": "s",
      "MetricName": "s",
      "WebACLArn": "s",
    },
  }, root);
}

function toXssMatchSet(root: jsonP.JSONValue): s.XssMatchSet {
  return jsonP.readObj({
    required: {
      "XssMatchSetId": "s",
      "XssMatchTuples": [toXssMatchTuple],
    },
    optional: {
      "Name": "s",
    },
  }, root);
}

function toSampledHTTPRequest(root: jsonP.JSONValue): s.SampledHTTPRequest {
  return jsonP.readObj({
    required: {
      "Request": toHTTPRequest,
      "Weight": "n",
    },
    optional: {
      "Timestamp": "d",
      "Action": "s",
      "RuleWithinRuleGroup": "s",
    },
  }, root);
}

function toHTTPRequest(root: jsonP.JSONValue): s.HTTPRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "ClientIP": "s",
      "Country": "s",
      "URI": "s",
      "Method": "s",
      "HTTPVersion": "s",
      "Headers": [toHTTPHeader],
    },
  }, root);
}

function toHTTPHeader(root: jsonP.JSONValue): s.HTTPHeader {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "s",
    },
  }, root);
}

function toByteMatchSetSummary(root: jsonP.JSONValue): s.ByteMatchSetSummary {
  return jsonP.readObj({
    required: {
      "ByteMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toGeoMatchSetSummary(root: jsonP.JSONValue): s.GeoMatchSetSummary {
  return jsonP.readObj({
    required: {
      "GeoMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toIPSetSummary(root: jsonP.JSONValue): s.IPSetSummary {
  return jsonP.readObj({
    required: {
      "IPSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toRuleSummary(root: jsonP.JSONValue): s.RuleSummary {
  return jsonP.readObj({
    required: {
      "RuleId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toRegexMatchSetSummary(root: jsonP.JSONValue): s.RegexMatchSetSummary {
  return jsonP.readObj({
    required: {
      "RegexMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toRegexPatternSetSummary(root: jsonP.JSONValue): s.RegexPatternSetSummary {
  return jsonP.readObj({
    required: {
      "RegexPatternSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toRuleGroupSummary(root: jsonP.JSONValue): s.RuleGroupSummary {
  return jsonP.readObj({
    required: {
      "RuleGroupId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toSizeConstraintSetSummary(root: jsonP.JSONValue): s.SizeConstraintSetSummary {
  return jsonP.readObj({
    required: {
      "SizeConstraintSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toSqlInjectionMatchSetSummary(root: jsonP.JSONValue): s.SqlInjectionMatchSetSummary {
  return jsonP.readObj({
    required: {
      "SqlInjectionMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toSubscribedRuleGroupSummary(root: jsonP.JSONValue): s.SubscribedRuleGroupSummary {
  return jsonP.readObj({
    required: {
      "RuleGroupId": "s",
      "Name": "s",
      "MetricName": "s",
    },
    optional: {},
  }, root);
}

function toTagInfoForResource(root: jsonP.JSONValue): s.TagInfoForResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceARN": "s",
      "TagList": [toTag],
    },
  }, root);
}

function toWebACLSummary(root: jsonP.JSONValue): s.WebACLSummary {
  return jsonP.readObj({
    required: {
      "WebACLId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}

function toXssMatchSetSummary(root: jsonP.JSONValue): s.XssMatchSetSummary {
  return jsonP.readObj({
    required: {
      "XssMatchSetId": "s",
      "Name": "s",
    },
    optional: {},
  }, root);
}
