// Autogenerated API client for: Amazon CloudHSM

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class CloudHSM {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CloudHSM.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2014-05-30",
    "endpointPrefix": "cloudhsm",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "CloudHSM",
    "serviceFullName": "Amazon CloudHSM",
    "serviceId": "CloudHSM",
    "signatureVersion": "v4",
    "targetPrefix": "CloudHsmFrontendService",
    "uid": "cloudhsm-2014-05-30"
  };

  async addTagsToResource(
    {abortSignal, ...params}: RequestConfig & s.AddTagsToResourceRequest,
  ): Promise<s.AddTagsToResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagList: params["TagList"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTagsToResource",
    });
    return jsonP.readObj({
      required: {
        "Status": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async createHapg(
    {abortSignal, ...params}: RequestConfig & s.CreateHapgRequest,
  ): Promise<s.CreateHapgResponse> {
    const body: jsonP.JSONObject = {
      Label: params["Label"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateHapg",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HapgArn": "s",
      },
    }, await resp.json());
  }

  async createHsm(
    {abortSignal, ...params}: RequestConfig & s.CreateHsmRequest,
  ): Promise<s.CreateHsmResponse> {
    const body: jsonP.JSONObject = {
      SubnetId: params["SubnetId"],
      SshKey: params["SshKey"],
      EniIp: params["EniIp"],
      IamRoleArn: params["IamRoleArn"],
      ExternalId: params["ExternalId"],
      SubscriptionType: params["SubscriptionType"],
      ClientToken: params["ClientToken"],
      SyslogIp: params["SyslogIp"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateHsm",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HsmArn": "s",
      },
    }, await resp.json());
  }

  async createLunaClient(
    {abortSignal, ...params}: RequestConfig & s.CreateLunaClientRequest,
  ): Promise<s.CreateLunaClientResponse> {
    const body: jsonP.JSONObject = {
      Label: params["Label"],
      Certificate: params["Certificate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLunaClient",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClientArn": "s",
      },
    }, await resp.json());
  }

  async deleteHapg(
    {abortSignal, ...params}: RequestConfig & s.DeleteHapgRequest,
  ): Promise<s.DeleteHapgResponse> {
    const body: jsonP.JSONObject = {
      HapgArn: params["HapgArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteHapg",
    });
    return jsonP.readObj({
      required: {
        "Status": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteHsm(
    {abortSignal, ...params}: RequestConfig & s.DeleteHsmRequest,
  ): Promise<s.DeleteHsmResponse> {
    const body: jsonP.JSONObject = {
      HsmArn: params["HsmArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteHsm",
    });
    return jsonP.readObj({
      required: {
        "Status": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteLunaClient(
    {abortSignal, ...params}: RequestConfig & s.DeleteLunaClientRequest,
  ): Promise<s.DeleteLunaClientResponse> {
    const body: jsonP.JSONObject = {
      ClientArn: params["ClientArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLunaClient",
    });
    return jsonP.readObj({
      required: {
        "Status": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async describeHapg(
    {abortSignal, ...params}: RequestConfig & s.DescribeHapgRequest,
  ): Promise<s.DescribeHapgResponse> {
    const body: jsonP.JSONObject = {
      HapgArn: params["HapgArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeHapg",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HapgArn": "s",
        "HapgSerial": "s",
        "HsmsLastActionFailed": ["s"],
        "HsmsPendingDeletion": ["s"],
        "HsmsPendingRegistration": ["s"],
        "Label": "s",
        "LastModifiedTimestamp": "s",
        "PartitionSerialList": ["s"],
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.CloudHsmObjectState>(x),
      },
    }, await resp.json());
  }

  async describeHsm(
    {abortSignal, ...params}: RequestConfig & s.DescribeHsmRequest = {},
  ): Promise<s.DescribeHsmResponse> {
    const body: jsonP.JSONObject = {
      HsmArn: params["HsmArn"],
      HsmSerialNumber: params["HsmSerialNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeHsm",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HsmArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.HsmStatus>(x),
        "StatusDetails": "s",
        "AvailabilityZone": "s",
        "EniId": "s",
        "EniIp": "s",
        "SubscriptionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SubscriptionType>(x),
        "SubscriptionStartDate": "s",
        "SubscriptionEndDate": "s",
        "VpcId": "s",
        "SubnetId": "s",
        "IamRoleArn": "s",
        "SerialNumber": "s",
        "VendorName": "s",
        "HsmType": "s",
        "SoftwareVersion": "s",
        "SshPublicKey": "s",
        "SshKeyLastUpdated": "s",
        "ServerCertUri": "s",
        "ServerCertLastUpdated": "s",
        "Partitions": ["s"],
      },
    }, await resp.json());
  }

  async describeLunaClient(
    {abortSignal, ...params}: RequestConfig & s.DescribeLunaClientRequest = {},
  ): Promise<s.DescribeLunaClientResponse> {
    const body: jsonP.JSONObject = {
      ClientArn: params["ClientArn"],
      CertificateFingerprint: params["CertificateFingerprint"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLunaClient",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClientArn": "s",
        "Certificate": "s",
        "CertificateFingerprint": "s",
        "LastModifiedTimestamp": "s",
        "Label": "s",
      },
    }, await resp.json());
  }

  async getConfig(
    {abortSignal, ...params}: RequestConfig & s.GetConfigRequest,
  ): Promise<s.GetConfigResponse> {
    const body: jsonP.JSONObject = {
      ClientArn: params["ClientArn"],
      ClientVersion: params["ClientVersion"],
      HapgList: params["HapgList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConfig",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigType": "s",
        "ConfigFile": "s",
        "ConfigCred": "s",
      },
    }, await resp.json());
  }

  async listAvailableZones(
    {abortSignal}: RequestConfig = {},
  ): Promise<s.ListAvailableZonesResponse> {
    const body: jsonP.JSONObject = {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAvailableZones",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AZList": ["s"],
      },
    }, await resp.json());
  }

  async listHapgs(
    {abortSignal, ...params}: RequestConfig & s.ListHapgsRequest = {},
  ): Promise<s.ListHapgsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListHapgs",
    });
    return jsonP.readObj({
      required: {
        "HapgList": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listHsms(
    {abortSignal, ...params}: RequestConfig & s.ListHsmsRequest = {},
  ): Promise<s.ListHsmsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListHsms",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HsmList": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLunaClients(
    {abortSignal, ...params}: RequestConfig & s.ListLunaClientsRequest = {},
  ): Promise<s.ListLunaClientsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLunaClients",
    });
    return jsonP.readObj({
      required: {
        "ClientList": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {
        "TagList": [toTag],
      },
      optional: {},
    }, await resp.json());
  }

  async modifyHapg(
    {abortSignal, ...params}: RequestConfig & s.ModifyHapgRequest,
  ): Promise<s.ModifyHapgResponse> {
    const body: jsonP.JSONObject = {
      HapgArn: params["HapgArn"],
      Label: params["Label"],
      PartitionSerialList: params["PartitionSerialList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyHapg",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HapgArn": "s",
      },
    }, await resp.json());
  }

  async modifyHsm(
    {abortSignal, ...params}: RequestConfig & s.ModifyHsmRequest,
  ): Promise<s.ModifyHsmResponse> {
    const body: jsonP.JSONObject = {
      HsmArn: params["HsmArn"],
      SubnetId: params["SubnetId"],
      EniIp: params["EniIp"],
      IamRoleArn: params["IamRoleArn"],
      ExternalId: params["ExternalId"],
      SyslogIp: params["SyslogIp"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyHsm",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HsmArn": "s",
      },
    }, await resp.json());
  }

  async modifyLunaClient(
    {abortSignal, ...params}: RequestConfig & s.ModifyLunaClientRequest,
  ): Promise<s.ModifyLunaClientResponse> {
    const body: jsonP.JSONObject = {
      ClientArn: params["ClientArn"],
      Certificate: params["Certificate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyLunaClient",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClientArn": "s",
      },
    }, await resp.json());
  }

  async removeTagsFromResource(
    {abortSignal, ...params}: RequestConfig & s.RemoveTagsFromResourceRequest,
  ): Promise<s.RemoveTagsFromResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeyList: params["TagKeyList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTagsFromResource",
    });
    return jsonP.readObj({
      required: {
        "Status": "s",
      },
      optional: {},
    }, await resp.json());
  }

}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}
