// Autogenerated API client for: Amazon Cognito Sync

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CognitoSync {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CognitoSync.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-06-30",
    "endpointPrefix": "cognito-sync",
    "jsonVersion": "1.1",
    "serviceFullName": "Amazon Cognito Sync",
    "serviceId": "Cognito Sync",
    "signatureVersion": "v4",
    "protocol": "rest-json",
    "uid": "cognito-sync-2014-06-30"
  };

  async bulkPublish(
    {abortSignal, ...params}: RequestConfig & BulkPublishRequest,
  ): Promise<BulkPublishResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "BulkPublish",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/bulkpublish`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IdentityPoolId": "s",
        },
      }, await resp.json()),
  };
  }

  async deleteDataset(
    {abortSignal, ...params}: RequestConfig & DeleteDatasetRequest,
  ): Promise<DeleteDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDataset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Dataset": toDataset,
        },
      }, await resp.json()),
  };
  }

  async describeDataset(
    {abortSignal, ...params}: RequestConfig & DescribeDatasetRequest,
  ): Promise<DescribeDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDataset",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Dataset": toDataset,
        },
      }, await resp.json()),
  };
  }

  async describeIdentityPoolUsage(
    {abortSignal, ...params}: RequestConfig & DescribeIdentityPoolUsageRequest,
  ): Promise<DescribeIdentityPoolUsageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIdentityPoolUsage",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IdentityPoolUsage": toIdentityPoolUsage,
        },
      }, await resp.json()),
  };
  }

  async describeIdentityUsage(
    {abortSignal, ...params}: RequestConfig & DescribeIdentityUsageRequest,
  ): Promise<DescribeIdentityUsageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIdentityUsage",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IdentityUsage": toIdentityUsage,
        },
      }, await resp.json()),
  };
  }

  async getBulkPublishDetails(
    {abortSignal, ...params}: RequestConfig & GetBulkPublishDetailsRequest,
  ): Promise<GetBulkPublishDetailsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBulkPublishDetails",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/getBulkPublishDetails`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IdentityPoolId": "s",
          "BulkPublishStartTime": "d",
          "BulkPublishCompleteTime": "d",
          "BulkPublishStatus": (x: jsonP.JSONValue) => cmnP.readEnum<BulkPublishStatus>(x),
          "FailureMessage": "s",
        },
      }, await resp.json()),
  };
  }

  async getCognitoEvents(
    {abortSignal, ...params}: RequestConfig & GetCognitoEventsRequest,
  ): Promise<GetCognitoEventsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCognitoEvents",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/events`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Events": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async getIdentityPoolConfiguration(
    {abortSignal, ...params}: RequestConfig & GetIdentityPoolConfigurationRequest,
  ): Promise<GetIdentityPoolConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetIdentityPoolConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/configuration`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IdentityPoolId": "s",
          "PushSync": toPushSync,
          "CognitoStreams": toCognitoStreams,
        },
      }, await resp.json()),
  };
  }

  async listDatasets(
    {abortSignal, ...params}: RequestConfig & ListDatasetsRequest,
  ): Promise<ListDatasetsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDatasets",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Datasets": [toDataset],
          "Count": "n",
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listIdentityPoolUsage(
    {abortSignal, ...params}: RequestConfig & ListIdentityPoolUsageRequest = {},
  ): Promise<ListIdentityPoolUsageResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIdentityPoolUsage",
      method: "GET",
      requestUri: "/identitypools",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IdentityPoolUsages": [toIdentityPoolUsage],
          "MaxResults": "n",
          "Count": "n",
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listRecords(
    {abortSignal, ...params}: RequestConfig & ListRecordsRequest,
  ): Promise<ListRecordsResponse> {
    const query = new URLSearchParams;
    if (params["LastSyncCount"] != null) query.set("lastSyncCount", params["LastSyncCount"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["SyncSessionToken"] != null) query.set("syncSessionToken", params["SyncSessionToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRecords",
      method: "GET",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}/records`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Records": [toRecord],
          "NextToken": "s",
          "Count": "n",
          "DatasetSyncCount": "n",
          "LastModifiedBy": "s",
          "MergedDatasetNames": ["s"],
          "DatasetExists": "b",
          "DatasetDeletedAfterRequestedSyncCount": "b",
          "SyncSessionToken": "s",
        },
      }, await resp.json()),
  };
  }

  async registerDevice(
    {abortSignal, ...params}: RequestConfig & RegisterDeviceRequest,
  ): Promise<RegisterDeviceResponse> {
    const body: jsonP.JSONObject = params ? {
      Platform: params["Platform"],
      Token: params["Token"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDevice",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identity/${params["IdentityId"]}/device`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "DeviceId": "s",
        },
      }, await resp.json()),
  };
  }

  async setCognitoEvents(
    {abortSignal, ...params}: RequestConfig & SetCognitoEventsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      Events: params["Events"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetCognitoEvents",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/events`,
      responseCode: 200,
    });
  }

  async setIdentityPoolConfiguration(
    {abortSignal, ...params}: RequestConfig & SetIdentityPoolConfigurationRequest,
  ): Promise<SetIdentityPoolConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      PushSync: fromPushSync(params["PushSync"]),
      CognitoStreams: fromCognitoStreams(params["CognitoStreams"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetIdentityPoolConfiguration",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/configuration`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IdentityPoolId": "s",
          "PushSync": toPushSync,
          "CognitoStreams": toCognitoStreams,
        },
      }, await resp.json()),
  };
  }

  async subscribeToDataset(
    {abortSignal, ...params}: RequestConfig & SubscribeToDatasetRequest,
  ): Promise<SubscribeToDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "SubscribeToDataset",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}/subscriptions/${params["DeviceId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async unsubscribeFromDataset(
    {abortSignal, ...params}: RequestConfig & UnsubscribeFromDatasetRequest,
  ): Promise<UnsubscribeFromDatasetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "UnsubscribeFromDataset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}/subscriptions/${params["DeviceId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateRecords(
    {abortSignal, ...params}: RequestConfig & UpdateRecordsRequest,
  ): Promise<UpdateRecordsResponse> {
    const headers = new Headers;
    if (params["ClientContext"] != null) headers.append("x-amz-Client-Context", params["ClientContext"]);
    const body: jsonP.JSONObject = params ? {
      DeviceId: params["DeviceId"],
      RecordPatches: params["RecordPatches"]?.map(x => fromRecordPatch(x)),
      SyncSessionToken: params["SyncSessionToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateRecords",
      requestUri: cmnP.encodePath`/identitypools/${params["IdentityPoolId"]}/identities/${params["IdentityId"]}/datasets/${params["DatasetName"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Records": [toRecord],
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface BulkPublishRequest {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDatasetRequest {
  IdentityPoolId: string;
  IdentityId: string;
  DatasetName: string;
}

// refs: 1 - tags: named, input
export interface DescribeDatasetRequest {
  IdentityPoolId: string;
  IdentityId: string;
  DatasetName: string;
}

// refs: 1 - tags: named, input
export interface DescribeIdentityPoolUsageRequest {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface DescribeIdentityUsageRequest {
  IdentityPoolId: string;
  IdentityId: string;
}

// refs: 1 - tags: named, input
export interface GetBulkPublishDetailsRequest {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface GetCognitoEventsRequest {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface GetIdentityPoolConfigurationRequest {
  IdentityPoolId: string;
}

// refs: 1 - tags: named, input
export interface ListDatasetsRequest {
  IdentityPoolId: string;
  IdentityId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIdentityPoolUsageRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRecordsRequest {
  IdentityPoolId: string;
  IdentityId: string;
  DatasetName: string;
  LastSyncCount?: number | null;
  NextToken?: string | null;
  MaxResults?: number | null;
  SyncSessionToken?: string | null;
}

// refs: 1 - tags: named, input
export interface RegisterDeviceRequest {
  IdentityPoolId: string;
  IdentityId: string;
  Platform: Platform;
  Token: string;
}

// refs: 1 - tags: named, input
export interface SetCognitoEventsRequest {
  IdentityPoolId: string;
  Events: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface SetIdentityPoolConfigurationRequest {
  IdentityPoolId: string;
  PushSync?: PushSync | null;
  CognitoStreams?: CognitoStreams | null;
}

// refs: 1 - tags: named, input
export interface SubscribeToDatasetRequest {
  IdentityPoolId: string;
  IdentityId: string;
  DatasetName: string;
  DeviceId: string;
}

// refs: 1 - tags: named, input
export interface UnsubscribeFromDatasetRequest {
  IdentityPoolId: string;
  IdentityId: string;
  DatasetName: string;
  DeviceId: string;
}

// refs: 1 - tags: named, input
export interface UpdateRecordsRequest {
  IdentityPoolId: string;
  IdentityId: string;
  DatasetName: string;
  DeviceId?: string | null;
  RecordPatches?: RecordPatch[] | null;
  SyncSessionToken: string;
  ClientContext?: string | null;
}

// refs: 1 - tags: named, output
export interface BulkPublishResponse {
  IdentityPoolId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteDatasetResponse {
  Dataset?: Dataset | null;
}

// refs: 1 - tags: named, output
export interface DescribeDatasetResponse {
  Dataset?: Dataset | null;
}

// refs: 1 - tags: named, output
export interface DescribeIdentityPoolUsageResponse {
  IdentityPoolUsage?: IdentityPoolUsage | null;
}

// refs: 1 - tags: named, output
export interface DescribeIdentityUsageResponse {
  IdentityUsage?: IdentityUsage | null;
}

// refs: 1 - tags: named, output
export interface GetBulkPublishDetailsResponse {
  IdentityPoolId?: string | null;
  BulkPublishStartTime?: Date | number | null;
  BulkPublishCompleteTime?: Date | number | null;
  BulkPublishStatus?: BulkPublishStatus | null;
  FailureMessage?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCognitoEventsResponse {
  Events?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetIdentityPoolConfigurationResponse {
  IdentityPoolId?: string | null;
  PushSync?: PushSync | null;
  CognitoStreams?: CognitoStreams | null;
}

// refs: 1 - tags: named, output
export interface ListDatasetsResponse {
  Datasets?: Dataset[] | null;
  Count?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIdentityPoolUsageResponse {
  IdentityPoolUsages?: IdentityPoolUsage[] | null;
  MaxResults?: number | null;
  Count?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRecordsResponse {
  Records?: Record[] | null;
  NextToken?: string | null;
  Count?: number | null;
  DatasetSyncCount?: number | null;
  LastModifiedBy?: string | null;
  MergedDatasetNames?: string[] | null;
  DatasetExists?: boolean | null;
  DatasetDeletedAfterRequestedSyncCount?: boolean | null;
  SyncSessionToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterDeviceResponse {
  DeviceId?: string | null;
}

// refs: 1 - tags: named, output
export interface SetIdentityPoolConfigurationResponse {
  IdentityPoolId?: string | null;
  PushSync?: PushSync | null;
  CognitoStreams?: CognitoStreams | null;
}

// refs: 1 - tags: named, output
export interface SubscribeToDatasetResponse {
}

// refs: 1 - tags: named, output
export interface UnsubscribeFromDatasetResponse {
}

// refs: 1 - tags: named, output
export interface UpdateRecordsResponse {
  Records?: Record[] | null;
}

// refs: 1 - tags: input, named, enum
export type Platform =
| "APNS"
| "APNS_SANDBOX"
| "GCM"
| "ADM"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface PushSync {
  ApplicationArns?: string[] | null;
  RoleArn?: string | null;
}
function fromPushSync(input?: PushSync | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApplicationArns: input["ApplicationArns"],
    RoleArn: input["RoleArn"],
  }
}
function toPushSync(root: jsonP.JSONValue): PushSync {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationArns": ["s"],
      "RoleArn": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CognitoStreams {
  StreamName?: string | null;
  RoleArn?: string | null;
  StreamingStatus?: StreamingStatus | null;
}
function fromCognitoStreams(input?: CognitoStreams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StreamName: input["StreamName"],
    RoleArn: input["RoleArn"],
    StreamingStatus: input["StreamingStatus"],
  }
}
function toCognitoStreams(root: jsonP.JSONValue): CognitoStreams {
  return jsonP.readObj({
    required: {},
    optional: {
      "StreamName": "s",
      "RoleArn": "s",
      "StreamingStatus": (x: jsonP.JSONValue) => cmnP.readEnum<StreamingStatus>(x),
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type StreamingStatus =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface RecordPatch {
  Op: Operation;
  Key: string;
  Value?: string | null;
  SyncCount: number;
  DeviceLastModifiedDate?: Date | number | null;
}
function fromRecordPatch(input?: RecordPatch | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Op: input["Op"],
    Key: input["Key"],
    Value: input["Value"],
    SyncCount: input["SyncCount"],
    DeviceLastModifiedDate: jsonP.serializeDate_unixTimestamp(input["DeviceLastModifiedDate"]),
  }
}

// refs: 1 - tags: input, named, enum
export type Operation =
| "replace"
| "remove"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface Dataset {
  IdentityId?: string | null;
  DatasetName?: string | null;
  CreationDate?: Date | number | null;
  LastModifiedDate?: Date | number | null;
  LastModifiedBy?: string | null;
  DataStorage?: number | null;
  NumRecords?: number | null;
}
function toDataset(root: jsonP.JSONValue): Dataset {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "DatasetName": "s",
      "CreationDate": "d",
      "LastModifiedDate": "d",
      "LastModifiedBy": "s",
      "DataStorage": "n",
      "NumRecords": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface IdentityPoolUsage {
  IdentityPoolId?: string | null;
  SyncSessionsCount?: number | null;
  DataStorage?: number | null;
  LastModifiedDate?: Date | number | null;
}
function toIdentityPoolUsage(root: jsonP.JSONValue): IdentityPoolUsage {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityPoolId": "s",
      "SyncSessionsCount": "n",
      "DataStorage": "n",
      "LastModifiedDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IdentityUsage {
  IdentityId?: string | null;
  IdentityPoolId?: string | null;
  LastModifiedDate?: Date | number | null;
  DatasetCount?: number | null;
  DataStorage?: number | null;
}
function toIdentityUsage(root: jsonP.JSONValue): IdentityUsage {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "IdentityPoolId": "s",
      "LastModifiedDate": "d",
      "DatasetCount": "n",
      "DataStorage": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type BulkPublishStatus =
| "NOT_STARTED"
| "IN_PROGRESS"
| "FAILED"
| "SUCCEEDED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Record {
  Key?: string | null;
  Value?: string | null;
  SyncCount?: number | null;
  LastModifiedDate?: Date | number | null;
  LastModifiedBy?: string | null;
  DeviceLastModifiedDate?: Date | number | null;
}
function toRecord(root: jsonP.JSONValue): Record {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
      "SyncCount": "n",
      "LastModifiedDate": "d",
      "LastModifiedBy": "s",
      "DeviceLastModifiedDate": "d",
    },
  }, root);
}
