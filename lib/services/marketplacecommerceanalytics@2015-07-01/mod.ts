// Autogenerated API client for: AWS Marketplace Commerce Analytics

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MarketplaceCommerceAnalytics {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MarketplaceCommerceAnalytics.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-07-01",
    "endpointPrefix": "marketplacecommerceanalytics",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Marketplace Commerce Analytics",
    "serviceId": "Marketplace Commerce Analytics",
    "signatureVersion": "v4",
    "signingName": "marketplacecommerceanalytics",
    "targetPrefix": "MarketplaceCommerceAnalytics20150701",
    "uid": "marketplacecommerceanalytics-2015-07-01"
  };

  async generateDataSet(
    {abortSignal, ...params}: RequestConfig & GenerateDataSetRequest,
  ): Promise<GenerateDataSetResult> {
    const body: jsonP.JSONObject = {
      dataSetType: params["dataSetType"],
      dataSetPublicationDate: jsonP.serializeDate_unixTimestamp(params["dataSetPublicationDate"]),
      roleNameArn: params["roleNameArn"],
      destinationS3BucketName: params["destinationS3BucketName"],
      destinationS3Prefix: params["destinationS3Prefix"],
      snsTopicArn: params["snsTopicArn"],
      customerDefinedValues: params["customerDefinedValues"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateDataSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "dataSetRequestId": "s",
      },
    }, await resp.json());
  }

  async startSupportDataExport(
    {abortSignal, ...params}: RequestConfig & StartSupportDataExportRequest,
  ): Promise<StartSupportDataExportResult> {
    const body: jsonP.JSONObject = {
      dataSetType: params["dataSetType"],
      fromDate: jsonP.serializeDate_unixTimestamp(params["fromDate"]),
      roleNameArn: params["roleNameArn"],
      destinationS3BucketName: params["destinationS3BucketName"],
      destinationS3Prefix: params["destinationS3Prefix"],
      snsTopicArn: params["snsTopicArn"],
      customerDefinedValues: params["customerDefinedValues"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSupportDataExport",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "dataSetRequestId": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface GenerateDataSetRequest {
  dataSetType: DataSetType;
  dataSetPublicationDate: Date | number;
  roleNameArn: string;
  destinationS3BucketName: string;
  destinationS3Prefix?: string | null;
  snsTopicArn: string;
  customerDefinedValues?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface StartSupportDataExportRequest {
  dataSetType: SupportDataSetType;
  fromDate: Date | number;
  roleNameArn: string;
  destinationS3BucketName: string;
  destinationS3Prefix?: string | null;
  snsTopicArn: string;
  customerDefinedValues?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GenerateDataSetResult {
  dataSetRequestId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartSupportDataExportResult {
  dataSetRequestId?: string | null;
}

// refs: 1 - tags: input, named, enum
export type DataSetType =
| "customer_subscriber_hourly_monthly_subscriptions"
| "customer_subscriber_annual_subscriptions"
| "daily_business_usage_by_instance_type"
| "daily_business_fees"
| "daily_business_free_trial_conversions"
| "daily_business_new_instances"
| "daily_business_new_product_subscribers"
| "daily_business_canceled_product_subscribers"
| "monthly_revenue_billing_and_revenue_data"
| "monthly_revenue_annual_subscriptions"
| "monthly_revenue_field_demonstration_usage"
| "monthly_revenue_flexible_payment_schedule"
| "disbursed_amount_by_product"
| "disbursed_amount_by_product_with_uncollected_funds"
| "disbursed_amount_by_instance_hours"
| "disbursed_amount_by_customer_geo"
| "disbursed_amount_by_age_of_uncollected_funds"
| "disbursed_amount_by_age_of_disbursed_funds"
| "disbursed_amount_by_age_of_past_due_funds"
| "disbursed_amount_by_uncollected_funds_breakdown"
| "customer_profile_by_industry"
| "customer_profile_by_revenue"
| "customer_profile_by_geography"
| "sales_compensation_billed_revenue"
| "us_sales_and_use_tax_records"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type SupportDataSetType =
| "customer_support_contacts_data"
| "test_customer_support_contacts_data"
| cmnP.UnexpectedEnumValue;
