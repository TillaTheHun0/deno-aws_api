// Autogenerated API client for: Amazon WorkDocs

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class WorkDocs {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(WorkDocs.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-05-01",
    "endpointPrefix": "workdocs",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon WorkDocs",
    "serviceId": "WorkDocs",
    "signatureVersion": "v4",
    "uid": "workdocs-2016-05-01"
  };

  async abortDocumentVersionUpload(
    {abortSignal, ...params}: RequestConfig & AbortDocumentVersionUploadRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "AbortDocumentVersionUpload",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/versions/${params["VersionId"]}`,
      responseCode: 204,
    });
  }

  async activateUser(
    {abortSignal, ...params}: RequestConfig & ActivateUserRequest,
  ): Promise<ActivateUserResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "ActivateUser",
      requestUri: cmnP.encodePath`/api/v1/users/${params["UserId"]}/activation`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "User": toUser,
        },
      }, await resp.json()),
  };
  }

  async addResourcePermissions(
    {abortSignal, ...params}: RequestConfig & AddResourcePermissionsRequest,
  ): Promise<AddResourcePermissionsResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      Principals: params["Principals"]?.map(x => fromSharePrincipal(x)),
      NotificationOptions: fromNotificationOptions(params["NotificationOptions"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "AddResourcePermissions",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/permissions`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ShareResults": [toShareResult],
        },
      }, await resp.json()),
  };
  }

  async createComment(
    {abortSignal, ...params}: RequestConfig & CreateCommentRequest,
  ): Promise<CreateCommentResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      ParentId: params["ParentId"],
      ThreadId: params["ThreadId"],
      Text: params["Text"],
      Visibility: params["Visibility"],
      NotifyCollaborators: params["NotifyCollaborators"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateComment",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/versions/${params["VersionId"]}/comment`,
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Comment": toComment,
        },
      }, await resp.json()),
  };
  }

  async createCustomMetadata(
    {abortSignal, ...params}: RequestConfig & CreateCustomMetadataRequest,
  ): Promise<CreateCustomMetadataResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["VersionId"] != null) query.set("versionid", params["VersionId"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      CustomMetadata: params["CustomMetadata"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, query, body,
      action: "CreateCustomMetadata",
      method: "PUT",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/customMetadata`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async createFolder(
    {abortSignal, ...params}: RequestConfig & CreateFolderRequest,
  ): Promise<CreateFolderResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      ParentFolderId: params["ParentFolderId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateFolder",
      requestUri: "/api/v1/folders",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Metadata": toFolderMetadata,
        },
      }, await resp.json()),
  };
  }

  async createLabels(
    {abortSignal, ...params}: RequestConfig & CreateLabelsRequest,
  ): Promise<CreateLabelsResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      Labels: params["Labels"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateLabels",
      method: "PUT",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/labels`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async createNotificationSubscription(
    {abortSignal, ...params}: RequestConfig & CreateNotificationSubscriptionRequest,
  ): Promise<CreateNotificationSubscriptionResponse> {
    const body: jsonP.JSONObject = params ? {
      Endpoint: params["Endpoint"],
      Protocol: params["Protocol"],
      SubscriptionType: params["SubscriptionType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateNotificationSubscription",
      requestUri: cmnP.encodePath`/api/v1/organizations/${params["OrganizationId"]}/subscriptions`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Subscription": toSubscription,
        },
      }, await resp.json()),
  };
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & CreateUserRequest,
  ): Promise<CreateUserResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      OrganizationId: params["OrganizationId"],
      Username: params["Username"],
      EmailAddress: params["EmailAddress"],
      GivenName: params["GivenName"],
      Surname: params["Surname"],
      Password: params["Password"],
      TimeZoneId: params["TimeZoneId"],
      StorageRule: fromStorageRuleType(params["StorageRule"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateUser",
      requestUri: "/api/v1/users",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "User": toUser,
        },
      }, await resp.json()),
  };
  }

  async deactivateUser(
    {abortSignal, ...params}: RequestConfig & DeactivateUserRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeactivateUser",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/users/${params["UserId"]}/activation`,
      responseCode: 204,
    });
  }

  async deleteComment(
    {abortSignal, ...params}: RequestConfig & DeleteCommentRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteComment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/versions/${params["VersionId"]}/comment/${params["CommentId"]}`,
      responseCode: 204,
    });
  }

  async deleteCustomMetadata(
    {abortSignal, ...params}: RequestConfig & DeleteCustomMetadataRequest,
  ): Promise<DeleteCustomMetadataResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["VersionId"] != null) query.set("versionId", params["VersionId"]?.toString() ?? "");
    for (const item of params["Keys"] ?? []) {
      query.append("keys", item?.toString() ?? "");
    }
    if (params["DeleteAll"] != null) query.set("deleteAll", params["DeleteAll"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DeleteCustomMetadata",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/customMetadata`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteDocument(
    {abortSignal, ...params}: RequestConfig & DeleteDocumentRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteDocument",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}`,
      responseCode: 204,
    });
  }

  async deleteFolder(
    {abortSignal, ...params}: RequestConfig & DeleteFolderRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteFolder",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/folders/${params["FolderId"]}`,
      responseCode: 204,
    });
  }

  async deleteFolderContents(
    {abortSignal, ...params}: RequestConfig & DeleteFolderContentsRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteFolderContents",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/folders/${params["FolderId"]}/contents`,
      responseCode: 204,
    });
  }

  async deleteLabels(
    {abortSignal, ...params}: RequestConfig & DeleteLabelsRequest,
  ): Promise<DeleteLabelsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    for (const item of params["Labels"] ?? []) {
      query.append("labels", item?.toString() ?? "");
    }
    if (params["DeleteAll"] != null) query.set("deleteAll", params["DeleteAll"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DeleteLabels",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/labels`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteNotificationSubscription(
    {abortSignal, ...params}: RequestConfig & DeleteNotificationSubscriptionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteNotificationSubscription",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/organizations/${params["OrganizationId"]}/subscriptions/${params["SubscriptionId"]}`,
      responseCode: 200,
    });
  }

  async deleteUser(
    {abortSignal, ...params}: RequestConfig & DeleteUserRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteUser",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/users/${params["UserId"]}`,
      responseCode: 204,
    });
  }

  async describeActivities(
    {abortSignal, ...params}: RequestConfig & DescribeActivitiesRequest = {},
  ): Promise<DescribeActivitiesResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["StartTime"] != null) query.set("startTime", cmnP.serializeDate_iso8601(params["StartTime"]) ?? "");
    if (params["EndTime"] != null) query.set("endTime", cmnP.serializeDate_iso8601(params["EndTime"]) ?? "");
    if (params["OrganizationId"] != null) query.set("organizationId", params["OrganizationId"]?.toString() ?? "");
    if (params["ActivityTypes"] != null) query.set("activityTypes", params["ActivityTypes"]?.toString() ?? "");
    if (params["ResourceId"] != null) query.set("resourceId", params["ResourceId"]?.toString() ?? "");
    if (params["UserId"] != null) query.set("userId", params["UserId"]?.toString() ?? "");
    if (params["IncludeIndirectActivities"] != null) query.set("includeIndirectActivities", params["IncludeIndirectActivities"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeActivities",
      method: "GET",
      requestUri: "/api/v1/activities",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "UserActivities": [toActivity],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeComments(
    {abortSignal, ...params}: RequestConfig & DescribeCommentsRequest,
  ): Promise<DescribeCommentsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeComments",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/versions/${params["VersionId"]}/comments`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Comments": [toComment],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeDocumentVersions(
    {abortSignal, ...params}: RequestConfig & DescribeDocumentVersionsRequest,
  ): Promise<DescribeDocumentVersionsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Include"] != null) query.set("include", params["Include"]?.toString() ?? "");
    if (params["Fields"] != null) query.set("fields", params["Fields"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeDocumentVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/versions`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "DocumentVersions": [toDocumentVersionMetadata],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeFolderContents(
    {abortSignal, ...params}: RequestConfig & DescribeFolderContentsRequest,
  ): Promise<DescribeFolderContentsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["Sort"] != null) query.set("sort", params["Sort"]?.toString() ?? "");
    if (params["Order"] != null) query.set("order", params["Order"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    if (params["Type"] != null) query.set("type", params["Type"]?.toString() ?? "");
    if (params["Include"] != null) query.set("include", params["Include"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeFolderContents",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/folders/${params["FolderId"]}/contents`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Folders": [toFolderMetadata],
          "Documents": [toDocumentMetadata],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeGroups(
    {abortSignal, ...params}: RequestConfig & DescribeGroupsRequest,
  ): Promise<DescribeGroupsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    query.set("searchQuery", params["SearchQuery"]?.toString() ?? "");
    if (params["OrganizationId"] != null) query.set("organizationId", params["OrganizationId"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeGroups",
      method: "GET",
      requestUri: "/api/v1/groups",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Groups": [toGroupMetadata],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeNotificationSubscriptions(
    {abortSignal, ...params}: RequestConfig & DescribeNotificationSubscriptionsRequest,
  ): Promise<DescribeNotificationSubscriptionsResponse> {
    const query = new URLSearchParams;
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeNotificationSubscriptions",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/organizations/${params["OrganizationId"]}/subscriptions`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Subscriptions": [toSubscription],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeResourcePermissions(
    {abortSignal, ...params}: RequestConfig & DescribeResourcePermissionsRequest,
  ): Promise<DescribeResourcePermissionsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["PrincipalId"] != null) query.set("principalId", params["PrincipalId"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeResourcePermissions",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/permissions`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Principals": [toPrincipal],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeRootFolders(
    {abortSignal, ...params}: RequestConfig & DescribeRootFoldersRequest,
  ): Promise<DescribeRootFoldersResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    headers.append("Authentication", params["AuthenticationToken"]);
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeRootFolders",
      method: "GET",
      requestUri: "/api/v1/me/root",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Folders": [toFolderMetadata],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async describeUsers(
    {abortSignal, ...params}: RequestConfig & DescribeUsersRequest = {},
  ): Promise<DescribeUsersResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["OrganizationId"] != null) query.set("organizationId", params["OrganizationId"]?.toString() ?? "");
    if (params["UserIds"] != null) query.set("userIds", params["UserIds"]?.toString() ?? "");
    if (params["Query"] != null) query.set("query", params["Query"]?.toString() ?? "");
    if (params["Include"] != null) query.set("include", params["Include"]?.toString() ?? "");
    if (params["Order"] != null) query.set("order", params["Order"]?.toString() ?? "");
    if (params["Sort"] != null) query.set("sort", params["Sort"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Fields"] != null) query.set("fields", params["Fields"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeUsers",
      method: "GET",
      requestUri: "/api/v1/users",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Users": [toUser],
          "TotalNumberOfUsers": "n",
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async getCurrentUser(
    {abortSignal, ...params}: RequestConfig & GetCurrentUserRequest,
  ): Promise<GetCurrentUserResponse> {
    const headers = new Headers;
    headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "GetCurrentUser",
      method: "GET",
      requestUri: "/api/v1/me",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "User": toUser,
        },
      }, await resp.json()),
  };
  }

  async getDocument(
    {abortSignal, ...params}: RequestConfig & GetDocumentRequest,
  ): Promise<GetDocumentResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["IncludeCustomMetadata"] != null) query.set("includeCustomMetadata", params["IncludeCustomMetadata"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetDocument",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Metadata": toDocumentMetadata,
          "CustomMetadata": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async getDocumentPath(
    {abortSignal, ...params}: RequestConfig & GetDocumentPathRequest,
  ): Promise<GetDocumentPathResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Fields"] != null) query.set("fields", params["Fields"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetDocumentPath",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/path`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Path": toResourcePath,
        },
      }, await resp.json()),
  };
  }

  async getDocumentVersion(
    {abortSignal, ...params}: RequestConfig & GetDocumentVersionRequest,
  ): Promise<GetDocumentVersionResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["Fields"] != null) query.set("fields", params["Fields"]?.toString() ?? "");
    if (params["IncludeCustomMetadata"] != null) query.set("includeCustomMetadata", params["IncludeCustomMetadata"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetDocumentVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/versions/${params["VersionId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Metadata": toDocumentVersionMetadata,
          "CustomMetadata": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async getFolder(
    {abortSignal, ...params}: RequestConfig & GetFolderRequest,
  ): Promise<GetFolderResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["IncludeCustomMetadata"] != null) query.set("includeCustomMetadata", params["IncludeCustomMetadata"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetFolder",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/folders/${params["FolderId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Metadata": toFolderMetadata,
          "CustomMetadata": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async getFolderPath(
    {abortSignal, ...params}: RequestConfig & GetFolderPathRequest,
  ): Promise<GetFolderPathResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Fields"] != null) query.set("fields", params["Fields"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetFolderPath",
      method: "GET",
      requestUri: cmnP.encodePath`/api/v1/folders/${params["FolderId"]}/path`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Path": toResourcePath,
        },
      }, await resp.json()),
  };
  }

  async getResources(
    {abortSignal, ...params}: RequestConfig & GetResourcesRequest = {},
  ): Promise<GetResourcesResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["UserId"] != null) query.set("userId", params["UserId"]?.toString() ?? "");
    if (params["CollectionType"] != null) query.set("collectionType", params["CollectionType"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetResources",
      method: "GET",
      requestUri: "/api/v1/resources",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Folders": [toFolderMetadata],
          "Documents": [toDocumentMetadata],
          "Marker": "s",
        },
      }, await resp.json()),
  };
  }

  async initiateDocumentVersionUpload(
    {abortSignal, ...params}: RequestConfig & InitiateDocumentVersionUploadRequest,
  ): Promise<InitiateDocumentVersionUploadResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      Id: params["Id"],
      Name: params["Name"],
      ContentCreatedTimestamp: jsonP.serializeDate_unixTimestamp(params["ContentCreatedTimestamp"]),
      ContentModifiedTimestamp: jsonP.serializeDate_unixTimestamp(params["ContentModifiedTimestamp"]),
      ContentType: params["ContentType"],
      DocumentSizeInBytes: params["DocumentSizeInBytes"],
      ParentFolderId: params["ParentFolderId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "InitiateDocumentVersionUpload",
      requestUri: "/api/v1/documents",
      responseCode: 201,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Metadata": toDocumentMetadata,
          "UploadMetadata": toUploadMetadata,
        },
      }, await resp.json()),
  };
  }

  async removeAllResourcePermissions(
    {abortSignal, ...params}: RequestConfig & RemoveAllResourcePermissionsRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "RemoveAllResourcePermissions",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/permissions`,
      responseCode: 204,
    });
  }

  async removeResourcePermission(
    {abortSignal, ...params}: RequestConfig & RemoveResourcePermissionRequest,
  ): Promise<void> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    if (params["PrincipalType"] != null) query.set("type", params["PrincipalType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "RemoveResourcePermission",
      method: "DELETE",
      requestUri: cmnP.encodePath`/api/v1/resources/${params["ResourceId"]}/permissions/${params["PrincipalId"]}`,
      responseCode: 204,
    });
  }

  async updateDocument(
    {abortSignal, ...params}: RequestConfig & UpdateDocumentRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      ParentFolderId: params["ParentFolderId"],
      ResourceState: params["ResourceState"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateDocument",
      method: "PATCH",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}`,
      responseCode: 200,
    });
  }

  async updateDocumentVersion(
    {abortSignal, ...params}: RequestConfig & UpdateDocumentVersionRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      VersionStatus: params["VersionStatus"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateDocumentVersion",
      method: "PATCH",
      requestUri: cmnP.encodePath`/api/v1/documents/${params["DocumentId"]}/versions/${params["VersionId"]}`,
      responseCode: 200,
    });
  }

  async updateFolder(
    {abortSignal, ...params}: RequestConfig & UpdateFolderRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      ParentFolderId: params["ParentFolderId"],
      ResourceState: params["ResourceState"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateFolder",
      method: "PATCH",
      requestUri: cmnP.encodePath`/api/v1/folders/${params["FolderId"]}`,
      responseCode: 200,
    });
  }

  async updateUser(
    {abortSignal, ...params}: RequestConfig & UpdateUserRequest,
  ): Promise<UpdateUserResponse> {
    const headers = new Headers;
    if (params["AuthenticationToken"] != null) headers.append("Authentication", params["AuthenticationToken"]);
    const body: jsonP.JSONObject = params ? {
      GivenName: params["GivenName"],
      Surname: params["Surname"],
      Type: params["Type"],
      StorageRule: fromStorageRuleType(params["StorageRule"]),
      TimeZoneId: params["TimeZoneId"],
      Locale: params["Locale"],
      GrantPoweruserPrivileges: params["GrantPoweruserPrivileges"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateUser",
      method: "PATCH",
      requestUri: cmnP.encodePath`/api/v1/users/${params["UserId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "User": toUser,
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface AbortDocumentVersionUploadRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  VersionId: string;
}

// refs: 1 - tags: named, input
export interface ActivateUserRequest {
  UserId: string;
  AuthenticationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface AddResourcePermissionsRequest {
  AuthenticationToken?: string | null;
  ResourceId: string;
  Principals: SharePrincipal[];
  NotificationOptions?: NotificationOptions | null;
}

// refs: 1 - tags: named, input
export interface CreateCommentRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  VersionId: string;
  ParentId?: string | null;
  ThreadId?: string | null;
  Text: string;
  Visibility?: CommentVisibilityType | null;
  NotifyCollaborators?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateCustomMetadataRequest {
  AuthenticationToken?: string | null;
  ResourceId: string;
  VersionId?: string | null;
  CustomMetadata: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface CreateFolderRequest {
  AuthenticationToken?: string | null;
  Name?: string | null;
  ParentFolderId: string;
}

// refs: 1 - tags: named, input
export interface CreateLabelsRequest {
  ResourceId: string;
  Labels: string[];
  AuthenticationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateNotificationSubscriptionRequest {
  OrganizationId: string;
  Endpoint: string;
  Protocol: SubscriptionProtocolType;
  SubscriptionType: SubscriptionType;
}

// refs: 1 - tags: named, input
export interface CreateUserRequest {
  OrganizationId?: string | null;
  Username: string;
  EmailAddress?: string | null;
  GivenName: string;
  Surname: string;
  Password: string;
  TimeZoneId?: string | null;
  StorageRule?: StorageRuleType | null;
  AuthenticationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeactivateUserRequest {
  UserId: string;
  AuthenticationToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteCommentRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  VersionId: string;
  CommentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteCustomMetadataRequest {
  AuthenticationToken?: string | null;
  ResourceId: string;
  VersionId?: string | null;
  Keys?: string[] | null;
  DeleteAll?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteDocumentRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFolderRequest {
  AuthenticationToken?: string | null;
  FolderId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFolderContentsRequest {
  AuthenticationToken?: string | null;
  FolderId: string;
}

// refs: 1 - tags: named, input
export interface DeleteLabelsRequest {
  ResourceId: string;
  AuthenticationToken?: string | null;
  Labels?: string[] | null;
  DeleteAll?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteNotificationSubscriptionRequest {
  SubscriptionId: string;
  OrganizationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteUserRequest {
  AuthenticationToken?: string | null;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface DescribeActivitiesRequest {
  AuthenticationToken?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  OrganizationId?: string | null;
  ActivityTypes?: string | null;
  ResourceId?: string | null;
  UserId?: string | null;
  IncludeIndirectActivities?: boolean | null;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeCommentsRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  VersionId: string;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDocumentVersionsRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  Marker?: string | null;
  Limit?: number | null;
  Include?: string | null;
  Fields?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFolderContentsRequest {
  AuthenticationToken?: string | null;
  FolderId: string;
  Sort?: ResourceSortType | null;
  Order?: OrderType | null;
  Limit?: number | null;
  Marker?: string | null;
  Type?: FolderContentType | null;
  Include?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeGroupsRequest {
  AuthenticationToken?: string | null;
  SearchQuery: string;
  OrganizationId?: string | null;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeNotificationSubscriptionsRequest {
  OrganizationId: string;
  Marker?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeResourcePermissionsRequest {
  AuthenticationToken?: string | null;
  ResourceId: string;
  PrincipalId?: string | null;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeRootFoldersRequest {
  AuthenticationToken: string;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeUsersRequest {
  AuthenticationToken?: string | null;
  OrganizationId?: string | null;
  UserIds?: string | null;
  Query?: string | null;
  Include?: UserFilterType | null;
  Order?: OrderType | null;
  Sort?: UserSortType | null;
  Marker?: string | null;
  Limit?: number | null;
  Fields?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCurrentUserRequest {
  AuthenticationToken: string;
}

// refs: 1 - tags: named, input
export interface GetDocumentRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  IncludeCustomMetadata?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetDocumentPathRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  Limit?: number | null;
  Fields?: string | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDocumentVersionRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  VersionId: string;
  Fields?: string | null;
  IncludeCustomMetadata?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetFolderRequest {
  AuthenticationToken?: string | null;
  FolderId: string;
  IncludeCustomMetadata?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetFolderPathRequest {
  AuthenticationToken?: string | null;
  FolderId: string;
  Limit?: number | null;
  Fields?: string | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface GetResourcesRequest {
  AuthenticationToken?: string | null;
  UserId?: string | null;
  CollectionType?: ResourceCollectionType | null;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface InitiateDocumentVersionUploadRequest {
  AuthenticationToken?: string | null;
  Id?: string | null;
  Name?: string | null;
  ContentCreatedTimestamp?: Date | number | null;
  ContentModifiedTimestamp?: Date | number | null;
  ContentType?: string | null;
  DocumentSizeInBytes?: number | null;
  ParentFolderId: string;
}

// refs: 1 - tags: named, input
export interface RemoveAllResourcePermissionsRequest {
  AuthenticationToken?: string | null;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface RemoveResourcePermissionRequest {
  AuthenticationToken?: string | null;
  ResourceId: string;
  PrincipalId: string;
  PrincipalType?: PrincipalType | null;
}

// refs: 1 - tags: named, input
export interface UpdateDocumentRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  Name?: string | null;
  ParentFolderId?: string | null;
  ResourceState?: ResourceStateType | null;
}

// refs: 1 - tags: named, input
export interface UpdateDocumentVersionRequest {
  AuthenticationToken?: string | null;
  DocumentId: string;
  VersionId: string;
  VersionStatus?: DocumentVersionStatus | null;
}

// refs: 1 - tags: named, input
export interface UpdateFolderRequest {
  AuthenticationToken?: string | null;
  FolderId: string;
  Name?: string | null;
  ParentFolderId?: string | null;
  ResourceState?: ResourceStateType | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserRequest {
  AuthenticationToken?: string | null;
  UserId: string;
  GivenName?: string | null;
  Surname?: string | null;
  Type?: UserType | null;
  StorageRule?: StorageRuleType | null;
  TimeZoneId?: string | null;
  Locale?: LocaleType | null;
  GrantPoweruserPrivileges?: BooleanEnumType | null;
}

// refs: 1 - tags: named, output
export interface ActivateUserResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface AddResourcePermissionsResponse {
  ShareResults?: ShareResult[] | null;
}

// refs: 1 - tags: named, output
export interface CreateCommentResponse {
  Comment?: Comment | null;
}

// refs: 1 - tags: named, output
export interface CreateCustomMetadataResponse {
}

// refs: 1 - tags: named, output
export interface CreateFolderResponse {
  Metadata?: FolderMetadata | null;
}

// refs: 1 - tags: named, output
export interface CreateLabelsResponse {
}

// refs: 1 - tags: named, output
export interface CreateNotificationSubscriptionResponse {
  Subscription?: Subscription | null;
}

// refs: 1 - tags: named, output
export interface CreateUserResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface DeleteCustomMetadataResponse {
}

// refs: 1 - tags: named, output
export interface DeleteLabelsResponse {
}

// refs: 1 - tags: named, output
export interface DescribeActivitiesResponse {
  UserActivities?: Activity[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeCommentsResponse {
  Comments?: Comment[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDocumentVersionsResponse {
  DocumentVersions?: DocumentVersionMetadata[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeFolderContentsResponse {
  Folders?: FolderMetadata[] | null;
  Documents?: DocumentMetadata[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeGroupsResponse {
  Groups?: GroupMetadata[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeNotificationSubscriptionsResponse {
  Subscriptions?: Subscription[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeResourcePermissionsResponse {
  Principals?: Principal[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRootFoldersResponse {
  Folders?: FolderMetadata[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeUsersResponse {
  Users?: User[] | null;
  TotalNumberOfUsers?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCurrentUserResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface GetDocumentResponse {
  Metadata?: DocumentMetadata | null;
  CustomMetadata?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetDocumentPathResponse {
  Path?: ResourcePath | null;
}

// refs: 1 - tags: named, output
export interface GetDocumentVersionResponse {
  Metadata?: DocumentVersionMetadata | null;
  CustomMetadata?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetFolderResponse {
  Metadata?: FolderMetadata | null;
  CustomMetadata?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetFolderPathResponse {
  Path?: ResourcePath | null;
}

// refs: 1 - tags: named, output
export interface GetResourcesResponse {
  Folders?: FolderMetadata[] | null;
  Documents?: DocumentMetadata[] | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, output
export interface InitiateDocumentVersionUploadResponse {
  Metadata?: DocumentMetadata | null;
  UploadMetadata?: UploadMetadata | null;
}

// refs: 1 - tags: named, output
export interface UpdateUserResponse {
  User?: User | null;
}

// refs: 1 - tags: input, named, interface
export interface SharePrincipal {
  Id: string;
  Type: PrincipalType;
  Role: RoleType;
}
function fromSharePrincipal(input?: SharePrincipal | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Type: input["Type"],
    Role: input["Role"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type PrincipalType =
| "USER"
| "GROUP"
| "INVITE"
| "ANONYMOUS"
| "ORGANIZATION"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type RoleType =
| "VIEWER"
| "CONTRIBUTOR"
| "OWNER"
| "COOWNER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface NotificationOptions {
  SendEmail?: boolean | null;
  EmailMessage?: string | null;
}
function fromNotificationOptions(input?: NotificationOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SendEmail: input["SendEmail"],
    EmailMessage: input["EmailMessage"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type CommentVisibilityType =
| "PUBLIC"
| "PRIVATE"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type SubscriptionProtocolType =
| "HTTPS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type SubscriptionType =
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: input, named, interface, output
export interface StorageRuleType {
  StorageAllocatedInBytes?: number | null;
  StorageType?: StorageType | null;
}
function fromStorageRuleType(input?: StorageRuleType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StorageAllocatedInBytes: input["StorageAllocatedInBytes"],
    StorageType: input["StorageType"],
  }
}
function toStorageRuleType(root: jsonP.JSONValue): StorageRuleType {
  return jsonP.readObj({
    required: {},
    optional: {
      "StorageAllocatedInBytes": "n",
      "StorageType": (x: jsonP.JSONValue) => cmnP.readEnum<StorageType>(x),
    },
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type StorageType =
| "UNLIMITED"
| "QUOTA"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ResourceSortType =
| "DATE"
| "NAME"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum
export type OrderType =
| "ASCENDING"
| "DESCENDING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type FolderContentType =
| "ALL"
| "DOCUMENT"
| "FOLDER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UserFilterType =
| "ALL"
| "ACTIVE_PENDING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type UserSortType =
| "USER_NAME"
| "FULL_NAME"
| "STORAGE_LIMIT"
| "USER_STATUS"
| "STORAGE_USED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ResourceCollectionType =
| "SHARED_WITH_ME"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, enum, output
export type ResourceStateType =
| "ACTIVE"
| "RESTORING"
| "RECYCLING"
| "RECYCLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type DocumentVersionStatus =
| "ACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type UserType =
| "USER"
| "ADMIN"
| "POWERUSER"
| "MINIMALUSER"
| "WORKSPACESUSER"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type LocaleType =
| "en"
| "fr"
| "ko"
| "de"
| "es"
| "ja"
| "ru"
| "zh_CN"
| "zh_TW"
| "pt_BR"
| "default"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type BooleanEnumType =
| "TRUE"
| "FALSE"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: output, named, interface
export interface User {
  Id?: string | null;
  Username?: string | null;
  EmailAddress?: string | null;
  GivenName?: string | null;
  Surname?: string | null;
  OrganizationId?: string | null;
  RootFolderId?: string | null;
  RecycleBinFolderId?: string | null;
  Status?: UserStatusType | null;
  Type?: UserType | null;
  CreatedTimestamp?: Date | number | null;
  ModifiedTimestamp?: Date | number | null;
  TimeZoneId?: string | null;
  Locale?: LocaleType | null;
  Storage?: UserStorageMetadata | null;
}
function toUser(root: jsonP.JSONValue): User {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Username": "s",
      "EmailAddress": "s",
      "GivenName": "s",
      "Surname": "s",
      "OrganizationId": "s",
      "RootFolderId": "s",
      "RecycleBinFolderId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<UserStatusType>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<UserType>(x),
      "CreatedTimestamp": "d",
      "ModifiedTimestamp": "d",
      "TimeZoneId": "s",
      "Locale": (x: jsonP.JSONValue) => cmnP.readEnum<LocaleType>(x),
      "Storage": toUserStorageMetadata,
    },
  }, root);
}

// refs: 8 - tags: output, named, enum
export type UserStatusType =
| "ACTIVE"
| "INACTIVE"
| "PENDING"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: output, named, interface
export interface UserStorageMetadata {
  StorageUtilizedInBytes?: number | null;
  StorageRule?: StorageRuleType | null;
}
function toUserStorageMetadata(root: jsonP.JSONValue): UserStorageMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "StorageUtilizedInBytes": "n",
      "StorageRule": toStorageRuleType,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ShareResult {
  PrincipalId?: string | null;
  InviteePrincipalId?: string | null;
  Role?: RoleType | null;
  Status?: ShareStatusType | null;
  ShareId?: string | null;
  StatusMessage?: string | null;
}
function toShareResult(root: jsonP.JSONValue): ShareResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrincipalId": "s",
      "InviteePrincipalId": "s",
      "Role": (x: jsonP.JSONValue) => cmnP.readEnum<RoleType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ShareStatusType>(x),
      "ShareId": "s",
      "StatusMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ShareStatusType =
| "SUCCESS"
| "FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Comment {
  CommentId: string;
  ParentId?: string | null;
  ThreadId?: string | null;
  Text?: string | null;
  Contributor?: User | null;
  CreatedTimestamp?: Date | number | null;
  Status?: CommentStatusType | null;
  Visibility?: CommentVisibilityType | null;
  RecipientId?: string | null;
}
function toComment(root: jsonP.JSONValue): Comment {
  return jsonP.readObj({
    required: {
      "CommentId": "s",
    },
    optional: {
      "ParentId": "s",
      "ThreadId": "s",
      "Text": "s",
      "Contributor": toUser,
      "CreatedTimestamp": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<CommentStatusType>(x),
      "Visibility": (x: jsonP.JSONValue) => cmnP.readEnum<CommentVisibilityType>(x),
      "RecipientId": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type CommentStatusType =
| "DRAFT"
| "PUBLISHED"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface FolderMetadata {
  Id?: string | null;
  Name?: string | null;
  CreatorId?: string | null;
  ParentFolderId?: string | null;
  CreatedTimestamp?: Date | number | null;
  ModifiedTimestamp?: Date | number | null;
  ResourceState?: ResourceStateType | null;
  Signature?: string | null;
  Labels?: string[] | null;
  Size?: number | null;
  LatestVersionSize?: number | null;
}
function toFolderMetadata(root: jsonP.JSONValue): FolderMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "CreatorId": "s",
      "ParentFolderId": "s",
      "CreatedTimestamp": "d",
      "ModifiedTimestamp": "d",
      "ResourceState": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStateType>(x),
      "Signature": "s",
      "Labels": ["s"],
      "Size": "n",
      "LatestVersionSize": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Subscription {
  SubscriptionId?: string | null;
  EndPoint?: string | null;
  Protocol?: SubscriptionProtocolType | null;
}
function toSubscription(root: jsonP.JSONValue): Subscription {
  return jsonP.readObj({
    required: {},
    optional: {
      "SubscriptionId": "s",
      "EndPoint": "s",
      "Protocol": (x: jsonP.JSONValue) => cmnP.readEnum<SubscriptionProtocolType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Activity {
  Type?: ActivityType | null;
  TimeStamp?: Date | number | null;
  IsIndirectActivity?: boolean | null;
  OrganizationId?: string | null;
  Initiator?: UserMetadata | null;
  Participants?: Participants | null;
  ResourceMetadata?: ResourceMetadata | null;
  OriginalParent?: ResourceMetadata | null;
  CommentMetadata?: CommentMetadata | null;
}
function toActivity(root: jsonP.JSONValue): Activity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ActivityType>(x),
      "TimeStamp": "d",
      "IsIndirectActivity": "b",
      "OrganizationId": "s",
      "Initiator": toUserMetadata,
      "Participants": toParticipants,
      "ResourceMetadata": toResourceMetadata,
      "OriginalParent": toResourceMetadata,
      "CommentMetadata": toCommentMetadata,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ActivityType =
| "DOCUMENT_CHECKED_IN"
| "DOCUMENT_CHECKED_OUT"
| "DOCUMENT_RENAMED"
| "DOCUMENT_VERSION_UPLOADED"
| "DOCUMENT_VERSION_DELETED"
| "DOCUMENT_VERSION_VIEWED"
| "DOCUMENT_VERSION_DOWNLOADED"
| "DOCUMENT_RECYCLED"
| "DOCUMENT_RESTORED"
| "DOCUMENT_REVERTED"
| "DOCUMENT_SHARED"
| "DOCUMENT_UNSHARED"
| "DOCUMENT_SHARE_PERMISSION_CHANGED"
| "DOCUMENT_SHAREABLE_LINK_CREATED"
| "DOCUMENT_SHAREABLE_LINK_REMOVED"
| "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED"
| "DOCUMENT_MOVED"
| "DOCUMENT_COMMENT_ADDED"
| "DOCUMENT_COMMENT_DELETED"
| "DOCUMENT_ANNOTATION_ADDED"
| "DOCUMENT_ANNOTATION_DELETED"
| "FOLDER_CREATED"
| "FOLDER_DELETED"
| "FOLDER_RENAMED"
| "FOLDER_RECYCLED"
| "FOLDER_RESTORED"
| "FOLDER_SHARED"
| "FOLDER_UNSHARED"
| "FOLDER_SHARE_PERMISSION_CHANGED"
| "FOLDER_SHAREABLE_LINK_CREATED"
| "FOLDER_SHAREABLE_LINK_REMOVED"
| "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED"
| "FOLDER_MOVED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface UserMetadata {
  Id?: string | null;
  Username?: string | null;
  GivenName?: string | null;
  Surname?: string | null;
  EmailAddress?: string | null;
}
function toUserMetadata(root: jsonP.JSONValue): UserMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Username": "s",
      "GivenName": "s",
      "Surname": "s",
      "EmailAddress": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Participants {
  Users?: UserMetadata[] | null;
  Groups?: GroupMetadata[] | null;
}
function toParticipants(root: jsonP.JSONValue): Participants {
  return jsonP.readObj({
    required: {},
    optional: {
      "Users": [toUserMetadata],
      "Groups": [toGroupMetadata],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface GroupMetadata {
  Id?: string | null;
  Name?: string | null;
}
function toGroupMetadata(root: jsonP.JSONValue): GroupMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ResourceMetadata {
  Type?: ResourceType | null;
  Name?: string | null;
  OriginalName?: string | null;
  Id?: string | null;
  VersionId?: string | null;
  Owner?: UserMetadata | null;
  ParentId?: string | null;
}
function toResourceMetadata(root: jsonP.JSONValue): ResourceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "Name": "s",
      "OriginalName": "s",
      "Id": "s",
      "VersionId": "s",
      "Owner": toUserMetadata,
      "ParentId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type ResourceType =
| "FOLDER"
| "DOCUMENT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface CommentMetadata {
  CommentId?: string | null;
  Contributor?: User | null;
  CreatedTimestamp?: Date | number | null;
  CommentStatus?: CommentStatusType | null;
  RecipientId?: string | null;
}
function toCommentMetadata(root: jsonP.JSONValue): CommentMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "CommentId": "s",
      "Contributor": toUser,
      "CreatedTimestamp": "d",
      "CommentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<CommentStatusType>(x),
      "RecipientId": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface DocumentVersionMetadata {
  Id?: string | null;
  Name?: string | null;
  ContentType?: string | null;
  Size?: number | null;
  Signature?: string | null;
  Status?: DocumentStatusType | null;
  CreatedTimestamp?: Date | number | null;
  ModifiedTimestamp?: Date | number | null;
  ContentCreatedTimestamp?: Date | number | null;
  ContentModifiedTimestamp?: Date | number | null;
  CreatorId?: string | null;
  Thumbnail?: { [key in DocumentThumbnailType]: string | null | undefined } | null;
  Source?: { [key in DocumentSourceType]: string | null | undefined } | null;
}
function toDocumentVersionMetadata(root: jsonP.JSONValue): DocumentVersionMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "ContentType": "s",
      "Size": "n",
      "Signature": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentStatusType>(x),
      "CreatedTimestamp": "d",
      "ModifiedTimestamp": "d",
      "ContentCreatedTimestamp": "d",
      "ContentModifiedTimestamp": "d",
      "CreatorId": "s",
      "Thumbnail": x => jsonP.readMap(x => cmnP.readEnumReq<DocumentThumbnailType>(x), String, x),
      "Source": x => jsonP.readMap(x => cmnP.readEnumReq<DocumentSourceType>(x), String, x),
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type DocumentStatusType =
| "INITIALIZED"
| "ACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type DocumentThumbnailType =
| "SMALL"
| "SMALL_HQ"
| "LARGE"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type DocumentSourceType =
| "ORIGINAL"
| "WITH_COMMENTS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface DocumentMetadata {
  Id?: string | null;
  CreatorId?: string | null;
  ParentFolderId?: string | null;
  CreatedTimestamp?: Date | number | null;
  ModifiedTimestamp?: Date | number | null;
  LatestVersionMetadata?: DocumentVersionMetadata | null;
  ResourceState?: ResourceStateType | null;
  Labels?: string[] | null;
}
function toDocumentMetadata(root: jsonP.JSONValue): DocumentMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "CreatorId": "s",
      "ParentFolderId": "s",
      "CreatedTimestamp": "d",
      "ModifiedTimestamp": "d",
      "LatestVersionMetadata": toDocumentVersionMetadata,
      "ResourceState": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceStateType>(x),
      "Labels": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Principal {
  Id?: string | null;
  Type?: PrincipalType | null;
  Roles?: PermissionInfo[] | null;
}
function toPrincipal(root: jsonP.JSONValue): Principal {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<PrincipalType>(x),
      "Roles": [toPermissionInfo],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PermissionInfo {
  Role?: RoleType | null;
  Type?: RolePermissionType | null;
}
function toPermissionInfo(root: jsonP.JSONValue): PermissionInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "Role": (x: jsonP.JSONValue) => cmnP.readEnum<RoleType>(x),
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<RolePermissionType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type RolePermissionType =
| "DIRECT"
| "INHERITED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ResourcePath {
  Components?: ResourcePathComponent[] | null;
}
function toResourcePath(root: jsonP.JSONValue): ResourcePath {
  return jsonP.readObj({
    required: {},
    optional: {
      "Components": [toResourcePathComponent],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ResourcePathComponent {
  Id?: string | null;
  Name?: string | null;
}
function toResourcePathComponent(root: jsonP.JSONValue): ResourcePathComponent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UploadMetadata {
  UploadUrl?: string | null;
  SignedHeaders?: { [key: string]: string | null | undefined } | null;
}
function toUploadMetadata(root: jsonP.JSONValue): UploadMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "UploadUrl": "s",
      "SignedHeaders": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
