// Autogenerated API client for: AWS Compute Optimizer

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class ComputeOptimizer {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ComputeOptimizer.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-11-01",
    "endpointPrefix": "compute-optimizer",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceFullName": "AWS Compute Optimizer",
    "serviceId": "Compute Optimizer",
    "signatureVersion": "v4",
    "signingName": "compute-optimizer",
    "targetPrefix": "ComputeOptimizerService",
    "uid": "compute-optimizer-2019-11-01"
  };

  async describeRecommendationExportJobs(
    {abortSignal, ...params}: RequestConfig & DescribeRecommendationExportJobsRequest = {},
  ): Promise<DescribeRecommendationExportJobsResponse> {
    const body: jsonP.JSONObject = {
      jobIds: params["jobIds"],
      filters: params["filters"]?.map(x => fromJobFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRecommendationExportJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "recommendationExportJobs": [toRecommendationExportJob],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async exportAutoScalingGroupRecommendations(
    {abortSignal, ...params}: RequestConfig & ExportAutoScalingGroupRecommendationsRequest,
  ): Promise<ExportAutoScalingGroupRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["accountIds"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      fieldsToExport: params["fieldsToExport"],
      s3DestinationConfig: fromS3DestinationConfig(params["s3DestinationConfig"]),
      fileFormat: params["fileFormat"],
      includeMemberAccounts: params["includeMemberAccounts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExportAutoScalingGroupRecommendations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobId": "s",
        "s3Destination": toS3Destination,
      },
    }, await resp.json());
  }

  async exportEC2InstanceRecommendations(
    {abortSignal, ...params}: RequestConfig & ExportEC2InstanceRecommendationsRequest,
  ): Promise<ExportEC2InstanceRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["accountIds"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      fieldsToExport: params["fieldsToExport"],
      s3DestinationConfig: fromS3DestinationConfig(params["s3DestinationConfig"]),
      fileFormat: params["fileFormat"],
      includeMemberAccounts: params["includeMemberAccounts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExportEC2InstanceRecommendations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "jobId": "s",
        "s3Destination": toS3Destination,
      },
    }, await resp.json());
  }

  async getAutoScalingGroupRecommendations(
    {abortSignal, ...params}: RequestConfig & GetAutoScalingGroupRecommendationsRequest = {},
  ): Promise<GetAutoScalingGroupRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["accountIds"],
      autoScalingGroupArns: params["autoScalingGroupArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAutoScalingGroupRecommendations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "autoScalingGroupRecommendations": [toAutoScalingGroupRecommendation],
        "errors": [toGetRecommendationError],
      },
    }, await resp.json());
  }

  async getEBSVolumeRecommendations(
    {abortSignal, ...params}: RequestConfig & GetEBSVolumeRecommendationsRequest = {},
  ): Promise<GetEBSVolumeRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      volumeArns: params["volumeArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromEBSFilter(x)),
      accountIds: params["accountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEBSVolumeRecommendations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "volumeRecommendations": [toVolumeRecommendation],
        "errors": [toGetRecommendationError],
      },
    }, await resp.json());
  }

  async getEC2InstanceRecommendations(
    {abortSignal, ...params}: RequestConfig & GetEC2InstanceRecommendationsRequest = {},
  ): Promise<GetEC2InstanceRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      instanceArns: params["instanceArns"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      filters: params["filters"]?.map(x => fromFilter(x)),
      accountIds: params["accountIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEC2InstanceRecommendations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "instanceRecommendations": [toInstanceRecommendation],
        "errors": [toGetRecommendationError],
      },
    }, await resp.json());
  }

  async getEC2RecommendationProjectedMetrics(
    {abortSignal, ...params}: RequestConfig & GetEC2RecommendationProjectedMetricsRequest,
  ): Promise<GetEC2RecommendationProjectedMetricsResponse> {
    const body: jsonP.JSONObject = {
      instanceArn: params["instanceArn"],
      stat: params["stat"],
      period: params["period"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEC2RecommendationProjectedMetrics",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "recommendedOptionProjectedMetrics": [toRecommendedOptionProjectedMetric],
      },
    }, await resp.json());
  }

  async getEnrollmentStatus(
    {abortSignal, ...params}: RequestConfig & GetEnrollmentStatusRequest = {},
  ): Promise<GetEnrollmentStatusResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEnrollmentStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
        "statusReason": "s",
        "memberAccountsEnrolled": "b",
      },
    }, await resp.json());
  }

  async getLambdaFunctionRecommendations(
    {abortSignal, ...params}: RequestConfig & GetLambdaFunctionRecommendationsRequest = {},
  ): Promise<GetLambdaFunctionRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      functionArns: params["functionArns"],
      accountIds: params["accountIds"],
      filters: params["filters"]?.map(x => fromLambdaFunctionRecommendationFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLambdaFunctionRecommendations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "lambdaFunctionRecommendations": [toLambdaFunctionRecommendation],
      },
    }, await resp.json());
  }

  async getRecommendationSummaries(
    {abortSignal, ...params}: RequestConfig & GetRecommendationSummariesRequest = {},
  ): Promise<GetRecommendationSummariesResponse> {
    const body: jsonP.JSONObject = {
      accountIds: params["accountIds"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRecommendationSummaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "recommendationSummaries": [toRecommendationSummary],
      },
    }, await resp.json());
  }

  async updateEnrollmentStatus(
    {abortSignal, ...params}: RequestConfig & UpdateEnrollmentStatusRequest,
  ): Promise<UpdateEnrollmentStatusResponse> {
    const body: jsonP.JSONObject = {
      status: params["status"],
      includeMemberAccounts: params["includeMemberAccounts"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEnrollmentStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
        "statusReason": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DescribeRecommendationExportJobsRequest {
  jobIds?: string[] | null;
  filters?: JobFilter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ExportAutoScalingGroupRecommendationsRequest {
  accountIds?: string[] | null;
  filters?: Filter[] | null;
  fieldsToExport?: ExportableAutoScalingGroupField[] | null;
  s3DestinationConfig: S3DestinationConfig;
  fileFormat?: FileFormat | null;
  includeMemberAccounts?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ExportEC2InstanceRecommendationsRequest {
  accountIds?: string[] | null;
  filters?: Filter[] | null;
  fieldsToExport?: ExportableInstanceField[] | null;
  s3DestinationConfig: S3DestinationConfig;
  fileFormat?: FileFormat | null;
  includeMemberAccounts?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetAutoScalingGroupRecommendationsRequest {
  accountIds?: string[] | null;
  autoScalingGroupArns?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface GetEBSVolumeRecommendationsRequest {
  volumeArns?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: EBSFilter[] | null;
  accountIds?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GetEC2InstanceRecommendationsRequest {
  instanceArns?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
  filters?: Filter[] | null;
  accountIds?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GetEC2RecommendationProjectedMetricsRequest {
  instanceArn: string;
  stat: MetricStatistic;
  period: number;
  startTime: Date | number;
  endTime: Date | number;
}

// refs: 1 - tags: named, input
export interface GetEnrollmentStatusRequest {
}

// refs: 1 - tags: named, input
export interface GetLambdaFunctionRecommendationsRequest {
  functionArns?: string[] | null;
  accountIds?: string[] | null;
  filters?: LambdaFunctionRecommendationFilter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetRecommendationSummariesRequest {
  accountIds?: string[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateEnrollmentStatusRequest {
  status: Status;
  includeMemberAccounts?: boolean | null;
}

// refs: 1 - tags: named, output
export interface DescribeRecommendationExportJobsResponse {
  recommendationExportJobs?: RecommendationExportJob[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ExportAutoScalingGroupRecommendationsResponse {
  jobId?: string | null;
  s3Destination?: S3Destination | null;
}

// refs: 1 - tags: named, output
export interface ExportEC2InstanceRecommendationsResponse {
  jobId?: string | null;
  s3Destination?: S3Destination | null;
}

// refs: 1 - tags: named, output
export interface GetAutoScalingGroupRecommendationsResponse {
  nextToken?: string | null;
  autoScalingGroupRecommendations?: AutoScalingGroupRecommendation[] | null;
  errors?: GetRecommendationError[] | null;
}

// refs: 1 - tags: named, output
export interface GetEBSVolumeRecommendationsResponse {
  nextToken?: string | null;
  volumeRecommendations?: VolumeRecommendation[] | null;
  errors?: GetRecommendationError[] | null;
}

// refs: 1 - tags: named, output
export interface GetEC2InstanceRecommendationsResponse {
  nextToken?: string | null;
  instanceRecommendations?: InstanceRecommendation[] | null;
  errors?: GetRecommendationError[] | null;
}

// refs: 1 - tags: named, output
export interface GetEC2RecommendationProjectedMetricsResponse {
  recommendedOptionProjectedMetrics?: RecommendedOptionProjectedMetric[] | null;
}

// refs: 1 - tags: named, output
export interface GetEnrollmentStatusResponse {
  status?: Status | null;
  statusReason?: string | null;
  memberAccountsEnrolled?: boolean | null;
}

// refs: 1 - tags: named, output
export interface GetLambdaFunctionRecommendationsResponse {
  nextToken?: string | null;
  lambdaFunctionRecommendations?: LambdaFunctionRecommendation[] | null;
}

// refs: 1 - tags: named, output
export interface GetRecommendationSummariesResponse {
  nextToken?: string | null;
  recommendationSummaries?: RecommendationSummary[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateEnrollmentStatusResponse {
  status?: Status | null;
  statusReason?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface JobFilter {
  name?: JobFilterName | null;
  values?: string[] | null;
}
function fromJobFilter(input?: JobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

// refs: 1 - tags: input, named, enum
export type JobFilterName =
| "ResourceType"
| "JobStatus"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface
export interface Filter {
  name?: FilterName | null;
  values?: string[] | null;
}
function fromFilter(input?: Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

// refs: 4 - tags: input, named, enum
export type FilterName =
| "Finding"
| "RecommendationSourceType"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ExportableAutoScalingGroupField =
| "AccountId"
| "AutoScalingGroupArn"
| "AutoScalingGroupName"
| "Finding"
| "UtilizationMetricsCpuMaximum"
| "UtilizationMetricsMemoryMaximum"
| "UtilizationMetricsEbsReadOpsPerSecondMaximum"
| "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
| "UtilizationMetricsEbsReadBytesPerSecondMaximum"
| "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
| "LookbackPeriodInDays"
| "CurrentConfigurationInstanceType"
| "CurrentConfigurationDesiredCapacity"
| "CurrentConfigurationMinSize"
| "CurrentConfigurationMaxSize"
| "CurrentOnDemandPrice"
| "CurrentStandardOneYearNoUpfrontReservedPrice"
| "CurrentStandardThreeYearNoUpfrontReservedPrice"
| "CurrentVCpus"
| "CurrentMemory"
| "CurrentStorage"
| "CurrentNetwork"
| "RecommendationOptionsConfigurationInstanceType"
| "RecommendationOptionsConfigurationDesiredCapacity"
| "RecommendationOptionsConfigurationMinSize"
| "RecommendationOptionsConfigurationMaxSize"
| "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
| "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
| "RecommendationOptionsPerformanceRisk"
| "RecommendationOptionsOnDemandPrice"
| "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
| "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
| "RecommendationOptionsVcpus"
| "RecommendationOptionsMemory"
| "RecommendationOptionsStorage"
| "RecommendationOptionsNetwork"
| "LastRefreshTimestamp"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface S3DestinationConfig {
  bucket?: string | null;
  keyPrefix?: string | null;
}
function fromS3DestinationConfig(input?: S3DestinationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucket: input["bucket"],
    keyPrefix: input["keyPrefix"],
  }
}

// refs: 2 - tags: input, named, enum
export type FileFormat =
| "Csv"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ExportableInstanceField =
| "AccountId"
| "InstanceArn"
| "InstanceName"
| "Finding"
| "LookbackPeriodInDays"
| "CurrentInstanceType"
| "UtilizationMetricsCpuMaximum"
| "UtilizationMetricsMemoryMaximum"
| "UtilizationMetricsEbsReadOpsPerSecondMaximum"
| "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
| "UtilizationMetricsEbsReadBytesPerSecondMaximum"
| "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
| "CurrentOnDemandPrice"
| "CurrentStandardOneYearNoUpfrontReservedPrice"
| "CurrentStandardThreeYearNoUpfrontReservedPrice"
| "CurrentVCpus"
| "CurrentMemory"
| "CurrentStorage"
| "CurrentNetwork"
| "RecommendationOptionsInstanceType"
| "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
| "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
| "RecommendationOptionsPerformanceRisk"
| "RecommendationOptionsVcpus"
| "RecommendationOptionsMemory"
| "RecommendationOptionsStorage"
| "RecommendationOptionsNetwork"
| "RecommendationOptionsOnDemandPrice"
| "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
| "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
| "RecommendationsSourcesRecommendationSourceArn"
| "RecommendationsSourcesRecommendationSourceType"
| "LastRefreshTimestamp"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface EBSFilter {
  name?: EBSFilterName | null;
  values?: string[] | null;
}
function fromEBSFilter(input?: EBSFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

// refs: 1 - tags: input, named, enum
export type EBSFilterName =
| "Finding"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type MetricStatistic =
| "Maximum"
| "Average"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface LambdaFunctionRecommendationFilter {
  name?: LambdaFunctionRecommendationFilterName | null;
  values?: string[] | null;
}
function fromLambdaFunctionRecommendationFilter(input?: LambdaFunctionRecommendationFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    values: input["values"],
  }
}

// refs: 1 - tags: input, named, enum
export type LambdaFunctionRecommendationFilterName =
| "Finding"
| "FindingReasonCode"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type Status =
| "Active"
| "Inactive"
| "Pending"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface RecommendationExportJob {
  jobId?: string | null;
  destination?: ExportDestination | null;
  resourceType?: ResourceType | null;
  status?: JobStatus | null;
  creationTimestamp?: Date | number | null;
  lastUpdatedTimestamp?: Date | number | null;
  failureReason?: string | null;
}
function toRecommendationExportJob(root: jsonP.JSONValue): RecommendationExportJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "jobId": "s",
      "destination": toExportDestination,
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "creationTimestamp": "d",
      "lastUpdatedTimestamp": "d",
      "failureReason": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExportDestination {
  s3?: S3Destination | null;
}
function toExportDestination(root: jsonP.JSONValue): ExportDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3": toS3Destination,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface S3Destination {
  bucket?: string | null;
  key?: string | null;
  metadataKey?: string | null;
}
function toS3Destination(root: jsonP.JSONValue): S3Destination {
  return jsonP.readObj({
    required: {},
    optional: {
      "bucket": "s",
      "key": "s",
      "metadataKey": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ResourceType =
| "Ec2Instance"
| "AutoScalingGroup"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type JobStatus =
| "Queued"
| "InProgress"
| "Complete"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AutoScalingGroupRecommendation {
  accountId?: string | null;
  autoScalingGroupArn?: string | null;
  autoScalingGroupName?: string | null;
  finding?: Finding | null;
  utilizationMetrics?: UtilizationMetric[] | null;
  lookBackPeriodInDays?: number | null;
  currentConfiguration?: AutoScalingGroupConfiguration | null;
  recommendationOptions?: AutoScalingGroupRecommendationOption[] | null;
  lastRefreshTimestamp?: Date | number | null;
}
function toAutoScalingGroupRecommendation(root: jsonP.JSONValue): AutoScalingGroupRecommendation {
  return jsonP.readObj({
    required: {},
    optional: {
      "accountId": "s",
      "autoScalingGroupArn": "s",
      "autoScalingGroupName": "s",
      "finding": (x: jsonP.JSONValue) => cmnP.readEnum<Finding>(x),
      "utilizationMetrics": [toUtilizationMetric],
      "lookBackPeriodInDays": "n",
      "currentConfiguration": toAutoScalingGroupConfiguration,
      "recommendationOptions": [toAutoScalingGroupRecommendationOption],
      "lastRefreshTimestamp": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type Finding =
| "Underprovisioned"
| "Overprovisioned"
| "Optimized"
| "NotOptimized"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface UtilizationMetric {
  name?: MetricName | null;
  statistic?: MetricStatistic | null;
  value?: number | null;
}
function toUtilizationMetric(root: jsonP.JSONValue): UtilizationMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<MetricName>(x),
      "statistic": (x: jsonP.JSONValue) => cmnP.readEnum<MetricStatistic>(x),
      "value": "n",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type MetricName =
| "Cpu"
| "Memory"
| "EBS_READ_OPS_PER_SECOND"
| "EBS_WRITE_OPS_PER_SECOND"
| "EBS_READ_BYTES_PER_SECOND"
| "EBS_WRITE_BYTES_PER_SECOND"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface AutoScalingGroupConfiguration {
  desiredCapacity?: number | null;
  minSize?: number | null;
  maxSize?: number | null;
  instanceType?: string | null;
}
function toAutoScalingGroupConfiguration(root: jsonP.JSONValue): AutoScalingGroupConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "desiredCapacity": "n",
      "minSize": "n",
      "maxSize": "n",
      "instanceType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AutoScalingGroupRecommendationOption {
  configuration?: AutoScalingGroupConfiguration | null;
  projectedUtilizationMetrics?: UtilizationMetric[] | null;
  performanceRisk?: number | null;
  rank?: number | null;
}
function toAutoScalingGroupRecommendationOption(root: jsonP.JSONValue): AutoScalingGroupRecommendationOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "configuration": toAutoScalingGroupConfiguration,
      "projectedUtilizationMetrics": [toUtilizationMetric],
      "performanceRisk": "n",
      "rank": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface GetRecommendationError {
  identifier?: string | null;
  code?: string | null;
  message?: string | null;
}
function toGetRecommendationError(root: jsonP.JSONValue): GetRecommendationError {
  return jsonP.readObj({
    required: {},
    optional: {
      "identifier": "s",
      "code": "s",
      "message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VolumeRecommendation {
  volumeArn?: string | null;
  accountId?: string | null;
  currentConfiguration?: VolumeConfiguration | null;
  finding?: EBSFinding | null;
  utilizationMetrics?: EBSUtilizationMetric[] | null;
  lookBackPeriodInDays?: number | null;
  volumeRecommendationOptions?: VolumeRecommendationOption[] | null;
  lastRefreshTimestamp?: Date | number | null;
}
function toVolumeRecommendation(root: jsonP.JSONValue): VolumeRecommendation {
  return jsonP.readObj({
    required: {},
    optional: {
      "volumeArn": "s",
      "accountId": "s",
      "currentConfiguration": toVolumeConfiguration,
      "finding": (x: jsonP.JSONValue) => cmnP.readEnum<EBSFinding>(x),
      "utilizationMetrics": [toEBSUtilizationMetric],
      "lookBackPeriodInDays": "n",
      "volumeRecommendationOptions": [toVolumeRecommendationOption],
      "lastRefreshTimestamp": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface VolumeConfiguration {
  volumeType?: string | null;
  volumeSize?: number | null;
  volumeBaselineIOPS?: number | null;
  volumeBurstIOPS?: number | null;
  volumeBaselineThroughput?: number | null;
  volumeBurstThroughput?: number | null;
}
function toVolumeConfiguration(root: jsonP.JSONValue): VolumeConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "volumeType": "s",
      "volumeSize": "n",
      "volumeBaselineIOPS": "n",
      "volumeBurstIOPS": "n",
      "volumeBaselineThroughput": "n",
      "volumeBurstThroughput": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EBSFinding =
| "Optimized"
| "NotOptimized"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface EBSUtilizationMetric {
  name?: EBSMetricName | null;
  statistic?: MetricStatistic | null;
  value?: number | null;
}
function toEBSUtilizationMetric(root: jsonP.JSONValue): EBSUtilizationMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<EBSMetricName>(x),
      "statistic": (x: jsonP.JSONValue) => cmnP.readEnum<MetricStatistic>(x),
      "value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EBSMetricName =
| "VolumeReadOpsPerSecond"
| "VolumeWriteOpsPerSecond"
| "VolumeReadBytesPerSecond"
| "VolumeWriteBytesPerSecond"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface VolumeRecommendationOption {
  configuration?: VolumeConfiguration | null;
  performanceRisk?: number | null;
  rank?: number | null;
}
function toVolumeRecommendationOption(root: jsonP.JSONValue): VolumeRecommendationOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "configuration": toVolumeConfiguration,
      "performanceRisk": "n",
      "rank": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceRecommendation {
  instanceArn?: string | null;
  accountId?: string | null;
  instanceName?: string | null;
  currentInstanceType?: string | null;
  finding?: Finding | null;
  utilizationMetrics?: UtilizationMetric[] | null;
  lookBackPeriodInDays?: number | null;
  recommendationOptions?: InstanceRecommendationOption[] | null;
  recommendationSources?: RecommendationSource[] | null;
  lastRefreshTimestamp?: Date | number | null;
}
function toInstanceRecommendation(root: jsonP.JSONValue): InstanceRecommendation {
  return jsonP.readObj({
    required: {},
    optional: {
      "instanceArn": "s",
      "accountId": "s",
      "instanceName": "s",
      "currentInstanceType": "s",
      "finding": (x: jsonP.JSONValue) => cmnP.readEnum<Finding>(x),
      "utilizationMetrics": [toUtilizationMetric],
      "lookBackPeriodInDays": "n",
      "recommendationOptions": [toInstanceRecommendationOption],
      "recommendationSources": [toRecommendationSource],
      "lastRefreshTimestamp": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceRecommendationOption {
  instanceType?: string | null;
  projectedUtilizationMetrics?: UtilizationMetric[] | null;
  performanceRisk?: number | null;
  rank?: number | null;
}
function toInstanceRecommendationOption(root: jsonP.JSONValue): InstanceRecommendationOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "instanceType": "s",
      "projectedUtilizationMetrics": [toUtilizationMetric],
      "performanceRisk": "n",
      "rank": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecommendationSource {
  recommendationSourceArn?: string | null;
  recommendationSourceType?: RecommendationSourceType | null;
}
function toRecommendationSource(root: jsonP.JSONValue): RecommendationSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "recommendationSourceArn": "s",
      "recommendationSourceType": (x: jsonP.JSONValue) => cmnP.readEnum<RecommendationSourceType>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RecommendationSourceType =
| "Ec2Instance"
| "AutoScalingGroup"
| "EbsVolume"
| "LambdaFunction"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface RecommendedOptionProjectedMetric {
  recommendedInstanceType?: string | null;
  rank?: number | null;
  projectedMetrics?: ProjectedMetric[] | null;
}
function toRecommendedOptionProjectedMetric(root: jsonP.JSONValue): RecommendedOptionProjectedMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "recommendedInstanceType": "s",
      "rank": "n",
      "projectedMetrics": [toProjectedMetric],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProjectedMetric {
  name?: MetricName | null;
  timestamps?: (Date | number)[] | null;
  values?: number[] | null;
}
function toProjectedMetric(root: jsonP.JSONValue): ProjectedMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<MetricName>(x),
      "timestamps": ["d"],
      "values": ["n"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionRecommendation {
  functionArn?: string | null;
  functionVersion?: string | null;
  accountId?: string | null;
  currentMemorySize?: number | null;
  numberOfInvocations?: number | null;
  utilizationMetrics?: LambdaFunctionUtilizationMetric[] | null;
  lookbackPeriodInDays?: number | null;
  lastRefreshTimestamp?: Date | number | null;
  finding?: LambdaFunctionRecommendationFinding | null;
  findingReasonCodes?: LambdaFunctionRecommendationFindingReasonCode[] | null;
  memorySizeRecommendationOptions?: LambdaFunctionMemoryRecommendationOption[] | null;
}
function toLambdaFunctionRecommendation(root: jsonP.JSONValue): LambdaFunctionRecommendation {
  return jsonP.readObj({
    required: {},
    optional: {
      "functionArn": "s",
      "functionVersion": "s",
      "accountId": "s",
      "currentMemorySize": "n",
      "numberOfInvocations": "n",
      "utilizationMetrics": [toLambdaFunctionUtilizationMetric],
      "lookbackPeriodInDays": "n",
      "lastRefreshTimestamp": "d",
      "finding": (x: jsonP.JSONValue) => cmnP.readEnum<LambdaFunctionRecommendationFinding>(x),
      "findingReasonCodes": [(x: jsonP.JSONValue) => cmnP.readEnum<LambdaFunctionRecommendationFindingReasonCode>(x)],
      "memorySizeRecommendationOptions": [toLambdaFunctionMemoryRecommendationOption],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionUtilizationMetric {
  name?: LambdaFunctionMetricName | null;
  statistic?: LambdaFunctionMetricStatistic | null;
  value?: number | null;
}
function toLambdaFunctionUtilizationMetric(root: jsonP.JSONValue): LambdaFunctionUtilizationMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<LambdaFunctionMetricName>(x),
      "statistic": (x: jsonP.JSONValue) => cmnP.readEnum<LambdaFunctionMetricStatistic>(x),
      "value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type LambdaFunctionMetricName =
| "Duration"
| "Memory"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type LambdaFunctionMetricStatistic =
| "Maximum"
| "Average"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type LambdaFunctionRecommendationFinding =
| "Optimized"
| "NotOptimized"
| "Unavailable"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type LambdaFunctionRecommendationFindingReasonCode =
| "MemoryOverprovisioned"
| "MemoryUnderprovisioned"
| "InsufficientData"
| "Inconclusive"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionMemoryRecommendationOption {
  rank?: number | null;
  memorySize?: number | null;
  projectedUtilizationMetrics?: LambdaFunctionMemoryProjectedMetric[] | null;
}
function toLambdaFunctionMemoryRecommendationOption(root: jsonP.JSONValue): LambdaFunctionMemoryRecommendationOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "rank": "n",
      "memorySize": "n",
      "projectedUtilizationMetrics": [toLambdaFunctionMemoryProjectedMetric],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionMemoryProjectedMetric {
  name?: LambdaFunctionMemoryMetricName | null;
  statistic?: LambdaFunctionMemoryMetricStatistic | null;
  value?: number | null;
}
function toLambdaFunctionMemoryProjectedMetric(root: jsonP.JSONValue): LambdaFunctionMemoryProjectedMetric {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<LambdaFunctionMemoryMetricName>(x),
      "statistic": (x: jsonP.JSONValue) => cmnP.readEnum<LambdaFunctionMemoryMetricStatistic>(x),
      "value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type LambdaFunctionMemoryMetricName =
| "Duration"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type LambdaFunctionMemoryMetricStatistic =
| "LowerBound"
| "UpperBound"
| "Expected"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface RecommendationSummary {
  summaries?: Summary[] | null;
  recommendationResourceType?: RecommendationSourceType | null;
  accountId?: string | null;
}
function toRecommendationSummary(root: jsonP.JSONValue): RecommendationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "summaries": [toSummary],
      "recommendationResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<RecommendationSourceType>(x),
      "accountId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Summary {
  name?: Finding | null;
  value?: number | null;
  reasonCodeSummaries?: ReasonCodeSummary[] | null;
}
function toSummary(root: jsonP.JSONValue): Summary {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<Finding>(x),
      "value": "n",
      "reasonCodeSummaries": [toReasonCodeSummary],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ReasonCodeSummary {
  name?: FindingReasonCode | null;
  value?: number | null;
}
function toReasonCodeSummary(root: jsonP.JSONValue): ReasonCodeSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": (x: jsonP.JSONValue) => cmnP.readEnum<FindingReasonCode>(x),
      "value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type FindingReasonCode =
| "MemoryOverprovisioned"
| "MemoryUnderprovisioned"
| cmnP.UnexpectedEnumValue;
