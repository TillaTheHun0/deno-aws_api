// Autogenerated API client for: Amazon Simple Systems Manager (SSM)

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class SSM {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SSM.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-11-06",
    "endpointPrefix": "ssm",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Amazon SSM",
    "serviceFullName": "Amazon Simple Systems Manager (SSM)",
    "serviceId": "SSM",
    "signatureVersion": "v4",
    "targetPrefix": "AmazonSSM",
    "uid": "ssm-2014-11-06"
  };

  async addTagsToResource(
    {abortSignal, ...params}: RequestConfig & AddTagsToResourceRequest,
  ): Promise<AddTagsToResourceResult> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTagsToResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelCommand(
    {abortSignal, ...params}: RequestConfig & CancelCommandRequest,
  ): Promise<CancelCommandResult> {
    const body: jsonP.JSONObject = {
      CommandId: params["CommandId"],
      InstanceIds: params["InstanceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelCommand",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelMaintenanceWindowExecution(
    {abortSignal, ...params}: RequestConfig & CancelMaintenanceWindowExecutionRequest,
  ): Promise<CancelMaintenanceWindowExecutionResult> {
    const body: jsonP.JSONObject = {
      WindowExecutionId: params["WindowExecutionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelMaintenanceWindowExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowExecutionId": "s",
      },
    }, await resp.json());
  }

  async createActivation(
    {abortSignal, ...params}: RequestConfig & CreateActivationRequest,
  ): Promise<CreateActivationResult> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      DefaultInstanceName: params["DefaultInstanceName"],
      IamRole: params["IamRole"],
      RegistrationLimit: params["RegistrationLimit"],
      ExpirationDate: jsonP.serializeDate_unixTimestamp(params["ExpirationDate"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateActivation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ActivationId": "s",
        "ActivationCode": "s",
      },
    }, await resp.json());
  }

  async createAssociation(
    {abortSignal, ...params}: RequestConfig & CreateAssociationRequest,
  ): Promise<CreateAssociationResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DocumentVersion: params["DocumentVersion"],
      InstanceId: params["InstanceId"],
      Parameters: params["Parameters"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      ScheduleExpression: params["ScheduleExpression"],
      OutputLocation: fromInstanceAssociationOutputLocation(params["OutputLocation"]),
      AssociationName: params["AssociationName"],
      AutomationTargetParameterName: params["AutomationTargetParameterName"],
      MaxErrors: params["MaxErrors"],
      MaxConcurrency: params["MaxConcurrency"],
      ComplianceSeverity: params["ComplianceSeverity"],
      SyncCompliance: params["SyncCompliance"],
      ApplyOnlyAtCronInterval: params["ApplyOnlyAtCronInterval"],
      TargetLocations: params["TargetLocations"]?.map(x => fromTargetLocation(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationDescription": toAssociationDescription,
      },
    }, await resp.json());
  }

  async createAssociationBatch(
    {abortSignal, ...params}: RequestConfig & CreateAssociationBatchRequest,
  ): Promise<CreateAssociationBatchResult> {
    const body: jsonP.JSONObject = {
      Entries: params["Entries"]?.map(x => fromCreateAssociationBatchRequestEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssociationBatch",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Successful": [toAssociationDescription],
        "Failed": [toFailedCreateAssociation],
      },
    }, await resp.json());
  }

  async createDocument(
    {abortSignal, ...params}: RequestConfig & CreateDocumentRequest,
  ): Promise<CreateDocumentResult> {
    const body: jsonP.JSONObject = {
      Content: params["Content"],
      Requires: params["Requires"]?.map(x => fromDocumentRequires(x)),
      Attachments: params["Attachments"]?.map(x => fromAttachmentsSource(x)),
      Name: params["Name"],
      VersionName: params["VersionName"],
      DocumentType: params["DocumentType"],
      DocumentFormat: params["DocumentFormat"],
      TargetType: params["TargetType"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentDescription": toDocumentDescription,
      },
    }, await resp.json());
  }

  async createMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & CreateMaintenanceWindowRequest,
  ): Promise<CreateMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      StartDate: params["StartDate"],
      EndDate: params["EndDate"],
      Schedule: params["Schedule"],
      ScheduleTimezone: params["ScheduleTimezone"],
      ScheduleOffset: params["ScheduleOffset"],
      Duration: params["Duration"],
      Cutoff: params["Cutoff"],
      AllowUnassociatedTargets: params["AllowUnassociatedTargets"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
      },
    }, await resp.json());
  }

  async createOpsItem(
    {abortSignal, ...params}: RequestConfig & CreateOpsItemRequest,
  ): Promise<CreateOpsItemResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      OpsItemType: params["OpsItemType"],
      OperationalData: jsonP.serializeMap(params["OperationalData"], x => fromOpsItemDataValue(x)),
      Notifications: params["Notifications"]?.map(x => fromOpsItemNotification(x)),
      Priority: params["Priority"],
      RelatedOpsItems: params["RelatedOpsItems"]?.map(x => fromRelatedOpsItem(x)),
      Source: params["Source"],
      Title: params["Title"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      Category: params["Category"],
      Severity: params["Severity"],
      ActualStartTime: jsonP.serializeDate_unixTimestamp(params["ActualStartTime"]),
      ActualEndTime: jsonP.serializeDate_unixTimestamp(params["ActualEndTime"]),
      PlannedStartTime: jsonP.serializeDate_unixTimestamp(params["PlannedStartTime"]),
      PlannedEndTime: jsonP.serializeDate_unixTimestamp(params["PlannedEndTime"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOpsItem",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OpsItemId": "s",
      },
    }, await resp.json());
  }

  async createOpsMetadata(
    {abortSignal, ...params}: RequestConfig & CreateOpsMetadataRequest,
  ): Promise<CreateOpsMetadataResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      Metadata: jsonP.serializeMap(params["Metadata"], x => fromMetadataValue(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOpsMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OpsMetadataArn": "s",
      },
    }, await resp.json());
  }

  async createPatchBaseline(
    {abortSignal, ...params}: RequestConfig & CreatePatchBaselineRequest,
  ): Promise<CreatePatchBaselineResult> {
    const body: jsonP.JSONObject = {
      OperatingSystem: params["OperatingSystem"],
      Name: params["Name"],
      GlobalFilters: fromPatchFilterGroup(params["GlobalFilters"]),
      ApprovalRules: fromPatchRuleGroup(params["ApprovalRules"]),
      ApprovedPatches: params["ApprovedPatches"],
      ApprovedPatchesComplianceLevel: params["ApprovedPatchesComplianceLevel"],
      ApprovedPatchesEnableNonSecurity: params["ApprovedPatchesEnableNonSecurity"],
      RejectedPatches: params["RejectedPatches"],
      RejectedPatchesAction: params["RejectedPatchesAction"],
      Description: params["Description"],
      Sources: params["Sources"]?.map(x => fromPatchSource(x)),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePatchBaseline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
      },
    }, await resp.json());
  }

  async createResourceDataSync(
    {abortSignal, ...params}: RequestConfig & CreateResourceDataSyncRequest,
  ): Promise<CreateResourceDataSyncResult> {
    const body: jsonP.JSONObject = {
      SyncName: params["SyncName"],
      S3Destination: fromResourceDataSyncS3Destination(params["S3Destination"]),
      SyncType: params["SyncType"],
      SyncSource: fromResourceDataSyncSource(params["SyncSource"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateResourceDataSync",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteActivation(
    {abortSignal, ...params}: RequestConfig & DeleteActivationRequest,
  ): Promise<DeleteActivationResult> {
    const body: jsonP.JSONObject = {
      ActivationId: params["ActivationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteActivation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAssociation(
    {abortSignal, ...params}: RequestConfig & DeleteAssociationRequest = {},
  ): Promise<DeleteAssociationResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      InstanceId: params["InstanceId"],
      AssociationId: params["AssociationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDocument(
    {abortSignal, ...params}: RequestConfig & DeleteDocumentRequest,
  ): Promise<DeleteDocumentResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DocumentVersion: params["DocumentVersion"],
      VersionName: params["VersionName"],
      Force: params["Force"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteInventory(
    {abortSignal, ...params}: RequestConfig & DeleteInventoryRequest,
  ): Promise<DeleteInventoryResult> {
    const body: jsonP.JSONObject = {
      TypeName: params["TypeName"],
      SchemaDeleteOption: params["SchemaDeleteOption"],
      DryRun: params["DryRun"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInventory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeletionId": "s",
        "TypeName": "s",
        "DeletionSummary": toInventoryDeletionSummary,
      },
    }, await resp.json());
  }

  async deleteMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & DeleteMaintenanceWindowRequest,
  ): Promise<DeleteMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
      },
    }, await resp.json());
  }

  async deleteOpsMetadata(
    {abortSignal, ...params}: RequestConfig & DeleteOpsMetadataRequest,
  ): Promise<DeleteOpsMetadataResult> {
    const body: jsonP.JSONObject = {
      OpsMetadataArn: params["OpsMetadataArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOpsMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteParameter(
    {abortSignal, ...params}: RequestConfig & DeleteParameterRequest,
  ): Promise<DeleteParameterResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteParameter",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteParameters(
    {abortSignal, ...params}: RequestConfig & DeleteParametersRequest,
  ): Promise<DeleteParametersResult> {
    const body: jsonP.JSONObject = {
      Names: params["Names"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DeletedParameters": ["s"],
        "InvalidParameters": ["s"],
      },
    }, await resp.json());
  }

  async deletePatchBaseline(
    {abortSignal, ...params}: RequestConfig & DeletePatchBaselineRequest,
  ): Promise<DeletePatchBaselineResult> {
    const body: jsonP.JSONObject = {
      BaselineId: params["BaselineId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePatchBaseline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
      },
    }, await resp.json());
  }

  async deleteResourceDataSync(
    {abortSignal, ...params}: RequestConfig & DeleteResourceDataSyncRequest,
  ): Promise<DeleteResourceDataSyncResult> {
    const body: jsonP.JSONObject = {
      SyncName: params["SyncName"],
      SyncType: params["SyncType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteResourceDataSync",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterManagedInstance(
    {abortSignal, ...params}: RequestConfig & DeregisterManagedInstanceRequest,
  ): Promise<DeregisterManagedInstanceResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterManagedInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterPatchBaselineForPatchGroup(
    {abortSignal, ...params}: RequestConfig & DeregisterPatchBaselineForPatchGroupRequest,
  ): Promise<DeregisterPatchBaselineForPatchGroupResult> {
    const body: jsonP.JSONObject = {
      BaselineId: params["BaselineId"],
      PatchGroup: params["PatchGroup"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterPatchBaselineForPatchGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
        "PatchGroup": "s",
      },
    }, await resp.json());
  }

  async deregisterTargetFromMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & DeregisterTargetFromMaintenanceWindowRequest,
  ): Promise<DeregisterTargetFromMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      WindowTargetId: params["WindowTargetId"],
      Safe: params["Safe"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterTargetFromMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
        "WindowTargetId": "s",
      },
    }, await resp.json());
  }

  async deregisterTaskFromMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & DeregisterTaskFromMaintenanceWindowRequest,
  ): Promise<DeregisterTaskFromMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      WindowTaskId: params["WindowTaskId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterTaskFromMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
        "WindowTaskId": "s",
      },
    }, await resp.json());
  }

  async describeActivations(
    {abortSignal, ...params}: RequestConfig & DescribeActivationsRequest = {},
  ): Promise<DescribeActivationsResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromDescribeActivationsFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeActivations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ActivationList": [toActivation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAssociation(
    {abortSignal, ...params}: RequestConfig & DescribeAssociationRequest = {},
  ): Promise<DescribeAssociationResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      InstanceId: params["InstanceId"],
      AssociationId: params["AssociationId"],
      AssociationVersion: params["AssociationVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationDescription": toAssociationDescription,
      },
    }, await resp.json());
  }

  async describeAssociationExecutionTargets(
    {abortSignal, ...params}: RequestConfig & DescribeAssociationExecutionTargetsRequest,
  ): Promise<DescribeAssociationExecutionTargetsResult> {
    const body: jsonP.JSONObject = {
      AssociationId: params["AssociationId"],
      ExecutionId: params["ExecutionId"],
      Filters: params["Filters"]?.map(x => fromAssociationExecutionTargetsFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAssociationExecutionTargets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationExecutionTargets": [toAssociationExecutionTarget],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAssociationExecutions(
    {abortSignal, ...params}: RequestConfig & DescribeAssociationExecutionsRequest,
  ): Promise<DescribeAssociationExecutionsResult> {
    const body: jsonP.JSONObject = {
      AssociationId: params["AssociationId"],
      Filters: params["Filters"]?.map(x => fromAssociationExecutionFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAssociationExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationExecutions": [toAssociationExecution],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAutomationExecutions(
    {abortSignal, ...params}: RequestConfig & DescribeAutomationExecutionsRequest = {},
  ): Promise<DescribeAutomationExecutionsResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromAutomationExecutionFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAutomationExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutomationExecutionMetadataList": [toAutomationExecutionMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAutomationStepExecutions(
    {abortSignal, ...params}: RequestConfig & DescribeAutomationStepExecutionsRequest,
  ): Promise<DescribeAutomationStepExecutionsResult> {
    const body: jsonP.JSONObject = {
      AutomationExecutionId: params["AutomationExecutionId"],
      Filters: params["Filters"]?.map(x => fromStepExecutionFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      ReverseOrder: params["ReverseOrder"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAutomationStepExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StepExecutions": [toStepExecution],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeAvailablePatches(
    {abortSignal, ...params}: RequestConfig & DescribeAvailablePatchesRequest = {},
  ): Promise<DescribeAvailablePatchesResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromPatchOrchestratorFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAvailablePatches",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Patches": [toPatch],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeDocument(
    {abortSignal, ...params}: RequestConfig & DescribeDocumentRequest,
  ): Promise<DescribeDocumentResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DocumentVersion: params["DocumentVersion"],
      VersionName: params["VersionName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Document": toDocumentDescription,
      },
    }, await resp.json());
  }

  async describeDocumentPermission(
    {abortSignal, ...params}: RequestConfig & DescribeDocumentPermissionRequest,
  ): Promise<DescribeDocumentPermissionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      PermissionType: params["PermissionType"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDocumentPermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountIds": ["s"],
        "AccountSharingInfoList": [toAccountSharingInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeEffectiveInstanceAssociations(
    {abortSignal, ...params}: RequestConfig & DescribeEffectiveInstanceAssociationsRequest,
  ): Promise<DescribeEffectiveInstanceAssociationsResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEffectiveInstanceAssociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Associations": [toInstanceAssociation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeEffectivePatchesForPatchBaseline(
    {abortSignal, ...params}: RequestConfig & DescribeEffectivePatchesForPatchBaselineRequest,
  ): Promise<DescribeEffectivePatchesForPatchBaselineResult> {
    const body: jsonP.JSONObject = {
      BaselineId: params["BaselineId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEffectivePatchesForPatchBaseline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EffectivePatches": [toEffectivePatch],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeInstanceAssociationsStatus(
    {abortSignal, ...params}: RequestConfig & DescribeInstanceAssociationsStatusRequest,
  ): Promise<DescribeInstanceAssociationsStatusResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInstanceAssociationsStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InstanceAssociationStatusInfos": [toInstanceAssociationStatusInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeInstanceInformation(
    {abortSignal, ...params}: RequestConfig & DescribeInstanceInformationRequest = {},
  ): Promise<DescribeInstanceInformationResult> {
    const body: jsonP.JSONObject = {
      InstanceInformationFilterList: params["InstanceInformationFilterList"]?.map(x => fromInstanceInformationFilter(x)),
      Filters: params["Filters"]?.map(x => fromInstanceInformationStringFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInstanceInformation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InstanceInformationList": [toInstanceInformation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeInstancePatchStates(
    {abortSignal, ...params}: RequestConfig & DescribeInstancePatchStatesRequest,
  ): Promise<DescribeInstancePatchStatesResult> {
    const body: jsonP.JSONObject = {
      InstanceIds: params["InstanceIds"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInstancePatchStates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InstancePatchStates": [toInstancePatchState],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeInstancePatchStatesForPatchGroup(
    {abortSignal, ...params}: RequestConfig & DescribeInstancePatchStatesForPatchGroupRequest,
  ): Promise<DescribeInstancePatchStatesForPatchGroupResult> {
    const body: jsonP.JSONObject = {
      PatchGroup: params["PatchGroup"],
      Filters: params["Filters"]?.map(x => fromInstancePatchStateFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInstancePatchStatesForPatchGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InstancePatchStates": [toInstancePatchState],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeInstancePatches(
    {abortSignal, ...params}: RequestConfig & DescribeInstancePatchesRequest,
  ): Promise<DescribeInstancePatchesResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      Filters: params["Filters"]?.map(x => fromPatchOrchestratorFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInstancePatches",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Patches": [toPatchComplianceData],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeInventoryDeletions(
    {abortSignal, ...params}: RequestConfig & DescribeInventoryDeletionsRequest = {},
  ): Promise<DescribeInventoryDeletionsResult> {
    const body: jsonP.JSONObject = {
      DeletionId: params["DeletionId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeInventoryDeletions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InventoryDeletions": [toInventoryDeletionStatusItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindowExecutionTaskInvocations(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowExecutionTaskInvocationsRequest,
  ): Promise<DescribeMaintenanceWindowExecutionTaskInvocationsResult> {
    const body: jsonP.JSONObject = {
      WindowExecutionId: params["WindowExecutionId"],
      TaskId: params["TaskId"],
      Filters: params["Filters"]?.map(x => fromMaintenanceWindowFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindowExecutionTaskInvocations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowExecutionTaskInvocationIdentities": [toMaintenanceWindowExecutionTaskInvocationIdentity],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindowExecutionTasks(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowExecutionTasksRequest,
  ): Promise<DescribeMaintenanceWindowExecutionTasksResult> {
    const body: jsonP.JSONObject = {
      WindowExecutionId: params["WindowExecutionId"],
      Filters: params["Filters"]?.map(x => fromMaintenanceWindowFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindowExecutionTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowExecutionTaskIdentities": [toMaintenanceWindowExecutionTaskIdentity],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindowExecutions(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowExecutionsRequest,
  ): Promise<DescribeMaintenanceWindowExecutionsResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      Filters: params["Filters"]?.map(x => fromMaintenanceWindowFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindowExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowExecutions": [toMaintenanceWindowExecution],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindowSchedule(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowScheduleRequest = {},
  ): Promise<DescribeMaintenanceWindowScheduleResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      ResourceType: params["ResourceType"],
      Filters: params["Filters"]?.map(x => fromPatchOrchestratorFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindowSchedule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ScheduledWindowExecutions": [toScheduledWindowExecution],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindowTargets(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowTargetsRequest,
  ): Promise<DescribeMaintenanceWindowTargetsResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      Filters: params["Filters"]?.map(x => fromMaintenanceWindowFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindowTargets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Targets": [toMaintenanceWindowTarget],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindowTasks(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowTasksRequest,
  ): Promise<DescribeMaintenanceWindowTasksResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      Filters: params["Filters"]?.map(x => fromMaintenanceWindowFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindowTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tasks": [toMaintenanceWindowTask],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindows(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowsRequest = {},
  ): Promise<DescribeMaintenanceWindowsResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromMaintenanceWindowFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindows",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowIdentities": [toMaintenanceWindowIdentity],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeMaintenanceWindowsForTarget(
    {abortSignal, ...params}: RequestConfig & DescribeMaintenanceWindowsForTargetRequest,
  ): Promise<DescribeMaintenanceWindowsForTargetResult> {
    const body: jsonP.JSONObject = {
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      ResourceType: params["ResourceType"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeMaintenanceWindowsForTarget",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowIdentities": [toMaintenanceWindowIdentityForTarget],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeOpsItems(
    {abortSignal, ...params}: RequestConfig & DescribeOpsItemsRequest = {},
  ): Promise<DescribeOpsItemsResponse> {
    const body: jsonP.JSONObject = {
      OpsItemFilters: params["OpsItemFilters"]?.map(x => fromOpsItemFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeOpsItems",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "OpsItemSummaries": [toOpsItemSummary],
      },
    }, await resp.json());
  }

  async describeParameters(
    {abortSignal, ...params}: RequestConfig & DescribeParametersRequest = {},
  ): Promise<DescribeParametersResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromParametersFilter(x)),
      ParameterFilters: params["ParameterFilters"]?.map(x => fromParameterStringFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Parameters": [toParameterMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describePatchBaselines(
    {abortSignal, ...params}: RequestConfig & DescribePatchBaselinesRequest = {},
  ): Promise<DescribePatchBaselinesResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromPatchOrchestratorFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePatchBaselines",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineIdentities": [toPatchBaselineIdentity],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describePatchGroupState(
    {abortSignal, ...params}: RequestConfig & DescribePatchGroupStateRequest,
  ): Promise<DescribePatchGroupStateResult> {
    const body: jsonP.JSONObject = {
      PatchGroup: params["PatchGroup"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePatchGroupState",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Instances": "n",
        "InstancesWithInstalledPatches": "n",
        "InstancesWithInstalledOtherPatches": "n",
        "InstancesWithInstalledPendingRebootPatches": "n",
        "InstancesWithInstalledRejectedPatches": "n",
        "InstancesWithMissingPatches": "n",
        "InstancesWithFailedPatches": "n",
        "InstancesWithNotApplicablePatches": "n",
        "InstancesWithUnreportedNotApplicablePatches": "n",
      },
    }, await resp.json());
  }

  async describePatchGroups(
    {abortSignal, ...params}: RequestConfig & DescribePatchGroupsRequest = {},
  ): Promise<DescribePatchGroupsResult> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      Filters: params["Filters"]?.map(x => fromPatchOrchestratorFilter(x)),
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePatchGroups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Mappings": [toPatchGroupPatchBaselineMapping],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describePatchProperties(
    {abortSignal, ...params}: RequestConfig & DescribePatchPropertiesRequest,
  ): Promise<DescribePatchPropertiesResult> {
    const body: jsonP.JSONObject = {
      OperatingSystem: params["OperatingSystem"],
      Property: params["Property"],
      PatchSet: params["PatchSet"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePatchProperties",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Properties": [x => jsonP.readMap(String, String, x)],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeSessions(
    {abortSignal, ...params}: RequestConfig & DescribeSessionsRequest,
  ): Promise<DescribeSessionsResponse> {
    const body: jsonP.JSONObject = {
      State: params["State"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromSessionFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSessions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Sessions": [toSession],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAutomationExecution(
    {abortSignal, ...params}: RequestConfig & GetAutomationExecutionRequest,
  ): Promise<GetAutomationExecutionResult> {
    const body: jsonP.JSONObject = {
      AutomationExecutionId: params["AutomationExecutionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAutomationExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutomationExecution": toAutomationExecution,
      },
    }, await resp.json());
  }

  async getCalendarState(
    {abortSignal, ...params}: RequestConfig & GetCalendarStateRequest,
  ): Promise<GetCalendarStateResponse> {
    const body: jsonP.JSONObject = {
      CalendarNames: params["CalendarNames"],
      AtTime: params["AtTime"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCalendarState",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<CalendarState>(x),
        "AtTime": "s",
        "NextTransitionTime": "s",
      },
    }, await resp.json());
  }

  async getCommandInvocation(
    {abortSignal, ...params}: RequestConfig & GetCommandInvocationRequest,
  ): Promise<GetCommandInvocationResult> {
    const body: jsonP.JSONObject = {
      CommandId: params["CommandId"],
      InstanceId: params["InstanceId"],
      PluginName: params["PluginName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCommandInvocation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CommandId": "s",
        "InstanceId": "s",
        "Comment": "s",
        "DocumentName": "s",
        "DocumentVersion": "s",
        "PluginName": "s",
        "ResponseCode": "n",
        "ExecutionStartDateTime": "s",
        "ExecutionElapsedTime": "s",
        "ExecutionEndDateTime": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<CommandInvocationStatus>(x),
        "StatusDetails": "s",
        "StandardOutputContent": "s",
        "StandardOutputUrl": "s",
        "StandardErrorContent": "s",
        "StandardErrorUrl": "s",
        "CloudWatchOutputConfig": toCloudWatchOutputConfig,
      },
    }, await resp.json());
  }

  async getConnectionStatus(
    {abortSignal, ...params}: RequestConfig & GetConnectionStatusRequest,
  ): Promise<GetConnectionStatusResponse> {
    const body: jsonP.JSONObject = {
      Target: params["Target"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetConnectionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Target": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ConnectionStatus>(x),
      },
    }, await resp.json());
  }

  async getDefaultPatchBaseline(
    {abortSignal, ...params}: RequestConfig & GetDefaultPatchBaselineRequest = {},
  ): Promise<GetDefaultPatchBaselineResult> {
    const body: jsonP.JSONObject = {
      OperatingSystem: params["OperatingSystem"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDefaultPatchBaseline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
        "OperatingSystem": (x: jsonP.JSONValue) => cmnP.readEnum<OperatingSystem>(x),
      },
    }, await resp.json());
  }

  async getDeployablePatchSnapshotForInstance(
    {abortSignal, ...params}: RequestConfig & GetDeployablePatchSnapshotForInstanceRequest,
  ): Promise<GetDeployablePatchSnapshotForInstanceResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      SnapshotId: params["SnapshotId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDeployablePatchSnapshotForInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InstanceId": "s",
        "SnapshotId": "s",
        "SnapshotDownloadUrl": "s",
        "Product": "s",
      },
    }, await resp.json());
  }

  async getDocument(
    {abortSignal, ...params}: RequestConfig & GetDocumentRequest,
  ): Promise<GetDocumentResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      VersionName: params["VersionName"],
      DocumentVersion: params["DocumentVersion"],
      DocumentFormat: params["DocumentFormat"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "VersionName": "s",
        "DocumentVersion": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentStatus>(x),
        "StatusInformation": "s",
        "Content": "s",
        "DocumentType": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentType>(x),
        "DocumentFormat": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentFormat>(x),
        "Requires": [toDocumentRequires],
        "AttachmentsContent": [toAttachmentContent],
        "ReviewStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ReviewStatus>(x),
      },
    }, await resp.json());
  }

  async getInventory(
    {abortSignal, ...params}: RequestConfig & GetInventoryRequest = {},
  ): Promise<GetInventoryResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromInventoryFilter(x)),
      Aggregators: params["Aggregators"]?.map(x => fromInventoryAggregator(x)),
      ResultAttributes: params["ResultAttributes"]?.map(x => fromResultAttribute(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInventory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Entities": [toInventoryResultEntity],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getInventorySchema(
    {abortSignal, ...params}: RequestConfig & GetInventorySchemaRequest = {},
  ): Promise<GetInventorySchemaResult> {
    const body: jsonP.JSONObject = {
      TypeName: params["TypeName"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
      Aggregator: params["Aggregator"],
      SubType: params["SubType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInventorySchema",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Schemas": [toInventoryItemSchema],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & GetMaintenanceWindowRequest,
  ): Promise<GetMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
        "Name": "s",
        "Description": "s",
        "StartDate": "s",
        "EndDate": "s",
        "Schedule": "s",
        "ScheduleTimezone": "s",
        "ScheduleOffset": "n",
        "NextExecutionTime": "s",
        "Duration": "n",
        "Cutoff": "n",
        "AllowUnassociatedTargets": "b",
        "Enabled": "b",
        "CreatedDate": "d",
        "ModifiedDate": "d",
      },
    }, await resp.json());
  }

  async getMaintenanceWindowExecution(
    {abortSignal, ...params}: RequestConfig & GetMaintenanceWindowExecutionRequest,
  ): Promise<GetMaintenanceWindowExecutionResult> {
    const body: jsonP.JSONObject = {
      WindowExecutionId: params["WindowExecutionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMaintenanceWindowExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowExecutionId": "s",
        "TaskIds": ["s"],
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowExecutionStatus>(x),
        "StatusDetails": "s",
        "StartTime": "d",
        "EndTime": "d",
      },
    }, await resp.json());
  }

  async getMaintenanceWindowExecutionTask(
    {abortSignal, ...params}: RequestConfig & GetMaintenanceWindowExecutionTaskRequest,
  ): Promise<GetMaintenanceWindowExecutionTaskResult> {
    const body: jsonP.JSONObject = {
      WindowExecutionId: params["WindowExecutionId"],
      TaskId: params["TaskId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMaintenanceWindowExecutionTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowExecutionId": "s",
        "TaskExecutionId": "s",
        "TaskArn": "s",
        "ServiceRole": "s",
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowTaskType>(x),
        "TaskParameters": [x => jsonP.readMap(String, toMaintenanceWindowTaskParameterValueExpression, x)],
        "Priority": "n",
        "MaxConcurrency": "s",
        "MaxErrors": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowExecutionStatus>(x),
        "StatusDetails": "s",
        "StartTime": "d",
        "EndTime": "d",
      },
    }, await resp.json());
  }

  async getMaintenanceWindowExecutionTaskInvocation(
    {abortSignal, ...params}: RequestConfig & GetMaintenanceWindowExecutionTaskInvocationRequest,
  ): Promise<GetMaintenanceWindowExecutionTaskInvocationResult> {
    const body: jsonP.JSONObject = {
      WindowExecutionId: params["WindowExecutionId"],
      TaskId: params["TaskId"],
      InvocationId: params["InvocationId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMaintenanceWindowExecutionTaskInvocation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowExecutionId": "s",
        "TaskExecutionId": "s",
        "InvocationId": "s",
        "ExecutionId": "s",
        "TaskType": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowTaskType>(x),
        "Parameters": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowExecutionStatus>(x),
        "StatusDetails": "s",
        "StartTime": "d",
        "EndTime": "d",
        "OwnerInformation": "s",
        "WindowTargetId": "s",
      },
    }, await resp.json());
  }

  async getMaintenanceWindowTask(
    {abortSignal, ...params}: RequestConfig & GetMaintenanceWindowTaskRequest,
  ): Promise<GetMaintenanceWindowTaskResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      WindowTaskId: params["WindowTaskId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetMaintenanceWindowTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
        "WindowTaskId": "s",
        "Targets": [toTarget],
        "TaskArn": "s",
        "ServiceRoleArn": "s",
        "TaskType": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowTaskType>(x),
        "TaskParameters": x => jsonP.readMap(String, toMaintenanceWindowTaskParameterValueExpression, x),
        "TaskInvocationParameters": toMaintenanceWindowTaskInvocationParameters,
        "Priority": "n",
        "MaxConcurrency": "s",
        "MaxErrors": "s",
        "LoggingInfo": toLoggingInfo,
        "Name": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async getOpsItem(
    {abortSignal, ...params}: RequestConfig & GetOpsItemRequest,
  ): Promise<GetOpsItemResponse> {
    const body: jsonP.JSONObject = {
      OpsItemId: params["OpsItemId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOpsItem",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OpsItem": toOpsItem,
      },
    }, await resp.json());
  }

  async getOpsMetadata(
    {abortSignal, ...params}: RequestConfig & GetOpsMetadataRequest,
  ): Promise<GetOpsMetadataResult> {
    const body: jsonP.JSONObject = {
      OpsMetadataArn: params["OpsMetadataArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOpsMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceId": "s",
        "Metadata": x => jsonP.readMap(String, toMetadataValue, x),
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getOpsSummary(
    {abortSignal, ...params}: RequestConfig & GetOpsSummaryRequest = {},
  ): Promise<GetOpsSummaryResult> {
    const body: jsonP.JSONObject = {
      SyncName: params["SyncName"],
      Filters: params["Filters"]?.map(x => fromOpsFilter(x)),
      Aggregators: params["Aggregators"]?.map(x => fromOpsAggregator(x)),
      ResultAttributes: params["ResultAttributes"]?.map(x => fromOpsResultAttribute(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOpsSummary",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Entities": [toOpsEntity],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getParameter(
    {abortSignal, ...params}: RequestConfig & GetParameterRequest,
  ): Promise<GetParameterResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      WithDecryption: params["WithDecryption"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetParameter",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Parameter": toParameter,
      },
    }, await resp.json());
  }

  async getParameterHistory(
    {abortSignal, ...params}: RequestConfig & GetParameterHistoryRequest,
  ): Promise<GetParameterHistoryResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      WithDecryption: params["WithDecryption"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetParameterHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Parameters": [toParameterHistory],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getParameters(
    {abortSignal, ...params}: RequestConfig & GetParametersRequest,
  ): Promise<GetParametersResult> {
    const body: jsonP.JSONObject = {
      Names: params["Names"],
      WithDecryption: params["WithDecryption"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetParameters",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Parameters": [toParameter],
        "InvalidParameters": ["s"],
      },
    }, await resp.json());
  }

  async getParametersByPath(
    {abortSignal, ...params}: RequestConfig & GetParametersByPathRequest,
  ): Promise<GetParametersByPathResult> {
    const body: jsonP.JSONObject = {
      Path: params["Path"],
      Recursive: params["Recursive"],
      ParameterFilters: params["ParameterFilters"]?.map(x => fromParameterStringFilter(x)),
      WithDecryption: params["WithDecryption"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetParametersByPath",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Parameters": [toParameter],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getPatchBaseline(
    {abortSignal, ...params}: RequestConfig & GetPatchBaselineRequest,
  ): Promise<GetPatchBaselineResult> {
    const body: jsonP.JSONObject = {
      BaselineId: params["BaselineId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPatchBaseline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
        "Name": "s",
        "OperatingSystem": (x: jsonP.JSONValue) => cmnP.readEnum<OperatingSystem>(x),
        "GlobalFilters": toPatchFilterGroup,
        "ApprovalRules": toPatchRuleGroup,
        "ApprovedPatches": ["s"],
        "ApprovedPatchesComplianceLevel": (x: jsonP.JSONValue) => cmnP.readEnum<PatchComplianceLevel>(x),
        "ApprovedPatchesEnableNonSecurity": "b",
        "RejectedPatches": ["s"],
        "RejectedPatchesAction": (x: jsonP.JSONValue) => cmnP.readEnum<PatchAction>(x),
        "PatchGroups": ["s"],
        "CreatedDate": "d",
        "ModifiedDate": "d",
        "Description": "s",
        "Sources": [toPatchSource],
      },
    }, await resp.json());
  }

  async getPatchBaselineForPatchGroup(
    {abortSignal, ...params}: RequestConfig & GetPatchBaselineForPatchGroupRequest,
  ): Promise<GetPatchBaselineForPatchGroupResult> {
    const body: jsonP.JSONObject = {
      PatchGroup: params["PatchGroup"],
      OperatingSystem: params["OperatingSystem"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPatchBaselineForPatchGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
        "PatchGroup": "s",
        "OperatingSystem": (x: jsonP.JSONValue) => cmnP.readEnum<OperatingSystem>(x),
      },
    }, await resp.json());
  }

  async getServiceSetting(
    {abortSignal, ...params}: RequestConfig & GetServiceSettingRequest,
  ): Promise<GetServiceSettingResult> {
    const body: jsonP.JSONObject = {
      SettingId: params["SettingId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetServiceSetting",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceSetting": toServiceSetting,
      },
    }, await resp.json());
  }

  async labelParameterVersion(
    {abortSignal, ...params}: RequestConfig & LabelParameterVersionRequest,
  ): Promise<LabelParameterVersionResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ParameterVersion: params["ParameterVersion"],
      Labels: params["Labels"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "LabelParameterVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "InvalidLabels": ["s"],
        "ParameterVersion": "n",
      },
    }, await resp.json());
  }

  async listAssociationVersions(
    {abortSignal, ...params}: RequestConfig & ListAssociationVersionsRequest,
  ): Promise<ListAssociationVersionsResult> {
    const body: jsonP.JSONObject = {
      AssociationId: params["AssociationId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssociationVersions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationVersions": [toAssociationVersionInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAssociations(
    {abortSignal, ...params}: RequestConfig & ListAssociationsRequest = {},
  ): Promise<ListAssociationsResult> {
    const body: jsonP.JSONObject = {
      AssociationFilterList: params["AssociationFilterList"]?.map(x => fromAssociationFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssociations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Associations": [toAssociation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCommandInvocations(
    {abortSignal, ...params}: RequestConfig & ListCommandInvocationsRequest = {},
  ): Promise<ListCommandInvocationsResult> {
    const body: jsonP.JSONObject = {
      CommandId: params["CommandId"],
      InstanceId: params["InstanceId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromCommandFilter(x)),
      Details: params["Details"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCommandInvocations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CommandInvocations": [toCommandInvocation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCommands(
    {abortSignal, ...params}: RequestConfig & ListCommandsRequest = {},
  ): Promise<ListCommandsResult> {
    const body: jsonP.JSONObject = {
      CommandId: params["CommandId"],
      InstanceId: params["InstanceId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromCommandFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCommands",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Commands": [toCommand],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listComplianceItems(
    {abortSignal, ...params}: RequestConfig & ListComplianceItemsRequest = {},
  ): Promise<ListComplianceItemsResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromComplianceStringFilter(x)),
      ResourceIds: params["ResourceIds"],
      ResourceTypes: params["ResourceTypes"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListComplianceItems",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceItems": [toComplianceItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listComplianceSummaries(
    {abortSignal, ...params}: RequestConfig & ListComplianceSummariesRequest = {},
  ): Promise<ListComplianceSummariesResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromComplianceStringFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListComplianceSummaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ComplianceSummaryItems": [toComplianceSummaryItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDocumentMetadataHistory(
    {abortSignal, ...params}: RequestConfig & ListDocumentMetadataHistoryRequest,
  ): Promise<ListDocumentMetadataHistoryResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DocumentVersion: params["DocumentVersion"],
      Metadata: params["Metadata"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDocumentMetadataHistory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "DocumentVersion": "s",
        "Author": "s",
        "Metadata": toDocumentMetadataResponseInfo,
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDocumentVersions(
    {abortSignal, ...params}: RequestConfig & ListDocumentVersionsRequest,
  ): Promise<ListDocumentVersionsResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDocumentVersions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentVersions": [toDocumentVersionInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDocuments(
    {abortSignal, ...params}: RequestConfig & ListDocumentsRequest = {},
  ): Promise<ListDocumentsResult> {
    const body: jsonP.JSONObject = {
      DocumentFilterList: params["DocumentFilterList"]?.map(x => fromDocumentFilter(x)),
      Filters: params["Filters"]?.map(x => fromDocumentKeyValuesFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDocuments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentIdentifiers": [toDocumentIdentifier],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInventoryEntries(
    {abortSignal, ...params}: RequestConfig & ListInventoryEntriesRequest,
  ): Promise<ListInventoryEntriesResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      TypeName: params["TypeName"],
      Filters: params["Filters"]?.map(x => fromInventoryFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInventoryEntries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TypeName": "s",
        "InstanceId": "s",
        "SchemaVersion": "s",
        "CaptureTime": "s",
        "Entries": [x => jsonP.readMap(String, String, x)],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listOpsItemEvents(
    {abortSignal, ...params}: RequestConfig & ListOpsItemEventsRequest = {},
  ): Promise<ListOpsItemEventsResponse> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromOpsItemEventFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOpsItemEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Summaries": [toOpsItemEventSummary],
      },
    }, await resp.json());
  }

  async listOpsMetadata(
    {abortSignal, ...params}: RequestConfig & ListOpsMetadataRequest = {},
  ): Promise<ListOpsMetadataResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromOpsMetadataFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListOpsMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OpsMetadataList": [toOpsMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceComplianceSummaries(
    {abortSignal, ...params}: RequestConfig & ListResourceComplianceSummariesRequest = {},
  ): Promise<ListResourceComplianceSummariesResult> {
    const body: jsonP.JSONObject = {
      Filters: params["Filters"]?.map(x => fromComplianceStringFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceComplianceSummaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceComplianceSummaryItems": [toResourceComplianceSummaryItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceDataSync(
    {abortSignal, ...params}: RequestConfig & ListResourceDataSyncRequest = {},
  ): Promise<ListResourceDataSyncResult> {
    const body: jsonP.JSONObject = {
      SyncType: params["SyncType"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceDataSync",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceDataSyncItems": [toResourceDataSyncItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResult> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TagList": [toTag],
      },
    }, await resp.json());
  }

  async modifyDocumentPermission(
    {abortSignal, ...params}: RequestConfig & ModifyDocumentPermissionRequest,
  ): Promise<ModifyDocumentPermissionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      PermissionType: params["PermissionType"],
      AccountIdsToAdd: params["AccountIdsToAdd"],
      AccountIdsToRemove: params["AccountIdsToRemove"],
      SharedDocumentVersion: params["SharedDocumentVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyDocumentPermission",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putComplianceItems(
    {abortSignal, ...params}: RequestConfig & PutComplianceItemsRequest,
  ): Promise<PutComplianceItemsResult> {
    const body: jsonP.JSONObject = {
      ResourceId: params["ResourceId"],
      ResourceType: params["ResourceType"],
      ComplianceType: params["ComplianceType"],
      ExecutionSummary: fromComplianceExecutionSummary(params["ExecutionSummary"]),
      Items: params["Items"]?.map(x => fromComplianceItemEntry(x)),
      ItemContentHash: params["ItemContentHash"],
      UploadType: params["UploadType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutComplianceItems",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putInventory(
    {abortSignal, ...params}: RequestConfig & PutInventoryRequest,
  ): Promise<PutInventoryResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      Items: params["Items"]?.map(x => fromInventoryItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInventory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
      },
    }, await resp.json());
  }

  async putParameter(
    {abortSignal, ...params}: RequestConfig & PutParameterRequest,
  ): Promise<PutParameterResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      Value: params["Value"],
      Type: params["Type"],
      KeyId: params["KeyId"],
      Overwrite: params["Overwrite"],
      AllowedPattern: params["AllowedPattern"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      Tier: params["Tier"],
      Policies: params["Policies"],
      DataType: params["DataType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutParameter",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Version": "n",
        "Tier": (x: jsonP.JSONValue) => cmnP.readEnum<ParameterTier>(x),
      },
    }, await resp.json());
  }

  async registerDefaultPatchBaseline(
    {abortSignal, ...params}: RequestConfig & RegisterDefaultPatchBaselineRequest,
  ): Promise<RegisterDefaultPatchBaselineResult> {
    const body: jsonP.JSONObject = {
      BaselineId: params["BaselineId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterDefaultPatchBaseline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
      },
    }, await resp.json());
  }

  async registerPatchBaselineForPatchGroup(
    {abortSignal, ...params}: RequestConfig & RegisterPatchBaselineForPatchGroupRequest,
  ): Promise<RegisterPatchBaselineForPatchGroupResult> {
    const body: jsonP.JSONObject = {
      BaselineId: params["BaselineId"],
      PatchGroup: params["PatchGroup"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterPatchBaselineForPatchGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
        "PatchGroup": "s",
      },
    }, await resp.json());
  }

  async registerTargetWithMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & RegisterTargetWithMaintenanceWindowRequest,
  ): Promise<RegisterTargetWithMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      ResourceType: params["ResourceType"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      OwnerInformation: params["OwnerInformation"],
      Name: params["Name"],
      Description: params["Description"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterTargetWithMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowTargetId": "s",
      },
    }, await resp.json());
  }

  async registerTaskWithMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & RegisterTaskWithMaintenanceWindowRequest,
  ): Promise<RegisterTaskWithMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      TaskArn: params["TaskArn"],
      ServiceRoleArn: params["ServiceRoleArn"],
      TaskType: params["TaskType"],
      TaskParameters: jsonP.serializeMap(params["TaskParameters"], x => fromMaintenanceWindowTaskParameterValueExpression(x)),
      TaskInvocationParameters: fromMaintenanceWindowTaskInvocationParameters(params["TaskInvocationParameters"]),
      Priority: params["Priority"],
      MaxConcurrency: params["MaxConcurrency"],
      MaxErrors: params["MaxErrors"],
      LoggingInfo: fromLoggingInfo(params["LoggingInfo"]),
      Name: params["Name"],
      Description: params["Description"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterTaskWithMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowTaskId": "s",
      },
    }, await resp.json());
  }

  async removeTagsFromResource(
    {abortSignal, ...params}: RequestConfig & RemoveTagsFromResourceRequest,
  ): Promise<RemoveTagsFromResourceResult> {
    const body: jsonP.JSONObject = {
      ResourceType: params["ResourceType"],
      ResourceId: params["ResourceId"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTagsFromResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async resetServiceSetting(
    {abortSignal, ...params}: RequestConfig & ResetServiceSettingRequest,
  ): Promise<ResetServiceSettingResult> {
    const body: jsonP.JSONObject = {
      SettingId: params["SettingId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetServiceSetting",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceSetting": toServiceSetting,
      },
    }, await resp.json());
  }

  async resumeSession(
    {abortSignal, ...params}: RequestConfig & ResumeSessionRequest,
  ): Promise<ResumeSessionResponse> {
    const body: jsonP.JSONObject = {
      SessionId: params["SessionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResumeSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SessionId": "s",
        "TokenValue": "s",
        "StreamUrl": "s",
      },
    }, await resp.json());
  }

  async sendAutomationSignal(
    {abortSignal, ...params}: RequestConfig & SendAutomationSignalRequest,
  ): Promise<SendAutomationSignalResult> {
    const body: jsonP.JSONObject = {
      AutomationExecutionId: params["AutomationExecutionId"],
      SignalType: params["SignalType"],
      Payload: params["Payload"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendAutomationSignal",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async sendCommand(
    {abortSignal, ...params}: RequestConfig & SendCommandRequest,
  ): Promise<SendCommandResult> {
    const body: jsonP.JSONObject = {
      InstanceIds: params["InstanceIds"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      DocumentName: params["DocumentName"],
      DocumentVersion: params["DocumentVersion"],
      DocumentHash: params["DocumentHash"],
      DocumentHashType: params["DocumentHashType"],
      TimeoutSeconds: params["TimeoutSeconds"],
      Comment: params["Comment"],
      Parameters: params["Parameters"],
      OutputS3Region: params["OutputS3Region"],
      OutputS3BucketName: params["OutputS3BucketName"],
      OutputS3KeyPrefix: params["OutputS3KeyPrefix"],
      MaxConcurrency: params["MaxConcurrency"],
      MaxErrors: params["MaxErrors"],
      ServiceRoleArn: params["ServiceRoleArn"],
      NotificationConfig: fromNotificationConfig(params["NotificationConfig"]),
      CloudWatchOutputConfig: fromCloudWatchOutputConfig(params["CloudWatchOutputConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendCommand",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Command": toCommand,
      },
    }, await resp.json());
  }

  async startAssociationsOnce(
    {abortSignal, ...params}: RequestConfig & StartAssociationsOnceRequest,
  ): Promise<StartAssociationsOnceResult> {
    const body: jsonP.JSONObject = {
      AssociationIds: params["AssociationIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartAssociationsOnce",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startAutomationExecution(
    {abortSignal, ...params}: RequestConfig & StartAutomationExecutionRequest,
  ): Promise<StartAutomationExecutionResult> {
    const body: jsonP.JSONObject = {
      DocumentName: params["DocumentName"],
      DocumentVersion: params["DocumentVersion"],
      Parameters: params["Parameters"],
      ClientToken: params["ClientToken"],
      Mode: params["Mode"],
      TargetParameterName: params["TargetParameterName"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      TargetMaps: params["TargetMaps"],
      MaxConcurrency: params["MaxConcurrency"],
      MaxErrors: params["MaxErrors"],
      TargetLocations: params["TargetLocations"]?.map(x => fromTargetLocation(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartAutomationExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutomationExecutionId": "s",
      },
    }, await resp.json());
  }

  async startChangeRequestExecution(
    {abortSignal, ...params}: RequestConfig & StartChangeRequestExecutionRequest,
  ): Promise<StartChangeRequestExecutionResult> {
    const body: jsonP.JSONObject = {
      ScheduledTime: jsonP.serializeDate_unixTimestamp(params["ScheduledTime"]),
      DocumentName: params["DocumentName"],
      DocumentVersion: params["DocumentVersion"],
      Parameters: params["Parameters"],
      ChangeRequestName: params["ChangeRequestName"],
      ClientToken: params["ClientToken"],
      Runbooks: params["Runbooks"]?.map(x => fromRunbook(x)),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartChangeRequestExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutomationExecutionId": "s",
      },
    }, await resp.json());
  }

  async startSession(
    {abortSignal, ...params}: RequestConfig & StartSessionRequest,
  ): Promise<StartSessionResponse> {
    const body: jsonP.JSONObject = {
      Target: params["Target"],
      DocumentName: params["DocumentName"],
      Parameters: params["Parameters"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SessionId": "s",
        "TokenValue": "s",
        "StreamUrl": "s",
      },
    }, await resp.json());
  }

  async stopAutomationExecution(
    {abortSignal, ...params}: RequestConfig & StopAutomationExecutionRequest,
  ): Promise<StopAutomationExecutionResult> {
    const body: jsonP.JSONObject = {
      AutomationExecutionId: params["AutomationExecutionId"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopAutomationExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async terminateSession(
    {abortSignal, ...params}: RequestConfig & TerminateSessionRequest,
  ): Promise<TerminateSessionResponse> {
    const body: jsonP.JSONObject = {
      SessionId: params["SessionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TerminateSession",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SessionId": "s",
      },
    }, await resp.json());
  }

  async updateAssociation(
    {abortSignal, ...params}: RequestConfig & UpdateAssociationRequest,
  ): Promise<UpdateAssociationResult> {
    const body: jsonP.JSONObject = {
      AssociationId: params["AssociationId"],
      Parameters: params["Parameters"],
      DocumentVersion: params["DocumentVersion"],
      ScheduleExpression: params["ScheduleExpression"],
      OutputLocation: fromInstanceAssociationOutputLocation(params["OutputLocation"]),
      Name: params["Name"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      AssociationName: params["AssociationName"],
      AssociationVersion: params["AssociationVersion"],
      AutomationTargetParameterName: params["AutomationTargetParameterName"],
      MaxErrors: params["MaxErrors"],
      MaxConcurrency: params["MaxConcurrency"],
      ComplianceSeverity: params["ComplianceSeverity"],
      SyncCompliance: params["SyncCompliance"],
      ApplyOnlyAtCronInterval: params["ApplyOnlyAtCronInterval"],
      TargetLocations: params["TargetLocations"]?.map(x => fromTargetLocation(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssociation",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationDescription": toAssociationDescription,
      },
    }, await resp.json());
  }

  async updateAssociationStatus(
    {abortSignal, ...params}: RequestConfig & UpdateAssociationStatusRequest,
  ): Promise<UpdateAssociationStatusResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      InstanceId: params["InstanceId"],
      AssociationStatus: fromAssociationStatus(params["AssociationStatus"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssociationStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AssociationDescription": toAssociationDescription,
      },
    }, await resp.json());
  }

  async updateDocument(
    {abortSignal, ...params}: RequestConfig & UpdateDocumentRequest,
  ): Promise<UpdateDocumentResult> {
    const body: jsonP.JSONObject = {
      Content: params["Content"],
      Attachments: params["Attachments"]?.map(x => fromAttachmentsSource(x)),
      Name: params["Name"],
      VersionName: params["VersionName"],
      DocumentVersion: params["DocumentVersion"],
      DocumentFormat: params["DocumentFormat"],
      TargetType: params["TargetType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentDescription": toDocumentDescription,
      },
    }, await resp.json());
  }

  async updateDocumentDefaultVersion(
    {abortSignal, ...params}: RequestConfig & UpdateDocumentDefaultVersionRequest,
  ): Promise<UpdateDocumentDefaultVersionResult> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DocumentVersion: params["DocumentVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDocumentDefaultVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": toDocumentDefaultVersionDescription,
      },
    }, await resp.json());
  }

  async updateDocumentMetadata(
    {abortSignal, ...params}: RequestConfig & UpdateDocumentMetadataRequest,
  ): Promise<UpdateDocumentMetadataResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      DocumentVersion: params["DocumentVersion"],
      DocumentReviews: fromDocumentReviews(params["DocumentReviews"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDocumentMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateMaintenanceWindow(
    {abortSignal, ...params}: RequestConfig & UpdateMaintenanceWindowRequest,
  ): Promise<UpdateMaintenanceWindowResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      Name: params["Name"],
      Description: params["Description"],
      StartDate: params["StartDate"],
      EndDate: params["EndDate"],
      Schedule: params["Schedule"],
      ScheduleTimezone: params["ScheduleTimezone"],
      ScheduleOffset: params["ScheduleOffset"],
      Duration: params["Duration"],
      Cutoff: params["Cutoff"],
      AllowUnassociatedTargets: params["AllowUnassociatedTargets"],
      Enabled: params["Enabled"],
      Replace: params["Replace"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMaintenanceWindow",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
        "Name": "s",
        "Description": "s",
        "StartDate": "s",
        "EndDate": "s",
        "Schedule": "s",
        "ScheduleTimezone": "s",
        "ScheduleOffset": "n",
        "Duration": "n",
        "Cutoff": "n",
        "AllowUnassociatedTargets": "b",
        "Enabled": "b",
      },
    }, await resp.json());
  }

  async updateMaintenanceWindowTarget(
    {abortSignal, ...params}: RequestConfig & UpdateMaintenanceWindowTargetRequest,
  ): Promise<UpdateMaintenanceWindowTargetResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      WindowTargetId: params["WindowTargetId"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      OwnerInformation: params["OwnerInformation"],
      Name: params["Name"],
      Description: params["Description"],
      Replace: params["Replace"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMaintenanceWindowTarget",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
        "WindowTargetId": "s",
        "Targets": [toTarget],
        "OwnerInformation": "s",
        "Name": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async updateMaintenanceWindowTask(
    {abortSignal, ...params}: RequestConfig & UpdateMaintenanceWindowTaskRequest,
  ): Promise<UpdateMaintenanceWindowTaskResult> {
    const body: jsonP.JSONObject = {
      WindowId: params["WindowId"],
      WindowTaskId: params["WindowTaskId"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
      TaskArn: params["TaskArn"],
      ServiceRoleArn: params["ServiceRoleArn"],
      TaskParameters: jsonP.serializeMap(params["TaskParameters"], x => fromMaintenanceWindowTaskParameterValueExpression(x)),
      TaskInvocationParameters: fromMaintenanceWindowTaskInvocationParameters(params["TaskInvocationParameters"]),
      Priority: params["Priority"],
      MaxConcurrency: params["MaxConcurrency"],
      MaxErrors: params["MaxErrors"],
      LoggingInfo: fromLoggingInfo(params["LoggingInfo"]),
      Name: params["Name"],
      Description: params["Description"],
      Replace: params["Replace"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMaintenanceWindowTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WindowId": "s",
        "WindowTaskId": "s",
        "Targets": [toTarget],
        "TaskArn": "s",
        "ServiceRoleArn": "s",
        "TaskParameters": x => jsonP.readMap(String, toMaintenanceWindowTaskParameterValueExpression, x),
        "TaskInvocationParameters": toMaintenanceWindowTaskInvocationParameters,
        "Priority": "n",
        "MaxConcurrency": "s",
        "MaxErrors": "s",
        "LoggingInfo": toLoggingInfo,
        "Name": "s",
        "Description": "s",
      },
    }, await resp.json());
  }

  async updateManagedInstanceRole(
    {abortSignal, ...params}: RequestConfig & UpdateManagedInstanceRoleRequest,
  ): Promise<UpdateManagedInstanceRoleResult> {
    const body: jsonP.JSONObject = {
      InstanceId: params["InstanceId"],
      IamRole: params["IamRole"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateManagedInstanceRole",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateOpsItem(
    {abortSignal, ...params}: RequestConfig & UpdateOpsItemRequest,
  ): Promise<UpdateOpsItemResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      OperationalData: jsonP.serializeMap(params["OperationalData"], x => fromOpsItemDataValue(x)),
      OperationalDataToDelete: params["OperationalDataToDelete"],
      Notifications: params["Notifications"]?.map(x => fromOpsItemNotification(x)),
      Priority: params["Priority"],
      RelatedOpsItems: params["RelatedOpsItems"]?.map(x => fromRelatedOpsItem(x)),
      Status: params["Status"],
      OpsItemId: params["OpsItemId"],
      Title: params["Title"],
      Category: params["Category"],
      Severity: params["Severity"],
      ActualStartTime: jsonP.serializeDate_unixTimestamp(params["ActualStartTime"]),
      ActualEndTime: jsonP.serializeDate_unixTimestamp(params["ActualEndTime"]),
      PlannedStartTime: jsonP.serializeDate_unixTimestamp(params["PlannedStartTime"]),
      PlannedEndTime: jsonP.serializeDate_unixTimestamp(params["PlannedEndTime"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateOpsItem",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateOpsMetadata(
    {abortSignal, ...params}: RequestConfig & UpdateOpsMetadataRequest,
  ): Promise<UpdateOpsMetadataResult> {
    const body: jsonP.JSONObject = {
      OpsMetadataArn: params["OpsMetadataArn"],
      MetadataToUpdate: jsonP.serializeMap(params["MetadataToUpdate"], x => fromMetadataValue(x)),
      KeysToDelete: params["KeysToDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateOpsMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "OpsMetadataArn": "s",
      },
    }, await resp.json());
  }

  async updatePatchBaseline(
    {abortSignal, ...params}: RequestConfig & UpdatePatchBaselineRequest,
  ): Promise<UpdatePatchBaselineResult> {
    const body: jsonP.JSONObject = {
      BaselineId: params["BaselineId"],
      Name: params["Name"],
      GlobalFilters: fromPatchFilterGroup(params["GlobalFilters"]),
      ApprovalRules: fromPatchRuleGroup(params["ApprovalRules"]),
      ApprovedPatches: params["ApprovedPatches"],
      ApprovedPatchesComplianceLevel: params["ApprovedPatchesComplianceLevel"],
      ApprovedPatchesEnableNonSecurity: params["ApprovedPatchesEnableNonSecurity"],
      RejectedPatches: params["RejectedPatches"],
      RejectedPatchesAction: params["RejectedPatchesAction"],
      Description: params["Description"],
      Sources: params["Sources"]?.map(x => fromPatchSource(x)),
      Replace: params["Replace"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePatchBaseline",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BaselineId": "s",
        "Name": "s",
        "OperatingSystem": (x: jsonP.JSONValue) => cmnP.readEnum<OperatingSystem>(x),
        "GlobalFilters": toPatchFilterGroup,
        "ApprovalRules": toPatchRuleGroup,
        "ApprovedPatches": ["s"],
        "ApprovedPatchesComplianceLevel": (x: jsonP.JSONValue) => cmnP.readEnum<PatchComplianceLevel>(x),
        "ApprovedPatchesEnableNonSecurity": "b",
        "RejectedPatches": ["s"],
        "RejectedPatchesAction": (x: jsonP.JSONValue) => cmnP.readEnum<PatchAction>(x),
        "CreatedDate": "d",
        "ModifiedDate": "d",
        "Description": "s",
        "Sources": [toPatchSource],
      },
    }, await resp.json());
  }

  async updateResourceDataSync(
    {abortSignal, ...params}: RequestConfig & UpdateResourceDataSyncRequest,
  ): Promise<UpdateResourceDataSyncResult> {
    const body: jsonP.JSONObject = {
      SyncName: params["SyncName"],
      SyncType: params["SyncType"],
      SyncSource: fromResourceDataSyncSource(params["SyncSource"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateResourceDataSync",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateServiceSetting(
    {abortSignal, ...params}: RequestConfig & UpdateServiceSettingRequest,
  ): Promise<UpdateServiceSettingResult> {
    const body: jsonP.JSONObject = {
      SettingId: params["SettingId"],
      SettingValue: params["SettingValue"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateServiceSetting",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  // Resource State Waiters

  /** Checks state up to 20 times, 5 seconds apart (about 2 minutes max wait time). */
  async waitForCommandExecuted(
    params: RequestConfig & GetCommandInvocationRequest,
  ): Promise<GetCommandInvocationResult> {
    const errMessage = 'ResourceNotReady: Resource is not in the state CommandExecuted';
    for (let i = 0; i < 20; i++) {
      const resp = await this.getCommandInvocation(params);
      const field = resp?.Status;
      if (field === "Pending") continue;
      if (field === "InProgress") continue;
      if (field === "Delayed") continue;
      if (field === "Success") return resp;
      if (field === "Cancelled") throw new Error(errMessage);
      if (field === "TimedOut") throw new Error(errMessage);
      if (field === "Failed") throw new Error(errMessage);
      if (field === "Cancelling") throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 5000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface AddTagsToResourceRequest {
  ResourceType: ResourceTypeForTagging;
  ResourceId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface CancelCommandRequest {
  CommandId: string;
  InstanceIds?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CancelMaintenanceWindowExecutionRequest {
  WindowExecutionId: string;
}

// refs: 1 - tags: named, input
export interface CreateActivationRequest {
  Description?: string | null;
  DefaultInstanceName?: string | null;
  IamRole: string;
  RegistrationLimit?: number | null;
  ExpirationDate?: Date | number | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateAssociationRequest {
  Name: string;
  DocumentVersion?: string | null;
  InstanceId?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  Targets?: Target[] | null;
  ScheduleExpression?: string | null;
  OutputLocation?: InstanceAssociationOutputLocation | null;
  AssociationName?: string | null;
  AutomationTargetParameterName?: string | null;
  MaxErrors?: string | null;
  MaxConcurrency?: string | null;
  ComplianceSeverity?: AssociationComplianceSeverity | null;
  SyncCompliance?: AssociationSyncCompliance | null;
  ApplyOnlyAtCronInterval?: boolean | null;
  TargetLocations?: TargetLocation[] | null;
}

// refs: 1 - tags: named, input
export interface CreateAssociationBatchRequest {
  Entries: CreateAssociationBatchRequestEntry[];
}

// refs: 1 - tags: named, input
export interface CreateDocumentRequest {
  Content: string;
  Requires?: DocumentRequires[] | null;
  Attachments?: AttachmentsSource[] | null;
  Name: string;
  VersionName?: string | null;
  DocumentType?: DocumentType | null;
  DocumentFormat?: DocumentFormat | null;
  TargetType?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateMaintenanceWindowRequest {
  Name: string;
  Description?: string | null;
  StartDate?: string | null;
  EndDate?: string | null;
  Schedule: string;
  ScheduleTimezone?: string | null;
  ScheduleOffset?: number | null;
  Duration: number;
  Cutoff: number;
  AllowUnassociatedTargets: boolean;
  ClientToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateOpsItemRequest {
  Description: string;
  OpsItemType?: string | null;
  OperationalData?: { [key: string]: OpsItemDataValue | null | undefined } | null;
  Notifications?: OpsItemNotification[] | null;
  Priority?: number | null;
  RelatedOpsItems?: RelatedOpsItem[] | null;
  Source: string;
  Title: string;
  Tags?: Tag[] | null;
  Category?: string | null;
  Severity?: string | null;
  ActualStartTime?: Date | number | null;
  ActualEndTime?: Date | number | null;
  PlannedStartTime?: Date | number | null;
  PlannedEndTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface CreateOpsMetadataRequest {
  ResourceId: string;
  Metadata?: { [key: string]: MetadataValue | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreatePatchBaselineRequest {
  OperatingSystem?: OperatingSystem | null;
  Name: string;
  GlobalFilters?: PatchFilterGroup | null;
  ApprovalRules?: PatchRuleGroup | null;
  ApprovedPatches?: string[] | null;
  ApprovedPatchesComplianceLevel?: PatchComplianceLevel | null;
  ApprovedPatchesEnableNonSecurity?: boolean | null;
  RejectedPatches?: string[] | null;
  RejectedPatchesAction?: PatchAction | null;
  Description?: string | null;
  Sources?: PatchSource[] | null;
  ClientToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateResourceDataSyncRequest {
  SyncName: string;
  S3Destination?: ResourceDataSyncS3Destination | null;
  SyncType?: string | null;
  SyncSource?: ResourceDataSyncSource | null;
}

// refs: 1 - tags: named, input
export interface DeleteActivationRequest {
  ActivationId: string;
}

// refs: 1 - tags: named, input
export interface DeleteAssociationRequest {
  Name?: string | null;
  InstanceId?: string | null;
  AssociationId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDocumentRequest {
  Name: string;
  DocumentVersion?: string | null;
  VersionName?: string | null;
  Force?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteInventoryRequest {
  TypeName: string;
  SchemaDeleteOption?: InventorySchemaDeleteOption | null;
  DryRun?: boolean | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteMaintenanceWindowRequest {
  WindowId: string;
}

// refs: 1 - tags: named, input
export interface DeleteOpsMetadataRequest {
  OpsMetadataArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteParameterRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteParametersRequest {
  Names: string[];
}

// refs: 1 - tags: named, input
export interface DeletePatchBaselineRequest {
  BaselineId: string;
}

// refs: 1 - tags: named, input
export interface DeleteResourceDataSyncRequest {
  SyncName: string;
  SyncType?: string | null;
}

// refs: 1 - tags: named, input
export interface DeregisterManagedInstanceRequest {
  InstanceId: string;
}

// refs: 1 - tags: named, input
export interface DeregisterPatchBaselineForPatchGroupRequest {
  BaselineId: string;
  PatchGroup: string;
}

// refs: 1 - tags: named, input
export interface DeregisterTargetFromMaintenanceWindowRequest {
  WindowId: string;
  WindowTargetId: string;
  Safe?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeregisterTaskFromMaintenanceWindowRequest {
  WindowId: string;
  WindowTaskId: string;
}

// refs: 1 - tags: named, input
export interface DescribeActivationsRequest {
  Filters?: DescribeActivationsFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAssociationRequest {
  Name?: string | null;
  InstanceId?: string | null;
  AssociationId?: string | null;
  AssociationVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAssociationExecutionTargetsRequest {
  AssociationId: string;
  ExecutionId: string;
  Filters?: AssociationExecutionTargetsFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAssociationExecutionsRequest {
  AssociationId: string;
  Filters?: AssociationExecutionFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAutomationExecutionsRequest {
  Filters?: AutomationExecutionFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAutomationStepExecutionsRequest {
  AutomationExecutionId: string;
  Filters?: StepExecutionFilter[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
  ReverseOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeAvailablePatchesRequest {
  Filters?: PatchOrchestratorFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDocumentRequest {
  Name: string;
  DocumentVersion?: string | null;
  VersionName?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeDocumentPermissionRequest {
  Name: string;
  PermissionType: DocumentPermissionType;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEffectiveInstanceAssociationsRequest {
  InstanceId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEffectivePatchesForPatchBaselineRequest {
  BaselineId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeInstanceAssociationsStatusRequest {
  InstanceId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeInstanceInformationRequest {
  InstanceInformationFilterList?: InstanceInformationFilter[] | null;
  Filters?: InstanceInformationStringFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeInstancePatchStatesRequest {
  InstanceIds: string[];
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeInstancePatchStatesForPatchGroupRequest {
  PatchGroup: string;
  Filters?: InstancePatchStateFilter[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeInstancePatchesRequest {
  InstanceId: string;
  Filters?: PatchOrchestratorFilter[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeInventoryDeletionsRequest {
  DeletionId?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowExecutionTaskInvocationsRequest {
  WindowExecutionId: string;
  TaskId: string;
  Filters?: MaintenanceWindowFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowExecutionTasksRequest {
  WindowExecutionId: string;
  Filters?: MaintenanceWindowFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowExecutionsRequest {
  WindowId: string;
  Filters?: MaintenanceWindowFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowScheduleRequest {
  WindowId?: string | null;
  Targets?: Target[] | null;
  ResourceType?: MaintenanceWindowResourceType | null;
  Filters?: PatchOrchestratorFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowTargetsRequest {
  WindowId: string;
  Filters?: MaintenanceWindowFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowTasksRequest {
  WindowId: string;
  Filters?: MaintenanceWindowFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowsRequest {
  Filters?: MaintenanceWindowFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeMaintenanceWindowsForTargetRequest {
  Targets: Target[];
  ResourceType: MaintenanceWindowResourceType;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeOpsItemsRequest {
  OpsItemFilters?: OpsItemFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeParametersRequest {
  Filters?: ParametersFilter[] | null;
  ParameterFilters?: ParameterStringFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePatchBaselinesRequest {
  Filters?: PatchOrchestratorFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePatchGroupStateRequest {
  PatchGroup: string;
}

// refs: 1 - tags: named, input
export interface DescribePatchGroupsRequest {
  MaxResults?: number | null;
  Filters?: PatchOrchestratorFilter[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribePatchPropertiesRequest {
  OperatingSystem: OperatingSystem;
  Property: PatchProperty;
  PatchSet?: PatchSet | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeSessionsRequest {
  State: SessionState;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: SessionFilter[] | null;
}

// refs: 1 - tags: named, input
export interface GetAutomationExecutionRequest {
  AutomationExecutionId: string;
}

// refs: 1 - tags: named, input
export interface GetCalendarStateRequest {
  CalendarNames: string[];
  AtTime?: string | null;
}

// refs: 1 - tags: named, input
export interface GetCommandInvocationRequest {
  CommandId: string;
  InstanceId: string;
  PluginName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetConnectionStatusRequest {
  Target: string;
}

// refs: 1 - tags: named, input
export interface GetDefaultPatchBaselineRequest {
  OperatingSystem?: OperatingSystem | null;
}

// refs: 1 - tags: named, input
export interface GetDeployablePatchSnapshotForInstanceRequest {
  InstanceId: string;
  SnapshotId: string;
}

// refs: 1 - tags: named, input
export interface GetDocumentRequest {
  Name: string;
  VersionName?: string | null;
  DocumentVersion?: string | null;
  DocumentFormat?: DocumentFormat | null;
}

// refs: 1 - tags: named, input
export interface GetInventoryRequest {
  Filters?: InventoryFilter[] | null;
  Aggregators?: InventoryAggregator[] | null;
  ResultAttributes?: ResultAttribute[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetInventorySchemaRequest {
  TypeName?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
  Aggregator?: boolean | null;
  SubType?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetMaintenanceWindowRequest {
  WindowId: string;
}

// refs: 1 - tags: named, input
export interface GetMaintenanceWindowExecutionRequest {
  WindowExecutionId: string;
}

// refs: 1 - tags: named, input
export interface GetMaintenanceWindowExecutionTaskRequest {
  WindowExecutionId: string;
  TaskId: string;
}

// refs: 1 - tags: named, input
export interface GetMaintenanceWindowExecutionTaskInvocationRequest {
  WindowExecutionId: string;
  TaskId: string;
  InvocationId: string;
}

// refs: 1 - tags: named, input
export interface GetMaintenanceWindowTaskRequest {
  WindowId: string;
  WindowTaskId: string;
}

// refs: 1 - tags: named, input
export interface GetOpsItemRequest {
  OpsItemId: string;
}

// refs: 1 - tags: named, input
export interface GetOpsMetadataRequest {
  OpsMetadataArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetOpsSummaryRequest {
  SyncName?: string | null;
  Filters?: OpsFilter[] | null;
  Aggregators?: OpsAggregator[] | null;
  ResultAttributes?: OpsResultAttribute[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetParameterRequest {
  Name: string;
  WithDecryption?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetParameterHistoryRequest {
  Name: string;
  WithDecryption?: boolean | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetParametersRequest {
  Names: string[];
  WithDecryption?: boolean | null;
}

// refs: 1 - tags: named, input
export interface GetParametersByPathRequest {
  Path: string;
  Recursive?: boolean | null;
  ParameterFilters?: ParameterStringFilter[] | null;
  WithDecryption?: boolean | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetPatchBaselineRequest {
  BaselineId: string;
}

// refs: 1 - tags: named, input
export interface GetPatchBaselineForPatchGroupRequest {
  PatchGroup: string;
  OperatingSystem?: OperatingSystem | null;
}

// refs: 1 - tags: named, input
export interface GetServiceSettingRequest {
  SettingId: string;
}

// refs: 1 - tags: named, input
export interface LabelParameterVersionRequest {
  Name: string;
  ParameterVersion?: number | null;
  Labels: string[];
}

// refs: 1 - tags: named, input
export interface ListAssociationVersionsRequest {
  AssociationId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAssociationsRequest {
  AssociationFilterList?: AssociationFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListCommandInvocationsRequest {
  CommandId?: string | null;
  InstanceId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: CommandFilter[] | null;
  Details?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListCommandsRequest {
  CommandId?: string | null;
  InstanceId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: CommandFilter[] | null;
}

// refs: 1 - tags: named, input
export interface ListComplianceItemsRequest {
  Filters?: ComplianceStringFilter[] | null;
  ResourceIds?: string[] | null;
  ResourceTypes?: string[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListComplianceSummariesRequest {
  Filters?: ComplianceStringFilter[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDocumentMetadataHistoryRequest {
  Name: string;
  DocumentVersion?: string | null;
  Metadata: DocumentMetadataEnum;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDocumentVersionsRequest {
  Name: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDocumentsRequest {
  DocumentFilterList?: DocumentFilter[] | null;
  Filters?: DocumentKeyValuesFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListInventoryEntriesRequest {
  InstanceId: string;
  TypeName: string;
  Filters?: InventoryFilter[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListOpsItemEventsRequest {
  Filters?: OpsItemEventFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOpsMetadataRequest {
  Filters?: OpsMetadataFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListResourceComplianceSummariesRequest {
  Filters?: ComplianceStringFilter[] | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListResourceDataSyncRequest {
  SyncType?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceType: ResourceTypeForTagging;
  ResourceId: string;
}

// refs: 1 - tags: named, input
export interface ModifyDocumentPermissionRequest {
  Name: string;
  PermissionType: DocumentPermissionType;
  AccountIdsToAdd?: string[] | null;
  AccountIdsToRemove?: string[] | null;
  SharedDocumentVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface PutComplianceItemsRequest {
  ResourceId: string;
  ResourceType: string;
  ComplianceType: string;
  ExecutionSummary: ComplianceExecutionSummary;
  Items: ComplianceItemEntry[];
  ItemContentHash?: string | null;
  UploadType?: ComplianceUploadType | null;
}

// refs: 1 - tags: named, input
export interface PutInventoryRequest {
  InstanceId: string;
  Items: InventoryItem[];
}

// refs: 1 - tags: named, input
export interface PutParameterRequest {
  Name: string;
  Description?: string | null;
  Value: string;
  Type?: ParameterType | null;
  KeyId?: string | null;
  Overwrite?: boolean | null;
  AllowedPattern?: string | null;
  Tags?: Tag[] | null;
  Tier?: ParameterTier | null;
  Policies?: string | null;
  DataType?: string | null;
}

// refs: 1 - tags: named, input
export interface RegisterDefaultPatchBaselineRequest {
  BaselineId: string;
}

// refs: 1 - tags: named, input
export interface RegisterPatchBaselineForPatchGroupRequest {
  BaselineId: string;
  PatchGroup: string;
}

// refs: 1 - tags: named, input
export interface RegisterTargetWithMaintenanceWindowRequest {
  WindowId: string;
  ResourceType: MaintenanceWindowResourceType;
  Targets: Target[];
  OwnerInformation?: string | null;
  Name?: string | null;
  Description?: string | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface RegisterTaskWithMaintenanceWindowRequest {
  WindowId: string;
  Targets?: Target[] | null;
  TaskArn: string;
  ServiceRoleArn?: string | null;
  TaskType: MaintenanceWindowTaskType;
  TaskParameters?: { [key: string]: MaintenanceWindowTaskParameterValueExpression | null | undefined } | null;
  TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters | null;
  Priority?: number | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  LoggingInfo?: LoggingInfo | null;
  Name?: string | null;
  Description?: string | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface RemoveTagsFromResourceRequest {
  ResourceType: ResourceTypeForTagging;
  ResourceId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface ResetServiceSettingRequest {
  SettingId: string;
}

// refs: 1 - tags: named, input
export interface ResumeSessionRequest {
  SessionId: string;
}

// refs: 1 - tags: named, input
export interface SendAutomationSignalRequest {
  AutomationExecutionId: string;
  SignalType: SignalType;
  Payload?: { [key: string]: string[] | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface SendCommandRequest {
  InstanceIds?: string[] | null;
  Targets?: Target[] | null;
  DocumentName: string;
  DocumentVersion?: string | null;
  DocumentHash?: string | null;
  DocumentHashType?: DocumentHashType | null;
  TimeoutSeconds?: number | null;
  Comment?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  OutputS3Region?: string | null;
  OutputS3BucketName?: string | null;
  OutputS3KeyPrefix?: string | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  ServiceRoleArn?: string | null;
  NotificationConfig?: NotificationConfig | null;
  CloudWatchOutputConfig?: CloudWatchOutputConfig | null;
}

// refs: 1 - tags: named, input
export interface StartAssociationsOnceRequest {
  AssociationIds: string[];
}

// refs: 1 - tags: named, input
export interface StartAutomationExecutionRequest {
  DocumentName: string;
  DocumentVersion?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  ClientToken?: string | null;
  Mode?: ExecutionMode | null;
  TargetParameterName?: string | null;
  Targets?: Target[] | null;
  TargetMaps?: ({ [key: string]: string[] | null | undefined })[] | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  TargetLocations?: TargetLocation[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface StartChangeRequestExecutionRequest {
  ScheduledTime?: Date | number | null;
  DocumentName: string;
  DocumentVersion?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  ChangeRequestName?: string | null;
  ClientToken?: string | null;
  Runbooks: Runbook[];
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface StartSessionRequest {
  Target: string;
  DocumentName?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface StopAutomationExecutionRequest {
  AutomationExecutionId: string;
  Type?: StopType | null;
}

// refs: 1 - tags: named, input
export interface TerminateSessionRequest {
  SessionId: string;
}

// refs: 1 - tags: named, input
export interface UpdateAssociationRequest {
  AssociationId: string;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  DocumentVersion?: string | null;
  ScheduleExpression?: string | null;
  OutputLocation?: InstanceAssociationOutputLocation | null;
  Name?: string | null;
  Targets?: Target[] | null;
  AssociationName?: string | null;
  AssociationVersion?: string | null;
  AutomationTargetParameterName?: string | null;
  MaxErrors?: string | null;
  MaxConcurrency?: string | null;
  ComplianceSeverity?: AssociationComplianceSeverity | null;
  SyncCompliance?: AssociationSyncCompliance | null;
  ApplyOnlyAtCronInterval?: boolean | null;
  TargetLocations?: TargetLocation[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateAssociationStatusRequest {
  Name: string;
  InstanceId: string;
  AssociationStatus: AssociationStatus;
}

// refs: 1 - tags: named, input
export interface UpdateDocumentRequest {
  Content: string;
  Attachments?: AttachmentsSource[] | null;
  Name: string;
  VersionName?: string | null;
  DocumentVersion?: string | null;
  DocumentFormat?: DocumentFormat | null;
  TargetType?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateDocumentDefaultVersionRequest {
  Name: string;
  DocumentVersion: string;
}

// refs: 1 - tags: named, input
export interface UpdateDocumentMetadataRequest {
  Name: string;
  DocumentVersion?: string | null;
  DocumentReviews: DocumentReviews;
}

// refs: 1 - tags: named, input
export interface UpdateMaintenanceWindowRequest {
  WindowId: string;
  Name?: string | null;
  Description?: string | null;
  StartDate?: string | null;
  EndDate?: string | null;
  Schedule?: string | null;
  ScheduleTimezone?: string | null;
  ScheduleOffset?: number | null;
  Duration?: number | null;
  Cutoff?: number | null;
  AllowUnassociatedTargets?: boolean | null;
  Enabled?: boolean | null;
  Replace?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateMaintenanceWindowTargetRequest {
  WindowId: string;
  WindowTargetId: string;
  Targets?: Target[] | null;
  OwnerInformation?: string | null;
  Name?: string | null;
  Description?: string | null;
  Replace?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateMaintenanceWindowTaskRequest {
  WindowId: string;
  WindowTaskId: string;
  Targets?: Target[] | null;
  TaskArn?: string | null;
  ServiceRoleArn?: string | null;
  TaskParameters?: { [key: string]: MaintenanceWindowTaskParameterValueExpression | null | undefined } | null;
  TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters | null;
  Priority?: number | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  LoggingInfo?: LoggingInfo | null;
  Name?: string | null;
  Description?: string | null;
  Replace?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateManagedInstanceRoleRequest {
  InstanceId: string;
  IamRole: string;
}

// refs: 1 - tags: named, input
export interface UpdateOpsItemRequest {
  Description?: string | null;
  OperationalData?: { [key: string]: OpsItemDataValue | null | undefined } | null;
  OperationalDataToDelete?: string[] | null;
  Notifications?: OpsItemNotification[] | null;
  Priority?: number | null;
  RelatedOpsItems?: RelatedOpsItem[] | null;
  Status?: OpsItemStatus | null;
  OpsItemId: string;
  Title?: string | null;
  Category?: string | null;
  Severity?: string | null;
  ActualStartTime?: Date | number | null;
  ActualEndTime?: Date | number | null;
  PlannedStartTime?: Date | number | null;
  PlannedEndTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface UpdateOpsMetadataRequest {
  OpsMetadataArn: string;
  MetadataToUpdate?: { [key: string]: MetadataValue | null | undefined } | null;
  KeysToDelete?: string[] | null;
}

// refs: 1 - tags: named, input
export interface UpdatePatchBaselineRequest {
  BaselineId: string;
  Name?: string | null;
  GlobalFilters?: PatchFilterGroup | null;
  ApprovalRules?: PatchRuleGroup | null;
  ApprovedPatches?: string[] | null;
  ApprovedPatchesComplianceLevel?: PatchComplianceLevel | null;
  ApprovedPatchesEnableNonSecurity?: boolean | null;
  RejectedPatches?: string[] | null;
  RejectedPatchesAction?: PatchAction | null;
  Description?: string | null;
  Sources?: PatchSource[] | null;
  Replace?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateResourceDataSyncRequest {
  SyncName: string;
  SyncType: string;
  SyncSource: ResourceDataSyncSource;
}

// refs: 1 - tags: named, input
export interface UpdateServiceSettingRequest {
  SettingId: string;
  SettingValue: string;
}

// refs: 1 - tags: named, output
export interface AddTagsToResourceResult {
}

// refs: 1 - tags: named, output
export interface CancelCommandResult {
}

// refs: 1 - tags: named, output
export interface CancelMaintenanceWindowExecutionResult {
  WindowExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateActivationResult {
  ActivationId?: string | null;
  ActivationCode?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateAssociationResult {
  AssociationDescription?: AssociationDescription | null;
}

// refs: 1 - tags: named, output
export interface CreateAssociationBatchResult {
  Successful?: AssociationDescription[] | null;
  Failed?: FailedCreateAssociation[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDocumentResult {
  DocumentDescription?: DocumentDescription | null;
}

// refs: 1 - tags: named, output
export interface CreateMaintenanceWindowResult {
  WindowId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateOpsItemResponse {
  OpsItemId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateOpsMetadataResult {
  OpsMetadataArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreatePatchBaselineResult {
  BaselineId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateResourceDataSyncResult {
}

// refs: 1 - tags: named, output
export interface DeleteActivationResult {
}

// refs: 1 - tags: named, output
export interface DeleteAssociationResult {
}

// refs: 1 - tags: named, output
export interface DeleteDocumentResult {
}

// refs: 1 - tags: named, output
export interface DeleteInventoryResult {
  DeletionId?: string | null;
  TypeName?: string | null;
  DeletionSummary?: InventoryDeletionSummary | null;
}

// refs: 1 - tags: named, output
export interface DeleteMaintenanceWindowResult {
  WindowId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteOpsMetadataResult {
}

// refs: 1 - tags: named, output
export interface DeleteParameterResult {
}

// refs: 1 - tags: named, output
export interface DeleteParametersResult {
  DeletedParameters?: string[] | null;
  InvalidParameters?: string[] | null;
}

// refs: 1 - tags: named, output
export interface DeletePatchBaselineResult {
  BaselineId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteResourceDataSyncResult {
}

// refs: 1 - tags: named, output
export interface DeregisterManagedInstanceResult {
}

// refs: 1 - tags: named, output
export interface DeregisterPatchBaselineForPatchGroupResult {
  BaselineId?: string | null;
  PatchGroup?: string | null;
}

// refs: 1 - tags: named, output
export interface DeregisterTargetFromMaintenanceWindowResult {
  WindowId?: string | null;
  WindowTargetId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeregisterTaskFromMaintenanceWindowResult {
  WindowId?: string | null;
  WindowTaskId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeActivationsResult {
  ActivationList?: Activation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAssociationResult {
  AssociationDescription?: AssociationDescription | null;
}

// refs: 1 - tags: named, output
export interface DescribeAssociationExecutionTargetsResult {
  AssociationExecutionTargets?: AssociationExecutionTarget[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAssociationExecutionsResult {
  AssociationExecutions?: AssociationExecution[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAutomationExecutionsResult {
  AutomationExecutionMetadataList?: AutomationExecutionMetadata[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAutomationStepExecutionsResult {
  StepExecutions?: StepExecution[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAvailablePatchesResult {
  Patches?: Patch[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDocumentResult {
  Document?: DocumentDescription | null;
}

// refs: 1 - tags: named, output
export interface DescribeDocumentPermissionResponse {
  AccountIds?: string[] | null;
  AccountSharingInfoList?: AccountSharingInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEffectiveInstanceAssociationsResult {
  Associations?: InstanceAssociation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEffectivePatchesForPatchBaselineResult {
  EffectivePatches?: EffectivePatch[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstanceAssociationsStatusResult {
  InstanceAssociationStatusInfos?: InstanceAssociationStatusInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstanceInformationResult {
  InstanceInformationList?: InstanceInformation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstancePatchStatesResult {
  InstancePatchStates?: InstancePatchState[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstancePatchStatesForPatchGroupResult {
  InstancePatchStates?: InstancePatchState[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInstancePatchesResult {
  Patches?: PatchComplianceData[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeInventoryDeletionsResult {
  InventoryDeletions?: InventoryDeletionStatusItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowExecutionTaskInvocationsResult {
  WindowExecutionTaskInvocationIdentities?: MaintenanceWindowExecutionTaskInvocationIdentity[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowExecutionTasksResult {
  WindowExecutionTaskIdentities?: MaintenanceWindowExecutionTaskIdentity[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowExecutionsResult {
  WindowExecutions?: MaintenanceWindowExecution[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowScheduleResult {
  ScheduledWindowExecutions?: ScheduledWindowExecution[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowTargetsResult {
  Targets?: MaintenanceWindowTarget[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowTasksResult {
  Tasks?: MaintenanceWindowTask[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowsResult {
  WindowIdentities?: MaintenanceWindowIdentity[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeMaintenanceWindowsForTargetResult {
  WindowIdentities?: MaintenanceWindowIdentityForTarget[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeOpsItemsResponse {
  NextToken?: string | null;
  OpsItemSummaries?: OpsItemSummary[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeParametersResult {
  Parameters?: ParameterMetadata[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribePatchBaselinesResult {
  BaselineIdentities?: PatchBaselineIdentity[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribePatchGroupStateResult {
  Instances?: number | null;
  InstancesWithInstalledPatches?: number | null;
  InstancesWithInstalledOtherPatches?: number | null;
  InstancesWithInstalledPendingRebootPatches?: number | null;
  InstancesWithInstalledRejectedPatches?: number | null;
  InstancesWithMissingPatches?: number | null;
  InstancesWithFailedPatches?: number | null;
  InstancesWithNotApplicablePatches?: number | null;
  InstancesWithUnreportedNotApplicablePatches?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribePatchGroupsResult {
  Mappings?: PatchGroupPatchBaselineMapping[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribePatchPropertiesResult {
  Properties?: ({ [key: string]: string | null | undefined })[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSessionsResponse {
  Sessions?: Session[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetAutomationExecutionResult {
  AutomationExecution?: AutomationExecution | null;
}

// refs: 1 - tags: named, output
export interface GetCalendarStateResponse {
  State?: CalendarState | null;
  AtTime?: string | null;
  NextTransitionTime?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCommandInvocationResult {
  CommandId?: string | null;
  InstanceId?: string | null;
  Comment?: string | null;
  DocumentName?: string | null;
  DocumentVersion?: string | null;
  PluginName?: string | null;
  ResponseCode?: number | null;
  ExecutionStartDateTime?: string | null;
  ExecutionElapsedTime?: string | null;
  ExecutionEndDateTime?: string | null;
  Status?: CommandInvocationStatus | null;
  StatusDetails?: string | null;
  StandardOutputContent?: string | null;
  StandardOutputUrl?: string | null;
  StandardErrorContent?: string | null;
  StandardErrorUrl?: string | null;
  CloudWatchOutputConfig?: CloudWatchOutputConfig | null;
}

// refs: 1 - tags: named, output
export interface GetConnectionStatusResponse {
  Target?: string | null;
  Status?: ConnectionStatus | null;
}

// refs: 1 - tags: named, output
export interface GetDefaultPatchBaselineResult {
  BaselineId?: string | null;
  OperatingSystem?: OperatingSystem | null;
}

// refs: 1 - tags: named, output
export interface GetDeployablePatchSnapshotForInstanceResult {
  InstanceId?: string | null;
  SnapshotId?: string | null;
  SnapshotDownloadUrl?: string | null;
  Product?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDocumentResult {
  Name?: string | null;
  VersionName?: string | null;
  DocumentVersion?: string | null;
  Status?: DocumentStatus | null;
  StatusInformation?: string | null;
  Content?: string | null;
  DocumentType?: DocumentType | null;
  DocumentFormat?: DocumentFormat | null;
  Requires?: DocumentRequires[] | null;
  AttachmentsContent?: AttachmentContent[] | null;
  ReviewStatus?: ReviewStatus | null;
}

// refs: 1 - tags: named, output
export interface GetInventoryResult {
  Entities?: InventoryResultEntity[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetInventorySchemaResult {
  Schemas?: InventoryItemSchema[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetMaintenanceWindowResult {
  WindowId?: string | null;
  Name?: string | null;
  Description?: string | null;
  StartDate?: string | null;
  EndDate?: string | null;
  Schedule?: string | null;
  ScheduleTimezone?: string | null;
  ScheduleOffset?: number | null;
  NextExecutionTime?: string | null;
  Duration?: number | null;
  Cutoff?: number | null;
  AllowUnassociatedTargets?: boolean | null;
  Enabled?: boolean | null;
  CreatedDate?: Date | number | null;
  ModifiedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetMaintenanceWindowExecutionResult {
  WindowExecutionId?: string | null;
  TaskIds?: string[] | null;
  Status?: MaintenanceWindowExecutionStatus | null;
  StatusDetails?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetMaintenanceWindowExecutionTaskResult {
  WindowExecutionId?: string | null;
  TaskExecutionId?: string | null;
  TaskArn?: string | null;
  ServiceRole?: string | null;
  Type?: MaintenanceWindowTaskType | null;
  TaskParameters?: ({ [key: string]: MaintenanceWindowTaskParameterValueExpression | null | undefined })[] | null;
  Priority?: number | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  Status?: MaintenanceWindowExecutionStatus | null;
  StatusDetails?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetMaintenanceWindowExecutionTaskInvocationResult {
  WindowExecutionId?: string | null;
  TaskExecutionId?: string | null;
  InvocationId?: string | null;
  ExecutionId?: string | null;
  TaskType?: MaintenanceWindowTaskType | null;
  Parameters?: string | null;
  Status?: MaintenanceWindowExecutionStatus | null;
  StatusDetails?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  OwnerInformation?: string | null;
  WindowTargetId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetMaintenanceWindowTaskResult {
  WindowId?: string | null;
  WindowTaskId?: string | null;
  Targets?: Target[] | null;
  TaskArn?: string | null;
  ServiceRoleArn?: string | null;
  TaskType?: MaintenanceWindowTaskType | null;
  TaskParameters?: { [key: string]: MaintenanceWindowTaskParameterValueExpression | null | undefined } | null;
  TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters | null;
  Priority?: number | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  LoggingInfo?: LoggingInfo | null;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOpsItemResponse {
  OpsItem?: OpsItem | null;
}

// refs: 1 - tags: named, output
export interface GetOpsMetadataResult {
  ResourceId?: string | null;
  Metadata?: { [key: string]: MetadataValue | null | undefined } | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOpsSummaryResult {
  Entities?: OpsEntity[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetParameterResult {
  Parameter?: Parameter | null;
}

// refs: 1 - tags: named, output
export interface GetParameterHistoryResult {
  Parameters?: ParameterHistory[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetParametersResult {
  Parameters?: Parameter[] | null;
  InvalidParameters?: string[] | null;
}

// refs: 1 - tags: named, output
export interface GetParametersByPathResult {
  Parameters?: Parameter[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetPatchBaselineResult {
  BaselineId?: string | null;
  Name?: string | null;
  OperatingSystem?: OperatingSystem | null;
  GlobalFilters?: PatchFilterGroup | null;
  ApprovalRules?: PatchRuleGroup | null;
  ApprovedPatches?: string[] | null;
  ApprovedPatchesComplianceLevel?: PatchComplianceLevel | null;
  ApprovedPatchesEnableNonSecurity?: boolean | null;
  RejectedPatches?: string[] | null;
  RejectedPatchesAction?: PatchAction | null;
  PatchGroups?: string[] | null;
  CreatedDate?: Date | number | null;
  ModifiedDate?: Date | number | null;
  Description?: string | null;
  Sources?: PatchSource[] | null;
}

// refs: 1 - tags: named, output
export interface GetPatchBaselineForPatchGroupResult {
  BaselineId?: string | null;
  PatchGroup?: string | null;
  OperatingSystem?: OperatingSystem | null;
}

// refs: 1 - tags: named, output
export interface GetServiceSettingResult {
  ServiceSetting?: ServiceSetting | null;
}

// refs: 1 - tags: named, output
export interface LabelParameterVersionResult {
  InvalidLabels?: string[] | null;
  ParameterVersion?: number | null;
}

// refs: 1 - tags: named, output
export interface ListAssociationVersionsResult {
  AssociationVersions?: AssociationVersionInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssociationsResult {
  Associations?: Association[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCommandInvocationsResult {
  CommandInvocations?: CommandInvocation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCommandsResult {
  Commands?: Command[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListComplianceItemsResult {
  ComplianceItems?: ComplianceItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListComplianceSummariesResult {
  ComplianceSummaryItems?: ComplianceSummaryItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDocumentMetadataHistoryResponse {
  Name?: string | null;
  DocumentVersion?: string | null;
  Author?: string | null;
  Metadata?: DocumentMetadataResponseInfo | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDocumentVersionsResult {
  DocumentVersions?: DocumentVersionInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDocumentsResult {
  DocumentIdentifiers?: DocumentIdentifier[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInventoryEntriesResult {
  TypeName?: string | null;
  InstanceId?: string | null;
  SchemaVersion?: string | null;
  CaptureTime?: string | null;
  Entries?: ({ [key: string]: string | null | undefined })[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOpsItemEventsResponse {
  NextToken?: string | null;
  Summaries?: OpsItemEventSummary[] | null;
}

// refs: 1 - tags: named, output
export interface ListOpsMetadataResult {
  OpsMetadataList?: OpsMetadata[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourceComplianceSummariesResult {
  ResourceComplianceSummaryItems?: ResourceComplianceSummaryItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListResourceDataSyncResult {
  ResourceDataSyncItems?: ResourceDataSyncItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResult {
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ModifyDocumentPermissionResponse {
}

// refs: 1 - tags: named, output
export interface PutComplianceItemsResult {
}

// refs: 1 - tags: named, output
export interface PutInventoryResult {
  Message?: string | null;
}

// refs: 1 - tags: named, output
export interface PutParameterResult {
  Version?: number | null;
  Tier?: ParameterTier | null;
}

// refs: 1 - tags: named, output
export interface RegisterDefaultPatchBaselineResult {
  BaselineId?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterPatchBaselineForPatchGroupResult {
  BaselineId?: string | null;
  PatchGroup?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterTargetWithMaintenanceWindowResult {
  WindowTargetId?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterTaskWithMaintenanceWindowResult {
  WindowTaskId?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveTagsFromResourceResult {
}

// refs: 1 - tags: named, output
export interface ResetServiceSettingResult {
  ServiceSetting?: ServiceSetting | null;
}

// refs: 1 - tags: named, output
export interface ResumeSessionResponse {
  SessionId?: string | null;
  TokenValue?: string | null;
  StreamUrl?: string | null;
}

// refs: 1 - tags: named, output
export interface SendAutomationSignalResult {
}

// refs: 1 - tags: named, output
export interface SendCommandResult {
  Command?: Command | null;
}

// refs: 1 - tags: named, output
export interface StartAssociationsOnceResult {
}

// refs: 1 - tags: named, output
export interface StartAutomationExecutionResult {
  AutomationExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartChangeRequestExecutionResult {
  AutomationExecutionId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartSessionResponse {
  SessionId?: string | null;
  TokenValue?: string | null;
  StreamUrl?: string | null;
}

// refs: 1 - tags: named, output
export interface StopAutomationExecutionResult {
}

// refs: 1 - tags: named, output
export interface TerminateSessionResponse {
  SessionId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateAssociationResult {
  AssociationDescription?: AssociationDescription | null;
}

// refs: 1 - tags: named, output
export interface UpdateAssociationStatusResult {
  AssociationDescription?: AssociationDescription | null;
}

// refs: 1 - tags: named, output
export interface UpdateDocumentResult {
  DocumentDescription?: DocumentDescription | null;
}

// refs: 1 - tags: named, output
export interface UpdateDocumentDefaultVersionResult {
  Description?: DocumentDefaultVersionDescription | null;
}

// refs: 1 - tags: named, output
export interface UpdateDocumentMetadataResponse {
}

// refs: 1 - tags: named, output
export interface UpdateMaintenanceWindowResult {
  WindowId?: string | null;
  Name?: string | null;
  Description?: string | null;
  StartDate?: string | null;
  EndDate?: string | null;
  Schedule?: string | null;
  ScheduleTimezone?: string | null;
  ScheduleOffset?: number | null;
  Duration?: number | null;
  Cutoff?: number | null;
  AllowUnassociatedTargets?: boolean | null;
  Enabled?: boolean | null;
}

// refs: 1 - tags: named, output
export interface UpdateMaintenanceWindowTargetResult {
  WindowId?: string | null;
  WindowTargetId?: string | null;
  Targets?: Target[] | null;
  OwnerInformation?: string | null;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateMaintenanceWindowTaskResult {
  WindowId?: string | null;
  WindowTaskId?: string | null;
  Targets?: Target[] | null;
  TaskArn?: string | null;
  ServiceRoleArn?: string | null;
  TaskParameters?: { [key: string]: MaintenanceWindowTaskParameterValueExpression | null | undefined } | null;
  TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters | null;
  Priority?: number | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  LoggingInfo?: LoggingInfo | null;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateManagedInstanceRoleResult {
}

// refs: 1 - tags: named, output
export interface UpdateOpsItemResponse {
}

// refs: 1 - tags: named, output
export interface UpdateOpsMetadataResult {
  OpsMetadataArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdatePatchBaselineResult {
  BaselineId?: string | null;
  Name?: string | null;
  OperatingSystem?: OperatingSystem | null;
  GlobalFilters?: PatchFilterGroup | null;
  ApprovalRules?: PatchRuleGroup | null;
  ApprovedPatches?: string[] | null;
  ApprovedPatchesComplianceLevel?: PatchComplianceLevel | null;
  ApprovedPatchesEnableNonSecurity?: boolean | null;
  RejectedPatches?: string[] | null;
  RejectedPatchesAction?: PatchAction | null;
  CreatedDate?: Date | number | null;
  ModifiedDate?: Date | number | null;
  Description?: string | null;
  Sources?: PatchSource[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateResourceDataSyncResult {
}

// refs: 1 - tags: named, output
export interface UpdateServiceSettingResult {
}

// refs: 3 - tags: input, named, enum
export type ResourceTypeForTagging =
| "Document"
| "ManagedInstance"
| "MaintenanceWindow"
| "Parameter"
| "PatchBaseline"
| "OpsItem"
| cmnP.UnexpectedEnumValue;

// refs: 15 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 33 - tags: input, named, interface, output
export interface Target {
  Key?: string | null;
  Values?: string[] | null;
}
function fromTarget(input?: Target | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}
function toTarget(root: jsonP.JSONValue): Target {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Values": ["s"],
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface InstanceAssociationOutputLocation {
  S3Location?: S3OutputLocation | null;
}
function fromInstanceAssociationOutputLocation(input?: InstanceAssociationOutputLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Location: fromS3OutputLocation(input["S3Location"]),
  }
}
function toInstanceAssociationOutputLocation(root: jsonP.JSONValue): InstanceAssociationOutputLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Location": toS3OutputLocation,
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface S3OutputLocation {
  OutputS3Region?: string | null;
  OutputS3BucketName?: string | null;
  OutputS3KeyPrefix?: string | null;
}
function fromS3OutputLocation(input?: S3OutputLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OutputS3Region: input["OutputS3Region"],
    OutputS3BucketName: input["OutputS3BucketName"],
    OutputS3KeyPrefix: input["OutputS3KeyPrefix"],
  }
}
function toS3OutputLocation(root: jsonP.JSONValue): S3OutputLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutputS3Region": "s",
      "OutputS3BucketName": "s",
      "OutputS3KeyPrefix": "s",
    },
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type AssociationComplianceSeverity =
| "CRITICAL"
| "HIGH"
| "MEDIUM"
| "LOW"
| "UNSPECIFIED"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: input, named, enum, output
export type AssociationSyncCompliance =
| "AUTO"
| "MANUAL"
| cmnP.UnexpectedEnumValue;

// refs: 17 - tags: input, named, interface, output
export interface TargetLocation {
  Accounts?: string[] | null;
  Regions?: string[] | null;
  TargetLocationMaxConcurrency?: string | null;
  TargetLocationMaxErrors?: string | null;
  ExecutionRoleName?: string | null;
}
function fromTargetLocation(input?: TargetLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Accounts: input["Accounts"],
    Regions: input["Regions"],
    TargetLocationMaxConcurrency: input["TargetLocationMaxConcurrency"],
    TargetLocationMaxErrors: input["TargetLocationMaxErrors"],
    ExecutionRoleName: input["ExecutionRoleName"],
  }
}
function toTargetLocation(root: jsonP.JSONValue): TargetLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Accounts": ["s"],
      "Regions": ["s"],
      "TargetLocationMaxConcurrency": "s",
      "TargetLocationMaxErrors": "s",
      "ExecutionRoleName": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CreateAssociationBatchRequestEntry {
  Name: string;
  InstanceId?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  AutomationTargetParameterName?: string | null;
  DocumentVersion?: string | null;
  Targets?: Target[] | null;
  ScheduleExpression?: string | null;
  OutputLocation?: InstanceAssociationOutputLocation | null;
  AssociationName?: string | null;
  MaxErrors?: string | null;
  MaxConcurrency?: string | null;
  ComplianceSeverity?: AssociationComplianceSeverity | null;
  SyncCompliance?: AssociationSyncCompliance | null;
  ApplyOnlyAtCronInterval?: boolean | null;
  TargetLocations?: TargetLocation[] | null;
}
function fromCreateAssociationBatchRequestEntry(input?: CreateAssociationBatchRequestEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    InstanceId: input["InstanceId"],
    Parameters: input["Parameters"],
    AutomationTargetParameterName: input["AutomationTargetParameterName"],
    DocumentVersion: input["DocumentVersion"],
    Targets: input["Targets"]?.map(x => fromTarget(x)),
    ScheduleExpression: input["ScheduleExpression"],
    OutputLocation: fromInstanceAssociationOutputLocation(input["OutputLocation"]),
    AssociationName: input["AssociationName"],
    MaxErrors: input["MaxErrors"],
    MaxConcurrency: input["MaxConcurrency"],
    ComplianceSeverity: input["ComplianceSeverity"],
    SyncCompliance: input["SyncCompliance"],
    ApplyOnlyAtCronInterval: input["ApplyOnlyAtCronInterval"],
    TargetLocations: input["TargetLocations"]?.map(x => fromTargetLocation(x)),
  }
}
function toCreateAssociationBatchRequestEntry(root: jsonP.JSONValue): CreateAssociationBatchRequestEntry {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "InstanceId": "s",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "AutomationTargetParameterName": "s",
      "DocumentVersion": "s",
      "Targets": [toTarget],
      "ScheduleExpression": "s",
      "OutputLocation": toInstanceAssociationOutputLocation,
      "AssociationName": "s",
      "MaxErrors": "s",
      "MaxConcurrency": "s",
      "ComplianceSeverity": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationComplianceSeverity>(x),
      "SyncCompliance": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationSyncCompliance>(x),
      "ApplyOnlyAtCronInterval": "b",
      "TargetLocations": [toTargetLocation],
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface DocumentRequires {
  Name: string;
  Version?: string | null;
}
function fromDocumentRequires(input?: DocumentRequires | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Version: input["Version"],
  }
}
function toDocumentRequires(root: jsonP.JSONValue): DocumentRequires {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Version": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface AttachmentsSource {
  Key?: AttachmentsSourceKey | null;
  Values?: string[] | null;
  Name?: string | null;
}
function fromAttachmentsSource(input?: AttachmentsSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
    Name: input["Name"],
  }
}

// refs: 2 - tags: input, named, enum
export type AttachmentsSourceKey =
| "SourceUrl"
| "S3FileUrl"
| "AttachmentReference"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type DocumentType =
| "Command"
| "Policy"
| "Automation"
| "Session"
| "Package"
| "ApplicationConfiguration"
| "ApplicationConfigurationSchema"
| "DeploymentStrategy"
| "ChangeCalendar"
| "Automation.ChangeTemplate"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type DocumentFormat =
| "YAML"
| "JSON"
| "TEXT"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface OpsItemDataValue {
  Value?: string | null;
  Type?: OpsItemDataType | null;
}
function fromOpsItemDataValue(input?: OpsItemDataValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Value: input["Value"],
    Type: input["Type"],
  }
}
function toOpsItemDataValue(root: jsonP.JSONValue): OpsItemDataValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<OpsItemDataType>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type OpsItemDataType =
| "SearchableString"
| "String"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface OpsItemNotification {
  Arn?: string | null;
}
function fromOpsItemNotification(input?: OpsItemNotification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Arn: input["Arn"],
  }
}
function toOpsItemNotification(root: jsonP.JSONValue): OpsItemNotification {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RelatedOpsItem {
  OpsItemId: string;
}
function fromRelatedOpsItem(input?: RelatedOpsItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OpsItemId: input["OpsItemId"],
  }
}
function toRelatedOpsItem(root: jsonP.JSONValue): RelatedOpsItem {
  return jsonP.readObj({
    required: {
      "OpsItemId": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface MetadataValue {
  Value?: string | null;
}
function fromMetadataValue(input?: MetadataValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Value: input["Value"],
  }
}
function toMetadataValue(root: jsonP.JSONValue): MetadataValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type OperatingSystem =
| "WINDOWS"
| "AMAZON_LINUX"
| "AMAZON_LINUX_2"
| "UBUNTU"
| "REDHAT_ENTERPRISE_LINUX"
| "SUSE"
| "CENTOS"
| "ORACLE_LINUX"
| "DEBIAN"
| "MACOS"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface PatchFilterGroup {
  PatchFilters: PatchFilter[];
}
function fromPatchFilterGroup(input?: PatchFilterGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PatchFilters: input["PatchFilters"]?.map(x => fromPatchFilter(x)),
  }
}
function toPatchFilterGroup(root: jsonP.JSONValue): PatchFilterGroup {
  return jsonP.readObj({
    required: {
      "PatchFilters": [toPatchFilter],
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface PatchFilter {
  Key: PatchFilterKey;
  Values: string[];
}
function fromPatchFilter(input?: PatchFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}
function toPatchFilter(root: jsonP.JSONValue): PatchFilter {
  return jsonP.readObj({
    required: {
      "Key": (x: jsonP.JSONValue) => cmnP.readEnum<PatchFilterKey>(x),
      "Values": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type PatchFilterKey =
| "ARCH"
| "ADVISORY_ID"
| "BUGZILLA_ID"
| "PATCH_SET"
| "PRODUCT"
| "PRODUCT_FAMILY"
| "CLASSIFICATION"
| "CVE_ID"
| "EPOCH"
| "MSRC_SEVERITY"
| "NAME"
| "PATCH_ID"
| "SECTION"
| "PRIORITY"
| "REPOSITORY"
| "RELEASE"
| "SEVERITY"
| "SECURITY"
| "VERSION"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface PatchRuleGroup {
  PatchRules: PatchRule[];
}
function fromPatchRuleGroup(input?: PatchRuleGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PatchRules: input["PatchRules"]?.map(x => fromPatchRule(x)),
  }
}
function toPatchRuleGroup(root: jsonP.JSONValue): PatchRuleGroup {
  return jsonP.readObj({
    required: {
      "PatchRules": [toPatchRule],
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface PatchRule {
  PatchFilterGroup: PatchFilterGroup;
  ComplianceLevel?: PatchComplianceLevel | null;
  ApproveAfterDays?: number | null;
  ApproveUntilDate?: string | null;
  EnableNonSecurity?: boolean | null;
}
function fromPatchRule(input?: PatchRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PatchFilterGroup: fromPatchFilterGroup(input["PatchFilterGroup"]),
    ComplianceLevel: input["ComplianceLevel"],
    ApproveAfterDays: input["ApproveAfterDays"],
    ApproveUntilDate: input["ApproveUntilDate"],
    EnableNonSecurity: input["EnableNonSecurity"],
  }
}
function toPatchRule(root: jsonP.JSONValue): PatchRule {
  return jsonP.readObj({
    required: {
      "PatchFilterGroup": toPatchFilterGroup,
    },
    optional: {
      "ComplianceLevel": (x: jsonP.JSONValue) => cmnP.readEnum<PatchComplianceLevel>(x),
      "ApproveAfterDays": "n",
      "ApproveUntilDate": "s",
      "EnableNonSecurity": "b",
    },
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type PatchComplianceLevel =
| "CRITICAL"
| "HIGH"
| "MEDIUM"
| "LOW"
| "INFORMATIONAL"
| "UNSPECIFIED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type PatchAction =
| "ALLOW_AS_DEPENDENCY"
| "BLOCK"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface PatchSource {
  Name: string;
  Products: string[];
  Configuration: string;
}
function fromPatchSource(input?: PatchSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Products: input["Products"],
    Configuration: input["Configuration"],
  }
}
function toPatchSource(root: jsonP.JSONValue): PatchSource {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "Products": ["s"],
      "Configuration": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ResourceDataSyncS3Destination {
  BucketName: string;
  Prefix?: string | null;
  SyncFormat: ResourceDataSyncS3Format;
  Region: string;
  AWSKMSKeyARN?: string | null;
  DestinationDataSharing?: ResourceDataSyncDestinationDataSharing | null;
}
function fromResourceDataSyncS3Destination(input?: ResourceDataSyncS3Destination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketName: input["BucketName"],
    Prefix: input["Prefix"],
    SyncFormat: input["SyncFormat"],
    Region: input["Region"],
    AWSKMSKeyARN: input["AWSKMSKeyARN"],
    DestinationDataSharing: fromResourceDataSyncDestinationDataSharing(input["DestinationDataSharing"]),
  }
}
function toResourceDataSyncS3Destination(root: jsonP.JSONValue): ResourceDataSyncS3Destination {
  return jsonP.readObj({
    required: {
      "BucketName": "s",
      "SyncFormat": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceDataSyncS3Format>(x),
      "Region": "s",
    },
    optional: {
      "Prefix": "s",
      "AWSKMSKeyARN": "s",
      "DestinationDataSharing": toResourceDataSyncDestinationDataSharing,
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ResourceDataSyncS3Format =
| "JsonSerDe"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ResourceDataSyncDestinationDataSharing {
  DestinationDataSharingType?: string | null;
}
function fromResourceDataSyncDestinationDataSharing(input?: ResourceDataSyncDestinationDataSharing | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DestinationDataSharingType: input["DestinationDataSharingType"],
  }
}
function toResourceDataSyncDestinationDataSharing(root: jsonP.JSONValue): ResourceDataSyncDestinationDataSharing {
  return jsonP.readObj({
    required: {},
    optional: {
      "DestinationDataSharingType": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface ResourceDataSyncSource {
  SourceType: string;
  AwsOrganizationsSource?: ResourceDataSyncAwsOrganizationsSource | null;
  SourceRegions: string[];
  IncludeFutureRegions?: boolean | null;
}
function fromResourceDataSyncSource(input?: ResourceDataSyncSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SourceType: input["SourceType"],
    AwsOrganizationsSource: fromResourceDataSyncAwsOrganizationsSource(input["AwsOrganizationsSource"]),
    SourceRegions: input["SourceRegions"],
    IncludeFutureRegions: input["IncludeFutureRegions"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface ResourceDataSyncAwsOrganizationsSource {
  OrganizationSourceType: string;
  OrganizationalUnits?: ResourceDataSyncOrganizationalUnit[] | null;
}
function fromResourceDataSyncAwsOrganizationsSource(input?: ResourceDataSyncAwsOrganizationsSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OrganizationSourceType: input["OrganizationSourceType"],
    OrganizationalUnits: input["OrganizationalUnits"]?.map(x => fromResourceDataSyncOrganizationalUnit(x)),
  }
}
function toResourceDataSyncAwsOrganizationsSource(root: jsonP.JSONValue): ResourceDataSyncAwsOrganizationsSource {
  return jsonP.readObj({
    required: {
      "OrganizationSourceType": "s",
    },
    optional: {
      "OrganizationalUnits": [toResourceDataSyncOrganizationalUnit],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ResourceDataSyncOrganizationalUnit {
  OrganizationalUnitId?: string | null;
}
function fromResourceDataSyncOrganizationalUnit(input?: ResourceDataSyncOrganizationalUnit | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OrganizationalUnitId: input["OrganizationalUnitId"],
  }
}
function toResourceDataSyncOrganizationalUnit(root: jsonP.JSONValue): ResourceDataSyncOrganizationalUnit {
  return jsonP.readObj({
    required: {},
    optional: {
      "OrganizationalUnitId": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type InventorySchemaDeleteOption =
| "DisableSchema"
| "DeleteSchema"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DescribeActivationsFilter {
  FilterKey?: DescribeActivationsFilterKeys | null;
  FilterValues?: string[] | null;
}
function fromDescribeActivationsFilter(input?: DescribeActivationsFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FilterKey: input["FilterKey"],
    FilterValues: input["FilterValues"],
  }
}

// refs: 1 - tags: input, named, enum
export type DescribeActivationsFilterKeys =
| "ActivationIds"
| "DefaultInstanceName"
| "IamRole"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AssociationExecutionTargetsFilter {
  Key: AssociationExecutionTargetsFilterKey;
  Value: string;
}
function fromAssociationExecutionTargetsFilter(input?: AssociationExecutionTargetsFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}

// refs: 1 - tags: input, named, enum
export type AssociationExecutionTargetsFilterKey =
| "Status"
| "ResourceId"
| "ResourceType"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AssociationExecutionFilter {
  Key: AssociationExecutionFilterKey;
  Value: string;
  Type: AssociationFilterOperatorType;
}
function fromAssociationExecutionFilter(input?: AssociationExecutionFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
    Type: input["Type"],
  }
}

// refs: 1 - tags: input, named, enum
export type AssociationExecutionFilterKey =
| "ExecutionId"
| "Status"
| "CreatedTime"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type AssociationFilterOperatorType =
| "EQUAL"
| "LESS_THAN"
| "GREATER_THAN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AutomationExecutionFilter {
  Key: AutomationExecutionFilterKey;
  Values: string[];
}
function fromAutomationExecutionFilter(input?: AutomationExecutionFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type AutomationExecutionFilterKey =
| "DocumentNamePrefix"
| "ExecutionStatus"
| "ExecutionId"
| "ParentExecutionId"
| "CurrentAction"
| "StartTimeBefore"
| "StartTimeAfter"
| "AutomationType"
| "TagKey"
| "TargetResourceGroup"
| "AutomationSubtype"
| "OpsItemId"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface StepExecutionFilter {
  Key: StepExecutionFilterKey;
  Values: string[];
}
function fromStepExecutionFilter(input?: StepExecutionFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type StepExecutionFilterKey =
| "StartTimeBefore"
| "StartTimeAfter"
| "StepExecutionStatus"
| "StepExecutionId"
| "StepName"
| "Action"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface
export interface PatchOrchestratorFilter {
  Key?: string | null;
  Values?: string[] | null;
}
function fromPatchOrchestratorFilter(input?: PatchOrchestratorFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 2 - tags: input, named, enum
export type DocumentPermissionType =
| "Share"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface InstanceInformationFilter {
  key: InstanceInformationFilterKey;
  valueSet: string[];
}
function fromInstanceInformationFilter(input?: InstanceInformationFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    valueSet: input["valueSet"],
  }
}

// refs: 1 - tags: input, named, enum
export type InstanceInformationFilterKey =
| "InstanceIds"
| "AgentVersion"
| "PingStatus"
| "PlatformTypes"
| "ActivationIds"
| "IamRole"
| "ResourceType"
| "AssociationStatus"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface InstanceInformationStringFilter {
  Key: string;
  Values: string[];
}
function fromInstanceInformationStringFilter(input?: InstanceInformationStringFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, interface
export interface InstancePatchStateFilter {
  Key: string;
  Values: string[];
  Type: InstancePatchStateOperatorType;
}
function fromInstancePatchStateFilter(input?: InstancePatchStateFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
    Type: input["Type"],
  }
}

// refs: 1 - tags: input, named, enum
export type InstancePatchStateOperatorType =
| "Equal"
| "NotEqual"
| "LessThan"
| "GreaterThan"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface
export interface MaintenanceWindowFilter {
  Key?: string | null;
  Values?: string[] | null;
}
function fromMaintenanceWindowFilter(input?: MaintenanceWindowFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 4 - tags: input, named, enum, output
export type MaintenanceWindowResourceType =
| "INSTANCE"
| "RESOURCE_GROUP"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface OpsItemFilter {
  Key: OpsItemFilterKey;
  Values: string[];
  Operator: OpsItemFilterOperator;
}
function fromOpsItemFilter(input?: OpsItemFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
    Operator: input["Operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type OpsItemFilterKey =
| "Status"
| "CreatedBy"
| "Source"
| "Priority"
| "Title"
| "OpsItemId"
| "CreatedTime"
| "LastModifiedTime"
| "ActualStartTime"
| "ActualEndTime"
| "PlannedStartTime"
| "PlannedEndTime"
| "OperationalData"
| "OperationalDataKey"
| "OperationalDataValue"
| "ResourceId"
| "AutomationId"
| "Category"
| "Severity"
| "OpsItemType"
| "ChangeRequestByRequesterArn"
| "ChangeRequestByRequesterName"
| "ChangeRequestByApproverArn"
| "ChangeRequestByApproverName"
| "ChangeRequestByTemplate"
| "ChangeRequestByTargetsResourceGroup"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type OpsItemFilterOperator =
| "Equal"
| "Contains"
| "GreaterThan"
| "LessThan"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ParametersFilter {
  Key: ParametersFilterKey;
  Values: string[];
}
function fromParametersFilter(input?: ParametersFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type ParametersFilterKey =
| "Name"
| "Type"
| "KeyId"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface ParameterStringFilter {
  Key: string;
  Option?: string | null;
  Values?: string[] | null;
}
function fromParameterStringFilter(input?: ParameterStringFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Option: input["Option"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type PatchProperty =
| "PRODUCT"
| "PRODUCT_FAMILY"
| "CLASSIFICATION"
| "MSRC_SEVERITY"
| "PRIORITY"
| "SEVERITY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type PatchSet =
| "OS"
| "APPLICATION"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type SessionState =
| "Active"
| "History"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface SessionFilter {
  key: SessionFilterKey;
  value: string;
}
function fromSessionFilter(input?: SessionFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}

// refs: 1 - tags: input, named, enum
export type SessionFilterKey =
| "InvokedAfter"
| "InvokedBefore"
| "Target"
| "Owner"
| "Status"
| "SessionId"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface
export interface InventoryFilter {
  Key: string;
  Values: string[];
  Type?: InventoryQueryOperatorType | null;
}
function fromInventoryFilter(input?: InventoryFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
    Type: input["Type"],
  }
}

// refs: 3 - tags: input, named, enum
export type InventoryQueryOperatorType =
| "Equal"
| "NotEqual"
| "BeginWith"
| "LessThan"
| "GreaterThan"
| "Exists"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface, recursive
export interface InventoryAggregator {
  Expression?: string | null;
  Aggregators?: InventoryAggregator[] | null;
  Groups?: InventoryGroup[] | null;
}
function fromInventoryAggregator(input?: InventoryAggregator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Expression: input["Expression"],
    Aggregators: input["Aggregators"]?.map(x => fromInventoryAggregator(x)),
    Groups: input["Groups"]?.map(x => fromInventoryGroup(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface InventoryGroup {
  Name: string;
  Filters: InventoryFilter[];
}
function fromInventoryGroup(input?: InventoryGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Filters: input["Filters"]?.map(x => fromInventoryFilter(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface ResultAttribute {
  TypeName: string;
}
function fromResultAttribute(input?: ResultAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TypeName: input["TypeName"],
  }
}

// refs: 2 - tags: input, named, interface
export interface OpsFilter {
  Key: string;
  Values: string[];
  Type?: OpsFilterOperatorType | null;
}
function fromOpsFilter(input?: OpsFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
    Type: input["Type"],
  }
}

// refs: 2 - tags: input, named, enum
export type OpsFilterOperatorType =
| "Equal"
| "NotEqual"
| "BeginWith"
| "LessThan"
| "GreaterThan"
| "Exists"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface, recursive
export interface OpsAggregator {
  AggregatorType?: string | null;
  TypeName?: string | null;
  AttributeName?: string | null;
  Values?: { [key: string]: string | null | undefined } | null;
  Filters?: OpsFilter[] | null;
  Aggregators?: OpsAggregator[] | null;
}
function fromOpsAggregator(input?: OpsAggregator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AggregatorType: input["AggregatorType"],
    TypeName: input["TypeName"],
    AttributeName: input["AttributeName"],
    Values: input["Values"],
    Filters: input["Filters"]?.map(x => fromOpsFilter(x)),
    Aggregators: input["Aggregators"]?.map(x => fromOpsAggregator(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface OpsResultAttribute {
  TypeName: string;
}
function fromOpsResultAttribute(input?: OpsResultAttribute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TypeName: input["TypeName"],
  }
}

// refs: 1 - tags: input, named, interface
export interface AssociationFilter {
  key: AssociationFilterKey;
  value: string;
}
function fromAssociationFilter(input?: AssociationFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}

// refs: 1 - tags: input, named, enum
export type AssociationFilterKey =
| "InstanceId"
| "Name"
| "AssociationId"
| "AssociationStatusName"
| "LastExecutedBefore"
| "LastExecutedAfter"
| "AssociationName"
| "ResourceGroupName"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface CommandFilter {
  key: CommandFilterKey;
  value: string;
}
function fromCommandFilter(input?: CommandFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}

// refs: 2 - tags: input, named, enum
export type CommandFilterKey =
| "InvokedAfter"
| "InvokedBefore"
| "Status"
| "ExecutionStage"
| "DocumentName"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface
export interface ComplianceStringFilter {
  Key?: string | null;
  Values?: string[] | null;
  Type?: ComplianceQueryOperatorType | null;
}
function fromComplianceStringFilter(input?: ComplianceStringFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
    Type: input["Type"],
  }
}

// refs: 3 - tags: input, named, enum
export type ComplianceQueryOperatorType =
| "EQUAL"
| "NOT_EQUAL"
| "BEGIN_WITH"
| "LESS_THAN"
| "GREATER_THAN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type DocumentMetadataEnum =
| "DocumentReviews"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DocumentFilter {
  key: DocumentFilterKey;
  value: string;
}
function fromDocumentFilter(input?: DocumentFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}

// refs: 1 - tags: input, named, enum
export type DocumentFilterKey =
| "Name"
| "Owner"
| "PlatformTypes"
| "DocumentType"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DocumentKeyValuesFilter {
  Key?: string | null;
  Values?: string[] | null;
}
function fromDocumentKeyValuesFilter(input?: DocumentKeyValuesFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, interface
export interface OpsItemEventFilter {
  Key: OpsItemEventFilterKey;
  Values: string[];
  Operator: OpsItemEventFilterOperator;
}
function fromOpsItemEventFilter(input?: OpsItemEventFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
    Operator: input["Operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type OpsItemEventFilterKey =
| "OpsItemId"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type OpsItemEventFilterOperator =
| "Equal"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface OpsMetadataFilter {
  Key: string;
  Values: string[];
}
function fromOpsMetadataFilter(input?: OpsMetadataFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}

// refs: 3 - tags: input, named, interface, output
export interface ComplianceExecutionSummary {
  ExecutionTime: Date | number;
  ExecutionId?: string | null;
  ExecutionType?: string | null;
}
function fromComplianceExecutionSummary(input?: ComplianceExecutionSummary | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ExecutionTime: jsonP.serializeDate_unixTimestamp(input["ExecutionTime"]),
    ExecutionId: input["ExecutionId"],
    ExecutionType: input["ExecutionType"],
  }
}
function toComplianceExecutionSummary(root: jsonP.JSONValue): ComplianceExecutionSummary {
  return jsonP.readObj({
    required: {
      "ExecutionTime": "d",
    },
    optional: {
      "ExecutionId": "s",
      "ExecutionType": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ComplianceItemEntry {
  Id?: string | null;
  Title?: string | null;
  Severity: ComplianceSeverity;
  Status: ComplianceStatus;
  Details?: { [key: string]: string | null | undefined } | null;
}
function fromComplianceItemEntry(input?: ComplianceItemEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Title: input["Title"],
    Severity: input["Severity"],
    Status: input["Status"],
    Details: input["Details"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type ComplianceSeverity =
| "CRITICAL"
| "HIGH"
| "MEDIUM"
| "LOW"
| "INFORMATIONAL"
| "UNSPECIFIED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ComplianceStatus =
| "COMPLIANT"
| "NON_COMPLIANT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ComplianceUploadType =
| "COMPLETE"
| "PARTIAL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface InventoryItem {
  TypeName: string;
  SchemaVersion: string;
  CaptureTime: string;
  ContentHash?: string | null;
  Content?: ({ [key: string]: string | null | undefined })[] | null;
  Context?: { [key: string]: string | null | undefined } | null;
}
function fromInventoryItem(input?: InventoryItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TypeName: input["TypeName"],
    SchemaVersion: input["SchemaVersion"],
    CaptureTime: input["CaptureTime"],
    ContentHash: input["ContentHash"],
    Content: input["Content"],
    Context: input["Context"],
  }
}

// refs: 6 - tags: input, named, enum, output
export type ParameterType =
| "String"
| "StringList"
| "SecureString"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type ParameterTier =
| "Standard"
| "Advanced"
| "Intelligent-Tiering"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type MaintenanceWindowTaskType =
| "RUN_COMMAND"
| "AUTOMATION"
| "STEP_FUNCTIONS"
| "LAMBDA"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface MaintenanceWindowTaskParameterValueExpression {
  Values?: string[] | null;
}
function fromMaintenanceWindowTaskParameterValueExpression(input?: MaintenanceWindowTaskParameterValueExpression | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Values: input["Values"],
  }
}
function toMaintenanceWindowTaskParameterValueExpression(root: jsonP.JSONValue): MaintenanceWindowTaskParameterValueExpression {
  return jsonP.readObj({
    required: {},
    optional: {
      "Values": ["s"],
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MaintenanceWindowTaskInvocationParameters {
  RunCommand?: MaintenanceWindowRunCommandParameters | null;
  Automation?: MaintenanceWindowAutomationParameters | null;
  StepFunctions?: MaintenanceWindowStepFunctionsParameters | null;
  Lambda?: MaintenanceWindowLambdaParameters | null;
}
function fromMaintenanceWindowTaskInvocationParameters(input?: MaintenanceWindowTaskInvocationParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RunCommand: fromMaintenanceWindowRunCommandParameters(input["RunCommand"]),
    Automation: fromMaintenanceWindowAutomationParameters(input["Automation"]),
    StepFunctions: fromMaintenanceWindowStepFunctionsParameters(input["StepFunctions"]),
    Lambda: fromMaintenanceWindowLambdaParameters(input["Lambda"]),
  }
}
function toMaintenanceWindowTaskInvocationParameters(root: jsonP.JSONValue): MaintenanceWindowTaskInvocationParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "RunCommand": toMaintenanceWindowRunCommandParameters,
      "Automation": toMaintenanceWindowAutomationParameters,
      "StepFunctions": toMaintenanceWindowStepFunctionsParameters,
      "Lambda": toMaintenanceWindowLambdaParameters,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MaintenanceWindowRunCommandParameters {
  Comment?: string | null;
  CloudWatchOutputConfig?: CloudWatchOutputConfig | null;
  DocumentHash?: string | null;
  DocumentHashType?: DocumentHashType | null;
  DocumentVersion?: string | null;
  NotificationConfig?: NotificationConfig | null;
  OutputS3BucketName?: string | null;
  OutputS3KeyPrefix?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  ServiceRoleArn?: string | null;
  TimeoutSeconds?: number | null;
}
function fromMaintenanceWindowRunCommandParameters(input?: MaintenanceWindowRunCommandParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Comment: input["Comment"],
    CloudWatchOutputConfig: fromCloudWatchOutputConfig(input["CloudWatchOutputConfig"]),
    DocumentHash: input["DocumentHash"],
    DocumentHashType: input["DocumentHashType"],
    DocumentVersion: input["DocumentVersion"],
    NotificationConfig: fromNotificationConfig(input["NotificationConfig"]),
    OutputS3BucketName: input["OutputS3BucketName"],
    OutputS3KeyPrefix: input["OutputS3KeyPrefix"],
    Parameters: input["Parameters"],
    ServiceRoleArn: input["ServiceRoleArn"],
    TimeoutSeconds: input["TimeoutSeconds"],
  }
}
function toMaintenanceWindowRunCommandParameters(root: jsonP.JSONValue): MaintenanceWindowRunCommandParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "Comment": "s",
      "CloudWatchOutputConfig": toCloudWatchOutputConfig,
      "DocumentHash": "s",
      "DocumentHashType": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentHashType>(x),
      "DocumentVersion": "s",
      "NotificationConfig": toNotificationConfig,
      "OutputS3BucketName": "s",
      "OutputS3KeyPrefix": "s",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "ServiceRoleArn": "s",
      "TimeoutSeconds": "n",
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface CloudWatchOutputConfig {
  CloudWatchLogGroupName?: string | null;
  CloudWatchOutputEnabled?: boolean | null;
}
function fromCloudWatchOutputConfig(input?: CloudWatchOutputConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CloudWatchLogGroupName: input["CloudWatchLogGroupName"],
    CloudWatchOutputEnabled: input["CloudWatchOutputEnabled"],
  }
}
function toCloudWatchOutputConfig(root: jsonP.JSONValue): CloudWatchOutputConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "CloudWatchLogGroupName": "s",
      "CloudWatchOutputEnabled": "b",
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type DocumentHashType =
| "Sha256"
| "Sha1"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface NotificationConfig {
  NotificationArn?: string | null;
  NotificationEvents?: NotificationEvent[] | null;
  NotificationType?: NotificationType | null;
}
function fromNotificationConfig(input?: NotificationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NotificationArn: input["NotificationArn"],
    NotificationEvents: input["NotificationEvents"],
    NotificationType: input["NotificationType"],
  }
}
function toNotificationConfig(root: jsonP.JSONValue): NotificationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "NotificationArn": "s",
      "NotificationEvents": [(x: jsonP.JSONValue) => cmnP.readEnum<NotificationEvent>(x)],
      "NotificationType": (x: jsonP.JSONValue) => cmnP.readEnum<NotificationType>(x),
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type NotificationEvent =
| "All"
| "InProgress"
| "Success"
| "TimedOut"
| "Cancelled"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, enum, output
export type NotificationType =
| "Command"
| "Invocation"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface MaintenanceWindowAutomationParameters {
  DocumentVersion?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
}
function fromMaintenanceWindowAutomationParameters(input?: MaintenanceWindowAutomationParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentVersion: input["DocumentVersion"],
    Parameters: input["Parameters"],
  }
}
function toMaintenanceWindowAutomationParameters(root: jsonP.JSONValue): MaintenanceWindowAutomationParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentVersion": "s",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MaintenanceWindowStepFunctionsParameters {
  Input?: string | null;
  Name?: string | null;
}
function fromMaintenanceWindowStepFunctionsParameters(input?: MaintenanceWindowStepFunctionsParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Input: input["Input"],
    Name: input["Name"],
  }
}
function toMaintenanceWindowStepFunctionsParameters(root: jsonP.JSONValue): MaintenanceWindowStepFunctionsParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "Input": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MaintenanceWindowLambdaParameters {
  ClientContext?: string | null;
  Qualifier?: string | null;
  Payload?: Uint8Array | string | null;
}
function fromMaintenanceWindowLambdaParameters(input?: MaintenanceWindowLambdaParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ClientContext: input["ClientContext"],
    Qualifier: input["Qualifier"],
    Payload: jsonP.serializeBlob(input["Payload"]),
  }
}
function toMaintenanceWindowLambdaParameters(root: jsonP.JSONValue): MaintenanceWindowLambdaParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "ClientContext": "s",
      "Qualifier": "s",
      "Payload": "a",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface LoggingInfo {
  S3BucketName: string;
  S3KeyPrefix?: string | null;
  S3Region: string;
}
function fromLoggingInfo(input?: LoggingInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3BucketName: input["S3BucketName"],
    S3KeyPrefix: input["S3KeyPrefix"],
    S3Region: input["S3Region"],
  }
}
function toLoggingInfo(root: jsonP.JSONValue): LoggingInfo {
  return jsonP.readObj({
    required: {
      "S3BucketName": "s",
      "S3Region": "s",
    },
    optional: {
      "S3KeyPrefix": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type SignalType =
| "Approve"
| "Reject"
| "StartStep"
| "StopStep"
| "Resume"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type ExecutionMode =
| "Auto"
| "Interactive"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface Runbook {
  DocumentName: string;
  DocumentVersion?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  TargetParameterName?: string | null;
  Targets?: Target[] | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  TargetLocations?: TargetLocation[] | null;
}
function fromRunbook(input?: Runbook | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DocumentName: input["DocumentName"],
    DocumentVersion: input["DocumentVersion"],
    Parameters: input["Parameters"],
    TargetParameterName: input["TargetParameterName"],
    Targets: input["Targets"]?.map(x => fromTarget(x)),
    MaxConcurrency: input["MaxConcurrency"],
    MaxErrors: input["MaxErrors"],
    TargetLocations: input["TargetLocations"]?.map(x => fromTargetLocation(x)),
  }
}
function toRunbook(root: jsonP.JSONValue): Runbook {
  return jsonP.readObj({
    required: {
      "DocumentName": "s",
    },
    optional: {
      "DocumentVersion": "s",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "TargetParameterName": "s",
      "Targets": [toTarget],
      "MaxConcurrency": "s",
      "MaxErrors": "s",
      "TargetLocations": [toTargetLocation],
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type StopType =
| "Complete"
| "Cancel"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface AssociationStatus {
  Date: Date | number;
  Name: AssociationStatusName;
  Message: string;
  AdditionalInfo?: string | null;
}
function fromAssociationStatus(input?: AssociationStatus | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Date: jsonP.serializeDate_unixTimestamp(input["Date"]),
    Name: input["Name"],
    Message: input["Message"],
    AdditionalInfo: input["AdditionalInfo"],
  }
}
function toAssociationStatus(root: jsonP.JSONValue): AssociationStatus {
  return jsonP.readObj({
    required: {
      "Date": "d",
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationStatusName>(x),
      "Message": "s",
    },
    optional: {
      "AdditionalInfo": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type AssociationStatusName =
| "Pending"
| "Success"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DocumentReviews {
  Action: DocumentReviewAction;
  Comment?: DocumentReviewCommentSource[] | null;
}
function fromDocumentReviews(input?: DocumentReviews | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Action: input["Action"],
    Comment: input["Comment"]?.map(x => fromDocumentReviewCommentSource(x)),
  }
}

// refs: 1 - tags: input, named, enum
export type DocumentReviewAction =
| "SendForReview"
| "UpdateReview"
| "Approve"
| "Reject"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface DocumentReviewCommentSource {
  Type?: DocumentReviewCommentType | null;
  Content?: string | null;
}
function fromDocumentReviewCommentSource(input?: DocumentReviewCommentSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Content: input["Content"],
  }
}
function toDocumentReviewCommentSource(root: jsonP.JSONValue): DocumentReviewCommentSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentReviewCommentType>(x),
      "Content": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type DocumentReviewCommentType =
| "Comment"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type OpsItemStatus =
| "Open"
| "InProgress"
| "Resolved"
| "Pending"
| "TimedOut"
| "Cancelling"
| "Cancelled"
| "Failed"
| "CompletedWithSuccess"
| "CompletedWithFailure"
| "Scheduled"
| "RunbookInProgress"
| "PendingChangeCalendarOverride"
| "ChangeCalendarOverrideApproved"
| "ChangeCalendarOverrideRejected"
| "PendingApproval"
| "Approved"
| "Rejected"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface AssociationDescription {
  Name?: string | null;
  InstanceId?: string | null;
  AssociationVersion?: string | null;
  Date?: Date | number | null;
  LastUpdateAssociationDate?: Date | number | null;
  Status?: AssociationStatus | null;
  Overview?: AssociationOverview | null;
  DocumentVersion?: string | null;
  AutomationTargetParameterName?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  AssociationId?: string | null;
  Targets?: Target[] | null;
  ScheduleExpression?: string | null;
  OutputLocation?: InstanceAssociationOutputLocation | null;
  LastExecutionDate?: Date | number | null;
  LastSuccessfulExecutionDate?: Date | number | null;
  AssociationName?: string | null;
  MaxErrors?: string | null;
  MaxConcurrency?: string | null;
  ComplianceSeverity?: AssociationComplianceSeverity | null;
  SyncCompliance?: AssociationSyncCompliance | null;
  ApplyOnlyAtCronInterval?: boolean | null;
  TargetLocations?: TargetLocation[] | null;
}
function toAssociationDescription(root: jsonP.JSONValue): AssociationDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "InstanceId": "s",
      "AssociationVersion": "s",
      "Date": "d",
      "LastUpdateAssociationDate": "d",
      "Status": toAssociationStatus,
      "Overview": toAssociationOverview,
      "DocumentVersion": "s",
      "AutomationTargetParameterName": "s",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "AssociationId": "s",
      "Targets": [toTarget],
      "ScheduleExpression": "s",
      "OutputLocation": toInstanceAssociationOutputLocation,
      "LastExecutionDate": "d",
      "LastSuccessfulExecutionDate": "d",
      "AssociationName": "s",
      "MaxErrors": "s",
      "MaxConcurrency": "s",
      "ComplianceSeverity": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationComplianceSeverity>(x),
      "SyncCompliance": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationSyncCompliance>(x),
      "ApplyOnlyAtCronInterval": "b",
      "TargetLocations": [toTargetLocation],
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface AssociationOverview {
  Status?: string | null;
  DetailedStatus?: string | null;
  AssociationStatusAggregatedCount?: { [key: string]: number | null | undefined } | null;
}
function toAssociationOverview(root: jsonP.JSONValue): AssociationOverview {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": "s",
      "DetailedStatus": "s",
      "AssociationStatusAggregatedCount": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FailedCreateAssociation {
  Entry?: CreateAssociationBatchRequestEntry | null;
  Message?: string | null;
  Fault?: Fault | null;
}
function toFailedCreateAssociation(root: jsonP.JSONValue): FailedCreateAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Entry": toCreateAssociationBatchRequestEntry,
      "Message": "s",
      "Fault": (x: jsonP.JSONValue) => cmnP.readEnum<Fault>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Fault =
| "Client"
| "Server"
| "Unknown"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface DocumentDescription {
  Sha1?: string | null;
  Hash?: string | null;
  HashType?: DocumentHashType | null;
  Name?: string | null;
  VersionName?: string | null;
  Owner?: string | null;
  CreatedDate?: Date | number | null;
  Status?: DocumentStatus | null;
  StatusInformation?: string | null;
  DocumentVersion?: string | null;
  Description?: string | null;
  Parameters?: DocumentParameter[] | null;
  PlatformTypes?: PlatformType[] | null;
  DocumentType?: DocumentType | null;
  SchemaVersion?: string | null;
  LatestVersion?: string | null;
  DefaultVersion?: string | null;
  DocumentFormat?: DocumentFormat | null;
  TargetType?: string | null;
  Tags?: Tag[] | null;
  AttachmentsInformation?: AttachmentInformation[] | null;
  Requires?: DocumentRequires[] | null;
  Author?: string | null;
  ReviewInformation?: ReviewInformation[] | null;
  ApprovedVersion?: string | null;
  PendingReviewVersion?: string | null;
  ReviewStatus?: ReviewStatus | null;
}
function toDocumentDescription(root: jsonP.JSONValue): DocumentDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "Sha1": "s",
      "Hash": "s",
      "HashType": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentHashType>(x),
      "Name": "s",
      "VersionName": "s",
      "Owner": "s",
      "CreatedDate": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentStatus>(x),
      "StatusInformation": "s",
      "DocumentVersion": "s",
      "Description": "s",
      "Parameters": [toDocumentParameter],
      "PlatformTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<PlatformType>(x)],
      "DocumentType": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentType>(x),
      "SchemaVersion": "s",
      "LatestVersion": "s",
      "DefaultVersion": "s",
      "DocumentFormat": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentFormat>(x),
      "TargetType": "s",
      "Tags": [toTag],
      "AttachmentsInformation": [toAttachmentInformation],
      "Requires": [toDocumentRequires],
      "Author": "s",
      "ReviewInformation": [toReviewInformation],
      "ApprovedVersion": "s",
      "PendingReviewVersion": "s",
      "ReviewStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ReviewStatus>(x),
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type DocumentStatus =
| "Creating"
| "Active"
| "Updating"
| "Deleting"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface DocumentParameter {
  Name?: string | null;
  Type?: DocumentParameterType | null;
  Description?: string | null;
  DefaultValue?: string | null;
}
function toDocumentParameter(root: jsonP.JSONValue): DocumentParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentParameterType>(x),
      "Description": "s",
      "DefaultValue": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type DocumentParameterType =
| "String"
| "StringList"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, enum
export type PlatformType =
| "Windows"
| "Linux"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface AttachmentInformation {
  Name?: string | null;
}
function toAttachmentInformation(root: jsonP.JSONValue): AttachmentInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ReviewInformation {
  ReviewedTime?: Date | number | null;
  Status?: ReviewStatus | null;
  Reviewer?: string | null;
}
function toReviewInformation(root: jsonP.JSONValue): ReviewInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReviewedTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ReviewStatus>(x),
      "Reviewer": "s",
    },
  }, root);
}

// refs: 10 - tags: output, named, enum
export type ReviewStatus =
| "APPROVED"
| "NOT_REVIEWED"
| "PENDING"
| "REJECTED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface InventoryDeletionSummary {
  TotalCount?: number | null;
  RemainingCount?: number | null;
  SummaryItems?: InventoryDeletionSummaryItem[] | null;
}
function toInventoryDeletionSummary(root: jsonP.JSONValue): InventoryDeletionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "TotalCount": "n",
      "RemainingCount": "n",
      "SummaryItems": [toInventoryDeletionSummaryItem],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface InventoryDeletionSummaryItem {
  Version?: string | null;
  Count?: number | null;
  RemainingCount?: number | null;
}
function toInventoryDeletionSummaryItem(root: jsonP.JSONValue): InventoryDeletionSummaryItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Version": "s",
      "Count": "n",
      "RemainingCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Activation {
  ActivationId?: string | null;
  Description?: string | null;
  DefaultInstanceName?: string | null;
  IamRole?: string | null;
  RegistrationLimit?: number | null;
  RegistrationsCount?: number | null;
  ExpirationDate?: Date | number | null;
  Expired?: boolean | null;
  CreatedDate?: Date | number | null;
  Tags?: Tag[] | null;
}
function toActivation(root: jsonP.JSONValue): Activation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ActivationId": "s",
      "Description": "s",
      "DefaultInstanceName": "s",
      "IamRole": "s",
      "RegistrationLimit": "n",
      "RegistrationsCount": "n",
      "ExpirationDate": "d",
      "Expired": "b",
      "CreatedDate": "d",
      "Tags": [toTag],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssociationExecutionTarget {
  AssociationId?: string | null;
  AssociationVersion?: string | null;
  ExecutionId?: string | null;
  ResourceId?: string | null;
  ResourceType?: string | null;
  Status?: string | null;
  DetailedStatus?: string | null;
  LastExecutionDate?: Date | number | null;
  OutputSource?: OutputSource | null;
}
function toAssociationExecutionTarget(root: jsonP.JSONValue): AssociationExecutionTarget {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationId": "s",
      "AssociationVersion": "s",
      "ExecutionId": "s",
      "ResourceId": "s",
      "ResourceType": "s",
      "Status": "s",
      "DetailedStatus": "s",
      "LastExecutionDate": "d",
      "OutputSource": toOutputSource,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OutputSource {
  OutputSourceId?: string | null;
  OutputSourceType?: string | null;
}
function toOutputSource(root: jsonP.JSONValue): OutputSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutputSourceId": "s",
      "OutputSourceType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssociationExecution {
  AssociationId?: string | null;
  AssociationVersion?: string | null;
  ExecutionId?: string | null;
  Status?: string | null;
  DetailedStatus?: string | null;
  CreatedTime?: Date | number | null;
  LastExecutionDate?: Date | number | null;
  ResourceCountByStatus?: string | null;
}
function toAssociationExecution(root: jsonP.JSONValue): AssociationExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationId": "s",
      "AssociationVersion": "s",
      "ExecutionId": "s",
      "Status": "s",
      "DetailedStatus": "s",
      "CreatedTime": "d",
      "LastExecutionDate": "d",
      "ResourceCountByStatus": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AutomationExecutionMetadata {
  AutomationExecutionId?: string | null;
  DocumentName?: string | null;
  DocumentVersion?: string | null;
  AutomationExecutionStatus?: AutomationExecutionStatus | null;
  ExecutionStartTime?: Date | number | null;
  ExecutionEndTime?: Date | number | null;
  ExecutedBy?: string | null;
  LogFile?: string | null;
  Outputs?: { [key: string]: string[] | null | undefined } | null;
  Mode?: ExecutionMode | null;
  ParentAutomationExecutionId?: string | null;
  CurrentStepName?: string | null;
  CurrentAction?: string | null;
  FailureMessage?: string | null;
  TargetParameterName?: string | null;
  Targets?: Target[] | null;
  TargetMaps?: ({ [key: string]: string[] | null | undefined })[] | null;
  ResolvedTargets?: ResolvedTargets | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  Target?: string | null;
  AutomationType?: AutomationType | null;
  AutomationSubtype?: AutomationSubtype | null;
  ScheduledTime?: Date | number | null;
  Runbooks?: Runbook[] | null;
  OpsItemId?: string | null;
  AssociationId?: string | null;
  ChangeRequestName?: string | null;
}
function toAutomationExecutionMetadata(root: jsonP.JSONValue): AutomationExecutionMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "AutomationExecutionId": "s",
      "DocumentName": "s",
      "DocumentVersion": "s",
      "AutomationExecutionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AutomationExecutionStatus>(x),
      "ExecutionStartTime": "d",
      "ExecutionEndTime": "d",
      "ExecutedBy": "s",
      "LogFile": "s",
      "Outputs": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionMode>(x),
      "ParentAutomationExecutionId": "s",
      "CurrentStepName": "s",
      "CurrentAction": "s",
      "FailureMessage": "s",
      "TargetParameterName": "s",
      "Targets": [toTarget],
      "TargetMaps": [x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x)],
      "ResolvedTargets": toResolvedTargets,
      "MaxConcurrency": "s",
      "MaxErrors": "s",
      "Target": "s",
      "AutomationType": (x: jsonP.JSONValue) => cmnP.readEnum<AutomationType>(x),
      "AutomationSubtype": (x: jsonP.JSONValue) => cmnP.readEnum<AutomationSubtype>(x),
      "ScheduledTime": "d",
      "Runbooks": [toRunbook],
      "OpsItemId": "s",
      "AssociationId": "s",
      "ChangeRequestName": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type AutomationExecutionStatus =
| "Pending"
| "InProgress"
| "Waiting"
| "Success"
| "TimedOut"
| "Cancelling"
| "Cancelled"
| "Failed"
| "PendingApproval"
| "Approved"
| "Rejected"
| "Scheduled"
| "RunbookInProgress"
| "PendingChangeCalendarOverride"
| "ChangeCalendarOverrideApproved"
| "ChangeCalendarOverrideRejected"
| "CompletedWithSuccess"
| "CompletedWithFailure"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ResolvedTargets {
  ParameterValues?: string[] | null;
  Truncated?: boolean | null;
}
function toResolvedTargets(root: jsonP.JSONValue): ResolvedTargets {
  return jsonP.readObj({
    required: {},
    optional: {
      "ParameterValues": ["s"],
      "Truncated": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AutomationType =
| "CrossAccount"
| "Local"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type AutomationSubtype =
| "ChangeRequest"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface StepExecution {
  StepName?: string | null;
  Action?: string | null;
  TimeoutSeconds?: number | null;
  OnFailure?: string | null;
  MaxAttempts?: number | null;
  ExecutionStartTime?: Date | number | null;
  ExecutionEndTime?: Date | number | null;
  StepStatus?: AutomationExecutionStatus | null;
  ResponseCode?: string | null;
  Inputs?: { [key: string]: string | null | undefined } | null;
  Outputs?: { [key: string]: string[] | null | undefined } | null;
  Response?: string | null;
  FailureMessage?: string | null;
  FailureDetails?: FailureDetails | null;
  StepExecutionId?: string | null;
  OverriddenParameters?: { [key: string]: string[] | null | undefined } | null;
  IsEnd?: boolean | null;
  NextStep?: string | null;
  IsCritical?: boolean | null;
  ValidNextSteps?: string[] | null;
  Targets?: Target[] | null;
  TargetLocation?: TargetLocation | null;
}
function toStepExecution(root: jsonP.JSONValue): StepExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "StepName": "s",
      "Action": "s",
      "TimeoutSeconds": "n",
      "OnFailure": "s",
      "MaxAttempts": "n",
      "ExecutionStartTime": "d",
      "ExecutionEndTime": "d",
      "StepStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AutomationExecutionStatus>(x),
      "ResponseCode": "s",
      "Inputs": x => jsonP.readMap(String, String, x),
      "Outputs": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "Response": "s",
      "FailureMessage": "s",
      "FailureDetails": toFailureDetails,
      "StepExecutionId": "s",
      "OverriddenParameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "IsEnd": "b",
      "NextStep": "s",
      "IsCritical": "b",
      "ValidNextSteps": ["s"],
      "Targets": [toTarget],
      "TargetLocation": toTargetLocation,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface FailureDetails {
  FailureStage?: string | null;
  FailureType?: string | null;
  Details?: { [key: string]: string[] | null | undefined } | null;
}
function toFailureDetails(root: jsonP.JSONValue): FailureDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailureStage": "s",
      "FailureType": "s",
      "Details": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Patch {
  Id?: string | null;
  ReleaseDate?: Date | number | null;
  Title?: string | null;
  Description?: string | null;
  ContentUrl?: string | null;
  Vendor?: string | null;
  ProductFamily?: string | null;
  Product?: string | null;
  Classification?: string | null;
  MsrcSeverity?: string | null;
  KbNumber?: string | null;
  MsrcNumber?: string | null;
  Language?: string | null;
  AdvisoryIds?: string[] | null;
  BugzillaIds?: string[] | null;
  CVEIds?: string[] | null;
  Name?: string | null;
  Epoch?: number | null;
  Version?: string | null;
  Release?: string | null;
  Arch?: string | null;
  Severity?: string | null;
  Repository?: string | null;
}
function toPatch(root: jsonP.JSONValue): Patch {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "ReleaseDate": "d",
      "Title": "s",
      "Description": "s",
      "ContentUrl": "s",
      "Vendor": "s",
      "ProductFamily": "s",
      "Product": "s",
      "Classification": "s",
      "MsrcSeverity": "s",
      "KbNumber": "s",
      "MsrcNumber": "s",
      "Language": "s",
      "AdvisoryIds": ["s"],
      "BugzillaIds": ["s"],
      "CVEIds": ["s"],
      "Name": "s",
      "Epoch": "n",
      "Version": "s",
      "Release": "s",
      "Arch": "s",
      "Severity": "s",
      "Repository": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccountSharingInfo {
  AccountId?: string | null;
  SharedDocumentVersion?: string | null;
}
function toAccountSharingInfo(root: jsonP.JSONValue): AccountSharingInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "SharedDocumentVersion": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceAssociation {
  AssociationId?: string | null;
  InstanceId?: string | null;
  Content?: string | null;
  AssociationVersion?: string | null;
}
function toInstanceAssociation(root: jsonP.JSONValue): InstanceAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationId": "s",
      "InstanceId": "s",
      "Content": "s",
      "AssociationVersion": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EffectivePatch {
  Patch?: Patch | null;
  PatchStatus?: PatchStatus | null;
}
function toEffectivePatch(root: jsonP.JSONValue): EffectivePatch {
  return jsonP.readObj({
    required: {},
    optional: {
      "Patch": toPatch,
      "PatchStatus": toPatchStatus,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PatchStatus {
  DeploymentStatus?: PatchDeploymentStatus | null;
  ComplianceLevel?: PatchComplianceLevel | null;
  ApprovalDate?: Date | number | null;
}
function toPatchStatus(root: jsonP.JSONValue): PatchStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PatchDeploymentStatus>(x),
      "ComplianceLevel": (x: jsonP.JSONValue) => cmnP.readEnum<PatchComplianceLevel>(x),
      "ApprovalDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type PatchDeploymentStatus =
| "APPROVED"
| "PENDING_APPROVAL"
| "EXPLICIT_APPROVED"
| "EXPLICIT_REJECTED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface InstanceAssociationStatusInfo {
  AssociationId?: string | null;
  Name?: string | null;
  DocumentVersion?: string | null;
  AssociationVersion?: string | null;
  InstanceId?: string | null;
  ExecutionDate?: Date | number | null;
  Status?: string | null;
  DetailedStatus?: string | null;
  ExecutionSummary?: string | null;
  ErrorCode?: string | null;
  OutputUrl?: InstanceAssociationOutputUrl | null;
  AssociationName?: string | null;
}
function toInstanceAssociationStatusInfo(root: jsonP.JSONValue): InstanceAssociationStatusInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationId": "s",
      "Name": "s",
      "DocumentVersion": "s",
      "AssociationVersion": "s",
      "InstanceId": "s",
      "ExecutionDate": "d",
      "Status": "s",
      "DetailedStatus": "s",
      "ExecutionSummary": "s",
      "ErrorCode": "s",
      "OutputUrl": toInstanceAssociationOutputUrl,
      "AssociationName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceAssociationOutputUrl {
  S3OutputUrl?: S3OutputUrl | null;
}
function toInstanceAssociationOutputUrl(root: jsonP.JSONValue): InstanceAssociationOutputUrl {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3OutputUrl": toS3OutputUrl,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface S3OutputUrl {
  OutputUrl?: string | null;
}
function toS3OutputUrl(root: jsonP.JSONValue): S3OutputUrl {
  return jsonP.readObj({
    required: {},
    optional: {
      "OutputUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceInformation {
  InstanceId?: string | null;
  PingStatus?: PingStatus | null;
  LastPingDateTime?: Date | number | null;
  AgentVersion?: string | null;
  IsLatestVersion?: boolean | null;
  PlatformType?: PlatformType | null;
  PlatformName?: string | null;
  PlatformVersion?: string | null;
  ActivationId?: string | null;
  IamRole?: string | null;
  RegistrationDate?: Date | number | null;
  ResourceType?: ResourceType | null;
  Name?: string | null;
  IPAddress?: string | null;
  ComputerName?: string | null;
  AssociationStatus?: string | null;
  LastAssociationExecutionDate?: Date | number | null;
  LastSuccessfulAssociationExecutionDate?: Date | number | null;
  AssociationOverview?: InstanceAggregatedAssociationOverview | null;
}
function toInstanceInformation(root: jsonP.JSONValue): InstanceInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "InstanceId": "s",
      "PingStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PingStatus>(x),
      "LastPingDateTime": "d",
      "AgentVersion": "s",
      "IsLatestVersion": "b",
      "PlatformType": (x: jsonP.JSONValue) => cmnP.readEnum<PlatformType>(x),
      "PlatformName": "s",
      "PlatformVersion": "s",
      "ActivationId": "s",
      "IamRole": "s",
      "RegistrationDate": "d",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "Name": "s",
      "IPAddress": "s",
      "ComputerName": "s",
      "AssociationStatus": "s",
      "LastAssociationExecutionDate": "d",
      "LastSuccessfulAssociationExecutionDate": "d",
      "AssociationOverview": toInstanceAggregatedAssociationOverview,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type PingStatus =
| "Online"
| "ConnectionLost"
| "Inactive"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type ResourceType =
| "ManagedInstance"
| "Document"
| "EC2Instance"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface InstanceAggregatedAssociationOverview {
  DetailedStatus?: string | null;
  InstanceAssociationStatusAggregatedCount?: { [key: string]: number | null | undefined } | null;
}
function toInstanceAggregatedAssociationOverview(root: jsonP.JSONValue): InstanceAggregatedAssociationOverview {
  return jsonP.readObj({
    required: {},
    optional: {
      "DetailedStatus": "s",
      "InstanceAssociationStatusAggregatedCount": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface InstancePatchState {
  InstanceId: string;
  PatchGroup: string;
  BaselineId: string;
  SnapshotId?: string | null;
  InstallOverrideList?: string | null;
  OwnerInformation?: string | null;
  InstalledCount?: number | null;
  InstalledOtherCount?: number | null;
  InstalledPendingRebootCount?: number | null;
  InstalledRejectedCount?: number | null;
  MissingCount?: number | null;
  FailedCount?: number | null;
  UnreportedNotApplicableCount?: number | null;
  NotApplicableCount?: number | null;
  OperationStartTime: Date | number;
  OperationEndTime: Date | number;
  Operation: PatchOperationType;
  LastNoRebootInstallOperationTime?: Date | number | null;
  RebootOption?: RebootOption | null;
}
function toInstancePatchState(root: jsonP.JSONValue): InstancePatchState {
  return jsonP.readObj({
    required: {
      "InstanceId": "s",
      "PatchGroup": "s",
      "BaselineId": "s",
      "OperationStartTime": "d",
      "OperationEndTime": "d",
      "Operation": (x: jsonP.JSONValue) => cmnP.readEnum<PatchOperationType>(x),
    },
    optional: {
      "SnapshotId": "s",
      "InstallOverrideList": "s",
      "OwnerInformation": "s",
      "InstalledCount": "n",
      "InstalledOtherCount": "n",
      "InstalledPendingRebootCount": "n",
      "InstalledRejectedCount": "n",
      "MissingCount": "n",
      "FailedCount": "n",
      "UnreportedNotApplicableCount": "n",
      "NotApplicableCount": "n",
      "LastNoRebootInstallOperationTime": "d",
      "RebootOption": (x: jsonP.JSONValue) => cmnP.readEnum<RebootOption>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type PatchOperationType =
| "Scan"
| "Install"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type RebootOption =
| "RebootIfNeeded"
| "NoReboot"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface PatchComplianceData {
  Title: string;
  KBId: string;
  Classification: string;
  Severity: string;
  State: PatchComplianceDataState;
  InstalledTime: Date | number;
  CVEIds?: string | null;
}
function toPatchComplianceData(root: jsonP.JSONValue): PatchComplianceData {
  return jsonP.readObj({
    required: {
      "Title": "s",
      "KBId": "s",
      "Classification": "s",
      "Severity": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<PatchComplianceDataState>(x),
      "InstalledTime": "d",
    },
    optional: {
      "CVEIds": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type PatchComplianceDataState =
| "INSTALLED"
| "INSTALLED_OTHER"
| "INSTALLED_PENDING_REBOOT"
| "INSTALLED_REJECTED"
| "MISSING"
| "NOT_APPLICABLE"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface InventoryDeletionStatusItem {
  DeletionId?: string | null;
  TypeName?: string | null;
  DeletionStartTime?: Date | number | null;
  LastStatus?: InventoryDeletionStatus | null;
  LastStatusMessage?: string | null;
  DeletionSummary?: InventoryDeletionSummary | null;
  LastStatusUpdateTime?: Date | number | null;
}
function toInventoryDeletionStatusItem(root: jsonP.JSONValue): InventoryDeletionStatusItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeletionId": "s",
      "TypeName": "s",
      "DeletionStartTime": "d",
      "LastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<InventoryDeletionStatus>(x),
      "LastStatusMessage": "s",
      "DeletionSummary": toInventoryDeletionSummary,
      "LastStatusUpdateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type InventoryDeletionStatus =
| "InProgress"
| "Complete"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface MaintenanceWindowExecutionTaskInvocationIdentity {
  WindowExecutionId?: string | null;
  TaskExecutionId?: string | null;
  InvocationId?: string | null;
  ExecutionId?: string | null;
  TaskType?: MaintenanceWindowTaskType | null;
  Parameters?: string | null;
  Status?: MaintenanceWindowExecutionStatus | null;
  StatusDetails?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  OwnerInformation?: string | null;
  WindowTargetId?: string | null;
}
function toMaintenanceWindowExecutionTaskInvocationIdentity(root: jsonP.JSONValue): MaintenanceWindowExecutionTaskInvocationIdentity {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowExecutionId": "s",
      "TaskExecutionId": "s",
      "InvocationId": "s",
      "ExecutionId": "s",
      "TaskType": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowTaskType>(x),
      "Parameters": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowExecutionStatus>(x),
      "StatusDetails": "s",
      "StartTime": "d",
      "EndTime": "d",
      "OwnerInformation": "s",
      "WindowTargetId": "s",
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type MaintenanceWindowExecutionStatus =
| "PENDING"
| "IN_PROGRESS"
| "SUCCESS"
| "FAILED"
| "TIMED_OUT"
| "CANCELLING"
| "CANCELLED"
| "SKIPPED_OVERLAPPING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface MaintenanceWindowExecutionTaskIdentity {
  WindowExecutionId?: string | null;
  TaskExecutionId?: string | null;
  Status?: MaintenanceWindowExecutionStatus | null;
  StatusDetails?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  TaskArn?: string | null;
  TaskType?: MaintenanceWindowTaskType | null;
}
function toMaintenanceWindowExecutionTaskIdentity(root: jsonP.JSONValue): MaintenanceWindowExecutionTaskIdentity {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowExecutionId": "s",
      "TaskExecutionId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowExecutionStatus>(x),
      "StatusDetails": "s",
      "StartTime": "d",
      "EndTime": "d",
      "TaskArn": "s",
      "TaskType": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowTaskType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MaintenanceWindowExecution {
  WindowId?: string | null;
  WindowExecutionId?: string | null;
  Status?: MaintenanceWindowExecutionStatus | null;
  StatusDetails?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
}
function toMaintenanceWindowExecution(root: jsonP.JSONValue): MaintenanceWindowExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowId": "s",
      "WindowExecutionId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowExecutionStatus>(x),
      "StatusDetails": "s",
      "StartTime": "d",
      "EndTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ScheduledWindowExecution {
  WindowId?: string | null;
  Name?: string | null;
  ExecutionTime?: string | null;
}
function toScheduledWindowExecution(root: jsonP.JSONValue): ScheduledWindowExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowId": "s",
      "Name": "s",
      "ExecutionTime": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MaintenanceWindowTarget {
  WindowId?: string | null;
  WindowTargetId?: string | null;
  ResourceType?: MaintenanceWindowResourceType | null;
  Targets?: Target[] | null;
  OwnerInformation?: string | null;
  Name?: string | null;
  Description?: string | null;
}
function toMaintenanceWindowTarget(root: jsonP.JSONValue): MaintenanceWindowTarget {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowId": "s",
      "WindowTargetId": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowResourceType>(x),
      "Targets": [toTarget],
      "OwnerInformation": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MaintenanceWindowTask {
  WindowId?: string | null;
  WindowTaskId?: string | null;
  TaskArn?: string | null;
  Type?: MaintenanceWindowTaskType | null;
  Targets?: Target[] | null;
  TaskParameters?: { [key: string]: MaintenanceWindowTaskParameterValueExpression | null | undefined } | null;
  Priority?: number | null;
  LoggingInfo?: LoggingInfo | null;
  ServiceRoleArn?: string | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  Name?: string | null;
  Description?: string | null;
}
function toMaintenanceWindowTask(root: jsonP.JSONValue): MaintenanceWindowTask {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowId": "s",
      "WindowTaskId": "s",
      "TaskArn": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<MaintenanceWindowTaskType>(x),
      "Targets": [toTarget],
      "TaskParameters": x => jsonP.readMap(String, toMaintenanceWindowTaskParameterValueExpression, x),
      "Priority": "n",
      "LoggingInfo": toLoggingInfo,
      "ServiceRoleArn": "s",
      "MaxConcurrency": "s",
      "MaxErrors": "s",
      "Name": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MaintenanceWindowIdentity {
  WindowId?: string | null;
  Name?: string | null;
  Description?: string | null;
  Enabled?: boolean | null;
  Duration?: number | null;
  Cutoff?: number | null;
  Schedule?: string | null;
  ScheduleTimezone?: string | null;
  ScheduleOffset?: number | null;
  EndDate?: string | null;
  StartDate?: string | null;
  NextExecutionTime?: string | null;
}
function toMaintenanceWindowIdentity(root: jsonP.JSONValue): MaintenanceWindowIdentity {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowId": "s",
      "Name": "s",
      "Description": "s",
      "Enabled": "b",
      "Duration": "n",
      "Cutoff": "n",
      "Schedule": "s",
      "ScheduleTimezone": "s",
      "ScheduleOffset": "n",
      "EndDate": "s",
      "StartDate": "s",
      "NextExecutionTime": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MaintenanceWindowIdentityForTarget {
  WindowId?: string | null;
  Name?: string | null;
}
function toMaintenanceWindowIdentityForTarget(root: jsonP.JSONValue): MaintenanceWindowIdentityForTarget {
  return jsonP.readObj({
    required: {},
    optional: {
      "WindowId": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OpsItemSummary {
  CreatedBy?: string | null;
  CreatedTime?: Date | number | null;
  LastModifiedBy?: string | null;
  LastModifiedTime?: Date | number | null;
  Priority?: number | null;
  Source?: string | null;
  Status?: OpsItemStatus | null;
  OpsItemId?: string | null;
  Title?: string | null;
  OperationalData?: { [key: string]: OpsItemDataValue | null | undefined } | null;
  Category?: string | null;
  Severity?: string | null;
  OpsItemType?: string | null;
  ActualStartTime?: Date | number | null;
  ActualEndTime?: Date | number | null;
  PlannedStartTime?: Date | number | null;
  PlannedEndTime?: Date | number | null;
}
function toOpsItemSummary(root: jsonP.JSONValue): OpsItemSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedBy": "s",
      "CreatedTime": "d",
      "LastModifiedBy": "s",
      "LastModifiedTime": "d",
      "Priority": "n",
      "Source": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<OpsItemStatus>(x),
      "OpsItemId": "s",
      "Title": "s",
      "OperationalData": x => jsonP.readMap(String, toOpsItemDataValue, x),
      "Category": "s",
      "Severity": "s",
      "OpsItemType": "s",
      "ActualStartTime": "d",
      "ActualEndTime": "d",
      "PlannedStartTime": "d",
      "PlannedEndTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ParameterMetadata {
  Name?: string | null;
  Type?: ParameterType | null;
  KeyId?: string | null;
  LastModifiedDate?: Date | number | null;
  LastModifiedUser?: string | null;
  Description?: string | null;
  AllowedPattern?: string | null;
  Version?: number | null;
  Tier?: ParameterTier | null;
  Policies?: ParameterInlinePolicy[] | null;
  DataType?: string | null;
}
function toParameterMetadata(root: jsonP.JSONValue): ParameterMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ParameterType>(x),
      "KeyId": "s",
      "LastModifiedDate": "d",
      "LastModifiedUser": "s",
      "Description": "s",
      "AllowedPattern": "s",
      "Version": "n",
      "Tier": (x: jsonP.JSONValue) => cmnP.readEnum<ParameterTier>(x),
      "Policies": [toParameterInlinePolicy],
      "DataType": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ParameterInlinePolicy {
  PolicyText?: string | null;
  PolicyType?: string | null;
  PolicyStatus?: string | null;
}
function toParameterInlinePolicy(root: jsonP.JSONValue): ParameterInlinePolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "PolicyText": "s",
      "PolicyType": "s",
      "PolicyStatus": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PatchBaselineIdentity {
  BaselineId?: string | null;
  BaselineName?: string | null;
  OperatingSystem?: OperatingSystem | null;
  BaselineDescription?: string | null;
  DefaultBaseline?: boolean | null;
}
function toPatchBaselineIdentity(root: jsonP.JSONValue): PatchBaselineIdentity {
  return jsonP.readObj({
    required: {},
    optional: {
      "BaselineId": "s",
      "BaselineName": "s",
      "OperatingSystem": (x: jsonP.JSONValue) => cmnP.readEnum<OperatingSystem>(x),
      "BaselineDescription": "s",
      "DefaultBaseline": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PatchGroupPatchBaselineMapping {
  PatchGroup?: string | null;
  BaselineIdentity?: PatchBaselineIdentity | null;
}
function toPatchGroupPatchBaselineMapping(root: jsonP.JSONValue): PatchGroupPatchBaselineMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "PatchGroup": "s",
      "BaselineIdentity": toPatchBaselineIdentity,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Session {
  SessionId?: string | null;
  Target?: string | null;
  Status?: SessionStatus | null;
  StartDate?: Date | number | null;
  EndDate?: Date | number | null;
  DocumentName?: string | null;
  Owner?: string | null;
  Details?: string | null;
  OutputUrl?: SessionManagerOutputUrl | null;
}
function toSession(root: jsonP.JSONValue): Session {
  return jsonP.readObj({
    required: {},
    optional: {
      "SessionId": "s",
      "Target": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<SessionStatus>(x),
      "StartDate": "d",
      "EndDate": "d",
      "DocumentName": "s",
      "Owner": "s",
      "Details": "s",
      "OutputUrl": toSessionManagerOutputUrl,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SessionStatus =
| "Connected"
| "Connecting"
| "Disconnected"
| "Terminated"
| "Terminating"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface SessionManagerOutputUrl {
  S3OutputUrl?: string | null;
  CloudWatchOutputUrl?: string | null;
}
function toSessionManagerOutputUrl(root: jsonP.JSONValue): SessionManagerOutputUrl {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3OutputUrl": "s",
      "CloudWatchOutputUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AutomationExecution {
  AutomationExecutionId?: string | null;
  DocumentName?: string | null;
  DocumentVersion?: string | null;
  ExecutionStartTime?: Date | number | null;
  ExecutionEndTime?: Date | number | null;
  AutomationExecutionStatus?: AutomationExecutionStatus | null;
  StepExecutions?: StepExecution[] | null;
  StepExecutionsTruncated?: boolean | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  Outputs?: { [key: string]: string[] | null | undefined } | null;
  FailureMessage?: string | null;
  Mode?: ExecutionMode | null;
  ParentAutomationExecutionId?: string | null;
  ExecutedBy?: string | null;
  CurrentStepName?: string | null;
  CurrentAction?: string | null;
  TargetParameterName?: string | null;
  Targets?: Target[] | null;
  TargetMaps?: ({ [key: string]: string[] | null | undefined })[] | null;
  ResolvedTargets?: ResolvedTargets | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  Target?: string | null;
  TargetLocations?: TargetLocation[] | null;
  ProgressCounters?: ProgressCounters | null;
  AutomationSubtype?: AutomationSubtype | null;
  ScheduledTime?: Date | number | null;
  Runbooks?: Runbook[] | null;
  OpsItemId?: string | null;
  AssociationId?: string | null;
  ChangeRequestName?: string | null;
}
function toAutomationExecution(root: jsonP.JSONValue): AutomationExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "AutomationExecutionId": "s",
      "DocumentName": "s",
      "DocumentVersion": "s",
      "ExecutionStartTime": "d",
      "ExecutionEndTime": "d",
      "AutomationExecutionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AutomationExecutionStatus>(x),
      "StepExecutions": [toStepExecution],
      "StepExecutionsTruncated": "b",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "Outputs": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "FailureMessage": "s",
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionMode>(x),
      "ParentAutomationExecutionId": "s",
      "ExecutedBy": "s",
      "CurrentStepName": "s",
      "CurrentAction": "s",
      "TargetParameterName": "s",
      "Targets": [toTarget],
      "TargetMaps": [x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x)],
      "ResolvedTargets": toResolvedTargets,
      "MaxConcurrency": "s",
      "MaxErrors": "s",
      "Target": "s",
      "TargetLocations": [toTargetLocation],
      "ProgressCounters": toProgressCounters,
      "AutomationSubtype": (x: jsonP.JSONValue) => cmnP.readEnum<AutomationSubtype>(x),
      "ScheduledTime": "d",
      "Runbooks": [toRunbook],
      "OpsItemId": "s",
      "AssociationId": "s",
      "ChangeRequestName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProgressCounters {
  TotalSteps?: number | null;
  SuccessSteps?: number | null;
  FailedSteps?: number | null;
  CancelledSteps?: number | null;
  TimedOutSteps?: number | null;
}
function toProgressCounters(root: jsonP.JSONValue): ProgressCounters {
  return jsonP.readObj({
    required: {},
    optional: {
      "TotalSteps": "n",
      "SuccessSteps": "n",
      "FailedSteps": "n",
      "CancelledSteps": "n",
      "TimedOutSteps": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type CalendarState =
| "OPEN"
| "CLOSED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type CommandInvocationStatus =
| "Pending"
| "InProgress"
| "Delayed"
| "Success"
| "Cancelled"
| "TimedOut"
| "Failed"
| "Cancelling"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type ConnectionStatus =
| "Connected"
| "NotConnected"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AttachmentContent {
  Name?: string | null;
  Size?: number | null;
  Hash?: string | null;
  HashType?: AttachmentHashType | null;
  Url?: string | null;
}
function toAttachmentContent(root: jsonP.JSONValue): AttachmentContent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Size": "n",
      "Hash": "s",
      "HashType": (x: jsonP.JSONValue) => cmnP.readEnum<AttachmentHashType>(x),
      "Url": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AttachmentHashType =
| "Sha256"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface InventoryResultEntity {
  Id?: string | null;
  Data?: { [key: string]: InventoryResultItem | null | undefined } | null;
}
function toInventoryResultEntity(root: jsonP.JSONValue): InventoryResultEntity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Data": x => jsonP.readMap(String, toInventoryResultItem, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InventoryResultItem {
  TypeName: string;
  SchemaVersion: string;
  CaptureTime?: string | null;
  ContentHash?: string | null;
  Content: ({ [key: string]: string | null | undefined })[];
}
function toInventoryResultItem(root: jsonP.JSONValue): InventoryResultItem {
  return jsonP.readObj({
    required: {
      "TypeName": "s",
      "SchemaVersion": "s",
      "Content": [x => jsonP.readMap(String, String, x)],
    },
    optional: {
      "CaptureTime": "s",
      "ContentHash": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InventoryItemSchema {
  TypeName: string;
  Version?: string | null;
  Attributes: InventoryItemAttribute[];
  DisplayName?: string | null;
}
function toInventoryItemSchema(root: jsonP.JSONValue): InventoryItemSchema {
  return jsonP.readObj({
    required: {
      "TypeName": "s",
      "Attributes": [toInventoryItemAttribute],
    },
    optional: {
      "Version": "s",
      "DisplayName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InventoryItemAttribute {
  Name: string;
  DataType: InventoryAttributeDataType;
}
function toInventoryItemAttribute(root: jsonP.JSONValue): InventoryItemAttribute {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "DataType": (x: jsonP.JSONValue) => cmnP.readEnum<InventoryAttributeDataType>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, enum
export type InventoryAttributeDataType =
| "string"
| "number"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface OpsItem {
  CreatedBy?: string | null;
  OpsItemType?: string | null;
  CreatedTime?: Date | number | null;
  Description?: string | null;
  LastModifiedBy?: string | null;
  LastModifiedTime?: Date | number | null;
  Notifications?: OpsItemNotification[] | null;
  Priority?: number | null;
  RelatedOpsItems?: RelatedOpsItem[] | null;
  Status?: OpsItemStatus | null;
  OpsItemId?: string | null;
  Version?: string | null;
  Title?: string | null;
  Source?: string | null;
  OperationalData?: { [key: string]: OpsItemDataValue | null | undefined } | null;
  Category?: string | null;
  Severity?: string | null;
  ActualStartTime?: Date | number | null;
  ActualEndTime?: Date | number | null;
  PlannedStartTime?: Date | number | null;
  PlannedEndTime?: Date | number | null;
}
function toOpsItem(root: jsonP.JSONValue): OpsItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedBy": "s",
      "OpsItemType": "s",
      "CreatedTime": "d",
      "Description": "s",
      "LastModifiedBy": "s",
      "LastModifiedTime": "d",
      "Notifications": [toOpsItemNotification],
      "Priority": "n",
      "RelatedOpsItems": [toRelatedOpsItem],
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<OpsItemStatus>(x),
      "OpsItemId": "s",
      "Version": "s",
      "Title": "s",
      "Source": "s",
      "OperationalData": x => jsonP.readMap(String, toOpsItemDataValue, x),
      "Category": "s",
      "Severity": "s",
      "ActualStartTime": "d",
      "ActualEndTime": "d",
      "PlannedStartTime": "d",
      "PlannedEndTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OpsEntity {
  Id?: string | null;
  Data?: { [key: string]: OpsEntityItem | null | undefined } | null;
}
function toOpsEntity(root: jsonP.JSONValue): OpsEntity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Data": x => jsonP.readMap(String, toOpsEntityItem, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OpsEntityItem {
  CaptureTime?: string | null;
  Content?: ({ [key: string]: string | null | undefined })[] | null;
}
function toOpsEntityItem(root: jsonP.JSONValue): OpsEntityItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "CaptureTime": "s",
      "Content": [x => jsonP.readMap(String, String, x)],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Parameter {
  Name?: string | null;
  Type?: ParameterType | null;
  Value?: string | null;
  Version?: number | null;
  Selector?: string | null;
  SourceResult?: string | null;
  LastModifiedDate?: Date | number | null;
  ARN?: string | null;
  DataType?: string | null;
}
function toParameter(root: jsonP.JSONValue): Parameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ParameterType>(x),
      "Value": "s",
      "Version": "n",
      "Selector": "s",
      "SourceResult": "s",
      "LastModifiedDate": "d",
      "ARN": "s",
      "DataType": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ParameterHistory {
  Name?: string | null;
  Type?: ParameterType | null;
  KeyId?: string | null;
  LastModifiedDate?: Date | number | null;
  LastModifiedUser?: string | null;
  Description?: string | null;
  Value?: string | null;
  AllowedPattern?: string | null;
  Version?: number | null;
  Labels?: string[] | null;
  Tier?: ParameterTier | null;
  Policies?: ParameterInlinePolicy[] | null;
  DataType?: string | null;
}
function toParameterHistory(root: jsonP.JSONValue): ParameterHistory {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<ParameterType>(x),
      "KeyId": "s",
      "LastModifiedDate": "d",
      "LastModifiedUser": "s",
      "Description": "s",
      "Value": "s",
      "AllowedPattern": "s",
      "Version": "n",
      "Labels": ["s"],
      "Tier": (x: jsonP.JSONValue) => cmnP.readEnum<ParameterTier>(x),
      "Policies": [toParameterInlinePolicy],
      "DataType": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ServiceSetting {
  SettingId?: string | null;
  SettingValue?: string | null;
  LastModifiedDate?: Date | number | null;
  LastModifiedUser?: string | null;
  ARN?: string | null;
  Status?: string | null;
}
function toServiceSetting(root: jsonP.JSONValue): ServiceSetting {
  return jsonP.readObj({
    required: {},
    optional: {
      "SettingId": "s",
      "SettingValue": "s",
      "LastModifiedDate": "d",
      "LastModifiedUser": "s",
      "ARN": "s",
      "Status": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssociationVersionInfo {
  AssociationId?: string | null;
  AssociationVersion?: string | null;
  CreatedDate?: Date | number | null;
  Name?: string | null;
  DocumentVersion?: string | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  Targets?: Target[] | null;
  ScheduleExpression?: string | null;
  OutputLocation?: InstanceAssociationOutputLocation | null;
  AssociationName?: string | null;
  MaxErrors?: string | null;
  MaxConcurrency?: string | null;
  ComplianceSeverity?: AssociationComplianceSeverity | null;
  SyncCompliance?: AssociationSyncCompliance | null;
  ApplyOnlyAtCronInterval?: boolean | null;
  TargetLocations?: TargetLocation[] | null;
}
function toAssociationVersionInfo(root: jsonP.JSONValue): AssociationVersionInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "AssociationId": "s",
      "AssociationVersion": "s",
      "CreatedDate": "d",
      "Name": "s",
      "DocumentVersion": "s",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "Targets": [toTarget],
      "ScheduleExpression": "s",
      "OutputLocation": toInstanceAssociationOutputLocation,
      "AssociationName": "s",
      "MaxErrors": "s",
      "MaxConcurrency": "s",
      "ComplianceSeverity": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationComplianceSeverity>(x),
      "SyncCompliance": (x: jsonP.JSONValue) => cmnP.readEnum<AssociationSyncCompliance>(x),
      "ApplyOnlyAtCronInterval": "b",
      "TargetLocations": [toTargetLocation],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Association {
  Name?: string | null;
  InstanceId?: string | null;
  AssociationId?: string | null;
  AssociationVersion?: string | null;
  DocumentVersion?: string | null;
  Targets?: Target[] | null;
  LastExecutionDate?: Date | number | null;
  Overview?: AssociationOverview | null;
  ScheduleExpression?: string | null;
  AssociationName?: string | null;
}
function toAssociation(root: jsonP.JSONValue): Association {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "InstanceId": "s",
      "AssociationId": "s",
      "AssociationVersion": "s",
      "DocumentVersion": "s",
      "Targets": [toTarget],
      "LastExecutionDate": "d",
      "Overview": toAssociationOverview,
      "ScheduleExpression": "s",
      "AssociationName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CommandInvocation {
  CommandId?: string | null;
  InstanceId?: string | null;
  InstanceName?: string | null;
  Comment?: string | null;
  DocumentName?: string | null;
  DocumentVersion?: string | null;
  RequestedDateTime?: Date | number | null;
  Status?: CommandInvocationStatus | null;
  StatusDetails?: string | null;
  TraceOutput?: string | null;
  StandardOutputUrl?: string | null;
  StandardErrorUrl?: string | null;
  CommandPlugins?: CommandPlugin[] | null;
  ServiceRole?: string | null;
  NotificationConfig?: NotificationConfig | null;
  CloudWatchOutputConfig?: CloudWatchOutputConfig | null;
}
function toCommandInvocation(root: jsonP.JSONValue): CommandInvocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "CommandId": "s",
      "InstanceId": "s",
      "InstanceName": "s",
      "Comment": "s",
      "DocumentName": "s",
      "DocumentVersion": "s",
      "RequestedDateTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<CommandInvocationStatus>(x),
      "StatusDetails": "s",
      "TraceOutput": "s",
      "StandardOutputUrl": "s",
      "StandardErrorUrl": "s",
      "CommandPlugins": [toCommandPlugin],
      "ServiceRole": "s",
      "NotificationConfig": toNotificationConfig,
      "CloudWatchOutputConfig": toCloudWatchOutputConfig,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CommandPlugin {
  Name?: string | null;
  Status?: CommandPluginStatus | null;
  StatusDetails?: string | null;
  ResponseCode?: number | null;
  ResponseStartDateTime?: Date | number | null;
  ResponseFinishDateTime?: Date | number | null;
  Output?: string | null;
  StandardOutputUrl?: string | null;
  StandardErrorUrl?: string | null;
  OutputS3Region?: string | null;
  OutputS3BucketName?: string | null;
  OutputS3KeyPrefix?: string | null;
}
function toCommandPlugin(root: jsonP.JSONValue): CommandPlugin {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<CommandPluginStatus>(x),
      "StatusDetails": "s",
      "ResponseCode": "n",
      "ResponseStartDateTime": "d",
      "ResponseFinishDateTime": "d",
      "Output": "s",
      "StandardOutputUrl": "s",
      "StandardErrorUrl": "s",
      "OutputS3Region": "s",
      "OutputS3BucketName": "s",
      "OutputS3KeyPrefix": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type CommandPluginStatus =
| "Pending"
| "InProgress"
| "Success"
| "TimedOut"
| "Cancelled"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Command {
  CommandId?: string | null;
  DocumentName?: string | null;
  DocumentVersion?: string | null;
  Comment?: string | null;
  ExpiresAfter?: Date | number | null;
  Parameters?: { [key: string]: string[] | null | undefined } | null;
  InstanceIds?: string[] | null;
  Targets?: Target[] | null;
  RequestedDateTime?: Date | number | null;
  Status?: CommandStatus | null;
  StatusDetails?: string | null;
  OutputS3Region?: string | null;
  OutputS3BucketName?: string | null;
  OutputS3KeyPrefix?: string | null;
  MaxConcurrency?: string | null;
  MaxErrors?: string | null;
  TargetCount?: number | null;
  CompletedCount?: number | null;
  ErrorCount?: number | null;
  DeliveryTimedOutCount?: number | null;
  ServiceRole?: string | null;
  NotificationConfig?: NotificationConfig | null;
  CloudWatchOutputConfig?: CloudWatchOutputConfig | null;
  TimeoutSeconds?: number | null;
}
function toCommand(root: jsonP.JSONValue): Command {
  return jsonP.readObj({
    required: {},
    optional: {
      "CommandId": "s",
      "DocumentName": "s",
      "DocumentVersion": "s",
      "Comment": "s",
      "ExpiresAfter": "d",
      "Parameters": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
      "InstanceIds": ["s"],
      "Targets": [toTarget],
      "RequestedDateTime": "d",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<CommandStatus>(x),
      "StatusDetails": "s",
      "OutputS3Region": "s",
      "OutputS3BucketName": "s",
      "OutputS3KeyPrefix": "s",
      "MaxConcurrency": "s",
      "MaxErrors": "s",
      "TargetCount": "n",
      "CompletedCount": "n",
      "ErrorCount": "n",
      "DeliveryTimedOutCount": "n",
      "ServiceRole": "s",
      "NotificationConfig": toNotificationConfig,
      "CloudWatchOutputConfig": toCloudWatchOutputConfig,
      "TimeoutSeconds": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type CommandStatus =
| "Pending"
| "InProgress"
| "Success"
| "Cancelled"
| "Failed"
| "TimedOut"
| "Cancelling"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ComplianceItem {
  ComplianceType?: string | null;
  ResourceType?: string | null;
  ResourceId?: string | null;
  Id?: string | null;
  Title?: string | null;
  Status?: ComplianceStatus | null;
  Severity?: ComplianceSeverity | null;
  ExecutionSummary?: ComplianceExecutionSummary | null;
  Details?: { [key: string]: string | null | undefined } | null;
}
function toComplianceItem(root: jsonP.JSONValue): ComplianceItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceType": "s",
      "ResourceType": "s",
      "ResourceId": "s",
      "Id": "s",
      "Title": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceStatus>(x),
      "Severity": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceSeverity>(x),
      "ExecutionSummary": toComplianceExecutionSummary,
      "Details": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComplianceSummaryItem {
  ComplianceType?: string | null;
  CompliantSummary?: CompliantSummary | null;
  NonCompliantSummary?: NonCompliantSummary | null;
}
function toComplianceSummaryItem(root: jsonP.JSONValue): ComplianceSummaryItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceType": "s",
      "CompliantSummary": toCompliantSummary,
      "NonCompliantSummary": toNonCompliantSummary,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CompliantSummary {
  CompliantCount?: number | null;
  SeveritySummary?: SeveritySummary | null;
}
function toCompliantSummary(root: jsonP.JSONValue): CompliantSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "CompliantCount": "n",
      "SeveritySummary": toSeveritySummary,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface SeveritySummary {
  CriticalCount?: number | null;
  HighCount?: number | null;
  MediumCount?: number | null;
  LowCount?: number | null;
  InformationalCount?: number | null;
  UnspecifiedCount?: number | null;
}
function toSeveritySummary(root: jsonP.JSONValue): SeveritySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "CriticalCount": "n",
      "HighCount": "n",
      "MediumCount": "n",
      "LowCount": "n",
      "InformationalCount": "n",
      "UnspecifiedCount": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface NonCompliantSummary {
  NonCompliantCount?: number | null;
  SeveritySummary?: SeveritySummary | null;
}
function toNonCompliantSummary(root: jsonP.JSONValue): NonCompliantSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "NonCompliantCount": "n",
      "SeveritySummary": toSeveritySummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DocumentMetadataResponseInfo {
  ReviewerResponse?: DocumentReviewerResponseSource[] | null;
}
function toDocumentMetadataResponseInfo(root: jsonP.JSONValue): DocumentMetadataResponseInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReviewerResponse": [toDocumentReviewerResponseSource],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DocumentReviewerResponseSource {
  CreateTime?: Date | number | null;
  UpdatedTime?: Date | number | null;
  ReviewStatus?: ReviewStatus | null;
  Comment?: DocumentReviewCommentSource[] | null;
  Reviewer?: string | null;
}
function toDocumentReviewerResponseSource(root: jsonP.JSONValue): DocumentReviewerResponseSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreateTime": "d",
      "UpdatedTime": "d",
      "ReviewStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ReviewStatus>(x),
      "Comment": [toDocumentReviewCommentSource],
      "Reviewer": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DocumentVersionInfo {
  Name?: string | null;
  DocumentVersion?: string | null;
  VersionName?: string | null;
  CreatedDate?: Date | number | null;
  IsDefaultVersion?: boolean | null;
  DocumentFormat?: DocumentFormat | null;
  Status?: DocumentStatus | null;
  StatusInformation?: string | null;
  ReviewStatus?: ReviewStatus | null;
}
function toDocumentVersionInfo(root: jsonP.JSONValue): DocumentVersionInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "DocumentVersion": "s",
      "VersionName": "s",
      "CreatedDate": "d",
      "IsDefaultVersion": "b",
      "DocumentFormat": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentFormat>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentStatus>(x),
      "StatusInformation": "s",
      "ReviewStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ReviewStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DocumentIdentifier {
  Name?: string | null;
  Owner?: string | null;
  VersionName?: string | null;
  PlatformTypes?: PlatformType[] | null;
  DocumentVersion?: string | null;
  DocumentType?: DocumentType | null;
  SchemaVersion?: string | null;
  DocumentFormat?: DocumentFormat | null;
  TargetType?: string | null;
  Tags?: Tag[] | null;
  Requires?: DocumentRequires[] | null;
  ReviewStatus?: ReviewStatus | null;
  Author?: string | null;
}
function toDocumentIdentifier(root: jsonP.JSONValue): DocumentIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Owner": "s",
      "VersionName": "s",
      "PlatformTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<PlatformType>(x)],
      "DocumentVersion": "s",
      "DocumentType": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentType>(x),
      "SchemaVersion": "s",
      "DocumentFormat": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentFormat>(x),
      "TargetType": "s",
      "Tags": [toTag],
      "Requires": [toDocumentRequires],
      "ReviewStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ReviewStatus>(x),
      "Author": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OpsItemEventSummary {
  OpsItemId?: string | null;
  EventId?: string | null;
  Source?: string | null;
  DetailType?: string | null;
  Detail?: string | null;
  CreatedBy?: OpsItemIdentity | null;
  CreatedTime?: Date | number | null;
}
function toOpsItemEventSummary(root: jsonP.JSONValue): OpsItemEventSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "OpsItemId": "s",
      "EventId": "s",
      "Source": "s",
      "DetailType": "s",
      "Detail": "s",
      "CreatedBy": toOpsItemIdentity,
      "CreatedTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OpsItemIdentity {
  Arn?: string | null;
}
function toOpsItemIdentity(root: jsonP.JSONValue): OpsItemIdentity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OpsMetadata {
  ResourceId?: string | null;
  OpsMetadataArn?: string | null;
  LastModifiedDate?: Date | number | null;
  LastModifiedUser?: string | null;
  CreationDate?: Date | number | null;
}
function toOpsMetadata(root: jsonP.JSONValue): OpsMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "OpsMetadataArn": "s",
      "LastModifiedDate": "d",
      "LastModifiedUser": "s",
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceComplianceSummaryItem {
  ComplianceType?: string | null;
  ResourceType?: string | null;
  ResourceId?: string | null;
  Status?: ComplianceStatus | null;
  OverallSeverity?: ComplianceSeverity | null;
  ExecutionSummary?: ComplianceExecutionSummary | null;
  CompliantSummary?: CompliantSummary | null;
  NonCompliantSummary?: NonCompliantSummary | null;
}
function toResourceComplianceSummaryItem(root: jsonP.JSONValue): ResourceComplianceSummaryItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ComplianceType": "s",
      "ResourceType": "s",
      "ResourceId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceStatus>(x),
      "OverallSeverity": (x: jsonP.JSONValue) => cmnP.readEnum<ComplianceSeverity>(x),
      "ExecutionSummary": toComplianceExecutionSummary,
      "CompliantSummary": toCompliantSummary,
      "NonCompliantSummary": toNonCompliantSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceDataSyncItem {
  SyncName?: string | null;
  SyncType?: string | null;
  SyncSource?: ResourceDataSyncSourceWithState | null;
  S3Destination?: ResourceDataSyncS3Destination | null;
  LastSyncTime?: Date | number | null;
  LastSuccessfulSyncTime?: Date | number | null;
  SyncLastModifiedTime?: Date | number | null;
  LastStatus?: LastResourceDataSyncStatus | null;
  SyncCreatedTime?: Date | number | null;
  LastSyncStatusMessage?: string | null;
}
function toResourceDataSyncItem(root: jsonP.JSONValue): ResourceDataSyncItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "SyncName": "s",
      "SyncType": "s",
      "SyncSource": toResourceDataSyncSourceWithState,
      "S3Destination": toResourceDataSyncS3Destination,
      "LastSyncTime": "d",
      "LastSuccessfulSyncTime": "d",
      "SyncLastModifiedTime": "d",
      "LastStatus": (x: jsonP.JSONValue) => cmnP.readEnum<LastResourceDataSyncStatus>(x),
      "SyncCreatedTime": "d",
      "LastSyncStatusMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ResourceDataSyncSourceWithState {
  SourceType?: string | null;
  AwsOrganizationsSource?: ResourceDataSyncAwsOrganizationsSource | null;
  SourceRegions?: string[] | null;
  IncludeFutureRegions?: boolean | null;
  State?: string | null;
}
function toResourceDataSyncSourceWithState(root: jsonP.JSONValue): ResourceDataSyncSourceWithState {
  return jsonP.readObj({
    required: {},
    optional: {
      "SourceType": "s",
      "AwsOrganizationsSource": toResourceDataSyncAwsOrganizationsSource,
      "SourceRegions": ["s"],
      "IncludeFutureRegions": "b",
      "State": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type LastResourceDataSyncStatus =
| "Successful"
| "Failed"
| "InProgress"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DocumentDefaultVersionDescription {
  Name?: string | null;
  DefaultVersion?: string | null;
  DefaultVersionName?: string | null;
}
function toDocumentDefaultVersionDescription(root: jsonP.JSONValue): DocumentDefaultVersionDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "DefaultVersion": "s",
      "DefaultVersionName": "s",
    },
  }, root);
}
