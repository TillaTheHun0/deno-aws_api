// Autogenerated API client for: AWS IoT Greengrass V2

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class GreengrassV2 {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(GreengrassV2.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-11-30",
    "endpointPrefix": "greengrass",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AWS GreengrassV2",
    "serviceFullName": "AWS IoT Greengrass V2",
    "serviceId": "GreengrassV2",
    "signatureVersion": "v4",
    "uid": "greengrassv2-2020-11-30"
  };

  async cancelDeployment(
    {abortSignal, ...params}: RequestConfig & CancelDeploymentRequest,
  ): Promise<CancelDeploymentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelDeployment",
      requestUri: cmnP.encodePath`/greengrass/v2/deployments/${params["deploymentId"]}/cancel`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "message": "s",
      },
    }, await resp.json());
  }

  async createComponentVersion(
    {abortSignal, ...params}: RequestConfig & CreateComponentVersionRequest = {},
  ): Promise<CreateComponentVersionResponse> {
    const body: jsonP.JSONObject = {
      inlineRecipe: jsonP.serializeBlob(params["inlineRecipe"]),
      lambdaFunction: fromLambdaFunctionRecipeSource(params["lambdaFunction"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateComponentVersion",
      requestUri: "/greengrass/v2/createComponentVersion",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {
        "componentName": "s",
        "componentVersion": "s",
        "creationTimestamp": "d",
        "status": toCloudComponentStatus,
      },
      optional: {
        "arn": "s",
      },
    }, await resp.json());
  }

  async createDeployment(
    {abortSignal, ...params}: RequestConfig & CreateDeploymentRequest,
  ): Promise<CreateDeploymentResponse> {
    const body: jsonP.JSONObject = {
      targetArn: params["targetArn"],
      deploymentName: params["deploymentName"],
      components: jsonP.serializeMap(params["components"], x => fromComponentDeploymentSpecification(x)),
      iotJobConfiguration: fromDeploymentIoTJobConfiguration(params["iotJobConfiguration"]),
      deploymentPolicies: fromDeploymentPolicies(params["deploymentPolicies"]),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeployment",
      requestUri: "/greengrass/v2/deployments",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deploymentId": "s",
        "iotJobId": "s",
        "iotJobArn": "s",
      },
    }, await resp.json());
  }

  async deleteComponent(
    {abortSignal, ...params}: RequestConfig & DeleteComponentRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteComponent",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/v2/components/${params["arn"]}`,
      responseCode: 204,
    });
  }

  async deleteCoreDevice(
    {abortSignal, ...params}: RequestConfig & DeleteCoreDeviceRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCoreDevice",
      method: "DELETE",
      requestUri: cmnP.encodePath`/greengrass/v2/coreDevices/${params["coreDeviceThingName"]}`,
      responseCode: 204,
    });
  }

  async describeComponent(
    {abortSignal, ...params}: RequestConfig & DescribeComponentRequest,
  ): Promise<DescribeComponentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeComponent",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/components/${params["arn"]}/metadata`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "arn": "s",
        "componentName": "s",
        "componentVersion": "s",
        "creationTimestamp": "d",
        "publisher": "s",
        "description": "s",
        "status": toCloudComponentStatus,
        "platforms": [toComponentPlatform],
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getComponent(
    {abortSignal, ...params}: RequestConfig & GetComponentRequest,
  ): Promise<GetComponentResponse> {
    const query = new URLSearchParams;
    if (params["recipeOutputFormat"] != null) query.set("recipeOutputFormat", params["recipeOutputFormat"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetComponent",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/components/${params["arn"]}`,
    });
    return jsonP.readObj({
      required: {
        "recipeOutputFormat": (x: jsonP.JSONValue) => cmnP.readEnum<RecipeOutputFormat>(x),
        "recipe": "a",
      },
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getComponentVersionArtifact(
    {abortSignal, ...params}: RequestConfig & GetComponentVersionArtifactRequest,
  ): Promise<GetComponentVersionArtifactResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetComponentVersionArtifact",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/components/${params["arn"]}/artifacts/${params["artifactName"].split("/")}`,
    });
    return jsonP.readObj({
      required: {
        "preSignedUrl": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getCoreDevice(
    {abortSignal, ...params}: RequestConfig & GetCoreDeviceRequest,
  ): Promise<GetCoreDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCoreDevice",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/coreDevices/${params["coreDeviceThingName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "coreDeviceThingName": "s",
        "coreVersion": "s",
        "platform": "s",
        "architecture": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<CoreDeviceStatus>(x),
        "lastStatusUpdateTimestamp": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getDeployment(
    {abortSignal, ...params}: RequestConfig & GetDeploymentRequest,
  ): Promise<GetDeploymentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeployment",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/deployments/${params["deploymentId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "targetArn": "s",
        "revisionId": "s",
        "deploymentId": "s",
        "deploymentName": "s",
        "deploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
        "iotJobId": "s",
        "iotJobArn": "s",
        "components": x => jsonP.readMap(String, toComponentDeploymentSpecification, x),
        "deploymentPolicies": toDeploymentPolicies,
        "iotJobConfiguration": toDeploymentIoTJobConfiguration,
        "creationTimestamp": "d",
        "isLatestForTarget": "b",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listComponentVersions(
    {abortSignal, ...params}: RequestConfig & ListComponentVersionsRequest,
  ): Promise<ListComponentVersionsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListComponentVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/components/${params["arn"]}/versions`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "componentVersions": [toComponentVersionListItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listComponents(
    {abortSignal, ...params}: RequestConfig & ListComponentsRequest = {},
  ): Promise<ListComponentsResponse> {
    const query = new URLSearchParams;
    if (params["scope"] != null) query.set("scope", params["scope"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListComponents",
      method: "GET",
      requestUri: "/greengrass/v2/components",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "components": [toComponent],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listCoreDevices(
    {abortSignal, ...params}: RequestConfig & ListCoreDevicesRequest = {},
  ): Promise<ListCoreDevicesResponse> {
    const query = new URLSearchParams;
    if (params["thingGroupArn"] != null) query.set("thingGroupArn", params["thingGroupArn"]?.toString() ?? "");
    if (params["status"] != null) query.set("status", params["status"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCoreDevices",
      method: "GET",
      requestUri: "/greengrass/v2/coreDevices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "coreDevices": [toCoreDevice],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listDeployments(
    {abortSignal, ...params}: RequestConfig & ListDeploymentsRequest = {},
  ): Promise<ListDeploymentsResponse> {
    const query = new URLSearchParams;
    if (params["targetArn"] != null) query.set("targetArn", params["targetArn"]?.toString() ?? "");
    if (params["historyFilter"] != null) query.set("historyFilter", params["historyFilter"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeployments",
      method: "GET",
      requestUri: "/greengrass/v2/deployments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "deployments": [toDeployment],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listEffectiveDeployments(
    {abortSignal, ...params}: RequestConfig & ListEffectiveDeploymentsRequest,
  ): Promise<ListEffectiveDeploymentsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEffectiveDeployments",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/coreDevices/${params["coreDeviceThingName"]}/effectiveDeployments`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "effectiveDeployments": [toEffectiveDeployment],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listInstalledComponents(
    {abortSignal, ...params}: RequestConfig & ListInstalledComponentsRequest,
  ): Promise<ListInstalledComponentsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListInstalledComponents",
      method: "GET",
      requestUri: cmnP.encodePath`/greengrass/v2/coreDevices/${params["coreDeviceThingName"]}/installedComponents`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "installedComponents": [toInstalledComponent],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async resolveComponentCandidates(
    {abortSignal, ...params}: RequestConfig & ResolveComponentCandidatesRequest,
  ): Promise<ResolveComponentCandidatesResponse> {
    const body: jsonP.JSONObject = {
      platform: fromComponentPlatform(params["platform"]),
      componentCandidates: params["componentCandidates"]?.map(x => fromComponentCandidate(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResolveComponentCandidates",
      requestUri: "/greengrass/v2/resolveComponentCandidates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resolvedComponentVersions": [toResolvedComponentVersion],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CancelDeploymentRequest {
  deploymentId: string;
}

// refs: 1 - tags: named, input
export interface CreateComponentVersionRequest {
  inlineRecipe?: Uint8Array | string | null;
  lambdaFunction?: LambdaFunctionRecipeSource | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateDeploymentRequest {
  targetArn: string;
  deploymentName?: string | null;
  components?: { [key: string]: ComponentDeploymentSpecification | null | undefined } | null;
  iotJobConfiguration?: DeploymentIoTJobConfiguration | null;
  deploymentPolicies?: DeploymentPolicies | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteComponentRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteCoreDeviceRequest {
  coreDeviceThingName: string;
}

// refs: 1 - tags: named, input
export interface DescribeComponentRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetComponentRequest {
  recipeOutputFormat?: RecipeOutputFormat | null;
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetComponentVersionArtifactRequest {
  arn: string;
  artifactName: string;
}

// refs: 1 - tags: named, input
export interface GetCoreDeviceRequest {
  coreDeviceThingName: string;
}

// refs: 1 - tags: named, input
export interface GetDeploymentRequest {
  deploymentId: string;
}

// refs: 1 - tags: named, input
export interface ListComponentVersionsRequest {
  arn: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListComponentsRequest {
  scope?: ComponentVisibilityScope | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListCoreDevicesRequest {
  thingGroupArn?: string | null;
  status?: CoreDeviceStatus | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeploymentsRequest {
  targetArn?: string | null;
  historyFilter?: DeploymentHistoryFilter | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListEffectiveDeploymentsRequest {
  coreDeviceThingName: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListInstalledComponentsRequest {
  coreDeviceThingName: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface ResolveComponentCandidatesRequest {
  platform: ComponentPlatform;
  componentCandidates: ComponentCandidate[];
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, output
export interface CancelDeploymentResponse {
  message?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateComponentVersionResponse {
  arn?: string | null;
  componentName: string;
  componentVersion: string;
  creationTimestamp: Date | number;
  status: CloudComponentStatus;
}

// refs: 1 - tags: named, output
export interface CreateDeploymentResponse {
  deploymentId?: string | null;
  iotJobId?: string | null;
  iotJobArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeComponentResponse {
  arn?: string | null;
  componentName?: string | null;
  componentVersion?: string | null;
  creationTimestamp?: Date | number | null;
  publisher?: string | null;
  description?: string | null;
  status?: CloudComponentStatus | null;
  platforms?: ComponentPlatform[] | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetComponentResponse {
  recipeOutputFormat: RecipeOutputFormat;
  recipe: Uint8Array | string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetComponentVersionArtifactResponse {
  preSignedUrl: string;
}

// refs: 1 - tags: named, output
export interface GetCoreDeviceResponse {
  coreDeviceThingName?: string | null;
  coreVersion?: string | null;
  platform?: string | null;
  architecture?: string | null;
  status?: CoreDeviceStatus | null;
  lastStatusUpdateTimestamp?: Date | number | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetDeploymentResponse {
  targetArn?: string | null;
  revisionId?: string | null;
  deploymentId?: string | null;
  deploymentName?: string | null;
  deploymentStatus?: DeploymentStatus | null;
  iotJobId?: string | null;
  iotJobArn?: string | null;
  components?: { [key: string]: ComponentDeploymentSpecification | null | undefined } | null;
  deploymentPolicies?: DeploymentPolicies | null;
  iotJobConfiguration?: DeploymentIoTJobConfiguration | null;
  creationTimestamp?: Date | number | null;
  isLatestForTarget?: boolean | null;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListComponentVersionsResponse {
  componentVersions?: ComponentVersionListItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListComponentsResponse {
  components?: Component[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCoreDevicesResponse {
  coreDevices?: CoreDevice[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDeploymentsResponse {
  deployments?: Deployment[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEffectiveDeploymentsResponse {
  effectiveDeployments?: EffectiveDeployment[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInstalledComponentsResponse {
  installedComponents?: InstalledComponent[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ResolveComponentCandidatesResponse {
  resolvedComponentVersions?: ResolvedComponentVersion[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: input, named, interface
export interface LambdaFunctionRecipeSource {
  lambdaArn: string;
  componentName?: string | null;
  componentVersion?: string | null;
  componentPlatforms?: ComponentPlatform[] | null;
  componentDependencies?: { [key: string]: ComponentDependencyRequirement | null | undefined } | null;
  componentLambdaParameters?: LambdaExecutionParameters | null;
}
function fromLambdaFunctionRecipeSource(input?: LambdaFunctionRecipeSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    lambdaArn: input["lambdaArn"],
    componentName: input["componentName"],
    componentVersion: input["componentVersion"],
    componentPlatforms: input["componentPlatforms"]?.map(x => fromComponentPlatform(x)),
    componentDependencies: jsonP.serializeMap(input["componentDependencies"], x => fromComponentDependencyRequirement(x)),
    componentLambdaParameters: fromLambdaExecutionParameters(input["componentLambdaParameters"]),
  }
}

// refs: 4 - tags: input, named, interface, output
export interface ComponentPlatform {
  name?: string | null;
  attributes?: { [key: string]: string | null | undefined } | null;
}
function fromComponentPlatform(input?: ComponentPlatform | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    attributes: input["attributes"],
  }
}
function toComponentPlatform(root: jsonP.JSONValue): ComponentPlatform {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "attributes": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ComponentDependencyRequirement {
  versionRequirement?: string | null;
  dependencyType?: ComponentDependencyType | null;
}
function fromComponentDependencyRequirement(input?: ComponentDependencyRequirement | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    versionRequirement: input["versionRequirement"],
    dependencyType: input["dependencyType"],
  }
}

// refs: 1 - tags: input, named, enum
export type ComponentDependencyType =
| "HARD"
| "SOFT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface LambdaExecutionParameters {
  eventSources?: LambdaEventSource[] | null;
  maxQueueSize?: number | null;
  maxInstancesCount?: number | null;
  maxIdleTimeInSeconds?: number | null;
  timeoutInSeconds?: number | null;
  statusTimeoutInSeconds?: number | null;
  pinned?: boolean | null;
  inputPayloadEncodingType?: LambdaInputPayloadEncodingType | null;
  execArgs?: string[] | null;
  environmentVariables?: { [key: string]: string | null | undefined } | null;
  linuxProcessParams?: LambdaLinuxProcessParams | null;
}
function fromLambdaExecutionParameters(input?: LambdaExecutionParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventSources: input["eventSources"]?.map(x => fromLambdaEventSource(x)),
    maxQueueSize: input["maxQueueSize"],
    maxInstancesCount: input["maxInstancesCount"],
    maxIdleTimeInSeconds: input["maxIdleTimeInSeconds"],
    timeoutInSeconds: input["timeoutInSeconds"],
    statusTimeoutInSeconds: input["statusTimeoutInSeconds"],
    pinned: input["pinned"],
    inputPayloadEncodingType: input["inputPayloadEncodingType"],
    execArgs: input["execArgs"],
    environmentVariables: input["environmentVariables"],
    linuxProcessParams: fromLambdaLinuxProcessParams(input["linuxProcessParams"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface LambdaEventSource {
  topic: string;
  type: LambdaEventSourceType;
}
function fromLambdaEventSource(input?: LambdaEventSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    topic: input["topic"],
    type: input["type"],
  }
}

// refs: 1 - tags: input, named, enum
export type LambdaEventSourceType =
| "PUB_SUB"
| "IOT_CORE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type LambdaInputPayloadEncodingType =
| "json"
| "binary"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface LambdaLinuxProcessParams {
  isolationMode?: LambdaIsolationMode | null;
  containerParams?: LambdaContainerParams | null;
}
function fromLambdaLinuxProcessParams(input?: LambdaLinuxProcessParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    isolationMode: input["isolationMode"],
    containerParams: fromLambdaContainerParams(input["containerParams"]),
  }
}

// refs: 1 - tags: input, named, enum
export type LambdaIsolationMode =
| "GreengrassContainer"
| "NoContainer"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface LambdaContainerParams {
  memorySizeInKB?: number | null;
  mountROSysfs?: boolean | null;
  volumes?: LambdaVolumeMount[] | null;
  devices?: LambdaDeviceMount[] | null;
}
function fromLambdaContainerParams(input?: LambdaContainerParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    memorySizeInKB: input["memorySizeInKB"],
    mountROSysfs: input["mountROSysfs"],
    volumes: input["volumes"]?.map(x => fromLambdaVolumeMount(x)),
    devices: input["devices"]?.map(x => fromLambdaDeviceMount(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface LambdaVolumeMount {
  sourcePath: string;
  destinationPath: string;
  permission?: LambdaFilesystemPermission | null;
  addGroupOwner?: boolean | null;
}
function fromLambdaVolumeMount(input?: LambdaVolumeMount | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourcePath: input["sourcePath"],
    destinationPath: input["destinationPath"],
    permission: input["permission"],
    addGroupOwner: input["addGroupOwner"],
  }
}

// refs: 2 - tags: input, named, enum
export type LambdaFilesystemPermission =
| "ro"
| "rw"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface LambdaDeviceMount {
  path: string;
  permission?: LambdaFilesystemPermission | null;
  addGroupOwner?: boolean | null;
}
function fromLambdaDeviceMount(input?: LambdaDeviceMount | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    path: input["path"],
    permission: input["permission"],
    addGroupOwner: input["addGroupOwner"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface ComponentDeploymentSpecification {
  componentVersion?: string | null;
  configurationUpdate?: ComponentConfigurationUpdate | null;
  runWith?: ComponentRunWith | null;
}
function fromComponentDeploymentSpecification(input?: ComponentDeploymentSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    componentVersion: input["componentVersion"],
    configurationUpdate: fromComponentConfigurationUpdate(input["configurationUpdate"]),
    runWith: fromComponentRunWith(input["runWith"]),
  }
}
function toComponentDeploymentSpecification(root: jsonP.JSONValue): ComponentDeploymentSpecification {
  return jsonP.readObj({
    required: {},
    optional: {
      "componentVersion": "s",
      "configurationUpdate": toComponentConfigurationUpdate,
      "runWith": toComponentRunWith,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ComponentConfigurationUpdate {
  merge?: string | null;
  reset?: string[] | null;
}
function fromComponentConfigurationUpdate(input?: ComponentConfigurationUpdate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    merge: input["merge"],
    reset: input["reset"],
  }
}
function toComponentConfigurationUpdate(root: jsonP.JSONValue): ComponentConfigurationUpdate {
  return jsonP.readObj({
    required: {},
    optional: {
      "merge": "s",
      "reset": ["s"],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ComponentRunWith {
  posixUser?: string | null;
}
function fromComponentRunWith(input?: ComponentRunWith | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    posixUser: input["posixUser"],
  }
}
function toComponentRunWith(root: jsonP.JSONValue): ComponentRunWith {
  return jsonP.readObj({
    required: {},
    optional: {
      "posixUser": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DeploymentIoTJobConfiguration {
  jobExecutionsRolloutConfig?: IoTJobExecutionsRolloutConfig | null;
  abortConfig?: IoTJobAbortConfig | null;
  timeoutConfig?: IoTJobTimeoutConfig | null;
}
function fromDeploymentIoTJobConfiguration(input?: DeploymentIoTJobConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    jobExecutionsRolloutConfig: fromIoTJobExecutionsRolloutConfig(input["jobExecutionsRolloutConfig"]),
    abortConfig: fromIoTJobAbortConfig(input["abortConfig"]),
    timeoutConfig: fromIoTJobTimeoutConfig(input["timeoutConfig"]),
  }
}
function toDeploymentIoTJobConfiguration(root: jsonP.JSONValue): DeploymentIoTJobConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "jobExecutionsRolloutConfig": toIoTJobExecutionsRolloutConfig,
      "abortConfig": toIoTJobAbortConfig,
      "timeoutConfig": toIoTJobTimeoutConfig,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface IoTJobExecutionsRolloutConfig {
  exponentialRate?: IoTJobExponentialRolloutRate | null;
  maximumPerMinute?: number | null;
}
function fromIoTJobExecutionsRolloutConfig(input?: IoTJobExecutionsRolloutConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    exponentialRate: fromIoTJobExponentialRolloutRate(input["exponentialRate"]),
    maximumPerMinute: input["maximumPerMinute"],
  }
}
function toIoTJobExecutionsRolloutConfig(root: jsonP.JSONValue): IoTJobExecutionsRolloutConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "exponentialRate": toIoTJobExponentialRolloutRate,
      "maximumPerMinute": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface IoTJobExponentialRolloutRate {
  baseRatePerMinute: number;
  incrementFactor: number;
  rateIncreaseCriteria: IoTJobRateIncreaseCriteria;
}
function fromIoTJobExponentialRolloutRate(input?: IoTJobExponentialRolloutRate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    baseRatePerMinute: input["baseRatePerMinute"],
    incrementFactor: input["incrementFactor"],
    rateIncreaseCriteria: fromIoTJobRateIncreaseCriteria(input["rateIncreaseCriteria"]),
  }
}
function toIoTJobExponentialRolloutRate(root: jsonP.JSONValue): IoTJobExponentialRolloutRate {
  return jsonP.readObj({
    required: {
      "baseRatePerMinute": "n",
      "incrementFactor": "n",
      "rateIncreaseCriteria": toIoTJobRateIncreaseCriteria,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface IoTJobRateIncreaseCriteria {
  numberOfNotifiedThings?: number | null;
  numberOfSucceededThings?: number | null;
}
function fromIoTJobRateIncreaseCriteria(input?: IoTJobRateIncreaseCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    numberOfNotifiedThings: input["numberOfNotifiedThings"],
    numberOfSucceededThings: input["numberOfSucceededThings"],
  }
}
function toIoTJobRateIncreaseCriteria(root: jsonP.JSONValue): IoTJobRateIncreaseCriteria {
  return jsonP.readObj({
    required: {},
    optional: {
      "numberOfNotifiedThings": "n",
      "numberOfSucceededThings": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface IoTJobAbortConfig {
  criteriaList: IoTJobAbortCriteria[];
}
function fromIoTJobAbortConfig(input?: IoTJobAbortConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    criteriaList: input["criteriaList"]?.map(x => fromIoTJobAbortCriteria(x)),
  }
}
function toIoTJobAbortConfig(root: jsonP.JSONValue): IoTJobAbortConfig {
  return jsonP.readObj({
    required: {
      "criteriaList": [toIoTJobAbortCriteria],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface IoTJobAbortCriteria {
  failureType: IoTJobExecutionFailureType;
  action: IoTJobAbortAction;
  thresholdPercentage: number;
  minNumberOfExecutedThings: number;
}
function fromIoTJobAbortCriteria(input?: IoTJobAbortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    failureType: input["failureType"],
    action: input["action"],
    thresholdPercentage: input["thresholdPercentage"],
    minNumberOfExecutedThings: input["minNumberOfExecutedThings"],
  }
}
function toIoTJobAbortCriteria(root: jsonP.JSONValue): IoTJobAbortCriteria {
  return jsonP.readObj({
    required: {
      "failureType": (x: jsonP.JSONValue) => cmnP.readEnum<IoTJobExecutionFailureType>(x),
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<IoTJobAbortAction>(x),
      "thresholdPercentage": "n",
      "minNumberOfExecutedThings": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type IoTJobExecutionFailureType =
| "FAILED"
| "REJECTED"
| "TIMED_OUT"
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type IoTJobAbortAction =
| "CANCEL"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface IoTJobTimeoutConfig {
  inProgressTimeoutInMinutes?: number | null;
}
function fromIoTJobTimeoutConfig(input?: IoTJobTimeoutConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    inProgressTimeoutInMinutes: input["inProgressTimeoutInMinutes"],
  }
}
function toIoTJobTimeoutConfig(root: jsonP.JSONValue): IoTJobTimeoutConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "inProgressTimeoutInMinutes": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DeploymentPolicies {
  failureHandlingPolicy?: DeploymentFailureHandlingPolicy | null;
  componentUpdatePolicy?: DeploymentComponentUpdatePolicy | null;
  configurationValidationPolicy?: DeploymentConfigurationValidationPolicy | null;
}
function fromDeploymentPolicies(input?: DeploymentPolicies | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    failureHandlingPolicy: input["failureHandlingPolicy"],
    componentUpdatePolicy: fromDeploymentComponentUpdatePolicy(input["componentUpdatePolicy"]),
    configurationValidationPolicy: fromDeploymentConfigurationValidationPolicy(input["configurationValidationPolicy"]),
  }
}
function toDeploymentPolicies(root: jsonP.JSONValue): DeploymentPolicies {
  return jsonP.readObj({
    required: {},
    optional: {
      "failureHandlingPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentFailureHandlingPolicy>(x),
      "componentUpdatePolicy": toDeploymentComponentUpdatePolicy,
      "configurationValidationPolicy": toDeploymentConfigurationValidationPolicy,
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type DeploymentFailureHandlingPolicy =
| "ROLLBACK"
| "DO_NOTHING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface DeploymentComponentUpdatePolicy {
  timeoutInSeconds?: number | null;
  action?: DeploymentComponentUpdatePolicyAction | null;
}
function fromDeploymentComponentUpdatePolicy(input?: DeploymentComponentUpdatePolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timeoutInSeconds: input["timeoutInSeconds"],
    action: input["action"],
  }
}
function toDeploymentComponentUpdatePolicy(root: jsonP.JSONValue): DeploymentComponentUpdatePolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "timeoutInSeconds": "n",
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentComponentUpdatePolicyAction>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type DeploymentComponentUpdatePolicyAction =
| "NOTIFY_COMPONENTS"
| "SKIP_NOTIFY_COMPONENTS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface DeploymentConfigurationValidationPolicy {
  timeoutInSeconds?: number | null;
}
function fromDeploymentConfigurationValidationPolicy(input?: DeploymentConfigurationValidationPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timeoutInSeconds: input["timeoutInSeconds"],
  }
}
function toDeploymentConfigurationValidationPolicy(root: jsonP.JSONValue): DeploymentConfigurationValidationPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "timeoutInSeconds": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type RecipeOutputFormat =
| "JSON"
| "YAML"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ComponentVisibilityScope =
| "PRIVATE"
| "PUBLIC"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type CoreDeviceStatus =
| "HEALTHY"
| "UNHEALTHY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type DeploymentHistoryFilter =
| "ALL"
| "LATEST_ONLY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface ComponentCandidate {
  componentName?: string | null;
  componentVersion?: string | null;
  versionRequirements?: { [key: string]: string | null | undefined } | null;
}
function fromComponentCandidate(input?: ComponentCandidate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    componentName: input["componentName"],
    componentVersion: input["componentVersion"],
    versionRequirements: input["versionRequirements"],
  }
}

// refs: 2 - tags: output, named, interface
export interface CloudComponentStatus {
  componentState?: CloudComponentState | null;
  message?: string | null;
  errors?: { [key: string]: string | null | undefined } | null;
}
function toCloudComponentStatus(root: jsonP.JSONValue): CloudComponentStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "componentState": (x: jsonP.JSONValue) => cmnP.readEnum<CloudComponentState>(x),
      "message": "s",
      "errors": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type CloudComponentState =
| "REQUESTED"
| "INITIATED"
| "DEPLOYABLE"
| "FAILED"
| "DEPRECATED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type DeploymentStatus =
| "ACTIVE"
| "COMPLETED"
| "CANCELED"
| "FAILED"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ComponentVersionListItem {
  componentName?: string | null;
  componentVersion?: string | null;
  arn?: string | null;
}
function toComponentVersionListItem(root: jsonP.JSONValue): ComponentVersionListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "componentName": "s",
      "componentVersion": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Component {
  arn?: string | null;
  componentName?: string | null;
  latestVersion?: ComponentLatestVersion | null;
}
function toComponent(root: jsonP.JSONValue): Component {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "componentName": "s",
      "latestVersion": toComponentLatestVersion,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ComponentLatestVersion {
  arn?: string | null;
  componentVersion?: string | null;
  creationTimestamp?: Date | number | null;
  description?: string | null;
  publisher?: string | null;
  platforms?: ComponentPlatform[] | null;
}
function toComponentLatestVersion(root: jsonP.JSONValue): ComponentLatestVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "componentVersion": "s",
      "creationTimestamp": "d",
      "description": "s",
      "publisher": "s",
      "platforms": [toComponentPlatform],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CoreDevice {
  coreDeviceThingName?: string | null;
  status?: CoreDeviceStatus | null;
  lastStatusUpdateTimestamp?: Date | number | null;
}
function toCoreDevice(root: jsonP.JSONValue): CoreDevice {
  return jsonP.readObj({
    required: {},
    optional: {
      "coreDeviceThingName": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<CoreDeviceStatus>(x),
      "lastStatusUpdateTimestamp": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Deployment {
  targetArn?: string | null;
  revisionId?: string | null;
  deploymentId?: string | null;
  deploymentName?: string | null;
  creationTimestamp?: Date | number | null;
  deploymentStatus?: DeploymentStatus | null;
  isLatestForTarget?: boolean | null;
}
function toDeployment(root: jsonP.JSONValue): Deployment {
  return jsonP.readObj({
    required: {},
    optional: {
      "targetArn": "s",
      "revisionId": "s",
      "deploymentId": "s",
      "deploymentName": "s",
      "creationTimestamp": "d",
      "deploymentStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DeploymentStatus>(x),
      "isLatestForTarget": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EffectiveDeployment {
  deploymentId: string;
  deploymentName: string;
  iotJobId?: string | null;
  iotJobArn?: string | null;
  description?: string | null;
  targetArn: string;
  coreDeviceExecutionStatus: EffectiveDeploymentExecutionStatus;
  reason?: string | null;
  creationTimestamp: Date | number;
  modifiedTimestamp: Date | number;
}
function toEffectiveDeployment(root: jsonP.JSONValue): EffectiveDeployment {
  return jsonP.readObj({
    required: {
      "deploymentId": "s",
      "deploymentName": "s",
      "targetArn": "s",
      "coreDeviceExecutionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<EffectiveDeploymentExecutionStatus>(x),
      "creationTimestamp": "d",
      "modifiedTimestamp": "d",
    },
    optional: {
      "iotJobId": "s",
      "iotJobArn": "s",
      "description": "s",
      "reason": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EffectiveDeploymentExecutionStatus =
| "IN_PROGRESS"
| "QUEUED"
| "FAILED"
| "COMPLETED"
| "TIMED_OUT"
| "CANCELED"
| "REJECTED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface InstalledComponent {
  componentName?: string | null;
  componentVersion?: string | null;
  lifecycleState?: InstalledComponentLifecycleState | null;
  lifecycleStateDetails?: string | null;
  isRoot?: boolean | null;
}
function toInstalledComponent(root: jsonP.JSONValue): InstalledComponent {
  return jsonP.readObj({
    required: {},
    optional: {
      "componentName": "s",
      "componentVersion": "s",
      "lifecycleState": (x: jsonP.JSONValue) => cmnP.readEnum<InstalledComponentLifecycleState>(x),
      "lifecycleStateDetails": "s",
      "isRoot": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type InstalledComponentLifecycleState =
| "NEW"
| "INSTALLED"
| "STARTING"
| "RUNNING"
| "STOPPING"
| "ERRORED"
| "BROKEN"
| "FINISHED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ResolvedComponentVersion {
  arn?: string | null;
  componentName?: string | null;
  componentVersion?: string | null;
  recipe?: Uint8Array | string | null;
}
function toResolvedComponentVersion(root: jsonP.JSONValue): ResolvedComponentVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "componentName": "s",
      "componentVersion": "s",
      "recipe": "a",
    },
  }, root);
}
