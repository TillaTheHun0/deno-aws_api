// Autogenerated API client for: AWS Shield

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class Shield {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Shield.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-06-02",
    "endpointPrefix": "shield",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWS Shield",
    "serviceFullName": "AWS Shield",
    "serviceId": "Shield",
    "signatureVersion": "v4",
    "targetPrefix": "AWSShield_20160616",
    "uid": "shield-2016-06-02"
  };

  async associateDRTLogBucket(
    {abortSignal, ...params}: RequestConfig & AssociateDRTLogBucketRequest,
  ): Promise<AssociateDRTLogBucketResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDRTLogBucket",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDRTRole(
    {abortSignal, ...params}: RequestConfig & AssociateDRTRoleRequest,
  ): Promise<AssociateDRTRoleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDRTRole",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateHealthCheck(
    {abortSignal, ...params}: RequestConfig & AssociateHealthCheckRequest,
  ): Promise<AssociateHealthCheckResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateHealthCheck",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateProactiveEngagementDetails(
    {abortSignal, ...params}: RequestConfig & AssociateProactiveEngagementDetailsRequest,
  ): Promise<AssociateProactiveEngagementDetailsResponse> {
    const body: JSONObject = {...params,
    EmergencyContactList: params["EmergencyContactList"]?.map(x => fromEmergencyContact(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateProactiveEngagementDetails",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createProtection(
    {abortSignal, ...params}: RequestConfig & CreateProtectionRequest,
  ): Promise<CreateProtectionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProtection",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ProtectionId": "s",
      },
    }, await resp.json());
  }

  async createSubscription(
    {abortSignal, ...params}: RequestConfig & CreateSubscriptionRequest = {},
  ): Promise<CreateSubscriptionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSubscription",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProtection(
    {abortSignal, ...params}: RequestConfig & DeleteProtectionRequest,
  ): Promise<DeleteProtectionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProtection",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSubscription(
    {abortSignal, ...params}: RequestConfig & DeleteSubscriptionRequest = {},
  ): Promise<DeleteSubscriptionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSubscription",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAttack(
    {abortSignal, ...params}: RequestConfig & DescribeAttackRequest,
  ): Promise<DescribeAttackResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAttack",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Attack": toAttackDetail,
      },
    }, await resp.json());
  }

  async describeDRTAccess(
    {abortSignal, ...params}: RequestConfig & DescribeDRTAccessRequest = {},
  ): Promise<DescribeDRTAccessResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDRTAccess",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RoleArn": "s",
        "LogBucketList": ["s"],
      },
    }, await resp.json());
  }

  async describeEmergencyContactSettings(
    {abortSignal, ...params}: RequestConfig & DescribeEmergencyContactSettingsRequest = {},
  ): Promise<DescribeEmergencyContactSettingsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEmergencyContactSettings",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EmergencyContactList": [toEmergencyContact],
      },
    }, await resp.json());
  }

  async describeProtection(
    {abortSignal, ...params}: RequestConfig & DescribeProtectionRequest = {},
  ): Promise<DescribeProtectionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProtection",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Protection": toProtection,
      },
    }, await resp.json());
  }

  async describeSubscription(
    {abortSignal, ...params}: RequestConfig & DescribeSubscriptionRequest = {},
  ): Promise<DescribeSubscriptionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSubscription",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Subscription": toSubscription,
      },
    }, await resp.json());
  }

  async disableProactiveEngagement(
    {abortSignal, ...params}: RequestConfig & DisableProactiveEngagementRequest = {},
  ): Promise<DisableProactiveEngagementResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableProactiveEngagement",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDRTLogBucket(
    {abortSignal, ...params}: RequestConfig & DisassociateDRTLogBucketRequest,
  ): Promise<DisassociateDRTLogBucketResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDRTLogBucket",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDRTRole(
    {abortSignal, ...params}: RequestConfig & DisassociateDRTRoleRequest = {},
  ): Promise<DisassociateDRTRoleResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDRTRole",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateHealthCheck(
    {abortSignal, ...params}: RequestConfig & DisassociateHealthCheckRequest,
  ): Promise<DisassociateHealthCheckResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateHealthCheck",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableProactiveEngagement(
    {abortSignal, ...params}: RequestConfig & EnableProactiveEngagementRequest = {},
  ): Promise<EnableProactiveEngagementResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableProactiveEngagement",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getSubscriptionState(
    {abortSignal, ...params}: RequestConfig & GetSubscriptionStateRequest = {},
  ): Promise<GetSubscriptionStateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSubscriptionState",
    });
    return prt.readObj({
      required: {
        "SubscriptionState": toSubscriptionState,
      },
      optional: {},
    }, await resp.json());
  }

  async listAttacks(
    {abortSignal, ...params}: RequestConfig & ListAttacksRequest = {},
  ): Promise<ListAttacksResponse> {
    const body: JSONObject = {...params,
    StartTime: fromTimeRange(params["StartTime"]),
    EndTime: fromTimeRange(params["EndTime"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAttacks",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AttackSummaries": [toAttackSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProtections(
    {abortSignal, ...params}: RequestConfig & ListProtectionsRequest = {},
  ): Promise<ListProtectionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProtections",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Protections": [toProtection],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async updateEmergencyContactSettings(
    {abortSignal, ...params}: RequestConfig & UpdateEmergencyContactSettingsRequest = {},
  ): Promise<UpdateEmergencyContactSettingsResponse> {
    const body: JSONObject = {...params,
    EmergencyContactList: params["EmergencyContactList"]?.map(x => fromEmergencyContact(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEmergencyContactSettings",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSubscription(
    {abortSignal, ...params}: RequestConfig & UpdateSubscriptionRequest = {},
  ): Promise<UpdateSubscriptionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSubscription",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateDRTLogBucketRequest {
  LogBucket: string;
}

// refs: 1 - tags: named, input
export interface AssociateDRTRoleRequest {
  RoleArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateHealthCheckRequest {
  ProtectionId: string;
  HealthCheckArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateProactiveEngagementDetailsRequest {
  EmergencyContactList: EmergencyContact[];
}

// refs: 1 - tags: named, input
export interface CreateProtectionRequest {
  Name: string;
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface CreateSubscriptionRequest {
}

// refs: 1 - tags: named, input
export interface DeleteProtectionRequest {
  ProtectionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSubscriptionRequest {
}

// refs: 1 - tags: named, input
export interface DescribeAttackRequest {
  AttackId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDRTAccessRequest {
}

// refs: 1 - tags: named, input
export interface DescribeEmergencyContactSettingsRequest {
}

// refs: 1 - tags: named, input
export interface DescribeProtectionRequest {
  ProtectionId?: string | null;
  ResourceArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeSubscriptionRequest {
}

// refs: 1 - tags: named, input
export interface DisableProactiveEngagementRequest {
}

// refs: 1 - tags: named, input
export interface DisassociateDRTLogBucketRequest {
  LogBucket: string;
}

// refs: 1 - tags: named, input
export interface DisassociateDRTRoleRequest {
}

// refs: 1 - tags: named, input
export interface DisassociateHealthCheckRequest {
  ProtectionId: string;
  HealthCheckArn: string;
}

// refs: 1 - tags: named, input
export interface EnableProactiveEngagementRequest {
}

// refs: 1 - tags: named, input
export interface GetSubscriptionStateRequest {
}

// refs: 1 - tags: named, input
export interface ListAttacksRequest {
  ResourceArns?: string[] | null;
  StartTime?: TimeRange | null;
  EndTime?: TimeRange | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListProtectionsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateEmergencyContactSettingsRequest {
  EmergencyContactList?: EmergencyContact[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateSubscriptionRequest {
  AutoRenew?: AutoRenew | null;
}

// refs: 1 - tags: named, output
export interface AssociateDRTLogBucketResponse {
}

// refs: 1 - tags: named, output
export interface AssociateDRTRoleResponse {
}

// refs: 1 - tags: named, output
export interface AssociateHealthCheckResponse {
}

// refs: 1 - tags: named, output
export interface AssociateProactiveEngagementDetailsResponse {
}

// refs: 1 - tags: named, output
export interface CreateProtectionResponse {
  ProtectionId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSubscriptionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteProtectionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSubscriptionResponse {
}

// refs: 1 - tags: named, output
export interface DescribeAttackResponse {
  Attack?: AttackDetail | null;
}

// refs: 1 - tags: named, output
export interface DescribeDRTAccessResponse {
  RoleArn?: string | null;
  LogBucketList?: string[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeEmergencyContactSettingsResponse {
  EmergencyContactList?: EmergencyContact[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeProtectionResponse {
  Protection?: Protection | null;
}

// refs: 1 - tags: named, output
export interface DescribeSubscriptionResponse {
  Subscription?: Subscription | null;
}

// refs: 1 - tags: named, output
export interface DisableProactiveEngagementResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateDRTLogBucketResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateDRTRoleResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateHealthCheckResponse {
}

// refs: 1 - tags: named, output
export interface EnableProactiveEngagementResponse {
}

// refs: 1 - tags: named, output
export interface GetSubscriptionStateResponse {
  SubscriptionState: SubscriptionState;
}

// refs: 1 - tags: named, output
export interface ListAttacksResponse {
  AttackSummaries?: AttackSummary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProtectionsResponse {
  Protections?: Protection[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateEmergencyContactSettingsResponse {
}

// refs: 1 - tags: named, output
export interface UpdateSubscriptionResponse {
}

// refs: 3 - tags: input, named, interface, output
export interface EmergencyContact {
  EmailAddress: string;
  PhoneNumber?: string | null;
  ContactNotes?: string | null;
}
function fromEmergencyContact(input?: EmergencyContact | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toEmergencyContact(root: JSONValue): EmergencyContact {
  return prt.readObj({
    required: {
      "EmailAddress": "s",
    },
    optional: {
      "PhoneNumber": "s",
      "ContactNotes": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface TimeRange {
  FromInclusive?: Date | number | null;
  ToExclusive?: Date | number | null;
}
function fromTimeRange(input?: TimeRange | null): JSONValue {
  if (!input) return input;
  return {...input,
    FromInclusive: prt.serializeDate_unixTimestamp(input["FromInclusive"]),
    ToExclusive: prt.serializeDate_unixTimestamp(input["ToExclusive"]),
  }
}

// refs: 2 - tags: input, named, enum, output
export type AutoRenew =
| "ENABLED"
| "DISABLED"
;

function toAutoRenew(root: JSONValue): AutoRenew | null {
  return ( false
    || root == "ENABLED"
    || root == "DISABLED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface AttackDetail {
  AttackId?: string | null;
  ResourceArn?: string | null;
  SubResources?: SubResourceSummary[] | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  AttackCounters?: SummarizedCounter[] | null;
  AttackProperties?: AttackProperty[] | null;
  Mitigations?: Mitigation[] | null;
}
function toAttackDetail(root: JSONValue): AttackDetail {
  return prt.readObj({
    required: {},
    optional: {
      "AttackId": "s",
      "ResourceArn": "s",
      "SubResources": [toSubResourceSummary],
      "StartTime": "d",
      "EndTime": "d",
      "AttackCounters": [toSummarizedCounter],
      "AttackProperties": [toAttackProperty],
      "Mitigations": [toMitigation],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SubResourceSummary {
  Type?: SubResourceType | null;
  Id?: string | null;
  AttackVectors?: SummarizedAttackVector[] | null;
  Counters?: SummarizedCounter[] | null;
}
function toSubResourceSummary(root: JSONValue): SubResourceSummary {
  return prt.readObj({
    required: {},
    optional: {
      "Type": toSubResourceType,
      "Id": "s",
      "AttackVectors": [toSummarizedAttackVector],
      "Counters": [toSummarizedCounter],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SubResourceType =
| "IP"
| "URL"
;
function toSubResourceType(root: JSONValue): SubResourceType | null {
  return ( false
    || root == "IP"
    || root == "URL"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface SummarizedAttackVector {
  VectorType: string;
  VectorCounters?: SummarizedCounter[] | null;
}
function toSummarizedAttackVector(root: JSONValue): SummarizedAttackVector {
  return prt.readObj({
    required: {
      "VectorType": "s",
    },
    optional: {
      "VectorCounters": [toSummarizedCounter],
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface SummarizedCounter {
  Name?: string | null;
  Max?: number | null;
  Average?: number | null;
  Sum?: number | null;
  N?: number | null;
  Unit?: string | null;
}
function toSummarizedCounter(root: JSONValue): SummarizedCounter {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Max": "n",
      "Average": "n",
      "Sum": "n",
      "N": "n",
      "Unit": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AttackProperty {
  AttackLayer?: AttackLayer | null;
  AttackPropertyIdentifier?: AttackPropertyIdentifier | null;
  TopContributors?: Contributor[] | null;
  Unit?: Unit | null;
  Total?: number | null;
}
function toAttackProperty(root: JSONValue): AttackProperty {
  return prt.readObj({
    required: {},
    optional: {
      "AttackLayer": toAttackLayer,
      "AttackPropertyIdentifier": toAttackPropertyIdentifier,
      "TopContributors": [toContributor],
      "Unit": toUnit,
      "Total": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AttackLayer =
| "NETWORK"
| "APPLICATION"
;
function toAttackLayer(root: JSONValue): AttackLayer | null {
  return ( false
    || root == "NETWORK"
    || root == "APPLICATION"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type AttackPropertyIdentifier =
| "DESTINATION_URL"
| "REFERRER"
| "SOURCE_ASN"
| "SOURCE_COUNTRY"
| "SOURCE_IP_ADDRESS"
| "SOURCE_USER_AGENT"
| "WORDPRESS_PINGBACK_REFLECTOR"
| "WORDPRESS_PINGBACK_SOURCE"
;
function toAttackPropertyIdentifier(root: JSONValue): AttackPropertyIdentifier | null {
  return ( false
    || root == "DESTINATION_URL"
    || root == "REFERRER"
    || root == "SOURCE_ASN"
    || root == "SOURCE_COUNTRY"
    || root == "SOURCE_IP_ADDRESS"
    || root == "SOURCE_USER_AGENT"
    || root == "WORDPRESS_PINGBACK_REFLECTOR"
    || root == "WORDPRESS_PINGBACK_SOURCE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Contributor {
  Name?: string | null;
  Value?: number | null;
}
function toContributor(root: JSONValue): Contributor {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type Unit =
| "BITS"
| "BYTES"
| "PACKETS"
| "REQUESTS"
;
function toUnit(root: JSONValue): Unit | null {
  return ( false
    || root == "BITS"
    || root == "BYTES"
    || root == "PACKETS"
    || root == "REQUESTS"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Mitigation {
  MitigationName?: string | null;
}
function toMitigation(root: JSONValue): Mitigation {
  return prt.readObj({
    required: {},
    optional: {
      "MitigationName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Protection {
  Id?: string | null;
  Name?: string | null;
  ResourceArn?: string | null;
  HealthCheckIds?: string[] | null;
}
function toProtection(root: JSONValue): Protection {
  return prt.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "ResourceArn": "s",
      "HealthCheckIds": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Subscription {
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  TimeCommitmentInSeconds?: number | null;
  AutoRenew?: AutoRenew | null;
  Limits?: Limit[] | null;
  ProactiveEngagementStatus?: ProactiveEngagementStatus | null;
}
function toSubscription(root: JSONValue): Subscription {
  return prt.readObj({
    required: {},
    optional: {
      "StartTime": "d",
      "EndTime": "d",
      "TimeCommitmentInSeconds": "n",
      "AutoRenew": toAutoRenew,
      "Limits": [toLimit],
      "ProactiveEngagementStatus": toProactiveEngagementStatus,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Limit {
  Type?: string | null;
  Max?: number | null;
}
function toLimit(root: JSONValue): Limit {
  return prt.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Max": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ProactiveEngagementStatus =
| "ENABLED"
| "DISABLED"
| "PENDING"
;
function toProactiveEngagementStatus(root: JSONValue): ProactiveEngagementStatus | null {
  return ( false
    || root == "ENABLED"
    || root == "DISABLED"
    || root == "PENDING"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type SubscriptionState =
| "ACTIVE"
| "INACTIVE"
;
function toSubscriptionState(root: JSONValue): SubscriptionState | null {
  return ( false
    || root == "ACTIVE"
    || root == "INACTIVE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface AttackSummary {
  AttackId?: string | null;
  ResourceArn?: string | null;
  StartTime?: Date | number | null;
  EndTime?: Date | number | null;
  AttackVectors?: AttackVectorDescription[] | null;
}
function toAttackSummary(root: JSONValue): AttackSummary {
  return prt.readObj({
    required: {},
    optional: {
      "AttackId": "s",
      "ResourceArn": "s",
      "StartTime": "d",
      "EndTime": "d",
      "AttackVectors": [toAttackVectorDescription],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AttackVectorDescription {
  VectorType: string;
}
function toAttackVectorDescription(root: JSONValue): AttackVectorDescription {
  return prt.readObj({
    required: {
      "VectorType": "s",
    },
    optional: {},
  }, root);
}
