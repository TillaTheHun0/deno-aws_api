// Autogenerated API client for: AWS Shield

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class Shield {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Shield.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2016-06-02",
    "endpointPrefix": "shield",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWS Shield",
    "serviceFullName": "AWS Shield",
    "serviceId": "Shield",
    "signatureVersion": "v4",
    "targetPrefix": "AWSShield_20160616",
    "uid": "shield-2016-06-02"
  };

  async associateDRTLogBucket(
    {abortSignal, ...params}: RequestConfig & s.AssociateDRTLogBucketRequest,
  ): Promise<s.AssociateDRTLogBucketResponse> {
    const body: jsonP.JSONObject = {
      LogBucket: params["LogBucket"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDRTLogBucket",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateDRTRole(
    {abortSignal, ...params}: RequestConfig & s.AssociateDRTRoleRequest,
  ): Promise<s.AssociateDRTRoleResponse> {
    const body: jsonP.JSONObject = {
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateDRTRole",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateHealthCheck(
    {abortSignal, ...params}: RequestConfig & s.AssociateHealthCheckRequest,
  ): Promise<s.AssociateHealthCheckResponse> {
    const body: jsonP.JSONObject = {
      ProtectionId: params["ProtectionId"],
      HealthCheckArn: params["HealthCheckArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateHealthCheck",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateProactiveEngagementDetails(
    {abortSignal, ...params}: RequestConfig & s.AssociateProactiveEngagementDetailsRequest,
  ): Promise<s.AssociateProactiveEngagementDetailsResponse> {
    const body: jsonP.JSONObject = {
      EmergencyContactList: params["EmergencyContactList"]?.map(x => fromEmergencyContact(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateProactiveEngagementDetails",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createProtection(
    {abortSignal, ...params}: RequestConfig & s.CreateProtectionRequest,
  ): Promise<s.CreateProtectionResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProtection",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProtectionId": "s",
      },
    }, await resp.json());
  }

  async createProtectionGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateProtectionGroupRequest,
  ): Promise<s.CreateProtectionGroupResponse> {
    const body: jsonP.JSONObject = {
      ProtectionGroupId: params["ProtectionGroupId"],
      Aggregation: params["Aggregation"],
      Pattern: params["Pattern"],
      ResourceType: params["ResourceType"],
      Members: params["Members"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProtectionGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createSubscription(
    {abortSignal, ...params}: RequestConfig & s.CreateSubscriptionRequest = {},
  ): Promise<s.CreateSubscriptionResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSubscription",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProtection(
    {abortSignal, ...params}: RequestConfig & s.DeleteProtectionRequest,
  ): Promise<s.DeleteProtectionResponse> {
    const body: jsonP.JSONObject = {
      ProtectionId: params["ProtectionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProtection",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteProtectionGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteProtectionGroupRequest,
  ): Promise<s.DeleteProtectionGroupResponse> {
    const body: jsonP.JSONObject = {
      ProtectionGroupId: params["ProtectionGroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProtectionGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSubscription(
    {abortSignal, ...params}: RequestConfig & s.DeleteSubscriptionRequest = {},
  ): Promise<s.DeleteSubscriptionResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSubscription",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAttack(
    {abortSignal, ...params}: RequestConfig & s.DescribeAttackRequest,
  ): Promise<s.DescribeAttackResponse> {
    const body: jsonP.JSONObject = {
      AttackId: params["AttackId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAttack",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attack": toAttackDetail,
      },
    }, await resp.json());
  }

  async describeAttackStatistics(
    {abortSignal, ...params}: RequestConfig & s.DescribeAttackStatisticsRequest = {},
  ): Promise<s.DescribeAttackStatisticsResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAttackStatistics",
    });
    return jsonP.readObj({
      required: {
        "TimeRange": toTimeRange,
        "DataItems": [toAttackStatisticsDataItem],
      },
      optional: {},
    }, await resp.json());
  }

  async describeDRTAccess(
    {abortSignal, ...params}: RequestConfig & s.DescribeDRTAccessRequest = {},
  ): Promise<s.DescribeDRTAccessResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDRTAccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoleArn": "s",
        "LogBucketList": ["s"],
      },
    }, await resp.json());
  }

  async describeEmergencyContactSettings(
    {abortSignal, ...params}: RequestConfig & s.DescribeEmergencyContactSettingsRequest = {},
  ): Promise<s.DescribeEmergencyContactSettingsResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEmergencyContactSettings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EmergencyContactList": [toEmergencyContact],
      },
    }, await resp.json());
  }

  async describeProtection(
    {abortSignal, ...params}: RequestConfig & s.DescribeProtectionRequest = {},
  ): Promise<s.DescribeProtectionResponse> {
    const body: jsonP.JSONObject = {
      ProtectionId: params["ProtectionId"],
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProtection",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Protection": toProtection,
      },
    }, await resp.json());
  }

  async describeProtectionGroup(
    {abortSignal, ...params}: RequestConfig & s.DescribeProtectionGroupRequest,
  ): Promise<s.DescribeProtectionGroupResponse> {
    const body: jsonP.JSONObject = {
      ProtectionGroupId: params["ProtectionGroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeProtectionGroup",
    });
    return jsonP.readObj({
      required: {
        "ProtectionGroup": toProtectionGroup,
      },
      optional: {},
    }, await resp.json());
  }

  async describeSubscription(
    {abortSignal, ...params}: RequestConfig & s.DescribeSubscriptionRequest = {},
  ): Promise<s.DescribeSubscriptionResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSubscription",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Subscription": toSubscription,
      },
    }, await resp.json());
  }

  async disableProactiveEngagement(
    {abortSignal, ...params}: RequestConfig & s.DisableProactiveEngagementRequest = {},
  ): Promise<s.DisableProactiveEngagementResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableProactiveEngagement",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDRTLogBucket(
    {abortSignal, ...params}: RequestConfig & s.DisassociateDRTLogBucketRequest,
  ): Promise<s.DisassociateDRTLogBucketResponse> {
    const body: jsonP.JSONObject = {
      LogBucket: params["LogBucket"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDRTLogBucket",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateDRTRole(
    {abortSignal, ...params}: RequestConfig & s.DisassociateDRTRoleRequest = {},
  ): Promise<s.DisassociateDRTRoleResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateDRTRole",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateHealthCheck(
    {abortSignal, ...params}: RequestConfig & s.DisassociateHealthCheckRequest,
  ): Promise<s.DisassociateHealthCheckResponse> {
    const body: jsonP.JSONObject = {
      ProtectionId: params["ProtectionId"],
      HealthCheckArn: params["HealthCheckArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateHealthCheck",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableProactiveEngagement(
    {abortSignal, ...params}: RequestConfig & s.EnableProactiveEngagementRequest = {},
  ): Promise<s.EnableProactiveEngagementResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableProactiveEngagement",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getSubscriptionState(
    {abortSignal, ...params}: RequestConfig & s.GetSubscriptionStateRequest = {},
  ): Promise<s.GetSubscriptionStateResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSubscriptionState",
    });
    return jsonP.readObj({
      required: {
        "SubscriptionState": (x: jsonP.JSONValue) => cmnP.readEnum<s.SubscriptionState>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async listAttacks(
    {abortSignal, ...params}: RequestConfig & s.ListAttacksRequest = {},
  ): Promise<s.ListAttacksResponse> {
    const body: jsonP.JSONObject = {
      ResourceArns: params["ResourceArns"],
      StartTime: fromTimeRange(params["StartTime"]),
      EndTime: fromTimeRange(params["EndTime"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAttacks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AttackSummaries": [toAttackSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProtectionGroups(
    {abortSignal, ...params}: RequestConfig & s.ListProtectionGroupsRequest = {},
  ): Promise<s.ListProtectionGroupsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProtectionGroups",
    });
    return jsonP.readObj({
      required: {
        "ProtectionGroups": [toProtectionGroup],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProtections(
    {abortSignal, ...params}: RequestConfig & s.ListProtectionsRequest = {},
  ): Promise<s.ListProtectionsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListProtections",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Protections": [toProtection],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourcesInProtectionGroup(
    {abortSignal, ...params}: RequestConfig & s.ListResourcesInProtectionGroupRequest,
  ): Promise<s.ListResourcesInProtectionGroupResponse> {
    const body: jsonP.JSONObject = {
      ProtectionGroupId: params["ProtectionGroupId"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourcesInProtectionGroup",
    });
    return jsonP.readObj({
      required: {
        "ResourceArns": ["s"],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async updateEmergencyContactSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateEmergencyContactSettingsRequest = {},
  ): Promise<s.UpdateEmergencyContactSettingsResponse> {
    const body: jsonP.JSONObject = {
      EmergencyContactList: params["EmergencyContactList"]?.map(x => fromEmergencyContact(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEmergencyContactSettings",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateProtectionGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateProtectionGroupRequest,
  ): Promise<s.UpdateProtectionGroupResponse> {
    const body: jsonP.JSONObject = {
      ProtectionGroupId: params["ProtectionGroupId"],
      Aggregation: params["Aggregation"],
      Pattern: params["Pattern"],
      ResourceType: params["ResourceType"],
      Members: params["Members"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProtectionGroup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateSubscription(
    {abortSignal, ...params}: RequestConfig & s.UpdateSubscriptionRequest = {},
  ): Promise<s.UpdateSubscriptionResponse> {
    const body: jsonP.JSONObject = {
      AutoRenew: params["AutoRenew"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSubscription",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromEmergencyContact(input?: s.EmergencyContact | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EmailAddress: input["EmailAddress"],
    PhoneNumber: input["PhoneNumber"],
    ContactNotes: input["ContactNotes"],
  }
}
function toEmergencyContact(root: jsonP.JSONValue): s.EmergencyContact {
  return jsonP.readObj({
    required: {
      "EmailAddress": "s",
    },
    optional: {
      "PhoneNumber": "s",
      "ContactNotes": "s",
    },
  }, root);
}

function fromTimeRange(input?: s.TimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FromInclusive: jsonP.serializeDate_unixTimestamp(input["FromInclusive"]),
    ToExclusive: jsonP.serializeDate_unixTimestamp(input["ToExclusive"]),
  }
}
function toTimeRange(root: jsonP.JSONValue): s.TimeRange {
  return jsonP.readObj({
    required: {},
    optional: {
      "FromInclusive": "d",
      "ToExclusive": "d",
    },
  }, root);
}

function toAttackDetail(root: jsonP.JSONValue): s.AttackDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "AttackId": "s",
      "ResourceArn": "s",
      "SubResources": [toSubResourceSummary],
      "StartTime": "d",
      "EndTime": "d",
      "AttackCounters": [toSummarizedCounter],
      "AttackProperties": [toAttackProperty],
      "Mitigations": [toMitigation],
    },
  }, root);
}

function toSubResourceSummary(root: jsonP.JSONValue): s.SubResourceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.SubResourceType>(x),
      "Id": "s",
      "AttackVectors": [toSummarizedAttackVector],
      "Counters": [toSummarizedCounter],
    },
  }, root);
}

function toSummarizedAttackVector(root: jsonP.JSONValue): s.SummarizedAttackVector {
  return jsonP.readObj({
    required: {
      "VectorType": "s",
    },
    optional: {
      "VectorCounters": [toSummarizedCounter],
    },
  }, root);
}

function toSummarizedCounter(root: jsonP.JSONValue): s.SummarizedCounter {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Max": "n",
      "Average": "n",
      "Sum": "n",
      "N": "n",
      "Unit": "s",
    },
  }, root);
}

function toAttackProperty(root: jsonP.JSONValue): s.AttackProperty {
  return jsonP.readObj({
    required: {},
    optional: {
      "AttackLayer": (x: jsonP.JSONValue) => cmnP.readEnum<s.AttackLayer>(x),
      "AttackPropertyIdentifier": (x: jsonP.JSONValue) => cmnP.readEnum<s.AttackPropertyIdentifier>(x),
      "TopContributors": [toContributor],
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.Unit>(x),
      "Total": "n",
    },
  }, root);
}

function toContributor(root: jsonP.JSONValue): s.Contributor {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "n",
    },
  }, root);
}

function toMitigation(root: jsonP.JSONValue): s.Mitigation {
  return jsonP.readObj({
    required: {},
    optional: {
      "MitigationName": "s",
    },
  }, root);
}

function toAttackStatisticsDataItem(root: jsonP.JSONValue): s.AttackStatisticsDataItem {
  return jsonP.readObj({
    required: {
      "AttackCount": "n",
    },
    optional: {
      "AttackVolume": toAttackVolume,
    },
  }, root);
}

function toAttackVolume(root: jsonP.JSONValue): s.AttackVolume {
  return jsonP.readObj({
    required: {},
    optional: {
      "BitsPerSecond": toAttackVolumeStatistics,
      "PacketsPerSecond": toAttackVolumeStatistics,
      "RequestsPerSecond": toAttackVolumeStatistics,
    },
  }, root);
}

function toAttackVolumeStatistics(root: jsonP.JSONValue): s.AttackVolumeStatistics {
  return jsonP.readObj({
    required: {
      "Max": "n",
    },
    optional: {},
  }, root);
}

function toProtection(root: jsonP.JSONValue): s.Protection {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "ResourceArn": "s",
      "HealthCheckIds": ["s"],
    },
  }, root);
}

function toProtectionGroup(root: jsonP.JSONValue): s.ProtectionGroup {
  return jsonP.readObj({
    required: {
      "ProtectionGroupId": "s",
      "Aggregation": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProtectionGroupAggregation>(x),
      "Pattern": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProtectionGroupPattern>(x),
      "Members": ["s"],
    },
    optional: {
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProtectedResourceType>(x),
    },
  }, root);
}

function toSubscription(root: jsonP.JSONValue): s.Subscription {
  return jsonP.readObj({
    required: {
      "SubscriptionLimits": toSubscriptionLimits,
    },
    optional: {
      "StartTime": "d",
      "EndTime": "d",
      "TimeCommitmentInSeconds": "n",
      "AutoRenew": (x: jsonP.JSONValue) => cmnP.readEnum<s.AutoRenew>(x),
      "Limits": [toLimit],
      "ProactiveEngagementStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProactiveEngagementStatus>(x),
    },
  }, root);
}

function toLimit(root: jsonP.JSONValue): s.Limit {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "Max": "n",
    },
  }, root);
}

function toSubscriptionLimits(root: jsonP.JSONValue): s.SubscriptionLimits {
  return jsonP.readObj({
    required: {
      "ProtectionLimits": toProtectionLimits,
      "ProtectionGroupLimits": toProtectionGroupLimits,
    },
    optional: {},
  }, root);
}

function toProtectionLimits(root: jsonP.JSONValue): s.ProtectionLimits {
  return jsonP.readObj({
    required: {
      "ProtectedResourceTypeLimits": [toLimit],
    },
    optional: {},
  }, root);
}

function toProtectionGroupLimits(root: jsonP.JSONValue): s.ProtectionGroupLimits {
  return jsonP.readObj({
    required: {
      "MaxProtectionGroups": "n",
      "PatternTypeLimits": toProtectionGroupPatternTypeLimits,
    },
    optional: {},
  }, root);
}

function toProtectionGroupPatternTypeLimits(root: jsonP.JSONValue): s.ProtectionGroupPatternTypeLimits {
  return jsonP.readObj({
    required: {
      "ArbitraryPatternLimits": toProtectionGroupArbitraryPatternLimits,
    },
    optional: {},
  }, root);
}

function toProtectionGroupArbitraryPatternLimits(root: jsonP.JSONValue): s.ProtectionGroupArbitraryPatternLimits {
  return jsonP.readObj({
    required: {
      "MaxMembers": "n",
    },
    optional: {},
  }, root);
}

function toAttackSummary(root: jsonP.JSONValue): s.AttackSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "AttackId": "s",
      "ResourceArn": "s",
      "StartTime": "d",
      "EndTime": "d",
      "AttackVectors": [toAttackVectorDescription],
    },
  }, root);
}

function toAttackVectorDescription(root: jsonP.JSONValue): s.AttackVectorDescription {
  return jsonP.readObj({
    required: {
      "VectorType": "s",
    },
    optional: {},
  }, root);
}
