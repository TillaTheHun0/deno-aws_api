// Autogenerated API client for: AWS Network Manager

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class NetworkManager {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(NetworkManager.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-07-05",
    "endpointPrefix": "networkmanager",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "NetworkManager",
    "serviceFullName": "AWS Network Manager",
    "serviceId": "NetworkManager",
    "signatureVersion": "v4",
    "signingName": "networkmanager",
    "uid": "networkmanager-2019-07-05"
  };

  async associateCustomerGateway(
    {abortSignal, ...params}: RequestConfig & AssociateCustomerGatewayRequest,
  ): Promise<AssociateCustomerGatewayResponse> {
    const body: jsonP.JSONObject = params ? {
      CustomerGatewayArn: params["CustomerGatewayArn"],
      DeviceId: params["DeviceId"],
      LinkId: params["LinkId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateCustomerGateway",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/customer-gateway-associations`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "CustomerGatewayAssociation": toCustomerGatewayAssociation,
        },
      }, await resp.json()),
  };
  }

  async associateLink(
    {abortSignal, ...params}: RequestConfig & AssociateLinkRequest,
  ): Promise<AssociateLinkResponse> {
    const body: jsonP.JSONObject = params ? {
      DeviceId: params["DeviceId"],
      LinkId: params["LinkId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateLink",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/link-associations`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "LinkAssociation": toLinkAssociation,
        },
      }, await resp.json()),
  };
  }

  async createDevice(
    {abortSignal, ...params}: RequestConfig & CreateDeviceRequest,
  ): Promise<CreateDeviceResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Type: params["Type"],
      Vendor: params["Vendor"],
      Model: params["Model"],
      SerialNumber: params["SerialNumber"],
      Location: fromLocation(params["Location"]),
      SiteId: params["SiteId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDevice",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/devices`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Device": toDevice,
        },
      }, await resp.json()),
  };
  }

  async createGlobalNetwork(
    {abortSignal, ...params}: RequestConfig & CreateGlobalNetworkRequest = {},
  ): Promise<CreateGlobalNetworkResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGlobalNetwork",
      requestUri: "/global-networks",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GlobalNetwork": toGlobalNetwork,
        },
      }, await resp.json()),
  };
  }

  async createLink(
    {abortSignal, ...params}: RequestConfig & CreateLinkRequest,
  ): Promise<CreateLinkResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Type: params["Type"],
      Bandwidth: fromBandwidth(params["Bandwidth"]),
      Provider: params["Provider"],
      SiteId: params["SiteId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLink",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/links`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Link": toLink,
        },
      }, await resp.json()),
  };
  }

  async createSite(
    {abortSignal, ...params}: RequestConfig & CreateSiteRequest,
  ): Promise<CreateSiteResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Location: fromLocation(params["Location"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSite",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/sites`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Site": toSite,
        },
      }, await resp.json()),
  };
  }

  async deleteDevice(
    {abortSignal, ...params}: RequestConfig & DeleteDeviceRequest,
  ): Promise<DeleteDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDevice",
      method: "DELETE",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/devices/${params["DeviceId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Device": toDevice,
        },
      }, await resp.json()),
  };
  }

  async deleteGlobalNetwork(
    {abortSignal, ...params}: RequestConfig & DeleteGlobalNetworkRequest,
  ): Promise<DeleteGlobalNetworkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteGlobalNetwork",
      method: "DELETE",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GlobalNetwork": toGlobalNetwork,
        },
      }, await resp.json()),
  };
  }

  async deleteLink(
    {abortSignal, ...params}: RequestConfig & DeleteLinkRequest,
  ): Promise<DeleteLinkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteLink",
      method: "DELETE",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/links/${params["LinkId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Link": toLink,
        },
      }, await resp.json()),
  };
  }

  async deleteSite(
    {abortSignal, ...params}: RequestConfig & DeleteSiteRequest,
  ): Promise<DeleteSiteResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSite",
      method: "DELETE",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/sites/${params["SiteId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Site": toSite,
        },
      }, await resp.json()),
  };
  }

  async deregisterTransitGateway(
    {abortSignal, ...params}: RequestConfig & DeregisterTransitGatewayRequest,
  ): Promise<DeregisterTransitGatewayResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeregisterTransitGateway",
      method: "DELETE",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/transit-gateway-registrations/${params["TransitGatewayArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "TransitGatewayRegistration": toTransitGatewayRegistration,
        },
      }, await resp.json()),
  };
  }

  async describeGlobalNetworks(
    {abortSignal, ...params}: RequestConfig & DescribeGlobalNetworksRequest = {},
  ): Promise<DescribeGlobalNetworksResponse> {
    const query = new URLSearchParams;
    for (const item of params["GlobalNetworkIds"] ?? []) {
      query.append("globalNetworkIds", item?.toString() ?? "");
    }
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeGlobalNetworks",
      method: "GET",
      requestUri: "/global-networks",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GlobalNetworks": [toGlobalNetwork],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async disassociateCustomerGateway(
    {abortSignal, ...params}: RequestConfig & DisassociateCustomerGatewayRequest,
  ): Promise<DisassociateCustomerGatewayResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateCustomerGateway",
      method: "DELETE",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/customer-gateway-associations/${params["CustomerGatewayArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "CustomerGatewayAssociation": toCustomerGatewayAssociation,
        },
      }, await resp.json()),
  };
  }

  async disassociateLink(
    {abortSignal, ...params}: RequestConfig & DisassociateLinkRequest,
  ): Promise<DisassociateLinkResponse> {
    const query = new URLSearchParams;
    query.set("deviceId", params["DeviceId"]?.toString() ?? "");
    query.set("linkId", params["LinkId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateLink",
      method: "DELETE",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/link-associations`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "LinkAssociation": toLinkAssociation,
        },
      }, await resp.json()),
  };
  }

  async getCustomerGatewayAssociations(
    {abortSignal, ...params}: RequestConfig & GetCustomerGatewayAssociationsRequest,
  ): Promise<GetCustomerGatewayAssociationsResponse> {
    const query = new URLSearchParams;
    for (const item of params["CustomerGatewayArns"] ?? []) {
      query.append("customerGatewayArns", item?.toString() ?? "");
    }
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetCustomerGatewayAssociations",
      method: "GET",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/customer-gateway-associations`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "CustomerGatewayAssociations": [toCustomerGatewayAssociation],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getDevices(
    {abortSignal, ...params}: RequestConfig & GetDevicesRequest,
  ): Promise<GetDevicesResponse> {
    const query = new URLSearchParams;
    for (const item of params["DeviceIds"] ?? []) {
      query.append("deviceIds", item?.toString() ?? "");
    }
    if (params["SiteId"] != null) query.set("siteId", params["SiteId"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDevices",
      method: "GET",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/devices`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Devices": [toDevice],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getLinkAssociations(
    {abortSignal, ...params}: RequestConfig & GetLinkAssociationsRequest,
  ): Promise<GetLinkAssociationsResponse> {
    const query = new URLSearchParams;
    if (params["DeviceId"] != null) query.set("deviceId", params["DeviceId"]?.toString() ?? "");
    if (params["LinkId"] != null) query.set("linkId", params["LinkId"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLinkAssociations",
      method: "GET",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/link-associations`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "LinkAssociations": [toLinkAssociation],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getLinks(
    {abortSignal, ...params}: RequestConfig & GetLinksRequest,
  ): Promise<GetLinksResponse> {
    const query = new URLSearchParams;
    for (const item of params["LinkIds"] ?? []) {
      query.append("linkIds", item?.toString() ?? "");
    }
    if (params["SiteId"] != null) query.set("siteId", params["SiteId"]?.toString() ?? "");
    if (params["Type"] != null) query.set("type", params["Type"]?.toString() ?? "");
    if (params["Provider"] != null) query.set("provider", params["Provider"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetLinks",
      method: "GET",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/links`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Links": [toLink],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getSites(
    {abortSignal, ...params}: RequestConfig & GetSitesRequest,
  ): Promise<GetSitesResponse> {
    const query = new URLSearchParams;
    for (const item of params["SiteIds"] ?? []) {
      query.append("siteIds", item?.toString() ?? "");
    }
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetSites",
      method: "GET",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/sites`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Sites": [toSite],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getTransitGatewayRegistrations(
    {abortSignal, ...params}: RequestConfig & GetTransitGatewayRegistrationsRequest,
  ): Promise<GetTransitGatewayRegistrationsResponse> {
    const query = new URLSearchParams;
    for (const item of params["TransitGatewayArns"] ?? []) {
      query.append("transitGatewayArns", item?.toString() ?? "");
    }
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetTransitGatewayRegistrations",
      method: "GET",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/transit-gateway-registrations`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "TransitGatewayRegistrations": [toTransitGatewayRegistration],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "TagList": [toTag],
        },
      }, await resp.json()),
  };
  }

  async registerTransitGateway(
    {abortSignal, ...params}: RequestConfig & RegisterTransitGatewayRequest,
  ): Promise<RegisterTransitGatewayResponse> {
    const body: jsonP.JSONObject = params ? {
      TransitGatewayArn: params["TransitGatewayArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterTransitGateway",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/transit-gateway-registrations`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "TransitGatewayRegistration": toTransitGatewayRegistration,
        },
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateDevice(
    {abortSignal, ...params}: RequestConfig & UpdateDeviceRequest,
  ): Promise<UpdateDeviceResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Type: params["Type"],
      Vendor: params["Vendor"],
      Model: params["Model"],
      SerialNumber: params["SerialNumber"],
      Location: fromLocation(params["Location"]),
      SiteId: params["SiteId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDevice",
      method: "PATCH",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/devices/${params["DeviceId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Device": toDevice,
        },
      }, await resp.json()),
  };
  }

  async updateGlobalNetwork(
    {abortSignal, ...params}: RequestConfig & UpdateGlobalNetworkRequest,
  ): Promise<UpdateGlobalNetworkResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGlobalNetwork",
      method: "PATCH",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GlobalNetwork": toGlobalNetwork,
        },
      }, await resp.json()),
  };
  }

  async updateLink(
    {abortSignal, ...params}: RequestConfig & UpdateLinkRequest,
  ): Promise<UpdateLinkResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Type: params["Type"],
      Bandwidth: fromBandwidth(params["Bandwidth"]),
      Provider: params["Provider"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLink",
      method: "PATCH",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/links/${params["LinkId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Link": toLink,
        },
      }, await resp.json()),
  };
  }

  async updateSite(
    {abortSignal, ...params}: RequestConfig & UpdateSiteRequest,
  ): Promise<UpdateSiteResponse> {
    const body: jsonP.JSONObject = params ? {
      Description: params["Description"],
      Location: fromLocation(params["Location"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSite",
      method: "PATCH",
      requestUri: cmnP.encodePath`/global-networks/${params["GlobalNetworkId"]}/sites/${params["SiteId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Site": toSite,
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface AssociateCustomerGatewayRequest {
  CustomerGatewayArn: string;
  GlobalNetworkId: string;
  DeviceId: string;
  LinkId?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateLinkRequest {
  GlobalNetworkId: string;
  DeviceId: string;
  LinkId: string;
}

// refs: 1 - tags: named, input
export interface CreateDeviceRequest {
  GlobalNetworkId: string;
  Description?: string | null;
  Type?: string | null;
  Vendor?: string | null;
  Model?: string | null;
  SerialNumber?: string | null;
  Location?: Location | null;
  SiteId?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateGlobalNetworkRequest {
  Description?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLinkRequest {
  GlobalNetworkId: string;
  Description?: string | null;
  Type?: string | null;
  Bandwidth: Bandwidth;
  Provider?: string | null;
  SiteId: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateSiteRequest {
  GlobalNetworkId: string;
  Description?: string | null;
  Location?: Location | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteDeviceRequest {
  GlobalNetworkId: string;
  DeviceId: string;
}

// refs: 1 - tags: named, input
export interface DeleteGlobalNetworkRequest {
  GlobalNetworkId: string;
}

// refs: 1 - tags: named, input
export interface DeleteLinkRequest {
  GlobalNetworkId: string;
  LinkId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSiteRequest {
  GlobalNetworkId: string;
  SiteId: string;
}

// refs: 1 - tags: named, input
export interface DeregisterTransitGatewayRequest {
  GlobalNetworkId: string;
  TransitGatewayArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeGlobalNetworksRequest {
  GlobalNetworkIds?: string[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateCustomerGatewayRequest {
  GlobalNetworkId: string;
  CustomerGatewayArn: string;
}

// refs: 1 - tags: named, input
export interface DisassociateLinkRequest {
  GlobalNetworkId: string;
  DeviceId: string;
  LinkId: string;
}

// refs: 1 - tags: named, input
export interface GetCustomerGatewayAssociationsRequest {
  GlobalNetworkId: string;
  CustomerGatewayArns?: string[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDevicesRequest {
  GlobalNetworkId: string;
  DeviceIds?: string[] | null;
  SiteId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetLinkAssociationsRequest {
  GlobalNetworkId: string;
  DeviceId?: string | null;
  LinkId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetLinksRequest {
  GlobalNetworkId: string;
  LinkIds?: string[] | null;
  SiteId?: string | null;
  Type?: string | null;
  Provider?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetSitesRequest {
  GlobalNetworkId: string;
  SiteIds?: string[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetTransitGatewayRegistrationsRequest {
  GlobalNetworkId: string;
  TransitGatewayArns?: string[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface RegisterTransitGatewayRequest {
  GlobalNetworkId: string;
  TransitGatewayArn: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDeviceRequest {
  GlobalNetworkId: string;
  DeviceId: string;
  Description?: string | null;
  Type?: string | null;
  Vendor?: string | null;
  Model?: string | null;
  SerialNumber?: string | null;
  Location?: Location | null;
  SiteId?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGlobalNetworkRequest {
  GlobalNetworkId: string;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateLinkRequest {
  GlobalNetworkId: string;
  LinkId: string;
  Description?: string | null;
  Type?: string | null;
  Bandwidth?: Bandwidth | null;
  Provider?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateSiteRequest {
  GlobalNetworkId: string;
  SiteId: string;
  Description?: string | null;
  Location?: Location | null;
}

// refs: 1 - tags: named, output
export interface AssociateCustomerGatewayResponse {
  CustomerGatewayAssociation?: CustomerGatewayAssociation | null;
}

// refs: 1 - tags: named, output
export interface AssociateLinkResponse {
  LinkAssociation?: LinkAssociation | null;
}

// refs: 1 - tags: named, output
export interface CreateDeviceResponse {
  Device?: Device | null;
}

// refs: 1 - tags: named, output
export interface CreateGlobalNetworkResponse {
  GlobalNetwork?: GlobalNetwork | null;
}

// refs: 1 - tags: named, output
export interface CreateLinkResponse {
  Link?: Link | null;
}

// refs: 1 - tags: named, output
export interface CreateSiteResponse {
  Site?: Site | null;
}

// refs: 1 - tags: named, output
export interface DeleteDeviceResponse {
  Device?: Device | null;
}

// refs: 1 - tags: named, output
export interface DeleteGlobalNetworkResponse {
  GlobalNetwork?: GlobalNetwork | null;
}

// refs: 1 - tags: named, output
export interface DeleteLinkResponse {
  Link?: Link | null;
}

// refs: 1 - tags: named, output
export interface DeleteSiteResponse {
  Site?: Site | null;
}

// refs: 1 - tags: named, output
export interface DeregisterTransitGatewayResponse {
  TransitGatewayRegistration?: TransitGatewayRegistration | null;
}

// refs: 1 - tags: named, output
export interface DescribeGlobalNetworksResponse {
  GlobalNetworks?: GlobalNetwork[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisassociateCustomerGatewayResponse {
  CustomerGatewayAssociation?: CustomerGatewayAssociation | null;
}

// refs: 1 - tags: named, output
export interface DisassociateLinkResponse {
  LinkAssociation?: LinkAssociation | null;
}

// refs: 1 - tags: named, output
export interface GetCustomerGatewayAssociationsResponse {
  CustomerGatewayAssociations?: CustomerGatewayAssociation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDevicesResponse {
  Devices?: Device[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetLinkAssociationsResponse {
  LinkAssociations?: LinkAssociation[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetLinksResponse {
  Links?: Link[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSitesResponse {
  Sites?: Site[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetTransitGatewayRegistrationsResponse {
  TransitGatewayRegistrations?: TransitGatewayRegistration[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface RegisterTransitGatewayResponse {
  TransitGatewayRegistration?: TransitGatewayRegistration | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDeviceResponse {
  Device?: Device | null;
}

// refs: 1 - tags: named, output
export interface UpdateGlobalNetworkResponse {
  GlobalNetwork?: GlobalNetwork | null;
}

// refs: 1 - tags: named, output
export interface UpdateLinkResponse {
  Link?: Link | null;
}

// refs: 1 - tags: named, output
export interface UpdateSiteResponse {
  Site?: Site | null;
}

// refs: 12 - tags: input, named, interface, output
export interface Location {
  Address?: string | null;
  Latitude?: string | null;
  Longitude?: string | null;
}
function fromLocation(input?: Location | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address: input["Address"],
    Latitude: input["Latitude"],
    Longitude: input["Longitude"],
  }
}
function toLocation(root: jsonP.JSONValue): Location {
  return jsonP.readObj({
    required: {},
    optional: {
      "Address": "s",
      "Latitude": "s",
      "Longitude": "s",
    },
  }, root);
}

// refs: 22 - tags: input, named, interface, output
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Bandwidth {
  UploadSpeed?: number | null;
  DownloadSpeed?: number | null;
}
function fromBandwidth(input?: Bandwidth | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UploadSpeed: input["UploadSpeed"],
    DownloadSpeed: input["DownloadSpeed"],
  }
}
function toBandwidth(root: jsonP.JSONValue): Bandwidth {
  return jsonP.readObj({
    required: {},
    optional: {
      "UploadSpeed": "n",
      "DownloadSpeed": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CustomerGatewayAssociation {
  CustomerGatewayArn?: string | null;
  GlobalNetworkId?: string | null;
  DeviceId?: string | null;
  LinkId?: string | null;
  State?: CustomerGatewayAssociationState | null;
}
function toCustomerGatewayAssociation(root: jsonP.JSONValue): CustomerGatewayAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "CustomerGatewayArn": "s",
      "GlobalNetworkId": "s",
      "DeviceId": "s",
      "LinkId": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<CustomerGatewayAssociationState>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type CustomerGatewayAssociationState =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface LinkAssociation {
  GlobalNetworkId?: string | null;
  DeviceId?: string | null;
  LinkId?: string | null;
  LinkAssociationState?: LinkAssociationState | null;
}
function toLinkAssociation(root: jsonP.JSONValue): LinkAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "GlobalNetworkId": "s",
      "DeviceId": "s",
      "LinkId": "s",
      "LinkAssociationState": (x: jsonP.JSONValue) => cmnP.readEnum<LinkAssociationState>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type LinkAssociationState =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface Device {
  DeviceId?: string | null;
  DeviceArn?: string | null;
  GlobalNetworkId?: string | null;
  Description?: string | null;
  Type?: string | null;
  Vendor?: string | null;
  Model?: string | null;
  SerialNumber?: string | null;
  Location?: Location | null;
  SiteId?: string | null;
  CreatedAt?: Date | number | null;
  State?: DeviceState | null;
  Tags?: Tag[] | null;
}
function toDevice(root: jsonP.JSONValue): Device {
  return jsonP.readObj({
    required: {},
    optional: {
      "DeviceId": "s",
      "DeviceArn": "s",
      "GlobalNetworkId": "s",
      "Description": "s",
      "Type": "s",
      "Vendor": "s",
      "Model": "s",
      "SerialNumber": "s",
      "Location": toLocation,
      "SiteId": "s",
      "CreatedAt": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<DeviceState>(x),
      "Tags": [toTag],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type DeviceState =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface GlobalNetwork {
  GlobalNetworkId?: string | null;
  GlobalNetworkArn?: string | null;
  Description?: string | null;
  CreatedAt?: Date | number | null;
  State?: GlobalNetworkState | null;
  Tags?: Tag[] | null;
}
function toGlobalNetwork(root: jsonP.JSONValue): GlobalNetwork {
  return jsonP.readObj({
    required: {},
    optional: {
      "GlobalNetworkId": "s",
      "GlobalNetworkArn": "s",
      "Description": "s",
      "CreatedAt": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<GlobalNetworkState>(x),
      "Tags": [toTag],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type GlobalNetworkState =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface Link {
  LinkId?: string | null;
  LinkArn?: string | null;
  GlobalNetworkId?: string | null;
  SiteId?: string | null;
  Description?: string | null;
  Type?: string | null;
  Bandwidth?: Bandwidth | null;
  Provider?: string | null;
  CreatedAt?: Date | number | null;
  State?: LinkState | null;
  Tags?: Tag[] | null;
}
function toLink(root: jsonP.JSONValue): Link {
  return jsonP.readObj({
    required: {},
    optional: {
      "LinkId": "s",
      "LinkArn": "s",
      "GlobalNetworkId": "s",
      "SiteId": "s",
      "Description": "s",
      "Type": "s",
      "Bandwidth": toBandwidth,
      "Provider": "s",
      "CreatedAt": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<LinkState>(x),
      "Tags": [toTag],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type LinkState =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface Site {
  SiteId?: string | null;
  SiteArn?: string | null;
  GlobalNetworkId?: string | null;
  Description?: string | null;
  Location?: Location | null;
  CreatedAt?: Date | number | null;
  State?: SiteState | null;
  Tags?: Tag[] | null;
}
function toSite(root: jsonP.JSONValue): Site {
  return jsonP.readObj({
    required: {},
    optional: {
      "SiteId": "s",
      "SiteArn": "s",
      "GlobalNetworkId": "s",
      "Description": "s",
      "Location": toLocation,
      "CreatedAt": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<SiteState>(x),
      "Tags": [toTag],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type SiteState =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface TransitGatewayRegistration {
  GlobalNetworkId?: string | null;
  TransitGatewayArn?: string | null;
  State?: TransitGatewayRegistrationStateReason | null;
}
function toTransitGatewayRegistration(root: jsonP.JSONValue): TransitGatewayRegistration {
  return jsonP.readObj({
    required: {},
    optional: {
      "GlobalNetworkId": "s",
      "TransitGatewayArn": "s",
      "State": toTransitGatewayRegistrationStateReason,
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface TransitGatewayRegistrationStateReason {
  Code?: TransitGatewayRegistrationState | null;
  Message?: string | null;
}
function toTransitGatewayRegistrationStateReason(root: jsonP.JSONValue): TransitGatewayRegistrationStateReason {
  return jsonP.readObj({
    required: {},
    optional: {
      "Code": (x: jsonP.JSONValue) => cmnP.readEnum<TransitGatewayRegistrationState>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type TransitGatewayRegistrationState =
| "PENDING"
| "AVAILABLE"
| "DELETING"
| "DELETED"
| "FAILED"
| cmnP.UnexpectedEnumValue;
