// Autogenerated API client for: Amazon CloudWatch Events

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CloudWatchEvents {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CloudWatchEvents.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-10-07",
    "endpointPrefix": "events",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon CloudWatch Events",
    "serviceId": "CloudWatch Events",
    "signatureVersion": "v4",
    "targetPrefix": "AWSEvents",
    "uid": "events-2015-10-07"
  };

  async activateEventSource(
    {abortSignal, ...params}: RequestConfig & ActivateEventSourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ActivateEventSource",
    });
  }

  async createEventBus(
    {abortSignal, ...params}: RequestConfig & CreateEventBusRequest,
  ): Promise<CreateEventBusResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      EventSourceName: params["EventSourceName"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEventBus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventBusArn": "s",
      },
    }, await resp.json());
  }

  async createPartnerEventSource(
    {abortSignal, ...params}: RequestConfig & CreatePartnerEventSourceRequest,
  ): Promise<CreatePartnerEventSourceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Account: params["Account"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePartnerEventSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventSourceArn": "s",
      },
    }, await resp.json());
  }

  async deactivateEventSource(
    {abortSignal, ...params}: RequestConfig & DeactivateEventSourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeactivateEventSource",
    });
  }

  async deleteEventBus(
    {abortSignal, ...params}: RequestConfig & DeleteEventBusRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEventBus",
    });
  }

  async deletePartnerEventSource(
    {abortSignal, ...params}: RequestConfig & DeletePartnerEventSourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Account: params["Account"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePartnerEventSource",
    });
  }

  async deleteRule(
    {abortSignal, ...params}: RequestConfig & DeleteRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      EventBusName: params["EventBusName"],
      Force: params["Force"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRule",
    });
  }

  async describeEventBus(
    {abortSignal, ...params}: RequestConfig & DescribeEventBusRequest = {},
  ): Promise<DescribeEventBusResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventBus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "Arn": "s",
        "Policy": "s",
      },
    }, await resp.json());
  }

  async describeEventSource(
    {abortSignal, ...params}: RequestConfig & DescribeEventSourceRequest,
  ): Promise<DescribeEventSourceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreatedBy": "s",
        "CreationTime": "d",
        "ExpirationTime": "d",
        "Name": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<EventSourceState>(x),
      },
    }, await resp.json());
  }

  async describePartnerEventSource(
    {abortSignal, ...params}: RequestConfig & DescribePartnerEventSourceRequest,
  ): Promise<DescribePartnerEventSourceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePartnerEventSource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async describeRule(
    {abortSignal, ...params}: RequestConfig & DescribeRuleRequest,
  ): Promise<DescribeRuleResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      EventBusName: params["EventBusName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "Arn": "s",
        "EventPattern": "s",
        "ScheduleExpression": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<RuleState>(x),
        "Description": "s",
        "RoleArn": "s",
        "ManagedBy": "s",
        "EventBusName": "s",
      },
    }, await resp.json());
  }

  async disableRule(
    {abortSignal, ...params}: RequestConfig & DisableRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      EventBusName: params["EventBusName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableRule",
    });
  }

  async enableRule(
    {abortSignal, ...params}: RequestConfig & EnableRuleRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      EventBusName: params["EventBusName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableRule",
    });
  }

  async listEventBuses(
    {abortSignal, ...params}: RequestConfig & ListEventBusesRequest = {},
  ): Promise<ListEventBusesResponse> {
    const body: jsonP.JSONObject = {
      NamePrefix: params["NamePrefix"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEventBuses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventBuses": [toEventBus],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEventSources(
    {abortSignal, ...params}: RequestConfig & ListEventSourcesRequest = {},
  ): Promise<ListEventSourcesResponse> {
    const body: jsonP.JSONObject = {
      NamePrefix: params["NamePrefix"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEventSources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventSources": [toEventSource],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPartnerEventSourceAccounts(
    {abortSignal, ...params}: RequestConfig & ListPartnerEventSourceAccountsRequest,
  ): Promise<ListPartnerEventSourceAccountsResponse> {
    const body: jsonP.JSONObject = {
      EventSourceName: params["EventSourceName"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPartnerEventSourceAccounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PartnerEventSourceAccounts": [toPartnerEventSourceAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPartnerEventSources(
    {abortSignal, ...params}: RequestConfig & ListPartnerEventSourcesRequest,
  ): Promise<ListPartnerEventSourcesResponse> {
    const body: jsonP.JSONObject = {
      NamePrefix: params["NamePrefix"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPartnerEventSources",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PartnerEventSources": [toPartnerEventSource],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRuleNamesByTarget(
    {abortSignal, ...params}: RequestConfig & ListRuleNamesByTargetRequest,
  ): Promise<ListRuleNamesByTargetResponse> {
    const body: jsonP.JSONObject = {
      TargetArn: params["TargetArn"],
      EventBusName: params["EventBusName"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRuleNamesByTarget",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuleNames": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRules(
    {abortSignal, ...params}: RequestConfig & ListRulesRequest = {},
  ): Promise<ListRulesResponse> {
    const body: jsonP.JSONObject = {
      NamePrefix: params["NamePrefix"],
      EventBusName: params["EventBusName"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rules": [toRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listTargetsByRule(
    {abortSignal, ...params}: RequestConfig & ListTargetsByRuleRequest,
  ): Promise<ListTargetsByRuleResponse> {
    const body: jsonP.JSONObject = {
      Rule: params["Rule"],
      EventBusName: params["EventBusName"],
      NextToken: params["NextToken"],
      Limit: params["Limit"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTargetsByRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Targets": [toTarget],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putEvents(
    {abortSignal, ...params}: RequestConfig & PutEventsRequest,
  ): Promise<PutEventsResponse> {
    const body: jsonP.JSONObject = {
      Entries: params["Entries"]?.map(x => fromPutEventsRequestEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedEntryCount": "n",
        "Entries": [toPutEventsResultEntry],
      },
    }, await resp.json());
  }

  async putPartnerEvents(
    {abortSignal, ...params}: RequestConfig & PutPartnerEventsRequest,
  ): Promise<PutPartnerEventsResponse> {
    const body: jsonP.JSONObject = {
      Entries: params["Entries"]?.map(x => fromPutPartnerEventsRequestEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPartnerEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedEntryCount": "n",
        "Entries": [toPutPartnerEventsResultEntry],
      },
    }, await resp.json());
  }

  async putPermission(
    {abortSignal, ...params}: RequestConfig & PutPermissionRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      EventBusName: params["EventBusName"],
      Action: params["Action"],
      Principal: params["Principal"],
      StatementId: params["StatementId"],
      Condition: fromCondition(params["Condition"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPermission",
    });
  }

  async putRule(
    {abortSignal, ...params}: RequestConfig & PutRuleRequest,
  ): Promise<PutRuleResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ScheduleExpression: params["ScheduleExpression"],
      EventPattern: params["EventPattern"],
      State: params["State"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      EventBusName: params["EventBusName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuleArn": "s",
      },
    }, await resp.json());
  }

  async putTargets(
    {abortSignal, ...params}: RequestConfig & PutTargetsRequest,
  ): Promise<PutTargetsResponse> {
    const body: jsonP.JSONObject = {
      Rule: params["Rule"],
      EventBusName: params["EventBusName"],
      Targets: params["Targets"]?.map(x => fromTarget(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutTargets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedEntryCount": "n",
        "FailedEntries": [toPutTargetsResultEntry],
      },
    }, await resp.json());
  }

  async removePermission(
    {abortSignal, ...params}: RequestConfig & RemovePermissionRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      StatementId: params["StatementId"],
      EventBusName: params["EventBusName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemovePermission",
    });
  }

  async removeTargets(
    {abortSignal, ...params}: RequestConfig & RemoveTargetsRequest,
  ): Promise<RemoveTargetsResponse> {
    const body: jsonP.JSONObject = {
      Rule: params["Rule"],
      EventBusName: params["EventBusName"],
      Ids: params["Ids"],
      Force: params["Force"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTargets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FailedEntryCount": "n",
        "FailedEntries": [toRemoveTargetsResultEntry],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async testEventPattern(
    {abortSignal, ...params}: RequestConfig & TestEventPatternRequest,
  ): Promise<TestEventPatternResponse> {
    const body: jsonP.JSONObject = {
      EventPattern: params["EventPattern"],
      Event: params["Event"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TestEventPattern",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Result": "b",
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface ActivateEventSourceRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface CreateEventBusRequest {
  Name: string;
  EventSourceName?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreatePartnerEventSourceRequest {
  Name: string;
  Account: string;
}

// refs: 1 - tags: named, input
export interface DeactivateEventSourceRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteEventBusRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeletePartnerEventSourceRequest {
  Name: string;
  Account: string;
}

// refs: 1 - tags: named, input
export interface DeleteRuleRequest {
  Name: string;
  EventBusName?: string | null;
  Force?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventBusRequest {
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventSourceRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DescribePartnerEventSourceRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DescribeRuleRequest {
  Name: string;
  EventBusName?: string | null;
}

// refs: 1 - tags: named, input
export interface DisableRuleRequest {
  Name: string;
  EventBusName?: string | null;
}

// refs: 1 - tags: named, input
export interface EnableRuleRequest {
  Name: string;
  EventBusName?: string | null;
}

// refs: 1 - tags: named, input
export interface ListEventBusesRequest {
  NamePrefix?: string | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListEventSourcesRequest {
  NamePrefix?: string | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPartnerEventSourceAccountsRequest {
  EventSourceName: string;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPartnerEventSourcesRequest {
  NamePrefix: string;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRuleNamesByTargetRequest {
  TargetArn: string;
  EventBusName?: string | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRulesRequest {
  NamePrefix?: string | null;
  EventBusName?: string | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface ListTargetsByRuleRequest {
  Rule: string;
  EventBusName?: string | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface PutEventsRequest {
  Entries: PutEventsRequestEntry[];
}

// refs: 1 - tags: named, input
export interface PutPartnerEventsRequest {
  Entries: PutPartnerEventsRequestEntry[];
}

// refs: 1 - tags: named, input
export interface PutPermissionRequest {
  EventBusName?: string | null;
  Action: string;
  Principal: string;
  StatementId: string;
  Condition?: Condition | null;
}

// refs: 1 - tags: named, input
export interface PutRuleRequest {
  Name: string;
  ScheduleExpression?: string | null;
  EventPattern?: string | null;
  State?: RuleState | null;
  Description?: string | null;
  RoleArn?: string | null;
  Tags?: Tag[] | null;
  EventBusName?: string | null;
}

// refs: 1 - tags: named, input
export interface PutTargetsRequest {
  Rule: string;
  EventBusName?: string | null;
  Targets: Target[];
}

// refs: 1 - tags: named, input
export interface RemovePermissionRequest {
  StatementId: string;
  EventBusName?: string | null;
}

// refs: 1 - tags: named, input
export interface RemoveTargetsRequest {
  Rule: string;
  EventBusName?: string | null;
  Ids: string[];
  Force?: boolean | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface TestEventPatternRequest {
  EventPattern: string;
  Event: string;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, output
export interface CreateEventBusResponse {
  EventBusArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreatePartnerEventSourceResponse {
  EventSourceArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventBusResponse {
  Name?: string | null;
  Arn?: string | null;
  Policy?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventSourceResponse {
  Arn?: string | null;
  CreatedBy?: string | null;
  CreationTime?: Date | number | null;
  ExpirationTime?: Date | number | null;
  Name?: string | null;
  State?: EventSourceState | null;
}

// refs: 1 - tags: named, output
export interface DescribePartnerEventSourceResponse {
  Arn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRuleResponse {
  Name?: string | null;
  Arn?: string | null;
  EventPattern?: string | null;
  ScheduleExpression?: string | null;
  State?: RuleState | null;
  Description?: string | null;
  RoleArn?: string | null;
  ManagedBy?: string | null;
  EventBusName?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEventBusesResponse {
  EventBuses?: EventBus[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEventSourcesResponse {
  EventSources?: EventSource[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPartnerEventSourceAccountsResponse {
  PartnerEventSourceAccounts?: PartnerEventSourceAccount[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPartnerEventSourcesResponse {
  PartnerEventSources?: PartnerEventSource[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRuleNamesByTargetResponse {
  RuleNames?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRulesResponse {
  Rules?: Rule[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListTargetsByRuleResponse {
  Targets?: Target[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutEventsResponse {
  FailedEntryCount?: number | null;
  Entries?: PutEventsResultEntry[] | null;
}

// refs: 1 - tags: named, output
export interface PutPartnerEventsResponse {
  FailedEntryCount?: number | null;
  Entries?: PutPartnerEventsResultEntry[] | null;
}

// refs: 1 - tags: named, output
export interface PutRuleResponse {
  RuleArn?: string | null;
}

// refs: 1 - tags: named, output
export interface PutTargetsResponse {
  FailedEntryCount?: number | null;
  FailedEntries?: PutTargetsResultEntry[] | null;
}

// refs: 1 - tags: named, output
export interface RemoveTargetsResponse {
  FailedEntryCount?: number | null;
  FailedEntries?: RemoveTargetsResultEntry[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface TestEventPatternResponse {
  Result?: boolean | null;
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface PutEventsRequestEntry {
  Time?: Date | number | null;
  Source?: string | null;
  Resources?: string[] | null;
  DetailType?: string | null;
  Detail?: string | null;
  EventBusName?: string | null;
}
function fromPutEventsRequestEntry(input?: PutEventsRequestEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Time: jsonP.serializeDate_unixTimestamp(input["Time"]),
    Source: input["Source"],
    Resources: input["Resources"],
    DetailType: input["DetailType"],
    Detail: input["Detail"],
    EventBusName: input["EventBusName"],
  }
}

// refs: 1 - tags: input, named, interface
export interface PutPartnerEventsRequestEntry {
  Time?: Date | number | null;
  Source?: string | null;
  Resources?: string[] | null;
  DetailType?: string | null;
  Detail?: string | null;
}
function fromPutPartnerEventsRequestEntry(input?: PutPartnerEventsRequestEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Time: jsonP.serializeDate_unixTimestamp(input["Time"]),
    Source: input["Source"],
    Resources: input["Resources"],
    DetailType: input["DetailType"],
    Detail: input["Detail"],
  }
}

// refs: 1 - tags: input, named, interface
export interface Condition {
  Type: string;
  Key: string;
  Value: string;
}
function fromCondition(input?: Condition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Key: input["Key"],
    Value: input["Value"],
  }
}

// refs: 3 - tags: input, named, enum, output
export type RuleState =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface Target {
  Id: string;
  Arn: string;
  RoleArn?: string | null;
  Input?: string | null;
  InputPath?: string | null;
  InputTransformer?: InputTransformer | null;
  KinesisParameters?: KinesisParameters | null;
  RunCommandParameters?: RunCommandParameters | null;
  EcsParameters?: EcsParameters | null;
  BatchParameters?: BatchParameters | null;
  SqsParameters?: SqsParameters | null;
  HttpParameters?: HttpParameters | null;
  RedshiftDataParameters?: RedshiftDataParameters | null;
  DeadLetterConfig?: DeadLetterConfig | null;
  RetryPolicy?: RetryPolicy | null;
}
function fromTarget(input?: Target | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Id: input["Id"],
    Arn: input["Arn"],
    RoleArn: input["RoleArn"],
    Input: input["Input"],
    InputPath: input["InputPath"],
    InputTransformer: fromInputTransformer(input["InputTransformer"]),
    KinesisParameters: fromKinesisParameters(input["KinesisParameters"]),
    RunCommandParameters: fromRunCommandParameters(input["RunCommandParameters"]),
    EcsParameters: fromEcsParameters(input["EcsParameters"]),
    BatchParameters: fromBatchParameters(input["BatchParameters"]),
    SqsParameters: fromSqsParameters(input["SqsParameters"]),
    HttpParameters: fromHttpParameters(input["HttpParameters"]),
    RedshiftDataParameters: fromRedshiftDataParameters(input["RedshiftDataParameters"]),
    DeadLetterConfig: fromDeadLetterConfig(input["DeadLetterConfig"]),
    RetryPolicy: fromRetryPolicy(input["RetryPolicy"]),
  }
}
function toTarget(root: jsonP.JSONValue): Target {
  return jsonP.readObj({
    required: {
      "Id": "s",
      "Arn": "s",
    },
    optional: {
      "RoleArn": "s",
      "Input": "s",
      "InputPath": "s",
      "InputTransformer": toInputTransformer,
      "KinesisParameters": toKinesisParameters,
      "RunCommandParameters": toRunCommandParameters,
      "EcsParameters": toEcsParameters,
      "BatchParameters": toBatchParameters,
      "SqsParameters": toSqsParameters,
      "HttpParameters": toHttpParameters,
      "RedshiftDataParameters": toRedshiftDataParameters,
      "DeadLetterConfig": toDeadLetterConfig,
      "RetryPolicy": toRetryPolicy,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface InputTransformer {
  InputPathsMap?: { [key: string]: string | null | undefined } | null;
  InputTemplate: string;
}
function fromInputTransformer(input?: InputTransformer | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputPathsMap: input["InputPathsMap"],
    InputTemplate: input["InputTemplate"],
  }
}
function toInputTransformer(root: jsonP.JSONValue): InputTransformer {
  return jsonP.readObj({
    required: {
      "InputTemplate": "s",
    },
    optional: {
      "InputPathsMap": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface KinesisParameters {
  PartitionKeyPath: string;
}
function fromKinesisParameters(input?: KinesisParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PartitionKeyPath: input["PartitionKeyPath"],
  }
}
function toKinesisParameters(root: jsonP.JSONValue): KinesisParameters {
  return jsonP.readObj({
    required: {
      "PartitionKeyPath": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface RunCommandParameters {
  RunCommandTargets: RunCommandTarget[];
}
function fromRunCommandParameters(input?: RunCommandParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RunCommandTargets: input["RunCommandTargets"]?.map(x => fromRunCommandTarget(x)),
  }
}
function toRunCommandParameters(root: jsonP.JSONValue): RunCommandParameters {
  return jsonP.readObj({
    required: {
      "RunCommandTargets": [toRunCommandTarget],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface RunCommandTarget {
  Key: string;
  Values: string[];
}
function fromRunCommandTarget(input?: RunCommandTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Values: input["Values"],
  }
}
function toRunCommandTarget(root: jsonP.JSONValue): RunCommandTarget {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Values": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface EcsParameters {
  TaskDefinitionArn: string;
  TaskCount?: number | null;
  LaunchType?: LaunchType | null;
  NetworkConfiguration?: NetworkConfiguration | null;
  PlatformVersion?: string | null;
  Group?: string | null;
}
function fromEcsParameters(input?: EcsParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TaskDefinitionArn: input["TaskDefinitionArn"],
    TaskCount: input["TaskCount"],
    LaunchType: input["LaunchType"],
    NetworkConfiguration: fromNetworkConfiguration(input["NetworkConfiguration"]),
    PlatformVersion: input["PlatformVersion"],
    Group: input["Group"],
  }
}
function toEcsParameters(root: jsonP.JSONValue): EcsParameters {
  return jsonP.readObj({
    required: {
      "TaskDefinitionArn": "s",
    },
    optional: {
      "TaskCount": "n",
      "LaunchType": (x: jsonP.JSONValue) => cmnP.readEnum<LaunchType>(x),
      "NetworkConfiguration": toNetworkConfiguration,
      "PlatformVersion": "s",
      "Group": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type LaunchType =
| "EC2"
| "FARGATE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface NetworkConfiguration {
  awsvpcConfiguration?: AwsVpcConfiguration | null;
}
function fromNetworkConfiguration(input?: NetworkConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    awsvpcConfiguration: fromAwsVpcConfiguration(input["awsvpcConfiguration"]),
  }
}
function toNetworkConfiguration(root: jsonP.JSONValue): NetworkConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsvpcConfiguration": toAwsVpcConfiguration,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AwsVpcConfiguration {
  Subnets: string[];
  SecurityGroups?: string[] | null;
  AssignPublicIp?: AssignPublicIp | null;
}
function fromAwsVpcConfiguration(input?: AwsVpcConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Subnets: input["Subnets"],
    SecurityGroups: input["SecurityGroups"],
    AssignPublicIp: input["AssignPublicIp"],
  }
}
function toAwsVpcConfiguration(root: jsonP.JSONValue): AwsVpcConfiguration {
  return jsonP.readObj({
    required: {
      "Subnets": ["s"],
    },
    optional: {
      "SecurityGroups": ["s"],
      "AssignPublicIp": (x: jsonP.JSONValue) => cmnP.readEnum<AssignPublicIp>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type AssignPublicIp =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface BatchParameters {
  JobDefinition: string;
  JobName: string;
  ArrayProperties?: BatchArrayProperties | null;
  RetryStrategy?: BatchRetryStrategy | null;
}
function fromBatchParameters(input?: BatchParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobDefinition: input["JobDefinition"],
    JobName: input["JobName"],
    ArrayProperties: fromBatchArrayProperties(input["ArrayProperties"]),
    RetryStrategy: fromBatchRetryStrategy(input["RetryStrategy"]),
  }
}
function toBatchParameters(root: jsonP.JSONValue): BatchParameters {
  return jsonP.readObj({
    required: {
      "JobDefinition": "s",
      "JobName": "s",
    },
    optional: {
      "ArrayProperties": toBatchArrayProperties,
      "RetryStrategy": toBatchRetryStrategy,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface BatchArrayProperties {
  Size?: number | null;
}
function fromBatchArrayProperties(input?: BatchArrayProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Size: input["Size"],
  }
}
function toBatchArrayProperties(root: jsonP.JSONValue): BatchArrayProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "Size": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface BatchRetryStrategy {
  Attempts?: number | null;
}
function fromBatchRetryStrategy(input?: BatchRetryStrategy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Attempts: input["Attempts"],
  }
}
function toBatchRetryStrategy(root: jsonP.JSONValue): BatchRetryStrategy {
  return jsonP.readObj({
    required: {},
    optional: {
      "Attempts": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SqsParameters {
  MessageGroupId?: string | null;
}
function fromSqsParameters(input?: SqsParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MessageGroupId: input["MessageGroupId"],
  }
}
function toSqsParameters(root: jsonP.JSONValue): SqsParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "MessageGroupId": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface HttpParameters {
  PathParameterValues?: string[] | null;
  HeaderParameters?: { [key: string]: string | null | undefined } | null;
  QueryStringParameters?: { [key: string]: string | null | undefined } | null;
}
function fromHttpParameters(input?: HttpParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PathParameterValues: input["PathParameterValues"],
    HeaderParameters: input["HeaderParameters"],
    QueryStringParameters: input["QueryStringParameters"],
  }
}
function toHttpParameters(root: jsonP.JSONValue): HttpParameters {
  return jsonP.readObj({
    required: {},
    optional: {
      "PathParameterValues": ["s"],
      "HeaderParameters": x => jsonP.readMap(String, String, x),
      "QueryStringParameters": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface RedshiftDataParameters {
  SecretManagerArn?: string | null;
  Database: string;
  DbUser?: string | null;
  Sql: string;
  StatementName?: string | null;
  WithEvent?: boolean | null;
}
function fromRedshiftDataParameters(input?: RedshiftDataParameters | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SecretManagerArn: input["SecretManagerArn"],
    Database: input["Database"],
    DbUser: input["DbUser"],
    Sql: input["Sql"],
    StatementName: input["StatementName"],
    WithEvent: input["WithEvent"],
  }
}
function toRedshiftDataParameters(root: jsonP.JSONValue): RedshiftDataParameters {
  return jsonP.readObj({
    required: {
      "Database": "s",
      "Sql": "s",
    },
    optional: {
      "SecretManagerArn": "s",
      "DbUser": "s",
      "StatementName": "s",
      "WithEvent": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface DeadLetterConfig {
  Arn?: string | null;
}
function fromDeadLetterConfig(input?: DeadLetterConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Arn: input["Arn"],
  }
}
function toDeadLetterConfig(root: jsonP.JSONValue): DeadLetterConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface RetryPolicy {
  MaximumRetryAttempts?: number | null;
  MaximumEventAgeInSeconds?: number | null;
}
function fromRetryPolicy(input?: RetryPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MaximumRetryAttempts: input["MaximumRetryAttempts"],
    MaximumEventAgeInSeconds: input["MaximumEventAgeInSeconds"],
  }
}
function toRetryPolicy(root: jsonP.JSONValue): RetryPolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "MaximumRetryAttempts": "n",
      "MaximumEventAgeInSeconds": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type EventSourceState =
| "PENDING"
| "ACTIVE"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface EventBus {
  Name?: string | null;
  Arn?: string | null;
  Policy?: string | null;
}
function toEventBus(root: jsonP.JSONValue): EventBus {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
      "Policy": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventSource {
  Arn?: string | null;
  CreatedBy?: string | null;
  CreationTime?: Date | number | null;
  ExpirationTime?: Date | number | null;
  Name?: string | null;
  State?: EventSourceState | null;
}
function toEventSource(root: jsonP.JSONValue): EventSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreatedBy": "s",
      "CreationTime": "d",
      "ExpirationTime": "d",
      "Name": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<EventSourceState>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PartnerEventSourceAccount {
  Account?: string | null;
  CreationTime?: Date | number | null;
  ExpirationTime?: Date | number | null;
  State?: EventSourceState | null;
}
function toPartnerEventSourceAccount(root: jsonP.JSONValue): PartnerEventSourceAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "Account": "s",
      "CreationTime": "d",
      "ExpirationTime": "d",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<EventSourceState>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PartnerEventSource {
  Arn?: string | null;
  Name?: string | null;
}
function toPartnerEventSource(root: jsonP.JSONValue): PartnerEventSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Rule {
  Name?: string | null;
  Arn?: string | null;
  EventPattern?: string | null;
  State?: RuleState | null;
  Description?: string | null;
  ScheduleExpression?: string | null;
  RoleArn?: string | null;
  ManagedBy?: string | null;
  EventBusName?: string | null;
}
function toRule(root: jsonP.JSONValue): Rule {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
      "EventPattern": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<RuleState>(x),
      "Description": "s",
      "ScheduleExpression": "s",
      "RoleArn": "s",
      "ManagedBy": "s",
      "EventBusName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PutEventsResultEntry {
  EventId?: string | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toPutEventsResultEntry(root: jsonP.JSONValue): PutEventsResultEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PutPartnerEventsResultEntry {
  EventId?: string | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toPutPartnerEventsResultEntry(root: jsonP.JSONValue): PutPartnerEventsResultEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "EventId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PutTargetsResultEntry {
  TargetId?: string | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toPutTargetsResultEntry(root: jsonP.JSONValue): PutTargetsResultEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "TargetId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RemoveTargetsResultEntry {
  TargetId?: string | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toRemoveTargetsResultEntry(root: jsonP.JSONValue): RemoveTargetsResultEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "TargetId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}
