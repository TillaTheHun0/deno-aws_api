// Autogenerated API client for: AWS IoT Things Graph

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class IoTThingsGraph {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoTThingsGraph.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-09-06",
    "endpointPrefix": "iotthingsgraph",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS IoT Things Graph",
    "serviceId": "IoTThingsGraph",
    "signatureVersion": "v4",
    "signingName": "iotthingsgraph",
    "targetPrefix": "IotThingsGraphFrontEndService",
    "uid": "iotthingsgraph-2018-09-06"
  };

  async associateEntityToThing(
    {abortSignal, ...params}: RequestConfig & s.AssociateEntityToThingRequest,
  ): Promise<s.AssociateEntityToThingResponse> {
    const body: jsonP.JSONObject = {
      thingName: params["thingName"],
      entityId: params["entityId"],
      namespaceVersion: params["namespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateEntityToThing",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createFlowTemplate(
    {abortSignal, ...params}: RequestConfig & s.CreateFlowTemplateRequest,
  ): Promise<s.CreateFlowTemplateResponse> {
    const body: jsonP.JSONObject = {
      definition: fromDefinitionDocument(params["definition"]),
      compatibleNamespaceVersion: params["compatibleNamespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFlowTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summary": toFlowTemplateSummary,
      },
    }, await resp.json());
  }

  async createSystemInstance(
    {abortSignal, ...params}: RequestConfig & s.CreateSystemInstanceRequest,
  ): Promise<s.CreateSystemInstanceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"]?.map(x => fromTag(x)),
      definition: fromDefinitionDocument(params["definition"]),
      target: params["target"],
      greengrassGroupName: params["greengrassGroupName"],
      s3BucketName: params["s3BucketName"],
      metricsConfiguration: fromMetricsConfiguration(params["metricsConfiguration"]),
      flowActionsRoleArn: params["flowActionsRoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSystemInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summary": toSystemInstanceSummary,
      },
    }, await resp.json());
  }

  async createSystemTemplate(
    {abortSignal, ...params}: RequestConfig & s.CreateSystemTemplateRequest,
  ): Promise<s.CreateSystemTemplateResponse> {
    const body: jsonP.JSONObject = {
      definition: fromDefinitionDocument(params["definition"]),
      compatibleNamespaceVersion: params["compatibleNamespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSystemTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summary": toSystemTemplateSummary,
      },
    }, await resp.json());
  }

  async deleteFlowTemplate(
    {abortSignal, ...params}: RequestConfig & s.DeleteFlowTemplateRequest,
  ): Promise<s.DeleteFlowTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFlowTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteNamespace(
    {abortSignal, ...params}: RequestConfig & s.DeleteNamespaceRequest = {},
  ): Promise<s.DeleteNamespaceResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNamespace",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
      },
    }, await resp.json());
  }

  async deleteSystemInstance(
    {abortSignal, ...params}: RequestConfig & s.DeleteSystemInstanceRequest = {},
  ): Promise<s.DeleteSystemInstanceResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSystemInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSystemTemplate(
    {abortSignal, ...params}: RequestConfig & s.DeleteSystemTemplateRequest,
  ): Promise<s.DeleteSystemTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSystemTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deploySystemInstance(
    {abortSignal, ...params}: RequestConfig & s.DeploySystemInstanceRequest = {},
  ): Promise<s.DeploySystemInstanceResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeploySystemInstance",
    });
    return jsonP.readObj({
      required: {
        "summary": toSystemInstanceSummary,
      },
      optional: {
        "greengrassDeploymentId": "s",
      },
    }, await resp.json());
  }

  async deprecateFlowTemplate(
    {abortSignal, ...params}: RequestConfig & s.DeprecateFlowTemplateRequest,
  ): Promise<s.DeprecateFlowTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateFlowTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deprecateSystemTemplate(
    {abortSignal, ...params}: RequestConfig & s.DeprecateSystemTemplateRequest,
  ): Promise<s.DeprecateSystemTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateSystemTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeNamespace(
    {abortSignal, ...params}: RequestConfig & s.DescribeNamespaceRequest = {},
  ): Promise<s.DescribeNamespaceResponse> {
    const body: jsonP.JSONObject = {
      namespaceName: params["namespaceName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeNamespace",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
        "trackingNamespaceName": "s",
        "trackingNamespaceVersion": "n",
        "namespaceVersion": "n",
      },
    }, await resp.json());
  }

  async dissociateEntityFromThing(
    {abortSignal, ...params}: RequestConfig & s.DissociateEntityFromThingRequest,
  ): Promise<s.DissociateEntityFromThingResponse> {
    const body: jsonP.JSONObject = {
      thingName: params["thingName"],
      entityType: params["entityType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DissociateEntityFromThing",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getEntities(
    {abortSignal, ...params}: RequestConfig & s.GetEntitiesRequest,
  ): Promise<s.GetEntitiesResponse> {
    const body: jsonP.JSONObject = {
      ids: params["ids"],
      namespaceVersion: params["namespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEntities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "descriptions": [toEntityDescription],
      },
    }, await resp.json());
  }

  async getFlowTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetFlowTemplateRequest,
  ): Promise<s.GetFlowTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
      revisionNumber: params["revisionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFlowTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "description": toFlowTemplateDescription,
      },
    }, await resp.json());
  }

  async getFlowTemplateRevisions(
    {abortSignal, ...params}: RequestConfig & s.GetFlowTemplateRevisionsRequest,
  ): Promise<s.GetFlowTemplateRevisionsResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFlowTemplateRevisions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summaries": [toFlowTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getNamespaceDeletionStatus(
    {abortSignal, ...params}: RequestConfig & s.GetNamespaceDeletionStatusRequest = {},
  ): Promise<s.GetNamespaceDeletionStatusResponse> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetNamespaceDeletionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.NamespaceDeletionStatus>(x),
        "errorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.NamespaceDeletionStatusErrorCodes>(x),
        "errorMessage": "s",
      },
    }, await resp.json());
  }

  async getSystemInstance(
    {abortSignal, ...params}: RequestConfig & s.GetSystemInstanceRequest,
  ): Promise<s.GetSystemInstanceResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSystemInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "description": toSystemInstanceDescription,
      },
    }, await resp.json());
  }

  async getSystemTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetSystemTemplateRequest,
  ): Promise<s.GetSystemTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
      revisionNumber: params["revisionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSystemTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "description": toSystemTemplateDescription,
      },
    }, await resp.json());
  }

  async getSystemTemplateRevisions(
    {abortSignal, ...params}: RequestConfig & s.GetSystemTemplateRevisionsRequest,
  ): Promise<s.GetSystemTemplateRevisionsResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSystemTemplateRevisions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summaries": [toSystemTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getUploadStatus(
    {abortSignal, ...params}: RequestConfig & s.GetUploadStatusRequest,
  ): Promise<s.GetUploadStatusResponse> {
    const body: jsonP.JSONObject = {
      uploadId: params["uploadId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUploadStatus",
    });
    return jsonP.readObj({
      required: {
        "uploadId": "s",
        "uploadStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.UploadStatus>(x),
        "createdDate": "d",
      },
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
        "namespaceVersion": "n",
        "failureReason": ["s"],
      },
    }, await resp.json());
  }

  async listFlowExecutionMessages(
    {abortSignal, ...params}: RequestConfig & s.ListFlowExecutionMessagesRequest,
  ): Promise<s.ListFlowExecutionMessagesResponse> {
    const body: jsonP.JSONObject = {
      flowExecutionId: params["flowExecutionId"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFlowExecutionMessages",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "messages": [toFlowExecutionMessage],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      maxResults: params["maxResults"],
      resourceArn: params["resourceArn"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": [toTag],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchEntities(
    {abortSignal, ...params}: RequestConfig & s.SearchEntitiesRequest,
  ): Promise<s.SearchEntitiesResponse> {
    const body: jsonP.JSONObject = {
      entityTypes: params["entityTypes"],
      filters: params["filters"]?.map(x => fromEntityFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      namespaceVersion: params["namespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchEntities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "descriptions": [toEntityDescription],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchFlowExecutions(
    {abortSignal, ...params}: RequestConfig & s.SearchFlowExecutionsRequest,
  ): Promise<s.SearchFlowExecutionsResponse> {
    const body: jsonP.JSONObject = {
      systemInstanceId: params["systemInstanceId"],
      flowExecutionId: params["flowExecutionId"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchFlowExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summaries": [toFlowExecutionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchFlowTemplates(
    {abortSignal, ...params}: RequestConfig & s.SearchFlowTemplatesRequest = {},
  ): Promise<s.SearchFlowTemplatesResponse> {
    const body: jsonP.JSONObject = {
      filters: params["filters"]?.map(x => fromFlowTemplateFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchFlowTemplates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summaries": [toFlowTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchSystemInstances(
    {abortSignal, ...params}: RequestConfig & s.SearchSystemInstancesRequest = {},
  ): Promise<s.SearchSystemInstancesResponse> {
    const body: jsonP.JSONObject = {
      filters: params["filters"]?.map(x => fromSystemInstanceFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchSystemInstances",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summaries": [toSystemInstanceSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchSystemTemplates(
    {abortSignal, ...params}: RequestConfig & s.SearchSystemTemplatesRequest = {},
  ): Promise<s.SearchSystemTemplatesResponse> {
    const body: jsonP.JSONObject = {
      filters: params["filters"]?.map(x => fromSystemTemplateFilter(x)),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchSystemTemplates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summaries": [toSystemTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchThings(
    {abortSignal, ...params}: RequestConfig & s.SearchThingsRequest,
  ): Promise<s.SearchThingsResponse> {
    const body: jsonP.JSONObject = {
      entityId: params["entityId"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      namespaceVersion: params["namespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchThings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "things": [toThing],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async undeploySystemInstance(
    {abortSignal, ...params}: RequestConfig & s.UndeploySystemInstanceRequest = {},
  ): Promise<s.UndeploySystemInstanceResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UndeploySystemInstance",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summary": toSystemInstanceSummary,
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      resourceArn: params["resourceArn"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFlowTemplate(
    {abortSignal, ...params}: RequestConfig & s.UpdateFlowTemplateRequest,
  ): Promise<s.UpdateFlowTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
      definition: fromDefinitionDocument(params["definition"]),
      compatibleNamespaceVersion: params["compatibleNamespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlowTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summary": toFlowTemplateSummary,
      },
    }, await resp.json());
  }

  async updateSystemTemplate(
    {abortSignal, ...params}: RequestConfig & s.UpdateSystemTemplateRequest,
  ): Promise<s.UpdateSystemTemplateResponse> {
    const body: jsonP.JSONObject = {
      id: params["id"],
      definition: fromDefinitionDocument(params["definition"]),
      compatibleNamespaceVersion: params["compatibleNamespaceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSystemTemplate",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "summary": toSystemTemplateSummary,
      },
    }, await resp.json());
  }

  async uploadEntityDefinitions(
    {abortSignal, ...params}: RequestConfig & s.UploadEntityDefinitionsRequest = {},
  ): Promise<s.UploadEntityDefinitionsResponse> {
    const body: jsonP.JSONObject = {
      document: fromDefinitionDocument(params["document"]),
      syncWithPublicNamespace: params["syncWithPublicNamespace"],
      deprecateExistingEntities: params["deprecateExistingEntities"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UploadEntityDefinitions",
    });
    return jsonP.readObj({
      required: {
        "uploadId": "s",
      },
      optional: {},
    }, await resp.json());
  }

}

function fromDefinitionDocument(input?: s.DefinitionDocument | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    language: input["language"],
    text: input["text"],
  }
}
function toDefinitionDocument(root: jsonP.JSONValue): s.DefinitionDocument {
  return jsonP.readObj({
    required: {
      "language": (x: jsonP.JSONValue) => cmnP.readEnum<s.DefinitionLanguage>(x),
      "text": "s",
    },
    optional: {},
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "key": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

function fromMetricsConfiguration(input?: s.MetricsConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cloudMetricEnabled: input["cloudMetricEnabled"],
    metricRuleRoleArn: input["metricRuleRoleArn"],
  }
}
function toMetricsConfiguration(root: jsonP.JSONValue): s.MetricsConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "cloudMetricEnabled": "b",
      "metricRuleRoleArn": "s",
    },
  }, root);
}

function fromEntityFilter(input?: s.EntityFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    value: input["value"],
  }
}

function fromFlowTemplateFilter(input?: s.FlowTemplateFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    value: input["value"],
  }
}

function fromSystemInstanceFilter(input?: s.SystemInstanceFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    value: input["value"],
  }
}

function fromSystemTemplateFilter(input?: s.SystemTemplateFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    value: input["value"],
  }
}

function toFlowTemplateSummary(root: jsonP.JSONValue): s.FlowTemplateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "revisionNumber": "n",
      "createdAt": "d",
    },
  }, root);
}

function toSystemInstanceSummary(root: jsonP.JSONValue): s.SystemInstanceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.SystemInstanceDeploymentStatus>(x),
      "target": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeploymentTarget>(x),
      "greengrassGroupName": "s",
      "createdAt": "d",
      "updatedAt": "d",
      "greengrassGroupId": "s",
      "greengrassGroupVersionId": "s",
    },
  }, root);
}

function toSystemTemplateSummary(root: jsonP.JSONValue): s.SystemTemplateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "revisionNumber": "n",
      "createdAt": "d",
    },
  }, root);
}

function toEntityDescription(root: jsonP.JSONValue): s.EntityDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntityType>(x),
      "createdAt": "d",
      "definition": toDefinitionDocument,
    },
  }, root);
}

function toFlowTemplateDescription(root: jsonP.JSONValue): s.FlowTemplateDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "summary": toFlowTemplateSummary,
      "definition": toDefinitionDocument,
      "validatedNamespaceVersion": "n",
    },
  }, root);
}

function toSystemInstanceDescription(root: jsonP.JSONValue): s.SystemInstanceDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "summary": toSystemInstanceSummary,
      "definition": toDefinitionDocument,
      "s3BucketName": "s",
      "metricsConfiguration": toMetricsConfiguration,
      "validatedNamespaceVersion": "n",
      "validatedDependencyRevisions": [toDependencyRevision],
      "flowActionsRoleArn": "s",
    },
  }, root);
}

function toDependencyRevision(root: jsonP.JSONValue): s.DependencyRevision {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "revisionNumber": "n",
    },
  }, root);
}

function toSystemTemplateDescription(root: jsonP.JSONValue): s.SystemTemplateDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "summary": toSystemTemplateSummary,
      "definition": toDefinitionDocument,
      "validatedNamespaceVersion": "n",
    },
  }, root);
}

function toFlowExecutionMessage(root: jsonP.JSONValue): s.FlowExecutionMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "messageId": "s",
      "eventType": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowExecutionEventType>(x),
      "timestamp": "d",
      "payload": "s",
    },
  }, root);
}

function toFlowExecutionSummary(root: jsonP.JSONValue): s.FlowExecutionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "flowExecutionId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.FlowExecutionStatus>(x),
      "systemInstanceId": "s",
      "flowTemplateId": "s",
      "createdAt": "d",
      "updatedAt": "d",
    },
  }, root);
}

function toThing(root: jsonP.JSONValue): s.Thing {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingArn": "s",
      "thingName": "s",
    },
  }, root);
}
