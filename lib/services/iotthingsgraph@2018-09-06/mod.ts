// Autogenerated API client for: AWS IoT Things Graph

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class IoTThingsGraph {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoTThingsGraph.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-09-06",
    "endpointPrefix": "iotthingsgraph",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS IoT Things Graph",
    "serviceId": "IoTThingsGraph",
    "signatureVersion": "v4",
    "signingName": "iotthingsgraph",
    "targetPrefix": "IotThingsGraphFrontEndService",
    "uid": "iotthingsgraph-2018-09-06"
  };

  async associateEntityToThing(
    {abortSignal, ...params}: RequestConfig & AssociateEntityToThingRequest,
  ): Promise<AssociateEntityToThingResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateEntityToThing",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createFlowTemplate(
    {abortSignal, ...params}: RequestConfig & CreateFlowTemplateRequest,
  ): Promise<CreateFlowTemplateResponse> {
    const body: JSONObject = {...params,
    definition: fromDefinitionDocument(params["definition"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFlowTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summary": toFlowTemplateSummary,
      },
    }, await resp.json());
  }

  async createSystemInstance(
    {abortSignal, ...params}: RequestConfig & CreateSystemInstanceRequest,
  ): Promise<CreateSystemInstanceResponse> {
    const body: JSONObject = {...params,
    tags: params["tags"]?.map(x => fromTag(x)),
    definition: fromDefinitionDocument(params["definition"]),
    metricsConfiguration: fromMetricsConfiguration(params["metricsConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSystemInstance",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summary": toSystemInstanceSummary,
      },
    }, await resp.json());
  }

  async createSystemTemplate(
    {abortSignal, ...params}: RequestConfig & CreateSystemTemplateRequest,
  ): Promise<CreateSystemTemplateResponse> {
    const body: JSONObject = {...params,
    definition: fromDefinitionDocument(params["definition"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSystemTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summary": toSystemTemplateSummary,
      },
    }, await resp.json());
  }

  async deleteFlowTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteFlowTemplateRequest,
  ): Promise<DeleteFlowTemplateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFlowTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteNamespace(
    {abortSignal, ...params}: RequestConfig & DeleteNamespaceRequest = {},
  ): Promise<DeleteNamespaceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteNamespace",
    });
    return prt.readObj({
      required: {},
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
      },
    }, await resp.json());
  }

  async deleteSystemInstance(
    {abortSignal, ...params}: RequestConfig & DeleteSystemInstanceRequest = {},
  ): Promise<DeleteSystemInstanceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSystemInstance",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSystemTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteSystemTemplateRequest,
  ): Promise<DeleteSystemTemplateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSystemTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deploySystemInstance(
    {abortSignal, ...params}: RequestConfig & DeploySystemInstanceRequest = {},
  ): Promise<DeploySystemInstanceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeploySystemInstance",
    });
    return prt.readObj({
      required: {
        "summary": toSystemInstanceSummary,
      },
      optional: {
        "greengrassDeploymentId": "s",
      },
    }, await resp.json());
  }

  async deprecateFlowTemplate(
    {abortSignal, ...params}: RequestConfig & DeprecateFlowTemplateRequest,
  ): Promise<DeprecateFlowTemplateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateFlowTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deprecateSystemTemplate(
    {abortSignal, ...params}: RequestConfig & DeprecateSystemTemplateRequest,
  ): Promise<DeprecateSystemTemplateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateSystemTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeNamespace(
    {abortSignal, ...params}: RequestConfig & DescribeNamespaceRequest = {},
  ): Promise<DescribeNamespaceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeNamespace",
    });
    return prt.readObj({
      required: {},
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
        "trackingNamespaceName": "s",
        "trackingNamespaceVersion": "n",
        "namespaceVersion": "n",
      },
    }, await resp.json());
  }

  async dissociateEntityFromThing(
    {abortSignal, ...params}: RequestConfig & DissociateEntityFromThingRequest,
  ): Promise<DissociateEntityFromThingResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DissociateEntityFromThing",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getEntities(
    {abortSignal, ...params}: RequestConfig & GetEntitiesRequest,
  ): Promise<GetEntitiesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEntities",
    });
    return prt.readObj({
      required: {},
      optional: {
        "descriptions": [toEntityDescription],
      },
    }, await resp.json());
  }

  async getFlowTemplate(
    {abortSignal, ...params}: RequestConfig & GetFlowTemplateRequest,
  ): Promise<GetFlowTemplateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFlowTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "description": toFlowTemplateDescription,
      },
    }, await resp.json());
  }

  async getFlowTemplateRevisions(
    {abortSignal, ...params}: RequestConfig & GetFlowTemplateRevisionsRequest,
  ): Promise<GetFlowTemplateRevisionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetFlowTemplateRevisions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summaries": [toFlowTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getNamespaceDeletionStatus(
    {abortSignal, ...params}: RequestConfig & GetNamespaceDeletionStatusRequest = {},
  ): Promise<GetNamespaceDeletionStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetNamespaceDeletionStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
        "status": toNamespaceDeletionStatus,
        "errorCode": toNamespaceDeletionStatusErrorCodes,
        "errorMessage": "s",
      },
    }, await resp.json());
  }

  async getSystemInstance(
    {abortSignal, ...params}: RequestConfig & GetSystemInstanceRequest,
  ): Promise<GetSystemInstanceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSystemInstance",
    });
    return prt.readObj({
      required: {},
      optional: {
        "description": toSystemInstanceDescription,
      },
    }, await resp.json());
  }

  async getSystemTemplate(
    {abortSignal, ...params}: RequestConfig & GetSystemTemplateRequest,
  ): Promise<GetSystemTemplateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSystemTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "description": toSystemTemplateDescription,
      },
    }, await resp.json());
  }

  async getSystemTemplateRevisions(
    {abortSignal, ...params}: RequestConfig & GetSystemTemplateRevisionsRequest,
  ): Promise<GetSystemTemplateRevisionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSystemTemplateRevisions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summaries": [toSystemTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getUploadStatus(
    {abortSignal, ...params}: RequestConfig & GetUploadStatusRequest,
  ): Promise<GetUploadStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetUploadStatus",
    });
    return prt.readObj({
      required: {
        "uploadId": "s",
        "uploadStatus": toUploadStatus,
        "createdDate": "d",
      },
      optional: {
        "namespaceArn": "s",
        "namespaceName": "s",
        "namespaceVersion": "n",
        "failureReason": ["s"],
      },
    }, await resp.json());
  }

  async listFlowExecutionMessages(
    {abortSignal, ...params}: RequestConfig & ListFlowExecutionMessagesRequest,
  ): Promise<ListFlowExecutionMessagesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFlowExecutionMessages",
    });
    return prt.readObj({
      required: {},
      optional: {
        "messages": [toFlowExecutionMessage],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "tags": [toTag],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchEntities(
    {abortSignal, ...params}: RequestConfig & SearchEntitiesRequest,
  ): Promise<SearchEntitiesResponse> {
    const body: JSONObject = {...params,
    filters: params["filters"]?.map(x => fromEntityFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchEntities",
    });
    return prt.readObj({
      required: {},
      optional: {
        "descriptions": [toEntityDescription],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchFlowExecutions(
    {abortSignal, ...params}: RequestConfig & SearchFlowExecutionsRequest,
  ): Promise<SearchFlowExecutionsResponse> {
    const body: JSONObject = {...params,
    startTime: prt.serializeDate_unixTimestamp(params["startTime"]),
    endTime: prt.serializeDate_unixTimestamp(params["endTime"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchFlowExecutions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summaries": [toFlowExecutionSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchFlowTemplates(
    {abortSignal, ...params}: RequestConfig & SearchFlowTemplatesRequest = {},
  ): Promise<SearchFlowTemplatesResponse> {
    const body: JSONObject = {...params,
    filters: params["filters"]?.map(x => fromFlowTemplateFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchFlowTemplates",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summaries": [toFlowTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchSystemInstances(
    {abortSignal, ...params}: RequestConfig & SearchSystemInstancesRequest = {},
  ): Promise<SearchSystemInstancesResponse> {
    const body: JSONObject = {...params,
    filters: params["filters"]?.map(x => fromSystemInstanceFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchSystemInstances",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summaries": [toSystemInstanceSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchSystemTemplates(
    {abortSignal, ...params}: RequestConfig & SearchSystemTemplatesRequest = {},
  ): Promise<SearchSystemTemplatesResponse> {
    const body: JSONObject = {...params,
    filters: params["filters"]?.map(x => fromSystemTemplateFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchSystemTemplates",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summaries": [toSystemTemplateSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async searchThings(
    {abortSignal, ...params}: RequestConfig & SearchThingsRequest,
  ): Promise<SearchThingsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchThings",
    });
    return prt.readObj({
      required: {},
      optional: {
        "things": [toThing],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    tags: params["tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async undeploySystemInstance(
    {abortSignal, ...params}: RequestConfig & UndeploySystemInstanceRequest = {},
  ): Promise<UndeploySystemInstanceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UndeploySystemInstance",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summary": toSystemInstanceSummary,
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateFlowTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateFlowTemplateRequest,
  ): Promise<UpdateFlowTemplateResponse> {
    const body: JSONObject = {...params,
    definition: fromDefinitionDocument(params["definition"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFlowTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summary": toFlowTemplateSummary,
      },
    }, await resp.json());
  }

  async updateSystemTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateSystemTemplateRequest,
  ): Promise<UpdateSystemTemplateResponse> {
    const body: JSONObject = {...params,
    definition: fromDefinitionDocument(params["definition"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSystemTemplate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "summary": toSystemTemplateSummary,
      },
    }, await resp.json());
  }

  async uploadEntityDefinitions(
    {abortSignal, ...params}: RequestConfig & UploadEntityDefinitionsRequest = {},
  ): Promise<UploadEntityDefinitionsResponse> {
    const body: JSONObject = {...params,
    document: fromDefinitionDocument(params["document"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UploadEntityDefinitions",
    });
    return prt.readObj({
      required: {
        "uploadId": "s",
      },
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateEntityToThingRequest {
  thingName: string;
  entityId: string;
  namespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateFlowTemplateRequest {
  definition: DefinitionDocument;
  compatibleNamespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface CreateSystemInstanceRequest {
  tags?: Tag[] | null;
  definition: DefinitionDocument;
  target: DeploymentTarget;
  greengrassGroupName?: string | null;
  s3BucketName?: string | null;
  metricsConfiguration?: MetricsConfiguration | null;
  flowActionsRoleArn?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateSystemTemplateRequest {
  definition: DefinitionDocument;
  compatibleNamespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteFlowTemplateRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface DeleteNamespaceRequest {
}

// refs: 1 - tags: named, input
export interface DeleteSystemInstanceRequest {
  id?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteSystemTemplateRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface DeploySystemInstanceRequest {
  id?: string | null;
}

// refs: 1 - tags: named, input
export interface DeprecateFlowTemplateRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface DeprecateSystemTemplateRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface DescribeNamespaceRequest {
  namespaceName?: string | null;
}

// refs: 1 - tags: named, input
export interface DissociateEntityFromThingRequest {
  thingName: string;
  entityType: EntityType;
}

// refs: 1 - tags: named, input
export interface GetEntitiesRequest {
  ids: string[];
  namespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface GetFlowTemplateRequest {
  id: string;
  revisionNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface GetFlowTemplateRevisionsRequest {
  id: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetNamespaceDeletionStatusRequest {
}

// refs: 1 - tags: named, input
export interface GetSystemInstanceRequest {
  id: string;
}

// refs: 1 - tags: named, input
export interface GetSystemTemplateRequest {
  id: string;
  revisionNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface GetSystemTemplateRevisionsRequest {
  id: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetUploadStatusRequest {
  uploadId: string;
}

// refs: 1 - tags: named, input
export interface ListFlowExecutionMessagesRequest {
  flowExecutionId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  maxResults?: number | null;
  resourceArn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface SearchEntitiesRequest {
  entityTypes: EntityType[];
  filters?: EntityFilter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
  namespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchFlowExecutionsRequest {
  systemInstanceId: string;
  flowExecutionId?: string | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchFlowTemplatesRequest {
  filters?: FlowTemplateFilter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchSystemInstancesRequest {
  filters?: SystemInstanceFilter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchSystemTemplatesRequest {
  filters?: SystemTemplateFilter[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SearchThingsRequest {
  entityId: string;
  nextToken?: string | null;
  maxResults?: number | null;
  namespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UndeploySystemInstanceRequest {
  id?: string | null;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateFlowTemplateRequest {
  id: string;
  definition: DefinitionDocument;
  compatibleNamespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateSystemTemplateRequest {
  id: string;
  definition: DefinitionDocument;
  compatibleNamespaceVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface UploadEntityDefinitionsRequest {
  document?: DefinitionDocument | null;
  syncWithPublicNamespace?: boolean | null;
  deprecateExistingEntities?: boolean | null;
}

// refs: 1 - tags: named, output
export interface AssociateEntityToThingResponse {
}

// refs: 1 - tags: named, output
export interface CreateFlowTemplateResponse {
  summary?: FlowTemplateSummary | null;
}

// refs: 1 - tags: named, output
export interface CreateSystemInstanceResponse {
  summary?: SystemInstanceSummary | null;
}

// refs: 1 - tags: named, output
export interface CreateSystemTemplateResponse {
  summary?: SystemTemplateSummary | null;
}

// refs: 1 - tags: named, output
export interface DeleteFlowTemplateResponse {
}

// refs: 1 - tags: named, output
export interface DeleteNamespaceResponse {
  namespaceArn?: string | null;
  namespaceName?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteSystemInstanceResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSystemTemplateResponse {
}

// refs: 1 - tags: named, output
export interface DeploySystemInstanceResponse {
  summary: SystemInstanceSummary;
  greengrassDeploymentId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeprecateFlowTemplateResponse {
}

// refs: 1 - tags: named, output
export interface DeprecateSystemTemplateResponse {
}

// refs: 1 - tags: named, output
export interface DescribeNamespaceResponse {
  namespaceArn?: string | null;
  namespaceName?: string | null;
  trackingNamespaceName?: string | null;
  trackingNamespaceVersion?: number | null;
  namespaceVersion?: number | null;
}

// refs: 1 - tags: named, output
export interface DissociateEntityFromThingResponse {
}

// refs: 1 - tags: named, output
export interface GetEntitiesResponse {
  descriptions?: EntityDescription[] | null;
}

// refs: 1 - tags: named, output
export interface GetFlowTemplateResponse {
  description?: FlowTemplateDescription | null;
}

// refs: 1 - tags: named, output
export interface GetFlowTemplateRevisionsResponse {
  summaries?: FlowTemplateSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetNamespaceDeletionStatusResponse {
  namespaceArn?: string | null;
  namespaceName?: string | null;
  status?: NamespaceDeletionStatus | null;
  errorCode?: NamespaceDeletionStatusErrorCodes | null;
  errorMessage?: string | null;
}

// refs: 1 - tags: named, output
export interface GetSystemInstanceResponse {
  description?: SystemInstanceDescription | null;
}

// refs: 1 - tags: named, output
export interface GetSystemTemplateResponse {
  description?: SystemTemplateDescription | null;
}

// refs: 1 - tags: named, output
export interface GetSystemTemplateRevisionsResponse {
  summaries?: SystemTemplateSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetUploadStatusResponse {
  uploadId: string;
  uploadStatus: UploadStatus;
  namespaceArn?: string | null;
  namespaceName?: string | null;
  namespaceVersion?: number | null;
  failureReason?: string[] | null;
  createdDate: Date | number;
}

// refs: 1 - tags: named, output
export interface ListFlowExecutionMessagesResponse {
  messages?: FlowExecutionMessage[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: Tag[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchEntitiesResponse {
  descriptions?: EntityDescription[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchFlowExecutionsResponse {
  summaries?: FlowExecutionSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchFlowTemplatesResponse {
  summaries?: FlowTemplateSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchSystemInstancesResponse {
  summaries?: SystemInstanceSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchSystemTemplatesResponse {
  summaries?: SystemTemplateSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchThingsResponse {
  things?: Thing[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UndeploySystemInstanceResponse {
  summary?: SystemInstanceSummary | null;
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateFlowTemplateResponse {
  summary?: FlowTemplateSummary | null;
}

// refs: 1 - tags: named, output
export interface UpdateSystemTemplateResponse {
  summary?: SystemTemplateSummary | null;
}

// refs: 1 - tags: named, output
export interface UploadEntityDefinitionsResponse {
  uploadId: string;
}

// refs: 11 - tags: input, named, interface, output
export interface DefinitionDocument {
  language: DefinitionLanguage;
  text: string;
}
function fromDefinitionDocument(input?: DefinitionDocument | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toDefinitionDocument(root: JSONValue): DefinitionDocument {
  return prt.readObj({
    required: {
      "language": toDefinitionLanguage,
      "text": "s",
    },
    optional: {},
  }, root);
}

// refs: 11 - tags: input, named, enum, output
export type DefinitionLanguage =
| "GRAPHQL"
;

function toDefinitionLanguage(root: JSONValue): DefinitionLanguage | null {
  return ( false
    || root == "GRAPHQL"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  key: string;
  value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "key": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type DeploymentTarget =
| "GREENGRASS"
| "CLOUD"
;

function toDeploymentTarget(root: JSONValue): DeploymentTarget | null {
  return ( false
    || root == "GREENGRASS"
    || root == "CLOUD"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface MetricsConfiguration {
  cloudMetricEnabled?: boolean | null;
  metricRuleRoleArn?: string | null;
}
function fromMetricsConfiguration(input?: MetricsConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toMetricsConfiguration(root: JSONValue): MetricsConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "cloudMetricEnabled": "b",
      "metricRuleRoleArn": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type EntityType =
| "DEVICE"
| "SERVICE"
| "DEVICE_MODEL"
| "CAPABILITY"
| "STATE"
| "ACTION"
| "EVENT"
| "PROPERTY"
| "MAPPING"
| "ENUM"
;

function toEntityType(root: JSONValue): EntityType | null {
  return ( false
    || root == "DEVICE"
    || root == "SERVICE"
    || root == "DEVICE_MODEL"
    || root == "CAPABILITY"
    || root == "STATE"
    || root == "ACTION"
    || root == "EVENT"
    || root == "PROPERTY"
    || root == "MAPPING"
    || root == "ENUM"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface EntityFilter {
  name?: EntityFilterName | null;
  value?: string[] | null;
}
function fromEntityFilter(input?: EntityFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type EntityFilterName =
| "NAME"
| "NAMESPACE"
| "SEMANTIC_TYPE_PATH"
| "REFERENCED_ENTITY_ID"
;


// refs: 1 - tags: input, named, interface
export interface FlowTemplateFilter {
  name: FlowTemplateFilterName;
  value: string[];
}
function fromFlowTemplateFilter(input?: FlowTemplateFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type FlowTemplateFilterName =
| "DEVICE_MODEL_ID"
;


// refs: 1 - tags: input, named, interface
export interface SystemInstanceFilter {
  name?: SystemInstanceFilterName | null;
  value?: string[] | null;
}
function fromSystemInstanceFilter(input?: SystemInstanceFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type SystemInstanceFilterName =
| "SYSTEM_TEMPLATE_ID"
| "STATUS"
| "GREENGRASS_GROUP_NAME"
;


// refs: 1 - tags: input, named, interface
export interface SystemTemplateFilter {
  name: SystemTemplateFilterName;
  value: string[];
}
function fromSystemTemplateFilter(input?: SystemTemplateFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type SystemTemplateFilterName =
| "FLOW_TEMPLATE_ID"
;


// refs: 5 - tags: output, named, interface
export interface FlowTemplateSummary {
  id?: string | null;
  arn?: string | null;
  revisionNumber?: number | null;
  createdAt?: Date | number | null;
}
function toFlowTemplateSummary(root: JSONValue): FlowTemplateSummary {
  return prt.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "revisionNumber": "n",
      "createdAt": "d",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface SystemInstanceSummary {
  id?: string | null;
  arn?: string | null;
  status?: SystemInstanceDeploymentStatus | null;
  target?: DeploymentTarget | null;
  greengrassGroupName?: string | null;
  createdAt?: Date | number | null;
  updatedAt?: Date | number | null;
  greengrassGroupId?: string | null;
  greengrassGroupVersionId?: string | null;
}
function toSystemInstanceSummary(root: JSONValue): SystemInstanceSummary {
  return prt.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "status": toSystemInstanceDeploymentStatus,
      "target": toDeploymentTarget,
      "greengrassGroupName": "s",
      "createdAt": "d",
      "updatedAt": "d",
      "greengrassGroupId": "s",
      "greengrassGroupVersionId": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type SystemInstanceDeploymentStatus =
| "NOT_DEPLOYED"
| "BOOTSTRAP"
| "DEPLOY_IN_PROGRESS"
| "DEPLOYED_IN_TARGET"
| "UNDEPLOY_IN_PROGRESS"
| "FAILED"
| "PENDING_DELETE"
| "DELETED_IN_TARGET"
;
function toSystemInstanceDeploymentStatus(root: JSONValue): SystemInstanceDeploymentStatus | null {
  return ( false
    || root == "NOT_DEPLOYED"
    || root == "BOOTSTRAP"
    || root == "DEPLOY_IN_PROGRESS"
    || root == "DEPLOYED_IN_TARGET"
    || root == "UNDEPLOY_IN_PROGRESS"
    || root == "FAILED"
    || root == "PENDING_DELETE"
    || root == "DELETED_IN_TARGET"
  ) ? root : null;
}

// refs: 5 - tags: output, named, interface
export interface SystemTemplateSummary {
  id?: string | null;
  arn?: string | null;
  revisionNumber?: number | null;
  createdAt?: Date | number | null;
}
function toSystemTemplateSummary(root: JSONValue): SystemTemplateSummary {
  return prt.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "revisionNumber": "n",
      "createdAt": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EntityDescription {
  id?: string | null;
  arn?: string | null;
  type?: EntityType | null;
  createdAt?: Date | number | null;
  definition?: DefinitionDocument | null;
}
function toEntityDescription(root: JSONValue): EntityDescription {
  return prt.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "type": toEntityType,
      "createdAt": "d",
      "definition": toDefinitionDocument,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FlowTemplateDescription {
  summary?: FlowTemplateSummary | null;
  definition?: DefinitionDocument | null;
  validatedNamespaceVersion?: number | null;
}
function toFlowTemplateDescription(root: JSONValue): FlowTemplateDescription {
  return prt.readObj({
    required: {},
    optional: {
      "summary": toFlowTemplateSummary,
      "definition": toDefinitionDocument,
      "validatedNamespaceVersion": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type NamespaceDeletionStatus =
| "IN_PROGRESS"
| "SUCCEEDED"
| "FAILED"
;
function toNamespaceDeletionStatus(root: JSONValue): NamespaceDeletionStatus | null {
  return ( false
    || root == "IN_PROGRESS"
    || root == "SUCCEEDED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type NamespaceDeletionStatusErrorCodes =
| "VALIDATION_FAILED"
;
function toNamespaceDeletionStatusErrorCodes(root: JSONValue): NamespaceDeletionStatusErrorCodes | null {
  return ( false
    || root == "VALIDATION_FAILED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface SystemInstanceDescription {
  summary?: SystemInstanceSummary | null;
  definition?: DefinitionDocument | null;
  s3BucketName?: string | null;
  metricsConfiguration?: MetricsConfiguration | null;
  validatedNamespaceVersion?: number | null;
  validatedDependencyRevisions?: DependencyRevision[] | null;
  flowActionsRoleArn?: string | null;
}
function toSystemInstanceDescription(root: JSONValue): SystemInstanceDescription {
  return prt.readObj({
    required: {},
    optional: {
      "summary": toSystemInstanceSummary,
      "definition": toDefinitionDocument,
      "s3BucketName": "s",
      "metricsConfiguration": toMetricsConfiguration,
      "validatedNamespaceVersion": "n",
      "validatedDependencyRevisions": [toDependencyRevision],
      "flowActionsRoleArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DependencyRevision {
  id?: string | null;
  revisionNumber?: number | null;
}
function toDependencyRevision(root: JSONValue): DependencyRevision {
  return prt.readObj({
    required: {},
    optional: {
      "id": "s",
      "revisionNumber": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SystemTemplateDescription {
  summary?: SystemTemplateSummary | null;
  definition?: DefinitionDocument | null;
  validatedNamespaceVersion?: number | null;
}
function toSystemTemplateDescription(root: JSONValue): SystemTemplateDescription {
  return prt.readObj({
    required: {},
    optional: {
      "summary": toSystemTemplateSummary,
      "definition": toDefinitionDocument,
      "validatedNamespaceVersion": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type UploadStatus =
| "IN_PROGRESS"
| "SUCCEEDED"
| "FAILED"
;
function toUploadStatus(root: JSONValue): UploadStatus | null {
  return ( false
    || root == "IN_PROGRESS"
    || root == "SUCCEEDED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface FlowExecutionMessage {
  messageId?: string | null;
  eventType?: FlowExecutionEventType | null;
  timestamp?: Date | number | null;
  payload?: string | null;
}
function toFlowExecutionMessage(root: JSONValue): FlowExecutionMessage {
  return prt.readObj({
    required: {},
    optional: {
      "messageId": "s",
      "eventType": toFlowExecutionEventType,
      "timestamp": "d",
      "payload": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type FlowExecutionEventType =
| "EXECUTION_STARTED"
| "EXECUTION_FAILED"
| "EXECUTION_ABORTED"
| "EXECUTION_SUCCEEDED"
| "STEP_STARTED"
| "STEP_FAILED"
| "STEP_SUCCEEDED"
| "ACTIVITY_SCHEDULED"
| "ACTIVITY_STARTED"
| "ACTIVITY_FAILED"
| "ACTIVITY_SUCCEEDED"
| "START_FLOW_EXECUTION_TASK"
| "SCHEDULE_NEXT_READY_STEPS_TASK"
| "THING_ACTION_TASK"
| "THING_ACTION_TASK_FAILED"
| "THING_ACTION_TASK_SUCCEEDED"
| "ACKNOWLEDGE_TASK_MESSAGE"
;
function toFlowExecutionEventType(root: JSONValue): FlowExecutionEventType | null {
  return ( false
    || root == "EXECUTION_STARTED"
    || root == "EXECUTION_FAILED"
    || root == "EXECUTION_ABORTED"
    || root == "EXECUTION_SUCCEEDED"
    || root == "STEP_STARTED"
    || root == "STEP_FAILED"
    || root == "STEP_SUCCEEDED"
    || root == "ACTIVITY_SCHEDULED"
    || root == "ACTIVITY_STARTED"
    || root == "ACTIVITY_FAILED"
    || root == "ACTIVITY_SUCCEEDED"
    || root == "START_FLOW_EXECUTION_TASK"
    || root == "SCHEDULE_NEXT_READY_STEPS_TASK"
    || root == "THING_ACTION_TASK"
    || root == "THING_ACTION_TASK_FAILED"
    || root == "THING_ACTION_TASK_SUCCEEDED"
    || root == "ACKNOWLEDGE_TASK_MESSAGE"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface FlowExecutionSummary {
  flowExecutionId?: string | null;
  status?: FlowExecutionStatus | null;
  systemInstanceId?: string | null;
  flowTemplateId?: string | null;
  createdAt?: Date | number | null;
  updatedAt?: Date | number | null;
}
function toFlowExecutionSummary(root: JSONValue): FlowExecutionSummary {
  return prt.readObj({
    required: {},
    optional: {
      "flowExecutionId": "s",
      "status": toFlowExecutionStatus,
      "systemInstanceId": "s",
      "flowTemplateId": "s",
      "createdAt": "d",
      "updatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type FlowExecutionStatus =
| "RUNNING"
| "ABORTED"
| "SUCCEEDED"
| "FAILED"
;
function toFlowExecutionStatus(root: JSONValue): FlowExecutionStatus | null {
  return ( false
    || root == "RUNNING"
    || root == "ABORTED"
    || root == "SUCCEEDED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Thing {
  thingArn?: string | null;
  thingName?: string | null;
}
function toThing(root: JSONValue): Thing {
  return prt.readObj({
    required: {},
    optional: {
      "thingArn": "s",
      "thingName": "s",
    },
  }, root);
}
