// Autogenerated API client for: AWS Elemental MediaPackage VOD

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MediaPackageVod {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MediaPackageVod.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-07",
    "endpointPrefix": "mediapackage-vod",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "MediaPackage Vod",
    "serviceFullName": "AWS Elemental MediaPackage VOD",
    "serviceId": "MediaPackage Vod",
    "signatureVersion": "v4",
    "signingName": "mediapackage-vod",
    "uid": "mediapackage-vod-2018-11-07"
  };

  async createAsset(
    {abortSignal, ...params}: RequestConfig & CreateAssetRequest,
  ): Promise<CreateAssetResponse> {
    const body: jsonP.JSONObject = {
      id: params["Id"],
      packagingGroupId: params["PackagingGroupId"],
      resourceId: params["ResourceId"],
      sourceArn: params["SourceArn"],
      sourceRoleArn: params["SourceRoleArn"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAsset",
      requestUri: "/assets",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreatedAt": "s",
        "EgressEndpoints": [toEgressEndpoint],
        "Id": "s",
        "PackagingGroupId": "s",
        "ResourceId": "s",
        "SourceArn": "s",
        "SourceRoleArn": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createPackagingConfiguration(
    {abortSignal, ...params}: RequestConfig & CreatePackagingConfigurationRequest,
  ): Promise<CreatePackagingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      cmafPackage: fromCmafPackage(params["CmafPackage"]),
      dashPackage: fromDashPackage(params["DashPackage"]),
      hlsPackage: fromHlsPackage(params["HlsPackage"]),
      id: params["Id"],
      mssPackage: fromMssPackage(params["MssPackage"]),
      packagingGroupId: params["PackagingGroupId"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePackagingConfiguration",
      requestUri: "/packaging_configurations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CmafPackage": toCmafPackage,
        "DashPackage": toDashPackage,
        "HlsPackage": toHlsPackage,
        "Id": "s",
        "MssPackage": toMssPackage,
        "PackagingGroupId": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createPackagingGroup(
    {abortSignal, ...params}: RequestConfig & CreatePackagingGroupRequest,
  ): Promise<CreatePackagingGroupResponse> {
    const body: jsonP.JSONObject = {
      authorization: fromAuthorization(params["Authorization"]),
      id: params["Id"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePackagingGroup",
      requestUri: "/packaging_groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Authorization": toAuthorization,
        "DomainName": "s",
        "Id": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async deleteAsset(
    {abortSignal, ...params}: RequestConfig & DeleteAssetRequest,
  ): Promise<DeleteAssetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAsset",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assets/${params["Id"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePackagingConfiguration(
    {abortSignal, ...params}: RequestConfig & DeletePackagingConfigurationRequest,
  ): Promise<DeletePackagingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePackagingConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/packaging_configurations/${params["Id"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePackagingGroup(
    {abortSignal, ...params}: RequestConfig & DeletePackagingGroupRequest,
  ): Promise<DeletePackagingGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePackagingGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/packaging_groups/${params["Id"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAsset(
    {abortSignal, ...params}: RequestConfig & DescribeAssetRequest,
  ): Promise<DescribeAssetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAsset",
      method: "GET",
      requestUri: cmnP.encodePath`/assets/${params["Id"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CreatedAt": "s",
        "EgressEndpoints": [toEgressEndpoint],
        "Id": "s",
        "PackagingGroupId": "s",
        "ResourceId": "s",
        "SourceArn": "s",
        "SourceRoleArn": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describePackagingConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribePackagingConfigurationRequest,
  ): Promise<DescribePackagingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePackagingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/packaging_configurations/${params["Id"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "CmafPackage": toCmafPackage,
        "DashPackage": toDashPackage,
        "HlsPackage": toHlsPackage,
        "Id": "s",
        "MssPackage": toMssPackage,
        "PackagingGroupId": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describePackagingGroup(
    {abortSignal, ...params}: RequestConfig & DescribePackagingGroupRequest,
  ): Promise<DescribePackagingGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribePackagingGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/packaging_groups/${params["Id"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Authorization": toAuthorization,
        "DomainName": "s",
        "Id": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listAssets(
    {abortSignal, ...params}: RequestConfig & ListAssetsRequest = {},
  ): Promise<ListAssetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["PackagingGroupId"] != null) query.set("packagingGroupId", params["PackagingGroupId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssets",
      method: "GET",
      requestUri: "/assets",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Assets": [toAssetShallow],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPackagingConfigurations(
    {abortSignal, ...params}: RequestConfig & ListPackagingConfigurationsRequest = {},
  ): Promise<ListPackagingConfigurationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["PackagingGroupId"] != null) query.set("packagingGroupId", params["PackagingGroupId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPackagingConfigurations",
      method: "GET",
      requestUri: "/packaging_configurations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "PackagingConfigurations": [toPackagingConfiguration],
      },
    }, await resp.json());
  }

  async listPackagingGroups(
    {abortSignal, ...params}: RequestConfig & ListPackagingGroupsRequest = {},
  ): Promise<ListPackagingGroupsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPackagingGroups",
      method: "GET",
      requestUri: "/packaging_groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "PackagingGroups": [toPackagingGroup],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updatePackagingGroup(
    {abortSignal, ...params}: RequestConfig & UpdatePackagingGroupRequest,
  ): Promise<UpdatePackagingGroupResponse> {
    const body: jsonP.JSONObject = {
      authorization: fromAuthorization(params["Authorization"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePackagingGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/packaging_groups/${params["Id"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Authorization": toAuthorization,
        "DomainName": "s",
        "Id": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateAssetRequest {
  Id: string;
  PackagingGroupId: string;
  ResourceId?: string | null;
  SourceArn: string;
  SourceRoleArn: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreatePackagingConfigurationRequest {
  CmafPackage?: CmafPackage | null;
  DashPackage?: DashPackage | null;
  HlsPackage?: HlsPackage | null;
  Id: string;
  MssPackage?: MssPackage | null;
  PackagingGroupId: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreatePackagingGroupRequest {
  Authorization?: Authorization | null;
  Id: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteAssetRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeletePackagingConfigurationRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeletePackagingGroupRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribeAssetRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribePackagingConfigurationRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DescribePackagingGroupRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface ListAssetsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  PackagingGroupId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPackagingConfigurationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  PackagingGroupId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPackagingGroupsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdatePackagingGroupRequest {
  Authorization?: Authorization | null;
  Id: string;
}

// refs: 1 - tags: named, output
export interface CreateAssetResponse {
  Arn?: string | null;
  CreatedAt?: string | null;
  EgressEndpoints?: EgressEndpoint[] | null;
  Id?: string | null;
  PackagingGroupId?: string | null;
  ResourceId?: string | null;
  SourceArn?: string | null;
  SourceRoleArn?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreatePackagingConfigurationResponse {
  Arn?: string | null;
  CmafPackage?: CmafPackage | null;
  DashPackage?: DashPackage | null;
  HlsPackage?: HlsPackage | null;
  Id?: string | null;
  MssPackage?: MssPackage | null;
  PackagingGroupId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreatePackagingGroupResponse {
  Arn?: string | null;
  Authorization?: Authorization | null;
  DomainName?: string | null;
  Id?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DeleteAssetResponse {
}

// refs: 1 - tags: named, output
export interface DeletePackagingConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeletePackagingGroupResponse {
}

// refs: 1 - tags: named, output
export interface DescribeAssetResponse {
  Arn?: string | null;
  CreatedAt?: string | null;
  EgressEndpoints?: EgressEndpoint[] | null;
  Id?: string | null;
  PackagingGroupId?: string | null;
  ResourceId?: string | null;
  SourceArn?: string | null;
  SourceRoleArn?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribePackagingConfigurationResponse {
  Arn?: string | null;
  CmafPackage?: CmafPackage | null;
  DashPackage?: DashPackage | null;
  HlsPackage?: HlsPackage | null;
  Id?: string | null;
  MssPackage?: MssPackage | null;
  PackagingGroupId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribePackagingGroupResponse {
  Arn?: string | null;
  Authorization?: Authorization | null;
  DomainName?: string | null;
  Id?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListAssetsResponse {
  Assets?: AssetShallow[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPackagingConfigurationsResponse {
  NextToken?: string | null;
  PackagingConfigurations?: PackagingConfiguration[] | null;
}

// refs: 1 - tags: named, output
export interface ListPackagingGroupsResponse {
  NextToken?: string | null;
  PackagingGroups?: PackagingGroup[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface UpdatePackagingGroupResponse {
  Arn?: string | null;
  Authorization?: Authorization | null;
  DomainName?: string | null;
  Id?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 4 - tags: input, named, interface, output
export interface CmafPackage {
  Encryption?: CmafEncryption | null;
  HlsManifests: HlsManifest[];
  SegmentDurationSeconds?: number | null;
}
function fromCmafPackage(input?: CmafPackage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    encryption: fromCmafEncryption(input["Encryption"]),
    hlsManifests: input["HlsManifests"]?.map(x => fromHlsManifest(x)),
    segmentDurationSeconds: input["SegmentDurationSeconds"],
  }
}
function toCmafPackage(root: jsonP.JSONValue): CmafPackage {
  return jsonP.readObj({
    required: {
      "HlsManifests": [toHlsManifest],
    },
    optional: {
      "Encryption": toCmafEncryption,
      "SegmentDurationSeconds": "n",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CmafEncryption {
  SpekeKeyProvider: SpekeKeyProvider;
}
function fromCmafEncryption(input?: CmafEncryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    spekeKeyProvider: fromSpekeKeyProvider(input["SpekeKeyProvider"]),
  }
}
function toCmafEncryption(root: jsonP.JSONValue): CmafEncryption {
  return jsonP.readObj({
    required: {
      "SpekeKeyProvider": toSpekeKeyProvider,
    },
    optional: {},
  }, root);
}

// refs: 16 - tags: input, named, interface, output
export interface SpekeKeyProvider {
  RoleArn: string;
  SystemIds: string[];
  Url: string;
}
function fromSpekeKeyProvider(input?: SpekeKeyProvider | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["RoleArn"],
    systemIds: input["SystemIds"],
    url: input["Url"],
  }
}
function toSpekeKeyProvider(root: jsonP.JSONValue): SpekeKeyProvider {
  return jsonP.readObj({
    required: {
      "RoleArn": "s",
      "SystemIds": ["s"],
      "Url": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface HlsManifest {
  AdMarkers?: AdMarkers | null;
  IncludeIframeOnlyStream?: boolean | null;
  ManifestName?: string | null;
  ProgramDateTimeIntervalSeconds?: number | null;
  RepeatExtXKey?: boolean | null;
  StreamSelection?: StreamSelection | null;
}
function fromHlsManifest(input?: HlsManifest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    adMarkers: input["AdMarkers"],
    includeIframeOnlyStream: input["IncludeIframeOnlyStream"],
    manifestName: input["ManifestName"],
    programDateTimeIntervalSeconds: input["ProgramDateTimeIntervalSeconds"],
    repeatExtXKey: input["RepeatExtXKey"],
    streamSelection: fromStreamSelection(input["StreamSelection"]),
  }
}
function toHlsManifest(root: jsonP.JSONValue): HlsManifest {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdMarkers": (x: jsonP.JSONValue) => cmnP.readEnum<AdMarkers>(x),
      "IncludeIframeOnlyStream": "b",
      "ManifestName": "s",
      "ProgramDateTimeIntervalSeconds": "n",
      "RepeatExtXKey": "b",
      "StreamSelection": toStreamSelection,
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type AdMarkers =
| "NONE"
| "SCTE35_ENHANCED"
| "PASSTHROUGH"
| cmnP.UnexpectedEnumValue;

// refs: 16 - tags: input, named, interface, output
export interface StreamSelection {
  MaxVideoBitsPerSecond?: number | null;
  MinVideoBitsPerSecond?: number | null;
  StreamOrder?: StreamOrder | null;
}
function fromStreamSelection(input?: StreamSelection | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    maxVideoBitsPerSecond: input["MaxVideoBitsPerSecond"],
    minVideoBitsPerSecond: input["MinVideoBitsPerSecond"],
    streamOrder: input["StreamOrder"],
  }
}
function toStreamSelection(root: jsonP.JSONValue): StreamSelection {
  return jsonP.readObj({
    required: {},
    optional: {
      "MaxVideoBitsPerSecond": "n",
      "MinVideoBitsPerSecond": "n",
      "StreamOrder": (x: jsonP.JSONValue) => cmnP.readEnum<StreamOrder>(x),
    },
  }, root);
}

// refs: 16 - tags: input, named, enum, output
export type StreamOrder =
| "ORIGINAL"
| "VIDEO_BITRATE_ASCENDING"
| "VIDEO_BITRATE_DESCENDING"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface DashPackage {
  DashManifests: DashManifest[];
  Encryption?: DashEncryption | null;
  PeriodTriggers?: __PeriodTriggersElement[] | null;
  SegmentDurationSeconds?: number | null;
  SegmentTemplateFormat?: SegmentTemplateFormat | null;
}
function fromDashPackage(input?: DashPackage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dashManifests: input["DashManifests"]?.map(x => fromDashManifest(x)),
    encryption: fromDashEncryption(input["Encryption"]),
    periodTriggers: input["PeriodTriggers"],
    segmentDurationSeconds: input["SegmentDurationSeconds"],
    segmentTemplateFormat: input["SegmentTemplateFormat"],
  }
}
function toDashPackage(root: jsonP.JSONValue): DashPackage {
  return jsonP.readObj({
    required: {
      "DashManifests": [toDashManifest],
    },
    optional: {
      "Encryption": toDashEncryption,
      "PeriodTriggers": [(x: jsonP.JSONValue) => cmnP.readEnum<__PeriodTriggersElement>(x)],
      "SegmentDurationSeconds": "n",
      "SegmentTemplateFormat": (x: jsonP.JSONValue) => cmnP.readEnum<SegmentTemplateFormat>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface DashManifest {
  ManifestLayout?: ManifestLayout | null;
  ManifestName?: string | null;
  MinBufferTimeSeconds?: number | null;
  Profile?: Profile | null;
  StreamSelection?: StreamSelection | null;
}
function fromDashManifest(input?: DashManifest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    manifestLayout: input["ManifestLayout"],
    manifestName: input["ManifestName"],
    minBufferTimeSeconds: input["MinBufferTimeSeconds"],
    profile: input["Profile"],
    streamSelection: fromStreamSelection(input["StreamSelection"]),
  }
}
function toDashManifest(root: jsonP.JSONValue): DashManifest {
  return jsonP.readObj({
    required: {},
    optional: {
      "ManifestLayout": (x: jsonP.JSONValue) => cmnP.readEnum<ManifestLayout>(x),
      "ManifestName": "s",
      "MinBufferTimeSeconds": "n",
      "Profile": (x: jsonP.JSONValue) => cmnP.readEnum<Profile>(x),
      "StreamSelection": toStreamSelection,
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ManifestLayout =
| "FULL"
| "COMPACT"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type Profile =
| "NONE"
| "HBBTV_1_5"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface DashEncryption {
  SpekeKeyProvider: SpekeKeyProvider;
}
function fromDashEncryption(input?: DashEncryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    spekeKeyProvider: fromSpekeKeyProvider(input["SpekeKeyProvider"]),
  }
}
function toDashEncryption(root: jsonP.JSONValue): DashEncryption {
  return jsonP.readObj({
    required: {
      "SpekeKeyProvider": toSpekeKeyProvider,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type __PeriodTriggersElement =
| "ADS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type SegmentTemplateFormat =
| "NUMBER_WITH_TIMELINE"
| "TIME_WITH_TIMELINE"
| "NUMBER_WITH_DURATION"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface HlsPackage {
  Encryption?: HlsEncryption | null;
  HlsManifests: HlsManifest[];
  SegmentDurationSeconds?: number | null;
  UseAudioRenditionGroup?: boolean | null;
}
function fromHlsPackage(input?: HlsPackage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    encryption: fromHlsEncryption(input["Encryption"]),
    hlsManifests: input["HlsManifests"]?.map(x => fromHlsManifest(x)),
    segmentDurationSeconds: input["SegmentDurationSeconds"],
    useAudioRenditionGroup: input["UseAudioRenditionGroup"],
  }
}
function toHlsPackage(root: jsonP.JSONValue): HlsPackage {
  return jsonP.readObj({
    required: {
      "HlsManifests": [toHlsManifest],
    },
    optional: {
      "Encryption": toHlsEncryption,
      "SegmentDurationSeconds": "n",
      "UseAudioRenditionGroup": "b",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface HlsEncryption {
  ConstantInitializationVector?: string | null;
  EncryptionMethod?: EncryptionMethod | null;
  SpekeKeyProvider: SpekeKeyProvider;
}
function fromHlsEncryption(input?: HlsEncryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    constantInitializationVector: input["ConstantInitializationVector"],
    encryptionMethod: input["EncryptionMethod"],
    spekeKeyProvider: fromSpekeKeyProvider(input["SpekeKeyProvider"]),
  }
}
function toHlsEncryption(root: jsonP.JSONValue): HlsEncryption {
  return jsonP.readObj({
    required: {
      "SpekeKeyProvider": toSpekeKeyProvider,
    },
    optional: {
      "ConstantInitializationVector": "s",
      "EncryptionMethod": (x: jsonP.JSONValue) => cmnP.readEnum<EncryptionMethod>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type EncryptionMethod =
| "AES_128"
| "SAMPLE_AES"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface MssPackage {
  Encryption?: MssEncryption | null;
  MssManifests: MssManifest[];
  SegmentDurationSeconds?: number | null;
}
function fromMssPackage(input?: MssPackage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    encryption: fromMssEncryption(input["Encryption"]),
    mssManifests: input["MssManifests"]?.map(x => fromMssManifest(x)),
    segmentDurationSeconds: input["SegmentDurationSeconds"],
  }
}
function toMssPackage(root: jsonP.JSONValue): MssPackage {
  return jsonP.readObj({
    required: {
      "MssManifests": [toMssManifest],
    },
    optional: {
      "Encryption": toMssEncryption,
      "SegmentDurationSeconds": "n",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MssEncryption {
  SpekeKeyProvider: SpekeKeyProvider;
}
function fromMssEncryption(input?: MssEncryption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    spekeKeyProvider: fromSpekeKeyProvider(input["SpekeKeyProvider"]),
  }
}
function toMssEncryption(root: jsonP.JSONValue): MssEncryption {
  return jsonP.readObj({
    required: {
      "SpekeKeyProvider": toSpekeKeyProvider,
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MssManifest {
  ManifestName?: string | null;
  StreamSelection?: StreamSelection | null;
}
function fromMssManifest(input?: MssManifest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    manifestName: input["ManifestName"],
    streamSelection: fromStreamSelection(input["StreamSelection"]),
  }
}
function toMssManifest(root: jsonP.JSONValue): MssManifest {
  return jsonP.readObj({
    required: {},
    optional: {
      "ManifestName": "s",
      "StreamSelection": toStreamSelection,
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface Authorization {
  CdnIdentifierSecret: string;
  SecretsRoleArn: string;
}
function fromAuthorization(input?: Authorization | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cdnIdentifierSecret: input["CdnIdentifierSecret"],
    secretsRoleArn: input["SecretsRoleArn"],
  }
}
function toAuthorization(root: jsonP.JSONValue): Authorization {
  return jsonP.readObj({
    required: {
      "CdnIdentifierSecret": "s",
      "SecretsRoleArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EgressEndpoint {
  PackagingConfigurationId?: string | null;
  Url?: string | null;
}
function toEgressEndpoint(root: jsonP.JSONValue): EgressEndpoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "PackagingConfigurationId": "s",
      "Url": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssetShallow {
  Arn?: string | null;
  CreatedAt?: string | null;
  Id?: string | null;
  PackagingGroupId?: string | null;
  ResourceId?: string | null;
  SourceArn?: string | null;
  SourceRoleArn?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toAssetShallow(root: jsonP.JSONValue): AssetShallow {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CreatedAt": "s",
      "Id": "s",
      "PackagingGroupId": "s",
      "ResourceId": "s",
      "SourceArn": "s",
      "SourceRoleArn": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PackagingConfiguration {
  Arn?: string | null;
  CmafPackage?: CmafPackage | null;
  DashPackage?: DashPackage | null;
  HlsPackage?: HlsPackage | null;
  Id?: string | null;
  MssPackage?: MssPackage | null;
  PackagingGroupId?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toPackagingConfiguration(root: jsonP.JSONValue): PackagingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "CmafPackage": toCmafPackage,
      "DashPackage": toDashPackage,
      "HlsPackage": toHlsPackage,
      "Id": "s",
      "MssPackage": toMssPackage,
      "PackagingGroupId": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PackagingGroup {
  Arn?: string | null;
  Authorization?: Authorization | null;
  DomainName?: string | null;
  Id?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toPackagingGroup(root: jsonP.JSONValue): PackagingGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Authorization": toAuthorization,
      "DomainName": "s",
      "Id": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
