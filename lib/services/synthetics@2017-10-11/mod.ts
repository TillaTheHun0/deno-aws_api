// Autogenerated API client for: Synthetics

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Synthetics {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Synthetics.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-10-11",
    "endpointPrefix": "synthetics",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Synthetics",
    "serviceFullName": "Synthetics",
    "serviceId": "synthetics",
    "signatureVersion": "v4",
    "signingName": "synthetics",
    "uid": "synthetics-2017-10-11"
  };

  async createCanary(
    {abortSignal, ...params}: RequestConfig & CreateCanaryRequest,
  ): Promise<CreateCanaryResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Code: fromCanaryCodeInput(params["Code"]),
      ArtifactS3Location: params["ArtifactS3Location"],
      ExecutionRoleArn: params["ExecutionRoleArn"],
      Schedule: fromCanaryScheduleInput(params["Schedule"]),
      RunConfig: fromCanaryRunConfigInput(params["RunConfig"]),
      SuccessRetentionPeriodInDays: params["SuccessRetentionPeriodInDays"],
      FailureRetentionPeriodInDays: params["FailureRetentionPeriodInDays"],
      RuntimeVersion: params["RuntimeVersion"],
      VpcConfig: fromVpcConfigInput(params["VpcConfig"]),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCanary",
      requestUri: "/canary",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Canary": toCanary,
      },
    }, await resp.json());
  }

  async deleteCanary(
    {abortSignal, ...params}: RequestConfig & DeleteCanaryRequest,
  ): Promise<DeleteCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCanary",
      method: "DELETE",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeCanaries(
    {abortSignal, ...params}: RequestConfig & DescribeCanariesRequest = {},
  ): Promise<DescribeCanariesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCanaries",
      requestUri: "/canaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Canaries": [toCanary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeCanariesLastRun(
    {abortSignal, ...params}: RequestConfig & DescribeCanariesLastRunRequest = {},
  ): Promise<DescribeCanariesLastRunResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCanariesLastRun",
      requestUri: "/canaries/last-run",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CanariesLastRun": [toCanaryLastRun],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRuntimeVersions(
    {abortSignal, ...params}: RequestConfig & DescribeRuntimeVersionsRequest = {},
  ): Promise<DescribeRuntimeVersionsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRuntimeVersions",
      requestUri: "/runtime-versions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuntimeVersions": [toRuntimeVersion],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getCanary(
    {abortSignal, ...params}: RequestConfig & GetCanaryRequest,
  ): Promise<GetCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCanary",
      method: "GET",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Canary": toCanary,
      },
    }, await resp.json());
  }

  async getCanaryRuns(
    {abortSignal, ...params}: RequestConfig & GetCanaryRunsRequest,
  ): Promise<GetCanaryRunsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCanaryRuns",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}/runs`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CanaryRuns": [toCanaryRun],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async startCanary(
    {abortSignal, ...params}: RequestConfig & StartCanaryRequest,
  ): Promise<StartCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StartCanary",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}/start`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopCanary(
    {abortSignal, ...params}: RequestConfig & StopCanaryRequest,
  ): Promise<StopCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopCanary",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}/stop`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateCanary(
    {abortSignal, ...params}: RequestConfig & UpdateCanaryRequest,
  ): Promise<UpdateCanaryResponse> {
    const body: jsonP.JSONObject = {
      Code: fromCanaryCodeInput(params["Code"]),
      ExecutionRoleArn: params["ExecutionRoleArn"],
      RuntimeVersion: params["RuntimeVersion"],
      Schedule: fromCanaryScheduleInput(params["Schedule"]),
      RunConfig: fromCanaryRunConfigInput(params["RunConfig"]),
      SuccessRetentionPeriodInDays: params["SuccessRetentionPeriodInDays"],
      FailureRetentionPeriodInDays: params["FailureRetentionPeriodInDays"],
      VpcConfig: fromVpcConfigInput(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCanary",
      method: "PATCH",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateCanaryRequest {
  Name: string;
  Code: CanaryCodeInput;
  ArtifactS3Location: string;
  ExecutionRoleArn: string;
  Schedule: CanaryScheduleInput;
  RunConfig?: CanaryRunConfigInput | null;
  SuccessRetentionPeriodInDays?: number | null;
  FailureRetentionPeriodInDays?: number | null;
  RuntimeVersion: string;
  VpcConfig?: VpcConfigInput | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteCanaryRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DescribeCanariesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeCanariesLastRunRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeRuntimeVersionsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetCanaryRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface GetCanaryRunsRequest {
  Name: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface StartCanaryRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface StopCanaryRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateCanaryRequest {
  Name: string;
  Code?: CanaryCodeInput | null;
  ExecutionRoleArn?: string | null;
  RuntimeVersion?: string | null;
  Schedule?: CanaryScheduleInput | null;
  RunConfig?: CanaryRunConfigInput | null;
  SuccessRetentionPeriodInDays?: number | null;
  FailureRetentionPeriodInDays?: number | null;
  VpcConfig?: VpcConfigInput | null;
}

// refs: 1 - tags: named, output
export interface CreateCanaryResponse {
  Canary?: Canary | null;
}

// refs: 1 - tags: named, output
export interface DeleteCanaryResponse {
}

// refs: 1 - tags: named, output
export interface DescribeCanariesResponse {
  Canaries?: Canary[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeCanariesLastRunResponse {
  CanariesLastRun?: CanaryLastRun[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRuntimeVersionsResponse {
  RuntimeVersions?: RuntimeVersion[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCanaryResponse {
  Canary?: Canary | null;
}

// refs: 1 - tags: named, output
export interface GetCanaryRunsResponse {
  CanaryRuns?: CanaryRun[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface StartCanaryResponse {
}

// refs: 1 - tags: named, output
export interface StopCanaryResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateCanaryResponse {
}

// refs: 2 - tags: input, named, interface
export interface CanaryCodeInput {
  S3Bucket?: string | null;
  S3Key?: string | null;
  S3Version?: string | null;
  ZipFile?: Uint8Array | string | null;
  Handler: string;
}
function fromCanaryCodeInput(input?: CanaryCodeInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Bucket: input["S3Bucket"],
    S3Key: input["S3Key"],
    S3Version: input["S3Version"],
    ZipFile: jsonP.serializeBlob(input["ZipFile"]),
    Handler: input["Handler"],
  }
}

// refs: 2 - tags: input, named, interface
export interface CanaryScheduleInput {
  Expression: string;
  DurationInSeconds?: number | null;
}
function fromCanaryScheduleInput(input?: CanaryScheduleInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Expression: input["Expression"],
    DurationInSeconds: input["DurationInSeconds"],
  }
}

// refs: 2 - tags: input, named, interface
export interface CanaryRunConfigInput {
  TimeoutInSeconds?: number | null;
  MemoryInMB?: number | null;
  ActiveTracing?: boolean | null;
  EnvironmentVariables?: { [key: string]: string | null | undefined } | null;
}
function fromCanaryRunConfigInput(input?: CanaryRunConfigInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TimeoutInSeconds: input["TimeoutInSeconds"],
    MemoryInMB: input["MemoryInMB"],
    ActiveTracing: input["ActiveTracing"],
    EnvironmentVariables: input["EnvironmentVariables"],
  }
}

// refs: 2 - tags: input, named, interface
export interface VpcConfigInput {
  SubnetIds?: string[] | null;
  SecurityGroupIds?: string[] | null;
}
function fromVpcConfigInput(input?: VpcConfigInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIds: input["SubnetIds"],
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}

// refs: 3 - tags: output, named, interface
export interface Canary {
  Id?: string | null;
  Name?: string | null;
  Code?: CanaryCodeOutput | null;
  ExecutionRoleArn?: string | null;
  Schedule?: CanaryScheduleOutput | null;
  RunConfig?: CanaryRunConfigOutput | null;
  SuccessRetentionPeriodInDays?: number | null;
  FailureRetentionPeriodInDays?: number | null;
  Status?: CanaryStatus | null;
  Timeline?: CanaryTimeline | null;
  ArtifactS3Location?: string | null;
  EngineArn?: string | null;
  RuntimeVersion?: string | null;
  VpcConfig?: VpcConfigOutput | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toCanary(root: jsonP.JSONValue): Canary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Code": toCanaryCodeOutput,
      "ExecutionRoleArn": "s",
      "Schedule": toCanaryScheduleOutput,
      "RunConfig": toCanaryRunConfigOutput,
      "SuccessRetentionPeriodInDays": "n",
      "FailureRetentionPeriodInDays": "n",
      "Status": toCanaryStatus,
      "Timeline": toCanaryTimeline,
      "ArtifactS3Location": "s",
      "EngineArn": "s",
      "RuntimeVersion": "s",
      "VpcConfig": toVpcConfigOutput,
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CanaryCodeOutput {
  SourceLocationArn?: string | null;
  Handler?: string | null;
}
function toCanaryCodeOutput(root: jsonP.JSONValue): CanaryCodeOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "SourceLocationArn": "s",
      "Handler": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CanaryScheduleOutput {
  Expression?: string | null;
  DurationInSeconds?: number | null;
}
function toCanaryScheduleOutput(root: jsonP.JSONValue): CanaryScheduleOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "Expression": "s",
      "DurationInSeconds": "n",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CanaryRunConfigOutput {
  TimeoutInSeconds?: number | null;
  MemoryInMB?: number | null;
  ActiveTracing?: boolean | null;
}
function toCanaryRunConfigOutput(root: jsonP.JSONValue): CanaryRunConfigOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "TimeoutInSeconds": "n",
      "MemoryInMB": "n",
      "ActiveTracing": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface CanaryStatus {
  State?: CanaryState | null;
  StateReason?: string | null;
  StateReasonCode?: CanaryStateReasonCode | null;
}
function toCanaryStatus(root: jsonP.JSONValue): CanaryStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<CanaryState>(x),
      "StateReason": "s",
      "StateReasonCode": (x: jsonP.JSONValue) => cmnP.readEnum<CanaryStateReasonCode>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type CanaryState =
| "CREATING"
| "READY"
| "STARTING"
| "RUNNING"
| "UPDATING"
| "STOPPING"
| "STOPPED"
| "ERROR"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type CanaryStateReasonCode =
| "INVALID_PERMISSIONS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface CanaryTimeline {
  Created?: Date | number | null;
  LastModified?: Date | number | null;
  LastStarted?: Date | number | null;
  LastStopped?: Date | number | null;
}
function toCanaryTimeline(root: jsonP.JSONValue): CanaryTimeline {
  return jsonP.readObj({
    required: {},
    optional: {
      "Created": "d",
      "LastModified": "d",
      "LastStarted": "d",
      "LastStopped": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface VpcConfigOutput {
  VpcId?: string | null;
  SubnetIds?: string[] | null;
  SecurityGroupIds?: string[] | null;
}
function toVpcConfigOutput(root: jsonP.JSONValue): VpcConfigOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "VpcId": "s",
      "SubnetIds": ["s"],
      "SecurityGroupIds": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CanaryLastRun {
  CanaryName?: string | null;
  LastRun?: CanaryRun | null;
}
function toCanaryLastRun(root: jsonP.JSONValue): CanaryLastRun {
  return jsonP.readObj({
    required: {},
    optional: {
      "CanaryName": "s",
      "LastRun": toCanaryRun,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CanaryRun {
  Id?: string | null;
  Name?: string | null;
  Status?: CanaryRunStatus | null;
  Timeline?: CanaryRunTimeline | null;
  ArtifactS3Location?: string | null;
}
function toCanaryRun(root: jsonP.JSONValue): CanaryRun {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Status": toCanaryRunStatus,
      "Timeline": toCanaryRunTimeline,
      "ArtifactS3Location": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CanaryRunStatus {
  State?: CanaryRunState | null;
  StateReason?: string | null;
  StateReasonCode?: CanaryRunStateReasonCode | null;
}
function toCanaryRunStatus(root: jsonP.JSONValue): CanaryRunStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<CanaryRunState>(x),
      "StateReason": "s",
      "StateReasonCode": (x: jsonP.JSONValue) => cmnP.readEnum<CanaryRunStateReasonCode>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type CanaryRunState =
| "RUNNING"
| "PASSED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type CanaryRunStateReasonCode =
| "CANARY_FAILURE"
| "EXECUTION_FAILURE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface CanaryRunTimeline {
  Started?: Date | number | null;
  Completed?: Date | number | null;
}
function toCanaryRunTimeline(root: jsonP.JSONValue): CanaryRunTimeline {
  return jsonP.readObj({
    required: {},
    optional: {
      "Started": "d",
      "Completed": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RuntimeVersion {
  VersionName?: string | null;
  Description?: string | null;
  ReleaseDate?: Date | number | null;
  DeprecationDate?: Date | number | null;
}
function toRuntimeVersion(root: jsonP.JSONValue): RuntimeVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "VersionName": "s",
      "Description": "s",
      "ReleaseDate": "d",
      "DeprecationDate": "d",
    },
  }, root);
}
