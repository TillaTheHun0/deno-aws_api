// Autogenerated API client for: Synthetics

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as Base64 from "https://deno.land/std@0.86.0/encoding/base64.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";
function serializeBlob(input: string | Uint8Array | null | undefined) {
  if (input == null) return input;
  return Base64.encode(input);
}

export default class Synthetics {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Synthetics.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-10-11",
    "endpointPrefix": "synthetics",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Synthetics",
    "serviceFullName": "Synthetics",
    "serviceId": "synthetics",
    "signatureVersion": "v4",
    "signingName": "synthetics",
    "uid": "synthetics-2017-10-11"
  };

  async createCanary(
    {abortSignal, ...params}: RequestConfig & s.CreateCanaryRequest,
  ): Promise<s.CreateCanaryResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Code: fromCanaryCodeInput(params["Code"]),
      ArtifactS3Location: params["ArtifactS3Location"],
      ExecutionRoleArn: params["ExecutionRoleArn"],
      Schedule: fromCanaryScheduleInput(params["Schedule"]),
      RunConfig: fromCanaryRunConfigInput(params["RunConfig"]),
      SuccessRetentionPeriodInDays: params["SuccessRetentionPeriodInDays"],
      FailureRetentionPeriodInDays: params["FailureRetentionPeriodInDays"],
      RuntimeVersion: params["RuntimeVersion"],
      VpcConfig: fromVpcConfigInput(params["VpcConfig"]),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCanary",
      requestUri: "/canary",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Canary": toCanary,
      },
    }, await resp.json());
  }

  async deleteCanary(
    {abortSignal, ...params}: RequestConfig & s.DeleteCanaryRequest,
  ): Promise<s.DeleteCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCanary",
      method: "DELETE",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeCanaries(
    {abortSignal, ...params}: RequestConfig & s.DescribeCanariesRequest = {},
  ): Promise<s.DescribeCanariesResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCanaries",
      requestUri: "/canaries",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Canaries": [toCanary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeCanariesLastRun(
    {abortSignal, ...params}: RequestConfig & s.DescribeCanariesLastRunRequest = {},
  ): Promise<s.DescribeCanariesLastRunResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCanariesLastRun",
      requestUri: "/canaries/last-run",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CanariesLastRun": [toCanaryLastRun],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeRuntimeVersions(
    {abortSignal, ...params}: RequestConfig & s.DescribeRuntimeVersionsRequest = {},
  ): Promise<s.DescribeRuntimeVersionsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeRuntimeVersions",
      requestUri: "/runtime-versions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RuntimeVersions": [toRuntimeVersion],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getCanary(
    {abortSignal, ...params}: RequestConfig & s.GetCanaryRequest,
  ): Promise<s.GetCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCanary",
      method: "GET",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Canary": toCanary,
      },
    }, await resp.json());
  }

  async getCanaryRuns(
    {abortSignal, ...params}: RequestConfig & s.GetCanaryRunsRequest,
  ): Promise<s.GetCanaryRunsResponse> {
    const body: jsonP.JSONObject = {
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCanaryRuns",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}/runs`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CanaryRuns": [toCanaryRun],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async startCanary(
    {abortSignal, ...params}: RequestConfig & s.StartCanaryRequest,
  ): Promise<s.StartCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StartCanary",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}/start`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopCanary(
    {abortSignal, ...params}: RequestConfig & s.StopCanaryRequest,
  ): Promise<s.StopCanaryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopCanary",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}/stop`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateCanary(
    {abortSignal, ...params}: RequestConfig & s.UpdateCanaryRequest,
  ): Promise<s.UpdateCanaryResponse> {
    const body: jsonP.JSONObject = {
      Code: fromCanaryCodeInput(params["Code"]),
      ExecutionRoleArn: params["ExecutionRoleArn"],
      RuntimeVersion: params["RuntimeVersion"],
      Schedule: fromCanaryScheduleInput(params["Schedule"]),
      RunConfig: fromCanaryRunConfigInput(params["RunConfig"]),
      SuccessRetentionPeriodInDays: params["SuccessRetentionPeriodInDays"],
      FailureRetentionPeriodInDays: params["FailureRetentionPeriodInDays"],
      VpcConfig: fromVpcConfigInput(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCanary",
      method: "PATCH",
      requestUri: cmnP.encodePath`/canary/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromCanaryCodeInput(input?: s.CanaryCodeInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Bucket: input["S3Bucket"],
    S3Key: input["S3Key"],
    S3Version: input["S3Version"],
    ZipFile: serializeBlob(input["ZipFile"]),
    Handler: input["Handler"],
  }
}

function fromCanaryScheduleInput(input?: s.CanaryScheduleInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Expression: input["Expression"],
    DurationInSeconds: input["DurationInSeconds"],
  }
}

function fromCanaryRunConfigInput(input?: s.CanaryRunConfigInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TimeoutInSeconds: input["TimeoutInSeconds"],
    MemoryInMB: input["MemoryInMB"],
    ActiveTracing: input["ActiveTracing"],
    EnvironmentVariables: input["EnvironmentVariables"],
  }
}

function fromVpcConfigInput(input?: s.VpcConfigInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetIds: input["SubnetIds"],
    SecurityGroupIds: input["SecurityGroupIds"],
  }
}

function toCanary(root: jsonP.JSONValue): s.Canary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Code": toCanaryCodeOutput,
      "ExecutionRoleArn": "s",
      "Schedule": toCanaryScheduleOutput,
      "RunConfig": toCanaryRunConfigOutput,
      "SuccessRetentionPeriodInDays": "n",
      "FailureRetentionPeriodInDays": "n",
      "Status": toCanaryStatus,
      "Timeline": toCanaryTimeline,
      "ArtifactS3Location": "s",
      "EngineArn": "s",
      "RuntimeVersion": "s",
      "VpcConfig": toVpcConfigOutput,
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toCanaryCodeOutput(root: jsonP.JSONValue): s.CanaryCodeOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "SourceLocationArn": "s",
      "Handler": "s",
    },
  }, root);
}

function toCanaryScheduleOutput(root: jsonP.JSONValue): s.CanaryScheduleOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "Expression": "s",
      "DurationInSeconds": "n",
    },
  }, root);
}

function toCanaryRunConfigOutput(root: jsonP.JSONValue): s.CanaryRunConfigOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "TimeoutInSeconds": "n",
      "MemoryInMB": "n",
      "ActiveTracing": "b",
    },
  }, root);
}

function toCanaryStatus(root: jsonP.JSONValue): s.CanaryStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.CanaryState>(x),
      "StateReason": "s",
      "StateReasonCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.CanaryStateReasonCode>(x),
    },
  }, root);
}

function toCanaryTimeline(root: jsonP.JSONValue): s.CanaryTimeline {
  return jsonP.readObj({
    required: {},
    optional: {
      "Created": "d",
      "LastModified": "d",
      "LastStarted": "d",
      "LastStopped": "d",
    },
  }, root);
}

function toVpcConfigOutput(root: jsonP.JSONValue): s.VpcConfigOutput {
  return jsonP.readObj({
    required: {},
    optional: {
      "VpcId": "s",
      "SubnetIds": ["s"],
      "SecurityGroupIds": ["s"],
    },
  }, root);
}

function toCanaryLastRun(root: jsonP.JSONValue): s.CanaryLastRun {
  return jsonP.readObj({
    required: {},
    optional: {
      "CanaryName": "s",
      "LastRun": toCanaryRun,
    },
  }, root);
}

function toCanaryRun(root: jsonP.JSONValue): s.CanaryRun {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "Name": "s",
      "Status": toCanaryRunStatus,
      "Timeline": toCanaryRunTimeline,
      "ArtifactS3Location": "s",
    },
  }, root);
}

function toCanaryRunStatus(root: jsonP.JSONValue): s.CanaryRunStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.CanaryRunState>(x),
      "StateReason": "s",
      "StateReasonCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.CanaryRunStateReasonCode>(x),
    },
  }, root);
}

function toCanaryRunTimeline(root: jsonP.JSONValue): s.CanaryRunTimeline {
  return jsonP.readObj({
    required: {},
    optional: {
      "Started": "d",
      "Completed": "d",
    },
  }, root);
}

function toRuntimeVersion(root: jsonP.JSONValue): s.RuntimeVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "VersionName": "s",
      "Description": "s",
      "ReleaseDate": "d",
      "DeprecationDate": "d",
    },
  }, root);
}
