// Autogenerated API client for: AWS Migration Hub Config

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MigrationHubConfig {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MigrationHubConfig.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-06-30",
    "endpointPrefix": "migrationhub-config",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Migration Hub Config",
    "serviceId": "MigrationHub Config",
    "signatureVersion": "v4",
    "signingName": "mgh",
    "targetPrefix": "AWSMigrationHubMultiAccountService",
    "uid": "migrationhub-config-2019-06-30"
  };

  async createHomeRegionControl(
    {abortSignal, ...params}: RequestConfig & s.CreateHomeRegionControlRequest,
  ): Promise<s.CreateHomeRegionControlResult> {
    const body: jsonP.JSONObject = {
      HomeRegion: params["HomeRegion"],
      Target: fromTarget(params["Target"]),
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateHomeRegionControl",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HomeRegionControl": toHomeRegionControl,
      },
    }, await resp.json());
  }

  async describeHomeRegionControls(
    {abortSignal, ...params}: RequestConfig & s.DescribeHomeRegionControlsRequest = {},
  ): Promise<s.DescribeHomeRegionControlsResult> {
    const body: jsonP.JSONObject = {
      ControlId: params["ControlId"],
      HomeRegion: params["HomeRegion"],
      Target: fromTarget(params["Target"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeHomeRegionControls",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HomeRegionControls": [toHomeRegionControl],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getHomeRegion(
    {abortSignal, ...params}: RequestConfig & s.GetHomeRegionRequest = {},
  ): Promise<s.GetHomeRegionResult> {
    const body: jsonP.JSONObject = {
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetHomeRegion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HomeRegion": "s",
      },
    }, await resp.json());
  }

}

function fromTarget(input?: s.Target | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Id: input["Id"],
  }
}
function toTarget(root: jsonP.JSONValue): s.Target {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.TargetType>(x),
    },
    optional: {
      "Id": "s",
    },
  }, root);
}

function toHomeRegionControl(root: jsonP.JSONValue): s.HomeRegionControl {
  return jsonP.readObj({
    required: {},
    optional: {
      "ControlId": "s",
      "HomeRegion": "s",
      "Target": toTarget,
      "RequestedTime": "d",
    },
  }, root);
}
