// Autogenerated API client for: Amazon Comprehend

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Comprehend {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Comprehend.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-11-27",
    "endpointPrefix": "comprehend",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Comprehend",
    "serviceId": "Comprehend",
    "signatureVersion": "v4",
    "signingName": "comprehend",
    "targetPrefix": "Comprehend_20171127",
    "uid": "comprehend-2017-11-27"
  };

  async batchDetectDominantLanguage(
    {abortSignal, ...params}: RequestConfig & BatchDetectDominantLanguageRequest,
  ): Promise<BatchDetectDominantLanguageResponse> {
    const body: jsonP.JSONObject = {
      TextList: params["TextList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDetectDominantLanguage",
    });
    return jsonP.readObj({
      required: {
        "ResultList": [toBatchDetectDominantLanguageItemResult],
        "ErrorList": [toBatchItemError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchDetectEntities(
    {abortSignal, ...params}: RequestConfig & BatchDetectEntitiesRequest,
  ): Promise<BatchDetectEntitiesResponse> {
    const body: jsonP.JSONObject = {
      TextList: params["TextList"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDetectEntities",
    });
    return jsonP.readObj({
      required: {
        "ResultList": [toBatchDetectEntitiesItemResult],
        "ErrorList": [toBatchItemError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchDetectKeyPhrases(
    {abortSignal, ...params}: RequestConfig & BatchDetectKeyPhrasesRequest,
  ): Promise<BatchDetectKeyPhrasesResponse> {
    const body: jsonP.JSONObject = {
      TextList: params["TextList"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDetectKeyPhrases",
    });
    return jsonP.readObj({
      required: {
        "ResultList": [toBatchDetectKeyPhrasesItemResult],
        "ErrorList": [toBatchItemError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchDetectSentiment(
    {abortSignal, ...params}: RequestConfig & BatchDetectSentimentRequest,
  ): Promise<BatchDetectSentimentResponse> {
    const body: jsonP.JSONObject = {
      TextList: params["TextList"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDetectSentiment",
    });
    return jsonP.readObj({
      required: {
        "ResultList": [toBatchDetectSentimentItemResult],
        "ErrorList": [toBatchItemError],
      },
      optional: {},
    }, await resp.json());
  }

  async batchDetectSyntax(
    {abortSignal, ...params}: RequestConfig & BatchDetectSyntaxRequest,
  ): Promise<BatchDetectSyntaxResponse> {
    const body: jsonP.JSONObject = {
      TextList: params["TextList"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDetectSyntax",
    });
    return jsonP.readObj({
      required: {
        "ResultList": [toBatchDetectSyntaxItemResult],
        "ErrorList": [toBatchItemError],
      },
      optional: {},
    }, await resp.json());
  }

  async classifyDocument(
    {abortSignal, ...params}: RequestConfig & ClassifyDocumentRequest,
  ): Promise<ClassifyDocumentResponse> {
    const body: jsonP.JSONObject = {
      Text: params["Text"],
      EndpointArn: params["EndpointArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ClassifyDocument",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Classes": [toDocumentClass],
        "Labels": [toDocumentLabel],
      },
    }, await resp.json());
  }

  async createDocumentClassifier(
    {abortSignal, ...params}: RequestConfig & CreateDocumentClassifierRequest,
  ): Promise<CreateDocumentClassifierResponse> {
    const body: jsonP.JSONObject = {
      DocumentClassifierName: params["DocumentClassifierName"],
      DataAccessRoleArn: params["DataAccessRoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      InputDataConfig: fromDocumentClassifierInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromDocumentClassifierOutputDataConfig(params["OutputDataConfig"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      LanguageCode: params["LanguageCode"],
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
      Mode: params["Mode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDocumentClassifier",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentClassifierArn": "s",
      },
    }, await resp.json());
  }

  async createEndpoint(
    {abortSignal, ...params}: RequestConfig & CreateEndpointRequest,
  ): Promise<CreateEndpointResponse> {
    const body: jsonP.JSONObject = {
      EndpointName: params["EndpointName"],
      ModelArn: params["ModelArn"],
      DesiredInferenceUnits: params["DesiredInferenceUnits"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointArn": "s",
      },
    }, await resp.json());
  }

  async createEntityRecognizer(
    {abortSignal, ...params}: RequestConfig & CreateEntityRecognizerRequest,
  ): Promise<CreateEntityRecognizerResponse> {
    const body: jsonP.JSONObject = {
      RecognizerName: params["RecognizerName"],
      DataAccessRoleArn: params["DataAccessRoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      InputDataConfig: fromEntityRecognizerInputDataConfig(params["InputDataConfig"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      LanguageCode: params["LanguageCode"],
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEntityRecognizer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntityRecognizerArn": "s",
      },
    }, await resp.json());
  }

  async deleteDocumentClassifier(
    {abortSignal, ...params}: RequestConfig & DeleteDocumentClassifierRequest,
  ): Promise<DeleteDocumentClassifierResponse> {
    const body: jsonP.JSONObject = {
      DocumentClassifierArn: params["DocumentClassifierArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDocumentClassifier",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEndpoint(
    {abortSignal, ...params}: RequestConfig & DeleteEndpointRequest,
  ): Promise<DeleteEndpointResponse> {
    const body: jsonP.JSONObject = {
      EndpointArn: params["EndpointArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEntityRecognizer(
    {abortSignal, ...params}: RequestConfig & DeleteEntityRecognizerRequest,
  ): Promise<DeleteEntityRecognizerResponse> {
    const body: jsonP.JSONObject = {
      EntityRecognizerArn: params["EntityRecognizerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEntityRecognizer",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeDocumentClassificationJob(
    {abortSignal, ...params}: RequestConfig & DescribeDocumentClassificationJobRequest,
  ): Promise<DescribeDocumentClassificationJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDocumentClassificationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentClassificationJobProperties": toDocumentClassificationJobProperties,
      },
    }, await resp.json());
  }

  async describeDocumentClassifier(
    {abortSignal, ...params}: RequestConfig & DescribeDocumentClassifierRequest,
  ): Promise<DescribeDocumentClassifierResponse> {
    const body: jsonP.JSONObject = {
      DocumentClassifierArn: params["DocumentClassifierArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDocumentClassifier",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentClassifierProperties": toDocumentClassifierProperties,
      },
    }, await resp.json());
  }

  async describeDominantLanguageDetectionJob(
    {abortSignal, ...params}: RequestConfig & DescribeDominantLanguageDetectionJobRequest,
  ): Promise<DescribeDominantLanguageDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDominantLanguageDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DominantLanguageDetectionJobProperties": toDominantLanguageDetectionJobProperties,
      },
    }, await resp.json());
  }

  async describeEndpoint(
    {abortSignal, ...params}: RequestConfig & DescribeEndpointRequest,
  ): Promise<DescribeEndpointResponse> {
    const body: jsonP.JSONObject = {
      EndpointArn: params["EndpointArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointProperties": toEndpointProperties,
      },
    }, await resp.json());
  }

  async describeEntitiesDetectionJob(
    {abortSignal, ...params}: RequestConfig & DescribeEntitiesDetectionJobRequest,
  ): Promise<DescribeEntitiesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEntitiesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntitiesDetectionJobProperties": toEntitiesDetectionJobProperties,
      },
    }, await resp.json());
  }

  async describeEntityRecognizer(
    {abortSignal, ...params}: RequestConfig & DescribeEntityRecognizerRequest,
  ): Promise<DescribeEntityRecognizerResponse> {
    const body: jsonP.JSONObject = {
      EntityRecognizerArn: params["EntityRecognizerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEntityRecognizer",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntityRecognizerProperties": toEntityRecognizerProperties,
      },
    }, await resp.json());
  }

  async describeKeyPhrasesDetectionJob(
    {abortSignal, ...params}: RequestConfig & DescribeKeyPhrasesDetectionJobRequest,
  ): Promise<DescribeKeyPhrasesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeKeyPhrasesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "KeyPhrasesDetectionJobProperties": toKeyPhrasesDetectionJobProperties,
      },
    }, await resp.json());
  }

  async describePiiEntitiesDetectionJob(
    {abortSignal, ...params}: RequestConfig & DescribePiiEntitiesDetectionJobRequest,
  ): Promise<DescribePiiEntitiesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePiiEntitiesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PiiEntitiesDetectionJobProperties": toPiiEntitiesDetectionJobProperties,
      },
    }, await resp.json());
  }

  async describeSentimentDetectionJob(
    {abortSignal, ...params}: RequestConfig & DescribeSentimentDetectionJobRequest,
  ): Promise<DescribeSentimentDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSentimentDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SentimentDetectionJobProperties": toSentimentDetectionJobProperties,
      },
    }, await resp.json());
  }

  async describeTopicsDetectionJob(
    {abortSignal, ...params}: RequestConfig & DescribeTopicsDetectionJobRequest,
  ): Promise<DescribeTopicsDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTopicsDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TopicsDetectionJobProperties": toTopicsDetectionJobProperties,
      },
    }, await resp.json());
  }

  async detectDominantLanguage(
    {abortSignal, ...params}: RequestConfig & DetectDominantLanguageRequest,
  ): Promise<DetectDominantLanguageResponse> {
    const body: jsonP.JSONObject = {
      Text: params["Text"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectDominantLanguage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Languages": [toDominantLanguage],
      },
    }, await resp.json());
  }

  async detectEntities(
    {abortSignal, ...params}: RequestConfig & DetectEntitiesRequest,
  ): Promise<DetectEntitiesResponse> {
    const body: jsonP.JSONObject = {
      Text: params["Text"],
      LanguageCode: params["LanguageCode"],
      EndpointArn: params["EndpointArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectEntities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Entities": [toEntity],
      },
    }, await resp.json());
  }

  async detectKeyPhrases(
    {abortSignal, ...params}: RequestConfig & DetectKeyPhrasesRequest,
  ): Promise<DetectKeyPhrasesResponse> {
    const body: jsonP.JSONObject = {
      Text: params["Text"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectKeyPhrases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "KeyPhrases": [toKeyPhrase],
      },
    }, await resp.json());
  }

  async detectPiiEntities(
    {abortSignal, ...params}: RequestConfig & DetectPiiEntitiesRequest,
  ): Promise<DetectPiiEntitiesResponse> {
    const body: jsonP.JSONObject = {
      Text: params["Text"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectPiiEntities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Entities": [toPiiEntity],
      },
    }, await resp.json());
  }

  async detectSentiment(
    {abortSignal, ...params}: RequestConfig & DetectSentimentRequest,
  ): Promise<DetectSentimentResponse> {
    const body: jsonP.JSONObject = {
      Text: params["Text"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectSentiment",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Sentiment": (x: jsonP.JSONValue) => cmnP.readEnum<SentimentType>(x),
        "SentimentScore": toSentimentScore,
      },
    }, await resp.json());
  }

  async detectSyntax(
    {abortSignal, ...params}: RequestConfig & DetectSyntaxRequest,
  ): Promise<DetectSyntaxResponse> {
    const body: jsonP.JSONObject = {
      Text: params["Text"],
      LanguageCode: params["LanguageCode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetectSyntax",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SyntaxTokens": [toSyntaxToken],
      },
    }, await resp.json());
  }

  async listDocumentClassificationJobs(
    {abortSignal, ...params}: RequestConfig & ListDocumentClassificationJobsRequest = {},
  ): Promise<ListDocumentClassificationJobsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromDocumentClassificationJobFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDocumentClassificationJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentClassificationJobPropertiesList": [toDocumentClassificationJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDocumentClassifiers(
    {abortSignal, ...params}: RequestConfig & ListDocumentClassifiersRequest = {},
  ): Promise<ListDocumentClassifiersResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromDocumentClassifierFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDocumentClassifiers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DocumentClassifierPropertiesList": [toDocumentClassifierProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDominantLanguageDetectionJobs(
    {abortSignal, ...params}: RequestConfig & ListDominantLanguageDetectionJobsRequest = {},
  ): Promise<ListDominantLanguageDetectionJobsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromDominantLanguageDetectionJobFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDominantLanguageDetectionJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DominantLanguageDetectionJobPropertiesList": [toDominantLanguageDetectionJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEndpoints(
    {abortSignal, ...params}: RequestConfig & ListEndpointsRequest = {},
  ): Promise<ListEndpointsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromEndpointFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEndpoints",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EndpointPropertiesList": [toEndpointProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEntitiesDetectionJobs(
    {abortSignal, ...params}: RequestConfig & ListEntitiesDetectionJobsRequest = {},
  ): Promise<ListEntitiesDetectionJobsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromEntitiesDetectionJobFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEntitiesDetectionJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntitiesDetectionJobPropertiesList": [toEntitiesDetectionJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEntityRecognizers(
    {abortSignal, ...params}: RequestConfig & ListEntityRecognizersRequest = {},
  ): Promise<ListEntityRecognizersResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromEntityRecognizerFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEntityRecognizers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EntityRecognizerPropertiesList": [toEntityRecognizerProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listKeyPhrasesDetectionJobs(
    {abortSignal, ...params}: RequestConfig & ListKeyPhrasesDetectionJobsRequest = {},
  ): Promise<ListKeyPhrasesDetectionJobsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromKeyPhrasesDetectionJobFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListKeyPhrasesDetectionJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "KeyPhrasesDetectionJobPropertiesList": [toKeyPhrasesDetectionJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPiiEntitiesDetectionJobs(
    {abortSignal, ...params}: RequestConfig & ListPiiEntitiesDetectionJobsRequest = {},
  ): Promise<ListPiiEntitiesDetectionJobsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromPiiEntitiesDetectionJobFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPiiEntitiesDetectionJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PiiEntitiesDetectionJobPropertiesList": [toPiiEntitiesDetectionJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSentimentDetectionJobs(
    {abortSignal, ...params}: RequestConfig & ListSentimentDetectionJobsRequest = {},
  ): Promise<ListSentimentDetectionJobsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromSentimentDetectionJobFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSentimentDetectionJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SentimentDetectionJobPropertiesList": [toSentimentDetectionJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceArn": "s",
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listTopicsDetectionJobs(
    {abortSignal, ...params}: RequestConfig & ListTopicsDetectionJobsRequest = {},
  ): Promise<ListTopicsDetectionJobsResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromTopicsDetectionJobFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTopicsDetectionJobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TopicsDetectionJobPropertiesList": [toTopicsDetectionJobProperties],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startDocumentClassificationJob(
    {abortSignal, ...params}: RequestConfig & StartDocumentClassificationJobRequest,
  ): Promise<StartDocumentClassificationJobResponse> {
    const body: jsonP.JSONObject = {
      JobName: params["JobName"],
      DocumentClassifierArn: params["DocumentClassifierArn"],
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DataAccessRoleArn: params["DataAccessRoleArn"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDocumentClassificationJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async startDominantLanguageDetectionJob(
    {abortSignal, ...params}: RequestConfig & StartDominantLanguageDetectionJobRequest,
  ): Promise<StartDominantLanguageDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DataAccessRoleArn: params["DataAccessRoleArn"],
      JobName: params["JobName"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDominantLanguageDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async startEntitiesDetectionJob(
    {abortSignal, ...params}: RequestConfig & StartEntitiesDetectionJobRequest,
  ): Promise<StartEntitiesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DataAccessRoleArn: params["DataAccessRoleArn"],
      JobName: params["JobName"],
      EntityRecognizerArn: params["EntityRecognizerArn"],
      LanguageCode: params["LanguageCode"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartEntitiesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async startKeyPhrasesDetectionJob(
    {abortSignal, ...params}: RequestConfig & StartKeyPhrasesDetectionJobRequest,
  ): Promise<StartKeyPhrasesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DataAccessRoleArn: params["DataAccessRoleArn"],
      JobName: params["JobName"],
      LanguageCode: params["LanguageCode"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartKeyPhrasesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async startPiiEntitiesDetectionJob(
    {abortSignal, ...params}: RequestConfig & StartPiiEntitiesDetectionJobRequest,
  ): Promise<StartPiiEntitiesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      Mode: params["Mode"],
      RedactionConfig: fromRedactionConfig(params["RedactionConfig"]),
      DataAccessRoleArn: params["DataAccessRoleArn"],
      JobName: params["JobName"],
      LanguageCode: params["LanguageCode"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartPiiEntitiesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async startSentimentDetectionJob(
    {abortSignal, ...params}: RequestConfig & StartSentimentDetectionJobRequest,
  ): Promise<StartSentimentDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DataAccessRoleArn: params["DataAccessRoleArn"],
      JobName: params["JobName"],
      LanguageCode: params["LanguageCode"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSentimentDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async startTopicsDetectionJob(
    {abortSignal, ...params}: RequestConfig & StartTopicsDetectionJobRequest,
  ): Promise<StartTopicsDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DataAccessRoleArn: params["DataAccessRoleArn"],
      JobName: params["JobName"],
      NumberOfTopics: params["NumberOfTopics"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      VolumeKmsKeyId: params["VolumeKmsKeyId"],
      VpcConfig: fromVpcConfig(params["VpcConfig"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartTopicsDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async stopDominantLanguageDetectionJob(
    {abortSignal, ...params}: RequestConfig & StopDominantLanguageDetectionJobRequest,
  ): Promise<StopDominantLanguageDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopDominantLanguageDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async stopEntitiesDetectionJob(
    {abortSignal, ...params}: RequestConfig & StopEntitiesDetectionJobRequest,
  ): Promise<StopEntitiesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopEntitiesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async stopKeyPhrasesDetectionJob(
    {abortSignal, ...params}: RequestConfig & StopKeyPhrasesDetectionJobRequest,
  ): Promise<StopKeyPhrasesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopKeyPhrasesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async stopPiiEntitiesDetectionJob(
    {abortSignal, ...params}: RequestConfig & StopPiiEntitiesDetectionJobRequest,
  ): Promise<StopPiiEntitiesDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopPiiEntitiesDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async stopSentimentDetectionJob(
    {abortSignal, ...params}: RequestConfig & StopSentimentDetectionJobRequest,
  ): Promise<StopSentimentDetectionJobResponse> {
    const body: jsonP.JSONObject = {
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopSentimentDetectionJob",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
    }, await resp.json());
  }

  async stopTrainingDocumentClassifier(
    {abortSignal, ...params}: RequestConfig & StopTrainingDocumentClassifierRequest,
  ): Promise<StopTrainingDocumentClassifierResponse> {
    const body: jsonP.JSONObject = {
      DocumentClassifierArn: params["DocumentClassifierArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopTrainingDocumentClassifier",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopTrainingEntityRecognizer(
    {abortSignal, ...params}: RequestConfig & StopTrainingEntityRecognizerRequest,
  ): Promise<StopTrainingEntityRecognizerResponse> {
    const body: jsonP.JSONObject = {
      EntityRecognizerArn: params["EntityRecognizerArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopTrainingEntityRecognizer",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateEndpoint(
    {abortSignal, ...params}: RequestConfig & UpdateEndpointRequest,
  ): Promise<UpdateEndpointResponse> {
    const body: jsonP.JSONObject = {
      EndpointArn: params["EndpointArn"],
      DesiredInferenceUnits: params["DesiredInferenceUnits"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEndpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface BatchDetectDominantLanguageRequest {
  TextList: string[];
}

// refs: 1 - tags: named, input
export interface BatchDetectEntitiesRequest {
  TextList: string[];
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface BatchDetectKeyPhrasesRequest {
  TextList: string[];
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface BatchDetectSentimentRequest {
  TextList: string[];
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface BatchDetectSyntaxRequest {
  TextList: string[];
  LanguageCode: SyntaxLanguageCode;
}

// refs: 1 - tags: named, input
export interface ClassifyDocumentRequest {
  Text: string;
  EndpointArn: string;
}

// refs: 1 - tags: named, input
export interface CreateDocumentClassifierRequest {
  DocumentClassifierName: string;
  DataAccessRoleArn: string;
  Tags?: Tag[] | null;
  InputDataConfig: DocumentClassifierInputDataConfig;
  OutputDataConfig?: DocumentClassifierOutputDataConfig | null;
  ClientRequestToken?: string | null;
  LanguageCode: LanguageCode;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
  Mode?: DocumentClassifierMode | null;
}

// refs: 1 - tags: named, input
export interface CreateEndpointRequest {
  EndpointName: string;
  ModelArn: string;
  DesiredInferenceUnits: number;
  ClientRequestToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateEntityRecognizerRequest {
  RecognizerName: string;
  DataAccessRoleArn: string;
  Tags?: Tag[] | null;
  InputDataConfig: EntityRecognizerInputDataConfig;
  ClientRequestToken?: string | null;
  LanguageCode: LanguageCode;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}

// refs: 1 - tags: named, input
export interface DeleteDocumentClassifierRequest {
  DocumentClassifierArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteEndpointRequest {
  EndpointArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteEntityRecognizerRequest {
  EntityRecognizerArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeDocumentClassificationJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDocumentClassifierRequest {
  DocumentClassifierArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeDominantLanguageDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeEndpointRequest {
  EndpointArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeEntitiesDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeEntityRecognizerRequest {
  EntityRecognizerArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeKeyPhrasesDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribePiiEntitiesDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeSentimentDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeTopicsDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DetectDominantLanguageRequest {
  Text: string;
}

// refs: 1 - tags: named, input
export interface DetectEntitiesRequest {
  Text: string;
  LanguageCode?: LanguageCode | null;
  EndpointArn?: string | null;
}

// refs: 1 - tags: named, input
export interface DetectKeyPhrasesRequest {
  Text: string;
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface DetectPiiEntitiesRequest {
  Text: string;
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface DetectSentimentRequest {
  Text: string;
  LanguageCode: LanguageCode;
}

// refs: 1 - tags: named, input
export interface DetectSyntaxRequest {
  Text: string;
  LanguageCode: SyntaxLanguageCode;
}

// refs: 1 - tags: named, input
export interface ListDocumentClassificationJobsRequest {
  Filter?: DocumentClassificationJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDocumentClassifiersRequest {
  Filter?: DocumentClassifierFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDominantLanguageDetectionJobsRequest {
  Filter?: DominantLanguageDetectionJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListEndpointsRequest {
  Filter?: EndpointFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListEntitiesDetectionJobsRequest {
  Filter?: EntitiesDetectionJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListEntityRecognizersRequest {
  Filter?: EntityRecognizerFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListKeyPhrasesDetectionJobsRequest {
  Filter?: KeyPhrasesDetectionJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPiiEntitiesDetectionJobsRequest {
  Filter?: PiiEntitiesDetectionJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSentimentDetectionJobsRequest {
  Filter?: SentimentDetectionJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListTopicsDetectionJobsRequest {
  Filter?: TopicsDetectionJobFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface StartDocumentClassificationJobRequest {
  JobName?: string | null;
  DocumentClassifierArn: string;
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  ClientRequestToken?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}

// refs: 1 - tags: named, input
export interface StartDominantLanguageDetectionJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  ClientRequestToken?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}

// refs: 1 - tags: named, input
export interface StartEntitiesDetectionJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  EntityRecognizerArn?: string | null;
  LanguageCode: LanguageCode;
  ClientRequestToken?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}

// refs: 1 - tags: named, input
export interface StartKeyPhrasesDetectionJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  LanguageCode: LanguageCode;
  ClientRequestToken?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}

// refs: 1 - tags: named, input
export interface StartPiiEntitiesDetectionJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  Mode: PiiEntitiesDetectionMode;
  RedactionConfig?: RedactionConfig | null;
  DataAccessRoleArn: string;
  JobName?: string | null;
  LanguageCode: LanguageCode;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface StartSentimentDetectionJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  LanguageCode: LanguageCode;
  ClientRequestToken?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}

// refs: 1 - tags: named, input
export interface StartTopicsDetectionJobRequest {
  InputDataConfig: InputDataConfig;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn: string;
  JobName?: string | null;
  NumberOfTopics?: number | null;
  ClientRequestToken?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}

// refs: 1 - tags: named, input
export interface StopDominantLanguageDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopEntitiesDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopKeyPhrasesDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopPiiEntitiesDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopSentimentDetectionJobRequest {
  JobId: string;
}

// refs: 1 - tags: named, input
export interface StopTrainingDocumentClassifierRequest {
  DocumentClassifierArn: string;
}

// refs: 1 - tags: named, input
export interface StopTrainingEntityRecognizerRequest {
  EntityRecognizerArn: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateEndpointRequest {
  EndpointArn: string;
  DesiredInferenceUnits: number;
}

// refs: 1 - tags: named, output
export interface BatchDetectDominantLanguageResponse {
  ResultList: BatchDetectDominantLanguageItemResult[];
  ErrorList: BatchItemError[];
}

// refs: 1 - tags: named, output
export interface BatchDetectEntitiesResponse {
  ResultList: BatchDetectEntitiesItemResult[];
  ErrorList: BatchItemError[];
}

// refs: 1 - tags: named, output
export interface BatchDetectKeyPhrasesResponse {
  ResultList: BatchDetectKeyPhrasesItemResult[];
  ErrorList: BatchItemError[];
}

// refs: 1 - tags: named, output
export interface BatchDetectSentimentResponse {
  ResultList: BatchDetectSentimentItemResult[];
  ErrorList: BatchItemError[];
}

// refs: 1 - tags: named, output
export interface BatchDetectSyntaxResponse {
  ResultList: BatchDetectSyntaxItemResult[];
  ErrorList: BatchItemError[];
}

// refs: 1 - tags: named, output
export interface ClassifyDocumentResponse {
  Classes?: DocumentClass[] | null;
  Labels?: DocumentLabel[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDocumentClassifierResponse {
  DocumentClassifierArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateEndpointResponse {
  EndpointArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateEntityRecognizerResponse {
  EntityRecognizerArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteDocumentClassifierResponse {
}

// refs: 1 - tags: named, output
export interface DeleteEndpointResponse {
}

// refs: 1 - tags: named, output
export interface DeleteEntityRecognizerResponse {
}

// refs: 1 - tags: named, output
export interface DescribeDocumentClassificationJobResponse {
  DocumentClassificationJobProperties?: DocumentClassificationJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeDocumentClassifierResponse {
  DocumentClassifierProperties?: DocumentClassifierProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeDominantLanguageDetectionJobResponse {
  DominantLanguageDetectionJobProperties?: DominantLanguageDetectionJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeEndpointResponse {
  EndpointProperties?: EndpointProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeEntitiesDetectionJobResponse {
  EntitiesDetectionJobProperties?: EntitiesDetectionJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeEntityRecognizerResponse {
  EntityRecognizerProperties?: EntityRecognizerProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeKeyPhrasesDetectionJobResponse {
  KeyPhrasesDetectionJobProperties?: KeyPhrasesDetectionJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribePiiEntitiesDetectionJobResponse {
  PiiEntitiesDetectionJobProperties?: PiiEntitiesDetectionJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeSentimentDetectionJobResponse {
  SentimentDetectionJobProperties?: SentimentDetectionJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DescribeTopicsDetectionJobResponse {
  TopicsDetectionJobProperties?: TopicsDetectionJobProperties | null;
}

// refs: 1 - tags: named, output
export interface DetectDominantLanguageResponse {
  Languages?: DominantLanguage[] | null;
}

// refs: 1 - tags: named, output
export interface DetectEntitiesResponse {
  Entities?: Entity[] | null;
}

// refs: 1 - tags: named, output
export interface DetectKeyPhrasesResponse {
  KeyPhrases?: KeyPhrase[] | null;
}

// refs: 1 - tags: named, output
export interface DetectPiiEntitiesResponse {
  Entities?: PiiEntity[] | null;
}

// refs: 1 - tags: named, output
export interface DetectSentimentResponse {
  Sentiment?: SentimentType | null;
  SentimentScore?: SentimentScore | null;
}

// refs: 1 - tags: named, output
export interface DetectSyntaxResponse {
  SyntaxTokens?: SyntaxToken[] | null;
}

// refs: 1 - tags: named, output
export interface ListDocumentClassificationJobsResponse {
  DocumentClassificationJobPropertiesList?: DocumentClassificationJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDocumentClassifiersResponse {
  DocumentClassifierPropertiesList?: DocumentClassifierProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDominantLanguageDetectionJobsResponse {
  DominantLanguageDetectionJobPropertiesList?: DominantLanguageDetectionJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEndpointsResponse {
  EndpointPropertiesList?: EndpointProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEntitiesDetectionJobsResponse {
  EntitiesDetectionJobPropertiesList?: EntitiesDetectionJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListEntityRecognizersResponse {
  EntityRecognizerPropertiesList?: EntityRecognizerProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListKeyPhrasesDetectionJobsResponse {
  KeyPhrasesDetectionJobPropertiesList?: KeyPhrasesDetectionJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPiiEntitiesDetectionJobsResponse {
  PiiEntitiesDetectionJobPropertiesList?: PiiEntitiesDetectionJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSentimentDetectionJobsResponse {
  SentimentDetectionJobPropertiesList?: SentimentDetectionJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  ResourceArn?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListTopicsDetectionJobsResponse {
  TopicsDetectionJobPropertiesList?: TopicsDetectionJobProperties[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartDocumentClassificationJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StartDominantLanguageDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StartEntitiesDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StartKeyPhrasesDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StartPiiEntitiesDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StartSentimentDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StartTopicsDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StopDominantLanguageDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StopEntitiesDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StopKeyPhrasesDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StopPiiEntitiesDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StopSentimentDetectionJobResponse {
  JobId?: string | null;
  JobStatus?: JobStatus | null;
}

// refs: 1 - tags: named, output
export interface StopTrainingDocumentClassifierResponse {
}

// refs: 1 - tags: named, output
export interface StopTrainingEntityRecognizerResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateEndpointResponse {
}

// refs: 25 - tags: input, named, enum, output
export type LanguageCode =
| "en"
| "es"
| "fr"
| "de"
| "it"
| "pt"
| "ar"
| "hi"
| "ja"
| "ko"
| "zh"
| "zh-TW"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum
export type SyntaxLanguageCode =
| "en"
| "es"
| "fr"
| "de"
| "it"
| "pt"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DocumentClassifierInputDataConfig {
  DataFormat?: DocumentClassifierDataFormat | null;
  S3Uri?: string | null;
  LabelDelimiter?: string | null;
  AugmentedManifests?: AugmentedManifestsListItem[] | null;
}
function fromDocumentClassifierInputDataConfig(input?: DocumentClassifierInputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataFormat: input["DataFormat"],
    S3Uri: input["S3Uri"],
    LabelDelimiter: input["LabelDelimiter"],
    AugmentedManifests: input["AugmentedManifests"]?.map(x => fromAugmentedManifestsListItem(x)),
  }
}
function toDocumentClassifierInputDataConfig(root: jsonP.JSONValue): DocumentClassifierInputDataConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "DataFormat": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentClassifierDataFormat>(x),
      "S3Uri": "s",
      "LabelDelimiter": "s",
      "AugmentedManifests": [toAugmentedManifestsListItem],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DocumentClassifierDataFormat =
| "COMPREHEND_CSV"
| "AUGMENTED_MANIFEST"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface AugmentedManifestsListItem {
  S3Uri: string;
  AttributeNames: string[];
}
function fromAugmentedManifestsListItem(input?: AugmentedManifestsListItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
    AttributeNames: input["AttributeNames"],
  }
}
function toAugmentedManifestsListItem(root: jsonP.JSONValue): AugmentedManifestsListItem {
  return jsonP.readObj({
    required: {
      "S3Uri": "s",
      "AttributeNames": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DocumentClassifierOutputDataConfig {
  S3Uri?: string | null;
  KmsKeyId?: string | null;
}
function fromDocumentClassifierOutputDataConfig(input?: DocumentClassifierOutputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
    KmsKeyId: input["KmsKeyId"],
  }
}
function toDocumentClassifierOutputDataConfig(root: jsonP.JSONValue): DocumentClassifierOutputDataConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Uri": "s",
      "KmsKeyId": "s",
    },
  }, root);
}

// refs: 24 - tags: input, named, interface, output
export interface VpcConfig {
  SecurityGroupIds: string[];
  Subnets: string[];
}
function fromVpcConfig(input?: VpcConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SecurityGroupIds: input["SecurityGroupIds"],
    Subnets: input["Subnets"],
  }
}
function toVpcConfig(root: jsonP.JSONValue): VpcConfig {
  return jsonP.readObj({
    required: {
      "SecurityGroupIds": ["s"],
      "Subnets": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DocumentClassifierMode =
| "MULTI_CLASS"
| "MULTI_LABEL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface EntityRecognizerInputDataConfig {
  DataFormat?: EntityRecognizerDataFormat | null;
  EntityTypes: EntityTypesListItem[];
  Documents?: EntityRecognizerDocuments | null;
  Annotations?: EntityRecognizerAnnotations | null;
  EntityList?: EntityRecognizerEntityList | null;
  AugmentedManifests?: AugmentedManifestsListItem[] | null;
}
function fromEntityRecognizerInputDataConfig(input?: EntityRecognizerInputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataFormat: input["DataFormat"],
    EntityTypes: input["EntityTypes"]?.map(x => fromEntityTypesListItem(x)),
    Documents: fromEntityRecognizerDocuments(input["Documents"]),
    Annotations: fromEntityRecognizerAnnotations(input["Annotations"]),
    EntityList: fromEntityRecognizerEntityList(input["EntityList"]),
    AugmentedManifests: input["AugmentedManifests"]?.map(x => fromAugmentedManifestsListItem(x)),
  }
}
function toEntityRecognizerInputDataConfig(root: jsonP.JSONValue): EntityRecognizerInputDataConfig {
  return jsonP.readObj({
    required: {
      "EntityTypes": [toEntityTypesListItem],
    },
    optional: {
      "DataFormat": (x: jsonP.JSONValue) => cmnP.readEnum<EntityRecognizerDataFormat>(x),
      "Documents": toEntityRecognizerDocuments,
      "Annotations": toEntityRecognizerAnnotations,
      "EntityList": toEntityRecognizerEntityList,
      "AugmentedManifests": [toAugmentedManifestsListItem],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type EntityRecognizerDataFormat =
| "COMPREHEND_CSV"
| "AUGMENTED_MANIFEST"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface EntityTypesListItem {
  Type: string;
}
function fromEntityTypesListItem(input?: EntityTypesListItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
  }
}
function toEntityTypesListItem(root: jsonP.JSONValue): EntityTypesListItem {
  return jsonP.readObj({
    required: {
      "Type": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface EntityRecognizerDocuments {
  S3Uri: string;
}
function fromEntityRecognizerDocuments(input?: EntityRecognizerDocuments | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
  }
}
function toEntityRecognizerDocuments(root: jsonP.JSONValue): EntityRecognizerDocuments {
  return jsonP.readObj({
    required: {
      "S3Uri": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface EntityRecognizerAnnotations {
  S3Uri: string;
}
function fromEntityRecognizerAnnotations(input?: EntityRecognizerAnnotations | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
  }
}
function toEntityRecognizerAnnotations(root: jsonP.JSONValue): EntityRecognizerAnnotations {
  return jsonP.readObj({
    required: {
      "S3Uri": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface EntityRecognizerEntityList {
  S3Uri: string;
}
function fromEntityRecognizerEntityList(input?: EntityRecognizerEntityList | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
  }
}
function toEntityRecognizerEntityList(root: jsonP.JSONValue): EntityRecognizerEntityList {
  return jsonP.readObj({
    required: {
      "S3Uri": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface DocumentClassificationJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromDocumentClassificationJobFilter(input?: DocumentClassificationJobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobName: input["JobName"],
    JobStatus: input["JobStatus"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 33 - tags: input, named, enum, output
export type JobStatus =
| "SUBMITTED"
| "IN_PROGRESS"
| "COMPLETED"
| "FAILED"
| "STOP_REQUESTED"
| "STOPPED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DocumentClassifierFilter {
  Status?: ModelStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromDocumentClassifierFilter(input?: DocumentClassifierFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Status: input["Status"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 6 - tags: input, named, enum, output
export type ModelStatus =
| "SUBMITTED"
| "TRAINING"
| "DELETING"
| "STOP_REQUESTED"
| "STOPPED"
| "IN_ERROR"
| "TRAINED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DominantLanguageDetectionJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromDominantLanguageDetectionJobFilter(input?: DominantLanguageDetectionJobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobName: input["JobName"],
    JobStatus: input["JobStatus"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface EndpointFilter {
  ModelArn?: string | null;
  Status?: EndpointStatus | null;
  CreationTimeBefore?: Date | number | null;
  CreationTimeAfter?: Date | number | null;
}
function fromEndpointFilter(input?: EndpointFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ModelArn: input["ModelArn"],
    Status: input["Status"],
    CreationTimeBefore: jsonP.serializeDate_unixTimestamp(input["CreationTimeBefore"]),
    CreationTimeAfter: jsonP.serializeDate_unixTimestamp(input["CreationTimeAfter"]),
  }
}

// refs: 3 - tags: input, named, enum, output
export type EndpointStatus =
| "CREATING"
| "DELETING"
| "FAILED"
| "IN_SERVICE"
| "UPDATING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface EntitiesDetectionJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromEntitiesDetectionJobFilter(input?: EntitiesDetectionJobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobName: input["JobName"],
    JobStatus: input["JobStatus"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface EntityRecognizerFilter {
  Status?: ModelStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromEntityRecognizerFilter(input?: EntityRecognizerFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Status: input["Status"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface KeyPhrasesDetectionJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromKeyPhrasesDetectionJobFilter(input?: KeyPhrasesDetectionJobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobName: input["JobName"],
    JobStatus: input["JobStatus"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface PiiEntitiesDetectionJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromPiiEntitiesDetectionJobFilter(input?: PiiEntitiesDetectionJobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobName: input["JobName"],
    JobStatus: input["JobStatus"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface SentimentDetectionJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromSentimentDetectionJobFilter(input?: SentimentDetectionJobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobName: input["JobName"],
    JobStatus: input["JobStatus"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface TopicsDetectionJobFilter {
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  SubmitTimeBefore?: Date | number | null;
  SubmitTimeAfter?: Date | number | null;
}
function fromTopicsDetectionJobFilter(input?: TopicsDetectionJobFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    JobName: input["JobName"],
    JobStatus: input["JobStatus"],
    SubmitTimeBefore: jsonP.serializeDate_unixTimestamp(input["SubmitTimeBefore"]),
    SubmitTimeAfter: jsonP.serializeDate_unixTimestamp(input["SubmitTimeAfter"]),
  }
}

// refs: 21 - tags: input, named, interface, output
export interface InputDataConfig {
  S3Uri: string;
  InputFormat?: InputFormat | null;
}
function fromInputDataConfig(input?: InputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
    InputFormat: input["InputFormat"],
  }
}
function toInputDataConfig(root: jsonP.JSONValue): InputDataConfig {
  return jsonP.readObj({
    required: {
      "S3Uri": "s",
    },
    optional: {
      "InputFormat": (x: jsonP.JSONValue) => cmnP.readEnum<InputFormat>(x),
    },
  }, root);
}

// refs: 21 - tags: input, named, enum, output
export type InputFormat =
| "ONE_DOC_PER_FILE"
| "ONE_DOC_PER_LINE"
| cmnP.UnexpectedEnumValue;

// refs: 19 - tags: input, named, interface, output
export interface OutputDataConfig {
  S3Uri: string;
  KmsKeyId?: string | null;
}
function fromOutputDataConfig(input?: OutputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
    KmsKeyId: input["KmsKeyId"],
  }
}
function toOutputDataConfig(root: jsonP.JSONValue): OutputDataConfig {
  return jsonP.readObj({
    required: {
      "S3Uri": "s",
    },
    optional: {
      "KmsKeyId": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type PiiEntitiesDetectionMode =
| "ONLY_REDACTION"
| "ONLY_OFFSETS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface RedactionConfig {
  PiiEntityTypes?: PiiEntityType[] | null;
  MaskMode?: PiiEntitiesDetectionMaskMode | null;
  MaskCharacter?: string | null;
}
function fromRedactionConfig(input?: RedactionConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PiiEntityTypes: input["PiiEntityTypes"],
    MaskMode: input["MaskMode"],
    MaskCharacter: input["MaskCharacter"],
  }
}
function toRedactionConfig(root: jsonP.JSONValue): RedactionConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "PiiEntityTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<PiiEntityType>(x)],
      "MaskMode": (x: jsonP.JSONValue) => cmnP.readEnum<PiiEntitiesDetectionMaskMode>(x),
      "MaskCharacter": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type PiiEntityType =
| "BANK_ACCOUNT_NUMBER"
| "BANK_ROUTING"
| "CREDIT_DEBIT_NUMBER"
| "CREDIT_DEBIT_CVV"
| "CREDIT_DEBIT_EXPIRY"
| "PIN"
| "EMAIL"
| "ADDRESS"
| "NAME"
| "PHONE"
| "SSN"
| "DATE_TIME"
| "PASSPORT_NUMBER"
| "DRIVER_ID"
| "URL"
| "AGE"
| "USERNAME"
| "PASSWORD"
| "AWS_ACCESS_KEY"
| "AWS_SECRET_KEY"
| "IP_ADDRESS"
| "MAC_ADDRESS"
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type PiiEntitiesDetectionMaskMode =
| "MASK"
| "REPLACE_WITH_PII_ENTITY_TYPE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchDetectDominantLanguageItemResult {
  Index?: number | null;
  Languages?: DominantLanguage[] | null;
}
function toBatchDetectDominantLanguageItemResult(root: jsonP.JSONValue): BatchDetectDominantLanguageItemResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Index": "n",
      "Languages": [toDominantLanguage],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DominantLanguage {
  LanguageCode?: string | null;
  Score?: number | null;
}
function toDominantLanguage(root: jsonP.JSONValue): DominantLanguage {
  return jsonP.readObj({
    required: {},
    optional: {
      "LanguageCode": "s",
      "Score": "n",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface BatchItemError {
  Index?: number | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toBatchItemError(root: jsonP.JSONValue): BatchItemError {
  return jsonP.readObj({
    required: {},
    optional: {
      "Index": "n",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchDetectEntitiesItemResult {
  Index?: number | null;
  Entities?: Entity[] | null;
}
function toBatchDetectEntitiesItemResult(root: jsonP.JSONValue): BatchDetectEntitiesItemResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Index": "n",
      "Entities": [toEntity],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Entity {
  Score?: number | null;
  Type?: EntityType | null;
  Text?: string | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
}
function toEntity(root: jsonP.JSONValue): Entity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Score": "n",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<EntityType>(x),
      "Text": "s",
      "BeginOffset": "n",
      "EndOffset": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type EntityType =
| "PERSON"
| "LOCATION"
| "ORGANIZATION"
| "COMMERCIAL_ITEM"
| "EVENT"
| "DATE"
| "QUANTITY"
| "TITLE"
| "OTHER"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchDetectKeyPhrasesItemResult {
  Index?: number | null;
  KeyPhrases?: KeyPhrase[] | null;
}
function toBatchDetectKeyPhrasesItemResult(root: jsonP.JSONValue): BatchDetectKeyPhrasesItemResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Index": "n",
      "KeyPhrases": [toKeyPhrase],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface KeyPhrase {
  Score?: number | null;
  Text?: string | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
}
function toKeyPhrase(root: jsonP.JSONValue): KeyPhrase {
  return jsonP.readObj({
    required: {},
    optional: {
      "Score": "n",
      "Text": "s",
      "BeginOffset": "n",
      "EndOffset": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchDetectSentimentItemResult {
  Index?: number | null;
  Sentiment?: SentimentType | null;
  SentimentScore?: SentimentScore | null;
}
function toBatchDetectSentimentItemResult(root: jsonP.JSONValue): BatchDetectSentimentItemResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Index": "n",
      "Sentiment": (x: jsonP.JSONValue) => cmnP.readEnum<SentimentType>(x),
      "SentimentScore": toSentimentScore,
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type SentimentType =
| "POSITIVE"
| "NEGATIVE"
| "NEUTRAL"
| "MIXED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface SentimentScore {
  Positive?: number | null;
  Negative?: number | null;
  Neutral?: number | null;
  Mixed?: number | null;
}
function toSentimentScore(root: jsonP.JSONValue): SentimentScore {
  return jsonP.readObj({
    required: {},
    optional: {
      "Positive": "n",
      "Negative": "n",
      "Neutral": "n",
      "Mixed": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchDetectSyntaxItemResult {
  Index?: number | null;
  SyntaxTokens?: SyntaxToken[] | null;
}
function toBatchDetectSyntaxItemResult(root: jsonP.JSONValue): BatchDetectSyntaxItemResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Index": "n",
      "SyntaxTokens": [toSyntaxToken],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SyntaxToken {
  TokenId?: number | null;
  Text?: string | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
  PartOfSpeech?: PartOfSpeechTag | null;
}
function toSyntaxToken(root: jsonP.JSONValue): SyntaxToken {
  return jsonP.readObj({
    required: {},
    optional: {
      "TokenId": "n",
      "Text": "s",
      "BeginOffset": "n",
      "EndOffset": "n",
      "PartOfSpeech": toPartOfSpeechTag,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PartOfSpeechTag {
  Tag?: PartOfSpeechTagType | null;
  Score?: number | null;
}
function toPartOfSpeechTag(root: jsonP.JSONValue): PartOfSpeechTag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Tag": (x: jsonP.JSONValue) => cmnP.readEnum<PartOfSpeechTagType>(x),
      "Score": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type PartOfSpeechTagType =
| "ADJ"
| "ADP"
| "ADV"
| "AUX"
| "CONJ"
| "CCONJ"
| "DET"
| "INTJ"
| "NOUN"
| "NUM"
| "O"
| "PART"
| "PRON"
| "PROPN"
| "PUNCT"
| "SCONJ"
| "SYM"
| "VERB"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DocumentClass {
  Name?: string | null;
  Score?: number | null;
}
function toDocumentClass(root: jsonP.JSONValue): DocumentClass {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Score": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DocumentLabel {
  Name?: string | null;
  Score?: number | null;
}
function toDocumentLabel(root: jsonP.JSONValue): DocumentLabel {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Score": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DocumentClassificationJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  DocumentClassifierArn?: string | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: OutputDataConfig | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}
function toDocumentClassificationJobProperties(root: jsonP.JSONValue): DocumentClassificationJobProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "DocumentClassifierArn": "s",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toOutputDataConfig,
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DocumentClassifierProperties {
  DocumentClassifierArn?: string | null;
  LanguageCode?: LanguageCode | null;
  Status?: ModelStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  TrainingStartTime?: Date | number | null;
  TrainingEndTime?: Date | number | null;
  InputDataConfig?: DocumentClassifierInputDataConfig | null;
  OutputDataConfig?: DocumentClassifierOutputDataConfig | null;
  ClassifierMetadata?: ClassifierMetadata | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
  Mode?: DocumentClassifierMode | null;
}
function toDocumentClassifierProperties(root: jsonP.JSONValue): DocumentClassifierProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "DocumentClassifierArn": "s",
      "LanguageCode": (x: jsonP.JSONValue) => cmnP.readEnum<LanguageCode>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ModelStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "TrainingStartTime": "d",
      "TrainingEndTime": "d",
      "InputDataConfig": toDocumentClassifierInputDataConfig,
      "OutputDataConfig": toDocumentClassifierOutputDataConfig,
      "ClassifierMetadata": toClassifierMetadata,
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<DocumentClassifierMode>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ClassifierMetadata {
  NumberOfLabels?: number | null;
  NumberOfTrainedDocuments?: number | null;
  NumberOfTestDocuments?: number | null;
  EvaluationMetrics?: ClassifierEvaluationMetrics | null;
}
function toClassifierMetadata(root: jsonP.JSONValue): ClassifierMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "NumberOfLabels": "n",
      "NumberOfTrainedDocuments": "n",
      "NumberOfTestDocuments": "n",
      "EvaluationMetrics": toClassifierEvaluationMetrics,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ClassifierEvaluationMetrics {
  Accuracy?: number | null;
  Precision?: number | null;
  Recall?: number | null;
  F1Score?: number | null;
  MicroPrecision?: number | null;
  MicroRecall?: number | null;
  MicroF1Score?: number | null;
  HammingLoss?: number | null;
}
function toClassifierEvaluationMetrics(root: jsonP.JSONValue): ClassifierEvaluationMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "Accuracy": "n",
      "Precision": "n",
      "Recall": "n",
      "F1Score": "n",
      "MicroPrecision": "n",
      "MicroRecall": "n",
      "MicroF1Score": "n",
      "HammingLoss": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DominantLanguageDetectionJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: OutputDataConfig | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}
function toDominantLanguageDetectionJobProperties(root: jsonP.JSONValue): DominantLanguageDetectionJobProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toOutputDataConfig,
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EndpointProperties {
  EndpointArn?: string | null;
  Status?: EndpointStatus | null;
  Message?: string | null;
  ModelArn?: string | null;
  DesiredInferenceUnits?: number | null;
  CurrentInferenceUnits?: number | null;
  CreationTime?: Date | number | null;
  LastModifiedTime?: Date | number | null;
}
function toEndpointProperties(root: jsonP.JSONValue): EndpointProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndpointArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<EndpointStatus>(x),
      "Message": "s",
      "ModelArn": "s",
      "DesiredInferenceUnits": "n",
      "CurrentInferenceUnits": "n",
      "CreationTime": "d",
      "LastModifiedTime": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EntitiesDetectionJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  EntityRecognizerArn?: string | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: OutputDataConfig | null;
  LanguageCode?: LanguageCode | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}
function toEntitiesDetectionJobProperties(root: jsonP.JSONValue): EntitiesDetectionJobProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "EntityRecognizerArn": "s",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toOutputDataConfig,
      "LanguageCode": (x: jsonP.JSONValue) => cmnP.readEnum<LanguageCode>(x),
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EntityRecognizerProperties {
  EntityRecognizerArn?: string | null;
  LanguageCode?: LanguageCode | null;
  Status?: ModelStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  TrainingStartTime?: Date | number | null;
  TrainingEndTime?: Date | number | null;
  InputDataConfig?: EntityRecognizerInputDataConfig | null;
  RecognizerMetadata?: EntityRecognizerMetadata | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}
function toEntityRecognizerProperties(root: jsonP.JSONValue): EntityRecognizerProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "EntityRecognizerArn": "s",
      "LanguageCode": (x: jsonP.JSONValue) => cmnP.readEnum<LanguageCode>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ModelStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "TrainingStartTime": "d",
      "TrainingEndTime": "d",
      "InputDataConfig": toEntityRecognizerInputDataConfig,
      "RecognizerMetadata": toEntityRecognizerMetadata,
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EntityRecognizerMetadata {
  NumberOfTrainedDocuments?: number | null;
  NumberOfTestDocuments?: number | null;
  EvaluationMetrics?: EntityRecognizerEvaluationMetrics | null;
  EntityTypes?: EntityRecognizerMetadataEntityTypesListItem[] | null;
}
function toEntityRecognizerMetadata(root: jsonP.JSONValue): EntityRecognizerMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "NumberOfTrainedDocuments": "n",
      "NumberOfTestDocuments": "n",
      "EvaluationMetrics": toEntityRecognizerEvaluationMetrics,
      "EntityTypes": [toEntityRecognizerMetadataEntityTypesListItem],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EntityRecognizerEvaluationMetrics {
  Precision?: number | null;
  Recall?: number | null;
  F1Score?: number | null;
}
function toEntityRecognizerEvaluationMetrics(root: jsonP.JSONValue): EntityRecognizerEvaluationMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "Precision": "n",
      "Recall": "n",
      "F1Score": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EntityRecognizerMetadataEntityTypesListItem {
  Type?: string | null;
  EvaluationMetrics?: EntityTypesEvaluationMetrics | null;
  NumberOfTrainMentions?: number | null;
}
function toEntityRecognizerMetadataEntityTypesListItem(root: jsonP.JSONValue): EntityRecognizerMetadataEntityTypesListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": "s",
      "EvaluationMetrics": toEntityTypesEvaluationMetrics,
      "NumberOfTrainMentions": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EntityTypesEvaluationMetrics {
  Precision?: number | null;
  Recall?: number | null;
  F1Score?: number | null;
}
function toEntityTypesEvaluationMetrics(root: jsonP.JSONValue): EntityTypesEvaluationMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "Precision": "n",
      "Recall": "n",
      "F1Score": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface KeyPhrasesDetectionJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: OutputDataConfig | null;
  LanguageCode?: LanguageCode | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}
function toKeyPhrasesDetectionJobProperties(root: jsonP.JSONValue): KeyPhrasesDetectionJobProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toOutputDataConfig,
      "LanguageCode": (x: jsonP.JSONValue) => cmnP.readEnum<LanguageCode>(x),
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PiiEntitiesDetectionJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: PiiOutputDataConfig | null;
  RedactionConfig?: RedactionConfig | null;
  LanguageCode?: LanguageCode | null;
  DataAccessRoleArn?: string | null;
  Mode?: PiiEntitiesDetectionMode | null;
}
function toPiiEntitiesDetectionJobProperties(root: jsonP.JSONValue): PiiEntitiesDetectionJobProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toPiiOutputDataConfig,
      "RedactionConfig": toRedactionConfig,
      "LanguageCode": (x: jsonP.JSONValue) => cmnP.readEnum<LanguageCode>(x),
      "DataAccessRoleArn": "s",
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<PiiEntitiesDetectionMode>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PiiOutputDataConfig {
  S3Uri: string;
  KmsKeyId?: string | null;
}
function toPiiOutputDataConfig(root: jsonP.JSONValue): PiiOutputDataConfig {
  return jsonP.readObj({
    required: {
      "S3Uri": "s",
    },
    optional: {
      "KmsKeyId": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SentimentDetectionJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: OutputDataConfig | null;
  LanguageCode?: LanguageCode | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}
function toSentimentDetectionJobProperties(root: jsonP.JSONValue): SentimentDetectionJobProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toOutputDataConfig,
      "LanguageCode": (x: jsonP.JSONValue) => cmnP.readEnum<LanguageCode>(x),
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TopicsDetectionJobProperties {
  JobId?: string | null;
  JobName?: string | null;
  JobStatus?: JobStatus | null;
  Message?: string | null;
  SubmitTime?: Date | number | null;
  EndTime?: Date | number | null;
  InputDataConfig?: InputDataConfig | null;
  OutputDataConfig?: OutputDataConfig | null;
  NumberOfTopics?: number | null;
  DataAccessRoleArn?: string | null;
  VolumeKmsKeyId?: string | null;
  VpcConfig?: VpcConfig | null;
}
function toTopicsDetectionJobProperties(root: jsonP.JSONValue): TopicsDetectionJobProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "JobName": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "Message": "s",
      "SubmitTime": "d",
      "EndTime": "d",
      "InputDataConfig": toInputDataConfig,
      "OutputDataConfig": toOutputDataConfig,
      "NumberOfTopics": "n",
      "DataAccessRoleArn": "s",
      "VolumeKmsKeyId": "s",
      "VpcConfig": toVpcConfig,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PiiEntity {
  Score?: number | null;
  Type?: PiiEntityType | null;
  BeginOffset?: number | null;
  EndOffset?: number | null;
}
function toPiiEntity(root: jsonP.JSONValue): PiiEntity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Score": "n",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<PiiEntityType>(x),
      "BeginOffset": "n",
      "EndOffset": "n",
    },
  }, root);
}
