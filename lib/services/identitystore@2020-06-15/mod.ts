// Autogenerated API client for: AWS SSO Identity Store

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class IdentityStore {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IdentityStore.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-06-15",
    "endpointPrefix": "identitystore",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "IdentityStore",
    "serviceFullName": "AWS SSO Identity Store",
    "serviceId": "identitystore",
    "signatureVersion": "v4",
    "signingName": "identitystore",
    "targetPrefix": "AWSIdentityStore",
    "uid": "identitystore-2020-06-15"
  };

  async describeGroup(
    {abortSignal, ...params}: RequestConfig & DescribeGroupRequest,
  ): Promise<DescribeGroupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeGroup",
    });
    return prt.readObj({
      required: {
        "GroupId": "s",
        "DisplayName": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & DescribeUserRequest,
  ): Promise<DescribeUserResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUser",
    });
    return prt.readObj({
      required: {
        "UserName": "s",
        "UserId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & ListGroupsRequest,
  ): Promise<ListGroupsResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroups",
    });
    return prt.readObj({
      required: {
        "Groups": [toGroup],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & ListUsersRequest,
  ): Promise<ListUsersResponse> {
    const body: JSONObject = {...params,
    Filters: params["Filters"]?.map(x => fromFilter(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUsers",
    });
    return prt.readObj({
      required: {
        "Users": [toUser],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface DescribeGroupRequest {
  IdentityStoreId: string;
  GroupId: string;
}

// refs: 1 - tags: named, input
export interface DescribeUserRequest {
  IdentityStoreId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface ListGroupsRequest {
  IdentityStoreId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, input
export interface ListUsersRequest {
  IdentityStoreId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: Filter[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeGroupResponse {
  GroupId: string;
  DisplayName: string;
}

// refs: 1 - tags: named, output
export interface DescribeUserResponse {
  UserName: string;
  UserId: string;
}

// refs: 1 - tags: named, output
export interface ListGroupsResponse {
  Groups: Group[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListUsersResponse {
  Users: User[];
  NextToken?: string | null;
}

// refs: 2 - tags: input, named, interface
export interface Filter {
  AttributePath: string;
  AttributeValue: string;
}
function fromFilter(input?: Filter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: output, named, interface
export interface Group {
  GroupId: string;
  DisplayName: string;
}
function toGroup(root: JSONValue): Group {
  return prt.readObj({
    required: {
      "GroupId": "s",
      "DisplayName": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface User {
  UserName: string;
  UserId: string;
}
function toUser(root: JSONValue): User {
  return prt.readObj({
    required: {
      "UserName": "s",
      "UserId": "s",
    },
    optional: {},
  }, root);
}
