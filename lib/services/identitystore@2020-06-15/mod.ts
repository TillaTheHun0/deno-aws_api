// Autogenerated API client for: AWS SSO Identity Store

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class IdentityStore {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IdentityStore.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-06-15",
    "endpointPrefix": "identitystore",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "IdentityStore",
    "serviceFullName": "AWS SSO Identity Store",
    "serviceId": "identitystore",
    "signatureVersion": "v4",
    "signingName": "identitystore",
    "targetPrefix": "AWSIdentityStore",
    "uid": "identitystore-2020-06-15"
  };

  async describeGroup(
    {abortSignal, ...params}: RequestConfig & s.DescribeGroupRequest,
  ): Promise<s.DescribeGroupResponse> {
    const body: jsonP.JSONObject = {
      IdentityStoreId: params["IdentityStoreId"],
      GroupId: params["GroupId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeGroup",
    });
    return jsonP.readObj({
      required: {
        "GroupId": "s",
        "DisplayName": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async describeUser(
    {abortSignal, ...params}: RequestConfig & s.DescribeUserRequest,
  ): Promise<s.DescribeUserResponse> {
    const body: jsonP.JSONObject = {
      IdentityStoreId: params["IdentityStoreId"],
      UserId: params["UserId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeUser",
    });
    return jsonP.readObj({
      required: {
        "UserName": "s",
        "UserId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & s.ListGroupsRequest,
  ): Promise<s.ListGroupsResponse> {
    const body: jsonP.JSONObject = {
      IdentityStoreId: params["IdentityStoreId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroups",
    });
    return jsonP.readObj({
      required: {
        "Groups": [toGroup],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & s.ListUsersRequest,
  ): Promise<s.ListUsersResponse> {
    const body: jsonP.JSONObject = {
      IdentityStoreId: params["IdentityStoreId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUsers",
    });
    return jsonP.readObj({
      required: {
        "Users": [toUser],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

}

function fromFilter(input?: s.Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AttributePath: input["AttributePath"],
    AttributeValue: input["AttributeValue"],
  }
}

function toGroup(root: jsonP.JSONValue): s.Group {
  return jsonP.readObj({
    required: {
      "GroupId": "s",
      "DisplayName": "s",
    },
    optional: {},
  }, root);
}

function toUser(root: jsonP.JSONValue): s.User {
  return jsonP.readObj({
    required: {
      "UserName": "s",
      "UserId": "s",
    },
    optional: {},
  }, root);
}
