// Autogenerated API client for: AWS Support

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Support {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Support.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2013-04-15",
    "endpointPrefix": "support",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Support",
    "serviceId": "Support",
    "signatureVersion": "v4",
    "targetPrefix": "AWSSupport_20130415",
    "uid": "support-2013-04-15"
  };

  async addAttachmentsToSet(
    {abortSignal, ...params}: RequestConfig & AddAttachmentsToSetRequest,
  ): Promise<AddAttachmentsToSetResponse> {
    const body: jsonP.JSONObject = params ? {
      attachmentSetId: params["attachmentSetId"],
      attachments: params["attachments"]?.map(x => fromAttachment(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddAttachmentsToSet",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "attachmentSetId": "s",
        "expiryTime": "s",
      },
    }, await resp.json());
  }

  async addCommunicationToCase(
    {abortSignal, ...params}: RequestConfig & AddCommunicationToCaseRequest,
  ): Promise<AddCommunicationToCaseResponse> {
    const body: jsonP.JSONObject = params ? {
      caseId: params["caseId"],
      communicationBody: params["communicationBody"],
      ccEmailAddresses: params["ccEmailAddresses"],
      attachmentSetId: params["attachmentSetId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddCommunicationToCase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "result": "b",
      },
    }, await resp.json());
  }

  async createCase(
    {abortSignal, ...params}: RequestConfig & CreateCaseRequest,
  ): Promise<CreateCaseResponse> {
    const body: jsonP.JSONObject = params ? {
      subject: params["subject"],
      serviceCode: params["serviceCode"],
      severityCode: params["severityCode"],
      categoryCode: params["categoryCode"],
      communicationBody: params["communicationBody"],
      ccEmailAddresses: params["ccEmailAddresses"],
      language: params["language"],
      issueType: params["issueType"],
      attachmentSetId: params["attachmentSetId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "caseId": "s",
      },
    }, await resp.json());
  }

  async describeAttachment(
    {abortSignal, ...params}: RequestConfig & DescribeAttachmentRequest,
  ): Promise<DescribeAttachmentResponse> {
    const body: jsonP.JSONObject = params ? {
      attachmentId: params["attachmentId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAttachment",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "attachment": toAttachment,
      },
    }, await resp.json());
  }

  async describeCases(
    {abortSignal, ...params}: RequestConfig & DescribeCasesRequest = {},
  ): Promise<DescribeCasesResponse> {
    const body: jsonP.JSONObject = params ? {
      caseIdList: params["caseIdList"],
      displayId: params["displayId"],
      afterTime: params["afterTime"],
      beforeTime: params["beforeTime"],
      includeResolvedCases: params["includeResolvedCases"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      language: params["language"],
      includeCommunications: params["includeCommunications"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCases",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "cases": [toCaseDetails],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeCommunications(
    {abortSignal, ...params}: RequestConfig & DescribeCommunicationsRequest,
  ): Promise<DescribeCommunicationsResponse> {
    const body: jsonP.JSONObject = params ? {
      caseId: params["caseId"],
      beforeTime: params["beforeTime"],
      afterTime: params["afterTime"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCommunications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "communications": [toCommunication],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeServices(
    {abortSignal, ...params}: RequestConfig & DescribeServicesRequest = {},
  ): Promise<DescribeServicesResponse> {
    const body: jsonP.JSONObject = params ? {
      serviceCodeList: params["serviceCodeList"],
      language: params["language"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeServices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "services": [toService],
      },
    }, await resp.json());
  }

  async describeSeverityLevels(
    {abortSignal, ...params}: RequestConfig & DescribeSeverityLevelsRequest = {},
  ): Promise<DescribeSeverityLevelsResponse> {
    const body: jsonP.JSONObject = params ? {
      language: params["language"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSeverityLevels",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "severityLevels": [toSeverityLevel],
      },
    }, await resp.json());
  }

  async describeTrustedAdvisorCheckRefreshStatuses(
    {abortSignal, ...params}: RequestConfig & DescribeTrustedAdvisorCheckRefreshStatusesRequest,
  ): Promise<DescribeTrustedAdvisorCheckRefreshStatusesResponse> {
    const body: jsonP.JSONObject = params ? {
      checkIds: params["checkIds"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTrustedAdvisorCheckRefreshStatuses",
    });
    return jsonP.readObj({
      required: {
        "statuses": [toTrustedAdvisorCheckRefreshStatus],
      },
      optional: {},
    }, await resp.json());
  }

  async describeTrustedAdvisorCheckResult(
    {abortSignal, ...params}: RequestConfig & DescribeTrustedAdvisorCheckResultRequest,
  ): Promise<DescribeTrustedAdvisorCheckResultResponse> {
    const body: jsonP.JSONObject = params ? {
      checkId: params["checkId"],
      language: params["language"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTrustedAdvisorCheckResult",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "result": toTrustedAdvisorCheckResult,
      },
    }, await resp.json());
  }

  async describeTrustedAdvisorCheckSummaries(
    {abortSignal, ...params}: RequestConfig & DescribeTrustedAdvisorCheckSummariesRequest,
  ): Promise<DescribeTrustedAdvisorCheckSummariesResponse> {
    const body: jsonP.JSONObject = params ? {
      checkIds: params["checkIds"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTrustedAdvisorCheckSummaries",
    });
    return jsonP.readObj({
      required: {
        "summaries": [toTrustedAdvisorCheckSummary],
      },
      optional: {},
    }, await resp.json());
  }

  async describeTrustedAdvisorChecks(
    {abortSignal, ...params}: RequestConfig & DescribeTrustedAdvisorChecksRequest,
  ): Promise<DescribeTrustedAdvisorChecksResponse> {
    const body: jsonP.JSONObject = params ? {
      language: params["language"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTrustedAdvisorChecks",
    });
    return jsonP.readObj({
      required: {
        "checks": [toTrustedAdvisorCheckDescription],
      },
      optional: {},
    }, await resp.json());
  }

  async refreshTrustedAdvisorCheck(
    {abortSignal, ...params}: RequestConfig & RefreshTrustedAdvisorCheckRequest,
  ): Promise<RefreshTrustedAdvisorCheckResponse> {
    const body: jsonP.JSONObject = params ? {
      checkId: params["checkId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RefreshTrustedAdvisorCheck",
    });
    return jsonP.readObj({
      required: {
        "status": toTrustedAdvisorCheckRefreshStatus,
      },
      optional: {},
    }, await resp.json());
  }

  async resolveCase(
    {abortSignal, ...params}: RequestConfig & ResolveCaseRequest = {},
  ): Promise<ResolveCaseResponse> {
    const body: jsonP.JSONObject = params ? {
      caseId: params["caseId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResolveCase",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "initialCaseStatus": "s",
        "finalCaseStatus": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AddAttachmentsToSetRequest {
  attachmentSetId?: string | null;
  attachments: Attachment[];
}

// refs: 1 - tags: named, input
export interface AddCommunicationToCaseRequest {
  caseId?: string | null;
  communicationBody: string;
  ccEmailAddresses?: string[] | null;
  attachmentSetId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateCaseRequest {
  subject: string;
  serviceCode?: string | null;
  severityCode?: string | null;
  categoryCode?: string | null;
  communicationBody: string;
  ccEmailAddresses?: string[] | null;
  language?: string | null;
  issueType?: string | null;
  attachmentSetId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeAttachmentRequest {
  attachmentId: string;
}

// refs: 1 - tags: named, input
export interface DescribeCasesRequest {
  caseIdList?: string[] | null;
  displayId?: string | null;
  afterTime?: string | null;
  beforeTime?: string | null;
  includeResolvedCases?: boolean | null;
  nextToken?: string | null;
  maxResults?: number | null;
  language?: string | null;
  includeCommunications?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeCommunicationsRequest {
  caseId: string;
  beforeTime?: string | null;
  afterTime?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeServicesRequest {
  serviceCodeList?: string[] | null;
  language?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeSeverityLevelsRequest {
  language?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeTrustedAdvisorCheckRefreshStatusesRequest {
  checkIds: string[];
}

// refs: 1 - tags: named, input
export interface DescribeTrustedAdvisorCheckResultRequest {
  checkId: string;
  language?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeTrustedAdvisorCheckSummariesRequest {
  checkIds: string[];
}

// refs: 1 - tags: named, input
export interface DescribeTrustedAdvisorChecksRequest {
  language: string;
}

// refs: 1 - tags: named, input
export interface RefreshTrustedAdvisorCheckRequest {
  checkId: string;
}

// refs: 1 - tags: named, input
export interface ResolveCaseRequest {
  caseId?: string | null;
}

// refs: 1 - tags: named, output
export interface AddAttachmentsToSetResponse {
  attachmentSetId?: string | null;
  expiryTime?: string | null;
}

// refs: 1 - tags: named, output
export interface AddCommunicationToCaseResponse {
  result?: boolean | null;
}

// refs: 1 - tags: named, output
export interface CreateCaseResponse {
  caseId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAttachmentResponse {
  attachment?: Attachment | null;
}

// refs: 1 - tags: named, output
export interface DescribeCasesResponse {
  cases?: CaseDetails[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeCommunicationsResponse {
  communications?: Communication[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeServicesResponse {
  services?: Service[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeSeverityLevelsResponse {
  severityLevels?: SeverityLevel[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeTrustedAdvisorCheckRefreshStatusesResponse {
  statuses: TrustedAdvisorCheckRefreshStatus[];
}

// refs: 1 - tags: named, output
export interface DescribeTrustedAdvisorCheckResultResponse {
  result?: TrustedAdvisorCheckResult | null;
}

// refs: 1 - tags: named, output
export interface DescribeTrustedAdvisorCheckSummariesResponse {
  summaries: TrustedAdvisorCheckSummary[];
}

// refs: 1 - tags: named, output
export interface DescribeTrustedAdvisorChecksResponse {
  checks: TrustedAdvisorCheckDescription[];
}

// refs: 1 - tags: named, output
export interface RefreshTrustedAdvisorCheckResponse {
  status: TrustedAdvisorCheckRefreshStatus;
}

// refs: 1 - tags: named, output
export interface ResolveCaseResponse {
  initialCaseStatus?: string | null;
  finalCaseStatus?: string | null;
}

// refs: 2 - tags: input, named, interface, output
export interface Attachment {
  fileName?: string | null;
  data?: Uint8Array | string | null;
}
function fromAttachment(input?: Attachment | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fileName: input["fileName"],
    data: jsonP.serializeBlob(input["data"]),
  }
}
function toAttachment(root: jsonP.JSONValue): Attachment {
  return jsonP.readObj({
    required: {},
    optional: {
      "fileName": "s",
      "data": "a",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CaseDetails {
  caseId?: string | null;
  displayId?: string | null;
  subject?: string | null;
  status?: string | null;
  serviceCode?: string | null;
  categoryCode?: string | null;
  severityCode?: string | null;
  submittedBy?: string | null;
  timeCreated?: string | null;
  recentCommunications?: RecentCaseCommunications | null;
  ccEmailAddresses?: string[] | null;
  language?: string | null;
}
function toCaseDetails(root: jsonP.JSONValue): CaseDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "caseId": "s",
      "displayId": "s",
      "subject": "s",
      "status": "s",
      "serviceCode": "s",
      "categoryCode": "s",
      "severityCode": "s",
      "submittedBy": "s",
      "timeCreated": "s",
      "recentCommunications": toRecentCaseCommunications,
      "ccEmailAddresses": ["s"],
      "language": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RecentCaseCommunications {
  communications?: Communication[] | null;
  nextToken?: string | null;
}
function toRecentCaseCommunications(root: jsonP.JSONValue): RecentCaseCommunications {
  return jsonP.readObj({
    required: {},
    optional: {
      "communications": [toCommunication],
      "nextToken": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Communication {
  caseId?: string | null;
  body?: string | null;
  submittedBy?: string | null;
  timeCreated?: string | null;
  attachmentSet?: AttachmentDetails[] | null;
}
function toCommunication(root: jsonP.JSONValue): Communication {
  return jsonP.readObj({
    required: {},
    optional: {
      "caseId": "s",
      "body": "s",
      "submittedBy": "s",
      "timeCreated": "s",
      "attachmentSet": [toAttachmentDetails],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AttachmentDetails {
  attachmentId?: string | null;
  fileName?: string | null;
}
function toAttachmentDetails(root: jsonP.JSONValue): AttachmentDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "attachmentId": "s",
      "fileName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Service {
  code?: string | null;
  name?: string | null;
  categories?: Category[] | null;
}
function toService(root: jsonP.JSONValue): Service {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "s",
      "name": "s",
      "categories": [toCategory],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Category {
  code?: string | null;
  name?: string | null;
}
function toCategory(root: jsonP.JSONValue): Category {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "s",
      "name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SeverityLevel {
  code?: string | null;
  name?: string | null;
}
function toSeverityLevel(root: jsonP.JSONValue): SeverityLevel {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "s",
      "name": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TrustedAdvisorCheckRefreshStatus {
  checkId: string;
  status: string;
  millisUntilNextRefreshable: number;
}
function toTrustedAdvisorCheckRefreshStatus(root: jsonP.JSONValue): TrustedAdvisorCheckRefreshStatus {
  return jsonP.readObj({
    required: {
      "checkId": "s",
      "status": "s",
      "millisUntilNextRefreshable": "n",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrustedAdvisorCheckResult {
  checkId: string;
  timestamp: string;
  status: string;
  resourcesSummary: TrustedAdvisorResourcesSummary;
  categorySpecificSummary: TrustedAdvisorCategorySpecificSummary;
  flaggedResources: TrustedAdvisorResourceDetail[];
}
function toTrustedAdvisorCheckResult(root: jsonP.JSONValue): TrustedAdvisorCheckResult {
  return jsonP.readObj({
    required: {
      "checkId": "s",
      "timestamp": "s",
      "status": "s",
      "resourcesSummary": toTrustedAdvisorResourcesSummary,
      "categorySpecificSummary": toTrustedAdvisorCategorySpecificSummary,
      "flaggedResources": [toTrustedAdvisorResourceDetail],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TrustedAdvisorResourcesSummary {
  resourcesProcessed: number;
  resourcesFlagged: number;
  resourcesIgnored: number;
  resourcesSuppressed: number;
}
function toTrustedAdvisorResourcesSummary(root: jsonP.JSONValue): TrustedAdvisorResourcesSummary {
  return jsonP.readObj({
    required: {
      "resourcesProcessed": "n",
      "resourcesFlagged": "n",
      "resourcesIgnored": "n",
      "resourcesSuppressed": "n",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TrustedAdvisorCategorySpecificSummary {
  costOptimizing?: TrustedAdvisorCostOptimizingSummary | null;
}
function toTrustedAdvisorCategorySpecificSummary(root: jsonP.JSONValue): TrustedAdvisorCategorySpecificSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "costOptimizing": toTrustedAdvisorCostOptimizingSummary,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TrustedAdvisorCostOptimizingSummary {
  estimatedMonthlySavings: number;
  estimatedPercentMonthlySavings: number;
}
function toTrustedAdvisorCostOptimizingSummary(root: jsonP.JSONValue): TrustedAdvisorCostOptimizingSummary {
  return jsonP.readObj({
    required: {
      "estimatedMonthlySavings": "n",
      "estimatedPercentMonthlySavings": "n",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrustedAdvisorResourceDetail {
  status: string;
  region?: string | null;
  resourceId: string;
  isSuppressed?: boolean | null;
  metadata: string[];
}
function toTrustedAdvisorResourceDetail(root: jsonP.JSONValue): TrustedAdvisorResourceDetail {
  return jsonP.readObj({
    required: {
      "status": "s",
      "resourceId": "s",
      "metadata": ["s"],
    },
    optional: {
      "region": "s",
      "isSuppressed": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrustedAdvisorCheckSummary {
  checkId: string;
  timestamp: string;
  status: string;
  hasFlaggedResources?: boolean | null;
  resourcesSummary: TrustedAdvisorResourcesSummary;
  categorySpecificSummary: TrustedAdvisorCategorySpecificSummary;
}
function toTrustedAdvisorCheckSummary(root: jsonP.JSONValue): TrustedAdvisorCheckSummary {
  return jsonP.readObj({
    required: {
      "checkId": "s",
      "timestamp": "s",
      "status": "s",
      "resourcesSummary": toTrustedAdvisorResourcesSummary,
      "categorySpecificSummary": toTrustedAdvisorCategorySpecificSummary,
    },
    optional: {
      "hasFlaggedResources": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrustedAdvisorCheckDescription {
  id: string;
  name: string;
  description: string;
  category: string;
  metadata: string[];
}
function toTrustedAdvisorCheckDescription(root: jsonP.JSONValue): TrustedAdvisorCheckDescription {
  return jsonP.readObj({
    required: {
      "id": "s",
      "name": "s",
      "description": "s",
      "category": "s",
      "metadata": ["s"],
    },
    optional: {},
  }, root);
}
