// Autogenerated API client for: Amazon Elastic File System

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class EFS {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(EFS.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-02-01",
    "endpointPrefix": "elasticfilesystem",
    "protocol": "rest-json",
    "serviceAbbreviation": "EFS",
    "serviceFullName": "Amazon Elastic File System",
    "serviceId": "EFS",
    "signatureVersion": "v4",
    "uid": "elasticfilesystem-2015-02-01"
  };

  async createAccessPoint(
    {abortSignal, ...params}: RequestConfig & CreateAccessPointRequest,
  ): Promise<AccessPointDescription> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      FileSystemId: params["FileSystemId"],
      PosixUser: fromPosixUser(params["PosixUser"]),
      RootDirectory: fromRootDirectory(params["RootDirectory"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccessPoint",
      requestUri: "/2015-02-01/access-points",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ClientToken": "s",
        "Name": "s",
        "Tags": [toTag],
        "AccessPointId": "s",
        "AccessPointArn": "s",
        "FileSystemId": "s",
        "PosixUser": toPosixUser,
        "RootDirectory": toRootDirectory,
        "OwnerId": "s",
        "LifeCycleState": (x: jsonP.JSONValue) => cmnP.readEnum<LifeCycleState>(x),
      },
    }, await resp.json());
  }

  async createFileSystem(
    {abortSignal, ...params}: RequestConfig & CreateFileSystemRequest,
  ): Promise<FileSystemDescription> {
    const body: jsonP.JSONObject = {
      CreationToken: params["CreationToken"] ?? generateIdemptToken(),
      PerformanceMode: params["PerformanceMode"],
      Encrypted: params["Encrypted"],
      KmsKeyId: params["KmsKeyId"],
      ThroughputMode: params["ThroughputMode"],
      ProvisionedThroughputInMibps: params["ProvisionedThroughputInMibps"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFileSystem",
      requestUri: "/2015-02-01/file-systems",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {
        "OwnerId": "s",
        "CreationToken": "s",
        "FileSystemId": "s",
        "CreationTime": "d",
        "LifeCycleState": (x: jsonP.JSONValue) => cmnP.readEnum<LifeCycleState>(x),
        "NumberOfMountTargets": "n",
        "SizeInBytes": toFileSystemSize,
        "PerformanceMode": (x: jsonP.JSONValue) => cmnP.readEnum<PerformanceMode>(x),
        "Tags": [toTag],
      },
      optional: {
        "FileSystemArn": "s",
        "Name": "s",
        "Encrypted": "b",
        "KmsKeyId": "s",
        "ThroughputMode": (x: jsonP.JSONValue) => cmnP.readEnum<ThroughputMode>(x),
        "ProvisionedThroughputInMibps": "n",
      },
    }, await resp.json());
  }

  async createMountTarget(
    {abortSignal, ...params}: RequestConfig & CreateMountTargetRequest,
  ): Promise<MountTargetDescription> {
    const body: jsonP.JSONObject = {
      FileSystemId: params["FileSystemId"],
      SubnetId: params["SubnetId"],
      IpAddress: params["IpAddress"],
      SecurityGroups: params["SecurityGroups"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMountTarget",
      requestUri: "/2015-02-01/mount-targets",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "MountTargetId": "s",
        "FileSystemId": "s",
        "SubnetId": "s",
        "LifeCycleState": (x: jsonP.JSONValue) => cmnP.readEnum<LifeCycleState>(x),
      },
      optional: {
        "OwnerId": "s",
        "IpAddress": "s",
        "NetworkInterfaceId": "s",
        "AvailabilityZoneId": "s",
        "AvailabilityZoneName": "s",
        "VpcId": "s",
      },
    }, await resp.json());
  }

  async createTags(
    {abortSignal, ...params}: RequestConfig & CreateTagsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTags",
      requestUri: cmnP.encodePath`/2015-02-01/create-tags/${params["FileSystemId"]}`,
      responseCode: 204,
    });
  }

  async deleteAccessPoint(
    {abortSignal, ...params}: RequestConfig & DeleteAccessPointRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAccessPoint",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2015-02-01/access-points/${params["AccessPointId"]}`,
      responseCode: 204,
    });
  }

  async deleteFileSystem(
    {abortSignal, ...params}: RequestConfig & DeleteFileSystemRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFileSystem",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}`,
      responseCode: 204,
    });
  }

  async deleteFileSystemPolicy(
    {abortSignal, ...params}: RequestConfig & DeleteFileSystemPolicyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteFileSystemPolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}/policy`,
      responseCode: 200,
    });
  }

  async deleteMountTarget(
    {abortSignal, ...params}: RequestConfig & DeleteMountTargetRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMountTarget",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2015-02-01/mount-targets/${params["MountTargetId"]}`,
      responseCode: 204,
    });
  }

  async deleteTags(
    {abortSignal, ...params}: RequestConfig & DeleteTagsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTags",
      requestUri: cmnP.encodePath`/2015-02-01/delete-tags/${params["FileSystemId"]}`,
      responseCode: 204,
    });
  }

  async describeAccessPoints(
    {abortSignal, ...params}: RequestConfig & DescribeAccessPointsRequest = {},
  ): Promise<DescribeAccessPointsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["AccessPointId"] != null) query.set("AccessPointId", params["AccessPointId"]?.toString() ?? "");
    if (params["FileSystemId"] != null) query.set("FileSystemId", params["FileSystemId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeAccessPoints",
      method: "GET",
      requestUri: "/2015-02-01/access-points",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccessPoints": [toAccessPointDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeBackupPolicy(
    {abortSignal, ...params}: RequestConfig & DescribeBackupPolicyRequest,
  ): Promise<BackupPolicyDescription> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBackupPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}/backup-policy`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPolicy": toBackupPolicy,
      },
    }, await resp.json());
  }

  async describeFileSystemPolicy(
    {abortSignal, ...params}: RequestConfig & DescribeFileSystemPolicyRequest,
  ): Promise<FileSystemPolicyDescription> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeFileSystemPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}/policy`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FileSystemId": "s",
        "Policy": "s",
      },
    }, await resp.json());
  }

  async describeFileSystems(
    {abortSignal, ...params}: RequestConfig & DescribeFileSystemsRequest = {},
  ): Promise<DescribeFileSystemsResponse> {
    const query = new URLSearchParams;
    if (params["MaxItems"] != null) query.set("MaxItems", params["MaxItems"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("Marker", params["Marker"]?.toString() ?? "");
    if (params["CreationToken"] != null) query.set("CreationToken", params["CreationToken"]?.toString() ?? "");
    if (params["FileSystemId"] != null) query.set("FileSystemId", params["FileSystemId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeFileSystems",
      method: "GET",
      requestUri: "/2015-02-01/file-systems",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Marker": "s",
        "FileSystems": [toFileSystemDescription],
        "NextMarker": "s",
      },
    }, await resp.json());
  }

  async describeLifecycleConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeLifecycleConfigurationRequest,
  ): Promise<LifecycleConfigurationDescription> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeLifecycleConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}/lifecycle-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LifecyclePolicies": [toLifecyclePolicy],
      },
    }, await resp.json());
  }

  async describeMountTargetSecurityGroups(
    {abortSignal, ...params}: RequestConfig & DescribeMountTargetSecurityGroupsRequest,
  ): Promise<DescribeMountTargetSecurityGroupsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeMountTargetSecurityGroups",
      method: "GET",
      requestUri: cmnP.encodePath`/2015-02-01/mount-targets/${params["MountTargetId"]}/security-groups`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "SecurityGroups": ["s"],
      },
      optional: {},
    }, await resp.json());
  }

  async describeMountTargets(
    {abortSignal, ...params}: RequestConfig & DescribeMountTargetsRequest = {},
  ): Promise<DescribeMountTargetsResponse> {
    const query = new URLSearchParams;
    if (params["MaxItems"] != null) query.set("MaxItems", params["MaxItems"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("Marker", params["Marker"]?.toString() ?? "");
    if (params["FileSystemId"] != null) query.set("FileSystemId", params["FileSystemId"]?.toString() ?? "");
    if (params["MountTargetId"] != null) query.set("MountTargetId", params["MountTargetId"]?.toString() ?? "");
    if (params["AccessPointId"] != null) query.set("AccessPointId", params["AccessPointId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeMountTargets",
      method: "GET",
      requestUri: "/2015-02-01/mount-targets",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Marker": "s",
        "MountTargets": [toMountTargetDescription],
        "NextMarker": "s",
      },
    }, await resp.json());
  }

  async describeTags(
    {abortSignal, ...params}: RequestConfig & DescribeTagsRequest,
  ): Promise<DescribeTagsResponse> {
    const query = new URLSearchParams;
    if (params["MaxItems"] != null) query.set("MaxItems", params["MaxItems"]?.toString() ?? "");
    if (params["Marker"] != null) query.set("Marker", params["Marker"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeTags",
      method: "GET",
      requestUri: cmnP.encodePath`/2015-02-01/tags/${params["FileSystemId"]}/`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {
        "Tags": [toTag],
      },
      optional: {
        "Marker": "s",
        "NextMarker": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/2015-02-01/resource-tags/${params["ResourceId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async modifyMountTargetSecurityGroups(
    {abortSignal, ...params}: RequestConfig & ModifyMountTargetSecurityGroupsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      SecurityGroups: params["SecurityGroups"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ModifyMountTargetSecurityGroups",
      method: "PUT",
      requestUri: cmnP.encodePath`/2015-02-01/mount-targets/${params["MountTargetId"]}/security-groups`,
      responseCode: 204,
    });
  }

  async putBackupPolicy(
    {abortSignal, ...params}: RequestConfig & PutBackupPolicyRequest,
  ): Promise<BackupPolicyDescription> {
    const body: jsonP.JSONObject = {
      BackupPolicy: fromBackupPolicy(params["BackupPolicy"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutBackupPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}/backup-policy`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BackupPolicy": toBackupPolicy,
      },
    }, await resp.json());
  }

  async putFileSystemPolicy(
    {abortSignal, ...params}: RequestConfig & PutFileSystemPolicyRequest,
  ): Promise<FileSystemPolicyDescription> {
    const body: jsonP.JSONObject = {
      Policy: params["Policy"],
      BypassPolicyLockoutSafetyCheck: params["BypassPolicyLockoutSafetyCheck"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutFileSystemPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}/policy`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FileSystemId": "s",
        "Policy": "s",
      },
    }, await resp.json());
  }

  async putLifecycleConfiguration(
    {abortSignal, ...params}: RequestConfig & PutLifecycleConfigurationRequest,
  ): Promise<LifecycleConfigurationDescription> {
    const body: jsonP.JSONObject = {
      LifecyclePolicies: params["LifecyclePolicies"]?.map(x => fromLifecyclePolicy(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLifecycleConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}/lifecycle-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LifecyclePolicies": [toLifecyclePolicy],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/2015-02-01/resource-tags/${params["ResourceId"]}`,
      responseCode: 200,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/2015-02-01/resource-tags/${params["ResourceId"]}`,
      responseCode: 200,
    });
  }

  async updateFileSystem(
    {abortSignal, ...params}: RequestConfig & UpdateFileSystemRequest,
  ): Promise<FileSystemDescription> {
    const body: jsonP.JSONObject = {
      ThroughputMode: params["ThroughputMode"],
      ProvisionedThroughputInMibps: params["ProvisionedThroughputInMibps"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateFileSystem",
      method: "PUT",
      requestUri: cmnP.encodePath`/2015-02-01/file-systems/${params["FileSystemId"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {
        "OwnerId": "s",
        "CreationToken": "s",
        "FileSystemId": "s",
        "CreationTime": "d",
        "LifeCycleState": (x: jsonP.JSONValue) => cmnP.readEnum<LifeCycleState>(x),
        "NumberOfMountTargets": "n",
        "SizeInBytes": toFileSystemSize,
        "PerformanceMode": (x: jsonP.JSONValue) => cmnP.readEnum<PerformanceMode>(x),
        "Tags": [toTag],
      },
      optional: {
        "FileSystemArn": "s",
        "Name": "s",
        "Encrypted": "b",
        "KmsKeyId": "s",
        "ThroughputMode": (x: jsonP.JSONValue) => cmnP.readEnum<ThroughputMode>(x),
        "ProvisionedThroughputInMibps": "n",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateAccessPointRequest {
  ClientToken: string;
  Tags?: Tag[] | null;
  FileSystemId: string;
  PosixUser?: PosixUser | null;
  RootDirectory?: RootDirectory | null;
}

// refs: 1 - tags: named, input
export interface CreateFileSystemRequest {
  CreationToken: string;
  PerformanceMode?: PerformanceMode | null;
  Encrypted?: boolean | null;
  KmsKeyId?: string | null;
  ThroughputMode?: ThroughputMode | null;
  ProvisionedThroughputInMibps?: number | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateMountTargetRequest {
  FileSystemId: string;
  SubnetId: string;
  IpAddress?: string | null;
  SecurityGroups?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTagsRequest {
  FileSystemId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface DeleteAccessPointRequest {
  AccessPointId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFileSystemRequest {
  FileSystemId: string;
}

// refs: 1 - tags: named, input
export interface DeleteFileSystemPolicyRequest {
  FileSystemId: string;
}

// refs: 1 - tags: named, input
export interface DeleteMountTargetRequest {
  MountTargetId: string;
}

// refs: 1 - tags: named, input
export interface DeleteTagsRequest {
  FileSystemId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface DescribeAccessPointsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  AccessPointId?: string | null;
  FileSystemId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBackupPolicyRequest {
  FileSystemId: string;
}

// refs: 1 - tags: named, input
export interface DescribeFileSystemPolicyRequest {
  FileSystemId: string;
}

// refs: 1 - tags: named, input
export interface DescribeFileSystemsRequest {
  MaxItems?: number | null;
  Marker?: string | null;
  CreationToken?: string | null;
  FileSystemId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeLifecycleConfigurationRequest {
  FileSystemId: string;
}

// refs: 1 - tags: named, input
export interface DescribeMountTargetSecurityGroupsRequest {
  MountTargetId: string;
}

// refs: 1 - tags: named, input
export interface DescribeMountTargetsRequest {
  MaxItems?: number | null;
  Marker?: string | null;
  FileSystemId?: string | null;
  MountTargetId?: string | null;
  AccessPointId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeTagsRequest {
  MaxItems?: number | null;
  Marker?: string | null;
  FileSystemId: string;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ModifyMountTargetSecurityGroupsRequest {
  MountTargetId: string;
  SecurityGroups?: string[] | null;
}

// refs: 1 - tags: named, input
export interface PutBackupPolicyRequest {
  FileSystemId: string;
  BackupPolicy: BackupPolicy;
}

// refs: 1 - tags: named, input
export interface PutFileSystemPolicyRequest {
  FileSystemId: string;
  Policy: string;
  BypassPolicyLockoutSafetyCheck?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutLifecycleConfigurationRequest {
  FileSystemId: string;
  LifecyclePolicies: LifecyclePolicy[];
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateFileSystemRequest {
  FileSystemId: string;
  ThroughputMode?: ThroughputMode | null;
  ProvisionedThroughputInMibps?: number | null;
}

// refs: 2 - tags: named, output, interface
export interface AccessPointDescription {
  ClientToken?: string | null;
  Name?: string | null;
  Tags?: Tag[] | null;
  AccessPointId?: string | null;
  AccessPointArn?: string | null;
  FileSystemId?: string | null;
  PosixUser?: PosixUser | null;
  RootDirectory?: RootDirectory | null;
  OwnerId?: string | null;
  LifeCycleState?: LifeCycleState | null;
}
function toAccessPointDescription(root: jsonP.JSONValue): AccessPointDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "ClientToken": "s",
      "Name": "s",
      "Tags": [toTag],
      "AccessPointId": "s",
      "AccessPointArn": "s",
      "FileSystemId": "s",
      "PosixUser": toPosixUser,
      "RootDirectory": toRootDirectory,
      "OwnerId": "s",
      "LifeCycleState": (x: jsonP.JSONValue) => cmnP.readEnum<LifeCycleState>(x),
    },
  }, root);
}

// refs: 2 - tags: named, output, interface
export interface FileSystemDescription {
  OwnerId: string;
  CreationToken: string;
  FileSystemId: string;
  FileSystemArn?: string | null;
  CreationTime: Date | number;
  LifeCycleState: LifeCycleState;
  Name?: string | null;
  NumberOfMountTargets: number;
  SizeInBytes: FileSystemSize;
  PerformanceMode: PerformanceMode;
  Encrypted?: boolean | null;
  KmsKeyId?: string | null;
  ThroughputMode?: ThroughputMode | null;
  ProvisionedThroughputInMibps?: number | null;
  Tags: Tag[];
}
function toFileSystemDescription(root: jsonP.JSONValue): FileSystemDescription {
  return jsonP.readObj({
    required: {
      "OwnerId": "s",
      "CreationToken": "s",
      "FileSystemId": "s",
      "CreationTime": "d",
      "LifeCycleState": (x: jsonP.JSONValue) => cmnP.readEnum<LifeCycleState>(x),
      "NumberOfMountTargets": "n",
      "SizeInBytes": toFileSystemSize,
      "PerformanceMode": (x: jsonP.JSONValue) => cmnP.readEnum<PerformanceMode>(x),
      "Tags": [toTag],
    },
    optional: {
      "FileSystemArn": "s",
      "Name": "s",
      "Encrypted": "b",
      "KmsKeyId": "s",
      "ThroughputMode": (x: jsonP.JSONValue) => cmnP.readEnum<ThroughputMode>(x),
      "ProvisionedThroughputInMibps": "n",
    },
  }, root);
}

// refs: 2 - tags: named, output, interface
export interface MountTargetDescription {
  OwnerId?: string | null;
  MountTargetId: string;
  FileSystemId: string;
  SubnetId: string;
  LifeCycleState: LifeCycleState;
  IpAddress?: string | null;
  NetworkInterfaceId?: string | null;
  AvailabilityZoneId?: string | null;
  AvailabilityZoneName?: string | null;
  VpcId?: string | null;
}
function toMountTargetDescription(root: jsonP.JSONValue): MountTargetDescription {
  return jsonP.readObj({
    required: {
      "MountTargetId": "s",
      "FileSystemId": "s",
      "SubnetId": "s",
      "LifeCycleState": (x: jsonP.JSONValue) => cmnP.readEnum<LifeCycleState>(x),
    },
    optional: {
      "OwnerId": "s",
      "IpAddress": "s",
      "NetworkInterfaceId": "s",
      "AvailabilityZoneId": "s",
      "AvailabilityZoneName": "s",
      "VpcId": "s",
    },
  }, root);
}

// refs: 1 - tags: named, output
export interface DescribeAccessPointsResponse {
  AccessPoints?: AccessPointDescription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface BackupPolicyDescription {
  BackupPolicy?: BackupPolicy | null;
}

// refs: 1 - tags: named, output
export interface FileSystemPolicyDescription {
  FileSystemId?: string | null;
  Policy?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeFileSystemsResponse {
  Marker?: string | null;
  FileSystems?: FileSystemDescription[] | null;
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface LifecycleConfigurationDescription {
  LifecyclePolicies?: LifecyclePolicy[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeMountTargetSecurityGroupsResponse {
  SecurityGroups: string[];
}

// refs: 1 - tags: named, output
export interface DescribeMountTargetsResponse {
  Marker?: string | null;
  MountTargets?: MountTargetDescription[] | null;
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTagsResponse {
  Marker?: string | null;
  Tags: Tag[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 10 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface PosixUser {
  Uid: number;
  Gid: number;
  SecondaryGids?: number[] | null;
}
function fromPosixUser(input?: PosixUser | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Uid: input["Uid"],
    Gid: input["Gid"],
    SecondaryGids: input["SecondaryGids"],
  }
}
function toPosixUser(root: jsonP.JSONValue): PosixUser {
  return jsonP.readObj({
    required: {
      "Uid": "n",
      "Gid": "n",
    },
    optional: {
      "SecondaryGids": ["n"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RootDirectory {
  Path?: string | null;
  CreationInfo?: CreationInfo | null;
}
function fromRootDirectory(input?: RootDirectory | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Path: input["Path"],
    CreationInfo: fromCreationInfo(input["CreationInfo"]),
  }
}
function toRootDirectory(root: jsonP.JSONValue): RootDirectory {
  return jsonP.readObj({
    required: {},
    optional: {
      "Path": "s",
      "CreationInfo": toCreationInfo,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface CreationInfo {
  OwnerUid: number;
  OwnerGid: number;
  Permissions: string;
}
function fromCreationInfo(input?: CreationInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    OwnerUid: input["OwnerUid"],
    OwnerGid: input["OwnerGid"],
    Permissions: input["Permissions"],
  }
}
function toCreationInfo(root: jsonP.JSONValue): CreationInfo {
  return jsonP.readObj({
    required: {
      "OwnerUid": "n",
      "OwnerGid": "n",
      "Permissions": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type PerformanceMode =
| "generalPurpose"
| "maxIO"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type ThroughputMode =
| "bursting"
| "provisioned"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface BackupPolicy {
  Status: Status;
}
function fromBackupPolicy(input?: BackupPolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Status: input["Status"],
  }
}
function toBackupPolicy(root: jsonP.JSONValue): BackupPolicy {
  return jsonP.readObj({
    required: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type Status =
| "ENABLED"
| "ENABLING"
| "DISABLED"
| "DISABLING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface LifecyclePolicy {
  TransitionToIA?: TransitionToIARules | null;
}
function fromLifecyclePolicy(input?: LifecyclePolicy | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TransitionToIA: input["TransitionToIA"],
  }
}
function toLifecyclePolicy(root: jsonP.JSONValue): LifecyclePolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "TransitionToIA": (x: jsonP.JSONValue) => cmnP.readEnum<TransitionToIARules>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type TransitionToIARules =
| "AFTER_7_DAYS"
| "AFTER_14_DAYS"
| "AFTER_30_DAYS"
| "AFTER_60_DAYS"
| "AFTER_90_DAYS"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type LifeCycleState =
| "creating"
| "available"
| "updating"
| "deleting"
| "deleted"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface FileSystemSize {
  Value: number;
  Timestamp?: Date | number | null;
  ValueInIA?: number | null;
  ValueInStandard?: number | null;
}
function toFileSystemSize(root: jsonP.JSONValue): FileSystemSize {
  return jsonP.readObj({
    required: {
      "Value": "n",
    },
    optional: {
      "Timestamp": "d",
      "ValueInIA": "n",
      "ValueInStandard": "n",
    },
  }, root);
}
