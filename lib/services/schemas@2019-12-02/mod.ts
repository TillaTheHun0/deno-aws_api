// Autogenerated API client for: Schemas

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Schemas {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Schemas.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-12-02",
    "endpointPrefix": "schemas",
    "signingName": "schemas",
    "serviceFullName": "Schemas",
    "serviceId": "schemas",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "schemas-2019-12-02",
    "signatureVersion": "v4"
  };

  async createDiscoverer(
    {abortSignal, ...params}: RequestConfig & s.CreateDiscovererRequest,
  ): Promise<s.CreateDiscovererResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      SourceArn: params["SourceArn"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDiscoverer",
      requestUri: "/v1/discoverers",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "DiscovererArn": "s",
        "DiscovererId": "s",
        "SourceArn": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DiscovererState>(x),
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createRegistry(
    {abortSignal, ...params}: RequestConfig & s.CreateRegistryRequest,
  ): Promise<s.CreateRegistryResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRegistry",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "RegistryArn": "s",
        "RegistryName": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createSchema(
    {abortSignal, ...params}: RequestConfig & s.CreateSchemaRequest,
  ): Promise<s.CreateSchemaResponse> {
    const body: jsonP.JSONObject = {
      Content: params["Content"],
      Description: params["Description"],
      tags: params["Tags"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSchema",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "LastModified": "d",
        "SchemaArn": "s",
        "SchemaName": "s",
        "SchemaVersion": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Type": "s",
        "VersionCreatedDate": "d",
      },
    }, await resp.json());
  }

  async deleteDiscoverer(
    {abortSignal, ...params}: RequestConfig & s.DeleteDiscovererRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDiscoverer",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/discoverers/id/${params["DiscovererId"]}`,
      responseCode: 204,
    });
  }

  async deleteRegistry(
    {abortSignal, ...params}: RequestConfig & s.DeleteRegistryRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRegistry",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}`,
      responseCode: 204,
    });
  }

  async deleteResourcePolicy(
    {abortSignal, ...params}: RequestConfig & s.DeleteResourcePolicyRequest = {},
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["RegistryName"] != null) query.set("registryName", params["RegistryName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteResourcePolicy",
      method: "DELETE",
      requestUri: "/v1/policy",
      responseCode: 204,
    });
  }

  async deleteSchema(
    {abortSignal, ...params}: RequestConfig & s.DeleteSchemaRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSchema",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}`,
      responseCode: 204,
    });
  }

  async deleteSchemaVersion(
    {abortSignal, ...params}: RequestConfig & s.DeleteSchemaVersionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSchemaVersion",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}/version/${params["SchemaVersion"]}`,
      responseCode: 204,
    });
  }

  async describeCodeBinding(
    {abortSignal, ...params}: RequestConfig & s.DescribeCodeBindingRequest,
  ): Promise<s.DescribeCodeBindingResponse> {
    const query = new URLSearchParams;
    if (params["SchemaVersion"] != null) query.set("schemaVersion", params["SchemaVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeCodeBinding",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}/language/${params["Language"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreationDate": "d",
        "LastModified": "d",
        "SchemaVersion": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.CodeGenerationStatus>(x),
      },
    }, await resp.json());
  }

  async describeDiscoverer(
    {abortSignal, ...params}: RequestConfig & s.DescribeDiscovererRequest,
  ): Promise<s.DescribeDiscovererResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDiscoverer",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/discoverers/id/${params["DiscovererId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "DiscovererArn": "s",
        "DiscovererId": "s",
        "SourceArn": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DiscovererState>(x),
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeRegistry(
    {abortSignal, ...params}: RequestConfig & s.DescribeRegistryRequest,
  ): Promise<s.DescribeRegistryResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRegistry",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "RegistryArn": "s",
        "RegistryName": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async describeSchema(
    {abortSignal, ...params}: RequestConfig & s.DescribeSchemaRequest,
  ): Promise<s.DescribeSchemaResponse> {
    const query = new URLSearchParams;
    if (params["SchemaVersion"] != null) query.set("schemaVersion", params["SchemaVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeSchema",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Content": "s",
        "Description": "s",
        "LastModified": "d",
        "SchemaArn": "s",
        "SchemaName": "s",
        "SchemaVersion": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Type": "s",
        "VersionCreatedDate": "d",
      },
    }, await resp.json());
  }

  async exportSchema(
    {abortSignal, ...params}: RequestConfig & s.ExportSchemaRequest,
  ): Promise<s.ExportSchemaResponse> {
    const query = new URLSearchParams;
    if (params["SchemaVersion"] != null) query.set("schemaVersion", params["SchemaVersion"]?.toString() ?? "");
    query.set("type", params["Type"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ExportSchema",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}/export`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Content": "s",
        "SchemaArn": "s",
        "SchemaName": "s",
        "SchemaVersion": "s",
        "Type": "s",
      },
    }, await resp.json());
  }

  async getCodeBindingSource(
    {abortSignal, ...params}: RequestConfig & s.GetCodeBindingSourceRequest,
  ): Promise<s.GetCodeBindingSourceResponse> {
    const query = new URLSearchParams;
    if (params["SchemaVersion"] != null) query.set("schemaVersion", params["SchemaVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetCodeBindingSource",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}/language/${params["Language"]}/source`,
      responseCode: 200,
    });
  return {
    Body: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async getDiscoveredSchema(
    {abortSignal, ...params}: RequestConfig & s.GetDiscoveredSchemaRequest,
  ): Promise<s.GetDiscoveredSchemaResponse> {
    const body: jsonP.JSONObject = {
      Events: params["Events"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDiscoveredSchema",
      requestUri: "/v1/discover",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Content": "s",
      },
    }, await resp.json());
  }

  async getResourcePolicy(
    {abortSignal, ...params}: RequestConfig & s.GetResourcePolicyRequest = {},
  ): Promise<s.GetResourcePolicyResponse> {
    const query = new URLSearchParams;
    if (params["RegistryName"] != null) query.set("registryName", params["RegistryName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetResourcePolicy",
      method: "GET",
      requestUri: "/v1/policy",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": jsonP.readJsonValue,
        "RevisionId": "s",
      },
    }, await resp.json());
  }

  async listDiscoverers(
    {abortSignal, ...params}: RequestConfig & s.ListDiscoverersRequest = {},
  ): Promise<s.ListDiscoverersResponse> {
    const query = new URLSearchParams;
    if (params["DiscovererIdPrefix"] != null) query.set("discovererIdPrefix", params["DiscovererIdPrefix"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["SourceArnPrefix"] != null) query.set("sourceArnPrefix", params["SourceArnPrefix"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDiscoverers",
      method: "GET",
      requestUri: "/v1/discoverers",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Discoverers": [toDiscovererSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRegistries(
    {abortSignal, ...params}: RequestConfig & s.ListRegistriesRequest = {},
  ): Promise<s.ListRegistriesResponse> {
    const query = new URLSearchParams;
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["RegistryNamePrefix"] != null) query.set("registryNamePrefix", params["RegistryNamePrefix"]?.toString() ?? "");
    if (params["Scope"] != null) query.set("scope", params["Scope"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRegistries",
      method: "GET",
      requestUri: "/v1/registries",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Registries": [toRegistrySummary],
      },
    }, await resp.json());
  }

  async listSchemaVersions(
    {abortSignal, ...params}: RequestConfig & s.ListSchemaVersionsRequest,
  ): Promise<s.ListSchemaVersionsResponse> {
    const query = new URLSearchParams;
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSchemaVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}/versions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "SchemaVersions": [toSchemaVersionSummary],
      },
    }, await resp.json());
  }

  async listSchemas(
    {abortSignal, ...params}: RequestConfig & s.ListSchemasRequest,
  ): Promise<s.ListSchemasResponse> {
    const query = new URLSearchParams;
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["SchemaNamePrefix"] != null) query.set("schemaNamePrefix", params["SchemaNamePrefix"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSchemas",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Schemas": [toSchemaSummary],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putCodeBinding(
    {abortSignal, ...params}: RequestConfig & s.PutCodeBindingRequest,
  ): Promise<s.PutCodeBindingResponse> {
    const query = new URLSearchParams;
    if (params["SchemaVersion"] != null) query.set("schemaVersion", params["SchemaVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "PutCodeBinding",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}/language/${params["Language"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CreationDate": "d",
        "LastModified": "d",
        "SchemaVersion": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.CodeGenerationStatus>(x),
      },
    }, await resp.json());
  }

  async putResourcePolicy(
    {abortSignal, ...params}: RequestConfig & s.PutResourcePolicyRequest,
  ): Promise<s.PutResourcePolicyResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Policy: jsonP.serializeJsonValue(params["Policy"]),
      RevisionId: params["RevisionId"],
    };
    if (params["RegistryName"] != null) query.set("registryName", params["RegistryName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "PutResourcePolicy",
      method: "PUT",
      requestUri: "/v1/policy",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policy": jsonP.readJsonValue,
        "RevisionId": "s",
      },
    }, await resp.json());
  }

  async searchSchemas(
    {abortSignal, ...params}: RequestConfig & s.SearchSchemasRequest,
  ): Promise<s.SearchSchemasResponse> {
    const query = new URLSearchParams;
    query.set("keywords", params["Keywords"]?.toString() ?? "");
    if (params["Limit"] != null) query.set("limit", params["Limit"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "SearchSchemas",
      method: "GET",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/search`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Schemas": [toSearchSchemaSummary],
      },
    }, await resp.json());
  }

  async startDiscoverer(
    {abortSignal, ...params}: RequestConfig & s.StartDiscovererRequest,
  ): Promise<s.StartDiscovererResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StartDiscoverer",
      requestUri: cmnP.encodePath`/v1/discoverers/id/${params["DiscovererId"]}/start`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DiscovererId": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DiscovererState>(x),
      },
    }, await resp.json());
  }

  async stopDiscoverer(
    {abortSignal, ...params}: RequestConfig & s.StopDiscovererRequest,
  ): Promise<s.StopDiscovererResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopDiscoverer",
      requestUri: cmnP.encodePath`/v1/discoverers/id/${params["DiscovererId"]}/stop`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DiscovererId": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DiscovererState>(x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async updateDiscoverer(
    {abortSignal, ...params}: RequestConfig & s.UpdateDiscovererRequest,
  ): Promise<s.UpdateDiscovererResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDiscoverer",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/discoverers/id/${params["DiscovererId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "DiscovererArn": "s",
        "DiscovererId": "s",
        "SourceArn": "s",
        "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DiscovererState>(x),
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async updateRegistry(
    {abortSignal, ...params}: RequestConfig & s.UpdateRegistryRequest,
  ): Promise<s.UpdateRegistryResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRegistry",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "RegistryArn": "s",
        "RegistryName": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async updateSchema(
    {abortSignal, ...params}: RequestConfig & s.UpdateSchemaRequest,
  ): Promise<s.UpdateSchemaResponse> {
    const body: jsonP.JSONObject = {
      ClientTokenId: params["ClientTokenId"] ?? generateIdemptToken(),
      Content: params["Content"],
      Description: params["Description"],
      Type: params["Type"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSchema",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/registries/name/${params["RegistryName"]}/schemas/name/${params["SchemaName"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Description": "s",
        "LastModified": "d",
        "SchemaArn": "s",
        "SchemaName": "s",
        "SchemaVersion": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "Type": "s",
        "VersionCreatedDate": "d",
      },
    }, await resp.json());
  }

  // Resource State Waiters

  /**
   * Wait until code binding is generated
   * Checks state up to 30 times, 2 seconds apart (about 1 minutes max wait time).
   */
  async waitForCodeBindingExists(
    params: RequestConfig & s.DescribeCodeBindingRequest,
  ): Promise<s.DescribeCodeBindingResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state CodeBindingExists';
    for (let i = 0; i < 30; i++) {
      try {
        const resp = await this.describeCodeBinding(params);
        const field = resp?.Status;
        if (field === "CREATE_COMPLETE") return resp;
        if (field === "CREATE_IN_PROGRESS") continue;
        if (field === "CREATE_FAILED") throw new Error(errMessage);
      } catch (err) {
        if (["NotFoundException"].includes(err.shortCode)) throw err;
        throw err;
      }
      await new Promise(r => setTimeout(r, 2000));
    }
    throw new Error(errMessage);
  }

}

function toDiscovererSummary(root: jsonP.JSONValue): s.DiscovererSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "DiscovererArn": "s",
      "DiscovererId": "s",
      "SourceArn": "s",
      "State": (x: jsonP.JSONValue) => cmnP.readEnum<s.DiscovererState>(x),
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toRegistrySummary(root: jsonP.JSONValue): s.RegistrySummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "RegistryArn": "s",
      "RegistryName": "s",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toSchemaVersionSummary(root: jsonP.JSONValue): s.SchemaVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "SchemaArn": "s",
      "SchemaName": "s",
      "SchemaVersion": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.Type>(x),
    },
  }, root);
}

function toSchemaSummary(root: jsonP.JSONValue): s.SchemaSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "LastModified": "d",
      "SchemaArn": "s",
      "SchemaName": "s",
      "Tags": x => jsonP.readMap(String, String, x),
      "VersionCount": "n",
    },
  }, root);
}

function toSearchSchemaSummary(root: jsonP.JSONValue): s.SearchSchemaSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "RegistryName": "s",
      "SchemaArn": "s",
      "SchemaName": "s",
      "SchemaVersions": [toSearchSchemaVersionSummary],
    },
  }, root);
}

function toSearchSchemaVersionSummary(root: jsonP.JSONValue): s.SearchSchemaVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "CreatedDate": "d",
      "SchemaVersion": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.Type>(x),
    },
  }, root);
}
