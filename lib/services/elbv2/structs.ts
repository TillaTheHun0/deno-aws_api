// Autogenerated API structures for: Elastic Load Balancing

import * as cmnP from "../../encoding/common.ts";

// refs: 1 - tags: named, input
export interface AddListenerCertificatesInput {
  ListenerArn: string;
  Certificates: Certificate[];
}

// refs: 1 - tags: named, input
export interface AddTagsInput {
  ResourceArns: string[];
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface CreateListenerInput {
  LoadBalancerArn: string;
  Protocol?: ProtocolEnum | null;
  Port?: number | null;
  SslPolicy?: string | null;
  Certificates?: Certificate[] | null;
  DefaultActions: Action[];
  AlpnPolicy?: string[] | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLoadBalancerInput {
  Name: string;
  Subnets?: string[] | null;
  SubnetMappings?: SubnetMapping[] | null;
  SecurityGroups?: string[] | null;
  Scheme?: LoadBalancerSchemeEnum | null;
  Tags?: Tag[] | null;
  Type?: LoadBalancerTypeEnum | null;
  IpAddressType?: IpAddressType | null;
  CustomerOwnedIpv4Pool?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateRuleInput {
  ListenerArn: string;
  Conditions: RuleCondition[];
  Priority: number;
  Actions: Action[];
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTargetGroupInput {
  Name: string;
  Protocol?: ProtocolEnum | null;
  ProtocolVersion?: string | null;
  Port?: number | null;
  VpcId?: string | null;
  HealthCheckProtocol?: ProtocolEnum | null;
  HealthCheckPort?: string | null;
  HealthCheckEnabled?: boolean | null;
  HealthCheckPath?: string | null;
  HealthCheckIntervalSeconds?: number | null;
  HealthCheckTimeoutSeconds?: number | null;
  HealthyThresholdCount?: number | null;
  UnhealthyThresholdCount?: number | null;
  Matcher?: Matcher | null;
  TargetType?: TargetTypeEnum | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteListenerInput {
  ListenerArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteLoadBalancerInput {
  LoadBalancerArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteRuleInput {
  RuleArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteTargetGroupInput {
  TargetGroupArn: string;
}

// refs: 1 - tags: named, input
export interface DeregisterTargetsInput {
  TargetGroupArn: string;
  Targets: TargetDescription[];
}

// refs: 1 - tags: named, input
export interface DescribeAccountLimitsInput {
  Marker?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeListenerCertificatesInput {
  ListenerArn: string;
  Marker?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeListenersInput {
  LoadBalancerArn?: string | null;
  ListenerArns?: string[] | null;
  Marker?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeLoadBalancerAttributesInput {
  LoadBalancerArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeLoadBalancersInput {
  LoadBalancerArns?: string[] | null;
  Names?: string[] | null;
  Marker?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeRulesInput {
  ListenerArn?: string | null;
  RuleArns?: string[] | null;
  Marker?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeSSLPoliciesInput {
  Names?: string[] | null;
  Marker?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeTagsInput {
  ResourceArns: string[];
}

// refs: 1 - tags: named, input
export interface DescribeTargetGroupAttributesInput {
  TargetGroupArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeTargetGroupsInput {
  LoadBalancerArn?: string | null;
  TargetGroupArns?: string[] | null;
  Names?: string[] | null;
  Marker?: string | null;
  PageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeTargetHealthInput {
  TargetGroupArn: string;
  Targets?: TargetDescription[] | null;
}

// refs: 1 - tags: named, input
export interface ModifyListenerInput {
  ListenerArn: string;
  Port?: number | null;
  Protocol?: ProtocolEnum | null;
  SslPolicy?: string | null;
  Certificates?: Certificate[] | null;
  DefaultActions?: Action[] | null;
  AlpnPolicy?: string[] | null;
}

// refs: 1 - tags: named, input
export interface ModifyLoadBalancerAttributesInput {
  LoadBalancerArn: string;
  Attributes: LoadBalancerAttribute[];
}

// refs: 1 - tags: named, input
export interface ModifyRuleInput {
  RuleArn: string;
  Conditions?: RuleCondition[] | null;
  Actions?: Action[] | null;
}

// refs: 1 - tags: named, input
export interface ModifyTargetGroupInput {
  TargetGroupArn: string;
  HealthCheckProtocol?: ProtocolEnum | null;
  HealthCheckPort?: string | null;
  HealthCheckPath?: string | null;
  HealthCheckEnabled?: boolean | null;
  HealthCheckIntervalSeconds?: number | null;
  HealthCheckTimeoutSeconds?: number | null;
  HealthyThresholdCount?: number | null;
  UnhealthyThresholdCount?: number | null;
  Matcher?: Matcher | null;
}

// refs: 1 - tags: named, input
export interface ModifyTargetGroupAttributesInput {
  TargetGroupArn: string;
  Attributes: TargetGroupAttribute[];
}

// refs: 1 - tags: named, input
export interface RegisterTargetsInput {
  TargetGroupArn: string;
  Targets: TargetDescription[];
}

// refs: 1 - tags: named, input
export interface RemoveListenerCertificatesInput {
  ListenerArn: string;
  Certificates: Certificate[];
}

// refs: 1 - tags: named, input
export interface RemoveTagsInput {
  ResourceArns: string[];
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface SetIpAddressTypeInput {
  LoadBalancerArn: string;
  IpAddressType: IpAddressType;
}

// refs: 1 - tags: named, input
export interface SetRulePrioritiesInput {
  RulePriorities: RulePriorityPair[];
}

// refs: 1 - tags: named, input
export interface SetSecurityGroupsInput {
  LoadBalancerArn: string;
  SecurityGroups: string[];
}

// refs: 1 - tags: named, input
export interface SetSubnetsInput {
  LoadBalancerArn: string;
  Subnets?: string[] | null;
  SubnetMappings?: SubnetMapping[] | null;
  IpAddressType?: IpAddressType | null;
}

// refs: 1 - tags: named, output
export interface AddListenerCertificatesOutput {
  Certificates: Certificate[];
}

// refs: 1 - tags: named, output
export interface CreateListenerOutput {
  Listeners: Listener[];
}

// refs: 1 - tags: named, output
export interface CreateLoadBalancerOutput {
  LoadBalancers: LoadBalancer[];
}

// refs: 1 - tags: named, output
export interface CreateRuleOutput {
  Rules: Rule[];
}

// refs: 1 - tags: named, output
export interface CreateTargetGroupOutput {
  TargetGroups: TargetGroup[];
}

// refs: 1 - tags: named, output
export interface DescribeAccountLimitsOutput {
  Limits: Limit[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeListenerCertificatesOutput {
  Certificates: Certificate[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeListenersOutput {
  Listeners: Listener[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeLoadBalancerAttributesOutput {
  Attributes: LoadBalancerAttribute[];
}

// refs: 1 - tags: named, output
export interface DescribeLoadBalancersOutput {
  LoadBalancers: LoadBalancer[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeRulesOutput {
  Rules: Rule[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSSLPoliciesOutput {
  SslPolicies: SslPolicy[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTagsOutput {
  TagDescriptions: TagDescription[];
}

// refs: 1 - tags: named, output
export interface DescribeTargetGroupAttributesOutput {
  Attributes: TargetGroupAttribute[];
}

// refs: 1 - tags: named, output
export interface DescribeTargetGroupsOutput {
  TargetGroups: TargetGroup[];
  NextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTargetHealthOutput {
  TargetHealthDescriptions: TargetHealthDescription[];
}

// refs: 1 - tags: named, output
export interface ModifyListenerOutput {
  Listeners: Listener[];
}

// refs: 1 - tags: named, output
export interface ModifyLoadBalancerAttributesOutput {
  Attributes: LoadBalancerAttribute[];
}

// refs: 1 - tags: named, output
export interface ModifyRuleOutput {
  Rules: Rule[];
}

// refs: 1 - tags: named, output
export interface ModifyTargetGroupOutput {
  TargetGroups: TargetGroup[];
}

// refs: 1 - tags: named, output
export interface ModifyTargetGroupAttributesOutput {
  Attributes: TargetGroupAttribute[];
}

// refs: 1 - tags: named, output
export interface SetIpAddressTypeOutput {
  IpAddressType?: IpAddressType | null;
}

// refs: 1 - tags: named, output
export interface SetRulePrioritiesOutput {
  Rules: Rule[];
}

// refs: 1 - tags: named, output
export interface SetSecurityGroupsOutput {
  SecurityGroupIds: string[];
}

// refs: 1 - tags: named, output
export interface SetSubnetsOutput {
  AvailabilityZones: AvailabilityZone[];
  IpAddressType?: IpAddressType | null;
}

// refs: 9 - tags: input, named, interface, output
export interface Certificate {
  CertificateArn?: string | null;
  IsDefault?: boolean | null;
}

// refs: 6 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}

// refs: 14 - tags: input, named, enum, output
export type ProtocolEnum =
| "HTTP"
| "HTTPS"
| "TCP"
| "TLS"
| "UDP"
| "TCP_UDP"
| "GENEVE"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, interface, output
export interface Action {
  Type: ActionTypeEnum;
  TargetGroupArn?: string | null;
  AuthenticateOidcConfig?: AuthenticateOidcActionConfig | null;
  AuthenticateCognitoConfig?: AuthenticateCognitoActionConfig | null;
  Order?: number | null;
  RedirectConfig?: RedirectActionConfig | null;
  FixedResponseConfig?: FixedResponseActionConfig | null;
  ForwardConfig?: ForwardActionConfig | null;
}

// refs: 11 - tags: input, named, enum, output
export type ActionTypeEnum =
| "forward"
| "authenticate-oidc"
| "authenticate-cognito"
| "redirect"
| "fixed-response"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, interface, output
export interface AuthenticateOidcActionConfig {
  Issuer: string;
  AuthorizationEndpoint: string;
  TokenEndpoint: string;
  UserInfoEndpoint: string;
  ClientId: string;
  ClientSecret?: string | null;
  SessionCookieName?: string | null;
  Scope?: string | null;
  SessionTimeout?: number | null;
  AuthenticationRequestExtraParams: { [key: string]: string | null | undefined };
  OnUnauthenticatedRequest?: AuthenticateOidcActionConditionalBehaviorEnum | null;
  UseExistingClientSecret?: boolean | null;
}

// refs: 11 - tags: input, named, enum, output
export type AuthenticateOidcActionConditionalBehaviorEnum =
| "deny"
| "allow"
| "authenticate"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, interface, output
export interface AuthenticateCognitoActionConfig {
  UserPoolArn: string;
  UserPoolClientId: string;
  UserPoolDomain: string;
  SessionCookieName?: string | null;
  Scope?: string | null;
  SessionTimeout?: number | null;
  AuthenticationRequestExtraParams: { [key: string]: string | null | undefined };
  OnUnauthenticatedRequest?: AuthenticateCognitoActionConditionalBehaviorEnum | null;
}

// refs: 11 - tags: input, named, enum, output
export type AuthenticateCognitoActionConditionalBehaviorEnum =
| "deny"
| "allow"
| "authenticate"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, interface, output
export interface RedirectActionConfig {
  Protocol?: string | null;
  Port?: string | null;
  Host?: string | null;
  Path?: string | null;
  Query?: string | null;
  StatusCode: RedirectActionStatusCodeEnum;
}

// refs: 11 - tags: input, named, enum, output
export type RedirectActionStatusCodeEnum =
| "HTTP_301"
| "HTTP_302"
| cmnP.UnexpectedEnumValue;

// refs: 11 - tags: input, named, interface, output
export interface FixedResponseActionConfig {
  MessageBody?: string | null;
  StatusCode: string;
  ContentType?: string | null;
}

// refs: 11 - tags: input, named, interface, output
export interface ForwardActionConfig {
  TargetGroups: TargetGroupTuple[];
  TargetGroupStickinessConfig?: TargetGroupStickinessConfig | null;
}

// refs: 11 - tags: input, named, interface, output
export interface TargetGroupTuple {
  TargetGroupArn?: string | null;
  Weight?: number | null;
}

// refs: 11 - tags: input, named, interface, output
export interface TargetGroupStickinessConfig {
  Enabled?: boolean | null;
  DurationSeconds?: number | null;
}

// refs: 2 - tags: input, named, interface
export interface SubnetMapping {
  SubnetId?: string | null;
  AllocationId?: string | null;
  PrivateIPv4Address?: string | null;
  IPv6Address?: string | null;
}

// refs: 3 - tags: input, named, enum, output
export type LoadBalancerSchemeEnum =
| "internet-facing"
| "internal"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type LoadBalancerTypeEnum =
| "application"
| "network"
| "gateway"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type IpAddressType =
| "ipv4"
| "dualstack"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface RuleCondition {
  Field?: string | null;
  Values: string[];
  HostHeaderConfig?: HostHeaderConditionConfig | null;
  PathPatternConfig?: PathPatternConditionConfig | null;
  HttpHeaderConfig?: HttpHeaderConditionConfig | null;
  QueryStringConfig?: QueryStringConditionConfig | null;
  HttpRequestMethodConfig?: HttpRequestMethodConditionConfig | null;
  SourceIpConfig?: SourceIpConditionConfig | null;
}

// refs: 6 - tags: input, named, interface, output
export interface HostHeaderConditionConfig {
  Values: string[];
}

// refs: 6 - tags: input, named, interface, output
export interface PathPatternConditionConfig {
  Values: string[];
}

// refs: 6 - tags: input, named, interface, output
export interface HttpHeaderConditionConfig {
  HttpHeaderName?: string | null;
  Values: string[];
}

// refs: 6 - tags: input, named, interface, output
export interface QueryStringConditionConfig {
  Values: QueryStringKeyValuePair[];
}

// refs: 6 - tags: input, named, interface, output
export interface QueryStringKeyValuePair {
  Key?: string | null;
  Value?: string | null;
}

// refs: 6 - tags: input, named, interface, output
export interface HttpRequestMethodConditionConfig {
  Values: string[];
}

// refs: 6 - tags: input, named, interface, output
export interface SourceIpConditionConfig {
  Values: string[];
}

// refs: 5 - tags: input, named, interface, output
export interface Matcher {
  HttpCode?: string | null;
  GrpcCode?: string | null;
}

// refs: 4 - tags: input, named, enum, output
export type TargetTypeEnum =
| "instance"
| "ip"
| "lambda"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface TargetDescription {
  Id: string;
  Port?: number | null;
  AvailabilityZone?: string | null;
}

// refs: 3 - tags: input, named, interface, output
export interface LoadBalancerAttribute {
  Key?: string | null;
  Value?: string | null;
}

// refs: 3 - tags: input, named, interface, output
export interface TargetGroupAttribute {
  Key?: string | null;
  Value?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface RulePriorityPair {
  RuleArn?: string | null;
  Priority?: number | null;
}

// refs: 3 - tags: output, named, interface
export interface Listener {
  ListenerArn?: string | null;
  LoadBalancerArn?: string | null;
  Port?: number | null;
  Protocol?: ProtocolEnum | null;
  Certificates: Certificate[];
  SslPolicy?: string | null;
  DefaultActions: Action[];
  AlpnPolicy: string[];
}

// refs: 2 - tags: output, named, interface
export interface LoadBalancer {
  LoadBalancerArn?: string | null;
  DNSName?: string | null;
  CanonicalHostedZoneId?: string | null;
  CreatedTime?: Date | number | null;
  LoadBalancerName?: string | null;
  Scheme?: LoadBalancerSchemeEnum | null;
  VpcId?: string | null;
  State?: LoadBalancerState | null;
  Type?: LoadBalancerTypeEnum | null;
  AvailabilityZones: AvailabilityZone[];
  SecurityGroups: string[];
  IpAddressType?: IpAddressType | null;
  CustomerOwnedIpv4Pool?: string | null;
}

// refs: 2 - tags: output, named, interface
export interface LoadBalancerState {
  Code?: LoadBalancerStateEnum | null;
  Reason?: string | null;
}

// refs: 2 - tags: output, named, enum
export type LoadBalancerStateEnum =
| "active"
| "provisioning"
| "active_impaired"
| "failed"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface AvailabilityZone {
  ZoneName?: string | null;
  SubnetId?: string | null;
  OutpostId?: string | null;
  LoadBalancerAddresses: LoadBalancerAddress[];
}

// refs: 3 - tags: output, named, interface
export interface LoadBalancerAddress {
  IpAddress?: string | null;
  AllocationId?: string | null;
  PrivateIPv4Address?: string | null;
  IPv6Address?: string | null;
}

// refs: 4 - tags: output, named, interface
export interface Rule {
  RuleArn?: string | null;
  Priority?: string | null;
  Conditions: RuleCondition[];
  Actions: Action[];
  IsDefault?: boolean | null;
}

// refs: 3 - tags: output, named, interface
export interface TargetGroup {
  TargetGroupArn?: string | null;
  TargetGroupName?: string | null;
  Protocol?: ProtocolEnum | null;
  Port?: number | null;
  VpcId?: string | null;
  HealthCheckProtocol?: ProtocolEnum | null;
  HealthCheckPort?: string | null;
  HealthCheckEnabled?: boolean | null;
  HealthCheckIntervalSeconds?: number | null;
  HealthCheckTimeoutSeconds?: number | null;
  HealthyThresholdCount?: number | null;
  UnhealthyThresholdCount?: number | null;
  HealthCheckPath?: string | null;
  Matcher?: Matcher | null;
  LoadBalancerArns: string[];
  TargetType?: TargetTypeEnum | null;
  ProtocolVersion?: string | null;
}

// refs: 1 - tags: output, named, interface
export interface Limit {
  Name?: string | null;
  Max?: string | null;
}

// refs: 1 - tags: output, named, interface
export interface SslPolicy {
  SslProtocols: string[];
  Ciphers: Cipher[];
  Name?: string | null;
}

// refs: 1 - tags: output, named, interface
export interface Cipher {
  Name?: string | null;
  Priority?: number | null;
}

// refs: 1 - tags: output, named, interface
export interface TagDescription {
  ResourceArn?: string | null;
  Tags: Tag[];
}

// refs: 1 - tags: output, named, interface
export interface TargetHealthDescription {
  Target?: TargetDescription | null;
  HealthCheckPort?: string | null;
  TargetHealth?: TargetHealth | null;
}

// refs: 1 - tags: output, named, interface
export interface TargetHealth {
  State?: TargetHealthStateEnum | null;
  Reason?: TargetHealthReasonEnum | null;
  Description?: string | null;
}

// refs: 1 - tags: output, named, enum
export type TargetHealthStateEnum =
| "initial"
| "healthy"
| "unhealthy"
| "unused"
| "draining"
| "unavailable"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type TargetHealthReasonEnum =
| "Elb.RegistrationInProgress"
| "Elb.InitialHealthChecking"
| "Target.ResponseCodeMismatch"
| "Target.Timeout"
| "Target.FailedHealthChecks"
| "Target.NotRegistered"
| "Target.NotInUse"
| "Target.DeregistrationInProgress"
| "Target.InvalidState"
| "Target.IpUnusable"
| "Target.HealthCheckDisabled"
| "Elb.InternalError"
| cmnP.UnexpectedEnumValue;
