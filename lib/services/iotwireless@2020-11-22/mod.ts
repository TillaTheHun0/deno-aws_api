// Autogenerated API client for: AWS IoT Wireless

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class IoTWireless {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoTWireless.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-11-22",
    "endpointPrefix": "api.iotwireless",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT Wireless",
    "serviceId": "IoT Wireless",
    "signatureVersion": "v4",
    "signingName": "iotwireless",
    "uid": "iotwireless-2020-11-22"
  };

  async associateAwsAccountWithPartnerAccount(
    {abortSignal, ...params}: RequestConfig & s.AssociateAwsAccountWithPartnerAccountRequest,
  ): Promise<s.AssociateAwsAccountWithPartnerAccountResponse> {
    const body: jsonP.JSONObject = {
      Sidewalk: fromSidewalkAccountInfo(params["Sidewalk"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateAwsAccountWithPartnerAccount",
      requestUri: "/partner-accounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Sidewalk": toSidewalkAccountInfo,
      },
    }, await resp.json());
  }

  async associateWirelessDeviceWithThing(
    {abortSignal, ...params}: RequestConfig & s.AssociateWirelessDeviceWithThingRequest,
  ): Promise<s.AssociateWirelessDeviceWithThingResponse> {
    const body: jsonP.JSONObject = {
      ThingArn: params["ThingArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWirelessDeviceWithThing",
      method: "PUT",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateWirelessGatewayWithCertificate(
    {abortSignal, ...params}: RequestConfig & s.AssociateWirelessGatewayWithCertificateRequest,
  ): Promise<s.AssociateWirelessGatewayWithCertificateResponse> {
    const body: jsonP.JSONObject = {
      IotCertificateId: params["IotCertificateId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWirelessGatewayWithCertificate",
      method: "PUT",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/certificate`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IotCertificateId": "s",
      },
    }, await resp.json());
  }

  async associateWirelessGatewayWithThing(
    {abortSignal, ...params}: RequestConfig & s.AssociateWirelessGatewayWithThingRequest,
  ): Promise<s.AssociateWirelessGatewayWithThingResponse> {
    const body: jsonP.JSONObject = {
      ThingArn: params["ThingArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWirelessGatewayWithThing",
      method: "PUT",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDestination(
    {abortSignal, ...params}: RequestConfig & s.CreateDestinationRequest,
  ): Promise<s.CreateDestinationResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ExpressionType: params["ExpressionType"],
      Expression: params["Expression"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDestination",
      requestUri: "/destinations",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createDeviceProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateDeviceProfileRequest = {},
  ): Promise<s.CreateDeviceProfileResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      LoRaWAN: fromLoRaWANDeviceProfile(params["LoRaWAN"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeviceProfile",
      requestUri: "/device-profiles",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createServiceProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateServiceProfileRequest = {},
  ): Promise<s.CreateServiceProfileResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      LoRaWAN: fromLoRaWANServiceProfile(params["LoRaWAN"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateServiceProfile",
      requestUri: "/service-profiles",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createWirelessDevice(
    {abortSignal, ...params}: RequestConfig & s.CreateWirelessDeviceRequest,
  ): Promise<s.CreateWirelessDeviceResponse> {
    const body: jsonP.JSONObject = {
      Type: params["Type"],
      Name: params["Name"],
      Description: params["Description"],
      DestinationName: params["DestinationName"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      LoRaWAN: fromLoRaWANDevice(params["LoRaWAN"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessDevice",
      requestUri: "/wireless-devices",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createWirelessGateway(
    {abortSignal, ...params}: RequestConfig & s.CreateWirelessGatewayRequest,
  ): Promise<s.CreateWirelessGatewayResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      LoRaWAN: fromLoRaWANGateway(params["LoRaWAN"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessGateway",
      requestUri: "/wireless-gateways",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createWirelessGatewayTask(
    {abortSignal, ...params}: RequestConfig & s.CreateWirelessGatewayTaskRequest,
  ): Promise<s.CreateWirelessGatewayTaskResponse> {
    const body: jsonP.JSONObject = {
      WirelessGatewayTaskDefinitionId: params["WirelessGatewayTaskDefinitionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessGatewayTask",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/tasks`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessGatewayTaskDefinitionId": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.WirelessGatewayTaskStatus>(x),
      },
    }, await resp.json());
  }

  async createWirelessGatewayTaskDefinition(
    {abortSignal, ...params}: RequestConfig & s.CreateWirelessGatewayTaskDefinitionRequest,
  ): Promise<s.CreateWirelessGatewayTaskDefinitionResponse> {
    const body: jsonP.JSONObject = {
      AutoCreateTasks: params["AutoCreateTasks"],
      Name: params["Name"],
      Update: fromUpdateWirelessGatewayTaskCreate(params["Update"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessGatewayTaskDefinition",
      requestUri: "/wireless-gateway-task-definitions",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async deleteDestination(
    {abortSignal, ...params}: RequestConfig & s.DeleteDestinationRequest,
  ): Promise<s.DeleteDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/destinations/${params["Name"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDeviceProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteDeviceProfileRequest,
  ): Promise<s.DeleteDeviceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDeviceProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/device-profiles/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteServiceProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteServiceProfileRequest,
  ): Promise<s.DeleteServiceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteServiceProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/service-profiles/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessDevice(
    {abortSignal, ...params}: RequestConfig & s.DeleteWirelessDeviceRequest,
  ): Promise<s.DeleteWirelessDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessDevice",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessGateway(
    {abortSignal, ...params}: RequestConfig & s.DeleteWirelessGatewayRequest,
  ): Promise<s.DeleteWirelessGatewayResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessGateway",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessGatewayTask(
    {abortSignal, ...params}: RequestConfig & s.DeleteWirelessGatewayTaskRequest,
  ): Promise<s.DeleteWirelessGatewayTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessGatewayTask",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/tasks`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessGatewayTaskDefinition(
    {abortSignal, ...params}: RequestConfig & s.DeleteWirelessGatewayTaskDefinitionRequest,
  ): Promise<s.DeleteWirelessGatewayTaskDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessGatewayTaskDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateway-task-definitions/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateAwsAccountFromPartnerAccount(
    {abortSignal, ...params}: RequestConfig & s.DisassociateAwsAccountFromPartnerAccountRequest,
  ): Promise<s.DisassociateAwsAccountFromPartnerAccountResponse> {
    const query = new URLSearchParams;
    query.set("partnerType", params["PartnerType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateAwsAccountFromPartnerAccount",
      method: "DELETE",
      requestUri: cmnP.encodePath`/partner-accounts/${params["PartnerAccountId"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWirelessDeviceFromThing(
    {abortSignal, ...params}: RequestConfig & s.DisassociateWirelessDeviceFromThingRequest,
  ): Promise<s.DisassociateWirelessDeviceFromThingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateWirelessDeviceFromThing",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWirelessGatewayFromCertificate(
    {abortSignal, ...params}: RequestConfig & s.DisassociateWirelessGatewayFromCertificateRequest,
  ): Promise<s.DisassociateWirelessGatewayFromCertificateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateWirelessGatewayFromCertificate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/certificate`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWirelessGatewayFromThing(
    {abortSignal, ...params}: RequestConfig & s.DisassociateWirelessGatewayFromThingRequest,
  ): Promise<s.DisassociateWirelessGatewayFromThingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateWirelessGatewayFromThing",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getDestination(
    {abortSignal, ...params}: RequestConfig & s.GetDestinationRequest,
  ): Promise<s.GetDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDestination",
      method: "GET",
      requestUri: cmnP.encodePath`/destinations/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
        "Expression": "s",
        "ExpressionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExpressionType>(x),
        "Description": "s",
        "RoleArn": "s",
      },
    }, await resp.json());
  }

  async getDeviceProfile(
    {abortSignal, ...params}: RequestConfig & s.GetDeviceProfileRequest,
  ): Promise<s.GetDeviceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeviceProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/device-profiles/${params["Id"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
        "Id": "s",
        "LoRaWAN": toLoRaWANDeviceProfile,
      },
    }, await resp.json());
  }

  async getPartnerAccount(
    {abortSignal, ...params}: RequestConfig & s.GetPartnerAccountRequest,
  ): Promise<s.GetPartnerAccountResponse> {
    const query = new URLSearchParams;
    query.set("partnerType", params["PartnerType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetPartnerAccount",
      method: "GET",
      requestUri: cmnP.encodePath`/partner-accounts/${params["PartnerAccountId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Sidewalk": toSidewalkAccountInfoWithFingerprint,
        "AccountLinked": "b",
      },
    }, await resp.json());
  }

  async getServiceEndpoint(
    {abortSignal, ...params}: RequestConfig & s.GetServiceEndpointRequest = {},
  ): Promise<s.GetServiceEndpointResponse> {
    const query = new URLSearchParams;
    if (params["ServiceType"] != null) query.set("serviceType", params["ServiceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetServiceEndpoint",
      method: "GET",
      requestUri: "/service-endpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.WirelessGatewayServiceType>(x),
        "ServiceEndpoint": "s",
        "ServerTrust": "s",
      },
    }, await resp.json());
  }

  async getServiceProfile(
    {abortSignal, ...params}: RequestConfig & s.GetServiceProfileRequest,
  ): Promise<s.GetServiceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetServiceProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/service-profiles/${params["Id"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
        "Id": "s",
        "LoRaWAN": toLoRaWANGetServiceProfileInfo,
      },
    }, await resp.json());
  }

  async getWirelessDevice(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessDeviceRequest,
  ): Promise<s.GetWirelessDeviceResponse> {
    const query = new URLSearchParams;
    query.set("identifierType", params["IdentifierType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetWirelessDevice",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Identifier"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.WirelessDeviceType>(x),
        "Name": "s",
        "Description": "s",
        "DestinationName": "s",
        "Id": "s",
        "Arn": "s",
        "ThingName": "s",
        "ThingArn": "s",
        "LoRaWAN": toLoRaWANDevice,
      },
    }, await resp.json());
  }

  async getWirelessDeviceStatistics(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessDeviceStatisticsRequest,
  ): Promise<s.GetWirelessDeviceStatisticsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessDeviceStatistics",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-devices/${params["WirelessDeviceId"]}/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessDeviceId": "s",
        "LastUplinkReceivedAt": "s",
        "LoRaWAN": toLoRaWANDeviceMetadata,
      },
    }, await resp.json());
  }

  async getWirelessGateway(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessGatewayRequest,
  ): Promise<s.GetWirelessGatewayResponse> {
    const query = new URLSearchParams;
    query.set("identifierType", params["IdentifierType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetWirelessGateway",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Identifier"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "Id": "s",
        "Description": "s",
        "LoRaWAN": toLoRaWANGateway,
        "Arn": "s",
        "ThingName": "s",
        "ThingArn": "s",
      },
    }, await resp.json());
  }

  async getWirelessGatewayCertificate(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessGatewayCertificateRequest,
  ): Promise<s.GetWirelessGatewayCertificateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayCertificate",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/certificate`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IotCertificateId": "s",
        "LoRaWANNetworkServerCertificateId": "s",
      },
    }, await resp.json());
  }

  async getWirelessGatewayFirmwareInformation(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessGatewayFirmwareInformationRequest,
  ): Promise<s.GetWirelessGatewayFirmwareInformationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayFirmwareInformation",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/firmware-information`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoRaWAN": toLoRaWANGatewayCurrentVersion,
      },
    }, await resp.json());
  }

  async getWirelessGatewayStatistics(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessGatewayStatisticsRequest,
  ): Promise<s.GetWirelessGatewayStatisticsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayStatistics",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["WirelessGatewayId"]}/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessGatewayId": "s",
        "LastUplinkReceivedAt": "s",
      },
    }, await resp.json());
  }

  async getWirelessGatewayTask(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessGatewayTaskRequest,
  ): Promise<s.GetWirelessGatewayTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayTask",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/tasks`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessGatewayId": "s",
        "WirelessGatewayTaskDefinitionId": "s",
        "LastUplinkReceivedAt": "s",
        "TaskCreatedAt": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.WirelessGatewayTaskStatus>(x),
      },
    }, await resp.json());
  }

  async getWirelessGatewayTaskDefinition(
    {abortSignal, ...params}: RequestConfig & s.GetWirelessGatewayTaskDefinitionRequest,
  ): Promise<s.GetWirelessGatewayTaskDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayTaskDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateway-task-definitions/${params["Id"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutoCreateTasks": "b",
        "Name": "s",
        "Update": toUpdateWirelessGatewayTaskCreate,
      },
    }, await resp.json());
  }

  async listDestinations(
    {abortSignal, ...params}: RequestConfig & s.ListDestinationsRequest = {},
  ): Promise<s.ListDestinationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDestinations",
      method: "GET",
      requestUri: "/destinations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "DestinationList": [toDestinations],
      },
    }, await resp.json());
  }

  async listDeviceProfiles(
    {abortSignal, ...params}: RequestConfig & s.ListDeviceProfilesRequest = {},
  ): Promise<s.ListDeviceProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceProfiles",
      method: "GET",
      requestUri: "/device-profiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "DeviceProfileList": [toDeviceProfile],
      },
    }, await resp.json());
  }

  async listPartnerAccounts(
    {abortSignal, ...params}: RequestConfig & s.ListPartnerAccountsRequest = {},
  ): Promise<s.ListPartnerAccountsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPartnerAccounts",
      method: "GET",
      requestUri: "/partner-accounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Sidewalk": [toSidewalkAccountInfoWithFingerprint],
      },
    }, await resp.json());
  }

  async listServiceProfiles(
    {abortSignal, ...params}: RequestConfig & s.ListServiceProfilesRequest = {},
  ): Promise<s.ListServiceProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListServiceProfiles",
      method: "GET",
      requestUri: "/service-profiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "ServiceProfileList": [toServiceProfile],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["ResourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listWirelessDevices(
    {abortSignal, ...params}: RequestConfig & s.ListWirelessDevicesRequest = {},
  ): Promise<s.ListWirelessDevicesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["DestinationName"] != null) query.set("destinationName", params["DestinationName"]?.toString() ?? "");
    if (params["DeviceProfileId"] != null) query.set("deviceProfileId", params["DeviceProfileId"]?.toString() ?? "");
    if (params["ServiceProfileId"] != null) query.set("serviceProfileId", params["ServiceProfileId"]?.toString() ?? "");
    if (params["WirelessDeviceType"] != null) query.set("wirelessDeviceType", params["WirelessDeviceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWirelessDevices",
      method: "GET",
      requestUri: "/wireless-devices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "WirelessDeviceList": [toWirelessDeviceStatistics],
      },
    }, await resp.json());
  }

  async listWirelessGatewayTaskDefinitions(
    {abortSignal, ...params}: RequestConfig & s.ListWirelessGatewayTaskDefinitionsRequest = {},
  ): Promise<s.ListWirelessGatewayTaskDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["TaskDefinitionType"] != null) query.set("taskDefinitionType", params["TaskDefinitionType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWirelessGatewayTaskDefinitions",
      method: "GET",
      requestUri: "/wireless-gateway-task-definitions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "TaskDefinitions": [toUpdateWirelessGatewayTaskEntry],
      },
    }, await resp.json());
  }

  async listWirelessGateways(
    {abortSignal, ...params}: RequestConfig & s.ListWirelessGatewaysRequest = {},
  ): Promise<s.ListWirelessGatewaysResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWirelessGateways",
      method: "GET",
      requestUri: "/wireless-gateways",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "WirelessGatewayList": [toWirelessGatewayStatistics],
      },
    }, await resp.json());
  }

  async sendDataToWirelessDevice(
    {abortSignal, ...params}: RequestConfig & s.SendDataToWirelessDeviceRequest,
  ): Promise<s.SendDataToWirelessDeviceResponse> {
    const body: jsonP.JSONObject = {
      TransmitMode: params["TransmitMode"],
      PayloadData: params["PayloadData"],
      WirelessMetadata: fromWirelessMetadata(params["WirelessMetadata"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendDataToWirelessDevice",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/data`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    query.set("resourceArn", params["ResourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "TagResource",
      requestUri: "/tags",
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async testWirelessDevice(
    {abortSignal, ...params}: RequestConfig & s.TestWirelessDeviceRequest,
  ): Promise<s.TestWirelessDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "TestWirelessDevice",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/test`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Result": "s",
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["ResourceArn"]?.toString() ?? "");
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: "/tags",
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDestination(
    {abortSignal, ...params}: RequestConfig & s.UpdateDestinationRequest,
  ): Promise<s.UpdateDestinationResponse> {
    const body: jsonP.JSONObject = {
      ExpressionType: params["ExpressionType"],
      Expression: params["Expression"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDestination",
      method: "PATCH",
      requestUri: cmnP.encodePath`/destinations/${params["Name"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePartnerAccount(
    {abortSignal, ...params}: RequestConfig & s.UpdatePartnerAccountRequest,
  ): Promise<s.UpdatePartnerAccountResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Sidewalk: fromSidewalkUpdateAccount(params["Sidewalk"]),
    };
    query.set("partnerType", params["PartnerType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdatePartnerAccount",
      method: "PATCH",
      requestUri: cmnP.encodePath`/partner-accounts/${params["PartnerAccountId"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateWirelessDevice(
    {abortSignal, ...params}: RequestConfig & s.UpdateWirelessDeviceRequest,
  ): Promise<s.UpdateWirelessDeviceResponse> {
    const body: jsonP.JSONObject = {
      DestinationName: params["DestinationName"],
      Name: params["Name"],
      Description: params["Description"],
      LoRaWAN: fromLoRaWANUpdateDevice(params["LoRaWAN"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWirelessDevice",
      method: "PATCH",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateWirelessGateway(
    {abortSignal, ...params}: RequestConfig & s.UpdateWirelessGatewayRequest,
  ): Promise<s.UpdateWirelessGatewayResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWirelessGateway",
      method: "PATCH",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromSidewalkAccountInfo(input?: s.SidewalkAccountInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AmazonId: input["AmazonId"],
    AppServerPrivateKey: input["AppServerPrivateKey"],
  }
}
function toSidewalkAccountInfo(root: jsonP.JSONValue): s.SidewalkAccountInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmazonId": "s",
      "AppServerPrivateKey": "s",
    },
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromLoRaWANDeviceProfile(input?: s.LoRaWANDeviceProfile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SupportsClassB: input["SupportsClassB"],
    ClassBTimeout: input["ClassBTimeout"],
    PingSlotPeriod: input["PingSlotPeriod"],
    PingSlotDr: input["PingSlotDr"],
    PingSlotFreq: input["PingSlotFreq"],
    SupportsClassC: input["SupportsClassC"],
    ClassCTimeout: input["ClassCTimeout"],
    MacVersion: input["MacVersion"],
    RegParamsRevision: input["RegParamsRevision"],
    RxDelay1: input["RxDelay1"],
    RxDrOffset1: input["RxDrOffset1"],
    RxDataRate2: input["RxDataRate2"],
    RxFreq2: input["RxFreq2"],
    FactoryPresetFreqsList: input["FactoryPresetFreqsList"],
    MaxEirp: input["MaxEirp"],
    MaxDutyCycle: input["MaxDutyCycle"],
    RfRegion: input["RfRegion"],
    SupportsJoin: input["SupportsJoin"],
    Supports32BitFCnt: input["Supports32BitFCnt"],
  }
}
function toLoRaWANDeviceProfile(root: jsonP.JSONValue): s.LoRaWANDeviceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "SupportsClassB": "b",
      "ClassBTimeout": "n",
      "PingSlotPeriod": "n",
      "PingSlotDr": "n",
      "PingSlotFreq": "n",
      "SupportsClassC": "b",
      "ClassCTimeout": "n",
      "MacVersion": "s",
      "RegParamsRevision": "s",
      "RxDelay1": "n",
      "RxDrOffset1": "n",
      "RxDataRate2": "n",
      "RxFreq2": "n",
      "FactoryPresetFreqsList": ["n"],
      "MaxEirp": "n",
      "MaxDutyCycle": "n",
      "RfRegion": "s",
      "SupportsJoin": "b",
      "Supports32BitFCnt": "b",
    },
  }, root);
}

function fromLoRaWANServiceProfile(input?: s.LoRaWANServiceProfile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AddGwMetadata: input["AddGwMetadata"],
  }
}

function fromLoRaWANDevice(input?: s.LoRaWANDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DevEui: input["DevEui"],
    DeviceProfileId: input["DeviceProfileId"],
    ServiceProfileId: input["ServiceProfileId"],
    OtaaV1_1: fromOtaaV1_1(input["OtaaV1_1"]),
    OtaaV1_0_x: fromOtaaV1_0_x(input["OtaaV1_0_x"]),
    AbpV1_1: fromAbpV1_1(input["AbpV1_1"]),
    AbpV1_0_x: fromAbpV1_0_x(input["AbpV1_0_x"]),
  }
}
function toLoRaWANDevice(root: jsonP.JSONValue): s.LoRaWANDevice {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevEui": "s",
      "DeviceProfileId": "s",
      "ServiceProfileId": "s",
      "OtaaV1_1": toOtaaV1_1,
      "OtaaV1_0_x": toOtaaV1_0_x,
      "AbpV1_1": toAbpV1_1,
      "AbpV1_0_x": toAbpV1_0_x,
    },
  }, root);
}

function fromOtaaV1_1(input?: s.OtaaV1_1 | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppKey: input["AppKey"],
    NwkKey: input["NwkKey"],
    JoinEui: input["JoinEui"],
  }
}
function toOtaaV1_1(root: jsonP.JSONValue): s.OtaaV1_1 {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppKey": "s",
      "NwkKey": "s",
      "JoinEui": "s",
    },
  }, root);
}

function fromOtaaV1_0_x(input?: s.OtaaV1_0_x | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppKey: input["AppKey"],
    AppEui: input["AppEui"],
  }
}
function toOtaaV1_0_x(root: jsonP.JSONValue): s.OtaaV1_0_x {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppKey": "s",
      "AppEui": "s",
    },
  }, root);
}

function fromAbpV1_1(input?: s.AbpV1_1 | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DevAddr: input["DevAddr"],
    SessionKeys: fromSessionKeysAbpV1_1(input["SessionKeys"]),
  }
}
function toAbpV1_1(root: jsonP.JSONValue): s.AbpV1_1 {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevAddr": "s",
      "SessionKeys": toSessionKeysAbpV1_1,
    },
  }, root);
}

function fromSessionKeysAbpV1_1(input?: s.SessionKeysAbpV1_1 | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FNwkSIntKey: input["FNwkSIntKey"],
    SNwkSIntKey: input["SNwkSIntKey"],
    NwkSEncKey: input["NwkSEncKey"],
    AppSKey: input["AppSKey"],
  }
}
function toSessionKeysAbpV1_1(root: jsonP.JSONValue): s.SessionKeysAbpV1_1 {
  return jsonP.readObj({
    required: {},
    optional: {
      "FNwkSIntKey": "s",
      "SNwkSIntKey": "s",
      "NwkSEncKey": "s",
      "AppSKey": "s",
    },
  }, root);
}

function fromAbpV1_0_x(input?: s.AbpV1_0_x | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DevAddr: input["DevAddr"],
    SessionKeys: fromSessionKeysAbpV1_0_x(input["SessionKeys"]),
  }
}
function toAbpV1_0_x(root: jsonP.JSONValue): s.AbpV1_0_x {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevAddr": "s",
      "SessionKeys": toSessionKeysAbpV1_0_x,
    },
  }, root);
}

function fromSessionKeysAbpV1_0_x(input?: s.SessionKeysAbpV1_0_x | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NwkSKey: input["NwkSKey"],
    AppSKey: input["AppSKey"],
  }
}
function toSessionKeysAbpV1_0_x(root: jsonP.JSONValue): s.SessionKeysAbpV1_0_x {
  return jsonP.readObj({
    required: {},
    optional: {
      "NwkSKey": "s",
      "AppSKey": "s",
    },
  }, root);
}

function fromLoRaWANGateway(input?: s.LoRaWANGateway | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GatewayEui: input["GatewayEui"],
    RfRegion: input["RfRegion"],
  }
}
function toLoRaWANGateway(root: jsonP.JSONValue): s.LoRaWANGateway {
  return jsonP.readObj({
    required: {},
    optional: {
      "GatewayEui": "s",
      "RfRegion": "s",
    },
  }, root);
}

function fromUpdateWirelessGatewayTaskCreate(input?: s.UpdateWirelessGatewayTaskCreate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UpdateDataSource: input["UpdateDataSource"],
    UpdateDataRole: input["UpdateDataRole"],
    LoRaWAN: fromLoRaWANUpdateGatewayTaskCreate(input["LoRaWAN"]),
  }
}
function toUpdateWirelessGatewayTaskCreate(root: jsonP.JSONValue): s.UpdateWirelessGatewayTaskCreate {
  return jsonP.readObj({
    required: {},
    optional: {
      "UpdateDataSource": "s",
      "UpdateDataRole": "s",
      "LoRaWAN": toLoRaWANUpdateGatewayTaskCreate,
    },
  }, root);
}

function fromLoRaWANUpdateGatewayTaskCreate(input?: s.LoRaWANUpdateGatewayTaskCreate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UpdateSignature: input["UpdateSignature"],
    SigKeyCrc: input["SigKeyCrc"],
    CurrentVersion: fromLoRaWANGatewayVersion(input["CurrentVersion"]),
    UpdateVersion: fromLoRaWANGatewayVersion(input["UpdateVersion"]),
  }
}
function toLoRaWANUpdateGatewayTaskCreate(root: jsonP.JSONValue): s.LoRaWANUpdateGatewayTaskCreate {
  return jsonP.readObj({
    required: {},
    optional: {
      "UpdateSignature": "s",
      "SigKeyCrc": "n",
      "CurrentVersion": toLoRaWANGatewayVersion,
      "UpdateVersion": toLoRaWANGatewayVersion,
    },
  }, root);
}

function fromLoRaWANGatewayVersion(input?: s.LoRaWANGatewayVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PackageVersion: input["PackageVersion"],
    Model: input["Model"],
    Station: input["Station"],
  }
}
function toLoRaWANGatewayVersion(root: jsonP.JSONValue): s.LoRaWANGatewayVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "PackageVersion": "s",
      "Model": "s",
      "Station": "s",
    },
  }, root);
}

function fromWirelessMetadata(input?: s.WirelessMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LoRaWAN: fromLoRaWANSendDataToDevice(input["LoRaWAN"]),
    Sidewalk: fromSidewalkSendDataToDevice(input["Sidewalk"]),
  }
}

function fromLoRaWANSendDataToDevice(input?: s.LoRaWANSendDataToDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FPort: input["FPort"],
  }
}

function fromSidewalkSendDataToDevice(input?: s.SidewalkSendDataToDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Seq: input["Seq"],
  }
}

function fromSidewalkUpdateAccount(input?: s.SidewalkUpdateAccount | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppServerPrivateKey: input["AppServerPrivateKey"],
  }
}

function fromLoRaWANUpdateDevice(input?: s.LoRaWANUpdateDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeviceProfileId: input["DeviceProfileId"],
    ServiceProfileId: input["ServiceProfileId"],
  }
}

function toSidewalkAccountInfoWithFingerprint(root: jsonP.JSONValue): s.SidewalkAccountInfoWithFingerprint {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmazonId": "s",
      "Fingerprint": "s",
    },
  }, root);
}

function toLoRaWANGetServiceProfileInfo(root: jsonP.JSONValue): s.LoRaWANGetServiceProfileInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "UlRate": "n",
      "UlBucketSize": "n",
      "UlRatePolicy": "s",
      "DlRate": "n",
      "DlBucketSize": "n",
      "DlRatePolicy": "s",
      "AddGwMetadata": "b",
      "DevStatusReqFreq": "n",
      "ReportDevStatusBattery": "b",
      "ReportDevStatusMargin": "b",
      "DrMin": "n",
      "DrMax": "n",
      "ChannelMask": "s",
      "PrAllowed": "b",
      "HrAllowed": "b",
      "RaAllowed": "b",
      "NwkGeoLoc": "b",
      "TargetPer": "n",
      "MinGwDiversity": "n",
    },
  }, root);
}

function toLoRaWANDeviceMetadata(root: jsonP.JSONValue): s.LoRaWANDeviceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevEui": "s",
      "FPort": "n",
      "DataRate": "n",
      "Frequency": "n",
      "Timestamp": "s",
      "Gateways": [toLoRaWANGatewayMetadata],
    },
  }, root);
}

function toLoRaWANGatewayMetadata(root: jsonP.JSONValue): s.LoRaWANGatewayMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "GatewayEui": "s",
      "Snr": "n",
      "Rssi": "n",
    },
  }, root);
}

function toLoRaWANGatewayCurrentVersion(root: jsonP.JSONValue): s.LoRaWANGatewayCurrentVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "CurrentVersion": toLoRaWANGatewayVersion,
    },
  }, root);
}

function toDestinations(root: jsonP.JSONValue): s.Destinations {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "ExpressionType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ExpressionType>(x),
      "Expression": "s",
      "Description": "s",
      "RoleArn": "s",
    },
  }, root);
}

function toDeviceProfile(root: jsonP.JSONValue): s.DeviceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Id": "s",
    },
  }, root);
}

function toServiceProfile(root: jsonP.JSONValue): s.ServiceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Id": "s",
    },
  }, root);
}

function toWirelessDeviceStatistics(root: jsonP.JSONValue): s.WirelessDeviceStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.WirelessDeviceType>(x),
      "Name": "s",
      "DestinationName": "s",
      "LastUplinkReceivedAt": "s",
      "LoRaWAN": toLoRaWANListDevice,
      "Sidewalk": toSidewalkListDevice,
    },
  }, root);
}

function toLoRaWANListDevice(root: jsonP.JSONValue): s.LoRaWANListDevice {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevEui": "s",
    },
  }, root);
}

function toSidewalkListDevice(root: jsonP.JSONValue): s.SidewalkListDevice {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmazonId": "s",
    },
  }, root);
}

function toUpdateWirelessGatewayTaskEntry(root: jsonP.JSONValue): s.UpdateWirelessGatewayTaskEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "LoRaWAN": toLoRaWANUpdateGatewayTaskEntry,
    },
  }, root);
}

function toLoRaWANUpdateGatewayTaskEntry(root: jsonP.JSONValue): s.LoRaWANUpdateGatewayTaskEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "CurrentVersion": toLoRaWANGatewayVersion,
      "UpdateVersion": toLoRaWANGatewayVersion,
    },
  }, root);
}

function toWirelessGatewayStatistics(root: jsonP.JSONValue): s.WirelessGatewayStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "LoRaWAN": toLoRaWANGateway,
      "LastUplinkReceivedAt": "s",
    },
  }, root);
}
