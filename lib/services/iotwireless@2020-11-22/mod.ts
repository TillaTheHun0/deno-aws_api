// Autogenerated API client for: AWS IoT Wireless

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.75.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class IoTWireless {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(IoTWireless.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-11-22",
    "endpointPrefix": "api.iotwireless",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT Wireless",
    "serviceId": "IoT Wireless",
    "signatureVersion": "v4",
    "signingName": "iotwireless",
    "uid": "iotwireless-2020-11-22"
  };

  async associateAwsAccountWithPartnerAccount(
    {abortSignal, ...params}: RequestConfig & AssociateAwsAccountWithPartnerAccountRequest,
  ): Promise<AssociateAwsAccountWithPartnerAccountResponse> {
    const body: jsonP.JSONObject = {
      Sidewalk: fromSidewalkAccountInfo(params["Sidewalk"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateAwsAccountWithPartnerAccount",
      requestUri: "/partner-accounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Sidewalk": toSidewalkAccountInfo,
      },
    }, await resp.json());
  }

  async associateWirelessDeviceWithThing(
    {abortSignal, ...params}: RequestConfig & AssociateWirelessDeviceWithThingRequest,
  ): Promise<AssociateWirelessDeviceWithThingResponse> {
    const body: jsonP.JSONObject = {
      ThingArn: params["ThingArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWirelessDeviceWithThing",
      method: "PUT",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associateWirelessGatewayWithCertificate(
    {abortSignal, ...params}: RequestConfig & AssociateWirelessGatewayWithCertificateRequest,
  ): Promise<AssociateWirelessGatewayWithCertificateResponse> {
    const body: jsonP.JSONObject = {
      IotCertificateId: params["IotCertificateId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWirelessGatewayWithCertificate",
      method: "PUT",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/certificate`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IotCertificateId": "s",
      },
    }, await resp.json());
  }

  async associateWirelessGatewayWithThing(
    {abortSignal, ...params}: RequestConfig & AssociateWirelessGatewayWithThingRequest,
  ): Promise<AssociateWirelessGatewayWithThingResponse> {
    const body: jsonP.JSONObject = {
      ThingArn: params["ThingArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateWirelessGatewayWithThing",
      method: "PUT",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDestination(
    {abortSignal, ...params}: RequestConfig & CreateDestinationRequest,
  ): Promise<CreateDestinationResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ExpressionType: params["ExpressionType"],
      Expression: params["Expression"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDestination",
      requestUri: "/destinations",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
      },
    }, await resp.json());
  }

  async createDeviceProfile(
    {abortSignal, ...params}: RequestConfig & CreateDeviceProfileRequest = {},
  ): Promise<CreateDeviceProfileResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      LoRaWAN: fromLoRaWANDeviceProfile(params["LoRaWAN"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeviceProfile",
      requestUri: "/device-profiles",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createServiceProfile(
    {abortSignal, ...params}: RequestConfig & CreateServiceProfileRequest = {},
  ): Promise<CreateServiceProfileResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      LoRaWAN: fromLoRaWANServiceProfile(params["LoRaWAN"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateServiceProfile",
      requestUri: "/service-profiles",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createWirelessDevice(
    {abortSignal, ...params}: RequestConfig & CreateWirelessDeviceRequest,
  ): Promise<CreateWirelessDeviceResponse> {
    const body: jsonP.JSONObject = {
      Type: params["Type"],
      Name: params["Name"],
      Description: params["Description"],
      DestinationName: params["DestinationName"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      LoRaWAN: fromLoRaWANDevice(params["LoRaWAN"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessDevice",
      requestUri: "/wireless-devices",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createWirelessGateway(
    {abortSignal, ...params}: RequestConfig & CreateWirelessGatewayRequest,
  ): Promise<CreateWirelessGatewayResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      LoRaWAN: fromLoRaWANGateway(params["LoRaWAN"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessGateway",
      requestUri: "/wireless-gateways",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Id": "s",
      },
    }, await resp.json());
  }

  async createWirelessGatewayTask(
    {abortSignal, ...params}: RequestConfig & CreateWirelessGatewayTaskRequest,
  ): Promise<CreateWirelessGatewayTaskResponse> {
    const body: jsonP.JSONObject = {
      WirelessGatewayTaskDefinitionId: params["WirelessGatewayTaskDefinitionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessGatewayTask",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/tasks`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessGatewayTaskDefinitionId": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<WirelessGatewayTaskStatus>(x),
      },
    }, await resp.json());
  }

  async createWirelessGatewayTaskDefinition(
    {abortSignal, ...params}: RequestConfig & CreateWirelessGatewayTaskDefinitionRequest,
  ): Promise<CreateWirelessGatewayTaskDefinitionResponse> {
    const body: jsonP.JSONObject = {
      AutoCreateTasks: params["AutoCreateTasks"],
      Name: params["Name"],
      Update: fromUpdateWirelessGatewayTaskCreate(params["Update"]),
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateWirelessGatewayTaskDefinition",
      requestUri: "/wireless-gateway-task-definitions",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Id": "s",
      },
    }, await resp.json());
  }

  async deleteDestination(
    {abortSignal, ...params}: RequestConfig & DeleteDestinationRequest,
  ): Promise<DeleteDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/destinations/${params["Name"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDeviceProfile(
    {abortSignal, ...params}: RequestConfig & DeleteDeviceProfileRequest,
  ): Promise<DeleteDeviceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDeviceProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/device-profiles/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteServiceProfile(
    {abortSignal, ...params}: RequestConfig & DeleteServiceProfileRequest,
  ): Promise<DeleteServiceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteServiceProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/service-profiles/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessDevice(
    {abortSignal, ...params}: RequestConfig & DeleteWirelessDeviceRequest,
  ): Promise<DeleteWirelessDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessDevice",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessGateway(
    {abortSignal, ...params}: RequestConfig & DeleteWirelessGatewayRequest,
  ): Promise<DeleteWirelessGatewayResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessGateway",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessGatewayTask(
    {abortSignal, ...params}: RequestConfig & DeleteWirelessGatewayTaskRequest,
  ): Promise<DeleteWirelessGatewayTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessGatewayTask",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/tasks`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteWirelessGatewayTaskDefinition(
    {abortSignal, ...params}: RequestConfig & DeleteWirelessGatewayTaskDefinitionRequest,
  ): Promise<DeleteWirelessGatewayTaskDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteWirelessGatewayTaskDefinition",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateway-task-definitions/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateAwsAccountFromPartnerAccount(
    {abortSignal, ...params}: RequestConfig & DisassociateAwsAccountFromPartnerAccountRequest,
  ): Promise<DisassociateAwsAccountFromPartnerAccountResponse> {
    const query = new URLSearchParams;
    query.set("partnerType", params["PartnerType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DisassociateAwsAccountFromPartnerAccount",
      method: "DELETE",
      requestUri: cmnP.encodePath`/partner-accounts/${params["PartnerAccountId"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWirelessDeviceFromThing(
    {abortSignal, ...params}: RequestConfig & DisassociateWirelessDeviceFromThingRequest,
  ): Promise<DisassociateWirelessDeviceFromThingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateWirelessDeviceFromThing",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWirelessGatewayFromCertificate(
    {abortSignal, ...params}: RequestConfig & DisassociateWirelessGatewayFromCertificateRequest,
  ): Promise<DisassociateWirelessGatewayFromCertificateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateWirelessGatewayFromCertificate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/certificate`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateWirelessGatewayFromThing(
    {abortSignal, ...params}: RequestConfig & DisassociateWirelessGatewayFromThingRequest,
  ): Promise<DisassociateWirelessGatewayFromThingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateWirelessGatewayFromThing",
      method: "DELETE",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/thing`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getDestination(
    {abortSignal, ...params}: RequestConfig & GetDestinationRequest,
  ): Promise<GetDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDestination",
      method: "GET",
      requestUri: cmnP.encodePath`/destinations/${params["Name"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
        "Expression": "s",
        "ExpressionType": (x: jsonP.JSONValue) => cmnP.readEnum<ExpressionType>(x),
        "Description": "s",
        "RoleArn": "s",
      },
    }, await resp.json());
  }

  async getDeviceProfile(
    {abortSignal, ...params}: RequestConfig & GetDeviceProfileRequest,
  ): Promise<GetDeviceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeviceProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/device-profiles/${params["Id"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
        "Id": "s",
        "LoRaWAN": toLoRaWANDeviceProfile,
      },
    }, await resp.json());
  }

  async getPartnerAccount(
    {abortSignal, ...params}: RequestConfig & GetPartnerAccountRequest,
  ): Promise<GetPartnerAccountResponse> {
    const query = new URLSearchParams;
    query.set("partnerType", params["PartnerType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetPartnerAccount",
      method: "GET",
      requestUri: cmnP.encodePath`/partner-accounts/${params["PartnerAccountId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Sidewalk": toSidewalkAccountInfoWithFingerprint,
        "AccountLinked": "b",
      },
    }, await resp.json());
  }

  async getServiceEndpoint(
    {abortSignal, ...params}: RequestConfig & GetServiceEndpointRequest = {},
  ): Promise<GetServiceEndpointResponse> {
    const query = new URLSearchParams;
    if (params["ServiceType"] != null) query.set("serviceType", params["ServiceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetServiceEndpoint",
      method: "GET",
      requestUri: "/service-endpoint",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ServiceType": (x: jsonP.JSONValue) => cmnP.readEnum<WirelessGatewayServiceType>(x),
        "ServiceEndpoint": "s",
        "ServerTrust": "s",
      },
    }, await resp.json());
  }

  async getServiceProfile(
    {abortSignal, ...params}: RequestConfig & GetServiceProfileRequest,
  ): Promise<GetServiceProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetServiceProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/service-profiles/${params["Id"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Arn": "s",
        "Name": "s",
        "Id": "s",
        "LoRaWAN": toLoRaWANGetServiceProfileInfo,
      },
    }, await resp.json());
  }

  async getWirelessDevice(
    {abortSignal, ...params}: RequestConfig & GetWirelessDeviceRequest,
  ): Promise<GetWirelessDeviceResponse> {
    const query = new URLSearchParams;
    query.set("identifierType", params["IdentifierType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetWirelessDevice",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Identifier"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Type": (x: jsonP.JSONValue) => cmnP.readEnum<WirelessDeviceType>(x),
        "Name": "s",
        "Description": "s",
        "DestinationName": "s",
        "Id": "s",
        "Arn": "s",
        "ThingName": "s",
        "ThingArn": "s",
        "LoRaWAN": toLoRaWANDevice,
      },
    }, await resp.json());
  }

  async getWirelessDeviceStatistics(
    {abortSignal, ...params}: RequestConfig & GetWirelessDeviceStatisticsRequest,
  ): Promise<GetWirelessDeviceStatisticsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessDeviceStatistics",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-devices/${params["WirelessDeviceId"]}/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessDeviceId": "s",
        "LastUplinkReceivedAt": "s",
        "LoRaWAN": toLoRaWANDeviceMetadata,
      },
    }, await resp.json());
  }

  async getWirelessGateway(
    {abortSignal, ...params}: RequestConfig & GetWirelessGatewayRequest,
  ): Promise<GetWirelessGatewayResponse> {
    const query = new URLSearchParams;
    query.set("identifierType", params["IdentifierType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetWirelessGateway",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Identifier"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Name": "s",
        "Id": "s",
        "Description": "s",
        "LoRaWAN": toLoRaWANGateway,
        "Arn": "s",
        "ThingName": "s",
        "ThingArn": "s",
      },
    }, await resp.json());
  }

  async getWirelessGatewayCertificate(
    {abortSignal, ...params}: RequestConfig & GetWirelessGatewayCertificateRequest,
  ): Promise<GetWirelessGatewayCertificateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayCertificate",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/certificate`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IotCertificateId": "s",
      },
    }, await resp.json());
  }

  async getWirelessGatewayFirmwareInformation(
    {abortSignal, ...params}: RequestConfig & GetWirelessGatewayFirmwareInformationRequest,
  ): Promise<GetWirelessGatewayFirmwareInformationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayFirmwareInformation",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/firmware-information`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoRaWAN": toLoRaWANGatewayCurrentVersion,
      },
    }, await resp.json());
  }

  async getWirelessGatewayStatistics(
    {abortSignal, ...params}: RequestConfig & GetWirelessGatewayStatisticsRequest,
  ): Promise<GetWirelessGatewayStatisticsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayStatistics",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["WirelessGatewayId"]}/statistics`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessGatewayId": "s",
        "LastUplinkReceivedAt": "s",
      },
    }, await resp.json());
  }

  async getWirelessGatewayTask(
    {abortSignal, ...params}: RequestConfig & GetWirelessGatewayTaskRequest,
  ): Promise<GetWirelessGatewayTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayTask",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}/tasks`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "WirelessGatewayId": "s",
        "WirelessGatewayTaskDefinitionId": "s",
        "LastUplinkReceivedAt": "s",
        "TaskCreatedAt": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<WirelessGatewayTaskStatus>(x),
      },
    }, await resp.json());
  }

  async getWirelessGatewayTaskDefinition(
    {abortSignal, ...params}: RequestConfig & GetWirelessGatewayTaskDefinitionRequest,
  ): Promise<GetWirelessGatewayTaskDefinitionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetWirelessGatewayTaskDefinition",
      method: "GET",
      requestUri: cmnP.encodePath`/wireless-gateway-task-definitions/${params["Id"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AutoCreateTasks": "b",
        "Name": "s",
        "Update": toUpdateWirelessGatewayTaskCreate,
      },
    }, await resp.json());
  }

  async listDestinations(
    {abortSignal, ...params}: RequestConfig & ListDestinationsRequest = {},
  ): Promise<ListDestinationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDestinations",
      method: "GET",
      requestUri: "/destinations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "DestinationList": [toDestinations],
      },
    }, await resp.json());
  }

  async listDeviceProfiles(
    {abortSignal, ...params}: RequestConfig & ListDeviceProfilesRequest = {},
  ): Promise<ListDeviceProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeviceProfiles",
      method: "GET",
      requestUri: "/device-profiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "DeviceProfileList": [toDeviceProfile],
      },
    }, await resp.json());
  }

  async listPartnerAccounts(
    {abortSignal, ...params}: RequestConfig & ListPartnerAccountsRequest = {},
  ): Promise<ListPartnerAccountsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPartnerAccounts",
      method: "GET",
      requestUri: "/partner-accounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "Sidewalk": [toSidewalkAccountInfoWithFingerprint],
      },
    }, await resp.json());
  }

  async listServiceProfiles(
    {abortSignal, ...params}: RequestConfig & ListServiceProfilesRequest = {},
  ): Promise<ListServiceProfilesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListServiceProfiles",
      method: "GET",
      requestUri: "/service-profiles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "ServiceProfileList": [toServiceProfile],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["ResourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listWirelessDevices(
    {abortSignal, ...params}: RequestConfig & ListWirelessDevicesRequest = {},
  ): Promise<ListWirelessDevicesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["DestinationName"] != null) query.set("destinationName", params["DestinationName"]?.toString() ?? "");
    if (params["DeviceProfileId"] != null) query.set("deviceProfileId", params["DeviceProfileId"]?.toString() ?? "");
    if (params["ServiceProfileId"] != null) query.set("serviceProfileId", params["ServiceProfileId"]?.toString() ?? "");
    if (params["WirelessDeviceType"] != null) query.set("wirelessDeviceType", params["WirelessDeviceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWirelessDevices",
      method: "GET",
      requestUri: "/wireless-devices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "WirelessDeviceList": [toWirelessDeviceStatistics],
      },
    }, await resp.json());
  }

  async listWirelessGatewayTaskDefinitions(
    {abortSignal, ...params}: RequestConfig & ListWirelessGatewayTaskDefinitionsRequest = {},
  ): Promise<ListWirelessGatewayTaskDefinitionsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["TaskDefinitionType"] != null) query.set("taskDefinitionType", params["TaskDefinitionType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWirelessGatewayTaskDefinitions",
      method: "GET",
      requestUri: "/wireless-gateway-task-definitions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "TaskDefinitions": [toUpdateWirelessGatewayTaskEntry],
      },
    }, await resp.json());
  }

  async listWirelessGateways(
    {abortSignal, ...params}: RequestConfig & ListWirelessGatewaysRequest = {},
  ): Promise<ListWirelessGatewaysResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListWirelessGateways",
      method: "GET",
      requestUri: "/wireless-gateways",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "WirelessGatewayList": [toWirelessGatewayStatistics],
      },
    }, await resp.json());
  }

  async sendDataToWirelessDevice(
    {abortSignal, ...params}: RequestConfig & SendDataToWirelessDeviceRequest,
  ): Promise<SendDataToWirelessDeviceResponse> {
    const body: jsonP.JSONObject = {
      TransmitMode: params["TransmitMode"],
      PayloadData: params["PayloadData"],
      WirelessMetadata: fromWirelessMetadata(params["WirelessMetadata"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendDataToWirelessDevice",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/data`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    query.set("resourceArn", params["ResourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "TagResource",
      requestUri: "/tags",
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async testWirelessDevice(
    {abortSignal, ...params}: RequestConfig & TestWirelessDeviceRequest,
  ): Promise<TestWirelessDeviceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "TestWirelessDevice",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}/test`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Result": "s",
      },
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["ResourceArn"]?.toString() ?? "");
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: "/tags",
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDestination(
    {abortSignal, ...params}: RequestConfig & UpdateDestinationRequest,
  ): Promise<UpdateDestinationResponse> {
    const body: jsonP.JSONObject = {
      ExpressionType: params["ExpressionType"],
      Expression: params["Expression"],
      Description: params["Description"],
      RoleArn: params["RoleArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDestination",
      method: "PATCH",
      requestUri: cmnP.encodePath`/destinations/${params["Name"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePartnerAccount(
    {abortSignal, ...params}: RequestConfig & UpdatePartnerAccountRequest,
  ): Promise<UpdatePartnerAccountResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Sidewalk: fromSidewalkUpdateAccount(params["Sidewalk"]),
    };
    query.set("partnerType", params["PartnerType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdatePartnerAccount",
      method: "PATCH",
      requestUri: cmnP.encodePath`/partner-accounts/${params["PartnerAccountId"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateWirelessDevice(
    {abortSignal, ...params}: RequestConfig & UpdateWirelessDeviceRequest,
  ): Promise<UpdateWirelessDeviceResponse> {
    const body: jsonP.JSONObject = {
      DestinationName: params["DestinationName"],
      Name: params["Name"],
      Description: params["Description"],
      LoRaWAN: fromLoRaWANUpdateDevice(params["LoRaWAN"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWirelessDevice",
      method: "PATCH",
      requestUri: cmnP.encodePath`/wireless-devices/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateWirelessGateway(
    {abortSignal, ...params}: RequestConfig & UpdateWirelessGatewayRequest,
  ): Promise<UpdateWirelessGatewayResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateWirelessGateway",
      method: "PATCH",
      requestUri: cmnP.encodePath`/wireless-gateways/${params["Id"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateAwsAccountWithPartnerAccountRequest {
  Sidewalk: SidewalkAccountInfo;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface AssociateWirelessDeviceWithThingRequest {
  Id: string;
  ThingArn: string;
}

// refs: 1 - tags: named, input
export interface AssociateWirelessGatewayWithCertificateRequest {
  Id: string;
  IotCertificateId: string;
}

// refs: 1 - tags: named, input
export interface AssociateWirelessGatewayWithThingRequest {
  Id: string;
  ThingArn: string;
}

// refs: 1 - tags: named, input
export interface CreateDestinationRequest {
  Name: string;
  ExpressionType: ExpressionType;
  Expression: string;
  Description?: string | null;
  RoleArn: string;
  Tags?: Tag[] | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateDeviceProfileRequest {
  Name?: string | null;
  LoRaWAN?: LoRaWANDeviceProfile | null;
  Tags?: Tag[] | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateServiceProfileRequest {
  Name?: string | null;
  LoRaWAN?: LoRaWANServiceProfile | null;
  Tags?: Tag[] | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateWirelessDeviceRequest {
  Type: WirelessDeviceType;
  Name?: string | null;
  Description?: string | null;
  DestinationName: string;
  ClientRequestToken?: string | null;
  LoRaWAN?: LoRaWANDevice | null;
}

// refs: 1 - tags: named, input
export interface CreateWirelessGatewayRequest {
  Name?: string | null;
  Description?: string | null;
  LoRaWAN: LoRaWANGateway;
  Tags?: Tag[] | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateWirelessGatewayTaskRequest {
  Id: string;
  WirelessGatewayTaskDefinitionId: string;
}

// refs: 1 - tags: named, input
export interface CreateWirelessGatewayTaskDefinitionRequest {
  AutoCreateTasks: boolean;
  Name?: string | null;
  Update?: UpdateWirelessGatewayTaskCreate | null;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteDestinationRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface DeleteDeviceProfileRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteServiceProfileRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteWirelessDeviceRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteWirelessGatewayRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteWirelessGatewayTaskRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DeleteWirelessGatewayTaskDefinitionRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DisassociateAwsAccountFromPartnerAccountRequest {
  PartnerAccountId: string;
  PartnerType: PartnerType;
}

// refs: 1 - tags: named, input
export interface DisassociateWirelessDeviceFromThingRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DisassociateWirelessGatewayFromCertificateRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface DisassociateWirelessGatewayFromThingRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface GetDestinationRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface GetDeviceProfileRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface GetPartnerAccountRequest {
  PartnerAccountId: string;
  PartnerType: PartnerType;
}

// refs: 1 - tags: named, input
export interface GetServiceEndpointRequest {
  ServiceType?: WirelessGatewayServiceType | null;
}

// refs: 1 - tags: named, input
export interface GetServiceProfileRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface GetWirelessDeviceRequest {
  Identifier: string;
  IdentifierType: WirelessDeviceIdType;
}

// refs: 1 - tags: named, input
export interface GetWirelessDeviceStatisticsRequest {
  WirelessDeviceId: string;
}

// refs: 1 - tags: named, input
export interface GetWirelessGatewayRequest {
  Identifier: string;
  IdentifierType: WirelessGatewayIdType;
}

// refs: 1 - tags: named, input
export interface GetWirelessGatewayCertificateRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface GetWirelessGatewayFirmwareInformationRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface GetWirelessGatewayStatisticsRequest {
  WirelessGatewayId: string;
}

// refs: 1 - tags: named, input
export interface GetWirelessGatewayTaskRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface GetWirelessGatewayTaskDefinitionRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface ListDestinationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeviceProfilesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPartnerAccountsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListServiceProfilesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ListWirelessDevicesRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  DestinationName?: string | null;
  DeviceProfileId?: string | null;
  ServiceProfileId?: string | null;
  WirelessDeviceType?: WirelessDeviceType | null;
}

// refs: 1 - tags: named, input
export interface ListWirelessGatewayTaskDefinitionsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  TaskDefinitionType?: WirelessGatewayTaskDefinitionType | null;
}

// refs: 1 - tags: named, input
export interface ListWirelessGatewaysRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface SendDataToWirelessDeviceRequest {
  Id: string;
  TransmitMode: number;
  PayloadData: string;
  WirelessMetadata?: WirelessMetadata | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface TestWirelessDeviceRequest {
  Id: string;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDestinationRequest {
  Name: string;
  ExpressionType?: ExpressionType | null;
  Expression?: string | null;
  Description?: string | null;
  RoleArn?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdatePartnerAccountRequest {
  Sidewalk: SidewalkUpdateAccount;
  PartnerAccountId: string;
  PartnerType: PartnerType;
}

// refs: 1 - tags: named, input
export interface UpdateWirelessDeviceRequest {
  Id: string;
  DestinationName?: string | null;
  Name?: string | null;
  Description?: string | null;
  LoRaWAN?: LoRaWANUpdateDevice | null;
}

// refs: 1 - tags: named, input
export interface UpdateWirelessGatewayRequest {
  Id: string;
  Name?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateAwsAccountWithPartnerAccountResponse {
  Sidewalk?: SidewalkAccountInfo | null;
}

// refs: 1 - tags: named, output
export interface AssociateWirelessDeviceWithThingResponse {
}

// refs: 1 - tags: named, output
export interface AssociateWirelessGatewayWithCertificateResponse {
  IotCertificateId?: string | null;
}

// refs: 1 - tags: named, output
export interface AssociateWirelessGatewayWithThingResponse {
}

// refs: 1 - tags: named, output
export interface CreateDestinationResponse {
  Arn?: string | null;
  Name?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDeviceProfileResponse {
  Arn?: string | null;
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateServiceProfileResponse {
  Arn?: string | null;
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateWirelessDeviceResponse {
  Arn?: string | null;
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateWirelessGatewayResponse {
  Arn?: string | null;
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateWirelessGatewayTaskResponse {
  WirelessGatewayTaskDefinitionId?: string | null;
  Status?: WirelessGatewayTaskStatus | null;
}

// refs: 1 - tags: named, output
export interface CreateWirelessGatewayTaskDefinitionResponse {
  Id?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteDestinationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDeviceProfileResponse {
}

// refs: 1 - tags: named, output
export interface DeleteServiceProfileResponse {
}

// refs: 1 - tags: named, output
export interface DeleteWirelessDeviceResponse {
}

// refs: 1 - tags: named, output
export interface DeleteWirelessGatewayResponse {
}

// refs: 1 - tags: named, output
export interface DeleteWirelessGatewayTaskResponse {
}

// refs: 1 - tags: named, output
export interface DeleteWirelessGatewayTaskDefinitionResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateAwsAccountFromPartnerAccountResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateWirelessDeviceFromThingResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateWirelessGatewayFromCertificateResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateWirelessGatewayFromThingResponse {
}

// refs: 1 - tags: named, output
export interface GetDestinationResponse {
  Arn?: string | null;
  Name?: string | null;
  Expression?: string | null;
  ExpressionType?: ExpressionType | null;
  Description?: string | null;
  RoleArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDeviceProfileResponse {
  Arn?: string | null;
  Name?: string | null;
  Id?: string | null;
  LoRaWAN?: LoRaWANDeviceProfile | null;
}

// refs: 1 - tags: named, output
export interface GetPartnerAccountResponse {
  Sidewalk?: SidewalkAccountInfoWithFingerprint | null;
  AccountLinked?: boolean | null;
}

// refs: 1 - tags: named, output
export interface GetServiceEndpointResponse {
  ServiceType?: WirelessGatewayServiceType | null;
  ServiceEndpoint?: string | null;
  ServerTrust?: string | null;
}

// refs: 1 - tags: named, output
export interface GetServiceProfileResponse {
  Arn?: string | null;
  Name?: string | null;
  Id?: string | null;
  LoRaWAN?: LoRaWANGetServiceProfileInfo | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessDeviceResponse {
  Type?: WirelessDeviceType | null;
  Name?: string | null;
  Description?: string | null;
  DestinationName?: string | null;
  Id?: string | null;
  Arn?: string | null;
  ThingName?: string | null;
  ThingArn?: string | null;
  LoRaWAN?: LoRaWANDevice | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessDeviceStatisticsResponse {
  WirelessDeviceId?: string | null;
  LastUplinkReceivedAt?: string | null;
  LoRaWAN?: LoRaWANDeviceMetadata | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessGatewayResponse {
  Name?: string | null;
  Id?: string | null;
  Description?: string | null;
  LoRaWAN?: LoRaWANGateway | null;
  Arn?: string | null;
  ThingName?: string | null;
  ThingArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessGatewayCertificateResponse {
  IotCertificateId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessGatewayFirmwareInformationResponse {
  LoRaWAN?: LoRaWANGatewayCurrentVersion | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessGatewayStatisticsResponse {
  WirelessGatewayId?: string | null;
  LastUplinkReceivedAt?: string | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessGatewayTaskResponse {
  WirelessGatewayId?: string | null;
  WirelessGatewayTaskDefinitionId?: string | null;
  LastUplinkReceivedAt?: string | null;
  TaskCreatedAt?: string | null;
  Status?: WirelessGatewayTaskStatus | null;
}

// refs: 1 - tags: named, output
export interface GetWirelessGatewayTaskDefinitionResponse {
  AutoCreateTasks?: boolean | null;
  Name?: string | null;
  Update?: UpdateWirelessGatewayTaskCreate | null;
}

// refs: 1 - tags: named, output
export interface ListDestinationsResponse {
  NextToken?: string | null;
  DestinationList?: Destinations[] | null;
}

// refs: 1 - tags: named, output
export interface ListDeviceProfilesResponse {
  NextToken?: string | null;
  DeviceProfileList?: DeviceProfile[] | null;
}

// refs: 1 - tags: named, output
export interface ListPartnerAccountsResponse {
  NextToken?: string | null;
  Sidewalk?: SidewalkAccountInfoWithFingerprint[] | null;
}

// refs: 1 - tags: named, output
export interface ListServiceProfilesResponse {
  NextToken?: string | null;
  ServiceProfileList?: ServiceProfile[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListWirelessDevicesResponse {
  NextToken?: string | null;
  WirelessDeviceList?: WirelessDeviceStatistics[] | null;
}

// refs: 1 - tags: named, output
export interface ListWirelessGatewayTaskDefinitionsResponse {
  NextToken?: string | null;
  TaskDefinitions?: UpdateWirelessGatewayTaskEntry[] | null;
}

// refs: 1 - tags: named, output
export interface ListWirelessGatewaysResponse {
  NextToken?: string | null;
  WirelessGatewayList?: WirelessGatewayStatistics[] | null;
}

// refs: 1 - tags: named, output
export interface SendDataToWirelessDeviceResponse {
  MessageId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface TestWirelessDeviceResponse {
  Result?: string | null;
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDestinationResponse {
}

// refs: 1 - tags: named, output
export interface UpdatePartnerAccountResponse {
}

// refs: 1 - tags: named, output
export interface UpdateWirelessDeviceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateWirelessGatewayResponse {
}

// refs: 2 - tags: input, named, interface, output
export interface SidewalkAccountInfo {
  AmazonId?: string | null;
  AppServerPrivateKey?: string | null;
}
function fromSidewalkAccountInfo(input?: SidewalkAccountInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AmazonId: input["AmazonId"],
    AppServerPrivateKey: input["AppServerPrivateKey"],
  }
}
function toSidewalkAccountInfo(root: jsonP.JSONValue): SidewalkAccountInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmazonId": "s",
      "AppServerPrivateKey": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ExpressionType =
| "RuleName"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface LoRaWANDeviceProfile {
  SupportsClassB?: boolean | null;
  ClassBTimeout?: number | null;
  PingSlotPeriod?: number | null;
  PingSlotDr?: number | null;
  PingSlotFreq?: number | null;
  SupportsClassC?: boolean | null;
  ClassCTimeout?: number | null;
  MacVersion?: string | null;
  RegParamsRevision?: string | null;
  RxDelay1?: number | null;
  RxDrOffset1?: number | null;
  RxDataRate2?: number | null;
  RxFreq2?: number | null;
  FactoryPresetFreqsList?: number[] | null;
  MaxEirp?: number | null;
  MaxDutyCycle?: number | null;
  RfRegion?: string | null;
  SupportsJoin?: boolean | null;
  Supports32BitFCnt?: boolean | null;
}
function fromLoRaWANDeviceProfile(input?: LoRaWANDeviceProfile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SupportsClassB: input["SupportsClassB"],
    ClassBTimeout: input["ClassBTimeout"],
    PingSlotPeriod: input["PingSlotPeriod"],
    PingSlotDr: input["PingSlotDr"],
    PingSlotFreq: input["PingSlotFreq"],
    SupportsClassC: input["SupportsClassC"],
    ClassCTimeout: input["ClassCTimeout"],
    MacVersion: input["MacVersion"],
    RegParamsRevision: input["RegParamsRevision"],
    RxDelay1: input["RxDelay1"],
    RxDrOffset1: input["RxDrOffset1"],
    RxDataRate2: input["RxDataRate2"],
    RxFreq2: input["RxFreq2"],
    FactoryPresetFreqsList: input["FactoryPresetFreqsList"],
    MaxEirp: input["MaxEirp"],
    MaxDutyCycle: input["MaxDutyCycle"],
    RfRegion: input["RfRegion"],
    SupportsJoin: input["SupportsJoin"],
    Supports32BitFCnt: input["Supports32BitFCnt"],
  }
}
function toLoRaWANDeviceProfile(root: jsonP.JSONValue): LoRaWANDeviceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "SupportsClassB": "b",
      "ClassBTimeout": "n",
      "PingSlotPeriod": "n",
      "PingSlotDr": "n",
      "PingSlotFreq": "n",
      "SupportsClassC": "b",
      "ClassCTimeout": "n",
      "MacVersion": "s",
      "RegParamsRevision": "s",
      "RxDelay1": "n",
      "RxDrOffset1": "n",
      "RxDataRate2": "n",
      "RxFreq2": "n",
      "FactoryPresetFreqsList": ["n"],
      "MaxEirp": "n",
      "MaxDutyCycle": "n",
      "RfRegion": "s",
      "SupportsJoin": "b",
      "Supports32BitFCnt": "b",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface LoRaWANServiceProfile {
  AddGwMetadata?: boolean | null;
}
function fromLoRaWANServiceProfile(input?: LoRaWANServiceProfile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AddGwMetadata: input["AddGwMetadata"],
  }
}

// refs: 4 - tags: input, named, enum, output
export type WirelessDeviceType =
| "Sidewalk"
| "LoRaWAN"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface LoRaWANDevice {
  DevEui?: string | null;
  DeviceProfileId?: string | null;
  ServiceProfileId?: string | null;
  OtaaV1_1?: OtaaV1_1 | null;
  OtaaV1_0_x?: OtaaV1_0_x | null;
  AbpV1_1?: AbpV1_1 | null;
  AbpV1_0_x?: AbpV1_0_x | null;
}
function fromLoRaWANDevice(input?: LoRaWANDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DevEui: input["DevEui"],
    DeviceProfileId: input["DeviceProfileId"],
    ServiceProfileId: input["ServiceProfileId"],
    OtaaV1_1: fromOtaaV1_1(input["OtaaV1_1"]),
    OtaaV1_0_x: fromOtaaV1_0_x(input["OtaaV1_0_x"]),
    AbpV1_1: fromAbpV1_1(input["AbpV1_1"]),
    AbpV1_0_x: fromAbpV1_0_x(input["AbpV1_0_x"]),
  }
}
function toLoRaWANDevice(root: jsonP.JSONValue): LoRaWANDevice {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevEui": "s",
      "DeviceProfileId": "s",
      "ServiceProfileId": "s",
      "OtaaV1_1": toOtaaV1_1,
      "OtaaV1_0_x": toOtaaV1_0_x,
      "AbpV1_1": toAbpV1_1,
      "AbpV1_0_x": toAbpV1_0_x,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface OtaaV1_1 {
  AppKey?: string | null;
  NwkKey?: string | null;
  JoinEui?: string | null;
}
function fromOtaaV1_1(input?: OtaaV1_1 | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppKey: input["AppKey"],
    NwkKey: input["NwkKey"],
    JoinEui: input["JoinEui"],
  }
}
function toOtaaV1_1(root: jsonP.JSONValue): OtaaV1_1 {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppKey": "s",
      "NwkKey": "s",
      "JoinEui": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface OtaaV1_0_x {
  AppKey?: string | null;
  AppEui?: string | null;
}
function fromOtaaV1_0_x(input?: OtaaV1_0_x | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppKey: input["AppKey"],
    AppEui: input["AppEui"],
  }
}
function toOtaaV1_0_x(root: jsonP.JSONValue): OtaaV1_0_x {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppKey": "s",
      "AppEui": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AbpV1_1 {
  DevAddr?: string | null;
  SessionKeys?: SessionKeysAbpV1_1 | null;
}
function fromAbpV1_1(input?: AbpV1_1 | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DevAddr: input["DevAddr"],
    SessionKeys: fromSessionKeysAbpV1_1(input["SessionKeys"]),
  }
}
function toAbpV1_1(root: jsonP.JSONValue): AbpV1_1 {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevAddr": "s",
      "SessionKeys": toSessionKeysAbpV1_1,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SessionKeysAbpV1_1 {
  FNwkSIntKey?: string | null;
  SNwkSIntKey?: string | null;
  NwkSEncKey?: string | null;
  AppSKey?: string | null;
}
function fromSessionKeysAbpV1_1(input?: SessionKeysAbpV1_1 | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FNwkSIntKey: input["FNwkSIntKey"],
    SNwkSIntKey: input["SNwkSIntKey"],
    NwkSEncKey: input["NwkSEncKey"],
    AppSKey: input["AppSKey"],
  }
}
function toSessionKeysAbpV1_1(root: jsonP.JSONValue): SessionKeysAbpV1_1 {
  return jsonP.readObj({
    required: {},
    optional: {
      "FNwkSIntKey": "s",
      "SNwkSIntKey": "s",
      "NwkSEncKey": "s",
      "AppSKey": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AbpV1_0_x {
  DevAddr?: string | null;
  SessionKeys?: SessionKeysAbpV1_0_x | null;
}
function fromAbpV1_0_x(input?: AbpV1_0_x | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DevAddr: input["DevAddr"],
    SessionKeys: fromSessionKeysAbpV1_0_x(input["SessionKeys"]),
  }
}
function toAbpV1_0_x(root: jsonP.JSONValue): AbpV1_0_x {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevAddr": "s",
      "SessionKeys": toSessionKeysAbpV1_0_x,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SessionKeysAbpV1_0_x {
  NwkSKey?: string | null;
  AppSKey?: string | null;
}
function fromSessionKeysAbpV1_0_x(input?: SessionKeysAbpV1_0_x | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NwkSKey: input["NwkSKey"],
    AppSKey: input["AppSKey"],
  }
}
function toSessionKeysAbpV1_0_x(root: jsonP.JSONValue): SessionKeysAbpV1_0_x {
  return jsonP.readObj({
    required: {},
    optional: {
      "NwkSKey": "s",
      "AppSKey": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface LoRaWANGateway {
  GatewayEui?: string | null;
  RfRegion?: string | null;
}
function fromLoRaWANGateway(input?: LoRaWANGateway | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GatewayEui: input["GatewayEui"],
    RfRegion: input["RfRegion"],
  }
}
function toLoRaWANGateway(root: jsonP.JSONValue): LoRaWANGateway {
  return jsonP.readObj({
    required: {},
    optional: {
      "GatewayEui": "s",
      "RfRegion": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface UpdateWirelessGatewayTaskCreate {
  UpdateDataSource?: string | null;
  UpdateDataRole?: string | null;
  LoRaWAN?: LoRaWANUpdateGatewayTaskCreate | null;
}
function fromUpdateWirelessGatewayTaskCreate(input?: UpdateWirelessGatewayTaskCreate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UpdateDataSource: input["UpdateDataSource"],
    UpdateDataRole: input["UpdateDataRole"],
    LoRaWAN: fromLoRaWANUpdateGatewayTaskCreate(input["LoRaWAN"]),
  }
}
function toUpdateWirelessGatewayTaskCreate(root: jsonP.JSONValue): UpdateWirelessGatewayTaskCreate {
  return jsonP.readObj({
    required: {},
    optional: {
      "UpdateDataSource": "s",
      "UpdateDataRole": "s",
      "LoRaWAN": toLoRaWANUpdateGatewayTaskCreate,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface LoRaWANUpdateGatewayTaskCreate {
  UpdateSignature?: string | null;
  SigKeyCrc?: number | null;
  CurrentVersion?: LoRaWANGatewayVersion | null;
  UpdateVersion?: LoRaWANGatewayVersion | null;
}
function fromLoRaWANUpdateGatewayTaskCreate(input?: LoRaWANUpdateGatewayTaskCreate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UpdateSignature: input["UpdateSignature"],
    SigKeyCrc: input["SigKeyCrc"],
    CurrentVersion: fromLoRaWANGatewayVersion(input["CurrentVersion"]),
    UpdateVersion: fromLoRaWANGatewayVersion(input["UpdateVersion"]),
  }
}
function toLoRaWANUpdateGatewayTaskCreate(root: jsonP.JSONValue): LoRaWANUpdateGatewayTaskCreate {
  return jsonP.readObj({
    required: {},
    optional: {
      "UpdateSignature": "s",
      "SigKeyCrc": "n",
      "CurrentVersion": toLoRaWANGatewayVersion,
      "UpdateVersion": toLoRaWANGatewayVersion,
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface LoRaWANGatewayVersion {
  PackageVersion?: string | null;
  Model?: string | null;
  Station?: string | null;
}
function fromLoRaWANGatewayVersion(input?: LoRaWANGatewayVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PackageVersion: input["PackageVersion"],
    Model: input["Model"],
    Station: input["Station"],
  }
}
function toLoRaWANGatewayVersion(root: jsonP.JSONValue): LoRaWANGatewayVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "PackageVersion": "s",
      "Model": "s",
      "Station": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum
export type PartnerType =
| "Sidewalk"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type WirelessGatewayServiceType =
| "CUPS"
| "LNS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type WirelessDeviceIdType =
| "WirelessDeviceId"
| "DevEui"
| "ThingName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type WirelessGatewayIdType =
| "GatewayEui"
| "WirelessGatewayId"
| "ThingName"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type WirelessGatewayTaskDefinitionType =
| "UPDATE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface WirelessMetadata {
  LoRaWAN?: LoRaWANSendDataToDevice | null;
  Sidewalk?: SidewalkSendDataToDevice | null;
}
function fromWirelessMetadata(input?: WirelessMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LoRaWAN: fromLoRaWANSendDataToDevice(input["LoRaWAN"]),
    Sidewalk: fromSidewalkSendDataToDevice(input["Sidewalk"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface LoRaWANSendDataToDevice {
  FPort?: number | null;
}
function fromLoRaWANSendDataToDevice(input?: LoRaWANSendDataToDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FPort: input["FPort"],
  }
}

// refs: 1 - tags: input, named, interface
export interface SidewalkSendDataToDevice {
  Seq?: number | null;
}
function fromSidewalkSendDataToDevice(input?: SidewalkSendDataToDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Seq: input["Seq"],
  }
}

// refs: 1 - tags: input, named, interface
export interface SidewalkUpdateAccount {
  AppServerPrivateKey?: string | null;
}
function fromSidewalkUpdateAccount(input?: SidewalkUpdateAccount | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppServerPrivateKey: input["AppServerPrivateKey"],
  }
}

// refs: 1 - tags: input, named, interface
export interface LoRaWANUpdateDevice {
  DeviceProfileId?: string | null;
  ServiceProfileId?: string | null;
}
function fromLoRaWANUpdateDevice(input?: LoRaWANUpdateDevice | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DeviceProfileId: input["DeviceProfileId"],
    ServiceProfileId: input["ServiceProfileId"],
  }
}

// refs: 2 - tags: output, named, enum
export type WirelessGatewayTaskStatus =
| "PENDING"
| "IN_PROGRESS"
| "FIRST_RETRY"
| "SECOND_RETRY"
| "COMPLETED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface SidewalkAccountInfoWithFingerprint {
  AmazonId?: string | null;
  AppServerPrivateKey?: string | null;
}
function toSidewalkAccountInfoWithFingerprint(root: jsonP.JSONValue): SidewalkAccountInfoWithFingerprint {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmazonId": "s",
      "AppServerPrivateKey": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LoRaWANGetServiceProfileInfo {
  UlRate?: number | null;
  UlBucketSize?: number | null;
  UlRatePolicy?: string | null;
  DlRate?: number | null;
  DlBucketSize?: number | null;
  DlRatePolicy?: string | null;
  AddGwMetadata?: boolean | null;
  DevStatusReqFreq?: number | null;
  ReportDevStatusBattery?: boolean | null;
  ReportDevStatusMargin?: boolean | null;
  DrMin?: number | null;
  DrMax?: number | null;
  ChannelMask?: string | null;
  PrAllowed?: boolean | null;
  HrAllowed?: boolean | null;
  RaAllowed?: boolean | null;
  NwkGeoLoc?: boolean | null;
  TargetPer?: number | null;
  MinGwDiversity?: number | null;
}
function toLoRaWANGetServiceProfileInfo(root: jsonP.JSONValue): LoRaWANGetServiceProfileInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "UlRate": "n",
      "UlBucketSize": "n",
      "UlRatePolicy": "s",
      "DlRate": "n",
      "DlBucketSize": "n",
      "DlRatePolicy": "s",
      "AddGwMetadata": "b",
      "DevStatusReqFreq": "n",
      "ReportDevStatusBattery": "b",
      "ReportDevStatusMargin": "b",
      "DrMin": "n",
      "DrMax": "n",
      "ChannelMask": "s",
      "PrAllowed": "b",
      "HrAllowed": "b",
      "RaAllowed": "b",
      "NwkGeoLoc": "b",
      "TargetPer": "n",
      "MinGwDiversity": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LoRaWANDeviceMetadata {
  DevEui?: string | null;
  FPort?: number | null;
  DataRate?: number | null;
  Frequency?: number | null;
  Timestamp?: string | null;
  Gateways?: LoRaWANGatewayMetadata[] | null;
}
function toLoRaWANDeviceMetadata(root: jsonP.JSONValue): LoRaWANDeviceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevEui": "s",
      "FPort": "n",
      "DataRate": "n",
      "Frequency": "n",
      "Timestamp": "s",
      "Gateways": [toLoRaWANGatewayMetadata],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LoRaWANGatewayMetadata {
  GatewayEui?: string | null;
  Snr?: number | null;
  Rssi?: number | null;
}
function toLoRaWANGatewayMetadata(root: jsonP.JSONValue): LoRaWANGatewayMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "GatewayEui": "s",
      "Snr": "n",
      "Rssi": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LoRaWANGatewayCurrentVersion {
  CurrentVersion?: LoRaWANGatewayVersion | null;
}
function toLoRaWANGatewayCurrentVersion(root: jsonP.JSONValue): LoRaWANGatewayCurrentVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "CurrentVersion": toLoRaWANGatewayVersion,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Destinations {
  Arn?: string | null;
  Name?: string | null;
  ExpressionType?: ExpressionType | null;
  Expression?: string | null;
  Description?: string | null;
  RoleArn?: string | null;
}
function toDestinations(root: jsonP.JSONValue): Destinations {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "ExpressionType": (x: jsonP.JSONValue) => cmnP.readEnum<ExpressionType>(x),
      "Expression": "s",
      "Description": "s",
      "RoleArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DeviceProfile {
  Arn?: string | null;
  Name?: string | null;
  Id?: string | null;
}
function toDeviceProfile(root: jsonP.JSONValue): DeviceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Id": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ServiceProfile {
  Arn?: string | null;
  Name?: string | null;
  Id?: string | null;
}
function toServiceProfile(root: jsonP.JSONValue): ServiceProfile {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
      "Id": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WirelessDeviceStatistics {
  Arn?: string | null;
  Id?: string | null;
  Type?: WirelessDeviceType | null;
  Name?: string | null;
  DestinationName?: string | null;
  LastUplinkReceivedAt?: string | null;
  LoRaWAN?: LoRaWANListDevice | null;
  Sidewalk?: SidewalkListDevice | null;
}
function toWirelessDeviceStatistics(root: jsonP.JSONValue): WirelessDeviceStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<WirelessDeviceType>(x),
      "Name": "s",
      "DestinationName": "s",
      "LastUplinkReceivedAt": "s",
      "LoRaWAN": toLoRaWANListDevice,
      "Sidewalk": toSidewalkListDevice,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LoRaWANListDevice {
  DevEui?: string | null;
}
function toLoRaWANListDevice(root: jsonP.JSONValue): LoRaWANListDevice {
  return jsonP.readObj({
    required: {},
    optional: {
      "DevEui": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SidewalkListDevice {
  AmazonId?: string | null;
}
function toSidewalkListDevice(root: jsonP.JSONValue): SidewalkListDevice {
  return jsonP.readObj({
    required: {},
    optional: {
      "AmazonId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UpdateWirelessGatewayTaskEntry {
  Id?: string | null;
  LoRaWAN?: LoRaWANUpdateGatewayTaskEntry | null;
}
function toUpdateWirelessGatewayTaskEntry(root: jsonP.JSONValue): UpdateWirelessGatewayTaskEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "Id": "s",
      "LoRaWAN": toLoRaWANUpdateGatewayTaskEntry,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LoRaWANUpdateGatewayTaskEntry {
  CurrentVersion?: LoRaWANGatewayVersion | null;
  UpdateVersion?: LoRaWANGatewayVersion | null;
}
function toLoRaWANUpdateGatewayTaskEntry(root: jsonP.JSONValue): LoRaWANUpdateGatewayTaskEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "CurrentVersion": toLoRaWANGatewayVersion,
      "UpdateVersion": toLoRaWANGatewayVersion,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface WirelessGatewayStatistics {
  Arn?: string | null;
  Id?: string | null;
  Name?: string | null;
  Description?: string | null;
  LoRaWAN?: LoRaWANGateway | null;
  LastUplinkReceivedAt?: string | null;
}
function toWirelessGatewayStatistics(root: jsonP.JSONValue): WirelessGatewayStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Id": "s",
      "Name": "s",
      "Description": "s",
      "LoRaWAN": toLoRaWANGateway,
      "LastUplinkReceivedAt": "s",
    },
  }, root);
}
