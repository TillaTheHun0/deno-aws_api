// Autogenerated API client for: Amazon Simple Email Service

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as Base64 from "https://deno.land/std@0.91.0/encoding/base64.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";
function serializeBlob(input: string | Uint8Array | null | undefined) {
  if (input == null) return input;
  return Base64.encode(input);
}

export default class SESV2 {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SESV2.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-09-27",
    "endpointPrefix": "email",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon SES V2",
    "serviceFullName": "Amazon Simple Email Service",
    "serviceId": "SESv2",
    "signatureVersion": "v4",
    "signingName": "ses",
    "uid": "sesv2-2019-09-27"
  };

  async createConfigurationSet(
    {abortSignal, ...params}: RequestConfig & s.CreateConfigurationSetRequest,
  ): Promise<s.CreateConfigurationSetResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationSetName: params["ConfigurationSetName"],
      TrackingOptions: fromTrackingOptions(params["TrackingOptions"]),
      DeliveryOptions: fromDeliveryOptions(params["DeliveryOptions"]),
      ReputationOptions: fromReputationOptions(params["ReputationOptions"]),
      SendingOptions: fromSendingOptions(params["SendingOptions"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
      SuppressionOptions: fromSuppressionOptions(params["SuppressionOptions"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationSet",
      requestUri: "/v2/email/configuration-sets",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & s.CreateConfigurationSetEventDestinationRequest,
  ): Promise<s.CreateConfigurationSetEventDestinationResponse> {
    const body: jsonP.JSONObject = {
      EventDestinationName: params["EventDestinationName"],
      EventDestination: fromEventDestinationDefinition(params["EventDestination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConfigurationSetEventDestination",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createContact(
    {abortSignal, ...params}: RequestConfig & s.CreateContactRequest,
  ): Promise<s.CreateContactResponse> {
    const body: jsonP.JSONObject = {
      EmailAddress: params["EmailAddress"],
      TopicPreferences: params["TopicPreferences"]?.map(x => fromTopicPreference(x)),
      UnsubscribeAll: params["UnsubscribeAll"],
      AttributesData: params["AttributesData"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContact",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}/contacts`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createContactList(
    {abortSignal, ...params}: RequestConfig & s.CreateContactListRequest,
  ): Promise<s.CreateContactListResponse> {
    const body: jsonP.JSONObject = {
      ContactListName: params["ContactListName"],
      Topics: params["Topics"]?.map(x => fromTopic(x)),
      Description: params["Description"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateContactList",
      requestUri: "/v2/email/contact-lists",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createCustomVerificationEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.CreateCustomVerificationEmailTemplateRequest,
  ): Promise<s.CreateCustomVerificationEmailTemplateResponse> {
    const body: jsonP.JSONObject = {
      TemplateName: params["TemplateName"],
      FromEmailAddress: params["FromEmailAddress"],
      TemplateSubject: params["TemplateSubject"],
      TemplateContent: params["TemplateContent"],
      SuccessRedirectionURL: params["SuccessRedirectionURL"],
      FailureRedirectionURL: params["FailureRedirectionURL"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCustomVerificationEmailTemplate",
      requestUri: "/v2/email/custom-verification-email-templates",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDedicatedIpPool(
    {abortSignal, ...params}: RequestConfig & s.CreateDedicatedIpPoolRequest,
  ): Promise<s.CreateDedicatedIpPoolResponse> {
    const body: jsonP.JSONObject = {
      PoolName: params["PoolName"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDedicatedIpPool",
      requestUri: "/v2/email/dedicated-ip-pools",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDeliverabilityTestReport(
    {abortSignal, ...params}: RequestConfig & s.CreateDeliverabilityTestReportRequest,
  ): Promise<s.CreateDeliverabilityTestReportResponse> {
    const body: jsonP.JSONObject = {
      ReportName: params["ReportName"],
      FromEmailAddress: params["FromEmailAddress"],
      Content: fromEmailContent(params["Content"]),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeliverabilityTestReport",
      requestUri: "/v2/email/deliverability-dashboard/test",
    });
    return jsonP.readObj({
      required: {
        "ReportId": "s",
        "DeliverabilityTestStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeliverabilityTestStatus>(x),
      },
      optional: {},
    }, await resp.json());
  }

  async createEmailIdentity(
    {abortSignal, ...params}: RequestConfig & s.CreateEmailIdentityRequest,
  ): Promise<s.CreateEmailIdentityResponse> {
    const body: jsonP.JSONObject = {
      EmailIdentity: params["EmailIdentity"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      DkimSigningAttributes: fromDkimSigningAttributes(params["DkimSigningAttributes"]),
      ConfigurationSetName: params["ConfigurationSetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEmailIdentity",
      requestUri: "/v2/email/identities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IdentityType>(x),
        "VerifiedForSendingStatus": "b",
        "DkimAttributes": toDkimAttributes,
      },
    }, await resp.json());
  }

  async createEmailIdentityPolicy(
    {abortSignal, ...params}: RequestConfig & s.CreateEmailIdentityPolicyRequest,
  ): Promise<s.CreateEmailIdentityPolicyResponse> {
    const body: jsonP.JSONObject = {
      Policy: params["Policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEmailIdentityPolicy",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/policies/${params["PolicyName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.CreateEmailTemplateRequest,
  ): Promise<s.CreateEmailTemplateResponse> {
    const body: jsonP.JSONObject = {
      TemplateName: params["TemplateName"],
      TemplateContent: fromEmailTemplateContent(params["TemplateContent"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEmailTemplate",
      requestUri: "/v2/email/templates",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createImportJob(
    {abortSignal, ...params}: RequestConfig & s.CreateImportJobRequest,
  ): Promise<s.CreateImportJobResponse> {
    const body: jsonP.JSONObject = {
      ImportDestination: fromImportDestination(params["ImportDestination"]),
      ImportDataSource: fromImportDataSource(params["ImportDataSource"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateImportJob",
      requestUri: "/v2/email/import-jobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
      },
    }, await resp.json());
  }

  async deleteConfigurationSet(
    {abortSignal, ...params}: RequestConfig & s.DeleteConfigurationSetRequest,
  ): Promise<s.DeleteConfigurationSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationSet",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & s.DeleteConfigurationSetEventDestinationRequest,
  ): Promise<s.DeleteConfigurationSetEventDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteConfigurationSetEventDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations/${params["EventDestinationName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteContact(
    {abortSignal, ...params}: RequestConfig & s.DeleteContactRequest,
  ): Promise<s.DeleteContactResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteContact",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}/contacts/${params["EmailAddress"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteContactList(
    {abortSignal, ...params}: RequestConfig & s.DeleteContactListRequest,
  ): Promise<s.DeleteContactListResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteContactList",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteCustomVerificationEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.DeleteCustomVerificationEmailTemplateRequest,
  ): Promise<s.DeleteCustomVerificationEmailTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCustomVerificationEmailTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/custom-verification-email-templates/${params["TemplateName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDedicatedIpPool(
    {abortSignal, ...params}: RequestConfig & s.DeleteDedicatedIpPoolRequest,
  ): Promise<s.DeleteDedicatedIpPoolResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDedicatedIpPool",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/dedicated-ip-pools/${params["PoolName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEmailIdentity(
    {abortSignal, ...params}: RequestConfig & s.DeleteEmailIdentityRequest,
  ): Promise<s.DeleteEmailIdentityResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEmailIdentity",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEmailIdentityPolicy(
    {abortSignal, ...params}: RequestConfig & s.DeleteEmailIdentityPolicyRequest,
  ): Promise<s.DeleteEmailIdentityPolicyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEmailIdentityPolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/policies/${params["PolicyName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.DeleteEmailTemplateRequest,
  ): Promise<s.DeleteEmailTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEmailTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/templates/${params["TemplateName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSuppressedDestination(
    {abortSignal, ...params}: RequestConfig & s.DeleteSuppressedDestinationRequest,
  ): Promise<s.DeleteSuppressedDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSuppressedDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/v2/email/suppression/addresses/${params["EmailAddress"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccount(
    {abortSignal, ...params}: RequestConfig & s.GetAccountRequest = {},
  ): Promise<s.GetAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccount",
      method: "GET",
      requestUri: "/v2/email/account",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedIpAutoWarmupEnabled": "b",
        "EnforcementStatus": "s",
        "ProductionAccessEnabled": "b",
        "SendQuota": toSendQuota,
        "SendingEnabled": "b",
        "SuppressionAttributes": toSuppressionAttributes,
        "Details": toAccountDetails,
      },
    }, await resp.json());
  }

  async getBlacklistReports(
    {abortSignal, ...params}: RequestConfig & s.GetBlacklistReportsRequest,
  ): Promise<s.GetBlacklistReportsResponse> {
    const query = new URLSearchParams;
    for (const item of params["BlacklistItemNames"]) {
      query.append("BlacklistItemNames", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetBlacklistReports",
      method: "GET",
      requestUri: "/v2/email/deliverability-dashboard/blacklist-report",
    });
    return jsonP.readObj({
      required: {
        "BlacklistReport": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toBlacklistEntry) : [], x),
      },
      optional: {},
    }, await resp.json());
  }

  async getConfigurationSet(
    {abortSignal, ...params}: RequestConfig & s.GetConfigurationSetRequest,
  ): Promise<s.GetConfigurationSetResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfigurationSet",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationSetName": "s",
        "TrackingOptions": toTrackingOptions,
        "DeliveryOptions": toDeliveryOptions,
        "ReputationOptions": toReputationOptions,
        "SendingOptions": toSendingOptions,
        "Tags": [toTag],
        "SuppressionOptions": toSuppressionOptions,
      },
    }, await resp.json());
  }

  async getConfigurationSetEventDestinations(
    {abortSignal, ...params}: RequestConfig & s.GetConfigurationSetEventDestinationsRequest,
  ): Promise<s.GetConfigurationSetEventDestinationsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetConfigurationSetEventDestinations",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventDestinations": [toEventDestination],
      },
    }, await resp.json());
  }

  async getContact(
    {abortSignal, ...params}: RequestConfig & s.GetContactRequest,
  ): Promise<s.GetContactResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetContact",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}/contacts/${params["EmailAddress"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactListName": "s",
        "EmailAddress": "s",
        "TopicPreferences": [toTopicPreference],
        "TopicDefaultPreferences": [toTopicPreference],
        "UnsubscribeAll": "b",
        "AttributesData": "s",
        "CreatedTimestamp": "d",
        "LastUpdatedTimestamp": "d",
      },
    }, await resp.json());
  }

  async getContactList(
    {abortSignal, ...params}: RequestConfig & s.GetContactListRequest,
  ): Promise<s.GetContactListResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetContactList",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactListName": "s",
        "Topics": [toTopic],
        "Description": "s",
        "CreatedTimestamp": "d",
        "LastUpdatedTimestamp": "d",
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async getCustomVerificationEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetCustomVerificationEmailTemplateRequest,
  ): Promise<s.GetCustomVerificationEmailTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetCustomVerificationEmailTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/custom-verification-email-templates/${params["TemplateName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TemplateName": "s",
        "FromEmailAddress": "s",
        "TemplateSubject": "s",
        "TemplateContent": "s",
        "SuccessRedirectionURL": "s",
        "FailureRedirectionURL": "s",
      },
    }, await resp.json());
  }

  async getDedicatedIp(
    {abortSignal, ...params}: RequestConfig & s.GetDedicatedIpRequest,
  ): Promise<s.GetDedicatedIpResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDedicatedIp",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/dedicated-ips/${params["Ip"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedIp": toDedicatedIp,
      },
    }, await resp.json());
  }

  async getDedicatedIps(
    {abortSignal, ...params}: RequestConfig & s.GetDedicatedIpsRequest = {},
  ): Promise<s.GetDedicatedIpsResponse> {
    const query = new URLSearchParams;
    if (params["PoolName"] != null) query.set("PoolName", params["PoolName"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDedicatedIps",
      method: "GET",
      requestUri: "/v2/email/dedicated-ips",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedIps": [toDedicatedIp],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getDeliverabilityDashboardOptions(
    {abortSignal, ...params}: RequestConfig & s.GetDeliverabilityDashboardOptionsRequest = {},
  ): Promise<s.GetDeliverabilityDashboardOptionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeliverabilityDashboardOptions",
      method: "GET",
      requestUri: "/v2/email/deliverability-dashboard",
    });
    return jsonP.readObj({
      required: {
        "DashboardEnabled": "b",
      },
      optional: {
        "SubscriptionExpiryDate": "d",
        "AccountStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeliverabilityDashboardAccountStatus>(x),
        "ActiveSubscribedDomains": [toDomainDeliverabilityTrackingOption],
        "PendingExpirationSubscribedDomains": [toDomainDeliverabilityTrackingOption],
      },
    }, await resp.json());
  }

  async getDeliverabilityTestReport(
    {abortSignal, ...params}: RequestConfig & s.GetDeliverabilityTestReportRequest,
  ): Promise<s.GetDeliverabilityTestReportResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDeliverabilityTestReport",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/deliverability-dashboard/test-reports/${params["ReportId"]}`,
    });
    return jsonP.readObj({
      required: {
        "DeliverabilityTestReport": toDeliverabilityTestReport,
        "OverallPlacement": toPlacementStatistics,
        "IspPlacements": [toIspPlacement],
      },
      optional: {
        "Message": "s",
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async getDomainDeliverabilityCampaign(
    {abortSignal, ...params}: RequestConfig & s.GetDomainDeliverabilityCampaignRequest,
  ): Promise<s.GetDomainDeliverabilityCampaignResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDomainDeliverabilityCampaign",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/deliverability-dashboard/campaigns/${params["CampaignId"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainDeliverabilityCampaign": toDomainDeliverabilityCampaign,
      },
      optional: {},
    }, await resp.json());
  }

  async getDomainStatisticsReport(
    {abortSignal, ...params}: RequestConfig & s.GetDomainStatisticsReportRequest,
  ): Promise<s.GetDomainStatisticsReportResponse> {
    const query = new URLSearchParams;
    query.set("StartDate", cmnP.serializeDate_iso8601(params["StartDate"]) ?? "");
    query.set("EndDate", cmnP.serializeDate_iso8601(params["EndDate"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDomainStatisticsReport",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/deliverability-dashboard/statistics-report/${params["Domain"]}`,
    });
    return jsonP.readObj({
      required: {
        "OverallVolume": toOverallVolume,
        "DailyVolumes": [toDailyVolume],
      },
      optional: {},
    }, await resp.json());
  }

  async getEmailIdentity(
    {abortSignal, ...params}: RequestConfig & s.GetEmailIdentityRequest,
  ): Promise<s.GetEmailIdentityResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEmailIdentity",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IdentityType>(x),
        "FeedbackForwardingStatus": "b",
        "VerifiedForSendingStatus": "b",
        "DkimAttributes": toDkimAttributes,
        "MailFromAttributes": toMailFromAttributes,
        "Policies": x => jsonP.readMap(String, String, x),
        "Tags": [toTag],
        "ConfigurationSetName": "s",
      },
    }, await resp.json());
  }

  async getEmailIdentityPolicies(
    {abortSignal, ...params}: RequestConfig & s.GetEmailIdentityPoliciesRequest,
  ): Promise<s.GetEmailIdentityPoliciesResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEmailIdentityPolicies",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/policies`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Policies": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetEmailTemplateRequest,
  ): Promise<s.GetEmailTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEmailTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/templates/${params["TemplateName"]}`,
    });
    return jsonP.readObj({
      required: {
        "TemplateName": "s",
        "TemplateContent": toEmailTemplateContent,
      },
      optional: {},
    }, await resp.json());
  }

  async getImportJob(
    {abortSignal, ...params}: RequestConfig & s.GetImportJobRequest,
  ): Promise<s.GetImportJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetImportJob",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/import-jobs/${params["JobId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "JobId": "s",
        "ImportDestination": toImportDestination,
        "ImportDataSource": toImportDataSource,
        "FailureInfo": toFailureInfo,
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
        "CreatedTimestamp": "d",
        "CompletedTimestamp": "d",
        "ProcessedRecordsCount": "n",
        "FailedRecordsCount": "n",
      },
    }, await resp.json());
  }

  async getSuppressedDestination(
    {abortSignal, ...params}: RequestConfig & s.GetSuppressedDestinationRequest,
  ): Promise<s.GetSuppressedDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSuppressedDestination",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/suppression/addresses/${params["EmailAddress"]}`,
    });
    return jsonP.readObj({
      required: {
        "SuppressedDestination": toSuppressedDestination,
      },
      optional: {},
    }, await resp.json());
  }

  async listConfigurationSets(
    {abortSignal, ...params}: RequestConfig & s.ListConfigurationSetsRequest = {},
  ): Promise<s.ListConfigurationSetsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListConfigurationSets",
      method: "GET",
      requestUri: "/v2/email/configuration-sets",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ConfigurationSets": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listContactLists(
    {abortSignal, ...params}: RequestConfig & s.ListContactListsRequest = {},
  ): Promise<s.ListContactListsResponse> {
    const query = new URLSearchParams;
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListContactLists",
      method: "GET",
      requestUri: "/v2/email/contact-lists",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ContactLists": [toContactList],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listContacts(
    {abortSignal, ...params}: RequestConfig & s.ListContactsRequest,
  ): Promise<s.ListContactsResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Filter: fromListContactsFilter(params["Filter"]),
    };
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListContacts",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}/contacts`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Contacts": [toContact],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listCustomVerificationEmailTemplates(
    {abortSignal, ...params}: RequestConfig & s.ListCustomVerificationEmailTemplatesRequest = {},
  ): Promise<s.ListCustomVerificationEmailTemplatesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCustomVerificationEmailTemplates",
      method: "GET",
      requestUri: "/v2/email/custom-verification-email-templates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CustomVerificationEmailTemplates": [toCustomVerificationEmailTemplateMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDedicatedIpPools(
    {abortSignal, ...params}: RequestConfig & s.ListDedicatedIpPoolsRequest = {},
  ): Promise<s.ListDedicatedIpPoolsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDedicatedIpPools",
      method: "GET",
      requestUri: "/v2/email/dedicated-ip-pools",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DedicatedIpPools": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDeliverabilityTestReports(
    {abortSignal, ...params}: RequestConfig & s.ListDeliverabilityTestReportsRequest = {},
  ): Promise<s.ListDeliverabilityTestReportsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDeliverabilityTestReports",
      method: "GET",
      requestUri: "/v2/email/deliverability-dashboard/test-reports",
    });
    return jsonP.readObj({
      required: {
        "DeliverabilityTestReports": [toDeliverabilityTestReport],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDomainDeliverabilityCampaigns(
    {abortSignal, ...params}: RequestConfig & s.ListDomainDeliverabilityCampaignsRequest,
  ): Promise<s.ListDomainDeliverabilityCampaignsResponse> {
    const query = new URLSearchParams;
    query.set("StartDate", cmnP.serializeDate_iso8601(params["StartDate"]) ?? "");
    query.set("EndDate", cmnP.serializeDate_iso8601(params["EndDate"]) ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDomainDeliverabilityCampaigns",
      method: "GET",
      requestUri: cmnP.encodePath`/v2/email/deliverability-dashboard/domains/${params["SubscribedDomain"]}/campaigns`,
    });
    return jsonP.readObj({
      required: {
        "DomainDeliverabilityCampaigns": [toDomainDeliverabilityCampaign],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEmailIdentities(
    {abortSignal, ...params}: RequestConfig & s.ListEmailIdentitiesRequest = {},
  ): Promise<s.ListEmailIdentitiesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEmailIdentities",
      method: "GET",
      requestUri: "/v2/email/identities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EmailIdentities": [toIdentityInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listEmailTemplates(
    {abortSignal, ...params}: RequestConfig & s.ListEmailTemplatesRequest = {},
  ): Promise<s.ListEmailTemplatesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListEmailTemplates",
      method: "GET",
      requestUri: "/v2/email/templates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TemplatesMetadata": [toEmailTemplateMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listImportJobs(
    {abortSignal, ...params}: RequestConfig & s.ListImportJobsRequest = {},
  ): Promise<s.ListImportJobsResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      ImportDestinationType: params["ImportDestinationType"],
    };
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListImportJobs",
      method: "GET",
      requestUri: "/v2/email/import-jobs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ImportJobs": [toImportJobSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSuppressedDestinations(
    {abortSignal, ...params}: RequestConfig & s.ListSuppressedDestinationsRequest = {},
  ): Promise<s.ListSuppressedDestinationsResponse> {
    const query = new URLSearchParams;
    for (const item of params["Reasons"] ?? []) {
      query.append("Reason", item?.toString() ?? "");
    }
    if (params["StartDate"] != null) query.set("StartDate", cmnP.serializeDate_iso8601(params["StartDate"]) ?? "");
    if (params["EndDate"] != null) query.set("EndDate", cmnP.serializeDate_iso8601(params["EndDate"]) ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["PageSize"] != null) query.set("PageSize", params["PageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSuppressedDestinations",
      method: "GET",
      requestUri: "/v2/email/suppression/addresses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SuppressedDestinationSummaries": [toSuppressedDestinationSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("ResourceArn", params["ResourceArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/v2/email/tags",
    });
    return jsonP.readObj({
      required: {
        "Tags": [toTag],
      },
      optional: {},
    }, await resp.json());
  }

  async putAccountDedicatedIpWarmupAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutAccountDedicatedIpWarmupAttributesRequest = {},
  ): Promise<s.PutAccountDedicatedIpWarmupAttributesResponse> {
    const body: jsonP.JSONObject = {
      AutoWarmupEnabled: params["AutoWarmupEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccountDedicatedIpWarmupAttributes",
      method: "PUT",
      requestUri: "/v2/email/account/dedicated-ips/warmup",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAccountDetails(
    {abortSignal, ...params}: RequestConfig & s.PutAccountDetailsRequest,
  ): Promise<s.PutAccountDetailsResponse> {
    const body: jsonP.JSONObject = {
      MailType: params["MailType"],
      WebsiteURL: params["WebsiteURL"],
      ContactLanguage: params["ContactLanguage"],
      UseCaseDescription: params["UseCaseDescription"],
      AdditionalContactEmailAddresses: params["AdditionalContactEmailAddresses"],
      ProductionAccessEnabled: params["ProductionAccessEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccountDetails",
      requestUri: "/v2/email/account/details",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAccountSendingAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutAccountSendingAttributesRequest = {},
  ): Promise<s.PutAccountSendingAttributesResponse> {
    const body: jsonP.JSONObject = {
      SendingEnabled: params["SendingEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccountSendingAttributes",
      method: "PUT",
      requestUri: "/v2/email/account/sending",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAccountSuppressionAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutAccountSuppressionAttributesRequest = {},
  ): Promise<s.PutAccountSuppressionAttributesResponse> {
    const body: jsonP.JSONObject = {
      SuppressedReasons: params["SuppressedReasons"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAccountSuppressionAttributes",
      method: "PUT",
      requestUri: "/v2/email/account/suppression",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetDeliveryOptions(
    {abortSignal, ...params}: RequestConfig & s.PutConfigurationSetDeliveryOptionsRequest,
  ): Promise<s.PutConfigurationSetDeliveryOptionsResponse> {
    const body: jsonP.JSONObject = {
      TlsPolicy: params["TlsPolicy"],
      SendingPoolName: params["SendingPoolName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetDeliveryOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/delivery-options`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetReputationOptions(
    {abortSignal, ...params}: RequestConfig & s.PutConfigurationSetReputationOptionsRequest,
  ): Promise<s.PutConfigurationSetReputationOptionsResponse> {
    const body: jsonP.JSONObject = {
      ReputationMetricsEnabled: params["ReputationMetricsEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetReputationOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/reputation-options`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetSendingOptions(
    {abortSignal, ...params}: RequestConfig & s.PutConfigurationSetSendingOptionsRequest,
  ): Promise<s.PutConfigurationSetSendingOptionsResponse> {
    const body: jsonP.JSONObject = {
      SendingEnabled: params["SendingEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetSendingOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/sending`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetSuppressionOptions(
    {abortSignal, ...params}: RequestConfig & s.PutConfigurationSetSuppressionOptionsRequest,
  ): Promise<s.PutConfigurationSetSuppressionOptionsResponse> {
    const body: jsonP.JSONObject = {
      SuppressedReasons: params["SuppressedReasons"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetSuppressionOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/suppression-options`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putConfigurationSetTrackingOptions(
    {abortSignal, ...params}: RequestConfig & s.PutConfigurationSetTrackingOptionsRequest,
  ): Promise<s.PutConfigurationSetTrackingOptionsResponse> {
    const body: jsonP.JSONObject = {
      CustomRedirectDomain: params["CustomRedirectDomain"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutConfigurationSetTrackingOptions",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/tracking-options`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putDedicatedIpInPool(
    {abortSignal, ...params}: RequestConfig & s.PutDedicatedIpInPoolRequest,
  ): Promise<s.PutDedicatedIpInPoolResponse> {
    const body: jsonP.JSONObject = {
      DestinationPoolName: params["DestinationPoolName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDedicatedIpInPool",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/dedicated-ips/${params["Ip"]}/pool`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putDedicatedIpWarmupAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutDedicatedIpWarmupAttributesRequest,
  ): Promise<s.PutDedicatedIpWarmupAttributesResponse> {
    const body: jsonP.JSONObject = {
      WarmupPercentage: params["WarmupPercentage"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDedicatedIpWarmupAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/dedicated-ips/${params["Ip"]}/warmup`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putDeliverabilityDashboardOption(
    {abortSignal, ...params}: RequestConfig & s.PutDeliverabilityDashboardOptionRequest,
  ): Promise<s.PutDeliverabilityDashboardOptionResponse> {
    const body: jsonP.JSONObject = {
      DashboardEnabled: params["DashboardEnabled"],
      SubscribedDomains: params["SubscribedDomains"]?.map(x => fromDomainDeliverabilityTrackingOption(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDeliverabilityDashboardOption",
      method: "PUT",
      requestUri: "/v2/email/deliverability-dashboard",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEmailIdentityConfigurationSetAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutEmailIdentityConfigurationSetAttributesRequest,
  ): Promise<s.PutEmailIdentityConfigurationSetAttributesResponse> {
    const body: jsonP.JSONObject = {
      ConfigurationSetName: params["ConfigurationSetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityConfigurationSetAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/configuration-set`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEmailIdentityDkimAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutEmailIdentityDkimAttributesRequest,
  ): Promise<s.PutEmailIdentityDkimAttributesResponse> {
    const body: jsonP.JSONObject = {
      SigningEnabled: params["SigningEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityDkimAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/dkim`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEmailIdentityDkimSigningAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutEmailIdentityDkimSigningAttributesRequest,
  ): Promise<s.PutEmailIdentityDkimSigningAttributesResponse> {
    const body: jsonP.JSONObject = {
      SigningAttributesOrigin: params["SigningAttributesOrigin"],
      SigningAttributes: fromDkimSigningAttributes(params["SigningAttributes"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityDkimSigningAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v1/email/identities/${params["EmailIdentity"]}/dkim/signing`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "DkimStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DkimStatus>(x),
        "DkimTokens": ["s"],
      },
    }, await resp.json());
  }

  async putEmailIdentityFeedbackAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutEmailIdentityFeedbackAttributesRequest,
  ): Promise<s.PutEmailIdentityFeedbackAttributesResponse> {
    const body: jsonP.JSONObject = {
      EmailForwardingEnabled: params["EmailForwardingEnabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityFeedbackAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/feedback`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEmailIdentityMailFromAttributes(
    {abortSignal, ...params}: RequestConfig & s.PutEmailIdentityMailFromAttributesRequest,
  ): Promise<s.PutEmailIdentityMailFromAttributesResponse> {
    const body: jsonP.JSONObject = {
      MailFromDomain: params["MailFromDomain"],
      BehaviorOnMxFailure: params["BehaviorOnMxFailure"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEmailIdentityMailFromAttributes",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/mail-from`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putSuppressedDestination(
    {abortSignal, ...params}: RequestConfig & s.PutSuppressedDestinationRequest,
  ): Promise<s.PutSuppressedDestinationResponse> {
    const body: jsonP.JSONObject = {
      EmailAddress: params["EmailAddress"],
      Reason: params["Reason"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutSuppressedDestination",
      method: "PUT",
      requestUri: "/v2/email/suppression/addresses",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async sendBulkEmail(
    {abortSignal, ...params}: RequestConfig & s.SendBulkEmailRequest,
  ): Promise<s.SendBulkEmailResponse> {
    const body: jsonP.JSONObject = {
      FromEmailAddress: params["FromEmailAddress"],
      FromEmailAddressIdentityArn: params["FromEmailAddressIdentityArn"],
      ReplyToAddresses: params["ReplyToAddresses"],
      FeedbackForwardingEmailAddress: params["FeedbackForwardingEmailAddress"],
      FeedbackForwardingEmailAddressIdentityArn: params["FeedbackForwardingEmailAddressIdentityArn"],
      DefaultEmailTags: params["DefaultEmailTags"]?.map(x => fromMessageTag(x)),
      DefaultContent: fromBulkEmailContent(params["DefaultContent"]),
      BulkEmailEntries: params["BulkEmailEntries"]?.map(x => fromBulkEmailEntry(x)),
      ConfigurationSetName: params["ConfigurationSetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendBulkEmail",
      requestUri: "/v2/email/outbound-bulk-emails",
    });
    return jsonP.readObj({
      required: {
        "BulkEmailEntryResults": [toBulkEmailEntryResult],
      },
      optional: {},
    }, await resp.json());
  }

  async sendCustomVerificationEmail(
    {abortSignal, ...params}: RequestConfig & s.SendCustomVerificationEmailRequest,
  ): Promise<s.SendCustomVerificationEmailResponse> {
    const body: jsonP.JSONObject = {
      EmailAddress: params["EmailAddress"],
      TemplateName: params["TemplateName"],
      ConfigurationSetName: params["ConfigurationSetName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendCustomVerificationEmail",
      requestUri: "/v2/email/outbound-custom-verification-emails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async sendEmail(
    {abortSignal, ...params}: RequestConfig & s.SendEmailRequest,
  ): Promise<s.SendEmailResponse> {
    const body: jsonP.JSONObject = {
      FromEmailAddress: params["FromEmailAddress"],
      FromEmailAddressIdentityArn: params["FromEmailAddressIdentityArn"],
      Destination: fromDestination(params["Destination"]),
      ReplyToAddresses: params["ReplyToAddresses"],
      FeedbackForwardingEmailAddress: params["FeedbackForwardingEmailAddress"],
      FeedbackForwardingEmailAddressIdentityArn: params["FeedbackForwardingEmailAddressIdentityArn"],
      Content: fromEmailContent(params["Content"]),
      EmailTags: params["EmailTags"]?.map(x => fromMessageTag(x)),
      ConfigurationSetName: params["ConfigurationSetName"],
      ListManagementOptions: fromListManagementOptions(params["ListManagementOptions"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendEmail",
      requestUri: "/v2/email/outbound-emails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/v2/email/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async testRenderEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.TestRenderEmailTemplateRequest,
  ): Promise<s.TestRenderEmailTemplateResponse> {
    const body: jsonP.JSONObject = {
      TemplateData: params["TemplateData"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TestRenderEmailTemplate",
      requestUri: cmnP.encodePath`/v2/email/templates/${params["TemplateName"]}/render`,
    });
    return jsonP.readObj({
      required: {
        "RenderedTemplate": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    query.set("ResourceArn", params["ResourceArn"]?.toString() ?? "");
    for (const item of params["TagKeys"]) {
      query.append("TagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: "/v2/email/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateConfigurationSetEventDestination(
    {abortSignal, ...params}: RequestConfig & s.UpdateConfigurationSetEventDestinationRequest,
  ): Promise<s.UpdateConfigurationSetEventDestinationResponse> {
    const body: jsonP.JSONObject = {
      EventDestination: fromEventDestinationDefinition(params["EventDestination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConfigurationSetEventDestination",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/configuration-sets/${params["ConfigurationSetName"]}/event-destinations/${params["EventDestinationName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateContact(
    {abortSignal, ...params}: RequestConfig & s.UpdateContactRequest,
  ): Promise<s.UpdateContactResponse> {
    const body: jsonP.JSONObject = {
      TopicPreferences: params["TopicPreferences"]?.map(x => fromTopicPreference(x)),
      UnsubscribeAll: params["UnsubscribeAll"],
      AttributesData: params["AttributesData"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContact",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}/contacts/${params["EmailAddress"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateContactList(
    {abortSignal, ...params}: RequestConfig & s.UpdateContactListRequest,
  ): Promise<s.UpdateContactListResponse> {
    const body: jsonP.JSONObject = {
      Topics: params["Topics"]?.map(x => fromTopic(x)),
      Description: params["Description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateContactList",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/contact-lists/${params["ContactListName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateCustomVerificationEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.UpdateCustomVerificationEmailTemplateRequest,
  ): Promise<s.UpdateCustomVerificationEmailTemplateResponse> {
    const body: jsonP.JSONObject = {
      FromEmailAddress: params["FromEmailAddress"],
      TemplateSubject: params["TemplateSubject"],
      TemplateContent: params["TemplateContent"],
      SuccessRedirectionURL: params["SuccessRedirectionURL"],
      FailureRedirectionURL: params["FailureRedirectionURL"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCustomVerificationEmailTemplate",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/custom-verification-email-templates/${params["TemplateName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateEmailIdentityPolicy(
    {abortSignal, ...params}: RequestConfig & s.UpdateEmailIdentityPolicyRequest,
  ): Promise<s.UpdateEmailIdentityPolicyResponse> {
    const body: jsonP.JSONObject = {
      Policy: params["Policy"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEmailIdentityPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/identities/${params["EmailIdentity"]}/policies/${params["PolicyName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateEmailTemplate(
    {abortSignal, ...params}: RequestConfig & s.UpdateEmailTemplateRequest,
  ): Promise<s.UpdateEmailTemplateResponse> {
    const body: jsonP.JSONObject = {
      TemplateContent: fromEmailTemplateContent(params["TemplateContent"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEmailTemplate",
      method: "PUT",
      requestUri: cmnP.encodePath`/v2/email/templates/${params["TemplateName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromTrackingOptions(input?: s.TrackingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CustomRedirectDomain: input["CustomRedirectDomain"],
  }
}
function toTrackingOptions(root: jsonP.JSONValue): s.TrackingOptions {
  return jsonP.readObj({
    required: {
      "CustomRedirectDomain": "s",
    },
    optional: {},
  }, root);
}

function fromDeliveryOptions(input?: s.DeliveryOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TlsPolicy: input["TlsPolicy"],
    SendingPoolName: input["SendingPoolName"],
  }
}
function toDeliveryOptions(root: jsonP.JSONValue): s.DeliveryOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "TlsPolicy": (x: jsonP.JSONValue) => cmnP.readEnum<s.TlsPolicy>(x),
      "SendingPoolName": "s",
    },
  }, root);
}

function fromReputationOptions(input?: s.ReputationOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReputationMetricsEnabled: input["ReputationMetricsEnabled"],
    LastFreshStart: jsonP.serializeDate_unixTimestamp(input["LastFreshStart"]),
  }
}
function toReputationOptions(root: jsonP.JSONValue): s.ReputationOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReputationMetricsEnabled": "b",
      "LastFreshStart": "d",
    },
  }, root);
}

function fromSendingOptions(input?: s.SendingOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SendingEnabled: input["SendingEnabled"],
  }
}
function toSendingOptions(root: jsonP.JSONValue): s.SendingOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "SendingEnabled": "b",
    },
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromSuppressionOptions(input?: s.SuppressionOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SuppressedReasons: input["SuppressedReasons"],
  }
}
function toSuppressionOptions(root: jsonP.JSONValue): s.SuppressionOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "SuppressedReasons": [(x: jsonP.JSONValue) => cmnP.readEnum<s.SuppressionListReason>(x)],
    },
  }, root);
}

function fromEventDestinationDefinition(input?: s.EventDestinationDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
    MatchingEventTypes: input["MatchingEventTypes"],
    KinesisFirehoseDestination: fromKinesisFirehoseDestination(input["KinesisFirehoseDestination"]),
    CloudWatchDestination: fromCloudWatchDestination(input["CloudWatchDestination"]),
    SnsDestination: fromSnsDestination(input["SnsDestination"]),
    PinpointDestination: fromPinpointDestination(input["PinpointDestination"]),
  }
}

function fromKinesisFirehoseDestination(input?: s.KinesisFirehoseDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IamRoleArn: input["IamRoleArn"],
    DeliveryStreamArn: input["DeliveryStreamArn"],
  }
}
function toKinesisFirehoseDestination(root: jsonP.JSONValue): s.KinesisFirehoseDestination {
  return jsonP.readObj({
    required: {
      "IamRoleArn": "s",
      "DeliveryStreamArn": "s",
    },
    optional: {},
  }, root);
}

function fromCloudWatchDestination(input?: s.CloudWatchDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DimensionConfigurations: input["DimensionConfigurations"]?.map(x => fromCloudWatchDimensionConfiguration(x)),
  }
}
function toCloudWatchDestination(root: jsonP.JSONValue): s.CloudWatchDestination {
  return jsonP.readObj({
    required: {
      "DimensionConfigurations": [toCloudWatchDimensionConfiguration],
    },
    optional: {},
  }, root);
}

function fromCloudWatchDimensionConfiguration(input?: s.CloudWatchDimensionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DimensionName: input["DimensionName"],
    DimensionValueSource: input["DimensionValueSource"],
    DefaultDimensionValue: input["DefaultDimensionValue"],
  }
}
function toCloudWatchDimensionConfiguration(root: jsonP.JSONValue): s.CloudWatchDimensionConfiguration {
  return jsonP.readObj({
    required: {
      "DimensionName": "s",
      "DimensionValueSource": (x: jsonP.JSONValue) => cmnP.readEnum<s.DimensionValueSource>(x),
      "DefaultDimensionValue": "s",
    },
    optional: {},
  }, root);
}

function fromSnsDestination(input?: s.SnsDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TopicArn: input["TopicArn"],
  }
}
function toSnsDestination(root: jsonP.JSONValue): s.SnsDestination {
  return jsonP.readObj({
    required: {
      "TopicArn": "s",
    },
    optional: {},
  }, root);
}

function fromPinpointDestination(input?: s.PinpointDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ApplicationArn: input["ApplicationArn"],
  }
}
function toPinpointDestination(root: jsonP.JSONValue): s.PinpointDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "ApplicationArn": "s",
    },
  }, root);
}

function fromTopicPreference(input?: s.TopicPreference | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TopicName: input["TopicName"],
    SubscriptionStatus: input["SubscriptionStatus"],
  }
}
function toTopicPreference(root: jsonP.JSONValue): s.TopicPreference {
  return jsonP.readObj({
    required: {
      "TopicName": "s",
      "SubscriptionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.SubscriptionStatus>(x),
    },
    optional: {},
  }, root);
}

function fromTopic(input?: s.Topic | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TopicName: input["TopicName"],
    DisplayName: input["DisplayName"],
    Description: input["Description"],
    DefaultSubscriptionStatus: input["DefaultSubscriptionStatus"],
  }
}
function toTopic(root: jsonP.JSONValue): s.Topic {
  return jsonP.readObj({
    required: {
      "TopicName": "s",
      "DisplayName": "s",
      "DefaultSubscriptionStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.SubscriptionStatus>(x),
    },
    optional: {
      "Description": "s",
    },
  }, root);
}

function fromEmailContent(input?: s.EmailContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Simple: fromMessage(input["Simple"]),
    Raw: fromRawMessage(input["Raw"]),
    Template: fromTemplate(input["Template"]),
  }
}

function fromMessage(input?: s.Message | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Subject: fromContent(input["Subject"]),
    Body: fromBody(input["Body"]),
  }
}

function fromContent(input?: s.Content | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: input["Data"],
    Charset: input["Charset"],
  }
}

function fromBody(input?: s.Body | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Text: fromContent(input["Text"]),
    Html: fromContent(input["Html"]),
  }
}

function fromRawMessage(input?: s.RawMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: serializeBlob(input["Data"]),
  }
}

function fromTemplate(input?: s.Template | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TemplateName: input["TemplateName"],
    TemplateArn: input["TemplateArn"],
    TemplateData: input["TemplateData"],
  }
}

function fromDkimSigningAttributes(input?: s.DkimSigningAttributes | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DomainSigningSelector: input["DomainSigningSelector"],
    DomainSigningPrivateKey: input["DomainSigningPrivateKey"],
  }
}

function fromEmailTemplateContent(input?: s.EmailTemplateContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Subject: input["Subject"],
    Text: input["Text"],
    Html: input["Html"],
  }
}
function toEmailTemplateContent(root: jsonP.JSONValue): s.EmailTemplateContent {
  return jsonP.readObj({
    required: {},
    optional: {
      "Subject": "s",
      "Text": "s",
      "Html": "s",
    },
  }, root);
}

function fromImportDestination(input?: s.ImportDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SuppressionListDestination: fromSuppressionListDestination(input["SuppressionListDestination"]),
    ContactListDestination: fromContactListDestination(input["ContactListDestination"]),
  }
}
function toImportDestination(root: jsonP.JSONValue): s.ImportDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "SuppressionListDestination": toSuppressionListDestination,
      "ContactListDestination": toContactListDestination,
    },
  }, root);
}

function fromSuppressionListDestination(input?: s.SuppressionListDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SuppressionListImportAction: input["SuppressionListImportAction"],
  }
}
function toSuppressionListDestination(root: jsonP.JSONValue): s.SuppressionListDestination {
  return jsonP.readObj({
    required: {
      "SuppressionListImportAction": (x: jsonP.JSONValue) => cmnP.readEnum<s.SuppressionListImportAction>(x),
    },
    optional: {},
  }, root);
}

function fromContactListDestination(input?: s.ContactListDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ContactListName: input["ContactListName"],
    ContactListImportAction: input["ContactListImportAction"],
  }
}
function toContactListDestination(root: jsonP.JSONValue): s.ContactListDestination {
  return jsonP.readObj({
    required: {
      "ContactListName": "s",
      "ContactListImportAction": (x: jsonP.JSONValue) => cmnP.readEnum<s.ContactListImportAction>(x),
    },
    optional: {},
  }, root);
}

function fromImportDataSource(input?: s.ImportDataSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Url: input["S3Url"],
    DataFormat: input["DataFormat"],
  }
}
function toImportDataSource(root: jsonP.JSONValue): s.ImportDataSource {
  return jsonP.readObj({
    required: {
      "S3Url": "s",
      "DataFormat": (x: jsonP.JSONValue) => cmnP.readEnum<s.DataFormat>(x),
    },
    optional: {},
  }, root);
}

function fromListContactsFilter(input?: s.ListContactsFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FilteredStatus: input["FilteredStatus"],
    TopicFilter: fromTopicFilter(input["TopicFilter"]),
  }
}

function fromTopicFilter(input?: s.TopicFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TopicName: input["TopicName"],
    UseDefaultIfPreferenceUnavailable: input["UseDefaultIfPreferenceUnavailable"],
  }
}

function fromDomainDeliverabilityTrackingOption(input?: s.DomainDeliverabilityTrackingOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Domain: input["Domain"],
    SubscriptionStartDate: jsonP.serializeDate_unixTimestamp(input["SubscriptionStartDate"]),
    InboxPlacementTrackingOption: fromInboxPlacementTrackingOption(input["InboxPlacementTrackingOption"]),
  }
}
function toDomainDeliverabilityTrackingOption(root: jsonP.JSONValue): s.DomainDeliverabilityTrackingOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "Domain": "s",
      "SubscriptionStartDate": "d",
      "InboxPlacementTrackingOption": toInboxPlacementTrackingOption,
    },
  }, root);
}

function fromInboxPlacementTrackingOption(input?: s.InboxPlacementTrackingOption | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Global: input["Global"],
    TrackedIsps: input["TrackedIsps"],
  }
}
function toInboxPlacementTrackingOption(root: jsonP.JSONValue): s.InboxPlacementTrackingOption {
  return jsonP.readObj({
    required: {},
    optional: {
      "Global": "b",
      "TrackedIsps": ["s"],
    },
  }, root);
}

function fromMessageTag(input?: s.MessageTag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}

function fromBulkEmailContent(input?: s.BulkEmailContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Template: fromTemplate(input["Template"]),
  }
}

function fromBulkEmailEntry(input?: s.BulkEmailEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Destination: fromDestination(input["Destination"]),
    ReplacementTags: input["ReplacementTags"]?.map(x => fromMessageTag(x)),
    ReplacementEmailContent: fromReplacementEmailContent(input["ReplacementEmailContent"]),
  }
}

function fromDestination(input?: s.Destination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ToAddresses: input["ToAddresses"],
    CcAddresses: input["CcAddresses"],
    BccAddresses: input["BccAddresses"],
  }
}

function fromReplacementEmailContent(input?: s.ReplacementEmailContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReplacementTemplate: fromReplacementTemplate(input["ReplacementTemplate"]),
  }
}

function fromReplacementTemplate(input?: s.ReplacementTemplate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ReplacementTemplateData: input["ReplacementTemplateData"],
  }
}

function fromListManagementOptions(input?: s.ListManagementOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ContactListName: input["ContactListName"],
    TopicName: input["TopicName"],
  }
}

function toDkimAttributes(root: jsonP.JSONValue): s.DkimAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "SigningEnabled": "b",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DkimStatus>(x),
      "Tokens": ["s"],
      "SigningAttributesOrigin": (x: jsonP.JSONValue) => cmnP.readEnum<s.DkimSigningAttributesOrigin>(x),
    },
  }, root);
}

function toSendQuota(root: jsonP.JSONValue): s.SendQuota {
  return jsonP.readObj({
    required: {},
    optional: {
      "Max24HourSend": "n",
      "MaxSendRate": "n",
      "SentLast24Hours": "n",
    },
  }, root);
}

function toSuppressionAttributes(root: jsonP.JSONValue): s.SuppressionAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "SuppressedReasons": [(x: jsonP.JSONValue) => cmnP.readEnum<s.SuppressionListReason>(x)],
    },
  }, root);
}

function toAccountDetails(root: jsonP.JSONValue): s.AccountDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "MailType": (x: jsonP.JSONValue) => cmnP.readEnum<s.MailType>(x),
      "WebsiteURL": "s",
      "ContactLanguage": (x: jsonP.JSONValue) => cmnP.readEnum<s.ContactLanguage>(x),
      "UseCaseDescription": "s",
      "AdditionalContactEmailAddresses": ["s"],
      "ReviewDetails": toReviewDetails,
    },
  }, root);
}

function toReviewDetails(root: jsonP.JSONValue): s.ReviewDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReviewStatus>(x),
      "CaseId": "s",
    },
  }, root);
}

function toBlacklistEntry(root: jsonP.JSONValue): s.BlacklistEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "RblName": "s",
      "ListingTime": "d",
      "Description": "s",
    },
  }, root);
}

function toEventDestination(root: jsonP.JSONValue): s.EventDestination {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "MatchingEventTypes": [(x: jsonP.JSONValue) => cmnP.readEnum<s.EventType>(x)],
    },
    optional: {
      "Enabled": "b",
      "KinesisFirehoseDestination": toKinesisFirehoseDestination,
      "CloudWatchDestination": toCloudWatchDestination,
      "SnsDestination": toSnsDestination,
      "PinpointDestination": toPinpointDestination,
    },
  }, root);
}

function toDedicatedIp(root: jsonP.JSONValue): s.DedicatedIp {
  return jsonP.readObj({
    required: {
      "Ip": "s",
      "WarmupStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.WarmupStatus>(x),
      "WarmupPercentage": "n",
    },
    optional: {
      "PoolName": "s",
    },
  }, root);
}

function toDeliverabilityTestReport(root: jsonP.JSONValue): s.DeliverabilityTestReport {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReportId": "s",
      "ReportName": "s",
      "Subject": "s",
      "FromEmailAddress": "s",
      "CreateDate": "d",
      "DeliverabilityTestStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DeliverabilityTestStatus>(x),
    },
  }, root);
}

function toPlacementStatistics(root: jsonP.JSONValue): s.PlacementStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "InboxPercentage": "n",
      "SpamPercentage": "n",
      "MissingPercentage": "n",
      "SpfPercentage": "n",
      "DkimPercentage": "n",
    },
  }, root);
}

function toIspPlacement(root: jsonP.JSONValue): s.IspPlacement {
  return jsonP.readObj({
    required: {},
    optional: {
      "IspName": "s",
      "PlacementStatistics": toPlacementStatistics,
    },
  }, root);
}

function toDomainDeliverabilityCampaign(root: jsonP.JSONValue): s.DomainDeliverabilityCampaign {
  return jsonP.readObj({
    required: {},
    optional: {
      "CampaignId": "s",
      "ImageUrl": "s",
      "Subject": "s",
      "FromAddress": "s",
      "SendingIps": ["s"],
      "FirstSeenDateTime": "d",
      "LastSeenDateTime": "d",
      "InboxCount": "n",
      "SpamCount": "n",
      "ReadRate": "n",
      "DeleteRate": "n",
      "ReadDeleteRate": "n",
      "ProjectedVolume": "n",
      "Esps": ["s"],
    },
  }, root);
}

function toOverallVolume(root: jsonP.JSONValue): s.OverallVolume {
  return jsonP.readObj({
    required: {},
    optional: {
      "VolumeStatistics": toVolumeStatistics,
      "ReadRatePercent": "n",
      "DomainIspPlacements": [toDomainIspPlacement],
    },
  }, root);
}

function toVolumeStatistics(root: jsonP.JSONValue): s.VolumeStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "InboxRawCount": "n",
      "SpamRawCount": "n",
      "ProjectedInbox": "n",
      "ProjectedSpam": "n",
    },
  }, root);
}

function toDomainIspPlacement(root: jsonP.JSONValue): s.DomainIspPlacement {
  return jsonP.readObj({
    required: {},
    optional: {
      "IspName": "s",
      "InboxRawCount": "n",
      "SpamRawCount": "n",
      "InboxPercentage": "n",
      "SpamPercentage": "n",
    },
  }, root);
}

function toDailyVolume(root: jsonP.JSONValue): s.DailyVolume {
  return jsonP.readObj({
    required: {},
    optional: {
      "StartDate": "d",
      "VolumeStatistics": toVolumeStatistics,
      "DomainIspPlacements": [toDomainIspPlacement],
    },
  }, root);
}

function toMailFromAttributes(root: jsonP.JSONValue): s.MailFromAttributes {
  return jsonP.readObj({
    required: {
      "MailFromDomain": "s",
      "MailFromDomainStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.MailFromDomainStatus>(x),
      "BehaviorOnMxFailure": (x: jsonP.JSONValue) => cmnP.readEnum<s.BehaviorOnMxFailure>(x),
    },
    optional: {},
  }, root);
}

function toFailureInfo(root: jsonP.JSONValue): s.FailureInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "FailedRecordsS3Url": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

function toSuppressedDestination(root: jsonP.JSONValue): s.SuppressedDestination {
  return jsonP.readObj({
    required: {
      "EmailAddress": "s",
      "Reason": (x: jsonP.JSONValue) => cmnP.readEnum<s.SuppressionListReason>(x),
      "LastUpdateTime": "d",
    },
    optional: {
      "Attributes": toSuppressedDestinationAttributes,
    },
  }, root);
}

function toSuppressedDestinationAttributes(root: jsonP.JSONValue): s.SuppressedDestinationAttributes {
  return jsonP.readObj({
    required: {},
    optional: {
      "MessageId": "s",
      "FeedbackId": "s",
    },
  }, root);
}

function toContactList(root: jsonP.JSONValue): s.ContactList {
  return jsonP.readObj({
    required: {},
    optional: {
      "ContactListName": "s",
      "LastUpdatedTimestamp": "d",
    },
  }, root);
}

function toContact(root: jsonP.JSONValue): s.Contact {
  return jsonP.readObj({
    required: {},
    optional: {
      "EmailAddress": "s",
      "TopicPreferences": [toTopicPreference],
      "TopicDefaultPreferences": [toTopicPreference],
      "UnsubscribeAll": "b",
      "LastUpdatedTimestamp": "d",
    },
  }, root);
}

function toCustomVerificationEmailTemplateMetadata(root: jsonP.JSONValue): s.CustomVerificationEmailTemplateMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "TemplateName": "s",
      "FromEmailAddress": "s",
      "TemplateSubject": "s",
      "SuccessRedirectionURL": "s",
      "FailureRedirectionURL": "s",
    },
  }, root);
}

function toIdentityInfo(root: jsonP.JSONValue): s.IdentityInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityType": (x: jsonP.JSONValue) => cmnP.readEnum<s.IdentityType>(x),
      "IdentityName": "s",
      "SendingEnabled": "b",
    },
  }, root);
}

function toEmailTemplateMetadata(root: jsonP.JSONValue): s.EmailTemplateMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "TemplateName": "s",
      "CreatedTimestamp": "d",
    },
  }, root);
}

function toImportJobSummary(root: jsonP.JSONValue): s.ImportJobSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "JobId": "s",
      "ImportDestination": toImportDestination,
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
      "CreatedTimestamp": "d",
    },
  }, root);
}

function toSuppressedDestinationSummary(root: jsonP.JSONValue): s.SuppressedDestinationSummary {
  return jsonP.readObj({
    required: {
      "EmailAddress": "s",
      "Reason": (x: jsonP.JSONValue) => cmnP.readEnum<s.SuppressionListReason>(x),
      "LastUpdateTime": "d",
    },
    optional: {},
  }, root);
}

function toBulkEmailEntryResult(root: jsonP.JSONValue): s.BulkEmailEntryResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.BulkEmailStatus>(x),
      "Error": "s",
      "MessageId": "s",
    },
  }, root);
}
