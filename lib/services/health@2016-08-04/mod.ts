// Autogenerated API client for: AWS Health APIs and Notifications

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class Health {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Health.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-08-04",
    "endpointPrefix": "health",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWSHealth",
    "serviceFullName": "AWS Health APIs and Notifications",
    "serviceId": "Health",
    "signatureVersion": "v4",
    "targetPrefix": "AWSHealth_20160804",
    "uid": "health-2016-08-04"
  };

  async describeAffectedAccountsForOrganization(
    {abortSignal, ...params}: RequestConfig & DescribeAffectedAccountsForOrganizationRequest,
  ): Promise<DescribeAffectedAccountsForOrganizationResponse> {
    const body: jsonP.JSONObject = {
      eventArn: params["eventArn"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAffectedAccountsForOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "affectedAccounts": ["s"],
        "eventScopeCode": (x: jsonP.JSONValue) => cmnP.readEnum<eventScopeCode>(x),
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeAffectedEntities(
    {abortSignal, ...params}: RequestConfig & DescribeAffectedEntitiesRequest,
  ): Promise<DescribeAffectedEntitiesResponse> {
    const body: jsonP.JSONObject = {
      filter: fromEntityFilter(params["filter"]),
      locale: params["locale"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAffectedEntities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "entities": [toAffectedEntity],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeAffectedEntitiesForOrganization(
    {abortSignal, ...params}: RequestConfig & DescribeAffectedEntitiesForOrganizationRequest,
  ): Promise<DescribeAffectedEntitiesForOrganizationResponse> {
    const body: jsonP.JSONObject = {
      organizationEntityFilters: params["organizationEntityFilters"]?.map(x => fromEventAccountFilter(x)),
      locale: params["locale"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAffectedEntitiesForOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "entities": [toAffectedEntity],
        "failedSet": [toOrganizationAffectedEntitiesErrorItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeEntityAggregates(
    {abortSignal, ...params}: RequestConfig & DescribeEntityAggregatesRequest = {},
  ): Promise<DescribeEntityAggregatesResponse> {
    const body: jsonP.JSONObject = {
      eventArns: params["eventArns"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEntityAggregates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "entityAggregates": [toEntityAggregate],
      },
    }, await resp.json());
  }

  async describeEventAggregates(
    {abortSignal, ...params}: RequestConfig & DescribeEventAggregatesRequest,
  ): Promise<DescribeEventAggregatesResponse> {
    const body: jsonP.JSONObject = {
      filter: fromEventFilter(params["filter"]),
      aggregateField: params["aggregateField"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventAggregates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "eventAggregates": [toEventAggregate],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeEventDetails(
    {abortSignal, ...params}: RequestConfig & DescribeEventDetailsRequest,
  ): Promise<DescribeEventDetailsResponse> {
    const body: jsonP.JSONObject = {
      eventArns: params["eventArns"],
      locale: params["locale"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventDetails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "successfulSet": [toEventDetails],
        "failedSet": [toEventDetailsErrorItem],
      },
    }, await resp.json());
  }

  async describeEventDetailsForOrganization(
    {abortSignal, ...params}: RequestConfig & DescribeEventDetailsForOrganizationRequest,
  ): Promise<DescribeEventDetailsForOrganizationResponse> {
    const body: jsonP.JSONObject = {
      organizationEventDetailFilters: params["organizationEventDetailFilters"]?.map(x => fromEventAccountFilter(x)),
      locale: params["locale"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventDetailsForOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "successfulSet": [toOrganizationEventDetails],
        "failedSet": [toOrganizationEventDetailsErrorItem],
      },
    }, await resp.json());
  }

  async describeEventTypes(
    {abortSignal, ...params}: RequestConfig & DescribeEventTypesRequest = {},
  ): Promise<DescribeEventTypesResponse> {
    const body: jsonP.JSONObject = {
      filter: fromEventTypeFilter(params["filter"]),
      locale: params["locale"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventTypes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "eventTypes": [toEventType],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeEvents(
    {abortSignal, ...params}: RequestConfig & DescribeEventsRequest = {},
  ): Promise<DescribeEventsResponse> {
    const body: jsonP.JSONObject = {
      filter: fromEventFilter(params["filter"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      locale: params["locale"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEvents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "events": [toEvent],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeEventsForOrganization(
    {abortSignal, ...params}: RequestConfig & DescribeEventsForOrganizationRequest = {},
  ): Promise<DescribeEventsForOrganizationResponse> {
    const body: jsonP.JSONObject = {
      filter: fromOrganizationEventFilter(params["filter"]),
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      locale: params["locale"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventsForOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "events": [toOrganizationEvent],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeHealthServiceStatusForOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<DescribeHealthServiceStatusForOrganizationResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeHealthServiceStatusForOrganization",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "healthServiceAccessStatusForOrganization": "s",
      },
    }, await resp.json());
  }

  async disableHealthServiceAccessForOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<void> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisableHealthServiceAccessForOrganization",
    });
  }

  async enableHealthServiceAccessForOrganization(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<void> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "EnableHealthServiceAccessForOrganization",
    });
  }

}

// refs: 1 - tags: named, input
export interface DescribeAffectedAccountsForOrganizationRequest {
  eventArn: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeAffectedEntitiesRequest {
  filter: EntityFilter;
  locale?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeAffectedEntitiesForOrganizationRequest {
  organizationEntityFilters: EventAccountFilter[];
  locale?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeEntityAggregatesRequest {
  eventArns?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventAggregatesRequest {
  filter?: EventFilter | null;
  aggregateField: eventAggregateField;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventDetailsRequest {
  eventArns: string[];
  locale?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventDetailsForOrganizationRequest {
  organizationEventDetailFilters: EventAccountFilter[];
  locale?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventTypesRequest {
  filter?: EventTypeFilter | null;
  locale?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventsRequest {
  filter?: EventFilter | null;
  nextToken?: string | null;
  maxResults?: number | null;
  locale?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventsForOrganizationRequest {
  filter?: OrganizationEventFilter | null;
  nextToken?: string | null;
  maxResults?: number | null;
  locale?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAffectedAccountsForOrganizationResponse {
  affectedAccounts?: string[] | null;
  eventScopeCode?: eventScopeCode | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAffectedEntitiesResponse {
  entities?: AffectedEntity[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAffectedEntitiesForOrganizationResponse {
  entities?: AffectedEntity[] | null;
  failedSet?: OrganizationAffectedEntitiesErrorItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEntityAggregatesResponse {
  entityAggregates?: EntityAggregate[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventAggregatesResponse {
  eventAggregates?: EventAggregate[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventDetailsResponse {
  successfulSet?: EventDetails[] | null;
  failedSet?: EventDetailsErrorItem[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventDetailsForOrganizationResponse {
  successfulSet?: OrganizationEventDetails[] | null;
  failedSet?: OrganizationEventDetailsErrorItem[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventTypesResponse {
  eventTypes?: EventType[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventsResponse {
  events?: Event[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventsForOrganizationResponse {
  events?: OrganizationEvent[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeHealthServiceStatusForOrganizationResponse {
  healthServiceAccessStatusForOrganization?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface EntityFilter {
  eventArns: string[];
  entityArns?: string[] | null;
  entityValues?: string[] | null;
  lastUpdatedTimes?: DateTimeRange[] | null;
  tags?: ({ [key: string]: string | null | undefined })[] | null;
  statusCodes?: entityStatusCode[] | null;
}
function fromEntityFilter(input?: EntityFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventArns: input["eventArns"],
    entityArns: input["entityArns"],
    entityValues: input["entityValues"],
    lastUpdatedTimes: input["lastUpdatedTimes"]?.map(x => fromDateTimeRange(x)),
    tags: input["tags"],
    statusCodes: input["statusCodes"],
  }
}

// refs: 10 - tags: input, named, interface
export interface DateTimeRange {
  from?: Date | number | null;
  to?: Date | number | null;
}
function fromDateTimeRange(input?: DateTimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    from: jsonP.serializeDate_unixTimestamp(input["from"]),
    to: jsonP.serializeDate_unixTimestamp(input["to"]),
  }
}

// refs: 3 - tags: input, named, enum, output
export type entityStatusCode =
| "IMPAIRED"
| "UNIMPAIRED"
| "UNKNOWN"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface
export interface EventAccountFilter {
  eventArn: string;
  awsAccountId?: string | null;
}
function fromEventAccountFilter(input?: EventAccountFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventArn: input["eventArn"],
    awsAccountId: input["awsAccountId"],
  }
}

// refs: 2 - tags: input, named, interface
export interface EventFilter {
  eventArns?: string[] | null;
  eventTypeCodes?: string[] | null;
  services?: string[] | null;
  regions?: string[] | null;
  availabilityZones?: string[] | null;
  startTimes?: DateTimeRange[] | null;
  endTimes?: DateTimeRange[] | null;
  lastUpdatedTimes?: DateTimeRange[] | null;
  entityArns?: string[] | null;
  entityValues?: string[] | null;
  eventTypeCategories?: eventTypeCategory[] | null;
  tags?: ({ [key: string]: string | null | undefined })[] | null;
  eventStatusCodes?: eventStatusCode[] | null;
}
function fromEventFilter(input?: EventFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventArns: input["eventArns"],
    eventTypeCodes: input["eventTypeCodes"],
    services: input["services"],
    regions: input["regions"],
    availabilityZones: input["availabilityZones"],
    startTimes: input["startTimes"]?.map(x => fromDateTimeRange(x)),
    endTimes: input["endTimes"]?.map(x => fromDateTimeRange(x)),
    lastUpdatedTimes: input["lastUpdatedTimes"]?.map(x => fromDateTimeRange(x)),
    entityArns: input["entityArns"],
    entityValues: input["entityValues"],
    eventTypeCategories: input["eventTypeCategories"],
    tags: input["tags"],
    eventStatusCodes: input["eventStatusCodes"],
  }
}

// refs: 9 - tags: input, named, enum, output
export type eventTypeCategory =
| "issue"
| "accountNotification"
| "scheduledChange"
| "investigation"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type eventStatusCode =
| "open"
| "closed"
| "upcoming"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type eventAggregateField =
| "eventTypeCategory"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface EventTypeFilter {
  eventTypeCodes?: string[] | null;
  services?: string[] | null;
  eventTypeCategories?: eventTypeCategory[] | null;
}
function fromEventTypeFilter(input?: EventTypeFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventTypeCodes: input["eventTypeCodes"],
    services: input["services"],
    eventTypeCategories: input["eventTypeCategories"],
  }
}

// refs: 1 - tags: input, named, interface
export interface OrganizationEventFilter {
  eventTypeCodes?: string[] | null;
  awsAccountIds?: string[] | null;
  services?: string[] | null;
  regions?: string[] | null;
  startTime?: DateTimeRange | null;
  endTime?: DateTimeRange | null;
  lastUpdatedTime?: DateTimeRange | null;
  entityArns?: string[] | null;
  entityValues?: string[] | null;
  eventTypeCategories?: eventTypeCategory[] | null;
  eventStatusCodes?: eventStatusCode[] | null;
}
function fromOrganizationEventFilter(input?: OrganizationEventFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventTypeCodes: input["eventTypeCodes"],
    awsAccountIds: input["awsAccountIds"],
    services: input["services"],
    regions: input["regions"],
    startTime: fromDateTimeRange(input["startTime"]),
    endTime: fromDateTimeRange(input["endTime"]),
    lastUpdatedTime: fromDateTimeRange(input["lastUpdatedTime"]),
    entityArns: input["entityArns"],
    entityValues: input["entityValues"],
    eventTypeCategories: input["eventTypeCategories"],
    eventStatusCodes: input["eventStatusCodes"],
  }
}

// refs: 5 - tags: output, named, enum
export type eventScopeCode =
| "PUBLIC"
| "ACCOUNT_SPECIFIC"
| "NONE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface AffectedEntity {
  entityArn?: string | null;
  eventArn?: string | null;
  entityValue?: string | null;
  entityUrl?: string | null;
  awsAccountId?: string | null;
  lastUpdatedTime?: Date | number | null;
  statusCode?: entityStatusCode | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toAffectedEntity(root: jsonP.JSONValue): AffectedEntity {
  return jsonP.readObj({
    required: {},
    optional: {
      "entityArn": "s",
      "eventArn": "s",
      "entityValue": "s",
      "entityUrl": "s",
      "awsAccountId": "s",
      "lastUpdatedTime": "d",
      "statusCode": (x: jsonP.JSONValue) => cmnP.readEnum<entityStatusCode>(x),
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationAffectedEntitiesErrorItem {
  awsAccountId?: string | null;
  eventArn?: string | null;
  errorName?: string | null;
  errorMessage?: string | null;
}
function toOrganizationAffectedEntitiesErrorItem(root: jsonP.JSONValue): OrganizationAffectedEntitiesErrorItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsAccountId": "s",
      "eventArn": "s",
      "errorName": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EntityAggregate {
  eventArn?: string | null;
  count?: number | null;
}
function toEntityAggregate(root: jsonP.JSONValue): EntityAggregate {
  return jsonP.readObj({
    required: {},
    optional: {
      "eventArn": "s",
      "count": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventAggregate {
  aggregateValue?: string | null;
  count?: number | null;
}
function toEventAggregate(root: jsonP.JSONValue): EventAggregate {
  return jsonP.readObj({
    required: {},
    optional: {
      "aggregateValue": "s",
      "count": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventDetails {
  event?: Event | null;
  eventDescription?: EventDescription | null;
  eventMetadata?: { [key: string]: string | null | undefined } | null;
}
function toEventDetails(root: jsonP.JSONValue): EventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "event": toEvent,
      "eventDescription": toEventDescription,
      "eventMetadata": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Event {
  arn?: string | null;
  service?: string | null;
  eventTypeCode?: string | null;
  eventTypeCategory?: eventTypeCategory | null;
  region?: string | null;
  availabilityZone?: string | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
  statusCode?: eventStatusCode | null;
  eventScopeCode?: eventScopeCode | null;
}
function toEvent(root: jsonP.JSONValue): Event {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "service": "s",
      "eventTypeCode": "s",
      "eventTypeCategory": (x: jsonP.JSONValue) => cmnP.readEnum<eventTypeCategory>(x),
      "region": "s",
      "availabilityZone": "s",
      "startTime": "d",
      "endTime": "d",
      "lastUpdatedTime": "d",
      "statusCode": (x: jsonP.JSONValue) => cmnP.readEnum<eventStatusCode>(x),
      "eventScopeCode": (x: jsonP.JSONValue) => cmnP.readEnum<eventScopeCode>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EventDescription {
  latestDescription?: string | null;
}
function toEventDescription(root: jsonP.JSONValue): EventDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "latestDescription": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventDetailsErrorItem {
  eventArn?: string | null;
  errorName?: string | null;
  errorMessage?: string | null;
}
function toEventDetailsErrorItem(root: jsonP.JSONValue): EventDetailsErrorItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "eventArn": "s",
      "errorName": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationEventDetails {
  awsAccountId?: string | null;
  event?: Event | null;
  eventDescription?: EventDescription | null;
  eventMetadata?: { [key: string]: string | null | undefined } | null;
}
function toOrganizationEventDetails(root: jsonP.JSONValue): OrganizationEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsAccountId": "s",
      "event": toEvent,
      "eventDescription": toEventDescription,
      "eventMetadata": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationEventDetailsErrorItem {
  awsAccountId?: string | null;
  eventArn?: string | null;
  errorName?: string | null;
  errorMessage?: string | null;
}
function toOrganizationEventDetailsErrorItem(root: jsonP.JSONValue): OrganizationEventDetailsErrorItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsAccountId": "s",
      "eventArn": "s",
      "errorName": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventType {
  service?: string | null;
  code?: string | null;
  category?: eventTypeCategory | null;
}
function toEventType(root: jsonP.JSONValue): EventType {
  return jsonP.readObj({
    required: {},
    optional: {
      "service": "s",
      "code": "s",
      "category": (x: jsonP.JSONValue) => cmnP.readEnum<eventTypeCategory>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OrganizationEvent {
  arn?: string | null;
  service?: string | null;
  eventTypeCode?: string | null;
  eventTypeCategory?: eventTypeCategory | null;
  eventScopeCode?: eventScopeCode | null;
  region?: string | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  lastUpdatedTime?: Date | number | null;
  statusCode?: eventStatusCode | null;
}
function toOrganizationEvent(root: jsonP.JSONValue): OrganizationEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "service": "s",
      "eventTypeCode": "s",
      "eventTypeCategory": (x: jsonP.JSONValue) => cmnP.readEnum<eventTypeCategory>(x),
      "eventScopeCode": (x: jsonP.JSONValue) => cmnP.readEnum<eventScopeCode>(x),
      "region": "s",
      "startTime": "d",
      "endTime": "d",
      "lastUpdatedTime": "d",
      "statusCode": (x: jsonP.JSONValue) => cmnP.readEnum<eventStatusCode>(x),
    },
  }, root);
}
