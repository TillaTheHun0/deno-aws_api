// Autogenerated API client for: Amazon HealthLake

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class HealthLake {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(HealthLake.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-07-01",
    "endpointPrefix": "healthlake",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "HealthLake",
    "serviceFullName": "Amazon HealthLake",
    "serviceId": "HealthLake",
    "signatureVersion": "v4",
    "signingName": "healthlake",
    "targetPrefix": "HealthLake",
    "uid": "healthlake-2017-07-01"
  };

  async createFHIRDatastore(
    {abortSignal, ...params}: RequestConfig & CreateFHIRDatastoreRequest,
  ): Promise<CreateFHIRDatastoreResponse> {
    const body: jsonP.JSONObject = {
      DatastoreName: params["DatastoreName"],
      DatastoreTypeVersion: params["DatastoreTypeVersion"],
      PreloadDataConfig: fromPreloadDataConfig(params["PreloadDataConfig"]),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFHIRDatastore",
    });
    return jsonP.readObj({
      required: {
        "DatastoreId": "s",
        "DatastoreArn": "s",
        "DatastoreStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DatastoreStatus>(x),
        "DatastoreEndpoint": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteFHIRDatastore(
    {abortSignal, ...params}: RequestConfig & DeleteFHIRDatastoreRequest = {},
  ): Promise<DeleteFHIRDatastoreResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFHIRDatastore",
    });
    return jsonP.readObj({
      required: {
        "DatastoreId": "s",
        "DatastoreArn": "s",
        "DatastoreStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DatastoreStatus>(x),
        "DatastoreEndpoint": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async describeFHIRDatastore(
    {abortSignal, ...params}: RequestConfig & DescribeFHIRDatastoreRequest = {},
  ): Promise<DescribeFHIRDatastoreResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFHIRDatastore",
    });
    return jsonP.readObj({
      required: {
        "DatastoreProperties": toDatastoreProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async describeFHIRExportJob(
    {abortSignal, ...params}: RequestConfig & DescribeFHIRExportJobRequest,
  ): Promise<DescribeFHIRExportJobResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFHIRExportJob",
    });
    return jsonP.readObj({
      required: {
        "ExportJobProperties": toExportJobProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async describeFHIRImportJob(
    {abortSignal, ...params}: RequestConfig & DescribeFHIRImportJobRequest,
  ): Promise<DescribeFHIRImportJobResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFHIRImportJob",
    });
    return jsonP.readObj({
      required: {
        "ImportJobProperties": toImportJobProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async listFHIRDatastores(
    {abortSignal, ...params}: RequestConfig & ListFHIRDatastoresRequest = {},
  ): Promise<ListFHIRDatastoresResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromDatastoreFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFHIRDatastores",
    });
    return jsonP.readObj({
      required: {
        "DatastorePropertiesList": [toDatastoreProperties],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startFHIRExportJob(
    {abortSignal, ...params}: RequestConfig & StartFHIRExportJobRequest,
  ): Promise<StartFHIRExportJobResponse> {
    const body: jsonP.JSONObject = {
      JobName: params["JobName"],
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DatastoreId: params["DatastoreId"],
      DataAccessRoleArn: params["DataAccessRoleArn"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartFHIRExportJob",
    });
    return jsonP.readObj({
      required: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
      optional: {
        "DatastoreId": "s",
      },
    }, await resp.json());
  }

  async startFHIRImportJob(
    {abortSignal, ...params}: RequestConfig & StartFHIRImportJobRequest,
  ): Promise<StartFHIRImportJobResponse> {
    const body: jsonP.JSONObject = {
      JobName: params["JobName"],
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      DatastoreId: params["DatastoreId"],
      DataAccessRoleArn: params["DataAccessRoleArn"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartFHIRImportJob",
    });
    return jsonP.readObj({
      required: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      },
      optional: {
        "DatastoreId": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateFHIRDatastoreRequest {
  DatastoreName?: string | null;
  DatastoreTypeVersion: FHIRVersion;
  PreloadDataConfig?: PreloadDataConfig | null;
  ClientToken?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteFHIRDatastoreRequest {
  DatastoreId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFHIRDatastoreRequest {
  DatastoreId?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeFHIRExportJobRequest {
  DatastoreId: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeFHIRImportJobRequest {
  DatastoreId: string;
  JobId: string;
}

// refs: 1 - tags: named, input
export interface ListFHIRDatastoresRequest {
  Filter?: DatastoreFilter | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface StartFHIRExportJobRequest {
  JobName?: string | null;
  OutputDataConfig: OutputDataConfig;
  DatastoreId: string;
  DataAccessRoleArn: string;
  ClientToken: string;
}

// refs: 1 - tags: named, input
export interface StartFHIRImportJobRequest {
  JobName?: string | null;
  InputDataConfig: InputDataConfig;
  DatastoreId: string;
  DataAccessRoleArn: string;
  ClientToken: string;
}

// refs: 1 - tags: named, output
export interface CreateFHIRDatastoreResponse {
  DatastoreId: string;
  DatastoreArn: string;
  DatastoreStatus: DatastoreStatus;
  DatastoreEndpoint: string;
}

// refs: 1 - tags: named, output
export interface DeleteFHIRDatastoreResponse {
  DatastoreId: string;
  DatastoreArn: string;
  DatastoreStatus: DatastoreStatus;
  DatastoreEndpoint: string;
}

// refs: 1 - tags: named, output
export interface DescribeFHIRDatastoreResponse {
  DatastoreProperties: DatastoreProperties;
}

// refs: 1 - tags: named, output
export interface DescribeFHIRExportJobResponse {
  ExportJobProperties: ExportJobProperties;
}

// refs: 1 - tags: named, output
export interface DescribeFHIRImportJobResponse {
  ImportJobProperties: ImportJobProperties;
}

// refs: 1 - tags: named, output
export interface ListFHIRDatastoresResponse {
  DatastorePropertiesList: DatastoreProperties[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartFHIRExportJobResponse {
  JobId: string;
  JobStatus: JobStatus;
  DatastoreId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartFHIRImportJobResponse {
  JobId: string;
  JobStatus: JobStatus;
  DatastoreId?: string | null;
}

// refs: 3 - tags: input, named, enum, output
export type FHIRVersion =
| "R4"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface PreloadDataConfig {
  PreloadDataType: PreloadDataType;
}
function fromPreloadDataConfig(input?: PreloadDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PreloadDataType: input["PreloadDataType"],
  }
}
function toPreloadDataConfig(root: jsonP.JSONValue): PreloadDataConfig {
  return jsonP.readObj({
    required: {
      "PreloadDataType": (x: jsonP.JSONValue) => cmnP.readEnum<PreloadDataType>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type PreloadDataType =
| "SYNTHEA"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface DatastoreFilter {
  DatastoreName?: string | null;
  DatastoreStatus?: DatastoreStatus | null;
  CreatedBefore?: Date | number | null;
  CreatedAfter?: Date | number | null;
}
function fromDatastoreFilter(input?: DatastoreFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DatastoreName: input["DatastoreName"],
    DatastoreStatus: input["DatastoreStatus"],
    CreatedBefore: jsonP.serializeDate_unixTimestamp(input["CreatedBefore"]),
    CreatedAfter: jsonP.serializeDate_unixTimestamp(input["CreatedAfter"]),
  }
}

// refs: 5 - tags: input, named, enum, output
export type DatastoreStatus =
| "CREATING"
| "ACTIVE"
| "DELETING"
| "DELETED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface OutputDataConfig {
  S3Uri?: string | null;
}
function fromOutputDataConfig(input?: OutputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
  }
}
function toOutputDataConfig(root: jsonP.JSONValue): OutputDataConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Uri": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface InputDataConfig {
  S3Uri?: string | null;
}
function fromInputDataConfig(input?: InputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
  }
}
function toInputDataConfig(root: jsonP.JSONValue): InputDataConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Uri": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface DatastoreProperties {
  DatastoreId: string;
  DatastoreArn: string;
  DatastoreName?: string | null;
  DatastoreStatus: DatastoreStatus;
  CreatedAt?: Date | number | null;
  DatastoreTypeVersion: FHIRVersion;
  DatastoreEndpoint: string;
  PreloadDataConfig?: PreloadDataConfig | null;
}
function toDatastoreProperties(root: jsonP.JSONValue): DatastoreProperties {
  return jsonP.readObj({
    required: {
      "DatastoreId": "s",
      "DatastoreArn": "s",
      "DatastoreStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DatastoreStatus>(x),
      "DatastoreTypeVersion": (x: jsonP.JSONValue) => cmnP.readEnum<FHIRVersion>(x),
      "DatastoreEndpoint": "s",
    },
    optional: {
      "DatastoreName": "s",
      "CreatedAt": "d",
      "PreloadDataConfig": toPreloadDataConfig,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExportJobProperties {
  JobId: string;
  JobName?: string | null;
  JobStatus: JobStatus;
  SubmitTime: Date | number;
  EndTime?: Date | number | null;
  DatastoreId: string;
  OutputDataConfig: OutputDataConfig;
  DataAccessRoleArn?: string | null;
  Message?: string | null;
}
function toExportJobProperties(root: jsonP.JSONValue): ExportJobProperties {
  return jsonP.readObj({
    required: {
      "JobId": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "SubmitTime": "d",
      "DatastoreId": "s",
      "OutputDataConfig": toOutputDataConfig,
    },
    optional: {
      "JobName": "s",
      "EndTime": "d",
      "DataAccessRoleArn": "s",
      "Message": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type JobStatus =
| "SUBMITTED"
| "IN_PROGRESS"
| "COMPLETED"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ImportJobProperties {
  JobId: string;
  JobName?: string | null;
  JobStatus: JobStatus;
  SubmitTime: Date | number;
  EndTime?: Date | number | null;
  DatastoreId: string;
  InputDataConfig: InputDataConfig;
  DataAccessRoleArn?: string | null;
  Message?: string | null;
}
function toImportJobProperties(root: jsonP.JSONValue): ImportJobProperties {
  return jsonP.readObj({
    required: {
      "JobId": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "SubmitTime": "d",
      "DatastoreId": "s",
      "InputDataConfig": toInputDataConfig,
    },
    optional: {
      "JobName": "s",
      "EndTime": "d",
      "DataAccessRoleArn": "s",
      "Message": "s",
    },
  }, root);
}
