// Autogenerated API client for: Amazon HealthLake

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.86.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class HealthLake {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(HealthLake.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-07-01",
    "endpointPrefix": "healthlake",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "HealthLake",
    "serviceFullName": "Amazon HealthLake",
    "serviceId": "HealthLake",
    "signatureVersion": "v4",
    "signingName": "healthlake",
    "targetPrefix": "HealthLake",
    "uid": "healthlake-2017-07-01"
  };

  async createFHIRDatastore(
    {abortSignal, ...params}: RequestConfig & s.CreateFHIRDatastoreRequest,
  ): Promise<s.CreateFHIRDatastoreResponse> {
    const body: jsonP.JSONObject = {
      DatastoreName: params["DatastoreName"],
      DatastoreTypeVersion: params["DatastoreTypeVersion"],
      PreloadDataConfig: fromPreloadDataConfig(params["PreloadDataConfig"]),
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateFHIRDatastore",
    });
    return jsonP.readObj({
      required: {
        "DatastoreId": "s",
        "DatastoreArn": "s",
        "DatastoreStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DatastoreStatus>(x),
        "DatastoreEndpoint": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteFHIRDatastore(
    {abortSignal, ...params}: RequestConfig & s.DeleteFHIRDatastoreRequest = {},
  ): Promise<s.DeleteFHIRDatastoreResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteFHIRDatastore",
    });
    return jsonP.readObj({
      required: {
        "DatastoreId": "s",
        "DatastoreArn": "s",
        "DatastoreStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DatastoreStatus>(x),
        "DatastoreEndpoint": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async describeFHIRDatastore(
    {abortSignal, ...params}: RequestConfig & s.DescribeFHIRDatastoreRequest = {},
  ): Promise<s.DescribeFHIRDatastoreResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFHIRDatastore",
    });
    return jsonP.readObj({
      required: {
        "DatastoreProperties": toDatastoreProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async describeFHIRExportJob(
    {abortSignal, ...params}: RequestConfig & s.DescribeFHIRExportJobRequest,
  ): Promise<s.DescribeFHIRExportJobResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFHIRExportJob",
    });
    return jsonP.readObj({
      required: {
        "ExportJobProperties": toExportJobProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async describeFHIRImportJob(
    {abortSignal, ...params}: RequestConfig & s.DescribeFHIRImportJobRequest,
  ): Promise<s.DescribeFHIRImportJobResponse> {
    const body: jsonP.JSONObject = {
      DatastoreId: params["DatastoreId"],
      JobId: params["JobId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeFHIRImportJob",
    });
    return jsonP.readObj({
      required: {
        "ImportJobProperties": toImportJobProperties,
      },
      optional: {},
    }, await resp.json());
  }

  async listFHIRDatastores(
    {abortSignal, ...params}: RequestConfig & s.ListFHIRDatastoresRequest = {},
  ): Promise<s.ListFHIRDatastoresResponse> {
    const body: jsonP.JSONObject = {
      Filter: fromDatastoreFilter(params["Filter"]),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFHIRDatastores",
    });
    return jsonP.readObj({
      required: {
        "DatastorePropertiesList": [toDatastoreProperties],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startFHIRExportJob(
    {abortSignal, ...params}: RequestConfig & s.StartFHIRExportJobRequest,
  ): Promise<s.StartFHIRExportJobResponse> {
    const body: jsonP.JSONObject = {
      JobName: params["JobName"],
      OutputDataConfig: fromOutputDataConfig(params["OutputDataConfig"]),
      DatastoreId: params["DatastoreId"],
      DataAccessRoleArn: params["DataAccessRoleArn"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartFHIRExportJob",
    });
    return jsonP.readObj({
      required: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
      },
      optional: {
        "DatastoreId": "s",
      },
    }, await resp.json());
  }

  async startFHIRImportJob(
    {abortSignal, ...params}: RequestConfig & s.StartFHIRImportJobRequest,
  ): Promise<s.StartFHIRImportJobResponse> {
    const body: jsonP.JSONObject = {
      JobName: params["JobName"],
      InputDataConfig: fromInputDataConfig(params["InputDataConfig"]),
      DatastoreId: params["DatastoreId"],
      DataAccessRoleArn: params["DataAccessRoleArn"],
      ClientToken: params["ClientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartFHIRImportJob",
    });
    return jsonP.readObj({
      required: {
        "JobId": "s",
        "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
      },
      optional: {
        "DatastoreId": "s",
      },
    }, await resp.json());
  }

}

function fromPreloadDataConfig(input?: s.PreloadDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PreloadDataType: input["PreloadDataType"],
  }
}
function toPreloadDataConfig(root: jsonP.JSONValue): s.PreloadDataConfig {
  return jsonP.readObj({
    required: {
      "PreloadDataType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PreloadDataType>(x),
    },
    optional: {},
  }, root);
}

function fromDatastoreFilter(input?: s.DatastoreFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DatastoreName: input["DatastoreName"],
    DatastoreStatus: input["DatastoreStatus"],
    CreatedBefore: jsonP.serializeDate_unixTimestamp(input["CreatedBefore"]),
    CreatedAfter: jsonP.serializeDate_unixTimestamp(input["CreatedAfter"]),
  }
}

function fromOutputDataConfig(input?: s.OutputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
  }
}
function toOutputDataConfig(root: jsonP.JSONValue): s.OutputDataConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Uri": "s",
    },
  }, root);
}

function fromInputDataConfig(input?: s.InputDataConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    S3Uri: input["S3Uri"],
  }
}
function toInputDataConfig(root: jsonP.JSONValue): s.InputDataConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "S3Uri": "s",
    },
  }, root);
}

function toDatastoreProperties(root: jsonP.JSONValue): s.DatastoreProperties {
  return jsonP.readObj({
    required: {
      "DatastoreId": "s",
      "DatastoreArn": "s",
      "DatastoreStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.DatastoreStatus>(x),
      "DatastoreTypeVersion": (x: jsonP.JSONValue) => cmnP.readEnum<s.FHIRVersion>(x),
      "DatastoreEndpoint": "s",
    },
    optional: {
      "DatastoreName": "s",
      "CreatedAt": "d",
      "PreloadDataConfig": toPreloadDataConfig,
    },
  }, root);
}

function toExportJobProperties(root: jsonP.JSONValue): s.ExportJobProperties {
  return jsonP.readObj({
    required: {
      "JobId": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
      "SubmitTime": "d",
      "DatastoreId": "s",
      "OutputDataConfig": toOutputDataConfig,
    },
    optional: {
      "JobName": "s",
      "EndTime": "d",
      "DataAccessRoleArn": "s",
      "Message": "s",
    },
  }, root);
}

function toImportJobProperties(root: jsonP.JSONValue): s.ImportJobProperties {
  return jsonP.readObj({
    required: {
      "JobId": "s",
      "JobStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.JobStatus>(x),
      "SubmitTime": "d",
      "DatastoreId": "s",
      "InputDataConfig": toInputDataConfig,
    },
    optional: {
      "JobName": "s",
      "EndTime": "d",
      "DataAccessRoleArn": "s",
      "Message": "s",
    },
  }, root);
}
