// Autogenerated API client for: AWS Service Catalog App Registry

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.91.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class ServiceCatalogAppRegistry {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ServiceCatalogAppRegistry.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-06-24",
    "endpointPrefix": "servicecatalog-appregistry",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "AppRegistry",
    "serviceFullName": "AWS Service Catalog App Registry",
    "serviceId": "Service Catalog AppRegistry",
    "signatureVersion": "v4",
    "signingName": "servicecatalog",
    "uid": "AWS242AppRegistry-2020-06-24"
  };

  async associateAttributeGroup(
    {abortSignal, ...params}: RequestConfig & s.AssociateAttributeGroupRequest,
  ): Promise<s.AssociateAttributeGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "AssociateAttributeGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/applications/${params["application"]}/attribute-groups/${params["attributeGroup"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "applicationArn": "s",
        "attributeGroupArn": "s",
      },
    }, await resp.json());
  }

  async associateResource(
    {abortSignal, ...params}: RequestConfig & s.AssociateResourceRequest,
  ): Promise<s.AssociateResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "AssociateResource",
      method: "PUT",
      requestUri: cmnP.encodePath`/applications/${params["application"]}/resources/${params["resourceType"]}/${params["resource"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "applicationArn": "s",
        "resourceArn": "s",
      },
    }, await resp.json());
  }

  async createApplication(
    {abortSignal, ...params}: RequestConfig & s.CreateApplicationRequest,
  ): Promise<s.CreateApplicationResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateApplication",
      requestUri: "/applications",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "application": toApplication,
      },
    }, await resp.json());
  }

  async createAttributeGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateAttributeGroupRequest,
  ): Promise<s.CreateAttributeGroupResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      attributes: params["attributes"],
      tags: params["tags"],
      clientToken: params["clientToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAttributeGroup",
      requestUri: "/attribute-groups",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "attributeGroup": toAttributeGroup,
      },
    }, await resp.json());
  }

  async deleteApplication(
    {abortSignal, ...params}: RequestConfig & s.DeleteApplicationRequest,
  ): Promise<s.DeleteApplicationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteApplication",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["application"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "application": toApplicationSummary,
      },
    }, await resp.json());
  }

  async deleteAttributeGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteAttributeGroupRequest,
  ): Promise<s.DeleteAttributeGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAttributeGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/attribute-groups/${params["attributeGroup"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "attributeGroup": toAttributeGroupSummary,
      },
    }, await resp.json());
  }

  async disassociateAttributeGroup(
    {abortSignal, ...params}: RequestConfig & s.DisassociateAttributeGroupRequest,
  ): Promise<s.DisassociateAttributeGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateAttributeGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["application"]}/attribute-groups/${params["attributeGroup"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "applicationArn": "s",
        "attributeGroupArn": "s",
      },
    }, await resp.json());
  }

  async disassociateResource(
    {abortSignal, ...params}: RequestConfig & s.DisassociateResourceRequest,
  ): Promise<s.DisassociateResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociateResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/applications/${params["application"]}/resources/${params["resourceType"]}/${params["resource"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "applicationArn": "s",
        "resourceArn": "s",
      },
    }, await resp.json());
  }

  async getApplication(
    {abortSignal, ...params}: RequestConfig & s.GetApplicationRequest,
  ): Promise<s.GetApplicationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetApplication",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["application"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "id": "s",
        "arn": "s",
        "name": "s",
        "description": "s",
        "creationTime": "d",
        "lastUpdateTime": "d",
        "associatedResourceCount": "n",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getAttributeGroup(
    {abortSignal, ...params}: RequestConfig & s.GetAttributeGroupRequest,
  ): Promise<s.GetAttributeGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAttributeGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/attribute-groups/${params["attributeGroup"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "id": "s",
        "arn": "s",
        "name": "s",
        "description": "s",
        "attributes": "s",
        "creationTime": "d",
        "lastUpdateTime": "d",
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listApplications(
    {abortSignal, ...params}: RequestConfig & s.ListApplicationsRequest = {},
  ): Promise<s.ListApplicationsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListApplications",
      method: "GET",
      requestUri: "/applications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "applications": [toApplicationSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssociatedAttributeGroups(
    {abortSignal, ...params}: RequestConfig & s.ListAssociatedAttributeGroupsRequest,
  ): Promise<s.ListAssociatedAttributeGroupsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssociatedAttributeGroups",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["application"]}/attribute-groups`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "attributeGroups": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssociatedResources(
    {abortSignal, ...params}: RequestConfig & s.ListAssociatedResourcesRequest,
  ): Promise<s.ListAssociatedResourcesResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssociatedResources",
      method: "GET",
      requestUri: cmnP.encodePath`/applications/${params["application"]}/resources`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "resources": [toResourceInfo],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAttributeGroups(
    {abortSignal, ...params}: RequestConfig & s.ListAttributeGroupsRequest = {},
  ): Promise<s.ListAttributeGroupsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAttributeGroups",
      method: "GET",
      requestUri: "/attribute-groups",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "attributeGroups": [toAttributeGroupSummary],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async syncResource(
    {abortSignal, ...params}: RequestConfig & s.SyncResourceRequest,
  ): Promise<s.SyncResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "SyncResource",
      requestUri: cmnP.encodePath`/sync/${params["resourceType"]}/${params["resource"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "applicationArn": "s",
        "resourceArn": "s",
        "actionTaken": (x: jsonP.JSONValue) => cmnP.readEnum<s.SyncAction>(x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateApplication(
    {abortSignal, ...params}: RequestConfig & s.UpdateApplicationRequest,
  ): Promise<s.UpdateApplicationResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateApplication",
      method: "PATCH",
      requestUri: cmnP.encodePath`/applications/${params["application"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "application": toApplication,
      },
    }, await resp.json());
  }

  async updateAttributeGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateAttributeGroupRequest,
  ): Promise<s.UpdateAttributeGroupResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      attributes: params["attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAttributeGroup",
      method: "PATCH",
      requestUri: cmnP.encodePath`/attribute-groups/${params["attributeGroup"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "attributeGroup": toAttributeGroup,
      },
    }, await resp.json());
  }

}

function toApplication(root: jsonP.JSONValue): s.Application {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "description": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toAttributeGroup(root: jsonP.JSONValue): s.AttributeGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "description": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toApplicationSummary(root: jsonP.JSONValue): s.ApplicationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "description": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
    },
  }, root);
}

function toAttributeGroupSummary(root: jsonP.JSONValue): s.AttributeGroupSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "name": "s",
      "description": "s",
      "creationTime": "d",
      "lastUpdateTime": "d",
    },
  }, root);
}

function toResourceInfo(root: jsonP.JSONValue): s.ResourceInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "arn": "s",
    },
  }, root);
}
