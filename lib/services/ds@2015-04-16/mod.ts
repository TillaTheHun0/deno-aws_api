// Autogenerated API client for: AWS Directory Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class DirectoryService {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DirectoryService.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-04-16",
    "endpointPrefix": "ds",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Directory Service",
    "serviceFullName": "AWS Directory Service",
    "serviceId": "Directory Service",
    "signatureVersion": "v4",
    "targetPrefix": "DirectoryService_20150416",
    "uid": "ds-2015-04-16"
  };

  async acceptSharedDirectory(
    {abortSignal, ...params}: RequestConfig & AcceptSharedDirectoryRequest,
  ): Promise<AcceptSharedDirectoryResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptSharedDirectory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SharedDirectory": toSharedDirectory,
      },
    }, await resp.json());
  }

  async addIpRoutes(
    {abortSignal, ...params}: RequestConfig & AddIpRoutesRequest,
  ): Promise<AddIpRoutesResult> {
    const body: JSONObject = {...params,
    IpRoutes: params["IpRoutes"]?.map(x => fromIpRoute(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddIpRoutes",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async addTagsToResource(
    {abortSignal, ...params}: RequestConfig & AddTagsToResourceRequest,
  ): Promise<AddTagsToResourceResult> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddTagsToResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async cancelSchemaExtension(
    {abortSignal, ...params}: RequestConfig & CancelSchemaExtensionRequest,
  ): Promise<CancelSchemaExtensionResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelSchemaExtension",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async connectDirectory(
    {abortSignal, ...params}: RequestConfig & ConnectDirectoryRequest,
  ): Promise<ConnectDirectoryResult> {
    const body: JSONObject = {...params,
    ConnectSettings: fromDirectoryConnectSettings(params["ConnectSettings"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConnectDirectory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DirectoryId": "s",
      },
    }, await resp.json());
  }

  async createAlias(
    {abortSignal, ...params}: RequestConfig & CreateAliasRequest,
  ): Promise<CreateAliasResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAlias",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DirectoryId": "s",
        "Alias": "s",
      },
    }, await resp.json());
  }

  async createComputer(
    {abortSignal, ...params}: RequestConfig & CreateComputerRequest,
  ): Promise<CreateComputerResult> {
    const body: JSONObject = {...params,
    ComputerAttributes: params["ComputerAttributes"]?.map(x => fromAttribute(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateComputer",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Computer": toComputer,
      },
    }, await resp.json());
  }

  async createConditionalForwarder(
    {abortSignal, ...params}: RequestConfig & CreateConditionalForwarderRequest,
  ): Promise<CreateConditionalForwarderResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateConditionalForwarder",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createDirectory(
    {abortSignal, ...params}: RequestConfig & CreateDirectoryRequest,
  ): Promise<CreateDirectoryResult> {
    const body: JSONObject = {...params,
    VpcSettings: fromDirectoryVpcSettings(params["VpcSettings"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDirectory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DirectoryId": "s",
      },
    }, await resp.json());
  }

  async createLogSubscription(
    {abortSignal, ...params}: RequestConfig & CreateLogSubscriptionRequest,
  ): Promise<CreateLogSubscriptionResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLogSubscription",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createMicrosoftAD(
    {abortSignal, ...params}: RequestConfig & CreateMicrosoftADRequest,
  ): Promise<CreateMicrosoftADResult> {
    const body: JSONObject = {...params,
    VpcSettings: fromDirectoryVpcSettings(params["VpcSettings"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMicrosoftAD",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DirectoryId": "s",
      },
    }, await resp.json());
  }

  async createSnapshot(
    {abortSignal, ...params}: RequestConfig & CreateSnapshotRequest,
  ): Promise<CreateSnapshotResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSnapshot",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SnapshotId": "s",
      },
    }, await resp.json());
  }

  async createTrust(
    {abortSignal, ...params}: RequestConfig & CreateTrustRequest,
  ): Promise<CreateTrustResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTrust",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TrustId": "s",
      },
    }, await resp.json());
  }

  async deleteConditionalForwarder(
    {abortSignal, ...params}: RequestConfig & DeleteConditionalForwarderRequest,
  ): Promise<DeleteConditionalForwarderResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteConditionalForwarder",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDirectory(
    {abortSignal, ...params}: RequestConfig & DeleteDirectoryRequest,
  ): Promise<DeleteDirectoryResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDirectory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DirectoryId": "s",
      },
    }, await resp.json());
  }

  async deleteLogSubscription(
    {abortSignal, ...params}: RequestConfig & DeleteLogSubscriptionRequest,
  ): Promise<DeleteLogSubscriptionResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLogSubscription",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteSnapshot(
    {abortSignal, ...params}: RequestConfig & DeleteSnapshotRequest,
  ): Promise<DeleteSnapshotResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteSnapshot",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SnapshotId": "s",
      },
    }, await resp.json());
  }

  async deleteTrust(
    {abortSignal, ...params}: RequestConfig & DeleteTrustRequest,
  ): Promise<DeleteTrustResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTrust",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TrustId": "s",
      },
    }, await resp.json());
  }

  async deregisterCertificate(
    {abortSignal, ...params}: RequestConfig & DeregisterCertificateRequest,
  ): Promise<DeregisterCertificateResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterCertificate",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterEventTopic(
    {abortSignal, ...params}: RequestConfig & DeregisterEventTopicRequest,
  ): Promise<DeregisterEventTopicResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterEventTopic",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeCertificate(
    {abortSignal, ...params}: RequestConfig & DescribeCertificateRequest,
  ): Promise<DescribeCertificateResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCertificate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Certificate": toCertificate,
      },
    }, await resp.json());
  }

  async describeConditionalForwarders(
    {abortSignal, ...params}: RequestConfig & DescribeConditionalForwardersRequest,
  ): Promise<DescribeConditionalForwardersResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeConditionalForwarders",
    });
    return prt.readObj({
      required: {},
      optional: {
        "ConditionalForwarders": [toConditionalForwarder],
      },
    }, await resp.json());
  }

  async describeDirectories(
    {abortSignal, ...params}: RequestConfig & DescribeDirectoriesRequest = {},
  ): Promise<DescribeDirectoriesResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDirectories",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DirectoryDescriptions": [toDirectoryDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeDomainControllers(
    {abortSignal, ...params}: RequestConfig & DescribeDomainControllersRequest,
  ): Promise<DescribeDomainControllersResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDomainControllers",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DomainControllers": [toDomainController],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeEventTopics(
    {abortSignal, ...params}: RequestConfig & DescribeEventTopicsRequest = {},
  ): Promise<DescribeEventTopicsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEventTopics",
    });
    return prt.readObj({
      required: {},
      optional: {
        "EventTopics": [toEventTopic],
      },
    }, await resp.json());
  }

  async describeLDAPSSettings(
    {abortSignal, ...params}: RequestConfig & DescribeLDAPSSettingsRequest,
  ): Promise<DescribeLDAPSSettingsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLDAPSSettings",
    });
    return prt.readObj({
      required: {},
      optional: {
        "LDAPSSettingsInfo": [toLDAPSSettingInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeSharedDirectories(
    {abortSignal, ...params}: RequestConfig & DescribeSharedDirectoriesRequest,
  ): Promise<DescribeSharedDirectoriesResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSharedDirectories",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SharedDirectories": [toSharedDirectory],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeSnapshots(
    {abortSignal, ...params}: RequestConfig & DescribeSnapshotsRequest = {},
  ): Promise<DescribeSnapshotsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeSnapshots",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Snapshots": [toSnapshot],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeTrusts(
    {abortSignal, ...params}: RequestConfig & DescribeTrustsRequest = {},
  ): Promise<DescribeTrustsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTrusts",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Trusts": [toTrust],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async disableLDAPS(
    {abortSignal, ...params}: RequestConfig & DisableLDAPSRequest,
  ): Promise<DisableLDAPSResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableLDAPS",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disableRadius(
    {abortSignal, ...params}: RequestConfig & DisableRadiusRequest,
  ): Promise<DisableRadiusResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableRadius",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disableSso(
    {abortSignal, ...params}: RequestConfig & DisableSsoRequest,
  ): Promise<DisableSsoResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableSso",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableLDAPS(
    {abortSignal, ...params}: RequestConfig & EnableLDAPSRequest,
  ): Promise<EnableLDAPSResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableLDAPS",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableRadius(
    {abortSignal, ...params}: RequestConfig & EnableRadiusRequest,
  ): Promise<EnableRadiusResult> {
    const body: JSONObject = {...params,
    RadiusSettings: fromRadiusSettings(params["RadiusSettings"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableRadius",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableSso(
    {abortSignal, ...params}: RequestConfig & EnableSsoRequest,
  ): Promise<EnableSsoResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableSso",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getDirectoryLimits(
    {abortSignal, ...params}: RequestConfig & GetDirectoryLimitsRequest = {},
  ): Promise<GetDirectoryLimitsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDirectoryLimits",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DirectoryLimits": toDirectoryLimits,
      },
    }, await resp.json());
  }

  async getSnapshotLimits(
    {abortSignal, ...params}: RequestConfig & GetSnapshotLimitsRequest,
  ): Promise<GetSnapshotLimitsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetSnapshotLimits",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SnapshotLimits": toSnapshotLimits,
      },
    }, await resp.json());
  }

  async listCertificates(
    {abortSignal, ...params}: RequestConfig & ListCertificatesRequest,
  ): Promise<ListCertificatesResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCertificates",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "CertificatesInfo": [toCertificateInfo],
      },
    }, await resp.json());
  }

  async listIpRoutes(
    {abortSignal, ...params}: RequestConfig & ListIpRoutesRequest,
  ): Promise<ListIpRoutesResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIpRoutes",
    });
    return prt.readObj({
      required: {},
      optional: {
        "IpRoutesInfo": [toIpRouteInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLogSubscriptions(
    {abortSignal, ...params}: RequestConfig & ListLogSubscriptionsRequest = {},
  ): Promise<ListLogSubscriptionsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLogSubscriptions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "LogSubscriptions": [toLogSubscription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSchemaExtensions(
    {abortSignal, ...params}: RequestConfig & ListSchemaExtensionsRequest,
  ): Promise<ListSchemaExtensionsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListSchemaExtensions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SchemaExtensionsInfo": [toSchemaExtensionInfo],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async registerCertificate(
    {abortSignal, ...params}: RequestConfig & RegisterCertificateRequest,
  ): Promise<RegisterCertificateResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterCertificate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CertificateId": "s",
      },
    }, await resp.json());
  }

  async registerEventTopic(
    {abortSignal, ...params}: RequestConfig & RegisterEventTopicRequest,
  ): Promise<RegisterEventTopicResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterEventTopic",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async rejectSharedDirectory(
    {abortSignal, ...params}: RequestConfig & RejectSharedDirectoryRequest,
  ): Promise<RejectSharedDirectoryResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectSharedDirectory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SharedDirectoryId": "s",
      },
    }, await resp.json());
  }

  async removeIpRoutes(
    {abortSignal, ...params}: RequestConfig & RemoveIpRoutesRequest,
  ): Promise<RemoveIpRoutesResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveIpRoutes",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async removeTagsFromResource(
    {abortSignal, ...params}: RequestConfig & RemoveTagsFromResourceRequest,
  ): Promise<RemoveTagsFromResourceResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveTagsFromResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async resetUserPassword(
    {abortSignal, ...params}: RequestConfig & ResetUserPasswordRequest,
  ): Promise<ResetUserPasswordResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ResetUserPassword",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async restoreFromSnapshot(
    {abortSignal, ...params}: RequestConfig & RestoreFromSnapshotRequest,
  ): Promise<RestoreFromSnapshotResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreFromSnapshot",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async shareDirectory(
    {abortSignal, ...params}: RequestConfig & ShareDirectoryRequest,
  ): Promise<ShareDirectoryResult> {
    const body: JSONObject = {...params,
    ShareTarget: fromShareTarget(params["ShareTarget"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ShareDirectory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SharedDirectoryId": "s",
      },
    }, await resp.json());
  }

  async startSchemaExtension(
    {abortSignal, ...params}: RequestConfig & StartSchemaExtensionRequest,
  ): Promise<StartSchemaExtensionResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartSchemaExtension",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SchemaExtensionId": "s",
      },
    }, await resp.json());
  }

  async unshareDirectory(
    {abortSignal, ...params}: RequestConfig & UnshareDirectoryRequest,
  ): Promise<UnshareDirectoryResult> {
    const body: JSONObject = {...params,
    UnshareTarget: fromUnshareTarget(params["UnshareTarget"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnshareDirectory",
    });
    return prt.readObj({
      required: {},
      optional: {
        "SharedDirectoryId": "s",
      },
    }, await resp.json());
  }

  async updateConditionalForwarder(
    {abortSignal, ...params}: RequestConfig & UpdateConditionalForwarderRequest,
  ): Promise<UpdateConditionalForwarderResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateConditionalForwarder",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateNumberOfDomainControllers(
    {abortSignal, ...params}: RequestConfig & UpdateNumberOfDomainControllersRequest,
  ): Promise<UpdateNumberOfDomainControllersResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateNumberOfDomainControllers",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRadius(
    {abortSignal, ...params}: RequestConfig & UpdateRadiusRequest,
  ): Promise<UpdateRadiusResult> {
    const body: JSONObject = {...params,
    RadiusSettings: fromRadiusSettings(params["RadiusSettings"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRadius",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateTrust(
    {abortSignal, ...params}: RequestConfig & UpdateTrustRequest,
  ): Promise<UpdateTrustResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTrust",
    });
    return prt.readObj({
      required: {},
      optional: {
        "RequestId": "s",
        "TrustId": "s",
      },
    }, await resp.json());
  }

  async verifyTrust(
    {abortSignal, ...params}: RequestConfig & VerifyTrustRequest,
  ): Promise<VerifyTrustResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "VerifyTrust",
    });
    return prt.readObj({
      required: {},
      optional: {
        "TrustId": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AcceptSharedDirectoryRequest {
  SharedDirectoryId: string;
}

// refs: 1 - tags: named, input
export interface AddIpRoutesRequest {
  DirectoryId: string;
  IpRoutes: IpRoute[];
  UpdateSecurityGroupForDirectoryControllers?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AddTagsToResourceRequest {
  ResourceId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface CancelSchemaExtensionRequest {
  DirectoryId: string;
  SchemaExtensionId: string;
}

// refs: 1 - tags: named, input
export interface ConnectDirectoryRequest {
  Name: string;
  ShortName?: string | null;
  Password: string;
  Description?: string | null;
  Size: DirectorySize;
  ConnectSettings: DirectoryConnectSettings;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateAliasRequest {
  DirectoryId: string;
  Alias: string;
}

// refs: 1 - tags: named, input
export interface CreateComputerRequest {
  DirectoryId: string;
  ComputerName: string;
  Password: string;
  OrganizationalUnitDistinguishedName?: string | null;
  ComputerAttributes?: Attribute[] | null;
}

// refs: 1 - tags: named, input
export interface CreateConditionalForwarderRequest {
  DirectoryId: string;
  RemoteDomainName: string;
  DnsIpAddrs: string[];
}

// refs: 1 - tags: named, input
export interface CreateDirectoryRequest {
  Name: string;
  ShortName?: string | null;
  Password: string;
  Description?: string | null;
  Size: DirectorySize;
  VpcSettings?: DirectoryVpcSettings | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLogSubscriptionRequest {
  DirectoryId: string;
  LogGroupName: string;
}

// refs: 1 - tags: named, input
export interface CreateMicrosoftADRequest {
  Name: string;
  ShortName?: string | null;
  Password: string;
  Description?: string | null;
  VpcSettings: DirectoryVpcSettings;
  Edition?: DirectoryEdition | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateSnapshotRequest {
  DirectoryId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateTrustRequest {
  DirectoryId: string;
  RemoteDomainName: string;
  TrustPassword: string;
  TrustDirection: TrustDirection;
  TrustType?: TrustType | null;
  ConditionalForwarderIpAddrs?: string[] | null;
  SelectiveAuth?: SelectiveAuth | null;
}

// refs: 1 - tags: named, input
export interface DeleteConditionalForwarderRequest {
  DirectoryId: string;
  RemoteDomainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDirectoryRequest {
  DirectoryId: string;
}

// refs: 1 - tags: named, input
export interface DeleteLogSubscriptionRequest {
  DirectoryId: string;
}

// refs: 1 - tags: named, input
export interface DeleteSnapshotRequest {
  SnapshotId: string;
}

// refs: 1 - tags: named, input
export interface DeleteTrustRequest {
  TrustId: string;
  DeleteAssociatedConditionalForwarder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeregisterCertificateRequest {
  DirectoryId: string;
  CertificateId: string;
}

// refs: 1 - tags: named, input
export interface DeregisterEventTopicRequest {
  DirectoryId: string;
  TopicName: string;
}

// refs: 1 - tags: named, input
export interface DescribeCertificateRequest {
  DirectoryId: string;
  CertificateId: string;
}

// refs: 1 - tags: named, input
export interface DescribeConditionalForwardersRequest {
  DirectoryId: string;
  RemoteDomainNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeDirectoriesRequest {
  DirectoryIds?: string[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeDomainControllersRequest {
  DirectoryId: string;
  DomainControllerIds?: string[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventTopicsRequest {
  DirectoryId?: string | null;
  TopicNames?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DescribeLDAPSSettingsRequest {
  DirectoryId: string;
  Type?: LDAPSType | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeSharedDirectoriesRequest {
  OwnerDirectoryId: string;
  SharedDirectoryIds?: string[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeSnapshotsRequest {
  DirectoryId?: string | null;
  SnapshotIds?: string[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeTrustsRequest {
  DirectoryId?: string | null;
  TrustIds?: string[] | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface DisableLDAPSRequest {
  DirectoryId: string;
  Type: LDAPSType;
}

// refs: 1 - tags: named, input
export interface DisableRadiusRequest {
  DirectoryId: string;
}

// refs: 1 - tags: named, input
export interface DisableSsoRequest {
  DirectoryId: string;
  UserName?: string | null;
  Password?: string | null;
}

// refs: 1 - tags: named, input
export interface EnableLDAPSRequest {
  DirectoryId: string;
  Type: LDAPSType;
}

// refs: 1 - tags: named, input
export interface EnableRadiusRequest {
  DirectoryId: string;
  RadiusSettings: RadiusSettings;
}

// refs: 1 - tags: named, input
export interface EnableSsoRequest {
  DirectoryId: string;
  UserName?: string | null;
  Password?: string | null;
}

// refs: 1 - tags: named, input
export interface GetDirectoryLimitsRequest {
}

// refs: 1 - tags: named, input
export interface GetSnapshotLimitsRequest {
  DirectoryId: string;
}

// refs: 1 - tags: named, input
export interface ListCertificatesRequest {
  DirectoryId: string;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIpRoutesRequest {
  DirectoryId: string;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListLogSubscriptionsRequest {
  DirectoryId?: string | null;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSchemaExtensionsRequest {
  DirectoryId: string;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceId: string;
  NextToken?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface RegisterCertificateRequest {
  DirectoryId: string;
  CertificateData: string;
}

// refs: 1 - tags: named, input
export interface RegisterEventTopicRequest {
  DirectoryId: string;
  TopicName: string;
}

// refs: 1 - tags: named, input
export interface RejectSharedDirectoryRequest {
  SharedDirectoryId: string;
}

// refs: 1 - tags: named, input
export interface RemoveIpRoutesRequest {
  DirectoryId: string;
  CidrIps: string[];
}

// refs: 1 - tags: named, input
export interface RemoveTagsFromResourceRequest {
  ResourceId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface ResetUserPasswordRequest {
  DirectoryId: string;
  UserName: string;
  NewPassword: string;
}

// refs: 1 - tags: named, input
export interface RestoreFromSnapshotRequest {
  SnapshotId: string;
}

// refs: 1 - tags: named, input
export interface ShareDirectoryRequest {
  DirectoryId: string;
  ShareNotes?: string | null;
  ShareTarget: ShareTarget;
  ShareMethod: ShareMethod;
}

// refs: 1 - tags: named, input
export interface StartSchemaExtensionRequest {
  DirectoryId: string;
  CreateSnapshotBeforeSchemaExtension: boolean;
  LdifContent: string;
  Description: string;
}

// refs: 1 - tags: named, input
export interface UnshareDirectoryRequest {
  DirectoryId: string;
  UnshareTarget: UnshareTarget;
}

// refs: 1 - tags: named, input
export interface UpdateConditionalForwarderRequest {
  DirectoryId: string;
  RemoteDomainName: string;
  DnsIpAddrs: string[];
}

// refs: 1 - tags: named, input
export interface UpdateNumberOfDomainControllersRequest {
  DirectoryId: string;
  DesiredNumber: number;
}

// refs: 1 - tags: named, input
export interface UpdateRadiusRequest {
  DirectoryId: string;
  RadiusSettings: RadiusSettings;
}

// refs: 1 - tags: named, input
export interface UpdateTrustRequest {
  TrustId: string;
  SelectiveAuth?: SelectiveAuth | null;
}

// refs: 1 - tags: named, input
export interface VerifyTrustRequest {
  TrustId: string;
}

// refs: 1 - tags: named, output
export interface AcceptSharedDirectoryResult {
  SharedDirectory?: SharedDirectory | null;
}

// refs: 1 - tags: named, output
export interface AddIpRoutesResult {
}

// refs: 1 - tags: named, output
export interface AddTagsToResourceResult {
}

// refs: 1 - tags: named, output
export interface CancelSchemaExtensionResult {
}

// refs: 1 - tags: named, output
export interface ConnectDirectoryResult {
  DirectoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateAliasResult {
  DirectoryId?: string | null;
  Alias?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateComputerResult {
  Computer?: Computer | null;
}

// refs: 1 - tags: named, output
export interface CreateConditionalForwarderResult {
}

// refs: 1 - tags: named, output
export interface CreateDirectoryResult {
  DirectoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLogSubscriptionResult {
}

// refs: 1 - tags: named, output
export interface CreateMicrosoftADResult {
  DirectoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSnapshotResult {
  SnapshotId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTrustResult {
  TrustId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteConditionalForwarderResult {
}

// refs: 1 - tags: named, output
export interface DeleteDirectoryResult {
  DirectoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteLogSubscriptionResult {
}

// refs: 1 - tags: named, output
export interface DeleteSnapshotResult {
  SnapshotId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteTrustResult {
  TrustId?: string | null;
}

// refs: 1 - tags: named, output
export interface DeregisterCertificateResult {
}

// refs: 1 - tags: named, output
export interface DeregisterEventTopicResult {
}

// refs: 1 - tags: named, output
export interface DescribeCertificateResult {
  Certificate?: Certificate | null;
}

// refs: 1 - tags: named, output
export interface DescribeConditionalForwardersResult {
  ConditionalForwarders?: ConditionalForwarder[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeDirectoriesResult {
  DirectoryDescriptions?: DirectoryDescription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeDomainControllersResult {
  DomainControllers?: DomainController[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventTopicsResult {
  EventTopics?: EventTopic[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeLDAPSSettingsResult {
  LDAPSSettingsInfo?: LDAPSSettingInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSharedDirectoriesResult {
  SharedDirectories?: SharedDirectory[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSnapshotsResult {
  Snapshots?: Snapshot[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeTrustsResult {
  Trusts?: Trust[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DisableLDAPSResult {
}

// refs: 1 - tags: named, output
export interface DisableRadiusResult {
}

// refs: 1 - tags: named, output
export interface DisableSsoResult {
}

// refs: 1 - tags: named, output
export interface EnableLDAPSResult {
}

// refs: 1 - tags: named, output
export interface EnableRadiusResult {
}

// refs: 1 - tags: named, output
export interface EnableSsoResult {
}

// refs: 1 - tags: named, output
export interface GetDirectoryLimitsResult {
  DirectoryLimits?: DirectoryLimits | null;
}

// refs: 1 - tags: named, output
export interface GetSnapshotLimitsResult {
  SnapshotLimits?: SnapshotLimits | null;
}

// refs: 1 - tags: named, output
export interface ListCertificatesResult {
  NextToken?: string | null;
  CertificatesInfo?: CertificateInfo[] | null;
}

// refs: 1 - tags: named, output
export interface ListIpRoutesResult {
  IpRoutesInfo?: IpRouteInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLogSubscriptionsResult {
  LogSubscriptions?: LogSubscription[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSchemaExtensionsResult {
  SchemaExtensionsInfo?: SchemaExtensionInfo[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResult {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterCertificateResult {
  CertificateId?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterEventTopicResult {
}

// refs: 1 - tags: named, output
export interface RejectSharedDirectoryResult {
  SharedDirectoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface RemoveIpRoutesResult {
}

// refs: 1 - tags: named, output
export interface RemoveTagsFromResourceResult {
}

// refs: 1 - tags: named, output
export interface ResetUserPasswordResult {
}

// refs: 1 - tags: named, output
export interface RestoreFromSnapshotResult {
}

// refs: 1 - tags: named, output
export interface ShareDirectoryResult {
  SharedDirectoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartSchemaExtensionResult {
  SchemaExtensionId?: string | null;
}

// refs: 1 - tags: named, output
export interface UnshareDirectoryResult {
  SharedDirectoryId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateConditionalForwarderResult {
}

// refs: 1 - tags: named, output
export interface UpdateNumberOfDomainControllersResult {
}

// refs: 1 - tags: named, output
export interface UpdateRadiusResult {
}

// refs: 1 - tags: named, output
export interface UpdateTrustResult {
  RequestId?: string | null;
  TrustId?: string | null;
}

// refs: 1 - tags: named, output
export interface VerifyTrustResult {
  TrustId?: string | null;
}

// refs: 1 - tags: input, named, interface
export interface IpRoute {
  CidrIp?: string | null;
  Description?: string | null;
}
function fromIpRoute(input?: IpRoute | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 5 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DirectorySize =
| "Small"
| "Large"
;

function toDirectorySize(root: JSONValue): DirectorySize | null {
  return ( false
    || root == "Small"
    || root == "Large"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface DirectoryConnectSettings {
  VpcId: string;
  SubnetIds: string[];
  CustomerDnsIps: string[];
  CustomerUserName: string;
}
function fromDirectoryConnectSettings(input?: DirectoryConnectSettings | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, interface, output
export interface Attribute {
  Name?: string | null;
  Value?: string | null;
}
function fromAttribute(input?: Attribute | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toAttribute(root: JSONValue): Attribute {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface DirectoryVpcSettings {
  VpcId: string;
  SubnetIds: string[];
}
function fromDirectoryVpcSettings(input?: DirectoryVpcSettings | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, enum, output
export type DirectoryEdition =
| "Enterprise"
| "Standard"
;

function toDirectoryEdition(root: JSONValue): DirectoryEdition | null {
  return ( false
    || root == "Enterprise"
    || root == "Standard"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type TrustDirection =
| "One-Way: Outgoing"
| "One-Way: Incoming"
| "Two-Way"
;

function toTrustDirection(root: JSONValue): TrustDirection | null {
  return ( false
    || root == "One-Way: Outgoing"
    || root == "One-Way: Incoming"
    || root == "Two-Way"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum, output
export type TrustType =
| "Forest"
| "External"
;

function toTrustType(root: JSONValue): TrustType | null {
  return ( false
    || root == "Forest"
    || root == "External"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type SelectiveAuth =
| "Enabled"
| "Disabled"
;

function toSelectiveAuth(root: JSONValue): SelectiveAuth | null {
  return ( false
    || root == "Enabled"
    || root == "Disabled"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum
export type LDAPSType =
| "Client"
;


// refs: 4 - tags: input, named, interface, output
export interface RadiusSettings {
  RadiusServers?: string[] | null;
  RadiusPort?: number | null;
  RadiusTimeout?: number | null;
  RadiusRetries?: number | null;
  SharedSecret?: string | null;
  AuthenticationProtocol?: RadiusAuthenticationProtocol | null;
  DisplayLabel?: string | null;
  UseSameUsername?: boolean | null;
}
function fromRadiusSettings(input?: RadiusSettings | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRadiusSettings(root: JSONValue): RadiusSettings {
  return prt.readObj({
    required: {},
    optional: {
      "RadiusServers": ["s"],
      "RadiusPort": "n",
      "RadiusTimeout": "n",
      "RadiusRetries": "n",
      "SharedSecret": "s",
      "AuthenticationProtocol": toRadiusAuthenticationProtocol,
      "DisplayLabel": "s",
      "UseSameUsername": "b",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type RadiusAuthenticationProtocol =
| "PAP"
| "CHAP"
| "MS-CHAPv1"
| "MS-CHAPv2"
;

function toRadiusAuthenticationProtocol(root: JSONValue): RadiusAuthenticationProtocol | null {
  return ( false
    || root == "PAP"
    || root == "CHAP"
    || root == "MS-CHAPv1"
    || root == "MS-CHAPv2"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface ShareTarget {
  Id: string;
  Type: TargetType;
}
function fromShareTarget(input?: ShareTarget | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, enum
export type TargetType =
| "ACCOUNT"
;


// refs: 4 - tags: input, named, enum, output
export type ShareMethod =
| "ORGANIZATIONS"
| "HANDSHAKE"
;

function toShareMethod(root: JSONValue): ShareMethod | null {
  return ( false
    || root == "ORGANIZATIONS"
    || root == "HANDSHAKE"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface UnshareTarget {
  Id: string;
  Type: TargetType;
}
function fromUnshareTarget(input?: UnshareTarget | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: output, named, interface
export interface SharedDirectory {
  OwnerAccountId?: string | null;
  OwnerDirectoryId?: string | null;
  ShareMethod?: ShareMethod | null;
  SharedAccountId?: string | null;
  SharedDirectoryId?: string | null;
  ShareStatus?: ShareStatus | null;
  ShareNotes?: string | null;
  CreatedDateTime?: Date | number | null;
  LastUpdatedDateTime?: Date | number | null;
}
function toSharedDirectory(root: JSONValue): SharedDirectory {
  return prt.readObj({
    required: {},
    optional: {
      "OwnerAccountId": "s",
      "OwnerDirectoryId": "s",
      "ShareMethod": toShareMethod,
      "SharedAccountId": "s",
      "SharedDirectoryId": "s",
      "ShareStatus": toShareStatus,
      "ShareNotes": "s",
      "CreatedDateTime": "d",
      "LastUpdatedDateTime": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type ShareStatus =
| "Shared"
| "PendingAcceptance"
| "Rejected"
| "Rejecting"
| "RejectFailed"
| "Sharing"
| "ShareFailed"
| "Deleted"
| "Deleting"
;
function toShareStatus(root: JSONValue): ShareStatus | null {
  return ( false
    || root == "Shared"
    || root == "PendingAcceptance"
    || root == "Rejected"
    || root == "Rejecting"
    || root == "RejectFailed"
    || root == "Sharing"
    || root == "ShareFailed"
    || root == "Deleted"
    || root == "Deleting"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Computer {
  ComputerId?: string | null;
  ComputerName?: string | null;
  ComputerAttributes?: Attribute[] | null;
}
function toComputer(root: JSONValue): Computer {
  return prt.readObj({
    required: {},
    optional: {
      "ComputerId": "s",
      "ComputerName": "s",
      "ComputerAttributes": [toAttribute],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Certificate {
  CertificateId?: string | null;
  State?: CertificateState | null;
  StateReason?: string | null;
  CommonName?: string | null;
  RegisteredDateTime?: Date | number | null;
  ExpiryDateTime?: Date | number | null;
}
function toCertificate(root: JSONValue): Certificate {
  return prt.readObj({
    required: {},
    optional: {
      "CertificateId": "s",
      "State": toCertificateState,
      "StateReason": "s",
      "CommonName": "s",
      "RegisteredDateTime": "d",
      "ExpiryDateTime": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type CertificateState =
| "Registering"
| "Registered"
| "RegisterFailed"
| "Deregistering"
| "Deregistered"
| "DeregisterFailed"
;
function toCertificateState(root: JSONValue): CertificateState | null {
  return ( false
    || root == "Registering"
    || root == "Registered"
    || root == "RegisterFailed"
    || root == "Deregistering"
    || root == "Deregistered"
    || root == "DeregisterFailed"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface ConditionalForwarder {
  RemoteDomainName?: string | null;
  DnsIpAddrs?: string[] | null;
  ReplicationScope?: ReplicationScope | null;
}
function toConditionalForwarder(root: JSONValue): ConditionalForwarder {
  return prt.readObj({
    required: {},
    optional: {
      "RemoteDomainName": "s",
      "DnsIpAddrs": ["s"],
      "ReplicationScope": toReplicationScope,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ReplicationScope =
| "Domain"
;
function toReplicationScope(root: JSONValue): ReplicationScope | null {
  return ( false
    || root == "Domain"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface DirectoryDescription {
  DirectoryId?: string | null;
  Name?: string | null;
  ShortName?: string | null;
  Size?: DirectorySize | null;
  Edition?: DirectoryEdition | null;
  Alias?: string | null;
  AccessUrl?: string | null;
  Description?: string | null;
  DnsIpAddrs?: string[] | null;
  Stage?: DirectoryStage | null;
  ShareStatus?: ShareStatus | null;
  ShareMethod?: ShareMethod | null;
  ShareNotes?: string | null;
  LaunchTime?: Date | number | null;
  StageLastUpdatedDateTime?: Date | number | null;
  Type?: DirectoryType | null;
  VpcSettings?: DirectoryVpcSettingsDescription | null;
  ConnectSettings?: DirectoryConnectSettingsDescription | null;
  RadiusSettings?: RadiusSettings | null;
  RadiusStatus?: RadiusStatus | null;
  StageReason?: string | null;
  SsoEnabled?: boolean | null;
  DesiredNumberOfDomainControllers?: number | null;
  OwnerDirectoryDescription?: OwnerDirectoryDescription | null;
}
function toDirectoryDescription(root: JSONValue): DirectoryDescription {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "Name": "s",
      "ShortName": "s",
      "Size": toDirectorySize,
      "Edition": toDirectoryEdition,
      "Alias": "s",
      "AccessUrl": "s",
      "Description": "s",
      "DnsIpAddrs": ["s"],
      "Stage": toDirectoryStage,
      "ShareStatus": toShareStatus,
      "ShareMethod": toShareMethod,
      "ShareNotes": "s",
      "LaunchTime": "d",
      "StageLastUpdatedDateTime": "d",
      "Type": toDirectoryType,
      "VpcSettings": toDirectoryVpcSettingsDescription,
      "ConnectSettings": toDirectoryConnectSettingsDescription,
      "RadiusSettings": toRadiusSettings,
      "RadiusStatus": toRadiusStatus,
      "StageReason": "s",
      "SsoEnabled": "b",
      "DesiredNumberOfDomainControllers": "n",
      "OwnerDirectoryDescription": toOwnerDirectoryDescription,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DirectoryStage =
| "Requested"
| "Creating"
| "Created"
| "Active"
| "Inoperable"
| "Impaired"
| "Restoring"
| "RestoreFailed"
| "Deleting"
| "Deleted"
| "Failed"
;
function toDirectoryStage(root: JSONValue): DirectoryStage | null {
  return ( false
    || root == "Requested"
    || root == "Creating"
    || root == "Created"
    || root == "Active"
    || root == "Inoperable"
    || root == "Impaired"
    || root == "Restoring"
    || root == "RestoreFailed"
    || root == "Deleting"
    || root == "Deleted"
    || root == "Failed"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type DirectoryType =
| "SimpleAD"
| "ADConnector"
| "MicrosoftAD"
| "SharedMicrosoftAD"
;
function toDirectoryType(root: JSONValue): DirectoryType | null {
  return ( false
    || root == "SimpleAD"
    || root == "ADConnector"
    || root == "MicrosoftAD"
    || root == "SharedMicrosoftAD"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface DirectoryVpcSettingsDescription {
  VpcId?: string | null;
  SubnetIds?: string[] | null;
  SecurityGroupId?: string | null;
  AvailabilityZones?: string[] | null;
}
function toDirectoryVpcSettingsDescription(root: JSONValue): DirectoryVpcSettingsDescription {
  return prt.readObj({
    required: {},
    optional: {
      "VpcId": "s",
      "SubnetIds": ["s"],
      "SecurityGroupId": "s",
      "AvailabilityZones": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DirectoryConnectSettingsDescription {
  VpcId?: string | null;
  SubnetIds?: string[] | null;
  CustomerUserName?: string | null;
  SecurityGroupId?: string | null;
  AvailabilityZones?: string[] | null;
  ConnectIps?: string[] | null;
}
function toDirectoryConnectSettingsDescription(root: JSONValue): DirectoryConnectSettingsDescription {
  return prt.readObj({
    required: {},
    optional: {
      "VpcId": "s",
      "SubnetIds": ["s"],
      "CustomerUserName": "s",
      "SecurityGroupId": "s",
      "AvailabilityZones": ["s"],
      "ConnectIps": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type RadiusStatus =
| "Creating"
| "Completed"
| "Failed"
;
function toRadiusStatus(root: JSONValue): RadiusStatus | null {
  return ( false
    || root == "Creating"
    || root == "Completed"
    || root == "Failed"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface OwnerDirectoryDescription {
  DirectoryId?: string | null;
  AccountId?: string | null;
  DnsIpAddrs?: string[] | null;
  VpcSettings?: DirectoryVpcSettingsDescription | null;
  RadiusSettings?: RadiusSettings | null;
  RadiusStatus?: RadiusStatus | null;
}
function toOwnerDirectoryDescription(root: JSONValue): OwnerDirectoryDescription {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "AccountId": "s",
      "DnsIpAddrs": ["s"],
      "VpcSettings": toDirectoryVpcSettingsDescription,
      "RadiusSettings": toRadiusSettings,
      "RadiusStatus": toRadiusStatus,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DomainController {
  DirectoryId?: string | null;
  DomainControllerId?: string | null;
  DnsIpAddr?: string | null;
  VpcId?: string | null;
  SubnetId?: string | null;
  AvailabilityZone?: string | null;
  Status?: DomainControllerStatus | null;
  StatusReason?: string | null;
  LaunchTime?: Date | number | null;
  StatusLastUpdatedDateTime?: Date | number | null;
}
function toDomainController(root: JSONValue): DomainController {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "DomainControllerId": "s",
      "DnsIpAddr": "s",
      "VpcId": "s",
      "SubnetId": "s",
      "AvailabilityZone": "s",
      "Status": toDomainControllerStatus,
      "StatusReason": "s",
      "LaunchTime": "d",
      "StatusLastUpdatedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DomainControllerStatus =
| "Creating"
| "Active"
| "Impaired"
| "Restoring"
| "Deleting"
| "Deleted"
| "Failed"
;
function toDomainControllerStatus(root: JSONValue): DomainControllerStatus | null {
  return ( false
    || root == "Creating"
    || root == "Active"
    || root == "Impaired"
    || root == "Restoring"
    || root == "Deleting"
    || root == "Deleted"
    || root == "Failed"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface EventTopic {
  DirectoryId?: string | null;
  TopicName?: string | null;
  TopicArn?: string | null;
  CreatedDateTime?: Date | number | null;
  Status?: TopicStatus | null;
}
function toEventTopic(root: JSONValue): EventTopic {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "TopicName": "s",
      "TopicArn": "s",
      "CreatedDateTime": "d",
      "Status": toTopicStatus,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type TopicStatus =
| "Registered"
| "Topic not found"
| "Failed"
| "Deleted"
;
function toTopicStatus(root: JSONValue): TopicStatus | null {
  return ( false
    || root == "Registered"
    || root == "Topic not found"
    || root == "Failed"
    || root == "Deleted"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface LDAPSSettingInfo {
  LDAPSStatus?: LDAPSStatus | null;
  LDAPSStatusReason?: string | null;
  LastUpdatedDateTime?: Date | number | null;
}
function toLDAPSSettingInfo(root: JSONValue): LDAPSSettingInfo {
  return prt.readObj({
    required: {},
    optional: {
      "LDAPSStatus": toLDAPSStatus,
      "LDAPSStatusReason": "s",
      "LastUpdatedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type LDAPSStatus =
| "Enabling"
| "Enabled"
| "EnableFailed"
| "Disabled"
;
function toLDAPSStatus(root: JSONValue): LDAPSStatus | null {
  return ( false
    || root == "Enabling"
    || root == "Enabled"
    || root == "EnableFailed"
    || root == "Disabled"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Snapshot {
  DirectoryId?: string | null;
  SnapshotId?: string | null;
  Type?: SnapshotType | null;
  Name?: string | null;
  Status?: SnapshotStatus | null;
  StartTime?: Date | number | null;
}
function toSnapshot(root: JSONValue): Snapshot {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "SnapshotId": "s",
      "Type": toSnapshotType,
      "Name": "s",
      "Status": toSnapshotStatus,
      "StartTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SnapshotType =
| "Auto"
| "Manual"
;
function toSnapshotType(root: JSONValue): SnapshotType | null {
  return ( false
    || root == "Auto"
    || root == "Manual"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type SnapshotStatus =
| "Creating"
| "Completed"
| "Failed"
;
function toSnapshotStatus(root: JSONValue): SnapshotStatus | null {
  return ( false
    || root == "Creating"
    || root == "Completed"
    || root == "Failed"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Trust {
  DirectoryId?: string | null;
  TrustId?: string | null;
  RemoteDomainName?: string | null;
  TrustType?: TrustType | null;
  TrustDirection?: TrustDirection | null;
  TrustState?: TrustState | null;
  CreatedDateTime?: Date | number | null;
  LastUpdatedDateTime?: Date | number | null;
  StateLastUpdatedDateTime?: Date | number | null;
  TrustStateReason?: string | null;
  SelectiveAuth?: SelectiveAuth | null;
}
function toTrust(root: JSONValue): Trust {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "TrustId": "s",
      "RemoteDomainName": "s",
      "TrustType": toTrustType,
      "TrustDirection": toTrustDirection,
      "TrustState": toTrustState,
      "CreatedDateTime": "d",
      "LastUpdatedDateTime": "d",
      "StateLastUpdatedDateTime": "d",
      "TrustStateReason": "s",
      "SelectiveAuth": toSelectiveAuth,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type TrustState =
| "Creating"
| "Created"
| "Verifying"
| "VerifyFailed"
| "Verified"
| "Updating"
| "UpdateFailed"
| "Updated"
| "Deleting"
| "Deleted"
| "Failed"
;
function toTrustState(root: JSONValue): TrustState | null {
  return ( false
    || root == "Creating"
    || root == "Created"
    || root == "Verifying"
    || root == "VerifyFailed"
    || root == "Verified"
    || root == "Updating"
    || root == "UpdateFailed"
    || root == "Updated"
    || root == "Deleting"
    || root == "Deleted"
    || root == "Failed"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface DirectoryLimits {
  CloudOnlyDirectoriesLimit?: number | null;
  CloudOnlyDirectoriesCurrentCount?: number | null;
  CloudOnlyDirectoriesLimitReached?: boolean | null;
  CloudOnlyMicrosoftADLimit?: number | null;
  CloudOnlyMicrosoftADCurrentCount?: number | null;
  CloudOnlyMicrosoftADLimitReached?: boolean | null;
  ConnectedDirectoriesLimit?: number | null;
  ConnectedDirectoriesCurrentCount?: number | null;
  ConnectedDirectoriesLimitReached?: boolean | null;
}
function toDirectoryLimits(root: JSONValue): DirectoryLimits {
  return prt.readObj({
    required: {},
    optional: {
      "CloudOnlyDirectoriesLimit": "n",
      "CloudOnlyDirectoriesCurrentCount": "n",
      "CloudOnlyDirectoriesLimitReached": "b",
      "CloudOnlyMicrosoftADLimit": "n",
      "CloudOnlyMicrosoftADCurrentCount": "n",
      "CloudOnlyMicrosoftADLimitReached": "b",
      "ConnectedDirectoriesLimit": "n",
      "ConnectedDirectoriesCurrentCount": "n",
      "ConnectedDirectoriesLimitReached": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SnapshotLimits {
  ManualSnapshotsLimit?: number | null;
  ManualSnapshotsCurrentCount?: number | null;
  ManualSnapshotsLimitReached?: boolean | null;
}
function toSnapshotLimits(root: JSONValue): SnapshotLimits {
  return prt.readObj({
    required: {},
    optional: {
      "ManualSnapshotsLimit": "n",
      "ManualSnapshotsCurrentCount": "n",
      "ManualSnapshotsLimitReached": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CertificateInfo {
  CertificateId?: string | null;
  CommonName?: string | null;
  State?: CertificateState | null;
  ExpiryDateTime?: Date | number | null;
}
function toCertificateInfo(root: JSONValue): CertificateInfo {
  return prt.readObj({
    required: {},
    optional: {
      "CertificateId": "s",
      "CommonName": "s",
      "State": toCertificateState,
      "ExpiryDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface IpRouteInfo {
  DirectoryId?: string | null;
  CidrIp?: string | null;
  IpRouteStatusMsg?: IpRouteStatusMsg | null;
  AddedDateTime?: Date | number | null;
  IpRouteStatusReason?: string | null;
  Description?: string | null;
}
function toIpRouteInfo(root: JSONValue): IpRouteInfo {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "CidrIp": "s",
      "IpRouteStatusMsg": toIpRouteStatusMsg,
      "AddedDateTime": "d",
      "IpRouteStatusReason": "s",
      "Description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type IpRouteStatusMsg =
| "Adding"
| "Added"
| "Removing"
| "Removed"
| "AddFailed"
| "RemoveFailed"
;
function toIpRouteStatusMsg(root: JSONValue): IpRouteStatusMsg | null {
  return ( false
    || root == "Adding"
    || root == "Added"
    || root == "Removing"
    || root == "Removed"
    || root == "AddFailed"
    || root == "RemoveFailed"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface LogSubscription {
  DirectoryId?: string | null;
  LogGroupName?: string | null;
  SubscriptionCreatedDateTime?: Date | number | null;
}
function toLogSubscription(root: JSONValue): LogSubscription {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "LogGroupName": "s",
      "SubscriptionCreatedDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SchemaExtensionInfo {
  DirectoryId?: string | null;
  SchemaExtensionId?: string | null;
  Description?: string | null;
  SchemaExtensionStatus?: SchemaExtensionStatus | null;
  SchemaExtensionStatusReason?: string | null;
  StartDateTime?: Date | number | null;
  EndDateTime?: Date | number | null;
}
function toSchemaExtensionInfo(root: JSONValue): SchemaExtensionInfo {
  return prt.readObj({
    required: {},
    optional: {
      "DirectoryId": "s",
      "SchemaExtensionId": "s",
      "Description": "s",
      "SchemaExtensionStatus": toSchemaExtensionStatus,
      "SchemaExtensionStatusReason": "s",
      "StartDateTime": "d",
      "EndDateTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type SchemaExtensionStatus =
| "Initializing"
| "CreatingSnapshot"
| "UpdatingSchema"
| "Replicating"
| "CancelInProgress"
| "RollbackInProgress"
| "Cancelled"
| "Failed"
| "Completed"
;
function toSchemaExtensionStatus(root: JSONValue): SchemaExtensionStatus | null {
  return ( false
    || root == "Initializing"
    || root == "CreatingSnapshot"
    || root == "UpdatingSchema"
    || root == "Replicating"
    || root == "CancelInProgress"
    || root == "RollbackInProgress"
    || root == "Cancelled"
    || root == "Failed"
    || root == "Completed"
  ) ? root : null;
}
