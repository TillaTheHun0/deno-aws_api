// Autogenerated API client for: AWS Resource Groups

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class ResourceGroups {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ResourceGroups.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-11-27",
    "endpointPrefix": "resource-groups",
    "protocol": "rest-json",
    "serviceAbbreviation": "Resource Groups",
    "serviceFullName": "AWS Resource Groups",
    "serviceId": "Resource Groups",
    "signatureVersion": "v4",
    "signingName": "resource-groups",
    "uid": "resource-groups-2017-11-27"
  };

  async createGroup(
    {abortSignal, ...params}: RequestConfig & CreateGroupInput,
  ): Promise<CreateGroupOutput> {
    const body: jsonP.JSONObject = params ? {
      Name: params["Name"],
      Description: params["Description"],
      ResourceQuery: fromResourceQuery(params["ResourceQuery"]),
      Tags: params["Tags"],
      Configuration: params["Configuration"]?.map(x => fromGroupConfigurationItem(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGroup",
      requestUri: "/groups",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Group": toGroup,
          "ResourceQuery": toResourceQuery,
          "Tags": x => jsonP.readMap(String, String, x),
          "GroupConfiguration": toGroupConfiguration,
        },
      }, await resp.json()),
  };
  }

  async deleteGroup(
    {abortSignal, ...params}: RequestConfig & DeleteGroupInput = {},
  ): Promise<DeleteGroupOutput> {
    const body: jsonP.JSONObject = params ? {
      GroupName: params["GroupName"],
      Group: params["Group"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGroup",
      requestUri: "/delete-group",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Group": toGroup,
        },
      }, await resp.json()),
  };
  }

  async getGroup(
    {abortSignal, ...params}: RequestConfig & GetGroupInput = {},
  ): Promise<GetGroupOutput> {
    const body: jsonP.JSONObject = params ? {
      GroupName: params["GroupName"],
      Group: params["Group"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGroup",
      requestUri: "/get-group",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Group": toGroup,
        },
      }, await resp.json()),
  };
  }

  async getGroupConfiguration(
    {abortSignal, ...params}: RequestConfig & GetGroupConfigurationInput = {},
  ): Promise<GetGroupConfigurationOutput> {
    const body: jsonP.JSONObject = params ? {
      Group: params["Group"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGroupConfiguration",
      requestUri: "/get-group-configuration",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GroupConfiguration": toGroupConfiguration,
        },
      }, await resp.json()),
  };
  }

  async getGroupQuery(
    {abortSignal, ...params}: RequestConfig & GetGroupQueryInput = {},
  ): Promise<GetGroupQueryOutput> {
    const body: jsonP.JSONObject = params ? {
      GroupName: params["GroupName"],
      Group: params["Group"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGroupQuery",
      requestUri: "/get-group-query",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GroupQuery": toGroupQuery,
        },
      }, await resp.json()),
  };
  }

  async getTags(
    {abortSignal, ...params}: RequestConfig & GetTagsInput,
  ): Promise<GetTagsOutput> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetTags",
      method: "GET",
      requestUri: cmnP.encodePath`/resources/${params["Arn"]}/tags`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async groupResources(
    {abortSignal, ...params}: RequestConfig & GroupResourcesInput,
  ): Promise<GroupResourcesOutput> {
    const body: jsonP.JSONObject = params ? {
      Group: params["Group"],
      ResourceArns: params["ResourceArns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GroupResources",
      requestUri: "/group-resources",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Succeeded": ["s"],
          "Failed": [toFailedResource],
        },
      }, await resp.json()),
  };
  }

  async listGroupResources(
    {abortSignal, ...params}: RequestConfig & ListGroupResourcesInput = {},
  ): Promise<ListGroupResourcesOutput> {
    const body: jsonP.JSONObject = params ? {
      GroupName: params["GroupName"],
      Group: params["Group"],
      Filters: params["Filters"]?.map(x => fromResourceFilter(x)),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGroupResources",
      requestUri: "/list-group-resources",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ResourceIdentifiers": [toResourceIdentifier],
          "NextToken": "s",
          "QueryErrors": [toQueryError],
        },
      }, await resp.json()),
  };
  }

  async listGroups(
    {abortSignal, ...params}: RequestConfig & ListGroupsInput = {},
  ): Promise<ListGroupsOutput> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("maxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("nextToken", params["NextToken"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      Filters: params["Filters"]?.map(x => fromGroupFilter(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListGroups",
      requestUri: "/groups-list",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GroupIdentifiers": [toGroupIdentifier],
          "Groups": [toGroup],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async searchResources(
    {abortSignal, ...params}: RequestConfig & SearchResourcesInput,
  ): Promise<SearchResourcesOutput> {
    const body: jsonP.JSONObject = params ? {
      ResourceQuery: fromResourceQuery(params["ResourceQuery"]),
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchResources",
      requestUri: "/resources/search",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ResourceIdentifiers": [toResourceIdentifier],
          "NextToken": "s",
          "QueryErrors": [toQueryError],
        },
      }, await resp.json()),
  };
  }

  async tag(
    {abortSignal, ...params}: RequestConfig & TagInput,
  ): Promise<TagOutput> {
    const body: jsonP.JSONObject = params ? {
      Tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Tag",
      method: "PUT",
      requestUri: cmnP.encodePath`/resources/${params["Arn"]}/tags`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async ungroupResources(
    {abortSignal, ...params}: RequestConfig & UngroupResourcesInput,
  ): Promise<UngroupResourcesOutput> {
    const body: jsonP.JSONObject = params ? {
      Group: params["Group"],
      ResourceArns: params["ResourceArns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UngroupResources",
      requestUri: "/ungroup-resources",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Succeeded": ["s"],
          "Failed": [toFailedResource],
        },
      }, await resp.json()),
  };
  }

  async untag(
    {abortSignal, ...params}: RequestConfig & UntagInput,
  ): Promise<UntagOutput> {
    const body: jsonP.JSONObject = params ? {
      Keys: params["Keys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Untag",
      method: "PATCH",
      requestUri: cmnP.encodePath`/resources/${params["Arn"]}/tags`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Arn": "s",
          "Keys": ["s"],
        },
      }, await resp.json()),
  };
  }

  async updateGroup(
    {abortSignal, ...params}: RequestConfig & UpdateGroupInput = {},
  ): Promise<UpdateGroupOutput> {
    const body: jsonP.JSONObject = params ? {
      GroupName: params["GroupName"],
      Group: params["Group"],
      Description: params["Description"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroup",
      requestUri: "/update-group",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Group": toGroup,
        },
      }, await resp.json()),
  };
  }

  async updateGroupQuery(
    {abortSignal, ...params}: RequestConfig & UpdateGroupQueryInput,
  ): Promise<UpdateGroupQueryOutput> {
    const body: jsonP.JSONObject = params ? {
      GroupName: params["GroupName"],
      Group: params["Group"],
      ResourceQuery: fromResourceQuery(params["ResourceQuery"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGroupQuery",
      requestUri: "/update-group-query",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "GroupQuery": toGroupQuery,
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface CreateGroupInput {
  Name: string;
  Description?: string | null;
  ResourceQuery?: ResourceQuery | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  Configuration?: GroupConfigurationItem[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteGroupInput {
  GroupName?: string | null;
  Group?: string | null;
}

// refs: 1 - tags: named, input
export interface GetGroupInput {
  GroupName?: string | null;
  Group?: string | null;
}

// refs: 1 - tags: named, input
export interface GetGroupConfigurationInput {
  Group?: string | null;
}

// refs: 1 - tags: named, input
export interface GetGroupQueryInput {
  GroupName?: string | null;
  Group?: string | null;
}

// refs: 1 - tags: named, input
export interface GetTagsInput {
  Arn: string;
}

// refs: 1 - tags: named, input
export interface GroupResourcesInput {
  Group: string;
  ResourceArns: string[];
}

// refs: 1 - tags: named, input
export interface ListGroupResourcesInput {
  GroupName?: string | null;
  Group?: string | null;
  Filters?: ResourceFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGroupsInput {
  Filters?: GroupFilter[] | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface SearchResourcesInput {
  ResourceQuery: ResourceQuery;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface TagInput {
  Arn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UngroupResourcesInput {
  Group: string;
  ResourceArns: string[];
}

// refs: 1 - tags: named, input
export interface UntagInput {
  Arn: string;
  Keys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateGroupInput {
  GroupName?: string | null;
  Group?: string | null;
  Description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateGroupQueryInput {
  GroupName?: string | null;
  Group?: string | null;
  ResourceQuery: ResourceQuery;
}

// refs: 1 - tags: named, output
export interface CreateGroupOutput {
  Group?: Group | null;
  ResourceQuery?: ResourceQuery | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  GroupConfiguration?: GroupConfiguration | null;
}

// refs: 1 - tags: named, output
export interface DeleteGroupOutput {
  Group?: Group | null;
}

// refs: 1 - tags: named, output
export interface GetGroupOutput {
  Group?: Group | null;
}

// refs: 1 - tags: named, output
export interface GetGroupConfigurationOutput {
  GroupConfiguration?: GroupConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetGroupQueryOutput {
  GroupQuery?: GroupQuery | null;
}

// refs: 1 - tags: named, output
export interface GetTagsOutput {
  Arn?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GroupResourcesOutput {
  Succeeded?: string[] | null;
  Failed?: FailedResource[] | null;
}

// refs: 1 - tags: named, output
export interface ListGroupResourcesOutput {
  ResourceIdentifiers?: ResourceIdentifier[] | null;
  NextToken?: string | null;
  QueryErrors?: QueryError[] | null;
}

// refs: 1 - tags: named, output
export interface ListGroupsOutput {
  GroupIdentifiers?: GroupIdentifier[] | null;
  Groups?: Group[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface SearchResourcesOutput {
  ResourceIdentifiers?: ResourceIdentifier[] | null;
  NextToken?: string | null;
  QueryErrors?: QueryError[] | null;
}

// refs: 1 - tags: named, output
export interface TagOutput {
  Arn?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface UngroupResourcesOutput {
  Succeeded?: string[] | null;
  Failed?: FailedResource[] | null;
}

// refs: 1 - tags: named, output
export interface UntagOutput {
  Arn?: string | null;
  Keys?: string[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateGroupOutput {
  Group?: Group | null;
}

// refs: 1 - tags: named, output
export interface UpdateGroupQueryOutput {
  GroupQuery?: GroupQuery | null;
}

// refs: 6 - tags: input, named, interface, output
export interface ResourceQuery {
  Type: QueryType;
  Query: string;
}
function fromResourceQuery(input?: ResourceQuery | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Query: input["Query"],
  }
}
function toResourceQuery(root: jsonP.JSONValue): ResourceQuery {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<QueryType>(x),
      "Query": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type QueryType =
| "TAG_FILTERS_1_0"
| "CLOUDFORMATION_STACK_1_0"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface GroupConfigurationItem {
  Type: string;
  Parameters?: GroupConfigurationParameter[] | null;
}
function fromGroupConfigurationItem(input?: GroupConfigurationItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Parameters: input["Parameters"]?.map(x => fromGroupConfigurationParameter(x)),
  }
}
function toGroupConfigurationItem(root: jsonP.JSONValue): GroupConfigurationItem {
  return jsonP.readObj({
    required: {
      "Type": "s",
    },
    optional: {
      "Parameters": [toGroupConfigurationParameter],
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface GroupConfigurationParameter {
  Name: string;
  Values?: string[] | null;
}
function fromGroupConfigurationParameter(input?: GroupConfigurationParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}
function toGroupConfigurationParameter(root: jsonP.JSONValue): GroupConfigurationParameter {
  return jsonP.readObj({
    required: {
      "Name": "s",
    },
    optional: {
      "Values": ["s"],
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ResourceFilter {
  Name: ResourceFilterName;
  Values: string[];
}
function fromResourceFilter(input?: ResourceFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type ResourceFilterName =
| "resource-type"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface GroupFilter {
  Name: GroupFilterName;
  Values: string[];
}
function fromGroupFilter(input?: GroupFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

// refs: 1 - tags: input, named, enum
export type GroupFilterName =
| "resource-type"
| "configuration-type"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface Group {
  GroupArn: string;
  Name: string;
  Description?: string | null;
}
function toGroup(root: jsonP.JSONValue): Group {
  return jsonP.readObj({
    required: {
      "GroupArn": "s",
      "Name": "s",
    },
    optional: {
      "Description": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface GroupConfiguration {
  Configuration?: GroupConfigurationItem[] | null;
  ProposedConfiguration?: GroupConfigurationItem[] | null;
  Status?: GroupConfigurationStatus | null;
  FailureReason?: string | null;
}
function toGroupConfiguration(root: jsonP.JSONValue): GroupConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Configuration": [toGroupConfigurationItem],
      "ProposedConfiguration": [toGroupConfigurationItem],
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<GroupConfigurationStatus>(x),
      "FailureReason": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type GroupConfigurationStatus =
| "UPDATING"
| "UPDATE_COMPLETE"
| "UPDATE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface GroupQuery {
  GroupName: string;
  ResourceQuery: ResourceQuery;
}
function toGroupQuery(root: jsonP.JSONValue): GroupQuery {
  return jsonP.readObj({
    required: {
      "GroupName": "s",
      "ResourceQuery": toResourceQuery,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface FailedResource {
  ResourceArn?: string | null;
  ErrorMessage?: string | null;
  ErrorCode?: string | null;
}
function toFailedResource(root: jsonP.JSONValue): FailedResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceArn": "s",
      "ErrorMessage": "s",
      "ErrorCode": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ResourceIdentifier {
  ResourceArn?: string | null;
  ResourceType?: string | null;
}
function toResourceIdentifier(root: jsonP.JSONValue): ResourceIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceArn": "s",
      "ResourceType": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface QueryError {
  ErrorCode?: QueryErrorCode | null;
  Message?: string | null;
}
function toQueryError(root: jsonP.JSONValue): QueryError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<QueryErrorCode>(x),
      "Message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type QueryErrorCode =
| "CLOUDFORMATION_STACK_INACTIVE"
| "CLOUDFORMATION_STACK_NOT_EXISTING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface GroupIdentifier {
  GroupName?: string | null;
  GroupArn?: string | null;
}
function toGroupIdentifier(root: jsonP.JSONValue): GroupIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupName": "s",
      "GroupArn": "s",
    },
  }, root);
}
