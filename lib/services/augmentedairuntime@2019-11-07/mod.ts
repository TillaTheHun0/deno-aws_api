// Autogenerated API client for: Amazon Augmented AI Runtime

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class AugmentedAIRuntime {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AugmentedAIRuntime.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-11-07",
    "endpointPrefix": "a2i-runtime.sagemaker",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Augmented AI Runtime",
    "serviceId": "SageMaker A2I Runtime",
    "signatureVersion": "v4",
    "signingName": "sagemaker",
    "uid": "sagemaker-a2i-runtime-2019-11-07"
  };

  async deleteHumanLoop(
    {abortSignal, ...params}: RequestConfig & s.DeleteHumanLoopRequest,
  ): Promise<s.DeleteHumanLoopResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteHumanLoop",
      method: "DELETE",
      requestUri: cmnP.encodePath`/human-loops/${params["HumanLoopName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeHumanLoop(
    {abortSignal, ...params}: RequestConfig & s.DescribeHumanLoopRequest,
  ): Promise<s.DescribeHumanLoopResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeHumanLoop",
      method: "GET",
      requestUri: cmnP.encodePath`/human-loops/${params["HumanLoopName"]}`,
    });
    return jsonP.readObj({
      required: {
        "CreationTime": "d",
        "HumanLoopStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.HumanLoopStatus>(x),
        "HumanLoopName": "s",
        "HumanLoopArn": "s",
        "FlowDefinitionArn": "s",
      },
      optional: {
        "FailureReason": "s",
        "FailureCode": "s",
        "HumanLoopOutput": toHumanLoopOutput,
      },
    }, await resp.json());
  }

  async listHumanLoops(
    {abortSignal, ...params}: RequestConfig & s.ListHumanLoopsRequest,
  ): Promise<s.ListHumanLoopsResponse> {
    const query = new URLSearchParams;
    if (params["CreationTimeAfter"] != null) query.set("CreationTimeAfter", cmnP.serializeDate_iso8601(params["CreationTimeAfter"]) ?? "");
    if (params["CreationTimeBefore"] != null) query.set("CreationTimeBefore", cmnP.serializeDate_iso8601(params["CreationTimeBefore"]) ?? "");
    query.set("FlowDefinitionArn", params["FlowDefinitionArn"]?.toString() ?? "");
    if (params["SortOrder"] != null) query.set("SortOrder", params["SortOrder"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListHumanLoops",
      method: "GET",
      requestUri: "/human-loops",
    });
    return jsonP.readObj({
      required: {
        "HumanLoopSummaries": [toHumanLoopSummary],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startHumanLoop(
    {abortSignal, ...params}: RequestConfig & s.StartHumanLoopRequest,
  ): Promise<s.StartHumanLoopResponse> {
    const body: jsonP.JSONObject = {
      HumanLoopName: params["HumanLoopName"],
      FlowDefinitionArn: params["FlowDefinitionArn"],
      HumanLoopInput: fromHumanLoopInput(params["HumanLoopInput"]),
      DataAttributes: fromHumanLoopDataAttributes(params["DataAttributes"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartHumanLoop",
      requestUri: "/human-loops",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "HumanLoopArn": "s",
      },
    }, await resp.json());
  }

  async stopHumanLoop(
    {abortSignal, ...params}: RequestConfig & s.StopHumanLoopRequest,
  ): Promise<s.StopHumanLoopResponse> {
    const body: jsonP.JSONObject = {
      HumanLoopName: params["HumanLoopName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopHumanLoop",
      requestUri: "/human-loops/stop",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromHumanLoopInput(input?: s.HumanLoopInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InputContent: input["InputContent"],
  }
}

function fromHumanLoopDataAttributes(input?: s.HumanLoopDataAttributes | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ContentClassifiers: input["ContentClassifiers"],
  }
}

function toHumanLoopOutput(root: jsonP.JSONValue): s.HumanLoopOutput {
  return jsonP.readObj({
    required: {
      "OutputS3Uri": "s",
    },
    optional: {},
  }, root);
}

function toHumanLoopSummary(root: jsonP.JSONValue): s.HumanLoopSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "HumanLoopName": "s",
      "HumanLoopStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.HumanLoopStatus>(x),
      "CreationTime": "d",
      "FailureReason": "s",
      "FlowDefinitionArn": "s",
    },
  }, root);
}
