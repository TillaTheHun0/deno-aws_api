// Autogenerated API client for: Amazon Cognito Identity

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class CognitoIdentity {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CognitoIdentity.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2014-06-30",
    "endpointPrefix": "cognito-identity",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Cognito Identity",
    "serviceId": "Cognito Identity",
    "signatureVersion": "v4",
    "targetPrefix": "AWSCognitoIdentityService",
    "uid": "cognito-identity-2014-06-30"
  };

  async createIdentityPool(
    {abortSignal, ...params}: RequestConfig & s.CreateIdentityPoolInput,
  ): Promise<s.IdentityPool> {
    const body: jsonP.JSONObject = {
      IdentityPoolName: params["IdentityPoolName"],
      AllowUnauthenticatedIdentities: params["AllowUnauthenticatedIdentities"],
      AllowClassicFlow: params["AllowClassicFlow"],
      SupportedLoginProviders: params["SupportedLoginProviders"],
      DeveloperProviderName: params["DeveloperProviderName"],
      OpenIdConnectProviderARNs: params["OpenIdConnectProviderARNs"],
      CognitoIdentityProviders: params["CognitoIdentityProviders"]?.map(x => fromCognitoIdentityProvider(x)),
      SamlProviderARNs: params["SamlProviderARNs"],
      IdentityPoolTags: params["IdentityPoolTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateIdentityPool",
    });
    return toIdentityPool(await resp.json());
  }

  async deleteIdentities(
    {abortSignal, ...params}: RequestConfig & s.DeleteIdentitiesInput,
  ): Promise<s.DeleteIdentitiesResponse> {
    const body: jsonP.JSONObject = {
      IdentityIdsToDelete: params["IdentityIdsToDelete"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIdentities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UnprocessedIdentityIds": [toUnprocessedIdentityId],
      },
    }, await resp.json());
  }

  async deleteIdentityPool(
    {abortSignal, ...params}: RequestConfig & s.DeleteIdentityPoolInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIdentityPool",
    });
    await resp.text();
  }

  async describeIdentity(
    {abortSignal, ...params}: RequestConfig & s.DescribeIdentityInput,
  ): Promise<s.IdentityDescription> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIdentity",
    });
    return toIdentityDescription(await resp.json());
  }

  async describeIdentityPool(
    {abortSignal, ...params}: RequestConfig & s.DescribeIdentityPoolInput,
  ): Promise<s.IdentityPool> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeIdentityPool",
    });
    return toIdentityPool(await resp.json());
  }

  async getCredentialsForIdentity(
    {abortSignal, ...params}: RequestConfig & s.GetCredentialsForIdentityInput,
  ): Promise<s.GetCredentialsForIdentityResponse> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
      CustomRoleArn: params["CustomRoleArn"],
    };
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "GetCredentialsForIdentity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "Credentials": toCredentials,
      },
    }, await resp.json());
  }

  async getId(
    {abortSignal, ...params}: RequestConfig & s.GetIdInput,
  ): Promise<s.GetIdResponse> {
    const body: jsonP.JSONObject = {
      AccountId: params["AccountId"],
      IdentityPoolId: params["IdentityPoolId"],
      Logins: params["Logins"],
    };
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "GetId",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
      },
    }, await resp.json());
  }

  async getIdentityPoolRoles(
    {abortSignal, ...params}: RequestConfig & s.GetIdentityPoolRolesInput,
  ): Promise<s.GetIdentityPoolRolesResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIdentityPoolRoles",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "Roles": x => jsonP.readMap(String, String, x),
        "RoleMappings": x => jsonP.readMap(String, toRoleMapping, x),
      },
    }, await resp.json());
  }

  async getOpenIdToken(
    {abortSignal, ...params}: RequestConfig & s.GetOpenIdTokenInput,
  ): Promise<s.GetOpenIdTokenResponse> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
    };
    const resp = await this.#client.performRequest({
      skipSigning: true,
      abortSignal, body,
      action: "GetOpenIdToken",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "Token": "s",
      },
    }, await resp.json());
  }

  async getOpenIdTokenForDeveloperIdentity(
    {abortSignal, ...params}: RequestConfig & s.GetOpenIdTokenForDeveloperIdentityInput,
  ): Promise<s.GetOpenIdTokenForDeveloperIdentityResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
      PrincipalTags: params["PrincipalTags"],
      TokenDuration: params["TokenDuration"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOpenIdTokenForDeveloperIdentity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "Token": "s",
      },
    }, await resp.json());
  }

  async getPrincipalTagAttributeMap(
    {abortSignal, ...params}: RequestConfig & s.GetPrincipalTagAttributeMapInput,
  ): Promise<s.GetPrincipalTagAttributeMapResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityProviderName: params["IdentityProviderName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPrincipalTagAttributeMap",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "IdentityProviderName": "s",
        "UseDefaults": "b",
        "PrincipalTags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async listIdentities(
    {abortSignal, ...params}: RequestConfig & s.ListIdentitiesInput,
  ): Promise<s.ListIdentitiesResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      HideDisabled: params["HideDisabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIdentities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "Identities": [toIdentityDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIdentityPools(
    {abortSignal, ...params}: RequestConfig & s.ListIdentityPoolsInput,
  ): Promise<s.ListIdentityPoolsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListIdentityPools",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPools": [toIdentityPoolShortDescription],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceInput,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async lookupDeveloperIdentity(
    {abortSignal, ...params}: RequestConfig & s.LookupDeveloperIdentityInput,
  ): Promise<s.LookupDeveloperIdentityResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityId: params["IdentityId"],
      DeveloperUserIdentifier: params["DeveloperUserIdentifier"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "LookupDeveloperIdentity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
        "DeveloperUserIdentifierList": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async mergeDeveloperIdentities(
    {abortSignal, ...params}: RequestConfig & s.MergeDeveloperIdentitiesInput,
  ): Promise<s.MergeDeveloperIdentitiesResponse> {
    const body: jsonP.JSONObject = {
      SourceUserIdentifier: params["SourceUserIdentifier"],
      DestinationUserIdentifier: params["DestinationUserIdentifier"],
      DeveloperProviderName: params["DeveloperProviderName"],
      IdentityPoolId: params["IdentityPoolId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "MergeDeveloperIdentities",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityId": "s",
      },
    }, await resp.json());
  }

  async setIdentityPoolRoles(
    {abortSignal, ...params}: RequestConfig & s.SetIdentityPoolRolesInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      Roles: params["Roles"],
      RoleMappings: jsonP.serializeMap(params["RoleMappings"], x => fromRoleMapping(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetIdentityPoolRoles",
    });
    await resp.text();
  }

  async setPrincipalTagAttributeMap(
    {abortSignal, ...params}: RequestConfig & s.SetPrincipalTagAttributeMapInput,
  ): Promise<s.SetPrincipalTagAttributeMapResponse> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityProviderName: params["IdentityProviderName"],
      UseDefaults: params["UseDefaults"],
      PrincipalTags: params["PrincipalTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetPrincipalTagAttributeMap",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IdentityPoolId": "s",
        "IdentityProviderName": "s",
        "UseDefaults": "b",
        "PrincipalTags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    await resp.text();
  }

  async unlinkDeveloperIdentity(
    {abortSignal, ...params}: RequestConfig & s.UnlinkDeveloperIdentityInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      IdentityPoolId: params["IdentityPoolId"],
      DeveloperProviderName: params["DeveloperProviderName"],
      DeveloperUserIdentifier: params["DeveloperUserIdentifier"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnlinkDeveloperIdentity",
    });
    await resp.text();
  }

  async unlinkIdentity(
    {abortSignal, ...params}: RequestConfig & s.UnlinkIdentityInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      IdentityId: params["IdentityId"],
      Logins: params["Logins"],
      LoginsToRemove: params["LoginsToRemove"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UnlinkIdentity",
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceInput,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    await resp.text();
  }

  async updateIdentityPool(
    {abortSignal, ...params}: RequestConfig & s.IdentityPool,
  ): Promise<s.IdentityPool> {
    const body: jsonP.JSONObject = {
      IdentityPoolId: params["IdentityPoolId"],
      IdentityPoolName: params["IdentityPoolName"],
      AllowUnauthenticatedIdentities: params["AllowUnauthenticatedIdentities"],
      AllowClassicFlow: params["AllowClassicFlow"],
      SupportedLoginProviders: params["SupportedLoginProviders"],
      DeveloperProviderName: params["DeveloperProviderName"],
      OpenIdConnectProviderARNs: params["OpenIdConnectProviderARNs"],
      CognitoIdentityProviders: params["CognitoIdentityProviders"]?.map(x => fromCognitoIdentityProvider(x)),
      SamlProviderARNs: params["SamlProviderARNs"],
      IdentityPoolTags: params["IdentityPoolTags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIdentityPool",
    });
    return toIdentityPool(await resp.json());
  }

}

function fromIdentityPool(input?: s.IdentityPool | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IdentityPoolId: input["IdentityPoolId"],
    IdentityPoolName: input["IdentityPoolName"],
    AllowUnauthenticatedIdentities: input["AllowUnauthenticatedIdentities"],
    AllowClassicFlow: input["AllowClassicFlow"],
    SupportedLoginProviders: input["SupportedLoginProviders"],
    DeveloperProviderName: input["DeveloperProviderName"],
    OpenIdConnectProviderARNs: input["OpenIdConnectProviderARNs"],
    CognitoIdentityProviders: input["CognitoIdentityProviders"]?.map(x => fromCognitoIdentityProvider(x)),
    SamlProviderARNs: input["SamlProviderARNs"],
    IdentityPoolTags: input["IdentityPoolTags"],
  }
}
function toIdentityPool(root: jsonP.JSONValue): s.IdentityPool {
  return jsonP.readObj({
    required: {
      "IdentityPoolId": "s",
      "IdentityPoolName": "s",
      "AllowUnauthenticatedIdentities": "b",
    },
    optional: {
      "AllowClassicFlow": "b",
      "SupportedLoginProviders": x => jsonP.readMap(String, String, x),
      "DeveloperProviderName": "s",
      "OpenIdConnectProviderARNs": ["s"],
      "CognitoIdentityProviders": [toCognitoIdentityProvider],
      "SamlProviderARNs": ["s"],
      "IdentityPoolTags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toIdentityDescription(root: jsonP.JSONValue): s.IdentityDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "Logins": ["s"],
      "CreationDate": "d",
      "LastModifiedDate": "d",
    },
  }, root);
}

function fromCognitoIdentityProvider(input?: s.CognitoIdentityProvider | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ProviderName: input["ProviderName"],
    ClientId: input["ClientId"],
    ServerSideTokenCheck: input["ServerSideTokenCheck"],
  }
}
function toCognitoIdentityProvider(root: jsonP.JSONValue): s.CognitoIdentityProvider {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProviderName": "s",
      "ClientId": "s",
      "ServerSideTokenCheck": "b",
    },
  }, root);
}

function fromRoleMapping(input?: s.RoleMapping | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    AmbiguousRoleResolution: input["AmbiguousRoleResolution"],
    RulesConfiguration: fromRulesConfigurationType(input["RulesConfiguration"]),
  }
}
function toRoleMapping(root: jsonP.JSONValue): s.RoleMapping {
  return jsonP.readObj({
    required: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.RoleMappingType>(x),
    },
    optional: {
      "AmbiguousRoleResolution": (x: jsonP.JSONValue) => cmnP.readEnum<s.AmbiguousRoleResolutionType>(x),
      "RulesConfiguration": toRulesConfigurationType,
    },
  }, root);
}

function fromRulesConfigurationType(input?: s.RulesConfigurationType | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Rules: input["Rules"]?.map(x => fromMappingRule(x)),
  }
}
function toRulesConfigurationType(root: jsonP.JSONValue): s.RulesConfigurationType {
  return jsonP.readObj({
    required: {
      "Rules": [toMappingRule],
    },
    optional: {},
  }, root);
}

function fromMappingRule(input?: s.MappingRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Claim: input["Claim"],
    MatchType: input["MatchType"],
    Value: input["Value"],
    RoleARN: input["RoleARN"],
  }
}
function toMappingRule(root: jsonP.JSONValue): s.MappingRule {
  return jsonP.readObj({
    required: {
      "Claim": "s",
      "MatchType": (x: jsonP.JSONValue) => cmnP.readEnum<s.MappingRuleMatchType>(x),
      "Value": "s",
      "RoleARN": "s",
    },
    optional: {},
  }, root);
}

function toUnprocessedIdentityId(root: jsonP.JSONValue): s.UnprocessedIdentityId {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
    },
  }, root);
}

function toCredentials(root: jsonP.JSONValue): s.Credentials {
  return jsonP.readObj({
    required: {},
    optional: {
      "AccessKeyId": "s",
      "SecretKey": "s",
      "SessionToken": "s",
      "Expiration": "d",
    },
  }, root);
}

function toIdentityPoolShortDescription(root: jsonP.JSONValue): s.IdentityPoolShortDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "IdentityPoolId": "s",
      "IdentityPoolName": "s",
    },
  }, root);
}
