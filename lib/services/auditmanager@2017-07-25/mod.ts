// Autogenerated API client for: AWS Audit Manager

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class AuditManager {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AuditManager.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "auditmanager",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS Audit Manager",
    "serviceId": "AuditManager",
    "signatureVersion": "v4",
    "signingName": "auditmanager",
    "uid": "auditmanager-2017-07-25"
  };

  async associateAssessmentReportEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & AssociateAssessmentReportEvidenceFolderRequest,
  ): Promise<AssociateAssessmentReportEvidenceFolderResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateAssessmentReportEvidenceFolder",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/associateToAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchAssociateAssessmentReportEvidence(
    {abortSignal, ...params}: RequestConfig & BatchAssociateAssessmentReportEvidenceRequest,
  ): Promise<BatchAssociateAssessmentReportEvidenceResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
      evidenceIds: params["evidenceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateAssessmentReportEvidence",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/batchAssociateToAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceIds": ["s"],
        "errors": [toAssessmentReportEvidenceError],
      },
    }, await resp.json());
  }

  async batchCreateDelegationByAssessment(
    {abortSignal, ...params}: RequestConfig & BatchCreateDelegationByAssessmentRequest,
  ): Promise<BatchCreateDelegationByAssessmentResponse> {
    const body: jsonP.JSONObject = {
      createDelegationRequests: params["createDelegationRequests"]?.map(x => fromCreateDelegationRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchCreateDelegationByAssessment",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/delegations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "delegations": [toDelegation],
        "errors": [toBatchCreateDelegationByAssessmentError],
      },
    }, await resp.json());
  }

  async batchDeleteDelegationByAssessment(
    {abortSignal, ...params}: RequestConfig & BatchDeleteDelegationByAssessmentRequest,
  ): Promise<BatchDeleteDelegationByAssessmentResponse> {
    const body: jsonP.JSONObject = {
      delegationIds: params["delegationIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeleteDelegationByAssessment",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/delegations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toBatchDeleteDelegationByAssessmentError],
      },
    }, await resp.json());
  }

  async batchDisassociateAssessmentReportEvidence(
    {abortSignal, ...params}: RequestConfig & BatchDisassociateAssessmentReportEvidenceRequest,
  ): Promise<BatchDisassociateAssessmentReportEvidenceResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
      evidenceIds: params["evidenceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateAssessmentReportEvidence",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/batchDisassociateFromAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceIds": ["s"],
        "errors": [toAssessmentReportEvidenceError],
      },
    }, await resp.json());
  }

  async batchImportEvidenceToAssessmentControl(
    {abortSignal, ...params}: RequestConfig & BatchImportEvidenceToAssessmentControlRequest,
  ): Promise<BatchImportEvidenceToAssessmentControlResponse> {
    const body: jsonP.JSONObject = {
      manualEvidence: params["manualEvidence"]?.map(x => fromManualEvidence(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchImportEvidenceToAssessmentControl",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/controls/${params["controlId"]}/evidence`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toBatchImportEvidenceToAssessmentControlError],
      },
    }, await resp.json());
  }

  async createAssessment(
    {abortSignal, ...params}: RequestConfig & CreateAssessmentRequest,
  ): Promise<CreateAssessmentResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      assessmentReportsDestination: fromAssessmentReportsDestination(params["assessmentReportsDestination"]),
      scope: fromScope(params["scope"]),
      roles: params["roles"]?.map(x => fromRole(x)),
      frameworkId: params["frameworkId"],
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessment",
      requestUri: "/assessments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async createAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & CreateAssessmentFrameworkRequest,
  ): Promise<CreateAssessmentFrameworkResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      complianceType: params["complianceType"],
      controlSets: params["controlSets"]?.map(x => fromCreateAssessmentFrameworkControlSet(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessmentFramework",
      requestUri: "/assessmentFrameworks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "framework": toFramework,
      },
    }, await resp.json());
  }

  async createAssessmentReport(
    {abortSignal, ...params}: RequestConfig & CreateAssessmentReportRequest,
  ): Promise<CreateAssessmentReportResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessmentReport",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/reports`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessmentReport": toAssessmentReport,
      },
    }, await resp.json());
  }

  async createControl(
    {abortSignal, ...params}: RequestConfig & CreateControlRequest,
  ): Promise<CreateControlResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      testingInformation: params["testingInformation"],
      actionPlanTitle: params["actionPlanTitle"],
      actionPlanInstructions: params["actionPlanInstructions"],
      controlMappingSources: params["controlMappingSources"]?.map(x => fromCreateControlMappingSource(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateControl",
      requestUri: "/controls",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toControl,
      },
    }, await resp.json());
  }

  async deleteAssessment(
    {abortSignal, ...params}: RequestConfig & DeleteAssessmentRequest,
  ): Promise<DeleteAssessmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAssessment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & DeleteAssessmentFrameworkRequest,
  ): Promise<DeleteAssessmentFrameworkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAssessmentFramework",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assessmentFrameworks/${params["frameworkId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAssessmentReport(
    {abortSignal, ...params}: RequestConfig & DeleteAssessmentReportRequest,
  ): Promise<DeleteAssessmentReportResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAssessmentReport",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/reports/${params["assessmentReportId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteControl(
    {abortSignal, ...params}: RequestConfig & DeleteControlRequest,
  ): Promise<DeleteControlResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteControl",
      method: "DELETE",
      requestUri: cmnP.encodePath`/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterAccount(
    {abortSignal, ...params}: RequestConfig & DeregisterAccountRequest = {},
  ): Promise<DeregisterAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeregisterAccount",
      requestUri: "/account/deregisterAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<AccountStatus>(x),
      },
    }, await resp.json());
  }

  async deregisterOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & DeregisterOrganizationAdminAccountRequest = {},
  ): Promise<DeregisterOrganizationAdminAccountResponse> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["adminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterOrganizationAdminAccount",
      requestUri: "/account/deregisterOrganizationAdminAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateAssessmentReportEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & DisassociateAssessmentReportEvidenceFolderRequest,
  ): Promise<DisassociateAssessmentReportEvidenceFolderResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateAssessmentReportEvidenceFolder",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/disassociateFromAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccountStatus(
    {abortSignal, ...params}: RequestConfig & GetAccountStatusRequest = {},
  ): Promise<GetAccountStatusResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccountStatus",
      method: "GET",
      requestUri: "/account/status",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<AccountStatus>(x),
      },
    }, await resp.json());
  }

  async getAssessment(
    {abortSignal, ...params}: RequestConfig & GetAssessmentRequest,
  ): Promise<GetAssessmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssessment",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async getAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & GetAssessmentFrameworkRequest,
  ): Promise<GetAssessmentFrameworkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssessmentFramework",
      method: "GET",
      requestUri: cmnP.encodePath`/assessmentFrameworks/${params["frameworkId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "framework": toFramework,
      },
    }, await resp.json());
  }

  async getAssessmentReportUrl(
    {abortSignal, ...params}: RequestConfig & GetAssessmentReportUrlRequest,
  ): Promise<GetAssessmentReportUrlResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssessmentReportUrl",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/reports/${params["assessmentReportId"]}/url`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "preSignedUrl": toURL,
      },
    }, await resp.json());
  }

  async getChangeLogs(
    {abortSignal, ...params}: RequestConfig & GetChangeLogsRequest,
  ): Promise<GetChangeLogsResponse> {
    const query = new URLSearchParams;
    if (params["controlSetId"] != null) query.set("controlSetId", params["controlSetId"]?.toString() ?? "");
    if (params["controlId"] != null) query.set("controlId", params["controlId"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetChangeLogs",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/changelogs`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "changeLogs": [toChangeLog],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getControl(
    {abortSignal, ...params}: RequestConfig & GetControlRequest,
  ): Promise<GetControlResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetControl",
      method: "GET",
      requestUri: cmnP.encodePath`/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toControl,
      },
    }, await resp.json());
  }

  async getDelegations(
    {abortSignal, ...params}: RequestConfig & GetDelegationsRequest = {},
  ): Promise<GetDelegationsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDelegations",
      method: "GET",
      requestUri: "/delegations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "delegations": [toDelegationMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEvidence(
    {abortSignal, ...params}: RequestConfig & GetEvidenceRequest,
  ): Promise<GetEvidenceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEvidence",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/evidenceFolders/${params["evidenceFolderId"]}/evidence/${params["evidenceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidence": toEvidence,
      },
    }, await resp.json());
  }

  async getEvidenceByEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & GetEvidenceByEvidenceFolderRequest,
  ): Promise<GetEvidenceByEvidenceFolderResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetEvidenceByEvidenceFolder",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/evidenceFolders/${params["evidenceFolderId"]}/evidence`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidence": [toEvidence],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & GetEvidenceFolderRequest,
  ): Promise<GetEvidenceFolderResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEvidenceFolder",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/evidenceFolders/${params["evidenceFolderId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceFolder": toAssessmentEvidenceFolder,
      },
    }, await resp.json());
  }

  async getEvidenceFoldersByAssessment(
    {abortSignal, ...params}: RequestConfig & GetEvidenceFoldersByAssessmentRequest,
  ): Promise<GetEvidenceFoldersByAssessmentResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetEvidenceFoldersByAssessment",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/evidenceFolders`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceFolders": [toAssessmentEvidenceFolder],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEvidenceFoldersByAssessmentControl(
    {abortSignal, ...params}: RequestConfig & GetEvidenceFoldersByAssessmentControlRequest,
  ): Promise<GetEvidenceFoldersByAssessmentControlResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetEvidenceFoldersByAssessmentControl",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/evidenceFolders-by-assessment-control/${params["controlSetId"]}/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceFolders": [toAssessmentEvidenceFolder],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & GetOrganizationAdminAccountRequest = {},
  ): Promise<GetOrganizationAdminAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetOrganizationAdminAccount",
      method: "GET",
      requestUri: "/account/organizationAdminAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "adminAccountId": "s",
        "organizationId": "s",
      },
    }, await resp.json());
  }

  async getServicesInScope(
    {abortSignal, ...params}: RequestConfig & GetServicesInScopeRequest = {},
  ): Promise<GetServicesInScopeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetServicesInScope",
      method: "GET",
      requestUri: "/services",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "serviceMetadata": [toServiceMetadata],
      },
    }, await resp.json());
  }

  async getSettings(
    {abortSignal, ...params}: RequestConfig & GetSettingsRequest,
  ): Promise<GetSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/settings/${params["attribute"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "settings": toSettings,
      },
    }, await resp.json());
  }

  async listAssessmentFrameworks(
    {abortSignal, ...params}: RequestConfig & ListAssessmentFrameworksRequest,
  ): Promise<ListAssessmentFrameworksResponse> {
    const query = new URLSearchParams;
    query.set("frameworkType", params["frameworkType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssessmentFrameworks",
      method: "GET",
      requestUri: "/assessmentFrameworks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "frameworkMetadataList": [toAssessmentFrameworkMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssessmentReports(
    {abortSignal, ...params}: RequestConfig & ListAssessmentReportsRequest = {},
  ): Promise<ListAssessmentReportsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssessmentReports",
      method: "GET",
      requestUri: "/assessmentReports",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessmentReports": [toAssessmentReportMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssessments(
    {abortSignal, ...params}: RequestConfig & ListAssessmentsRequest = {},
  ): Promise<ListAssessmentsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssessments",
      method: "GET",
      requestUri: "/assessments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessmentMetadata": [toAssessmentMetadataItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listControls(
    {abortSignal, ...params}: RequestConfig & ListControlsRequest,
  ): Promise<ListControlsResponse> {
    const query = new URLSearchParams;
    query.set("controlType", params["controlType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListControls",
      method: "GET",
      requestUri: "/controls",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "controlMetadataList": [toControlMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listKeywordsForDataSource(
    {abortSignal, ...params}: RequestConfig & ListKeywordsForDataSourceRequest,
  ): Promise<ListKeywordsForDataSourceResponse> {
    const query = new URLSearchParams;
    query.set("source", params["source"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListKeywordsForDataSource",
      method: "GET",
      requestUri: "/dataSourceKeywords",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "keywords": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listNotifications(
    {abortSignal, ...params}: RequestConfig & ListNotificationsRequest = {},
  ): Promise<ListNotificationsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListNotifications",
      method: "GET",
      requestUri: "/notifications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "notifications": [toNotification],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async registerAccount(
    {abortSignal, ...params}: RequestConfig & RegisterAccountRequest = {},
  ): Promise<RegisterAccountResponse> {
    const body: jsonP.JSONObject = {
      kmsKey: params["kmsKey"],
      delegatedAdminAccount: params["delegatedAdminAccount"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterAccount",
      requestUri: "/account/registerAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<AccountStatus>(x),
      },
    }, await resp.json());
  }

  async registerOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & RegisterOrganizationAdminAccountRequest,
  ): Promise<RegisterOrganizationAdminAccountResponse> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["adminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterOrganizationAdminAccount",
      requestUri: "/account/registerOrganizationAdminAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "adminAccountId": "s",
        "organizationId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAssessment(
    {abortSignal, ...params}: RequestConfig & UpdateAssessmentRequest,
  ): Promise<UpdateAssessmentResponse> {
    const body: jsonP.JSONObject = {
      assessmentName: params["assessmentName"],
      assessmentDescription: params["assessmentDescription"],
      scope: fromScope(params["scope"]),
      assessmentReportsDestination: fromAssessmentReportsDestination(params["assessmentReportsDestination"]),
      roles: params["roles"]?.map(x => fromRole(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessment",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async updateAssessmentControl(
    {abortSignal, ...params}: RequestConfig & UpdateAssessmentControlRequest,
  ): Promise<UpdateAssessmentControlResponse> {
    const body: jsonP.JSONObject = {
      controlStatus: params["controlStatus"],
      commentBody: params["commentBody"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentControl",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toAssessmentControl,
      },
    }, await resp.json());
  }

  async updateAssessmentControlSetStatus(
    {abortSignal, ...params}: RequestConfig & UpdateAssessmentControlSetStatusRequest,
  ): Promise<UpdateAssessmentControlSetStatusResponse> {
    const body: jsonP.JSONObject = {
      status: params["status"],
      comment: params["comment"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentControlSetStatus",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/status`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "controlSet": toAssessmentControlSet,
      },
    }, await resp.json());
  }

  async updateAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & UpdateAssessmentFrameworkRequest,
  ): Promise<UpdateAssessmentFrameworkResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      complianceType: params["complianceType"],
      controlSets: params["controlSets"]?.map(x => fromUpdateAssessmentFrameworkControlSet(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentFramework",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessmentFrameworks/${params["frameworkId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "framework": toFramework,
      },
    }, await resp.json());
  }

  async updateAssessmentStatus(
    {abortSignal, ...params}: RequestConfig & UpdateAssessmentStatusRequest,
  ): Promise<UpdateAssessmentStatusResponse> {
    const body: jsonP.JSONObject = {
      status: params["status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentStatus",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/status`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async updateControl(
    {abortSignal, ...params}: RequestConfig & UpdateControlRequest,
  ): Promise<UpdateControlResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      testingInformation: params["testingInformation"],
      actionPlanTitle: params["actionPlanTitle"],
      actionPlanInstructions: params["actionPlanInstructions"],
      controlMappingSources: params["controlMappingSources"]?.map(x => fromControlMappingSource(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateControl",
      method: "PUT",
      requestUri: cmnP.encodePath`/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toControl,
      },
    }, await resp.json());
  }

  async updateSettings(
    {abortSignal, ...params}: RequestConfig & UpdateSettingsRequest = {},
  ): Promise<UpdateSettingsResponse> {
    const body: jsonP.JSONObject = {
      snsTopic: params["snsTopic"],
      defaultAssessmentReportsDestination: fromAssessmentReportsDestination(params["defaultAssessmentReportsDestination"]),
      defaultProcessOwners: params["defaultProcessOwners"]?.map(x => fromRole(x)),
      kmsKey: params["kmsKey"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSettings",
      method: "PUT",
      requestUri: "/settings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "settings": toSettings,
      },
    }, await resp.json());
  }

  async validateAssessmentReportIntegrity(
    {abortSignal, ...params}: RequestConfig & ValidateAssessmentReportIntegrityRequest,
  ): Promise<ValidateAssessmentReportIntegrityResponse> {
    const body: jsonP.JSONObject = {
      s3RelativePath: params["s3RelativePath"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ValidateAssessmentReportIntegrity",
      requestUri: "/assessmentReports/integrity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "signatureValid": "b",
        "signatureAlgorithm": "s",
        "signatureDateTime": "s",
        "signatureKeyId": "s",
        "validationErrors": ["s"],
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociateAssessmentReportEvidenceFolderRequest {
  assessmentId: string;
  evidenceFolderId: string;
}

// refs: 1 - tags: named, input
export interface BatchAssociateAssessmentReportEvidenceRequest {
  assessmentId: string;
  evidenceFolderId: string;
  evidenceIds: string[];
}

// refs: 1 - tags: named, input
export interface BatchCreateDelegationByAssessmentRequest {
  createDelegationRequests: CreateDelegationRequest[];
  assessmentId: string;
}

// refs: 1 - tags: named, input
export interface BatchDeleteDelegationByAssessmentRequest {
  delegationIds: string[];
  assessmentId: string;
}

// refs: 1 - tags: named, input
export interface BatchDisassociateAssessmentReportEvidenceRequest {
  assessmentId: string;
  evidenceFolderId: string;
  evidenceIds: string[];
}

// refs: 1 - tags: named, input
export interface BatchImportEvidenceToAssessmentControlRequest {
  assessmentId: string;
  controlSetId: string;
  controlId: string;
  manualEvidence: ManualEvidence[];
}

// refs: 1 - tags: named, input
export interface CreateAssessmentRequest {
  name: string;
  description?: string | null;
  assessmentReportsDestination: AssessmentReportsDestination;
  scope: Scope;
  roles: Role[];
  frameworkId: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateAssessmentFrameworkRequest {
  name: string;
  description?: string | null;
  complianceType?: string | null;
  controlSets: CreateAssessmentFrameworkControlSet[];
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateAssessmentReportRequest {
  name: string;
  description?: string | null;
  assessmentId: string;
}

// refs: 1 - tags: named, input
export interface CreateControlRequest {
  name: string;
  description?: string | null;
  testingInformation?: string | null;
  actionPlanTitle?: string | null;
  actionPlanInstructions?: string | null;
  controlMappingSources: CreateControlMappingSource[];
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteAssessmentRequest {
  assessmentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteAssessmentFrameworkRequest {
  frameworkId: string;
}

// refs: 1 - tags: named, input
export interface DeleteAssessmentReportRequest {
  assessmentId: string;
  assessmentReportId: string;
}

// refs: 1 - tags: named, input
export interface DeleteControlRequest {
  controlId: string;
}

// refs: 1 - tags: named, input
export interface DeregisterAccountRequest {
}

// refs: 1 - tags: named, input
export interface DeregisterOrganizationAdminAccountRequest {
  adminAccountId?: string | null;
}

// refs: 1 - tags: named, input
export interface DisassociateAssessmentReportEvidenceFolderRequest {
  assessmentId: string;
  evidenceFolderId: string;
}

// refs: 1 - tags: named, input
export interface GetAccountStatusRequest {
}

// refs: 1 - tags: named, input
export interface GetAssessmentRequest {
  assessmentId: string;
}

// refs: 1 - tags: named, input
export interface GetAssessmentFrameworkRequest {
  frameworkId: string;
}

// refs: 1 - tags: named, input
export interface GetAssessmentReportUrlRequest {
  assessmentReportId: string;
  assessmentId: string;
}

// refs: 1 - tags: named, input
export interface GetChangeLogsRequest {
  assessmentId: string;
  controlSetId?: string | null;
  controlId?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetControlRequest {
  controlId: string;
}

// refs: 1 - tags: named, input
export interface GetDelegationsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetEvidenceRequest {
  assessmentId: string;
  controlSetId: string;
  evidenceFolderId: string;
  evidenceId: string;
}

// refs: 1 - tags: named, input
export interface GetEvidenceByEvidenceFolderRequest {
  assessmentId: string;
  controlSetId: string;
  evidenceFolderId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetEvidenceFolderRequest {
  assessmentId: string;
  controlSetId: string;
  evidenceFolderId: string;
}

// refs: 1 - tags: named, input
export interface GetEvidenceFoldersByAssessmentRequest {
  assessmentId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetEvidenceFoldersByAssessmentControlRequest {
  assessmentId: string;
  controlSetId: string;
  controlId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetOrganizationAdminAccountRequest {
}

// refs: 1 - tags: named, input
export interface GetServicesInScopeRequest {
}

// refs: 1 - tags: named, input
export interface GetSettingsRequest {
  attribute: SettingAttribute;
}

// refs: 1 - tags: named, input
export interface ListAssessmentFrameworksRequest {
  frameworkType: FrameworkType;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssessmentReportsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAssessmentsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListControlsRequest {
  controlType: ControlType;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListKeywordsForDataSourceRequest {
  source: SourceType;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListNotificationsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface RegisterAccountRequest {
  kmsKey?: string | null;
  delegatedAdminAccount?: string | null;
}

// refs: 1 - tags: named, input
export interface RegisterOrganizationAdminAccountRequest {
  adminAccountId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAssessmentRequest {
  assessmentId: string;
  assessmentName?: string | null;
  assessmentDescription?: string | null;
  scope: Scope;
  assessmentReportsDestination?: AssessmentReportsDestination | null;
  roles?: Role[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateAssessmentControlRequest {
  assessmentId: string;
  controlSetId: string;
  controlId: string;
  controlStatus?: ControlStatus | null;
  commentBody?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAssessmentControlSetStatusRequest {
  assessmentId: string;
  controlSetId: string;
  status: ControlSetStatus;
  comment: string;
}

// refs: 1 - tags: named, input
export interface UpdateAssessmentFrameworkRequest {
  frameworkId: string;
  name: string;
  description?: string | null;
  complianceType?: string | null;
  controlSets: UpdateAssessmentFrameworkControlSet[];
}

// refs: 1 - tags: named, input
export interface UpdateAssessmentStatusRequest {
  assessmentId: string;
  status: AssessmentStatus;
}

// refs: 1 - tags: named, input
export interface UpdateControlRequest {
  controlId: string;
  name: string;
  description?: string | null;
  testingInformation?: string | null;
  actionPlanTitle?: string | null;
  actionPlanInstructions?: string | null;
  controlMappingSources: ControlMappingSource[];
}

// refs: 1 - tags: named, input
export interface UpdateSettingsRequest {
  snsTopic?: string | null;
  defaultAssessmentReportsDestination?: AssessmentReportsDestination | null;
  defaultProcessOwners?: Role[] | null;
  kmsKey?: string | null;
}

// refs: 1 - tags: named, input
export interface ValidateAssessmentReportIntegrityRequest {
  s3RelativePath: string;
}

// refs: 1 - tags: named, output
export interface AssociateAssessmentReportEvidenceFolderResponse {
}

// refs: 1 - tags: named, output
export interface BatchAssociateAssessmentReportEvidenceResponse {
  evidenceIds?: string[] | null;
  errors?: AssessmentReportEvidenceError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchCreateDelegationByAssessmentResponse {
  delegations?: Delegation[] | null;
  errors?: BatchCreateDelegationByAssessmentError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchDeleteDelegationByAssessmentResponse {
  errors?: BatchDeleteDelegationByAssessmentError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchDisassociateAssessmentReportEvidenceResponse {
  evidenceIds?: string[] | null;
  errors?: AssessmentReportEvidenceError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchImportEvidenceToAssessmentControlResponse {
  errors?: BatchImportEvidenceToAssessmentControlError[] | null;
}

// refs: 1 - tags: named, output
export interface CreateAssessmentResponse {
  assessment?: Assessment | null;
}

// refs: 1 - tags: named, output
export interface CreateAssessmentFrameworkResponse {
  framework?: Framework | null;
}

// refs: 1 - tags: named, output
export interface CreateAssessmentReportResponse {
  assessmentReport?: AssessmentReport | null;
}

// refs: 1 - tags: named, output
export interface CreateControlResponse {
  control?: Control | null;
}

// refs: 1 - tags: named, output
export interface DeleteAssessmentResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAssessmentFrameworkResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAssessmentReportResponse {
}

// refs: 1 - tags: named, output
export interface DeleteControlResponse {
}

// refs: 1 - tags: named, output
export interface DeregisterAccountResponse {
  status?: AccountStatus | null;
}

// refs: 1 - tags: named, output
export interface DeregisterOrganizationAdminAccountResponse {
}

// refs: 1 - tags: named, output
export interface DisassociateAssessmentReportEvidenceFolderResponse {
}

// refs: 1 - tags: named, output
export interface GetAccountStatusResponse {
  status?: AccountStatus | null;
}

// refs: 1 - tags: named, output
export interface GetAssessmentResponse {
  assessment?: Assessment | null;
}

// refs: 1 - tags: named, output
export interface GetAssessmentFrameworkResponse {
  framework?: Framework | null;
}

// refs: 1 - tags: named, output
export interface GetAssessmentReportUrlResponse {
  preSignedUrl?: URL | null;
}

// refs: 1 - tags: named, output
export interface GetChangeLogsResponse {
  changeLogs?: ChangeLog[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetControlResponse {
  control?: Control | null;
}

// refs: 1 - tags: named, output
export interface GetDelegationsResponse {
  delegations?: DelegationMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetEvidenceResponse {
  evidence?: Evidence | null;
}

// refs: 1 - tags: named, output
export interface GetEvidenceByEvidenceFolderResponse {
  evidence?: Evidence[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetEvidenceFolderResponse {
  evidenceFolder?: AssessmentEvidenceFolder | null;
}

// refs: 1 - tags: named, output
export interface GetEvidenceFoldersByAssessmentResponse {
  evidenceFolders?: AssessmentEvidenceFolder[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetEvidenceFoldersByAssessmentControlResponse {
  evidenceFolders?: AssessmentEvidenceFolder[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetOrganizationAdminAccountResponse {
  adminAccountId?: string | null;
  organizationId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetServicesInScopeResponse {
  serviceMetadata?: ServiceMetadata[] | null;
}

// refs: 1 - tags: named, output
export interface GetSettingsResponse {
  settings?: Settings | null;
}

// refs: 1 - tags: named, output
export interface ListAssessmentFrameworksResponse {
  frameworkMetadataList?: AssessmentFrameworkMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssessmentReportsResponse {
  assessmentReports?: AssessmentReportMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAssessmentsResponse {
  assessmentMetadata?: AssessmentMetadataItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListControlsResponse {
  controlMetadataList?: ControlMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListKeywordsForDataSourceResponse {
  keywords?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListNotificationsResponse {
  notifications?: Notification[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface RegisterAccountResponse {
  status?: AccountStatus | null;
}

// refs: 1 - tags: named, output
export interface RegisterOrganizationAdminAccountResponse {
  adminAccountId?: string | null;
  organizationId?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAssessmentResponse {
  assessment?: Assessment | null;
}

// refs: 1 - tags: named, output
export interface UpdateAssessmentControlResponse {
  control?: AssessmentControl | null;
}

// refs: 1 - tags: named, output
export interface UpdateAssessmentControlSetStatusResponse {
  controlSet?: AssessmentControlSet | null;
}

// refs: 1 - tags: named, output
export interface UpdateAssessmentFrameworkResponse {
  framework?: Framework | null;
}

// refs: 1 - tags: named, output
export interface UpdateAssessmentStatusResponse {
  assessment?: Assessment | null;
}

// refs: 1 - tags: named, output
export interface UpdateControlResponse {
  control?: Control | null;
}

// refs: 1 - tags: named, output
export interface UpdateSettingsResponse {
  settings?: Settings | null;
}

// refs: 1 - tags: named, output
export interface ValidateAssessmentReportIntegrityResponse {
  signatureValid?: boolean | null;
  signatureAlgorithm?: string | null;
  signatureDateTime?: string | null;
  signatureKeyId?: string | null;
  validationErrors?: string[] | null;
}

// refs: 2 - tags: input, named, interface, output
export interface CreateDelegationRequest {
  comment?: string | null;
  controlSetId?: string | null;
  roleArn?: string | null;
  roleType?: RoleType | null;
}
function fromCreateDelegationRequest(input?: CreateDelegationRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    comment: input["comment"],
    controlSetId: input["controlSetId"],
    roleArn: input["roleArn"],
    roleType: input["roleType"],
  }
}
function toCreateDelegationRequest(root: jsonP.JSONValue): CreateDelegationRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "comment": "s",
      "controlSetId": "s",
      "roleArn": "s",
      "roleType": (x: jsonP.JSONValue) => cmnP.readEnum<RoleType>(x),
    },
  }, root);
}

// refs: 28 - tags: input, named, enum, output
export type RoleType =
| "PROCESS_OWNER"
| "RESOURCE_OWNER"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ManualEvidence {
  s3ResourcePath?: string | null;
}
function fromManualEvidence(input?: ManualEvidence | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3ResourcePath: input["s3ResourcePath"],
  }
}
function toManualEvidence(root: jsonP.JSONValue): ManualEvidence {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3ResourcePath": "s",
    },
  }, root);
}

// refs: 9 - tags: input, named, interface, output
export interface AssessmentReportsDestination {
  destinationType?: AssessmentReportDestinationType | null;
  destination?: string | null;
}
function fromAssessmentReportsDestination(input?: AssessmentReportsDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    destinationType: input["destinationType"],
    destination: input["destination"],
  }
}
function toAssessmentReportsDestination(root: jsonP.JSONValue): AssessmentReportsDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "destinationType": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentReportDestinationType>(x),
      "destination": "s",
    },
  }, root);
}

// refs: 9 - tags: input, named, enum, output
export type AssessmentReportDestinationType =
| "S3"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface Scope {
  awsAccounts?: AWSAccount[] | null;
  awsServices?: AWSService[] | null;
}
function fromScope(input?: Scope | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    awsAccounts: input["awsAccounts"]?.map(x => fromAWSAccount(x)),
    awsServices: input["awsServices"]?.map(x => fromAWSService(x)),
  }
}
function toScope(root: jsonP.JSONValue): Scope {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsAccounts": [toAWSAccount],
      "awsServices": [toAWSService],
    },
  }, root);
}

// refs: 10 - tags: input, named, interface, output
export interface AWSAccount {
  id?: string | null;
  emailAddress?: string | null;
  name?: string | null;
}
function fromAWSAccount(input?: AWSAccount | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    emailAddress: input["emailAddress"],
    name: input["name"],
  }
}
function toAWSAccount(root: jsonP.JSONValue): AWSAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "emailAddress": "s",
      "name": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface AWSService {
  serviceName?: string | null;
}
function fromAWSService(input?: AWSService | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    serviceName: input["serviceName"],
  }
}
function toAWSService(root: jsonP.JSONValue): AWSService {
  return jsonP.readObj({
    required: {},
    optional: {
      "serviceName": "s",
    },
  }, root);
}

// refs: 15 - tags: input, named, interface, output
export interface Role {
  roleType?: RoleType | null;
  roleArn?: string | null;
}
function fromRole(input?: Role | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleType: input["roleType"],
    roleArn: input["roleArn"],
  }
}
function toRole(root: jsonP.JSONValue): Role {
  return jsonP.readObj({
    required: {},
    optional: {
      "roleType": (x: jsonP.JSONValue) => cmnP.readEnum<RoleType>(x),
      "roleArn": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface CreateAssessmentFrameworkControlSet {
  name?: string | null;
  controls?: CreateAssessmentFrameworkControl[] | null;
}
function fromCreateAssessmentFrameworkControlSet(input?: CreateAssessmentFrameworkControlSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    controls: input["controls"]?.map(x => fromCreateAssessmentFrameworkControl(x)),
  }
}

// refs: 2 - tags: input, named, interface
export interface CreateAssessmentFrameworkControl {
  id?: string | null;
}
function fromCreateAssessmentFrameworkControl(input?: CreateAssessmentFrameworkControl | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}

// refs: 1 - tags: input, named, interface
export interface CreateControlMappingSource {
  sourceName?: string | null;
  sourceDescription?: string | null;
  sourceSetUpOption?: SourceSetUpOption | null;
  sourceType?: SourceType | null;
  sourceKeyword?: SourceKeyword | null;
  sourceFrequency?: SourceFrequency | null;
  troubleshootingText?: string | null;
}
function fromCreateControlMappingSource(input?: CreateControlMappingSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceName: input["sourceName"],
    sourceDescription: input["sourceDescription"],
    sourceSetUpOption: input["sourceSetUpOption"],
    sourceType: input["sourceType"],
    sourceKeyword: fromSourceKeyword(input["sourceKeyword"]),
    sourceFrequency: input["sourceFrequency"],
    troubleshootingText: input["troubleshootingText"],
  }
}

// refs: 8 - tags: input, named, enum, output
export type SourceSetUpOption =
| "System_Controls_Mapping"
| "Procedural_Controls_Mapping"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, enum, output
export type SourceType =
| "AWS_Cloudtrail"
| "AWS_Config"
| "AWS_Security_Hub"
| "AWS_API_Call"
| "MANUAL"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface SourceKeyword {
  keywordInputType?: KeywordInputType | null;
  keywordValue?: string | null;
}
function fromSourceKeyword(input?: SourceKeyword | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    keywordInputType: input["keywordInputType"],
    keywordValue: input["keywordValue"],
  }
}
function toSourceKeyword(root: jsonP.JSONValue): SourceKeyword {
  return jsonP.readObj({
    required: {},
    optional: {
      "keywordInputType": (x: jsonP.JSONValue) => cmnP.readEnum<KeywordInputType>(x),
      "keywordValue": "s",
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type KeywordInputType =
| "SELECT_FROM_LIST"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, enum, output
export type SourceFrequency =
| "DAILY"
| "WEEKLY"
| "MONTHLY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type SettingAttribute =
| "ALL"
| "IS_AWS_ORG_ENABLED"
| "SNS_TOPIC"
| "DEFAULT_ASSESSMENT_REPORTS_DESTINATION"
| "DEFAULT_PROCESS_OWNERS"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type FrameworkType =
| "Standard"
| "Custom"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type ControlType =
| "Standard"
| "Custom"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type ControlStatus =
| "UNDER_REVIEW"
| "REVIEWED"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, enum, output
export type ControlSetStatus =
| "ACTIVE"
| "UNDER_REVIEW"
| "REVIEWED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateAssessmentFrameworkControlSet {
  id?: string | null;
  name?: string | null;
  controls?: CreateAssessmentFrameworkControl[] | null;
}
function fromUpdateAssessmentFrameworkControlSet(input?: UpdateAssessmentFrameworkControlSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    controls: input["controls"]?.map(x => fromCreateAssessmentFrameworkControl(x)),
  }
}

// refs: 6 - tags: input, named, enum, output
export type AssessmentStatus =
| "ACTIVE"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface ControlMappingSource {
  sourceId?: string | null;
  sourceName?: string | null;
  sourceDescription?: string | null;
  sourceSetUpOption?: SourceSetUpOption | null;
  sourceType?: SourceType | null;
  sourceKeyword?: SourceKeyword | null;
  sourceFrequency?: SourceFrequency | null;
  troubleshootingText?: string | null;
}
function fromControlMappingSource(input?: ControlMappingSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceId: input["sourceId"],
    sourceName: input["sourceName"],
    sourceDescription: input["sourceDescription"],
    sourceSetUpOption: input["sourceSetUpOption"],
    sourceType: input["sourceType"],
    sourceKeyword: fromSourceKeyword(input["sourceKeyword"]),
    sourceFrequency: input["sourceFrequency"],
    troubleshootingText: input["troubleshootingText"],
  }
}
function toControlMappingSource(root: jsonP.JSONValue): ControlMappingSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "sourceId": "s",
      "sourceName": "s",
      "sourceDescription": "s",
      "sourceSetUpOption": (x: jsonP.JSONValue) => cmnP.readEnum<SourceSetUpOption>(x),
      "sourceType": (x: jsonP.JSONValue) => cmnP.readEnum<SourceType>(x),
      "sourceKeyword": toSourceKeyword,
      "sourceFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<SourceFrequency>(x),
      "troubleshootingText": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AssessmentReportEvidenceError {
  evidenceId?: string | null;
  errorCode?: string | null;
  errorMessage?: string | null;
}
function toAssessmentReportEvidenceError(root: jsonP.JSONValue): AssessmentReportEvidenceError {
  return jsonP.readObj({
    required: {},
    optional: {
      "evidenceId": "s",
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 11 - tags: output, named, interface
export interface Delegation {
  id?: string | null;
  assessmentName?: string | null;
  assessmentId?: string | null;
  status?: DelegationStatus | null;
  roleArn?: string | null;
  roleType?: RoleType | null;
  creationTime?: Date | number | null;
  lastUpdated?: Date | number | null;
  controlSetId?: string | null;
  comment?: string | null;
  createdBy?: string | null;
}
function toDelegation(root: jsonP.JSONValue): Delegation {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "assessmentName": "s",
      "assessmentId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<DelegationStatus>(x),
      "roleArn": "s",
      "roleType": (x: jsonP.JSONValue) => cmnP.readEnum<RoleType>(x),
      "creationTime": "d",
      "lastUpdated": "d",
      "controlSetId": "s",
      "comment": "s",
      "createdBy": "s",
    },
  }, root);
}

// refs: 12 - tags: output, named, enum
export type DelegationStatus =
| "IN_PROGRESS"
| "UNDER_REVIEW"
| "COMPLETE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchCreateDelegationByAssessmentError {
  createDelegationRequest?: CreateDelegationRequest | null;
  errorCode?: string | null;
  errorMessage?: string | null;
}
function toBatchCreateDelegationByAssessmentError(root: jsonP.JSONValue): BatchCreateDelegationByAssessmentError {
  return jsonP.readObj({
    required: {},
    optional: {
      "createDelegationRequest": toCreateDelegationRequest,
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchDeleteDelegationByAssessmentError {
  delegationId?: string | null;
  errorCode?: string | null;
  errorMessage?: string | null;
}
function toBatchDeleteDelegationByAssessmentError(root: jsonP.JSONValue): BatchDeleteDelegationByAssessmentError {
  return jsonP.readObj({
    required: {},
    optional: {
      "delegationId": "s",
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchImportEvidenceToAssessmentControlError {
  manualEvidence?: ManualEvidence | null;
  errorCode?: string | null;
  errorMessage?: string | null;
}
function toBatchImportEvidenceToAssessmentControlError(root: jsonP.JSONValue): BatchImportEvidenceToAssessmentControlError {
  return jsonP.readObj({
    required: {},
    optional: {
      "manualEvidence": toManualEvidence,
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Assessment {
  arn?: string | null;
  awsAccount?: AWSAccount | null;
  metadata?: AssessmentMetadata | null;
  framework?: AssessmentFramework | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toAssessment(root: jsonP.JSONValue): Assessment {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "awsAccount": toAWSAccount,
      "metadata": toAssessmentMetadata,
      "framework": toAssessmentFramework,
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface AssessmentMetadata {
  name?: string | null;
  id?: string | null;
  description?: string | null;
  complianceType?: string | null;
  status?: AssessmentStatus | null;
  assessmentReportsDestination?: AssessmentReportsDestination | null;
  scope?: Scope | null;
  roles?: Role[] | null;
  delegations?: Delegation[] | null;
  creationTime?: Date | number | null;
  lastUpdated?: Date | number | null;
}
function toAssessmentMetadata(root: jsonP.JSONValue): AssessmentMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "id": "s",
      "description": "s",
      "complianceType": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentStatus>(x),
      "assessmentReportsDestination": toAssessmentReportsDestination,
      "scope": toScope,
      "roles": [toRole],
      "delegations": [toDelegation],
      "creationTime": "d",
      "lastUpdated": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface AssessmentFramework {
  id?: string | null;
  arn?: string | null;
  metadata?: FrameworkMetadata | null;
  controlSets?: AssessmentControlSet[] | null;
}
function toAssessmentFramework(root: jsonP.JSONValue): AssessmentFramework {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "metadata": toFrameworkMetadata,
      "controlSets": [toAssessmentControlSet],
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface FrameworkMetadata {
  name?: string | null;
  description?: string | null;
  logo?: string | null;
  complianceType?: string | null;
}
function toFrameworkMetadata(root: jsonP.JSONValue): FrameworkMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "description": "s",
      "logo": "s",
      "complianceType": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, interface
export interface AssessmentControlSet {
  id?: string | null;
  description?: string | null;
  status?: ControlSetStatus | null;
  roles?: Role[] | null;
  controls?: AssessmentControl[] | null;
  delegations?: Delegation[] | null;
  systemEvidenceCount?: number | null;
  manualEvidenceCount?: number | null;
}
function toAssessmentControlSet(root: jsonP.JSONValue): AssessmentControlSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "description": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ControlSetStatus>(x),
      "roles": [toRole],
      "controls": [toAssessmentControl],
      "delegations": [toDelegation],
      "systemEvidenceCount": "n",
      "manualEvidenceCount": "n",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface AssessmentControl {
  id?: string | null;
  name?: string | null;
  description?: string | null;
  status?: ControlStatus | null;
  response?: ControlResponse | null;
  comments?: ControlComment[] | null;
  evidenceSources?: string[] | null;
  evidenceCount?: number | null;
  assessmentReportEvidenceCount?: number | null;
}
function toAssessmentControl(root: jsonP.JSONValue): AssessmentControl {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "description": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ControlStatus>(x),
      "response": (x: jsonP.JSONValue) => cmnP.readEnum<ControlResponse>(x),
      "comments": [toControlComment],
      "evidenceSources": ["s"],
      "evidenceCount": "n",
      "assessmentReportEvidenceCount": "n",
    },
  }, root);
}

// refs: 6 - tags: output, named, enum
export type ControlResponse =
| "MANUAL"
| "AUTOMATE"
| "DEFER"
| "IGNORE"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, interface
export interface ControlComment {
  authorName?: string | null;
  commentBody?: string | null;
  postedDate?: Date | number | null;
}
function toControlComment(root: jsonP.JSONValue): ControlComment {
  return jsonP.readObj({
    required: {},
    optional: {
      "authorName": "s",
      "commentBody": "s",
      "postedDate": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Framework {
  arn?: string | null;
  id?: string | null;
  name?: string | null;
  type?: FrameworkType | null;
  complianceType?: string | null;
  description?: string | null;
  logo?: string | null;
  controlSources?: string | null;
  controlSets?: ControlSet[] | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  createdBy?: string | null;
  lastUpdatedBy?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toFramework(root: jsonP.JSONValue): Framework {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<FrameworkType>(x),
      "complianceType": "s",
      "description": "s",
      "logo": "s",
      "controlSources": "s",
      "controlSets": [toControlSet],
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "createdBy": "s",
      "lastUpdatedBy": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface ControlSet {
  id?: string | null;
  name?: string | null;
  controls?: Control[] | null;
}
function toControlSet(root: jsonP.JSONValue): ControlSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "controls": [toControl],
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface Control {
  arn?: string | null;
  id?: string | null;
  type?: ControlType | null;
  name?: string | null;
  description?: string | null;
  testingInformation?: string | null;
  actionPlanTitle?: string | null;
  actionPlanInstructions?: string | null;
  controlSources?: string | null;
  controlMappingSources?: ControlMappingSource[] | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  createdBy?: string | null;
  lastUpdatedBy?: string | null;
  tags?: { [key: string]: string | null | undefined } | null;
}
function toControl(root: jsonP.JSONValue): Control {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<ControlType>(x),
      "name": "s",
      "description": "s",
      "testingInformation": "s",
      "actionPlanTitle": "s",
      "actionPlanInstructions": "s",
      "controlSources": "s",
      "controlMappingSources": [toControlMappingSource],
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "createdBy": "s",
      "lastUpdatedBy": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentReport {
  id?: string | null;
  name?: string | null;
  description?: string | null;
  awsAccountId?: string | null;
  assessmentId?: string | null;
  assessmentName?: string | null;
  author?: string | null;
  status?: AssessmentReportStatus | null;
  creationTime?: Date | number | null;
}
function toAssessmentReport(root: jsonP.JSONValue): AssessmentReport {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "description": "s",
      "awsAccountId": "s",
      "assessmentId": "s",
      "assessmentName": "s",
      "author": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentReportStatus>(x),
      "creationTime": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type AssessmentReportStatus =
| "COMPLETE"
| "IN_PROGRESS"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, enum
export type AccountStatus =
| "ACTIVE"
| "INACTIVE"
| "PENDING_ACTIVATION"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface URL {
  hyperlinkName?: string | null;
  link?: string | null;
}
function toURL(root: jsonP.JSONValue): URL {
  return jsonP.readObj({
    required: {},
    optional: {
      "hyperlinkName": "s",
      "link": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ChangeLog {
  objectType?: ObjectTypeEnum | null;
  objectName?: string | null;
  action?: ActionEnum | null;
  createdAt?: Date | number | null;
  createdBy?: string | null;
}
function toChangeLog(root: jsonP.JSONValue): ChangeLog {
  return jsonP.readObj({
    required: {},
    optional: {
      "objectType": (x: jsonP.JSONValue) => cmnP.readEnum<ObjectTypeEnum>(x),
      "objectName": "s",
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<ActionEnum>(x),
      "createdAt": "d",
      "createdBy": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ObjectTypeEnum =
| "ASSESSMENT"
| "CONTROL_SET"
| "CONTROL"
| "DELEGATION"
| "ASSESSMENT_REPORT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type ActionEnum =
| "CREATE"
| "UPDATE_METADATA"
| "ACTIVE"
| "INACTIVE"
| "DELETE"
| "UNDER_REVIEW"
| "REVIEWED"
| "IMPORT_EVIDENCE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface DelegationMetadata {
  id?: string | null;
  assessmentName?: string | null;
  assessmentId?: string | null;
  status?: DelegationStatus | null;
  roleArn?: string | null;
  creationTime?: Date | number | null;
  controlSetName?: string | null;
}
function toDelegationMetadata(root: jsonP.JSONValue): DelegationMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "assessmentName": "s",
      "assessmentId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<DelegationStatus>(x),
      "roleArn": "s",
      "creationTime": "d",
      "controlSetName": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Evidence {
  dataSource?: string | null;
  evidenceAwsAccountId?: string | null;
  time?: Date | number | null;
  eventSource?: string | null;
  eventName?: string | null;
  evidenceByType?: string | null;
  resourcesIncluded?: Resource[] | null;
  attributes?: { [key: string]: string | null | undefined } | null;
  iamId?: string | null;
  complianceCheck?: string | null;
  awsOrganization?: string | null;
  awsAccountId?: string | null;
  evidenceFolderId?: string | null;
  id?: string | null;
  assessmentReportSelection?: string | null;
}
function toEvidence(root: jsonP.JSONValue): Evidence {
  return jsonP.readObj({
    required: {},
    optional: {
      "dataSource": "s",
      "evidenceAwsAccountId": "s",
      "time": "d",
      "eventSource": "s",
      "eventName": "s",
      "evidenceByType": "s",
      "resourcesIncluded": [toResource],
      "attributes": x => jsonP.readMap(String, String, x),
      "iamId": "s",
      "complianceCheck": "s",
      "awsOrganization": "s",
      "awsAccountId": "s",
      "evidenceFolderId": "s",
      "id": "s",
      "assessmentReportSelection": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Resource {
  arn?: string | null;
  value?: string | null;
}
function toResource(root: jsonP.JSONValue): Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "value": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface AssessmentEvidenceFolder {
  name?: string | null;
  date?: Date | number | null;
  assessmentId?: string | null;
  controlSetId?: string | null;
  controlId?: string | null;
  id?: string | null;
  dataSource?: string | null;
  author?: string | null;
  totalEvidence?: number | null;
  assessmentReportSelectionCount?: number | null;
  controlName?: string | null;
  evidenceResourcesIncludedCount?: number | null;
  evidenceByTypeConfigurationDataCount?: number | null;
  evidenceByTypeManualCount?: number | null;
  evidenceByTypeComplianceCheckCount?: number | null;
  evidenceByTypeComplianceCheckIssuesCount?: number | null;
  evidenceByTypeUserActivityCount?: number | null;
  evidenceAwsServiceSourceCount?: number | null;
}
function toAssessmentEvidenceFolder(root: jsonP.JSONValue): AssessmentEvidenceFolder {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "date": "d",
      "assessmentId": "s",
      "controlSetId": "s",
      "controlId": "s",
      "id": "s",
      "dataSource": "s",
      "author": "s",
      "totalEvidence": "n",
      "assessmentReportSelectionCount": "n",
      "controlName": "s",
      "evidenceResourcesIncludedCount": "n",
      "evidenceByTypeConfigurationDataCount": "n",
      "evidenceByTypeManualCount": "n",
      "evidenceByTypeComplianceCheckCount": "n",
      "evidenceByTypeComplianceCheckIssuesCount": "n",
      "evidenceByTypeUserActivityCount": "n",
      "evidenceAwsServiceSourceCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ServiceMetadata {
  name?: string | null;
  displayName?: string | null;
  description?: string | null;
  category?: string | null;
}
function toServiceMetadata(root: jsonP.JSONValue): ServiceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "displayName": "s",
      "description": "s",
      "category": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Settings {
  isAwsOrgEnabled?: boolean | null;
  snsTopic?: string | null;
  defaultAssessmentReportsDestination?: AssessmentReportsDestination | null;
  defaultProcessOwners?: Role[] | null;
  kmsKey?: string | null;
}
function toSettings(root: jsonP.JSONValue): Settings {
  return jsonP.readObj({
    required: {},
    optional: {
      "isAwsOrgEnabled": "b",
      "snsTopic": "s",
      "defaultAssessmentReportsDestination": toAssessmentReportsDestination,
      "defaultProcessOwners": [toRole],
      "kmsKey": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentFrameworkMetadata {
  arn?: string | null;
  id?: string | null;
  type?: FrameworkType | null;
  name?: string | null;
  description?: string | null;
  logo?: string | null;
  complianceType?: string | null;
  controlsCount?: number | null;
  controlSetsCount?: number | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
}
function toAssessmentFrameworkMetadata(root: jsonP.JSONValue): AssessmentFrameworkMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<FrameworkType>(x),
      "name": "s",
      "description": "s",
      "logo": "s",
      "complianceType": "s",
      "controlsCount": "n",
      "controlSetsCount": "n",
      "createdAt": "d",
      "lastUpdatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentReportMetadata {
  id?: string | null;
  name?: string | null;
  description?: string | null;
  assessmentId?: string | null;
  assessmentName?: string | null;
  author?: string | null;
  status?: AssessmentReportStatus | null;
  creationTime?: Date | number | null;
}
function toAssessmentReportMetadata(root: jsonP.JSONValue): AssessmentReportMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "description": "s",
      "assessmentId": "s",
      "assessmentName": "s",
      "author": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentReportStatus>(x),
      "creationTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AssessmentMetadataItem {
  name?: string | null;
  id?: string | null;
  complianceType?: string | null;
  status?: AssessmentStatus | null;
  roles?: Role[] | null;
  delegations?: Delegation[] | null;
  creationTime?: Date | number | null;
  lastUpdated?: Date | number | null;
}
function toAssessmentMetadataItem(root: jsonP.JSONValue): AssessmentMetadataItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "id": "s",
      "complianceType": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AssessmentStatus>(x),
      "roles": [toRole],
      "delegations": [toDelegation],
      "creationTime": "d",
      "lastUpdated": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ControlMetadata {
  arn?: string | null;
  id?: string | null;
  name?: string | null;
  controlSources?: string | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
}
function toControlMetadata(root: jsonP.JSONValue): ControlMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "name": "s",
      "controlSources": "s",
      "createdAt": "d",
      "lastUpdatedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Notification {
  id?: string | null;
  assessmentId?: string | null;
  assessmentName?: string | null;
  controlSetId?: string | null;
  controlSetName?: string | null;
  description?: string | null;
  eventTime?: Date | number | null;
  source?: string | null;
}
function toNotification(root: jsonP.JSONValue): Notification {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "assessmentId": "s",
      "assessmentName": "s",
      "controlSetId": "s",
      "controlSetName": "s",
      "description": "s",
      "eventTime": "d",
      "source": "s",
    },
  }, root);
}
