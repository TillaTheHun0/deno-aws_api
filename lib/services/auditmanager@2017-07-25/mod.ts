// Autogenerated API client for: AWS Audit Manager

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class AuditManager {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(AuditManager.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-07-25",
    "endpointPrefix": "auditmanager",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS Audit Manager",
    "serviceId": "AuditManager",
    "signatureVersion": "v4",
    "signingName": "auditmanager",
    "uid": "auditmanager-2017-07-25"
  };

  async associateAssessmentReportEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & s.AssociateAssessmentReportEvidenceFolderRequest,
  ): Promise<s.AssociateAssessmentReportEvidenceFolderResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateAssessmentReportEvidenceFolder",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/associateToAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchAssociateAssessmentReportEvidence(
    {abortSignal, ...params}: RequestConfig & s.BatchAssociateAssessmentReportEvidenceRequest,
  ): Promise<s.BatchAssociateAssessmentReportEvidenceResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
      evidenceIds: params["evidenceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchAssociateAssessmentReportEvidence",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/batchAssociateToAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceIds": ["s"],
        "errors": [toAssessmentReportEvidenceError],
      },
    }, await resp.json());
  }

  async batchCreateDelegationByAssessment(
    {abortSignal, ...params}: RequestConfig & s.BatchCreateDelegationByAssessmentRequest,
  ): Promise<s.BatchCreateDelegationByAssessmentResponse> {
    const body: jsonP.JSONObject = {
      createDelegationRequests: params["createDelegationRequests"]?.map(x => fromCreateDelegationRequest(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchCreateDelegationByAssessment",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/delegations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "delegations": [toDelegation],
        "errors": [toBatchCreateDelegationByAssessmentError],
      },
    }, await resp.json());
  }

  async batchDeleteDelegationByAssessment(
    {abortSignal, ...params}: RequestConfig & s.BatchDeleteDelegationByAssessmentRequest,
  ): Promise<s.BatchDeleteDelegationByAssessmentResponse> {
    const body: jsonP.JSONObject = {
      delegationIds: params["delegationIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeleteDelegationByAssessment",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/delegations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toBatchDeleteDelegationByAssessmentError],
      },
    }, await resp.json());
  }

  async batchDisassociateAssessmentReportEvidence(
    {abortSignal, ...params}: RequestConfig & s.BatchDisassociateAssessmentReportEvidenceRequest,
  ): Promise<s.BatchDisassociateAssessmentReportEvidenceResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
      evidenceIds: params["evidenceIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDisassociateAssessmentReportEvidence",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/batchDisassociateFromAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceIds": ["s"],
        "errors": [toAssessmentReportEvidenceError],
      },
    }, await resp.json());
  }

  async batchImportEvidenceToAssessmentControl(
    {abortSignal, ...params}: RequestConfig & s.BatchImportEvidenceToAssessmentControlRequest,
  ): Promise<s.BatchImportEvidenceToAssessmentControlResponse> {
    const body: jsonP.JSONObject = {
      manualEvidence: params["manualEvidence"]?.map(x => fromManualEvidence(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchImportEvidenceToAssessmentControl",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/controls/${params["controlId"]}/evidence`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toBatchImportEvidenceToAssessmentControlError],
      },
    }, await resp.json());
  }

  async createAssessment(
    {abortSignal, ...params}: RequestConfig & s.CreateAssessmentRequest,
  ): Promise<s.CreateAssessmentResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      assessmentReportsDestination: fromAssessmentReportsDestination(params["assessmentReportsDestination"]),
      scope: fromScope(params["scope"]),
      roles: params["roles"]?.map(x => fromRole(x)),
      frameworkId: params["frameworkId"],
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessment",
      requestUri: "/assessments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async createAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & s.CreateAssessmentFrameworkRequest,
  ): Promise<s.CreateAssessmentFrameworkResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      complianceType: params["complianceType"],
      controlSets: params["controlSets"]?.map(x => fromCreateAssessmentFrameworkControlSet(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessmentFramework",
      requestUri: "/assessmentFrameworks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "framework": toFramework,
      },
    }, await resp.json());
  }

  async createAssessmentReport(
    {abortSignal, ...params}: RequestConfig & s.CreateAssessmentReportRequest,
  ): Promise<s.CreateAssessmentReportResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAssessmentReport",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/reports`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessmentReport": toAssessmentReport,
      },
    }, await resp.json());
  }

  async createControl(
    {abortSignal, ...params}: RequestConfig & s.CreateControlRequest,
  ): Promise<s.CreateControlResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      testingInformation: params["testingInformation"],
      actionPlanTitle: params["actionPlanTitle"],
      actionPlanInstructions: params["actionPlanInstructions"],
      controlMappingSources: params["controlMappingSources"]?.map(x => fromCreateControlMappingSource(x)),
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateControl",
      requestUri: "/controls",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toControl,
      },
    }, await resp.json());
  }

  async deleteAssessment(
    {abortSignal, ...params}: RequestConfig & s.DeleteAssessmentRequest,
  ): Promise<s.DeleteAssessmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAssessment",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & s.DeleteAssessmentFrameworkRequest,
  ): Promise<s.DeleteAssessmentFrameworkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAssessmentFramework",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assessmentFrameworks/${params["frameworkId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAssessmentReport(
    {abortSignal, ...params}: RequestConfig & s.DeleteAssessmentReportRequest,
  ): Promise<s.DeleteAssessmentReportResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAssessmentReport",
      method: "DELETE",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/reports/${params["assessmentReportId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteControl(
    {abortSignal, ...params}: RequestConfig & s.DeleteControlRequest,
  ): Promise<s.DeleteControlResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteControl",
      method: "DELETE",
      requestUri: cmnP.encodePath`/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deregisterAccount(
    {abortSignal, ...params}: RequestConfig & s.DeregisterAccountRequest = {},
  ): Promise<s.DeregisterAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeregisterAccount",
      requestUri: "/account/deregisterAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountStatus>(x),
      },
    }, await resp.json());
  }

  async deregisterOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & s.DeregisterOrganizationAdminAccountRequest = {},
  ): Promise<s.DeregisterOrganizationAdminAccountResponse> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["adminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeregisterOrganizationAdminAccount",
      requestUri: "/account/deregisterOrganizationAdminAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociateAssessmentReportEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & s.DisassociateAssessmentReportEvidenceFolderRequest,
  ): Promise<s.DisassociateAssessmentReportEvidenceFolderResponse> {
    const body: jsonP.JSONObject = {
      evidenceFolderId: params["evidenceFolderId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateAssessmentReportEvidenceFolder",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/disassociateFromAssessmentReport`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccountStatus(
    {abortSignal, ...params}: RequestConfig & s.GetAccountStatusRequest = {},
  ): Promise<s.GetAccountStatusResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccountStatus",
      method: "GET",
      requestUri: "/account/status",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountStatus>(x),
      },
    }, await resp.json());
  }

  async getAssessment(
    {abortSignal, ...params}: RequestConfig & s.GetAssessmentRequest,
  ): Promise<s.GetAssessmentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssessment",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async getAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & s.GetAssessmentFrameworkRequest,
  ): Promise<s.GetAssessmentFrameworkResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssessmentFramework",
      method: "GET",
      requestUri: cmnP.encodePath`/assessmentFrameworks/${params["frameworkId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "framework": toFramework,
      },
    }, await resp.json());
  }

  async getAssessmentReportUrl(
    {abortSignal, ...params}: RequestConfig & s.GetAssessmentReportUrlRequest,
  ): Promise<s.GetAssessmentReportUrlResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAssessmentReportUrl",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/reports/${params["assessmentReportId"]}/url`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "preSignedUrl": toURL,
      },
    }, await resp.json());
  }

  async getChangeLogs(
    {abortSignal, ...params}: RequestConfig & s.GetChangeLogsRequest,
  ): Promise<s.GetChangeLogsResponse> {
    const query = new URLSearchParams;
    if (params["controlSetId"] != null) query.set("controlSetId", params["controlSetId"]?.toString() ?? "");
    if (params["controlId"] != null) query.set("controlId", params["controlId"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetChangeLogs",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/changelogs`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "changeLogs": [toChangeLog],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getControl(
    {abortSignal, ...params}: RequestConfig & s.GetControlRequest,
  ): Promise<s.GetControlResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetControl",
      method: "GET",
      requestUri: cmnP.encodePath`/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toControl,
      },
    }, await resp.json());
  }

  async getDelegations(
    {abortSignal, ...params}: RequestConfig & s.GetDelegationsRequest = {},
  ): Promise<s.GetDelegationsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetDelegations",
      method: "GET",
      requestUri: "/delegations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "delegations": [toDelegationMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEvidence(
    {abortSignal, ...params}: RequestConfig & s.GetEvidenceRequest,
  ): Promise<s.GetEvidenceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEvidence",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/evidenceFolders/${params["evidenceFolderId"]}/evidence/${params["evidenceId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidence": toEvidence,
      },
    }, await resp.json());
  }

  async getEvidenceByEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & s.GetEvidenceByEvidenceFolderRequest,
  ): Promise<s.GetEvidenceByEvidenceFolderResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetEvidenceByEvidenceFolder",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/evidenceFolders/${params["evidenceFolderId"]}/evidence`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidence": [toEvidence],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEvidenceFolder(
    {abortSignal, ...params}: RequestConfig & s.GetEvidenceFolderRequest,
  ): Promise<s.GetEvidenceFolderResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEvidenceFolder",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/evidenceFolders/${params["evidenceFolderId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceFolder": toAssessmentEvidenceFolder,
      },
    }, await resp.json());
  }

  async getEvidenceFoldersByAssessment(
    {abortSignal, ...params}: RequestConfig & s.GetEvidenceFoldersByAssessmentRequest,
  ): Promise<s.GetEvidenceFoldersByAssessmentResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetEvidenceFoldersByAssessment",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/evidenceFolders`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceFolders": [toAssessmentEvidenceFolder],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEvidenceFoldersByAssessmentControl(
    {abortSignal, ...params}: RequestConfig & s.GetEvidenceFoldersByAssessmentControlRequest,
  ): Promise<s.GetEvidenceFoldersByAssessmentControlResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetEvidenceFoldersByAssessmentControl",
      method: "GET",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/evidenceFolders-by-assessment-control/${params["controlSetId"]}/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "evidenceFolders": [toAssessmentEvidenceFolder],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & s.GetOrganizationAdminAccountRequest = {},
  ): Promise<s.GetOrganizationAdminAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetOrganizationAdminAccount",
      method: "GET",
      requestUri: "/account/organizationAdminAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "adminAccountId": "s",
        "organizationId": "s",
      },
    }, await resp.json());
  }

  async getServicesInScope(
    {abortSignal, ...params}: RequestConfig & s.GetServicesInScopeRequest = {},
  ): Promise<s.GetServicesInScopeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetServicesInScope",
      method: "GET",
      requestUri: "/services",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "serviceMetadata": [toServiceMetadata],
      },
    }, await resp.json());
  }

  async getSettings(
    {abortSignal, ...params}: RequestConfig & s.GetSettingsRequest,
  ): Promise<s.GetSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/settings/${params["attribute"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "settings": toSettings,
      },
    }, await resp.json());
  }

  async listAssessmentFrameworks(
    {abortSignal, ...params}: RequestConfig & s.ListAssessmentFrameworksRequest,
  ): Promise<s.ListAssessmentFrameworksResponse> {
    const query = new URLSearchParams;
    query.set("frameworkType", params["frameworkType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssessmentFrameworks",
      method: "GET",
      requestUri: "/assessmentFrameworks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "frameworkMetadataList": [toAssessmentFrameworkMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssessmentReports(
    {abortSignal, ...params}: RequestConfig & s.ListAssessmentReportsRequest = {},
  ): Promise<s.ListAssessmentReportsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssessmentReports",
      method: "GET",
      requestUri: "/assessmentReports",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessmentReports": [toAssessmentReportMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listAssessments(
    {abortSignal, ...params}: RequestConfig & s.ListAssessmentsRequest = {},
  ): Promise<s.ListAssessmentsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAssessments",
      method: "GET",
      requestUri: "/assessments",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessmentMetadata": [toAssessmentMetadataItem],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listControls(
    {abortSignal, ...params}: RequestConfig & s.ListControlsRequest,
  ): Promise<s.ListControlsResponse> {
    const query = new URLSearchParams;
    query.set("controlType", params["controlType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListControls",
      method: "GET",
      requestUri: "/controls",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "controlMetadataList": [toControlMetadata],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listKeywordsForDataSource(
    {abortSignal, ...params}: RequestConfig & s.ListKeywordsForDataSourceRequest,
  ): Promise<s.ListKeywordsForDataSourceResponse> {
    const query = new URLSearchParams;
    query.set("source", params["source"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListKeywordsForDataSource",
      method: "GET",
      requestUri: "/dataSourceKeywords",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "keywords": ["s"],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listNotifications(
    {abortSignal, ...params}: RequestConfig & s.ListNotificationsRequest = {},
  ): Promise<s.ListNotificationsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListNotifications",
      method: "GET",
      requestUri: "/notifications",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "notifications": [toNotification],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async registerAccount(
    {abortSignal, ...params}: RequestConfig & s.RegisterAccountRequest = {},
  ): Promise<s.RegisterAccountResponse> {
    const body: jsonP.JSONObject = {
      kmsKey: params["kmsKey"],
      delegatedAdminAccount: params["delegatedAdminAccount"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterAccount",
      requestUri: "/account/registerAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountStatus>(x),
      },
    }, await resp.json());
  }

  async registerOrganizationAdminAccount(
    {abortSignal, ...params}: RequestConfig & s.RegisterOrganizationAdminAccountRequest,
  ): Promise<s.RegisterOrganizationAdminAccountResponse> {
    const body: jsonP.JSONObject = {
      adminAccountId: params["adminAccountId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterOrganizationAdminAccount",
      requestUri: "/account/registerOrganizationAdminAccount",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "adminAccountId": "s",
        "organizationId": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAssessment(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssessmentRequest,
  ): Promise<s.UpdateAssessmentResponse> {
    const body: jsonP.JSONObject = {
      assessmentName: params["assessmentName"],
      assessmentDescription: params["assessmentDescription"],
      scope: fromScope(params["scope"]),
      assessmentReportsDestination: fromAssessmentReportsDestination(params["assessmentReportsDestination"]),
      roles: params["roles"]?.map(x => fromRole(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessment",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async updateAssessmentControl(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssessmentControlRequest,
  ): Promise<s.UpdateAssessmentControlResponse> {
    const body: jsonP.JSONObject = {
      controlStatus: params["controlStatus"],
      commentBody: params["commentBody"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentControl",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toAssessmentControl,
      },
    }, await resp.json());
  }

  async updateAssessmentControlSetStatus(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssessmentControlSetStatusRequest,
  ): Promise<s.UpdateAssessmentControlSetStatusResponse> {
    const body: jsonP.JSONObject = {
      status: params["status"],
      comment: params["comment"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentControlSetStatus",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/controlSets/${params["controlSetId"]}/status`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "controlSet": toAssessmentControlSet,
      },
    }, await resp.json());
  }

  async updateAssessmentFramework(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssessmentFrameworkRequest,
  ): Promise<s.UpdateAssessmentFrameworkResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      complianceType: params["complianceType"],
      controlSets: params["controlSets"]?.map(x => fromUpdateAssessmentFrameworkControlSet(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentFramework",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessmentFrameworks/${params["frameworkId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "framework": toFramework,
      },
    }, await resp.json());
  }

  async updateAssessmentStatus(
    {abortSignal, ...params}: RequestConfig & s.UpdateAssessmentStatusRequest,
  ): Promise<s.UpdateAssessmentStatusResponse> {
    const body: jsonP.JSONObject = {
      status: params["status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAssessmentStatus",
      method: "PUT",
      requestUri: cmnP.encodePath`/assessments/${params["assessmentId"]}/status`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "assessment": toAssessment,
      },
    }, await resp.json());
  }

  async updateControl(
    {abortSignal, ...params}: RequestConfig & s.UpdateControlRequest,
  ): Promise<s.UpdateControlResponse> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      testingInformation: params["testingInformation"],
      actionPlanTitle: params["actionPlanTitle"],
      actionPlanInstructions: params["actionPlanInstructions"],
      controlMappingSources: params["controlMappingSources"]?.map(x => fromControlMappingSource(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateControl",
      method: "PUT",
      requestUri: cmnP.encodePath`/controls/${params["controlId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "control": toControl,
      },
    }, await resp.json());
  }

  async updateSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateSettingsRequest = {},
  ): Promise<s.UpdateSettingsResponse> {
    const body: jsonP.JSONObject = {
      snsTopic: params["snsTopic"],
      defaultAssessmentReportsDestination: fromAssessmentReportsDestination(params["defaultAssessmentReportsDestination"]),
      defaultProcessOwners: params["defaultProcessOwners"]?.map(x => fromRole(x)),
      kmsKey: params["kmsKey"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSettings",
      method: "PUT",
      requestUri: "/settings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "settings": toSettings,
      },
    }, await resp.json());
  }

  async validateAssessmentReportIntegrity(
    {abortSignal, ...params}: RequestConfig & s.ValidateAssessmentReportIntegrityRequest,
  ): Promise<s.ValidateAssessmentReportIntegrityResponse> {
    const body: jsonP.JSONObject = {
      s3RelativePath: params["s3RelativePath"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ValidateAssessmentReportIntegrity",
      requestUri: "/assessmentReports/integrity",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "signatureValid": "b",
        "signatureAlgorithm": "s",
        "signatureDateTime": "s",
        "signatureKeyId": "s",
        "validationErrors": ["s"],
      },
    }, await resp.json());
  }

}

function fromCreateDelegationRequest(input?: s.CreateDelegationRequest | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    comment: input["comment"],
    controlSetId: input["controlSetId"],
    roleArn: input["roleArn"],
    roleType: input["roleType"],
  }
}
function toCreateDelegationRequest(root: jsonP.JSONValue): s.CreateDelegationRequest {
  return jsonP.readObj({
    required: {},
    optional: {
      "comment": "s",
      "controlSetId": "s",
      "roleArn": "s",
      "roleType": (x: jsonP.JSONValue) => cmnP.readEnum<s.RoleType>(x),
    },
  }, root);
}

function fromManualEvidence(input?: s.ManualEvidence | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3ResourcePath: input["s3ResourcePath"],
  }
}
function toManualEvidence(root: jsonP.JSONValue): s.ManualEvidence {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3ResourcePath": "s",
    },
  }, root);
}

function fromAssessmentReportsDestination(input?: s.AssessmentReportsDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    destinationType: input["destinationType"],
    destination: input["destination"],
  }
}
function toAssessmentReportsDestination(root: jsonP.JSONValue): s.AssessmentReportsDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "destinationType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssessmentReportDestinationType>(x),
      "destination": "s",
    },
  }, root);
}

function fromScope(input?: s.Scope | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    awsAccounts: input["awsAccounts"]?.map(x => fromAWSAccount(x)),
    awsServices: input["awsServices"]?.map(x => fromAWSService(x)),
  }
}
function toScope(root: jsonP.JSONValue): s.Scope {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsAccounts": [toAWSAccount],
      "awsServices": [toAWSService],
    },
  }, root);
}

function fromAWSAccount(input?: s.AWSAccount | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    emailAddress: input["emailAddress"],
    name: input["name"],
  }
}
function toAWSAccount(root: jsonP.JSONValue): s.AWSAccount {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "emailAddress": "s",
      "name": "s",
    },
  }, root);
}

function fromAWSService(input?: s.AWSService | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    serviceName: input["serviceName"],
  }
}
function toAWSService(root: jsonP.JSONValue): s.AWSService {
  return jsonP.readObj({
    required: {},
    optional: {
      "serviceName": "s",
    },
  }, root);
}

function fromRole(input?: s.Role | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleType: input["roleType"],
    roleArn: input["roleArn"],
  }
}
function toRole(root: jsonP.JSONValue): s.Role {
  return jsonP.readObj({
    required: {},
    optional: {
      "roleType": (x: jsonP.JSONValue) => cmnP.readEnum<s.RoleType>(x),
      "roleArn": "s",
    },
  }, root);
}

function fromCreateAssessmentFrameworkControlSet(input?: s.CreateAssessmentFrameworkControlSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    controls: input["controls"]?.map(x => fromCreateAssessmentFrameworkControl(x)),
  }
}

function fromCreateAssessmentFrameworkControl(input?: s.CreateAssessmentFrameworkControl | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
  }
}

function fromCreateControlMappingSource(input?: s.CreateControlMappingSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceName: input["sourceName"],
    sourceDescription: input["sourceDescription"],
    sourceSetUpOption: input["sourceSetUpOption"],
    sourceType: input["sourceType"],
    sourceKeyword: fromSourceKeyword(input["sourceKeyword"]),
    sourceFrequency: input["sourceFrequency"],
    troubleshootingText: input["troubleshootingText"],
  }
}

function fromSourceKeyword(input?: s.SourceKeyword | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    keywordInputType: input["keywordInputType"],
    keywordValue: input["keywordValue"],
  }
}
function toSourceKeyword(root: jsonP.JSONValue): s.SourceKeyword {
  return jsonP.readObj({
    required: {},
    optional: {
      "keywordInputType": (x: jsonP.JSONValue) => cmnP.readEnum<s.KeywordInputType>(x),
      "keywordValue": "s",
    },
  }, root);
}

function fromUpdateAssessmentFrameworkControlSet(input?: s.UpdateAssessmentFrameworkControlSet | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    id: input["id"],
    name: input["name"],
    controls: input["controls"]?.map(x => fromCreateAssessmentFrameworkControl(x)),
  }
}

function fromControlMappingSource(input?: s.ControlMappingSource | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sourceId: input["sourceId"],
    sourceName: input["sourceName"],
    sourceDescription: input["sourceDescription"],
    sourceSetUpOption: input["sourceSetUpOption"],
    sourceType: input["sourceType"],
    sourceKeyword: fromSourceKeyword(input["sourceKeyword"]),
    sourceFrequency: input["sourceFrequency"],
    troubleshootingText: input["troubleshootingText"],
  }
}
function toControlMappingSource(root: jsonP.JSONValue): s.ControlMappingSource {
  return jsonP.readObj({
    required: {},
    optional: {
      "sourceId": "s",
      "sourceName": "s",
      "sourceDescription": "s",
      "sourceSetUpOption": (x: jsonP.JSONValue) => cmnP.readEnum<s.SourceSetUpOption>(x),
      "sourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SourceType>(x),
      "sourceKeyword": toSourceKeyword,
      "sourceFrequency": (x: jsonP.JSONValue) => cmnP.readEnum<s.SourceFrequency>(x),
      "troubleshootingText": "s",
    },
  }, root);
}

function toAssessmentReportEvidenceError(root: jsonP.JSONValue): s.AssessmentReportEvidenceError {
  return jsonP.readObj({
    required: {},
    optional: {
      "evidenceId": "s",
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

function toDelegation(root: jsonP.JSONValue): s.Delegation {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "assessmentName": "s",
      "assessmentId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DelegationStatus>(x),
      "roleArn": "s",
      "roleType": (x: jsonP.JSONValue) => cmnP.readEnum<s.RoleType>(x),
      "creationTime": "d",
      "lastUpdated": "d",
      "controlSetId": "s",
      "comment": "s",
      "createdBy": "s",
    },
  }, root);
}

function toBatchCreateDelegationByAssessmentError(root: jsonP.JSONValue): s.BatchCreateDelegationByAssessmentError {
  return jsonP.readObj({
    required: {},
    optional: {
      "createDelegationRequest": toCreateDelegationRequest,
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

function toBatchDeleteDelegationByAssessmentError(root: jsonP.JSONValue): s.BatchDeleteDelegationByAssessmentError {
  return jsonP.readObj({
    required: {},
    optional: {
      "delegationId": "s",
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

function toBatchImportEvidenceToAssessmentControlError(root: jsonP.JSONValue): s.BatchImportEvidenceToAssessmentControlError {
  return jsonP.readObj({
    required: {},
    optional: {
      "manualEvidence": toManualEvidence,
      "errorCode": "s",
      "errorMessage": "s",
    },
  }, root);
}

function toAssessment(root: jsonP.JSONValue): s.Assessment {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "awsAccount": toAWSAccount,
      "metadata": toAssessmentMetadata,
      "framework": toAssessmentFramework,
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toAssessmentMetadata(root: jsonP.JSONValue): s.AssessmentMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "id": "s",
      "description": "s",
      "complianceType": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssessmentStatus>(x),
      "assessmentReportsDestination": toAssessmentReportsDestination,
      "scope": toScope,
      "roles": [toRole],
      "delegations": [toDelegation],
      "creationTime": "d",
      "lastUpdated": "d",
    },
  }, root);
}

function toAssessmentFramework(root: jsonP.JSONValue): s.AssessmentFramework {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "arn": "s",
      "metadata": toFrameworkMetadata,
      "controlSets": [toAssessmentControlSet],
    },
  }, root);
}

function toFrameworkMetadata(root: jsonP.JSONValue): s.FrameworkMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "description": "s",
      "logo": "s",
      "complianceType": "s",
    },
  }, root);
}

function toAssessmentControlSet(root: jsonP.JSONValue): s.AssessmentControlSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "description": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ControlSetStatus>(x),
      "roles": [toRole],
      "controls": [toAssessmentControl],
      "delegations": [toDelegation],
      "systemEvidenceCount": "n",
      "manualEvidenceCount": "n",
    },
  }, root);
}

function toAssessmentControl(root: jsonP.JSONValue): s.AssessmentControl {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "description": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ControlStatus>(x),
      "response": (x: jsonP.JSONValue) => cmnP.readEnum<s.ControlResponse>(x),
      "comments": [toControlComment],
      "evidenceSources": ["s"],
      "evidenceCount": "n",
      "assessmentReportEvidenceCount": "n",
    },
  }, root);
}

function toControlComment(root: jsonP.JSONValue): s.ControlComment {
  return jsonP.readObj({
    required: {},
    optional: {
      "authorName": "s",
      "commentBody": "s",
      "postedDate": "d",
    },
  }, root);
}

function toFramework(root: jsonP.JSONValue): s.Framework {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.FrameworkType>(x),
      "complianceType": "s",
      "description": "s",
      "logo": "s",
      "controlSources": "s",
      "controlSets": [toControlSet],
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "createdBy": "s",
      "lastUpdatedBy": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toControlSet(root: jsonP.JSONValue): s.ControlSet {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "controls": [toControl],
    },
  }, root);
}

function toControl(root: jsonP.JSONValue): s.Control {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ControlType>(x),
      "name": "s",
      "description": "s",
      "testingInformation": "s",
      "actionPlanTitle": "s",
      "actionPlanInstructions": "s",
      "controlSources": "s",
      "controlMappingSources": [toControlMappingSource],
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "createdBy": "s",
      "lastUpdatedBy": "s",
      "tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toAssessmentReport(root: jsonP.JSONValue): s.AssessmentReport {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "description": "s",
      "awsAccountId": "s",
      "assessmentId": "s",
      "assessmentName": "s",
      "author": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssessmentReportStatus>(x),
      "creationTime": "d",
    },
  }, root);
}

function toURL(root: jsonP.JSONValue): s.URL {
  return jsonP.readObj({
    required: {},
    optional: {
      "hyperlinkName": "s",
      "link": "s",
    },
  }, root);
}

function toChangeLog(root: jsonP.JSONValue): s.ChangeLog {
  return jsonP.readObj({
    required: {},
    optional: {
      "objectType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ObjectTypeEnum>(x),
      "objectName": "s",
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<s.ActionEnum>(x),
      "createdAt": "d",
      "createdBy": "s",
    },
  }, root);
}

function toDelegationMetadata(root: jsonP.JSONValue): s.DelegationMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "assessmentName": "s",
      "assessmentId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.DelegationStatus>(x),
      "roleArn": "s",
      "creationTime": "d",
      "controlSetName": "s",
    },
  }, root);
}

function toEvidence(root: jsonP.JSONValue): s.Evidence {
  return jsonP.readObj({
    required: {},
    optional: {
      "dataSource": "s",
      "evidenceAwsAccountId": "s",
      "time": "d",
      "eventSource": "s",
      "eventName": "s",
      "evidenceByType": "s",
      "resourcesIncluded": [toResource],
      "attributes": x => jsonP.readMap(String, String, x),
      "iamId": "s",
      "complianceCheck": "s",
      "awsOrganization": "s",
      "awsAccountId": "s",
      "evidenceFolderId": "s",
      "id": "s",
      "assessmentReportSelection": "s",
    },
  }, root);
}

function toResource(root: jsonP.JSONValue): s.Resource {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "value": "s",
    },
  }, root);
}

function toAssessmentEvidenceFolder(root: jsonP.JSONValue): s.AssessmentEvidenceFolder {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "date": "d",
      "assessmentId": "s",
      "controlSetId": "s",
      "controlId": "s",
      "id": "s",
      "dataSource": "s",
      "author": "s",
      "totalEvidence": "n",
      "assessmentReportSelectionCount": "n",
      "controlName": "s",
      "evidenceResourcesIncludedCount": "n",
      "evidenceByTypeConfigurationDataCount": "n",
      "evidenceByTypeManualCount": "n",
      "evidenceByTypeComplianceCheckCount": "n",
      "evidenceByTypeComplianceCheckIssuesCount": "n",
      "evidenceByTypeUserActivityCount": "n",
      "evidenceAwsServiceSourceCount": "n",
    },
  }, root);
}

function toServiceMetadata(root: jsonP.JSONValue): s.ServiceMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "displayName": "s",
      "description": "s",
      "category": "s",
    },
  }, root);
}

function toSettings(root: jsonP.JSONValue): s.Settings {
  return jsonP.readObj({
    required: {},
    optional: {
      "isAwsOrgEnabled": "b",
      "snsTopic": "s",
      "defaultAssessmentReportsDestination": toAssessmentReportsDestination,
      "defaultProcessOwners": [toRole],
      "kmsKey": "s",
    },
  }, root);
}

function toAssessmentFrameworkMetadata(root: jsonP.JSONValue): s.AssessmentFrameworkMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<s.FrameworkType>(x),
      "name": "s",
      "description": "s",
      "logo": "s",
      "complianceType": "s",
      "controlsCount": "n",
      "controlSetsCount": "n",
      "createdAt": "d",
      "lastUpdatedAt": "d",
    },
  }, root);
}

function toAssessmentReportMetadata(root: jsonP.JSONValue): s.AssessmentReportMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "description": "s",
      "assessmentId": "s",
      "assessmentName": "s",
      "author": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssessmentReportStatus>(x),
      "creationTime": "d",
    },
  }, root);
}

function toAssessmentMetadataItem(root: jsonP.JSONValue): s.AssessmentMetadataItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "id": "s",
      "complianceType": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AssessmentStatus>(x),
      "roles": [toRole],
      "delegations": [toDelegation],
      "creationTime": "d",
      "lastUpdated": "d",
    },
  }, root);
}

function toControlMetadata(root: jsonP.JSONValue): s.ControlMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "id": "s",
      "name": "s",
      "controlSources": "s",
      "createdAt": "d",
      "lastUpdatedAt": "d",
    },
  }, root);
}

function toNotification(root: jsonP.JSONValue): s.Notification {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "assessmentId": "s",
      "assessmentName": "s",
      "controlSetId": "s",
      "controlSetName": "s",
      "description": "s",
      "eventTime": "d",
      "source": "s",
    },
  }, root);
}
