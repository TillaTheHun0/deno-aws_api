// Autogenerated API client for: Amazon Chime

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import * as uuidv4 from "https://deno.land/std@0.91.0/uuid/v4.ts";
import type * as s from "./structs.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Chime {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Chime.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-05-01",
    "endpointPrefix": "chime",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Chime",
    "serviceId": "Chime",
    "signatureVersion": "v4",
    "uid": "chime-2018-05-01"
  };

  async associatePhoneNumberWithUser(
    {abortSignal, ...params}: RequestConfig & s.AssociatePhoneNumberWithUserRequest,
  ): Promise<s.AssociatePhoneNumberWithUserResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumber: params["E164PhoneNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePhoneNumberWithUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=associate-phone-number`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associatePhoneNumbersWithVoiceConnector(
    {abortSignal, ...params}: RequestConfig & s.AssociatePhoneNumbersWithVoiceConnectorRequest,
  ): Promise<s.AssociatePhoneNumbersWithVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
      ForceAssociate: params["ForceAssociate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePhoneNumbersWithVoiceConnector",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}?operation=associate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async associatePhoneNumbersWithVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & s.AssociatePhoneNumbersWithVoiceConnectorGroupRequest,
  ): Promise<s.AssociatePhoneNumbersWithVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
      ForceAssociate: params["ForceAssociate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePhoneNumbersWithVoiceConnectorGroup",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}?operation=associate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async associateSigninDelegateGroupsWithAccount(
    {abortSignal, ...params}: RequestConfig & s.AssociateSigninDelegateGroupsWithAccountRequest,
  ): Promise<s.AssociateSigninDelegateGroupsWithAccountResponse> {
    const body: jsonP.JSONObject = {
      SigninDelegateGroups: params["SigninDelegateGroups"]?.map(x => fromSigninDelegateGroup(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSigninDelegateGroupsWithAccount",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}?operation=associate-signin-delegate-groups`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchCreateAttendee(
    {abortSignal, ...params}: RequestConfig & s.BatchCreateAttendeeRequest,
  ): Promise<s.BatchCreateAttendeeResponse> {
    const body: jsonP.JSONObject = {
      Attendees: params["Attendees"]?.map(x => fromCreateAttendeeRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchCreateAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees?operation=batch-create`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendees": [toAttendee],
        "Errors": [toCreateAttendeeError],
      },
    }, await resp.json());
  }

  async batchCreateRoomMembership(
    {abortSignal, ...params}: RequestConfig & s.BatchCreateRoomMembershipRequest,
  ): Promise<s.BatchCreateRoomMembershipResponse> {
    const body: jsonP.JSONObject = {
      MembershipItemList: params["MembershipItemList"]?.map(x => fromMembershipItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchCreateRoomMembership",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships?operation=batch-create`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Errors": [toMemberError],
      },
    }, await resp.json());
  }

  async batchDeletePhoneNumber(
    {abortSignal, ...params}: RequestConfig & s.BatchDeletePhoneNumberRequest,
  ): Promise<s.BatchDeletePhoneNumberResponse> {
    const body: jsonP.JSONObject = {
      PhoneNumberIds: params["PhoneNumberIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeletePhoneNumber",
      requestUri: "/phone-numbers?operation=batch-delete",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async batchSuspendUser(
    {abortSignal, ...params}: RequestConfig & s.BatchSuspendUserRequest,
  ): Promise<s.BatchSuspendUserResponse> {
    const body: jsonP.JSONObject = {
      UserIdList: params["UserIdList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchSuspendUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=suspend`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserErrors": [toUserError],
      },
    }, await resp.json());
  }

  async batchUnsuspendUser(
    {abortSignal, ...params}: RequestConfig & s.BatchUnsuspendUserRequest,
  ): Promise<s.BatchUnsuspendUserResponse> {
    const body: jsonP.JSONObject = {
      UserIdList: params["UserIdList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchUnsuspendUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=unsuspend`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserErrors": [toUserError],
      },
    }, await resp.json());
  }

  async batchUpdatePhoneNumber(
    {abortSignal, ...params}: RequestConfig & s.BatchUpdatePhoneNumberRequest,
  ): Promise<s.BatchUpdatePhoneNumberResponse> {
    const body: jsonP.JSONObject = {
      UpdatePhoneNumberRequestItems: params["UpdatePhoneNumberRequestItems"]?.map(x => fromUpdatePhoneNumberRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchUpdatePhoneNumber",
      requestUri: "/phone-numbers?operation=batch-update",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async batchUpdateUser(
    {abortSignal, ...params}: RequestConfig & s.BatchUpdateUserRequest,
  ): Promise<s.BatchUpdateUserResponse> {
    const body: jsonP.JSONObject = {
      UpdateUserRequestItems: params["UpdateUserRequestItems"]?.map(x => fromUpdateUserRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchUpdateUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserErrors": [toUserError],
      },
    }, await resp.json());
  }

  async createAccount(
    {abortSignal, ...params}: RequestConfig & s.CreateAccountRequest,
  ): Promise<s.CreateAccountResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccount",
      requestUri: "/accounts",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async createAppInstance(
    {abortSignal, ...params}: RequestConfig & s.CreateAppInstanceRequest,
  ): Promise<s.CreateAppInstanceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Metadata: params["Metadata"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAppInstance",
      requestUri: "/app-instances",
      responseCode: 201,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceArn": "s",
      },
    }, await resp.json());
  }

  async createAppInstanceAdmin(
    {abortSignal, ...params}: RequestConfig & s.CreateAppInstanceAdminRequest,
  ): Promise<s.CreateAppInstanceAdminResponse> {
    const body: jsonP.JSONObject = {
      AppInstanceAdminArn: params["AppInstanceAdminArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAppInstanceAdmin",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/admins`,
      responseCode: 201,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceAdmin": toIdentity,
        "AppInstanceArn": "s",
      },
    }, await resp.json());
  }

  async createAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.CreateAppInstanceUserRequest,
  ): Promise<s.CreateAppInstanceUserResponse> {
    const body: jsonP.JSONObject = {
      AppInstanceArn: params["AppInstanceArn"],
      AppInstanceUserId: params["AppInstanceUserId"],
      Name: params["Name"],
      Metadata: params["Metadata"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAppInstanceUser",
      requestUri: "/app-instance-users",
      responseCode: 201,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceUserArn": "s",
      },
    }, await resp.json());
  }

  async createAttendee(
    {abortSignal, ...params}: RequestConfig & s.CreateAttendeeRequest,
  ): Promise<s.CreateAttendeeResponse> {
    const body: jsonP.JSONObject = {
      ExternalUserId: params["ExternalUserId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendee": toAttendee,
      },
    }, await resp.json());
  }

  async createBot(
    {abortSignal, ...params}: RequestConfig & s.CreateBotRequest,
  ): Promise<s.CreateBotResponse> {
    const body: jsonP.JSONObject = {
      DisplayName: params["DisplayName"],
      Domain: params["Domain"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBot",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async createChannel(
    {abortSignal, ...params}: RequestConfig & s.CreateChannelRequest,
  ): Promise<s.CreateChannelResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      AppInstanceArn: params["AppInstanceArn"],
      Name: params["Name"],
      Mode: params["Mode"],
      Privacy: params["Privacy"],
      Metadata: params["Metadata"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateChannel",
      requestUri: "/channels",
      responseCode: 201,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
      },
    }, await resp.json());
  }

  async createChannelBan(
    {abortSignal, ...params}: RequestConfig & s.CreateChannelBanRequest,
  ): Promise<s.CreateChannelBanResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      MemberArn: params["MemberArn"],
    };
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateChannelBan",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/bans`,
      responseCode: 201,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "Member": toIdentity,
      },
    }, await resp.json());
  }

  async createChannelMembership(
    {abortSignal, ...params}: RequestConfig & s.CreateChannelMembershipRequest,
  ): Promise<s.CreateChannelMembershipResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      MemberArn: params["MemberArn"],
      Type: params["Type"],
    };
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateChannelMembership",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/memberships`,
      responseCode: 201,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "Member": toIdentity,
      },
    }, await resp.json());
  }

  async createChannelModerator(
    {abortSignal, ...params}: RequestConfig & s.CreateChannelModeratorRequest,
  ): Promise<s.CreateChannelModeratorResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      ChannelModeratorArn: params["ChannelModeratorArn"],
    };
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateChannelModerator",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/moderators`,
      responseCode: 201,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "ChannelModerator": toIdentity,
      },
    }, await resp.json());
  }

  async createMeeting(
    {abortSignal, ...params}: RequestConfig & s.CreateMeetingRequest,
  ): Promise<s.CreateMeetingResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      ExternalMeetingId: params["ExternalMeetingId"],
      MeetingHostId: params["MeetingHostId"],
      MediaRegion: params["MediaRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      NotificationsConfiguration: fromMeetingNotificationConfiguration(params["NotificationsConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMeeting",
      requestUri: "/meetings",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meeting": toMeeting,
      },
    }, await resp.json());
  }

  async createMeetingDialOut(
    {abortSignal, ...params}: RequestConfig & s.CreateMeetingDialOutRequest,
  ): Promise<s.CreateMeetingDialOutResponse> {
    const body: jsonP.JSONObject = {
      FromPhoneNumber: params["FromPhoneNumber"],
      ToPhoneNumber: params["ToPhoneNumber"],
      JoinToken: params["JoinToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMeetingDialOut",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/dial-outs`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TransactionId": "s",
      },
    }, await resp.json());
  }

  async createMeetingWithAttendees(
    {abortSignal, ...params}: RequestConfig & s.CreateMeetingWithAttendeesRequest,
  ): Promise<s.CreateMeetingWithAttendeesResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      ExternalMeetingId: params["ExternalMeetingId"],
      MeetingHostId: params["MeetingHostId"],
      MediaRegion: params["MediaRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      NotificationsConfiguration: fromMeetingNotificationConfiguration(params["NotificationsConfiguration"]),
      Attendees: params["Attendees"]?.map(x => fromCreateAttendeeRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMeetingWithAttendees",
      requestUri: "/meetings?operation=create-attendees",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meeting": toMeeting,
        "Attendees": [toAttendee],
        "Errors": [toCreateAttendeeError],
      },
    }, await resp.json());
  }

  async createPhoneNumberOrder(
    {abortSignal, ...params}: RequestConfig & s.CreatePhoneNumberOrderRequest,
  ): Promise<s.CreatePhoneNumberOrderResponse> {
    const body: jsonP.JSONObject = {
      ProductType: params["ProductType"],
      E164PhoneNumbers: params["E164PhoneNumbers"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePhoneNumberOrder",
      requestUri: "/phone-number-orders",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberOrder": toPhoneNumberOrder,
      },
    }, await resp.json());
  }

  async createProxySession(
    {abortSignal, ...params}: RequestConfig & s.CreateProxySessionRequest,
  ): Promise<s.CreateProxySessionResponse> {
    const body: jsonP.JSONObject = {
      ParticipantPhoneNumbers: params["ParticipantPhoneNumbers"],
      Name: params["Name"],
      ExpiryMinutes: params["ExpiryMinutes"],
      Capabilities: params["Capabilities"],
      NumberSelectionBehavior: params["NumberSelectionBehavior"],
      GeoMatchLevel: params["GeoMatchLevel"],
      GeoMatchParams: fromGeoMatchParams(params["GeoMatchParams"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProxySession",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySession": toProxySession,
      },
    }, await resp.json());
  }

  async createRoom(
    {abortSignal, ...params}: RequestConfig & s.CreateRoomRequest,
  ): Promise<s.CreateRoomResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoom",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async createRoomMembership(
    {abortSignal, ...params}: RequestConfig & s.CreateRoomMembershipRequest,
  ): Promise<s.CreateRoomMembershipResponse> {
    const body: jsonP.JSONObject = {
      MemberId: params["MemberId"],
      Role: params["Role"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoomMembership",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomMembership": toRoomMembership,
      },
    }, await resp.json());
  }

  async createSipMediaApplication(
    {abortSignal, ...params}: RequestConfig & s.CreateSipMediaApplicationRequest,
  ): Promise<s.CreateSipMediaApplicationResponse> {
    const body: jsonP.JSONObject = {
      AwsRegion: params["AwsRegion"],
      Name: params["Name"],
      Endpoints: params["Endpoints"]?.map(x => fromSipMediaApplicationEndpoint(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSipMediaApplication",
      requestUri: "/sip-media-applications",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipMediaApplication": toSipMediaApplication,
      },
    }, await resp.json());
  }

  async createSipMediaApplicationCall(
    {abortSignal, ...params}: RequestConfig & s.CreateSipMediaApplicationCallRequest,
  ): Promise<s.CreateSipMediaApplicationCallResponse> {
    const body: jsonP.JSONObject = {
      FromPhoneNumber: params["FromPhoneNumber"],
      ToPhoneNumber: params["ToPhoneNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSipMediaApplicationCall",
      requestUri: cmnP.encodePath`/sip-media-applications/${params["SipMediaApplicationId"]}/calls`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipMediaApplicationCall": toSipMediaApplicationCall,
      },
    }, await resp.json());
  }

  async createSipRule(
    {abortSignal, ...params}: RequestConfig & s.CreateSipRuleRequest,
  ): Promise<s.CreateSipRuleResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      TriggerType: params["TriggerType"],
      TriggerValue: params["TriggerValue"],
      Disabled: params["Disabled"],
      TargetApplications: params["TargetApplications"]?.map(x => fromSipRuleTargetApplication(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSipRule",
      requestUri: "/sip-rules",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipRule": toSipRule,
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & s.CreateUserRequest,
  ): Promise<s.CreateUserResponse> {
    const body: jsonP.JSONObject = {
      Username: params["Username"],
      Email: params["Email"],
      UserType: params["UserType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=create`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async createVoiceConnector(
    {abortSignal, ...params}: RequestConfig & s.CreateVoiceConnectorRequest,
  ): Promise<s.CreateVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      AwsRegion: params["AwsRegion"],
      RequireEncryption: params["RequireEncryption"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVoiceConnector",
      requestUri: "/voice-connectors",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnector": toVoiceConnector,
      },
    }, await resp.json());
  }

  async createVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & s.CreateVoiceConnectorGroupRequest,
  ): Promise<s.CreateVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      VoiceConnectorItems: params["VoiceConnectorItems"]?.map(x => fromVoiceConnectorItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVoiceConnectorGroup",
      requestUri: "/voice-connector-groups",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroup": toVoiceConnectorGroup,
      },
    }, await resp.json());
  }

  async deleteAccount(
    {abortSignal, ...params}: RequestConfig & s.DeleteAccountRequest,
  ): Promise<s.DeleteAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAccount",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAppInstance(
    {abortSignal, ...params}: RequestConfig & s.DeleteAppInstanceRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAppInstance",
      method: "DELETE",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}`,
      responseCode: 204,
      hostPrefix: `identity-`,
    });
  }

  async deleteAppInstanceAdmin(
    {abortSignal, ...params}: RequestConfig & s.DeleteAppInstanceAdminRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAppInstanceAdmin",
      method: "DELETE",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/admins/${params["AppInstanceAdminArn"]}`,
      responseCode: 204,
      hostPrefix: `identity-`,
    });
  }

  async deleteAppInstanceStreamingConfigurations(
    {abortSignal, ...params}: RequestConfig & s.DeleteAppInstanceStreamingConfigurationsRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAppInstanceStreamingConfigurations",
      method: "DELETE",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/streaming-configurations`,
      responseCode: 204,
    });
  }

  async deleteAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.DeleteAppInstanceUserRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAppInstanceUser",
      method: "DELETE",
      requestUri: cmnP.encodePath`/app-instance-users/${params["AppInstanceUserArn"]}`,
      responseCode: 204,
      hostPrefix: `identity-`,
    });
  }

  async deleteAttendee(
    {abortSignal, ...params}: RequestConfig & s.DeleteAttendeeRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAttendee",
      method: "DELETE",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}`,
      responseCode: 204,
    });
  }

  async deleteChannel(
    {abortSignal, ...params}: RequestConfig & s.DeleteChannelRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}`,
      responseCode: 204,
      hostPrefix: `messaging-`,
    });
  }

  async deleteChannelBan(
    {abortSignal, ...params}: RequestConfig & s.DeleteChannelBanRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteChannelBan",
      method: "DELETE",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/bans/${params["MemberArn"]}`,
      responseCode: 204,
      hostPrefix: `messaging-`,
    });
  }

  async deleteChannelMembership(
    {abortSignal, ...params}: RequestConfig & s.DeleteChannelMembershipRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteChannelMembership",
      method: "DELETE",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/memberships/${params["MemberArn"]}`,
      responseCode: 204,
      hostPrefix: `messaging-`,
    });
  }

  async deleteChannelMessage(
    {abortSignal, ...params}: RequestConfig & s.DeleteChannelMessageRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteChannelMessage",
      method: "DELETE",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/messages/${params["MessageId"]}`,
      responseCode: 204,
      hostPrefix: `messaging-`,
    });
  }

  async deleteChannelModerator(
    {abortSignal, ...params}: RequestConfig & s.DeleteChannelModeratorRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DeleteChannelModerator",
      method: "DELETE",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/moderators/${params["ChannelModeratorArn"]}`,
      responseCode: 204,
      hostPrefix: `messaging-`,
    });
  }

  async deleteEventsConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteEventsConfigurationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEventsConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}/events-configuration`,
      responseCode: 204,
    });
  }

  async deleteMeeting(
    {abortSignal, ...params}: RequestConfig & s.DeleteMeetingRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMeeting",
      method: "DELETE",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}`,
      responseCode: 204,
    });
  }

  async deletePhoneNumber(
    {abortSignal, ...params}: RequestConfig & s.DeletePhoneNumberRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePhoneNumber",
      method: "DELETE",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}`,
      responseCode: 204,
    });
  }

  async deleteProxySession(
    {abortSignal, ...params}: RequestConfig & s.DeleteProxySessionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProxySession",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions/${params["ProxySessionId"]}`,
      responseCode: 204,
    });
  }

  async deleteRoom(
    {abortSignal, ...params}: RequestConfig & s.DeleteRoomRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRoom",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}`,
      responseCode: 204,
    });
  }

  async deleteRoomMembership(
    {abortSignal, ...params}: RequestConfig & s.DeleteRoomMembershipRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRoomMembership",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships/${params["MemberId"]}`,
      responseCode: 204,
    });
  }

  async deleteSipMediaApplication(
    {abortSignal, ...params}: RequestConfig & s.DeleteSipMediaApplicationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSipMediaApplication",
      method: "DELETE",
      requestUri: cmnP.encodePath`/sip-media-applications/${params["SipMediaApplicationId"]}`,
      responseCode: 204,
    });
  }

  async deleteSipRule(
    {abortSignal, ...params}: RequestConfig & s.DeleteSipRuleRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteSipRule",
      method: "DELETE",
      requestUri: cmnP.encodePath`/sip-rules/${params["SipRuleId"]}`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnector(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnector",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorEmergencyCallingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorEmergencyCallingConfigurationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorEmergencyCallingConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/emergency-calling-configuration`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorGroupRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorOrigination(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorOriginationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorOrigination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/origination`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorProxy(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorProxyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorProxy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/programmable-numbers/proxy`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorStreamingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorStreamingConfigurationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorStreamingConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/streaming-configuration`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorTermination(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorTerminationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorTermination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorTerminationCredentials(
    {abortSignal, ...params}: RequestConfig & s.DeleteVoiceConnectorTerminationCredentialsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Usernames: params["Usernames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteVoiceConnectorTerminationCredentials",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/credentials?operation=delete`,
      responseCode: 204,
    });
  }

  async describeAppInstance(
    {abortSignal, ...params}: RequestConfig & s.DescribeAppInstanceRequest,
  ): Promise<s.DescribeAppInstanceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAppInstance",
      method: "GET",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstance": toAppInstance,
      },
    }, await resp.json());
  }

  async describeAppInstanceAdmin(
    {abortSignal, ...params}: RequestConfig & s.DescribeAppInstanceAdminRequest,
  ): Promise<s.DescribeAppInstanceAdminResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAppInstanceAdmin",
      method: "GET",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/admins/${params["AppInstanceAdminArn"]}`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceAdmin": toAppInstanceAdmin,
      },
    }, await resp.json());
  }

  async describeAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.DescribeAppInstanceUserRequest,
  ): Promise<s.DescribeAppInstanceUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAppInstanceUser",
      method: "GET",
      requestUri: cmnP.encodePath`/app-instance-users/${params["AppInstanceUserArn"]}`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceUser": toAppInstanceUser,
      },
    }, await resp.json());
  }

  async describeChannel(
    {abortSignal, ...params}: RequestConfig & s.DescribeChannelRequest,
  ): Promise<s.DescribeChannelResponse> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DescribeChannel",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Channel": toChannel,
      },
    }, await resp.json());
  }

  async describeChannelBan(
    {abortSignal, ...params}: RequestConfig & s.DescribeChannelBanRequest,
  ): Promise<s.DescribeChannelBanResponse> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DescribeChannelBan",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/bans/${params["MemberArn"]}`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelBan": toChannelBan,
      },
    }, await resp.json());
  }

  async describeChannelMembership(
    {abortSignal, ...params}: RequestConfig & s.DescribeChannelMembershipRequest,
  ): Promise<s.DescribeChannelMembershipResponse> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DescribeChannelMembership",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/memberships/${params["MemberArn"]}`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelMembership": toChannelMembership,
      },
    }, await resp.json());
  }

  async describeChannelMembershipForAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.DescribeChannelMembershipForAppInstanceUserRequest,
  ): Promise<s.DescribeChannelMembershipForAppInstanceUserResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    query.set("app-instance-user-arn", params["AppInstanceUserArn"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeChannelMembershipForAppInstanceUser",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}?scope=app-instance-user-membership`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelMembership": toChannelMembershipForAppInstanceUserSummary,
      },
    }, await resp.json());
  }

  async describeChannelModeratedByAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.DescribeChannelModeratedByAppInstanceUserRequest,
  ): Promise<s.DescribeChannelModeratedByAppInstanceUserResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    query.set("app-instance-user-arn", params["AppInstanceUserArn"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "DescribeChannelModeratedByAppInstanceUser",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}?scope=app-instance-user-moderated-channel`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Channel": toChannelModeratedByAppInstanceUserSummary,
      },
    }, await resp.json());
  }

  async describeChannelModerator(
    {abortSignal, ...params}: RequestConfig & s.DescribeChannelModeratorRequest,
  ): Promise<s.DescribeChannelModeratorResponse> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DescribeChannelModerator",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/moderators/${params["ChannelModeratorArn"]}`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelModerator": toChannelModerator,
      },
    }, await resp.json());
  }

  async disassociatePhoneNumberFromUser(
    {abortSignal, ...params}: RequestConfig & s.DisassociatePhoneNumberFromUserRequest,
  ): Promise<s.DisassociatePhoneNumberFromUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociatePhoneNumberFromUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=disassociate-phone-number`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociatePhoneNumbersFromVoiceConnector(
    {abortSignal, ...params}: RequestConfig & s.DisassociatePhoneNumbersFromVoiceConnectorRequest,
  ): Promise<s.DisassociatePhoneNumbersFromVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociatePhoneNumbersFromVoiceConnector",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}?operation=disassociate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async disassociatePhoneNumbersFromVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & s.DisassociatePhoneNumbersFromVoiceConnectorGroupRequest,
  ): Promise<s.DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociatePhoneNumbersFromVoiceConnectorGroup",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}?operation=disassociate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async disassociateSigninDelegateGroupsFromAccount(
    {abortSignal, ...params}: RequestConfig & s.DisassociateSigninDelegateGroupsFromAccountRequest,
  ): Promise<s.DisassociateSigninDelegateGroupsFromAccountResponse> {
    const body: jsonP.JSONObject = {
      GroupNames: params["GroupNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSigninDelegateGroupsFromAccount",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}?operation=disassociate-signin-delegate-groups`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccount(
    {abortSignal, ...params}: RequestConfig & s.GetAccountRequest,
  ): Promise<s.GetAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccount",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async getAccountSettings(
    {abortSignal, ...params}: RequestConfig & s.GetAccountSettingsRequest,
  ): Promise<s.GetAccountSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccountSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/settings`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountSettings": toAccountSettings,
      },
    }, await resp.json());
  }

  async getAppInstanceRetentionSettings(
    {abortSignal, ...params}: RequestConfig & s.GetAppInstanceRetentionSettingsRequest,
  ): Promise<s.GetAppInstanceRetentionSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAppInstanceRetentionSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/retention-settings`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceRetentionSettings": toAppInstanceRetentionSettings,
        "InitiateDeletionTimestamp": "d",
      },
    }, await resp.json());
  }

  async getAppInstanceStreamingConfigurations(
    {abortSignal, ...params}: RequestConfig & s.GetAppInstanceStreamingConfigurationsRequest,
  ): Promise<s.GetAppInstanceStreamingConfigurationsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAppInstanceStreamingConfigurations",
      method: "GET",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/streaming-configurations`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceStreamingConfigurations": [toAppInstanceStreamingConfiguration],
      },
    }, await resp.json());
  }

  async getAttendee(
    {abortSignal, ...params}: RequestConfig & s.GetAttendeeRequest,
  ): Promise<s.GetAttendeeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAttendee",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendee": toAttendee,
      },
    }, await resp.json());
  }

  async getBot(
    {abortSignal, ...params}: RequestConfig & s.GetBotRequest,
  ): Promise<s.GetBotResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBot",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async getChannelMessage(
    {abortSignal, ...params}: RequestConfig & s.GetChannelMessageRequest,
  ): Promise<s.GetChannelMessageResponse> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "GetChannelMessage",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/messages/${params["MessageId"]}`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelMessage": toChannelMessage,
      },
    }, await resp.json());
  }

  async getEventsConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetEventsConfigurationRequest,
  ): Promise<s.GetEventsConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEventsConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}/events-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventsConfiguration": toEventsConfiguration,
      },
    }, await resp.json());
  }

  async getGlobalSettings(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<s.GetGlobalSettingsResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGlobalSettings",
      method: "GET",
      requestUri: "/settings",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BusinessCalling": toBusinessCallingSettings,
        "VoiceConnector": toVoiceConnectorSettings,
      },
    }, await resp.json());
  }

  async getMeeting(
    {abortSignal, ...params}: RequestConfig & s.GetMeetingRequest,
  ): Promise<s.GetMeetingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMeeting",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meeting": toMeeting,
      },
    }, await resp.json());
  }

  async getMessagingSessionEndpoint(
    {abortSignal, ...params}: RequestConfig & s.GetMessagingSessionEndpointRequest = {},
  ): Promise<s.GetMessagingSessionEndpointResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMessagingSessionEndpoint",
      method: "GET",
      requestUri: "/endpoints/messaging-session",
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Endpoint": toMessagingSessionEndpoint,
      },
    }, await resp.json());
  }

  async getPhoneNumber(
    {abortSignal, ...params}: RequestConfig & s.GetPhoneNumberRequest,
  ): Promise<s.GetPhoneNumberResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPhoneNumber",
      method: "GET",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumber": toPhoneNumber,
      },
    }, await resp.json());
  }

  async getPhoneNumberOrder(
    {abortSignal, ...params}: RequestConfig & s.GetPhoneNumberOrderRequest,
  ): Promise<s.GetPhoneNumberOrderResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPhoneNumberOrder",
      method: "GET",
      requestUri: cmnP.encodePath`/phone-number-orders/${params["PhoneNumberOrderId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberOrder": toPhoneNumberOrder,
      },
    }, await resp.json());
  }

  async getPhoneNumberSettings(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<s.GetPhoneNumberSettingsResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPhoneNumberSettings",
      method: "GET",
      requestUri: "/settings/phone-number",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CallingName": "s",
        "CallingNameUpdatedTimestamp": "d",
      },
    }, await resp.json());
  }

  async getProxySession(
    {abortSignal, ...params}: RequestConfig & s.GetProxySessionRequest,
  ): Promise<s.GetProxySessionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetProxySession",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions/${params["ProxySessionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySession": toProxySession,
      },
    }, await resp.json());
  }

  async getRetentionSettings(
    {abortSignal, ...params}: RequestConfig & s.GetRetentionSettingsRequest,
  ): Promise<s.GetRetentionSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRetentionSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/retention-settings`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionSettings": toRetentionSettings,
        "InitiateDeletionTimestamp": "d",
      },
    }, await resp.json());
  }

  async getRoom(
    {abortSignal, ...params}: RequestConfig & s.GetRoomRequest,
  ): Promise<s.GetRoomResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRoom",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async getSipMediaApplication(
    {abortSignal, ...params}: RequestConfig & s.GetSipMediaApplicationRequest,
  ): Promise<s.GetSipMediaApplicationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSipMediaApplication",
      method: "GET",
      requestUri: cmnP.encodePath`/sip-media-applications/${params["SipMediaApplicationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipMediaApplication": toSipMediaApplication,
      },
    }, await resp.json());
  }

  async getSipMediaApplicationLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetSipMediaApplicationLoggingConfigurationRequest,
  ): Promise<s.GetSipMediaApplicationLoggingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSipMediaApplicationLoggingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/sip-media-applications/${params["SipMediaApplicationId"]}/logging-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipMediaApplicationLoggingConfiguration": toSipMediaApplicationLoggingConfiguration,
      },
    }, await resp.json());
  }

  async getSipRule(
    {abortSignal, ...params}: RequestConfig & s.GetSipRuleRequest,
  ): Promise<s.GetSipRuleResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetSipRule",
      method: "GET",
      requestUri: cmnP.encodePath`/sip-rules/${params["SipRuleId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipRule": toSipRule,
      },
    }, await resp.json());
  }

  async getUser(
    {abortSignal, ...params}: RequestConfig & s.GetUserRequest,
  ): Promise<s.GetUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetUser",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async getUserSettings(
    {abortSignal, ...params}: RequestConfig & s.GetUserSettingsRequest,
  ): Promise<s.GetUserSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetUserSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}/settings`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserSettings": toUserSettings,
      },
    }, await resp.json());
  }

  async getVoiceConnector(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorRequest,
  ): Promise<s.GetVoiceConnectorResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnector",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnector": toVoiceConnector,
      },
    }, await resp.json());
  }

  async getVoiceConnectorEmergencyCallingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorEmergencyCallingConfigurationRequest,
  ): Promise<s.GetVoiceConnectorEmergencyCallingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorEmergencyCallingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/emergency-calling-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EmergencyCallingConfiguration": toEmergencyCallingConfiguration,
      },
    }, await resp.json());
  }

  async getVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorGroupRequest,
  ): Promise<s.GetVoiceConnectorGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroup": toVoiceConnectorGroup,
      },
    }, await resp.json());
  }

  async getVoiceConnectorLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorLoggingConfigurationRequest,
  ): Promise<s.GetVoiceConnectorLoggingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorLoggingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/logging-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async getVoiceConnectorOrigination(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorOriginationRequest,
  ): Promise<s.GetVoiceConnectorOriginationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorOrigination",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/origination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Origination": toOrigination,
      },
    }, await resp.json());
  }

  async getVoiceConnectorProxy(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorProxyRequest,
  ): Promise<s.GetVoiceConnectorProxyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorProxy",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/programmable-numbers/proxy`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Proxy": toProxy,
      },
    }, await resp.json());
  }

  async getVoiceConnectorStreamingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorStreamingConfigurationRequest,
  ): Promise<s.GetVoiceConnectorStreamingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorStreamingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/streaming-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StreamingConfiguration": toStreamingConfiguration,
      },
    }, await resp.json());
  }

  async getVoiceConnectorTermination(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorTerminationRequest,
  ): Promise<s.GetVoiceConnectorTerminationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorTermination",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Termination": toTermination,
      },
    }, await resp.json());
  }

  async getVoiceConnectorTerminationHealth(
    {abortSignal, ...params}: RequestConfig & s.GetVoiceConnectorTerminationHealthRequest,
  ): Promise<s.GetVoiceConnectorTerminationHealthResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorTerminationHealth",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/health`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TerminationHealth": toTerminationHealth,
      },
    }, await resp.json());
  }

  async inviteUsers(
    {abortSignal, ...params}: RequestConfig & s.InviteUsersRequest,
  ): Promise<s.InviteUsersResponse> {
    const body: jsonP.JSONObject = {
      UserEmailList: params["UserEmailList"],
      UserType: params["UserType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InviteUsers",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=add`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Invites": [toInvite],
      },
    }, await resp.json());
  }

  async listAccounts(
    {abortSignal, ...params}: RequestConfig & s.ListAccountsRequest = {},
  ): Promise<s.ListAccountsResponse> {
    const query = new URLSearchParams;
    if (params["Name"] != null) query.set("name", params["Name"]?.toString() ?? "");
    if (params["UserEmail"] != null) query.set("user-email", params["UserEmail"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAccounts",
      method: "GET",
      requestUri: "/accounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accounts": [toAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAppInstanceAdmins(
    {abortSignal, ...params}: RequestConfig & s.ListAppInstanceAdminsRequest,
  ): Promise<s.ListAppInstanceAdminsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAppInstanceAdmins",
      method: "GET",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/admins`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceArn": "s",
        "AppInstanceAdmins": [toAppInstanceAdminSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAppInstanceUsers(
    {abortSignal, ...params}: RequestConfig & s.ListAppInstanceUsersRequest,
  ): Promise<s.ListAppInstanceUsersResponse> {
    const query = new URLSearchParams;
    query.set("app-instance-arn", params["AppInstanceArn"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAppInstanceUsers",
      method: "GET",
      requestUri: "/app-instance-users",
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceArn": "s",
        "AppInstanceUsers": [toAppInstanceUserSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAppInstances(
    {abortSignal, ...params}: RequestConfig & s.ListAppInstancesRequest = {},
  ): Promise<s.ListAppInstancesResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAppInstances",
      method: "GET",
      requestUri: "/app-instances",
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstances": [toAppInstanceSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAttendeeTags(
    {abortSignal, ...params}: RequestConfig & s.ListAttendeeTagsRequest,
  ): Promise<s.ListAttendeeTagsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListAttendeeTags",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}/tags`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listAttendees(
    {abortSignal, ...params}: RequestConfig & s.ListAttendeesRequest,
  ): Promise<s.ListAttendeesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAttendees",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendees": [toAttendee],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listBots(
    {abortSignal, ...params}: RequestConfig & s.ListBotsRequest,
  ): Promise<s.ListBotsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBots",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bots": [toBot],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listChannelBans(
    {abortSignal, ...params}: RequestConfig & s.ListChannelBansRequest,
  ): Promise<s.ListChannelBansResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListChannelBans",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/bans`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "NextToken": "s",
        "ChannelBans": [toChannelBanSummary],
      },
    }, await resp.json());
  }

  async listChannelMemberships(
    {abortSignal, ...params}: RequestConfig & s.ListChannelMembershipsRequest,
  ): Promise<s.ListChannelMembershipsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["Type"] != null) query.set("type", params["Type"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListChannelMemberships",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/memberships`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "ChannelMemberships": [toChannelMembershipSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listChannelMembershipsForAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.ListChannelMembershipsForAppInstanceUserRequest = {},
  ): Promise<s.ListChannelMembershipsForAppInstanceUserResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AppInstanceUserArn"] != null) query.set("app-instance-user-arn", params["AppInstanceUserArn"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListChannelMembershipsForAppInstanceUser",
      method: "GET",
      requestUri: "/channels?scope=app-instance-user-memberships",
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelMemberships": [toChannelMembershipForAppInstanceUserSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listChannelMessages(
    {abortSignal, ...params}: RequestConfig & s.ListChannelMessagesRequest,
  ): Promise<s.ListChannelMessagesResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["SortOrder"] != null) query.set("sort-order", params["SortOrder"]?.toString() ?? "");
    if (params["NotBefore"] != null) query.set("not-before", cmnP.serializeDate_iso8601(params["NotBefore"]) ?? "");
    if (params["NotAfter"] != null) query.set("not-after", cmnP.serializeDate_iso8601(params["NotAfter"]) ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListChannelMessages",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/messages`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "NextToken": "s",
        "ChannelMessages": [toChannelMessageSummary],
      },
    }, await resp.json());
  }

  async listChannelModerators(
    {abortSignal, ...params}: RequestConfig & s.ListChannelModeratorsRequest,
  ): Promise<s.ListChannelModeratorsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListChannelModerators",
      method: "GET",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/moderators`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "NextToken": "s",
        "ChannelModerators": [toChannelModeratorSummary],
      },
    }, await resp.json());
  }

  async listChannels(
    {abortSignal, ...params}: RequestConfig & s.ListChannelsRequest,
  ): Promise<s.ListChannelsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    query.set("app-instance-arn", params["AppInstanceArn"]?.toString() ?? "");
    if (params["Privacy"] != null) query.set("privacy", params["Privacy"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListChannels",
      method: "GET",
      requestUri: "/channels",
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Channels": [toChannelSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listChannelsModeratedByAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.ListChannelsModeratedByAppInstanceUserRequest = {},
  ): Promise<s.ListChannelsModeratedByAppInstanceUserResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["AppInstanceUserArn"] != null) query.set("app-instance-user-arn", params["AppInstanceUserArn"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListChannelsModeratedByAppInstanceUser",
      method: "GET",
      requestUri: "/channels?scope=app-instance-user-moderated-channels",
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Channels": [toChannelModeratedByAppInstanceUserSummary],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMeetingTags(
    {abortSignal, ...params}: RequestConfig & s.ListMeetingTagsRequest,
  ): Promise<s.ListMeetingTagsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListMeetingTags",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/tags`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listMeetings(
    {abortSignal, ...params}: RequestConfig & s.ListMeetingsRequest = {},
  ): Promise<s.ListMeetingsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMeetings",
      method: "GET",
      requestUri: "/meetings",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meetings": [toMeeting],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPhoneNumberOrders(
    {abortSignal, ...params}: RequestConfig & s.ListPhoneNumberOrdersRequest = {},
  ): Promise<s.ListPhoneNumberOrdersResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPhoneNumberOrders",
      method: "GET",
      requestUri: "/phone-number-orders",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberOrders": [toPhoneNumberOrder],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPhoneNumbers(
    {abortSignal, ...params}: RequestConfig & s.ListPhoneNumbersRequest = {},
  ): Promise<s.ListPhoneNumbersResponse> {
    const query = new URLSearchParams;
    if (params["Status"] != null) query.set("status", params["Status"]?.toString() ?? "");
    if (params["ProductType"] != null) query.set("product-type", params["ProductType"]?.toString() ?? "");
    if (params["FilterName"] != null) query.set("filter-name", params["FilterName"]?.toString() ?? "");
    if (params["FilterValue"] != null) query.set("filter-value", params["FilterValue"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPhoneNumbers",
      method: "GET",
      requestUri: "/phone-numbers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumbers": [toPhoneNumber],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProxySessions(
    {abortSignal, ...params}: RequestConfig & s.ListProxySessionsRequest,
  ): Promise<s.ListProxySessionsResponse> {
    const query = new URLSearchParams;
    if (params["Status"] != null) query.set("status", params["Status"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProxySessions",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySessions": [toProxySession],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRoomMemberships(
    {abortSignal, ...params}: RequestConfig & s.ListRoomMembershipsRequest,
  ): Promise<s.ListRoomMembershipsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRoomMemberships",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomMemberships": [toRoomMembership],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRooms(
    {abortSignal, ...params}: RequestConfig & s.ListRoomsRequest,
  ): Promise<s.ListRoomsResponse> {
    const query = new URLSearchParams;
    if (params["MemberId"] != null) query.set("member-id", params["MemberId"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRooms",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rooms": [toRoom],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSipMediaApplications(
    {abortSignal, ...params}: RequestConfig & s.ListSipMediaApplicationsRequest = {},
  ): Promise<s.ListSipMediaApplicationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSipMediaApplications",
      method: "GET",
      requestUri: "/sip-media-applications",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipMediaApplications": [toSipMediaApplication],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listSipRules(
    {abortSignal, ...params}: RequestConfig & s.ListSipRulesRequest = {},
  ): Promise<s.ListSipRulesResponse> {
    const query = new URLSearchParams;
    if (params["SipMediaApplicationId"] != null) query.set("sip-media-application", params["SipMediaApplicationId"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSipRules",
      method: "GET",
      requestUri: "/sip-rules",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipRules": [toSipRule],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("arn", params["ResourceARN"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & s.ListUsersRequest,
  ): Promise<s.ListUsersResponse> {
    const query = new URLSearchParams;
    if (params["UserEmail"] != null) query.set("user-email", params["UserEmail"]?.toString() ?? "");
    if (params["UserType"] != null) query.set("user-type", params["UserType"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUsers",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Users": [toUser],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listVoiceConnectorGroups(
    {abortSignal, ...params}: RequestConfig & s.ListVoiceConnectorGroupsRequest = {},
  ): Promise<s.ListVoiceConnectorGroupsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListVoiceConnectorGroups",
      method: "GET",
      requestUri: "/voice-connector-groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroups": [toVoiceConnectorGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listVoiceConnectorTerminationCredentials(
    {abortSignal, ...params}: RequestConfig & s.ListVoiceConnectorTerminationCredentialsRequest,
  ): Promise<s.ListVoiceConnectorTerminationCredentialsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListVoiceConnectorTerminationCredentials",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/credentials`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Usernames": ["s"],
      },
    }, await resp.json());
  }

  async listVoiceConnectors(
    {abortSignal, ...params}: RequestConfig & s.ListVoiceConnectorsRequest = {},
  ): Promise<s.ListVoiceConnectorsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListVoiceConnectors",
      method: "GET",
      requestUri: "/voice-connectors",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectors": [toVoiceConnector],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async logoutUser(
    {abortSignal, ...params}: RequestConfig & s.LogoutUserRequest,
  ): Promise<s.LogoutUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "LogoutUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=logout`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putAppInstanceRetentionSettings(
    {abortSignal, ...params}: RequestConfig & s.PutAppInstanceRetentionSettingsRequest,
  ): Promise<s.PutAppInstanceRetentionSettingsResponse> {
    const body: jsonP.JSONObject = {
      AppInstanceRetentionSettings: fromAppInstanceRetentionSettings(params["AppInstanceRetentionSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAppInstanceRetentionSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/retention-settings`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceRetentionSettings": toAppInstanceRetentionSettings,
        "InitiateDeletionTimestamp": "d",
      },
    }, await resp.json());
  }

  async putAppInstanceStreamingConfigurations(
    {abortSignal, ...params}: RequestConfig & s.PutAppInstanceStreamingConfigurationsRequest,
  ): Promise<s.PutAppInstanceStreamingConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      AppInstanceStreamingConfigurations: params["AppInstanceStreamingConfigurations"]?.map(x => fromAppInstanceStreamingConfiguration(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutAppInstanceStreamingConfigurations",
      method: "PUT",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}/streaming-configurations`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceStreamingConfigurations": [toAppInstanceStreamingConfiguration],
      },
    }, await resp.json());
  }

  async putEventsConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutEventsConfigurationRequest,
  ): Promise<s.PutEventsConfigurationResponse> {
    const body: jsonP.JSONObject = {
      OutboundEventsHTTPSEndpoint: params["OutboundEventsHTTPSEndpoint"],
      LambdaFunctionArn: params["LambdaFunctionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEventsConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}/events-configuration`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventsConfiguration": toEventsConfiguration,
      },
    }, await resp.json());
  }

  async putRetentionSettings(
    {abortSignal, ...params}: RequestConfig & s.PutRetentionSettingsRequest,
  ): Promise<s.PutRetentionSettingsResponse> {
    const body: jsonP.JSONObject = {
      RetentionSettings: fromRetentionSettings(params["RetentionSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRetentionSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/retention-settings`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionSettings": toRetentionSettings,
        "InitiateDeletionTimestamp": "d",
      },
    }, await resp.json());
  }

  async putSipMediaApplicationLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutSipMediaApplicationLoggingConfigurationRequest,
  ): Promise<s.PutSipMediaApplicationLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      SipMediaApplicationLoggingConfiguration: fromSipMediaApplicationLoggingConfiguration(params["SipMediaApplicationLoggingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutSipMediaApplicationLoggingConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/sip-media-applications/${params["SipMediaApplicationId"]}/logging-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipMediaApplicationLoggingConfiguration": toSipMediaApplicationLoggingConfiguration,
      },
    }, await resp.json());
  }

  async putVoiceConnectorEmergencyCallingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutVoiceConnectorEmergencyCallingConfigurationRequest,
  ): Promise<s.PutVoiceConnectorEmergencyCallingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      EmergencyCallingConfiguration: fromEmergencyCallingConfiguration(params["EmergencyCallingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorEmergencyCallingConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/emergency-calling-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EmergencyCallingConfiguration": toEmergencyCallingConfiguration,
      },
    }, await resp.json());
  }

  async putVoiceConnectorLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutVoiceConnectorLoggingConfigurationRequest,
  ): Promise<s.PutVoiceConnectorLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      LoggingConfiguration: fromLoggingConfiguration(params["LoggingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorLoggingConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/logging-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async putVoiceConnectorOrigination(
    {abortSignal, ...params}: RequestConfig & s.PutVoiceConnectorOriginationRequest,
  ): Promise<s.PutVoiceConnectorOriginationResponse> {
    const body: jsonP.JSONObject = {
      Origination: fromOrigination(params["Origination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorOrigination",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/origination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Origination": toOrigination,
      },
    }, await resp.json());
  }

  async putVoiceConnectorProxy(
    {abortSignal, ...params}: RequestConfig & s.PutVoiceConnectorProxyRequest,
  ): Promise<s.PutVoiceConnectorProxyResponse> {
    const body: jsonP.JSONObject = {
      DefaultSessionExpiryMinutes: params["DefaultSessionExpiryMinutes"],
      PhoneNumberPoolCountries: params["PhoneNumberPoolCountries"],
      FallBackPhoneNumber: params["FallBackPhoneNumber"],
      Disabled: params["Disabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorProxy",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/programmable-numbers/proxy`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Proxy": toProxy,
      },
    }, await resp.json());
  }

  async putVoiceConnectorStreamingConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutVoiceConnectorStreamingConfigurationRequest,
  ): Promise<s.PutVoiceConnectorStreamingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      StreamingConfiguration: fromStreamingConfiguration(params["StreamingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorStreamingConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/streaming-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StreamingConfiguration": toStreamingConfiguration,
      },
    }, await resp.json());
  }

  async putVoiceConnectorTermination(
    {abortSignal, ...params}: RequestConfig & s.PutVoiceConnectorTerminationRequest,
  ): Promise<s.PutVoiceConnectorTerminationResponse> {
    const body: jsonP.JSONObject = {
      Termination: fromTermination(params["Termination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorTermination",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Termination": toTermination,
      },
    }, await resp.json());
  }

  async putVoiceConnectorTerminationCredentials(
    {abortSignal, ...params}: RequestConfig & s.PutVoiceConnectorTerminationCredentialsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Credentials: params["Credentials"]?.map(x => fromCredential(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorTerminationCredentials",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/credentials?operation=put`,
      responseCode: 204,
    });
  }

  async redactChannelMessage(
    {abortSignal, ...params}: RequestConfig & s.RedactChannelMessageRequest,
  ): Promise<s.RedactChannelMessageResponse> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "RedactChannelMessage",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/messages/${params["MessageId"]}?operation=redact`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async redactConversationMessage(
    {abortSignal, ...params}: RequestConfig & s.RedactConversationMessageRequest,
  ): Promise<s.RedactConversationMessageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RedactConversationMessage",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/conversations/${params["ConversationId"]}/messages/${params["MessageId"]}?operation=redact`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async redactRoomMessage(
    {abortSignal, ...params}: RequestConfig & s.RedactRoomMessageRequest,
  ): Promise<s.RedactRoomMessageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RedactRoomMessage",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/messages/${params["MessageId"]}?operation=redact`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async regenerateSecurityToken(
    {abortSignal, ...params}: RequestConfig & s.RegenerateSecurityTokenRequest,
  ): Promise<s.RegenerateSecurityTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RegenerateSecurityToken",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}?operation=regenerate-security-token`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async resetPersonalPIN(
    {abortSignal, ...params}: RequestConfig & s.ResetPersonalPINRequest,
  ): Promise<s.ResetPersonalPINResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ResetPersonalPIN",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=reset-personal-pin`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async restorePhoneNumber(
    {abortSignal, ...params}: RequestConfig & s.RestorePhoneNumberRequest,
  ): Promise<s.RestorePhoneNumberResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RestorePhoneNumber",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}?operation=restore`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumber": toPhoneNumber,
      },
    }, await resp.json());
  }

  async searchAvailablePhoneNumbers(
    {abortSignal, ...params}: RequestConfig & s.SearchAvailablePhoneNumbersRequest = {},
  ): Promise<s.SearchAvailablePhoneNumbersResponse> {
    const query = new URLSearchParams;
    if (params["AreaCode"] != null) query.set("area-code", params["AreaCode"]?.toString() ?? "");
    if (params["City"] != null) query.set("city", params["City"]?.toString() ?? "");
    if (params["Country"] != null) query.set("country", params["Country"]?.toString() ?? "");
    if (params["State"] != null) query.set("state", params["State"]?.toString() ?? "");
    if (params["TollFreePrefix"] != null) query.set("toll-free-prefix", params["TollFreePrefix"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "SearchAvailablePhoneNumbers",
      method: "GET",
      requestUri: "/search?type=phone-numbers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "E164PhoneNumbers": ["s"],
      },
    }, await resp.json());
  }

  async sendChannelMessage(
    {abortSignal, ...params}: RequestConfig & s.SendChannelMessageRequest,
  ): Promise<s.SendChannelMessageResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Content: params["Content"],
      Type: params["Type"],
      Persistence: params["Persistence"],
      Metadata: params["Metadata"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "SendChannelMessage",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/messages`,
      responseCode: 201,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async tagAttendee(
    {abortSignal, ...params}: RequestConfig & s.TagAttendeeRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}/tags?operation=add`,
      responseCode: 204,
    });
  }

  async tagMeeting(
    {abortSignal, ...params}: RequestConfig & s.TagMeetingRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagMeeting",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/tags?operation=add`,
      responseCode: 204,
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/tags?operation=tag-resource",
      responseCode: 204,
    });
  }

  async untagAttendee(
    {abortSignal, ...params}: RequestConfig & s.UntagAttendeeRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}/tags?operation=delete`,
      responseCode: 204,
    });
  }

  async untagMeeting(
    {abortSignal, ...params}: RequestConfig & s.UntagMeetingRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagMeeting",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/tags?operation=delete`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: "/tags?operation=untag-resource",
      responseCode: 204,
    });
  }

  async updateAccount(
    {abortSignal, ...params}: RequestConfig & s.UpdateAccountRequest,
  ): Promise<s.UpdateAccountResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccount",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async updateAccountSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateAccountSettingsRequest,
  ): Promise<s.UpdateAccountSettingsResponse> {
    const body: jsonP.JSONObject = {
      AccountSettings: fromAccountSettings(params["AccountSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccountSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/settings`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAppInstance(
    {abortSignal, ...params}: RequestConfig & s.UpdateAppInstanceRequest,
  ): Promise<s.UpdateAppInstanceResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Metadata: params["Metadata"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAppInstance",
      method: "PUT",
      requestUri: cmnP.encodePath`/app-instances/${params["AppInstanceArn"]}`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceArn": "s",
      },
    }, await resp.json());
  }

  async updateAppInstanceUser(
    {abortSignal, ...params}: RequestConfig & s.UpdateAppInstanceUserRequest,
  ): Promise<s.UpdateAppInstanceUserResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Metadata: params["Metadata"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAppInstanceUser",
      method: "PUT",
      requestUri: cmnP.encodePath`/app-instance-users/${params["AppInstanceUserArn"]}`,
      responseCode: 200,
      hostPrefix: `identity-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AppInstanceUserArn": "s",
      },
    }, await resp.json());
  }

  async updateBot(
    {abortSignal, ...params}: RequestConfig & s.UpdateBotRequest,
  ): Promise<s.UpdateBotResponse> {
    const body: jsonP.JSONObject = {
      Disabled: params["Disabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBot",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async updateChannel(
    {abortSignal, ...params}: RequestConfig & s.UpdateChannelRequest,
  ): Promise<s.UpdateChannelResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Mode: params["Mode"],
      Metadata: params["Metadata"],
    };
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateChannel",
      method: "PUT",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
      },
    }, await resp.json());
  }

  async updateChannelMessage(
    {abortSignal, ...params}: RequestConfig & s.UpdateChannelMessageRequest,
  ): Promise<s.UpdateChannelMessageResponse> {
    const headers = new Headers;
    const body: jsonP.JSONObject = {
      Content: params["Content"],
      Metadata: params["Metadata"],
    };
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "UpdateChannelMessage",
      method: "PUT",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/messages/${params["MessageId"]}`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
        "MessageId": "s",
      },
    }, await resp.json());
  }

  async updateChannelReadMarker(
    {abortSignal, ...params}: RequestConfig & s.UpdateChannelReadMarkerRequest,
  ): Promise<s.UpdateChannelReadMarkerResponse> {
    const headers = new Headers;
    if (params["ChimeBearer"] != null) headers.append("x-amz-chime-bearer", params["ChimeBearer"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "UpdateChannelReadMarker",
      method: "PUT",
      requestUri: cmnP.encodePath`/channels/${params["ChannelArn"]}/readMarker`,
      responseCode: 200,
      hostPrefix: `messaging-`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ChannelArn": "s",
      },
    }, await resp.json());
  }

  async updateGlobalSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateGlobalSettingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      BusinessCalling: fromBusinessCallingSettings(params["BusinessCalling"]),
      VoiceConnector: fromVoiceConnectorSettings(params["VoiceConnector"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGlobalSettings",
      method: "PUT",
      requestUri: "/settings",
      responseCode: 204,
    });
  }

  async updatePhoneNumber(
    {abortSignal, ...params}: RequestConfig & s.UpdatePhoneNumberRequest,
  ): Promise<s.UpdatePhoneNumberResponse> {
    const body: jsonP.JSONObject = {
      ProductType: params["ProductType"],
      CallingName: params["CallingName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePhoneNumber",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumber": toPhoneNumber,
      },
    }, await resp.json());
  }

  async updatePhoneNumberSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdatePhoneNumberSettingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      CallingName: params["CallingName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePhoneNumberSettings",
      method: "PUT",
      requestUri: "/settings/phone-number",
      responseCode: 204,
    });
  }

  async updateProxySession(
    {abortSignal, ...params}: RequestConfig & s.UpdateProxySessionRequest,
  ): Promise<s.UpdateProxySessionResponse> {
    const body: jsonP.JSONObject = {
      Capabilities: params["Capabilities"],
      ExpiryMinutes: params["ExpiryMinutes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProxySession",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions/${params["ProxySessionId"]}`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySession": toProxySession,
      },
    }, await resp.json());
  }

  async updateRoom(
    {abortSignal, ...params}: RequestConfig & s.UpdateRoomRequest,
  ): Promise<s.UpdateRoomResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoom",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async updateRoomMembership(
    {abortSignal, ...params}: RequestConfig & s.UpdateRoomMembershipRequest,
  ): Promise<s.UpdateRoomMembershipResponse> {
    const body: jsonP.JSONObject = {
      Role: params["Role"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoomMembership",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships/${params["MemberId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomMembership": toRoomMembership,
      },
    }, await resp.json());
  }

  async updateSipMediaApplication(
    {abortSignal, ...params}: RequestConfig & s.UpdateSipMediaApplicationRequest,
  ): Promise<s.UpdateSipMediaApplicationResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Endpoints: params["Endpoints"]?.map(x => fromSipMediaApplicationEndpoint(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSipMediaApplication",
      method: "PUT",
      requestUri: cmnP.encodePath`/sip-media-applications/${params["SipMediaApplicationId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipMediaApplication": toSipMediaApplication,
      },
    }, await resp.json());
  }

  async updateSipRule(
    {abortSignal, ...params}: RequestConfig & s.UpdateSipRuleRequest,
  ): Promise<s.UpdateSipRuleResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Disabled: params["Disabled"],
      TargetApplications: params["TargetApplications"]?.map(x => fromSipRuleTargetApplication(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateSipRule",
      method: "PUT",
      requestUri: cmnP.encodePath`/sip-rules/${params["SipRuleId"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "SipRule": toSipRule,
      },
    }, await resp.json());
  }

  async updateUser(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserRequest,
  ): Promise<s.UpdateUserResponse> {
    const body: jsonP.JSONObject = {
      LicenseType: params["LicenseType"],
      UserType: params["UserType"],
      AlexaForBusinessMetadata: fromAlexaForBusinessMetadata(params["AlexaForBusinessMetadata"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async updateUserSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateUserSettingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      UserSettings: fromUserSettings(params["UserSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}/settings`,
      responseCode: 204,
    });
  }

  async updateVoiceConnector(
    {abortSignal, ...params}: RequestConfig & s.UpdateVoiceConnectorRequest,
  ): Promise<s.UpdateVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      RequireEncryption: params["RequireEncryption"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVoiceConnector",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnector": toVoiceConnector,
      },
    }, await resp.json());
  }

  async updateVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & s.UpdateVoiceConnectorGroupRequest,
  ): Promise<s.UpdateVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      VoiceConnectorItems: params["VoiceConnectorItems"]?.map(x => fromVoiceConnectorItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVoiceConnectorGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroup": toVoiceConnectorGroup,
      },
    }, await resp.json());
  }

}

function fromSigninDelegateGroup(input?: s.SigninDelegateGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GroupName: input["GroupName"],
  }
}
function toSigninDelegateGroup(root: jsonP.JSONValue): s.SigninDelegateGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupName": "s",
    },
  }, root);
}

function fromCreateAttendeeRequestItem(input?: s.CreateAttendeeRequestItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ExternalUserId: input["ExternalUserId"],
    Tags: input["Tags"]?.map(x => fromTag(x)),
  }
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

function fromMembershipItem(input?: s.MembershipItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MemberId: input["MemberId"],
    Role: input["Role"],
  }
}

function fromUpdatePhoneNumberRequestItem(input?: s.UpdatePhoneNumberRequestItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PhoneNumberId: input["PhoneNumberId"],
    ProductType: input["ProductType"],
    CallingName: input["CallingName"],
  }
}

function fromUpdateUserRequestItem(input?: s.UpdateUserRequestItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserId: input["UserId"],
    LicenseType: input["LicenseType"],
    UserType: input["UserType"],
    AlexaForBusinessMetadata: fromAlexaForBusinessMetadata(input["AlexaForBusinessMetadata"]),
  }
}

function fromAlexaForBusinessMetadata(input?: s.AlexaForBusinessMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsAlexaForBusinessEnabled: input["IsAlexaForBusinessEnabled"],
    AlexaForBusinessRoomArn: input["AlexaForBusinessRoomArn"],
  }
}
function toAlexaForBusinessMetadata(root: jsonP.JSONValue): s.AlexaForBusinessMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "IsAlexaForBusinessEnabled": "b",
      "AlexaForBusinessRoomArn": "s",
    },
  }, root);
}

function fromMeetingNotificationConfiguration(input?: s.MeetingNotificationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnsTopicArn: input["SnsTopicArn"],
    SqsQueueArn: input["SqsQueueArn"],
  }
}

function fromGeoMatchParams(input?: s.GeoMatchParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Country: input["Country"],
    AreaCode: input["AreaCode"],
  }
}
function toGeoMatchParams(root: jsonP.JSONValue): s.GeoMatchParams {
  return jsonP.readObj({
    required: {
      "Country": "s",
      "AreaCode": "s",
    },
    optional: {},
  }, root);
}

function fromSipMediaApplicationEndpoint(input?: s.SipMediaApplicationEndpoint | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LambdaArn: input["LambdaArn"],
  }
}
function toSipMediaApplicationEndpoint(root: jsonP.JSONValue): s.SipMediaApplicationEndpoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "LambdaArn": "s",
    },
  }, root);
}

function fromSipRuleTargetApplication(input?: s.SipRuleTargetApplication | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SipMediaApplicationId: input["SipMediaApplicationId"],
    Priority: input["Priority"],
    AwsRegion: input["AwsRegion"],
  }
}
function toSipRuleTargetApplication(root: jsonP.JSONValue): s.SipRuleTargetApplication {
  return jsonP.readObj({
    required: {},
    optional: {
      "SipMediaApplicationId": "s",
      "Priority": "n",
      "AwsRegion": "s",
    },
  }, root);
}

function fromVoiceConnectorItem(input?: s.VoiceConnectorItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VoiceConnectorId: input["VoiceConnectorId"],
    Priority: input["Priority"],
  }
}
function toVoiceConnectorItem(root: jsonP.JSONValue): s.VoiceConnectorItem {
  return jsonP.readObj({
    required: {
      "VoiceConnectorId": "s",
      "Priority": "n",
    },
    optional: {},
  }, root);
}

function fromAppInstanceRetentionSettings(input?: s.AppInstanceRetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ChannelRetentionSettings: fromChannelRetentionSettings(input["ChannelRetentionSettings"]),
  }
}
function toAppInstanceRetentionSettings(root: jsonP.JSONValue): s.AppInstanceRetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChannelRetentionSettings": toChannelRetentionSettings,
    },
  }, root);
}

function fromChannelRetentionSettings(input?: s.ChannelRetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RetentionDays: input["RetentionDays"],
  }
}
function toChannelRetentionSettings(root: jsonP.JSONValue): s.ChannelRetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "RetentionDays": "n",
    },
  }, root);
}

function fromAppInstanceStreamingConfiguration(input?: s.AppInstanceStreamingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AppInstanceDataType: input["AppInstanceDataType"],
    ResourceArn: input["ResourceArn"],
  }
}
function toAppInstanceStreamingConfiguration(root: jsonP.JSONValue): s.AppInstanceStreamingConfiguration {
  return jsonP.readObj({
    required: {
      "AppInstanceDataType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AppInstanceDataType>(x),
      "ResourceArn": "s",
    },
    optional: {},
  }, root);
}

function fromRetentionSettings(input?: s.RetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoomRetentionSettings: fromRoomRetentionSettings(input["RoomRetentionSettings"]),
    ConversationRetentionSettings: fromConversationRetentionSettings(input["ConversationRetentionSettings"]),
  }
}
function toRetentionSettings(root: jsonP.JSONValue): s.RetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomRetentionSettings": toRoomRetentionSettings,
      "ConversationRetentionSettings": toConversationRetentionSettings,
    },
  }, root);
}

function fromRoomRetentionSettings(input?: s.RoomRetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RetentionDays: input["RetentionDays"],
  }
}
function toRoomRetentionSettings(root: jsonP.JSONValue): s.RoomRetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "RetentionDays": "n",
    },
  }, root);
}

function fromConversationRetentionSettings(input?: s.ConversationRetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RetentionDays: input["RetentionDays"],
  }
}
function toConversationRetentionSettings(root: jsonP.JSONValue): s.ConversationRetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "RetentionDays": "n",
    },
  }, root);
}

function fromSipMediaApplicationLoggingConfiguration(input?: s.SipMediaApplicationLoggingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EnableSipMediaApplicationMessageLogs: input["EnableSipMediaApplicationMessageLogs"],
  }
}
function toSipMediaApplicationLoggingConfiguration(root: jsonP.JSONValue): s.SipMediaApplicationLoggingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "EnableSipMediaApplicationMessageLogs": "b",
    },
  }, root);
}

function fromEmergencyCallingConfiguration(input?: s.EmergencyCallingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DNIS: input["DNIS"]?.map(x => fromDNISEmergencyCallingConfiguration(x)),
  }
}
function toEmergencyCallingConfiguration(root: jsonP.JSONValue): s.EmergencyCallingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "DNIS": [toDNISEmergencyCallingConfiguration],
    },
  }, root);
}

function fromDNISEmergencyCallingConfiguration(input?: s.DNISEmergencyCallingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EmergencyPhoneNumber: input["EmergencyPhoneNumber"],
    TestPhoneNumber: input["TestPhoneNumber"],
    CallingCountry: input["CallingCountry"],
  }
}
function toDNISEmergencyCallingConfiguration(root: jsonP.JSONValue): s.DNISEmergencyCallingConfiguration {
  return jsonP.readObj({
    required: {
      "EmergencyPhoneNumber": "s",
      "CallingCountry": "s",
    },
    optional: {
      "TestPhoneNumber": "s",
    },
  }, root);
}

function fromLoggingConfiguration(input?: s.LoggingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EnableSIPLogs: input["EnableSIPLogs"],
  }
}
function toLoggingConfiguration(root: jsonP.JSONValue): s.LoggingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "EnableSIPLogs": "b",
    },
  }, root);
}

function fromOrigination(input?: s.Origination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Routes: input["Routes"]?.map(x => fromOriginationRoute(x)),
    Disabled: input["Disabled"],
  }
}
function toOrigination(root: jsonP.JSONValue): s.Origination {
  return jsonP.readObj({
    required: {},
    optional: {
      "Routes": [toOriginationRoute],
      "Disabled": "b",
    },
  }, root);
}

function fromOriginationRoute(input?: s.OriginationRoute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Protocol: input["Protocol"],
    Priority: input["Priority"],
    Weight: input["Weight"],
  }
}
function toOriginationRoute(root: jsonP.JSONValue): s.OriginationRoute {
  return jsonP.readObj({
    required: {},
    optional: {
      "Host": "s",
      "Port": "n",
      "Protocol": (x: jsonP.JSONValue) => cmnP.readEnum<s.OriginationRouteProtocol>(x),
      "Priority": "n",
      "Weight": "n",
    },
  }, root);
}

function fromStreamingConfiguration(input?: s.StreamingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataRetentionInHours: input["DataRetentionInHours"],
    Disabled: input["Disabled"],
    StreamingNotificationTargets: input["StreamingNotificationTargets"]?.map(x => fromStreamingNotificationTarget(x)),
  }
}
function toStreamingConfiguration(root: jsonP.JSONValue): s.StreamingConfiguration {
  return jsonP.readObj({
    required: {
      "DataRetentionInHours": "n",
    },
    optional: {
      "Disabled": "b",
      "StreamingNotificationTargets": [toStreamingNotificationTarget],
    },
  }, root);
}

function fromStreamingNotificationTarget(input?: s.StreamingNotificationTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NotificationTarget: input["NotificationTarget"],
  }
}
function toStreamingNotificationTarget(root: jsonP.JSONValue): s.StreamingNotificationTarget {
  return jsonP.readObj({
    required: {
      "NotificationTarget": (x: jsonP.JSONValue) => cmnP.readEnum<s.NotificationTarget>(x),
    },
    optional: {},
  }, root);
}

function fromTermination(input?: s.Termination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CpsLimit: input["CpsLimit"],
    DefaultPhoneNumber: input["DefaultPhoneNumber"],
    CallingRegions: input["CallingRegions"],
    CidrAllowedList: input["CidrAllowedList"],
    Disabled: input["Disabled"],
  }
}
function toTermination(root: jsonP.JSONValue): s.Termination {
  return jsonP.readObj({
    required: {},
    optional: {
      "CpsLimit": "n",
      "DefaultPhoneNumber": "s",
      "CallingRegions": ["s"],
      "CidrAllowedList": ["s"],
      "Disabled": "b",
    },
  }, root);
}

function fromCredential(input?: s.Credential | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Username: input["Username"],
    Password: input["Password"],
  }
}

function fromAccountSettings(input?: s.AccountSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DisableRemoteControl: input["DisableRemoteControl"],
    EnableDialOut: input["EnableDialOut"],
  }
}
function toAccountSettings(root: jsonP.JSONValue): s.AccountSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "DisableRemoteControl": "b",
      "EnableDialOut": "b",
    },
  }, root);
}

function fromBusinessCallingSettings(input?: s.BusinessCallingSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CdrBucket: input["CdrBucket"],
  }
}
function toBusinessCallingSettings(root: jsonP.JSONValue): s.BusinessCallingSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "CdrBucket": "s",
    },
  }, root);
}

function fromVoiceConnectorSettings(input?: s.VoiceConnectorSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CdrBucket: input["CdrBucket"],
  }
}
function toVoiceConnectorSettings(root: jsonP.JSONValue): s.VoiceConnectorSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "CdrBucket": "s",
    },
  }, root);
}

function fromUserSettings(input?: s.UserSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Telephony: fromTelephonySettings(input["Telephony"]),
  }
}
function toUserSettings(root: jsonP.JSONValue): s.UserSettings {
  return jsonP.readObj({
    required: {
      "Telephony": toTelephonySettings,
    },
    optional: {},
  }, root);
}

function fromTelephonySettings(input?: s.TelephonySettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InboundCalling: input["InboundCalling"],
    OutboundCalling: input["OutboundCalling"],
    SMS: input["SMS"],
  }
}
function toTelephonySettings(root: jsonP.JSONValue): s.TelephonySettings {
  return jsonP.readObj({
    required: {
      "InboundCalling": "b",
      "OutboundCalling": "b",
      "SMS": "b",
    },
    optional: {},
  }, root);
}

function toPhoneNumberError(root: jsonP.JSONValue): s.PhoneNumberError {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumberId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

function toAttendee(root: jsonP.JSONValue): s.Attendee {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExternalUserId": "s",
      "AttendeeId": "s",
      "JoinToken": "s",
    },
  }, root);
}

function toCreateAttendeeError(root: jsonP.JSONValue): s.CreateAttendeeError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExternalUserId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

function toMemberError(root: jsonP.JSONValue): s.MemberError {
  return jsonP.readObj({
    required: {},
    optional: {
      "MemberId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

function toUserError(root: jsonP.JSONValue): s.UserError {
  return jsonP.readObj({
    required: {},
    optional: {
      "UserId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

function toAccount(root: jsonP.JSONValue): s.Account {
  return jsonP.readObj({
    required: {
      "AwsAccountId": "s",
      "AccountId": "s",
      "Name": "s",
    },
    optional: {
      "AccountType": (x: jsonP.JSONValue) => cmnP.readEnum<s.AccountType>(x),
      "CreatedTimestamp": "d",
      "DefaultLicense": (x: jsonP.JSONValue) => cmnP.readEnum<s.License>(x),
      "SupportedLicenses": [(x: jsonP.JSONValue) => cmnP.readEnum<s.License>(x)],
      "SigninDelegateGroups": [toSigninDelegateGroup],
    },
  }, root);
}

function toIdentity(root: jsonP.JSONValue): s.Identity {
  return jsonP.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "Name": "s",
    },
  }, root);
}

function toBot(root: jsonP.JSONValue): s.Bot {
  return jsonP.readObj({
    required: {},
    optional: {
      "BotId": "s",
      "UserId": "s",
      "DisplayName": "s",
      "BotType": (x: jsonP.JSONValue) => cmnP.readEnum<s.BotType>(x),
      "Disabled": "b",
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
      "BotEmail": "s",
      "SecurityToken": "s",
    },
  }, root);
}

function toMeeting(root: jsonP.JSONValue): s.Meeting {
  return jsonP.readObj({
    required: {},
    optional: {
      "MeetingId": "s",
      "ExternalMeetingId": "s",
      "MediaPlacement": toMediaPlacement,
      "MediaRegion": "s",
    },
  }, root);
}

function toMediaPlacement(root: jsonP.JSONValue): s.MediaPlacement {
  return jsonP.readObj({
    required: {},
    optional: {
      "AudioHostUrl": "s",
      "AudioFallbackUrl": "s",
      "ScreenDataUrl": "s",
      "ScreenSharingUrl": "s",
      "ScreenViewingUrl": "s",
      "SignalingUrl": "s",
      "TurnControlUrl": "s",
    },
  }, root);
}

function toPhoneNumberOrder(root: jsonP.JSONValue): s.PhoneNumberOrder {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumberOrderId": "s",
      "ProductType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberProductType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberOrderStatus>(x),
      "OrderedPhoneNumbers": [toOrderedPhoneNumber],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

function toOrderedPhoneNumber(root: jsonP.JSONValue): s.OrderedPhoneNumber {
  return jsonP.readObj({
    required: {},
    optional: {
      "E164PhoneNumber": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.OrderedPhoneNumberStatus>(x),
    },
  }, root);
}

function toProxySession(root: jsonP.JSONValue): s.ProxySession {
  return jsonP.readObj({
    required: {},
    optional: {
      "VoiceConnectorId": "s",
      "ProxySessionId": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.ProxySessionStatus>(x),
      "ExpiryMinutes": "n",
      "Capabilities": [(x: jsonP.JSONValue) => cmnP.readEnum<s.Capability>(x)],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
      "EndedTimestamp": "d",
      "Participants": [toParticipant],
      "NumberSelectionBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<s.NumberSelectionBehavior>(x),
      "GeoMatchLevel": (x: jsonP.JSONValue) => cmnP.readEnum<s.GeoMatchLevel>(x),
      "GeoMatchParams": toGeoMatchParams,
    },
  }, root);
}

function toParticipant(root: jsonP.JSONValue): s.Participant {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumber": "s",
      "ProxyPhoneNumber": "s",
    },
  }, root);
}

function toRoom(root: jsonP.JSONValue): s.Room {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomId": "s",
      "Name": "s",
      "AccountId": "s",
      "CreatedBy": "s",
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

function toRoomMembership(root: jsonP.JSONValue): s.RoomMembership {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomId": "s",
      "Member": toMember,
      "Role": (x: jsonP.JSONValue) => cmnP.readEnum<s.RoomMembershipRole>(x),
      "InvitedBy": "s",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

function toMember(root: jsonP.JSONValue): s.Member {
  return jsonP.readObj({
    required: {},
    optional: {
      "MemberId": "s",
      "MemberType": (x: jsonP.JSONValue) => cmnP.readEnum<s.MemberType>(x),
      "Email": "s",
      "FullName": "s",
      "AccountId": "s",
    },
  }, root);
}

function toSipMediaApplication(root: jsonP.JSONValue): s.SipMediaApplication {
  return jsonP.readObj({
    required: {},
    optional: {
      "SipMediaApplicationId": "s",
      "AwsRegion": "s",
      "Name": "s",
      "Endpoints": [toSipMediaApplicationEndpoint],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

function toSipMediaApplicationCall(root: jsonP.JSONValue): s.SipMediaApplicationCall {
  return jsonP.readObj({
    required: {},
    optional: {
      "TransactionId": "s",
    },
  }, root);
}

function toSipRule(root: jsonP.JSONValue): s.SipRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "SipRuleId": "s",
      "Name": "s",
      "Disabled": "b",
      "TriggerType": (x: jsonP.JSONValue) => cmnP.readEnum<s.SipRuleTriggerType>(x),
      "TriggerValue": "s",
      "TargetApplications": [toSipRuleTargetApplication],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

function toUser(root: jsonP.JSONValue): s.User {
  return jsonP.readObj({
    required: {
      "UserId": "s",
    },
    optional: {
      "AccountId": "s",
      "PrimaryEmail": "s",
      "PrimaryProvisionedNumber": "s",
      "DisplayName": "s",
      "LicenseType": (x: jsonP.JSONValue) => cmnP.readEnum<s.License>(x),
      "UserType": (x: jsonP.JSONValue) => cmnP.readEnum<s.UserType>(x),
      "UserRegistrationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.RegistrationStatus>(x),
      "UserInvitationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.InviteStatus>(x),
      "RegisteredOn": "d",
      "InvitedOn": "d",
      "AlexaForBusinessMetadata": toAlexaForBusinessMetadata,
      "PersonalPIN": "s",
    },
  }, root);
}

function toVoiceConnector(root: jsonP.JSONValue): s.VoiceConnector {
  return jsonP.readObj({
    required: {},
    optional: {
      "VoiceConnectorId": "s",
      "AwsRegion": (x: jsonP.JSONValue) => cmnP.readEnum<s.VoiceConnectorAwsRegion>(x),
      "Name": "s",
      "OutboundHostName": "s",
      "RequireEncryption": "b",
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

function toVoiceConnectorGroup(root: jsonP.JSONValue): s.VoiceConnectorGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "VoiceConnectorGroupId": "s",
      "Name": "s",
      "VoiceConnectorItems": [toVoiceConnectorItem],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

function toAppInstance(root: jsonP.JSONValue): s.AppInstance {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppInstanceArn": "s",
      "Name": "s",
      "Metadata": "s",
      "CreatedTimestamp": "d",
      "LastUpdatedTimestamp": "d",
    },
  }, root);
}

function toAppInstanceAdmin(root: jsonP.JSONValue): s.AppInstanceAdmin {
  return jsonP.readObj({
    required: {},
    optional: {
      "Admin": toIdentity,
      "AppInstanceArn": "s",
      "CreatedTimestamp": "d",
    },
  }, root);
}

function toAppInstanceUser(root: jsonP.JSONValue): s.AppInstanceUser {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppInstanceUserArn": "s",
      "Name": "s",
      "CreatedTimestamp": "d",
      "Metadata": "s",
      "LastUpdatedTimestamp": "d",
    },
  }, root);
}

function toChannel(root: jsonP.JSONValue): s.Channel {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "ChannelArn": "s",
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelMode>(x),
      "Privacy": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelPrivacy>(x),
      "Metadata": "s",
      "CreatedBy": toIdentity,
      "CreatedTimestamp": "d",
      "LastMessageTimestamp": "d",
      "LastUpdatedTimestamp": "d",
    },
  }, root);
}

function toChannelBan(root: jsonP.JSONValue): s.ChannelBan {
  return jsonP.readObj({
    required: {},
    optional: {
      "Member": toIdentity,
      "ChannelArn": "s",
      "CreatedTimestamp": "d",
      "CreatedBy": toIdentity,
    },
  }, root);
}

function toChannelMembership(root: jsonP.JSONValue): s.ChannelMembership {
  return jsonP.readObj({
    required: {},
    optional: {
      "InvitedBy": toIdentity,
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelMembershipType>(x),
      "Member": toIdentity,
      "ChannelArn": "s",
      "CreatedTimestamp": "d",
      "LastUpdatedTimestamp": "d",
    },
  }, root);
}

function toChannelMembershipForAppInstanceUserSummary(root: jsonP.JSONValue): s.ChannelMembershipForAppInstanceUserSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChannelSummary": toChannelSummary,
      "AppInstanceUserMembershipSummary": toAppInstanceUserMembershipSummary,
    },
  }, root);
}

function toChannelSummary(root: jsonP.JSONValue): s.ChannelSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "ChannelArn": "s",
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelMode>(x),
      "Privacy": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelPrivacy>(x),
      "Metadata": "s",
      "LastMessageTimestamp": "d",
    },
  }, root);
}

function toAppInstanceUserMembershipSummary(root: jsonP.JSONValue): s.AppInstanceUserMembershipSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelMembershipType>(x),
      "ReadMarkerTimestamp": "d",
    },
  }, root);
}

function toChannelModeratedByAppInstanceUserSummary(root: jsonP.JSONValue): s.ChannelModeratedByAppInstanceUserSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChannelSummary": toChannelSummary,
    },
  }, root);
}

function toChannelModerator(root: jsonP.JSONValue): s.ChannelModerator {
  return jsonP.readObj({
    required: {},
    optional: {
      "Moderator": toIdentity,
      "ChannelArn": "s",
      "CreatedTimestamp": "d",
      "CreatedBy": toIdentity,
    },
  }, root);
}

function toChannelMessage(root: jsonP.JSONValue): s.ChannelMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "ChannelArn": "s",
      "MessageId": "s",
      "Content": "s",
      "Metadata": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelMessageType>(x),
      "CreatedTimestamp": "d",
      "LastEditedTimestamp": "d",
      "LastUpdatedTimestamp": "d",
      "Sender": toIdentity,
      "Redacted": "b",
      "Persistence": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelMessagePersistenceType>(x),
    },
  }, root);
}

function toEventsConfiguration(root: jsonP.JSONValue): s.EventsConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "BotId": "s",
      "OutboundEventsHTTPSEndpoint": "s",
      "LambdaFunctionArn": "s",
    },
  }, root);
}

function toMessagingSessionEndpoint(root: jsonP.JSONValue): s.MessagingSessionEndpoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "Url": "s",
    },
  }, root);
}

function toPhoneNumber(root: jsonP.JSONValue): s.PhoneNumber {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumberId": "s",
      "E164PhoneNumber": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberType>(x),
      "ProductType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberProductType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberStatus>(x),
      "Capabilities": toPhoneNumberCapabilities,
      "Associations": [toPhoneNumberAssociation],
      "CallingName": "s",
      "CallingNameStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.CallingNameStatus>(x),
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
      "DeletionTimestamp": "d",
    },
  }, root);
}

function toPhoneNumberCapabilities(root: jsonP.JSONValue): s.PhoneNumberCapabilities {
  return jsonP.readObj({
    required: {},
    optional: {
      "InboundCall": "b",
      "OutboundCall": "b",
      "InboundSMS": "b",
      "OutboundSMS": "b",
      "InboundMMS": "b",
      "OutboundMMS": "b",
    },
  }, root);
}

function toPhoneNumberAssociation(root: jsonP.JSONValue): s.PhoneNumberAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhoneNumberAssociationName>(x),
      "AssociatedTimestamp": "d",
    },
  }, root);
}

function toProxy(root: jsonP.JSONValue): s.Proxy {
  return jsonP.readObj({
    required: {},
    optional: {
      "DefaultSessionExpiryMinutes": "n",
      "Disabled": "b",
      "FallBackPhoneNumber": "s",
      "PhoneNumberCountries": ["s"],
    },
  }, root);
}

function toTerminationHealth(root: jsonP.JSONValue): s.TerminationHealth {
  return jsonP.readObj({
    required: {},
    optional: {
      "Timestamp": "d",
      "Source": "s",
    },
  }, root);
}

function toInvite(root: jsonP.JSONValue): s.Invite {
  return jsonP.readObj({
    required: {},
    optional: {
      "InviteId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.InviteStatus>(x),
      "EmailAddress": "s",
      "EmailStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.EmailStatus>(x),
    },
  }, root);
}

function toAppInstanceAdminSummary(root: jsonP.JSONValue): s.AppInstanceAdminSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Admin": toIdentity,
    },
  }, root);
}

function toAppInstanceUserSummary(root: jsonP.JSONValue): s.AppInstanceUserSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppInstanceUserArn": "s",
      "Name": "s",
      "Metadata": "s",
    },
  }, root);
}

function toAppInstanceSummary(root: jsonP.JSONValue): s.AppInstanceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "AppInstanceArn": "s",
      "Name": "s",
      "Metadata": "s",
    },
  }, root);
}

function toChannelBanSummary(root: jsonP.JSONValue): s.ChannelBanSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Member": toIdentity,
    },
  }, root);
}

function toChannelMembershipSummary(root: jsonP.JSONValue): s.ChannelMembershipSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Member": toIdentity,
    },
  }, root);
}

function toChannelMessageSummary(root: jsonP.JSONValue): s.ChannelMessageSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "MessageId": "s",
      "Content": "s",
      "Metadata": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<s.ChannelMessageType>(x),
      "CreatedTimestamp": "d",
      "LastUpdatedTimestamp": "d",
      "LastEditedTimestamp": "d",
      "Sender": toIdentity,
      "Redacted": "b",
    },
  }, root);
}

function toChannelModeratorSummary(root: jsonP.JSONValue): s.ChannelModeratorSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "Moderator": toIdentity,
    },
  }, root);
}
