// Autogenerated API client for: Amazon Chime

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Chime {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Chime.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-05-01",
    "endpointPrefix": "chime",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Chime",
    "serviceId": "Chime",
    "signatureVersion": "v4",
    "uid": "chime-2018-05-01"
  };

  async associatePhoneNumberWithUser(
    {abortSignal, ...params}: RequestConfig & AssociatePhoneNumberWithUserRequest,
  ): Promise<AssociatePhoneNumberWithUserResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumber: params["E164PhoneNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePhoneNumberWithUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=associate-phone-number`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async associatePhoneNumbersWithVoiceConnector(
    {abortSignal, ...params}: RequestConfig & AssociatePhoneNumbersWithVoiceConnectorRequest,
  ): Promise<AssociatePhoneNumbersWithVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
      ForceAssociate: params["ForceAssociate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePhoneNumbersWithVoiceConnector",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}?operation=associate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async associatePhoneNumbersWithVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & AssociatePhoneNumbersWithVoiceConnectorGroupRequest,
  ): Promise<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
      ForceAssociate: params["ForceAssociate"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociatePhoneNumbersWithVoiceConnectorGroup",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}?operation=associate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async associateSigninDelegateGroupsWithAccount(
    {abortSignal, ...params}: RequestConfig & AssociateSigninDelegateGroupsWithAccountRequest,
  ): Promise<AssociateSigninDelegateGroupsWithAccountResponse> {
    const body: jsonP.JSONObject = {
      SigninDelegateGroups: params["SigninDelegateGroups"]?.map(x => fromSigninDelegateGroup(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AssociateSigninDelegateGroupsWithAccount",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}?operation=associate-signin-delegate-groups`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async batchCreateAttendee(
    {abortSignal, ...params}: RequestConfig & BatchCreateAttendeeRequest,
  ): Promise<BatchCreateAttendeeResponse> {
    const body: jsonP.JSONObject = {
      Attendees: params["Attendees"]?.map(x => fromCreateAttendeeRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchCreateAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees?operation=batch-create`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendees": [toAttendee],
        "Errors": [toCreateAttendeeError],
      },
    }, await resp.json());
  }

  async batchCreateRoomMembership(
    {abortSignal, ...params}: RequestConfig & BatchCreateRoomMembershipRequest,
  ): Promise<BatchCreateRoomMembershipResponse> {
    const body: jsonP.JSONObject = {
      MembershipItemList: params["MembershipItemList"]?.map(x => fromMembershipItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchCreateRoomMembership",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships?operation=batch-create`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Errors": [toMemberError],
      },
    }, await resp.json());
  }

  async batchDeletePhoneNumber(
    {abortSignal, ...params}: RequestConfig & BatchDeletePhoneNumberRequest,
  ): Promise<BatchDeletePhoneNumberResponse> {
    const body: jsonP.JSONObject = {
      PhoneNumberIds: params["PhoneNumberIds"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchDeletePhoneNumber",
      requestUri: "/phone-numbers?operation=batch-delete",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async batchSuspendUser(
    {abortSignal, ...params}: RequestConfig & BatchSuspendUserRequest,
  ): Promise<BatchSuspendUserResponse> {
    const body: jsonP.JSONObject = {
      UserIdList: params["UserIdList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchSuspendUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=suspend`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserErrors": [toUserError],
      },
    }, await resp.json());
  }

  async batchUnsuspendUser(
    {abortSignal, ...params}: RequestConfig & BatchUnsuspendUserRequest,
  ): Promise<BatchUnsuspendUserResponse> {
    const body: jsonP.JSONObject = {
      UserIdList: params["UserIdList"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchUnsuspendUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=unsuspend`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserErrors": [toUserError],
      },
    }, await resp.json());
  }

  async batchUpdatePhoneNumber(
    {abortSignal, ...params}: RequestConfig & BatchUpdatePhoneNumberRequest,
  ): Promise<BatchUpdatePhoneNumberResponse> {
    const body: jsonP.JSONObject = {
      UpdatePhoneNumberRequestItems: params["UpdatePhoneNumberRequestItems"]?.map(x => fromUpdatePhoneNumberRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchUpdatePhoneNumber",
      requestUri: "/phone-numbers?operation=batch-update",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async batchUpdateUser(
    {abortSignal, ...params}: RequestConfig & BatchUpdateUserRequest,
  ): Promise<BatchUpdateUserResponse> {
    const body: jsonP.JSONObject = {
      UpdateUserRequestItems: params["UpdateUserRequestItems"]?.map(x => fromUpdateUserRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchUpdateUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserErrors": [toUserError],
      },
    }, await resp.json());
  }

  async createAccount(
    {abortSignal, ...params}: RequestConfig & CreateAccountRequest,
  ): Promise<CreateAccountResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccount",
      requestUri: "/accounts",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async createAttendee(
    {abortSignal, ...params}: RequestConfig & CreateAttendeeRequest,
  ): Promise<CreateAttendeeResponse> {
    const body: jsonP.JSONObject = {
      ExternalUserId: params["ExternalUserId"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendee": toAttendee,
      },
    }, await resp.json());
  }

  async createBot(
    {abortSignal, ...params}: RequestConfig & CreateBotRequest,
  ): Promise<CreateBotResponse> {
    const body: jsonP.JSONObject = {
      DisplayName: params["DisplayName"],
      Domain: params["Domain"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBot",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async createMeeting(
    {abortSignal, ...params}: RequestConfig & CreateMeetingRequest,
  ): Promise<CreateMeetingResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      ExternalMeetingId: params["ExternalMeetingId"],
      MeetingHostId: params["MeetingHostId"],
      MediaRegion: params["MediaRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      NotificationsConfiguration: fromMeetingNotificationConfiguration(params["NotificationsConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMeeting",
      requestUri: "/meetings",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meeting": toMeeting,
      },
    }, await resp.json());
  }

  async createMeetingWithAttendees(
    {abortSignal, ...params}: RequestConfig & CreateMeetingWithAttendeesRequest,
  ): Promise<CreateMeetingWithAttendeesResponse> {
    const body: jsonP.JSONObject = {
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
      ExternalMeetingId: params["ExternalMeetingId"],
      MeetingHostId: params["MeetingHostId"],
      MediaRegion: params["MediaRegion"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      NotificationsConfiguration: fromMeetingNotificationConfiguration(params["NotificationsConfiguration"]),
      Attendees: params["Attendees"]?.map(x => fromCreateAttendeeRequestItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMeetingWithAttendees",
      requestUri: "/meetings?operation=create-attendees",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meeting": toMeeting,
        "Attendees": [toAttendee],
        "Errors": [toCreateAttendeeError],
      },
    }, await resp.json());
  }

  async createPhoneNumberOrder(
    {abortSignal, ...params}: RequestConfig & CreatePhoneNumberOrderRequest,
  ): Promise<CreatePhoneNumberOrderResponse> {
    const body: jsonP.JSONObject = {
      ProductType: params["ProductType"],
      E164PhoneNumbers: params["E164PhoneNumbers"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePhoneNumberOrder",
      requestUri: "/phone-number-orders",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberOrder": toPhoneNumberOrder,
      },
    }, await resp.json());
  }

  async createProxySession(
    {abortSignal, ...params}: RequestConfig & CreateProxySessionRequest,
  ): Promise<CreateProxySessionResponse> {
    const body: jsonP.JSONObject = {
      ParticipantPhoneNumbers: params["ParticipantPhoneNumbers"],
      Name: params["Name"],
      ExpiryMinutes: params["ExpiryMinutes"],
      Capabilities: params["Capabilities"],
      NumberSelectionBehavior: params["NumberSelectionBehavior"],
      GeoMatchLevel: params["GeoMatchLevel"],
      GeoMatchParams: fromGeoMatchParams(params["GeoMatchParams"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProxySession",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySession": toProxySession,
      },
    }, await resp.json());
  }

  async createRoom(
    {abortSignal, ...params}: RequestConfig & CreateRoomRequest,
  ): Promise<CreateRoomResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      ClientRequestToken: params["ClientRequestToken"] ?? generateIdemptToken(),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoom",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async createRoomMembership(
    {abortSignal, ...params}: RequestConfig & CreateRoomMembershipRequest,
  ): Promise<CreateRoomMembershipResponse> {
    const body: jsonP.JSONObject = {
      MemberId: params["MemberId"],
      Role: params["Role"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoomMembership",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomMembership": toRoomMembership,
      },
    }, await resp.json());
  }

  async createUser(
    {abortSignal, ...params}: RequestConfig & CreateUserRequest,
  ): Promise<CreateUserResponse> {
    const body: jsonP.JSONObject = {
      Username: params["Username"],
      Email: params["Email"],
      UserType: params["UserType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=create`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async createVoiceConnector(
    {abortSignal, ...params}: RequestConfig & CreateVoiceConnectorRequest,
  ): Promise<CreateVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      AwsRegion: params["AwsRegion"],
      RequireEncryption: params["RequireEncryption"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVoiceConnector",
      requestUri: "/voice-connectors",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnector": toVoiceConnector,
      },
    }, await resp.json());
  }

  async createVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & CreateVoiceConnectorGroupRequest,
  ): Promise<CreateVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      VoiceConnectorItems: params["VoiceConnectorItems"]?.map(x => fromVoiceConnectorItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVoiceConnectorGroup",
      requestUri: "/voice-connector-groups",
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroup": toVoiceConnectorGroup,
      },
    }, await resp.json());
  }

  async deleteAccount(
    {abortSignal, ...params}: RequestConfig & DeleteAccountRequest,
  ): Promise<DeleteAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAccount",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteAttendee(
    {abortSignal, ...params}: RequestConfig & DeleteAttendeeRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAttendee",
      method: "DELETE",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}`,
      responseCode: 204,
    });
  }

  async deleteEventsConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteEventsConfigurationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteEventsConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}/events-configuration`,
      responseCode: 204,
    });
  }

  async deleteMeeting(
    {abortSignal, ...params}: RequestConfig & DeleteMeetingRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMeeting",
      method: "DELETE",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}`,
      responseCode: 204,
    });
  }

  async deletePhoneNumber(
    {abortSignal, ...params}: RequestConfig & DeletePhoneNumberRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePhoneNumber",
      method: "DELETE",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}`,
      responseCode: 204,
    });
  }

  async deleteProxySession(
    {abortSignal, ...params}: RequestConfig & DeleteProxySessionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProxySession",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions/${params["ProxySessionId"]}`,
      responseCode: 204,
    });
  }

  async deleteRoom(
    {abortSignal, ...params}: RequestConfig & DeleteRoomRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRoom",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}`,
      responseCode: 204,
    });
  }

  async deleteRoomMembership(
    {abortSignal, ...params}: RequestConfig & DeleteRoomMembershipRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRoomMembership",
      method: "DELETE",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships/${params["MemberId"]}`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnector(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnector",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorEmergencyCallingConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorEmergencyCallingConfigurationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorEmergencyCallingConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/emergency-calling-configuration`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorGroupRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorOrigination(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorOriginationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorOrigination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/origination`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorProxy(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorProxyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorProxy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/programmable-numbers/proxy`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorStreamingConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorStreamingConfigurationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorStreamingConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/streaming-configuration`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorTermination(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorTerminationRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteVoiceConnectorTermination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination`,
      responseCode: 204,
    });
  }

  async deleteVoiceConnectorTerminationCredentials(
    {abortSignal, ...params}: RequestConfig & DeleteVoiceConnectorTerminationCredentialsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Usernames: params["Usernames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteVoiceConnectorTerminationCredentials",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/credentials?operation=delete`,
      responseCode: 204,
    });
  }

  async disassociatePhoneNumberFromUser(
    {abortSignal, ...params}: RequestConfig & DisassociatePhoneNumberFromUserRequest,
  ): Promise<DisassociatePhoneNumberFromUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisassociatePhoneNumberFromUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=disassociate-phone-number`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async disassociatePhoneNumbersFromVoiceConnector(
    {abortSignal, ...params}: RequestConfig & DisassociatePhoneNumbersFromVoiceConnectorRequest,
  ): Promise<DisassociatePhoneNumbersFromVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociatePhoneNumbersFromVoiceConnector",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}?operation=disassociate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async disassociatePhoneNumbersFromVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & DisassociatePhoneNumbersFromVoiceConnectorGroupRequest,
  ): Promise<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      E164PhoneNumbers: params["E164PhoneNumbers"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociatePhoneNumbersFromVoiceConnectorGroup",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}?operation=disassociate-phone-numbers`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberErrors": [toPhoneNumberError],
      },
    }, await resp.json());
  }

  async disassociateSigninDelegateGroupsFromAccount(
    {abortSignal, ...params}: RequestConfig & DisassociateSigninDelegateGroupsFromAccountRequest,
  ): Promise<DisassociateSigninDelegateGroupsFromAccountResponse> {
    const body: jsonP.JSONObject = {
      GroupNames: params["GroupNames"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisassociateSigninDelegateGroupsFromAccount",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}?operation=disassociate-signin-delegate-groups`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getAccount(
    {abortSignal, ...params}: RequestConfig & GetAccountRequest,
  ): Promise<GetAccountResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccount",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async getAccountSettings(
    {abortSignal, ...params}: RequestConfig & GetAccountSettingsRequest,
  ): Promise<GetAccountSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAccountSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/settings`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccountSettings": toAccountSettings,
      },
    }, await resp.json());
  }

  async getAttendee(
    {abortSignal, ...params}: RequestConfig & GetAttendeeRequest,
  ): Promise<GetAttendeeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetAttendee",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendee": toAttendee,
      },
    }, await resp.json());
  }

  async getBot(
    {abortSignal, ...params}: RequestConfig & GetBotRequest,
  ): Promise<GetBotResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetBot",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async getEventsConfiguration(
    {abortSignal, ...params}: RequestConfig & GetEventsConfigurationRequest,
  ): Promise<GetEventsConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetEventsConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}/events-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventsConfiguration": toEventsConfiguration,
      },
    }, await resp.json());
  }

  async getGlobalSettings(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<GetGlobalSettingsResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetGlobalSettings",
      method: "GET",
      requestUri: "/settings",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "BusinessCalling": toBusinessCallingSettings,
        "VoiceConnector": toVoiceConnectorSettings,
      },
    }, await resp.json());
  }

  async getMeeting(
    {abortSignal, ...params}: RequestConfig & GetMeetingRequest,
  ): Promise<GetMeetingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetMeeting",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meeting": toMeeting,
      },
    }, await resp.json());
  }

  async getPhoneNumber(
    {abortSignal, ...params}: RequestConfig & GetPhoneNumberRequest,
  ): Promise<GetPhoneNumberResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPhoneNumber",
      method: "GET",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumber": toPhoneNumber,
      },
    }, await resp.json());
  }

  async getPhoneNumberOrder(
    {abortSignal, ...params}: RequestConfig & GetPhoneNumberOrderRequest,
  ): Promise<GetPhoneNumberOrderResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPhoneNumberOrder",
      method: "GET",
      requestUri: cmnP.encodePath`/phone-number-orders/${params["PhoneNumberOrderId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberOrder": toPhoneNumberOrder,
      },
    }, await resp.json());
  }

  async getPhoneNumberSettings(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<GetPhoneNumberSettingsResponse> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPhoneNumberSettings",
      method: "GET",
      requestUri: "/settings/phone-number",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CallingName": "s",
        "CallingNameUpdatedTimestamp": "d",
      },
    }, await resp.json());
  }

  async getProxySession(
    {abortSignal, ...params}: RequestConfig & GetProxySessionRequest,
  ): Promise<GetProxySessionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetProxySession",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions/${params["ProxySessionId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySession": toProxySession,
      },
    }, await resp.json());
  }

  async getRetentionSettings(
    {abortSignal, ...params}: RequestConfig & GetRetentionSettingsRequest,
  ): Promise<GetRetentionSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRetentionSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/retention-settings`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionSettings": toRetentionSettings,
        "InitiateDeletionTimestamp": "d",
      },
    }, await resp.json());
  }

  async getRoom(
    {abortSignal, ...params}: RequestConfig & GetRoomRequest,
  ): Promise<GetRoomResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRoom",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async getUser(
    {abortSignal, ...params}: RequestConfig & GetUserRequest,
  ): Promise<GetUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetUser",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async getUserSettings(
    {abortSignal, ...params}: RequestConfig & GetUserSettingsRequest,
  ): Promise<GetUserSettingsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetUserSettings",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}/settings`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "UserSettings": toUserSettings,
      },
    }, await resp.json());
  }

  async getVoiceConnector(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorRequest,
  ): Promise<GetVoiceConnectorResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnector",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnector": toVoiceConnector,
      },
    }, await resp.json());
  }

  async getVoiceConnectorEmergencyCallingConfiguration(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorEmergencyCallingConfigurationRequest,
  ): Promise<GetVoiceConnectorEmergencyCallingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorEmergencyCallingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/emergency-calling-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EmergencyCallingConfiguration": toEmergencyCallingConfiguration,
      },
    }, await resp.json());
  }

  async getVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorGroupRequest,
  ): Promise<GetVoiceConnectorGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroup": toVoiceConnectorGroup,
      },
    }, await resp.json());
  }

  async getVoiceConnectorLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorLoggingConfigurationRequest,
  ): Promise<GetVoiceConnectorLoggingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorLoggingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/logging-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async getVoiceConnectorOrigination(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorOriginationRequest,
  ): Promise<GetVoiceConnectorOriginationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorOrigination",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/origination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Origination": toOrigination,
      },
    }, await resp.json());
  }

  async getVoiceConnectorProxy(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorProxyRequest,
  ): Promise<GetVoiceConnectorProxyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorProxy",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/programmable-numbers/proxy`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Proxy": toProxy,
      },
    }, await resp.json());
  }

  async getVoiceConnectorStreamingConfiguration(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorStreamingConfigurationRequest,
  ): Promise<GetVoiceConnectorStreamingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorStreamingConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/streaming-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StreamingConfiguration": toStreamingConfiguration,
      },
    }, await resp.json());
  }

  async getVoiceConnectorTermination(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorTerminationRequest,
  ): Promise<GetVoiceConnectorTerminationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorTermination",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Termination": toTermination,
      },
    }, await resp.json());
  }

  async getVoiceConnectorTerminationHealth(
    {abortSignal, ...params}: RequestConfig & GetVoiceConnectorTerminationHealthRequest,
  ): Promise<GetVoiceConnectorTerminationHealthResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetVoiceConnectorTerminationHealth",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/health`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TerminationHealth": toTerminationHealth,
      },
    }, await resp.json());
  }

  async inviteUsers(
    {abortSignal, ...params}: RequestConfig & InviteUsersRequest,
  ): Promise<InviteUsersResponse> {
    const body: jsonP.JSONObject = {
      UserEmailList: params["UserEmailList"],
      UserType: params["UserType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InviteUsers",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users?operation=add`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Invites": [toInvite],
      },
    }, await resp.json());
  }

  async listAccounts(
    {abortSignal, ...params}: RequestConfig & ListAccountsRequest = {},
  ): Promise<ListAccountsResponse> {
    const query = new URLSearchParams;
    if (params["Name"] != null) query.set("name", params["Name"]?.toString() ?? "");
    if (params["UserEmail"] != null) query.set("user-email", params["UserEmail"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAccounts",
      method: "GET",
      requestUri: "/accounts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Accounts": [toAccount],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAttendeeTags(
    {abortSignal, ...params}: RequestConfig & ListAttendeeTagsRequest,
  ): Promise<ListAttendeeTagsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListAttendeeTags",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}/tags`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listAttendees(
    {abortSignal, ...params}: RequestConfig & ListAttendeesRequest,
  ): Promise<ListAttendeesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAttendees",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Attendees": [toAttendee],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listBots(
    {abortSignal, ...params}: RequestConfig & ListBotsRequest,
  ): Promise<ListBotsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBots",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bots": [toBot],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listMeetingTags(
    {abortSignal, ...params}: RequestConfig & ListMeetingTagsRequest,
  ): Promise<ListMeetingTagsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListMeetingTags",
      method: "GET",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/tags`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listMeetings(
    {abortSignal, ...params}: RequestConfig & ListMeetingsRequest = {},
  ): Promise<ListMeetingsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMeetings",
      method: "GET",
      requestUri: "/meetings",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Meetings": [toMeeting],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPhoneNumberOrders(
    {abortSignal, ...params}: RequestConfig & ListPhoneNumberOrdersRequest = {},
  ): Promise<ListPhoneNumberOrdersResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPhoneNumberOrders",
      method: "GET",
      requestUri: "/phone-number-orders",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumberOrders": [toPhoneNumberOrder],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPhoneNumbers(
    {abortSignal, ...params}: RequestConfig & ListPhoneNumbersRequest = {},
  ): Promise<ListPhoneNumbersResponse> {
    const query = new URLSearchParams;
    if (params["Status"] != null) query.set("status", params["Status"]?.toString() ?? "");
    if (params["ProductType"] != null) query.set("product-type", params["ProductType"]?.toString() ?? "");
    if (params["FilterName"] != null) query.set("filter-name", params["FilterName"]?.toString() ?? "");
    if (params["FilterValue"] != null) query.set("filter-value", params["FilterValue"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPhoneNumbers",
      method: "GET",
      requestUri: "/phone-numbers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumbers": [toPhoneNumber],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProxySessions(
    {abortSignal, ...params}: RequestConfig & ListProxySessionsRequest,
  ): Promise<ListProxySessionsResponse> {
    const query = new URLSearchParams;
    if (params["Status"] != null) query.set("status", params["Status"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProxySessions",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySessions": [toProxySession],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRoomMemberships(
    {abortSignal, ...params}: RequestConfig & ListRoomMembershipsRequest,
  ): Promise<ListRoomMembershipsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRoomMemberships",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomMemberships": [toRoomMembership],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listRooms(
    {abortSignal, ...params}: RequestConfig & ListRoomsRequest,
  ): Promise<ListRoomsResponse> {
    const query = new URLSearchParams;
    if (params["MemberId"] != null) query.set("member-id", params["MemberId"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRooms",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Rooms": [toRoom],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("arn", params["ResourceARN"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listUsers(
    {abortSignal, ...params}: RequestConfig & ListUsersRequest,
  ): Promise<ListUsersResponse> {
    const query = new URLSearchParams;
    if (params["UserEmail"] != null) query.set("user-email", params["UserEmail"]?.toString() ?? "");
    if (params["UserType"] != null) query.set("user-type", params["UserType"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListUsers",
      method: "GET",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Users": [toUser],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listVoiceConnectorGroups(
    {abortSignal, ...params}: RequestConfig & ListVoiceConnectorGroupsRequest = {},
  ): Promise<ListVoiceConnectorGroupsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListVoiceConnectorGroups",
      method: "GET",
      requestUri: "/voice-connector-groups",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroups": [toVoiceConnectorGroup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listVoiceConnectorTerminationCredentials(
    {abortSignal, ...params}: RequestConfig & ListVoiceConnectorTerminationCredentialsRequest,
  ): Promise<ListVoiceConnectorTerminationCredentialsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListVoiceConnectorTerminationCredentials",
      method: "GET",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/credentials`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Usernames": ["s"],
      },
    }, await resp.json());
  }

  async listVoiceConnectors(
    {abortSignal, ...params}: RequestConfig & ListVoiceConnectorsRequest = {},
  ): Promise<ListVoiceConnectorsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListVoiceConnectors",
      method: "GET",
      requestUri: "/voice-connectors",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectors": [toVoiceConnector],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async logoutUser(
    {abortSignal, ...params}: RequestConfig & LogoutUserRequest,
  ): Promise<LogoutUserResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "LogoutUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=logout`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEventsConfiguration(
    {abortSignal, ...params}: RequestConfig & PutEventsConfigurationRequest,
  ): Promise<PutEventsConfigurationResponse> {
    const body: jsonP.JSONObject = {
      OutboundEventsHTTPSEndpoint: params["OutboundEventsHTTPSEndpoint"],
      LambdaFunctionArn: params["LambdaFunctionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEventsConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}/events-configuration`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EventsConfiguration": toEventsConfiguration,
      },
    }, await resp.json());
  }

  async putRetentionSettings(
    {abortSignal, ...params}: RequestConfig & PutRetentionSettingsRequest,
  ): Promise<PutRetentionSettingsResponse> {
    const body: jsonP.JSONObject = {
      RetentionSettings: fromRetentionSettings(params["RetentionSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRetentionSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/retention-settings`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RetentionSettings": toRetentionSettings,
        "InitiateDeletionTimestamp": "d",
      },
    }, await resp.json());
  }

  async putVoiceConnectorEmergencyCallingConfiguration(
    {abortSignal, ...params}: RequestConfig & PutVoiceConnectorEmergencyCallingConfigurationRequest,
  ): Promise<PutVoiceConnectorEmergencyCallingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      EmergencyCallingConfiguration: fromEmergencyCallingConfiguration(params["EmergencyCallingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorEmergencyCallingConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/emergency-calling-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "EmergencyCallingConfiguration": toEmergencyCallingConfiguration,
      },
    }, await resp.json());
  }

  async putVoiceConnectorLoggingConfiguration(
    {abortSignal, ...params}: RequestConfig & PutVoiceConnectorLoggingConfigurationRequest,
  ): Promise<PutVoiceConnectorLoggingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      LoggingConfiguration: fromLoggingConfiguration(params["LoggingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorLoggingConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/logging-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LoggingConfiguration": toLoggingConfiguration,
      },
    }, await resp.json());
  }

  async putVoiceConnectorOrigination(
    {abortSignal, ...params}: RequestConfig & PutVoiceConnectorOriginationRequest,
  ): Promise<PutVoiceConnectorOriginationResponse> {
    const body: jsonP.JSONObject = {
      Origination: fromOrigination(params["Origination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorOrigination",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/origination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Origination": toOrigination,
      },
    }, await resp.json());
  }

  async putVoiceConnectorProxy(
    {abortSignal, ...params}: RequestConfig & PutVoiceConnectorProxyRequest,
  ): Promise<PutVoiceConnectorProxyResponse> {
    const body: jsonP.JSONObject = {
      DefaultSessionExpiryMinutes: params["DefaultSessionExpiryMinutes"],
      PhoneNumberPoolCountries: params["PhoneNumberPoolCountries"],
      FallBackPhoneNumber: params["FallBackPhoneNumber"],
      Disabled: params["Disabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorProxy",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/programmable-numbers/proxy`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Proxy": toProxy,
      },
    }, await resp.json());
  }

  async putVoiceConnectorStreamingConfiguration(
    {abortSignal, ...params}: RequestConfig & PutVoiceConnectorStreamingConfigurationRequest,
  ): Promise<PutVoiceConnectorStreamingConfigurationResponse> {
    const body: jsonP.JSONObject = {
      StreamingConfiguration: fromStreamingConfiguration(params["StreamingConfiguration"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorStreamingConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/streaming-configuration`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "StreamingConfiguration": toStreamingConfiguration,
      },
    }, await resp.json());
  }

  async putVoiceConnectorTermination(
    {abortSignal, ...params}: RequestConfig & PutVoiceConnectorTerminationRequest,
  ): Promise<PutVoiceConnectorTerminationResponse> {
    const body: jsonP.JSONObject = {
      Termination: fromTermination(params["Termination"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorTermination",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Termination": toTermination,
      },
    }, await resp.json());
  }

  async putVoiceConnectorTerminationCredentials(
    {abortSignal, ...params}: RequestConfig & PutVoiceConnectorTerminationCredentialsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Credentials: params["Credentials"]?.map(x => fromCredential(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutVoiceConnectorTerminationCredentials",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/termination/credentials?operation=put`,
      responseCode: 204,
    });
  }

  async redactConversationMessage(
    {abortSignal, ...params}: RequestConfig & RedactConversationMessageRequest,
  ): Promise<RedactConversationMessageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RedactConversationMessage",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/conversations/${params["ConversationId"]}/messages/${params["MessageId"]}?operation=redact`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async redactRoomMessage(
    {abortSignal, ...params}: RequestConfig & RedactRoomMessageRequest,
  ): Promise<RedactRoomMessageResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RedactRoomMessage",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/messages/${params["MessageId"]}?operation=redact`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async regenerateSecurityToken(
    {abortSignal, ...params}: RequestConfig & RegenerateSecurityTokenRequest,
  ): Promise<RegenerateSecurityTokenResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RegenerateSecurityToken",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}?operation=regenerate-security-token`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async resetPersonalPIN(
    {abortSignal, ...params}: RequestConfig & ResetPersonalPINRequest,
  ): Promise<ResetPersonalPINResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ResetPersonalPIN",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}?operation=reset-personal-pin`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async restorePhoneNumber(
    {abortSignal, ...params}: RequestConfig & RestorePhoneNumberRequest,
  ): Promise<RestorePhoneNumberResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RestorePhoneNumber",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}?operation=restore`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumber": toPhoneNumber,
      },
    }, await resp.json());
  }

  async searchAvailablePhoneNumbers(
    {abortSignal, ...params}: RequestConfig & SearchAvailablePhoneNumbersRequest = {},
  ): Promise<SearchAvailablePhoneNumbersResponse> {
    const query = new URLSearchParams;
    if (params["AreaCode"] != null) query.set("area-code", params["AreaCode"]?.toString() ?? "");
    if (params["City"] != null) query.set("city", params["City"]?.toString() ?? "");
    if (params["Country"] != null) query.set("country", params["Country"]?.toString() ?? "");
    if (params["State"] != null) query.set("state", params["State"]?.toString() ?? "");
    if (params["TollFreePrefix"] != null) query.set("toll-free-prefix", params["TollFreePrefix"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "SearchAvailablePhoneNumbers",
      method: "GET",
      requestUri: "/search?type=phone-numbers",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "E164PhoneNumbers": ["s"],
      },
    }, await resp.json());
  }

  async tagAttendee(
    {abortSignal, ...params}: RequestConfig & TagAttendeeRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}/tags?operation=add`,
      responseCode: 204,
    });
  }

  async tagMeeting(
    {abortSignal, ...params}: RequestConfig & TagMeetingRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagMeeting",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/tags?operation=add`,
      responseCode: 204,
    });
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/tags?operation=tag-resource",
      responseCode: 204,
    });
  }

  async untagAttendee(
    {abortSignal, ...params}: RequestConfig & UntagAttendeeRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagAttendee",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/attendees/${params["AttendeeId"]}/tags?operation=delete`,
      responseCode: 204,
    });
  }

  async untagMeeting(
    {abortSignal, ...params}: RequestConfig & UntagMeetingRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagMeeting",
      requestUri: cmnP.encodePath`/meetings/${params["MeetingId"]}/tags?operation=delete`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceARN: params["ResourceARN"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: "/tags?operation=untag-resource",
      responseCode: 204,
    });
  }

  async updateAccount(
    {abortSignal, ...params}: RequestConfig & UpdateAccountRequest,
  ): Promise<UpdateAccountResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccount",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Account": toAccount,
      },
    }, await resp.json());
  }

  async updateAccountSettings(
    {abortSignal, ...params}: RequestConfig & UpdateAccountSettingsRequest,
  ): Promise<UpdateAccountSettingsResponse> {
    const body: jsonP.JSONObject = {
      AccountSettings: fromAccountSettings(params["AccountSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccountSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/settings`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateBot(
    {abortSignal, ...params}: RequestConfig & UpdateBotRequest,
  ): Promise<UpdateBotResponse> {
    const body: jsonP.JSONObject = {
      Disabled: params["Disabled"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBot",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/bots/${params["BotId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Bot": toBot,
      },
    }, await resp.json());
  }

  async updateGlobalSettings(
    {abortSignal, ...params}: RequestConfig & UpdateGlobalSettingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      BusinessCalling: fromBusinessCallingSettings(params["BusinessCalling"]),
      VoiceConnector: fromVoiceConnectorSettings(params["VoiceConnector"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateGlobalSettings",
      method: "PUT",
      requestUri: "/settings",
      responseCode: 204,
    });
  }

  async updatePhoneNumber(
    {abortSignal, ...params}: RequestConfig & UpdatePhoneNumberRequest,
  ): Promise<UpdatePhoneNumberResponse> {
    const body: jsonP.JSONObject = {
      ProductType: params["ProductType"],
      CallingName: params["CallingName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePhoneNumber",
      requestUri: cmnP.encodePath`/phone-numbers/${params["PhoneNumberId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "PhoneNumber": toPhoneNumber,
      },
    }, await resp.json());
  }

  async updatePhoneNumberSettings(
    {abortSignal, ...params}: RequestConfig & UpdatePhoneNumberSettingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      CallingName: params["CallingName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePhoneNumberSettings",
      method: "PUT",
      requestUri: "/settings/phone-number",
      responseCode: 204,
    });
  }

  async updateProxySession(
    {abortSignal, ...params}: RequestConfig & UpdateProxySessionRequest,
  ): Promise<UpdateProxySessionResponse> {
    const body: jsonP.JSONObject = {
      Capabilities: params["Capabilities"],
      ExpiryMinutes: params["ExpiryMinutes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProxySession",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}/proxy-sessions/${params["ProxySessionId"]}`,
      responseCode: 201,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProxySession": toProxySession,
      },
    }, await resp.json());
  }

  async updateRoom(
    {abortSignal, ...params}: RequestConfig & UpdateRoomRequest,
  ): Promise<UpdateRoomResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoom",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Room": toRoom,
      },
    }, await resp.json());
  }

  async updateRoomMembership(
    {abortSignal, ...params}: RequestConfig & UpdateRoomMembershipRequest,
  ): Promise<UpdateRoomMembershipResponse> {
    const body: jsonP.JSONObject = {
      Role: params["Role"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoomMembership",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/rooms/${params["RoomId"]}/memberships/${params["MemberId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "RoomMembership": toRoomMembership,
      },
    }, await resp.json());
  }

  async updateUser(
    {abortSignal, ...params}: RequestConfig & UpdateUserRequest,
  ): Promise<UpdateUserResponse> {
    const body: jsonP.JSONObject = {
      LicenseType: params["LicenseType"],
      UserType: params["UserType"],
      AlexaForBusinessMetadata: fromAlexaForBusinessMetadata(params["AlexaForBusinessMetadata"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUser",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "User": toUser,
      },
    }, await resp.json());
  }

  async updateUserSettings(
    {abortSignal, ...params}: RequestConfig & UpdateUserSettingsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      UserSettings: fromUserSettings(params["UserSettings"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateUserSettings",
      method: "PUT",
      requestUri: cmnP.encodePath`/accounts/${params["AccountId"]}/users/${params["UserId"]}/settings`,
      responseCode: 204,
    });
  }

  async updateVoiceConnector(
    {abortSignal, ...params}: RequestConfig & UpdateVoiceConnectorRequest,
  ): Promise<UpdateVoiceConnectorResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      RequireEncryption: params["RequireEncryption"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVoiceConnector",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connectors/${params["VoiceConnectorId"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnector": toVoiceConnector,
      },
    }, await resp.json());
  }

  async updateVoiceConnectorGroup(
    {abortSignal, ...params}: RequestConfig & UpdateVoiceConnectorGroupRequest,
  ): Promise<UpdateVoiceConnectorGroupResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      VoiceConnectorItems: params["VoiceConnectorItems"]?.map(x => fromVoiceConnectorItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVoiceConnectorGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/voice-connector-groups/${params["VoiceConnectorGroupId"]}`,
      responseCode: 202,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "VoiceConnectorGroup": toVoiceConnectorGroup,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AssociatePhoneNumberWithUserRequest {
  AccountId: string;
  UserId: string;
  E164PhoneNumber: string;
}

// refs: 1 - tags: named, input
export interface AssociatePhoneNumbersWithVoiceConnectorRequest {
  VoiceConnectorId: string;
  E164PhoneNumbers: string[];
  ForceAssociate?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AssociatePhoneNumbersWithVoiceConnectorGroupRequest {
  VoiceConnectorGroupId: string;
  E164PhoneNumbers: string[];
  ForceAssociate?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AssociateSigninDelegateGroupsWithAccountRequest {
  AccountId: string;
  SigninDelegateGroups: SigninDelegateGroup[];
}

// refs: 1 - tags: named, input
export interface BatchCreateAttendeeRequest {
  MeetingId: string;
  Attendees: CreateAttendeeRequestItem[];
}

// refs: 1 - tags: named, input
export interface BatchCreateRoomMembershipRequest {
  AccountId: string;
  RoomId: string;
  MembershipItemList: MembershipItem[];
}

// refs: 1 - tags: named, input
export interface BatchDeletePhoneNumberRequest {
  PhoneNumberIds: string[];
}

// refs: 1 - tags: named, input
export interface BatchSuspendUserRequest {
  AccountId: string;
  UserIdList: string[];
}

// refs: 1 - tags: named, input
export interface BatchUnsuspendUserRequest {
  AccountId: string;
  UserIdList: string[];
}

// refs: 1 - tags: named, input
export interface BatchUpdatePhoneNumberRequest {
  UpdatePhoneNumberRequestItems: UpdatePhoneNumberRequestItem[];
}

// refs: 1 - tags: named, input
export interface BatchUpdateUserRequest {
  AccountId: string;
  UpdateUserRequestItems: UpdateUserRequestItem[];
}

// refs: 1 - tags: named, input
export interface CreateAccountRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface CreateAttendeeRequest {
  MeetingId: string;
  ExternalUserId: string;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateBotRequest {
  AccountId: string;
  DisplayName: string;
  Domain?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateMeetingRequest {
  ClientRequestToken: string;
  ExternalMeetingId?: string | null;
  MeetingHostId?: string | null;
  MediaRegion?: string | null;
  Tags?: Tag[] | null;
  NotificationsConfiguration?: MeetingNotificationConfiguration | null;
}

// refs: 1 - tags: named, input
export interface CreateMeetingWithAttendeesRequest {
  ClientRequestToken: string;
  ExternalMeetingId?: string | null;
  MeetingHostId?: string | null;
  MediaRegion?: string | null;
  Tags?: Tag[] | null;
  NotificationsConfiguration?: MeetingNotificationConfiguration | null;
  Attendees?: CreateAttendeeRequestItem[] | null;
}

// refs: 1 - tags: named, input
export interface CreatePhoneNumberOrderRequest {
  ProductType: PhoneNumberProductType;
  E164PhoneNumbers: string[];
}

// refs: 1 - tags: named, input
export interface CreateProxySessionRequest {
  VoiceConnectorId: string;
  ParticipantPhoneNumbers: string[];
  Name?: string | null;
  ExpiryMinutes?: number | null;
  Capabilities: Capability[];
  NumberSelectionBehavior?: NumberSelectionBehavior | null;
  GeoMatchLevel?: GeoMatchLevel | null;
  GeoMatchParams?: GeoMatchParams | null;
}

// refs: 1 - tags: named, input
export interface CreateRoomRequest {
  AccountId: string;
  Name: string;
  ClientRequestToken?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateRoomMembershipRequest {
  AccountId: string;
  RoomId: string;
  MemberId: string;
  Role?: RoomMembershipRole | null;
}

// refs: 1 - tags: named, input
export interface CreateUserRequest {
  AccountId: string;
  Username?: string | null;
  Email?: string | null;
  UserType?: UserType | null;
}

// refs: 1 - tags: named, input
export interface CreateVoiceConnectorRequest {
  Name: string;
  AwsRegion?: VoiceConnectorAwsRegion | null;
  RequireEncryption: boolean;
}

// refs: 1 - tags: named, input
export interface CreateVoiceConnectorGroupRequest {
  Name: string;
  VoiceConnectorItems?: VoiceConnectorItem[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteAccountRequest {
  AccountId: string;
}

// refs: 1 - tags: named, input
export interface DeleteAttendeeRequest {
  MeetingId: string;
  AttendeeId: string;
}

// refs: 1 - tags: named, input
export interface DeleteEventsConfigurationRequest {
  AccountId: string;
  BotId: string;
}

// refs: 1 - tags: named, input
export interface DeleteMeetingRequest {
  MeetingId: string;
}

// refs: 1 - tags: named, input
export interface DeletePhoneNumberRequest {
  PhoneNumberId: string;
}

// refs: 1 - tags: named, input
export interface DeleteProxySessionRequest {
  VoiceConnectorId: string;
  ProxySessionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRoomRequest {
  AccountId: string;
  RoomId: string;
}

// refs: 1 - tags: named, input
export interface DeleteRoomMembershipRequest {
  AccountId: string;
  RoomId: string;
  MemberId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorEmergencyCallingConfigurationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorGroupRequest {
  VoiceConnectorGroupId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorOriginationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorProxyRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorStreamingConfigurationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorTerminationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteVoiceConnectorTerminationCredentialsRequest {
  VoiceConnectorId: string;
  Usernames: string[];
}

// refs: 1 - tags: named, input
export interface DisassociatePhoneNumberFromUserRequest {
  AccountId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface DisassociatePhoneNumbersFromVoiceConnectorRequest {
  VoiceConnectorId: string;
  E164PhoneNumbers: string[];
}

// refs: 1 - tags: named, input
export interface DisassociatePhoneNumbersFromVoiceConnectorGroupRequest {
  VoiceConnectorGroupId: string;
  E164PhoneNumbers: string[];
}

// refs: 1 - tags: named, input
export interface DisassociateSigninDelegateGroupsFromAccountRequest {
  AccountId: string;
  GroupNames: string[];
}

// refs: 1 - tags: named, input
export interface GetAccountRequest {
  AccountId: string;
}

// refs: 1 - tags: named, input
export interface GetAccountSettingsRequest {
  AccountId: string;
}

// refs: 1 - tags: named, input
export interface GetAttendeeRequest {
  MeetingId: string;
  AttendeeId: string;
}

// refs: 1 - tags: named, input
export interface GetBotRequest {
  AccountId: string;
  BotId: string;
}

// refs: 1 - tags: named, input
export interface GetEventsConfigurationRequest {
  AccountId: string;
  BotId: string;
}

// refs: 1 - tags: named, input
export interface GetMeetingRequest {
  MeetingId: string;
}

// refs: 1 - tags: named, input
export interface GetPhoneNumberRequest {
  PhoneNumberId: string;
}

// refs: 1 - tags: named, input
export interface GetPhoneNumberOrderRequest {
  PhoneNumberOrderId: string;
}

// refs: 1 - tags: named, input
export interface GetProxySessionRequest {
  VoiceConnectorId: string;
  ProxySessionId: string;
}

// refs: 1 - tags: named, input
export interface GetRetentionSettingsRequest {
  AccountId: string;
}

// refs: 1 - tags: named, input
export interface GetRoomRequest {
  AccountId: string;
  RoomId: string;
}

// refs: 1 - tags: named, input
export interface GetUserRequest {
  AccountId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface GetUserSettingsRequest {
  AccountId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorEmergencyCallingConfigurationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorGroupRequest {
  VoiceConnectorGroupId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorLoggingConfigurationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorOriginationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorProxyRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorStreamingConfigurationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorTerminationRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface GetVoiceConnectorTerminationHealthRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface InviteUsersRequest {
  AccountId: string;
  UserEmailList: string[];
  UserType?: UserType | null;
}

// refs: 1 - tags: named, input
export interface ListAccountsRequest {
  Name?: string | null;
  UserEmail?: string | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAttendeeTagsRequest {
  MeetingId: string;
  AttendeeId: string;
}

// refs: 1 - tags: named, input
export interface ListAttendeesRequest {
  MeetingId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListBotsRequest {
  AccountId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListMeetingTagsRequest {
  MeetingId: string;
}

// refs: 1 - tags: named, input
export interface ListMeetingsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPhoneNumberOrdersRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPhoneNumbersRequest {
  Status?: PhoneNumberStatus | null;
  ProductType?: PhoneNumberProductType | null;
  FilterName?: PhoneNumberAssociationName | null;
  FilterValue?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProxySessionsRequest {
  VoiceConnectorId: string;
  Status?: ProxySessionStatus | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListRoomMembershipsRequest {
  AccountId: string;
  RoomId: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRoomsRequest {
  AccountId: string;
  MemberId?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface ListUsersRequest {
  AccountId: string;
  UserEmail?: string | null;
  UserType?: UserType | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListVoiceConnectorGroupsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListVoiceConnectorTerminationCredentialsRequest {
  VoiceConnectorId: string;
}

// refs: 1 - tags: named, input
export interface ListVoiceConnectorsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface LogoutUserRequest {
  AccountId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface PutEventsConfigurationRequest {
  AccountId: string;
  BotId: string;
  OutboundEventsHTTPSEndpoint?: string | null;
  LambdaFunctionArn?: string | null;
}

// refs: 1 - tags: named, input
export interface PutRetentionSettingsRequest {
  AccountId: string;
  RetentionSettings: RetentionSettings;
}

// refs: 1 - tags: named, input
export interface PutVoiceConnectorEmergencyCallingConfigurationRequest {
  VoiceConnectorId: string;
  EmergencyCallingConfiguration: EmergencyCallingConfiguration;
}

// refs: 1 - tags: named, input
export interface PutVoiceConnectorLoggingConfigurationRequest {
  VoiceConnectorId: string;
  LoggingConfiguration: LoggingConfiguration;
}

// refs: 1 - tags: named, input
export interface PutVoiceConnectorOriginationRequest {
  VoiceConnectorId: string;
  Origination: Origination;
}

// refs: 1 - tags: named, input
export interface PutVoiceConnectorProxyRequest {
  VoiceConnectorId: string;
  DefaultSessionExpiryMinutes: number;
  PhoneNumberPoolCountries: string[];
  FallBackPhoneNumber?: string | null;
  Disabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface PutVoiceConnectorStreamingConfigurationRequest {
  VoiceConnectorId: string;
  StreamingConfiguration: StreamingConfiguration;
}

// refs: 1 - tags: named, input
export interface PutVoiceConnectorTerminationRequest {
  VoiceConnectorId: string;
  Termination: Termination;
}

// refs: 1 - tags: named, input
export interface PutVoiceConnectorTerminationCredentialsRequest {
  VoiceConnectorId: string;
  Credentials?: Credential[] | null;
}

// refs: 1 - tags: named, input
export interface RedactConversationMessageRequest {
  AccountId: string;
  ConversationId: string;
  MessageId: string;
}

// refs: 1 - tags: named, input
export interface RedactRoomMessageRequest {
  AccountId: string;
  RoomId: string;
  MessageId: string;
}

// refs: 1 - tags: named, input
export interface RegenerateSecurityTokenRequest {
  AccountId: string;
  BotId: string;
}

// refs: 1 - tags: named, input
export interface ResetPersonalPINRequest {
  AccountId: string;
  UserId: string;
}

// refs: 1 - tags: named, input
export interface RestorePhoneNumberRequest {
  PhoneNumberId: string;
}

// refs: 1 - tags: named, input
export interface SearchAvailablePhoneNumbersRequest {
  AreaCode?: string | null;
  City?: string | null;
  Country?: string | null;
  State?: string | null;
  TollFreePrefix?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface TagAttendeeRequest {
  MeetingId: string;
  AttendeeId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface TagMeetingRequest {
  MeetingId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagAttendeeRequest {
  MeetingId: string;
  AttendeeId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UntagMeetingRequest {
  MeetingId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAccountRequest {
  AccountId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAccountSettingsRequest {
  AccountId: string;
  AccountSettings: AccountSettings;
}

// refs: 1 - tags: named, input
export interface UpdateBotRequest {
  AccountId: string;
  BotId: string;
  Disabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateGlobalSettingsRequest {
  BusinessCalling: BusinessCallingSettings;
  VoiceConnector: VoiceConnectorSettings;
}

// refs: 1 - tags: named, input
export interface UpdatePhoneNumberRequest {
  PhoneNumberId: string;
  ProductType?: PhoneNumberProductType | null;
  CallingName?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdatePhoneNumberSettingsRequest {
  CallingName: string;
}

// refs: 1 - tags: named, input
export interface UpdateProxySessionRequest {
  VoiceConnectorId: string;
  ProxySessionId: string;
  Capabilities: Capability[];
  ExpiryMinutes?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateRoomRequest {
  AccountId: string;
  RoomId: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateRoomMembershipRequest {
  AccountId: string;
  RoomId: string;
  MemberId: string;
  Role?: RoomMembershipRole | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserRequest {
  AccountId: string;
  UserId: string;
  LicenseType?: License | null;
  UserType?: UserType | null;
  AlexaForBusinessMetadata?: AlexaForBusinessMetadata | null;
}

// refs: 1 - tags: named, input
export interface UpdateUserSettingsRequest {
  AccountId: string;
  UserId: string;
  UserSettings: UserSettings;
}

// refs: 1 - tags: named, input
export interface UpdateVoiceConnectorRequest {
  VoiceConnectorId: string;
  Name: string;
  RequireEncryption: boolean;
}

// refs: 1 - tags: named, input
export interface UpdateVoiceConnectorGroupRequest {
  VoiceConnectorGroupId: string;
  Name: string;
  VoiceConnectorItems: VoiceConnectorItem[];
}

// refs: 1 - tags: named, output
export interface AssociatePhoneNumberWithUserResponse {
}

// refs: 1 - tags: named, output
export interface AssociatePhoneNumbersWithVoiceConnectorResponse {
  PhoneNumberErrors?: PhoneNumberError[] | null;
}

// refs: 1 - tags: named, output
export interface AssociatePhoneNumbersWithVoiceConnectorGroupResponse {
  PhoneNumberErrors?: PhoneNumberError[] | null;
}

// refs: 1 - tags: named, output
export interface AssociateSigninDelegateGroupsWithAccountResponse {
}

// refs: 1 - tags: named, output
export interface BatchCreateAttendeeResponse {
  Attendees?: Attendee[] | null;
  Errors?: CreateAttendeeError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchCreateRoomMembershipResponse {
  Errors?: MemberError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchDeletePhoneNumberResponse {
  PhoneNumberErrors?: PhoneNumberError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchSuspendUserResponse {
  UserErrors?: UserError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchUnsuspendUserResponse {
  UserErrors?: UserError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchUpdatePhoneNumberResponse {
  PhoneNumberErrors?: PhoneNumberError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchUpdateUserResponse {
  UserErrors?: UserError[] | null;
}

// refs: 1 - tags: named, output
export interface CreateAccountResponse {
  Account?: Account | null;
}

// refs: 1 - tags: named, output
export interface CreateAttendeeResponse {
  Attendee?: Attendee | null;
}

// refs: 1 - tags: named, output
export interface CreateBotResponse {
  Bot?: Bot | null;
}

// refs: 1 - tags: named, output
export interface CreateMeetingResponse {
  Meeting?: Meeting | null;
}

// refs: 1 - tags: named, output
export interface CreateMeetingWithAttendeesResponse {
  Meeting?: Meeting | null;
  Attendees?: Attendee[] | null;
  Errors?: CreateAttendeeError[] | null;
}

// refs: 1 - tags: named, output
export interface CreatePhoneNumberOrderResponse {
  PhoneNumberOrder?: PhoneNumberOrder | null;
}

// refs: 1 - tags: named, output
export interface CreateProxySessionResponse {
  ProxySession?: ProxySession | null;
}

// refs: 1 - tags: named, output
export interface CreateRoomResponse {
  Room?: Room | null;
}

// refs: 1 - tags: named, output
export interface CreateRoomMembershipResponse {
  RoomMembership?: RoomMembership | null;
}

// refs: 1 - tags: named, output
export interface CreateUserResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface CreateVoiceConnectorResponse {
  VoiceConnector?: VoiceConnector | null;
}

// refs: 1 - tags: named, output
export interface CreateVoiceConnectorGroupResponse {
  VoiceConnectorGroup?: VoiceConnectorGroup | null;
}

// refs: 1 - tags: named, output
export interface DeleteAccountResponse {
}

// refs: 1 - tags: named, output
export interface DisassociatePhoneNumberFromUserResponse {
}

// refs: 1 - tags: named, output
export interface DisassociatePhoneNumbersFromVoiceConnectorResponse {
  PhoneNumberErrors?: PhoneNumberError[] | null;
}

// refs: 1 - tags: named, output
export interface DisassociatePhoneNumbersFromVoiceConnectorGroupResponse {
  PhoneNumberErrors?: PhoneNumberError[] | null;
}

// refs: 1 - tags: named, output
export interface DisassociateSigninDelegateGroupsFromAccountResponse {
}

// refs: 1 - tags: named, output
export interface GetAccountResponse {
  Account?: Account | null;
}

// refs: 1 - tags: named, output
export interface GetAccountSettingsResponse {
  AccountSettings?: AccountSettings | null;
}

// refs: 1 - tags: named, output
export interface GetAttendeeResponse {
  Attendee?: Attendee | null;
}

// refs: 1 - tags: named, output
export interface GetBotResponse {
  Bot?: Bot | null;
}

// refs: 1 - tags: named, output
export interface GetEventsConfigurationResponse {
  EventsConfiguration?: EventsConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetGlobalSettingsResponse {
  BusinessCalling?: BusinessCallingSettings | null;
  VoiceConnector?: VoiceConnectorSettings | null;
}

// refs: 1 - tags: named, output
export interface GetMeetingResponse {
  Meeting?: Meeting | null;
}

// refs: 1 - tags: named, output
export interface GetPhoneNumberResponse {
  PhoneNumber?: PhoneNumber | null;
}

// refs: 1 - tags: named, output
export interface GetPhoneNumberOrderResponse {
  PhoneNumberOrder?: PhoneNumberOrder | null;
}

// refs: 1 - tags: named, output
export interface GetPhoneNumberSettingsResponse {
  CallingName?: string | null;
  CallingNameUpdatedTimestamp?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetProxySessionResponse {
  ProxySession?: ProxySession | null;
}

// refs: 1 - tags: named, output
export interface GetRetentionSettingsResponse {
  RetentionSettings?: RetentionSettings | null;
  InitiateDeletionTimestamp?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetRoomResponse {
  Room?: Room | null;
}

// refs: 1 - tags: named, output
export interface GetUserResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface GetUserSettingsResponse {
  UserSettings?: UserSettings | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorResponse {
  VoiceConnector?: VoiceConnector | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorEmergencyCallingConfigurationResponse {
  EmergencyCallingConfiguration?: EmergencyCallingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorGroupResponse {
  VoiceConnectorGroup?: VoiceConnectorGroup | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorLoggingConfigurationResponse {
  LoggingConfiguration?: LoggingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorOriginationResponse {
  Origination?: Origination | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorProxyResponse {
  Proxy?: Proxy | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorStreamingConfigurationResponse {
  StreamingConfiguration?: StreamingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorTerminationResponse {
  Termination?: Termination | null;
}

// refs: 1 - tags: named, output
export interface GetVoiceConnectorTerminationHealthResponse {
  TerminationHealth?: TerminationHealth | null;
}

// refs: 1 - tags: named, output
export interface InviteUsersResponse {
  Invites?: Invite[] | null;
}

// refs: 1 - tags: named, output
export interface ListAccountsResponse {
  Accounts?: Account[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAttendeeTagsResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListAttendeesResponse {
  Attendees?: Attendee[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBotsResponse {
  Bots?: Bot[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMeetingTagsResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListMeetingsResponse {
  Meetings?: Meeting[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPhoneNumberOrdersResponse {
  PhoneNumberOrders?: PhoneNumberOrder[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPhoneNumbersResponse {
  PhoneNumbers?: PhoneNumber[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProxySessionsResponse {
  ProxySessions?: ProxySession[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRoomMembershipsResponse {
  RoomMemberships?: RoomMembership[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRoomsResponse {
  Rooms?: Room[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface ListUsersResponse {
  Users?: User[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListVoiceConnectorGroupsResponse {
  VoiceConnectorGroups?: VoiceConnectorGroup[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListVoiceConnectorTerminationCredentialsResponse {
  Usernames?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ListVoiceConnectorsResponse {
  VoiceConnectors?: VoiceConnector[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface LogoutUserResponse {
}

// refs: 1 - tags: named, output
export interface PutEventsConfigurationResponse {
  EventsConfiguration?: EventsConfiguration | null;
}

// refs: 1 - tags: named, output
export interface PutRetentionSettingsResponse {
  RetentionSettings?: RetentionSettings | null;
  InitiateDeletionTimestamp?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface PutVoiceConnectorEmergencyCallingConfigurationResponse {
  EmergencyCallingConfiguration?: EmergencyCallingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface PutVoiceConnectorLoggingConfigurationResponse {
  LoggingConfiguration?: LoggingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface PutVoiceConnectorOriginationResponse {
  Origination?: Origination | null;
}

// refs: 1 - tags: named, output
export interface PutVoiceConnectorProxyResponse {
  Proxy?: Proxy | null;
}

// refs: 1 - tags: named, output
export interface PutVoiceConnectorStreamingConfigurationResponse {
  StreamingConfiguration?: StreamingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface PutVoiceConnectorTerminationResponse {
  Termination?: Termination | null;
}

// refs: 1 - tags: named, output
export interface RedactConversationMessageResponse {
}

// refs: 1 - tags: named, output
export interface RedactRoomMessageResponse {
}

// refs: 1 - tags: named, output
export interface RegenerateSecurityTokenResponse {
  Bot?: Bot | null;
}

// refs: 1 - tags: named, output
export interface ResetPersonalPINResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface RestorePhoneNumberResponse {
  PhoneNumber?: PhoneNumber | null;
}

// refs: 1 - tags: named, output
export interface SearchAvailablePhoneNumbersResponse {
  E164PhoneNumbers?: string[] | null;
}

// refs: 1 - tags: named, output
export interface UpdateAccountResponse {
  Account?: Account | null;
}

// refs: 1 - tags: named, output
export interface UpdateAccountSettingsResponse {
}

// refs: 1 - tags: named, output
export interface UpdateBotResponse {
  Bot?: Bot | null;
}

// refs: 1 - tags: named, output
export interface UpdatePhoneNumberResponse {
  PhoneNumber?: PhoneNumber | null;
}

// refs: 1 - tags: named, output
export interface UpdateProxySessionResponse {
  ProxySession?: ProxySession | null;
}

// refs: 1 - tags: named, output
export interface UpdateRoomResponse {
  Room?: Room | null;
}

// refs: 1 - tags: named, output
export interface UpdateRoomMembershipResponse {
  RoomMembership?: RoomMembership | null;
}

// refs: 1 - tags: named, output
export interface UpdateUserResponse {
  User?: User | null;
}

// refs: 1 - tags: named, output
export interface UpdateVoiceConnectorResponse {
  VoiceConnector?: VoiceConnector | null;
}

// refs: 1 - tags: named, output
export interface UpdateVoiceConnectorGroupResponse {
  VoiceConnectorGroup?: VoiceConnectorGroup | null;
}

// refs: 5 - tags: input, named, interface, output
export interface SigninDelegateGroup {
  GroupName?: string | null;
}
function fromSigninDelegateGroup(input?: SigninDelegateGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    GroupName: input["GroupName"],
  }
}
function toSigninDelegateGroup(root: jsonP.JSONValue): SigninDelegateGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "GroupName": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface CreateAttendeeRequestItem {
  ExternalUserId: string;
  Tags?: Tag[] | null;
}
function fromCreateAttendeeRequestItem(input?: CreateAttendeeRequestItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ExternalUserId: input["ExternalUserId"],
    Tags: input["Tags"]?.map(x => fromTag(x)),
  }
}

// refs: 11 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface MembershipItem {
  MemberId?: string | null;
  Role?: RoomMembershipRole | null;
}
function fromMembershipItem(input?: MembershipItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MemberId: input["MemberId"],
    Role: input["Role"],
  }
}

// refs: 6 - tags: input, named, enum, output
export type RoomMembershipRole =
| "Administrator"
| "Member"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdatePhoneNumberRequestItem {
  PhoneNumberId: string;
  ProductType?: PhoneNumberProductType | null;
  CallingName?: string | null;
}
function fromUpdatePhoneNumberRequestItem(input?: UpdatePhoneNumberRequestItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    PhoneNumberId: input["PhoneNumberId"],
    ProductType: input["ProductType"],
    CallingName: input["CallingName"],
  }
}

// refs: 11 - tags: input, named, enum, output
export type PhoneNumberProductType =
| "BusinessCalling"
| "VoiceConnector"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface UpdateUserRequestItem {
  UserId: string;
  LicenseType?: License | null;
  UserType?: UserType | null;
  AlexaForBusinessMetadata?: AlexaForBusinessMetadata | null;
}
function fromUpdateUserRequestItem(input?: UpdateUserRequestItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    UserId: input["UserId"],
    LicenseType: input["LicenseType"],
    UserType: input["UserType"],
    AlexaForBusinessMetadata: fromAlexaForBusinessMetadata(input["AlexaForBusinessMetadata"]),
  }
}

// refs: 15 - tags: input, named, enum, output
export type License =
| "Basic"
| "Plus"
| "Pro"
| "ProTrial"
| cmnP.UnexpectedEnumValue;

// refs: 10 - tags: input, named, enum, output
export type UserType =
| "PrivateUser"
| "SharedDevice"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface AlexaForBusinessMetadata {
  IsAlexaForBusinessEnabled?: boolean | null;
  AlexaForBusinessRoomArn?: string | null;
}
function fromAlexaForBusinessMetadata(input?: AlexaForBusinessMetadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    IsAlexaForBusinessEnabled: input["IsAlexaForBusinessEnabled"],
    AlexaForBusinessRoomArn: input["AlexaForBusinessRoomArn"],
  }
}
function toAlexaForBusinessMetadata(root: jsonP.JSONValue): AlexaForBusinessMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "IsAlexaForBusinessEnabled": "b",
      "AlexaForBusinessRoomArn": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface MeetingNotificationConfiguration {
  SnsTopicArn?: string | null;
  SqsQueueArn?: string | null;
}
function fromMeetingNotificationConfiguration(input?: MeetingNotificationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SnsTopicArn: input["SnsTopicArn"],
    SqsQueueArn: input["SqsQueueArn"],
  }
}

// refs: 6 - tags: input, named, enum, output
export type Capability =
| "Voice"
| "SMS"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type NumberSelectionBehavior =
| "PreferSticky"
| "AvoidSticky"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type GeoMatchLevel =
| "Country"
| "AreaCode"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface GeoMatchParams {
  Country: string;
  AreaCode: string;
}
function fromGeoMatchParams(input?: GeoMatchParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Country: input["Country"],
    AreaCode: input["AreaCode"],
  }
}
function toGeoMatchParams(root: jsonP.JSONValue): GeoMatchParams {
  return jsonP.readObj({
    required: {
      "Country": "s",
      "AreaCode": "s",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type VoiceConnectorAwsRegion =
| "us-east-1"
| "us-west-2"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface VoiceConnectorItem {
  VoiceConnectorId: string;
  Priority: number;
}
function fromVoiceConnectorItem(input?: VoiceConnectorItem | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VoiceConnectorId: input["VoiceConnectorId"],
    Priority: input["Priority"],
  }
}
function toVoiceConnectorItem(root: jsonP.JSONValue): VoiceConnectorItem {
  return jsonP.readObj({
    required: {
      "VoiceConnectorId": "s",
      "Priority": "n",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type PhoneNumberStatus =
| "AcquireInProgress"
| "AcquireFailed"
| "Unassigned"
| "Assigned"
| "ReleaseInProgress"
| "DeleteInProgress"
| "ReleaseFailed"
| "DeleteFailed"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type PhoneNumberAssociationName =
| "AccountId"
| "UserId"
| "VoiceConnectorId"
| "VoiceConnectorGroupId"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type ProxySessionStatus =
| "Open"
| "InProgress"
| "Closed"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface RetentionSettings {
  RoomRetentionSettings?: RoomRetentionSettings | null;
  ConversationRetentionSettings?: ConversationRetentionSettings | null;
}
function fromRetentionSettings(input?: RetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RoomRetentionSettings: fromRoomRetentionSettings(input["RoomRetentionSettings"]),
    ConversationRetentionSettings: fromConversationRetentionSettings(input["ConversationRetentionSettings"]),
  }
}
function toRetentionSettings(root: jsonP.JSONValue): RetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomRetentionSettings": toRoomRetentionSettings,
      "ConversationRetentionSettings": toConversationRetentionSettings,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RoomRetentionSettings {
  RetentionDays?: number | null;
}
function fromRoomRetentionSettings(input?: RoomRetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RetentionDays: input["RetentionDays"],
  }
}
function toRoomRetentionSettings(root: jsonP.JSONValue): RoomRetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "RetentionDays": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ConversationRetentionSettings {
  RetentionDays?: number | null;
}
function fromConversationRetentionSettings(input?: ConversationRetentionSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RetentionDays: input["RetentionDays"],
  }
}
function toConversationRetentionSettings(root: jsonP.JSONValue): ConversationRetentionSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "RetentionDays": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface EmergencyCallingConfiguration {
  DNIS?: DNISEmergencyCallingConfiguration[] | null;
}
function fromEmergencyCallingConfiguration(input?: EmergencyCallingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DNIS: input["DNIS"]?.map(x => fromDNISEmergencyCallingConfiguration(x)),
  }
}
function toEmergencyCallingConfiguration(root: jsonP.JSONValue): EmergencyCallingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "DNIS": [toDNISEmergencyCallingConfiguration],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface DNISEmergencyCallingConfiguration {
  EmergencyPhoneNumber: string;
  TestPhoneNumber?: string | null;
  CallingCountry: string;
}
function fromDNISEmergencyCallingConfiguration(input?: DNISEmergencyCallingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EmergencyPhoneNumber: input["EmergencyPhoneNumber"],
    TestPhoneNumber: input["TestPhoneNumber"],
    CallingCountry: input["CallingCountry"],
  }
}
function toDNISEmergencyCallingConfiguration(root: jsonP.JSONValue): DNISEmergencyCallingConfiguration {
  return jsonP.readObj({
    required: {
      "EmergencyPhoneNumber": "s",
      "CallingCountry": "s",
    },
    optional: {
      "TestPhoneNumber": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface LoggingConfiguration {
  EnableSIPLogs?: boolean | null;
}
function fromLoggingConfiguration(input?: LoggingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EnableSIPLogs: input["EnableSIPLogs"],
  }
}
function toLoggingConfiguration(root: jsonP.JSONValue): LoggingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "EnableSIPLogs": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Origination {
  Routes?: OriginationRoute[] | null;
  Disabled?: boolean | null;
}
function fromOrigination(input?: Origination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Routes: input["Routes"]?.map(x => fromOriginationRoute(x)),
    Disabled: input["Disabled"],
  }
}
function toOrigination(root: jsonP.JSONValue): Origination {
  return jsonP.readObj({
    required: {},
    optional: {
      "Routes": [toOriginationRoute],
      "Disabled": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OriginationRoute {
  Host?: string | null;
  Port?: number | null;
  Protocol?: OriginationRouteProtocol | null;
  Priority?: number | null;
  Weight?: number | null;
}
function fromOriginationRoute(input?: OriginationRoute | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Host: input["Host"],
    Port: input["Port"],
    Protocol: input["Protocol"],
    Priority: input["Priority"],
    Weight: input["Weight"],
  }
}
function toOriginationRoute(root: jsonP.JSONValue): OriginationRoute {
  return jsonP.readObj({
    required: {},
    optional: {
      "Host": "s",
      "Port": "n",
      "Protocol": (x: jsonP.JSONValue) => cmnP.readEnum<OriginationRouteProtocol>(x),
      "Priority": "n",
      "Weight": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type OriginationRouteProtocol =
| "TCP"
| "UDP"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface StreamingConfiguration {
  DataRetentionInHours: number;
  Disabled?: boolean | null;
  StreamingNotificationTargets?: StreamingNotificationTarget[] | null;
}
function fromStreamingConfiguration(input?: StreamingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DataRetentionInHours: input["DataRetentionInHours"],
    Disabled: input["Disabled"],
    StreamingNotificationTargets: input["StreamingNotificationTargets"]?.map(x => fromStreamingNotificationTarget(x)),
  }
}
function toStreamingConfiguration(root: jsonP.JSONValue): StreamingConfiguration {
  return jsonP.readObj({
    required: {
      "DataRetentionInHours": "n",
    },
    optional: {
      "Disabled": "b",
      "StreamingNotificationTargets": [toStreamingNotificationTarget],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface StreamingNotificationTarget {
  NotificationTarget: NotificationTarget;
}
function fromStreamingNotificationTarget(input?: StreamingNotificationTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    NotificationTarget: input["NotificationTarget"],
  }
}
function toStreamingNotificationTarget(root: jsonP.JSONValue): StreamingNotificationTarget {
  return jsonP.readObj({
    required: {
      "NotificationTarget": (x: jsonP.JSONValue) => cmnP.readEnum<NotificationTarget>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type NotificationTarget =
| "EventBridge"
| "SNS"
| "SQS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface Termination {
  CpsLimit?: number | null;
  DefaultPhoneNumber?: string | null;
  CallingRegions?: string[] | null;
  CidrAllowedList?: string[] | null;
  Disabled?: boolean | null;
}
function fromTermination(input?: Termination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CpsLimit: input["CpsLimit"],
    DefaultPhoneNumber: input["DefaultPhoneNumber"],
    CallingRegions: input["CallingRegions"],
    CidrAllowedList: input["CidrAllowedList"],
    Disabled: input["Disabled"],
  }
}
function toTermination(root: jsonP.JSONValue): Termination {
  return jsonP.readObj({
    required: {},
    optional: {
      "CpsLimit": "n",
      "DefaultPhoneNumber": "s",
      "CallingRegions": ["s"],
      "CidrAllowedList": ["s"],
      "Disabled": "b",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface Credential {
  Username?: string | null;
  Password?: string | null;
}
function fromCredential(input?: Credential | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Username: input["Username"],
    Password: input["Password"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface AccountSettings {
  DisableRemoteControl?: boolean | null;
  EnableDialOut?: boolean | null;
}
function fromAccountSettings(input?: AccountSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DisableRemoteControl: input["DisableRemoteControl"],
    EnableDialOut: input["EnableDialOut"],
  }
}
function toAccountSettings(root: jsonP.JSONValue): AccountSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "DisableRemoteControl": "b",
      "EnableDialOut": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface BusinessCallingSettings {
  CdrBucket?: string | null;
}
function fromBusinessCallingSettings(input?: BusinessCallingSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CdrBucket: input["CdrBucket"],
  }
}
function toBusinessCallingSettings(root: jsonP.JSONValue): BusinessCallingSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "CdrBucket": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface VoiceConnectorSettings {
  CdrBucket?: string | null;
}
function fromVoiceConnectorSettings(input?: VoiceConnectorSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    CdrBucket: input["CdrBucket"],
  }
}
function toVoiceConnectorSettings(root: jsonP.JSONValue): VoiceConnectorSettings {
  return jsonP.readObj({
    required: {},
    optional: {
      "CdrBucket": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface UserSettings {
  Telephony: TelephonySettings;
}
function fromUserSettings(input?: UserSettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Telephony: fromTelephonySettings(input["Telephony"]),
  }
}
function toUserSettings(root: jsonP.JSONValue): UserSettings {
  return jsonP.readObj({
    required: {
      "Telephony": toTelephonySettings,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface TelephonySettings {
  InboundCalling: boolean;
  OutboundCalling: boolean;
  SMS: boolean;
}
function fromTelephonySettings(input?: TelephonySettings | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    InboundCalling: input["InboundCalling"],
    OutboundCalling: input["OutboundCalling"],
    SMS: input["SMS"],
  }
}
function toTelephonySettings(root: jsonP.JSONValue): TelephonySettings {
  return jsonP.readObj({
    required: {
      "InboundCalling": "b",
      "OutboundCalling": "b",
      "SMS": "b",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface PhoneNumberError {
  PhoneNumberId?: string | null;
  ErrorCode?: ErrorCode | null;
  ErrorMessage?: string | null;
}
function toPhoneNumberError(root: jsonP.JSONValue): PhoneNumberError {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumberId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 10 - tags: output, named, enum
export type ErrorCode =
| "BadRequest"
| "Conflict"
| "Forbidden"
| "NotFound"
| "PreconditionFailed"
| "ResourceLimitExceeded"
| "ServiceFailure"
| "AccessDenied"
| "ServiceUnavailable"
| "Throttled"
| "Throttling"
| "Unauthorized"
| "Unprocessable"
| "VoiceConnectorGroupAssociationsExist"
| "PhoneNumberAssociationsExist"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface Attendee {
  ExternalUserId?: string | null;
  AttendeeId?: string | null;
  JoinToken?: string | null;
}
function toAttendee(root: jsonP.JSONValue): Attendee {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExternalUserId": "s",
      "AttendeeId": "s",
      "JoinToken": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CreateAttendeeError {
  ExternalUserId?: string | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toCreateAttendeeError(root: jsonP.JSONValue): CreateAttendeeError {
  return jsonP.readObj({
    required: {},
    optional: {
      "ExternalUserId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MemberError {
  MemberId?: string | null;
  ErrorCode?: ErrorCode | null;
  ErrorMessage?: string | null;
}
function toMemberError(root: jsonP.JSONValue): MemberError {
  return jsonP.readObj({
    required: {},
    optional: {
      "MemberId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface UserError {
  UserId?: string | null;
  ErrorCode?: ErrorCode | null;
  ErrorMessage?: string | null;
}
function toUserError(root: jsonP.JSONValue): UserError {
  return jsonP.readObj({
    required: {},
    optional: {
      "UserId": "s",
      "ErrorCode": (x: jsonP.JSONValue) => cmnP.readEnum<ErrorCode>(x),
      "ErrorMessage": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Account {
  AwsAccountId: string;
  AccountId: string;
  Name: string;
  AccountType?: AccountType | null;
  CreatedTimestamp?: Date | number | null;
  DefaultLicense?: License | null;
  SupportedLicenses?: License[] | null;
  SigninDelegateGroups?: SigninDelegateGroup[] | null;
}
function toAccount(root: jsonP.JSONValue): Account {
  return jsonP.readObj({
    required: {
      "AwsAccountId": "s",
      "AccountId": "s",
      "Name": "s",
    },
    optional: {
      "AccountType": (x: jsonP.JSONValue) => cmnP.readEnum<AccountType>(x),
      "CreatedTimestamp": "d",
      "DefaultLicense": (x: jsonP.JSONValue) => cmnP.readEnum<License>(x),
      "SupportedLicenses": [(x: jsonP.JSONValue) => cmnP.readEnum<License>(x)],
      "SigninDelegateGroups": [toSigninDelegateGroup],
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type AccountType =
| "Team"
| "EnterpriseDirectory"
| "EnterpriseLWA"
| "EnterpriseOIDC"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface Bot {
  BotId?: string | null;
  UserId?: string | null;
  DisplayName?: string | null;
  BotType?: BotType | null;
  Disabled?: boolean | null;
  CreatedTimestamp?: Date | number | null;
  UpdatedTimestamp?: Date | number | null;
  BotEmail?: string | null;
  SecurityToken?: string | null;
}
function toBot(root: jsonP.JSONValue): Bot {
  return jsonP.readObj({
    required: {},
    optional: {
      "BotId": "s",
      "UserId": "s",
      "DisplayName": "s",
      "BotType": (x: jsonP.JSONValue) => cmnP.readEnum<BotType>(x),
      "Disabled": "b",
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
      "BotEmail": "s",
      "SecurityToken": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type BotType =
| "ChatBot"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface Meeting {
  MeetingId?: string | null;
  ExternalMeetingId?: string | null;
  MediaPlacement?: MediaPlacement | null;
  MediaRegion?: string | null;
}
function toMeeting(root: jsonP.JSONValue): Meeting {
  return jsonP.readObj({
    required: {},
    optional: {
      "MeetingId": "s",
      "ExternalMeetingId": "s",
      "MediaPlacement": toMediaPlacement,
      "MediaRegion": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface MediaPlacement {
  AudioHostUrl?: string | null;
  AudioFallbackUrl?: string | null;
  ScreenDataUrl?: string | null;
  ScreenSharingUrl?: string | null;
  ScreenViewingUrl?: string | null;
  SignalingUrl?: string | null;
  TurnControlUrl?: string | null;
}
function toMediaPlacement(root: jsonP.JSONValue): MediaPlacement {
  return jsonP.readObj({
    required: {},
    optional: {
      "AudioHostUrl": "s",
      "AudioFallbackUrl": "s",
      "ScreenDataUrl": "s",
      "ScreenSharingUrl": "s",
      "ScreenViewingUrl": "s",
      "SignalingUrl": "s",
      "TurnControlUrl": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface PhoneNumberOrder {
  PhoneNumberOrderId?: string | null;
  ProductType?: PhoneNumberProductType | null;
  Status?: PhoneNumberOrderStatus | null;
  OrderedPhoneNumbers?: OrderedPhoneNumber[] | null;
  CreatedTimestamp?: Date | number | null;
  UpdatedTimestamp?: Date | number | null;
}
function toPhoneNumberOrder(root: jsonP.JSONValue): PhoneNumberOrder {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumberOrderId": "s",
      "ProductType": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberProductType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberOrderStatus>(x),
      "OrderedPhoneNumbers": [toOrderedPhoneNumber],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type PhoneNumberOrderStatus =
| "Processing"
| "Successful"
| "Failed"
| "Partial"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface OrderedPhoneNumber {
  E164PhoneNumber?: string | null;
  Status?: OrderedPhoneNumberStatus | null;
}
function toOrderedPhoneNumber(root: jsonP.JSONValue): OrderedPhoneNumber {
  return jsonP.readObj({
    required: {},
    optional: {
      "E164PhoneNumber": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<OrderedPhoneNumberStatus>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type OrderedPhoneNumberStatus =
| "Processing"
| "Acquired"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ProxySession {
  VoiceConnectorId?: string | null;
  ProxySessionId?: string | null;
  Name?: string | null;
  Status?: ProxySessionStatus | null;
  ExpiryMinutes?: number | null;
  Capabilities?: Capability[] | null;
  CreatedTimestamp?: Date | number | null;
  UpdatedTimestamp?: Date | number | null;
  EndedTimestamp?: Date | number | null;
  Participants?: Participant[] | null;
  NumberSelectionBehavior?: NumberSelectionBehavior | null;
  GeoMatchLevel?: GeoMatchLevel | null;
  GeoMatchParams?: GeoMatchParams | null;
}
function toProxySession(root: jsonP.JSONValue): ProxySession {
  return jsonP.readObj({
    required: {},
    optional: {
      "VoiceConnectorId": "s",
      "ProxySessionId": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<ProxySessionStatus>(x),
      "ExpiryMinutes": "n",
      "Capabilities": [(x: jsonP.JSONValue) => cmnP.readEnum<Capability>(x)],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
      "EndedTimestamp": "d",
      "Participants": [toParticipant],
      "NumberSelectionBehavior": (x: jsonP.JSONValue) => cmnP.readEnum<NumberSelectionBehavior>(x),
      "GeoMatchLevel": (x: jsonP.JSONValue) => cmnP.readEnum<GeoMatchLevel>(x),
      "GeoMatchParams": toGeoMatchParams,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Participant {
  PhoneNumber?: string | null;
  ProxyPhoneNumber?: string | null;
}
function toParticipant(root: jsonP.JSONValue): Participant {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumber": "s",
      "ProxyPhoneNumber": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface Room {
  RoomId?: string | null;
  Name?: string | null;
  AccountId?: string | null;
  CreatedBy?: string | null;
  CreatedTimestamp?: Date | number | null;
  UpdatedTimestamp?: Date | number | null;
}
function toRoom(root: jsonP.JSONValue): Room {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomId": "s",
      "Name": "s",
      "AccountId": "s",
      "CreatedBy": "s",
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface RoomMembership {
  RoomId?: string | null;
  Member?: Member | null;
  Role?: RoomMembershipRole | null;
  InvitedBy?: string | null;
  UpdatedTimestamp?: Date | number | null;
}
function toRoomMembership(root: jsonP.JSONValue): RoomMembership {
  return jsonP.readObj({
    required: {},
    optional: {
      "RoomId": "s",
      "Member": toMember,
      "Role": (x: jsonP.JSONValue) => cmnP.readEnum<RoomMembershipRole>(x),
      "InvitedBy": "s",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Member {
  MemberId?: string | null;
  MemberType?: MemberType | null;
  Email?: string | null;
  FullName?: string | null;
  AccountId?: string | null;
}
function toMember(root: jsonP.JSONValue): Member {
  return jsonP.readObj({
    required: {},
    optional: {
      "MemberId": "s",
      "MemberType": (x: jsonP.JSONValue) => cmnP.readEnum<MemberType>(x),
      "Email": "s",
      "FullName": "s",
      "AccountId": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type MemberType =
| "User"
| "Bot"
| "Webhook"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: output, named, interface
export interface User {
  UserId: string;
  AccountId?: string | null;
  PrimaryEmail?: string | null;
  PrimaryProvisionedNumber?: string | null;
  DisplayName?: string | null;
  LicenseType?: License | null;
  UserType?: UserType | null;
  UserRegistrationStatus?: RegistrationStatus | null;
  UserInvitationStatus?: InviteStatus | null;
  RegisteredOn?: Date | number | null;
  InvitedOn?: Date | number | null;
  AlexaForBusinessMetadata?: AlexaForBusinessMetadata | null;
  PersonalPIN?: string | null;
}
function toUser(root: jsonP.JSONValue): User {
  return jsonP.readObj({
    required: {
      "UserId": "s",
    },
    optional: {
      "AccountId": "s",
      "PrimaryEmail": "s",
      "PrimaryProvisionedNumber": "s",
      "DisplayName": "s",
      "LicenseType": (x: jsonP.JSONValue) => cmnP.readEnum<License>(x),
      "UserType": (x: jsonP.JSONValue) => cmnP.readEnum<UserType>(x),
      "UserRegistrationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<RegistrationStatus>(x),
      "UserInvitationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<InviteStatus>(x),
      "RegisteredOn": "d",
      "InvitedOn": "d",
      "AlexaForBusinessMetadata": toAlexaForBusinessMetadata,
      "PersonalPIN": "s",
    },
  }, root);
}

// refs: 5 - tags: output, named, enum
export type RegistrationStatus =
| "Unregistered"
| "Registered"
| "Suspended"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: output, named, enum
export type InviteStatus =
| "Pending"
| "Accepted"
| "Failed"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface VoiceConnector {
  VoiceConnectorId?: string | null;
  AwsRegion?: VoiceConnectorAwsRegion | null;
  Name?: string | null;
  OutboundHostName?: string | null;
  RequireEncryption?: boolean | null;
  CreatedTimestamp?: Date | number | null;
  UpdatedTimestamp?: Date | number | null;
}
function toVoiceConnector(root: jsonP.JSONValue): VoiceConnector {
  return jsonP.readObj({
    required: {},
    optional: {
      "VoiceConnectorId": "s",
      "AwsRegion": (x: jsonP.JSONValue) => cmnP.readEnum<VoiceConnectorAwsRegion>(x),
      "Name": "s",
      "OutboundHostName": "s",
      "RequireEncryption": "b",
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface VoiceConnectorGroup {
  VoiceConnectorGroupId?: string | null;
  Name?: string | null;
  VoiceConnectorItems?: VoiceConnectorItem[] | null;
  CreatedTimestamp?: Date | number | null;
  UpdatedTimestamp?: Date | number | null;
}
function toVoiceConnectorGroup(root: jsonP.JSONValue): VoiceConnectorGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "VoiceConnectorGroupId": "s",
      "Name": "s",
      "VoiceConnectorItems": [toVoiceConnectorItem],
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface EventsConfiguration {
  BotId?: string | null;
  OutboundEventsHTTPSEndpoint?: string | null;
  LambdaFunctionArn?: string | null;
}
function toEventsConfiguration(root: jsonP.JSONValue): EventsConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "BotId": "s",
      "OutboundEventsHTTPSEndpoint": "s",
      "LambdaFunctionArn": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface PhoneNumber {
  PhoneNumberId?: string | null;
  E164PhoneNumber?: string | null;
  Type?: PhoneNumberType | null;
  ProductType?: PhoneNumberProductType | null;
  Status?: PhoneNumberStatus | null;
  Capabilities?: PhoneNumberCapabilities | null;
  Associations?: PhoneNumberAssociation[] | null;
  CallingName?: string | null;
  CallingNameStatus?: CallingNameStatus | null;
  CreatedTimestamp?: Date | number | null;
  UpdatedTimestamp?: Date | number | null;
  DeletionTimestamp?: Date | number | null;
}
function toPhoneNumber(root: jsonP.JSONValue): PhoneNumber {
  return jsonP.readObj({
    required: {},
    optional: {
      "PhoneNumberId": "s",
      "E164PhoneNumber": "s",
      "Type": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberType>(x),
      "ProductType": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberProductType>(x),
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberStatus>(x),
      "Capabilities": toPhoneNumberCapabilities,
      "Associations": [toPhoneNumberAssociation],
      "CallingName": "s",
      "CallingNameStatus": (x: jsonP.JSONValue) => cmnP.readEnum<CallingNameStatus>(x),
      "CreatedTimestamp": "d",
      "UpdatedTimestamp": "d",
      "DeletionTimestamp": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type PhoneNumberType =
| "Local"
| "TollFree"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface PhoneNumberCapabilities {
  InboundCall?: boolean | null;
  OutboundCall?: boolean | null;
  InboundSMS?: boolean | null;
  OutboundSMS?: boolean | null;
  InboundMMS?: boolean | null;
  OutboundMMS?: boolean | null;
}
function toPhoneNumberCapabilities(root: jsonP.JSONValue): PhoneNumberCapabilities {
  return jsonP.readObj({
    required: {},
    optional: {
      "InboundCall": "b",
      "OutboundCall": "b",
      "InboundSMS": "b",
      "OutboundSMS": "b",
      "InboundMMS": "b",
      "OutboundMMS": "b",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface PhoneNumberAssociation {
  Value?: string | null;
  Name?: PhoneNumberAssociationName | null;
  AssociatedTimestamp?: Date | number | null;
}
function toPhoneNumberAssociation(root: jsonP.JSONValue): PhoneNumberAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
      "Name": (x: jsonP.JSONValue) => cmnP.readEnum<PhoneNumberAssociationName>(x),
      "AssociatedTimestamp": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type CallingNameStatus =
| "Unassigned"
| "UpdateInProgress"
| "UpdateSucceeded"
| "UpdateFailed"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface Proxy {
  DefaultSessionExpiryMinutes?: number | null;
  Disabled?: boolean | null;
  FallBackPhoneNumber?: string | null;
  PhoneNumberCountries?: string[] | null;
}
function toProxy(root: jsonP.JSONValue): Proxy {
  return jsonP.readObj({
    required: {},
    optional: {
      "DefaultSessionExpiryMinutes": "n",
      "Disabled": "b",
      "FallBackPhoneNumber": "s",
      "PhoneNumberCountries": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TerminationHealth {
  Timestamp?: Date | number | null;
  Source?: string | null;
}
function toTerminationHealth(root: jsonP.JSONValue): TerminationHealth {
  return jsonP.readObj({
    required: {},
    optional: {
      "Timestamp": "d",
      "Source": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Invite {
  InviteId?: string | null;
  Status?: InviteStatus | null;
  EmailAddress?: string | null;
  EmailStatus?: EmailStatus | null;
}
function toInvite(root: jsonP.JSONValue): Invite {
  return jsonP.readObj({
    required: {},
    optional: {
      "InviteId": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<InviteStatus>(x),
      "EmailAddress": "s",
      "EmailStatus": (x: jsonP.JSONValue) => cmnP.readEnum<EmailStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EmailStatus =
| "NotSent"
| "Sent"
| "Failed"
| cmnP.UnexpectedEnumValue;
