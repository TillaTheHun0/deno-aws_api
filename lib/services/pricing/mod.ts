// Autogenerated API client for: AWS Price List Service

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export class Pricing {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Pricing.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2017-10-15",
    "endpointPrefix": "api.pricing",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "AWS Pricing",
    "serviceFullName": "AWS Price List Service",
    "serviceId": "Pricing",
    "signatureVersion": "v4",
    "signingName": "pricing",
    "targetPrefix": "AWSPriceListService",
    "uid": "pricing-2017-10-15"
  };

  async describeServices(
    params: s.DescribeServicesRequest = {},
  ): Promise<s.DescribeServicesResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      FormatVersion: params["FormatVersion"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      body,
      action: "DescribeServices",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Services": [toService],
        "FormatVersion": "s",
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getAttributeValues(
    params: s.GetAttributeValuesRequest,
  ): Promise<s.GetAttributeValuesResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      AttributeName: params["AttributeName"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      body,
      action: "GetAttributeValues",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AttributeValues": [toAttributeValue],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async getProducts(
    params: s.GetProductsRequest = {},
  ): Promise<s.GetProductsResponse> {
    const body: jsonP.JSONObject = {
      ServiceCode: params["ServiceCode"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      FormatVersion: params["FormatVersion"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      body,
      action: "GetProducts",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "FormatVersion": "s",
        "PriceList": [jsonP.readJsonValue],
        "NextToken": "s",
      },
    }, await resp.json());
  }

}

function fromFilter(input?: s.Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Type: input["Type"],
    Field: input["Field"],
    Value: input["Value"],
  }
}

function toService(root: jsonP.JSONValue): s.Service {
  return jsonP.readObj({
    required: {},
    optional: {
      "ServiceCode": "s",
      "AttributeNames": ["s"],
    },
  }, root);
}

function toAttributeValue(root: jsonP.JSONValue): s.AttributeValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "Value": "s",
    },
  }, root);
}
