// Autogenerated API client for: AWS Cloud9

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class Cloud9 {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Cloud9.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-09-23",
    "endpointPrefix": "cloud9",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS Cloud9",
    "serviceId": "Cloud9",
    "signatureVersion": "v4",
    "targetPrefix": "AWSCloud9WorkspaceManagementService",
    "uid": "cloud9-2017-09-23"
  };

  async createEnvironmentEC2(
    {abortSignal, ...params}: RequestConfig & CreateEnvironmentEC2Request,
  ): Promise<CreateEnvironmentEC2Result> {
    const body: JSONObject = {...params,
    tags: params["tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEnvironmentEC2",
    });
    return prt.readObj({
      required: {},
      optional: {
        "environmentId": "s",
      },
    }, await resp.json());
  }

  async createEnvironmentMembership(
    {abortSignal, ...params}: RequestConfig & CreateEnvironmentMembershipRequest,
  ): Promise<CreateEnvironmentMembershipResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateEnvironmentMembership",
    });
    return prt.readObj({
      required: {},
      optional: {
        "membership": toEnvironmentMember,
      },
    }, await resp.json());
  }

  async deleteEnvironment(
    {abortSignal, ...params}: RequestConfig & DeleteEnvironmentRequest,
  ): Promise<DeleteEnvironmentResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEnvironment",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEnvironmentMembership(
    {abortSignal, ...params}: RequestConfig & DeleteEnvironmentMembershipRequest,
  ): Promise<DeleteEnvironmentMembershipResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEnvironmentMembership",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeEnvironmentMemberships(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentMembershipsRequest = {},
  ): Promise<DescribeEnvironmentMembershipsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironmentMemberships",
    });
    return prt.readObj({
      required: {},
      optional: {
        "memberships": [toEnvironmentMember],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async describeEnvironmentStatus(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentStatusRequest,
  ): Promise<DescribeEnvironmentStatusResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironmentStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "status": toEnvironmentStatus,
        "message": "s",
      },
    }, await resp.json());
  }

  async describeEnvironments(
    {abortSignal, ...params}: RequestConfig & DescribeEnvironmentsRequest,
  ): Promise<DescribeEnvironmentsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeEnvironments",
    });
    return prt.readObj({
      required: {},
      optional: {
        "environments": [toEnvironment],
      },
    }, await resp.json());
  }

  async listEnvironments(
    {abortSignal, ...params}: RequestConfig & ListEnvironmentsRequest = {},
  ): Promise<ListEnvironmentsResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListEnvironments",
    });
    return prt.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "environmentIds": ["s"],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateEnvironment(
    {abortSignal, ...params}: RequestConfig & UpdateEnvironmentRequest,
  ): Promise<UpdateEnvironmentResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEnvironment",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateEnvironmentMembership(
    {abortSignal, ...params}: RequestConfig & UpdateEnvironmentMembershipRequest,
  ): Promise<UpdateEnvironmentMembershipResult> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEnvironmentMembership",
    });
    return prt.readObj({
      required: {},
      optional: {
        "membership": toEnvironmentMember,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateEnvironmentEC2Request {
  name: string;
  description?: string | null;
  clientRequestToken?: string | null;
  instanceType: string;
  subnetId?: string | null;
  automaticStopTimeMinutes?: number | null;
  ownerArn?: string | null;
  tags?: Tag[] | null;
  connectionType?: ConnectionType | null;
}

// refs: 1 - tags: named, input
export interface CreateEnvironmentMembershipRequest {
  environmentId: string;
  userArn: string;
  permissions: MemberPermissions;
}

// refs: 1 - tags: named, input
export interface DeleteEnvironmentRequest {
  environmentId: string;
}

// refs: 1 - tags: named, input
export interface DeleteEnvironmentMembershipRequest {
  environmentId: string;
  userArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentMembershipsRequest {
  userArn?: string | null;
  environmentId?: string | null;
  permissions?: Permissions[] | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentStatusRequest {
  environmentId: string;
}

// refs: 1 - tags: named, input
export interface DescribeEnvironmentsRequest {
  environmentIds: string[];
}

// refs: 1 - tags: named, input
export interface ListEnvironmentsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceARN: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceARN: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceARN: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateEnvironmentRequest {
  environmentId: string;
  name?: string | null;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateEnvironmentMembershipRequest {
  environmentId: string;
  userArn: string;
  permissions: MemberPermissions;
}

// refs: 1 - tags: named, output
export interface CreateEnvironmentEC2Result {
  environmentId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateEnvironmentMembershipResult {
  membership?: EnvironmentMember | null;
}

// refs: 1 - tags: named, output
export interface DeleteEnvironmentResult {
}

// refs: 1 - tags: named, output
export interface DeleteEnvironmentMembershipResult {
}

// refs: 1 - tags: named, output
export interface DescribeEnvironmentMembershipsResult {
  memberships?: EnvironmentMember[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEnvironmentStatusResult {
  status?: EnvironmentStatus | null;
  message?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEnvironmentsResult {
  environments?: Environment[] | null;
}

// refs: 1 - tags: named, output
export interface ListEnvironmentsResult {
  nextToken?: string | null;
  environmentIds?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateEnvironmentResult {
}

// refs: 1 - tags: named, output
export interface UpdateEnvironmentMembershipResult {
  membership?: EnvironmentMember | null;
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ConnectionType =
| "CONNECT_SSH"
| "CONNECT_SSM"
;

function toConnectionType(root: JSONValue): ConnectionType | null {
  return ( false
    || root == "CONNECT_SSH"
    || root == "CONNECT_SSM"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum
export type MemberPermissions =
| "read-write"
| "read-only"
;


// refs: 4 - tags: input, named, enum, output
export type Permissions =
| "owner"
| "read-write"
| "read-only"
;

function toPermissions(root: JSONValue): Permissions | null {
  return ( false
    || root == "owner"
    || root == "read-write"
    || root == "read-only"
  ) ? root : null;
}

// refs: 3 - tags: output, named, interface
export interface EnvironmentMember {
  permissions?: Permissions | null;
  userId?: string | null;
  userArn?: string | null;
  environmentId?: string | null;
  lastAccess?: Date | number | null;
}
function toEnvironmentMember(root: JSONValue): EnvironmentMember {
  return prt.readObj({
    required: {},
    optional: {
      "permissions": toPermissions,
      "userId": "s",
      "userArn": "s",
      "environmentId": "s",
      "lastAccess": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EnvironmentStatus =
| "error"
| "creating"
| "connecting"
| "ready"
| "stopping"
| "stopped"
| "deleting"
;
function toEnvironmentStatus(root: JSONValue): EnvironmentStatus | null {
  return ( false
    || root == "error"
    || root == "creating"
    || root == "connecting"
    || root == "ready"
    || root == "stopping"
    || root == "stopped"
    || root == "deleting"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Environment {
  id?: string | null;
  name?: string | null;
  description?: string | null;
  type?: EnvironmentType | null;
  connectionType?: ConnectionType | null;
  arn?: string | null;
  ownerArn?: string | null;
  lifecycle?: EnvironmentLifecycle | null;
}
function toEnvironment(root: JSONValue): Environment {
  return prt.readObj({
    required: {},
    optional: {
      "id": "s",
      "name": "s",
      "description": "s",
      "type": toEnvironmentType,
      "connectionType": toConnectionType,
      "arn": "s",
      "ownerArn": "s",
      "lifecycle": toEnvironmentLifecycle,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EnvironmentType =
| "ssh"
| "ec2"
;
function toEnvironmentType(root: JSONValue): EnvironmentType | null {
  return ( false
    || root == "ssh"
    || root == "ec2"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface EnvironmentLifecycle {
  status?: EnvironmentLifecycleStatus | null;
  reason?: string | null;
  failureResource?: string | null;
}
function toEnvironmentLifecycle(root: JSONValue): EnvironmentLifecycle {
  return prt.readObj({
    required: {},
    optional: {
      "status": toEnvironmentLifecycleStatus,
      "reason": "s",
      "failureResource": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type EnvironmentLifecycleStatus =
| "CREATING"
| "CREATED"
| "CREATE_FAILED"
| "DELETING"
| "DELETE_FAILED"
;
function toEnvironmentLifecycleStatus(root: JSONValue): EnvironmentLifecycleStatus | null {
  return ( false
    || root == "CREATING"
    || root == "CREATED"
    || root == "CREATE_FAILED"
    || root == "DELETING"
    || root == "DELETE_FAILED"
  ) ? root : null;
}
