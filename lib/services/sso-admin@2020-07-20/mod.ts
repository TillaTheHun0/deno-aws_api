// Autogenerated API client for: AWS Single Sign-On Admin

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class SSOAdmin {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SSOAdmin.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-07-20",
    "endpointPrefix": "sso",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "SSO Admin",
    "serviceFullName": "AWS Single Sign-On Admin",
    "serviceId": "SSO Admin",
    "signatureVersion": "v4",
    "signingName": "sso",
    "targetPrefix": "SWBExternalService",
    "uid": "sso-admin-2020-07-20"
  };

  async attachManagedPolicyToPermissionSet(
    {abortSignal, ...params}: RequestConfig & AttachManagedPolicyToPermissionSetRequest,
  ): Promise<AttachManagedPolicyToPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachManagedPolicyToPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAccountAssignment(
    {abortSignal, ...params}: RequestConfig & CreateAccountAssignmentRequest,
  ): Promise<CreateAccountAssignmentResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAccountAssignment",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountAssignmentCreationStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async createPermissionSet(
    {abortSignal, ...params}: RequestConfig & CreatePermissionSetRequest,
  ): Promise<CreatePermissionSetResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PermissionSet": toPermissionSet,
      },
    }, await resp.json());
  }

  async deleteAccountAssignment(
    {abortSignal, ...params}: RequestConfig & DeleteAccountAssignmentRequest,
  ): Promise<DeleteAccountAssignmentResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAccountAssignment",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountAssignmentDeletionStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async deleteInlinePolicyFromPermissionSet(
    {abortSignal, ...params}: RequestConfig & DeleteInlinePolicyFromPermissionSetRequest,
  ): Promise<DeleteInlinePolicyFromPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteInlinePolicyFromPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deletePermissionSet(
    {abortSignal, ...params}: RequestConfig & DeletePermissionSetRequest,
  ): Promise<DeletePermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAccountAssignmentCreationStatus(
    {abortSignal, ...params}: RequestConfig & DescribeAccountAssignmentCreationStatusRequest,
  ): Promise<DescribeAccountAssignmentCreationStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountAssignmentCreationStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountAssignmentCreationStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async describeAccountAssignmentDeletionStatus(
    {abortSignal, ...params}: RequestConfig & DescribeAccountAssignmentDeletionStatusRequest,
  ): Promise<DescribeAccountAssignmentDeletionStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAccountAssignmentDeletionStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountAssignmentDeletionStatus": toAccountAssignmentOperationStatus,
      },
    }, await resp.json());
  }

  async describePermissionSet(
    {abortSignal, ...params}: RequestConfig & DescribePermissionSetRequest,
  ): Promise<DescribePermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PermissionSet": toPermissionSet,
      },
    }, await resp.json());
  }

  async describePermissionSetProvisioningStatus(
    {abortSignal, ...params}: RequestConfig & DescribePermissionSetProvisioningStatusRequest,
  ): Promise<DescribePermissionSetProvisioningStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribePermissionSetProvisioningStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PermissionSetProvisioningStatus": toPermissionSetProvisioningStatus,
      },
    }, await resp.json());
  }

  async detachManagedPolicyFromPermissionSet(
    {abortSignal, ...params}: RequestConfig & DetachManagedPolicyFromPermissionSetRequest,
  ): Promise<DetachManagedPolicyFromPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachManagedPolicyFromPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getInlinePolicyForPermissionSet(
    {abortSignal, ...params}: RequestConfig & GetInlinePolicyForPermissionSetRequest,
  ): Promise<GetInlinePolicyForPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetInlinePolicyForPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "InlinePolicy": "s",
      },
    }, await resp.json());
  }

  async listAccountAssignmentCreationStatus(
    {abortSignal, ...params}: RequestConfig & ListAccountAssignmentCreationStatusRequest,
  ): Promise<ListAccountAssignmentCreationStatusResponse> {
    const body: JSONObject = {...params,
    Filter: fromOperationStatusFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountAssignmentCreationStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountAssignmentsCreationStatus": [toAccountAssignmentOperationStatusMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountAssignmentDeletionStatus(
    {abortSignal, ...params}: RequestConfig & ListAccountAssignmentDeletionStatusRequest,
  ): Promise<ListAccountAssignmentDeletionStatusResponse> {
    const body: JSONObject = {...params,
    Filter: fromOperationStatusFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountAssignmentDeletionStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountAssignmentsDeletionStatus": [toAccountAssignmentOperationStatusMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountAssignments(
    {abortSignal, ...params}: RequestConfig & ListAccountAssignmentsRequest,
  ): Promise<ListAccountAssignmentsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountAssignments",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountAssignments": [toAccountAssignment],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listAccountsForProvisionedPermissionSet(
    {abortSignal, ...params}: RequestConfig & ListAccountsForProvisionedPermissionSetRequest,
  ): Promise<ListAccountsForProvisionedPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAccountsForProvisionedPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AccountIds": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listInstances(
    {abortSignal, ...params}: RequestConfig & ListInstancesRequest = {},
  ): Promise<ListInstancesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListInstances",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Instances": [toInstanceMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listManagedPoliciesInPermissionSet(
    {abortSignal, ...params}: RequestConfig & ListManagedPoliciesInPermissionSetRequest,
  ): Promise<ListManagedPoliciesInPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListManagedPoliciesInPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AttachedManagedPolicies": [toAttachedManagedPolicy],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissionSetProvisioningStatus(
    {abortSignal, ...params}: RequestConfig & ListPermissionSetProvisioningStatusRequest,
  ): Promise<ListPermissionSetProvisioningStatusResponse> {
    const body: JSONObject = {...params,
    Filter: fromOperationStatusFilter(params["Filter"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissionSetProvisioningStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PermissionSetsProvisioningStatus": [toPermissionSetProvisioningStatusMetadata],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissionSets(
    {abortSignal, ...params}: RequestConfig & ListPermissionSetsRequest,
  ): Promise<ListPermissionSetsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissionSets",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PermissionSets": ["s"],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissionSetsProvisionedToAccount(
    {abortSignal, ...params}: RequestConfig & ListPermissionSetsProvisionedToAccountRequest,
  ): Promise<ListPermissionSetsProvisionedToAccountResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissionSetsProvisionedToAccount",
    });
    return prt.readObj({
      required: {},
      optional: {
        "NextToken": "s",
        "PermissionSets": ["s"],
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async provisionPermissionSet(
    {abortSignal, ...params}: RequestConfig & ProvisionPermissionSetRequest,
  ): Promise<ProvisionPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ProvisionPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PermissionSetProvisioningStatus": toPermissionSetProvisioningStatus,
      },
    }, await resp.json());
  }

  async putInlinePolicyToPermissionSet(
    {abortSignal, ...params}: RequestConfig & PutInlinePolicyToPermissionSetRequest,
  ): Promise<PutInlinePolicyToPermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutInlinePolicyToPermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updatePermissionSet(
    {abortSignal, ...params}: RequestConfig & UpdatePermissionSetRequest,
  ): Promise<UpdatePermissionSetResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdatePermissionSet",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AttachManagedPolicyToPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
  ManagedPolicyArn: string;
}

// refs: 1 - tags: named, input
export interface CreateAccountAssignmentRequest {
  InstanceArn: string;
  TargetId: string;
  TargetType: TargetType;
  PermissionSetArn: string;
  PrincipalType: PrincipalType;
  PrincipalId: string;
}

// refs: 1 - tags: named, input
export interface CreatePermissionSetRequest {
  Name: string;
  Description?: string | null;
  InstanceArn: string;
  SessionDuration?: string | null;
  RelayState?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteAccountAssignmentRequest {
  InstanceArn: string;
  TargetId: string;
  TargetType: TargetType;
  PermissionSetArn: string;
  PrincipalType: PrincipalType;
  PrincipalId: string;
}

// refs: 1 - tags: named, input
export interface DeleteInlinePolicyFromPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
}

// refs: 1 - tags: named, input
export interface DeletePermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeAccountAssignmentCreationStatusRequest {
  InstanceArn: string;
  AccountAssignmentCreationRequestId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAccountAssignmentDeletionStatusRequest {
  InstanceArn: string;
  AccountAssignmentDeletionRequestId: string;
}

// refs: 1 - tags: named, input
export interface DescribePermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
}

// refs: 1 - tags: named, input
export interface DescribePermissionSetProvisioningStatusRequest {
  InstanceArn: string;
  ProvisionPermissionSetRequestId: string;
}

// refs: 1 - tags: named, input
export interface DetachManagedPolicyFromPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
  ManagedPolicyArn: string;
}

// refs: 1 - tags: named, input
export interface GetInlinePolicyForPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
}

// refs: 1 - tags: named, input
export interface ListAccountAssignmentCreationStatusRequest {
  InstanceArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filter?: OperationStatusFilter | null;
}

// refs: 1 - tags: named, input
export interface ListAccountAssignmentDeletionStatusRequest {
  InstanceArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filter?: OperationStatusFilter | null;
}

// refs: 1 - tags: named, input
export interface ListAccountAssignmentsRequest {
  InstanceArn: string;
  AccountId: string;
  PermissionSetArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAccountsForProvisionedPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
  ProvisioningStatus?: ProvisioningStatus | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListInstancesRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListManagedPoliciesInPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListPermissionSetProvisioningStatusRequest {
  InstanceArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
  Filter?: OperationStatusFilter | null;
}

// refs: 1 - tags: named, input
export interface ListPermissionSetsRequest {
  InstanceArn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListPermissionSetsProvisionedToAccountRequest {
  InstanceArn: string;
  AccountId: string;
  ProvisioningStatus?: ProvisioningStatus | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  InstanceArn: string;
  ResourceArn: string;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ProvisionPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
  TargetId?: string | null;
  TargetType: ProvisionTargetType;
}

// refs: 1 - tags: named, input
export interface PutInlinePolicyToPermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
  InlinePolicy: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  InstanceArn: string;
  ResourceArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  InstanceArn: string;
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdatePermissionSetRequest {
  InstanceArn: string;
  PermissionSetArn: string;
  Description?: string | null;
  SessionDuration?: string | null;
  RelayState?: string | null;
}

// refs: 1 - tags: named, output
export interface AttachManagedPolicyToPermissionSetResponse {
}

// refs: 1 - tags: named, output
export interface CreateAccountAssignmentResponse {
  AccountAssignmentCreationStatus?: AccountAssignmentOperationStatus | null;
}

// refs: 1 - tags: named, output
export interface CreatePermissionSetResponse {
  PermissionSet?: PermissionSet | null;
}

// refs: 1 - tags: named, output
export interface DeleteAccountAssignmentResponse {
  AccountAssignmentDeletionStatus?: AccountAssignmentOperationStatus | null;
}

// refs: 1 - tags: named, output
export interface DeleteInlinePolicyFromPermissionSetResponse {
}

// refs: 1 - tags: named, output
export interface DeletePermissionSetResponse {
}

// refs: 1 - tags: named, output
export interface DescribeAccountAssignmentCreationStatusResponse {
  AccountAssignmentCreationStatus?: AccountAssignmentOperationStatus | null;
}

// refs: 1 - tags: named, output
export interface DescribeAccountAssignmentDeletionStatusResponse {
  AccountAssignmentDeletionStatus?: AccountAssignmentOperationStatus | null;
}

// refs: 1 - tags: named, output
export interface DescribePermissionSetResponse {
  PermissionSet?: PermissionSet | null;
}

// refs: 1 - tags: named, output
export interface DescribePermissionSetProvisioningStatusResponse {
  PermissionSetProvisioningStatus?: PermissionSetProvisioningStatus | null;
}

// refs: 1 - tags: named, output
export interface DetachManagedPolicyFromPermissionSetResponse {
}

// refs: 1 - tags: named, output
export interface GetInlinePolicyForPermissionSetResponse {
  InlinePolicy?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAccountAssignmentCreationStatusResponse {
  AccountAssignmentsCreationStatus?: AccountAssignmentOperationStatusMetadata[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAccountAssignmentDeletionStatusResponse {
  AccountAssignmentsDeletionStatus?: AccountAssignmentOperationStatusMetadata[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAccountAssignmentsResponse {
  AccountAssignments?: AccountAssignment[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAccountsForProvisionedPermissionSetResponse {
  AccountIds?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListInstancesResponse {
  Instances?: InstanceMetadata[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListManagedPoliciesInPermissionSetResponse {
  AttachedManagedPolicies?: AttachedManagedPolicy[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPermissionSetProvisioningStatusResponse {
  PermissionSetsProvisioningStatus?: PermissionSetProvisioningStatusMetadata[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPermissionSetsResponse {
  PermissionSets?: string[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPermissionSetsProvisionedToAccountResponse {
  NextToken?: string | null;
  PermissionSets?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ProvisionPermissionSetResponse {
  PermissionSetProvisioningStatus?: PermissionSetProvisioningStatus | null;
}

// refs: 1 - tags: named, output
export interface PutInlinePolicyToPermissionSetResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdatePermissionSetResponse {
}

// refs: 6 - tags: input, named, enum, output
export type TargetType =
| "AWS_ACCOUNT"
;

function toTargetType(root: JSONValue): TargetType | null {
  return ( false
    || root == "AWS_ACCOUNT"
  ) ? root : null;
}

// refs: 7 - tags: input, named, enum, output
export type PrincipalType =
| "USER"
| "GROUP"
;

function toPrincipalType(root: JSONValue): PrincipalType | null {
  return ( false
    || root == "USER"
    || root == "GROUP"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key?: string | null;
  Value?: string | null;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface
export interface OperationStatusFilter {
  Status?: StatusValues | null;
}
function fromOperationStatusFilter(input?: OperationStatusFilter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 12 - tags: input, named, enum, output
export type StatusValues =
| "IN_PROGRESS"
| "FAILED"
| "SUCCEEDED"
;

function toStatusValues(root: JSONValue): StatusValues | null {
  return ( false
    || root == "IN_PROGRESS"
    || root == "FAILED"
    || root == "SUCCEEDED"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum
export type ProvisioningStatus =
| "LATEST_PERMISSION_SET_PROVISIONED"
| "LATEST_PERMISSION_SET_NOT_PROVISIONED"
;


// refs: 1 - tags: input, named, enum
export type ProvisionTargetType =
| "AWS_ACCOUNT"
| "ALL_PROVISIONED_ACCOUNTS"
;


// refs: 4 - tags: output, named, interface
export interface AccountAssignmentOperationStatus {
  Status?: StatusValues | null;
  RequestId?: string | null;
  FailureReason?: string | null;
  TargetId?: string | null;
  TargetType?: TargetType | null;
  PermissionSetArn?: string | null;
  PrincipalType?: PrincipalType | null;
  PrincipalId?: string | null;
  CreatedDate?: Date | number | null;
}
function toAccountAssignmentOperationStatus(root: JSONValue): AccountAssignmentOperationStatus {
  return prt.readObj({
    required: {},
    optional: {
      "Status": toStatusValues,
      "RequestId": "s",
      "FailureReason": "s",
      "TargetId": "s",
      "TargetType": toTargetType,
      "PermissionSetArn": "s",
      "PrincipalType": toPrincipalType,
      "PrincipalId": "s",
      "CreatedDate": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PermissionSet {
  Name?: string | null;
  PermissionSetArn?: string | null;
  Description?: string | null;
  CreatedDate?: Date | number | null;
  SessionDuration?: string | null;
  RelayState?: string | null;
}
function toPermissionSet(root: JSONValue): PermissionSet {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "PermissionSetArn": "s",
      "Description": "s",
      "CreatedDate": "d",
      "SessionDuration": "s",
      "RelayState": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface PermissionSetProvisioningStatus {
  Status?: StatusValues | null;
  RequestId?: string | null;
  AccountId?: string | null;
  PermissionSetArn?: string | null;
  FailureReason?: string | null;
  CreatedDate?: Date | number | null;
}
function toPermissionSetProvisioningStatus(root: JSONValue): PermissionSetProvisioningStatus {
  return prt.readObj({
    required: {},
    optional: {
      "Status": toStatusValues,
      "RequestId": "s",
      "AccountId": "s",
      "PermissionSetArn": "s",
      "FailureReason": "s",
      "CreatedDate": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AccountAssignmentOperationStatusMetadata {
  Status?: StatusValues | null;
  RequestId?: string | null;
  CreatedDate?: Date | number | null;
}
function toAccountAssignmentOperationStatusMetadata(root: JSONValue): AccountAssignmentOperationStatusMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "Status": toStatusValues,
      "RequestId": "s",
      "CreatedDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AccountAssignment {
  AccountId?: string | null;
  PermissionSetArn?: string | null;
  PrincipalType?: PrincipalType | null;
  PrincipalId?: string | null;
}
function toAccountAssignment(root: JSONValue): AccountAssignment {
  return prt.readObj({
    required: {},
    optional: {
      "AccountId": "s",
      "PermissionSetArn": "s",
      "PrincipalType": toPrincipalType,
      "PrincipalId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface InstanceMetadata {
  InstanceArn?: string | null;
  IdentityStoreId?: string | null;
}
function toInstanceMetadata(root: JSONValue): InstanceMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "InstanceArn": "s",
      "IdentityStoreId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AttachedManagedPolicy {
  Name?: string | null;
  Arn?: string | null;
}
function toAttachedManagedPolicy(root: JSONValue): AttachedManagedPolicy {
  return prt.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PermissionSetProvisioningStatusMetadata {
  Status?: StatusValues | null;
  RequestId?: string | null;
  CreatedDate?: Date | number | null;
}
function toPermissionSetProvisioningStatusMetadata(root: JSONValue): PermissionSetProvisioningStatusMetadata {
  return prt.readObj({
    required: {},
    optional: {
      "Status": toStatusValues,
      "RequestId": "s",
      "CreatedDate": "d",
    },
  }, root);
}
