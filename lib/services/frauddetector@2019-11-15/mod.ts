// Autogenerated API client for: Amazon Fraud Detector

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class FraudDetector {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(FraudDetector.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-11-15",
    "endpointPrefix": "frauddetector",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Fraud Detector",
    "serviceId": "FraudDetector",
    "signatureVersion": "v4",
    "targetPrefix": "AWSHawksNestServiceFacade",
    "uid": "frauddetector-2019-11-15"
  };

  async batchCreateVariable(
    {abortSignal, ...params}: RequestConfig & BatchCreateVariableRequest,
  ): Promise<BatchCreateVariableResult> {
    const body: jsonP.JSONObject = {
      variableEntries: params["variableEntries"]?.map(x => fromVariableEntry(x)),
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchCreateVariable",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "errors": [toBatchCreateVariableError],
      },
    }, await resp.json());
  }

  async batchGetVariable(
    {abortSignal, ...params}: RequestConfig & BatchGetVariableRequest,
  ): Promise<BatchGetVariableResult> {
    const body: jsonP.JSONObject = {
      names: params["names"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "BatchGetVariable",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "variables": [toVariable],
        "errors": [toBatchGetVariableError],
      },
    }, await resp.json());
  }

  async createDetectorVersion(
    {abortSignal, ...params}: RequestConfig & CreateDetectorVersionRequest,
  ): Promise<CreateDetectorVersionResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      description: params["description"],
      externalModelEndpoints: params["externalModelEndpoints"],
      rules: params["rules"]?.map(x => fromRule(x)),
      modelVersions: params["modelVersions"]?.map(x => fromModelVersion(x)),
      ruleExecutionMode: params["ruleExecutionMode"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDetectorVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "detectorId": "s",
        "detectorVersionId": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<DetectorVersionStatus>(x),
      },
    }, await resp.json());
  }

  async createModel(
    {abortSignal, ...params}: RequestConfig & CreateModelRequest,
  ): Promise<CreateModelResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      description: params["description"],
      eventTypeName: params["eventTypeName"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateModel",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createModelVersion(
    {abortSignal, ...params}: RequestConfig & CreateModelVersionRequest,
  ): Promise<CreateModelVersionResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      trainingDataSource: params["trainingDataSource"],
      trainingDataSchema: fromTrainingDataSchema(params["trainingDataSchema"]),
      externalEventsDetail: fromExternalEventsDetail(params["externalEventsDetail"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateModelVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "modelId": "s",
        "modelType": (x: jsonP.JSONValue) => cmnP.readEnum<ModelTypeEnum>(x),
        "modelVersionNumber": "s",
        "status": "s",
      },
    }, await resp.json());
  }

  async createRule(
    {abortSignal, ...params}: RequestConfig & CreateRuleRequest,
  ): Promise<CreateRuleResult> {
    const body: jsonP.JSONObject = {
      ruleId: params["ruleId"],
      detectorId: params["detectorId"],
      description: params["description"],
      expression: params["expression"],
      language: params["language"],
      outcomes: params["outcomes"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "rule": toRule,
      },
    }, await resp.json());
  }

  async createVariable(
    {abortSignal, ...params}: RequestConfig & CreateVariableRequest,
  ): Promise<CreateVariableResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      dataType: params["dataType"],
      dataSource: params["dataSource"],
      defaultValue: params["defaultValue"],
      description: params["description"],
      variableType: params["variableType"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateVariable",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDetector(
    {abortSignal, ...params}: RequestConfig & DeleteDetectorRequest,
  ): Promise<DeleteDetectorResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDetector",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteDetectorVersion(
    {abortSignal, ...params}: RequestConfig & DeleteDetectorVersionRequest,
  ): Promise<DeleteDetectorVersionResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      detectorVersionId: params["detectorVersionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDetectorVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEntityType(
    {abortSignal, ...params}: RequestConfig & DeleteEntityTypeRequest,
  ): Promise<DeleteEntityTypeResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEntityType",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEvent(
    {abortSignal, ...params}: RequestConfig & DeleteEventRequest,
  ): Promise<DeleteEventResult> {
    const body: jsonP.JSONObject = {
      eventId: params["eventId"],
      eventTypeName: params["eventTypeName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEvent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteEventType(
    {abortSignal, ...params}: RequestConfig & DeleteEventTypeRequest,
  ): Promise<DeleteEventTypeResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteEventType",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteExternalModel(
    {abortSignal, ...params}: RequestConfig & DeleteExternalModelRequest,
  ): Promise<DeleteExternalModelResult> {
    const body: jsonP.JSONObject = {
      modelEndpoint: params["modelEndpoint"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteExternalModel",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLabel(
    {abortSignal, ...params}: RequestConfig & DeleteLabelRequest,
  ): Promise<DeleteLabelResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLabel",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteModel(
    {abortSignal, ...params}: RequestConfig & DeleteModelRequest,
  ): Promise<DeleteModelResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteModel",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteModelVersion(
    {abortSignal, ...params}: RequestConfig & DeleteModelVersionRequest,
  ): Promise<DeleteModelVersionResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      modelVersionNumber: params["modelVersionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteModelVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteOutcome(
    {abortSignal, ...params}: RequestConfig & DeleteOutcomeRequest,
  ): Promise<DeleteOutcomeResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteOutcome",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteRule(
    {abortSignal, ...params}: RequestConfig & DeleteRuleRequest,
  ): Promise<DeleteRuleResult> {
    const body: jsonP.JSONObject = {
      rule: fromRule(params["rule"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteRule",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteVariable(
    {abortSignal, ...params}: RequestConfig & DeleteVariableRequest,
  ): Promise<DeleteVariableResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteVariable",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeDetector(
    {abortSignal, ...params}: RequestConfig & DescribeDetectorRequest,
  ): Promise<DescribeDetectorResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDetector",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "detectorId": "s",
        "detectorVersionSummaries": [toDetectorVersionSummary],
        "nextToken": "s",
        "arn": "s",
      },
    }, await resp.json());
  }

  async describeModelVersions(
    {abortSignal, ...params}: RequestConfig & DescribeModelVersionsRequest = {},
  ): Promise<DescribeModelVersionsResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelVersionNumber: params["modelVersionNumber"],
      modelType: params["modelType"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeModelVersions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "modelVersionDetails": [toModelVersionDetail],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getDetectorVersion(
    {abortSignal, ...params}: RequestConfig & GetDetectorVersionRequest,
  ): Promise<GetDetectorVersionResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      detectorVersionId: params["detectorVersionId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDetectorVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "detectorId": "s",
        "detectorVersionId": "s",
        "description": "s",
        "externalModelEndpoints": ["s"],
        "modelVersions": [toModelVersion],
        "rules": [toRule],
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<DetectorVersionStatus>(x),
        "lastUpdatedTime": "s",
        "createdTime": "s",
        "ruleExecutionMode": (x: jsonP.JSONValue) => cmnP.readEnum<RuleExecutionMode>(x),
        "arn": "s",
      },
    }, await resp.json());
  }

  async getDetectors(
    {abortSignal, ...params}: RequestConfig & GetDetectorsRequest = {},
  ): Promise<GetDetectorsResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetDetectors",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "detectors": [toDetector],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEntityTypes(
    {abortSignal, ...params}: RequestConfig & GetEntityTypesRequest = {},
  ): Promise<GetEntityTypesResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEntityTypes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "entityTypes": [toEntityType],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getEventPrediction(
    {abortSignal, ...params}: RequestConfig & GetEventPredictionRequest,
  ): Promise<GetEventPredictionResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      detectorVersionId: params["detectorVersionId"],
      eventId: params["eventId"],
      eventTypeName: params["eventTypeName"],
      entities: params["entities"]?.map(x => fromEntity(x)),
      eventTimestamp: params["eventTimestamp"],
      eventVariables: params["eventVariables"],
      externalModelEndpointDataBlobs: jsonP.serializeMap(params["externalModelEndpointDataBlobs"], x => fromModelEndpointDataBlob(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEventPrediction",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "modelScores": [toModelScores],
        "ruleResults": [toRuleResult],
      },
    }, await resp.json());
  }

  async getEventTypes(
    {abortSignal, ...params}: RequestConfig & GetEventTypesRequest = {},
  ): Promise<GetEventTypesResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetEventTypes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "eventTypes": [toEventType],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getExternalModels(
    {abortSignal, ...params}: RequestConfig & GetExternalModelsRequest = {},
  ): Promise<GetExternalModelsResult> {
    const body: jsonP.JSONObject = {
      modelEndpoint: params["modelEndpoint"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetExternalModels",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "externalModels": [toExternalModel],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getKMSEncryptionKey(
    {abortSignal, ...params}: RequestConfig = {},
  ): Promise<GetKMSEncryptionKeyResult> {
    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetKMSEncryptionKey",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "kmsKey": toKMSKey,
      },
    }, await resp.json());
  }

  async getLabels(
    {abortSignal, ...params}: RequestConfig & GetLabelsRequest = {},
  ): Promise<GetLabelsResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLabels",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "labels": [toLabel],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getModelVersion(
    {abortSignal, ...params}: RequestConfig & GetModelVersionRequest,
  ): Promise<GetModelVersionResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      modelVersionNumber: params["modelVersionNumber"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetModelVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "modelId": "s",
        "modelType": (x: jsonP.JSONValue) => cmnP.readEnum<ModelTypeEnum>(x),
        "modelVersionNumber": "s",
        "trainingDataSource": (x: jsonP.JSONValue) => cmnP.readEnum<TrainingDataSourceEnum>(x),
        "trainingDataSchema": toTrainingDataSchema,
        "externalEventsDetail": toExternalEventsDetail,
        "status": "s",
        "arn": "s",
      },
    }, await resp.json());
  }

  async getModels(
    {abortSignal, ...params}: RequestConfig & GetModelsRequest = {},
  ): Promise<GetModelsResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetModels",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "nextToken": "s",
        "models": [toModel],
      },
    }, await resp.json());
  }

  async getOutcomes(
    {abortSignal, ...params}: RequestConfig & GetOutcomesRequest = {},
  ): Promise<GetOutcomesResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetOutcomes",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "outcomes": [toOutcome],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getRules(
    {abortSignal, ...params}: RequestConfig & GetRulesRequest,
  ): Promise<GetRulesResult> {
    const body: jsonP.JSONObject = {
      ruleId: params["ruleId"],
      detectorId: params["detectorId"],
      ruleVersion: params["ruleVersion"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRules",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ruleDetails": [toRuleDetail],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async getVariables(
    {abortSignal, ...params}: RequestConfig & GetVariablesRequest = {},
  ): Promise<GetVariablesResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetVariables",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "variables": [toVariable],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResult> {
    const body: jsonP.JSONObject = {
      resourceARN: params["resourceARN"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": [toTag],
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async putDetector(
    {abortSignal, ...params}: RequestConfig & PutDetectorRequest,
  ): Promise<PutDetectorResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      description: params["description"],
      eventTypeName: params["eventTypeName"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutDetector",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEntityType(
    {abortSignal, ...params}: RequestConfig & PutEntityTypeRequest,
  ): Promise<PutEntityTypeResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEntityType",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putEventType(
    {abortSignal, ...params}: RequestConfig & PutEventTypeRequest,
  ): Promise<PutEventTypeResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      eventVariables: params["eventVariables"],
      labels: params["labels"],
      entityTypes: params["entityTypes"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEventType",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putExternalModel(
    {abortSignal, ...params}: RequestConfig & PutExternalModelRequest,
  ): Promise<PutExternalModelResult> {
    const body: jsonP.JSONObject = {
      modelEndpoint: params["modelEndpoint"],
      modelSource: params["modelSource"],
      invokeModelEndpointRoleArn: params["invokeModelEndpointRoleArn"],
      inputConfiguration: fromModelInputConfiguration(params["inputConfiguration"]),
      outputConfiguration: fromModelOutputConfiguration(params["outputConfiguration"]),
      modelEndpointStatus: params["modelEndpointStatus"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutExternalModel",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putKMSEncryptionKey(
    {abortSignal, ...params}: RequestConfig & PutKMSEncryptionKeyRequest,
  ): Promise<PutKMSEncryptionKeyResult> {
    const body: jsonP.JSONObject = {
      kmsEncryptionKeyArn: params["kmsEncryptionKeyArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutKMSEncryptionKey",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putLabel(
    {abortSignal, ...params}: RequestConfig & PutLabelRequest,
  ): Promise<PutLabelResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutLabel",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async putOutcome(
    {abortSignal, ...params}: RequestConfig & PutOutcomeRequest,
  ): Promise<PutOutcomeResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      description: params["description"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutOutcome",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResult> {
    const body: jsonP.JSONObject = {
      resourceARN: params["resourceARN"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResult> {
    const body: jsonP.JSONObject = {
      resourceARN: params["resourceARN"],
      tagKeys: params["tagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDetectorVersion(
    {abortSignal, ...params}: RequestConfig & UpdateDetectorVersionRequest,
  ): Promise<UpdateDetectorVersionResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      detectorVersionId: params["detectorVersionId"],
      externalModelEndpoints: params["externalModelEndpoints"],
      rules: params["rules"]?.map(x => fromRule(x)),
      description: params["description"],
      modelVersions: params["modelVersions"]?.map(x => fromModelVersion(x)),
      ruleExecutionMode: params["ruleExecutionMode"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDetectorVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDetectorVersionMetadata(
    {abortSignal, ...params}: RequestConfig & UpdateDetectorVersionMetadataRequest,
  ): Promise<UpdateDetectorVersionMetadataResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      detectorVersionId: params["detectorVersionId"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDetectorVersionMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDetectorVersionStatus(
    {abortSignal, ...params}: RequestConfig & UpdateDetectorVersionStatusRequest,
  ): Promise<UpdateDetectorVersionStatusResult> {
    const body: jsonP.JSONObject = {
      detectorId: params["detectorId"],
      detectorVersionId: params["detectorVersionId"],
      status: params["status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDetectorVersionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateModel(
    {abortSignal, ...params}: RequestConfig & UpdateModelRequest,
  ): Promise<UpdateModelResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateModel",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateModelVersion(
    {abortSignal, ...params}: RequestConfig & UpdateModelVersionRequest,
  ): Promise<UpdateModelVersionResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      majorVersionNumber: params["majorVersionNumber"],
      externalEventsDetail: fromExternalEventsDetail(params["externalEventsDetail"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateModelVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "modelId": "s",
        "modelType": (x: jsonP.JSONValue) => cmnP.readEnum<ModelTypeEnum>(x),
        "modelVersionNumber": "s",
        "status": "s",
      },
    }, await resp.json());
  }

  async updateModelVersionStatus(
    {abortSignal, ...params}: RequestConfig & UpdateModelVersionStatusRequest,
  ): Promise<UpdateModelVersionStatusResult> {
    const body: jsonP.JSONObject = {
      modelId: params["modelId"],
      modelType: params["modelType"],
      modelVersionNumber: params["modelVersionNumber"],
      status: params["status"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateModelVersionStatus",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRuleMetadata(
    {abortSignal, ...params}: RequestConfig & UpdateRuleMetadataRequest,
  ): Promise<UpdateRuleMetadataResult> {
    const body: jsonP.JSONObject = {
      rule: fromRule(params["rule"]),
      description: params["description"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRuleMetadata",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateRuleVersion(
    {abortSignal, ...params}: RequestConfig & UpdateRuleVersionRequest,
  ): Promise<UpdateRuleVersionResult> {
    const body: jsonP.JSONObject = {
      rule: fromRule(params["rule"]),
      description: params["description"],
      expression: params["expression"],
      language: params["language"],
      outcomes: params["outcomes"],
      tags: params["tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRuleVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "rule": toRule,
      },
    }, await resp.json());
  }

  async updateVariable(
    {abortSignal, ...params}: RequestConfig & UpdateVariableRequest,
  ): Promise<UpdateVariableResult> {
    const body: jsonP.JSONObject = {
      name: params["name"],
      defaultValue: params["defaultValue"],
      description: params["description"],
      variableType: params["variableType"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateVariable",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface BatchCreateVariableRequest {
  variableEntries: VariableEntry[];
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface BatchGetVariableRequest {
  names: string[];
}

// refs: 1 - tags: named, input
export interface CreateDetectorVersionRequest {
  detectorId: string;
  description?: string | null;
  externalModelEndpoints?: string[] | null;
  rules: Rule[];
  modelVersions?: ModelVersion[] | null;
  ruleExecutionMode?: RuleExecutionMode | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateModelRequest {
  modelId: string;
  modelType: ModelTypeEnum;
  description?: string | null;
  eventTypeName: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateModelVersionRequest {
  modelId: string;
  modelType: ModelTypeEnum;
  trainingDataSource: TrainingDataSourceEnum;
  trainingDataSchema: TrainingDataSchema;
  externalEventsDetail?: ExternalEventsDetail | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateRuleRequest {
  ruleId: string;
  detectorId: string;
  description?: string | null;
  expression: string;
  language: Language;
  outcomes: string[];
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateVariableRequest {
  name: string;
  dataType: DataType;
  dataSource: DataSource;
  defaultValue: string;
  description?: string | null;
  variableType?: string | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteDetectorRequest {
  detectorId: string;
}

// refs: 1 - tags: named, input
export interface DeleteDetectorVersionRequest {
  detectorId: string;
  detectorVersionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteEntityTypeRequest {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeleteEventRequest {
  eventId: string;
  eventTypeName: string;
}

// refs: 1 - tags: named, input
export interface DeleteEventTypeRequest {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeleteExternalModelRequest {
  modelEndpoint: string;
}

// refs: 1 - tags: named, input
export interface DeleteLabelRequest {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeleteModelRequest {
  modelId: string;
  modelType: ModelTypeEnum;
}

// refs: 1 - tags: named, input
export interface DeleteModelVersionRequest {
  modelId: string;
  modelType: ModelTypeEnum;
  modelVersionNumber: string;
}

// refs: 1 - tags: named, input
export interface DeleteOutcomeRequest {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeleteRuleRequest {
  rule: Rule;
}

// refs: 1 - tags: named, input
export interface DeleteVariableRequest {
  name: string;
}

// refs: 1 - tags: named, input
export interface DescribeDetectorRequest {
  detectorId: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeModelVersionsRequest {
  modelId?: string | null;
  modelVersionNumber?: string | null;
  modelType?: ModelTypeEnum | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetDetectorVersionRequest {
  detectorId: string;
  detectorVersionId: string;
}

// refs: 1 - tags: named, input
export interface GetDetectorsRequest {
  detectorId?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetEntityTypesRequest {
  name?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetEventPredictionRequest {
  detectorId: string;
  detectorVersionId?: string | null;
  eventId: string;
  eventTypeName: string;
  entities: Entity[];
  eventTimestamp: string;
  eventVariables: { [key: string]: string | null | undefined };
  externalModelEndpointDataBlobs?: { [key: string]: ModelEndpointDataBlob | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface GetEventTypesRequest {
  name?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetExternalModelsRequest {
  modelEndpoint?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetLabelsRequest {
  name?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetModelVersionRequest {
  modelId: string;
  modelType: ModelTypeEnum;
  modelVersionNumber: string;
}

// refs: 1 - tags: named, input
export interface GetModelsRequest {
  modelId?: string | null;
  modelType?: ModelTypeEnum | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetOutcomesRequest {
  name?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetRulesRequest {
  ruleId?: string | null;
  detectorId: string;
  ruleVersion?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface GetVariablesRequest {
  name?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceARN: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface PutDetectorRequest {
  detectorId: string;
  description?: string | null;
  eventTypeName: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutEntityTypeRequest {
  name: string;
  description?: string | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutEventTypeRequest {
  name: string;
  description?: string | null;
  eventVariables: string[];
  labels?: string[] | null;
  entityTypes: string[];
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutExternalModelRequest {
  modelEndpoint: string;
  modelSource: ModelSource;
  invokeModelEndpointRoleArn: string;
  inputConfiguration: ModelInputConfiguration;
  outputConfiguration: ModelOutputConfiguration;
  modelEndpointStatus: ModelEndpointStatus;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutKMSEncryptionKeyRequest {
  kmsEncryptionKeyArn: string;
}

// refs: 1 - tags: named, input
export interface PutLabelRequest {
  name: string;
  description?: string | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface PutOutcomeRequest {
  name: string;
  description?: string | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceARN: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceARN: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDetectorVersionRequest {
  detectorId: string;
  detectorVersionId: string;
  externalModelEndpoints: string[];
  rules: Rule[];
  description?: string | null;
  modelVersions?: ModelVersion[] | null;
  ruleExecutionMode?: RuleExecutionMode | null;
}

// refs: 1 - tags: named, input
export interface UpdateDetectorVersionMetadataRequest {
  detectorId: string;
  detectorVersionId: string;
  description: string;
}

// refs: 1 - tags: named, input
export interface UpdateDetectorVersionStatusRequest {
  detectorId: string;
  detectorVersionId: string;
  status: DetectorVersionStatus;
}

// refs: 1 - tags: named, input
export interface UpdateModelRequest {
  modelId: string;
  modelType: ModelTypeEnum;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateModelVersionRequest {
  modelId: string;
  modelType: ModelTypeEnum;
  majorVersionNumber: string;
  externalEventsDetail?: ExternalEventsDetail | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateModelVersionStatusRequest {
  modelId: string;
  modelType: ModelTypeEnum;
  modelVersionNumber: string;
  status: ModelVersionStatus;
}

// refs: 1 - tags: named, input
export interface UpdateRuleMetadataRequest {
  rule: Rule;
  description: string;
}

// refs: 1 - tags: named, input
export interface UpdateRuleVersionRequest {
  rule: Rule;
  description?: string | null;
  expression: string;
  language: Language;
  outcomes: string[];
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface UpdateVariableRequest {
  name: string;
  defaultValue?: string | null;
  description?: string | null;
  variableType?: string | null;
}

// refs: 1 - tags: named, output
export interface BatchCreateVariableResult {
  errors?: BatchCreateVariableError[] | null;
}

// refs: 1 - tags: named, output
export interface BatchGetVariableResult {
  variables?: Variable[] | null;
  errors?: BatchGetVariableError[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDetectorVersionResult {
  detectorId?: string | null;
  detectorVersionId?: string | null;
  status?: DetectorVersionStatus | null;
}

// refs: 1 - tags: named, output
export interface CreateModelResult {
}

// refs: 1 - tags: named, output
export interface CreateModelVersionResult {
  modelId?: string | null;
  modelType?: ModelTypeEnum | null;
  modelVersionNumber?: string | null;
  status?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateRuleResult {
  rule?: Rule | null;
}

// refs: 1 - tags: named, output
export interface CreateVariableResult {
}

// refs: 1 - tags: named, output
export interface DeleteDetectorResult {
}

// refs: 1 - tags: named, output
export interface DeleteDetectorVersionResult {
}

// refs: 1 - tags: named, output
export interface DeleteEntityTypeResult {
}

// refs: 1 - tags: named, output
export interface DeleteEventResult {
}

// refs: 1 - tags: named, output
export interface DeleteEventTypeResult {
}

// refs: 1 - tags: named, output
export interface DeleteExternalModelResult {
}

// refs: 1 - tags: named, output
export interface DeleteLabelResult {
}

// refs: 1 - tags: named, output
export interface DeleteModelResult {
}

// refs: 1 - tags: named, output
export interface DeleteModelVersionResult {
}

// refs: 1 - tags: named, output
export interface DeleteOutcomeResult {
}

// refs: 1 - tags: named, output
export interface DeleteRuleResult {
}

// refs: 1 - tags: named, output
export interface DeleteVariableResult {
}

// refs: 1 - tags: named, output
export interface DescribeDetectorResult {
  detectorId?: string | null;
  detectorVersionSummaries?: DetectorVersionSummary[] | null;
  nextToken?: string | null;
  arn?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeModelVersionsResult {
  modelVersionDetails?: ModelVersionDetail[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDetectorVersionResult {
  detectorId?: string | null;
  detectorVersionId?: string | null;
  description?: string | null;
  externalModelEndpoints?: string[] | null;
  modelVersions?: ModelVersion[] | null;
  rules?: Rule[] | null;
  status?: DetectorVersionStatus | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  ruleExecutionMode?: RuleExecutionMode | null;
  arn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetDetectorsResult {
  detectors?: Detector[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetEntityTypesResult {
  entityTypes?: EntityType[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetEventPredictionResult {
  modelScores?: ModelScores[] | null;
  ruleResults?: RuleResult[] | null;
}

// refs: 1 - tags: named, output
export interface GetEventTypesResult {
  eventTypes?: EventType[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetExternalModelsResult {
  externalModels?: ExternalModel[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetKMSEncryptionKeyResult {
  kmsKey?: KMSKey | null;
}

// refs: 1 - tags: named, output
export interface GetLabelsResult {
  labels?: Label[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetModelVersionResult {
  modelId?: string | null;
  modelType?: ModelTypeEnum | null;
  modelVersionNumber?: string | null;
  trainingDataSource?: TrainingDataSourceEnum | null;
  trainingDataSchema?: TrainingDataSchema | null;
  externalEventsDetail?: ExternalEventsDetail | null;
  status?: string | null;
  arn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetModelsResult {
  nextToken?: string | null;
  models?: Model[] | null;
}

// refs: 1 - tags: named, output
export interface GetOutcomesResult {
  outcomes?: Outcome[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRulesResult {
  ruleDetails?: RuleDetail[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface GetVariablesResult {
  variables?: Variable[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResult {
  tags?: Tag[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface PutDetectorResult {
}

// refs: 1 - tags: named, output
export interface PutEntityTypeResult {
}

// refs: 1 - tags: named, output
export interface PutEventTypeResult {
}

// refs: 1 - tags: named, output
export interface PutExternalModelResult {
}

// refs: 1 - tags: named, output
export interface PutKMSEncryptionKeyResult {
}

// refs: 1 - tags: named, output
export interface PutLabelResult {
}

// refs: 1 - tags: named, output
export interface PutOutcomeResult {
}

// refs: 1 - tags: named, output
export interface TagResourceResult {
}

// refs: 1 - tags: named, output
export interface UntagResourceResult {
}

// refs: 1 - tags: named, output
export interface UpdateDetectorVersionResult {
}

// refs: 1 - tags: named, output
export interface UpdateDetectorVersionMetadataResult {
}

// refs: 1 - tags: named, output
export interface UpdateDetectorVersionStatusResult {
}

// refs: 1 - tags: named, output
export interface UpdateModelResult {
}

// refs: 1 - tags: named, output
export interface UpdateModelVersionResult {
  modelId?: string | null;
  modelType?: ModelTypeEnum | null;
  modelVersionNumber?: string | null;
  status?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateModelVersionStatusResult {
}

// refs: 1 - tags: named, output
export interface UpdateRuleMetadataResult {
}

// refs: 1 - tags: named, output
export interface UpdateRuleVersionResult {
  rule?: Rule | null;
}

// refs: 1 - tags: named, output
export interface UpdateVariableResult {
}

// refs: 1 - tags: input, named, interface
export interface VariableEntry {
  name?: string | null;
  dataType?: string | null;
  dataSource?: string | null;
  defaultValue?: string | null;
  description?: string | null;
  variableType?: string | null;
}
function fromVariableEntry(input?: VariableEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    dataType: input["dataType"],
    dataSource: input["dataSource"],
    defaultValue: input["defaultValue"],
    description: input["description"],
    variableType: input["variableType"],
  }
}

// refs: 16 - tags: input, named, interface, output
export interface Tag {
  key: string;
  value: string;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "key": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 8 - tags: input, named, interface, output
export interface Rule {
  detectorId: string;
  ruleId: string;
  ruleVersion: string;
}
function fromRule(input?: Rule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    detectorId: input["detectorId"],
    ruleId: input["ruleId"],
    ruleVersion: input["ruleVersion"],
  }
}
function toRule(root: jsonP.JSONValue): Rule {
  return jsonP.readObj({
    required: {
      "detectorId": "s",
      "ruleId": "s",
      "ruleVersion": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ModelVersion {
  modelId: string;
  modelType: ModelTypeEnum;
  modelVersionNumber: string;
  arn?: string | null;
}
function fromModelVersion(input?: ModelVersion | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    modelId: input["modelId"],
    modelType: input["modelType"],
    modelVersionNumber: input["modelVersionNumber"],
    arn: input["arn"],
  }
}
function toModelVersion(root: jsonP.JSONValue): ModelVersion {
  return jsonP.readObj({
    required: {
      "modelId": "s",
      "modelType": (x: jsonP.JSONValue) => cmnP.readEnum<ModelTypeEnum>(x),
      "modelVersionNumber": "s",
    },
    optional: {
      "arn": "s",
    },
  }, root);
}

// refs: 19 - tags: input, named, enum, output
export type ModelTypeEnum =
| "ONLINE_FRAUD_INSIGHTS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type RuleExecutionMode =
| "ALL_MATCHED"
| "FIRST_MATCHED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type TrainingDataSourceEnum =
| "EXTERNAL_EVENTS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface TrainingDataSchema {
  modelVariables: string[];
  labelSchema: LabelSchema;
}
function fromTrainingDataSchema(input?: TrainingDataSchema | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    modelVariables: input["modelVariables"],
    labelSchema: fromLabelSchema(input["labelSchema"]),
  }
}
function toTrainingDataSchema(root: jsonP.JSONValue): TrainingDataSchema {
  return jsonP.readObj({
    required: {
      "modelVariables": ["s"],
      "labelSchema": toLabelSchema,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface LabelSchema {
  labelMapper: { [key: string]: string[] | null | undefined };
}
function fromLabelSchema(input?: LabelSchema | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    labelMapper: input["labelMapper"],
  }
}
function toLabelSchema(root: jsonP.JSONValue): LabelSchema {
  return jsonP.readObj({
    required: {
      "labelMapper": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ExternalEventsDetail {
  dataLocation: string;
  dataAccessRoleArn: string;
}
function fromExternalEventsDetail(input?: ExternalEventsDetail | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dataLocation: input["dataLocation"],
    dataAccessRoleArn: input["dataAccessRoleArn"],
  }
}
function toExternalEventsDetail(root: jsonP.JSONValue): ExternalEventsDetail {
  return jsonP.readObj({
    required: {
      "dataLocation": "s",
      "dataAccessRoleArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type Language =
| "DETECTORPL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type DataType =
| "STRING"
| "INTEGER"
| "FLOAT"
| "BOOLEAN"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type DataSource =
| "EVENT"
| "MODEL_SCORE"
| "EXTERNAL_MODEL_SCORE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface Entity {
  entityType: string;
  entityId: string;
}
function fromEntity(input?: Entity | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    entityType: input["entityType"],
    entityId: input["entityId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface ModelEndpointDataBlob {
  byteBuffer?: Uint8Array | string | null;
  contentType?: string | null;
}
function fromModelEndpointDataBlob(input?: ModelEndpointDataBlob | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    byteBuffer: jsonP.serializeBlob(input["byteBuffer"]),
    contentType: input["contentType"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type ModelSource =
| "SAGEMAKER"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ModelInputConfiguration {
  eventTypeName?: string | null;
  format?: ModelInputDataFormat | null;
  useEventVariables: boolean;
  jsonInputTemplate?: string | null;
  csvInputTemplate?: string | null;
}
function fromModelInputConfiguration(input?: ModelInputConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventTypeName: input["eventTypeName"],
    format: input["format"],
    useEventVariables: input["useEventVariables"],
    jsonInputTemplate: input["jsonInputTemplate"],
    csvInputTemplate: input["csvInputTemplate"],
  }
}
function toModelInputConfiguration(root: jsonP.JSONValue): ModelInputConfiguration {
  return jsonP.readObj({
    required: {
      "useEventVariables": "b",
    },
    optional: {
      "eventTypeName": "s",
      "format": (x: jsonP.JSONValue) => cmnP.readEnum<ModelInputDataFormat>(x),
      "jsonInputTemplate": "s",
      "csvInputTemplate": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ModelInputDataFormat =
| "TEXT_CSV"
| "APPLICATION_JSON"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ModelOutputConfiguration {
  format: ModelOutputDataFormat;
  jsonKeyToVariableMap?: { [key: string]: string | null | undefined } | null;
  csvIndexToVariableMap?: { [key: string]: string | null | undefined } | null;
}
function fromModelOutputConfiguration(input?: ModelOutputConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    format: input["format"],
    jsonKeyToVariableMap: input["jsonKeyToVariableMap"],
    csvIndexToVariableMap: input["csvIndexToVariableMap"],
  }
}
function toModelOutputConfiguration(root: jsonP.JSONValue): ModelOutputConfiguration {
  return jsonP.readObj({
    required: {
      "format": (x: jsonP.JSONValue) => cmnP.readEnum<ModelOutputDataFormat>(x),
    },
    optional: {
      "jsonKeyToVariableMap": x => jsonP.readMap(String, String, x),
      "csvIndexToVariableMap": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ModelOutputDataFormat =
| "TEXT_CSV"
| "APPLICATION_JSONLINES"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ModelEndpointStatus =
| "ASSOCIATED"
| "DISSOCIATED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type DetectorVersionStatus =
| "DRAFT"
| "ACTIVE"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type ModelVersionStatus =
| "ACTIVE"
| "INACTIVE"
| "TRAINING_CANCELLED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface BatchCreateVariableError {
  name?: string | null;
  code?: number | null;
  message?: string | null;
}
function toBatchCreateVariableError(root: jsonP.JSONValue): BatchCreateVariableError {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "code": "n",
      "message": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Variable {
  name?: string | null;
  dataType?: DataType | null;
  dataSource?: DataSource | null;
  defaultValue?: string | null;
  description?: string | null;
  variableType?: string | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toVariable(root: jsonP.JSONValue): Variable {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "dataType": (x: jsonP.JSONValue) => cmnP.readEnum<DataType>(x),
      "dataSource": (x: jsonP.JSONValue) => cmnP.readEnum<DataSource>(x),
      "defaultValue": "s",
      "description": "s",
      "variableType": "s",
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BatchGetVariableError {
  name?: string | null;
  code?: number | null;
  message?: string | null;
}
function toBatchGetVariableError(root: jsonP.JSONValue): BatchGetVariableError {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "code": "n",
      "message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DetectorVersionSummary {
  detectorVersionId?: string | null;
  status?: DetectorVersionStatus | null;
  description?: string | null;
  lastUpdatedTime?: string | null;
}
function toDetectorVersionSummary(root: jsonP.JSONValue): DetectorVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "detectorVersionId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<DetectorVersionStatus>(x),
      "description": "s",
      "lastUpdatedTime": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ModelVersionDetail {
  modelId?: string | null;
  modelType?: ModelTypeEnum | null;
  modelVersionNumber?: string | null;
  status?: string | null;
  trainingDataSource?: TrainingDataSourceEnum | null;
  trainingDataSchema?: TrainingDataSchema | null;
  externalEventsDetail?: ExternalEventsDetail | null;
  trainingResult?: TrainingResult | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toModelVersionDetail(root: jsonP.JSONValue): ModelVersionDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "modelId": "s",
      "modelType": (x: jsonP.JSONValue) => cmnP.readEnum<ModelTypeEnum>(x),
      "modelVersionNumber": "s",
      "status": "s",
      "trainingDataSource": (x: jsonP.JSONValue) => cmnP.readEnum<TrainingDataSourceEnum>(x),
      "trainingDataSchema": toTrainingDataSchema,
      "externalEventsDetail": toExternalEventsDetail,
      "trainingResult": toTrainingResult,
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrainingResult {
  dataValidationMetrics?: DataValidationMetrics | null;
  trainingMetrics?: TrainingMetrics | null;
}
function toTrainingResult(root: jsonP.JSONValue): TrainingResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "dataValidationMetrics": toDataValidationMetrics,
      "trainingMetrics": toTrainingMetrics,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DataValidationMetrics {
  fileLevelMessages?: FileValidationMessage[] | null;
  fieldLevelMessages?: FieldValidationMessage[] | null;
}
function toDataValidationMetrics(root: jsonP.JSONValue): DataValidationMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "fileLevelMessages": [toFileValidationMessage],
      "fieldLevelMessages": [toFieldValidationMessage],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FileValidationMessage {
  title?: string | null;
  content?: string | null;
  type?: string | null;
}
function toFileValidationMessage(root: jsonP.JSONValue): FileValidationMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "title": "s",
      "content": "s",
      "type": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FieldValidationMessage {
  fieldName?: string | null;
  identifier?: string | null;
  title?: string | null;
  content?: string | null;
  type?: string | null;
}
function toFieldValidationMessage(root: jsonP.JSONValue): FieldValidationMessage {
  return jsonP.readObj({
    required: {},
    optional: {
      "fieldName": "s",
      "identifier": "s",
      "title": "s",
      "content": "s",
      "type": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TrainingMetrics {
  auc?: number | null;
  metricDataPoints?: MetricDataPoint[] | null;
}
function toTrainingMetrics(root: jsonP.JSONValue): TrainingMetrics {
  return jsonP.readObj({
    required: {},
    optional: {
      "auc": "n",
      "metricDataPoints": [toMetricDataPoint],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MetricDataPoint {
  fpr?: number | null;
  precision?: number | null;
  tpr?: number | null;
  threshold?: number | null;
}
function toMetricDataPoint(root: jsonP.JSONValue): MetricDataPoint {
  return jsonP.readObj({
    required: {},
    optional: {
      "fpr": "n",
      "precision": "n",
      "tpr": "n",
      "threshold": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Detector {
  detectorId?: string | null;
  description?: string | null;
  eventTypeName?: string | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toDetector(root: jsonP.JSONValue): Detector {
  return jsonP.readObj({
    required: {},
    optional: {
      "detectorId": "s",
      "description": "s",
      "eventTypeName": "s",
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EntityType {
  name?: string | null;
  description?: string | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toEntityType(root: jsonP.JSONValue): EntityType {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "description": "s",
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ModelScores {
  modelVersion?: ModelVersion | null;
  scores?: { [key: string]: number | null | undefined } | null;
}
function toModelScores(root: jsonP.JSONValue): ModelScores {
  return jsonP.readObj({
    required: {},
    optional: {
      "modelVersion": toModelVersion,
      "scores": x => jsonP.readMap(String, Number, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RuleResult {
  ruleId?: string | null;
  outcomes?: string[] | null;
}
function toRuleResult(root: jsonP.JSONValue): RuleResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "ruleId": "s",
      "outcomes": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EventType {
  name?: string | null;
  description?: string | null;
  eventVariables?: string[] | null;
  labels?: string[] | null;
  entityTypes?: string[] | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toEventType(root: jsonP.JSONValue): EventType {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "description": "s",
      "eventVariables": ["s"],
      "labels": ["s"],
      "entityTypes": ["s"],
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExternalModel {
  modelEndpoint?: string | null;
  modelSource?: ModelSource | null;
  invokeModelEndpointRoleArn?: string | null;
  inputConfiguration?: ModelInputConfiguration | null;
  outputConfiguration?: ModelOutputConfiguration | null;
  modelEndpointStatus?: ModelEndpointStatus | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toExternalModel(root: jsonP.JSONValue): ExternalModel {
  return jsonP.readObj({
    required: {},
    optional: {
      "modelEndpoint": "s",
      "modelSource": (x: jsonP.JSONValue) => cmnP.readEnum<ModelSource>(x),
      "invokeModelEndpointRoleArn": "s",
      "inputConfiguration": toModelInputConfiguration,
      "outputConfiguration": toModelOutputConfiguration,
      "modelEndpointStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ModelEndpointStatus>(x),
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface KMSKey {
  kmsEncryptionKeyArn?: string | null;
}
function toKMSKey(root: jsonP.JSONValue): KMSKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "kmsEncryptionKeyArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Label {
  name?: string | null;
  description?: string | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toLabel(root: jsonP.JSONValue): Label {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "description": "s",
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Model {
  modelId?: string | null;
  modelType?: ModelTypeEnum | null;
  description?: string | null;
  eventTypeName?: string | null;
  createdTime?: string | null;
  lastUpdatedTime?: string | null;
  arn?: string | null;
}
function toModel(root: jsonP.JSONValue): Model {
  return jsonP.readObj({
    required: {},
    optional: {
      "modelId": "s",
      "modelType": (x: jsonP.JSONValue) => cmnP.readEnum<ModelTypeEnum>(x),
      "description": "s",
      "eventTypeName": "s",
      "createdTime": "s",
      "lastUpdatedTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Outcome {
  name?: string | null;
  description?: string | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toOutcome(root: jsonP.JSONValue): Outcome {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "description": "s",
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RuleDetail {
  ruleId?: string | null;
  description?: string | null;
  detectorId?: string | null;
  ruleVersion?: string | null;
  expression?: string | null;
  language?: Language | null;
  outcomes?: string[] | null;
  lastUpdatedTime?: string | null;
  createdTime?: string | null;
  arn?: string | null;
}
function toRuleDetail(root: jsonP.JSONValue): RuleDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "ruleId": "s",
      "description": "s",
      "detectorId": "s",
      "ruleVersion": "s",
      "expression": "s",
      "language": (x: jsonP.JSONValue) => cmnP.readEnum<Language>(x),
      "outcomes": ["s"],
      "lastUpdatedTime": "s",
      "createdTime": "s",
      "arn": "s",
    },
  }, root);
}
