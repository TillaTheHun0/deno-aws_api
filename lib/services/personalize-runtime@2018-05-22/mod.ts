// Autogenerated API client for: Amazon Personalize Runtime

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class PersonalizeRuntime {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(PersonalizeRuntime.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-05-22",
    "endpointPrefix": "personalize-runtime",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Personalize Runtime",
    "serviceId": "Personalize Runtime",
    "signatureVersion": "v4",
    "signingName": "personalize",
    "uid": "personalize-runtime-2018-05-22"
  };

  async getPersonalizedRanking(
    {abortSignal, ...params}: RequestConfig & GetPersonalizedRankingRequest,
  ): Promise<GetPersonalizedRankingResponse> {
    const body: jsonP.JSONObject = {
      campaignArn: params["campaignArn"],
      inputList: params["inputList"],
      userId: params["userId"],
      context: params["context"],
      filterArn: params["filterArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPersonalizedRanking",
      requestUri: "/personalize-ranking",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "personalizedRanking": [toPredictedItem],
        "recommendationId": "s",
      },
    }, await resp.json());
  }

  async getRecommendations(
    {abortSignal, ...params}: RequestConfig & GetRecommendationsRequest,
  ): Promise<GetRecommendationsResponse> {
    const body: jsonP.JSONObject = {
      campaignArn: params["campaignArn"],
      itemId: params["itemId"],
      userId: params["userId"],
      numResults: params["numResults"],
      context: params["context"],
      filterArn: params["filterArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetRecommendations",
      requestUri: "/recommendations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "itemList": [toPredictedItem],
        "recommendationId": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface GetPersonalizedRankingRequest {
  campaignArn: string;
  inputList: string[];
  userId: string;
  context?: { [key: string]: string | null | undefined } | null;
  filterArn?: string | null;
}

// refs: 1 - tags: named, input
export interface GetRecommendationsRequest {
  campaignArn: string;
  itemId?: string | null;
  userId?: string | null;
  numResults?: number | null;
  context?: { [key: string]: string | null | undefined } | null;
  filterArn?: string | null;
}

// refs: 1 - tags: named, output
export interface GetPersonalizedRankingResponse {
  personalizedRanking?: PredictedItem[] | null;
  recommendationId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRecommendationsResponse {
  itemList?: PredictedItem[] | null;
  recommendationId?: string | null;
}

// refs: 2 - tags: output, named, interface
export interface PredictedItem {
  itemId?: string | null;
  score?: number | null;
}
function toPredictedItem(root: jsonP.JSONValue): PredictedItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "itemId": "s",
      "score": "n",
    },
  }, root);
}
