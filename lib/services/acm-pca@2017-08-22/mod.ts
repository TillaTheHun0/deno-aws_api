// Autogenerated API client for: AWS Certificate Manager Private Certificate Authority

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class ACMPCA {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(ACMPCA.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-08-22",
    "endpointPrefix": "acm-pca",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "ACM-PCA",
    "serviceFullName": "AWS Certificate Manager Private Certificate Authority",
    "serviceId": "ACM PCA",
    "signatureVersion": "v4",
    "targetPrefix": "ACMPrivateCA",
    "uid": "acm-pca-2017-08-22"
  };

  async createCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & CreateCertificateAuthorityRequest,
  ): Promise<CreateCertificateAuthorityResponse> {
    const body: JSONObject = {...params,
    CertificateAuthorityConfiguration: fromCertificateAuthorityConfiguration(params["CertificateAuthorityConfiguration"]),
    RevocationConfiguration: fromRevocationConfiguration(params["RevocationConfiguration"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCertificateAuthority",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CertificateAuthorityArn": "s",
      },
    }, await resp.json());
  }

  async createCertificateAuthorityAuditReport(
    {abortSignal, ...params}: RequestConfig & CreateCertificateAuthorityAuditReportRequest,
  ): Promise<CreateCertificateAuthorityAuditReportResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCertificateAuthorityAuditReport",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AuditReportId": "s",
        "S3Key": "s",
      },
    }, await resp.json());
  }

  async createPermission(
    {abortSignal, ...params}: RequestConfig & CreatePermissionRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePermission",
    });
  }

  async deleteCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & DeleteCertificateAuthorityRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCertificateAuthority",
    });
  }

  async deletePermission(
    {abortSignal, ...params}: RequestConfig & DeletePermissionRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePermission",
    });
  }

  async deletePolicy(
    {abortSignal, ...params}: RequestConfig & DeletePolicyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeletePolicy",
    });
  }

  async describeCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & DescribeCertificateAuthorityRequest,
  ): Promise<DescribeCertificateAuthorityResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCertificateAuthority",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CertificateAuthority": toCertificateAuthority,
      },
    }, await resp.json());
  }

  async describeCertificateAuthorityAuditReport(
    {abortSignal, ...params}: RequestConfig & DescribeCertificateAuthorityAuditReportRequest,
  ): Promise<DescribeCertificateAuthorityAuditReportResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCertificateAuthorityAuditReport",
    });
    return prt.readObj({
      required: {},
      optional: {
        "AuditReportStatus": toAuditReportStatus,
        "S3BucketName": "s",
        "S3Key": "s",
        "CreatedAt": "d",
      },
    }, await resp.json());
  }

  async getCertificate(
    {abortSignal, ...params}: RequestConfig & GetCertificateRequest,
  ): Promise<GetCertificateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCertificate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Certificate": "s",
        "CertificateChain": "s",
      },
    }, await resp.json());
  }

  async getCertificateAuthorityCertificate(
    {abortSignal, ...params}: RequestConfig & GetCertificateAuthorityCertificateRequest,
  ): Promise<GetCertificateAuthorityCertificateResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCertificateAuthorityCertificate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Certificate": "s",
        "CertificateChain": "s",
      },
    }, await resp.json());
  }

  async getCertificateAuthorityCsr(
    {abortSignal, ...params}: RequestConfig & GetCertificateAuthorityCsrRequest,
  ): Promise<GetCertificateAuthorityCsrResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCertificateAuthorityCsr",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Csr": "s",
      },
    }, await resp.json());
  }

  async getPolicy(
    {abortSignal, ...params}: RequestConfig & GetPolicyRequest,
  ): Promise<GetPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policy": "s",
      },
    }, await resp.json());
  }

  async importCertificateAuthorityCertificate(
    {abortSignal, ...params}: RequestConfig & ImportCertificateAuthorityCertificateRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    Certificate: prt.serializeBlob(params["Certificate"]),
    CertificateChain: prt.serializeBlob(params["CertificateChain"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportCertificateAuthorityCertificate",
    });
  }

  async issueCertificate(
    {abortSignal, ...params}: RequestConfig & IssueCertificateRequest,
  ): Promise<IssueCertificateResponse> {
    const body: JSONObject = {...params,
    Csr: prt.serializeBlob(params["Csr"]),
    Validity: fromValidity(params["Validity"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "IssueCertificate",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CertificateArn": "s",
      },
    }, await resp.json());
  }

  async listCertificateAuthorities(
    {abortSignal, ...params}: RequestConfig & ListCertificateAuthoritiesRequest = {},
  ): Promise<ListCertificateAuthoritiesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListCertificateAuthorities",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CertificateAuthorities": [toCertificateAuthority],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listPermissions(
    {abortSignal, ...params}: RequestConfig & ListPermissionsRequest,
  ): Promise<ListPermissionsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListPermissions",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Permissions": [toPermission],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & ListTagsRequest,
  ): Promise<ListTagsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTags",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async putPolicy(
    {abortSignal, ...params}: RequestConfig & PutPolicyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPolicy",
    });
  }

  async restoreCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & RestoreCertificateAuthorityRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreCertificateAuthority",
    });
  }

  async revokeCertificate(
    {abortSignal, ...params}: RequestConfig & RevokeCertificateRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RevokeCertificate",
    });
  }

  async tagCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & TagCertificateAuthorityRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagCertificateAuthority",
    });
  }

  async untagCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & UntagCertificateAuthorityRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagCertificateAuthority",
    });
  }

  async updateCertificateAuthority(
    {abortSignal, ...params}: RequestConfig & UpdateCertificateAuthorityRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    RevocationConfiguration: fromRevocationConfiguration(params["RevocationConfiguration"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCertificateAuthority",
    });
  }

  // Resource State Waiters

  /**
   * Wait until a Certificate Authority CSR is created
   * Checks state up to 60 times, 3 seconds apart (about 3 minutes max wait time).
   */
  async waitForCertificateAuthorityCSRCreated(
    params: RequestConfig & GetCertificateAuthorityCsrRequest,
  ): Promise<GetCertificateAuthorityCsrResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state CertificateAuthorityCSRCreated';
    for (let i = 0; i < 60; i++) {
      try {
        const resp = await this.getCertificateAuthorityCsr(params);
        return resp; // for status 200
      } catch (err) {
        if (!["RequestInProgressException"].includes(err.code)) throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /**
   * Wait until a certificate is issued
   * Checks state up to 60 times, 3 seconds apart (about 3 minutes max wait time).
   */
  async waitForCertificateIssued(
    params: RequestConfig & GetCertificateRequest,
  ): Promise<GetCertificateResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state CertificateIssued';
    for (let i = 0; i < 60; i++) {
      try {
        const resp = await this.getCertificate(params);
        return resp; // for status 200
      } catch (err) {
        if (!["RequestInProgressException"].includes(err.code)) throw err;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

  /**
   * Wait until a Audit Report is created
   * Checks state up to 60 times, 3 seconds apart (about 3 minutes max wait time).
   */
  async waitForAuditReportCreated(
    params: RequestConfig & DescribeCertificateAuthorityAuditReportRequest,
  ): Promise<DescribeCertificateAuthorityAuditReportResponse> {
    const errMessage = 'ResourceNotReady: Resource is not in the state AuditReportCreated';
    for (let i = 0; i < 60; i++) {
      const resp = await this.describeCertificateAuthorityAuditReport(params);
      const field = resp["AuditReportStatus"];
      if (field === "SUCCESS") return resp;
      if (field === "FAILED") throw new Error(errMessage);
      await new Promise(r => setTimeout(r, 3000));
    }
    throw new Error(errMessage);
  }

}

// refs: 1 - tags: named, input
export interface CreateCertificateAuthorityRequest {
  CertificateAuthorityConfiguration: CertificateAuthorityConfiguration;
  RevocationConfiguration?: RevocationConfiguration | null;
  CertificateAuthorityType: CertificateAuthorityType;
  IdempotencyToken?: string | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateCertificateAuthorityAuditReportRequest {
  CertificateAuthorityArn: string;
  S3BucketName: string;
  AuditReportResponseFormat: AuditReportResponseFormat;
}

// refs: 1 - tags: named, input
export interface CreatePermissionRequest {
  CertificateAuthorityArn: string;
  Principal: string;
  SourceAccount?: string | null;
  Actions: ActionType[];
}

// refs: 1 - tags: named, input
export interface DeleteCertificateAuthorityRequest {
  CertificateAuthorityArn: string;
  PermanentDeletionTimeInDays?: number | null;
}

// refs: 1 - tags: named, input
export interface DeletePermissionRequest {
  CertificateAuthorityArn: string;
  Principal: string;
  SourceAccount?: string | null;
}

// refs: 1 - tags: named, input
export interface DeletePolicyRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeCertificateAuthorityRequest {
  CertificateAuthorityArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeCertificateAuthorityAuditReportRequest {
  CertificateAuthorityArn: string;
  AuditReportId: string;
}

// refs: 1 - tags: named, input
export interface GetCertificateRequest {
  CertificateAuthorityArn: string;
  CertificateArn: string;
}

// refs: 1 - tags: named, input
export interface GetCertificateAuthorityCertificateRequest {
  CertificateAuthorityArn: string;
}

// refs: 1 - tags: named, input
export interface GetCertificateAuthorityCsrRequest {
  CertificateAuthorityArn: string;
}

// refs: 1 - tags: named, input
export interface GetPolicyRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface ImportCertificateAuthorityCertificateRequest {
  CertificateAuthorityArn: string;
  Certificate: Uint8Array | string;
  CertificateChain?: Uint8Array | string | null;
}

// refs: 1 - tags: named, input
export interface IssueCertificateRequest {
  CertificateAuthorityArn: string;
  Csr: Uint8Array | string;
  SigningAlgorithm: SigningAlgorithm;
  TemplateArn?: string | null;
  Validity: Validity;
  IdempotencyToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListCertificateAuthoritiesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  ResourceOwner?: ResourceOwner | null;
}

// refs: 1 - tags: named, input
export interface ListPermissionsRequest {
  CertificateAuthorityArn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTagsRequest {
  CertificateAuthorityArn: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface PutPolicyRequest {
  ResourceArn: string;
  Policy: string;
}

// refs: 1 - tags: named, input
export interface RestoreCertificateAuthorityRequest {
  CertificateAuthorityArn: string;
}

// refs: 1 - tags: named, input
export interface RevokeCertificateRequest {
  CertificateAuthorityArn: string;
  CertificateSerial: string;
  RevocationReason: RevocationReason;
}

// refs: 1 - tags: named, input
export interface TagCertificateAuthorityRequest {
  CertificateAuthorityArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagCertificateAuthorityRequest {
  CertificateAuthorityArn: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UpdateCertificateAuthorityRequest {
  CertificateAuthorityArn: string;
  RevocationConfiguration?: RevocationConfiguration | null;
  Status?: CertificateAuthorityStatus | null;
}

// refs: 1 - tags: named, output
export interface CreateCertificateAuthorityResponse {
  CertificateAuthorityArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateCertificateAuthorityAuditReportResponse {
  AuditReportId?: string | null;
  S3Key?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeCertificateAuthorityResponse {
  CertificateAuthority?: CertificateAuthority | null;
}

// refs: 1 - tags: named, output
export interface DescribeCertificateAuthorityAuditReportResponse {
  AuditReportStatus?: AuditReportStatus | null;
  S3BucketName?: string | null;
  S3Key?: string | null;
  CreatedAt?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetCertificateResponse {
  Certificate?: string | null;
  CertificateChain?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCertificateAuthorityCertificateResponse {
  Certificate?: string | null;
  CertificateChain?: string | null;
}

// refs: 1 - tags: named, output
export interface GetCertificateAuthorityCsrResponse {
  Csr?: string | null;
}

// refs: 1 - tags: named, output
export interface GetPolicyResponse {
  Policy?: string | null;
}

// refs: 1 - tags: named, output
export interface IssueCertificateResponse {
  CertificateArn?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCertificateAuthoritiesResponse {
  CertificateAuthorities?: CertificateAuthority[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPermissionsResponse {
  Permissions?: Permission[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsResponse {
  Tags?: Tag[] | null;
  NextToken?: string | null;
}

// refs: 3 - tags: input, named, interface, output
export interface CertificateAuthorityConfiguration {
  KeyAlgorithm: KeyAlgorithm;
  SigningAlgorithm: SigningAlgorithm;
  Subject: ASN1Subject;
}
function fromCertificateAuthorityConfiguration(input?: CertificateAuthorityConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    Subject: fromASN1Subject(input["Subject"]),
  }
}
function toCertificateAuthorityConfiguration(root: JSONValue): CertificateAuthorityConfiguration {
  return prt.readObj({
    required: {
      "KeyAlgorithm": toKeyAlgorithm,
      "SigningAlgorithm": toSigningAlgorithm,
      "Subject": toASN1Subject,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type KeyAlgorithm =
| "RSA_2048"
| "RSA_4096"
| "EC_prime256v1"
| "EC_secp384r1"
;

function toKeyAlgorithm(root: JSONValue): KeyAlgorithm | null {
  return ( false
    || root == "RSA_2048"
    || root == "RSA_4096"
    || root == "EC_prime256v1"
    || root == "EC_secp384r1"
  ) ? root : null;
}

// refs: 4 - tags: input, named, enum, output
export type SigningAlgorithm =
| "SHA256WITHECDSA"
| "SHA384WITHECDSA"
| "SHA512WITHECDSA"
| "SHA256WITHRSA"
| "SHA384WITHRSA"
| "SHA512WITHRSA"
;

function toSigningAlgorithm(root: JSONValue): SigningAlgorithm | null {
  return ( false
    || root == "SHA256WITHECDSA"
    || root == "SHA384WITHECDSA"
    || root == "SHA512WITHECDSA"
    || root == "SHA256WITHRSA"
    || root == "SHA384WITHRSA"
    || root == "SHA512WITHRSA"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface ASN1Subject {
  Country?: string | null;
  Organization?: string | null;
  OrganizationalUnit?: string | null;
  DistinguishedNameQualifier?: string | null;
  State?: string | null;
  CommonName?: string | null;
  SerialNumber?: string | null;
  Locality?: string | null;
  Title?: string | null;
  Surname?: string | null;
  GivenName?: string | null;
  Initials?: string | null;
  Pseudonym?: string | null;
  GenerationQualifier?: string | null;
}
function fromASN1Subject(input?: ASN1Subject | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toASN1Subject(root: JSONValue): ASN1Subject {
  return prt.readObj({
    required: {},
    optional: {
      "Country": "s",
      "Organization": "s",
      "OrganizationalUnit": "s",
      "DistinguishedNameQualifier": "s",
      "State": "s",
      "CommonName": "s",
      "SerialNumber": "s",
      "Locality": "s",
      "Title": "s",
      "Surname": "s",
      "GivenName": "s",
      "Initials": "s",
      "Pseudonym": "s",
      "GenerationQualifier": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface RevocationConfiguration {
  CrlConfiguration?: CrlConfiguration | null;
}
function fromRevocationConfiguration(input?: RevocationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    CrlConfiguration: fromCrlConfiguration(input["CrlConfiguration"]),
  }
}
function toRevocationConfiguration(root: JSONValue): RevocationConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "CrlConfiguration": toCrlConfiguration,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CrlConfiguration {
  Enabled: boolean;
  ExpirationInDays?: number | null;
  CustomCname?: string | null;
  S3BucketName?: string | null;
}
function fromCrlConfiguration(input?: CrlConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCrlConfiguration(root: JSONValue): CrlConfiguration {
  return prt.readObj({
    required: {
      "Enabled": "b",
    },
    optional: {
      "ExpirationInDays": "n",
      "CustomCname": "s",
      "S3BucketName": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type CertificateAuthorityType =
| "ROOT"
| "SUBORDINATE"
;

function toCertificateAuthorityType(root: JSONValue): CertificateAuthorityType | null {
  return ( false
    || root == "ROOT"
    || root == "SUBORDINATE"
  ) ? root : null;
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, enum
export type AuditReportResponseFormat =
| "JSON"
| "CSV"
;


// refs: 2 - tags: input, named, enum, output
export type ActionType =
| "IssueCertificate"
| "GetCertificate"
| "ListPermissions"
;

function toActionType(root: JSONValue): ActionType | null {
  return ( false
    || root == "IssueCertificate"
    || root == "GetCertificate"
    || root == "ListPermissions"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface Validity {
  Value: number;
  Type: ValidityPeriodType;
}
function fromValidity(input?: Validity | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, enum
export type ValidityPeriodType =
| "END_DATE"
| "ABSOLUTE"
| "DAYS"
| "MONTHS"
| "YEARS"
;


// refs: 1 - tags: input, named, enum
export type ResourceOwner =
| "SELF"
| "OTHER_ACCOUNTS"
;


// refs: 1 - tags: input, named, enum
export type RevocationReason =
| "UNSPECIFIED"
| "KEY_COMPROMISE"
| "CERTIFICATE_AUTHORITY_COMPROMISE"
| "AFFILIATION_CHANGED"
| "SUPERSEDED"
| "CESSATION_OF_OPERATION"
| "PRIVILEGE_WITHDRAWN"
| "A_A_COMPROMISE"
;


// refs: 3 - tags: input, named, enum, output
export type CertificateAuthorityStatus =
| "CREATING"
| "PENDING_CERTIFICATE"
| "ACTIVE"
| "DELETED"
| "DISABLED"
| "EXPIRED"
| "FAILED"
;

function toCertificateAuthorityStatus(root: JSONValue): CertificateAuthorityStatus | null {
  return ( false
    || root == "CREATING"
    || root == "PENDING_CERTIFICATE"
    || root == "ACTIVE"
    || root == "DELETED"
    || root == "DISABLED"
    || root == "EXPIRED"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface CertificateAuthority {
  Arn?: string | null;
  OwnerAccount?: string | null;
  CreatedAt?: Date | number | null;
  LastStateChangeAt?: Date | number | null;
  Type?: CertificateAuthorityType | null;
  Serial?: string | null;
  Status?: CertificateAuthorityStatus | null;
  NotBefore?: Date | number | null;
  NotAfter?: Date | number | null;
  FailureReason?: FailureReason | null;
  CertificateAuthorityConfiguration?: CertificateAuthorityConfiguration | null;
  RevocationConfiguration?: RevocationConfiguration | null;
  RestorableUntil?: Date | number | null;
}
function toCertificateAuthority(root: JSONValue): CertificateAuthority {
  return prt.readObj({
    required: {},
    optional: {
      "Arn": "s",
      "OwnerAccount": "s",
      "CreatedAt": "d",
      "LastStateChangeAt": "d",
      "Type": toCertificateAuthorityType,
      "Serial": "s",
      "Status": toCertificateAuthorityStatus,
      "NotBefore": "d",
      "NotAfter": "d",
      "FailureReason": toFailureReason,
      "CertificateAuthorityConfiguration": toCertificateAuthorityConfiguration,
      "RevocationConfiguration": toRevocationConfiguration,
      "RestorableUntil": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type FailureReason =
| "REQUEST_TIMED_OUT"
| "UNSUPPORTED_ALGORITHM"
| "OTHER"
;
function toFailureReason(root: JSONValue): FailureReason | null {
  return ( false
    || root == "REQUEST_TIMED_OUT"
    || root == "UNSUPPORTED_ALGORITHM"
    || root == "OTHER"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type AuditReportStatus =
| "CREATING"
| "SUCCESS"
| "FAILED"
;
function toAuditReportStatus(root: JSONValue): AuditReportStatus | null {
  return ( false
    || root == "CREATING"
    || root == "SUCCESS"
    || root == "FAILED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface Permission {
  CertificateAuthorityArn?: string | null;
  CreatedAt?: Date | number | null;
  Principal?: string | null;
  SourceAccount?: string | null;
  Actions?: ActionType[] | null;
  Policy?: string | null;
}
function toPermission(root: JSONValue): Permission {
  return prt.readObj({
    required: {},
    optional: {
      "CertificateAuthorityArn": "s",
      "CreatedAt": "d",
      "Principal": "s",
      "SourceAccount": "s",
      "Actions": [toActionType],
      "Policy": "s",
    },
  }, root);
}
