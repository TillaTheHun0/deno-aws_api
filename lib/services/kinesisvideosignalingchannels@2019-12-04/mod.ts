// Autogenerated API client for: Amazon Kinesis Video Signaling Channels

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class KinesisVideoSignalingChannels {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(KinesisVideoSignalingChannels.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-12-04",
    "endpointPrefix": "kinesisvideo",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon Kinesis Video Signaling Channels",
    "serviceFullName": "Amazon Kinesis Video Signaling Channels",
    "serviceId": "Kinesis Video Signaling",
    "signatureVersion": "v4",
    "uid": "kinesis-video-signaling-2019-12-04"
  };

  async getIceServerConfig(
    {abortSignal, ...params}: RequestConfig & s.GetIceServerConfigRequest,
  ): Promise<s.GetIceServerConfigResponse> {
    const body: jsonP.JSONObject = {
      ChannelARN: params["ChannelARN"],
      ClientId: params["ClientId"],
      Service: params["Service"],
      Username: params["Username"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIceServerConfig",
      requestUri: "/v1/get-ice-server-config",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "IceServerList": [toIceServer],
      },
    }, await resp.json());
  }

  async sendAlexaOfferToMaster(
    {abortSignal, ...params}: RequestConfig & s.SendAlexaOfferToMasterRequest,
  ): Promise<s.SendAlexaOfferToMasterResponse> {
    const body: jsonP.JSONObject = {
      ChannelARN: params["ChannelARN"],
      SenderClientId: params["SenderClientId"],
      MessagePayload: params["MessagePayload"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendAlexaOfferToMaster",
      requestUri: "/v1/send-alexa-offer-to-master",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Answer": "s",
      },
    }, await resp.json());
  }

}

function toIceServer(root: jsonP.JSONValue): s.IceServer {
  return jsonP.readObj({
    required: {},
    optional: {
      "Uris": ["s"],
      "Username": "s",
      "Password": "s",
      "Ttl": "n",
    },
  }, root);
}
