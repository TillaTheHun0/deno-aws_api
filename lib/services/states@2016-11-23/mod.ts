// Autogenerated API client for: AWS Step Functions

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class StepFunctions {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(StepFunctions.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2016-11-23",
    "endpointPrefix": "states",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "AWS SFN",
    "serviceFullName": "AWS Step Functions",
    "serviceId": "SFN",
    "signatureVersion": "v4",
    "targetPrefix": "AWSStepFunctions",
    "uid": "states-2016-11-23"
  };

  async createActivity(
    {abortSignal, ...params}: RequestConfig & CreateActivityInput,
  ): Promise<CreateActivityOutput> {
    const body: jsonP.JSONObject = params ? {
      name: params["name"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateActivity",
    });
    return jsonP.readObj({
      required: {
        "activityArn": "s",
        "creationDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async createStateMachine(
    {abortSignal, ...params}: RequestConfig & CreateStateMachineInput,
  ): Promise<CreateStateMachineOutput> {
    const body: jsonP.JSONObject = params ? {
      name: params["name"],
      definition: params["definition"],
      roleArn: params["roleArn"],
      type: params["type"],
      loggingConfiguration: fromLoggingConfiguration(params["loggingConfiguration"]),
      tags: params["tags"]?.map(x => fromTag(x)),
      tracingConfiguration: fromTracingConfiguration(params["tracingConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateStateMachine",
    });
    return jsonP.readObj({
      required: {
        "stateMachineArn": "s",
        "creationDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteActivity(
    {abortSignal, ...params}: RequestConfig & DeleteActivityInput,
  ): Promise<DeleteActivityOutput> {
    const body: jsonP.JSONObject = params ? {
      activityArn: params["activityArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteActivity",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteStateMachine(
    {abortSignal, ...params}: RequestConfig & DeleteStateMachineInput,
  ): Promise<DeleteStateMachineOutput> {
    const body: jsonP.JSONObject = params ? {
      stateMachineArn: params["stateMachineArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteStateMachine",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeActivity(
    {abortSignal, ...params}: RequestConfig & DescribeActivityInput,
  ): Promise<DescribeActivityOutput> {
    const body: jsonP.JSONObject = params ? {
      activityArn: params["activityArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeActivity",
    });
    return jsonP.readObj({
      required: {
        "activityArn": "s",
        "name": "s",
        "creationDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async describeExecution(
    {abortSignal, ...params}: RequestConfig & DescribeExecutionInput,
  ): Promise<DescribeExecutionOutput> {
    const body: jsonP.JSONObject = params ? {
      executionArn: params["executionArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeExecution",
    });
    return jsonP.readObj({
      required: {
        "executionArn": "s",
        "stateMachineArn": "s",
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
        "startDate": "d",
      },
      optional: {
        "name": "s",
        "stopDate": "d",
        "input": "s",
        "inputDetails": toCloudWatchEventsExecutionDataDetails,
        "output": "s",
        "outputDetails": toCloudWatchEventsExecutionDataDetails,
        "traceHeader": "s",
      },
    }, await resp.json());
  }

  async describeStateMachine(
    {abortSignal, ...params}: RequestConfig & DescribeStateMachineInput,
  ): Promise<DescribeStateMachineOutput> {
    const body: jsonP.JSONObject = params ? {
      stateMachineArn: params["stateMachineArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeStateMachine",
    });
    return jsonP.readObj({
      required: {
        "stateMachineArn": "s",
        "name": "s",
        "definition": "s",
        "roleArn": "s",
        "type": (x: jsonP.JSONValue) => cmnP.readEnum<StateMachineType>(x),
        "creationDate": "d",
      },
      optional: {
        "status": (x: jsonP.JSONValue) => cmnP.readEnum<StateMachineStatus>(x),
        "loggingConfiguration": toLoggingConfiguration,
        "tracingConfiguration": toTracingConfiguration,
      },
    }, await resp.json());
  }

  async describeStateMachineForExecution(
    {abortSignal, ...params}: RequestConfig & DescribeStateMachineForExecutionInput,
  ): Promise<DescribeStateMachineForExecutionOutput> {
    const body: jsonP.JSONObject = params ? {
      executionArn: params["executionArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeStateMachineForExecution",
    });
    return jsonP.readObj({
      required: {
        "stateMachineArn": "s",
        "name": "s",
        "definition": "s",
        "roleArn": "s",
        "updateDate": "d",
      },
      optional: {
        "loggingConfiguration": toLoggingConfiguration,
        "tracingConfiguration": toTracingConfiguration,
      },
    }, await resp.json());
  }

  async getActivityTask(
    {abortSignal, ...params}: RequestConfig & GetActivityTaskInput,
  ): Promise<GetActivityTaskOutput> {
    const body: jsonP.JSONObject = params ? {
      activityArn: params["activityArn"],
      workerName: params["workerName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetActivityTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "taskToken": "s",
        "input": "s",
      },
    }, await resp.json());
  }

  async getExecutionHistory(
    {abortSignal, ...params}: RequestConfig & GetExecutionHistoryInput,
  ): Promise<GetExecutionHistoryOutput> {
    const body: jsonP.JSONObject = params ? {
      executionArn: params["executionArn"],
      maxResults: params["maxResults"],
      reverseOrder: params["reverseOrder"],
      nextToken: params["nextToken"],
      includeExecutionData: params["includeExecutionData"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetExecutionHistory",
    });
    return jsonP.readObj({
      required: {
        "events": [toHistoryEvent],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listActivities(
    {abortSignal, ...params}: RequestConfig & ListActivitiesInput = {},
  ): Promise<ListActivitiesOutput> {
    const body: jsonP.JSONObject = params ? {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListActivities",
    });
    return jsonP.readObj({
      required: {
        "activities": [toActivityListItem],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listExecutions(
    {abortSignal, ...params}: RequestConfig & ListExecutionsInput,
  ): Promise<ListExecutionsOutput> {
    const body: jsonP.JSONObject = params ? {
      stateMachineArn: params["stateMachineArn"],
      statusFilter: params["statusFilter"],
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListExecutions",
    });
    return jsonP.readObj({
      required: {
        "executions": [toExecutionListItem],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listStateMachines(
    {abortSignal, ...params}: RequestConfig & ListStateMachinesInput = {},
  ): Promise<ListStateMachinesOutput> {
    const body: jsonP.JSONObject = params ? {
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListStateMachines",
    });
    return jsonP.readObj({
      required: {
        "stateMachines": [toStateMachineListItem],
      },
      optional: {
        "nextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceInput,
  ): Promise<ListTagsForResourceOutput> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": [toTag],
      },
    }, await resp.json());
  }

  async sendTaskFailure(
    {abortSignal, ...params}: RequestConfig & SendTaskFailureInput,
  ): Promise<SendTaskFailureOutput> {
    const body: jsonP.JSONObject = params ? {
      taskToken: params["taskToken"],
      error: params["error"],
      cause: params["cause"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendTaskFailure",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async sendTaskHeartbeat(
    {abortSignal, ...params}: RequestConfig & SendTaskHeartbeatInput,
  ): Promise<SendTaskHeartbeatOutput> {
    const body: jsonP.JSONObject = params ? {
      taskToken: params["taskToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendTaskHeartbeat",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async sendTaskSuccess(
    {abortSignal, ...params}: RequestConfig & SendTaskSuccessInput,
  ): Promise<SendTaskSuccessOutput> {
    const body: jsonP.JSONObject = params ? {
      taskToken: params["taskToken"],
      output: params["output"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendTaskSuccess",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async startExecution(
    {abortSignal, ...params}: RequestConfig & StartExecutionInput,
  ): Promise<StartExecutionOutput> {
    const body: jsonP.JSONObject = params ? {
      stateMachineArn: params["stateMachineArn"],
      name: params["name"],
      input: params["input"],
      traceHeader: params["traceHeader"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartExecution",
    });
    return jsonP.readObj({
      required: {
        "executionArn": "s",
        "startDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async stopExecution(
    {abortSignal, ...params}: RequestConfig & StopExecutionInput,
  ): Promise<StopExecutionOutput> {
    const body: jsonP.JSONObject = params ? {
      executionArn: params["executionArn"],
      error: params["error"],
      cause: params["cause"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopExecution",
    });
    return jsonP.readObj({
      required: {
        "stopDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceInput,
  ): Promise<TagResourceOutput> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceInput,
  ): Promise<UntagResourceOutput> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      tagKeys: params["tagKeys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateStateMachine(
    {abortSignal, ...params}: RequestConfig & UpdateStateMachineInput,
  ): Promise<UpdateStateMachineOutput> {
    const body: jsonP.JSONObject = params ? {
      stateMachineArn: params["stateMachineArn"],
      definition: params["definition"],
      roleArn: params["roleArn"],
      loggingConfiguration: fromLoggingConfiguration(params["loggingConfiguration"]),
      tracingConfiguration: fromTracingConfiguration(params["tracingConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateStateMachine",
    });
    return jsonP.readObj({
      required: {
        "updateDate": "d",
      },
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateActivityInput {
  name: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateStateMachineInput {
  name: string;
  definition: string;
  roleArn: string;
  type?: StateMachineType | null;
  loggingConfiguration?: LoggingConfiguration | null;
  tags?: Tag[] | null;
  tracingConfiguration?: TracingConfiguration | null;
}

// refs: 1 - tags: named, input
export interface DeleteActivityInput {
  activityArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteStateMachineInput {
  stateMachineArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeActivityInput {
  activityArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeExecutionInput {
  executionArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeStateMachineInput {
  stateMachineArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeStateMachineForExecutionInput {
  executionArn: string;
}

// refs: 1 - tags: named, input
export interface GetActivityTaskInput {
  activityArn: string;
  workerName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetExecutionHistoryInput {
  executionArn: string;
  maxResults?: number | null;
  reverseOrder?: boolean | null;
  nextToken?: string | null;
  includeExecutionData?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListActivitiesInput {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListExecutionsInput {
  stateMachineArn: string;
  statusFilter?: ExecutionStatus | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListStateMachinesInput {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceInput {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface SendTaskFailureInput {
  taskToken: string;
  error?: string | null;
  cause?: string | null;
}

// refs: 1 - tags: named, input
export interface SendTaskHeartbeatInput {
  taskToken: string;
}

// refs: 1 - tags: named, input
export interface SendTaskSuccessInput {
  taskToken: string;
  output: string;
}

// refs: 1 - tags: named, input
export interface StartExecutionInput {
  stateMachineArn: string;
  name?: string | null;
  input?: string | null;
  traceHeader?: string | null;
}

// refs: 1 - tags: named, input
export interface StopExecutionInput {
  executionArn: string;
  error?: string | null;
  cause?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceInput {
  resourceArn: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceInput {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateStateMachineInput {
  stateMachineArn: string;
  definition?: string | null;
  roleArn?: string | null;
  loggingConfiguration?: LoggingConfiguration | null;
  tracingConfiguration?: TracingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface CreateActivityOutput {
  activityArn: string;
  creationDate: Date | number;
}

// refs: 1 - tags: named, output
export interface CreateStateMachineOutput {
  stateMachineArn: string;
  creationDate: Date | number;
}

// refs: 1 - tags: named, output
export interface DeleteActivityOutput {
}

// refs: 1 - tags: named, output
export interface DeleteStateMachineOutput {
}

// refs: 1 - tags: named, output
export interface DescribeActivityOutput {
  activityArn: string;
  name: string;
  creationDate: Date | number;
}

// refs: 1 - tags: named, output
export interface DescribeExecutionOutput {
  executionArn: string;
  stateMachineArn: string;
  name?: string | null;
  status: ExecutionStatus;
  startDate: Date | number;
  stopDate?: Date | number | null;
  input?: string | null;
  inputDetails?: CloudWatchEventsExecutionDataDetails | null;
  output?: string | null;
  outputDetails?: CloudWatchEventsExecutionDataDetails | null;
  traceHeader?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeStateMachineOutput {
  stateMachineArn: string;
  name: string;
  status?: StateMachineStatus | null;
  definition: string;
  roleArn: string;
  type: StateMachineType;
  creationDate: Date | number;
  loggingConfiguration?: LoggingConfiguration | null;
  tracingConfiguration?: TracingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface DescribeStateMachineForExecutionOutput {
  stateMachineArn: string;
  name: string;
  definition: string;
  roleArn: string;
  updateDate: Date | number;
  loggingConfiguration?: LoggingConfiguration | null;
  tracingConfiguration?: TracingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetActivityTaskOutput {
  taskToken?: string | null;
  input?: string | null;
}

// refs: 1 - tags: named, output
export interface GetExecutionHistoryOutput {
  events: HistoryEvent[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListActivitiesOutput {
  activities: ActivityListItem[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListExecutionsOutput {
  executions: ExecutionListItem[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListStateMachinesOutput {
  stateMachines: StateMachineListItem[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceOutput {
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, output
export interface SendTaskFailureOutput {
}

// refs: 1 - tags: named, output
export interface SendTaskHeartbeatOutput {
}

// refs: 1 - tags: named, output
export interface SendTaskSuccessOutput {
}

// refs: 1 - tags: named, output
export interface StartExecutionOutput {
  executionArn: string;
  startDate: Date | number;
}

// refs: 1 - tags: named, output
export interface StopExecutionOutput {
  stopDate: Date | number;
}

// refs: 1 - tags: named, output
export interface TagResourceOutput {
}

// refs: 1 - tags: named, output
export interface UntagResourceOutput {
}

// refs: 1 - tags: named, output
export interface UpdateStateMachineOutput {
  updateDate: Date | number;
}

// refs: 4 - tags: input, named, interface, output
export interface Tag {
  key?: string | null;
  value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "key": "s",
      "value": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type StateMachineType =
| "STANDARD"
| "EXPRESS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface LoggingConfiguration {
  level?: LogLevel | null;
  includeExecutionData?: boolean | null;
  destinations?: LogDestination[] | null;
}
function fromLoggingConfiguration(input?: LoggingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    level: input["level"],
    includeExecutionData: input["includeExecutionData"],
    destinations: input["destinations"]?.map(x => fromLogDestination(x)),
  }
}
function toLoggingConfiguration(root: jsonP.JSONValue): LoggingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "level": (x: jsonP.JSONValue) => cmnP.readEnum<LogLevel>(x),
      "includeExecutionData": "b",
      "destinations": [toLogDestination],
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type LogLevel =
| "ALL"
| "ERROR"
| "FATAL"
| "OFF"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface LogDestination {
  cloudWatchLogsLogGroup?: CloudWatchLogsLogGroup | null;
}
function fromLogDestination(input?: LogDestination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    cloudWatchLogsLogGroup: fromCloudWatchLogsLogGroup(input["cloudWatchLogsLogGroup"]),
  }
}
function toLogDestination(root: jsonP.JSONValue): LogDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "cloudWatchLogsLogGroup": toCloudWatchLogsLogGroup,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CloudWatchLogsLogGroup {
  logGroupArn?: string | null;
}
function fromCloudWatchLogsLogGroup(input?: CloudWatchLogsLogGroup | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    logGroupArn: input["logGroupArn"],
  }
}
function toCloudWatchLogsLogGroup(root: jsonP.JSONValue): CloudWatchLogsLogGroup {
  return jsonP.readObj({
    required: {},
    optional: {
      "logGroupArn": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface TracingConfiguration {
  enabled?: boolean | null;
}
function fromTracingConfiguration(input?: TracingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enabled: input["enabled"],
  }
}
function toTracingConfiguration(root: jsonP.JSONValue): TracingConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "enabled": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ExecutionStatus =
| "RUNNING"
| "SUCCEEDED"
| "FAILED"
| "TIMED_OUT"
| "ABORTED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface CloudWatchEventsExecutionDataDetails {
  included?: boolean | null;
}
function toCloudWatchEventsExecutionDataDetails(root: jsonP.JSONValue): CloudWatchEventsExecutionDataDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "included": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type StateMachineStatus =
| "ACTIVE"
| "DELETING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface HistoryEvent {
  timestamp: Date | number;
  type: HistoryEventType;
  id: number;
  previousEventId?: number | null;
  activityFailedEventDetails?: ActivityFailedEventDetails | null;
  activityScheduleFailedEventDetails?: ActivityScheduleFailedEventDetails | null;
  activityScheduledEventDetails?: ActivityScheduledEventDetails | null;
  activityStartedEventDetails?: ActivityStartedEventDetails | null;
  activitySucceededEventDetails?: ActivitySucceededEventDetails | null;
  activityTimedOutEventDetails?: ActivityTimedOutEventDetails | null;
  taskFailedEventDetails?: TaskFailedEventDetails | null;
  taskScheduledEventDetails?: TaskScheduledEventDetails | null;
  taskStartFailedEventDetails?: TaskStartFailedEventDetails | null;
  taskStartedEventDetails?: TaskStartedEventDetails | null;
  taskSubmitFailedEventDetails?: TaskSubmitFailedEventDetails | null;
  taskSubmittedEventDetails?: TaskSubmittedEventDetails | null;
  taskSucceededEventDetails?: TaskSucceededEventDetails | null;
  taskTimedOutEventDetails?: TaskTimedOutEventDetails | null;
  executionFailedEventDetails?: ExecutionFailedEventDetails | null;
  executionStartedEventDetails?: ExecutionStartedEventDetails | null;
  executionSucceededEventDetails?: ExecutionSucceededEventDetails | null;
  executionAbortedEventDetails?: ExecutionAbortedEventDetails | null;
  executionTimedOutEventDetails?: ExecutionTimedOutEventDetails | null;
  mapStateStartedEventDetails?: MapStateStartedEventDetails | null;
  mapIterationStartedEventDetails?: MapIterationEventDetails | null;
  mapIterationSucceededEventDetails?: MapIterationEventDetails | null;
  mapIterationFailedEventDetails?: MapIterationEventDetails | null;
  mapIterationAbortedEventDetails?: MapIterationEventDetails | null;
  lambdaFunctionFailedEventDetails?: LambdaFunctionFailedEventDetails | null;
  lambdaFunctionScheduleFailedEventDetails?: LambdaFunctionScheduleFailedEventDetails | null;
  lambdaFunctionScheduledEventDetails?: LambdaFunctionScheduledEventDetails | null;
  lambdaFunctionStartFailedEventDetails?: LambdaFunctionStartFailedEventDetails | null;
  lambdaFunctionSucceededEventDetails?: LambdaFunctionSucceededEventDetails | null;
  lambdaFunctionTimedOutEventDetails?: LambdaFunctionTimedOutEventDetails | null;
  stateEnteredEventDetails?: StateEnteredEventDetails | null;
  stateExitedEventDetails?: StateExitedEventDetails | null;
}
function toHistoryEvent(root: jsonP.JSONValue): HistoryEvent {
  return jsonP.readObj({
    required: {
      "timestamp": "d",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<HistoryEventType>(x),
      "id": "n",
    },
    optional: {
      "previousEventId": "n",
      "activityFailedEventDetails": toActivityFailedEventDetails,
      "activityScheduleFailedEventDetails": toActivityScheduleFailedEventDetails,
      "activityScheduledEventDetails": toActivityScheduledEventDetails,
      "activityStartedEventDetails": toActivityStartedEventDetails,
      "activitySucceededEventDetails": toActivitySucceededEventDetails,
      "activityTimedOutEventDetails": toActivityTimedOutEventDetails,
      "taskFailedEventDetails": toTaskFailedEventDetails,
      "taskScheduledEventDetails": toTaskScheduledEventDetails,
      "taskStartFailedEventDetails": toTaskStartFailedEventDetails,
      "taskStartedEventDetails": toTaskStartedEventDetails,
      "taskSubmitFailedEventDetails": toTaskSubmitFailedEventDetails,
      "taskSubmittedEventDetails": toTaskSubmittedEventDetails,
      "taskSucceededEventDetails": toTaskSucceededEventDetails,
      "taskTimedOutEventDetails": toTaskTimedOutEventDetails,
      "executionFailedEventDetails": toExecutionFailedEventDetails,
      "executionStartedEventDetails": toExecutionStartedEventDetails,
      "executionSucceededEventDetails": toExecutionSucceededEventDetails,
      "executionAbortedEventDetails": toExecutionAbortedEventDetails,
      "executionTimedOutEventDetails": toExecutionTimedOutEventDetails,
      "mapStateStartedEventDetails": toMapStateStartedEventDetails,
      "mapIterationStartedEventDetails": toMapIterationEventDetails,
      "mapIterationSucceededEventDetails": toMapIterationEventDetails,
      "mapIterationFailedEventDetails": toMapIterationEventDetails,
      "mapIterationAbortedEventDetails": toMapIterationEventDetails,
      "lambdaFunctionFailedEventDetails": toLambdaFunctionFailedEventDetails,
      "lambdaFunctionScheduleFailedEventDetails": toLambdaFunctionScheduleFailedEventDetails,
      "lambdaFunctionScheduledEventDetails": toLambdaFunctionScheduledEventDetails,
      "lambdaFunctionStartFailedEventDetails": toLambdaFunctionStartFailedEventDetails,
      "lambdaFunctionSucceededEventDetails": toLambdaFunctionSucceededEventDetails,
      "lambdaFunctionTimedOutEventDetails": toLambdaFunctionTimedOutEventDetails,
      "stateEnteredEventDetails": toStateEnteredEventDetails,
      "stateExitedEventDetails": toStateExitedEventDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type HistoryEventType =
| "ActivityFailed"
| "ActivityScheduled"
| "ActivityScheduleFailed"
| "ActivityStarted"
| "ActivitySucceeded"
| "ActivityTimedOut"
| "ChoiceStateEntered"
| "ChoiceStateExited"
| "ExecutionAborted"
| "ExecutionFailed"
| "ExecutionStarted"
| "ExecutionSucceeded"
| "ExecutionTimedOut"
| "FailStateEntered"
| "LambdaFunctionFailed"
| "LambdaFunctionScheduled"
| "LambdaFunctionScheduleFailed"
| "LambdaFunctionStarted"
| "LambdaFunctionStartFailed"
| "LambdaFunctionSucceeded"
| "LambdaFunctionTimedOut"
| "MapIterationAborted"
| "MapIterationFailed"
| "MapIterationStarted"
| "MapIterationSucceeded"
| "MapStateAborted"
| "MapStateEntered"
| "MapStateExited"
| "MapStateFailed"
| "MapStateStarted"
| "MapStateSucceeded"
| "ParallelStateAborted"
| "ParallelStateEntered"
| "ParallelStateExited"
| "ParallelStateFailed"
| "ParallelStateStarted"
| "ParallelStateSucceeded"
| "PassStateEntered"
| "PassStateExited"
| "SucceedStateEntered"
| "SucceedStateExited"
| "TaskFailed"
| "TaskScheduled"
| "TaskStarted"
| "TaskStartFailed"
| "TaskStateAborted"
| "TaskStateEntered"
| "TaskStateExited"
| "TaskSubmitFailed"
| "TaskSubmitted"
| "TaskSucceeded"
| "TaskTimedOut"
| "WaitStateAborted"
| "WaitStateEntered"
| "WaitStateExited"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ActivityFailedEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toActivityFailedEventDetails(root: jsonP.JSONValue): ActivityFailedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivityScheduleFailedEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toActivityScheduleFailedEventDetails(root: jsonP.JSONValue): ActivityScheduleFailedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivityScheduledEventDetails {
  resource: string;
  input?: string | null;
  inputDetails?: HistoryEventExecutionDataDetails | null;
  timeoutInSeconds?: number | null;
  heartbeatInSeconds?: number | null;
}
function toActivityScheduledEventDetails(root: jsonP.JSONValue): ActivityScheduledEventDetails {
  return jsonP.readObj({
    required: {
      "resource": "s",
    },
    optional: {
      "input": "s",
      "inputDetails": toHistoryEventExecutionDataDetails,
      "timeoutInSeconds": "n",
      "heartbeatInSeconds": "n",
    },
  }, root);
}

// refs: 10 - tags: output, named, interface
export interface HistoryEventExecutionDataDetails {
  truncated?: boolean | null;
}
function toHistoryEventExecutionDataDetails(root: jsonP.JSONValue): HistoryEventExecutionDataDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "truncated": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivityStartedEventDetails {
  workerName?: string | null;
}
function toActivityStartedEventDetails(root: jsonP.JSONValue): ActivityStartedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "workerName": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivitySucceededEventDetails {
  output?: string | null;
  outputDetails?: HistoryEventExecutionDataDetails | null;
}
function toActivitySucceededEventDetails(root: jsonP.JSONValue): ActivitySucceededEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "output": "s",
      "outputDetails": toHistoryEventExecutionDataDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivityTimedOutEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toActivityTimedOutEventDetails(root: jsonP.JSONValue): ActivityTimedOutEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskFailedEventDetails {
  resourceType: string;
  resource: string;
  error?: string | null;
  cause?: string | null;
}
function toTaskFailedEventDetails(root: jsonP.JSONValue): TaskFailedEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
    },
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskScheduledEventDetails {
  resourceType: string;
  resource: string;
  region: string;
  parameters: string;
  timeoutInSeconds?: number | null;
  heartbeatInSeconds?: number | null;
}
function toTaskScheduledEventDetails(root: jsonP.JSONValue): TaskScheduledEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
      "region": "s",
      "parameters": "s",
    },
    optional: {
      "timeoutInSeconds": "n",
      "heartbeatInSeconds": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskStartFailedEventDetails {
  resourceType: string;
  resource: string;
  error?: string | null;
  cause?: string | null;
}
function toTaskStartFailedEventDetails(root: jsonP.JSONValue): TaskStartFailedEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
    },
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskStartedEventDetails {
  resourceType: string;
  resource: string;
}
function toTaskStartedEventDetails(root: jsonP.JSONValue): TaskStartedEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskSubmitFailedEventDetails {
  resourceType: string;
  resource: string;
  error?: string | null;
  cause?: string | null;
}
function toTaskSubmitFailedEventDetails(root: jsonP.JSONValue): TaskSubmitFailedEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
    },
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskSubmittedEventDetails {
  resourceType: string;
  resource: string;
  output?: string | null;
  outputDetails?: HistoryEventExecutionDataDetails | null;
}
function toTaskSubmittedEventDetails(root: jsonP.JSONValue): TaskSubmittedEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
    },
    optional: {
      "output": "s",
      "outputDetails": toHistoryEventExecutionDataDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskSucceededEventDetails {
  resourceType: string;
  resource: string;
  output?: string | null;
  outputDetails?: HistoryEventExecutionDataDetails | null;
}
function toTaskSucceededEventDetails(root: jsonP.JSONValue): TaskSucceededEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
    },
    optional: {
      "output": "s",
      "outputDetails": toHistoryEventExecutionDataDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskTimedOutEventDetails {
  resourceType: string;
  resource: string;
  error?: string | null;
  cause?: string | null;
}
function toTaskTimedOutEventDetails(root: jsonP.JSONValue): TaskTimedOutEventDetails {
  return jsonP.readObj({
    required: {
      "resourceType": "s",
      "resource": "s",
    },
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionFailedEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toExecutionFailedEventDetails(root: jsonP.JSONValue): ExecutionFailedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionStartedEventDetails {
  input?: string | null;
  inputDetails?: HistoryEventExecutionDataDetails | null;
  roleArn?: string | null;
}
function toExecutionStartedEventDetails(root: jsonP.JSONValue): ExecutionStartedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "input": "s",
      "inputDetails": toHistoryEventExecutionDataDetails,
      "roleArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionSucceededEventDetails {
  output?: string | null;
  outputDetails?: HistoryEventExecutionDataDetails | null;
}
function toExecutionSucceededEventDetails(root: jsonP.JSONValue): ExecutionSucceededEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "output": "s",
      "outputDetails": toHistoryEventExecutionDataDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionAbortedEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toExecutionAbortedEventDetails(root: jsonP.JSONValue): ExecutionAbortedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionTimedOutEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toExecutionTimedOutEventDetails(root: jsonP.JSONValue): ExecutionTimedOutEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MapStateStartedEventDetails {
  length?: number | null;
}
function toMapStateStartedEventDetails(root: jsonP.JSONValue): MapStateStartedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "length": "n",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface MapIterationEventDetails {
  name?: string | null;
  index?: number | null;
}
function toMapIterationEventDetails(root: jsonP.JSONValue): MapIterationEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "index": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionFailedEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toLambdaFunctionFailedEventDetails(root: jsonP.JSONValue): LambdaFunctionFailedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionScheduleFailedEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toLambdaFunctionScheduleFailedEventDetails(root: jsonP.JSONValue): LambdaFunctionScheduleFailedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionScheduledEventDetails {
  resource: string;
  input?: string | null;
  inputDetails?: HistoryEventExecutionDataDetails | null;
  timeoutInSeconds?: number | null;
}
function toLambdaFunctionScheduledEventDetails(root: jsonP.JSONValue): LambdaFunctionScheduledEventDetails {
  return jsonP.readObj({
    required: {
      "resource": "s",
    },
    optional: {
      "input": "s",
      "inputDetails": toHistoryEventExecutionDataDetails,
      "timeoutInSeconds": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionStartFailedEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toLambdaFunctionStartFailedEventDetails(root: jsonP.JSONValue): LambdaFunctionStartFailedEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionSucceededEventDetails {
  output?: string | null;
  outputDetails?: HistoryEventExecutionDataDetails | null;
}
function toLambdaFunctionSucceededEventDetails(root: jsonP.JSONValue): LambdaFunctionSucceededEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "output": "s",
      "outputDetails": toHistoryEventExecutionDataDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LambdaFunctionTimedOutEventDetails {
  error?: string | null;
  cause?: string | null;
}
function toLambdaFunctionTimedOutEventDetails(root: jsonP.JSONValue): LambdaFunctionTimedOutEventDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "error": "s",
      "cause": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StateEnteredEventDetails {
  name: string;
  input?: string | null;
  inputDetails?: HistoryEventExecutionDataDetails | null;
}
function toStateEnteredEventDetails(root: jsonP.JSONValue): StateEnteredEventDetails {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {
      "input": "s",
      "inputDetails": toHistoryEventExecutionDataDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StateExitedEventDetails {
  name: string;
  output?: string | null;
  outputDetails?: HistoryEventExecutionDataDetails | null;
}
function toStateExitedEventDetails(root: jsonP.JSONValue): StateExitedEventDetails {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {
      "output": "s",
      "outputDetails": toHistoryEventExecutionDataDetails,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActivityListItem {
  activityArn: string;
  name: string;
  creationDate: Date | number;
}
function toActivityListItem(root: jsonP.JSONValue): ActivityListItem {
  return jsonP.readObj({
    required: {
      "activityArn": "s",
      "name": "s",
      "creationDate": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExecutionListItem {
  executionArn: string;
  stateMachineArn: string;
  name: string;
  status: ExecutionStatus;
  startDate: Date | number;
  stopDate?: Date | number | null;
}
function toExecutionListItem(root: jsonP.JSONValue): ExecutionListItem {
  return jsonP.readObj({
    required: {
      "executionArn": "s",
      "stateMachineArn": "s",
      "name": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<ExecutionStatus>(x),
      "startDate": "d",
    },
    optional: {
      "stopDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StateMachineListItem {
  stateMachineArn: string;
  name: string;
  type: StateMachineType;
  creationDate: Date | number;
}
function toStateMachineListItem(root: jsonP.JSONValue): StateMachineListItem {
  return jsonP.readObj({
    required: {
      "stateMachineArn": "s",
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<StateMachineType>(x),
      "creationDate": "d",
    },
    optional: {},
  }, root);
}
