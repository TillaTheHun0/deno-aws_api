// Autogenerated API client for: AWS DataSync

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class DataSync {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DataSync.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-11-09",
    "endpointPrefix": "datasync",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "DataSync",
    "serviceFullName": "AWS DataSync",
    "serviceId": "DataSync",
    "signatureVersion": "v4",
    "signingName": "datasync",
    "targetPrefix": "FmrsService",
    "uid": "datasync-2018-11-09"
  };

  async cancelTaskExecution(
    {abortSignal, ...params}: RequestConfig & s.CancelTaskExecutionRequest,
  ): Promise<s.CancelTaskExecutionResponse> {
    const body: jsonP.JSONObject = {
      TaskExecutionArn: params["TaskExecutionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelTaskExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAgent(
    {abortSignal, ...params}: RequestConfig & s.CreateAgentRequest,
  ): Promise<s.CreateAgentResponse> {
    const body: jsonP.JSONObject = {
      ActivationKey: params["ActivationKey"],
      AgentName: params["AgentName"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
      VpcEndpointId: params["VpcEndpointId"],
      SubnetArns: params["SubnetArns"],
      SecurityGroupArns: params["SecurityGroupArns"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AgentArn": "s",
      },
    }, await resp.json());
  }

  async createLocationEfs(
    {abortSignal, ...params}: RequestConfig & s.CreateLocationEfsRequest,
  ): Promise<s.CreateLocationEfsResponse> {
    const body: jsonP.JSONObject = {
      Subdirectory: params["Subdirectory"],
      EfsFilesystemArn: params["EfsFilesystemArn"],
      Ec2Config: fromEc2Config(params["Ec2Config"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationEfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationFsxWindows(
    {abortSignal, ...params}: RequestConfig & s.CreateLocationFsxWindowsRequest,
  ): Promise<s.CreateLocationFsxWindowsResponse> {
    const body: jsonP.JSONObject = {
      Subdirectory: params["Subdirectory"],
      FsxFilesystemArn: params["FsxFilesystemArn"],
      SecurityGroupArns: params["SecurityGroupArns"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
      User: params["User"],
      Domain: params["Domain"],
      Password: params["Password"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationFsxWindows",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationNfs(
    {abortSignal, ...params}: RequestConfig & s.CreateLocationNfsRequest,
  ): Promise<s.CreateLocationNfsResponse> {
    const body: jsonP.JSONObject = {
      Subdirectory: params["Subdirectory"],
      ServerHostname: params["ServerHostname"],
      OnPremConfig: fromOnPremConfig(params["OnPremConfig"]),
      MountOptions: fromNfsMountOptions(params["MountOptions"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationNfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationObjectStorage(
    {abortSignal, ...params}: RequestConfig & s.CreateLocationObjectStorageRequest,
  ): Promise<s.CreateLocationObjectStorageResponse> {
    const body: jsonP.JSONObject = {
      ServerHostname: params["ServerHostname"],
      ServerPort: params["ServerPort"],
      ServerProtocol: params["ServerProtocol"],
      Subdirectory: params["Subdirectory"],
      BucketName: params["BucketName"],
      AccessKey: params["AccessKey"],
      SecretKey: params["SecretKey"],
      AgentArns: params["AgentArns"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationObjectStorage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationS3(
    {abortSignal, ...params}: RequestConfig & s.CreateLocationS3Request,
  ): Promise<s.CreateLocationS3Response> {
    const body: jsonP.JSONObject = {
      Subdirectory: params["Subdirectory"],
      S3BucketArn: params["S3BucketArn"],
      S3StorageClass: params["S3StorageClass"],
      S3Config: fromS3Config(params["S3Config"]),
      AgentArns: params["AgentArns"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationS3",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationSmb(
    {abortSignal, ...params}: RequestConfig & s.CreateLocationSmbRequest,
  ): Promise<s.CreateLocationSmbResponse> {
    const body: jsonP.JSONObject = {
      Subdirectory: params["Subdirectory"],
      ServerHostname: params["ServerHostname"],
      User: params["User"],
      Domain: params["Domain"],
      Password: params["Password"],
      AgentArns: params["AgentArns"],
      MountOptions: fromSmbMountOptions(params["MountOptions"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationSmb",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createTask(
    {abortSignal, ...params}: RequestConfig & s.CreateTaskRequest,
  ): Promise<s.CreateTaskResponse> {
    const body: jsonP.JSONObject = {
      SourceLocationArn: params["SourceLocationArn"],
      DestinationLocationArn: params["DestinationLocationArn"],
      CloudWatchLogGroupArn: params["CloudWatchLogGroupArn"],
      Name: params["Name"],
      Options: fromOptions(params["Options"]),
      Excludes: params["Excludes"]?.map(x => fromFilterRule(x)),
      Schedule: fromTaskSchedule(params["Schedule"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskArn": "s",
      },
    }, await resp.json());
  }

  async deleteAgent(
    {abortSignal, ...params}: RequestConfig & s.DeleteAgentRequest,
  ): Promise<s.DeleteAgentResponse> {
    const body: jsonP.JSONObject = {
      AgentArn: params["AgentArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLocation(
    {abortSignal, ...params}: RequestConfig & s.DeleteLocationRequest,
  ): Promise<s.DeleteLocationResponse> {
    const body: jsonP.JSONObject = {
      LocationArn: params["LocationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLocation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTask(
    {abortSignal, ...params}: RequestConfig & s.DeleteTaskRequest,
  ): Promise<s.DeleteTaskResponse> {
    const body: jsonP.JSONObject = {
      TaskArn: params["TaskArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAgent(
    {abortSignal, ...params}: RequestConfig & s.DescribeAgentRequest,
  ): Promise<s.DescribeAgentResponse> {
    const body: jsonP.JSONObject = {
      AgentArn: params["AgentArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AgentArn": "s",
        "Name": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AgentStatus>(x),
        "LastConnectionTime": "d",
        "CreationTime": "d",
        "EndpointType": (x: jsonP.JSONValue) => cmnP.readEnum<s.EndpointType>(x),
        "PrivateLinkConfig": toPrivateLinkConfig,
      },
    }, await resp.json());
  }

  async describeLocationEfs(
    {abortSignal, ...params}: RequestConfig & s.DescribeLocationEfsRequest,
  ): Promise<s.DescribeLocationEfsResponse> {
    const body: jsonP.JSONObject = {
      LocationArn: params["LocationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationEfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "Ec2Config": toEc2Config,
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationFsxWindows(
    {abortSignal, ...params}: RequestConfig & s.DescribeLocationFsxWindowsRequest,
  ): Promise<s.DescribeLocationFsxWindowsResponse> {
    const body: jsonP.JSONObject = {
      LocationArn: params["LocationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationFsxWindows",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "SecurityGroupArns": ["s"],
        "CreationTime": "d",
        "User": "s",
        "Domain": "s",
      },
    }, await resp.json());
  }

  async describeLocationNfs(
    {abortSignal, ...params}: RequestConfig & s.DescribeLocationNfsRequest,
  ): Promise<s.DescribeLocationNfsResponse> {
    const body: jsonP.JSONObject = {
      LocationArn: params["LocationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationNfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "OnPremConfig": toOnPremConfig,
        "MountOptions": toNfsMountOptions,
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationObjectStorage(
    {abortSignal, ...params}: RequestConfig & s.DescribeLocationObjectStorageRequest,
  ): Promise<s.DescribeLocationObjectStorageResponse> {
    const body: jsonP.JSONObject = {
      LocationArn: params["LocationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationObjectStorage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "AccessKey": "s",
        "ServerPort": "n",
        "ServerProtocol": (x: jsonP.JSONValue) => cmnP.readEnum<s.ObjectStorageServerProtocol>(x),
        "AgentArns": ["s"],
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationS3(
    {abortSignal, ...params}: RequestConfig & s.DescribeLocationS3Request,
  ): Promise<s.DescribeLocationS3Response> {
    const body: jsonP.JSONObject = {
      LocationArn: params["LocationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationS3",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "S3StorageClass": (x: jsonP.JSONValue) => cmnP.readEnum<s.S3StorageClass>(x),
        "S3Config": toS3Config,
        "AgentArns": ["s"],
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationSmb(
    {abortSignal, ...params}: RequestConfig & s.DescribeLocationSmbRequest,
  ): Promise<s.DescribeLocationSmbResponse> {
    const body: jsonP.JSONObject = {
      LocationArn: params["LocationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationSmb",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "AgentArns": ["s"],
        "User": "s",
        "Domain": "s",
        "MountOptions": toSmbMountOptions,
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeTask(
    {abortSignal, ...params}: RequestConfig & s.DescribeTaskRequest,
  ): Promise<s.DescribeTaskResponse> {
    const body: jsonP.JSONObject = {
      TaskArn: params["TaskArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.TaskStatus>(x),
        "Name": "s",
        "CurrentTaskExecutionArn": "s",
        "SourceLocationArn": "s",
        "DestinationLocationArn": "s",
        "CloudWatchLogGroupArn": "s",
        "SourceNetworkInterfaceArns": ["s"],
        "DestinationNetworkInterfaceArns": ["s"],
        "Options": toOptions,
        "Excludes": [toFilterRule],
        "Schedule": toTaskSchedule,
        "ErrorCode": "s",
        "ErrorDetail": "s",
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeTaskExecution(
    {abortSignal, ...params}: RequestConfig & s.DescribeTaskExecutionRequest,
  ): Promise<s.DescribeTaskExecutionResponse> {
    const body: jsonP.JSONObject = {
      TaskExecutionArn: params["TaskExecutionArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTaskExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskExecutionArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.TaskExecutionStatus>(x),
        "Options": toOptions,
        "Excludes": [toFilterRule],
        "Includes": [toFilterRule],
        "StartTime": "d",
        "EstimatedFilesToTransfer": "n",
        "EstimatedBytesToTransfer": "n",
        "FilesTransferred": "n",
        "BytesWritten": "n",
        "BytesTransferred": "n",
        "Result": toTaskExecutionResultDetail,
      },
    }, await resp.json());
  }

  async listAgents(
    {abortSignal, ...params}: RequestConfig & s.ListAgentsRequest = {},
  ): Promise<s.ListAgentsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAgents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Agents": [toAgentListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLocations(
    {abortSignal, ...params}: RequestConfig & s.ListLocationsRequest = {},
  ): Promise<s.ListLocationsResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromLocationFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLocations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Locations": [toLocationListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTagListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTaskExecutions(
    {abortSignal, ...params}: RequestConfig & s.ListTaskExecutionsRequest = {},
  ): Promise<s.ListTaskExecutionsResponse> {
    const body: jsonP.JSONObject = {
      TaskArn: params["TaskArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTaskExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskExecutions": [toTaskExecutionListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTasks(
    {abortSignal, ...params}: RequestConfig & s.ListTasksRequest = {},
  ): Promise<s.ListTasksResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromTaskFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tasks": [toTaskListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startTaskExecution(
    {abortSignal, ...params}: RequestConfig & s.StartTaskExecutionRequest,
  ): Promise<s.StartTaskExecutionResponse> {
    const body: jsonP.JSONObject = {
      TaskArn: params["TaskArn"],
      OverrideOptions: fromOptions(params["OverrideOptions"]),
      Includes: params["Includes"]?.map(x => fromFilterRule(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartTaskExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskExecutionArn": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Keys: params["Keys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAgent(
    {abortSignal, ...params}: RequestConfig & s.UpdateAgentRequest,
  ): Promise<s.UpdateAgentResponse> {
    const body: jsonP.JSONObject = {
      AgentArn: params["AgentArn"],
      Name: params["Name"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateTask(
    {abortSignal, ...params}: RequestConfig & s.UpdateTaskRequest,
  ): Promise<s.UpdateTaskResponse> {
    const body: jsonP.JSONObject = {
      TaskArn: params["TaskArn"],
      Options: fromOptions(params["Options"]),
      Excludes: params["Excludes"]?.map(x => fromFilterRule(x)),
      Schedule: fromTaskSchedule(params["Schedule"]),
      Name: params["Name"],
      CloudWatchLogGroupArn: params["CloudWatchLogGroupArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateTaskExecution(
    {abortSignal, ...params}: RequestConfig & s.UpdateTaskExecutionRequest,
  ): Promise<s.UpdateTaskExecutionResponse> {
    const body: jsonP.JSONObject = {
      TaskExecutionArn: params["TaskExecutionArn"],
      Options: fromOptions(params["Options"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTaskExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

function fromTagListEntry(input?: s.TagListEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTagListEntry(root: jsonP.JSONValue): s.TagListEntry {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

function fromEc2Config(input?: s.Ec2Config | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetArn: input["SubnetArn"],
    SecurityGroupArns: input["SecurityGroupArns"],
  }
}
function toEc2Config(root: jsonP.JSONValue): s.Ec2Config {
  return jsonP.readObj({
    required: {
      "SubnetArn": "s",
      "SecurityGroupArns": ["s"],
    },
    optional: {},
  }, root);
}

function fromOnPremConfig(input?: s.OnPremConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AgentArns: input["AgentArns"],
  }
}
function toOnPremConfig(root: jsonP.JSONValue): s.OnPremConfig {
  return jsonP.readObj({
    required: {
      "AgentArns": ["s"],
    },
    optional: {},
  }, root);
}

function fromNfsMountOptions(input?: s.NfsMountOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Version: input["Version"],
  }
}
function toNfsMountOptions(root: jsonP.JSONValue): s.NfsMountOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Version": (x: jsonP.JSONValue) => cmnP.readEnum<s.NfsVersion>(x),
    },
  }, root);
}

function fromS3Config(input?: s.S3Config | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketAccessRoleArn: input["BucketAccessRoleArn"],
  }
}
function toS3Config(root: jsonP.JSONValue): s.S3Config {
  return jsonP.readObj({
    required: {
      "BucketAccessRoleArn": "s",
    },
    optional: {},
  }, root);
}

function fromSmbMountOptions(input?: s.SmbMountOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Version: input["Version"],
  }
}
function toSmbMountOptions(root: jsonP.JSONValue): s.SmbMountOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Version": (x: jsonP.JSONValue) => cmnP.readEnum<s.SmbVersion>(x),
    },
  }, root);
}

function fromOptions(input?: s.Options | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VerifyMode: input["VerifyMode"],
    OverwriteMode: input["OverwriteMode"],
    Atime: input["Atime"],
    Mtime: input["Mtime"],
    Uid: input["Uid"],
    Gid: input["Gid"],
    PreserveDeletedFiles: input["PreserveDeletedFiles"],
    PreserveDevices: input["PreserveDevices"],
    PosixPermissions: input["PosixPermissions"],
    BytesPerSecond: input["BytesPerSecond"],
    TaskQueueing: input["TaskQueueing"],
    LogLevel: input["LogLevel"],
    TransferMode: input["TransferMode"],
  }
}
function toOptions(root: jsonP.JSONValue): s.Options {
  return jsonP.readObj({
    required: {},
    optional: {
      "VerifyMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.VerifyMode>(x),
      "OverwriteMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.OverwriteMode>(x),
      "Atime": (x: jsonP.JSONValue) => cmnP.readEnum<s.Atime>(x),
      "Mtime": (x: jsonP.JSONValue) => cmnP.readEnum<s.Mtime>(x),
      "Uid": (x: jsonP.JSONValue) => cmnP.readEnum<s.Uid>(x),
      "Gid": (x: jsonP.JSONValue) => cmnP.readEnum<s.Gid>(x),
      "PreserveDeletedFiles": (x: jsonP.JSONValue) => cmnP.readEnum<s.PreserveDeletedFiles>(x),
      "PreserveDevices": (x: jsonP.JSONValue) => cmnP.readEnum<s.PreserveDevices>(x),
      "PosixPermissions": (x: jsonP.JSONValue) => cmnP.readEnum<s.PosixPermissions>(x),
      "BytesPerSecond": "n",
      "TaskQueueing": (x: jsonP.JSONValue) => cmnP.readEnum<s.TaskQueueing>(x),
      "LogLevel": (x: jsonP.JSONValue) => cmnP.readEnum<s.LogLevel>(x),
      "TransferMode": (x: jsonP.JSONValue) => cmnP.readEnum<s.TransferMode>(x),
    },
  }, root);
}

function fromFilterRule(input?: s.FilterRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FilterType: input["FilterType"],
    Value: input["Value"],
  }
}
function toFilterRule(root: jsonP.JSONValue): s.FilterRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "FilterType": (x: jsonP.JSONValue) => cmnP.readEnum<s.FilterType>(x),
      "Value": "s",
    },
  }, root);
}

function fromTaskSchedule(input?: s.TaskSchedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ScheduleExpression: input["ScheduleExpression"],
  }
}
function toTaskSchedule(root: jsonP.JSONValue): s.TaskSchedule {
  return jsonP.readObj({
    required: {
      "ScheduleExpression": "s",
    },
    optional: {},
  }, root);
}

function fromLocationFilter(input?: s.LocationFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
    Operator: input["Operator"],
  }
}

function fromTaskFilter(input?: s.TaskFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
    Operator: input["Operator"],
  }
}

function toPrivateLinkConfig(root: jsonP.JSONValue): s.PrivateLinkConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "VpcEndpointId": "s",
      "PrivateLinkEndpoint": "s",
      "SubnetArns": ["s"],
      "SecurityGroupArns": ["s"],
    },
  }, root);
}

function toTaskExecutionResultDetail(root: jsonP.JSONValue): s.TaskExecutionResultDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrepareDuration": "n",
      "PrepareStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhaseStatus>(x),
      "TotalDuration": "n",
      "TransferDuration": "n",
      "TransferStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhaseStatus>(x),
      "VerifyDuration": "n",
      "VerifyStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.PhaseStatus>(x),
      "ErrorCode": "s",
      "ErrorDetail": "s",
    },
  }, root);
}

function toAgentListEntry(root: jsonP.JSONValue): s.AgentListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "AgentArn": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.AgentStatus>(x),
    },
  }, root);
}

function toLocationListEntry(root: jsonP.JSONValue): s.LocationListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "LocationArn": "s",
      "LocationUri": "s",
    },
  }, root);
}

function toTaskExecutionListEntry(root: jsonP.JSONValue): s.TaskExecutionListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "TaskExecutionArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.TaskExecutionStatus>(x),
    },
  }, root);
}

function toTaskListEntry(root: jsonP.JSONValue): s.TaskListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "TaskArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.TaskStatus>(x),
      "Name": "s",
    },
  }, root);
}
