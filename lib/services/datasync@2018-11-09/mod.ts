// Autogenerated API client for: AWS DataSync

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class DataSync {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(DataSync.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-11-09",
    "endpointPrefix": "datasync",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "DataSync",
    "serviceFullName": "AWS DataSync",
    "serviceId": "DataSync",
    "signatureVersion": "v4",
    "signingName": "datasync",
    "targetPrefix": "FmrsService",
    "uid": "datasync-2018-11-09"
  };

  async cancelTaskExecution(
    {abortSignal, ...params}: RequestConfig & CancelTaskExecutionRequest,
  ): Promise<CancelTaskExecutionResponse> {
    const body: jsonP.JSONObject = params ? {
      TaskExecutionArn: params["TaskExecutionArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelTaskExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAgent(
    {abortSignal, ...params}: RequestConfig & CreateAgentRequest,
  ): Promise<CreateAgentResponse> {
    const body: jsonP.JSONObject = params ? {
      ActivationKey: params["ActivationKey"],
      AgentName: params["AgentName"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
      VpcEndpointId: params["VpcEndpointId"],
      SubnetArns: params["SubnetArns"],
      SecurityGroupArns: params["SecurityGroupArns"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AgentArn": "s",
      },
    }, await resp.json());
  }

  async createLocationEfs(
    {abortSignal, ...params}: RequestConfig & CreateLocationEfsRequest,
  ): Promise<CreateLocationEfsResponse> {
    const body: jsonP.JSONObject = params ? {
      Subdirectory: params["Subdirectory"],
      EfsFilesystemArn: params["EfsFilesystemArn"],
      Ec2Config: fromEc2Config(params["Ec2Config"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationEfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationFsxWindows(
    {abortSignal, ...params}: RequestConfig & CreateLocationFsxWindowsRequest,
  ): Promise<CreateLocationFsxWindowsResponse> {
    const body: jsonP.JSONObject = params ? {
      Subdirectory: params["Subdirectory"],
      FsxFilesystemArn: params["FsxFilesystemArn"],
      SecurityGroupArns: params["SecurityGroupArns"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
      User: params["User"],
      Domain: params["Domain"],
      Password: params["Password"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationFsxWindows",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationNfs(
    {abortSignal, ...params}: RequestConfig & CreateLocationNfsRequest,
  ): Promise<CreateLocationNfsResponse> {
    const body: jsonP.JSONObject = params ? {
      Subdirectory: params["Subdirectory"],
      ServerHostname: params["ServerHostname"],
      OnPremConfig: fromOnPremConfig(params["OnPremConfig"]),
      MountOptions: fromNfsMountOptions(params["MountOptions"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationNfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationObjectStorage(
    {abortSignal, ...params}: RequestConfig & CreateLocationObjectStorageRequest,
  ): Promise<CreateLocationObjectStorageResponse> {
    const body: jsonP.JSONObject = params ? {
      ServerHostname: params["ServerHostname"],
      ServerPort: params["ServerPort"],
      ServerProtocol: params["ServerProtocol"],
      Subdirectory: params["Subdirectory"],
      BucketName: params["BucketName"],
      AccessKey: params["AccessKey"],
      SecretKey: params["SecretKey"],
      AgentArns: params["AgentArns"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationObjectStorage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationS3(
    {abortSignal, ...params}: RequestConfig & CreateLocationS3Request,
  ): Promise<CreateLocationS3Response> {
    const body: jsonP.JSONObject = params ? {
      Subdirectory: params["Subdirectory"],
      S3BucketArn: params["S3BucketArn"],
      S3StorageClass: params["S3StorageClass"],
      S3Config: fromS3Config(params["S3Config"]),
      AgentArns: params["AgentArns"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationS3",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createLocationSmb(
    {abortSignal, ...params}: RequestConfig & CreateLocationSmbRequest,
  ): Promise<CreateLocationSmbResponse> {
    const body: jsonP.JSONObject = params ? {
      Subdirectory: params["Subdirectory"],
      ServerHostname: params["ServerHostname"],
      User: params["User"],
      Domain: params["Domain"],
      Password: params["Password"],
      AgentArns: params["AgentArns"],
      MountOptions: fromSmbMountOptions(params["MountOptions"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLocationSmb",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
      },
    }, await resp.json());
  }

  async createTask(
    {abortSignal, ...params}: RequestConfig & CreateTaskRequest,
  ): Promise<CreateTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      SourceLocationArn: params["SourceLocationArn"],
      DestinationLocationArn: params["DestinationLocationArn"],
      CloudWatchLogGroupArn: params["CloudWatchLogGroupArn"],
      Name: params["Name"],
      Options: fromOptions(params["Options"]),
      Excludes: params["Excludes"]?.map(x => fromFilterRule(x)),
      Schedule: fromTaskSchedule(params["Schedule"]),
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskArn": "s",
      },
    }, await resp.json());
  }

  async deleteAgent(
    {abortSignal, ...params}: RequestConfig & DeleteAgentRequest,
  ): Promise<DeleteAgentResponse> {
    const body: jsonP.JSONObject = params ? {
      AgentArn: params["AgentArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteLocation(
    {abortSignal, ...params}: RequestConfig & DeleteLocationRequest,
  ): Promise<DeleteLocationResponse> {
    const body: jsonP.JSONObject = params ? {
      LocationArn: params["LocationArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLocation",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteTask(
    {abortSignal, ...params}: RequestConfig & DeleteTaskRequest,
  ): Promise<DeleteTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      TaskArn: params["TaskArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeAgent(
    {abortSignal, ...params}: RequestConfig & DescribeAgentRequest,
  ): Promise<DescribeAgentResponse> {
    const body: jsonP.JSONObject = params ? {
      AgentArn: params["AgentArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AgentArn": "s",
        "Name": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<AgentStatus>(x),
        "LastConnectionTime": "d",
        "CreationTime": "d",
        "EndpointType": (x: jsonP.JSONValue) => cmnP.readEnum<EndpointType>(x),
        "PrivateLinkConfig": toPrivateLinkConfig,
      },
    }, await resp.json());
  }

  async describeLocationEfs(
    {abortSignal, ...params}: RequestConfig & DescribeLocationEfsRequest,
  ): Promise<DescribeLocationEfsResponse> {
    const body: jsonP.JSONObject = params ? {
      LocationArn: params["LocationArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationEfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "Ec2Config": toEc2Config,
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationFsxWindows(
    {abortSignal, ...params}: RequestConfig & DescribeLocationFsxWindowsRequest,
  ): Promise<DescribeLocationFsxWindowsResponse> {
    const body: jsonP.JSONObject = params ? {
      LocationArn: params["LocationArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationFsxWindows",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "SecurityGroupArns": ["s"],
        "CreationTime": "d",
        "User": "s",
        "Domain": "s",
      },
    }, await resp.json());
  }

  async describeLocationNfs(
    {abortSignal, ...params}: RequestConfig & DescribeLocationNfsRequest,
  ): Promise<DescribeLocationNfsResponse> {
    const body: jsonP.JSONObject = params ? {
      LocationArn: params["LocationArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationNfs",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "OnPremConfig": toOnPremConfig,
        "MountOptions": toNfsMountOptions,
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationObjectStorage(
    {abortSignal, ...params}: RequestConfig & DescribeLocationObjectStorageRequest,
  ): Promise<DescribeLocationObjectStorageResponse> {
    const body: jsonP.JSONObject = params ? {
      LocationArn: params["LocationArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationObjectStorage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "AccessKey": "s",
        "ServerPort": "n",
        "ServerProtocol": (x: jsonP.JSONValue) => cmnP.readEnum<ObjectStorageServerProtocol>(x),
        "AgentArns": ["s"],
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationS3(
    {abortSignal, ...params}: RequestConfig & DescribeLocationS3Request,
  ): Promise<DescribeLocationS3Response> {
    const body: jsonP.JSONObject = params ? {
      LocationArn: params["LocationArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationS3",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "S3StorageClass": (x: jsonP.JSONValue) => cmnP.readEnum<S3StorageClass>(x),
        "S3Config": toS3Config,
        "AgentArns": ["s"],
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeLocationSmb(
    {abortSignal, ...params}: RequestConfig & DescribeLocationSmbRequest,
  ): Promise<DescribeLocationSmbResponse> {
    const body: jsonP.JSONObject = params ? {
      LocationArn: params["LocationArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeLocationSmb",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LocationArn": "s",
        "LocationUri": "s",
        "AgentArns": ["s"],
        "User": "s",
        "Domain": "s",
        "MountOptions": toSmbMountOptions,
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeTask(
    {abortSignal, ...params}: RequestConfig & DescribeTaskRequest,
  ): Promise<DescribeTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      TaskArn: params["TaskArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<TaskStatus>(x),
        "Name": "s",
        "CurrentTaskExecutionArn": "s",
        "SourceLocationArn": "s",
        "DestinationLocationArn": "s",
        "CloudWatchLogGroupArn": "s",
        "SourceNetworkInterfaceArns": ["s"],
        "DestinationNetworkInterfaceArns": ["s"],
        "Options": toOptions,
        "Excludes": [toFilterRule],
        "Schedule": toTaskSchedule,
        "ErrorCode": "s",
        "ErrorDetail": "s",
        "CreationTime": "d",
      },
    }, await resp.json());
  }

  async describeTaskExecution(
    {abortSignal, ...params}: RequestConfig & DescribeTaskExecutionRequest,
  ): Promise<DescribeTaskExecutionResponse> {
    const body: jsonP.JSONObject = params ? {
      TaskExecutionArn: params["TaskExecutionArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeTaskExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskExecutionArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<TaskExecutionStatus>(x),
        "Options": toOptions,
        "Excludes": [toFilterRule],
        "Includes": [toFilterRule],
        "StartTime": "d",
        "EstimatedFilesToTransfer": "n",
        "EstimatedBytesToTransfer": "n",
        "FilesTransferred": "n",
        "BytesWritten": "n",
        "BytesTransferred": "n",
        "Result": toTaskExecutionResultDetail,
      },
    }, await resp.json());
  }

  async listAgents(
    {abortSignal, ...params}: RequestConfig & ListAgentsRequest = {},
  ): Promise<ListAgentsResponse> {
    const body: jsonP.JSONObject = params ? {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAgents",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Agents": [toAgentListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLocations(
    {abortSignal, ...params}: RequestConfig & ListLocationsRequest = {},
  ): Promise<ListLocationsResponse> {
    const body: jsonP.JSONObject = params ? {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromLocationFilter(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLocations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Locations": [toLocationListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceArn: params["ResourceArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTagListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTaskExecutions(
    {abortSignal, ...params}: RequestConfig & ListTaskExecutionsRequest = {},
  ): Promise<ListTaskExecutionsResponse> {
    const body: jsonP.JSONObject = params ? {
      TaskArn: params["TaskArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTaskExecutions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskExecutions": [toTaskExecutionListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTasks(
    {abortSignal, ...params}: RequestConfig & ListTasksRequest = {},
  ): Promise<ListTasksResponse> {
    const body: jsonP.JSONObject = params ? {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromTaskFilter(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTasks",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tasks": [toTaskListEntry],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async startTaskExecution(
    {abortSignal, ...params}: RequestConfig & StartTaskExecutionRequest,
  ): Promise<StartTaskExecutionResponse> {
    const body: jsonP.JSONObject = params ? {
      TaskArn: params["TaskArn"],
      OverrideOptions: fromOptions(params["OverrideOptions"]),
      Includes: params["Includes"]?.map(x => fromFilterRule(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartTaskExecution",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TaskExecutionArn": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTagListEntry(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      ResourceArn: params["ResourceArn"],
      Keys: params["Keys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateAgent(
    {abortSignal, ...params}: RequestConfig & UpdateAgentRequest,
  ): Promise<UpdateAgentResponse> {
    const body: jsonP.JSONObject = params ? {
      AgentArn: params["AgentArn"],
      Name: params["Name"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAgent",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateTask(
    {abortSignal, ...params}: RequestConfig & UpdateTaskRequest,
  ): Promise<UpdateTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      TaskArn: params["TaskArn"],
      Options: fromOptions(params["Options"]),
      Excludes: params["Excludes"]?.map(x => fromFilterRule(x)),
      Schedule: fromTaskSchedule(params["Schedule"]),
      Name: params["Name"],
      CloudWatchLogGroupArn: params["CloudWatchLogGroupArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTask",
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CancelTaskExecutionRequest {
  TaskExecutionArn: string;
}

// refs: 1 - tags: named, input
export interface CreateAgentRequest {
  ActivationKey: string;
  AgentName?: string | null;
  Tags?: TagListEntry[] | null;
  VpcEndpointId?: string | null;
  SubnetArns?: string[] | null;
  SecurityGroupArns?: string[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLocationEfsRequest {
  Subdirectory?: string | null;
  EfsFilesystemArn: string;
  Ec2Config: Ec2Config;
  Tags?: TagListEntry[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLocationFsxWindowsRequest {
  Subdirectory?: string | null;
  FsxFilesystemArn: string;
  SecurityGroupArns: string[];
  Tags?: TagListEntry[] | null;
  User: string;
  Domain?: string | null;
  Password: string;
}

// refs: 1 - tags: named, input
export interface CreateLocationNfsRequest {
  Subdirectory: string;
  ServerHostname: string;
  OnPremConfig: OnPremConfig;
  MountOptions?: NfsMountOptions | null;
  Tags?: TagListEntry[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLocationObjectStorageRequest {
  ServerHostname: string;
  ServerPort?: number | null;
  ServerProtocol?: ObjectStorageServerProtocol | null;
  Subdirectory?: string | null;
  BucketName: string;
  AccessKey?: string | null;
  SecretKey?: string | null;
  AgentArns: string[];
  Tags?: TagListEntry[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLocationS3Request {
  Subdirectory?: string | null;
  S3BucketArn: string;
  S3StorageClass?: S3StorageClass | null;
  S3Config: S3Config;
  AgentArns?: string[] | null;
  Tags?: TagListEntry[] | null;
}

// refs: 1 - tags: named, input
export interface CreateLocationSmbRequest {
  Subdirectory: string;
  ServerHostname: string;
  User: string;
  Domain?: string | null;
  Password: string;
  AgentArns: string[];
  MountOptions?: SmbMountOptions | null;
  Tags?: TagListEntry[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTaskRequest {
  SourceLocationArn: string;
  DestinationLocationArn: string;
  CloudWatchLogGroupArn?: string | null;
  Name?: string | null;
  Options?: Options | null;
  Excludes?: FilterRule[] | null;
  Schedule?: TaskSchedule | null;
  Tags?: TagListEntry[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteAgentRequest {
  AgentArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteLocationRequest {
  LocationArn: string;
}

// refs: 1 - tags: named, input
export interface DeleteTaskRequest {
  TaskArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeAgentRequest {
  AgentArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeLocationEfsRequest {
  LocationArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeLocationFsxWindowsRequest {
  LocationArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeLocationNfsRequest {
  LocationArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeLocationObjectStorageRequest {
  LocationArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeLocationS3Request {
  LocationArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeLocationSmbRequest {
  LocationArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeTaskRequest {
  TaskArn: string;
}

// refs: 1 - tags: named, input
export interface DescribeTaskExecutionRequest {
  TaskExecutionArn: string;
}

// refs: 1 - tags: named, input
export interface ListAgentsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListLocationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: LocationFilter[] | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTaskExecutionsRequest {
  TaskArn?: string | null;
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTasksRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
  Filters?: TaskFilter[] | null;
}

// refs: 1 - tags: named, input
export interface StartTaskExecutionRequest {
  TaskArn: string;
  OverrideOptions?: Options | null;
  Includes?: FilterRule[] | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: TagListEntry[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  Keys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAgentRequest {
  AgentArn: string;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateTaskRequest {
  TaskArn: string;
  Options?: Options | null;
  Excludes?: FilterRule[] | null;
  Schedule?: TaskSchedule | null;
  Name?: string | null;
  CloudWatchLogGroupArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CancelTaskExecutionResponse {
}

// refs: 1 - tags: named, output
export interface CreateAgentResponse {
  AgentArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLocationEfsResponse {
  LocationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLocationFsxWindowsResponse {
  LocationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLocationNfsResponse {
  LocationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLocationObjectStorageResponse {
  LocationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLocationS3Response {
  LocationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateLocationSmbResponse {
  LocationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTaskResponse {
  TaskArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteAgentResponse {
}

// refs: 1 - tags: named, output
export interface DeleteLocationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteTaskResponse {
}

// refs: 1 - tags: named, output
export interface DescribeAgentResponse {
  AgentArn?: string | null;
  Name?: string | null;
  Status?: AgentStatus | null;
  LastConnectionTime?: Date | number | null;
  CreationTime?: Date | number | null;
  EndpointType?: EndpointType | null;
  PrivateLinkConfig?: PrivateLinkConfig | null;
}

// refs: 1 - tags: named, output
export interface DescribeLocationEfsResponse {
  LocationArn?: string | null;
  LocationUri?: string | null;
  Ec2Config?: Ec2Config | null;
  CreationTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeLocationFsxWindowsResponse {
  LocationArn?: string | null;
  LocationUri?: string | null;
  SecurityGroupArns?: string[] | null;
  CreationTime?: Date | number | null;
  User?: string | null;
  Domain?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeLocationNfsResponse {
  LocationArn?: string | null;
  LocationUri?: string | null;
  OnPremConfig?: OnPremConfig | null;
  MountOptions?: NfsMountOptions | null;
  CreationTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeLocationObjectStorageResponse {
  LocationArn?: string | null;
  LocationUri?: string | null;
  AccessKey?: string | null;
  ServerPort?: number | null;
  ServerProtocol?: ObjectStorageServerProtocol | null;
  AgentArns?: string[] | null;
  CreationTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeLocationS3Response {
  LocationArn?: string | null;
  LocationUri?: string | null;
  S3StorageClass?: S3StorageClass | null;
  S3Config?: S3Config | null;
  AgentArns?: string[] | null;
  CreationTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeLocationSmbResponse {
  LocationArn?: string | null;
  LocationUri?: string | null;
  AgentArns?: string[] | null;
  User?: string | null;
  Domain?: string | null;
  MountOptions?: SmbMountOptions | null;
  CreationTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeTaskResponse {
  TaskArn?: string | null;
  Status?: TaskStatus | null;
  Name?: string | null;
  CurrentTaskExecutionArn?: string | null;
  SourceLocationArn?: string | null;
  DestinationLocationArn?: string | null;
  CloudWatchLogGroupArn?: string | null;
  SourceNetworkInterfaceArns?: string[] | null;
  DestinationNetworkInterfaceArns?: string[] | null;
  Options?: Options | null;
  Excludes?: FilterRule[] | null;
  Schedule?: TaskSchedule | null;
  ErrorCode?: string | null;
  ErrorDetail?: string | null;
  CreationTime?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeTaskExecutionResponse {
  TaskExecutionArn?: string | null;
  Status?: TaskExecutionStatus | null;
  Options?: Options | null;
  Excludes?: FilterRule[] | null;
  Includes?: FilterRule[] | null;
  StartTime?: Date | number | null;
  EstimatedFilesToTransfer?: number | null;
  EstimatedBytesToTransfer?: number | null;
  FilesTransferred?: number | null;
  BytesWritten?: number | null;
  BytesTransferred?: number | null;
  Result?: TaskExecutionResultDetail | null;
}

// refs: 1 - tags: named, output
export interface ListAgentsResponse {
  Agents?: AgentListEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListLocationsResponse {
  Locations?: LocationListEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: TagListEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTaskExecutionsResponse {
  TaskExecutions?: TaskExecutionListEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTasksResponse {
  Tasks?: TaskListEntry[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface StartTaskExecutionResponse {
  TaskExecutionArn?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAgentResponse {
}

// refs: 1 - tags: named, output
export interface UpdateTaskResponse {
}

// refs: 10 - tags: input, named, interface, output
export interface TagListEntry {
  Key: string;
  Value?: string | null;
}
function fromTagListEntry(input?: TagListEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTagListEntry(root: jsonP.JSONValue): TagListEntry {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Ec2Config {
  SubnetArn: string;
  SecurityGroupArns: string[];
}
function fromEc2Config(input?: Ec2Config | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    SubnetArn: input["SubnetArn"],
    SecurityGroupArns: input["SecurityGroupArns"],
  }
}
function toEc2Config(root: jsonP.JSONValue): Ec2Config {
  return jsonP.readObj({
    required: {
      "SubnetArn": "s",
      "SecurityGroupArns": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface OnPremConfig {
  AgentArns: string[];
}
function fromOnPremConfig(input?: OnPremConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AgentArns: input["AgentArns"],
  }
}
function toOnPremConfig(root: jsonP.JSONValue): OnPremConfig {
  return jsonP.readObj({
    required: {
      "AgentArns": ["s"],
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface NfsMountOptions {
  Version?: NfsVersion | null;
}
function fromNfsMountOptions(input?: NfsMountOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Version: input["Version"],
  }
}
function toNfsMountOptions(root: jsonP.JSONValue): NfsMountOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Version": (x: jsonP.JSONValue) => cmnP.readEnum<NfsVersion>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type NfsVersion =
| "AUTOMATIC"
| "NFS3"
| "NFS4_0"
| "NFS4_1"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ObjectStorageServerProtocol =
| "HTTPS"
| "HTTP"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type S3StorageClass =
| "STANDARD"
| "STANDARD_IA"
| "ONEZONE_IA"
| "INTELLIGENT_TIERING"
| "GLACIER"
| "DEEP_ARCHIVE"
| "OUTPOSTS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface S3Config {
  BucketAccessRoleArn: string;
}
function fromS3Config(input?: S3Config | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketAccessRoleArn: input["BucketAccessRoleArn"],
  }
}
function toS3Config(root: jsonP.JSONValue): S3Config {
  return jsonP.readObj({
    required: {
      "BucketAccessRoleArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SmbMountOptions {
  Version?: SmbVersion | null;
}
function fromSmbMountOptions(input?: SmbMountOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Version: input["Version"],
  }
}
function toSmbMountOptions(root: jsonP.JSONValue): SmbMountOptions {
  return jsonP.readObj({
    required: {},
    optional: {
      "Version": (x: jsonP.JSONValue) => cmnP.readEnum<SmbVersion>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type SmbVersion =
| "AUTOMATIC"
| "SMB2"
| "SMB3"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface Options {
  VerifyMode?: VerifyMode | null;
  OverwriteMode?: OverwriteMode | null;
  Atime?: Atime | null;
  Mtime?: Mtime | null;
  Uid?: Uid | null;
  Gid?: Gid | null;
  PreserveDeletedFiles?: PreserveDeletedFiles | null;
  PreserveDevices?: PreserveDevices | null;
  PosixPermissions?: PosixPermissions | null;
  BytesPerSecond?: number | null;
  TaskQueueing?: TaskQueueing | null;
  LogLevel?: LogLevel | null;
  TransferMode?: TransferMode | null;
}
function fromOptions(input?: Options | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    VerifyMode: input["VerifyMode"],
    OverwriteMode: input["OverwriteMode"],
    Atime: input["Atime"],
    Mtime: input["Mtime"],
    Uid: input["Uid"],
    Gid: input["Gid"],
    PreserveDeletedFiles: input["PreserveDeletedFiles"],
    PreserveDevices: input["PreserveDevices"],
    PosixPermissions: input["PosixPermissions"],
    BytesPerSecond: input["BytesPerSecond"],
    TaskQueueing: input["TaskQueueing"],
    LogLevel: input["LogLevel"],
    TransferMode: input["TransferMode"],
  }
}
function toOptions(root: jsonP.JSONValue): Options {
  return jsonP.readObj({
    required: {},
    optional: {
      "VerifyMode": (x: jsonP.JSONValue) => cmnP.readEnum<VerifyMode>(x),
      "OverwriteMode": (x: jsonP.JSONValue) => cmnP.readEnum<OverwriteMode>(x),
      "Atime": (x: jsonP.JSONValue) => cmnP.readEnum<Atime>(x),
      "Mtime": (x: jsonP.JSONValue) => cmnP.readEnum<Mtime>(x),
      "Uid": (x: jsonP.JSONValue) => cmnP.readEnum<Uid>(x),
      "Gid": (x: jsonP.JSONValue) => cmnP.readEnum<Gid>(x),
      "PreserveDeletedFiles": (x: jsonP.JSONValue) => cmnP.readEnum<PreserveDeletedFiles>(x),
      "PreserveDevices": (x: jsonP.JSONValue) => cmnP.readEnum<PreserveDevices>(x),
      "PosixPermissions": (x: jsonP.JSONValue) => cmnP.readEnum<PosixPermissions>(x),
      "BytesPerSecond": "n",
      "TaskQueueing": (x: jsonP.JSONValue) => cmnP.readEnum<TaskQueueing>(x),
      "LogLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LogLevel>(x),
      "TransferMode": (x: jsonP.JSONValue) => cmnP.readEnum<TransferMode>(x),
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type VerifyMode =
| "POINT_IN_TIME_CONSISTENT"
| "ONLY_FILES_TRANSFERRED"
| "NONE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type OverwriteMode =
| "ALWAYS"
| "NEVER"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type Atime =
| "NONE"
| "BEST_EFFORT"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type Mtime =
| "NONE"
| "PRESERVE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type Uid =
| "NONE"
| "INT_VALUE"
| "NAME"
| "BOTH"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type Gid =
| "NONE"
| "INT_VALUE"
| "NAME"
| "BOTH"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type PreserveDeletedFiles =
| "PRESERVE"
| "REMOVE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type PreserveDevices =
| "NONE"
| "PRESERVE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type PosixPermissions =
| "NONE"
| "PRESERVE"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type TaskQueueing =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type LogLevel =
| "OFF"
| "BASIC"
| "TRANSFER"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type TransferMode =
| "CHANGED"
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface FilterRule {
  FilterType?: FilterType | null;
  Value?: string | null;
}
function fromFilterRule(input?: FilterRule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FilterType: input["FilterType"],
    Value: input["Value"],
  }
}
function toFilterRule(root: jsonP.JSONValue): FilterRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "FilterType": (x: jsonP.JSONValue) => cmnP.readEnum<FilterType>(x),
      "Value": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type FilterType =
| "SIMPLE_PATTERN"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface TaskSchedule {
  ScheduleExpression: string;
}
function fromTaskSchedule(input?: TaskSchedule | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ScheduleExpression: input["ScheduleExpression"],
  }
}
function toTaskSchedule(root: jsonP.JSONValue): TaskSchedule {
  return jsonP.readObj({
    required: {
      "ScheduleExpression": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface LocationFilter {
  Name: LocationFilterName;
  Values: string[];
  Operator: Operator;
}
function fromLocationFilter(input?: LocationFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
    Operator: input["Operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type LocationFilterName =
| "LocationUri"
| "LocationType"
| "CreationTime"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum
export type Operator =
| "Equals"
| "NotEquals"
| "In"
| "LessThanOrEqual"
| "LessThan"
| "GreaterThanOrEqual"
| "GreaterThan"
| "Contains"
| "NotContains"
| "BeginsWith"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface TaskFilter {
  Name: TaskFilterName;
  Values: string[];
  Operator: Operator;
}
function fromTaskFilter(input?: TaskFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
    Operator: input["Operator"],
  }
}

// refs: 1 - tags: input, named, enum
export type TaskFilterName =
| "LocationId"
| "CreationTime"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type AgentStatus =
| "ONLINE"
| "OFFLINE"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type EndpointType =
| "PUBLIC"
| "PRIVATE_LINK"
| "FIPS"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface PrivateLinkConfig {
  VpcEndpointId?: string | null;
  PrivateLinkEndpoint?: string | null;
  SubnetArns?: string[] | null;
  SecurityGroupArns?: string[] | null;
}
function toPrivateLinkConfig(root: jsonP.JSONValue): PrivateLinkConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "VpcEndpointId": "s",
      "PrivateLinkEndpoint": "s",
      "SubnetArns": ["s"],
      "SecurityGroupArns": ["s"],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type TaskStatus =
| "AVAILABLE"
| "CREATING"
| "QUEUED"
| "RUNNING"
| "UNAVAILABLE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, enum
export type TaskExecutionStatus =
| "QUEUED"
| "LAUNCHING"
| "PREPARING"
| "TRANSFERRING"
| "VERIFYING"
| "SUCCESS"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface TaskExecutionResultDetail {
  PrepareDuration?: number | null;
  PrepareStatus?: PhaseStatus | null;
  TotalDuration?: number | null;
  TransferDuration?: number | null;
  TransferStatus?: PhaseStatus | null;
  VerifyDuration?: number | null;
  VerifyStatus?: PhaseStatus | null;
  ErrorCode?: string | null;
  ErrorDetail?: string | null;
}
function toTaskExecutionResultDetail(root: jsonP.JSONValue): TaskExecutionResultDetail {
  return jsonP.readObj({
    required: {},
    optional: {
      "PrepareDuration": "n",
      "PrepareStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PhaseStatus>(x),
      "TotalDuration": "n",
      "TransferDuration": "n",
      "TransferStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PhaseStatus>(x),
      "VerifyDuration": "n",
      "VerifyStatus": (x: jsonP.JSONValue) => cmnP.readEnum<PhaseStatus>(x),
      "ErrorCode": "s",
      "ErrorDetail": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type PhaseStatus =
| "PENDING"
| "SUCCESS"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface AgentListEntry {
  AgentArn?: string | null;
  Name?: string | null;
  Status?: AgentStatus | null;
}
function toAgentListEntry(root: jsonP.JSONValue): AgentListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "AgentArn": "s",
      "Name": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<AgentStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LocationListEntry {
  LocationArn?: string | null;
  LocationUri?: string | null;
}
function toLocationListEntry(root: jsonP.JSONValue): LocationListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "LocationArn": "s",
      "LocationUri": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskExecutionListEntry {
  TaskExecutionArn?: string | null;
  Status?: TaskExecutionStatus | null;
}
function toTaskExecutionListEntry(root: jsonP.JSONValue): TaskExecutionListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "TaskExecutionArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<TaskExecutionStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskListEntry {
  TaskArn?: string | null;
  Status?: TaskStatus | null;
  Name?: string | null;
}
function toTaskListEntry(root: jsonP.JSONValue): TaskListEntry {
  return jsonP.readObj({
    required: {},
    optional: {
      "TaskArn": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<TaskStatus>(x),
      "Name": "s",
    },
  }, root);
}
