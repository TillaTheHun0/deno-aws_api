// Autogenerated API client for: AWS Key Management Service

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class KMS {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(KMS.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2014-11-01",
    "endpointPrefix": "kms",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "KMS",
    "serviceFullName": "AWS Key Management Service",
    "serviceId": "KMS",
    "signatureVersion": "v4",
    "targetPrefix": "TrentService",
    "uid": "kms-2014-11-01"
  };

  async cancelKeyDeletion(
    {abortSignal, ...params}: RequestConfig & CancelKeyDeletionRequest,
  ): Promise<CancelKeyDeletionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CancelKeyDeletion",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyId": "s",
      },
    }, await resp.json());
  }

  async connectCustomKeyStore(
    {abortSignal, ...params}: RequestConfig & ConnectCustomKeyStoreRequest,
  ): Promise<ConnectCustomKeyStoreResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConnectCustomKeyStore",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async createAlias(
    {abortSignal, ...params}: RequestConfig & CreateAliasRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAlias",
    });
  }

  async createCustomKeyStore(
    {abortSignal, ...params}: RequestConfig & CreateCustomKeyStoreRequest,
  ): Promise<CreateCustomKeyStoreResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCustomKeyStore",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CustomKeyStoreId": "s",
      },
    }, await resp.json());
  }

  async createGrant(
    {abortSignal, ...params}: RequestConfig & CreateGrantRequest,
  ): Promise<CreateGrantResponse> {
    const body: JSONObject = {...params,
    Constraints: fromGrantConstraints(params["Constraints"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGrant",
    });
    return prt.readObj({
      required: {},
      optional: {
        "GrantToken": "s",
        "GrantId": "s",
      },
    }, await resp.json());
  }

  async createKey(
    {abortSignal, ...params}: RequestConfig & CreateKeyRequest = {},
  ): Promise<CreateKeyResponse> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateKey",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyMetadata": toKeyMetadata,
      },
    }, await resp.json());
  }

  async decrypt(
    {abortSignal, ...params}: RequestConfig & DecryptRequest,
  ): Promise<DecryptResponse> {
    const body: JSONObject = {...params,
    CiphertextBlob: prt.serializeBlob(params["CiphertextBlob"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Decrypt",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyId": "s",
        "Plaintext": "a",
        "EncryptionAlgorithm": toEncryptionAlgorithmSpec,
      },
    }, await resp.json());
  }

  async deleteAlias(
    {abortSignal, ...params}: RequestConfig & DeleteAliasRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAlias",
    });
  }

  async deleteCustomKeyStore(
    {abortSignal, ...params}: RequestConfig & DeleteCustomKeyStoreRequest,
  ): Promise<DeleteCustomKeyStoreResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCustomKeyStore",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async deleteImportedKeyMaterial(
    {abortSignal, ...params}: RequestConfig & DeleteImportedKeyMaterialRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteImportedKeyMaterial",
    });
  }

  async describeCustomKeyStores(
    {abortSignal, ...params}: RequestConfig & DescribeCustomKeyStoresRequest = {},
  ): Promise<DescribeCustomKeyStoresResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeCustomKeyStores",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CustomKeyStores": [toCustomKeyStoresListEntry],
        "NextMarker": "s",
        "Truncated": "b",
      },
    }, await resp.json());
  }

  async describeKey(
    {abortSignal, ...params}: RequestConfig & DescribeKeyRequest,
  ): Promise<DescribeKeyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeKey",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyMetadata": toKeyMetadata,
      },
    }, await resp.json());
  }

  async disableKey(
    {abortSignal, ...params}: RequestConfig & DisableKeyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableKey",
    });
  }

  async disableKeyRotation(
    {abortSignal, ...params}: RequestConfig & DisableKeyRotationRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisableKeyRotation",
    });
  }

  async disconnectCustomKeyStore(
    {abortSignal, ...params}: RequestConfig & DisconnectCustomKeyStoreRequest,
  ): Promise<DisconnectCustomKeyStoreResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DisconnectCustomKeyStore",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async enableKey(
    {abortSignal, ...params}: RequestConfig & EnableKeyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableKey",
    });
  }

  async enableKeyRotation(
    {abortSignal, ...params}: RequestConfig & EnableKeyRotationRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "EnableKeyRotation",
    });
  }

  async encrypt(
    {abortSignal, ...params}: RequestConfig & EncryptRequest,
  ): Promise<EncryptResponse> {
    const body: JSONObject = {...params,
    Plaintext: prt.serializeBlob(params["Plaintext"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Encrypt",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CiphertextBlob": "a",
        "KeyId": "s",
        "EncryptionAlgorithm": toEncryptionAlgorithmSpec,
      },
    }, await resp.json());
  }

  async generateDataKey(
    {abortSignal, ...params}: RequestConfig & GenerateDataKeyRequest,
  ): Promise<GenerateDataKeyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateDataKey",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CiphertextBlob": "a",
        "Plaintext": "a",
        "KeyId": "s",
      },
    }, await resp.json());
  }

  async generateDataKeyPair(
    {abortSignal, ...params}: RequestConfig & GenerateDataKeyPairRequest,
  ): Promise<GenerateDataKeyPairResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateDataKeyPair",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PrivateKeyCiphertextBlob": "a",
        "PrivateKeyPlaintext": "a",
        "PublicKey": "a",
        "KeyId": "s",
        "KeyPairSpec": toDataKeyPairSpec,
      },
    }, await resp.json());
  }

  async generateDataKeyPairWithoutPlaintext(
    {abortSignal, ...params}: RequestConfig & GenerateDataKeyPairWithoutPlaintextRequest,
  ): Promise<GenerateDataKeyPairWithoutPlaintextResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateDataKeyPairWithoutPlaintext",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PrivateKeyCiphertextBlob": "a",
        "PublicKey": "a",
        "KeyId": "s",
        "KeyPairSpec": toDataKeyPairSpec,
      },
    }, await resp.json());
  }

  async generateDataKeyWithoutPlaintext(
    {abortSignal, ...params}: RequestConfig & GenerateDataKeyWithoutPlaintextRequest,
  ): Promise<GenerateDataKeyWithoutPlaintextResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateDataKeyWithoutPlaintext",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CiphertextBlob": "a",
        "KeyId": "s",
      },
    }, await resp.json());
  }

  async generateRandom(
    {abortSignal, ...params}: RequestConfig & GenerateRandomRequest = {},
  ): Promise<GenerateRandomResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GenerateRandom",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Plaintext": "a",
      },
    }, await resp.json());
  }

  async getKeyPolicy(
    {abortSignal, ...params}: RequestConfig & GetKeyPolicyRequest,
  ): Promise<GetKeyPolicyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetKeyPolicy",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Policy": "s",
      },
    }, await resp.json());
  }

  async getKeyRotationStatus(
    {abortSignal, ...params}: RequestConfig & GetKeyRotationStatusRequest,
  ): Promise<GetKeyRotationStatusResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetKeyRotationStatus",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyRotationEnabled": "b",
      },
    }, await resp.json());
  }

  async getParametersForImport(
    {abortSignal, ...params}: RequestConfig & GetParametersForImportRequest,
  ): Promise<GetParametersForImportResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetParametersForImport",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyId": "s",
        "ImportToken": "a",
        "PublicKey": "a",
        "ParametersValidTo": "d",
      },
    }, await resp.json());
  }

  async getPublicKey(
    {abortSignal, ...params}: RequestConfig & GetPublicKeyRequest,
  ): Promise<GetPublicKeyResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPublicKey",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyId": "s",
        "PublicKey": "a",
        "CustomerMasterKeySpec": toCustomerMasterKeySpec,
        "KeyUsage": toKeyUsageType,
        "EncryptionAlgorithms": [toEncryptionAlgorithmSpec],
        "SigningAlgorithms": [toSigningAlgorithmSpec],
      },
    }, await resp.json());
  }

  async importKeyMaterial(
    {abortSignal, ...params}: RequestConfig & ImportKeyMaterialRequest,
  ): Promise<ImportKeyMaterialResponse> {
    const body: JSONObject = {...params,
    ImportToken: prt.serializeBlob(params["ImportToken"]),
    EncryptedKeyMaterial: prt.serializeBlob(params["EncryptedKeyMaterial"]),
    ValidTo: prt.serializeDate_unixTimestamp(params["ValidTo"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ImportKeyMaterial",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async listAliases(
    {abortSignal, ...params}: RequestConfig & ListAliasesRequest = {},
  ): Promise<ListAliasesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAliases",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Aliases": [toAliasListEntry],
        "NextMarker": "s",
        "Truncated": "b",
      },
    }, await resp.json());
  }

  async listGrants(
    {abortSignal, ...params}: RequestConfig & ListGrantsRequest,
  ): Promise<ListGrantsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListGrants",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Grants": [toGrantListEntry],
        "NextMarker": "s",
        "Truncated": "b",
      },
    }, await resp.json());
  }

  async listKeyPolicies(
    {abortSignal, ...params}: RequestConfig & ListKeyPoliciesRequest,
  ): Promise<ListKeyPoliciesResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListKeyPolicies",
    });
    return prt.readObj({
      required: {},
      optional: {
        "PolicyNames": ["s"],
        "NextMarker": "s",
        "Truncated": "b",
      },
    }, await resp.json());
  }

  async listKeys(
    {abortSignal, ...params}: RequestConfig & ListKeysRequest = {},
  ): Promise<ListKeysResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListKeys",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Keys": [toKeyListEntry],
        "NextMarker": "s",
        "Truncated": "b",
      },
    }, await resp.json());
  }

  async listResourceTags(
    {abortSignal, ...params}: RequestConfig & ListResourceTagsRequest,
  ): Promise<ListResourceTagsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceTags",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
        "NextMarker": "s",
        "Truncated": "b",
      },
    }, await resp.json());
  }

  async listRetirableGrants(
    {abortSignal, ...params}: RequestConfig & ListRetirableGrantsRequest,
  ): Promise<ListGrantsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListRetirableGrants",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Grants": [toGrantListEntry],
        "NextMarker": "s",
        "Truncated": "b",
      },
    }, await resp.json());
  }

  async putKeyPolicy(
    {abortSignal, ...params}: RequestConfig & PutKeyPolicyRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutKeyPolicy",
    });
  }

  async reEncrypt(
    {abortSignal, ...params}: RequestConfig & ReEncryptRequest,
  ): Promise<ReEncryptResponse> {
    const body: JSONObject = {...params,
    CiphertextBlob: prt.serializeBlob(params["CiphertextBlob"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ReEncrypt",
    });
    return prt.readObj({
      required: {},
      optional: {
        "CiphertextBlob": "a",
        "SourceKeyId": "s",
        "KeyId": "s",
        "SourceEncryptionAlgorithm": toEncryptionAlgorithmSpec,
        "DestinationEncryptionAlgorithm": toEncryptionAlgorithmSpec,
      },
    }, await resp.json());
  }

  async retireGrant(
    {abortSignal, ...params}: RequestConfig & RetireGrantRequest = {},
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RetireGrant",
    });
  }

  async revokeGrant(
    {abortSignal, ...params}: RequestConfig & RevokeGrantRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RevokeGrant",
    });
  }

  async scheduleKeyDeletion(
    {abortSignal, ...params}: RequestConfig & ScheduleKeyDeletionRequest,
  ): Promise<ScheduleKeyDeletionResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ScheduleKeyDeletion",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyId": "s",
        "DeletionDate": "d",
      },
    }, await resp.json());
  }

  async sign(
    {abortSignal, ...params}: RequestConfig & SignRequest,
  ): Promise<SignResponse> {
    const body: JSONObject = {...params,
    Message: prt.serializeBlob(params["Message"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Sign",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyId": "s",
        "Signature": "a",
        "SigningAlgorithm": toSigningAlgorithmSpec,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
  }

  async updateAlias(
    {abortSignal, ...params}: RequestConfig & UpdateAliasRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAlias",
    });
  }

  async updateCustomKeyStore(
    {abortSignal, ...params}: RequestConfig & UpdateCustomKeyStoreRequest,
  ): Promise<UpdateCustomKeyStoreResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateCustomKeyStore",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateKeyDescription(
    {abortSignal, ...params}: RequestConfig & UpdateKeyDescriptionRequest,
  ): Promise<void> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateKeyDescription",
    });
  }

  async verify(
    {abortSignal, ...params}: RequestConfig & VerifyRequest,
  ): Promise<VerifyResponse> {
    const body: JSONObject = {...params,
    Message: prt.serializeBlob(params["Message"]),
    Signature: prt.serializeBlob(params["Signature"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "Verify",
    });
    return prt.readObj({
      required: {},
      optional: {
        "KeyId": "s",
        "SignatureValid": "b",
        "SigningAlgorithm": toSigningAlgorithmSpec,
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CancelKeyDeletionRequest {
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface ConnectCustomKeyStoreRequest {
  CustomKeyStoreId: string;
}

// refs: 1 - tags: named, input
export interface CreateAliasRequest {
  AliasName: string;
  TargetKeyId: string;
}

// refs: 1 - tags: named, input
export interface CreateCustomKeyStoreRequest {
  CustomKeyStoreName: string;
  CloudHsmClusterId: string;
  TrustAnchorCertificate: string;
  KeyStorePassword: string;
}

// refs: 1 - tags: named, input
export interface CreateGrantRequest {
  KeyId: string;
  GranteePrincipal: string;
  RetiringPrincipal?: string | null;
  Operations: GrantOperation[];
  Constraints?: GrantConstraints | null;
  GrantTokens?: string[] | null;
  Name?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateKeyRequest {
  Policy?: string | null;
  Description?: string | null;
  KeyUsage?: KeyUsageType | null;
  CustomerMasterKeySpec?: CustomerMasterKeySpec | null;
  Origin?: OriginType | null;
  CustomKeyStoreId?: string | null;
  BypassPolicyLockoutSafetyCheck?: boolean | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DecryptRequest {
  CiphertextBlob: Uint8Array | string;
  EncryptionContext?: { [key: string]: string } | null;
  GrantTokens?: string[] | null;
  KeyId?: string | null;
  EncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
}

// refs: 1 - tags: named, input
export interface DeleteAliasRequest {
  AliasName: string;
}

// refs: 1 - tags: named, input
export interface DeleteCustomKeyStoreRequest {
  CustomKeyStoreId: string;
}

// refs: 1 - tags: named, input
export interface DeleteImportedKeyMaterialRequest {
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface DescribeCustomKeyStoresRequest {
  CustomKeyStoreId?: string | null;
  CustomKeyStoreName?: string | null;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeKeyRequest {
  KeyId: string;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, input
export interface DisableKeyRequest {
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface DisableKeyRotationRequest {
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface DisconnectCustomKeyStoreRequest {
  CustomKeyStoreId: string;
}

// refs: 1 - tags: named, input
export interface EnableKeyRequest {
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface EnableKeyRotationRequest {
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface EncryptRequest {
  KeyId: string;
  Plaintext: Uint8Array | string;
  EncryptionContext?: { [key: string]: string } | null;
  GrantTokens?: string[] | null;
  EncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
}

// refs: 1 - tags: named, input
export interface GenerateDataKeyRequest {
  KeyId: string;
  EncryptionContext?: { [key: string]: string } | null;
  NumberOfBytes?: number | null;
  KeySpec?: DataKeySpec | null;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GenerateDataKeyPairRequest {
  EncryptionContext?: { [key: string]: string } | null;
  KeyId: string;
  KeyPairSpec: DataKeyPairSpec;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GenerateDataKeyPairWithoutPlaintextRequest {
  EncryptionContext?: { [key: string]: string } | null;
  KeyId: string;
  KeyPairSpec: DataKeyPairSpec;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GenerateDataKeyWithoutPlaintextRequest {
  KeyId: string;
  EncryptionContext?: { [key: string]: string } | null;
  KeySpec?: DataKeySpec | null;
  NumberOfBytes?: number | null;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, input
export interface GenerateRandomRequest {
  NumberOfBytes?: number | null;
  CustomKeyStoreId?: string | null;
}

// refs: 1 - tags: named, input
export interface GetKeyPolicyRequest {
  KeyId: string;
  PolicyName: string;
}

// refs: 1 - tags: named, input
export interface GetKeyRotationStatusRequest {
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface GetParametersForImportRequest {
  KeyId: string;
  WrappingAlgorithm: AlgorithmSpec;
  WrappingKeySpec: WrappingKeySpec;
}

// refs: 1 - tags: named, input
export interface GetPublicKeyRequest {
  KeyId: string;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, input
export interface ImportKeyMaterialRequest {
  KeyId: string;
  ImportToken: Uint8Array | string;
  EncryptedKeyMaterial: Uint8Array | string;
  ValidTo?: Date | number | null;
  ExpirationModel?: ExpirationModelType | null;
}

// refs: 1 - tags: named, input
export interface ListAliasesRequest {
  KeyId?: string | null;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface ListGrantsRequest {
  Limit?: number | null;
  Marker?: string | null;
  KeyId: string;
}

// refs: 1 - tags: named, input
export interface ListKeyPoliciesRequest {
  KeyId: string;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface ListKeysRequest {
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface ListResourceTagsRequest {
  KeyId: string;
  Limit?: number | null;
  Marker?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRetirableGrantsRequest {
  Limit?: number | null;
  Marker?: string | null;
  RetiringPrincipal: string;
}

// refs: 1 - tags: named, input
export interface PutKeyPolicyRequest {
  KeyId: string;
  PolicyName: string;
  Policy: string;
  BypassPolicyLockoutSafetyCheck?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ReEncryptRequest {
  CiphertextBlob: Uint8Array | string;
  SourceEncryptionContext?: { [key: string]: string } | null;
  SourceKeyId?: string | null;
  DestinationKeyId: string;
  DestinationEncryptionContext?: { [key: string]: string } | null;
  SourceEncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
  DestinationEncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, input
export interface RetireGrantRequest {
  GrantToken?: string | null;
  KeyId?: string | null;
  GrantId?: string | null;
}

// refs: 1 - tags: named, input
export interface RevokeGrantRequest {
  KeyId: string;
  GrantId: string;
}

// refs: 1 - tags: named, input
export interface ScheduleKeyDeletionRequest {
  KeyId: string;
  PendingWindowInDays?: number | null;
}

// refs: 1 - tags: named, input
export interface SignRequest {
  KeyId: string;
  Message: Uint8Array | string;
  MessageType?: MessageType | null;
  GrantTokens?: string[] | null;
  SigningAlgorithm: SigningAlgorithmSpec;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  KeyId: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  KeyId: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAliasRequest {
  AliasName: string;
  TargetKeyId: string;
}

// refs: 1 - tags: named, input
export interface UpdateCustomKeyStoreRequest {
  CustomKeyStoreId: string;
  NewCustomKeyStoreName?: string | null;
  KeyStorePassword?: string | null;
  CloudHsmClusterId?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateKeyDescriptionRequest {
  KeyId: string;
  Description: string;
}

// refs: 1 - tags: named, input
export interface VerifyRequest {
  KeyId: string;
  Message: Uint8Array | string;
  MessageType?: MessageType | null;
  Signature: Uint8Array | string;
  SigningAlgorithm: SigningAlgorithmSpec;
  GrantTokens?: string[] | null;
}

// refs: 1 - tags: named, output
export interface CancelKeyDeletionResponse {
  KeyId?: string | null;
}

// refs: 1 - tags: named, output
export interface ConnectCustomKeyStoreResponse {
}

// refs: 1 - tags: named, output
export interface CreateCustomKeyStoreResponse {
  CustomKeyStoreId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateGrantResponse {
  GrantToken?: string | null;
  GrantId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateKeyResponse {
  KeyMetadata?: KeyMetadata | null;
}

// refs: 1 - tags: named, output
export interface DecryptResponse {
  KeyId?: string | null;
  Plaintext?: Uint8Array | string | null;
  EncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
}

// refs: 1 - tags: named, output
export interface DeleteCustomKeyStoreResponse {
}

// refs: 1 - tags: named, output
export interface DescribeCustomKeyStoresResponse {
  CustomKeyStores?: CustomKeyStoresListEntry[] | null;
  NextMarker?: string | null;
  Truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface DescribeKeyResponse {
  KeyMetadata?: KeyMetadata | null;
}

// refs: 1 - tags: named, output
export interface DisconnectCustomKeyStoreResponse {
}

// refs: 1 - tags: named, output
export interface EncryptResponse {
  CiphertextBlob?: Uint8Array | string | null;
  KeyId?: string | null;
  EncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
}

// refs: 1 - tags: named, output
export interface GenerateDataKeyResponse {
  CiphertextBlob?: Uint8Array | string | null;
  Plaintext?: Uint8Array | string | null;
  KeyId?: string | null;
}

// refs: 1 - tags: named, output
export interface GenerateDataKeyPairResponse {
  PrivateKeyCiphertextBlob?: Uint8Array | string | null;
  PrivateKeyPlaintext?: Uint8Array | string | null;
  PublicKey?: Uint8Array | string | null;
  KeyId?: string | null;
  KeyPairSpec?: DataKeyPairSpec | null;
}

// refs: 1 - tags: named, output
export interface GenerateDataKeyPairWithoutPlaintextResponse {
  PrivateKeyCiphertextBlob?: Uint8Array | string | null;
  PublicKey?: Uint8Array | string | null;
  KeyId?: string | null;
  KeyPairSpec?: DataKeyPairSpec | null;
}

// refs: 1 - tags: named, output
export interface GenerateDataKeyWithoutPlaintextResponse {
  CiphertextBlob?: Uint8Array | string | null;
  KeyId?: string | null;
}

// refs: 1 - tags: named, output
export interface GenerateRandomResponse {
  Plaintext?: Uint8Array | string | null;
}

// refs: 1 - tags: named, output
export interface GetKeyPolicyResponse {
  Policy?: string | null;
}

// refs: 1 - tags: named, output
export interface GetKeyRotationStatusResponse {
  KeyRotationEnabled?: boolean | null;
}

// refs: 1 - tags: named, output
export interface GetParametersForImportResponse {
  KeyId?: string | null;
  ImportToken?: Uint8Array | string | null;
  PublicKey?: Uint8Array | string | null;
  ParametersValidTo?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface GetPublicKeyResponse {
  KeyId?: string | null;
  PublicKey?: Uint8Array | string | null;
  CustomerMasterKeySpec?: CustomerMasterKeySpec | null;
  KeyUsage?: KeyUsageType | null;
  EncryptionAlgorithms?: EncryptionAlgorithmSpec[] | null;
  SigningAlgorithms?: SigningAlgorithmSpec[] | null;
}

// refs: 1 - tags: named, output
export interface ImportKeyMaterialResponse {
}

// refs: 1 - tags: named, output
export interface ListAliasesResponse {
  Aliases?: AliasListEntry[] | null;
  NextMarker?: string | null;
  Truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ListGrantsResponse {
  Grants?: GrantListEntry[] | null;
  NextMarker?: string | null;
  Truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ListKeyPoliciesResponse {
  PolicyNames?: string[] | null;
  NextMarker?: string | null;
  Truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ListKeysResponse {
  Keys?: KeyListEntry[] | null;
  NextMarker?: string | null;
  Truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ListResourceTagsResponse {
  Tags?: Tag[] | null;
  NextMarker?: string | null;
  Truncated?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ReEncryptResponse {
  CiphertextBlob?: Uint8Array | string | null;
  SourceKeyId?: string | null;
  KeyId?: string | null;
  SourceEncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
  DestinationEncryptionAlgorithm?: EncryptionAlgorithmSpec | null;
}

// refs: 1 - tags: named, output
export interface ScheduleKeyDeletionResponse {
  KeyId?: string | null;
  DeletionDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface SignResponse {
  KeyId?: string | null;
  Signature?: Uint8Array | string | null;
  SigningAlgorithm?: SigningAlgorithmSpec | null;
}

// refs: 1 - tags: named, output
export interface UpdateCustomKeyStoreResponse {
}

// refs: 1 - tags: named, output
export interface VerifyResponse {
  KeyId?: string | null;
  SignatureValid?: boolean | null;
  SigningAlgorithm?: SigningAlgorithmSpec | null;
}

// refs: 2 - tags: input, named, enum, output
export type GrantOperation =
| "Decrypt"
| "Encrypt"
| "GenerateDataKey"
| "GenerateDataKeyWithoutPlaintext"
| "ReEncryptFrom"
| "ReEncryptTo"
| "Sign"
| "Verify"
| "GetPublicKey"
| "CreateGrant"
| "RetireGrant"
| "DescribeKey"
| "GenerateDataKeyPair"
| "GenerateDataKeyPairWithoutPlaintext"
;

function toGrantOperation(root: JSONValue): GrantOperation | null {
  return ( false
    || root == "Decrypt"
    || root == "Encrypt"
    || root == "GenerateDataKey"
    || root == "GenerateDataKeyWithoutPlaintext"
    || root == "ReEncryptFrom"
    || root == "ReEncryptTo"
    || root == "Sign"
    || root == "Verify"
    || root == "GetPublicKey"
    || root == "CreateGrant"
    || root == "RetireGrant"
    || root == "DescribeKey"
    || root == "GenerateDataKeyPair"
    || root == "GenerateDataKeyPairWithoutPlaintext"
  ) ? root : null;
}

// refs: 2 - tags: input, named, interface, output
export interface GrantConstraints {
  EncryptionContextSubset?: { [key: string]: string } | null;
  EncryptionContextEquals?: { [key: string]: string } | null;
}
function fromGrantConstraints(input?: GrantConstraints | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toGrantConstraints(root: JSONValue): GrantConstraints {
  return prt.readObj({
    required: {},
    optional: {
      "EncryptionContextSubset": x => prt.readMap(String, String, x),
      "EncryptionContextEquals": x => prt.readMap(String, String, x),
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type KeyUsageType =
| "SIGN_VERIFY"
| "ENCRYPT_DECRYPT"
;

function toKeyUsageType(root: JSONValue): KeyUsageType | null {
  return ( false
    || root == "SIGN_VERIFY"
    || root == "ENCRYPT_DECRYPT"
  ) ? root : null;
}

// refs: 4 - tags: input, named, enum, output
export type CustomerMasterKeySpec =
| "RSA_2048"
| "RSA_3072"
| "RSA_4096"
| "ECC_NIST_P256"
| "ECC_NIST_P384"
| "ECC_NIST_P521"
| "ECC_SECG_P256K1"
| "SYMMETRIC_DEFAULT"
;

function toCustomerMasterKeySpec(root: JSONValue): CustomerMasterKeySpec | null {
  return ( false
    || root == "RSA_2048"
    || root == "RSA_3072"
    || root == "RSA_4096"
    || root == "ECC_NIST_P256"
    || root == "ECC_NIST_P384"
    || root == "ECC_NIST_P521"
    || root == "ECC_SECG_P256K1"
    || root == "SYMMETRIC_DEFAULT"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type OriginType =
| "AWS_KMS"
| "EXTERNAL"
| "AWS_CLOUDHSM"
;

function toOriginType(root: JSONValue): OriginType | null {
  return ( false
    || root == "AWS_KMS"
    || root == "EXTERNAL"
    || root == "AWS_CLOUDHSM"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  TagKey: string;
  TagValue: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "TagKey": "s",
      "TagValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 11 - tags: input, named, enum, output
export type EncryptionAlgorithmSpec =
| "SYMMETRIC_DEFAULT"
| "RSAES_OAEP_SHA_1"
| "RSAES_OAEP_SHA_256"
;

function toEncryptionAlgorithmSpec(root: JSONValue): EncryptionAlgorithmSpec | null {
  return ( false
    || root == "SYMMETRIC_DEFAULT"
    || root == "RSAES_OAEP_SHA_1"
    || root == "RSAES_OAEP_SHA_256"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum
export type DataKeySpec =
| "AES_256"
| "AES_128"
;


// refs: 4 - tags: input, named, enum, output
export type DataKeyPairSpec =
| "RSA_2048"
| "RSA_3072"
| "RSA_4096"
| "ECC_NIST_P256"
| "ECC_NIST_P384"
| "ECC_NIST_P521"
| "ECC_SECG_P256K1"
;

function toDataKeyPairSpec(root: JSONValue): DataKeyPairSpec | null {
  return ( false
    || root == "RSA_2048"
    || root == "RSA_3072"
    || root == "RSA_4096"
    || root == "ECC_NIST_P256"
    || root == "ECC_NIST_P384"
    || root == "ECC_NIST_P521"
    || root == "ECC_SECG_P256K1"
  ) ? root : null;
}

// refs: 1 - tags: input, named, enum
export type AlgorithmSpec =
| "RSAES_PKCS1_V1_5"
| "RSAES_OAEP_SHA_1"
| "RSAES_OAEP_SHA_256"
;


// refs: 1 - tags: input, named, enum
export type WrappingKeySpec =
| "RSA_2048"
;


// refs: 3 - tags: input, named, enum, output
export type ExpirationModelType =
| "KEY_MATERIAL_EXPIRES"
| "KEY_MATERIAL_DOES_NOT_EXPIRE"
;

function toExpirationModelType(root: JSONValue): ExpirationModelType | null {
  return ( false
    || root == "KEY_MATERIAL_EXPIRES"
    || root == "KEY_MATERIAL_DOES_NOT_EXPIRE"
  ) ? root : null;
}

// refs: 2 - tags: input, named, enum
export type MessageType =
| "RAW"
| "DIGEST"
;


// refs: 7 - tags: input, named, enum, output
export type SigningAlgorithmSpec =
| "RSASSA_PSS_SHA_256"
| "RSASSA_PSS_SHA_384"
| "RSASSA_PSS_SHA_512"
| "RSASSA_PKCS1_V1_5_SHA_256"
| "RSASSA_PKCS1_V1_5_SHA_384"
| "RSASSA_PKCS1_V1_5_SHA_512"
| "ECDSA_SHA_256"
| "ECDSA_SHA_384"
| "ECDSA_SHA_512"
;

function toSigningAlgorithmSpec(root: JSONValue): SigningAlgorithmSpec | null {
  return ( false
    || root == "RSASSA_PSS_SHA_256"
    || root == "RSASSA_PSS_SHA_384"
    || root == "RSASSA_PSS_SHA_512"
    || root == "RSASSA_PKCS1_V1_5_SHA_256"
    || root == "RSASSA_PKCS1_V1_5_SHA_384"
    || root == "RSASSA_PKCS1_V1_5_SHA_512"
    || root == "ECDSA_SHA_256"
    || root == "ECDSA_SHA_384"
    || root == "ECDSA_SHA_512"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface KeyMetadata {
  AWSAccountId?: string | null;
  KeyId: string;
  Arn?: string | null;
  CreationDate?: Date | number | null;
  Enabled?: boolean | null;
  Description?: string | null;
  KeyUsage?: KeyUsageType | null;
  KeyState?: KeyState | null;
  DeletionDate?: Date | number | null;
  ValidTo?: Date | number | null;
  Origin?: OriginType | null;
  CustomKeyStoreId?: string | null;
  CloudHsmClusterId?: string | null;
  ExpirationModel?: ExpirationModelType | null;
  KeyManager?: KeyManagerType | null;
  CustomerMasterKeySpec?: CustomerMasterKeySpec | null;
  EncryptionAlgorithms?: EncryptionAlgorithmSpec[] | null;
  SigningAlgorithms?: SigningAlgorithmSpec[] | null;
}
function toKeyMetadata(root: JSONValue): KeyMetadata {
  return prt.readObj({
    required: {
      "KeyId": "s",
    },
    optional: {
      "AWSAccountId": "s",
      "Arn": "s",
      "CreationDate": "d",
      "Enabled": "b",
      "Description": "s",
      "KeyUsage": toKeyUsageType,
      "KeyState": toKeyState,
      "DeletionDate": "d",
      "ValidTo": "d",
      "Origin": toOriginType,
      "CustomKeyStoreId": "s",
      "CloudHsmClusterId": "s",
      "ExpirationModel": toExpirationModelType,
      "KeyManager": toKeyManagerType,
      "CustomerMasterKeySpec": toCustomerMasterKeySpec,
      "EncryptionAlgorithms": [toEncryptionAlgorithmSpec],
      "SigningAlgorithms": [toSigningAlgorithmSpec],
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type KeyState =
| "Enabled"
| "Disabled"
| "PendingDeletion"
| "PendingImport"
| "Unavailable"
;
function toKeyState(root: JSONValue): KeyState | null {
  return ( false
    || root == "Enabled"
    || root == "Disabled"
    || root == "PendingDeletion"
    || root == "PendingImport"
    || root == "Unavailable"
  ) ? root : null;
}

// refs: 2 - tags: output, named, enum
export type KeyManagerType =
| "AWS"
| "CUSTOMER"
;
function toKeyManagerType(root: JSONValue): KeyManagerType | null {
  return ( false
    || root == "AWS"
    || root == "CUSTOMER"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface CustomKeyStoresListEntry {
  CustomKeyStoreId?: string | null;
  CustomKeyStoreName?: string | null;
  CloudHsmClusterId?: string | null;
  TrustAnchorCertificate?: string | null;
  ConnectionState?: ConnectionStateType | null;
  ConnectionErrorCode?: ConnectionErrorCodeType | null;
  CreationDate?: Date | number | null;
}
function toCustomKeyStoresListEntry(root: JSONValue): CustomKeyStoresListEntry {
  return prt.readObj({
    required: {},
    optional: {
      "CustomKeyStoreId": "s",
      "CustomKeyStoreName": "s",
      "CloudHsmClusterId": "s",
      "TrustAnchorCertificate": "s",
      "ConnectionState": toConnectionStateType,
      "ConnectionErrorCode": toConnectionErrorCodeType,
      "CreationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ConnectionStateType =
| "CONNECTED"
| "CONNECTING"
| "FAILED"
| "DISCONNECTED"
| "DISCONNECTING"
;
function toConnectionStateType(root: JSONValue): ConnectionStateType | null {
  return ( false
    || root == "CONNECTED"
    || root == "CONNECTING"
    || root == "FAILED"
    || root == "DISCONNECTED"
    || root == "DISCONNECTING"
  ) ? root : null;
}

// refs: 1 - tags: output, named, enum
export type ConnectionErrorCodeType =
| "INVALID_CREDENTIALS"
| "CLUSTER_NOT_FOUND"
| "NETWORK_ERRORS"
| "INTERNAL_ERROR"
| "INSUFFICIENT_CLOUDHSM_HSMS"
| "USER_LOCKED_OUT"
| "USER_NOT_FOUND"
| "USER_LOGGED_IN"
| "SUBNET_NOT_FOUND"
;
function toConnectionErrorCodeType(root: JSONValue): ConnectionErrorCodeType | null {
  return ( false
    || root == "INVALID_CREDENTIALS"
    || root == "CLUSTER_NOT_FOUND"
    || root == "NETWORK_ERRORS"
    || root == "INTERNAL_ERROR"
    || root == "INSUFFICIENT_CLOUDHSM_HSMS"
    || root == "USER_LOCKED_OUT"
    || root == "USER_NOT_FOUND"
    || root == "USER_LOGGED_IN"
    || root == "SUBNET_NOT_FOUND"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface AliasListEntry {
  AliasName?: string | null;
  AliasArn?: string | null;
  TargetKeyId?: string | null;
}
function toAliasListEntry(root: JSONValue): AliasListEntry {
  return prt.readObj({
    required: {},
    optional: {
      "AliasName": "s",
      "AliasArn": "s",
      "TargetKeyId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface GrantListEntry {
  KeyId?: string | null;
  GrantId?: string | null;
  Name?: string | null;
  CreationDate?: Date | number | null;
  GranteePrincipal?: string | null;
  RetiringPrincipal?: string | null;
  IssuingAccount?: string | null;
  Operations?: GrantOperation[] | null;
  Constraints?: GrantConstraints | null;
}
function toGrantListEntry(root: JSONValue): GrantListEntry {
  return prt.readObj({
    required: {},
    optional: {
      "KeyId": "s",
      "GrantId": "s",
      "Name": "s",
      "CreationDate": "d",
      "GranteePrincipal": "s",
      "RetiringPrincipal": "s",
      "IssuingAccount": "s",
      "Operations": [toGrantOperation],
      "Constraints": toGrantConstraints,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface KeyListEntry {
  KeyId?: string | null;
  KeyArn?: string | null;
}
function toKeyListEntry(root: JSONValue): KeyListEntry {
  return prt.readObj({
    required: {},
    optional: {
      "KeyId": "s",
      "KeyArn": "s",
    },
  }, root);
}
