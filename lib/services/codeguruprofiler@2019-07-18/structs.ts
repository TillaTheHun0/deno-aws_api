// Autogenerated API structures for: Amazon CodeGuru Profiler

import * as cmnP from "../../encoding/common.ts";

// refs: 1 - tags: named, input
export interface AddNotificationChannelsRequest {
  channels: Channel[];
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface BatchGetFrameMetricDataRequest {
  endTime?: Date | number | null;
  frameMetrics?: FrameMetric[] | null;
  period?: string | null;
  profilingGroupName: string;
  startTime?: Date | number | null;
  targetResolution?: AggregationPeriod | null;
}

// refs: 1 - tags: named, input
export interface ConfigureAgentRequest {
  fleetInstanceId?: string | null;
  metadata?: { [key in MetadataField]: string | null | undefined } | null;
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface CreateProfilingGroupRequest {
  agentOrchestrationConfig?: AgentOrchestrationConfig | null;
  clientToken: string;
  computePlatform?: ComputePlatform | null;
  profilingGroupName: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteProfilingGroupRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface DescribeProfilingGroupRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface GetFindingsReportAccountSummaryRequest {
  dailyReportsOnly?: boolean | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetNotificationConfigurationRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface GetPolicyRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface GetProfileRequest {
  accept?: string | null;
  endTime?: Date | number | null;
  maxDepth?: number | null;
  period?: string | null;
  profilingGroupName: string;
  startTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface GetRecommendationsRequest {
  endTime: Date | number;
  locale?: string | null;
  profilingGroupName: string;
  startTime: Date | number;
}

// refs: 1 - tags: named, input
export interface ListFindingsReportsRequest {
  dailyReportsOnly?: boolean | null;
  endTime: Date | number;
  maxResults?: number | null;
  nextToken?: string | null;
  profilingGroupName: string;
  startTime: Date | number;
}

// refs: 1 - tags: named, input
export interface ListProfileTimesRequest {
  endTime: Date | number;
  maxResults?: number | null;
  nextToken?: string | null;
  orderBy?: OrderBy | null;
  period: AggregationPeriod;
  profilingGroupName: string;
  startTime: Date | number;
}

// refs: 1 - tags: named, input
export interface ListProfilingGroupsRequest {
  includeDescription?: boolean | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PostAgentProfileRequest {
  agentProfile: Uint8Array | string;
  contentType: string;
  profileToken?: string | null;
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface PutPermissionRequest {
  actionGroup: ActionGroup;
  principals: string[];
  profilingGroupName: string;
  revisionId?: string | null;
}

// refs: 1 - tags: named, input
export interface RemoveNotificationChannelRequest {
  channelId: string;
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface RemovePermissionRequest {
  actionGroup: ActionGroup;
  profilingGroupName: string;
  revisionId: string;
}

// refs: 1 - tags: named, input
export interface SubmitFeedbackRequest {
  anomalyInstanceId: string;
  comment?: string | null;
  profilingGroupName: string;
  type: FeedbackType;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateProfilingGroupRequest {
  agentOrchestrationConfig: AgentOrchestrationConfig;
  profilingGroupName: string;
}

// refs: 1 - tags: named, output
export interface AddNotificationChannelsResponse {
  notificationConfiguration?: NotificationConfiguration | null;
}

// refs: 1 - tags: named, output
export interface BatchGetFrameMetricDataResponse {
  endTime: Date | number;
  endTimes: TimestampStructure[];
  frameMetricData: FrameMetricDatum[];
  resolution: AggregationPeriod;
  startTime: Date | number;
  unprocessedEndTimes: { [key: string]: TimestampStructure[] | null | undefined };
}

// refs: 1 - tags: named, output
export interface ConfigureAgentResponse {
  configuration: AgentConfiguration;
}

// refs: 1 - tags: named, output
export interface CreateProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription;
}

// refs: 1 - tags: named, output
export interface DeleteProfilingGroupResponse {
}

// refs: 1 - tags: named, output
export interface DescribeProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription;
}

// refs: 1 - tags: named, output
export interface GetFindingsReportAccountSummaryResponse {
  nextToken?: string | null;
  reportSummaries: FindingsReportSummary[];
}

// refs: 1 - tags: named, output
export interface GetNotificationConfigurationResponse {
  notificationConfiguration: NotificationConfiguration;
}

// refs: 1 - tags: named, output
export interface GetPolicyResponse {
  policy: string;
  revisionId: string;
}

// refs: 1 - tags: named, output
export interface GetProfileResponse {
  contentEncoding?: string | null;
  contentType: string;
  profile: Uint8Array | string;
}

// refs: 1 - tags: named, output
export interface GetRecommendationsResponse {
  anomalies: Anomaly[];
  profileEndTime: Date | number;
  profileStartTime: Date | number;
  profilingGroupName: string;
  recommendations: Recommendation[];
}

// refs: 1 - tags: named, output
export interface ListFindingsReportsResponse {
  findingsReportSummaries: FindingsReportSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProfileTimesResponse {
  nextToken?: string | null;
  profileTimes: ProfileTime[];
}

// refs: 1 - tags: named, output
export interface ListProfilingGroupsResponse {
  nextToken?: string | null;
  profilingGroupNames: string[];
  profilingGroups?: ProfilingGroupDescription[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PostAgentProfileResponse {
}

// refs: 1 - tags: named, output
export interface PutPermissionResponse {
  policy: string;
  revisionId: string;
}

// refs: 1 - tags: named, output
export interface RemoveNotificationChannelResponse {
  notificationConfiguration?: NotificationConfiguration | null;
}

// refs: 1 - tags: named, output
export interface RemovePermissionResponse {
  policy: string;
  revisionId: string;
}

// refs: 1 - tags: named, output
export interface SubmitFeedbackResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription;
}

// refs: 4 - tags: input, named, interface, output
export interface Channel {
  eventPublishers: EventPublisher[];
  id?: string | null;
  uri: string;
}

// refs: 4 - tags: input, named, enum, output
export type EventPublisher =
| "AnomalyDetection"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface FrameMetric {
  frameName: string;
  threadStates: string[];
  type: MetricType;
}

// refs: 3 - tags: input, named, enum, output
export type MetricType =
| "AggregatedRelativeTotalTime"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type AggregationPeriod =
| "PT5M"
| "PT1H"
| "P1D"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type MetadataField =
| "ComputePlatform"
| "AgentId"
| "AwsRequestId"
| "ExecutionEnvironment"
| "LambdaFunctionArn"
| "LambdaMemoryLimitInMB"
| "LambdaRemainingTimeInMilliseconds"
| "LambdaTimeGapBetweenInvokesInMilliseconds"
| "LambdaPreviousExecutionTimeInMilliseconds"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface AgentOrchestrationConfig {
  profilingEnabled: boolean;
}

// refs: 5 - tags: input, named, enum, output
export type ComputePlatform =
| "Default"
| "AWSLambda"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type OrderBy =
| "TimestampDescending"
| "TimestampAscending"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum
export type ActionGroup =
| "agentPermissions"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type FeedbackType =
| "Positive"
| "Negative"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface NotificationConfiguration {
  channels?: Channel[] | null;
}

// refs: 2 - tags: output, named, interface
export interface TimestampStructure {
  value: Date | number;
}

// refs: 1 - tags: output, named, interface
export interface FrameMetricDatum {
  frameMetric: FrameMetric;
  values: number[];
}

// refs: 1 - tags: output, named, interface
export interface AgentConfiguration {
  agentParameters?: { [key in AgentParameterField]: string | null | undefined } | null;
  periodInSeconds: number;
  shouldProfile: boolean;
}

// refs: 1 - tags: output, named, enum
export type AgentParameterField =
| "SamplingIntervalInMilliseconds"
| "ReportingIntervalInMilliseconds"
| "MinimumTimeForReportingInMilliseconds"
| "MemoryUsageLimitPercent"
| "MaxStackDepth"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ProfilingGroupDescription {
  agentOrchestrationConfig?: AgentOrchestrationConfig | null;
  arn?: string | null;
  computePlatform?: ComputePlatform | null;
  createdAt?: Date | number | null;
  name?: string | null;
  profilingStatus?: ProfilingStatus | null;
  tags?: { [key: string]: string | null | undefined } | null;
  updatedAt?: Date | number | null;
}

// refs: 4 - tags: output, named, interface
export interface ProfilingStatus {
  latestAgentOrchestratedAt?: Date | number | null;
  latestAgentProfileReportedAt?: Date | number | null;
  latestAggregatedProfile?: AggregatedProfileTime | null;
}

// refs: 4 - tags: output, named, interface
export interface AggregatedProfileTime {
  period?: AggregationPeriod | null;
  start?: Date | number | null;
}

// refs: 2 - tags: output, named, interface
export interface FindingsReportSummary {
  id?: string | null;
  profileEndTime?: Date | number | null;
  profileStartTime?: Date | number | null;
  profilingGroupName?: string | null;
  totalNumberOfFindings?: number | null;
}

// refs: 1 - tags: output, named, interface
export interface Anomaly {
  instances: AnomalyInstance[];
  metric: Metric;
  reason: string;
}

// refs: 1 - tags: output, named, interface
export interface AnomalyInstance {
  endTime?: Date | number | null;
  id: string;
  startTime: Date | number;
  userFeedback?: UserFeedback | null;
}

// refs: 1 - tags: output, named, interface
export interface UserFeedback {
  type: FeedbackType;
}

// refs: 1 - tags: output, named, interface
export interface Metric {
  frameName: string;
  threadStates: string[];
  type: MetricType;
}

// refs: 1 - tags: output, named, interface
export interface Recommendation {
  allMatchesCount: number;
  allMatchesSum: number;
  endTime: Date | number;
  pattern: Pattern;
  startTime: Date | number;
  topMatches: Match[];
}

// refs: 1 - tags: output, named, interface
export interface Pattern {
  countersToAggregate?: string[] | null;
  description?: string | null;
  id?: string | null;
  name?: string | null;
  resolutionSteps?: string | null;
  targetFrames?: string[][] | null;
  thresholdPercent?: number | null;
}

// refs: 1 - tags: output, named, interface
export interface Match {
  frameAddress?: string | null;
  targetFramesIndex?: number | null;
  thresholdBreachValue?: number | null;
}

// refs: 1 - tags: output, named, interface
export interface ProfileTime {
  start?: Date | number | null;
}
