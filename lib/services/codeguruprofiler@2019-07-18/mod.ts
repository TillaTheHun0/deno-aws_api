// Autogenerated API client for: Amazon CodeGuru Profiler

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CodeGuruProfiler {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CodeGuruProfiler.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-07-18",
    "endpointPrefix": "codeguru-profiler",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon CodeGuru Profiler",
    "serviceId": "CodeGuruProfiler",
    "signatureVersion": "v4",
    "signingName": "codeguru-profiler",
    "uid": "codeguruprofiler-2019-07-18"
  };

  async addNotificationChannels(
    {abortSignal, ...params}: RequestConfig & AddNotificationChannelsRequest,
  ): Promise<AddNotificationChannelsResponse> {
    const body: jsonP.JSONObject = params ? {
      channels: params["channels"]?.map(x => fromChannel(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddNotificationChannels",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/notificationConfiguration`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "notificationConfiguration": toNotificationConfiguration,
        },
      }, await resp.json()),
  };
  }

  async batchGetFrameMetricData(
    {abortSignal, ...params}: RequestConfig & BatchGetFrameMetricDataRequest,
  ): Promise<BatchGetFrameMetricDataResponse> {
    const query = new URLSearchParams;
    if (params["endTime"] != null) query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    if (params["period"] != null) query.set("period", params["period"]?.toString() ?? "");
    if (params["startTime"] != null) query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    if (params["targetResolution"] != null) query.set("targetResolution", params["targetResolution"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      frameMetrics: params["frameMetrics"]?.map(x => fromFrameMetric(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "BatchGetFrameMetricData",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/frames/-/metrics`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "endTime": "d",
          "endTimes": [toTimestampStructure],
          "frameMetricData": [toFrameMetricDatum],
          "resolution": (x: jsonP.JSONValue) => cmnP.readEnum<AggregationPeriod>(x),
          "startTime": "d",
          "unprocessedEndTimes": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toTimestampStructure) : [], x),
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async configureAgent(
    {abortSignal, ...params}: RequestConfig & ConfigureAgentRequest,
  ): Promise<ConfigureAgentResponse> {
    const body: jsonP.JSONObject = params ? {
      fleetInstanceId: params["fleetInstanceId"],
      metadata: params["metadata"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ConfigureAgent",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/configureAgent`,
      responseCode: 200,
    });
  return {
    configuration: jsonP.readObj({
        required: {
          "periodInSeconds": "n",
          "shouldProfile": "b",
        },
        optional: {
          "agentParameters": x => jsonP.readMap(x => cmnP.readEnumReq<AgentParameterField>(x), String, x),
        },
      }, await resp.json()),
  };
  }

  async createProfilingGroup(
    {abortSignal, ...params}: RequestConfig & CreateProfilingGroupRequest,
  ): Promise<CreateProfilingGroupResponse> {
    const query = new URLSearchParams;
    query.set("clientToken", params["clientToken"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      agentOrchestrationConfig: fromAgentOrchestrationConfig(params["agentOrchestrationConfig"]),
      computePlatform: params["computePlatform"],
      profilingGroupName: params["profilingGroupName"],
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "CreateProfilingGroup",
      requestUri: "/profilingGroups",
      responseCode: 201,
    });
  return {
    profilingGroup: toProfilingGroupDescription(await resp.json()),
  };
  }

  async deleteProfilingGroup(
    {abortSignal, ...params}: RequestConfig & DeleteProfilingGroupRequest,
  ): Promise<DeleteProfilingGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProfilingGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async describeProfilingGroup(
    {abortSignal, ...params}: RequestConfig & DescribeProfilingGroupRequest,
  ): Promise<DescribeProfilingGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProfilingGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}`,
      responseCode: 200,
    });
  return {
    profilingGroup: toProfilingGroupDescription(await resp.json()),
  };
  }

  async getFindingsReportAccountSummary(
    {abortSignal, ...params}: RequestConfig & GetFindingsReportAccountSummaryRequest = {},
  ): Promise<GetFindingsReportAccountSummaryResponse> {
    const query = new URLSearchParams;
    if (params["dailyReportsOnly"] != null) query.set("dailyReportsOnly", params["dailyReportsOnly"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetFindingsReportAccountSummary",
      method: "GET",
      requestUri: "/internal/findingsReports",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "reportSummaries": [toFindingsReportSummary],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async getNotificationConfiguration(
    {abortSignal, ...params}: RequestConfig & GetNotificationConfigurationRequest,
  ): Promise<GetNotificationConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetNotificationConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/notificationConfiguration`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "notificationConfiguration": toNotificationConfiguration,
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getPolicy(
    {abortSignal, ...params}: RequestConfig & GetPolicyRequest,
  ): Promise<GetPolicyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/policy`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "policy": "s",
          "revisionId": "s",
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async getProfile(
    {abortSignal, ...params}: RequestConfig & GetProfileRequest,
  ): Promise<GetProfileResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["accept"] != null) headers.append("Accept", params["accept"]);
    if (params["endTime"] != null) query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    if (params["maxDepth"] != null) query.set("maxDepth", params["maxDepth"]?.toString() ?? "");
    if (params["period"] != null) query.set("period", params["period"]?.toString() ?? "");
    if (params["startTime"] != null) query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "GetProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/profile`,
      responseCode: 200,
    });
  return {
    contentEncoding: resp.headers.get("Content-Encoding"),
    contentType: resp.headers.get("Content-Type") ?? "",
    profile: await resp.text(), // TODO: maybe allow proper body streaming,
  };
  }

  async getRecommendations(
    {abortSignal, ...params}: RequestConfig & GetRecommendationsRequest,
  ): Promise<GetRecommendationsResponse> {
    const query = new URLSearchParams;
    query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    if (params["locale"] != null) query.set("locale", params["locale"]?.toString() ?? "");
    query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetRecommendations",
      method: "GET",
      requestUri: cmnP.encodePath`/internal/profilingGroups/${params["profilingGroupName"]}/recommendations`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "anomalies": [toAnomaly],
          "profileEndTime": "d",
          "profileStartTime": "d",
          "profilingGroupName": "s",
          "recommendations": [toRecommendation],
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async listFindingsReports(
    {abortSignal, ...params}: RequestConfig & ListFindingsReportsRequest,
  ): Promise<ListFindingsReportsResponse> {
    const query = new URLSearchParams;
    if (params["dailyReportsOnly"] != null) query.set("dailyReportsOnly", params["dailyReportsOnly"]?.toString() ?? "");
    query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListFindingsReports",
      method: "GET",
      requestUri: cmnP.encodePath`/internal/profilingGroups/${params["profilingGroupName"]}/findingsReports`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "findingsReportSummaries": [toFindingsReportSummary],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listProfileTimes(
    {abortSignal, ...params}: RequestConfig & ListProfileTimesRequest,
  ): Promise<ListProfileTimesResponse> {
    const query = new URLSearchParams;
    query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["orderBy"] != null) query.set("orderBy", params["orderBy"]?.toString() ?? "");
    query.set("period", params["period"]?.toString() ?? "");
    query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProfileTimes",
      method: "GET",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/profileTimes`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "profileTimes": [toProfileTime],
        },
        optional: {
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listProfilingGroups(
    {abortSignal, ...params}: RequestConfig & ListProfilingGroupsRequest = {},
  ): Promise<ListProfilingGroupsResponse> {
    const query = new URLSearchParams;
    if (params["includeDescription"] != null) query.set("includeDescription", params["includeDescription"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProfilingGroups",
      method: "GET",
      requestUri: "/profilingGroups",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "profilingGroupNames": ["s"],
        },
        optional: {
          "nextToken": "s",
          "profilingGroups": [toProfilingGroupDescription],
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async postAgentProfile(
    {abortSignal, ...params}: RequestConfig & PostAgentProfileRequest,
  ): Promise<PostAgentProfileResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    headers.append("Content-Type", params["contentType"]);
    if (params["profileToken"] != null) query.set("profileToken", params["profileToken"]?.toString() ?? "");
    const body = typeof params["agentProfile"] === 'string' ? new TextEncoder().encode(params["agentProfile"]) : params["agentProfile"];
    const resp = await this.#client.performRequest({
      abortSignal, headers, query, body,
      action: "PostAgentProfile",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/agentProfile`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async putPermission(
    {abortSignal, ...params}: RequestConfig & PutPermissionRequest,
  ): Promise<PutPermissionResponse> {
    const body: jsonP.JSONObject = params ? {
      principals: params["principals"],
      revisionId: params["revisionId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPermission",
      method: "PUT",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/policy/${params["actionGroup"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "policy": "s",
          "revisionId": "s",
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async removeNotificationChannel(
    {abortSignal, ...params}: RequestConfig & RemoveNotificationChannelRequest,
  ): Promise<RemoveNotificationChannelResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "RemoveNotificationChannel",
      method: "DELETE",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/notificationConfiguration/${params["channelId"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "notificationConfiguration": toNotificationConfiguration,
        },
      }, await resp.json()),
  };
  }

  async removePermission(
    {abortSignal, ...params}: RequestConfig & RemovePermissionRequest,
  ): Promise<RemovePermissionResponse> {
    const query = new URLSearchParams;
    query.set("revisionId", params["revisionId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "RemovePermission",
      method: "DELETE",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}/policy/${params["actionGroup"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {
          "policy": "s",
          "revisionId": "s",
        },
        optional: {},
      }, await resp.json()),
  };
  }

  async submitFeedback(
    {abortSignal, ...params}: RequestConfig & SubmitFeedbackRequest,
  ): Promise<SubmitFeedbackResponse> {
    const body: jsonP.JSONObject = params ? {
      comment: params["comment"],
      type: params["type"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SubmitFeedback",
      requestUri: cmnP.encodePath`/internal/profilingGroups/${params["profilingGroupName"]}/anomalies/${params["anomalyInstanceId"]}/feedback`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      tags: params["tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateProfilingGroup(
    {abortSignal, ...params}: RequestConfig & UpdateProfilingGroupRequest,
  ): Promise<UpdateProfilingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      agentOrchestrationConfig: fromAgentOrchestrationConfig(params["agentOrchestrationConfig"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProfilingGroup",
      method: "PUT",
      requestUri: cmnP.encodePath`/profilingGroups/${params["profilingGroupName"]}`,
      responseCode: 200,
    });
  return {
    profilingGroup: toProfilingGroupDescription(await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface AddNotificationChannelsRequest {
  channels: Channel[];
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface BatchGetFrameMetricDataRequest {
  endTime?: Date | number | null;
  frameMetrics?: FrameMetric[] | null;
  period?: string | null;
  profilingGroupName: string;
  startTime?: Date | number | null;
  targetResolution?: AggregationPeriod | null;
}

// refs: 1 - tags: named, input
export interface ConfigureAgentRequest {
  fleetInstanceId?: string | null;
  metadata?: { [key in MetadataField]: string | null | undefined } | null;
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface CreateProfilingGroupRequest {
  agentOrchestrationConfig?: AgentOrchestrationConfig | null;
  clientToken: string;
  computePlatform?: ComputePlatform | null;
  profilingGroupName: string;
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteProfilingGroupRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface DescribeProfilingGroupRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface GetFindingsReportAccountSummaryRequest {
  dailyReportsOnly?: boolean | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface GetNotificationConfigurationRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface GetPolicyRequest {
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface GetProfileRequest {
  accept?: string | null;
  endTime?: Date | number | null;
  maxDepth?: number | null;
  period?: string | null;
  profilingGroupName: string;
  startTime?: Date | number | null;
}

// refs: 1 - tags: named, input
export interface GetRecommendationsRequest {
  endTime: Date | number;
  locale?: string | null;
  profilingGroupName: string;
  startTime: Date | number;
}

// refs: 1 - tags: named, input
export interface ListFindingsReportsRequest {
  dailyReportsOnly?: boolean | null;
  endTime: Date | number;
  maxResults?: number | null;
  nextToken?: string | null;
  profilingGroupName: string;
  startTime: Date | number;
}

// refs: 1 - tags: named, input
export interface ListProfileTimesRequest {
  endTime: Date | number;
  maxResults?: number | null;
  nextToken?: string | null;
  orderBy?: OrderBy | null;
  period: AggregationPeriod;
  profilingGroupName: string;
  startTime: Date | number;
}

// refs: 1 - tags: named, input
export interface ListProfilingGroupsRequest {
  includeDescription?: boolean | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PostAgentProfileRequest {
  agentProfile: Uint8Array | string;
  contentType: string;
  profileToken?: string | null;
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface PutPermissionRequest {
  actionGroup: ActionGroup;
  principals: string[];
  profilingGroupName: string;
  revisionId?: string | null;
}

// refs: 1 - tags: named, input
export interface RemoveNotificationChannelRequest {
  channelId: string;
  profilingGroupName: string;
}

// refs: 1 - tags: named, input
export interface RemovePermissionRequest {
  actionGroup: ActionGroup;
  profilingGroupName: string;
  revisionId: string;
}

// refs: 1 - tags: named, input
export interface SubmitFeedbackRequest {
  anomalyInstanceId: string;
  comment?: string | null;
  profilingGroupName: string;
  type: FeedbackType;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateProfilingGroupRequest {
  agentOrchestrationConfig: AgentOrchestrationConfig;
  profilingGroupName: string;
}

// refs: 1 - tags: named, output
export interface AddNotificationChannelsResponse {
  notificationConfiguration?: NotificationConfiguration | null;
}

// refs: 1 - tags: named, output
export interface BatchGetFrameMetricDataResponse {
  endTime: Date | number;
  endTimes: TimestampStructure[];
  frameMetricData: FrameMetricDatum[];
  resolution: AggregationPeriod;
  startTime: Date | number;
  unprocessedEndTimes: { [key: string]: TimestampStructure[] | null | undefined };
}

// refs: 1 - tags: named, output
export interface ConfigureAgentResponse {
  configuration: AgentConfiguration;
}

// refs: 1 - tags: named, output
export interface CreateProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription;
}

// refs: 1 - tags: named, output
export interface DeleteProfilingGroupResponse {
}

// refs: 1 - tags: named, output
export interface DescribeProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription;
}

// refs: 1 - tags: named, output
export interface GetFindingsReportAccountSummaryResponse {
  nextToken?: string | null;
  reportSummaries: FindingsReportSummary[];
}

// refs: 1 - tags: named, output
export interface GetNotificationConfigurationResponse {
  notificationConfiguration: NotificationConfiguration;
}

// refs: 1 - tags: named, output
export interface GetPolicyResponse {
  policy: string;
  revisionId: string;
}

// refs: 1 - tags: named, output
export interface GetProfileResponse {
  contentEncoding?: string | null;
  contentType: string;
  profile: Uint8Array | string;
}

// refs: 1 - tags: named, output
export interface GetRecommendationsResponse {
  anomalies: Anomaly[];
  profileEndTime: Date | number;
  profileStartTime: Date | number;
  profilingGroupName: string;
  recommendations: Recommendation[];
}

// refs: 1 - tags: named, output
export interface ListFindingsReportsResponse {
  findingsReportSummaries: FindingsReportSummary[];
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProfileTimesResponse {
  nextToken?: string | null;
  profileTimes: ProfileTime[];
}

// refs: 1 - tags: named, output
export interface ListProfilingGroupsResponse {
  nextToken?: string | null;
  profilingGroupNames: string[];
  profilingGroups?: ProfilingGroupDescription[] | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PostAgentProfileResponse {
}

// refs: 1 - tags: named, output
export interface PutPermissionResponse {
  policy: string;
  revisionId: string;
}

// refs: 1 - tags: named, output
export interface RemoveNotificationChannelResponse {
  notificationConfiguration?: NotificationConfiguration | null;
}

// refs: 1 - tags: named, output
export interface RemovePermissionResponse {
  policy: string;
  revisionId: string;
}

// refs: 1 - tags: named, output
export interface SubmitFeedbackResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription;
}

// refs: 4 - tags: input, named, interface, output
export interface Channel {
  eventPublishers: EventPublisher[];
  id?: string | null;
  uri: string;
}
function fromChannel(input?: Channel | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventPublishers: input["eventPublishers"],
    id: input["id"],
    uri: input["uri"],
  }
}
function toChannel(root: jsonP.JSONValue): Channel {
  return jsonP.readObj({
    required: {
      "eventPublishers": [(x: jsonP.JSONValue) => cmnP.readEnum<EventPublisher>(x)],
      "uri": "s",
    },
    optional: {
      "id": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type EventPublisher =
| "AnomalyDetection"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface FrameMetric {
  frameName: string;
  threadStates: string[];
  type: MetricType;
}
function fromFrameMetric(input?: FrameMetric | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    frameName: input["frameName"],
    threadStates: input["threadStates"],
    type: input["type"],
  }
}
function toFrameMetric(root: jsonP.JSONValue): FrameMetric {
  return jsonP.readObj({
    required: {
      "frameName": "s",
      "threadStates": ["s"],
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<MetricType>(x),
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type MetricType =
| "AggregatedRelativeTotalTime"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, enum, output
export type AggregationPeriod =
| "P1D"
| "PT1H"
| "PT5M"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type MetadataField =
| "AgentId"
| "AwsRequestId"
| "ComputePlatform"
| "ExecutionEnvironment"
| "LambdaFunctionArn"
| "LambdaMemoryLimitInMB"
| "LambdaPreviousExecutionTimeInMilliseconds"
| "LambdaRemainingTimeInMilliseconds"
| "LambdaTimeGapBetweenInvokesInMilliseconds"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface AgentOrchestrationConfig {
  profilingEnabled: boolean;
}
function fromAgentOrchestrationConfig(input?: AgentOrchestrationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    profilingEnabled: input["profilingEnabled"],
  }
}
function toAgentOrchestrationConfig(root: jsonP.JSONValue): AgentOrchestrationConfig {
  return jsonP.readObj({
    required: {
      "profilingEnabled": "b",
    },
    optional: {},
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type ComputePlatform =
| "AWSLambda"
| "Default"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type OrderBy =
| "TimestampAscending"
| "TimestampDescending"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum
export type ActionGroup =
| "agentPermissions"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type FeedbackType =
| "Negative"
| "Positive"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: output, named, interface
export interface NotificationConfiguration {
  channels?: Channel[] | null;
}
function toNotificationConfiguration(root: jsonP.JSONValue): NotificationConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "channels": [toChannel],
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TimestampStructure {
  value: Date | number;
}
function toTimestampStructure(root: jsonP.JSONValue): TimestampStructure {
  return jsonP.readObj({
    required: {
      "value": "d",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface FrameMetricDatum {
  frameMetric: FrameMetric;
  values: number[];
}
function toFrameMetricDatum(root: jsonP.JSONValue): FrameMetricDatum {
  return jsonP.readObj({
    required: {
      "frameMetric": toFrameMetric,
      "values": ["n"],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AgentConfiguration {
  agentParameters?: { [key in AgentParameterField]: string | null | undefined } | null;
  periodInSeconds: number;
  shouldProfile: boolean;
}
function toAgentConfiguration(root: jsonP.JSONValue): AgentConfiguration {
  return jsonP.readObj({
    required: {
      "periodInSeconds": "n",
      "shouldProfile": "b",
    },
    optional: {
      "agentParameters": x => jsonP.readMap(x => cmnP.readEnumReq<AgentParameterField>(x), String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AgentParameterField =
| "MaxStackDepth"
| "MemoryUsageLimitPercent"
| "MinimumTimeForReportingInMilliseconds"
| "ReportingIntervalInMilliseconds"
| "SamplingIntervalInMilliseconds"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: output, named, interface
export interface ProfilingGroupDescription {
  agentOrchestrationConfig?: AgentOrchestrationConfig | null;
  arn?: string | null;
  computePlatform?: ComputePlatform | null;
  createdAt?: Date | number | null;
  name?: string | null;
  profilingStatus?: ProfilingStatus | null;
  tags?: { [key: string]: string | null | undefined } | null;
  updatedAt?: Date | number | null;
}
function toProfilingGroupDescription(root: jsonP.JSONValue): ProfilingGroupDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "agentOrchestrationConfig": toAgentOrchestrationConfig,
      "arn": "s",
      "computePlatform": (x: jsonP.JSONValue) => cmnP.readEnum<ComputePlatform>(x),
      "createdAt": "d",
      "name": "s",
      "profilingStatus": toProfilingStatus,
      "tags": x => jsonP.readMap(String, String, x),
      "updatedAt": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface ProfilingStatus {
  latestAgentOrchestratedAt?: Date | number | null;
  latestAgentProfileReportedAt?: Date | number | null;
  latestAggregatedProfile?: AggregatedProfileTime | null;
}
function toProfilingStatus(root: jsonP.JSONValue): ProfilingStatus {
  return jsonP.readObj({
    required: {},
    optional: {
      "latestAgentOrchestratedAt": "d",
      "latestAgentProfileReportedAt": "d",
      "latestAggregatedProfile": toAggregatedProfileTime,
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface AggregatedProfileTime {
  period?: AggregationPeriod | null;
  start?: Date | number | null;
}
function toAggregatedProfileTime(root: jsonP.JSONValue): AggregatedProfileTime {
  return jsonP.readObj({
    required: {},
    optional: {
      "period": (x: jsonP.JSONValue) => cmnP.readEnum<AggregationPeriod>(x),
      "start": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface FindingsReportSummary {
  id?: string | null;
  profileEndTime?: Date | number | null;
  profileStartTime?: Date | number | null;
  profilingGroupName?: string | null;
  totalNumberOfFindings?: number | null;
}
function toFindingsReportSummary(root: jsonP.JSONValue): FindingsReportSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "id": "s",
      "profileEndTime": "d",
      "profileStartTime": "d",
      "profilingGroupName": "s",
      "totalNumberOfFindings": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Anomaly {
  instances: AnomalyInstance[];
  metric: Metric;
  reason: string;
}
function toAnomaly(root: jsonP.JSONValue): Anomaly {
  return jsonP.readObj({
    required: {
      "instances": [toAnomalyInstance],
      "metric": toMetric,
      "reason": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AnomalyInstance {
  endTime?: Date | number | null;
  id: string;
  startTime: Date | number;
  userFeedback?: UserFeedback | null;
}
function toAnomalyInstance(root: jsonP.JSONValue): AnomalyInstance {
  return jsonP.readObj({
    required: {
      "id": "s",
      "startTime": "d",
    },
    optional: {
      "endTime": "d",
      "userFeedback": toUserFeedback,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface UserFeedback {
  type: FeedbackType;
}
function toUserFeedback(root: jsonP.JSONValue): UserFeedback {
  return jsonP.readObj({
    required: {
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<FeedbackType>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Metric {
  frameName: string;
  threadStates: string[];
  type: MetricType;
}
function toMetric(root: jsonP.JSONValue): Metric {
  return jsonP.readObj({
    required: {
      "frameName": "s",
      "threadStates": ["s"],
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<MetricType>(x),
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Recommendation {
  allMatchesCount: number;
  allMatchesSum: number;
  endTime: Date | number;
  pattern: Pattern;
  startTime: Date | number;
  topMatches: Match[];
}
function toRecommendation(root: jsonP.JSONValue): Recommendation {
  return jsonP.readObj({
    required: {
      "allMatchesCount": "n",
      "allMatchesSum": "n",
      "endTime": "d",
      "pattern": toPattern,
      "startTime": "d",
      "topMatches": [toMatch],
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Pattern {
  countersToAggregate?: string[] | null;
  description?: string | null;
  id?: string | null;
  name?: string | null;
  resolutionSteps?: string | null;
  targetFrames?: string[][] | null;
  thresholdPercent?: number | null;
}
function toPattern(root: jsonP.JSONValue): Pattern {
  return jsonP.readObj({
    required: {},
    optional: {
      "countersToAggregate": ["s"],
      "description": "s",
      "id": "s",
      "name": "s",
      "resolutionSteps": "s",
      "targetFrames": [x => jsonP.readList(String, x)],
      "thresholdPercent": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Match {
  frameAddress?: string | null;
  targetFramesIndex?: number | null;
  thresholdBreachValue?: number | null;
}
function toMatch(root: jsonP.JSONValue): Match {
  return jsonP.readObj({
    required: {},
    optional: {
      "frameAddress": "s",
      "targetFramesIndex": "n",
      "thresholdBreachValue": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProfileTime {
  start?: Date | number | null;
}
function toProfileTime(root: jsonP.JSONValue): ProfileTime {
  return jsonP.readObj({
    required: {},
    optional: {
      "start": "d",
    },
  }, root);
}
