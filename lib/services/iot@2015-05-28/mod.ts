// Autogenerated API client for: AWS IoT

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as uuidv4 from "https://deno.land/std@0.71.0/uuid/v4.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
function generateIdemptToken() {
  return uuidv4.generate();
}

export default class Iot {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Iot.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-05-28",
    "endpointPrefix": "iot",
    "protocol": "rest-json",
    "serviceFullName": "AWS IoT",
    "serviceId": "IoT",
    "signatureVersion": "v4",
    "signingName": "execute-api",
    "uid": "iot-2015-05-28"
  };

  async acceptCertificateTransfer(
    {abortSignal, ...params}: RequestConfig & AcceptCertificateTransferRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["setAsActive"] != null) query.set("setAsActive", params["setAsActive"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "AcceptCertificateTransfer",
      method: "PATCH",
      requestUri: cmnP.encodePath`/accept-certificate-transfer/${params["certificateId"]}`,
    });
  }

  async addThingToBillingGroup(
    {abortSignal, ...params}: RequestConfig & AddThingToBillingGroupRequest = {},
  ): Promise<AddThingToBillingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      billingGroupName: params["billingGroupName"],
      billingGroupArn: params["billingGroupArn"],
      thingName: params["thingName"],
      thingArn: params["thingArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddThingToBillingGroup",
      method: "PUT",
      requestUri: "/billing-groups/addThingToBillingGroup",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async addThingToThingGroup(
    {abortSignal, ...params}: RequestConfig & AddThingToThingGroupRequest = {},
  ): Promise<AddThingToThingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      thingGroupName: params["thingGroupName"],
      thingGroupArn: params["thingGroupArn"],
      thingName: params["thingName"],
      thingArn: params["thingArn"],
      overrideDynamicGroups: params["overrideDynamicGroups"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddThingToThingGroup",
      method: "PUT",
      requestUri: "/thing-groups/addThingToThingGroup",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async associateTargetsWithJob(
    {abortSignal, ...params}: RequestConfig & AssociateTargetsWithJobRequest,
  ): Promise<AssociateTargetsWithJobResponse> {
    const query = new URLSearchParams;
    if (params["namespaceId"] != null) query.set("namespaceId", params["namespaceId"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      targets: params["targets"],
      comment: params["comment"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "AssociateTargetsWithJob",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}/targets`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "jobArn": "s",
          "jobId": "s",
          "description": "s",
        },
      }, await resp.json()),
  };
  }

  async attachPolicy(
    {abortSignal, ...params}: RequestConfig & AttachPolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      target: params["target"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AttachPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/target-policies/${params["policyName"]}`,
    });
  }

  async attachPrincipalPolicy(
    {abortSignal, ...params}: RequestConfig & AttachPrincipalPolicyRequest,
  ): Promise<void> {
    const headers = new Headers;
    headers.append("x-amzn-iot-principal", params["principal"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "AttachPrincipalPolicy",
      method: "PUT",
      requestUri: cmnP.encodePath`/principal-policies/${params["policyName"]}`,
    });
  }

  async attachSecurityProfile(
    {abortSignal, ...params}: RequestConfig & AttachSecurityProfileRequest,
  ): Promise<AttachSecurityProfileResponse> {
    const query = new URLSearchParams;
    query.set("securityProfileTargetArn", params["securityProfileTargetArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "AttachSecurityProfile",
      method: "PUT",
      requestUri: cmnP.encodePath`/security-profiles/${params["securityProfileName"]}/targets`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async attachThingPrincipal(
    {abortSignal, ...params}: RequestConfig & AttachThingPrincipalRequest,
  ): Promise<AttachThingPrincipalResponse> {
    const headers = new Headers;
    headers.append("x-amzn-principal", params["principal"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "AttachThingPrincipal",
      method: "PUT",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/principals`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async cancelAuditMitigationActionsTask(
    {abortSignal, ...params}: RequestConfig & CancelAuditMitigationActionsTaskRequest,
  ): Promise<CancelAuditMitigationActionsTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelAuditMitigationActionsTask",
      method: "PUT",
      requestUri: cmnP.encodePath`/audit/mitigationactions/tasks/${params["taskId"]}/cancel`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async cancelAuditTask(
    {abortSignal, ...params}: RequestConfig & CancelAuditTaskRequest,
  ): Promise<CancelAuditTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelAuditTask",
      method: "PUT",
      requestUri: cmnP.encodePath`/audit/tasks/${params["taskId"]}/cancel`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async cancelCertificateTransfer(
    {abortSignal, ...params}: RequestConfig & CancelCertificateTransferRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CancelCertificateTransfer",
      method: "PATCH",
      requestUri: cmnP.encodePath`/cancel-certificate-transfer/${params["certificateId"]}`,
    });
  }

  async cancelJob(
    {abortSignal, ...params}: RequestConfig & CancelJobRequest,
  ): Promise<CancelJobResponse> {
    const query = new URLSearchParams;
    if (params["force"] != null) query.set("force", params["force"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      reasonCode: params["reasonCode"],
      comment: params["comment"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "CancelJob",
      method: "PUT",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}/cancel`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "jobArn": "s",
          "jobId": "s",
          "description": "s",
        },
      }, await resp.json()),
  };
  }

  async cancelJobExecution(
    {abortSignal, ...params}: RequestConfig & CancelJobExecutionRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["force"] != null) query.set("force", params["force"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      expectedVersion: params["expectedVersion"],
      statusDetails: params["statusDetails"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "CancelJobExecution",
      method: "PUT",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/jobs/${params["jobId"]}/cancel`,
    });
  }

  async clearDefaultAuthorizer(
    {abortSignal, ...params}: RequestConfig & ClearDefaultAuthorizerRequest = {},
  ): Promise<ClearDefaultAuthorizerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ClearDefaultAuthorizer",
      method: "DELETE",
      requestUri: "/default-authorizer",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async confirmTopicRuleDestination(
    {abortSignal, ...params}: RequestConfig & ConfirmTopicRuleDestinationRequest,
  ): Promise<ConfirmTopicRuleDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ConfirmTopicRuleDestination",
      method: "GET",
      requestUri: cmnP.encodePath`/confirmdestination/${params["confirmationToken"].split("/")}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async createAuditSuppression(
    {abortSignal, ...params}: RequestConfig & CreateAuditSuppressionRequest,
  ): Promise<CreateAuditSuppressionResponse> {
    const body: jsonP.JSONObject = params ? {
      checkName: params["checkName"],
      resourceIdentifier: fromResourceIdentifier(params["resourceIdentifier"]),
      expirationDate: jsonP.serializeDate_unixTimestamp(params["expirationDate"]),
      suppressIndefinitely: params["suppressIndefinitely"],
      description: params["description"],
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAuditSuppression",
      requestUri: "/audit/suppressions/create",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async createAuthorizer(
    {abortSignal, ...params}: RequestConfig & CreateAuthorizerRequest,
  ): Promise<CreateAuthorizerResponse> {
    const body: jsonP.JSONObject = params ? {
      authorizerFunctionArn: params["authorizerFunctionArn"],
      tokenKeyName: params["tokenKeyName"],
      tokenSigningPublicKeys: params["tokenSigningPublicKeys"],
      status: params["status"],
      tags: params["tags"]?.map(x => fromTag(x)),
      signingDisabled: params["signingDisabled"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateAuthorizer",
      requestUri: cmnP.encodePath`/authorizer/${params["authorizerName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "authorizerName": "s",
          "authorizerArn": "s",
        },
      }, await resp.json()),
  };
  }

  async createBillingGroup(
    {abortSignal, ...params}: RequestConfig & CreateBillingGroupRequest,
  ): Promise<CreateBillingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      billingGroupProperties: fromBillingGroupProperties(params["billingGroupProperties"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateBillingGroup",
      requestUri: cmnP.encodePath`/billing-groups/${params["billingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "billingGroupName": "s",
          "billingGroupArn": "s",
          "billingGroupId": "s",
        },
      }, await resp.json()),
  };
  }

  async createCertificateFromCsr(
    {abortSignal, ...params}: RequestConfig & CreateCertificateFromCsrRequest,
  ): Promise<CreateCertificateFromCsrResponse> {
    const query = new URLSearchParams;
    if (params["setAsActive"] != null) query.set("setAsActive", params["setAsActive"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      certificateSigningRequest: params["certificateSigningRequest"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "CreateCertificateFromCsr",
      requestUri: "/certificates",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateArn": "s",
          "certificateId": "s",
          "certificatePem": "s",
        },
      }, await resp.json()),
  };
  }

  async createDimension(
    {abortSignal, ...params}: RequestConfig & CreateDimensionRequest,
  ): Promise<CreateDimensionResponse> {
    const body: jsonP.JSONObject = params ? {
      type: params["type"],
      stringValues: params["stringValues"],
      tags: params["tags"]?.map(x => fromTag(x)),
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDimension",
      requestUri: cmnP.encodePath`/dimensions/${params["name"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "name": "s",
          "arn": "s",
        },
      }, await resp.json()),
  };
  }

  async createDomainConfiguration(
    {abortSignal, ...params}: RequestConfig & CreateDomainConfigurationRequest,
  ): Promise<CreateDomainConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      domainName: params["domainName"],
      serverCertificateArns: params["serverCertificateArns"],
      validationCertificateArn: params["validationCertificateArn"],
      authorizerConfig: fromAuthorizerConfig(params["authorizerConfig"]),
      serviceType: params["serviceType"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomainConfiguration",
      requestUri: cmnP.encodePath`/domainConfigurations/${params["domainConfigurationName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "domainConfigurationName": "s",
          "domainConfigurationArn": "s",
        },
      }, await resp.json()),
  };
  }

  async createDynamicThingGroup(
    {abortSignal, ...params}: RequestConfig & CreateDynamicThingGroupRequest,
  ): Promise<CreateDynamicThingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      thingGroupProperties: fromThingGroupProperties(params["thingGroupProperties"]),
      indexName: params["indexName"],
      queryString: params["queryString"],
      queryVersion: params["queryVersion"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDynamicThingGroup",
      requestUri: cmnP.encodePath`/dynamic-thing-groups/${params["thingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingGroupName": "s",
          "thingGroupArn": "s",
          "thingGroupId": "s",
          "indexName": "s",
          "queryString": "s",
          "queryVersion": "s",
        },
      }, await resp.json()),
  };
  }

  async createJob(
    {abortSignal, ...params}: RequestConfig & CreateJobRequest,
  ): Promise<CreateJobResponse> {
    const body: jsonP.JSONObject = params ? {
      targets: params["targets"],
      documentSource: params["documentSource"],
      document: params["document"],
      description: params["description"],
      presignedUrlConfig: fromPresignedUrlConfig(params["presignedUrlConfig"]),
      targetSelection: params["targetSelection"],
      jobExecutionsRolloutConfig: fromJobExecutionsRolloutConfig(params["jobExecutionsRolloutConfig"]),
      abortConfig: fromAbortConfig(params["abortConfig"]),
      timeoutConfig: fromTimeoutConfig(params["timeoutConfig"]),
      tags: params["tags"]?.map(x => fromTag(x)),
      namespaceId: params["namespaceId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateJob",
      method: "PUT",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "jobArn": "s",
          "jobId": "s",
          "description": "s",
        },
      }, await resp.json()),
  };
  }

  async createKeysAndCertificate(
    {abortSignal, ...params}: RequestConfig & CreateKeysAndCertificateRequest = {},
  ): Promise<CreateKeysAndCertificateResponse> {
    const query = new URLSearchParams;
    if (params["setAsActive"] != null) query.set("setAsActive", params["setAsActive"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "CreateKeysAndCertificate",
      requestUri: "/keys-and-certificate",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateArn": "s",
          "certificateId": "s",
          "certificatePem": "s",
          "keyPair": toKeyPair,
        },
      }, await resp.json()),
  };
  }

  async createMitigationAction(
    {abortSignal, ...params}: RequestConfig & CreateMitigationActionRequest,
  ): Promise<CreateMitigationActionResponse> {
    const body: jsonP.JSONObject = params ? {
      roleArn: params["roleArn"],
      actionParams: fromMitigationActionParams(params["actionParams"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateMitigationAction",
      requestUri: cmnP.encodePath`/mitigationactions/actions/${params["actionName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "actionArn": "s",
          "actionId": "s",
        },
      }, await resp.json()),
  };
  }

  async createOTAUpdate(
    {abortSignal, ...params}: RequestConfig & CreateOTAUpdateRequest,
  ): Promise<CreateOTAUpdateResponse> {
    const body: jsonP.JSONObject = params ? {
      description: params["description"],
      targets: params["targets"],
      protocols: params["protocols"],
      targetSelection: params["targetSelection"],
      awsJobExecutionsRolloutConfig: fromAwsJobExecutionsRolloutConfig(params["awsJobExecutionsRolloutConfig"]),
      awsJobPresignedUrlConfig: fromAwsJobPresignedUrlConfig(params["awsJobPresignedUrlConfig"]),
      awsJobAbortConfig: fromAwsJobAbortConfig(params["awsJobAbortConfig"]),
      awsJobTimeoutConfig: fromAwsJobTimeoutConfig(params["awsJobTimeoutConfig"]),
      files: params["files"]?.map(x => fromOTAUpdateFile(x)),
      roleArn: params["roleArn"],
      additionalParameters: params["additionalParameters"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateOTAUpdate",
      requestUri: cmnP.encodePath`/otaUpdates/${params["otaUpdateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "otaUpdateId": "s",
          "awsIotJobId": "s",
          "otaUpdateArn": "s",
          "awsIotJobArn": "s",
          "otaUpdateStatus": (x: jsonP.JSONValue) => cmnP.readEnum<OTAUpdateStatus>(x),
        },
      }, await resp.json()),
  };
  }

  async createPolicy(
    {abortSignal, ...params}: RequestConfig & CreatePolicyRequest,
  ): Promise<CreatePolicyResponse> {
    const body: jsonP.JSONObject = params ? {
      policyDocument: params["policyDocument"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreatePolicy",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policyName": "s",
          "policyArn": "s",
          "policyDocument": "s",
          "policyVersionId": "s",
        },
      }, await resp.json()),
  };
  }

  async createPolicyVersion(
    {abortSignal, ...params}: RequestConfig & CreatePolicyVersionRequest,
  ): Promise<CreatePolicyVersionResponse> {
    const query = new URLSearchParams;
    if (params["setAsDefault"] != null) query.set("setAsDefault", params["setAsDefault"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      policyDocument: params["policyDocument"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "CreatePolicyVersion",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}/version`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policyArn": "s",
          "policyDocument": "s",
          "policyVersionId": "s",
          "isDefaultVersion": "b",
        },
      }, await resp.json()),
  };
  }

  async createProvisioningClaim(
    {abortSignal, ...params}: RequestConfig & CreateProvisioningClaimRequest,
  ): Promise<CreateProvisioningClaimResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "CreateProvisioningClaim",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}/provisioning-claim`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateId": "s",
          "certificatePem": "s",
          "keyPair": toKeyPair,
          "expiration": "d",
        },
      }, await resp.json()),
  };
  }

  async createProvisioningTemplate(
    {abortSignal, ...params}: RequestConfig & CreateProvisioningTemplateRequest,
  ): Promise<CreateProvisioningTemplateResponse> {
    const body: jsonP.JSONObject = params ? {
      templateName: params["templateName"],
      description: params["description"],
      templateBody: params["templateBody"],
      enabled: params["enabled"],
      provisioningRoleArn: params["provisioningRoleArn"],
      preProvisioningHook: fromProvisioningHook(params["preProvisioningHook"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProvisioningTemplate",
      requestUri: "/provisioning-templates",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "templateArn": "s",
          "templateName": "s",
          "defaultVersionId": "n",
        },
      }, await resp.json()),
  };
  }

  async createProvisioningTemplateVersion(
    {abortSignal, ...params}: RequestConfig & CreateProvisioningTemplateVersionRequest,
  ): Promise<CreateProvisioningTemplateVersionResponse> {
    const query = new URLSearchParams;
    if (params["setAsDefault"] != null) query.set("setAsDefault", params["setAsDefault"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      templateBody: params["templateBody"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "CreateProvisioningTemplateVersion",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}/versions`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "templateArn": "s",
          "templateName": "s",
          "versionId": "n",
          "isDefaultVersion": "b",
        },
      }, await resp.json()),
  };
  }

  async createRoleAlias(
    {abortSignal, ...params}: RequestConfig & CreateRoleAliasRequest,
  ): Promise<CreateRoleAliasResponse> {
    const body: jsonP.JSONObject = params ? {
      roleArn: params["roleArn"],
      credentialDurationSeconds: params["credentialDurationSeconds"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateRoleAlias",
      requestUri: cmnP.encodePath`/role-aliases/${params["roleAlias"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "roleAlias": "s",
          "roleAliasArn": "s",
        },
      }, await resp.json()),
  };
  }

  async createScheduledAudit(
    {abortSignal, ...params}: RequestConfig & CreateScheduledAuditRequest,
  ): Promise<CreateScheduledAuditResponse> {
    const body: jsonP.JSONObject = params ? {
      frequency: params["frequency"],
      dayOfMonth: params["dayOfMonth"],
      dayOfWeek: params["dayOfWeek"],
      targetCheckNames: params["targetCheckNames"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateScheduledAudit",
      requestUri: cmnP.encodePath`/audit/scheduledaudits/${params["scheduledAuditName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "scheduledAuditArn": "s",
        },
      }, await resp.json()),
  };
  }

  async createSecurityProfile(
    {abortSignal, ...params}: RequestConfig & CreateSecurityProfileRequest,
  ): Promise<CreateSecurityProfileResponse> {
    const body: jsonP.JSONObject = params ? {
      securityProfileDescription: params["securityProfileDescription"],
      behaviors: params["behaviors"]?.map(x => fromBehavior(x)),
      alertTargets: jsonP.serializeMap(params["alertTargets"], x => fromAlertTarget(x)),
      additionalMetricsToRetain: params["additionalMetricsToRetain"],
      additionalMetricsToRetainV2: params["additionalMetricsToRetainV2"]?.map(x => fromMetricToRetain(x)),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateSecurityProfile",
      requestUri: cmnP.encodePath`/security-profiles/${params["securityProfileName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "securityProfileName": "s",
          "securityProfileArn": "s",
        },
      }, await resp.json()),
  };
  }

  async createStream(
    {abortSignal, ...params}: RequestConfig & CreateStreamRequest,
  ): Promise<CreateStreamResponse> {
    const body: jsonP.JSONObject = params ? {
      description: params["description"],
      files: params["files"]?.map(x => fromStreamFile(x)),
      roleArn: params["roleArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateStream",
      requestUri: cmnP.encodePath`/streams/${params["streamId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "streamId": "s",
          "streamArn": "s",
          "description": "s",
          "streamVersion": "n",
        },
      }, await resp.json()),
  };
  }

  async createThing(
    {abortSignal, ...params}: RequestConfig & CreateThingRequest,
  ): Promise<CreateThingResponse> {
    const body: jsonP.JSONObject = params ? {
      thingTypeName: params["thingTypeName"],
      attributePayload: fromAttributePayload(params["attributePayload"]),
      billingGroupName: params["billingGroupName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThing",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingName": "s",
          "thingArn": "s",
          "thingId": "s",
        },
      }, await resp.json()),
  };
  }

  async createThingGroup(
    {abortSignal, ...params}: RequestConfig & CreateThingGroupRequest,
  ): Promise<CreateThingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      parentGroupName: params["parentGroupName"],
      thingGroupProperties: fromThingGroupProperties(params["thingGroupProperties"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThingGroup",
      requestUri: cmnP.encodePath`/thing-groups/${params["thingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingGroupName": "s",
          "thingGroupArn": "s",
          "thingGroupId": "s",
        },
      }, await resp.json()),
  };
  }

  async createThingType(
    {abortSignal, ...params}: RequestConfig & CreateThingTypeRequest,
  ): Promise<CreateThingTypeResponse> {
    const body: jsonP.JSONObject = params ? {
      thingTypeProperties: fromThingTypeProperties(params["thingTypeProperties"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateThingType",
      requestUri: cmnP.encodePath`/thing-types/${params["thingTypeName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingTypeName": "s",
          "thingTypeArn": "s",
          "thingTypeId": "s",
        },
      }, await resp.json()),
  };
  }

  async createTopicRule(
    {abortSignal, ...params}: RequestConfig & CreateTopicRuleRequest,
  ): Promise<void> {
    const headers = new Headers;
    if (params["tags"] != null) headers.append("x-amz-tagging", params["tags"]);
    const inner = params["topicRulePayload"];
    const body: jsonP.JSONObject = inner ? {
      sql: inner["sql"],
      description: inner["description"],
      actions: inner["actions"]?.map(x => fromAction(x)),
      ruleDisabled: inner["ruleDisabled"],
      awsIotSqlVersion: inner["awsIotSqlVersion"],
      errorAction: fromAction(inner["errorAction"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, headers, body,
      action: "CreateTopicRule",
      requestUri: cmnP.encodePath`/rules/${params["ruleName"]}`,
    });
  }

  async createTopicRuleDestination(
    {abortSignal, ...params}: RequestConfig & CreateTopicRuleDestinationRequest,
  ): Promise<CreateTopicRuleDestinationResponse> {
    const body: jsonP.JSONObject = params ? {
      destinationConfiguration: fromTopicRuleDestinationConfiguration(params["destinationConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateTopicRuleDestination",
      requestUri: "/destinations",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "topicRuleDestination": toTopicRuleDestination,
        },
      }, await resp.json()),
  };
  }

  async deleteAccountAuditConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteAccountAuditConfigurationRequest = {},
  ): Promise<DeleteAccountAuditConfigurationResponse> {
    const query = new URLSearchParams;
    if (params["deleteScheduledAudits"] != null) query.set("deleteScheduledAudits", params["deleteScheduledAudits"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteAccountAuditConfiguration",
      method: "DELETE",
      requestUri: "/audit/configuration",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteAuditSuppression(
    {abortSignal, ...params}: RequestConfig & DeleteAuditSuppressionRequest,
  ): Promise<DeleteAuditSuppressionResponse> {
    const body: jsonP.JSONObject = params ? {
      checkName: params["checkName"],
      resourceIdentifier: fromResourceIdentifier(params["resourceIdentifier"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteAuditSuppression",
      requestUri: "/audit/suppressions/delete",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteAuthorizer(
    {abortSignal, ...params}: RequestConfig & DeleteAuthorizerRequest,
  ): Promise<DeleteAuthorizerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteAuthorizer",
      method: "DELETE",
      requestUri: cmnP.encodePath`/authorizer/${params["authorizerName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteBillingGroup(
    {abortSignal, ...params}: RequestConfig & DeleteBillingGroupRequest,
  ): Promise<DeleteBillingGroupResponse> {
    const query = new URLSearchParams;
    if (params["expectedVersion"] != null) query.set("expectedVersion", params["expectedVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteBillingGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/billing-groups/${params["billingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteCACertificate(
    {abortSignal, ...params}: RequestConfig & DeleteCACertificateRequest,
  ): Promise<DeleteCACertificateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteCACertificate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/cacertificate/${params["certificateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteCertificate(
    {abortSignal, ...params}: RequestConfig & DeleteCertificateRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["forceDelete"] != null) query.set("forceDelete", params["forceDelete"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteCertificate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/certificates/${params["certificateId"]}`,
    });
  }

  async deleteDimension(
    {abortSignal, ...params}: RequestConfig & DeleteDimensionRequest,
  ): Promise<DeleteDimensionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDimension",
      method: "DELETE",
      requestUri: cmnP.encodePath`/dimensions/${params["name"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteDomainConfiguration(
    {abortSignal, ...params}: RequestConfig & DeleteDomainConfigurationRequest,
  ): Promise<DeleteDomainConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDomainConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/domainConfigurations/${params["domainConfigurationName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteDynamicThingGroup(
    {abortSignal, ...params}: RequestConfig & DeleteDynamicThingGroupRequest,
  ): Promise<DeleteDynamicThingGroupResponse> {
    const query = new URLSearchParams;
    if (params["expectedVersion"] != null) query.set("expectedVersion", params["expectedVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteDynamicThingGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/dynamic-thing-groups/${params["thingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteJob(
    {abortSignal, ...params}: RequestConfig & DeleteJobRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["force"] != null) query.set("force", params["force"]?.toString() ?? "");
    if (params["namespaceId"] != null) query.set("namespaceId", params["namespaceId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteJob",
      method: "DELETE",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}`,
    });
  }

  async deleteJobExecution(
    {abortSignal, ...params}: RequestConfig & DeleteJobExecutionRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["force"] != null) query.set("force", params["force"]?.toString() ?? "");
    if (params["namespaceId"] != null) query.set("namespaceId", params["namespaceId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteJobExecution",
      method: "DELETE",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/jobs/${params["jobId"]}/executionNumber/${params["executionNumber"].toString()}`,
    });
  }

  async deleteMitigationAction(
    {abortSignal, ...params}: RequestConfig & DeleteMitigationActionRequest,
  ): Promise<DeleteMitigationActionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteMitigationAction",
      method: "DELETE",
      requestUri: cmnP.encodePath`/mitigationactions/actions/${params["actionName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteOTAUpdate(
    {abortSignal, ...params}: RequestConfig & DeleteOTAUpdateRequest,
  ): Promise<DeleteOTAUpdateResponse> {
    const query = new URLSearchParams;
    if (params["deleteStream"] != null) query.set("deleteStream", params["deleteStream"]?.toString() ?? "");
    if (params["forceDeleteAWSJob"] != null) query.set("forceDeleteAWSJob", params["forceDeleteAWSJob"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteOTAUpdate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/otaUpdates/${params["otaUpdateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deletePolicy(
    {abortSignal, ...params}: RequestConfig & DeletePolicyRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}`,
    });
  }

  async deletePolicyVersion(
    {abortSignal, ...params}: RequestConfig & DeletePolicyVersionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePolicyVersion",
      method: "DELETE",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}/version/${params["policyVersionId"]}`,
    });
  }

  async deleteProvisioningTemplate(
    {abortSignal, ...params}: RequestConfig & DeleteProvisioningTemplateRequest,
  ): Promise<DeleteProvisioningTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProvisioningTemplate",
      method: "DELETE",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteProvisioningTemplateVersion(
    {abortSignal, ...params}: RequestConfig & DeleteProvisioningTemplateVersionRequest,
  ): Promise<DeleteProvisioningTemplateVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProvisioningTemplateVersion",
      method: "DELETE",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}/versions/${params["versionId"].toString()}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteRegistrationCode(
    {abortSignal, ...params}: RequestConfig & DeleteRegistrationCodeRequest = {},
  ): Promise<DeleteRegistrationCodeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRegistrationCode",
      method: "DELETE",
      requestUri: "/registrationcode",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteRoleAlias(
    {abortSignal, ...params}: RequestConfig & DeleteRoleAliasRequest,
  ): Promise<DeleteRoleAliasResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteRoleAlias",
      method: "DELETE",
      requestUri: cmnP.encodePath`/role-aliases/${params["roleAlias"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteScheduledAudit(
    {abortSignal, ...params}: RequestConfig & DeleteScheduledAuditRequest,
  ): Promise<DeleteScheduledAuditResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteScheduledAudit",
      method: "DELETE",
      requestUri: cmnP.encodePath`/audit/scheduledaudits/${params["scheduledAuditName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteSecurityProfile(
    {abortSignal, ...params}: RequestConfig & DeleteSecurityProfileRequest,
  ): Promise<DeleteSecurityProfileResponse> {
    const query = new URLSearchParams;
    if (params["expectedVersion"] != null) query.set("expectedVersion", params["expectedVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteSecurityProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/security-profiles/${params["securityProfileName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteStream(
    {abortSignal, ...params}: RequestConfig & DeleteStreamRequest,
  ): Promise<DeleteStreamResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteStream",
      method: "DELETE",
      requestUri: cmnP.encodePath`/streams/${params["streamId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteThing(
    {abortSignal, ...params}: RequestConfig & DeleteThingRequest,
  ): Promise<DeleteThingResponse> {
    const query = new URLSearchParams;
    if (params["expectedVersion"] != null) query.set("expectedVersion", params["expectedVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteThing",
      method: "DELETE",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteThingGroup(
    {abortSignal, ...params}: RequestConfig & DeleteThingGroupRequest,
  ): Promise<DeleteThingGroupResponse> {
    const query = new URLSearchParams;
    if (params["expectedVersion"] != null) query.set("expectedVersion", params["expectedVersion"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteThingGroup",
      method: "DELETE",
      requestUri: cmnP.encodePath`/thing-groups/${params["thingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteThingType(
    {abortSignal, ...params}: RequestConfig & DeleteThingTypeRequest,
  ): Promise<DeleteThingTypeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteThingType",
      method: "DELETE",
      requestUri: cmnP.encodePath`/thing-types/${params["thingTypeName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteTopicRule(
    {abortSignal, ...params}: RequestConfig & DeleteTopicRuleRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteTopicRule",
      method: "DELETE",
      requestUri: cmnP.encodePath`/rules/${params["ruleName"]}`,
    });
  }

  async deleteTopicRuleDestination(
    {abortSignal, ...params}: RequestConfig & DeleteTopicRuleDestinationRequest,
  ): Promise<DeleteTopicRuleDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteTopicRuleDestination",
      method: "DELETE",
      requestUri: cmnP.encodePath`/destinations/${params["arn"].split("/")}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async deleteV2LoggingLevel(
    {abortSignal, ...params}: RequestConfig & DeleteV2LoggingLevelRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("targetType", params["targetType"]?.toString() ?? "");
    query.set("targetName", params["targetName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteV2LoggingLevel",
      method: "DELETE",
      requestUri: "/v2LoggingLevel",
    });
  }

  async deprecateThingType(
    {abortSignal, ...params}: RequestConfig & DeprecateThingTypeRequest,
  ): Promise<DeprecateThingTypeResponse> {
    const body: jsonP.JSONObject = params ? {
      undoDeprecate: params["undoDeprecate"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeprecateThingType",
      requestUri: cmnP.encodePath`/thing-types/${params["thingTypeName"]}/deprecate`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async describeAccountAuditConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeAccountAuditConfigurationRequest = {},
  ): Promise<DescribeAccountAuditConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAccountAuditConfiguration",
      method: "GET",
      requestUri: "/audit/configuration",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "roleArn": "s",
          "auditNotificationTargetConfigurations": x => jsonP.readMap(x => cmnP.readEnumReq<AuditNotificationType>(x), toAuditNotificationTarget, x),
          "auditCheckConfigurations": x => jsonP.readMap(String, toAuditCheckConfiguration, x),
        },
      }, await resp.json()),
  };
  }

  async describeAuditFinding(
    {abortSignal, ...params}: RequestConfig & DescribeAuditFindingRequest,
  ): Promise<DescribeAuditFindingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAuditFinding",
      method: "GET",
      requestUri: cmnP.encodePath`/audit/findings/${params["findingId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "finding": toAuditFinding,
        },
      }, await resp.json()),
  };
  }

  async describeAuditMitigationActionsTask(
    {abortSignal, ...params}: RequestConfig & DescribeAuditMitigationActionsTaskRequest,
  ): Promise<DescribeAuditMitigationActionsTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAuditMitigationActionsTask",
      method: "GET",
      requestUri: cmnP.encodePath`/audit/mitigationactions/tasks/${params["taskId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "taskStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AuditMitigationActionsTaskStatus>(x),
          "startTime": "d",
          "endTime": "d",
          "taskStatistics": x => jsonP.readMap(String, toTaskStatisticsForAuditCheck, x),
          "target": toAuditMitigationActionsTaskTarget,
          "auditCheckToActionsMapping": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
          "actionsDefinition": [toMitigationAction],
        },
      }, await resp.json()),
  };
  }

  async describeAuditSuppression(
    {abortSignal, ...params}: RequestConfig & DescribeAuditSuppressionRequest,
  ): Promise<DescribeAuditSuppressionResponse> {
    const body: jsonP.JSONObject = params ? {
      checkName: params["checkName"],
      resourceIdentifier: fromResourceIdentifier(params["resourceIdentifier"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeAuditSuppression",
      requestUri: "/audit/suppressions/describe",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "checkName": "s",
          "resourceIdentifier": toResourceIdentifier,
          "expirationDate": "d",
          "suppressIndefinitely": "b",
          "description": "s",
        },
      }, await resp.json()),
  };
  }

  async describeAuditTask(
    {abortSignal, ...params}: RequestConfig & DescribeAuditTaskRequest,
  ): Promise<DescribeAuditTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAuditTask",
      method: "GET",
      requestUri: cmnP.encodePath`/audit/tasks/${params["taskId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "taskStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AuditTaskStatus>(x),
          "taskType": (x: jsonP.JSONValue) => cmnP.readEnum<AuditTaskType>(x),
          "taskStartTime": "d",
          "taskStatistics": toTaskStatistics,
          "scheduledAuditName": "s",
          "auditDetails": x => jsonP.readMap(String, toAuditCheckDetails, x),
        },
      }, await resp.json()),
  };
  }

  async describeAuthorizer(
    {abortSignal, ...params}: RequestConfig & DescribeAuthorizerRequest,
  ): Promise<DescribeAuthorizerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeAuthorizer",
      method: "GET",
      requestUri: cmnP.encodePath`/authorizer/${params["authorizerName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "authorizerDescription": toAuthorizerDescription,
        },
      }, await resp.json()),
  };
  }

  async describeBillingGroup(
    {abortSignal, ...params}: RequestConfig & DescribeBillingGroupRequest,
  ): Promise<DescribeBillingGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeBillingGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/billing-groups/${params["billingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "billingGroupName": "s",
          "billingGroupId": "s",
          "billingGroupArn": "s",
          "version": "n",
          "billingGroupProperties": toBillingGroupProperties,
          "billingGroupMetadata": toBillingGroupMetadata,
        },
      }, await resp.json()),
  };
  }

  async describeCACertificate(
    {abortSignal, ...params}: RequestConfig & DescribeCACertificateRequest,
  ): Promise<DescribeCACertificateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeCACertificate",
      method: "GET",
      requestUri: cmnP.encodePath`/cacertificate/${params["certificateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateDescription": toCACertificateDescription,
          "registrationConfig": toRegistrationConfig,
        },
      }, await resp.json()),
  };
  }

  async describeCertificate(
    {abortSignal, ...params}: RequestConfig & DescribeCertificateRequest,
  ): Promise<DescribeCertificateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeCertificate",
      method: "GET",
      requestUri: cmnP.encodePath`/certificates/${params["certificateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateDescription": toCertificateDescription,
        },
      }, await resp.json()),
  };
  }

  async describeDefaultAuthorizer(
    {abortSignal, ...params}: RequestConfig & DescribeDefaultAuthorizerRequest = {},
  ): Promise<DescribeDefaultAuthorizerResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDefaultAuthorizer",
      method: "GET",
      requestUri: "/default-authorizer",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "authorizerDescription": toAuthorizerDescription,
        },
      }, await resp.json()),
  };
  }

  async describeDimension(
    {abortSignal, ...params}: RequestConfig & DescribeDimensionRequest,
  ): Promise<DescribeDimensionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDimension",
      method: "GET",
      requestUri: cmnP.encodePath`/dimensions/${params["name"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "name": "s",
          "arn": "s",
          "type": (x: jsonP.JSONValue) => cmnP.readEnum<DimensionType>(x),
          "stringValues": ["s"],
          "creationDate": "d",
          "lastModifiedDate": "d",
        },
      }, await resp.json()),
  };
  }

  async describeDomainConfiguration(
    {abortSignal, ...params}: RequestConfig & DescribeDomainConfigurationRequest,
  ): Promise<DescribeDomainConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeDomainConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/domainConfigurations/${params["domainConfigurationName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "domainConfigurationName": "s",
          "domainConfigurationArn": "s",
          "domainName": "s",
          "serverCertificates": [toServerCertificateSummary],
          "authorizerConfig": toAuthorizerConfig,
          "domainConfigurationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<DomainConfigurationStatus>(x),
          "serviceType": (x: jsonP.JSONValue) => cmnP.readEnum<ServiceType>(x),
          "domainType": (x: jsonP.JSONValue) => cmnP.readEnum<DomainType>(x),
          "lastStatusChangeDate": "d",
        },
      }, await resp.json()),
  };
  }

  async describeEndpoint(
    {abortSignal, ...params}: RequestConfig & DescribeEndpointRequest = {},
  ): Promise<DescribeEndpointResponse> {
    const query = new URLSearchParams;
    if (params["endpointType"] != null) query.set("endpointType", params["endpointType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeEndpoint",
      method: "GET",
      requestUri: "/endpoint",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "endpointAddress": "s",
        },
      }, await resp.json()),
  };
  }

  async describeEventConfigurations(
    {abortSignal, ...params}: RequestConfig & DescribeEventConfigurationsRequest = {},
  ): Promise<DescribeEventConfigurationsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeEventConfigurations",
      method: "GET",
      requestUri: "/event-configurations",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "eventConfigurations": x => jsonP.readMap(x => cmnP.readEnumReq<EventType>(x), toConfiguration, x),
          "creationDate": "d",
          "lastModifiedDate": "d",
        },
      }, await resp.json()),
  };
  }

  async describeIndex(
    {abortSignal, ...params}: RequestConfig & DescribeIndexRequest,
  ): Promise<DescribeIndexResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeIndex",
      method: "GET",
      requestUri: cmnP.encodePath`/indices/${params["indexName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "indexName": "s",
          "indexStatus": (x: jsonP.JSONValue) => cmnP.readEnum<IndexStatus>(x),
          "schema": "s",
        },
      }, await resp.json()),
  };
  }

  async describeJob(
    {abortSignal, ...params}: RequestConfig & DescribeJobRequest,
  ): Promise<DescribeJobResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeJob",
      method: "GET",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "documentSource": "s",
          "job": toJob,
        },
      }, await resp.json()),
  };
  }

  async describeJobExecution(
    {abortSignal, ...params}: RequestConfig & DescribeJobExecutionRequest,
  ): Promise<DescribeJobExecutionResponse> {
    const query = new URLSearchParams;
    if (params["executionNumber"] != null) query.set("executionNumber", params["executionNumber"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DescribeJobExecution",
      method: "GET",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/jobs/${params["jobId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "execution": toJobExecution,
        },
      }, await resp.json()),
  };
  }

  async describeMitigationAction(
    {abortSignal, ...params}: RequestConfig & DescribeMitigationActionRequest,
  ): Promise<DescribeMitigationActionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeMitigationAction",
      method: "GET",
      requestUri: cmnP.encodePath`/mitigationactions/actions/${params["actionName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "actionName": "s",
          "actionType": (x: jsonP.JSONValue) => cmnP.readEnum<MitigationActionType>(x),
          "actionArn": "s",
          "actionId": "s",
          "roleArn": "s",
          "actionParams": toMitigationActionParams,
          "creationDate": "d",
          "lastModifiedDate": "d",
        },
      }, await resp.json()),
  };
  }

  async describeProvisioningTemplate(
    {abortSignal, ...params}: RequestConfig & DescribeProvisioningTemplateRequest,
  ): Promise<DescribeProvisioningTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProvisioningTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "templateArn": "s",
          "templateName": "s",
          "description": "s",
          "creationDate": "d",
          "lastModifiedDate": "d",
          "defaultVersionId": "n",
          "templateBody": "s",
          "enabled": "b",
          "provisioningRoleArn": "s",
          "preProvisioningHook": toProvisioningHook,
        },
      }, await resp.json()),
  };
  }

  async describeProvisioningTemplateVersion(
    {abortSignal, ...params}: RequestConfig & DescribeProvisioningTemplateVersionRequest,
  ): Promise<DescribeProvisioningTemplateVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeProvisioningTemplateVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}/versions/${params["versionId"].toString()}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "versionId": "n",
          "creationDate": "d",
          "templateBody": "s",
          "isDefaultVersion": "b",
        },
      }, await resp.json()),
  };
  }

  async describeRoleAlias(
    {abortSignal, ...params}: RequestConfig & DescribeRoleAliasRequest,
  ): Promise<DescribeRoleAliasResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeRoleAlias",
      method: "GET",
      requestUri: cmnP.encodePath`/role-aliases/${params["roleAlias"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "roleAliasDescription": toRoleAliasDescription,
        },
      }, await resp.json()),
  };
  }

  async describeScheduledAudit(
    {abortSignal, ...params}: RequestConfig & DescribeScheduledAuditRequest,
  ): Promise<DescribeScheduledAuditResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeScheduledAudit",
      method: "GET",
      requestUri: cmnP.encodePath`/audit/scheduledaudits/${params["scheduledAuditName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "frequency": (x: jsonP.JSONValue) => cmnP.readEnum<AuditFrequency>(x),
          "dayOfMonth": "s",
          "dayOfWeek": (x: jsonP.JSONValue) => cmnP.readEnum<DayOfWeek>(x),
          "targetCheckNames": ["s"],
          "scheduledAuditName": "s",
          "scheduledAuditArn": "s",
        },
      }, await resp.json()),
  };
  }

  async describeSecurityProfile(
    {abortSignal, ...params}: RequestConfig & DescribeSecurityProfileRequest,
  ): Promise<DescribeSecurityProfileResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeSecurityProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/security-profiles/${params["securityProfileName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "securityProfileName": "s",
          "securityProfileArn": "s",
          "securityProfileDescription": "s",
          "behaviors": [toBehavior],
          "alertTargets": x => jsonP.readMap(x => cmnP.readEnumReq<AlertTargetType>(x), toAlertTarget, x),
          "additionalMetricsToRetain": ["s"],
          "additionalMetricsToRetainV2": [toMetricToRetain],
          "version": "n",
          "creationDate": "d",
          "lastModifiedDate": "d",
        },
      }, await resp.json()),
  };
  }

  async describeStream(
    {abortSignal, ...params}: RequestConfig & DescribeStreamRequest,
  ): Promise<DescribeStreamResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeStream",
      method: "GET",
      requestUri: cmnP.encodePath`/streams/${params["streamId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "streamInfo": toStreamInfo,
        },
      }, await resp.json()),
  };
  }

  async describeThing(
    {abortSignal, ...params}: RequestConfig & DescribeThingRequest,
  ): Promise<DescribeThingResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeThing",
      method: "GET",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "defaultClientId": "s",
          "thingName": "s",
          "thingId": "s",
          "thingArn": "s",
          "thingTypeName": "s",
          "attributes": x => jsonP.readMap(String, String, x),
          "version": "n",
          "billingGroupName": "s",
        },
      }, await resp.json()),
  };
  }

  async describeThingGroup(
    {abortSignal, ...params}: RequestConfig & DescribeThingGroupRequest,
  ): Promise<DescribeThingGroupResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeThingGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/thing-groups/${params["thingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingGroupName": "s",
          "thingGroupId": "s",
          "thingGroupArn": "s",
          "version": "n",
          "thingGroupProperties": toThingGroupProperties,
          "thingGroupMetadata": toThingGroupMetadata,
          "indexName": "s",
          "queryString": "s",
          "queryVersion": "s",
          "status": (x: jsonP.JSONValue) => cmnP.readEnum<DynamicGroupStatus>(x),
        },
      }, await resp.json()),
  };
  }

  async describeThingRegistrationTask(
    {abortSignal, ...params}: RequestConfig & DescribeThingRegistrationTaskRequest,
  ): Promise<DescribeThingRegistrationTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeThingRegistrationTask",
      method: "GET",
      requestUri: cmnP.encodePath`/thing-registration-tasks/${params["taskId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "taskId": "s",
          "creationDate": "d",
          "lastModifiedDate": "d",
          "templateBody": "s",
          "inputFileBucket": "s",
          "inputFileKey": "s",
          "roleArn": "s",
          "status": (x: jsonP.JSONValue) => cmnP.readEnum<Status>(x),
          "message": "s",
          "successCount": "n",
          "failureCount": "n",
          "percentageProgress": "n",
        },
      }, await resp.json()),
  };
  }

  async describeThingType(
    {abortSignal, ...params}: RequestConfig & DescribeThingTypeRequest,
  ): Promise<DescribeThingTypeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DescribeThingType",
      method: "GET",
      requestUri: cmnP.encodePath`/thing-types/${params["thingTypeName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingTypeName": "s",
          "thingTypeId": "s",
          "thingTypeArn": "s",
          "thingTypeProperties": toThingTypeProperties,
          "thingTypeMetadata": toThingTypeMetadata,
        },
      }, await resp.json()),
  };
  }

  async detachPolicy(
    {abortSignal, ...params}: RequestConfig & DetachPolicyRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      target: params["target"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DetachPolicy",
      requestUri: cmnP.encodePath`/target-policies/${params["policyName"]}`,
    });
  }

  async detachPrincipalPolicy(
    {abortSignal, ...params}: RequestConfig & DetachPrincipalPolicyRequest,
  ): Promise<void> {
    const headers = new Headers;
    headers.append("x-amzn-iot-principal", params["principal"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DetachPrincipalPolicy",
      method: "DELETE",
      requestUri: cmnP.encodePath`/principal-policies/${params["policyName"]}`,
    });
  }

  async detachSecurityProfile(
    {abortSignal, ...params}: RequestConfig & DetachSecurityProfileRequest,
  ): Promise<DetachSecurityProfileResponse> {
    const query = new URLSearchParams;
    query.set("securityProfileTargetArn", params["securityProfileTargetArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DetachSecurityProfile",
      method: "DELETE",
      requestUri: cmnP.encodePath`/security-profiles/${params["securityProfileName"]}/targets`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async detachThingPrincipal(
    {abortSignal, ...params}: RequestConfig & DetachThingPrincipalRequest,
  ): Promise<DetachThingPrincipalResponse> {
    const headers = new Headers;
    headers.append("x-amzn-principal", params["principal"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers,
      action: "DetachThingPrincipal",
      method: "DELETE",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/principals`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async disableTopicRule(
    {abortSignal, ...params}: RequestConfig & DisableTopicRuleRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DisableTopicRule",
      requestUri: cmnP.encodePath`/rules/${params["ruleName"]}/disable`,
    });
  }

  async enableTopicRule(
    {abortSignal, ...params}: RequestConfig & EnableTopicRuleRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "EnableTopicRule",
      requestUri: cmnP.encodePath`/rules/${params["ruleName"]}/enable`,
    });
  }

  async getCardinality(
    {abortSignal, ...params}: RequestConfig & GetCardinalityRequest,
  ): Promise<GetCardinalityResponse> {
    const body: jsonP.JSONObject = params ? {
      indexName: params["indexName"],
      queryString: params["queryString"],
      aggregationField: params["aggregationField"],
      queryVersion: params["queryVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetCardinality",
      requestUri: "/indices/cardinality",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "cardinality": "n",
        },
      }, await resp.json()),
  };
  }

  async getEffectivePolicies(
    {abortSignal, ...params}: RequestConfig & GetEffectivePoliciesRequest = {},
  ): Promise<GetEffectivePoliciesResponse> {
    const query = new URLSearchParams;
    if (params["thingName"] != null) query.set("thingName", params["thingName"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      principal: params["principal"],
      cognitoIdentityPoolId: params["cognitoIdentityPoolId"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "GetEffectivePolicies",
      requestUri: "/effective-policies",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "effectivePolicies": [toEffectivePolicy],
        },
      }, await resp.json()),
  };
  }

  async getIndexingConfiguration(
    {abortSignal, ...params}: RequestConfig & GetIndexingConfigurationRequest = {},
  ): Promise<GetIndexingConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetIndexingConfiguration",
      method: "GET",
      requestUri: "/indexing/config",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingIndexingConfiguration": toThingIndexingConfiguration,
          "thingGroupIndexingConfiguration": toThingGroupIndexingConfiguration,
        },
      }, await resp.json()),
  };
  }

  async getJobDocument(
    {abortSignal, ...params}: RequestConfig & GetJobDocumentRequest,
  ): Promise<GetJobDocumentResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetJobDocument",
      method: "GET",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}/job-document`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "document": "s",
        },
      }, await resp.json()),
  };
  }

  async getLoggingOptions(
    {abortSignal, ...params}: RequestConfig & GetLoggingOptionsRequest = {},
  ): Promise<GetLoggingOptionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetLoggingOptions",
      method: "GET",
      requestUri: "/loggingOptions",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "roleArn": "s",
          "logLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LogLevel>(x),
        },
      }, await resp.json()),
  };
  }

  async getOTAUpdate(
    {abortSignal, ...params}: RequestConfig & GetOTAUpdateRequest,
  ): Promise<GetOTAUpdateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetOTAUpdate",
      method: "GET",
      requestUri: cmnP.encodePath`/otaUpdates/${params["otaUpdateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "otaUpdateInfo": toOTAUpdateInfo,
        },
      }, await resp.json()),
  };
  }

  async getPercentiles(
    {abortSignal, ...params}: RequestConfig & GetPercentilesRequest,
  ): Promise<GetPercentilesResponse> {
    const body: jsonP.JSONObject = params ? {
      indexName: params["indexName"],
      queryString: params["queryString"],
      aggregationField: params["aggregationField"],
      queryVersion: params["queryVersion"],
      percents: params["percents"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetPercentiles",
      requestUri: "/indices/percentiles",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "percentiles": [toPercentPair],
        },
      }, await resp.json()),
  };
  }

  async getPolicy(
    {abortSignal, ...params}: RequestConfig & GetPolicyRequest,
  ): Promise<GetPolicyResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPolicy",
      method: "GET",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policyName": "s",
          "policyArn": "s",
          "policyDocument": "s",
          "defaultVersionId": "s",
          "creationDate": "d",
          "lastModifiedDate": "d",
          "generationId": "s",
        },
      }, await resp.json()),
  };
  }

  async getPolicyVersion(
    {abortSignal, ...params}: RequestConfig & GetPolicyVersionRequest,
  ): Promise<GetPolicyVersionResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPolicyVersion",
      method: "GET",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}/version/${params["policyVersionId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policyArn": "s",
          "policyName": "s",
          "policyDocument": "s",
          "policyVersionId": "s",
          "isDefaultVersion": "b",
          "creationDate": "d",
          "lastModifiedDate": "d",
          "generationId": "s",
        },
      }, await resp.json()),
  };
  }

  async getRegistrationCode(
    {abortSignal, ...params}: RequestConfig & GetRegistrationCodeRequest = {},
  ): Promise<GetRegistrationCodeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetRegistrationCode",
      method: "GET",
      requestUri: "/registrationcode",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "registrationCode": "s",
        },
      }, await resp.json()),
  };
  }

  async getStatistics(
    {abortSignal, ...params}: RequestConfig & GetStatisticsRequest,
  ): Promise<GetStatisticsResponse> {
    const body: jsonP.JSONObject = params ? {
      indexName: params["indexName"],
      queryString: params["queryString"],
      aggregationField: params["aggregationField"],
      queryVersion: params["queryVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetStatistics",
      requestUri: "/indices/statistics",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "statistics": toStatistics,
        },
      }, await resp.json()),
  };
  }

  async getTopicRule(
    {abortSignal, ...params}: RequestConfig & GetTopicRuleRequest,
  ): Promise<GetTopicRuleResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetTopicRule",
      method: "GET",
      requestUri: cmnP.encodePath`/rules/${params["ruleName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "ruleArn": "s",
          "rule": toTopicRule,
        },
      }, await resp.json()),
  };
  }

  async getTopicRuleDestination(
    {abortSignal, ...params}: RequestConfig & GetTopicRuleDestinationRequest,
  ): Promise<GetTopicRuleDestinationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetTopicRuleDestination",
      method: "GET",
      requestUri: cmnP.encodePath`/destinations/${params["arn"].split("/")}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "topicRuleDestination": toTopicRuleDestination,
        },
      }, await resp.json()),
  };
  }

  async getV2LoggingOptions(
    {abortSignal, ...params}: RequestConfig & GetV2LoggingOptionsRequest = {},
  ): Promise<GetV2LoggingOptionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetV2LoggingOptions",
      method: "GET",
      requestUri: "/v2LoggingOptions",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "roleArn": "s",
          "defaultLogLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LogLevel>(x),
          "disableAllLogs": "b",
        },
      }, await resp.json()),
  };
  }

  async listActiveViolations(
    {abortSignal, ...params}: RequestConfig & ListActiveViolationsRequest = {},
  ): Promise<ListActiveViolationsResponse> {
    const query = new URLSearchParams;
    if (params["thingName"] != null) query.set("thingName", params["thingName"]?.toString() ?? "");
    if (params["securityProfileName"] != null) query.set("securityProfileName", params["securityProfileName"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListActiveViolations",
      method: "GET",
      requestUri: "/active-violations",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "activeViolations": [toActiveViolation],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listAttachedPolicies(
    {abortSignal, ...params}: RequestConfig & ListAttachedPoliciesRequest,
  ): Promise<ListAttachedPoliciesResponse> {
    const query = new URLSearchParams;
    if (params["recursive"] != null) query.set("recursive", params["recursive"]?.toString() ?? "");
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAttachedPolicies",
      requestUri: cmnP.encodePath`/attached-policies/${params["target"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policies": [toPolicy],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listAuditFindings(
    {abortSignal, ...params}: RequestConfig & ListAuditFindingsRequest = {},
  ): Promise<ListAuditFindingsResponse> {
    const body: jsonP.JSONObject = params ? {
      taskId: params["taskId"],
      checkName: params["checkName"],
      resourceIdentifier: fromResourceIdentifier(params["resourceIdentifier"]),
      maxResults: params["maxResults"],
      nextToken: params["nextToken"],
      startTime: jsonP.serializeDate_unixTimestamp(params["startTime"]),
      endTime: jsonP.serializeDate_unixTimestamp(params["endTime"]),
      listSuppressedFindings: params["listSuppressedFindings"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAuditFindings",
      requestUri: "/audit/findings",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "findings": [toAuditFinding],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listAuditMitigationActionsExecutions(
    {abortSignal, ...params}: RequestConfig & ListAuditMitigationActionsExecutionsRequest,
  ): Promise<ListAuditMitigationActionsExecutionsResponse> {
    const query = new URLSearchParams;
    query.set("taskId", params["taskId"]?.toString() ?? "");
    if (params["actionStatus"] != null) query.set("actionStatus", params["actionStatus"]?.toString() ?? "");
    query.set("findingId", params["findingId"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAuditMitigationActionsExecutions",
      method: "GET",
      requestUri: "/audit/mitigationactions/executions",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "actionsExecutions": [toAuditMitigationActionExecutionMetadata],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listAuditMitigationActionsTasks(
    {abortSignal, ...params}: RequestConfig & ListAuditMitigationActionsTasksRequest,
  ): Promise<ListAuditMitigationActionsTasksResponse> {
    const query = new URLSearchParams;
    if (params["auditTaskId"] != null) query.set("auditTaskId", params["auditTaskId"]?.toString() ?? "");
    if (params["findingId"] != null) query.set("findingId", params["findingId"]?.toString() ?? "");
    if (params["taskStatus"] != null) query.set("taskStatus", params["taskStatus"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAuditMitigationActionsTasks",
      method: "GET",
      requestUri: "/audit/mitigationactions/tasks",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "tasks": [toAuditMitigationActionsTaskMetadata],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listAuditSuppressions(
    {abortSignal, ...params}: RequestConfig & ListAuditSuppressionsRequest = {},
  ): Promise<ListAuditSuppressionsResponse> {
    const body: jsonP.JSONObject = params ? {
      checkName: params["checkName"],
      resourceIdentifier: fromResourceIdentifier(params["resourceIdentifier"]),
      ascendingOrder: params["ascendingOrder"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAuditSuppressions",
      requestUri: "/audit/suppressions/list",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "suppressions": [toAuditSuppression],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listAuditTasks(
    {abortSignal, ...params}: RequestConfig & ListAuditTasksRequest,
  ): Promise<ListAuditTasksResponse> {
    const query = new URLSearchParams;
    query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    if (params["taskType"] != null) query.set("taskType", params["taskType"]?.toString() ?? "");
    if (params["taskStatus"] != null) query.set("taskStatus", params["taskStatus"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAuditTasks",
      method: "GET",
      requestUri: "/audit/tasks",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "tasks": [toAuditTaskMetadata],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listAuthorizers(
    {abortSignal, ...params}: RequestConfig & ListAuthorizersRequest = {},
  ): Promise<ListAuthorizersResponse> {
    const query = new URLSearchParams;
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    if (params["status"] != null) query.set("status", params["status"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListAuthorizers",
      method: "GET",
      requestUri: "/authorizers/",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "authorizers": [toAuthorizerSummary],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listBillingGroups(
    {abortSignal, ...params}: RequestConfig & ListBillingGroupsRequest = {},
  ): Promise<ListBillingGroupsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["namePrefixFilter"] != null) query.set("namePrefixFilter", params["namePrefixFilter"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListBillingGroups",
      method: "GET",
      requestUri: "/billing-groups",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "billingGroups": [toGroupNameAndArn],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listCACertificates(
    {abortSignal, ...params}: RequestConfig & ListCACertificatesRequest = {},
  ): Promise<ListCACertificatesResponse> {
    const query = new URLSearchParams;
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCACertificates",
      method: "GET",
      requestUri: "/cacertificates",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificates": [toCACertificate],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listCertificates(
    {abortSignal, ...params}: RequestConfig & ListCertificatesRequest = {},
  ): Promise<ListCertificatesResponse> {
    const query = new URLSearchParams;
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCertificates",
      method: "GET",
      requestUri: "/certificates",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificates": [toCertificate],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listCertificatesByCA(
    {abortSignal, ...params}: RequestConfig & ListCertificatesByCARequest,
  ): Promise<ListCertificatesByCAResponse> {
    const query = new URLSearchParams;
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListCertificatesByCA",
      method: "GET",
      requestUri: cmnP.encodePath`/certificates-by-ca/${params["caCertificateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificates": [toCertificate],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listDimensions(
    {abortSignal, ...params}: RequestConfig & ListDimensionsRequest = {},
  ): Promise<ListDimensionsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDimensions",
      method: "GET",
      requestUri: "/dimensions",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "dimensionNames": ["s"],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listDomainConfigurations(
    {abortSignal, ...params}: RequestConfig & ListDomainConfigurationsRequest = {},
  ): Promise<ListDomainConfigurationsResponse> {
    const query = new URLSearchParams;
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["serviceType"] != null) query.set("serviceType", params["serviceType"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDomainConfigurations",
      method: "GET",
      requestUri: "/domainConfigurations",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "domainConfigurations": [toDomainConfigurationSummary],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listIndices(
    {abortSignal, ...params}: RequestConfig & ListIndicesRequest = {},
  ): Promise<ListIndicesResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIndices",
      method: "GET",
      requestUri: "/indices",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "indexNames": ["s"],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listJobExecutionsForJob(
    {abortSignal, ...params}: RequestConfig & ListJobExecutionsForJobRequest,
  ): Promise<ListJobExecutionsForJobResponse> {
    const query = new URLSearchParams;
    if (params["status"] != null) query.set("status", params["status"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJobExecutionsForJob",
      method: "GET",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}/things`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "executionSummaries": [toJobExecutionSummaryForJob],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listJobExecutionsForThing(
    {abortSignal, ...params}: RequestConfig & ListJobExecutionsForThingRequest,
  ): Promise<ListJobExecutionsForThingResponse> {
    const query = new URLSearchParams;
    if (params["status"] != null) query.set("status", params["status"]?.toString() ?? "");
    if (params["namespaceId"] != null) query.set("namespaceId", params["namespaceId"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJobExecutionsForThing",
      method: "GET",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/jobs`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "executionSummaries": [toJobExecutionSummaryForThing],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listJobs(
    {abortSignal, ...params}: RequestConfig & ListJobsRequest = {},
  ): Promise<ListJobsResponse> {
    const query = new URLSearchParams;
    if (params["status"] != null) query.set("status", params["status"]?.toString() ?? "");
    if (params["targetSelection"] != null) query.set("targetSelection", params["targetSelection"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["thingGroupName"] != null) query.set("thingGroupName", params["thingGroupName"]?.toString() ?? "");
    if (params["thingGroupId"] != null) query.set("thingGroupId", params["thingGroupId"]?.toString() ?? "");
    if (params["namespaceId"] != null) query.set("namespaceId", params["namespaceId"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListJobs",
      method: "GET",
      requestUri: "/jobs",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "jobs": [toJobSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listMitigationActions(
    {abortSignal, ...params}: RequestConfig & ListMitigationActionsRequest = {},
  ): Promise<ListMitigationActionsResponse> {
    const query = new URLSearchParams;
    if (params["actionType"] != null) query.set("actionType", params["actionType"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListMitigationActions",
      method: "GET",
      requestUri: "/mitigationactions/actions",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "actionIdentifiers": [toMitigationActionIdentifier],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listOTAUpdates(
    {abortSignal, ...params}: RequestConfig & ListOTAUpdatesRequest = {},
  ): Promise<ListOTAUpdatesResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["otaUpdateStatus"] != null) query.set("otaUpdateStatus", params["otaUpdateStatus"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListOTAUpdates",
      method: "GET",
      requestUri: "/otaUpdates",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "otaUpdates": [toOTAUpdateSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listOutgoingCertificates(
    {abortSignal, ...params}: RequestConfig & ListOutgoingCertificatesRequest = {},
  ): Promise<ListOutgoingCertificatesResponse> {
    const query = new URLSearchParams;
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListOutgoingCertificates",
      method: "GET",
      requestUri: "/certificates-out-going",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "outgoingCertificates": [toOutgoingCertificate],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listPolicies(
    {abortSignal, ...params}: RequestConfig & ListPoliciesRequest = {},
  ): Promise<ListPoliciesResponse> {
    const query = new URLSearchParams;
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPolicies",
      method: "GET",
      requestUri: "/policies",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policies": [toPolicy],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listPolicyPrincipals(
    {abortSignal, ...params}: RequestConfig & ListPolicyPrincipalsRequest,
  ): Promise<ListPolicyPrincipalsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    headers.append("x-amzn-iot-policy", params["policyName"]);
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListPolicyPrincipals",
      method: "GET",
      requestUri: "/policy-principals",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "principals": ["s"],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listPolicyVersions(
    {abortSignal, ...params}: RequestConfig & ListPolicyVersionsRequest,
  ): Promise<ListPolicyVersionsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListPolicyVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}/version`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policyVersions": [toPolicyVersion],
        },
      }, await resp.json()),
  };
  }

  async listPrincipalPolicies(
    {abortSignal, ...params}: RequestConfig & ListPrincipalPoliciesRequest,
  ): Promise<ListPrincipalPoliciesResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    headers.append("x-amzn-iot-principal", params["principal"]);
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListPrincipalPolicies",
      method: "GET",
      requestUri: "/principal-policies",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "policies": [toPolicy],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listPrincipalThings(
    {abortSignal, ...params}: RequestConfig & ListPrincipalThingsRequest,
  ): Promise<ListPrincipalThingsResponse> {
    const headers = new Headers;
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    headers.append("x-amzn-principal", params["principal"]);
    const resp = await this.#client.performRequest({
      abortSignal, headers, query,
      action: "ListPrincipalThings",
      method: "GET",
      requestUri: "/principals/things",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "things": ["s"],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listProvisioningTemplateVersions(
    {abortSignal, ...params}: RequestConfig & ListProvisioningTemplateVersionsRequest,
  ): Promise<ListProvisioningTemplateVersionsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProvisioningTemplateVersions",
      method: "GET",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}/versions`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "versions": [toProvisioningTemplateVersionSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listProvisioningTemplates(
    {abortSignal, ...params}: RequestConfig & ListProvisioningTemplatesRequest = {},
  ): Promise<ListProvisioningTemplatesResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProvisioningTemplates",
      method: "GET",
      requestUri: "/provisioning-templates",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "templates": [toProvisioningTemplateSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listRoleAliases(
    {abortSignal, ...params}: RequestConfig & ListRoleAliasesRequest = {},
  ): Promise<ListRoleAliasesResponse> {
    const query = new URLSearchParams;
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListRoleAliases",
      method: "GET",
      requestUri: "/role-aliases",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "roleAliases": ["s"],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listScheduledAudits(
    {abortSignal, ...params}: RequestConfig & ListScheduledAuditsRequest = {},
  ): Promise<ListScheduledAuditsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListScheduledAudits",
      method: "GET",
      requestUri: "/audit/scheduledaudits",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "scheduledAudits": [toScheduledAuditMetadata],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listSecurityProfiles(
    {abortSignal, ...params}: RequestConfig & ListSecurityProfilesRequest = {},
  ): Promise<ListSecurityProfilesResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["dimensionName"] != null) query.set("dimensionName", params["dimensionName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSecurityProfiles",
      method: "GET",
      requestUri: "/security-profiles",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "securityProfileIdentifiers": [toSecurityProfileIdentifier],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listSecurityProfilesForTarget(
    {abortSignal, ...params}: RequestConfig & ListSecurityProfilesForTargetRequest,
  ): Promise<ListSecurityProfilesForTargetResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["recursive"] != null) query.set("recursive", params["recursive"]?.toString() ?? "");
    query.set("securityProfileTargetArn", params["securityProfileTargetArn"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListSecurityProfilesForTarget",
      method: "GET",
      requestUri: "/security-profiles-for-target",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "securityProfileTargetMappings": [toSecurityProfileTargetMapping],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listStreams(
    {abortSignal, ...params}: RequestConfig & ListStreamsRequest = {},
  ): Promise<ListStreamsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["ascendingOrder"] != null) query.set("isAscendingOrder", params["ascendingOrder"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListStreams",
      method: "GET",
      requestUri: "/streams",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "streams": [toStreamSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {
    const query = new URLSearchParams;
    query.set("resourceArn", params["resourceArn"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: "/tags",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "tags": [toTag],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTargetsForPolicy(
    {abortSignal, ...params}: RequestConfig & ListTargetsForPolicyRequest,
  ): Promise<ListTargetsForPolicyResponse> {
    const query = new URLSearchParams;
    if (params["marker"] != null) query.set("marker", params["marker"]?.toString() ?? "");
    if (params["pageSize"] != null) query.set("pageSize", params["pageSize"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTargetsForPolicy",
      requestUri: cmnP.encodePath`/policy-targets/${params["policyName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "targets": ["s"],
          "nextMarker": "s",
        },
      }, await resp.json()),
  };
  }

  async listTargetsForSecurityProfile(
    {abortSignal, ...params}: RequestConfig & ListTargetsForSecurityProfileRequest,
  ): Promise<ListTargetsForSecurityProfileResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTargetsForSecurityProfile",
      method: "GET",
      requestUri: cmnP.encodePath`/security-profiles/${params["securityProfileName"]}/targets`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "securityProfileTargets": [toSecurityProfileTarget],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThingGroups(
    {abortSignal, ...params}: RequestConfig & ListThingGroupsRequest = {},
  ): Promise<ListThingGroupsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["parentGroup"] != null) query.set("parentGroup", params["parentGroup"]?.toString() ?? "");
    if (params["namePrefixFilter"] != null) query.set("namePrefixFilter", params["namePrefixFilter"]?.toString() ?? "");
    if (params["recursive"] != null) query.set("recursive", params["recursive"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThingGroups",
      method: "GET",
      requestUri: "/thing-groups",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingGroups": [toGroupNameAndArn],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThingGroupsForThing(
    {abortSignal, ...params}: RequestConfig & ListThingGroupsForThingRequest,
  ): Promise<ListThingGroupsForThingResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThingGroupsForThing",
      method: "GET",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/thing-groups`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingGroups": [toGroupNameAndArn],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThingPrincipals(
    {abortSignal, ...params}: RequestConfig & ListThingPrincipalsRequest,
  ): Promise<ListThingPrincipalsResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListThingPrincipals",
      method: "GET",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}/principals`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "principals": ["s"],
        },
      }, await resp.json()),
  };
  }

  async listThingRegistrationTaskReports(
    {abortSignal, ...params}: RequestConfig & ListThingRegistrationTaskReportsRequest,
  ): Promise<ListThingRegistrationTaskReportsResponse> {
    const query = new URLSearchParams;
    query.set("reportType", params["reportType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThingRegistrationTaskReports",
      method: "GET",
      requestUri: cmnP.encodePath`/thing-registration-tasks/${params["taskId"]}/reports`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "resourceLinks": ["s"],
          "reportType": (x: jsonP.JSONValue) => cmnP.readEnum<ReportType>(x),
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThingRegistrationTasks(
    {abortSignal, ...params}: RequestConfig & ListThingRegistrationTasksRequest = {},
  ): Promise<ListThingRegistrationTasksResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["status"] != null) query.set("status", params["status"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThingRegistrationTasks",
      method: "GET",
      requestUri: "/thing-registration-tasks",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "taskIds": ["s"],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThingTypes(
    {abortSignal, ...params}: RequestConfig & ListThingTypesRequest = {},
  ): Promise<ListThingTypesResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["thingTypeName"] != null) query.set("thingTypeName", params["thingTypeName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThingTypes",
      method: "GET",
      requestUri: "/thing-types",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "thingTypes": [toThingTypeDefinition],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThings(
    {abortSignal, ...params}: RequestConfig & ListThingsRequest = {},
  ): Promise<ListThingsResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["attributeName"] != null) query.set("attributeName", params["attributeName"]?.toString() ?? "");
    if (params["attributeValue"] != null) query.set("attributeValue", params["attributeValue"]?.toString() ?? "");
    if (params["thingTypeName"] != null) query.set("thingTypeName", params["thingTypeName"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThings",
      method: "GET",
      requestUri: "/things",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "things": [toThingAttribute],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThingsInBillingGroup(
    {abortSignal, ...params}: RequestConfig & ListThingsInBillingGroupRequest,
  ): Promise<ListThingsInBillingGroupResponse> {
    const query = new URLSearchParams;
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThingsInBillingGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/billing-groups/${params["billingGroupName"]}/things`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "things": ["s"],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listThingsInThingGroup(
    {abortSignal, ...params}: RequestConfig & ListThingsInThingGroupRequest,
  ): Promise<ListThingsInThingGroupResponse> {
    const query = new URLSearchParams;
    if (params["recursive"] != null) query.set("recursive", params["recursive"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListThingsInThingGroup",
      method: "GET",
      requestUri: cmnP.encodePath`/thing-groups/${params["thingGroupName"]}/things`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "things": ["s"],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTopicRuleDestinations(
    {abortSignal, ...params}: RequestConfig & ListTopicRuleDestinationsRequest = {},
  ): Promise<ListTopicRuleDestinationsResponse> {
    const query = new URLSearchParams;
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTopicRuleDestinations",
      method: "GET",
      requestUri: "/destinations",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "destinationSummaries": [toTopicRuleDestinationSummary],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTopicRules(
    {abortSignal, ...params}: RequestConfig & ListTopicRulesRequest = {},
  ): Promise<ListTopicRulesResponse> {
    const query = new URLSearchParams;
    if (params["topic"] != null) query.set("topic", params["topic"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["ruleDisabled"] != null) query.set("ruleDisabled", params["ruleDisabled"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListTopicRules",
      method: "GET",
      requestUri: "/rules",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "rules": [toTopicRuleListItem],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listV2LoggingLevels(
    {abortSignal, ...params}: RequestConfig & ListV2LoggingLevelsRequest = {},
  ): Promise<ListV2LoggingLevelsResponse> {
    const query = new URLSearchParams;
    if (params["targetType"] != null) query.set("targetType", params["targetType"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListV2LoggingLevels",
      method: "GET",
      requestUri: "/v2LoggingLevel",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "logTargetConfigurations": [toLogTargetConfiguration],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listViolationEvents(
    {abortSignal, ...params}: RequestConfig & ListViolationEventsRequest,
  ): Promise<ListViolationEventsResponse> {
    const query = new URLSearchParams;
    query.set("startTime", cmnP.serializeDate_iso8601(params["startTime"]) ?? "");
    query.set("endTime", cmnP.serializeDate_iso8601(params["endTime"]) ?? "");
    if (params["thingName"] != null) query.set("thingName", params["thingName"]?.toString() ?? "");
    if (params["securityProfileName"] != null) query.set("securityProfileName", params["securityProfileName"]?.toString() ?? "");
    if (params["nextToken"] != null) query.set("nextToken", params["nextToken"]?.toString() ?? "");
    if (params["maxResults"] != null) query.set("maxResults", params["maxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListViolationEvents",
      method: "GET",
      requestUri: "/violation-events",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "violationEvents": [toViolationEvent],
          "nextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async registerCACertificate(
    {abortSignal, ...params}: RequestConfig & RegisterCACertificateRequest,
  ): Promise<RegisterCACertificateResponse> {
    const query = new URLSearchParams;
    if (params["setAsActive"] != null) query.set("setAsActive", params["setAsActive"]?.toString() ?? "");
    if (params["allowAutoRegistration"] != null) query.set("allowAutoRegistration", params["allowAutoRegistration"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      caCertificate: params["caCertificate"],
      verificationCertificate: params["verificationCertificate"],
      registrationConfig: fromRegistrationConfig(params["registrationConfig"]),
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "RegisterCACertificate",
      requestUri: "/cacertificate",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateArn": "s",
          "certificateId": "s",
        },
      }, await resp.json()),
  };
  }

  async registerCertificate(
    {abortSignal, ...params}: RequestConfig & RegisterCertificateRequest,
  ): Promise<RegisterCertificateResponse> {
    const query = new URLSearchParams;
    if (params["setAsActive"] != null) query.set("setAsActive", params["setAsActive"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      certificatePem: params["certificatePem"],
      caCertificatePem: params["caCertificatePem"],
      status: params["status"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "RegisterCertificate",
      requestUri: "/certificate/register",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateArn": "s",
          "certificateId": "s",
        },
      }, await resp.json()),
  };
  }

  async registerCertificateWithoutCA(
    {abortSignal, ...params}: RequestConfig & RegisterCertificateWithoutCARequest,
  ): Promise<RegisterCertificateWithoutCAResponse> {
    const body: jsonP.JSONObject = params ? {
      certificatePem: params["certificatePem"],
      status: params["status"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterCertificateWithoutCA",
      requestUri: "/certificate/register-no-ca",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificateArn": "s",
          "certificateId": "s",
        },
      }, await resp.json()),
  };
  }

  async registerThing(
    {abortSignal, ...params}: RequestConfig & RegisterThingRequest,
  ): Promise<RegisterThingResponse> {
    const body: jsonP.JSONObject = params ? {
      templateBody: params["templateBody"],
      parameters: params["parameters"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RegisterThing",
      requestUri: "/things",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "certificatePem": "s",
          "resourceArns": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async rejectCertificateTransfer(
    {abortSignal, ...params}: RequestConfig & RejectCertificateTransferRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      rejectReason: params["rejectReason"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectCertificateTransfer",
      method: "PATCH",
      requestUri: cmnP.encodePath`/reject-certificate-transfer/${params["certificateId"]}`,
    });
  }

  async removeThingFromBillingGroup(
    {abortSignal, ...params}: RequestConfig & RemoveThingFromBillingGroupRequest = {},
  ): Promise<RemoveThingFromBillingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      billingGroupName: params["billingGroupName"],
      billingGroupArn: params["billingGroupArn"],
      thingName: params["thingName"],
      thingArn: params["thingArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveThingFromBillingGroup",
      method: "PUT",
      requestUri: "/billing-groups/removeThingFromBillingGroup",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async removeThingFromThingGroup(
    {abortSignal, ...params}: RequestConfig & RemoveThingFromThingGroupRequest = {},
  ): Promise<RemoveThingFromThingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      thingGroupName: params["thingGroupName"],
      thingGroupArn: params["thingGroupArn"],
      thingName: params["thingName"],
      thingArn: params["thingArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RemoveThingFromThingGroup",
      method: "PUT",
      requestUri: "/thing-groups/removeThingFromThingGroup",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async replaceTopicRule(
    {abortSignal, ...params}: RequestConfig & ReplaceTopicRuleRequest,
  ): Promise<void> {
    const inner = params["topicRulePayload"];
    const body: jsonP.JSONObject = inner ? {
      sql: inner["sql"],
      description: inner["description"],
      actions: inner["actions"]?.map(x => fromAction(x)),
      ruleDisabled: inner["ruleDisabled"],
      awsIotSqlVersion: inner["awsIotSqlVersion"],
      errorAction: fromAction(inner["errorAction"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ReplaceTopicRule",
      method: "PATCH",
      requestUri: cmnP.encodePath`/rules/${params["ruleName"]}`,
    });
  }

  async searchIndex(
    {abortSignal, ...params}: RequestConfig & SearchIndexRequest,
  ): Promise<SearchIndexResponse> {
    const body: jsonP.JSONObject = params ? {
      indexName: params["indexName"],
      queryString: params["queryString"],
      nextToken: params["nextToken"],
      maxResults: params["maxResults"],
      queryVersion: params["queryVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SearchIndex",
      requestUri: "/indices/search",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "nextToken": "s",
          "things": [toThingDocument],
          "thingGroups": [toThingGroupDocument],
        },
      }, await resp.json()),
  };
  }

  async setDefaultAuthorizer(
    {abortSignal, ...params}: RequestConfig & SetDefaultAuthorizerRequest,
  ): Promise<SetDefaultAuthorizerResponse> {
    const body: jsonP.JSONObject = params ? {
      authorizerName: params["authorizerName"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetDefaultAuthorizer",
      requestUri: "/default-authorizer",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "authorizerName": "s",
          "authorizerArn": "s",
        },
      }, await resp.json()),
  };
  }

  async setDefaultPolicyVersion(
    {abortSignal, ...params}: RequestConfig & SetDefaultPolicyVersionRequest,
  ): Promise<void> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "SetDefaultPolicyVersion",
      method: "PATCH",
      requestUri: cmnP.encodePath`/policies/${params["policyName"]}/version/${params["policyVersionId"]}`,
    });
  }

  async setLoggingOptions(
    {abortSignal, ...params}: RequestConfig & SetLoggingOptionsRequest,
  ): Promise<void> {
    const inner = params["loggingOptionsPayload"];
    const body: jsonP.JSONObject = inner ? {
      roleArn: inner["roleArn"],
      logLevel: inner["logLevel"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetLoggingOptions",
      requestUri: "/loggingOptions",
    });
  }

  async setV2LoggingLevel(
    {abortSignal, ...params}: RequestConfig & SetV2LoggingLevelRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      logTarget: fromLogTarget(params["logTarget"]),
      logLevel: params["logLevel"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetV2LoggingLevel",
      requestUri: "/v2LoggingLevel",
    });
  }

  async setV2LoggingOptions(
    {abortSignal, ...params}: RequestConfig & SetV2LoggingOptionsRequest = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      roleArn: params["roleArn"],
      defaultLogLevel: params["defaultLogLevel"],
      disableAllLogs: params["disableAllLogs"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SetV2LoggingOptions",
      requestUri: "/v2LoggingOptions",
    });
  }

  async startAuditMitigationActionsTask(
    {abortSignal, ...params}: RequestConfig & StartAuditMitigationActionsTaskRequest,
  ): Promise<StartAuditMitigationActionsTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      target: fromAuditMitigationActionsTaskTarget(params["target"]),
      auditCheckToActionsMapping: params["auditCheckToActionsMapping"],
      clientRequestToken: params["clientRequestToken"] ?? generateIdemptToken(),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartAuditMitigationActionsTask",
      requestUri: cmnP.encodePath`/audit/mitigationactions/tasks/${params["taskId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "taskId": "s",
        },
      }, await resp.json()),
  };
  }

  async startOnDemandAuditTask(
    {abortSignal, ...params}: RequestConfig & StartOnDemandAuditTaskRequest,
  ): Promise<StartOnDemandAuditTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      targetCheckNames: params["targetCheckNames"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartOnDemandAuditTask",
      requestUri: "/audit/tasks",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "taskId": "s",
        },
      }, await resp.json()),
  };
  }

  async startThingRegistrationTask(
    {abortSignal, ...params}: RequestConfig & StartThingRegistrationTaskRequest,
  ): Promise<StartThingRegistrationTaskResponse> {
    const body: jsonP.JSONObject = params ? {
      templateBody: params["templateBody"],
      inputFileBucket: params["inputFileBucket"],
      inputFileKey: params["inputFileKey"],
      roleArn: params["roleArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartThingRegistrationTask",
      requestUri: "/thing-registration-tasks",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "taskId": "s",
        },
      }, await resp.json()),
  };
  }

  async stopThingRegistrationTask(
    {abortSignal, ...params}: RequestConfig & StopThingRegistrationTaskRequest,
  ): Promise<StopThingRegistrationTaskResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "StopThingRegistrationTask",
      method: "PUT",
      requestUri: cmnP.encodePath`/thing-registration-tasks/${params["taskId"]}/cancel`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      tags: params["tags"]?.map(x => fromTag(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: "/tags",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async testAuthorization(
    {abortSignal, ...params}: RequestConfig & TestAuthorizationRequest,
  ): Promise<TestAuthorizationResponse> {
    const query = new URLSearchParams;
    if (params["clientId"] != null) query.set("clientId", params["clientId"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      principal: params["principal"],
      cognitoIdentityPoolId: params["cognitoIdentityPoolId"],
      authInfos: params["authInfos"]?.map(x => fromAuthInfo(x)),
      policyNamesToAdd: params["policyNamesToAdd"],
      policyNamesToSkip: params["policyNamesToSkip"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "TestAuthorization",
      requestUri: "/test-authorization",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "authResults": [toAuthResult],
        },
      }, await resp.json()),
  };
  }

  async testInvokeAuthorizer(
    {abortSignal, ...params}: RequestConfig & TestInvokeAuthorizerRequest,
  ): Promise<TestInvokeAuthorizerResponse> {
    const body: jsonP.JSONObject = params ? {
      token: params["token"],
      tokenSignature: params["tokenSignature"],
      httpContext: fromHttpContext(params["httpContext"]),
      mqttContext: fromMqttContext(params["mqttContext"]),
      tlsContext: fromTlsContext(params["tlsContext"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TestInvokeAuthorizer",
      requestUri: cmnP.encodePath`/authorizer/${params["authorizerName"]}/test`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "isAuthenticated": "b",
          "principalId": "s",
          "policyDocuments": ["s"],
          "refreshAfterInSeconds": "n",
          "disconnectAfterInSeconds": "n",
        },
      }, await resp.json()),
  };
  }

  async transferCertificate(
    {abortSignal, ...params}: RequestConfig & TransferCertificateRequest,
  ): Promise<TransferCertificateResponse> {
    const query = new URLSearchParams;
    query.set("targetAwsAccount", params["targetAwsAccount"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      transferMessage: params["transferMessage"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "TransferCertificate",
      method: "PATCH",
      requestUri: cmnP.encodePath`/transfer-certificate/${params["certificateId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "transferredCertificateArn": "s",
        },
      }, await resp.json()),
  };
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: jsonP.JSONObject = params ? {
      resourceArn: params["resourceArn"],
      tagKeys: params["tagKeys"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
      requestUri: "/untag",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateAccountAuditConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateAccountAuditConfigurationRequest = {},
  ): Promise<UpdateAccountAuditConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      roleArn: params["roleArn"],
      auditNotificationTargetConfigurations: jsonP.serializeMap(params["auditNotificationTargetConfigurations"], x => fromAuditNotificationTarget(x)),
      auditCheckConfigurations: jsonP.serializeMap(params["auditCheckConfigurations"], x => fromAuditCheckConfiguration(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAccountAuditConfiguration",
      method: "PATCH",
      requestUri: "/audit/configuration",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateAuditSuppression(
    {abortSignal, ...params}: RequestConfig & UpdateAuditSuppressionRequest,
  ): Promise<UpdateAuditSuppressionResponse> {
    const body: jsonP.JSONObject = params ? {
      checkName: params["checkName"],
      resourceIdentifier: fromResourceIdentifier(params["resourceIdentifier"]),
      expirationDate: jsonP.serializeDate_unixTimestamp(params["expirationDate"]),
      suppressIndefinitely: params["suppressIndefinitely"],
      description: params["description"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAuditSuppression",
      method: "PATCH",
      requestUri: "/audit/suppressions/update",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateAuthorizer(
    {abortSignal, ...params}: RequestConfig & UpdateAuthorizerRequest,
  ): Promise<UpdateAuthorizerResponse> {
    const body: jsonP.JSONObject = params ? {
      authorizerFunctionArn: params["authorizerFunctionArn"],
      tokenKeyName: params["tokenKeyName"],
      tokenSigningPublicKeys: params["tokenSigningPublicKeys"],
      status: params["status"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateAuthorizer",
      method: "PUT",
      requestUri: cmnP.encodePath`/authorizer/${params["authorizerName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "authorizerName": "s",
          "authorizerArn": "s",
        },
      }, await resp.json()),
  };
  }

  async updateBillingGroup(
    {abortSignal, ...params}: RequestConfig & UpdateBillingGroupRequest,
  ): Promise<UpdateBillingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      billingGroupProperties: fromBillingGroupProperties(params["billingGroupProperties"]),
      expectedVersion: params["expectedVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateBillingGroup",
      method: "PATCH",
      requestUri: cmnP.encodePath`/billing-groups/${params["billingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "version": "n",
        },
      }, await resp.json()),
  };
  }

  async updateCACertificate(
    {abortSignal, ...params}: RequestConfig & UpdateCACertificateRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["newStatus"] != null) query.set("newStatus", params["newStatus"]?.toString() ?? "");
    if (params["newAutoRegistrationStatus"] != null) query.set("newAutoRegistrationStatus", params["newAutoRegistrationStatus"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      registrationConfig: fromRegistrationConfig(params["registrationConfig"]),
      removeAutoRegistration: params["removeAutoRegistration"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateCACertificate",
      method: "PUT",
      requestUri: cmnP.encodePath`/cacertificate/${params["certificateId"]}`,
    });
  }

  async updateCertificate(
    {abortSignal, ...params}: RequestConfig & UpdateCertificateRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("newStatus", params["newStatus"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UpdateCertificate",
      method: "PUT",
      requestUri: cmnP.encodePath`/certificates/${params["certificateId"]}`,
    });
  }

  async updateDimension(
    {abortSignal, ...params}: RequestConfig & UpdateDimensionRequest,
  ): Promise<UpdateDimensionResponse> {
    const body: jsonP.JSONObject = params ? {
      stringValues: params["stringValues"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDimension",
      method: "PATCH",
      requestUri: cmnP.encodePath`/dimensions/${params["name"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "name": "s",
          "arn": "s",
          "type": (x: jsonP.JSONValue) => cmnP.readEnum<DimensionType>(x),
          "stringValues": ["s"],
          "creationDate": "d",
          "lastModifiedDate": "d",
        },
      }, await resp.json()),
  };
  }

  async updateDomainConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateDomainConfigurationRequest,
  ): Promise<UpdateDomainConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      authorizerConfig: fromAuthorizerConfig(params["authorizerConfig"]),
      domainConfigurationStatus: params["domainConfigurationStatus"],
      removeAuthorizerConfig: params["removeAuthorizerConfig"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomainConfiguration",
      method: "PUT",
      requestUri: cmnP.encodePath`/domainConfigurations/${params["domainConfigurationName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "domainConfigurationName": "s",
          "domainConfigurationArn": "s",
        },
      }, await resp.json()),
  };
  }

  async updateDynamicThingGroup(
    {abortSignal, ...params}: RequestConfig & UpdateDynamicThingGroupRequest,
  ): Promise<UpdateDynamicThingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      thingGroupProperties: fromThingGroupProperties(params["thingGroupProperties"]),
      expectedVersion: params["expectedVersion"],
      indexName: params["indexName"],
      queryString: params["queryString"],
      queryVersion: params["queryVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDynamicThingGroup",
      method: "PATCH",
      requestUri: cmnP.encodePath`/dynamic-thing-groups/${params["thingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "version": "n",
        },
      }, await resp.json()),
  };
  }

  async updateEventConfigurations(
    {abortSignal, ...params}: RequestConfig & UpdateEventConfigurationsRequest = {},
  ): Promise<UpdateEventConfigurationsResponse> {
    const body: jsonP.JSONObject = params ? {
      eventConfigurations: jsonP.serializeMap(params["eventConfigurations"], x => fromConfiguration(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateEventConfigurations",
      method: "PATCH",
      requestUri: "/event-configurations",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateIndexingConfiguration(
    {abortSignal, ...params}: RequestConfig & UpdateIndexingConfigurationRequest = {},
  ): Promise<UpdateIndexingConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      thingIndexingConfiguration: fromThingIndexingConfiguration(params["thingIndexingConfiguration"]),
      thingGroupIndexingConfiguration: fromThingGroupIndexingConfiguration(params["thingGroupIndexingConfiguration"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateIndexingConfiguration",
      requestUri: "/indexing/config",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateJob(
    {abortSignal, ...params}: RequestConfig & UpdateJobRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    if (params["namespaceId"] != null) query.set("namespaceId", params["namespaceId"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      description: params["description"],
      presignedUrlConfig: fromPresignedUrlConfig(params["presignedUrlConfig"]),
      jobExecutionsRolloutConfig: fromJobExecutionsRolloutConfig(params["jobExecutionsRolloutConfig"]),
      abortConfig: fromAbortConfig(params["abortConfig"]),
      timeoutConfig: fromTimeoutConfig(params["timeoutConfig"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateJob",
      method: "PATCH",
      requestUri: cmnP.encodePath`/jobs/${params["jobId"]}`,
    });
  }

  async updateMitigationAction(
    {abortSignal, ...params}: RequestConfig & UpdateMitigationActionRequest,
  ): Promise<UpdateMitigationActionResponse> {
    const body: jsonP.JSONObject = params ? {
      roleArn: params["roleArn"],
      actionParams: fromMitigationActionParams(params["actionParams"]),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateMitigationAction",
      method: "PATCH",
      requestUri: cmnP.encodePath`/mitigationactions/actions/${params["actionName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "actionArn": "s",
          "actionId": "s",
        },
      }, await resp.json()),
  };
  }

  async updateProvisioningTemplate(
    {abortSignal, ...params}: RequestConfig & UpdateProvisioningTemplateRequest,
  ): Promise<UpdateProvisioningTemplateResponse> {
    const body: jsonP.JSONObject = params ? {
      description: params["description"],
      enabled: params["enabled"],
      defaultVersionId: params["defaultVersionId"],
      provisioningRoleArn: params["provisioningRoleArn"],
      preProvisioningHook: fromProvisioningHook(params["preProvisioningHook"]),
      removePreProvisioningHook: params["removePreProvisioningHook"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProvisioningTemplate",
      method: "PATCH",
      requestUri: cmnP.encodePath`/provisioning-templates/${params["templateName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateRoleAlias(
    {abortSignal, ...params}: RequestConfig & UpdateRoleAliasRequest,
  ): Promise<UpdateRoleAliasResponse> {
    const body: jsonP.JSONObject = params ? {
      roleArn: params["roleArn"],
      credentialDurationSeconds: params["credentialDurationSeconds"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateRoleAlias",
      method: "PUT",
      requestUri: cmnP.encodePath`/role-aliases/${params["roleAlias"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "roleAlias": "s",
          "roleAliasArn": "s",
        },
      }, await resp.json()),
  };
  }

  async updateScheduledAudit(
    {abortSignal, ...params}: RequestConfig & UpdateScheduledAuditRequest,
  ): Promise<UpdateScheduledAuditResponse> {
    const body: jsonP.JSONObject = params ? {
      frequency: params["frequency"],
      dayOfMonth: params["dayOfMonth"],
      dayOfWeek: params["dayOfWeek"],
      targetCheckNames: params["targetCheckNames"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateScheduledAudit",
      method: "PATCH",
      requestUri: cmnP.encodePath`/audit/scheduledaudits/${params["scheduledAuditName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "scheduledAuditArn": "s",
        },
      }, await resp.json()),
  };
  }

  async updateSecurityProfile(
    {abortSignal, ...params}: RequestConfig & UpdateSecurityProfileRequest,
  ): Promise<UpdateSecurityProfileResponse> {
    const query = new URLSearchParams;
    if (params["expectedVersion"] != null) query.set("expectedVersion", params["expectedVersion"]?.toString() ?? "");
    const body: jsonP.JSONObject = params ? {
      securityProfileDescription: params["securityProfileDescription"],
      behaviors: params["behaviors"]?.map(x => fromBehavior(x)),
      alertTargets: jsonP.serializeMap(params["alertTargets"], x => fromAlertTarget(x)),
      additionalMetricsToRetain: params["additionalMetricsToRetain"],
      additionalMetricsToRetainV2: params["additionalMetricsToRetainV2"]?.map(x => fromMetricToRetain(x)),
      deleteBehaviors: params["deleteBehaviors"],
      deleteAlertTargets: params["deleteAlertTargets"],
      deleteAdditionalMetricsToRetain: params["deleteAdditionalMetricsToRetain"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "UpdateSecurityProfile",
      method: "PATCH",
      requestUri: cmnP.encodePath`/security-profiles/${params["securityProfileName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "securityProfileName": "s",
          "securityProfileArn": "s",
          "securityProfileDescription": "s",
          "behaviors": [toBehavior],
          "alertTargets": x => jsonP.readMap(x => cmnP.readEnumReq<AlertTargetType>(x), toAlertTarget, x),
          "additionalMetricsToRetain": ["s"],
          "additionalMetricsToRetainV2": [toMetricToRetain],
          "version": "n",
          "creationDate": "d",
          "lastModifiedDate": "d",
        },
      }, await resp.json()),
  };
  }

  async updateStream(
    {abortSignal, ...params}: RequestConfig & UpdateStreamRequest,
  ): Promise<UpdateStreamResponse> {
    const body: jsonP.JSONObject = params ? {
      description: params["description"],
      files: params["files"]?.map(x => fromStreamFile(x)),
      roleArn: params["roleArn"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateStream",
      method: "PUT",
      requestUri: cmnP.encodePath`/streams/${params["streamId"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "streamId": "s",
          "streamArn": "s",
          "description": "s",
          "streamVersion": "n",
        },
      }, await resp.json()),
  };
  }

  async updateThing(
    {abortSignal, ...params}: RequestConfig & UpdateThingRequest,
  ): Promise<UpdateThingResponse> {
    const body: jsonP.JSONObject = params ? {
      thingTypeName: params["thingTypeName"],
      attributePayload: fromAttributePayload(params["attributePayload"]),
      expectedVersion: params["expectedVersion"],
      removeThingType: params["removeThingType"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThing",
      method: "PATCH",
      requestUri: cmnP.encodePath`/things/${params["thingName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateThingGroup(
    {abortSignal, ...params}: RequestConfig & UpdateThingGroupRequest,
  ): Promise<UpdateThingGroupResponse> {
    const body: jsonP.JSONObject = params ? {
      thingGroupProperties: fromThingGroupProperties(params["thingGroupProperties"]),
      expectedVersion: params["expectedVersion"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThingGroup",
      method: "PATCH",
      requestUri: cmnP.encodePath`/thing-groups/${params["thingGroupName"]}`,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "version": "n",
        },
      }, await resp.json()),
  };
  }

  async updateThingGroupsForThing(
    {abortSignal, ...params}: RequestConfig & UpdateThingGroupsForThingRequest = {},
  ): Promise<UpdateThingGroupsForThingResponse> {
    const body: jsonP.JSONObject = params ? {
      thingName: params["thingName"],
      thingGroupsToAdd: params["thingGroupsToAdd"],
      thingGroupsToRemove: params["thingGroupsToRemove"],
      overrideDynamicGroups: params["overrideDynamicGroups"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateThingGroupsForThing",
      method: "PUT",
      requestUri: "/thing-groups/updateThingGroupsForThing",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async updateTopicRuleDestination(
    {abortSignal, ...params}: RequestConfig & UpdateTopicRuleDestinationRequest,
  ): Promise<UpdateTopicRuleDestinationResponse> {
    const body: jsonP.JSONObject = params ? {
      arn: params["arn"],
      status: params["status"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateTopicRuleDestination",
      method: "PATCH",
      requestUri: "/destinations",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async validateSecurityProfileBehaviors(
    {abortSignal, ...params}: RequestConfig & ValidateSecurityProfileBehaviorsRequest,
  ): Promise<ValidateSecurityProfileBehaviorsResponse> {
    const body: jsonP.JSONObject = params ? {
      behaviors: params["behaviors"]?.map(x => fromBehavior(x)),
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ValidateSecurityProfileBehaviors",
      requestUri: "/security-profile-behaviors/validate",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "valid": "b",
          "validationErrors": [toValidationError],
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface AcceptCertificateTransferRequest {
  certificateId: string;
  setAsActive?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AddThingToBillingGroupRequest {
  billingGroupName?: string | null;
  billingGroupArn?: string | null;
  thingName?: string | null;
  thingArn?: string | null;
}

// refs: 1 - tags: named, input
export interface AddThingToThingGroupRequest {
  thingGroupName?: string | null;
  thingGroupArn?: string | null;
  thingName?: string | null;
  thingArn?: string | null;
  overrideDynamicGroups?: boolean | null;
}

// refs: 1 - tags: named, input
export interface AssociateTargetsWithJobRequest {
  targets: string[];
  jobId: string;
  comment?: string | null;
  namespaceId?: string | null;
}

// refs: 1 - tags: named, input
export interface AttachPolicyRequest {
  policyName: string;
  target: string;
}

// refs: 1 - tags: named, input
export interface AttachPrincipalPolicyRequest {
  policyName: string;
  principal: string;
}

// refs: 1 - tags: named, input
export interface AttachSecurityProfileRequest {
  securityProfileName: string;
  securityProfileTargetArn: string;
}

// refs: 1 - tags: named, input
export interface AttachThingPrincipalRequest {
  thingName: string;
  principal: string;
}

// refs: 1 - tags: named, input
export interface CancelAuditMitigationActionsTaskRequest {
  taskId: string;
}

// refs: 1 - tags: named, input
export interface CancelAuditTaskRequest {
  taskId: string;
}

// refs: 1 - tags: named, input
export interface CancelCertificateTransferRequest {
  certificateId: string;
}

// refs: 1 - tags: named, input
export interface CancelJobRequest {
  jobId: string;
  reasonCode?: string | null;
  comment?: string | null;
  force?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CancelJobExecutionRequest {
  jobId: string;
  thingName: string;
  force?: boolean | null;
  expectedVersion?: number | null;
  statusDetails?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface ClearDefaultAuthorizerRequest {
}

// refs: 1 - tags: named, input
export interface ConfirmTopicRuleDestinationRequest {
  confirmationToken: string;
}

// refs: 1 - tags: named, input
export interface CreateAuditSuppressionRequest {
  checkName: string;
  resourceIdentifier: ResourceIdentifier;
  expirationDate?: Date | number | null;
  suppressIndefinitely?: boolean | null;
  description?: string | null;
  clientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface CreateAuthorizerRequest {
  authorizerName: string;
  authorizerFunctionArn: string;
  tokenKeyName?: string | null;
  tokenSigningPublicKeys?: { [key: string]: string | null | undefined } | null;
  status?: AuthorizerStatus | null;
  tags?: Tag[] | null;
  signingDisabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateBillingGroupRequest {
  billingGroupName: string;
  billingGroupProperties?: BillingGroupProperties | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateCertificateFromCsrRequest {
  certificateSigningRequest: string;
  setAsActive?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateDimensionRequest {
  name: string;
  type: DimensionType;
  stringValues: string[];
  tags?: Tag[] | null;
  clientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface CreateDomainConfigurationRequest {
  domainConfigurationName: string;
  domainName?: string | null;
  serverCertificateArns?: string[] | null;
  validationCertificateArn?: string | null;
  authorizerConfig?: AuthorizerConfig | null;
  serviceType?: ServiceType | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateDynamicThingGroupRequest {
  thingGroupName: string;
  thingGroupProperties?: ThingGroupProperties | null;
  indexName?: string | null;
  queryString: string;
  queryVersion?: string | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateJobRequest {
  jobId: string;
  targets: string[];
  documentSource?: string | null;
  document?: string | null;
  description?: string | null;
  presignedUrlConfig?: PresignedUrlConfig | null;
  targetSelection?: TargetSelection | null;
  jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig | null;
  abortConfig?: AbortConfig | null;
  timeoutConfig?: TimeoutConfig | null;
  tags?: Tag[] | null;
  namespaceId?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateKeysAndCertificateRequest {
  setAsActive?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateMitigationActionRequest {
  actionName: string;
  roleArn: string;
  actionParams: MitigationActionParams;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateOTAUpdateRequest {
  otaUpdateId: string;
  description?: string | null;
  targets: string[];
  protocols?: Protocol[] | null;
  targetSelection?: TargetSelection | null;
  awsJobExecutionsRolloutConfig?: AwsJobExecutionsRolloutConfig | null;
  awsJobPresignedUrlConfig?: AwsJobPresignedUrlConfig | null;
  awsJobAbortConfig?: AwsJobAbortConfig | null;
  awsJobTimeoutConfig?: AwsJobTimeoutConfig | null;
  files: OTAUpdateFile[];
  roleArn: string;
  additionalParameters?: { [key: string]: string | null | undefined } | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreatePolicyRequest {
  policyName: string;
  policyDocument: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreatePolicyVersionRequest {
  policyName: string;
  policyDocument: string;
  setAsDefault?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateProvisioningClaimRequest {
  templateName: string;
}

// refs: 1 - tags: named, input
export interface CreateProvisioningTemplateRequest {
  templateName: string;
  description?: string | null;
  templateBody: string;
  enabled?: boolean | null;
  provisioningRoleArn: string;
  preProvisioningHook?: ProvisioningHook | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateProvisioningTemplateVersionRequest {
  templateName: string;
  templateBody: string;
  setAsDefault?: boolean | null;
}

// refs: 1 - tags: named, input
export interface CreateRoleAliasRequest {
  roleAlias: string;
  roleArn: string;
  credentialDurationSeconds?: number | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateScheduledAuditRequest {
  frequency: AuditFrequency;
  dayOfMonth?: string | null;
  dayOfWeek?: DayOfWeek | null;
  targetCheckNames: string[];
  scheduledAuditName: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateSecurityProfileRequest {
  securityProfileName: string;
  securityProfileDescription?: string | null;
  behaviors?: Behavior[] | null;
  alertTargets?: { [key in AlertTargetType]: AlertTarget | null | undefined } | null;
  additionalMetricsToRetain?: string[] | null;
  additionalMetricsToRetainV2?: MetricToRetain[] | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateStreamRequest {
  streamId: string;
  description?: string | null;
  files: StreamFile[];
  roleArn: string;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateThingRequest {
  thingName: string;
  thingTypeName?: string | null;
  attributePayload?: AttributePayload | null;
  billingGroupName?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateThingGroupRequest {
  thingGroupName: string;
  parentGroupName?: string | null;
  thingGroupProperties?: ThingGroupProperties | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateThingTypeRequest {
  thingTypeName: string;
  thingTypeProperties?: ThingTypeProperties | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateTopicRuleRequest {
  ruleName: string;
  topicRulePayload: TopicRulePayload;
  tags?: string | null;
}

// refs: 1 - tags: named, input
export interface CreateTopicRuleDestinationRequest {
  destinationConfiguration: TopicRuleDestinationConfiguration;
}

// refs: 1 - tags: named, input
export interface DeleteAccountAuditConfigurationRequest {
  deleteScheduledAudits?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteAuditSuppressionRequest {
  checkName: string;
  resourceIdentifier: ResourceIdentifier;
}

// refs: 1 - tags: named, input
export interface DeleteAuthorizerRequest {
  authorizerName: string;
}

// refs: 1 - tags: named, input
export interface DeleteBillingGroupRequest {
  billingGroupName: string;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteCACertificateRequest {
  certificateId: string;
}

// refs: 1 - tags: named, input
export interface DeleteCertificateRequest {
  certificateId: string;
  forceDelete?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeleteDimensionRequest {
  name: string;
}

// refs: 1 - tags: named, input
export interface DeleteDomainConfigurationRequest {
  domainConfigurationName: string;
}

// refs: 1 - tags: named, input
export interface DeleteDynamicThingGroupRequest {
  thingGroupName: string;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteJobRequest {
  jobId: string;
  force?: boolean | null;
  namespaceId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteJobExecutionRequest {
  jobId: string;
  thingName: string;
  executionNumber: number;
  force?: boolean | null;
  namespaceId?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteMitigationActionRequest {
  actionName: string;
}

// refs: 1 - tags: named, input
export interface DeleteOTAUpdateRequest {
  otaUpdateId: string;
  deleteStream?: boolean | null;
  forceDeleteAWSJob?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DeletePolicyRequest {
  policyName: string;
}

// refs: 1 - tags: named, input
export interface DeletePolicyVersionRequest {
  policyName: string;
  policyVersionId: string;
}

// refs: 1 - tags: named, input
export interface DeleteProvisioningTemplateRequest {
  templateName: string;
}

// refs: 1 - tags: named, input
export interface DeleteProvisioningTemplateVersionRequest {
  templateName: string;
  versionId: number;
}

// refs: 1 - tags: named, input
export interface DeleteRegistrationCodeRequest {
}

// refs: 1 - tags: named, input
export interface DeleteRoleAliasRequest {
  roleAlias: string;
}

// refs: 1 - tags: named, input
export interface DeleteScheduledAuditRequest {
  scheduledAuditName: string;
}

// refs: 1 - tags: named, input
export interface DeleteSecurityProfileRequest {
  securityProfileName: string;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteStreamRequest {
  streamId: string;
}

// refs: 1 - tags: named, input
export interface DeleteThingRequest {
  thingName: string;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteThingGroupRequest {
  thingGroupName: string;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface DeleteThingTypeRequest {
  thingTypeName: string;
}

// refs: 1 - tags: named, input
export interface DeleteTopicRuleRequest {
  ruleName: string;
}

// refs: 1 - tags: named, input
export interface DeleteTopicRuleDestinationRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface DeleteV2LoggingLevelRequest {
  targetType: LogTargetType;
  targetName: string;
}

// refs: 1 - tags: named, input
export interface DeprecateThingTypeRequest {
  thingTypeName: string;
  undoDeprecate?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeAccountAuditConfigurationRequest {
}

// refs: 1 - tags: named, input
export interface DescribeAuditFindingRequest {
  findingId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAuditMitigationActionsTaskRequest {
  taskId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAuditSuppressionRequest {
  checkName: string;
  resourceIdentifier: ResourceIdentifier;
}

// refs: 1 - tags: named, input
export interface DescribeAuditTaskRequest {
  taskId: string;
}

// refs: 1 - tags: named, input
export interface DescribeAuthorizerRequest {
  authorizerName: string;
}

// refs: 1 - tags: named, input
export interface DescribeBillingGroupRequest {
  billingGroupName: string;
}

// refs: 1 - tags: named, input
export interface DescribeCACertificateRequest {
  certificateId: string;
}

// refs: 1 - tags: named, input
export interface DescribeCertificateRequest {
  certificateId: string;
}

// refs: 1 - tags: named, input
export interface DescribeDefaultAuthorizerRequest {
}

// refs: 1 - tags: named, input
export interface DescribeDimensionRequest {
  name: string;
}

// refs: 1 - tags: named, input
export interface DescribeDomainConfigurationRequest {
  domainConfigurationName: string;
}

// refs: 1 - tags: named, input
export interface DescribeEndpointRequest {
  endpointType?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeEventConfigurationsRequest {
}

// refs: 1 - tags: named, input
export interface DescribeIndexRequest {
  indexName: string;
}

// refs: 1 - tags: named, input
export interface DescribeJobRequest {
  jobId: string;
}

// refs: 1 - tags: named, input
export interface DescribeJobExecutionRequest {
  jobId: string;
  thingName: string;
  executionNumber?: number | null;
}

// refs: 1 - tags: named, input
export interface DescribeMitigationActionRequest {
  actionName: string;
}

// refs: 1 - tags: named, input
export interface DescribeProvisioningTemplateRequest {
  templateName: string;
}

// refs: 1 - tags: named, input
export interface DescribeProvisioningTemplateVersionRequest {
  templateName: string;
  versionId: number;
}

// refs: 1 - tags: named, input
export interface DescribeRoleAliasRequest {
  roleAlias: string;
}

// refs: 1 - tags: named, input
export interface DescribeScheduledAuditRequest {
  scheduledAuditName: string;
}

// refs: 1 - tags: named, input
export interface DescribeSecurityProfileRequest {
  securityProfileName: string;
}

// refs: 1 - tags: named, input
export interface DescribeStreamRequest {
  streamId: string;
}

// refs: 1 - tags: named, input
export interface DescribeThingRequest {
  thingName: string;
}

// refs: 1 - tags: named, input
export interface DescribeThingGroupRequest {
  thingGroupName: string;
}

// refs: 1 - tags: named, input
export interface DescribeThingRegistrationTaskRequest {
  taskId: string;
}

// refs: 1 - tags: named, input
export interface DescribeThingTypeRequest {
  thingTypeName: string;
}

// refs: 1 - tags: named, input
export interface DetachPolicyRequest {
  policyName: string;
  target: string;
}

// refs: 1 - tags: named, input
export interface DetachPrincipalPolicyRequest {
  policyName: string;
  principal: string;
}

// refs: 1 - tags: named, input
export interface DetachSecurityProfileRequest {
  securityProfileName: string;
  securityProfileTargetArn: string;
}

// refs: 1 - tags: named, input
export interface DetachThingPrincipalRequest {
  thingName: string;
  principal: string;
}

// refs: 1 - tags: named, input
export interface DisableTopicRuleRequest {
  ruleName: string;
}

// refs: 1 - tags: named, input
export interface EnableTopicRuleRequest {
  ruleName: string;
}

// refs: 1 - tags: named, input
export interface GetCardinalityRequest {
  indexName?: string | null;
  queryString: string;
  aggregationField?: string | null;
  queryVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface GetEffectivePoliciesRequest {
  principal?: string | null;
  cognitoIdentityPoolId?: string | null;
  thingName?: string | null;
}

// refs: 1 - tags: named, input
export interface GetIndexingConfigurationRequest {
}

// refs: 1 - tags: named, input
export interface GetJobDocumentRequest {
  jobId: string;
}

// refs: 1 - tags: named, input
export interface GetLoggingOptionsRequest {
}

// refs: 1 - tags: named, input
export interface GetOTAUpdateRequest {
  otaUpdateId: string;
}

// refs: 1 - tags: named, input
export interface GetPercentilesRequest {
  indexName?: string | null;
  queryString: string;
  aggregationField?: string | null;
  queryVersion?: string | null;
  percents?: number[] | null;
}

// refs: 1 - tags: named, input
export interface GetPolicyRequest {
  policyName: string;
}

// refs: 1 - tags: named, input
export interface GetPolicyVersionRequest {
  policyName: string;
  policyVersionId: string;
}

// refs: 1 - tags: named, input
export interface GetRegistrationCodeRequest {
}

// refs: 1 - tags: named, input
export interface GetStatisticsRequest {
  indexName?: string | null;
  queryString: string;
  aggregationField?: string | null;
  queryVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface GetTopicRuleRequest {
  ruleName: string;
}

// refs: 1 - tags: named, input
export interface GetTopicRuleDestinationRequest {
  arn: string;
}

// refs: 1 - tags: named, input
export interface GetV2LoggingOptionsRequest {
}

// refs: 1 - tags: named, input
export interface ListActiveViolationsRequest {
  thingName?: string | null;
  securityProfileName?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAttachedPoliciesRequest {
  target: string;
  recursive?: boolean | null;
  marker?: string | null;
  pageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAuditFindingsRequest {
  taskId?: string | null;
  checkName?: string | null;
  resourceIdentifier?: ResourceIdentifier | null;
  maxResults?: number | null;
  nextToken?: string | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  listSuppressedFindings?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListAuditMitigationActionsExecutionsRequest {
  taskId: string;
  actionStatus?: AuditMitigationActionsExecutionStatus | null;
  findingId: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListAuditMitigationActionsTasksRequest {
  auditTaskId?: string | null;
  findingId?: string | null;
  taskStatus?: AuditMitigationActionsTaskStatus | null;
  maxResults?: number | null;
  nextToken?: string | null;
  startTime: Date | number;
  endTime: Date | number;
}

// refs: 1 - tags: named, input
export interface ListAuditSuppressionsRequest {
  checkName?: string | null;
  resourceIdentifier?: ResourceIdentifier | null;
  ascendingOrder?: boolean | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAuditTasksRequest {
  startTime: Date | number;
  endTime: Date | number;
  taskType?: AuditTaskType | null;
  taskStatus?: AuditTaskStatus | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListAuthorizersRequest {
  pageSize?: number | null;
  marker?: string | null;
  ascendingOrder?: boolean | null;
  status?: AuthorizerStatus | null;
}

// refs: 1 - tags: named, input
export interface ListBillingGroupsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  namePrefixFilter?: string | null;
}

// refs: 1 - tags: named, input
export interface ListCACertificatesRequest {
  pageSize?: number | null;
  marker?: string | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListCertificatesRequest {
  pageSize?: number | null;
  marker?: string | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListCertificatesByCARequest {
  caCertificateId: string;
  pageSize?: number | null;
  marker?: string | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListDimensionsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDomainConfigurationsRequest {
  marker?: string | null;
  pageSize?: number | null;
  serviceType?: ServiceType | null;
}

// refs: 1 - tags: named, input
export interface ListIndicesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListJobExecutionsForJobRequest {
  jobId: string;
  status?: JobExecutionStatus | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListJobExecutionsForThingRequest {
  thingName: string;
  status?: JobExecutionStatus | null;
  namespaceId?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListJobsRequest {
  status?: JobStatus | null;
  targetSelection?: TargetSelection | null;
  maxResults?: number | null;
  nextToken?: string | null;
  thingGroupName?: string | null;
  thingGroupId?: string | null;
  namespaceId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListMitigationActionsRequest {
  actionType?: MitigationActionType | null;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListOTAUpdatesRequest {
  maxResults?: number | null;
  nextToken?: string | null;
  otaUpdateStatus?: OTAUpdateStatus | null;
}

// refs: 1 - tags: named, input
export interface ListOutgoingCertificatesRequest {
  pageSize?: number | null;
  marker?: string | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListPoliciesRequest {
  marker?: string | null;
  pageSize?: number | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListPolicyPrincipalsRequest {
  policyName: string;
  marker?: string | null;
  pageSize?: number | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListPolicyVersionsRequest {
  policyName: string;
}

// refs: 1 - tags: named, input
export interface ListPrincipalPoliciesRequest {
  principal: string;
  marker?: string | null;
  pageSize?: number | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListPrincipalThingsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  principal: string;
}

// refs: 1 - tags: named, input
export interface ListProvisioningTemplateVersionsRequest {
  templateName: string;
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListProvisioningTemplatesRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListRoleAliasesRequest {
  pageSize?: number | null;
  marker?: string | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListScheduledAuditsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListSecurityProfilesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  dimensionName?: string | null;
}

// refs: 1 - tags: named, input
export interface ListSecurityProfilesForTargetRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  recursive?: boolean | null;
  securityProfileTargetArn: string;
}

// refs: 1 - tags: named, input
export interface ListStreamsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
  ascendingOrder?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTargetsForPolicyRequest {
  policyName: string;
  marker?: string | null;
  pageSize?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTargetsForSecurityProfileRequest {
  securityProfileName: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListThingGroupsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  parentGroup?: string | null;
  namePrefixFilter?: string | null;
  recursive?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListThingGroupsForThingRequest {
  thingName: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListThingPrincipalsRequest {
  thingName: string;
}

// refs: 1 - tags: named, input
export interface ListThingRegistrationTaskReportsRequest {
  taskId: string;
  reportType: ReportType;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListThingRegistrationTasksRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  status?: Status | null;
}

// refs: 1 - tags: named, input
export interface ListThingTypesRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  thingTypeName?: string | null;
}

// refs: 1 - tags: named, input
export interface ListThingsRequest {
  nextToken?: string | null;
  maxResults?: number | null;
  attributeName?: string | null;
  attributeValue?: string | null;
  thingTypeName?: string | null;
}

// refs: 1 - tags: named, input
export interface ListThingsInBillingGroupRequest {
  billingGroupName: string;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListThingsInThingGroupRequest {
  thingGroupName: string;
  recursive?: boolean | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListTopicRuleDestinationsRequest {
  maxResults?: number | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTopicRulesRequest {
  topic?: string | null;
  maxResults?: number | null;
  nextToken?: string | null;
  ruleDisabled?: boolean | null;
}

// refs: 1 - tags: named, input
export interface ListV2LoggingLevelsRequest {
  targetType?: LogTargetType | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListViolationEventsRequest {
  startTime: Date | number;
  endTime: Date | number;
  thingName?: string | null;
  securityProfileName?: string | null;
  nextToken?: string | null;
  maxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface RegisterCACertificateRequest {
  caCertificate: string;
  verificationCertificate: string;
  setAsActive?: boolean | null;
  allowAutoRegistration?: boolean | null;
  registrationConfig?: RegistrationConfig | null;
  tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface RegisterCertificateRequest {
  certificatePem: string;
  caCertificatePem?: string | null;
  setAsActive?: boolean | null;
  status?: CertificateStatus | null;
}

// refs: 1 - tags: named, input
export interface RegisterCertificateWithoutCARequest {
  certificatePem: string;
  status?: CertificateStatus | null;
}

// refs: 1 - tags: named, input
export interface RegisterThingRequest {
  templateBody: string;
  parameters?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface RejectCertificateTransferRequest {
  certificateId: string;
  rejectReason?: string | null;
}

// refs: 1 - tags: named, input
export interface RemoveThingFromBillingGroupRequest {
  billingGroupName?: string | null;
  billingGroupArn?: string | null;
  thingName?: string | null;
  thingArn?: string | null;
}

// refs: 1 - tags: named, input
export interface RemoveThingFromThingGroupRequest {
  thingGroupName?: string | null;
  thingGroupArn?: string | null;
  thingName?: string | null;
  thingArn?: string | null;
}

// refs: 1 - tags: named, input
export interface ReplaceTopicRuleRequest {
  ruleName: string;
  topicRulePayload: TopicRulePayload;
}

// refs: 1 - tags: named, input
export interface SearchIndexRequest {
  indexName?: string | null;
  queryString: string;
  nextToken?: string | null;
  maxResults?: number | null;
  queryVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface SetDefaultAuthorizerRequest {
  authorizerName: string;
}

// refs: 1 - tags: named, input
export interface SetDefaultPolicyVersionRequest {
  policyName: string;
  policyVersionId: string;
}

// refs: 1 - tags: named, input
export interface SetLoggingOptionsRequest {
  loggingOptionsPayload: LoggingOptionsPayload;
}

// refs: 1 - tags: named, input
export interface SetV2LoggingLevelRequest {
  logTarget: LogTarget;
  logLevel: LogLevel;
}

// refs: 1 - tags: named, input
export interface SetV2LoggingOptionsRequest {
  roleArn?: string | null;
  defaultLogLevel?: LogLevel | null;
  disableAllLogs?: boolean | null;
}

// refs: 1 - tags: named, input
export interface StartAuditMitigationActionsTaskRequest {
  taskId: string;
  target: AuditMitigationActionsTaskTarget;
  auditCheckToActionsMapping: { [key: string]: string[] | null | undefined };
  clientRequestToken: string;
}

// refs: 1 - tags: named, input
export interface StartOnDemandAuditTaskRequest {
  targetCheckNames: string[];
}

// refs: 1 - tags: named, input
export interface StartThingRegistrationTaskRequest {
  templateBody: string;
  inputFileBucket: string;
  inputFileKey: string;
  roleArn: string;
}

// refs: 1 - tags: named, input
export interface StopThingRegistrationTaskRequest {
  taskId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: Tag[];
}

// refs: 1 - tags: named, input
export interface TestAuthorizationRequest {
  principal?: string | null;
  cognitoIdentityPoolId?: string | null;
  authInfos: AuthInfo[];
  clientId?: string | null;
  policyNamesToAdd?: string[] | null;
  policyNamesToSkip?: string[] | null;
}

// refs: 1 - tags: named, input
export interface TestInvokeAuthorizerRequest {
  authorizerName: string;
  token?: string | null;
  tokenSignature?: string | null;
  httpContext?: HttpContext | null;
  mqttContext?: MqttContext | null;
  tlsContext?: TlsContext | null;
}

// refs: 1 - tags: named, input
export interface TransferCertificateRequest {
  certificateId: string;
  targetAwsAccount: string;
  transferMessage?: string | null;
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateAccountAuditConfigurationRequest {
  roleArn?: string | null;
  auditNotificationTargetConfigurations?: { [key in AuditNotificationType]: AuditNotificationTarget | null | undefined } | null;
  auditCheckConfigurations?: { [key: string]: AuditCheckConfiguration | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UpdateAuditSuppressionRequest {
  checkName: string;
  resourceIdentifier: ResourceIdentifier;
  expirationDate?: Date | number | null;
  suppressIndefinitely?: boolean | null;
  description?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateAuthorizerRequest {
  authorizerName: string;
  authorizerFunctionArn?: string | null;
  tokenKeyName?: string | null;
  tokenSigningPublicKeys?: { [key: string]: string | null | undefined } | null;
  status?: AuthorizerStatus | null;
}

// refs: 1 - tags: named, input
export interface UpdateBillingGroupRequest {
  billingGroupName: string;
  billingGroupProperties: BillingGroupProperties;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateCACertificateRequest {
  certificateId: string;
  newStatus?: CACertificateStatus | null;
  newAutoRegistrationStatus?: AutoRegistrationStatus | null;
  registrationConfig?: RegistrationConfig | null;
  removeAutoRegistration?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateCertificateRequest {
  certificateId: string;
  newStatus: CertificateStatus;
}

// refs: 1 - tags: named, input
export interface UpdateDimensionRequest {
  name: string;
  stringValues: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDomainConfigurationRequest {
  domainConfigurationName: string;
  authorizerConfig?: AuthorizerConfig | null;
  domainConfigurationStatus?: DomainConfigurationStatus | null;
  removeAuthorizerConfig?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateDynamicThingGroupRequest {
  thingGroupName: string;
  thingGroupProperties: ThingGroupProperties;
  expectedVersion?: number | null;
  indexName?: string | null;
  queryString?: string | null;
  queryVersion?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateEventConfigurationsRequest {
  eventConfigurations?: { [key in EventType]: Configuration | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UpdateIndexingConfigurationRequest {
  thingIndexingConfiguration?: ThingIndexingConfiguration | null;
  thingGroupIndexingConfiguration?: ThingGroupIndexingConfiguration | null;
}

// refs: 1 - tags: named, input
export interface UpdateJobRequest {
  jobId: string;
  description?: string | null;
  presignedUrlConfig?: PresignedUrlConfig | null;
  jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig | null;
  abortConfig?: AbortConfig | null;
  timeoutConfig?: TimeoutConfig | null;
  namespaceId?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateMitigationActionRequest {
  actionName: string;
  roleArn?: string | null;
  actionParams?: MitigationActionParams | null;
}

// refs: 1 - tags: named, input
export interface UpdateProvisioningTemplateRequest {
  templateName: string;
  description?: string | null;
  enabled?: boolean | null;
  defaultVersionId?: number | null;
  provisioningRoleArn?: string | null;
  preProvisioningHook?: ProvisioningHook | null;
  removePreProvisioningHook?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateRoleAliasRequest {
  roleAlias: string;
  roleArn?: string | null;
  credentialDurationSeconds?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateScheduledAuditRequest {
  frequency?: AuditFrequency | null;
  dayOfMonth?: string | null;
  dayOfWeek?: DayOfWeek | null;
  targetCheckNames?: string[] | null;
  scheduledAuditName: string;
}

// refs: 1 - tags: named, input
export interface UpdateSecurityProfileRequest {
  securityProfileName: string;
  securityProfileDescription?: string | null;
  behaviors?: Behavior[] | null;
  alertTargets?: { [key in AlertTargetType]: AlertTarget | null | undefined } | null;
  additionalMetricsToRetain?: string[] | null;
  additionalMetricsToRetainV2?: MetricToRetain[] | null;
  deleteBehaviors?: boolean | null;
  deleteAlertTargets?: boolean | null;
  deleteAdditionalMetricsToRetain?: boolean | null;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateStreamRequest {
  streamId: string;
  description?: string | null;
  files?: StreamFile[] | null;
  roleArn?: string | null;
}

// refs: 1 - tags: named, input
export interface UpdateThingRequest {
  thingName: string;
  thingTypeName?: string | null;
  attributePayload?: AttributePayload | null;
  expectedVersion?: number | null;
  removeThingType?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateThingGroupRequest {
  thingGroupName: string;
  thingGroupProperties: ThingGroupProperties;
  expectedVersion?: number | null;
}

// refs: 1 - tags: named, input
export interface UpdateThingGroupsForThingRequest {
  thingName?: string | null;
  thingGroupsToAdd?: string[] | null;
  thingGroupsToRemove?: string[] | null;
  overrideDynamicGroups?: boolean | null;
}

// refs: 1 - tags: named, input
export interface UpdateTopicRuleDestinationRequest {
  arn: string;
  status: TopicRuleDestinationStatus;
}

// refs: 1 - tags: named, input
export interface ValidateSecurityProfileBehaviorsRequest {
  behaviors: Behavior[];
}

// refs: 1 - tags: named, output
export interface AddThingToBillingGroupResponse {
}

// refs: 1 - tags: named, output
export interface AddThingToThingGroupResponse {
}

// refs: 1 - tags: named, output
export interface AssociateTargetsWithJobResponse {
  jobArn?: string | null;
  jobId?: string | null;
  description?: string | null;
}

// refs: 1 - tags: named, output
export interface AttachSecurityProfileResponse {
}

// refs: 1 - tags: named, output
export interface AttachThingPrincipalResponse {
}

// refs: 1 - tags: named, output
export interface CancelAuditMitigationActionsTaskResponse {
}

// refs: 1 - tags: named, output
export interface CancelAuditTaskResponse {
}

// refs: 1 - tags: named, output
export interface CancelJobResponse {
  jobArn?: string | null;
  jobId?: string | null;
  description?: string | null;
}

// refs: 1 - tags: named, output
export interface ClearDefaultAuthorizerResponse {
}

// refs: 1 - tags: named, output
export interface ConfirmTopicRuleDestinationResponse {
}

// refs: 1 - tags: named, output
export interface CreateAuditSuppressionResponse {
}

// refs: 1 - tags: named, output
export interface CreateAuthorizerResponse {
  authorizerName?: string | null;
  authorizerArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateBillingGroupResponse {
  billingGroupName?: string | null;
  billingGroupArn?: string | null;
  billingGroupId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateCertificateFromCsrResponse {
  certificateArn?: string | null;
  certificateId?: string | null;
  certificatePem?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDimensionResponse {
  name?: string | null;
  arn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDomainConfigurationResponse {
  domainConfigurationName?: string | null;
  domainConfigurationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateDynamicThingGroupResponse {
  thingGroupName?: string | null;
  thingGroupArn?: string | null;
  thingGroupId?: string | null;
  indexName?: string | null;
  queryString?: string | null;
  queryVersion?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateJobResponse {
  jobArn?: string | null;
  jobId?: string | null;
  description?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateKeysAndCertificateResponse {
  certificateArn?: string | null;
  certificateId?: string | null;
  certificatePem?: string | null;
  keyPair?: KeyPair | null;
}

// refs: 1 - tags: named, output
export interface CreateMitigationActionResponse {
  actionArn?: string | null;
  actionId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateOTAUpdateResponse {
  otaUpdateId?: string | null;
  awsIotJobId?: string | null;
  otaUpdateArn?: string | null;
  awsIotJobArn?: string | null;
  otaUpdateStatus?: OTAUpdateStatus | null;
}

// refs: 1 - tags: named, output
export interface CreatePolicyResponse {
  policyName?: string | null;
  policyArn?: string | null;
  policyDocument?: string | null;
  policyVersionId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreatePolicyVersionResponse {
  policyArn?: string | null;
  policyDocument?: string | null;
  policyVersionId?: string | null;
  isDefaultVersion?: boolean | null;
}

// refs: 1 - tags: named, output
export interface CreateProvisioningClaimResponse {
  certificateId?: string | null;
  certificatePem?: string | null;
  keyPair?: KeyPair | null;
  expiration?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface CreateProvisioningTemplateResponse {
  templateArn?: string | null;
  templateName?: string | null;
  defaultVersionId?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateProvisioningTemplateVersionResponse {
  templateArn?: string | null;
  templateName?: string | null;
  versionId?: number | null;
  isDefaultVersion?: boolean | null;
}

// refs: 1 - tags: named, output
export interface CreateRoleAliasResponse {
  roleAlias?: string | null;
  roleAliasArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateScheduledAuditResponse {
  scheduledAuditArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateSecurityProfileResponse {
  securityProfileName?: string | null;
  securityProfileArn?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateStreamResponse {
  streamId?: string | null;
  streamArn?: string | null;
  description?: string | null;
  streamVersion?: number | null;
}

// refs: 1 - tags: named, output
export interface CreateThingResponse {
  thingName?: string | null;
  thingArn?: string | null;
  thingId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateThingGroupResponse {
  thingGroupName?: string | null;
  thingGroupArn?: string | null;
  thingGroupId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateThingTypeResponse {
  thingTypeName?: string | null;
  thingTypeArn?: string | null;
  thingTypeId?: string | null;
}

// refs: 1 - tags: named, output
export interface CreateTopicRuleDestinationResponse {
  topicRuleDestination?: TopicRuleDestination | null;
}

// refs: 1 - tags: named, output
export interface DeleteAccountAuditConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAuditSuppressionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteAuthorizerResponse {
}

// refs: 1 - tags: named, output
export interface DeleteBillingGroupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteCACertificateResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDimensionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDomainConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface DeleteDynamicThingGroupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteMitigationActionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteOTAUpdateResponse {
}

// refs: 1 - tags: named, output
export interface DeleteProvisioningTemplateResponse {
}

// refs: 1 - tags: named, output
export interface DeleteProvisioningTemplateVersionResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRegistrationCodeResponse {
}

// refs: 1 - tags: named, output
export interface DeleteRoleAliasResponse {
}

// refs: 1 - tags: named, output
export interface DeleteScheduledAuditResponse {
}

// refs: 1 - tags: named, output
export interface DeleteSecurityProfileResponse {
}

// refs: 1 - tags: named, output
export interface DeleteStreamResponse {
}

// refs: 1 - tags: named, output
export interface DeleteThingResponse {
}

// refs: 1 - tags: named, output
export interface DeleteThingGroupResponse {
}

// refs: 1 - tags: named, output
export interface DeleteThingTypeResponse {
}

// refs: 1 - tags: named, output
export interface DeleteTopicRuleDestinationResponse {
}

// refs: 1 - tags: named, output
export interface DeprecateThingTypeResponse {
}

// refs: 1 - tags: named, output
export interface DescribeAccountAuditConfigurationResponse {
  roleArn?: string | null;
  auditNotificationTargetConfigurations?: { [key in AuditNotificationType]: AuditNotificationTarget | null | undefined } | null;
  auditCheckConfigurations?: { [key: string]: AuditCheckConfiguration | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeAuditFindingResponse {
  finding?: AuditFinding | null;
}

// refs: 1 - tags: named, output
export interface DescribeAuditMitigationActionsTaskResponse {
  taskStatus?: AuditMitigationActionsTaskStatus | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  taskStatistics?: { [key: string]: TaskStatisticsForAuditCheck | null | undefined } | null;
  target?: AuditMitigationActionsTaskTarget | null;
  auditCheckToActionsMapping?: { [key: string]: string[] | null | undefined } | null;
  actionsDefinition?: MitigationAction[] | null;
}

// refs: 1 - tags: named, output
export interface DescribeAuditSuppressionResponse {
  checkName?: string | null;
  resourceIdentifier?: ResourceIdentifier | null;
  expirationDate?: Date | number | null;
  suppressIndefinitely?: boolean | null;
  description?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeAuditTaskResponse {
  taskStatus?: AuditTaskStatus | null;
  taskType?: AuditTaskType | null;
  taskStartTime?: Date | number | null;
  taskStatistics?: TaskStatistics | null;
  scheduledAuditName?: string | null;
  auditDetails?: { [key: string]: AuditCheckDetails | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface DescribeAuthorizerResponse {
  authorizerDescription?: AuthorizerDescription | null;
}

// refs: 1 - tags: named, output
export interface DescribeBillingGroupResponse {
  billingGroupName?: string | null;
  billingGroupId?: string | null;
  billingGroupArn?: string | null;
  version?: number | null;
  billingGroupProperties?: BillingGroupProperties | null;
  billingGroupMetadata?: BillingGroupMetadata | null;
}

// refs: 1 - tags: named, output
export interface DescribeCACertificateResponse {
  certificateDescription?: CACertificateDescription | null;
  registrationConfig?: RegistrationConfig | null;
}

// refs: 1 - tags: named, output
export interface DescribeCertificateResponse {
  certificateDescription?: CertificateDescription | null;
}

// refs: 1 - tags: named, output
export interface DescribeDefaultAuthorizerResponse {
  authorizerDescription?: AuthorizerDescription | null;
}

// refs: 1 - tags: named, output
export interface DescribeDimensionResponse {
  name?: string | null;
  arn?: string | null;
  type?: DimensionType | null;
  stringValues?: string[] | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeDomainConfigurationResponse {
  domainConfigurationName?: string | null;
  domainConfigurationArn?: string | null;
  domainName?: string | null;
  serverCertificates?: ServerCertificateSummary[] | null;
  authorizerConfig?: AuthorizerConfig | null;
  domainConfigurationStatus?: DomainConfigurationStatus | null;
  serviceType?: ServiceType | null;
  domainType?: DomainType | null;
  lastStatusChangeDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeEndpointResponse {
  endpointAddress?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeEventConfigurationsResponse {
  eventConfigurations?: { [key in EventType]: Configuration | null | undefined } | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeIndexResponse {
  indexName?: string | null;
  indexStatus?: IndexStatus | null;
  schema?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeJobResponse {
  documentSource?: string | null;
  job?: Job | null;
}

// refs: 1 - tags: named, output
export interface DescribeJobExecutionResponse {
  execution?: JobExecution | null;
}

// refs: 1 - tags: named, output
export interface DescribeMitigationActionResponse {
  actionName?: string | null;
  actionType?: MitigationActionType | null;
  actionArn?: string | null;
  actionId?: string | null;
  roleArn?: string | null;
  actionParams?: MitigationActionParams | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeProvisioningTemplateResponse {
  templateArn?: string | null;
  templateName?: string | null;
  description?: string | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  defaultVersionId?: number | null;
  templateBody?: string | null;
  enabled?: boolean | null;
  provisioningRoleArn?: string | null;
  preProvisioningHook?: ProvisioningHook | null;
}

// refs: 1 - tags: named, output
export interface DescribeProvisioningTemplateVersionResponse {
  versionId?: number | null;
  creationDate?: Date | number | null;
  templateBody?: string | null;
  isDefaultVersion?: boolean | null;
}

// refs: 1 - tags: named, output
export interface DescribeRoleAliasResponse {
  roleAliasDescription?: RoleAliasDescription | null;
}

// refs: 1 - tags: named, output
export interface DescribeScheduledAuditResponse {
  frequency?: AuditFrequency | null;
  dayOfMonth?: string | null;
  dayOfWeek?: DayOfWeek | null;
  targetCheckNames?: string[] | null;
  scheduledAuditName?: string | null;
  scheduledAuditArn?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeSecurityProfileResponse {
  securityProfileName?: string | null;
  securityProfileArn?: string | null;
  securityProfileDescription?: string | null;
  behaviors?: Behavior[] | null;
  alertTargets?: { [key in AlertTargetType]: AlertTarget | null | undefined } | null;
  additionalMetricsToRetain?: string[] | null;
  additionalMetricsToRetainV2?: MetricToRetain[] | null;
  version?: number | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface DescribeStreamResponse {
  streamInfo?: StreamInfo | null;
}

// refs: 1 - tags: named, output
export interface DescribeThingResponse {
  defaultClientId?: string | null;
  thingName?: string | null;
  thingId?: string | null;
  thingArn?: string | null;
  thingTypeName?: string | null;
  attributes?: { [key: string]: string | null | undefined } | null;
  version?: number | null;
  billingGroupName?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeThingGroupResponse {
  thingGroupName?: string | null;
  thingGroupId?: string | null;
  thingGroupArn?: string | null;
  version?: number | null;
  thingGroupProperties?: ThingGroupProperties | null;
  thingGroupMetadata?: ThingGroupMetadata | null;
  indexName?: string | null;
  queryString?: string | null;
  queryVersion?: string | null;
  status?: DynamicGroupStatus | null;
}

// refs: 1 - tags: named, output
export interface DescribeThingRegistrationTaskResponse {
  taskId?: string | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  templateBody?: string | null;
  inputFileBucket?: string | null;
  inputFileKey?: string | null;
  roleArn?: string | null;
  status?: Status | null;
  message?: string | null;
  successCount?: number | null;
  failureCount?: number | null;
  percentageProgress?: number | null;
}

// refs: 1 - tags: named, output
export interface DescribeThingTypeResponse {
  thingTypeName?: string | null;
  thingTypeId?: string | null;
  thingTypeArn?: string | null;
  thingTypeProperties?: ThingTypeProperties | null;
  thingTypeMetadata?: ThingTypeMetadata | null;
}

// refs: 1 - tags: named, output
export interface DetachSecurityProfileResponse {
}

// refs: 1 - tags: named, output
export interface DetachThingPrincipalResponse {
}

// refs: 1 - tags: named, output
export interface GetCardinalityResponse {
  cardinality?: number | null;
}

// refs: 1 - tags: named, output
export interface GetEffectivePoliciesResponse {
  effectivePolicies?: EffectivePolicy[] | null;
}

// refs: 1 - tags: named, output
export interface GetIndexingConfigurationResponse {
  thingIndexingConfiguration?: ThingIndexingConfiguration | null;
  thingGroupIndexingConfiguration?: ThingGroupIndexingConfiguration | null;
}

// refs: 1 - tags: named, output
export interface GetJobDocumentResponse {
  document?: string | null;
}

// refs: 1 - tags: named, output
export interface GetLoggingOptionsResponse {
  roleArn?: string | null;
  logLevel?: LogLevel | null;
}

// refs: 1 - tags: named, output
export interface GetOTAUpdateResponse {
  otaUpdateInfo?: OTAUpdateInfo | null;
}

// refs: 1 - tags: named, output
export interface GetPercentilesResponse {
  percentiles?: PercentPair[] | null;
}

// refs: 1 - tags: named, output
export interface GetPolicyResponse {
  policyName?: string | null;
  policyArn?: string | null;
  policyDocument?: string | null;
  defaultVersionId?: string | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  generationId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetPolicyVersionResponse {
  policyArn?: string | null;
  policyName?: string | null;
  policyDocument?: string | null;
  policyVersionId?: string | null;
  isDefaultVersion?: boolean | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  generationId?: string | null;
}

// refs: 1 - tags: named, output
export interface GetRegistrationCodeResponse {
  registrationCode?: string | null;
}

// refs: 1 - tags: named, output
export interface GetStatisticsResponse {
  statistics?: Statistics | null;
}

// refs: 1 - tags: named, output
export interface GetTopicRuleResponse {
  ruleArn?: string | null;
  rule?: TopicRule | null;
}

// refs: 1 - tags: named, output
export interface GetTopicRuleDestinationResponse {
  topicRuleDestination?: TopicRuleDestination | null;
}

// refs: 1 - tags: named, output
export interface GetV2LoggingOptionsResponse {
  roleArn?: string | null;
  defaultLogLevel?: LogLevel | null;
  disableAllLogs?: boolean | null;
}

// refs: 1 - tags: named, output
export interface ListActiveViolationsResponse {
  activeViolations?: ActiveViolation[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAttachedPoliciesResponse {
  policies?: Policy[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAuditFindingsResponse {
  findings?: AuditFinding[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAuditMitigationActionsExecutionsResponse {
  actionsExecutions?: AuditMitigationActionExecutionMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAuditMitigationActionsTasksResponse {
  tasks?: AuditMitigationActionsTaskMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAuditSuppressionsResponse {
  suppressions?: AuditSuppression[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAuditTasksResponse {
  tasks?: AuditTaskMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListAuthorizersResponse {
  authorizers?: AuthorizerSummary[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListBillingGroupsResponse {
  billingGroups?: GroupNameAndArn[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCACertificatesResponse {
  certificates?: CACertificate[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCertificatesResponse {
  certificates?: Certificate[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListCertificatesByCAResponse {
  certificates?: Certificate[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDimensionsResponse {
  dimensionNames?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDomainConfigurationsResponse {
  domainConfigurations?: DomainConfigurationSummary[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIndicesResponse {
  indexNames?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListJobExecutionsForJobResponse {
  executionSummaries?: JobExecutionSummaryForJob[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListJobExecutionsForThingResponse {
  executionSummaries?: JobExecutionSummaryForThing[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListJobsResponse {
  jobs?: JobSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListMitigationActionsResponse {
  actionIdentifiers?: MitigationActionIdentifier[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOTAUpdatesResponse {
  otaUpdates?: OTAUpdateSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListOutgoingCertificatesResponse {
  outgoingCertificates?: OutgoingCertificate[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPoliciesResponse {
  policies?: Policy[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPolicyPrincipalsResponse {
  principals?: string[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPolicyVersionsResponse {
  policyVersions?: PolicyVersion[] | null;
}

// refs: 1 - tags: named, output
export interface ListPrincipalPoliciesResponse {
  policies?: Policy[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPrincipalThingsResponse {
  things?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProvisioningTemplateVersionsResponse {
  versions?: ProvisioningTemplateVersionSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProvisioningTemplatesResponse {
  templates?: ProvisioningTemplateSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListRoleAliasesResponse {
  roleAliases?: string[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListScheduledAuditsResponse {
  scheduledAudits?: ScheduledAuditMetadata[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSecurityProfilesResponse {
  securityProfileIdentifiers?: SecurityProfileIdentifier[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListSecurityProfilesForTargetResponse {
  securityProfileTargetMappings?: SecurityProfileTargetMapping[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListStreamsResponse {
  streams?: StreamSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: Tag[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTargetsForPolicyResponse {
  targets?: string[] | null;
  nextMarker?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTargetsForSecurityProfileResponse {
  securityProfileTargets?: SecurityProfileTarget[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingGroupsResponse {
  thingGroups?: GroupNameAndArn[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingGroupsForThingResponse {
  thingGroups?: GroupNameAndArn[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingPrincipalsResponse {
  principals?: string[] | null;
}

// refs: 1 - tags: named, output
export interface ListThingRegistrationTaskReportsResponse {
  resourceLinks?: string[] | null;
  reportType?: ReportType | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingRegistrationTasksResponse {
  taskIds?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingTypesResponse {
  thingTypes?: ThingTypeDefinition[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingsResponse {
  things?: ThingAttribute[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingsInBillingGroupResponse {
  things?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListThingsInThingGroupResponse {
  things?: string[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTopicRuleDestinationsResponse {
  destinationSummaries?: TopicRuleDestinationSummary[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTopicRulesResponse {
  rules?: TopicRuleListItem[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListV2LoggingLevelsResponse {
  logTargetConfigurations?: LogTargetConfiguration[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListViolationEventsResponse {
  violationEvents?: ViolationEvent[] | null;
  nextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterCACertificateResponse {
  certificateArn?: string | null;
  certificateId?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterCertificateResponse {
  certificateArn?: string | null;
  certificateId?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterCertificateWithoutCAResponse {
  certificateArn?: string | null;
  certificateId?: string | null;
}

// refs: 1 - tags: named, output
export interface RegisterThingResponse {
  certificatePem?: string | null;
  resourceArns?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface RemoveThingFromBillingGroupResponse {
}

// refs: 1 - tags: named, output
export interface RemoveThingFromThingGroupResponse {
}

// refs: 1 - tags: named, output
export interface SearchIndexResponse {
  nextToken?: string | null;
  things?: ThingDocument[] | null;
  thingGroups?: ThingGroupDocument[] | null;
}

// refs: 1 - tags: named, output
export interface SetDefaultAuthorizerResponse {
  authorizerName?: string | null;
  authorizerArn?: string | null;
}

// refs: 1 - tags: named, output
export interface StartAuditMitigationActionsTaskResponse {
  taskId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartOnDemandAuditTaskResponse {
  taskId?: string | null;
}

// refs: 1 - tags: named, output
export interface StartThingRegistrationTaskResponse {
  taskId?: string | null;
}

// refs: 1 - tags: named, output
export interface StopThingRegistrationTaskResponse {
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface TestAuthorizationResponse {
  authResults?: AuthResult[] | null;
}

// refs: 1 - tags: named, output
export interface TestInvokeAuthorizerResponse {
  isAuthenticated?: boolean | null;
  principalId?: string | null;
  policyDocuments?: string[] | null;
  refreshAfterInSeconds?: number | null;
  disconnectAfterInSeconds?: number | null;
}

// refs: 1 - tags: named, output
export interface TransferCertificateResponse {
  transferredCertificateArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAccountAuditConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAuditSuppressionResponse {
}

// refs: 1 - tags: named, output
export interface UpdateAuthorizerResponse {
  authorizerName?: string | null;
  authorizerArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateBillingGroupResponse {
  version?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDimensionResponse {
  name?: string | null;
  arn?: string | null;
  type?: DimensionType | null;
  stringValues?: string[] | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateDomainConfigurationResponse {
  domainConfigurationName?: string | null;
  domainConfigurationArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateDynamicThingGroupResponse {
  version?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateEventConfigurationsResponse {
}

// refs: 1 - tags: named, output
export interface UpdateIndexingConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface UpdateMitigationActionResponse {
  actionArn?: string | null;
  actionId?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateProvisioningTemplateResponse {
}

// refs: 1 - tags: named, output
export interface UpdateRoleAliasResponse {
  roleAlias?: string | null;
  roleAliasArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateScheduledAuditResponse {
  scheduledAuditArn?: string | null;
}

// refs: 1 - tags: named, output
export interface UpdateSecurityProfileResponse {
  securityProfileName?: string | null;
  securityProfileArn?: string | null;
  securityProfileDescription?: string | null;
  behaviors?: Behavior[] | null;
  alertTargets?: { [key in AlertTargetType]: AlertTarget | null | undefined } | null;
  additionalMetricsToRetain?: string[] | null;
  additionalMetricsToRetainV2?: MetricToRetain[] | null;
  version?: number | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
}

// refs: 1 - tags: named, output
export interface UpdateStreamResponse {
  streamId?: string | null;
  streamArn?: string | null;
  description?: string | null;
  streamVersion?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateThingResponse {
}

// refs: 1 - tags: named, output
export interface UpdateThingGroupResponse {
  version?: number | null;
}

// refs: 1 - tags: named, output
export interface UpdateThingGroupsForThingResponse {
}

// refs: 1 - tags: named, output
export interface UpdateTopicRuleDestinationResponse {
}

// refs: 1 - tags: named, output
export interface ValidateSecurityProfileBehaviorsResponse {
  valid?: boolean | null;
  validationErrors?: ValidationError[] | null;
}

// refs: 12 - tags: input, named, interface, output
export interface ResourceIdentifier {
  deviceCertificateId?: string | null;
  caCertificateId?: string | null;
  cognitoIdentityPoolId?: string | null;
  clientId?: string | null;
  policyVersionIdentifier?: PolicyVersionIdentifier | null;
  account?: string | null;
  iamRoleArn?: string | null;
  roleAliasArn?: string | null;
}
function fromResourceIdentifier(input?: ResourceIdentifier | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    deviceCertificateId: input["deviceCertificateId"],
    caCertificateId: input["caCertificateId"],
    cognitoIdentityPoolId: input["cognitoIdentityPoolId"],
    clientId: input["clientId"],
    policyVersionIdentifier: fromPolicyVersionIdentifier(input["policyVersionIdentifier"]),
    account: input["account"],
    iamRoleArn: input["iamRoleArn"],
    roleAliasArn: input["roleAliasArn"],
  }
}
function toResourceIdentifier(root: jsonP.JSONValue): ResourceIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "deviceCertificateId": "s",
      "caCertificateId": "s",
      "cognitoIdentityPoolId": "s",
      "clientId": "s",
      "policyVersionIdentifier": toPolicyVersionIdentifier,
      "account": "s",
      "iamRoleArn": "s",
      "roleAliasArn": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, interface, output
export interface PolicyVersionIdentifier {
  policyName?: string | null;
  policyVersionId?: string | null;
}
function fromPolicyVersionIdentifier(input?: PolicyVersionIdentifier | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    policyName: input["policyName"],
    policyVersionId: input["policyVersionId"],
  }
}
function toPolicyVersionIdentifier(root: jsonP.JSONValue): PolicyVersionIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "policyName": "s",
      "policyVersionId": "s",
    },
  }, root);
}

// refs: 5 - tags: input, named, enum, output
export type AuthorizerStatus =
| "ACTIVE"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 19 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): Tag {
  return jsonP.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface BillingGroupProperties {
  billingGroupDescription?: string | null;
}
function fromBillingGroupProperties(input?: BillingGroupProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    billingGroupDescription: input["billingGroupDescription"],
  }
}
function toBillingGroupProperties(root: jsonP.JSONValue): BillingGroupProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "billingGroupDescription": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type DimensionType =
| "TOPIC_FILTER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface AuthorizerConfig {
  defaultAuthorizerName?: string | null;
  allowAuthorizerOverride?: boolean | null;
}
function fromAuthorizerConfig(input?: AuthorizerConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    defaultAuthorizerName: input["defaultAuthorizerName"],
    allowAuthorizerOverride: input["allowAuthorizerOverride"],
  }
}
function toAuthorizerConfig(root: jsonP.JSONValue): AuthorizerConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "defaultAuthorizerName": "s",
      "allowAuthorizerOverride": "b",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type ServiceType =
| "DATA"
| "CREDENTIAL_PROVIDER"
| "JOBS"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, interface, output
export interface ThingGroupProperties {
  thingGroupDescription?: string | null;
  attributePayload?: AttributePayload | null;
}
function fromThingGroupProperties(input?: ThingGroupProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    thingGroupDescription: input["thingGroupDescription"],
    attributePayload: fromAttributePayload(input["attributePayload"]),
  }
}
function toThingGroupProperties(root: jsonP.JSONValue): ThingGroupProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingGroupDescription": "s",
      "attributePayload": toAttributePayload,
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface AttributePayload {
  attributes?: { [key: string]: string | null | undefined } | null;
  merge?: boolean | null;
}
function fromAttributePayload(input?: AttributePayload | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    attributes: input["attributes"],
    merge: input["merge"],
  }
}
function toAttributePayload(root: jsonP.JSONValue): AttributePayload {
  return jsonP.readObj({
    required: {},
    optional: {
      "attributes": x => jsonP.readMap(String, String, x),
      "merge": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface PresignedUrlConfig {
  roleArn?: string | null;
  expiresInSec?: number | null;
}
function fromPresignedUrlConfig(input?: PresignedUrlConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    expiresInSec: input["expiresInSec"],
  }
}
function toPresignedUrlConfig(root: jsonP.JSONValue): PresignedUrlConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "roleArn": "s",
      "expiresInSec": "n",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type TargetSelection =
| "CONTINUOUS"
| "SNAPSHOT"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface JobExecutionsRolloutConfig {
  maximumPerMinute?: number | null;
  exponentialRate?: ExponentialRolloutRate | null;
}
function fromJobExecutionsRolloutConfig(input?: JobExecutionsRolloutConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    maximumPerMinute: input["maximumPerMinute"],
    exponentialRate: fromExponentialRolloutRate(input["exponentialRate"]),
  }
}
function toJobExecutionsRolloutConfig(root: jsonP.JSONValue): JobExecutionsRolloutConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "maximumPerMinute": "n",
      "exponentialRate": toExponentialRolloutRate,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ExponentialRolloutRate {
  baseRatePerMinute: number;
  incrementFactor: number;
  rateIncreaseCriteria: RateIncreaseCriteria;
}
function fromExponentialRolloutRate(input?: ExponentialRolloutRate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    baseRatePerMinute: input["baseRatePerMinute"],
    incrementFactor: input["incrementFactor"],
    rateIncreaseCriteria: fromRateIncreaseCriteria(input["rateIncreaseCriteria"]),
  }
}
function toExponentialRolloutRate(root: jsonP.JSONValue): ExponentialRolloutRate {
  return jsonP.readObj({
    required: {
      "baseRatePerMinute": "n",
      "incrementFactor": "n",
      "rateIncreaseCriteria": toRateIncreaseCriteria,
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RateIncreaseCriteria {
  numberOfNotifiedThings?: number | null;
  numberOfSucceededThings?: number | null;
}
function fromRateIncreaseCriteria(input?: RateIncreaseCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    numberOfNotifiedThings: input["numberOfNotifiedThings"],
    numberOfSucceededThings: input["numberOfSucceededThings"],
  }
}
function toRateIncreaseCriteria(root: jsonP.JSONValue): RateIncreaseCriteria {
  return jsonP.readObj({
    required: {},
    optional: {
      "numberOfNotifiedThings": "n",
      "numberOfSucceededThings": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AbortConfig {
  criteriaList: AbortCriteria[];
}
function fromAbortConfig(input?: AbortConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    criteriaList: input["criteriaList"]?.map(x => fromAbortCriteria(x)),
  }
}
function toAbortConfig(root: jsonP.JSONValue): AbortConfig {
  return jsonP.readObj({
    required: {
      "criteriaList": [toAbortCriteria],
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface AbortCriteria {
  failureType: JobExecutionFailureType;
  action: AbortAction;
  thresholdPercentage: number;
  minNumberOfExecutedThings: number;
}
function fromAbortCriteria(input?: AbortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    failureType: input["failureType"],
    action: input["action"],
    thresholdPercentage: input["thresholdPercentage"],
    minNumberOfExecutedThings: input["minNumberOfExecutedThings"],
  }
}
function toAbortCriteria(root: jsonP.JSONValue): AbortCriteria {
  return jsonP.readObj({
    required: {
      "failureType": (x: jsonP.JSONValue) => cmnP.readEnum<JobExecutionFailureType>(x),
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<AbortAction>(x),
      "thresholdPercentage": "n",
      "minNumberOfExecutedThings": "n",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type JobExecutionFailureType =
| "FAILED"
| "REJECTED"
| "TIMED_OUT"
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type AbortAction =
| "CANCEL"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface TimeoutConfig {
  inProgressTimeoutInMinutes?: number | null;
}
function fromTimeoutConfig(input?: TimeoutConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    inProgressTimeoutInMinutes: input["inProgressTimeoutInMinutes"],
  }
}
function toTimeoutConfig(root: jsonP.JSONValue): TimeoutConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "inProgressTimeoutInMinutes": "n",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MitigationActionParams {
  updateDeviceCertificateParams?: UpdateDeviceCertificateParams | null;
  updateCACertificateParams?: UpdateCACertificateParams | null;
  addThingsToThingGroupParams?: AddThingsToThingGroupParams | null;
  replaceDefaultPolicyVersionParams?: ReplaceDefaultPolicyVersionParams | null;
  enableIoTLoggingParams?: EnableIoTLoggingParams | null;
  publishFindingToSnsParams?: PublishFindingToSnsParams | null;
}
function fromMitigationActionParams(input?: MitigationActionParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    updateDeviceCertificateParams: fromUpdateDeviceCertificateParams(input["updateDeviceCertificateParams"]),
    updateCACertificateParams: fromUpdateCACertificateParams(input["updateCACertificateParams"]),
    addThingsToThingGroupParams: fromAddThingsToThingGroupParams(input["addThingsToThingGroupParams"]),
    replaceDefaultPolicyVersionParams: fromReplaceDefaultPolicyVersionParams(input["replaceDefaultPolicyVersionParams"]),
    enableIoTLoggingParams: fromEnableIoTLoggingParams(input["enableIoTLoggingParams"]),
    publishFindingToSnsParams: fromPublishFindingToSnsParams(input["publishFindingToSnsParams"]),
  }
}
function toMitigationActionParams(root: jsonP.JSONValue): MitigationActionParams {
  return jsonP.readObj({
    required: {},
    optional: {
      "updateDeviceCertificateParams": toUpdateDeviceCertificateParams,
      "updateCACertificateParams": toUpdateCACertificateParams,
      "addThingsToThingGroupParams": toAddThingsToThingGroupParams,
      "replaceDefaultPolicyVersionParams": toReplaceDefaultPolicyVersionParams,
      "enableIoTLoggingParams": toEnableIoTLoggingParams,
      "publishFindingToSnsParams": toPublishFindingToSnsParams,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface UpdateDeviceCertificateParams {
  action: DeviceCertificateUpdateAction;
}
function fromUpdateDeviceCertificateParams(input?: UpdateDeviceCertificateParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    action: input["action"],
  }
}
function toUpdateDeviceCertificateParams(root: jsonP.JSONValue): UpdateDeviceCertificateParams {
  return jsonP.readObj({
    required: {
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<DeviceCertificateUpdateAction>(x),
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type DeviceCertificateUpdateAction =
| "DEACTIVATE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface UpdateCACertificateParams {
  action: CACertificateUpdateAction;
}
function fromUpdateCACertificateParams(input?: UpdateCACertificateParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    action: input["action"],
  }
}
function toUpdateCACertificateParams(root: jsonP.JSONValue): UpdateCACertificateParams {
  return jsonP.readObj({
    required: {
      "action": (x: jsonP.JSONValue) => cmnP.readEnum<CACertificateUpdateAction>(x),
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type CACertificateUpdateAction =
| "DEACTIVATE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface AddThingsToThingGroupParams {
  thingGroupNames: string[];
  overrideDynamicGroups?: boolean | null;
}
function fromAddThingsToThingGroupParams(input?: AddThingsToThingGroupParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    thingGroupNames: input["thingGroupNames"],
    overrideDynamicGroups: input["overrideDynamicGroups"],
  }
}
function toAddThingsToThingGroupParams(root: jsonP.JSONValue): AddThingsToThingGroupParams {
  return jsonP.readObj({
    required: {
      "thingGroupNames": ["s"],
    },
    optional: {
      "overrideDynamicGroups": "b",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ReplaceDefaultPolicyVersionParams {
  templateName: PolicyTemplateName;
}
function fromReplaceDefaultPolicyVersionParams(input?: ReplaceDefaultPolicyVersionParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    templateName: input["templateName"],
  }
}
function toReplaceDefaultPolicyVersionParams(root: jsonP.JSONValue): ReplaceDefaultPolicyVersionParams {
  return jsonP.readObj({
    required: {
      "templateName": (x: jsonP.JSONValue) => cmnP.readEnum<PolicyTemplateName>(x),
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type PolicyTemplateName =
| "BLANK_POLICY"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface EnableIoTLoggingParams {
  roleArnForLogging: string;
  logLevel: LogLevel;
}
function fromEnableIoTLoggingParams(input?: EnableIoTLoggingParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArnForLogging: input["roleArnForLogging"],
    logLevel: input["logLevel"],
  }
}
function toEnableIoTLoggingParams(root: jsonP.JSONValue): EnableIoTLoggingParams {
  return jsonP.readObj({
    required: {
      "roleArnForLogging": "s",
      "logLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LogLevel>(x),
    },
    optional: {},
  }, root);
}

// refs: 10 - tags: input, named, enum, output
export type LogLevel =
| "DEBUG"
| "INFO"
| "ERROR"
| "WARN"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface PublishFindingToSnsParams {
  topicArn: string;
}
function fromPublishFindingToSnsParams(input?: PublishFindingToSnsParams | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    topicArn: input["topicArn"],
  }
}
function toPublishFindingToSnsParams(root: jsonP.JSONValue): PublishFindingToSnsParams {
  return jsonP.readObj({
    required: {
      "topicArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type Protocol =
| "MQTT"
| "HTTP"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface AwsJobExecutionsRolloutConfig {
  maximumPerMinute?: number | null;
  exponentialRate?: AwsJobExponentialRolloutRate | null;
}
function fromAwsJobExecutionsRolloutConfig(input?: AwsJobExecutionsRolloutConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    maximumPerMinute: input["maximumPerMinute"],
    exponentialRate: fromAwsJobExponentialRolloutRate(input["exponentialRate"]),
  }
}
function toAwsJobExecutionsRolloutConfig(root: jsonP.JSONValue): AwsJobExecutionsRolloutConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "maximumPerMinute": "n",
      "exponentialRate": toAwsJobExponentialRolloutRate,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AwsJobExponentialRolloutRate {
  baseRatePerMinute: number;
  incrementFactor: number;
  rateIncreaseCriteria: AwsJobRateIncreaseCriteria;
}
function fromAwsJobExponentialRolloutRate(input?: AwsJobExponentialRolloutRate | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    baseRatePerMinute: input["baseRatePerMinute"],
    incrementFactor: input["incrementFactor"],
    rateIncreaseCriteria: fromAwsJobRateIncreaseCriteria(input["rateIncreaseCriteria"]),
  }
}
function toAwsJobExponentialRolloutRate(root: jsonP.JSONValue): AwsJobExponentialRolloutRate {
  return jsonP.readObj({
    required: {
      "baseRatePerMinute": "n",
      "incrementFactor": "n",
      "rateIncreaseCriteria": toAwsJobRateIncreaseCriteria,
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AwsJobRateIncreaseCriteria {
  numberOfNotifiedThings?: number | null;
  numberOfSucceededThings?: number | null;
}
function fromAwsJobRateIncreaseCriteria(input?: AwsJobRateIncreaseCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    numberOfNotifiedThings: input["numberOfNotifiedThings"],
    numberOfSucceededThings: input["numberOfSucceededThings"],
  }
}
function toAwsJobRateIncreaseCriteria(root: jsonP.JSONValue): AwsJobRateIncreaseCriteria {
  return jsonP.readObj({
    required: {},
    optional: {
      "numberOfNotifiedThings": "n",
      "numberOfSucceededThings": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AwsJobPresignedUrlConfig {
  expiresInSec?: number | null;
}
function fromAwsJobPresignedUrlConfig(input?: AwsJobPresignedUrlConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    expiresInSec: input["expiresInSec"],
  }
}
function toAwsJobPresignedUrlConfig(root: jsonP.JSONValue): AwsJobPresignedUrlConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "expiresInSec": "n",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface AwsJobAbortConfig {
  abortCriteriaList: AwsJobAbortCriteria[];
}
function fromAwsJobAbortConfig(input?: AwsJobAbortConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    abortCriteriaList: input["abortCriteriaList"]?.map(x => fromAwsJobAbortCriteria(x)),
  }
}

// refs: 1 - tags: input, named, interface
export interface AwsJobAbortCriteria {
  failureType: AwsJobAbortCriteriaFailureType;
  action: AwsJobAbortCriteriaAbortAction;
  thresholdPercentage: number;
  minNumberOfExecutedThings: number;
}
function fromAwsJobAbortCriteria(input?: AwsJobAbortCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    failureType: input["failureType"],
    action: input["action"],
    thresholdPercentage: input["thresholdPercentage"],
    minNumberOfExecutedThings: input["minNumberOfExecutedThings"],
  }
}

// refs: 1 - tags: input, named, enum
export type AwsJobAbortCriteriaFailureType =
| "FAILED"
| "REJECTED"
| "TIMED_OUT"
| "ALL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, enum
export type AwsJobAbortCriteriaAbortAction =
| "CANCEL"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface AwsJobTimeoutConfig {
  inProgressTimeoutInMinutes?: number | null;
}
function fromAwsJobTimeoutConfig(input?: AwsJobTimeoutConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    inProgressTimeoutInMinutes: input["inProgressTimeoutInMinutes"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface OTAUpdateFile {
  fileName?: string | null;
  fileVersion?: string | null;
  fileLocation?: FileLocation | null;
  codeSigning?: CodeSigning | null;
  attributes?: { [key: string]: string | null | undefined } | null;
}
function fromOTAUpdateFile(input?: OTAUpdateFile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fileName: input["fileName"],
    fileVersion: input["fileVersion"],
    fileLocation: fromFileLocation(input["fileLocation"]),
    codeSigning: fromCodeSigning(input["codeSigning"]),
    attributes: input["attributes"],
  }
}
function toOTAUpdateFile(root: jsonP.JSONValue): OTAUpdateFile {
  return jsonP.readObj({
    required: {},
    optional: {
      "fileName": "s",
      "fileVersion": "s",
      "fileLocation": toFileLocation,
      "codeSigning": toCodeSigning,
      "attributes": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface FileLocation {
  stream?: Stream | null;
  s3Location?: S3Location | null;
}
function fromFileLocation(input?: FileLocation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stream: fromStream(input["stream"]),
    s3Location: fromS3Location(input["s3Location"]),
  }
}
function toFileLocation(root: jsonP.JSONValue): FileLocation {
  return jsonP.readObj({
    required: {},
    optional: {
      "stream": toStream,
      "s3Location": toS3Location,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Stream {
  streamId?: string | null;
  fileId?: number | null;
}
function fromStream(input?: Stream | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    streamId: input["streamId"],
    fileId: input["fileId"],
  }
}
function toStream(root: jsonP.JSONValue): Stream {
  return jsonP.readObj({
    required: {},
    optional: {
      "streamId": "s",
      "fileId": "n",
    },
  }, root);
}

// refs: 5 - tags: input, named, interface, output
export interface S3Location {
  bucket?: string | null;
  key?: string | null;
  version?: string | null;
}
function fromS3Location(input?: S3Location | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucket: input["bucket"],
    key: input["key"],
    version: input["version"],
  }
}
function toS3Location(root: jsonP.JSONValue): S3Location {
  return jsonP.readObj({
    required: {},
    optional: {
      "bucket": "s",
      "key": "s",
      "version": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CodeSigning {
  awsSignerJobId?: string | null;
  startSigningJobParameter?: StartSigningJobParameter | null;
  customCodeSigning?: CustomCodeSigning | null;
}
function fromCodeSigning(input?: CodeSigning | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    awsSignerJobId: input["awsSignerJobId"],
    startSigningJobParameter: fromStartSigningJobParameter(input["startSigningJobParameter"]),
    customCodeSigning: fromCustomCodeSigning(input["customCodeSigning"]),
  }
}
function toCodeSigning(root: jsonP.JSONValue): CodeSigning {
  return jsonP.readObj({
    required: {},
    optional: {
      "awsSignerJobId": "s",
      "startSigningJobParameter": toStartSigningJobParameter,
      "customCodeSigning": toCustomCodeSigning,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface StartSigningJobParameter {
  signingProfileParameter?: SigningProfileParameter | null;
  signingProfileName?: string | null;
  destination?: Destination | null;
}
function fromStartSigningJobParameter(input?: StartSigningJobParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    signingProfileParameter: fromSigningProfileParameter(input["signingProfileParameter"]),
    signingProfileName: input["signingProfileName"],
    destination: fromDestination(input["destination"]),
  }
}
function toStartSigningJobParameter(root: jsonP.JSONValue): StartSigningJobParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "signingProfileParameter": toSigningProfileParameter,
      "signingProfileName": "s",
      "destination": toDestination,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface SigningProfileParameter {
  certificateArn?: string | null;
  platform?: string | null;
  certificatePathOnDevice?: string | null;
}
function fromSigningProfileParameter(input?: SigningProfileParameter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    certificateArn: input["certificateArn"],
    platform: input["platform"],
    certificatePathOnDevice: input["certificatePathOnDevice"],
  }
}
function toSigningProfileParameter(root: jsonP.JSONValue): SigningProfileParameter {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateArn": "s",
      "platform": "s",
      "certificatePathOnDevice": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface Destination {
  s3Destination?: S3Destination | null;
}
function fromDestination(input?: Destination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    s3Destination: fromS3Destination(input["s3Destination"]),
  }
}
function toDestination(root: jsonP.JSONValue): Destination {
  return jsonP.readObj({
    required: {},
    optional: {
      "s3Destination": toS3Destination,
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface S3Destination {
  bucket?: string | null;
  prefix?: string | null;
}
function fromS3Destination(input?: S3Destination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    bucket: input["bucket"],
    prefix: input["prefix"],
  }
}
function toS3Destination(root: jsonP.JSONValue): S3Destination {
  return jsonP.readObj({
    required: {},
    optional: {
      "bucket": "s",
      "prefix": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CustomCodeSigning {
  signature?: CodeSigningSignature | null;
  certificateChain?: CodeSigningCertificateChain | null;
  hashAlgorithm?: string | null;
  signatureAlgorithm?: string | null;
}
function fromCustomCodeSigning(input?: CustomCodeSigning | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    signature: fromCodeSigningSignature(input["signature"]),
    certificateChain: fromCodeSigningCertificateChain(input["certificateChain"]),
    hashAlgorithm: input["hashAlgorithm"],
    signatureAlgorithm: input["signatureAlgorithm"],
  }
}
function toCustomCodeSigning(root: jsonP.JSONValue): CustomCodeSigning {
  return jsonP.readObj({
    required: {},
    optional: {
      "signature": toCodeSigningSignature,
      "certificateChain": toCodeSigningCertificateChain,
      "hashAlgorithm": "s",
      "signatureAlgorithm": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CodeSigningSignature {
  inlineDocument?: Uint8Array | string | null;
}
function fromCodeSigningSignature(input?: CodeSigningSignature | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    inlineDocument: jsonP.serializeBlob(input["inlineDocument"]),
  }
}
function toCodeSigningSignature(root: jsonP.JSONValue): CodeSigningSignature {
  return jsonP.readObj({
    required: {},
    optional: {
      "inlineDocument": "a",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface CodeSigningCertificateChain {
  certificateName?: string | null;
  inlineDocument?: string | null;
}
function fromCodeSigningCertificateChain(input?: CodeSigningCertificateChain | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    certificateName: input["certificateName"],
    inlineDocument: input["inlineDocument"],
  }
}
function toCodeSigningCertificateChain(root: jsonP.JSONValue): CodeSigningCertificateChain {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateName": "s",
      "inlineDocument": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ProvisioningHook {
  payloadVersion?: string | null;
  targetArn: string;
}
function fromProvisioningHook(input?: ProvisioningHook | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    payloadVersion: input["payloadVersion"],
    targetArn: input["targetArn"],
  }
}
function toProvisioningHook(root: jsonP.JSONValue): ProvisioningHook {
  return jsonP.readObj({
    required: {
      "targetArn": "s",
    },
    optional: {
      "payloadVersion": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type AuditFrequency =
| "DAILY"
| "WEEKLY"
| "BIWEEKLY"
| "MONTHLY"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type DayOfWeek =
| "SUN"
| "MON"
| "TUE"
| "WED"
| "THU"
| "FRI"
| "SAT"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface Behavior {
  name: string;
  metric?: string | null;
  metricDimension?: MetricDimension | null;
  criteria?: BehaviorCriteria | null;
}
function fromBehavior(input?: Behavior | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    metric: input["metric"],
    metricDimension: fromMetricDimension(input["metricDimension"]),
    criteria: fromBehaviorCriteria(input["criteria"]),
  }
}
function toBehavior(root: jsonP.JSONValue): Behavior {
  return jsonP.readObj({
    required: {
      "name": "s",
    },
    optional: {
      "metric": "s",
      "metricDimension": toMetricDimension,
      "criteria": toBehaviorCriteria,
    },
  }, root);
}

// refs: 11 - tags: input, named, interface, output
export interface MetricDimension {
  dimensionName: string;
  operator?: DimensionValueOperator | null;
}
function fromMetricDimension(input?: MetricDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dimensionName: input["dimensionName"],
    operator: input["operator"],
  }
}
function toMetricDimension(root: jsonP.JSONValue): MetricDimension {
  return jsonP.readObj({
    required: {
      "dimensionName": "s",
    },
    optional: {
      "operator": (x: jsonP.JSONValue) => cmnP.readEnum<DimensionValueOperator>(x),
    },
  }, root);
}

// refs: 11 - tags: input, named, enum, output
export type DimensionValueOperator =
| "IN"
| "NOT_IN"
| cmnP.UnexpectedEnumValue;

// refs: 7 - tags: input, named, interface, output
export interface BehaviorCriteria {
  comparisonOperator?: ComparisonOperator | null;
  value?: MetricValue | null;
  durationSeconds?: number | null;
  consecutiveDatapointsToAlarm?: number | null;
  consecutiveDatapointsToClear?: number | null;
  statisticalThreshold?: StatisticalThreshold | null;
}
function fromBehaviorCriteria(input?: BehaviorCriteria | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    comparisonOperator: input["comparisonOperator"],
    value: fromMetricValue(input["value"]),
    durationSeconds: input["durationSeconds"],
    consecutiveDatapointsToAlarm: input["consecutiveDatapointsToAlarm"],
    consecutiveDatapointsToClear: input["consecutiveDatapointsToClear"],
    statisticalThreshold: fromStatisticalThreshold(input["statisticalThreshold"]),
  }
}
function toBehaviorCriteria(root: jsonP.JSONValue): BehaviorCriteria {
  return jsonP.readObj({
    required: {},
    optional: {
      "comparisonOperator": (x: jsonP.JSONValue) => cmnP.readEnum<ComparisonOperator>(x),
      "value": toMetricValue,
      "durationSeconds": "n",
      "consecutiveDatapointsToAlarm": "n",
      "consecutiveDatapointsToClear": "n",
      "statisticalThreshold": toStatisticalThreshold,
    },
  }, root);
}

// refs: 7 - tags: input, named, enum, output
export type ComparisonOperator =
| "less-than"
| "less-than-equals"
| "greater-than"
| "greater-than-equals"
| "in-cidr-set"
| "not-in-cidr-set"
| "in-port-set"
| "not-in-port-set"
| cmnP.UnexpectedEnumValue;

// refs: 9 - tags: input, named, interface, output
export interface MetricValue {
  count?: number | null;
  cidrs?: string[] | null;
  ports?: number[] | null;
}
function fromMetricValue(input?: MetricValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    count: input["count"],
    cidrs: input["cidrs"],
    ports: input["ports"],
  }
}
function toMetricValue(root: jsonP.JSONValue): MetricValue {
  return jsonP.readObj({
    required: {},
    optional: {
      "count": "n",
      "cidrs": ["s"],
      "ports": ["n"],
    },
  }, root);
}

// refs: 7 - tags: input, named, interface, output
export interface StatisticalThreshold {
  statistic?: string | null;
}
function fromStatisticalThreshold(input?: StatisticalThreshold | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    statistic: input["statistic"],
  }
}
function toStatisticalThreshold(root: jsonP.JSONValue): StatisticalThreshold {
  return jsonP.readObj({
    required: {},
    optional: {
      "statistic": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type AlertTargetType =
| "SNS"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface AlertTarget {
  alertTargetArn: string;
  roleArn: string;
}
function fromAlertTarget(input?: AlertTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    alertTargetArn: input["alertTargetArn"],
    roleArn: input["roleArn"],
  }
}
function toAlertTarget(root: jsonP.JSONValue): AlertTarget {
  return jsonP.readObj({
    required: {
      "alertTargetArn": "s",
      "roleArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface MetricToRetain {
  metric: string;
  metricDimension?: MetricDimension | null;
}
function fromMetricToRetain(input?: MetricToRetain | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    metric: input["metric"],
    metricDimension: fromMetricDimension(input["metricDimension"]),
  }
}
function toMetricToRetain(root: jsonP.JSONValue): MetricToRetain {
  return jsonP.readObj({
    required: {
      "metric": "s",
    },
    optional: {
      "metricDimension": toMetricDimension,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface StreamFile {
  fileId?: number | null;
  s3Location?: S3Location | null;
}
function fromStreamFile(input?: StreamFile | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    fileId: input["fileId"],
    s3Location: fromS3Location(input["s3Location"]),
  }
}
function toStreamFile(root: jsonP.JSONValue): StreamFile {
  return jsonP.readObj({
    required: {},
    optional: {
      "fileId": "n",
      "s3Location": toS3Location,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ThingTypeProperties {
  thingTypeDescription?: string | null;
  searchableAttributes?: string[] | null;
}
function fromThingTypeProperties(input?: ThingTypeProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    thingTypeDescription: input["thingTypeDescription"],
    searchableAttributes: input["searchableAttributes"],
  }
}
function toThingTypeProperties(root: jsonP.JSONValue): ThingTypeProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingTypeDescription": "s",
      "searchableAttributes": ["s"],
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface TopicRulePayload {
  sql: string;
  description?: string | null;
  actions: Action[];
  ruleDisabled?: boolean | null;
  awsIotSqlVersion?: string | null;
  errorAction?: Action | null;
}
function fromTopicRulePayload(input?: TopicRulePayload | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sql: input["sql"],
    description: input["description"],
    actions: input["actions"]?.map(x => fromAction(x)),
    ruleDisabled: input["ruleDisabled"],
    awsIotSqlVersion: input["awsIotSqlVersion"],
    errorAction: fromAction(input["errorAction"]),
  }
}

// refs: 6 - tags: input, named, interface, output
export interface Action {
  dynamoDB?: DynamoDBAction | null;
  dynamoDBv2?: DynamoDBv2Action | null;
  lambda?: LambdaAction | null;
  sns?: SnsAction | null;
  sqs?: SqsAction | null;
  kinesis?: KinesisAction | null;
  republish?: RepublishAction | null;
  s3?: S3Action | null;
  firehose?: FirehoseAction | null;
  cloudwatchMetric?: CloudwatchMetricAction | null;
  cloudwatchAlarm?: CloudwatchAlarmAction | null;
  cloudwatchLogs?: CloudwatchLogsAction | null;
  elasticsearch?: ElasticsearchAction | null;
  salesforce?: SalesforceAction | null;
  iotAnalytics?: IotAnalyticsAction | null;
  iotEvents?: IotEventsAction | null;
  iotSiteWise?: IotSiteWiseAction | null;
  stepFunctions?: StepFunctionsAction | null;
  timestream?: TimestreamAction | null;
  http?: HttpAction | null;
}
function fromAction(input?: Action | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    dynamoDB: fromDynamoDBAction(input["dynamoDB"]),
    dynamoDBv2: fromDynamoDBv2Action(input["dynamoDBv2"]),
    lambda: fromLambdaAction(input["lambda"]),
    sns: fromSnsAction(input["sns"]),
    sqs: fromSqsAction(input["sqs"]),
    kinesis: fromKinesisAction(input["kinesis"]),
    republish: fromRepublishAction(input["republish"]),
    s3: fromS3Action(input["s3"]),
    firehose: fromFirehoseAction(input["firehose"]),
    cloudwatchMetric: fromCloudwatchMetricAction(input["cloudwatchMetric"]),
    cloudwatchAlarm: fromCloudwatchAlarmAction(input["cloudwatchAlarm"]),
    cloudwatchLogs: fromCloudwatchLogsAction(input["cloudwatchLogs"]),
    elasticsearch: fromElasticsearchAction(input["elasticsearch"]),
    salesforce: fromSalesforceAction(input["salesforce"]),
    iotAnalytics: fromIotAnalyticsAction(input["iotAnalytics"]),
    iotEvents: fromIotEventsAction(input["iotEvents"]),
    iotSiteWise: fromIotSiteWiseAction(input["iotSiteWise"]),
    stepFunctions: fromStepFunctionsAction(input["stepFunctions"]),
    timestream: fromTimestreamAction(input["timestream"]),
    http: fromHttpAction(input["http"]),
  }
}
function toAction(root: jsonP.JSONValue): Action {
  return jsonP.readObj({
    required: {},
    optional: {
      "dynamoDB": toDynamoDBAction,
      "dynamoDBv2": toDynamoDBv2Action,
      "lambda": toLambdaAction,
      "sns": toSnsAction,
      "sqs": toSqsAction,
      "kinesis": toKinesisAction,
      "republish": toRepublishAction,
      "s3": toS3Action,
      "firehose": toFirehoseAction,
      "cloudwatchMetric": toCloudwatchMetricAction,
      "cloudwatchAlarm": toCloudwatchAlarmAction,
      "cloudwatchLogs": toCloudwatchLogsAction,
      "elasticsearch": toElasticsearchAction,
      "salesforce": toSalesforceAction,
      "iotAnalytics": toIotAnalyticsAction,
      "iotEvents": toIotEventsAction,
      "iotSiteWise": toIotSiteWiseAction,
      "stepFunctions": toStepFunctionsAction,
      "timestream": toTimestreamAction,
      "http": toHttpAction,
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface DynamoDBAction {
  tableName: string;
  roleArn: string;
  operation?: string | null;
  hashKeyField: string;
  hashKeyValue: string;
  hashKeyType?: DynamoKeyType | null;
  rangeKeyField?: string | null;
  rangeKeyValue?: string | null;
  rangeKeyType?: DynamoKeyType | null;
  payloadField?: string | null;
}
function fromDynamoDBAction(input?: DynamoDBAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tableName: input["tableName"],
    roleArn: input["roleArn"],
    operation: input["operation"],
    hashKeyField: input["hashKeyField"],
    hashKeyValue: input["hashKeyValue"],
    hashKeyType: input["hashKeyType"],
    rangeKeyField: input["rangeKeyField"],
    rangeKeyValue: input["rangeKeyValue"],
    rangeKeyType: input["rangeKeyType"],
    payloadField: input["payloadField"],
  }
}
function toDynamoDBAction(root: jsonP.JSONValue): DynamoDBAction {
  return jsonP.readObj({
    required: {
      "tableName": "s",
      "roleArn": "s",
      "hashKeyField": "s",
      "hashKeyValue": "s",
    },
    optional: {
      "operation": "s",
      "hashKeyType": (x: jsonP.JSONValue) => cmnP.readEnum<DynamoKeyType>(x),
      "rangeKeyField": "s",
      "rangeKeyValue": "s",
      "rangeKeyType": (x: jsonP.JSONValue) => cmnP.readEnum<DynamoKeyType>(x),
      "payloadField": "s",
    },
  }, root);
}

// refs: 12 - tags: input, named, enum, output
export type DynamoKeyType =
| "STRING"
| "NUMBER"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface DynamoDBv2Action {
  roleArn: string;
  putItem: PutItemInput;
}
function fromDynamoDBv2Action(input?: DynamoDBv2Action | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    putItem: fromPutItemInput(input["putItem"]),
  }
}
function toDynamoDBv2Action(root: jsonP.JSONValue): DynamoDBv2Action {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "putItem": toPutItemInput,
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface PutItemInput {
  tableName: string;
}
function fromPutItemInput(input?: PutItemInput | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    tableName: input["tableName"],
  }
}
function toPutItemInput(root: jsonP.JSONValue): PutItemInput {
  return jsonP.readObj({
    required: {
      "tableName": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface LambdaAction {
  functionArn: string;
}
function fromLambdaAction(input?: LambdaAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    functionArn: input["functionArn"],
  }
}
function toLambdaAction(root: jsonP.JSONValue): LambdaAction {
  return jsonP.readObj({
    required: {
      "functionArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface SnsAction {
  targetArn: string;
  roleArn: string;
  messageFormat?: MessageFormat | null;
}
function fromSnsAction(input?: SnsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    targetArn: input["targetArn"],
    roleArn: input["roleArn"],
    messageFormat: input["messageFormat"],
  }
}
function toSnsAction(root: jsonP.JSONValue): SnsAction {
  return jsonP.readObj({
    required: {
      "targetArn": "s",
      "roleArn": "s",
    },
    optional: {
      "messageFormat": (x: jsonP.JSONValue) => cmnP.readEnum<MessageFormat>(x),
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type MessageFormat =
| "RAW"
| "JSON"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface SqsAction {
  roleArn: string;
  queueUrl: string;
  useBase64?: boolean | null;
}
function fromSqsAction(input?: SqsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    queueUrl: input["queueUrl"],
    useBase64: input["useBase64"],
  }
}
function toSqsAction(root: jsonP.JSONValue): SqsAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "queueUrl": "s",
    },
    optional: {
      "useBase64": "b",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface KinesisAction {
  roleArn: string;
  streamName: string;
  partitionKey?: string | null;
}
function fromKinesisAction(input?: KinesisAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    streamName: input["streamName"],
    partitionKey: input["partitionKey"],
  }
}
function toKinesisAction(root: jsonP.JSONValue): KinesisAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "streamName": "s",
    },
    optional: {
      "partitionKey": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface RepublishAction {
  roleArn: string;
  topic: string;
  qos?: number | null;
}
function fromRepublishAction(input?: RepublishAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    topic: input["topic"],
    qos: input["qos"],
  }
}
function toRepublishAction(root: jsonP.JSONValue): RepublishAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "topic": "s",
    },
    optional: {
      "qos": "n",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface S3Action {
  roleArn: string;
  bucketName: string;
  key: string;
  cannedAcl?: CannedAccessControlList | null;
}
function fromS3Action(input?: S3Action | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    bucketName: input["bucketName"],
    key: input["key"],
    cannedAcl: input["cannedAcl"],
  }
}
function toS3Action(root: jsonP.JSONValue): S3Action {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "bucketName": "s",
      "key": "s",
    },
    optional: {
      "cannedAcl": (x: jsonP.JSONValue) => cmnP.readEnum<CannedAccessControlList>(x),
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type CannedAccessControlList =
| "private"
| "public-read"
| "public-read-write"
| "aws-exec-read"
| "authenticated-read"
| "bucket-owner-read"
| "bucket-owner-full-control"
| "log-delivery-write"
| cmnP.UnexpectedEnumValue;

// refs: 6 - tags: input, named, interface, output
export interface FirehoseAction {
  roleArn: string;
  deliveryStreamName: string;
  separator?: string | null;
}
function fromFirehoseAction(input?: FirehoseAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    deliveryStreamName: input["deliveryStreamName"],
    separator: input["separator"],
  }
}
function toFirehoseAction(root: jsonP.JSONValue): FirehoseAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "deliveryStreamName": "s",
    },
    optional: {
      "separator": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface CloudwatchMetricAction {
  roleArn: string;
  metricNamespace: string;
  metricName: string;
  metricValue: string;
  metricUnit: string;
  metricTimestamp?: string | null;
}
function fromCloudwatchMetricAction(input?: CloudwatchMetricAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    metricNamespace: input["metricNamespace"],
    metricName: input["metricName"],
    metricValue: input["metricValue"],
    metricUnit: input["metricUnit"],
    metricTimestamp: input["metricTimestamp"],
  }
}
function toCloudwatchMetricAction(root: jsonP.JSONValue): CloudwatchMetricAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "metricNamespace": "s",
      "metricName": "s",
      "metricValue": "s",
      "metricUnit": "s",
    },
    optional: {
      "metricTimestamp": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface CloudwatchAlarmAction {
  roleArn: string;
  alarmName: string;
  stateReason: string;
  stateValue: string;
}
function fromCloudwatchAlarmAction(input?: CloudwatchAlarmAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    alarmName: input["alarmName"],
    stateReason: input["stateReason"],
    stateValue: input["stateValue"],
  }
}
function toCloudwatchAlarmAction(root: jsonP.JSONValue): CloudwatchAlarmAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "alarmName": "s",
      "stateReason": "s",
      "stateValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface CloudwatchLogsAction {
  roleArn: string;
  logGroupName: string;
}
function fromCloudwatchLogsAction(input?: CloudwatchLogsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    logGroupName: input["logGroupName"],
  }
}
function toCloudwatchLogsAction(root: jsonP.JSONValue): CloudwatchLogsAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "logGroupName": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface ElasticsearchAction {
  roleArn: string;
  endpoint: string;
  index: string;
  type: string;
  id: string;
}
function fromElasticsearchAction(input?: ElasticsearchAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    endpoint: input["endpoint"],
    index: input["index"],
    type: input["type"],
    id: input["id"],
  }
}
function toElasticsearchAction(root: jsonP.JSONValue): ElasticsearchAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "endpoint": "s",
      "index": "s",
      "type": "s",
      "id": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface SalesforceAction {
  token: string;
  url: string;
}
function fromSalesforceAction(input?: SalesforceAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    token: input["token"],
    url: input["url"],
  }
}
function toSalesforceAction(root: jsonP.JSONValue): SalesforceAction {
  return jsonP.readObj({
    required: {
      "token": "s",
      "url": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface IotAnalyticsAction {
  channelArn?: string | null;
  channelName?: string | null;
  roleArn?: string | null;
}
function fromIotAnalyticsAction(input?: IotAnalyticsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    channelArn: input["channelArn"],
    channelName: input["channelName"],
    roleArn: input["roleArn"],
  }
}
function toIotAnalyticsAction(root: jsonP.JSONValue): IotAnalyticsAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "channelArn": "s",
      "channelName": "s",
      "roleArn": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface IotEventsAction {
  inputName: string;
  messageId?: string | null;
  roleArn: string;
}
function fromIotEventsAction(input?: IotEventsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    inputName: input["inputName"],
    messageId: input["messageId"],
    roleArn: input["roleArn"],
  }
}
function toIotEventsAction(root: jsonP.JSONValue): IotEventsAction {
  return jsonP.readObj({
    required: {
      "inputName": "s",
      "roleArn": "s",
    },
    optional: {
      "messageId": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface IotSiteWiseAction {
  putAssetPropertyValueEntries: PutAssetPropertyValueEntry[];
  roleArn: string;
}
function fromIotSiteWiseAction(input?: IotSiteWiseAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    putAssetPropertyValueEntries: input["putAssetPropertyValueEntries"]?.map(x => fromPutAssetPropertyValueEntry(x)),
    roleArn: input["roleArn"],
  }
}
function toIotSiteWiseAction(root: jsonP.JSONValue): IotSiteWiseAction {
  return jsonP.readObj({
    required: {
      "putAssetPropertyValueEntries": [toPutAssetPropertyValueEntry],
      "roleArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface PutAssetPropertyValueEntry {
  entryId?: string | null;
  assetId?: string | null;
  propertyId?: string | null;
  propertyAlias?: string | null;
  propertyValues: AssetPropertyValue[];
}
function fromPutAssetPropertyValueEntry(input?: PutAssetPropertyValueEntry | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    entryId: input["entryId"],
    assetId: input["assetId"],
    propertyId: input["propertyId"],
    propertyAlias: input["propertyAlias"],
    propertyValues: input["propertyValues"]?.map(x => fromAssetPropertyValue(x)),
  }
}
function toPutAssetPropertyValueEntry(root: jsonP.JSONValue): PutAssetPropertyValueEntry {
  return jsonP.readObj({
    required: {
      "propertyValues": [toAssetPropertyValue],
    },
    optional: {
      "entryId": "s",
      "assetId": "s",
      "propertyId": "s",
      "propertyAlias": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface AssetPropertyValue {
  value: AssetPropertyVariant;
  timestamp: AssetPropertyTimestamp;
  quality?: string | null;
}
function fromAssetPropertyValue(input?: AssetPropertyValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: fromAssetPropertyVariant(input["value"]),
    timestamp: fromAssetPropertyTimestamp(input["timestamp"]),
    quality: input["quality"],
  }
}
function toAssetPropertyValue(root: jsonP.JSONValue): AssetPropertyValue {
  return jsonP.readObj({
    required: {
      "value": toAssetPropertyVariant,
      "timestamp": toAssetPropertyTimestamp,
    },
    optional: {
      "quality": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface AssetPropertyVariant {
  stringValue?: string | null;
  integerValue?: string | null;
  doubleValue?: string | null;
  booleanValue?: string | null;
}
function fromAssetPropertyVariant(input?: AssetPropertyVariant | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    stringValue: input["stringValue"],
    integerValue: input["integerValue"],
    doubleValue: input["doubleValue"],
    booleanValue: input["booleanValue"],
  }
}
function toAssetPropertyVariant(root: jsonP.JSONValue): AssetPropertyVariant {
  return jsonP.readObj({
    required: {},
    optional: {
      "stringValue": "s",
      "integerValue": "s",
      "doubleValue": "s",
      "booleanValue": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface AssetPropertyTimestamp {
  timeInSeconds: string;
  offsetInNanos?: string | null;
}
function fromAssetPropertyTimestamp(input?: AssetPropertyTimestamp | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    timeInSeconds: input["timeInSeconds"],
    offsetInNanos: input["offsetInNanos"],
  }
}
function toAssetPropertyTimestamp(root: jsonP.JSONValue): AssetPropertyTimestamp {
  return jsonP.readObj({
    required: {
      "timeInSeconds": "s",
    },
    optional: {
      "offsetInNanos": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface StepFunctionsAction {
  executionNamePrefix?: string | null;
  stateMachineName: string;
  roleArn: string;
}
function fromStepFunctionsAction(input?: StepFunctionsAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    executionNamePrefix: input["executionNamePrefix"],
    stateMachineName: input["stateMachineName"],
    roleArn: input["roleArn"],
  }
}
function toStepFunctionsAction(root: jsonP.JSONValue): StepFunctionsAction {
  return jsonP.readObj({
    required: {
      "stateMachineName": "s",
      "roleArn": "s",
    },
    optional: {
      "executionNamePrefix": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface TimestreamAction {
  roleArn: string;
  databaseName: string;
  tableName: string;
  dimensions: TimestreamDimension[];
  timestamp?: TimestreamTimestamp | null;
}
function fromTimestreamAction(input?: TimestreamAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    databaseName: input["databaseName"],
    tableName: input["tableName"],
    dimensions: input["dimensions"]?.map(x => fromTimestreamDimension(x)),
    timestamp: fromTimestreamTimestamp(input["timestamp"]),
  }
}
function toTimestreamAction(root: jsonP.JSONValue): TimestreamAction {
  return jsonP.readObj({
    required: {
      "roleArn": "s",
      "databaseName": "s",
      "tableName": "s",
      "dimensions": [toTimestreamDimension],
    },
    optional: {
      "timestamp": toTimestreamTimestamp,
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface TimestreamDimension {
  name: string;
  value: string;
}
function fromTimestreamDimension(input?: TimestreamDimension | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    value: input["value"],
  }
}
function toTimestreamDimension(root: jsonP.JSONValue): TimestreamDimension {
  return jsonP.readObj({
    required: {
      "name": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface TimestreamTimestamp {
  value: string;
  unit: string;
}
function fromTimestreamTimestamp(input?: TimestreamTimestamp | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    value: input["value"],
    unit: input["unit"],
  }
}
function toTimestreamTimestamp(root: jsonP.JSONValue): TimestreamTimestamp {
  return jsonP.readObj({
    required: {
      "value": "s",
      "unit": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface HttpAction {
  url: string;
  confirmationUrl?: string | null;
  headers?: HttpActionHeader[] | null;
  auth?: HttpAuthorization | null;
}
function fromHttpAction(input?: HttpAction | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    url: input["url"],
    confirmationUrl: input["confirmationUrl"],
    headers: input["headers"]?.map(x => fromHttpActionHeader(x)),
    auth: fromHttpAuthorization(input["auth"]),
  }
}
function toHttpAction(root: jsonP.JSONValue): HttpAction {
  return jsonP.readObj({
    required: {
      "url": "s",
    },
    optional: {
      "confirmationUrl": "s",
      "headers": [toHttpActionHeader],
      "auth": toHttpAuthorization,
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface HttpActionHeader {
  key: string;
  value: string;
}
function fromHttpActionHeader(input?: HttpActionHeader | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    key: input["key"],
    value: input["value"],
  }
}
function toHttpActionHeader(root: jsonP.JSONValue): HttpActionHeader {
  return jsonP.readObj({
    required: {
      "key": "s",
      "value": "s",
    },
    optional: {},
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface HttpAuthorization {
  sigv4?: SigV4Authorization | null;
}
function fromHttpAuthorization(input?: HttpAuthorization | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    sigv4: fromSigV4Authorization(input["sigv4"]),
  }
}
function toHttpAuthorization(root: jsonP.JSONValue): HttpAuthorization {
  return jsonP.readObj({
    required: {},
    optional: {
      "sigv4": toSigV4Authorization,
    },
  }, root);
}

// refs: 6 - tags: input, named, interface, output
export interface SigV4Authorization {
  signingRegion: string;
  serviceName: string;
  roleArn: string;
}
function fromSigV4Authorization(input?: SigV4Authorization | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    signingRegion: input["signingRegion"],
    serviceName: input["serviceName"],
    roleArn: input["roleArn"],
  }
}
function toSigV4Authorization(root: jsonP.JSONValue): SigV4Authorization {
  return jsonP.readObj({
    required: {
      "signingRegion": "s",
      "serviceName": "s",
      "roleArn": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface TopicRuleDestinationConfiguration {
  httpUrlConfiguration?: HttpUrlDestinationConfiguration | null;
}
function fromTopicRuleDestinationConfiguration(input?: TopicRuleDestinationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    httpUrlConfiguration: fromHttpUrlDestinationConfiguration(input["httpUrlConfiguration"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface HttpUrlDestinationConfiguration {
  confirmationUrl: string;
}
function fromHttpUrlDestinationConfiguration(input?: HttpUrlDestinationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    confirmationUrl: input["confirmationUrl"],
  }
}

// refs: 4 - tags: input, named, enum, output
export type LogTargetType =
| "DEFAULT"
| "THING_GROUP"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type AuditMitigationActionsExecutionStatus =
| "IN_PROGRESS"
| "COMPLETED"
| "FAILED"
| "CANCELED"
| "SKIPPED"
| "PENDING"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type AuditMitigationActionsTaskStatus =
| "IN_PROGRESS"
| "COMPLETED"
| "FAILED"
| "CANCELED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type AuditTaskType =
| "ON_DEMAND_AUDIT_TASK"
| "SCHEDULED_AUDIT_TASK"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type AuditTaskStatus =
| "IN_PROGRESS"
| "COMPLETED"
| "FAILED"
| "CANCELED"
| cmnP.UnexpectedEnumValue;

// refs: 5 - tags: input, named, enum, output
export type JobExecutionStatus =
| "QUEUED"
| "IN_PROGRESS"
| "SUCCEEDED"
| "FAILED"
| "TIMED_OUT"
| "REJECTED"
| "REMOVED"
| "CANCELED"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type JobStatus =
| "IN_PROGRESS"
| "CANCELED"
| "COMPLETED"
| "DELETION_IN_PROGRESS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type MitigationActionType =
| "UPDATE_DEVICE_CERTIFICATE"
| "UPDATE_CA_CERTIFICATE"
| "ADD_THINGS_TO_THING_GROUP"
| "REPLACE_DEFAULT_POLICY_VERSION"
| "ENABLE_IOT_LOGGING"
| "PUBLISH_FINDING_TO_SNS"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type OTAUpdateStatus =
| "CREATE_PENDING"
| "CREATE_IN_PROGRESS"
| "CREATE_COMPLETE"
| "CREATE_FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ReportType =
| "ERRORS"
| "RESULTS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type Status =
| "InProgress"
| "Completed"
| "Failed"
| "Cancelled"
| "Cancelling"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface RegistrationConfig {
  templateBody?: string | null;
  roleArn?: string | null;
}
function fromRegistrationConfig(input?: RegistrationConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    templateBody: input["templateBody"],
    roleArn: input["roleArn"],
  }
}
function toRegistrationConfig(root: jsonP.JSONValue): RegistrationConfig {
  return jsonP.readObj({
    required: {},
    optional: {
      "templateBody": "s",
      "roleArn": "s",
    },
  }, root);
}

// refs: 6 - tags: input, named, enum, output
export type CertificateStatus =
| "ACTIVE"
| "INACTIVE"
| "REVOKED"
| "PENDING_TRANSFER"
| "REGISTER_INACTIVE"
| "PENDING_ACTIVATION"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface LoggingOptionsPayload {
  roleArn: string;
  logLevel?: LogLevel | null;
}
function fromLoggingOptionsPayload(input?: LoggingOptionsPayload | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    roleArn: input["roleArn"],
    logLevel: input["logLevel"],
  }
}

// refs: 2 - tags: input, named, interface, output
export interface LogTarget {
  targetType: LogTargetType;
  targetName?: string | null;
}
function fromLogTarget(input?: LogTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    targetType: input["targetType"],
    targetName: input["targetName"],
  }
}
function toLogTarget(root: jsonP.JSONValue): LogTarget {
  return jsonP.readObj({
    required: {
      "targetType": (x: jsonP.JSONValue) => cmnP.readEnum<LogTargetType>(x),
    },
    optional: {
      "targetName": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AuditMitigationActionsTaskTarget {
  auditTaskId?: string | null;
  findingIds?: string[] | null;
  auditCheckToReasonCodeFilter?: { [key: string]: string[] | null | undefined } | null;
}
function fromAuditMitigationActionsTaskTarget(input?: AuditMitigationActionsTaskTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    auditTaskId: input["auditTaskId"],
    findingIds: input["findingIds"],
    auditCheckToReasonCodeFilter: input["auditCheckToReasonCodeFilter"],
  }
}
function toAuditMitigationActionsTaskTarget(root: jsonP.JSONValue): AuditMitigationActionsTaskTarget {
  return jsonP.readObj({
    required: {},
    optional: {
      "auditTaskId": "s",
      "findingIds": ["s"],
      "auditCheckToReasonCodeFilter": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(String) : [], x),
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AuthInfo {
  actionType?: ActionType | null;
  resources: string[];
}
function fromAuthInfo(input?: AuthInfo | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    actionType: input["actionType"],
    resources: input["resources"],
  }
}
function toAuthInfo(root: jsonP.JSONValue): AuthInfo {
  return jsonP.readObj({
    required: {
      "resources": ["s"],
    },
    optional: {
      "actionType": (x: jsonP.JSONValue) => cmnP.readEnum<ActionType>(x),
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ActionType =
| "PUBLISH"
| "SUBSCRIBE"
| "RECEIVE"
| "CONNECT"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: input, named, interface
export interface HttpContext {
  headers?: { [key: string]: string | null | undefined } | null;
  queryString?: string | null;
}
function fromHttpContext(input?: HttpContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    headers: input["headers"],
    queryString: input["queryString"],
  }
}

// refs: 1 - tags: input, named, interface
export interface MqttContext {
  username?: string | null;
  password?: Uint8Array | string | null;
  clientId?: string | null;
}
function fromMqttContext(input?: MqttContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    username: input["username"],
    password: jsonP.serializeBlob(input["password"]),
    clientId: input["clientId"],
  }
}

// refs: 1 - tags: input, named, interface
export interface TlsContext {
  serverName?: string | null;
}
function fromTlsContext(input?: TlsContext | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    serverName: input["serverName"],
  }
}

// refs: 2 - tags: input, named, enum, output
export type AuditNotificationType =
| "SNS"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface AuditNotificationTarget {
  targetArn?: string | null;
  roleArn?: string | null;
  enabled?: boolean | null;
}
function fromAuditNotificationTarget(input?: AuditNotificationTarget | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    targetArn: input["targetArn"],
    roleArn: input["roleArn"],
    enabled: input["enabled"],
  }
}
function toAuditNotificationTarget(root: jsonP.JSONValue): AuditNotificationTarget {
  return jsonP.readObj({
    required: {},
    optional: {
      "targetArn": "s",
      "roleArn": "s",
      "enabled": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface AuditCheckConfiguration {
  enabled?: boolean | null;
}
function fromAuditCheckConfiguration(input?: AuditCheckConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    enabled: input["enabled"],
  }
}
function toAuditCheckConfiguration(root: jsonP.JSONValue): AuditCheckConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "enabled": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type CACertificateStatus =
| "ACTIVE"
| "INACTIVE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type AutoRegistrationStatus =
| "ENABLE"
| "DISABLE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type DomainConfigurationStatus =
| "ENABLED"
| "DISABLED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type EventType =
| "THING"
| "THING_GROUP"
| "THING_TYPE"
| "THING_GROUP_MEMBERSHIP"
| "THING_GROUP_HIERARCHY"
| "THING_TYPE_ASSOCIATION"
| "JOB"
| "JOB_EXECUTION"
| "POLICY"
| "CERTIFICATE"
| "CA_CERTIFICATE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface Configuration {
  Enabled?: boolean | null;
}
function fromConfiguration(input?: Configuration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
  }
}
function toConfiguration(root: jsonP.JSONValue): Configuration {
  return jsonP.readObj({
    required: {},
    optional: {
      "Enabled": "b",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface, output
export interface ThingIndexingConfiguration {
  thingIndexingMode: ThingIndexingMode;
  thingConnectivityIndexingMode?: ThingConnectivityIndexingMode | null;
  managedFields?: Field[] | null;
  customFields?: Field[] | null;
}
function fromThingIndexingConfiguration(input?: ThingIndexingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    thingIndexingMode: input["thingIndexingMode"],
    thingConnectivityIndexingMode: input["thingConnectivityIndexingMode"],
    managedFields: input["managedFields"]?.map(x => fromField(x)),
    customFields: input["customFields"]?.map(x => fromField(x)),
  }
}
function toThingIndexingConfiguration(root: jsonP.JSONValue): ThingIndexingConfiguration {
  return jsonP.readObj({
    required: {
      "thingIndexingMode": (x: jsonP.JSONValue) => cmnP.readEnum<ThingIndexingMode>(x),
    },
    optional: {
      "thingConnectivityIndexingMode": (x: jsonP.JSONValue) => cmnP.readEnum<ThingConnectivityIndexingMode>(x),
      "managedFields": [toField],
      "customFields": [toField],
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ThingIndexingMode =
| "OFF"
| "REGISTRY"
| "REGISTRY_AND_SHADOW"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, enum, output
export type ThingConnectivityIndexingMode =
| "OFF"
| "STATUS"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface Field {
  name?: string | null;
  type?: FieldType | null;
}
function fromField(input?: Field | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    name: input["name"],
    type: input["type"],
  }
}
function toField(root: jsonP.JSONValue): Field {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "type": (x: jsonP.JSONValue) => cmnP.readEnum<FieldType>(x),
    },
  }, root);
}

// refs: 8 - tags: input, named, enum, output
export type FieldType =
| "Number"
| "String"
| "Boolean"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: input, named, interface, output
export interface ThingGroupIndexingConfiguration {
  thingGroupIndexingMode: ThingGroupIndexingMode;
  managedFields?: Field[] | null;
  customFields?: Field[] | null;
}
function fromThingGroupIndexingConfiguration(input?: ThingGroupIndexingConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    thingGroupIndexingMode: input["thingGroupIndexingMode"],
    managedFields: input["managedFields"]?.map(x => fromField(x)),
    customFields: input["customFields"]?.map(x => fromField(x)),
  }
}
function toThingGroupIndexingConfiguration(root: jsonP.JSONValue): ThingGroupIndexingConfiguration {
  return jsonP.readObj({
    required: {
      "thingGroupIndexingMode": (x: jsonP.JSONValue) => cmnP.readEnum<ThingGroupIndexingMode>(x),
    },
    optional: {
      "managedFields": [toField],
      "customFields": [toField],
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ThingGroupIndexingMode =
| "OFF"
| "ON"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, enum, output
export type TopicRuleDestinationStatus =
| "ENABLED"
| "IN_PROGRESS"
| "DISABLED"
| "ERROR"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface KeyPair {
  PublicKey?: string | null;
  PrivateKey?: string | null;
}
function toKeyPair(root: jsonP.JSONValue): KeyPair {
  return jsonP.readObj({
    required: {},
    optional: {
      "PublicKey": "s",
      "PrivateKey": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface TopicRuleDestination {
  arn?: string | null;
  status?: TopicRuleDestinationStatus | null;
  statusReason?: string | null;
  httpUrlProperties?: HttpUrlDestinationProperties | null;
}
function toTopicRuleDestination(root: jsonP.JSONValue): TopicRuleDestination {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<TopicRuleDestinationStatus>(x),
      "statusReason": "s",
      "httpUrlProperties": toHttpUrlDestinationProperties,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface HttpUrlDestinationProperties {
  confirmationUrl?: string | null;
}
function toHttpUrlDestinationProperties(root: jsonP.JSONValue): HttpUrlDestinationProperties {
  return jsonP.readObj({
    required: {},
    optional: {
      "confirmationUrl": "s",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface AuditFinding {
  findingId?: string | null;
  taskId?: string | null;
  checkName?: string | null;
  taskStartTime?: Date | number | null;
  findingTime?: Date | number | null;
  severity?: AuditFindingSeverity | null;
  nonCompliantResource?: NonCompliantResource | null;
  relatedResources?: RelatedResource[] | null;
  reasonForNonCompliance?: string | null;
  reasonForNonComplianceCode?: string | null;
  isSuppressed?: boolean | null;
}
function toAuditFinding(root: jsonP.JSONValue): AuditFinding {
  return jsonP.readObj({
    required: {},
    optional: {
      "findingId": "s",
      "taskId": "s",
      "checkName": "s",
      "taskStartTime": "d",
      "findingTime": "d",
      "severity": (x: jsonP.JSONValue) => cmnP.readEnum<AuditFindingSeverity>(x),
      "nonCompliantResource": toNonCompliantResource,
      "relatedResources": [toRelatedResource],
      "reasonForNonCompliance": "s",
      "reasonForNonComplianceCode": "s",
      "isSuppressed": "b",
    },
  }, root);
}

// refs: 2 - tags: output, named, enum
export type AuditFindingSeverity =
| "CRITICAL"
| "HIGH"
| "MEDIUM"
| "LOW"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface NonCompliantResource {
  resourceType?: ResourceType | null;
  resourceIdentifier?: ResourceIdentifier | null;
  additionalInfo?: { [key: string]: string | null | undefined } | null;
}
function toNonCompliantResource(root: jsonP.JSONValue): NonCompliantResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "resourceIdentifier": toResourceIdentifier,
      "additionalInfo": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type ResourceType =
| "DEVICE_CERTIFICATE"
| "CA_CERTIFICATE"
| "IOT_POLICY"
| "COGNITO_IDENTITY_POOL"
| "CLIENT_ID"
| "ACCOUNT_SETTINGS"
| "ROLE_ALIAS"
| "IAM_ROLE"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface RelatedResource {
  resourceType?: ResourceType | null;
  resourceIdentifier?: ResourceIdentifier | null;
  additionalInfo?: { [key: string]: string | null | undefined } | null;
}
function toRelatedResource(root: jsonP.JSONValue): RelatedResource {
  return jsonP.readObj({
    required: {},
    optional: {
      "resourceType": (x: jsonP.JSONValue) => cmnP.readEnum<ResourceType>(x),
      "resourceIdentifier": toResourceIdentifier,
      "additionalInfo": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskStatisticsForAuditCheck {
  totalFindingsCount?: number | null;
  failedFindingsCount?: number | null;
  succeededFindingsCount?: number | null;
  skippedFindingsCount?: number | null;
  canceledFindingsCount?: number | null;
}
function toTaskStatisticsForAuditCheck(root: jsonP.JSONValue): TaskStatisticsForAuditCheck {
  return jsonP.readObj({
    required: {},
    optional: {
      "totalFindingsCount": "n",
      "failedFindingsCount": "n",
      "succeededFindingsCount": "n",
      "skippedFindingsCount": "n",
      "canceledFindingsCount": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MitigationAction {
  name?: string | null;
  id?: string | null;
  roleArn?: string | null;
  actionParams?: MitigationActionParams | null;
}
function toMitigationAction(root: jsonP.JSONValue): MitigationAction {
  return jsonP.readObj({
    required: {},
    optional: {
      "name": "s",
      "id": "s",
      "roleArn": "s",
      "actionParams": toMitigationActionParams,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TaskStatistics {
  totalChecks?: number | null;
  inProgressChecks?: number | null;
  waitingForDataCollectionChecks?: number | null;
  compliantChecks?: number | null;
  nonCompliantChecks?: number | null;
  failedChecks?: number | null;
  canceledChecks?: number | null;
}
function toTaskStatistics(root: jsonP.JSONValue): TaskStatistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "totalChecks": "n",
      "inProgressChecks": "n",
      "waitingForDataCollectionChecks": "n",
      "compliantChecks": "n",
      "nonCompliantChecks": "n",
      "failedChecks": "n",
      "canceledChecks": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuditCheckDetails {
  checkRunStatus?: AuditCheckRunStatus | null;
  checkCompliant?: boolean | null;
  totalResourcesCount?: number | null;
  nonCompliantResourcesCount?: number | null;
  suppressedNonCompliantResourcesCount?: number | null;
  errorCode?: string | null;
  message?: string | null;
}
function toAuditCheckDetails(root: jsonP.JSONValue): AuditCheckDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "checkRunStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AuditCheckRunStatus>(x),
      "checkCompliant": "b",
      "totalResourcesCount": "n",
      "nonCompliantResourcesCount": "n",
      "suppressedNonCompliantResourcesCount": "n",
      "errorCode": "s",
      "message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AuditCheckRunStatus =
| "IN_PROGRESS"
| "WAITING_FOR_DATA_COLLECTION"
| "CANCELED"
| "COMPLETED_COMPLIANT"
| "COMPLETED_NON_COMPLIANT"
| "FAILED"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface AuthorizerDescription {
  authorizerName?: string | null;
  authorizerArn?: string | null;
  authorizerFunctionArn?: string | null;
  tokenKeyName?: string | null;
  tokenSigningPublicKeys?: { [key: string]: string | null | undefined } | null;
  status?: AuthorizerStatus | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  signingDisabled?: boolean | null;
}
function toAuthorizerDescription(root: jsonP.JSONValue): AuthorizerDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "authorizerName": "s",
      "authorizerArn": "s",
      "authorizerFunctionArn": "s",
      "tokenKeyName": "s",
      "tokenSigningPublicKeys": x => jsonP.readMap(String, String, x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AuthorizerStatus>(x),
      "creationDate": "d",
      "lastModifiedDate": "d",
      "signingDisabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface BillingGroupMetadata {
  creationDate?: Date | number | null;
}
function toBillingGroupMetadata(root: jsonP.JSONValue): BillingGroupMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "creationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CACertificateDescription {
  certificateArn?: string | null;
  certificateId?: string | null;
  status?: CACertificateStatus | null;
  certificatePem?: string | null;
  ownedBy?: string | null;
  creationDate?: Date | number | null;
  autoRegistrationStatus?: AutoRegistrationStatus | null;
  lastModifiedDate?: Date | number | null;
  customerVersion?: number | null;
  generationId?: string | null;
  validity?: CertificateValidity | null;
}
function toCACertificateDescription(root: jsonP.JSONValue): CACertificateDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateArn": "s",
      "certificateId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<CACertificateStatus>(x),
      "certificatePem": "s",
      "ownedBy": "s",
      "creationDate": "d",
      "autoRegistrationStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AutoRegistrationStatus>(x),
      "lastModifiedDate": "d",
      "customerVersion": "n",
      "generationId": "s",
      "validity": toCertificateValidity,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface CertificateValidity {
  notBefore?: Date | number | null;
  notAfter?: Date | number | null;
}
function toCertificateValidity(root: jsonP.JSONValue): CertificateValidity {
  return jsonP.readObj({
    required: {},
    optional: {
      "notBefore": "d",
      "notAfter": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CertificateDescription {
  certificateArn?: string | null;
  certificateId?: string | null;
  caCertificateId?: string | null;
  status?: CertificateStatus | null;
  certificatePem?: string | null;
  ownedBy?: string | null;
  previousOwnedBy?: string | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  customerVersion?: number | null;
  transferData?: TransferData | null;
  generationId?: string | null;
  validity?: CertificateValidity | null;
  certificateMode?: CertificateMode | null;
}
function toCertificateDescription(root: jsonP.JSONValue): CertificateDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateArn": "s",
      "certificateId": "s",
      "caCertificateId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<CertificateStatus>(x),
      "certificatePem": "s",
      "ownedBy": "s",
      "previousOwnedBy": "s",
      "creationDate": "d",
      "lastModifiedDate": "d",
      "customerVersion": "n",
      "transferData": toTransferData,
      "generationId": "s",
      "validity": toCertificateValidity,
      "certificateMode": (x: jsonP.JSONValue) => cmnP.readEnum<CertificateMode>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TransferData {
  transferMessage?: string | null;
  rejectReason?: string | null;
  transferDate?: Date | number | null;
  acceptDate?: Date | number | null;
  rejectDate?: Date | number | null;
}
function toTransferData(root: jsonP.JSONValue): TransferData {
  return jsonP.readObj({
    required: {},
    optional: {
      "transferMessage": "s",
      "rejectReason": "s",
      "transferDate": "d",
      "acceptDate": "d",
      "rejectDate": "d",
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type CertificateMode =
| "DEFAULT"
| "SNI_ONLY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ServerCertificateSummary {
  serverCertificateArn?: string | null;
  serverCertificateStatus?: ServerCertificateStatus | null;
  serverCertificateStatusDetail?: string | null;
}
function toServerCertificateSummary(root: jsonP.JSONValue): ServerCertificateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "serverCertificateArn": "s",
      "serverCertificateStatus": (x: jsonP.JSONValue) => cmnP.readEnum<ServerCertificateStatus>(x),
      "serverCertificateStatusDetail": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ServerCertificateStatus =
| "INVALID"
| "VALID"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type DomainType =
| "ENDPOINT"
| "AWS_MANAGED"
| "CUSTOMER_MANAGED"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, enum
export type IndexStatus =
| "ACTIVE"
| "BUILDING"
| "REBUILDING"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface Job {
  jobArn?: string | null;
  jobId?: string | null;
  targetSelection?: TargetSelection | null;
  status?: JobStatus | null;
  forceCanceled?: boolean | null;
  reasonCode?: string | null;
  comment?: string | null;
  targets?: string[] | null;
  description?: string | null;
  presignedUrlConfig?: PresignedUrlConfig | null;
  jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig | null;
  abortConfig?: AbortConfig | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  completedAt?: Date | number | null;
  jobProcessDetails?: JobProcessDetails | null;
  timeoutConfig?: TimeoutConfig | null;
  namespaceId?: string | null;
}
function toJob(root: jsonP.JSONValue): Job {
  return jsonP.readObj({
    required: {},
    optional: {
      "jobArn": "s",
      "jobId": "s",
      "targetSelection": (x: jsonP.JSONValue) => cmnP.readEnum<TargetSelection>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "forceCanceled": "b",
      "reasonCode": "s",
      "comment": "s",
      "targets": ["s"],
      "description": "s",
      "presignedUrlConfig": toPresignedUrlConfig,
      "jobExecutionsRolloutConfig": toJobExecutionsRolloutConfig,
      "abortConfig": toAbortConfig,
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "completedAt": "d",
      "jobProcessDetails": toJobProcessDetails,
      "timeoutConfig": toTimeoutConfig,
      "namespaceId": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobProcessDetails {
  processingTargets?: string[] | null;
  numberOfCanceledThings?: number | null;
  numberOfSucceededThings?: number | null;
  numberOfFailedThings?: number | null;
  numberOfRejectedThings?: number | null;
  numberOfQueuedThings?: number | null;
  numberOfInProgressThings?: number | null;
  numberOfRemovedThings?: number | null;
  numberOfTimedOutThings?: number | null;
}
function toJobProcessDetails(root: jsonP.JSONValue): JobProcessDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "processingTargets": ["s"],
      "numberOfCanceledThings": "n",
      "numberOfSucceededThings": "n",
      "numberOfFailedThings": "n",
      "numberOfRejectedThings": "n",
      "numberOfQueuedThings": "n",
      "numberOfInProgressThings": "n",
      "numberOfRemovedThings": "n",
      "numberOfTimedOutThings": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobExecution {
  jobId?: string | null;
  status?: JobExecutionStatus | null;
  forceCanceled?: boolean | null;
  statusDetails?: JobExecutionStatusDetails | null;
  thingArn?: string | null;
  queuedAt?: Date | number | null;
  startedAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  executionNumber?: number | null;
  versionNumber?: number | null;
  approximateSecondsBeforeTimedOut?: number | null;
}
function toJobExecution(root: jsonP.JSONValue): JobExecution {
  return jsonP.readObj({
    required: {},
    optional: {
      "jobId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobExecutionStatus>(x),
      "forceCanceled": "b",
      "statusDetails": toJobExecutionStatusDetails,
      "thingArn": "s",
      "queuedAt": "d",
      "startedAt": "d",
      "lastUpdatedAt": "d",
      "executionNumber": "n",
      "versionNumber": "n",
      "approximateSecondsBeforeTimedOut": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobExecutionStatusDetails {
  detailsMap?: { [key: string]: string | null | undefined } | null;
}
function toJobExecutionStatusDetails(root: jsonP.JSONValue): JobExecutionStatusDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "detailsMap": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RoleAliasDescription {
  roleAlias?: string | null;
  roleAliasArn?: string | null;
  roleArn?: string | null;
  owner?: string | null;
  credentialDurationSeconds?: number | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
}
function toRoleAliasDescription(root: jsonP.JSONValue): RoleAliasDescription {
  return jsonP.readObj({
    required: {},
    optional: {
      "roleAlias": "s",
      "roleAliasArn": "s",
      "roleArn": "s",
      "owner": "s",
      "credentialDurationSeconds": "n",
      "creationDate": "d",
      "lastModifiedDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StreamInfo {
  streamId?: string | null;
  streamArn?: string | null;
  streamVersion?: number | null;
  description?: string | null;
  files?: StreamFile[] | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  roleArn?: string | null;
}
function toStreamInfo(root: jsonP.JSONValue): StreamInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "streamId": "s",
      "streamArn": "s",
      "streamVersion": "n",
      "description": "s",
      "files": [toStreamFile],
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "roleArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThingGroupMetadata {
  parentGroupName?: string | null;
  rootToParentThingGroups?: GroupNameAndArn[] | null;
  creationDate?: Date | number | null;
}
function toThingGroupMetadata(root: jsonP.JSONValue): ThingGroupMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "parentGroupName": "s",
      "rootToParentThingGroups": [toGroupNameAndArn],
      "creationDate": "d",
    },
  }, root);
}

// refs: 4 - tags: output, named, interface
export interface GroupNameAndArn {
  groupName?: string | null;
  groupArn?: string | null;
}
function toGroupNameAndArn(root: jsonP.JSONValue): GroupNameAndArn {
  return jsonP.readObj({
    required: {},
    optional: {
      "groupName": "s",
      "groupArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DynamicGroupStatus =
| "ACTIVE"
| "BUILDING"
| "REBUILDING"
| cmnP.UnexpectedEnumValue;

// refs: 2 - tags: output, named, interface
export interface ThingTypeMetadata {
  deprecated?: boolean | null;
  deprecationDate?: Date | number | null;
  creationDate?: Date | number | null;
}
function toThingTypeMetadata(root: jsonP.JSONValue): ThingTypeMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "deprecated": "b",
      "deprecationDate": "d",
      "creationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface EffectivePolicy {
  policyName?: string | null;
  policyArn?: string | null;
  policyDocument?: string | null;
}
function toEffectivePolicy(root: jsonP.JSONValue): EffectivePolicy {
  return jsonP.readObj({
    required: {},
    optional: {
      "policyName": "s",
      "policyArn": "s",
      "policyDocument": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OTAUpdateInfo {
  otaUpdateId?: string | null;
  otaUpdateArn?: string | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  description?: string | null;
  targets?: string[] | null;
  protocols?: Protocol[] | null;
  awsJobExecutionsRolloutConfig?: AwsJobExecutionsRolloutConfig | null;
  awsJobPresignedUrlConfig?: AwsJobPresignedUrlConfig | null;
  targetSelection?: TargetSelection | null;
  otaUpdateFiles?: OTAUpdateFile[] | null;
  otaUpdateStatus?: OTAUpdateStatus | null;
  awsIotJobId?: string | null;
  awsIotJobArn?: string | null;
  errorInfo?: ErrorInfo | null;
  additionalParameters?: { [key: string]: string | null | undefined } | null;
}
function toOTAUpdateInfo(root: jsonP.JSONValue): OTAUpdateInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "otaUpdateId": "s",
      "otaUpdateArn": "s",
      "creationDate": "d",
      "lastModifiedDate": "d",
      "description": "s",
      "targets": ["s"],
      "protocols": [(x: jsonP.JSONValue) => cmnP.readEnum<Protocol>(x)],
      "awsJobExecutionsRolloutConfig": toAwsJobExecutionsRolloutConfig,
      "awsJobPresignedUrlConfig": toAwsJobPresignedUrlConfig,
      "targetSelection": (x: jsonP.JSONValue) => cmnP.readEnum<TargetSelection>(x),
      "otaUpdateFiles": [toOTAUpdateFile],
      "otaUpdateStatus": (x: jsonP.JSONValue) => cmnP.readEnum<OTAUpdateStatus>(x),
      "awsIotJobId": "s",
      "awsIotJobArn": "s",
      "errorInfo": toErrorInfo,
      "additionalParameters": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ErrorInfo {
  code?: string | null;
  message?: string | null;
}
function toErrorInfo(root: jsonP.JSONValue): ErrorInfo {
  return jsonP.readObj({
    required: {},
    optional: {
      "code": "s",
      "message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PercentPair {
  percent?: number | null;
  value?: number | null;
}
function toPercentPair(root: jsonP.JSONValue): PercentPair {
  return jsonP.readObj({
    required: {},
    optional: {
      "percent": "n",
      "value": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Statistics {
  count?: number | null;
  average?: number | null;
  sum?: number | null;
  minimum?: number | null;
  maximum?: number | null;
  sumOfSquares?: number | null;
  variance?: number | null;
  stdDeviation?: number | null;
}
function toStatistics(root: jsonP.JSONValue): Statistics {
  return jsonP.readObj({
    required: {},
    optional: {
      "count": "n",
      "average": "n",
      "sum": "n",
      "minimum": "n",
      "maximum": "n",
      "sumOfSquares": "n",
      "variance": "n",
      "stdDeviation": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TopicRule {
  ruleName?: string | null;
  sql?: string | null;
  description?: string | null;
  createdAt?: Date | number | null;
  actions?: Action[] | null;
  ruleDisabled?: boolean | null;
  awsIotSqlVersion?: string | null;
  errorAction?: Action | null;
}
function toTopicRule(root: jsonP.JSONValue): TopicRule {
  return jsonP.readObj({
    required: {},
    optional: {
      "ruleName": "s",
      "sql": "s",
      "description": "s",
      "createdAt": "d",
      "actions": [toAction],
      "ruleDisabled": "b",
      "awsIotSqlVersion": "s",
      "errorAction": toAction,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ActiveViolation {
  violationId?: string | null;
  thingName?: string | null;
  securityProfileName?: string | null;
  behavior?: Behavior | null;
  lastViolationValue?: MetricValue | null;
  lastViolationTime?: Date | number | null;
  violationStartTime?: Date | number | null;
}
function toActiveViolation(root: jsonP.JSONValue): ActiveViolation {
  return jsonP.readObj({
    required: {},
    optional: {
      "violationId": "s",
      "thingName": "s",
      "securityProfileName": "s",
      "behavior": toBehavior,
      "lastViolationValue": toMetricValue,
      "lastViolationTime": "d",
      "violationStartTime": "d",
    },
  }, root);
}

// refs: 6 - tags: output, named, interface
export interface Policy {
  policyName?: string | null;
  policyArn?: string | null;
}
function toPolicy(root: jsonP.JSONValue): Policy {
  return jsonP.readObj({
    required: {},
    optional: {
      "policyName": "s",
      "policyArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuditMitigationActionExecutionMetadata {
  taskId?: string | null;
  findingId?: string | null;
  actionName?: string | null;
  actionId?: string | null;
  status?: AuditMitigationActionsExecutionStatus | null;
  startTime?: Date | number | null;
  endTime?: Date | number | null;
  errorCode?: string | null;
  message?: string | null;
}
function toAuditMitigationActionExecutionMetadata(root: jsonP.JSONValue): AuditMitigationActionExecutionMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "taskId": "s",
      "findingId": "s",
      "actionName": "s",
      "actionId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<AuditMitigationActionsExecutionStatus>(x),
      "startTime": "d",
      "endTime": "d",
      "errorCode": "s",
      "message": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuditMitigationActionsTaskMetadata {
  taskId?: string | null;
  startTime?: Date | number | null;
  taskStatus?: AuditMitigationActionsTaskStatus | null;
}
function toAuditMitigationActionsTaskMetadata(root: jsonP.JSONValue): AuditMitigationActionsTaskMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "taskId": "s",
      "startTime": "d",
      "taskStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AuditMitigationActionsTaskStatus>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuditSuppression {
  checkName: string;
  resourceIdentifier: ResourceIdentifier;
  expirationDate?: Date | number | null;
  suppressIndefinitely?: boolean | null;
  description?: string | null;
}
function toAuditSuppression(root: jsonP.JSONValue): AuditSuppression {
  return jsonP.readObj({
    required: {
      "checkName": "s",
      "resourceIdentifier": toResourceIdentifier,
    },
    optional: {
      "expirationDate": "d",
      "suppressIndefinitely": "b",
      "description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuditTaskMetadata {
  taskId?: string | null;
  taskStatus?: AuditTaskStatus | null;
  taskType?: AuditTaskType | null;
}
function toAuditTaskMetadata(root: jsonP.JSONValue): AuditTaskMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "taskId": "s",
      "taskStatus": (x: jsonP.JSONValue) => cmnP.readEnum<AuditTaskStatus>(x),
      "taskType": (x: jsonP.JSONValue) => cmnP.readEnum<AuditTaskType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuthorizerSummary {
  authorizerName?: string | null;
  authorizerArn?: string | null;
}
function toAuthorizerSummary(root: jsonP.JSONValue): AuthorizerSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "authorizerName": "s",
      "authorizerArn": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface CACertificate {
  certificateArn?: string | null;
  certificateId?: string | null;
  status?: CACertificateStatus | null;
  creationDate?: Date | number | null;
}
function toCACertificate(root: jsonP.JSONValue): CACertificate {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateArn": "s",
      "certificateId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<CACertificateStatus>(x),
      "creationDate": "d",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface Certificate {
  certificateArn?: string | null;
  certificateId?: string | null;
  status?: CertificateStatus | null;
  certificateMode?: CertificateMode | null;
  creationDate?: Date | number | null;
}
function toCertificate(root: jsonP.JSONValue): Certificate {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateArn": "s",
      "certificateId": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<CertificateStatus>(x),
      "certificateMode": (x: jsonP.JSONValue) => cmnP.readEnum<CertificateMode>(x),
      "creationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DomainConfigurationSummary {
  domainConfigurationName?: string | null;
  domainConfigurationArn?: string | null;
  serviceType?: ServiceType | null;
}
function toDomainConfigurationSummary(root: jsonP.JSONValue): DomainConfigurationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "domainConfigurationName": "s",
      "domainConfigurationArn": "s",
      "serviceType": (x: jsonP.JSONValue) => cmnP.readEnum<ServiceType>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobExecutionSummaryForJob {
  thingArn?: string | null;
  jobExecutionSummary?: JobExecutionSummary | null;
}
function toJobExecutionSummaryForJob(root: jsonP.JSONValue): JobExecutionSummaryForJob {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingArn": "s",
      "jobExecutionSummary": toJobExecutionSummary,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface JobExecutionSummary {
  status?: JobExecutionStatus | null;
  queuedAt?: Date | number | null;
  startedAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  executionNumber?: number | null;
}
function toJobExecutionSummary(root: jsonP.JSONValue): JobExecutionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobExecutionStatus>(x),
      "queuedAt": "d",
      "startedAt": "d",
      "lastUpdatedAt": "d",
      "executionNumber": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobExecutionSummaryForThing {
  jobId?: string | null;
  jobExecutionSummary?: JobExecutionSummary | null;
}
function toJobExecutionSummaryForThing(root: jsonP.JSONValue): JobExecutionSummaryForThing {
  return jsonP.readObj({
    required: {},
    optional: {
      "jobId": "s",
      "jobExecutionSummary": toJobExecutionSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface JobSummary {
  jobArn?: string | null;
  jobId?: string | null;
  thingGroupId?: string | null;
  targetSelection?: TargetSelection | null;
  status?: JobStatus | null;
  createdAt?: Date | number | null;
  lastUpdatedAt?: Date | number | null;
  completedAt?: Date | number | null;
}
function toJobSummary(root: jsonP.JSONValue): JobSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "jobArn": "s",
      "jobId": "s",
      "thingGroupId": "s",
      "targetSelection": (x: jsonP.JSONValue) => cmnP.readEnum<TargetSelection>(x),
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<JobStatus>(x),
      "createdAt": "d",
      "lastUpdatedAt": "d",
      "completedAt": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface MitigationActionIdentifier {
  actionName?: string | null;
  actionArn?: string | null;
  creationDate?: Date | number | null;
}
function toMitigationActionIdentifier(root: jsonP.JSONValue): MitigationActionIdentifier {
  return jsonP.readObj({
    required: {},
    optional: {
      "actionName": "s",
      "actionArn": "s",
      "creationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OTAUpdateSummary {
  otaUpdateId?: string | null;
  otaUpdateArn?: string | null;
  creationDate?: Date | number | null;
}
function toOTAUpdateSummary(root: jsonP.JSONValue): OTAUpdateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "otaUpdateId": "s",
      "otaUpdateArn": "s",
      "creationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface OutgoingCertificate {
  certificateArn?: string | null;
  certificateId?: string | null;
  transferredTo?: string | null;
  transferDate?: Date | number | null;
  transferMessage?: string | null;
  creationDate?: Date | number | null;
}
function toOutgoingCertificate(root: jsonP.JSONValue): OutgoingCertificate {
  return jsonP.readObj({
    required: {},
    optional: {
      "certificateArn": "s",
      "certificateId": "s",
      "transferredTo": "s",
      "transferDate": "d",
      "transferMessage": "s",
      "creationDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PolicyVersion {
  versionId?: string | null;
  isDefaultVersion?: boolean | null;
  createDate?: Date | number | null;
}
function toPolicyVersion(root: jsonP.JSONValue): PolicyVersion {
  return jsonP.readObj({
    required: {},
    optional: {
      "versionId": "s",
      "isDefaultVersion": "b",
      "createDate": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisioningTemplateVersionSummary {
  versionId?: number | null;
  creationDate?: Date | number | null;
  isDefaultVersion?: boolean | null;
}
function toProvisioningTemplateVersionSummary(root: jsonP.JSONValue): ProvisioningTemplateVersionSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "versionId": "n",
      "creationDate": "d",
      "isDefaultVersion": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ProvisioningTemplateSummary {
  templateArn?: string | null;
  templateName?: string | null;
  description?: string | null;
  creationDate?: Date | number | null;
  lastModifiedDate?: Date | number | null;
  enabled?: boolean | null;
}
function toProvisioningTemplateSummary(root: jsonP.JSONValue): ProvisioningTemplateSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "templateArn": "s",
      "templateName": "s",
      "description": "s",
      "creationDate": "d",
      "lastModifiedDate": "d",
      "enabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ScheduledAuditMetadata {
  scheduledAuditName?: string | null;
  scheduledAuditArn?: string | null;
  frequency?: AuditFrequency | null;
  dayOfMonth?: string | null;
  dayOfWeek?: DayOfWeek | null;
}
function toScheduledAuditMetadata(root: jsonP.JSONValue): ScheduledAuditMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "scheduledAuditName": "s",
      "scheduledAuditArn": "s",
      "frequency": (x: jsonP.JSONValue) => cmnP.readEnum<AuditFrequency>(x),
      "dayOfMonth": "s",
      "dayOfWeek": (x: jsonP.JSONValue) => cmnP.readEnum<DayOfWeek>(x),
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SecurityProfileIdentifier {
  name: string;
  arn: string;
}
function toSecurityProfileIdentifier(root: jsonP.JSONValue): SecurityProfileIdentifier {
  return jsonP.readObj({
    required: {
      "name": "s",
      "arn": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SecurityProfileTargetMapping {
  securityProfileIdentifier?: SecurityProfileIdentifier | null;
  target?: SecurityProfileTarget | null;
}
function toSecurityProfileTargetMapping(root: jsonP.JSONValue): SecurityProfileTargetMapping {
  return jsonP.readObj({
    required: {},
    optional: {
      "securityProfileIdentifier": toSecurityProfileIdentifier,
      "target": toSecurityProfileTarget,
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface SecurityProfileTarget {
  arn: string;
}
function toSecurityProfileTarget(root: jsonP.JSONValue): SecurityProfileTarget {
  return jsonP.readObj({
    required: {
      "arn": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface StreamSummary {
  streamId?: string | null;
  streamArn?: string | null;
  streamVersion?: number | null;
  description?: string | null;
}
function toStreamSummary(root: jsonP.JSONValue): StreamSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "streamId": "s",
      "streamArn": "s",
      "streamVersion": "n",
      "description": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThingTypeDefinition {
  thingTypeName?: string | null;
  thingTypeArn?: string | null;
  thingTypeProperties?: ThingTypeProperties | null;
  thingTypeMetadata?: ThingTypeMetadata | null;
}
function toThingTypeDefinition(root: jsonP.JSONValue): ThingTypeDefinition {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingTypeName": "s",
      "thingTypeArn": "s",
      "thingTypeProperties": toThingTypeProperties,
      "thingTypeMetadata": toThingTypeMetadata,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThingAttribute {
  thingName?: string | null;
  thingTypeName?: string | null;
  thingArn?: string | null;
  attributes?: { [key: string]: string | null | undefined } | null;
  version?: number | null;
}
function toThingAttribute(root: jsonP.JSONValue): ThingAttribute {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingName": "s",
      "thingTypeName": "s",
      "thingArn": "s",
      "attributes": x => jsonP.readMap(String, String, x),
      "version": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TopicRuleDestinationSummary {
  arn?: string | null;
  status?: TopicRuleDestinationStatus | null;
  statusReason?: string | null;
  httpUrlSummary?: HttpUrlDestinationSummary | null;
}
function toTopicRuleDestinationSummary(root: jsonP.JSONValue): TopicRuleDestinationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "arn": "s",
      "status": (x: jsonP.JSONValue) => cmnP.readEnum<TopicRuleDestinationStatus>(x),
      "statusReason": "s",
      "httpUrlSummary": toHttpUrlDestinationSummary,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HttpUrlDestinationSummary {
  confirmationUrl?: string | null;
}
function toHttpUrlDestinationSummary(root: jsonP.JSONValue): HttpUrlDestinationSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "confirmationUrl": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface TopicRuleListItem {
  ruleArn?: string | null;
  ruleName?: string | null;
  topicPattern?: string | null;
  createdAt?: Date | number | null;
  ruleDisabled?: boolean | null;
}
function toTopicRuleListItem(root: jsonP.JSONValue): TopicRuleListItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ruleArn": "s",
      "ruleName": "s",
      "topicPattern": "s",
      "createdAt": "d",
      "ruleDisabled": "b",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface LogTargetConfiguration {
  logTarget?: LogTarget | null;
  logLevel?: LogLevel | null;
}
function toLogTargetConfiguration(root: jsonP.JSONValue): LogTargetConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "logTarget": toLogTarget,
      "logLevel": (x: jsonP.JSONValue) => cmnP.readEnum<LogLevel>(x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ViolationEvent {
  violationId?: string | null;
  thingName?: string | null;
  securityProfileName?: string | null;
  behavior?: Behavior | null;
  metricValue?: MetricValue | null;
  violationEventType?: ViolationEventType | null;
  violationEventTime?: Date | number | null;
}
function toViolationEvent(root: jsonP.JSONValue): ViolationEvent {
  return jsonP.readObj({
    required: {},
    optional: {
      "violationId": "s",
      "thingName": "s",
      "securityProfileName": "s",
      "behavior": toBehavior,
      "metricValue": toMetricValue,
      "violationEventType": (x: jsonP.JSONValue) => cmnP.readEnum<ViolationEventType>(x),
      "violationEventTime": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type ViolationEventType =
| "in-alarm"
| "alarm-cleared"
| "alarm-invalidated"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ThingDocument {
  thingName?: string | null;
  thingId?: string | null;
  thingTypeName?: string | null;
  thingGroupNames?: string[] | null;
  attributes?: { [key: string]: string | null | undefined } | null;
  shadow?: string | null;
  connectivity?: ThingConnectivity | null;
}
function toThingDocument(root: jsonP.JSONValue): ThingDocument {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingName": "s",
      "thingId": "s",
      "thingTypeName": "s",
      "thingGroupNames": ["s"],
      "attributes": x => jsonP.readMap(String, String, x),
      "shadow": "s",
      "connectivity": toThingConnectivity,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThingConnectivity {
  connected?: boolean | null;
  timestamp?: number | null;
}
function toThingConnectivity(root: jsonP.JSONValue): ThingConnectivity {
  return jsonP.readObj({
    required: {},
    optional: {
      "connected": "b",
      "timestamp": "n",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ThingGroupDocument {
  thingGroupName?: string | null;
  thingGroupId?: string | null;
  thingGroupDescription?: string | null;
  attributes?: { [key: string]: string | null | undefined } | null;
  parentGroupNames?: string[] | null;
}
function toThingGroupDocument(root: jsonP.JSONValue): ThingGroupDocument {
  return jsonP.readObj({
    required: {},
    optional: {
      "thingGroupName": "s",
      "thingGroupId": "s",
      "thingGroupDescription": "s",
      "attributes": x => jsonP.readMap(String, String, x),
      "parentGroupNames": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface AuthResult {
  authInfo?: AuthInfo | null;
  allowed?: Allowed | null;
  denied?: Denied | null;
  authDecision?: AuthDecision | null;
  missingContextValues?: string[] | null;
}
function toAuthResult(root: jsonP.JSONValue): AuthResult {
  return jsonP.readObj({
    required: {},
    optional: {
      "authInfo": toAuthInfo,
      "allowed": toAllowed,
      "denied": toDenied,
      "authDecision": (x: jsonP.JSONValue) => cmnP.readEnum<AuthDecision>(x),
      "missingContextValues": ["s"],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Allowed {
  policies?: Policy[] | null;
}
function toAllowed(root: jsonP.JSONValue): Allowed {
  return jsonP.readObj({
    required: {},
    optional: {
      "policies": [toPolicy],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Denied {
  implicitDeny?: ImplicitDeny | null;
  explicitDeny?: ExplicitDeny | null;
}
function toDenied(root: jsonP.JSONValue): Denied {
  return jsonP.readObj({
    required: {},
    optional: {
      "implicitDeny": toImplicitDeny,
      "explicitDeny": toExplicitDeny,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ImplicitDeny {
  policies?: Policy[] | null;
}
function toImplicitDeny(root: jsonP.JSONValue): ImplicitDeny {
  return jsonP.readObj({
    required: {},
    optional: {
      "policies": [toPolicy],
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExplicitDeny {
  policies?: Policy[] | null;
}
function toExplicitDeny(root: jsonP.JSONValue): ExplicitDeny {
  return jsonP.readObj({
    required: {},
    optional: {
      "policies": [toPolicy],
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type AuthDecision =
| "ALLOWED"
| "EXPLICIT_DENY"
| "IMPLICIT_DENY"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface ValidationError {
  errorMessage?: string | null;
}
function toValidationError(root: jsonP.JSONValue): ValidationError {
  return jsonP.readObj({
    required: {},
    optional: {
      "errorMessage": "s",
    },
  }, root);
}
