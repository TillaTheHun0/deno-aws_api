// Autogenerated API client for: Amazon Connect Customer Profiles

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class CustomerProfiles {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CustomerProfiles.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2020-08-15",
    "endpointPrefix": "profile",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Customer Profiles",
    "serviceFullName": "Amazon Connect Customer Profiles",
    "serviceId": "Customer Profiles",
    "signatureVersion": "v4",
    "signingName": "profile",
    "uid": "customer-profiles-2020-08-15"
  };

  async addProfileKey(
    {abortSignal, ...params}: RequestConfig & AddProfileKeyRequest,
  ): Promise<AddProfileKeyResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      KeyName: params["KeyName"],
      Values: params["Values"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddProfileKey",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/keys`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "KeyName": "s",
        "Values": ["s"],
      },
    }, await resp.json());
  }

  async createDomain(
    {abortSignal, ...params}: RequestConfig & CreateDomainRequest,
  ): Promise<CreateDomainResponse> {
    const body: jsonP.JSONObject = {
      DefaultExpirationDays: params["DefaultExpirationDays"],
      DefaultEncryptionKey: params["DefaultEncryptionKey"],
      DeadLetterQueueUrl: params["DeadLetterQueueUrl"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomain",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "DefaultExpirationDays": "n",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "DefaultEncryptionKey": "s",
        "DeadLetterQueueUrl": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createProfile(
    {abortSignal, ...params}: RequestConfig & CreateProfileRequest,
  ): Promise<CreateProfileResponse> {
    const body: jsonP.JSONObject = {
      AccountNumber: params["AccountNumber"],
      AdditionalInformation: params["AdditionalInformation"],
      PartyType: params["PartyType"],
      BusinessName: params["BusinessName"],
      FirstName: params["FirstName"],
      MiddleName: params["MiddleName"],
      LastName: params["LastName"],
      BirthDate: params["BirthDate"],
      Gender: params["Gender"],
      PhoneNumber: params["PhoneNumber"],
      MobilePhoneNumber: params["MobilePhoneNumber"],
      HomePhoneNumber: params["HomePhoneNumber"],
      BusinessPhoneNumber: params["BusinessPhoneNumber"],
      EmailAddress: params["EmailAddress"],
      PersonalEmailAddress: params["PersonalEmailAddress"],
      BusinessEmailAddress: params["BusinessEmailAddress"],
      Address: fromAddress(params["Address"]),
      ShippingAddress: fromAddress(params["ShippingAddress"]),
      MailingAddress: fromAddress(params["MailingAddress"]),
      BillingAddress: fromAddress(params["BillingAddress"]),
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProfile",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles`,
    });
    return jsonP.readObj({
      required: {
        "ProfileId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteDomain(
    {abortSignal, ...params}: RequestConfig & DeleteDomainRequest,
  ): Promise<DeleteDomainResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDomain",
      method: "DELETE",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "Message": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteIntegration(
    {abortSignal, ...params}: RequestConfig & DeleteIntegrationRequest,
  ): Promise<DeleteIntegrationResponse> {
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIntegration",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations/delete`,
    });
    return jsonP.readObj({
      required: {
        "Message": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteProfile(
    {abortSignal, ...params}: RequestConfig & DeleteProfileRequest,
  ): Promise<DeleteProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfile",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/delete`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
      },
    }, await resp.json());
  }

  async deleteProfileKey(
    {abortSignal, ...params}: RequestConfig & DeleteProfileKeyRequest,
  ): Promise<DeleteProfileKeyResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      KeyName: params["KeyName"],
      Values: params["Values"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfileKey",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/keys/delete`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
      },
    }, await resp.json());
  }

  async deleteProfileObject(
    {abortSignal, ...params}: RequestConfig & DeleteProfileObjectRequest,
  ): Promise<DeleteProfileObjectResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      ProfileObjectUniqueKey: params["ProfileObjectUniqueKey"],
      ObjectTypeName: params["ObjectTypeName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfileObject",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/objects/delete`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
      },
    }, await resp.json());
  }

  async deleteProfileObjectType(
    {abortSignal, ...params}: RequestConfig & DeleteProfileObjectTypeRequest,
  ): Promise<DeleteProfileObjectTypeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProfileObjectType",
      method: "DELETE",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types/${params["ObjectTypeName"]}`,
    });
    return jsonP.readObj({
      required: {
        "Message": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getDomain(
    {abortSignal, ...params}: RequestConfig & GetDomainRequest,
  ): Promise<GetDomainResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDomain",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "DefaultExpirationDays": "n",
        "DefaultEncryptionKey": "s",
        "DeadLetterQueueUrl": "s",
        "Stats": toDomainStats,
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getIntegration(
    {abortSignal, ...params}: RequestConfig & GetIntegrationRequest,
  ): Promise<GetIntegrationResponse> {
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIntegration",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "Uri": "s",
        "ObjectTypeName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getProfileObjectType(
    {abortSignal, ...params}: RequestConfig & GetProfileObjectTypeRequest,
  ): Promise<GetProfileObjectTypeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetProfileObjectType",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types/${params["ObjectTypeName"]}`,
    });
    return jsonP.readObj({
      required: {
        "ObjectTypeName": "s",
        "Description": "s",
      },
      optional: {
        "TemplateId": "s",
        "ExpirationDays": "n",
        "EncryptionKey": "s",
        "AllowProfileCreation": "b",
        "Fields": x => jsonP.readMap(String, toObjectTypeField, x),
        "Keys": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toObjectTypeKey) : [], x),
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getProfileObjectTypeTemplate(
    {abortSignal, ...params}: RequestConfig & GetProfileObjectTypeTemplateRequest,
  ): Promise<GetProfileObjectTypeTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetProfileObjectTypeTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/templates/${params["TemplateId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TemplateId": "s",
        "SourceName": "s",
        "SourceObject": "s",
        "AllowProfileCreation": "b",
        "Fields": x => jsonP.readMap(String, toObjectTypeField, x),
        "Keys": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toObjectTypeKey) : [], x),
      },
    }, await resp.json());
  }

  async listAccountIntegrations(
    {abortSignal, ...params}: RequestConfig & ListAccountIntegrationsRequest,
  ): Promise<ListAccountIntegrationsResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
    };
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListAccountIntegrations",
      requestUri: "/integrations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListIntegrationItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDomains(
    {abortSignal, ...params}: RequestConfig & ListDomainsRequest = {},
  ): Promise<ListDomainsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDomains",
      method: "GET",
      requestUri: "/domains",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListDomainItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIntegrations(
    {abortSignal, ...params}: RequestConfig & ListIntegrationsRequest,
  ): Promise<ListIntegrationsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIntegrations",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListIntegrationItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProfileObjectTypeTemplates(
    {abortSignal, ...params}: RequestConfig & ListProfileObjectTypeTemplatesRequest = {},
  ): Promise<ListProfileObjectTypeTemplatesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProfileObjectTypeTemplates",
      method: "GET",
      requestUri: "/templates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListProfileObjectTypeTemplateItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProfileObjectTypes(
    {abortSignal, ...params}: RequestConfig & ListProfileObjectTypesRequest,
  ): Promise<ListProfileObjectTypesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProfileObjectTypes",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListProfileObjectTypeItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProfileObjects(
    {abortSignal, ...params}: RequestConfig & ListProfileObjectsRequest,
  ): Promise<ListProfileObjectsResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      ObjectTypeName: params["ObjectTypeName"],
      ProfileId: params["ProfileId"],
    };
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListProfileObjects",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/objects`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListProfileObjectsItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putIntegration(
    {abortSignal, ...params}: RequestConfig & PutIntegrationRequest,
  ): Promise<PutIntegrationResponse> {
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
      ObjectTypeName: params["ObjectTypeName"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutIntegration",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "Uri": "s",
        "ObjectTypeName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putProfileObject(
    {abortSignal, ...params}: RequestConfig & PutProfileObjectRequest,
  ): Promise<PutProfileObjectResponse> {
    const body: jsonP.JSONObject = {
      ObjectTypeName: params["ObjectTypeName"],
      Object: params["Object"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutProfileObject",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/objects`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProfileObjectUniqueKey": "s",
      },
    }, await resp.json());
  }

  async putProfileObjectType(
    {abortSignal, ...params}: RequestConfig & PutProfileObjectTypeRequest,
  ): Promise<PutProfileObjectTypeResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      TemplateId: params["TemplateId"],
      ExpirationDays: params["ExpirationDays"],
      EncryptionKey: params["EncryptionKey"],
      AllowProfileCreation: params["AllowProfileCreation"],
      Fields: jsonP.serializeMap(params["Fields"], x => fromObjectTypeField(x)),
      Keys: jsonP.serializeMap(params["Keys"], x => x?.map(fromObjectTypeKey)),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutProfileObjectType",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types/${params["ObjectTypeName"]}`,
    });
    return jsonP.readObj({
      required: {
        "ObjectTypeName": "s",
        "Description": "s",
      },
      optional: {
        "TemplateId": "s",
        "ExpirationDays": "n",
        "EncryptionKey": "s",
        "AllowProfileCreation": "b",
        "Fields": x => jsonP.readMap(String, toObjectTypeField, x),
        "Keys": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toObjectTypeKey) : [], x),
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async searchProfiles(
    {abortSignal, ...params}: RequestConfig & SearchProfilesRequest,
  ): Promise<SearchProfilesResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      KeyName: params["KeyName"],
      Values: params["Values"],
    };
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "SearchProfiles",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/search`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toProfile],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDomain(
    {abortSignal, ...params}: RequestConfig & UpdateDomainRequest,
  ): Promise<UpdateDomainResponse> {
    const body: jsonP.JSONObject = {
      DefaultExpirationDays: params["DefaultExpirationDays"],
      DefaultEncryptionKey: params["DefaultEncryptionKey"],
      DeadLetterQueueUrl: params["DeadLetterQueueUrl"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomain",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "DefaultExpirationDays": "n",
        "DefaultEncryptionKey": "s",
        "DeadLetterQueueUrl": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async updateProfile(
    {abortSignal, ...params}: RequestConfig & UpdateProfileRequest,
  ): Promise<UpdateProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      AdditionalInformation: params["AdditionalInformation"],
      AccountNumber: params["AccountNumber"],
      PartyType: params["PartyType"],
      BusinessName: params["BusinessName"],
      FirstName: params["FirstName"],
      MiddleName: params["MiddleName"],
      LastName: params["LastName"],
      BirthDate: params["BirthDate"],
      Gender: params["Gender"],
      PhoneNumber: params["PhoneNumber"],
      MobilePhoneNumber: params["MobilePhoneNumber"],
      HomePhoneNumber: params["HomePhoneNumber"],
      BusinessPhoneNumber: params["BusinessPhoneNumber"],
      EmailAddress: params["EmailAddress"],
      PersonalEmailAddress: params["PersonalEmailAddress"],
      BusinessEmailAddress: params["BusinessEmailAddress"],
      Address: fromUpdateAddress(params["Address"]),
      ShippingAddress: fromUpdateAddress(params["ShippingAddress"]),
      MailingAddress: fromUpdateAddress(params["MailingAddress"]),
      BillingAddress: fromUpdateAddress(params["BillingAddress"]),
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProfile",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles`,
    });
    return jsonP.readObj({
      required: {
        "ProfileId": "s",
      },
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface AddProfileKeyRequest {
  ProfileId: string;
  KeyName: string;
  Values: string[];
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface CreateDomainRequest {
  DomainName: string;
  DefaultExpirationDays: number;
  DefaultEncryptionKey?: string | null;
  DeadLetterQueueUrl?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface CreateProfileRequest {
  DomainName: string;
  AccountNumber?: string | null;
  AdditionalInformation?: string | null;
  PartyType?: PartyType | null;
  BusinessName?: string | null;
  FirstName?: string | null;
  MiddleName?: string | null;
  LastName?: string | null;
  BirthDate?: string | null;
  Gender?: Gender | null;
  PhoneNumber?: string | null;
  MobilePhoneNumber?: string | null;
  HomePhoneNumber?: string | null;
  BusinessPhoneNumber?: string | null;
  EmailAddress?: string | null;
  PersonalEmailAddress?: string | null;
  BusinessEmailAddress?: string | null;
  Address?: Address | null;
  ShippingAddress?: Address | null;
  MailingAddress?: Address | null;
  BillingAddress?: Address | null;
  Attributes?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface DeleteDomainRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteIntegrationRequest {
  DomainName: string;
  Uri: string;
}

// refs: 1 - tags: named, input
export interface DeleteProfileRequest {
  ProfileId: string;
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteProfileKeyRequest {
  ProfileId: string;
  KeyName: string;
  Values: string[];
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteProfileObjectRequest {
  ProfileId: string;
  ProfileObjectUniqueKey: string;
  ObjectTypeName: string;
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface DeleteProfileObjectTypeRequest {
  DomainName: string;
  ObjectTypeName: string;
}

// refs: 1 - tags: named, input
export interface GetDomainRequest {
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface GetIntegrationRequest {
  DomainName: string;
  Uri: string;
}

// refs: 1 - tags: named, input
export interface GetProfileObjectTypeRequest {
  DomainName: string;
  ObjectTypeName: string;
}

// refs: 1 - tags: named, input
export interface GetProfileObjectTypeTemplateRequest {
  TemplateId: string;
}

// refs: 1 - tags: named, input
export interface ListAccountIntegrationsRequest {
  Uri: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListDomainsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListIntegrationsRequest {
  DomainName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListProfileObjectTypeTemplatesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListProfileObjectTypesRequest {
  DomainName: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface ListProfileObjectsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  DomainName: string;
  ObjectTypeName: string;
  ProfileId: string;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  resourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutIntegrationRequest {
  DomainName: string;
  Uri: string;
  ObjectTypeName: string;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface PutProfileObjectRequest {
  ObjectTypeName: string;
  Object: string;
  DomainName: string;
}

// refs: 1 - tags: named, input
export interface PutProfileObjectTypeRequest {
  DomainName: string;
  ObjectTypeName: string;
  Description: string;
  TemplateId?: string | null;
  ExpirationDays?: number | null;
  EncryptionKey?: string | null;
  AllowProfileCreation?: boolean | null;
  Fields?: { [key: string]: ObjectTypeField | null | undefined } | null;
  Keys?: { [key: string]: ObjectTypeKey[] | null | undefined } | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface SearchProfilesRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  DomainName: string;
  KeyName: string;
  Values: string[];
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  resourceArn: string;
  tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  resourceArn: string;
  tagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDomainRequest {
  DomainName: string;
  DefaultExpirationDays?: number | null;
  DefaultEncryptionKey?: string | null;
  DeadLetterQueueUrl?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, input
export interface UpdateProfileRequest {
  DomainName: string;
  ProfileId: string;
  AdditionalInformation?: string | null;
  AccountNumber?: string | null;
  PartyType?: PartyType | null;
  BusinessName?: string | null;
  FirstName?: string | null;
  MiddleName?: string | null;
  LastName?: string | null;
  BirthDate?: string | null;
  Gender?: Gender | null;
  PhoneNumber?: string | null;
  MobilePhoneNumber?: string | null;
  HomePhoneNumber?: string | null;
  BusinessPhoneNumber?: string | null;
  EmailAddress?: string | null;
  PersonalEmailAddress?: string | null;
  BusinessEmailAddress?: string | null;
  Address?: UpdateAddress | null;
  ShippingAddress?: UpdateAddress | null;
  MailingAddress?: UpdateAddress | null;
  BillingAddress?: UpdateAddress | null;
  Attributes?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface AddProfileKeyResponse {
  KeyName?: string | null;
  Values?: string[] | null;
}

// refs: 1 - tags: named, output
export interface CreateDomainResponse {
  DomainName: string;
  DefaultExpirationDays: number;
  DefaultEncryptionKey?: string | null;
  DeadLetterQueueUrl?: string | null;
  CreatedAt: Date | number;
  LastUpdatedAt: Date | number;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface CreateProfileResponse {
  ProfileId: string;
}

// refs: 1 - tags: named, output
export interface DeleteDomainResponse {
  Message: string;
}

// refs: 1 - tags: named, output
export interface DeleteIntegrationResponse {
  Message: string;
}

// refs: 1 - tags: named, output
export interface DeleteProfileResponse {
  Message?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteProfileKeyResponse {
  Message?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteProfileObjectResponse {
  Message?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteProfileObjectTypeResponse {
  Message: string;
}

// refs: 1 - tags: named, output
export interface GetDomainResponse {
  DomainName: string;
  DefaultExpirationDays?: number | null;
  DefaultEncryptionKey?: string | null;
  DeadLetterQueueUrl?: string | null;
  Stats?: DomainStats | null;
  CreatedAt: Date | number;
  LastUpdatedAt: Date | number;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetIntegrationResponse {
  DomainName: string;
  Uri: string;
  ObjectTypeName: string;
  CreatedAt: Date | number;
  LastUpdatedAt: Date | number;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetProfileObjectTypeResponse {
  ObjectTypeName: string;
  Description: string;
  TemplateId?: string | null;
  ExpirationDays?: number | null;
  EncryptionKey?: string | null;
  AllowProfileCreation?: boolean | null;
  Fields?: { [key: string]: ObjectTypeField | null | undefined } | null;
  Keys?: { [key: string]: ObjectTypeKey[] | null | undefined } | null;
  CreatedAt?: Date | number | null;
  LastUpdatedAt?: Date | number | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface GetProfileObjectTypeTemplateResponse {
  TemplateId?: string | null;
  SourceName?: string | null;
  SourceObject?: string | null;
  AllowProfileCreation?: boolean | null;
  Fields?: { [key: string]: ObjectTypeField | null | undefined } | null;
  Keys?: { [key: string]: ObjectTypeKey[] | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface ListAccountIntegrationsResponse {
  Items?: ListIntegrationItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListDomainsResponse {
  Items?: ListDomainItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListIntegrationsResponse {
  Items?: ListIntegrationItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProfileObjectTypeTemplatesResponse {
  Items?: ListProfileObjectTypeTemplateItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProfileObjectTypesResponse {
  Items?: ListProfileObjectTypeItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListProfileObjectsResponse {
  Items?: ListProfileObjectsItem[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PutIntegrationResponse {
  DomainName: string;
  Uri: string;
  ObjectTypeName: string;
  CreatedAt: Date | number;
  LastUpdatedAt: Date | number;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PutProfileObjectResponse {
  ProfileObjectUniqueKey?: string | null;
}

// refs: 1 - tags: named, output
export interface PutProfileObjectTypeResponse {
  ObjectTypeName: string;
  Description: string;
  TemplateId?: string | null;
  ExpirationDays?: number | null;
  EncryptionKey?: string | null;
  AllowProfileCreation?: boolean | null;
  Fields?: { [key: string]: ObjectTypeField | null | undefined } | null;
  Keys?: { [key: string]: ObjectTypeKey[] | null | undefined } | null;
  CreatedAt?: Date | number | null;
  LastUpdatedAt?: Date | number | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface SearchProfilesResponse {
  Items?: Profile[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UpdateDomainResponse {
  DomainName: string;
  DefaultExpirationDays?: number | null;
  DefaultEncryptionKey?: string | null;
  DeadLetterQueueUrl?: string | null;
  CreatedAt: Date | number;
  LastUpdatedAt: Date | number;
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface UpdateProfileResponse {
  ProfileId: string;
}

// refs: 3 - tags: input, named, enum, output
export type PartyType =
| "INDIVIDUAL"
| "BUSINESS"
| "OTHER"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, enum, output
export type Gender =
| "MALE"
| "FEMALE"
| "UNSPECIFIED"
| cmnP.UnexpectedEnumValue;

// refs: 8 - tags: input, named, interface, output
export interface Address {
  Address1?: string | null;
  Address2?: string | null;
  Address3?: string | null;
  Address4?: string | null;
  City?: string | null;
  County?: string | null;
  State?: string | null;
  Province?: string | null;
  Country?: string | null;
  PostalCode?: string | null;
}
function fromAddress(input?: Address | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address1: input["Address1"],
    Address2: input["Address2"],
    Address3: input["Address3"],
    Address4: input["Address4"],
    City: input["City"],
    County: input["County"],
    State: input["State"],
    Province: input["Province"],
    Country: input["Country"],
    PostalCode: input["PostalCode"],
  }
}
function toAddress(root: jsonP.JSONValue): Address {
  return jsonP.readObj({
    required: {},
    optional: {
      "Address1": "s",
      "Address2": "s",
      "Address3": "s",
      "Address4": "s",
      "City": "s",
      "County": "s",
      "State": "s",
      "Province": "s",
      "Country": "s",
      "PostalCode": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ObjectTypeField {
  Source?: string | null;
  Target?: string | null;
  ContentType?: FieldContentType | null;
}
function fromObjectTypeField(input?: ObjectTypeField | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Source: input["Source"],
    Target: input["Target"],
    ContentType: input["ContentType"],
  }
}
function toObjectTypeField(root: jsonP.JSONValue): ObjectTypeField {
  return jsonP.readObj({
    required: {},
    optional: {
      "Source": "s",
      "Target": "s",
      "ContentType": (x: jsonP.JSONValue) => cmnP.readEnum<FieldContentType>(x),
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type FieldContentType =
| "STRING"
| "NUMBER"
| "PHONE_NUMBER"
| "EMAIL_ADDRESS"
| "NAME"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface ObjectTypeKey {
  StandardIdentifiers?: StandardIdentifier[] | null;
  FieldNames?: string[] | null;
}
function fromObjectTypeKey(input?: ObjectTypeKey | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StandardIdentifiers: input["StandardIdentifiers"],
    FieldNames: input["FieldNames"],
  }
}
function toObjectTypeKey(root: jsonP.JSONValue): ObjectTypeKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "StandardIdentifiers": [(x: jsonP.JSONValue) => cmnP.readEnum<StandardIdentifier>(x)],
      "FieldNames": ["s"],
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type StandardIdentifier =
| "PROFILE"
| "UNIQUE"
| "SECONDARY"
| "LOOKUP_ONLY"
| "NEW_ONLY"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface
export interface UpdateAddress {
  Address1?: string | null;
  Address2?: string | null;
  Address3?: string | null;
  Address4?: string | null;
  City?: string | null;
  County?: string | null;
  State?: string | null;
  Province?: string | null;
  Country?: string | null;
  PostalCode?: string | null;
}
function fromUpdateAddress(input?: UpdateAddress | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address1: input["Address1"],
    Address2: input["Address2"],
    Address3: input["Address3"],
    Address4: input["Address4"],
    City: input["City"],
    County: input["County"],
    State: input["State"],
    Province: input["Province"],
    Country: input["Country"],
    PostalCode: input["PostalCode"],
  }
}

// refs: 1 - tags: output, named, interface
export interface DomainStats {
  ProfileCount?: number | null;
  MeteringProfileCount?: number | null;
  ObjectCount?: number | null;
  TotalSize?: number | null;
}
function toDomainStats(root: jsonP.JSONValue): DomainStats {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProfileCount": "n",
      "MeteringProfileCount": "n",
      "ObjectCount": "n",
      "TotalSize": "n",
    },
  }, root);
}

// refs: 2 - tags: output, named, interface
export interface ListIntegrationItem {
  DomainName: string;
  Uri: string;
  ObjectTypeName: string;
  CreatedAt: Date | number;
  LastUpdatedAt: Date | number;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toListIntegrationItem(root: jsonP.JSONValue): ListIntegrationItem {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
      "Uri": "s",
      "ObjectTypeName": "s",
      "CreatedAt": "d",
      "LastUpdatedAt": "d",
    },
    optional: {
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListDomainItem {
  DomainName: string;
  CreatedAt: Date | number;
  LastUpdatedAt: Date | number;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toListDomainItem(root: jsonP.JSONValue): ListDomainItem {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
      "CreatedAt": "d",
      "LastUpdatedAt": "d",
    },
    optional: {
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListProfileObjectTypeTemplateItem {
  TemplateId?: string | null;
  SourceName?: string | null;
  SourceObject?: string | null;
}
function toListProfileObjectTypeTemplateItem(root: jsonP.JSONValue): ListProfileObjectTypeTemplateItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "TemplateId": "s",
      "SourceName": "s",
      "SourceObject": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListProfileObjectTypeItem {
  ObjectTypeName: string;
  Description: string;
  CreatedAt?: Date | number | null;
  LastUpdatedAt?: Date | number | null;
  Tags?: { [key: string]: string | null | undefined } | null;
}
function toListProfileObjectTypeItem(root: jsonP.JSONValue): ListProfileObjectTypeItem {
  return jsonP.readObj({
    required: {
      "ObjectTypeName": "s",
      "Description": "s",
    },
    optional: {
      "CreatedAt": "d",
      "LastUpdatedAt": "d",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ListProfileObjectsItem {
  ObjectTypeName?: string | null;
  ProfileObjectUniqueKey?: string | null;
  Object?: string | null;
}
function toListProfileObjectsItem(root: jsonP.JSONValue): ListProfileObjectsItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ObjectTypeName": "s",
      "ProfileObjectUniqueKey": "s",
      "Object": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface Profile {
  ProfileId?: string | null;
  AccountNumber?: string | null;
  AdditionalInformation?: string | null;
  PartyType?: PartyType | null;
  BusinessName?: string | null;
  FirstName?: string | null;
  MiddleName?: string | null;
  LastName?: string | null;
  BirthDate?: string | null;
  Gender?: Gender | null;
  PhoneNumber?: string | null;
  MobilePhoneNumber?: string | null;
  HomePhoneNumber?: string | null;
  BusinessPhoneNumber?: string | null;
  EmailAddress?: string | null;
  PersonalEmailAddress?: string | null;
  BusinessEmailAddress?: string | null;
  Address?: Address | null;
  ShippingAddress?: Address | null;
  MailingAddress?: Address | null;
  BillingAddress?: Address | null;
  Attributes?: { [key: string]: string | null | undefined } | null;
}
function toProfile(root: jsonP.JSONValue): Profile {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProfileId": "s",
      "AccountNumber": "s",
      "AdditionalInformation": "s",
      "PartyType": (x: jsonP.JSONValue) => cmnP.readEnum<PartyType>(x),
      "BusinessName": "s",
      "FirstName": "s",
      "MiddleName": "s",
      "LastName": "s",
      "BirthDate": "s",
      "Gender": (x: jsonP.JSONValue) => cmnP.readEnum<Gender>(x),
      "PhoneNumber": "s",
      "MobilePhoneNumber": "s",
      "HomePhoneNumber": "s",
      "BusinessPhoneNumber": "s",
      "EmailAddress": "s",
      "PersonalEmailAddress": "s",
      "BusinessEmailAddress": "s",
      "Address": toAddress,
      "ShippingAddress": toAddress,
      "MailingAddress": toAddress,
      "BillingAddress": toAddress,
      "Attributes": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
