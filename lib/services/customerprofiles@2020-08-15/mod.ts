// Autogenerated API client for: Amazon Connect Customer Profiles

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class CustomerProfiles {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CustomerProfiles.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-08-15",
    "endpointPrefix": "profile",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Customer Profiles",
    "serviceFullName": "Amazon Connect Customer Profiles",
    "serviceId": "Customer Profiles",
    "signatureVersion": "v4",
    "signingName": "profile",
    "uid": "customer-profiles-2020-08-15"
  };

  async addProfileKey(
    {abortSignal, ...params}: RequestConfig & s.AddProfileKeyRequest,
  ): Promise<s.AddProfileKeyResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      KeyName: params["KeyName"],
      Values: params["Values"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AddProfileKey",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/keys`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "KeyName": "s",
        "Values": ["s"],
      },
    }, await resp.json());
  }

  async createDomain(
    {abortSignal, ...params}: RequestConfig & s.CreateDomainRequest,
  ): Promise<s.CreateDomainResponse> {
    const body: jsonP.JSONObject = {
      DefaultExpirationDays: params["DefaultExpirationDays"],
      DefaultEncryptionKey: params["DefaultEncryptionKey"],
      DeadLetterQueueUrl: params["DeadLetterQueueUrl"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDomain",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "DefaultExpirationDays": "n",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "DefaultEncryptionKey": "s",
        "DeadLetterQueueUrl": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async createProfile(
    {abortSignal, ...params}: RequestConfig & s.CreateProfileRequest,
  ): Promise<s.CreateProfileResponse> {
    const body: jsonP.JSONObject = {
      AccountNumber: params["AccountNumber"],
      AdditionalInformation: params["AdditionalInformation"],
      PartyType: params["PartyType"],
      BusinessName: params["BusinessName"],
      FirstName: params["FirstName"],
      MiddleName: params["MiddleName"],
      LastName: params["LastName"],
      BirthDate: params["BirthDate"],
      Gender: params["Gender"],
      PhoneNumber: params["PhoneNumber"],
      MobilePhoneNumber: params["MobilePhoneNumber"],
      HomePhoneNumber: params["HomePhoneNumber"],
      BusinessPhoneNumber: params["BusinessPhoneNumber"],
      EmailAddress: params["EmailAddress"],
      PersonalEmailAddress: params["PersonalEmailAddress"],
      BusinessEmailAddress: params["BusinessEmailAddress"],
      Address: fromAddress(params["Address"]),
      ShippingAddress: fromAddress(params["ShippingAddress"]),
      MailingAddress: fromAddress(params["MailingAddress"]),
      BillingAddress: fromAddress(params["BillingAddress"]),
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateProfile",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles`,
    });
    return jsonP.readObj({
      required: {
        "ProfileId": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteDomain(
    {abortSignal, ...params}: RequestConfig & s.DeleteDomainRequest,
  ): Promise<s.DeleteDomainResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteDomain",
      method: "DELETE",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "Message": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteIntegration(
    {abortSignal, ...params}: RequestConfig & s.DeleteIntegrationRequest,
  ): Promise<s.DeleteIntegrationResponse> {
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteIntegration",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations/delete`,
    });
    return jsonP.readObj({
      required: {
        "Message": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async deleteProfile(
    {abortSignal, ...params}: RequestConfig & s.DeleteProfileRequest,
  ): Promise<s.DeleteProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfile",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/delete`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
      },
    }, await resp.json());
  }

  async deleteProfileKey(
    {abortSignal, ...params}: RequestConfig & s.DeleteProfileKeyRequest,
  ): Promise<s.DeleteProfileKeyResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      KeyName: params["KeyName"],
      Values: params["Values"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfileKey",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/keys/delete`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
      },
    }, await resp.json());
  }

  async deleteProfileObject(
    {abortSignal, ...params}: RequestConfig & s.DeleteProfileObjectRequest,
  ): Promise<s.DeleteProfileObjectResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      ProfileObjectUniqueKey: params["ProfileObjectUniqueKey"],
      ObjectTypeName: params["ObjectTypeName"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteProfileObject",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/objects/delete`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Message": "s",
      },
    }, await resp.json());
  }

  async deleteProfileObjectType(
    {abortSignal, ...params}: RequestConfig & s.DeleteProfileObjectTypeRequest,
  ): Promise<s.DeleteProfileObjectTypeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeleteProfileObjectType",
      method: "DELETE",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types/${params["ObjectTypeName"]}`,
    });
    return jsonP.readObj({
      required: {
        "Message": "s",
      },
      optional: {},
    }, await resp.json());
  }

  async getDomain(
    {abortSignal, ...params}: RequestConfig & s.GetDomainRequest,
  ): Promise<s.GetDomainResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetDomain",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "DefaultExpirationDays": "n",
        "DefaultEncryptionKey": "s",
        "DeadLetterQueueUrl": "s",
        "Stats": toDomainStats,
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getIntegration(
    {abortSignal, ...params}: RequestConfig & s.GetIntegrationRequest,
  ): Promise<s.GetIntegrationResponse> {
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIntegration",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "Uri": "s",
        "ObjectTypeName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getProfileObjectType(
    {abortSignal, ...params}: RequestConfig & s.GetProfileObjectTypeRequest,
  ): Promise<s.GetProfileObjectTypeResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetProfileObjectType",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types/${params["ObjectTypeName"]}`,
    });
    return jsonP.readObj({
      required: {
        "ObjectTypeName": "s",
        "Description": "s",
      },
      optional: {
        "TemplateId": "s",
        "ExpirationDays": "n",
        "EncryptionKey": "s",
        "AllowProfileCreation": "b",
        "Fields": x => jsonP.readMap(String, toObjectTypeField, x),
        "Keys": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toObjectTypeKey) : [], x),
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async getProfileObjectTypeTemplate(
    {abortSignal, ...params}: RequestConfig & s.GetProfileObjectTypeTemplateRequest,
  ): Promise<s.GetProfileObjectTypeTemplateResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetProfileObjectTypeTemplate",
      method: "GET",
      requestUri: cmnP.encodePath`/templates/${params["TemplateId"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TemplateId": "s",
        "SourceName": "s",
        "SourceObject": "s",
        "AllowProfileCreation": "b",
        "Fields": x => jsonP.readMap(String, toObjectTypeField, x),
        "Keys": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toObjectTypeKey) : [], x),
      },
    }, await resp.json());
  }

  async listAccountIntegrations(
    {abortSignal, ...params}: RequestConfig & s.ListAccountIntegrationsRequest,
  ): Promise<s.ListAccountIntegrationsResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
    };
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListAccountIntegrations",
      requestUri: "/integrations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListIntegrationItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDomains(
    {abortSignal, ...params}: RequestConfig & s.ListDomainsRequest = {},
  ): Promise<s.ListDomainsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListDomains",
      method: "GET",
      requestUri: "/domains",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListDomainItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listIntegrations(
    {abortSignal, ...params}: RequestConfig & s.ListIntegrationsRequest,
  ): Promise<s.ListIntegrationsResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListIntegrations",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListIntegrationItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProfileObjectTypeTemplates(
    {abortSignal, ...params}: RequestConfig & s.ListProfileObjectTypeTemplatesRequest = {},
  ): Promise<s.ListProfileObjectTypeTemplatesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProfileObjectTypeTemplates",
      method: "GET",
      requestUri: "/templates",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListProfileObjectTypeTemplateItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProfileObjectTypes(
    {abortSignal, ...params}: RequestConfig & s.ListProfileObjectTypesRequest,
  ): Promise<s.ListProfileObjectTypesResponse> {
    const query = new URLSearchParams;
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListProfileObjectTypes",
      method: "GET",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListProfileObjectTypeItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listProfileObjects(
    {abortSignal, ...params}: RequestConfig & s.ListProfileObjectsRequest,
  ): Promise<s.ListProfileObjectsResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      ObjectTypeName: params["ObjectTypeName"],
      ProfileId: params["ProfileId"],
    };
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "ListProfileObjects",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/objects`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toListProfileObjectsItem],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putIntegration(
    {abortSignal, ...params}: RequestConfig & s.PutIntegrationRequest,
  ): Promise<s.PutIntegrationResponse> {
    const body: jsonP.JSONObject = {
      Uri: params["Uri"],
      ObjectTypeName: params["ObjectTypeName"],
      Tags: params["Tags"],
      FlowDefinition: fromFlowDefinition(params["FlowDefinition"]),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutIntegration",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/integrations`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "Uri": "s",
        "ObjectTypeName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putProfileObject(
    {abortSignal, ...params}: RequestConfig & s.PutProfileObjectRequest,
  ): Promise<s.PutProfileObjectResponse> {
    const body: jsonP.JSONObject = {
      ObjectTypeName: params["ObjectTypeName"],
      Object: params["Object"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutProfileObject",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/objects`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ProfileObjectUniqueKey": "s",
      },
    }, await resp.json());
  }

  async putProfileObjectType(
    {abortSignal, ...params}: RequestConfig & s.PutProfileObjectTypeRequest,
  ): Promise<s.PutProfileObjectTypeResponse> {
    const body: jsonP.JSONObject = {
      Description: params["Description"],
      TemplateId: params["TemplateId"],
      ExpirationDays: params["ExpirationDays"],
      EncryptionKey: params["EncryptionKey"],
      AllowProfileCreation: params["AllowProfileCreation"],
      Fields: jsonP.serializeMap(params["Fields"], x => fromObjectTypeField(x)),
      Keys: jsonP.serializeMap(params["Keys"], x => x?.map(fromObjectTypeKey)),
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutProfileObjectType",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/object-types/${params["ObjectTypeName"]}`,
    });
    return jsonP.readObj({
      required: {
        "ObjectTypeName": "s",
        "Description": "s",
      },
      optional: {
        "TemplateId": "s",
        "ExpirationDays": "n",
        "EncryptionKey": "s",
        "AllowProfileCreation": "b",
        "Fields": x => jsonP.readMap(String, toObjectTypeField, x),
        "Keys": x => jsonP.readMap(String, l => Array.isArray(l) ? l.map(toObjectTypeKey) : [], x),
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async searchProfiles(
    {abortSignal, ...params}: RequestConfig & s.SearchProfilesRequest,
  ): Promise<s.SearchProfilesResponse> {
    const query = new URLSearchParams;
    const body: jsonP.JSONObject = {
      KeyName: params["KeyName"],
      Values: params["Values"],
    };
    if (params["NextToken"] != null) query.set("next-token", params["NextToken"]?.toString() ?? "");
    if (params["MaxResults"] != null) query.set("max-results", params["MaxResults"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query, body,
      action: "SearchProfiles",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles/search`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toProfile],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<s.TagResourceResponse> {
    const body: jsonP.JSONObject = {
      tags: params["tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<s.UntagResourceResponse> {
    const query = new URLSearchParams;
    for (const item of params["tagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["resourceArn"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDomain(
    {abortSignal, ...params}: RequestConfig & s.UpdateDomainRequest,
  ): Promise<s.UpdateDomainResponse> {
    const body: jsonP.JSONObject = {
      DefaultExpirationDays: params["DefaultExpirationDays"],
      DefaultEncryptionKey: params["DefaultEncryptionKey"],
      DeadLetterQueueUrl: params["DeadLetterQueueUrl"],
      Tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDomain",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}`,
    });
    return jsonP.readObj({
      required: {
        "DomainName": "s",
        "CreatedAt": "d",
        "LastUpdatedAt": "d",
      },
      optional: {
        "DefaultExpirationDays": "n",
        "DefaultEncryptionKey": "s",
        "DeadLetterQueueUrl": "s",
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async updateProfile(
    {abortSignal, ...params}: RequestConfig & s.UpdateProfileRequest,
  ): Promise<s.UpdateProfileResponse> {
    const body: jsonP.JSONObject = {
      ProfileId: params["ProfileId"],
      AdditionalInformation: params["AdditionalInformation"],
      AccountNumber: params["AccountNumber"],
      PartyType: params["PartyType"],
      BusinessName: params["BusinessName"],
      FirstName: params["FirstName"],
      MiddleName: params["MiddleName"],
      LastName: params["LastName"],
      BirthDate: params["BirthDate"],
      Gender: params["Gender"],
      PhoneNumber: params["PhoneNumber"],
      MobilePhoneNumber: params["MobilePhoneNumber"],
      HomePhoneNumber: params["HomePhoneNumber"],
      BusinessPhoneNumber: params["BusinessPhoneNumber"],
      EmailAddress: params["EmailAddress"],
      PersonalEmailAddress: params["PersonalEmailAddress"],
      BusinessEmailAddress: params["BusinessEmailAddress"],
      Address: fromUpdateAddress(params["Address"]),
      ShippingAddress: fromUpdateAddress(params["ShippingAddress"]),
      MailingAddress: fromUpdateAddress(params["MailingAddress"]),
      BillingAddress: fromUpdateAddress(params["BillingAddress"]),
      Attributes: params["Attributes"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateProfile",
      method: "PUT",
      requestUri: cmnP.encodePath`/domains/${params["DomainName"]}/profiles`,
    });
    return jsonP.readObj({
      required: {
        "ProfileId": "s",
      },
      optional: {},
    }, await resp.json());
  }

}

function fromAddress(input?: s.Address | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address1: input["Address1"],
    Address2: input["Address2"],
    Address3: input["Address3"],
    Address4: input["Address4"],
    City: input["City"],
    County: input["County"],
    State: input["State"],
    Province: input["Province"],
    Country: input["Country"],
    PostalCode: input["PostalCode"],
  }
}
function toAddress(root: jsonP.JSONValue): s.Address {
  return jsonP.readObj({
    required: {},
    optional: {
      "Address1": "s",
      "Address2": "s",
      "Address3": "s",
      "Address4": "s",
      "City": "s",
      "County": "s",
      "State": "s",
      "Province": "s",
      "Country": "s",
      "PostalCode": "s",
    },
  }, root);
}

function fromFlowDefinition(input?: s.FlowDefinition | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Description: input["Description"],
    FlowName: input["FlowName"],
    KmsArn: input["KmsArn"],
    SourceFlowConfig: fromSourceFlowConfig(input["SourceFlowConfig"]),
    Tasks: input["Tasks"]?.map(x => fromTask(x)),
    TriggerConfig: fromTriggerConfig(input["TriggerConfig"]),
  }
}

function fromSourceFlowConfig(input?: s.SourceFlowConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConnectorProfileName: input["ConnectorProfileName"],
    ConnectorType: input["ConnectorType"],
    IncrementalPullConfig: fromIncrementalPullConfig(input["IncrementalPullConfig"]),
    SourceConnectorProperties: fromSourceConnectorProperties(input["SourceConnectorProperties"]),
  }
}

function fromIncrementalPullConfig(input?: s.IncrementalPullConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    DatetimeTypeFieldName: input["DatetimeTypeFieldName"],
  }
}

function fromSourceConnectorProperties(input?: s.SourceConnectorProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Marketo: fromMarketoSourceProperties(input["Marketo"]),
    S3: fromS3SourceProperties(input["S3"]),
    Salesforce: fromSalesforceSourceProperties(input["Salesforce"]),
    ServiceNow: fromServiceNowSourceProperties(input["ServiceNow"]),
    Zendesk: fromZendeskSourceProperties(input["Zendesk"]),
  }
}

function fromMarketoSourceProperties(input?: s.MarketoSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Object: input["Object"],
  }
}

function fromS3SourceProperties(input?: s.S3SourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    BucketName: input["BucketName"],
    BucketPrefix: input["BucketPrefix"],
  }
}

function fromSalesforceSourceProperties(input?: s.SalesforceSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Object: input["Object"],
    EnableDynamicFieldUpdate: input["EnableDynamicFieldUpdate"],
    IncludeDeletedRecords: input["IncludeDeletedRecords"],
  }
}

function fromServiceNowSourceProperties(input?: s.ServiceNowSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Object: input["Object"],
  }
}

function fromZendeskSourceProperties(input?: s.ZendeskSourceProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Object: input["Object"],
  }
}

function fromTask(input?: s.Task | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ConnectorOperator: fromConnectorOperator(input["ConnectorOperator"]),
    DestinationField: input["DestinationField"],
    SourceFields: input["SourceFields"],
    TaskProperties: input["TaskProperties"],
    TaskType: input["TaskType"],
  }
}

function fromConnectorOperator(input?: s.ConnectorOperator | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Marketo: input["Marketo"],
    S3: input["S3"],
    Salesforce: input["Salesforce"],
    ServiceNow: input["ServiceNow"],
    Zendesk: input["Zendesk"],
  }
}

function fromTriggerConfig(input?: s.TriggerConfig | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TriggerType: input["TriggerType"],
    TriggerProperties: fromTriggerProperties(input["TriggerProperties"]),
  }
}

function fromTriggerProperties(input?: s.TriggerProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Scheduled: fromScheduledTriggerProperties(input["Scheduled"]),
  }
}

function fromScheduledTriggerProperties(input?: s.ScheduledTriggerProperties | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ScheduleExpression: input["ScheduleExpression"],
    DataPullMode: input["DataPullMode"],
    ScheduleStartTime: jsonP.serializeDate_unixTimestamp(input["ScheduleStartTime"]),
    ScheduleEndTime: jsonP.serializeDate_unixTimestamp(input["ScheduleEndTime"]),
    Timezone: input["Timezone"],
    ScheduleOffset: input["ScheduleOffset"],
    FirstExecutionFrom: jsonP.serializeDate_unixTimestamp(input["FirstExecutionFrom"]),
  }
}

function fromObjectTypeField(input?: s.ObjectTypeField | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Source: input["Source"],
    Target: input["Target"],
    ContentType: input["ContentType"],
  }
}
function toObjectTypeField(root: jsonP.JSONValue): s.ObjectTypeField {
  return jsonP.readObj({
    required: {},
    optional: {
      "Source": "s",
      "Target": "s",
      "ContentType": (x: jsonP.JSONValue) => cmnP.readEnum<s.FieldContentType>(x),
    },
  }, root);
}

function fromObjectTypeKey(input?: s.ObjectTypeKey | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    StandardIdentifiers: input["StandardIdentifiers"],
    FieldNames: input["FieldNames"],
  }
}
function toObjectTypeKey(root: jsonP.JSONValue): s.ObjectTypeKey {
  return jsonP.readObj({
    required: {},
    optional: {
      "StandardIdentifiers": [(x: jsonP.JSONValue) => cmnP.readEnum<s.StandardIdentifier>(x)],
      "FieldNames": ["s"],
    },
  }, root);
}

function fromUpdateAddress(input?: s.UpdateAddress | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Address1: input["Address1"],
    Address2: input["Address2"],
    Address3: input["Address3"],
    Address4: input["Address4"],
    City: input["City"],
    County: input["County"],
    State: input["State"],
    Province: input["Province"],
    Country: input["Country"],
    PostalCode: input["PostalCode"],
  }
}

function toDomainStats(root: jsonP.JSONValue): s.DomainStats {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProfileCount": "n",
      "MeteringProfileCount": "n",
      "ObjectCount": "n",
      "TotalSize": "n",
    },
  }, root);
}

function toListIntegrationItem(root: jsonP.JSONValue): s.ListIntegrationItem {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
      "Uri": "s",
      "ObjectTypeName": "s",
      "CreatedAt": "d",
      "LastUpdatedAt": "d",
    },
    optional: {
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toListDomainItem(root: jsonP.JSONValue): s.ListDomainItem {
  return jsonP.readObj({
    required: {
      "DomainName": "s",
      "CreatedAt": "d",
      "LastUpdatedAt": "d",
    },
    optional: {
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toListProfileObjectTypeTemplateItem(root: jsonP.JSONValue): s.ListProfileObjectTypeTemplateItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "TemplateId": "s",
      "SourceName": "s",
      "SourceObject": "s",
    },
  }, root);
}

function toListProfileObjectTypeItem(root: jsonP.JSONValue): s.ListProfileObjectTypeItem {
  return jsonP.readObj({
    required: {
      "ObjectTypeName": "s",
      "Description": "s",
    },
    optional: {
      "CreatedAt": "d",
      "LastUpdatedAt": "d",
      "Tags": x => jsonP.readMap(String, String, x),
    },
  }, root);
}

function toListProfileObjectsItem(root: jsonP.JSONValue): s.ListProfileObjectsItem {
  return jsonP.readObj({
    required: {},
    optional: {
      "ObjectTypeName": "s",
      "ProfileObjectUniqueKey": "s",
      "Object": "s",
    },
  }, root);
}

function toProfile(root: jsonP.JSONValue): s.Profile {
  return jsonP.readObj({
    required: {},
    optional: {
      "ProfileId": "s",
      "AccountNumber": "s",
      "AdditionalInformation": "s",
      "PartyType": (x: jsonP.JSONValue) => cmnP.readEnum<s.PartyType>(x),
      "BusinessName": "s",
      "FirstName": "s",
      "MiddleName": "s",
      "LastName": "s",
      "BirthDate": "s",
      "Gender": (x: jsonP.JSONValue) => cmnP.readEnum<s.Gender>(x),
      "PhoneNumber": "s",
      "MobilePhoneNumber": "s",
      "HomePhoneNumber": "s",
      "BusinessPhoneNumber": "s",
      "EmailAddress": "s",
      "PersonalEmailAddress": "s",
      "BusinessEmailAddress": "s",
      "Address": toAddress,
      "ShippingAddress": toAddress,
      "MailingAddress": toAddress,
      "BillingAddress": toAddress,
      "Attributes": x => jsonP.readMap(String, String, x),
    },
  }, root);
}
