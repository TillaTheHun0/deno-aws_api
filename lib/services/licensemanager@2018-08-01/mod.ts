// Autogenerated API client for: AWS License Manager

interface RequestConfig {
  abortSignal?: AbortSignal;
}

export * from "./structs.ts";
import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class LicenseManager {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(LicenseManager.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-08-01",
    "endpointPrefix": "license-manager",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "AWS License Manager",
    "serviceId": "License Manager",
    "signatureVersion": "v4",
    "targetPrefix": "AWSLicenseManager",
    "uid": "license-manager-2018-08-01"
  };

  async acceptGrant(
    {abortSignal, ...params}: RequestConfig & s.AcceptGrantRequest,
  ): Promise<s.AcceptGrantResponse> {
    const body: jsonP.JSONObject = {
      GrantArn: params["GrantArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "AcceptGrant",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GrantArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrantStatus>(x),
        "Version": "s",
      },
    }, await resp.json());
  }

  async checkInLicense(
    {abortSignal, ...params}: RequestConfig & s.CheckInLicenseRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LicenseConsumptionToken: params["LicenseConsumptionToken"],
      Beneficiary: params["Beneficiary"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckInLicense",
    });
    await resp.text();
  }

  async checkoutBorrowLicense(
    {abortSignal, ...params}: RequestConfig & s.CheckoutBorrowLicenseRequest,
  ): Promise<s.CheckoutBorrowLicenseResponse> {
    const body: jsonP.JSONObject = {
      LicenseArn: params["LicenseArn"],
      Entitlements: params["Entitlements"]?.map(x => fromEntitlementData(x)),
      DigitalSignatureMethod: params["DigitalSignatureMethod"],
      NodeId: params["NodeId"],
      CheckoutMetadata: params["CheckoutMetadata"]?.map(x => fromMetadata(x)),
      ClientToken: params["ClientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckoutBorrowLicense",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseArn": "s",
        "LicenseConsumptionToken": "s",
        "EntitlementsAllowed": [toEntitlementData],
        "NodeId": "s",
        "SignedToken": "s",
        "IssuedAt": "s",
        "Expiration": "s",
        "CheckoutMetadata": [toMetadata],
      },
    }, await resp.json());
  }

  async checkoutLicense(
    {abortSignal, ...params}: RequestConfig & s.CheckoutLicenseRequest,
  ): Promise<s.CheckoutLicenseResponse> {
    const body: jsonP.JSONObject = {
      ProductSKU: params["ProductSKU"],
      CheckoutType: params["CheckoutType"],
      KeyFingerprint: params["KeyFingerprint"],
      Entitlements: params["Entitlements"]?.map(x => fromEntitlementData(x)),
      ClientToken: params["ClientToken"],
      Beneficiary: params["Beneficiary"],
      NodeId: params["NodeId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CheckoutLicense",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "CheckoutType": (x: jsonP.JSONValue) => cmnP.readEnum<s.CheckoutType>(x),
        "LicenseConsumptionToken": "s",
        "EntitlementsAllowed": [toEntitlementData],
        "SignedToken": "s",
        "NodeId": "s",
        "IssuedAt": "s",
        "Expiration": "s",
      },
    }, await resp.json());
  }

  async createGrant(
    {abortSignal, ...params}: RequestConfig & s.CreateGrantRequest,
  ): Promise<s.CreateGrantResponse> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"],
      GrantName: params["GrantName"],
      LicenseArn: params["LicenseArn"],
      Principals: params["Principals"],
      HomeRegion: params["HomeRegion"],
      AllowedOperations: params["AllowedOperations"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGrant",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GrantArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrantStatus>(x),
        "Version": "s",
      },
    }, await resp.json());
  }

  async createGrantVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateGrantVersionRequest,
  ): Promise<s.CreateGrantVersionResponse> {
    const body: jsonP.JSONObject = {
      ClientToken: params["ClientToken"],
      GrantArn: params["GrantArn"],
      GrantName: params["GrantName"],
      AllowedOperations: params["AllowedOperations"],
      Status: params["Status"],
      SourceVersion: params["SourceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateGrantVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GrantArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrantStatus>(x),
        "Version": "s",
      },
    }, await resp.json());
  }

  async createLicense(
    {abortSignal, ...params}: RequestConfig & s.CreateLicenseRequest,
  ): Promise<s.CreateLicenseResponse> {
    const body: jsonP.JSONObject = {
      LicenseName: params["LicenseName"],
      ProductName: params["ProductName"],
      ProductSKU: params["ProductSKU"],
      Issuer: fromIssuer(params["Issuer"]),
      HomeRegion: params["HomeRegion"],
      Validity: fromDatetimeRange(params["Validity"]),
      Entitlements: params["Entitlements"]?.map(x => fromEntitlement(x)),
      Beneficiary: params["Beneficiary"],
      ConsumptionConfiguration: fromConsumptionConfiguration(params["ConsumptionConfiguration"]),
      LicenseMetadata: params["LicenseMetadata"]?.map(x => fromMetadata(x)),
      ClientToken: params["ClientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLicense",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.LicenseStatus>(x),
        "Version": "s",
      },
    }, await resp.json());
  }

  async createLicenseConfiguration(
    {abortSignal, ...params}: RequestConfig & s.CreateLicenseConfigurationRequest,
  ): Promise<s.CreateLicenseConfigurationResponse> {
    const body: jsonP.JSONObject = {
      Name: params["Name"],
      Description: params["Description"],
      LicenseCountingType: params["LicenseCountingType"],
      LicenseCount: params["LicenseCount"],
      LicenseCountHardLimit: params["LicenseCountHardLimit"],
      LicenseRules: params["LicenseRules"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
      DisassociateWhenNotFound: params["DisassociateWhenNotFound"],
      ProductInformationList: params["ProductInformationList"]?.map(x => fromProductInformation(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLicenseConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseConfigurationArn": "s",
      },
    }, await resp.json());
  }

  async createLicenseVersion(
    {abortSignal, ...params}: RequestConfig & s.CreateLicenseVersionRequest,
  ): Promise<s.CreateLicenseVersionResponse> {
    const body: jsonP.JSONObject = {
      LicenseArn: params["LicenseArn"],
      LicenseName: params["LicenseName"],
      ProductName: params["ProductName"],
      Issuer: fromIssuer(params["Issuer"]),
      HomeRegion: params["HomeRegion"],
      Validity: fromDatetimeRange(params["Validity"]),
      LicenseMetadata: params["LicenseMetadata"]?.map(x => fromMetadata(x)),
      Entitlements: params["Entitlements"]?.map(x => fromEntitlement(x)),
      ConsumptionConfiguration: fromConsumptionConfiguration(params["ConsumptionConfiguration"]),
      Status: params["Status"],
      ClientToken: params["ClientToken"],
      SourceVersion: params["SourceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateLicenseVersion",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseArn": "s",
        "Version": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.LicenseStatus>(x),
      },
    }, await resp.json());
  }

  async createToken(
    {abortSignal, ...params}: RequestConfig & s.CreateTokenRequest,
  ): Promise<s.CreateTokenResponse> {
    const body: jsonP.JSONObject = {
      LicenseArn: params["LicenseArn"],
      RoleArns: params["RoleArns"],
      ExpirationInDays: params["ExpirationInDays"],
      TokenProperties: params["TokenProperties"],
      ClientToken: params["ClientToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateToken",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "TokenId": "s",
        "TokenType": (x: jsonP.JSONValue) => cmnP.readEnum<s.TokenType>(x),
        "Token": "s",
      },
    }, await resp.json());
  }

  async deleteGrant(
    {abortSignal, ...params}: RequestConfig & s.DeleteGrantRequest,
  ): Promise<s.DeleteGrantResponse> {
    const body: jsonP.JSONObject = {
      GrantArn: params["GrantArn"],
      Version: params["Version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteGrant",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GrantArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrantStatus>(x),
        "Version": "s",
      },
    }, await resp.json());
  }

  async deleteLicense(
    {abortSignal, ...params}: RequestConfig & s.DeleteLicenseRequest,
  ): Promise<s.DeleteLicenseResponse> {
    const body: jsonP.JSONObject = {
      LicenseArn: params["LicenseArn"],
      SourceVersion: params["SourceVersion"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLicense",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.LicenseDeletionStatus>(x),
        "DeletionDate": "s",
      },
    }, await resp.json());
  }

  async deleteLicenseConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeleteLicenseConfigurationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LicenseConfigurationArn: params["LicenseConfigurationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteLicenseConfiguration",
    });
    await resp.text();
  }

  async deleteToken(
    {abortSignal, ...params}: RequestConfig & s.DeleteTokenRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      TokenId: params["TokenId"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteToken",
    });
    await resp.text();
  }

  async extendLicenseConsumption(
    {abortSignal, ...params}: RequestConfig & s.ExtendLicenseConsumptionRequest,
  ): Promise<s.ExtendLicenseConsumptionResponse> {
    const body: jsonP.JSONObject = {
      LicenseConsumptionToken: params["LicenseConsumptionToken"],
      DryRun: params["DryRun"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ExtendLicenseConsumption",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseConsumptionToken": "s",
        "Expiration": "s",
      },
    }, await resp.json());
  }

  async getAccessToken(
    {abortSignal, ...params}: RequestConfig & s.GetAccessTokenRequest,
  ): Promise<s.GetAccessTokenResponse> {
    const body: jsonP.JSONObject = {
      Token: params["Token"],
      TokenProperties: params["TokenProperties"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetAccessToken",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AccessToken": "s",
      },
    }, await resp.json());
  }

  async getGrant(
    {abortSignal, ...params}: RequestConfig & s.GetGrantRequest,
  ): Promise<s.GetGrantResponse> {
    const body: jsonP.JSONObject = {
      GrantArn: params["GrantArn"],
      Version: params["Version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetGrant",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Grant": toGrant,
      },
    }, await resp.json());
  }

  async getLicense(
    {abortSignal, ...params}: RequestConfig & s.GetLicenseRequest,
  ): Promise<s.GetLicenseResponse> {
    const body: jsonP.JSONObject = {
      LicenseArn: params["LicenseArn"],
      Version: params["Version"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLicense",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "License": toLicense,
      },
    }, await resp.json());
  }

  async getLicenseConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetLicenseConfigurationRequest,
  ): Promise<s.GetLicenseConfigurationResponse> {
    const body: jsonP.JSONObject = {
      LicenseConfigurationArn: params["LicenseConfigurationArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLicenseConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseConfigurationId": "s",
        "LicenseConfigurationArn": "s",
        "Name": "s",
        "Description": "s",
        "LicenseCountingType": (x: jsonP.JSONValue) => cmnP.readEnum<s.LicenseCountingType>(x),
        "LicenseRules": ["s"],
        "LicenseCount": "n",
        "LicenseCountHardLimit": "b",
        "ConsumedLicenses": "n",
        "Status": "s",
        "OwnerAccountId": "s",
        "ConsumedLicenseSummaryList": [toConsumedLicenseSummary],
        "ManagedResourceSummaryList": [toManagedResourceSummary],
        "Tags": [toTag],
        "ProductInformationList": [toProductInformation],
        "AutomatedDiscoveryInformation": toAutomatedDiscoveryInformation,
        "DisassociateWhenNotFound": "b",
      },
    }, await resp.json());
  }

  async getLicenseUsage(
    {abortSignal, ...params}: RequestConfig & s.GetLicenseUsageRequest,
  ): Promise<s.GetLicenseUsageResponse> {
    const body: jsonP.JSONObject = {
      LicenseArn: params["LicenseArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetLicenseUsage",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseUsage": toLicenseUsage,
      },
    }, await resp.json());
  }

  async getServiceSettings(
    {abortSignal}: RequestConfig = {},
  ): Promise<s.GetServiceSettingsResponse> {
    const body: jsonP.JSONObject = {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetServiceSettings",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "S3BucketArn": "s",
        "SnsTopicArn": "s",
        "OrganizationConfiguration": toOrganizationConfiguration,
        "EnableCrossAccountsDiscovery": "b",
        "LicenseManagerResourceShareArn": "s",
      },
    }, await resp.json());
  }

  async listAssociationsForLicenseConfiguration(
    {abortSignal, ...params}: RequestConfig & s.ListAssociationsForLicenseConfigurationRequest,
  ): Promise<s.ListAssociationsForLicenseConfigurationResponse> {
    const body: jsonP.JSONObject = {
      LicenseConfigurationArn: params["LicenseConfigurationArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListAssociationsForLicenseConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseConfigurationAssociations": [toLicenseConfigurationAssociation],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listDistributedGrants(
    {abortSignal, ...params}: RequestConfig & s.ListDistributedGrantsRequest = {},
  ): Promise<s.ListDistributedGrantsResponse> {
    const body: jsonP.JSONObject = {
      GrantArns: params["GrantArns"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDistributedGrants",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Grants": [toGrant],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listFailuresForLicenseConfigurationOperations(
    {abortSignal, ...params}: RequestConfig & s.ListFailuresForLicenseConfigurationOperationsRequest,
  ): Promise<s.ListFailuresForLicenseConfigurationOperationsResponse> {
    const body: jsonP.JSONObject = {
      LicenseConfigurationArn: params["LicenseConfigurationArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListFailuresForLicenseConfigurationOperations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseOperationFailureList": [toLicenseOperationFailure],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLicenseConfigurations(
    {abortSignal, ...params}: RequestConfig & s.ListLicenseConfigurationsRequest = {},
  ): Promise<s.ListLicenseConfigurationsResponse> {
    const body: jsonP.JSONObject = {
      LicenseConfigurationArns: params["LicenseConfigurationArns"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLicenseConfigurations",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseConfigurations": [toLicenseConfiguration],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLicenseSpecificationsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListLicenseSpecificationsForResourceRequest,
  ): Promise<s.ListLicenseSpecificationsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLicenseSpecificationsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseSpecifications": [toLicenseSpecification],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLicenseVersions(
    {abortSignal, ...params}: RequestConfig & s.ListLicenseVersionsRequest,
  ): Promise<s.ListLicenseVersionsResponse> {
    const body: jsonP.JSONObject = {
      LicenseArn: params["LicenseArn"],
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLicenseVersions",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Licenses": [toLicense],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listLicenses(
    {abortSignal, ...params}: RequestConfig & s.ListLicensesRequest = {},
  ): Promise<s.ListLicensesResponse> {
    const body: jsonP.JSONObject = {
      LicenseArns: params["LicenseArns"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListLicenses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Licenses": [toLicense],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listReceivedGrants(
    {abortSignal, ...params}: RequestConfig & s.ListReceivedGrantsRequest = {},
  ): Promise<s.ListReceivedGrantsResponse> {
    const body: jsonP.JSONObject = {
      GrantArns: params["GrantArns"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListReceivedGrants",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Grants": [toGrant],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listReceivedLicenses(
    {abortSignal, ...params}: RequestConfig & s.ListReceivedLicensesRequest = {},
  ): Promise<s.ListReceivedLicensesResponse> {
    const body: jsonP.JSONObject = {
      LicenseArns: params["LicenseArns"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListReceivedLicenses",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Licenses": [toGrantedLicense],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listResourceInventory(
    {abortSignal, ...params}: RequestConfig & s.ListResourceInventoryRequest = {},
  ): Promise<s.ListResourceInventoryResponse> {
    const body: jsonP.JSONObject = {
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromInventoryFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListResourceInventory",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "ResourceInventoryList": [toResourceInventory],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForResource",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": [toTag],
      },
    }, await resp.json());
  }

  async listTokens(
    {abortSignal, ...params}: RequestConfig & s.ListTokensRequest = {},
  ): Promise<s.ListTokensResponse> {
    const body: jsonP.JSONObject = {
      TokenIds: params["TokenIds"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
      NextToken: params["NextToken"],
      MaxResults: params["MaxResults"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTokens",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tokens": [toTokenData],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listUsageForLicenseConfiguration(
    {abortSignal, ...params}: RequestConfig & s.ListUsageForLicenseConfigurationRequest,
  ): Promise<s.ListUsageForLicenseConfigurationResponse> {
    const body: jsonP.JSONObject = {
      LicenseConfigurationArn: params["LicenseConfigurationArn"],
      MaxResults: params["MaxResults"],
      NextToken: params["NextToken"],
      Filters: params["Filters"]?.map(x => fromFilter(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListUsageForLicenseConfiguration",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "LicenseConfigurationUsageList": [toLicenseConfigurationUsage],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async rejectGrant(
    {abortSignal, ...params}: RequestConfig & s.RejectGrantRequest,
  ): Promise<s.RejectGrantResponse> {
    const body: jsonP.JSONObject = {
      GrantArn: params["GrantArn"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RejectGrant",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "GrantArn": "s",
        "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrantStatus>(x),
        "Version": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      Tags: params["Tags"]?.map(x => fromTag(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    await resp.text();
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      TagKeys: params["TagKeys"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    await resp.text();
  }

  async updateLicenseConfiguration(
    {abortSignal, ...params}: RequestConfig & s.UpdateLicenseConfigurationRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      LicenseConfigurationArn: params["LicenseConfigurationArn"],
      LicenseConfigurationStatus: params["LicenseConfigurationStatus"],
      LicenseRules: params["LicenseRules"],
      LicenseCount: params["LicenseCount"],
      LicenseCountHardLimit: params["LicenseCountHardLimit"],
      Name: params["Name"],
      Description: params["Description"],
      ProductInformationList: params["ProductInformationList"]?.map(x => fromProductInformation(x)),
      DisassociateWhenNotFound: params["DisassociateWhenNotFound"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLicenseConfiguration",
    });
    await resp.text();
  }

  async updateLicenseSpecificationsForResource(
    {abortSignal, ...params}: RequestConfig & s.UpdateLicenseSpecificationsForResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      ResourceArn: params["ResourceArn"],
      AddLicenseSpecifications: params["AddLicenseSpecifications"]?.map(x => fromLicenseSpecification(x)),
      RemoveLicenseSpecifications: params["RemoveLicenseSpecifications"]?.map(x => fromLicenseSpecification(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateLicenseSpecificationsForResource",
    });
    await resp.text();
  }

  async updateServiceSettings(
    {abortSignal, ...params}: RequestConfig & s.UpdateServiceSettingsRequest = {},
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      S3BucketArn: params["S3BucketArn"],
      SnsTopicArn: params["SnsTopicArn"],
      OrganizationConfiguration: fromOrganizationConfiguration(params["OrganizationConfiguration"]),
      EnableCrossAccountsDiscovery: params["EnableCrossAccountsDiscovery"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateServiceSettings",
    });
    await resp.text();
  }

}

function fromEntitlementData(input?: s.EntitlementData | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
    Unit: input["Unit"],
  }
}
function toEntitlementData(root: jsonP.JSONValue): s.EntitlementData {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntitlementDataUnit>(x),
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

function fromMetadata(input?: s.Metadata | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}
function toMetadata(root: jsonP.JSONValue): s.Metadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "Value": "s",
    },
  }, root);
}

function fromIssuer(input?: s.Issuer | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    SignKey: input["SignKey"],
  }
}

function fromDatetimeRange(input?: s.DatetimeRange | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Begin: input["Begin"],
    End: input["End"],
  }
}
function toDatetimeRange(root: jsonP.JSONValue): s.DatetimeRange {
  return jsonP.readObj({
    required: {
      "Begin": "s",
    },
    optional: {
      "End": "s",
    },
  }, root);
}

function fromEntitlement(input?: s.Entitlement | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
    MaxCount: input["MaxCount"],
    Overage: input["Overage"],
    Unit: input["Unit"],
    AllowCheckIn: input["AllowCheckIn"],
  }
}
function toEntitlement(root: jsonP.JSONValue): s.Entitlement {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntitlementUnit>(x),
    },
    optional: {
      "Value": "s",
      "MaxCount": "n",
      "Overage": "b",
      "AllowCheckIn": "b",
    },
  }, root);
}

function fromConsumptionConfiguration(input?: s.ConsumptionConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    RenewType: input["RenewType"],
    ProvisionalConfiguration: fromProvisionalConfiguration(input["ProvisionalConfiguration"]),
    BorrowConfiguration: fromBorrowConfiguration(input["BorrowConfiguration"]),
  }
}
function toConsumptionConfiguration(root: jsonP.JSONValue): s.ConsumptionConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "RenewType": (x: jsonP.JSONValue) => cmnP.readEnum<s.RenewType>(x),
      "ProvisionalConfiguration": toProvisionalConfiguration,
      "BorrowConfiguration": toBorrowConfiguration,
    },
  }, root);
}

function fromProvisionalConfiguration(input?: s.ProvisionalConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MaxTimeToLiveInMinutes: input["MaxTimeToLiveInMinutes"],
  }
}
function toProvisionalConfiguration(root: jsonP.JSONValue): s.ProvisionalConfiguration {
  return jsonP.readObj({
    required: {
      "MaxTimeToLiveInMinutes": "n",
    },
    optional: {},
  }, root);
}

function fromBorrowConfiguration(input?: s.BorrowConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AllowEarlyCheckIn: input["AllowEarlyCheckIn"],
    MaxTimeToLiveInMinutes: input["MaxTimeToLiveInMinutes"],
  }
}
function toBorrowConfiguration(root: jsonP.JSONValue): s.BorrowConfiguration {
  return jsonP.readObj({
    required: {
      "AllowEarlyCheckIn": "b",
      "MaxTimeToLiveInMinutes": "n",
    },
    optional: {},
  }, root);
}

function fromTag(input?: s.Tag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Key: input["Key"],
    Value: input["Value"],
  }
}
function toTag(root: jsonP.JSONValue): s.Tag {
  return jsonP.readObj({
    required: {},
    optional: {
      "Key": "s",
      "Value": "s",
    },
  }, root);
}

function fromProductInformation(input?: s.ProductInformation | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ResourceType: input["ResourceType"],
    ProductInformationFilterList: input["ProductInformationFilterList"]?.map(x => fromProductInformationFilter(x)),
  }
}
function toProductInformation(root: jsonP.JSONValue): s.ProductInformation {
  return jsonP.readObj({
    required: {
      "ResourceType": "s",
      "ProductInformationFilterList": [toProductInformationFilter],
    },
    optional: {},
  }, root);
}

function fromProductInformationFilter(input?: s.ProductInformationFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ProductInformationFilterName: input["ProductInformationFilterName"],
    ProductInformationFilterValue: input["ProductInformationFilterValue"],
    ProductInformationFilterComparator: input["ProductInformationFilterComparator"],
  }
}
function toProductInformationFilter(root: jsonP.JSONValue): s.ProductInformationFilter {
  return jsonP.readObj({
    required: {
      "ProductInformationFilterName": "s",
      "ProductInformationFilterComparator": "s",
    },
    optional: {
      "ProductInformationFilterValue": ["s"],
    },
  }, root);
}

function fromFilter(input?: s.Filter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Values: input["Values"],
  }
}

function fromInventoryFilter(input?: s.InventoryFilter | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Condition: input["Condition"],
    Value: input["Value"],
  }
}

function fromLicenseSpecification(input?: s.LicenseSpecification | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    LicenseConfigurationArn: input["LicenseConfigurationArn"],
    AmiAssociationScope: input["AmiAssociationScope"],
  }
}
function toLicenseSpecification(root: jsonP.JSONValue): s.LicenseSpecification {
  return jsonP.readObj({
    required: {
      "LicenseConfigurationArn": "s",
    },
    optional: {
      "AmiAssociationScope": "s",
    },
  }, root);
}

function fromOrganizationConfiguration(input?: s.OrganizationConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EnableIntegration: input["EnableIntegration"],
  }
}
function toOrganizationConfiguration(root: jsonP.JSONValue): s.OrganizationConfiguration {
  return jsonP.readObj({
    required: {
      "EnableIntegration": "b",
    },
    optional: {},
  }, root);
}

function toGrant(root: jsonP.JSONValue): s.Grant {
  return jsonP.readObj({
    required: {
      "GrantArn": "s",
      "GrantName": "s",
      "ParentArn": "s",
      "LicenseArn": "s",
      "GranteePrincipalArn": "s",
      "HomeRegion": "s",
      "GrantStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.GrantStatus>(x),
      "Version": "s",
      "GrantedOperations": [(x: jsonP.JSONValue) => cmnP.readEnum<s.AllowedOperation>(x)],
    },
    optional: {
      "StatusReason": "s",
    },
  }, root);
}

function toLicense(root: jsonP.JSONValue): s.License {
  return jsonP.readObj({
    required: {},
    optional: {
      "LicenseArn": "s",
      "LicenseName": "s",
      "ProductName": "s",
      "ProductSKU": "s",
      "Issuer": toIssuerDetails,
      "HomeRegion": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.LicenseStatus>(x),
      "Validity": toDatetimeRange,
      "Beneficiary": "s",
      "Entitlements": [toEntitlement],
      "ConsumptionConfiguration": toConsumptionConfiguration,
      "LicenseMetadata": [toMetadata],
      "CreateTime": "s",
      "Version": "s",
    },
  }, root);
}

function toIssuerDetails(root: jsonP.JSONValue): s.IssuerDetails {
  return jsonP.readObj({
    required: {},
    optional: {
      "Name": "s",
      "SignKey": "s",
      "KeyFingerprint": "s",
    },
  }, root);
}

function toConsumedLicenseSummary(root: jsonP.JSONValue): s.ConsumedLicenseSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "ConsumedLicenses": "n",
    },
  }, root);
}

function toManagedResourceSummary(root: jsonP.JSONValue): s.ManagedResourceSummary {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "AssociationCount": "n",
    },
  }, root);
}

function toAutomatedDiscoveryInformation(root: jsonP.JSONValue): s.AutomatedDiscoveryInformation {
  return jsonP.readObj({
    required: {},
    optional: {
      "LastRunTime": "d",
    },
  }, root);
}

function toLicenseUsage(root: jsonP.JSONValue): s.LicenseUsage {
  return jsonP.readObj({
    required: {},
    optional: {
      "EntitlementUsages": [toEntitlementUsage],
    },
  }, root);
}

function toEntitlementUsage(root: jsonP.JSONValue): s.EntitlementUsage {
  return jsonP.readObj({
    required: {
      "Name": "s",
      "ConsumedValue": "s",
      "Unit": (x: jsonP.JSONValue) => cmnP.readEnum<s.EntitlementDataUnit>(x),
    },
    optional: {
      "MaxCount": "s",
    },
  }, root);
}

function toLicenseConfigurationAssociation(root: jsonP.JSONValue): s.LicenseConfigurationAssociation {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceArn": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "ResourceOwnerId": "s",
      "AssociationTime": "d",
      "AmiAssociationScope": "s",
    },
  }, root);
}

function toLicenseOperationFailure(root: jsonP.JSONValue): s.LicenseOperationFailure {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceArn": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "ErrorMessage": "s",
      "FailureTime": "d",
      "OperationName": "s",
      "ResourceOwnerId": "s",
      "OperationRequestedBy": "s",
      "MetadataList": [toMetadata],
    },
  }, root);
}

function toLicenseConfiguration(root: jsonP.JSONValue): s.LicenseConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "LicenseConfigurationId": "s",
      "LicenseConfigurationArn": "s",
      "Name": "s",
      "Description": "s",
      "LicenseCountingType": (x: jsonP.JSONValue) => cmnP.readEnum<s.LicenseCountingType>(x),
      "LicenseRules": ["s"],
      "LicenseCount": "n",
      "LicenseCountHardLimit": "b",
      "DisassociateWhenNotFound": "b",
      "ConsumedLicenses": "n",
      "Status": "s",
      "OwnerAccountId": "s",
      "ConsumedLicenseSummaryList": [toConsumedLicenseSummary],
      "ManagedResourceSummaryList": [toManagedResourceSummary],
      "ProductInformationList": [toProductInformation],
      "AutomatedDiscoveryInformation": toAutomatedDiscoveryInformation,
    },
  }, root);
}

function toGrantedLicense(root: jsonP.JSONValue): s.GrantedLicense {
  return jsonP.readObj({
    required: {},
    optional: {
      "LicenseArn": "s",
      "LicenseName": "s",
      "ProductName": "s",
      "ProductSKU": "s",
      "Issuer": toIssuerDetails,
      "HomeRegion": "s",
      "Status": (x: jsonP.JSONValue) => cmnP.readEnum<s.LicenseStatus>(x),
      "Validity": toDatetimeRange,
      "Beneficiary": "s",
      "Entitlements": [toEntitlement],
      "ConsumptionConfiguration": toConsumptionConfiguration,
      "LicenseMetadata": [toMetadata],
      "CreateTime": "s",
      "Version": "s",
      "ReceivedMetadata": toReceivedMetadata,
    },
  }, root);
}

function toReceivedMetadata(root: jsonP.JSONValue): s.ReceivedMetadata {
  return jsonP.readObj({
    required: {},
    optional: {
      "ReceivedStatus": (x: jsonP.JSONValue) => cmnP.readEnum<s.ReceivedStatus>(x),
      "AllowedOperations": [(x: jsonP.JSONValue) => cmnP.readEnum<s.AllowedOperation>(x)],
    },
  }, root);
}

function toResourceInventory(root: jsonP.JSONValue): s.ResourceInventory {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceId": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "ResourceArn": "s",
      "Platform": "s",
      "PlatformVersion": "s",
      "ResourceOwningAccountId": "s",
    },
  }, root);
}

function toTokenData(root: jsonP.JSONValue): s.TokenData {
  return jsonP.readObj({
    required: {},
    optional: {
      "TokenId": "s",
      "TokenType": "s",
      "LicenseArn": "s",
      "ExpirationTime": "s",
      "TokenProperties": ["s"],
      "RoleArns": ["s"],
      "Status": "s",
    },
  }, root);
}

function toLicenseConfigurationUsage(root: jsonP.JSONValue): s.LicenseConfigurationUsage {
  return jsonP.readObj({
    required: {},
    optional: {
      "ResourceArn": "s",
      "ResourceType": (x: jsonP.JSONValue) => cmnP.readEnum<s.ResourceType>(x),
      "ResourceStatus": "s",
      "ResourceOwnerId": "s",
      "AssociationTime": "d",
      "ConsumedLicenses": "n",
    },
  }, root);
}
