// Autogenerated API client for: Amazon Personalize Events

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class PersonalizeEvents {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(PersonalizeEvents.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-03-22",
    "endpointPrefix": "personalize-events",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon Personalize Events",
    "serviceId": "Personalize Events",
    "signatureVersion": "v4",
    "signingName": "personalize",
    "uid": "personalize-events-2018-03-22"
  };

  async putEvents(
    {abortSignal, ...params}: RequestConfig & s.PutEventsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      trackingId: params["trackingId"],
      userId: params["userId"],
      sessionId: params["sessionId"],
      eventList: params["eventList"]?.map(x => fromEvent(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutEvents",
      requestUri: "/events",
    });
  }

  async putItems(
    {abortSignal, ...params}: RequestConfig & s.PutItemsRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      datasetArn: params["datasetArn"],
      items: params["items"]?.map(x => fromItem(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutItems",
      requestUri: "/items",
    });
  }

  async putUsers(
    {abortSignal, ...params}: RequestConfig & s.PutUsersRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      datasetArn: params["datasetArn"],
      users: params["users"]?.map(x => fromUser(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutUsers",
      requestUri: "/users",
    });
  }

}

function fromEvent(input?: s.Event | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    eventId: input["eventId"],
    eventType: input["eventType"],
    eventValue: input["eventValue"],
    itemId: input["itemId"],
    properties: jsonP.serializeJsonValue(input["properties"]),
    sentAt: jsonP.serializeDate_unixTimestamp(input["sentAt"]),
    recommendationId: input["recommendationId"],
    impression: input["impression"],
  }
}

function fromItem(input?: s.Item | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    itemId: input["itemId"],
    properties: jsonP.serializeJsonValue(input["properties"]),
  }
}

function fromUser(input?: s.User | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    userId: input["userId"],
    properties: jsonP.serializeJsonValue(input["properties"]),
  }
}
