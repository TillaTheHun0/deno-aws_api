// Autogenerated API client for: AWS CloudHSM V2

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class CloudHSMV2 {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(CloudHSMV2.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2017-04-28",
    "endpointPrefix": "cloudhsmv2",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "CloudHSM V2",
    "serviceFullName": "AWS CloudHSM V2",
    "serviceId": "CloudHSM V2",
    "signatureVersion": "v4",
    "signingName": "cloudhsm",
    "targetPrefix": "BaldrApiService",
    "uid": "cloudhsmv2-2017-04-28"
  };

  async copyBackupToRegion(
    {abortSignal, ...params}: RequestConfig & CopyBackupToRegionRequest,
  ): Promise<CopyBackupToRegionResponse> {
    const body: JSONObject = {...params,
    TagList: params["TagList"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CopyBackupToRegion",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DestinationBackup": toDestinationBackup,
      },
    }, await resp.json());
  }

  async createCluster(
    {abortSignal, ...params}: RequestConfig & CreateClusterRequest,
  ): Promise<CreateClusterResponse> {
    const body: JSONObject = {...params,
    TagList: params["TagList"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateCluster",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Cluster": toCluster,
      },
    }, await resp.json());
  }

  async createHsm(
    {abortSignal, ...params}: RequestConfig & CreateHsmRequest,
  ): Promise<CreateHsmResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateHsm",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Hsm": toHsm,
      },
    }, await resp.json());
  }

  async deleteBackup(
    {abortSignal, ...params}: RequestConfig & DeleteBackupRequest,
  ): Promise<DeleteBackupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteBackup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Backup": toBackup,
      },
    }, await resp.json());
  }

  async deleteCluster(
    {abortSignal, ...params}: RequestConfig & DeleteClusterRequest,
  ): Promise<DeleteClusterResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteCluster",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Cluster": toCluster,
      },
    }, await resp.json());
  }

  async deleteHsm(
    {abortSignal, ...params}: RequestConfig & DeleteHsmRequest,
  ): Promise<DeleteHsmResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteHsm",
    });
    return prt.readObj({
      required: {},
      optional: {
        "HsmId": "s",
      },
    }, await resp.json());
  }

  async describeBackups(
    {abortSignal, ...params}: RequestConfig & DescribeBackupsRequest = {},
  ): Promise<DescribeBackupsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeBackups",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Backups": [toBackup],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async describeClusters(
    {abortSignal, ...params}: RequestConfig & DescribeClustersRequest = {},
  ): Promise<DescribeClustersResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeClusters",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Clusters": [toCluster],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async initializeCluster(
    {abortSignal, ...params}: RequestConfig & InitializeClusterRequest,
  ): Promise<InitializeClusterResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "InitializeCluster",
    });
    return prt.readObj({
      required: {},
      optional: {
        "State": toClusterState,
        "StateMessage": "s",
      },
    }, await resp.json());
  }

  async listTags(
    {abortSignal, ...params}: RequestConfig & ListTagsRequest,
  ): Promise<ListTagsResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTags",
    });
    return prt.readObj({
      required: {
        "TagList": [toTag],
      },
      optional: {
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async restoreBackup(
    {abortSignal, ...params}: RequestConfig & RestoreBackupRequest,
  ): Promise<RestoreBackupResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "RestoreBackup",
    });
    return prt.readObj({
      required: {},
      optional: {
        "Backup": toBackup,
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<TagResourceResponse> {
    const body: JSONObject = {...params,
    TagList: params["TagList"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<UntagResourceResponse> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagResource",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CopyBackupToRegionRequest {
  DestinationRegion: string;
  BackupId: string;
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateClusterRequest {
  SubnetIds: string[];
  HsmType: string;
  SourceBackupId?: string | null;
  TagList?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface CreateHsmRequest {
  ClusterId: string;
  AvailabilityZone: string;
  IpAddress?: string | null;
}

// refs: 1 - tags: named, input
export interface DeleteBackupRequest {
  BackupId: string;
}

// refs: 1 - tags: named, input
export interface DeleteClusterRequest {
  ClusterId: string;
}

// refs: 1 - tags: named, input
export interface DeleteHsmRequest {
  ClusterId: string;
  HsmId?: string | null;
  EniId?: string | null;
  EniIp?: string | null;
}

// refs: 1 - tags: named, input
export interface DescribeBackupsRequest {
  NextToken?: string | null;
  MaxResults?: number | null;
  Filters?: { [key: string]: string[] } | null;
  SortAscending?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeClustersRequest {
  Filters?: { [key: string]: string[] } | null;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface InitializeClusterRequest {
  ClusterId: string;
  SignedCert: string;
  TrustAnchor: string;
}

// refs: 1 - tags: named, input
export interface ListTagsRequest {
  ResourceId: string;
  NextToken?: string | null;
  MaxResults?: number | null;
}

// refs: 1 - tags: named, input
export interface RestoreBackupRequest {
  BackupId: string;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceId: string;
  TagList: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceId: string;
  TagKeyList: string[];
}

// refs: 1 - tags: named, output
export interface CopyBackupToRegionResponse {
  DestinationBackup?: DestinationBackup | null;
}

// refs: 1 - tags: named, output
export interface CreateClusterResponse {
  Cluster?: Cluster | null;
}

// refs: 1 - tags: named, output
export interface CreateHsmResponse {
  Hsm?: Hsm | null;
}

// refs: 1 - tags: named, output
export interface DeleteBackupResponse {
  Backup?: Backup | null;
}

// refs: 1 - tags: named, output
export interface DeleteClusterResponse {
  Cluster?: Cluster | null;
}

// refs: 1 - tags: named, output
export interface DeleteHsmResponse {
  HsmId?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeBackupsResponse {
  Backups?: Backup[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface DescribeClustersResponse {
  Clusters?: Cluster[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface InitializeClusterResponse {
  State?: ClusterState | null;
  StateMessage?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsResponse {
  TagList: Tag[];
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface RestoreBackupResponse {
  Backup?: Backup | null;
}

// refs: 1 - tags: named, output
export interface TagResourceResponse {
}

// refs: 1 - tags: named, output
export interface UntagResourceResponse {
}

// refs: 10 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value: string;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
      "Value": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DestinationBackup {
  CreateTimestamp?: Date | number | null;
  SourceRegion?: string | null;
  SourceBackup?: string | null;
  SourceCluster?: string | null;
}
function toDestinationBackup(root: JSONValue): DestinationBackup {
  return prt.readObj({
    required: {},
    optional: {
      "CreateTimestamp": "d",
      "SourceRegion": "s",
      "SourceBackup": "s",
      "SourceCluster": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Cluster {
  BackupPolicy?: BackupPolicy | null;
  ClusterId?: string | null;
  CreateTimestamp?: Date | number | null;
  Hsms?: Hsm[] | null;
  HsmType?: string | null;
  PreCoPassword?: string | null;
  SecurityGroup?: string | null;
  SourceBackupId?: string | null;
  State?: ClusterState | null;
  StateMessage?: string | null;
  SubnetMapping?: { [key: string]: string } | null;
  VpcId?: string | null;
  Certificates?: Certificates | null;
  TagList?: Tag[] | null;
}
function toCluster(root: JSONValue): Cluster {
  return prt.readObj({
    required: {},
    optional: {
      "BackupPolicy": toBackupPolicy,
      "ClusterId": "s",
      "CreateTimestamp": "d",
      "Hsms": [toHsm],
      "HsmType": "s",
      "PreCoPassword": "s",
      "SecurityGroup": "s",
      "SourceBackupId": "s",
      "State": toClusterState,
      "StateMessage": "s",
      "SubnetMapping": x => prt.readMap(String, String, x),
      "VpcId": "s",
      "Certificates": toCertificates,
      "TagList": [toTag],
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type BackupPolicy =
| "DEFAULT"
;
function toBackupPolicy(root: JSONValue): BackupPolicy | null {
  return ( false
    || root == "DEFAULT"
  ) ? root : null;
}

// refs: 4 - tags: output, named, interface
export interface Hsm {
  AvailabilityZone?: string | null;
  ClusterId?: string | null;
  SubnetId?: string | null;
  EniId?: string | null;
  EniIp?: string | null;
  HsmId: string;
  State?: HsmState | null;
  StateMessage?: string | null;
}
function toHsm(root: JSONValue): Hsm {
  return prt.readObj({
    required: {
      "HsmId": "s",
    },
    optional: {
      "AvailabilityZone": "s",
      "ClusterId": "s",
      "SubnetId": "s",
      "EniId": "s",
      "EniIp": "s",
      "State": toHsmState,
      "StateMessage": "s",
    },
  }, root);
}

// refs: 4 - tags: output, named, enum
export type HsmState =
| "CREATE_IN_PROGRESS"
| "ACTIVE"
| "DEGRADED"
| "DELETE_IN_PROGRESS"
| "DELETED"
;
function toHsmState(root: JSONValue): HsmState | null {
  return ( false
    || root == "CREATE_IN_PROGRESS"
    || root == "ACTIVE"
    || root == "DEGRADED"
    || root == "DELETE_IN_PROGRESS"
    || root == "DELETED"
  ) ? root : null;
}

// refs: 4 - tags: output, named, enum
export type ClusterState =
| "CREATE_IN_PROGRESS"
| "UNINITIALIZED"
| "INITIALIZE_IN_PROGRESS"
| "INITIALIZED"
| "ACTIVE"
| "UPDATE_IN_PROGRESS"
| "DELETE_IN_PROGRESS"
| "DELETED"
| "DEGRADED"
;
function toClusterState(root: JSONValue): ClusterState | null {
  return ( false
    || root == "CREATE_IN_PROGRESS"
    || root == "UNINITIALIZED"
    || root == "INITIALIZE_IN_PROGRESS"
    || root == "INITIALIZED"
    || root == "ACTIVE"
    || root == "UPDATE_IN_PROGRESS"
    || root == "DELETE_IN_PROGRESS"
    || root == "DELETED"
    || root == "DEGRADED"
  ) ? root : null;
}

// refs: 3 - tags: output, named, interface
export interface Certificates {
  ClusterCsr?: string | null;
  HsmCertificate?: string | null;
  AwsHardwareCertificate?: string | null;
  ManufacturerHardwareCertificate?: string | null;
  ClusterCertificate?: string | null;
}
function toCertificates(root: JSONValue): Certificates {
  return prt.readObj({
    required: {},
    optional: {
      "ClusterCsr": "s",
      "HsmCertificate": "s",
      "AwsHardwareCertificate": "s",
      "ManufacturerHardwareCertificate": "s",
      "ClusterCertificate": "s",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface Backup {
  BackupId: string;
  BackupState?: BackupState | null;
  ClusterId?: string | null;
  CreateTimestamp?: Date | number | null;
  CopyTimestamp?: Date | number | null;
  SourceRegion?: string | null;
  SourceBackup?: string | null;
  SourceCluster?: string | null;
  DeleteTimestamp?: Date | number | null;
  TagList?: Tag[] | null;
}
function toBackup(root: JSONValue): Backup {
  return prt.readObj({
    required: {
      "BackupId": "s",
    },
    optional: {
      "BackupState": toBackupState,
      "ClusterId": "s",
      "CreateTimestamp": "d",
      "CopyTimestamp": "d",
      "SourceRegion": "s",
      "SourceBackup": "s",
      "SourceCluster": "s",
      "DeleteTimestamp": "d",
      "TagList": [toTag],
    },
  }, root);
}

// refs: 3 - tags: output, named, enum
export type BackupState =
| "CREATE_IN_PROGRESS"
| "READY"
| "DELETED"
| "PENDING_DELETION"
;
function toBackupState(root: JSONValue): BackupState | null {
  return ( false
    || root == "CREATE_IN_PROGRESS"
    || root == "READY"
    || root == "DELETED"
    || root == "PENDING_DELETION"
  ) ? root : null;
}
