// Autogenerated API client for: Amazon Kinesis Firehose

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import { JSONObject, JSONValue } from '../../encoding/json.ts';
import * as prt from "../../encoding/json.ts";

export default class Firehose {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(Firehose.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2015-08-04",
    "endpointPrefix": "firehose",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceAbbreviation": "Firehose",
    "serviceFullName": "Amazon Kinesis Firehose",
    "serviceId": "Firehose",
    "signatureVersion": "v4",
    "targetPrefix": "Firehose_20150804",
    "uid": "firehose-2015-08-04"
  };

  async createDeliveryStream(
    {abortSignal, ...params}: RequestConfig & CreateDeliveryStreamInput,
  ): Promise<CreateDeliveryStreamOutput> {
    const body: JSONObject = {...params,
    KinesisStreamSourceConfiguration: fromKinesisStreamSourceConfiguration(params["KinesisStreamSourceConfiguration"]),
    DeliveryStreamEncryptionConfigurationInput: fromDeliveryStreamEncryptionConfigurationInput(params["DeliveryStreamEncryptionConfigurationInput"]),
    S3DestinationConfiguration: fromS3DestinationConfiguration(params["S3DestinationConfiguration"]),
    ExtendedS3DestinationConfiguration: fromExtendedS3DestinationConfiguration(params["ExtendedS3DestinationConfiguration"]),
    RedshiftDestinationConfiguration: fromRedshiftDestinationConfiguration(params["RedshiftDestinationConfiguration"]),
    ElasticsearchDestinationConfiguration: fromElasticsearchDestinationConfiguration(params["ElasticsearchDestinationConfiguration"]),
    SplunkDestinationConfiguration: fromSplunkDestinationConfiguration(params["SplunkDestinationConfiguration"]),
    HttpEndpointDestinationConfiguration: fromHttpEndpointDestinationConfiguration(params["HttpEndpointDestinationConfiguration"]),
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "CreateDeliveryStream",
    });
    return prt.readObj({
      required: {},
      optional: {
        "DeliveryStreamARN": "s",
      },
    }, await resp.json());
  }

  async deleteDeliveryStream(
    {abortSignal, ...params}: RequestConfig & DeleteDeliveryStreamInput,
  ): Promise<DeleteDeliveryStreamOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DeleteDeliveryStream",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async describeDeliveryStream(
    {abortSignal, ...params}: RequestConfig & DescribeDeliveryStreamInput,
  ): Promise<DescribeDeliveryStreamOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "DescribeDeliveryStream",
    });
    return prt.readObj({
      required: {
        "DeliveryStreamDescription": toDeliveryStreamDescription,
      },
      optional: {},
    }, await resp.json());
  }

  async listDeliveryStreams(
    {abortSignal, ...params}: RequestConfig & ListDeliveryStreamsInput = {},
  ): Promise<ListDeliveryStreamsOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListDeliveryStreams",
    });
    return prt.readObj({
      required: {
        "DeliveryStreamNames": ["s"],
        "HasMoreDeliveryStreams": "b",
      },
      optional: {},
    }, await resp.json());
  }

  async listTagsForDeliveryStream(
    {abortSignal, ...params}: RequestConfig & ListTagsForDeliveryStreamInput,
  ): Promise<ListTagsForDeliveryStreamOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "ListTagsForDeliveryStream",
    });
    return prt.readObj({
      required: {
        "Tags": [toTag],
        "HasMoreTags": "b",
      },
      optional: {},
    }, await resp.json());
  }

  async putRecord(
    {abortSignal, ...params}: RequestConfig & PutRecordInput,
  ): Promise<PutRecordOutput> {
    const body: JSONObject = {...params,
    Record: fromRecord(params["Record"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRecord",
    });
    return prt.readObj({
      required: {
        "RecordId": "s",
      },
      optional: {
        "Encrypted": "b",
      },
    }, await resp.json());
  }

  async putRecordBatch(
    {abortSignal, ...params}: RequestConfig & PutRecordBatchInput,
  ): Promise<PutRecordBatchOutput> {
    const body: JSONObject = {...params,
    Records: params["Records"]?.map(x => fromRecord(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRecordBatch",
    });
    return prt.readObj({
      required: {
        "FailedPutCount": "n",
        "RequestResponses": [toPutRecordBatchResponseEntry],
      },
      optional: {
        "Encrypted": "b",
      },
    }, await resp.json());
  }

  async startDeliveryStreamEncryption(
    {abortSignal, ...params}: RequestConfig & StartDeliveryStreamEncryptionInput,
  ): Promise<StartDeliveryStreamEncryptionOutput> {
    const body: JSONObject = {...params,
    DeliveryStreamEncryptionConfigurationInput: fromDeliveryStreamEncryptionConfigurationInput(params["DeliveryStreamEncryptionConfigurationInput"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StartDeliveryStreamEncryption",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async stopDeliveryStreamEncryption(
    {abortSignal, ...params}: RequestConfig & StopDeliveryStreamEncryptionInput,
  ): Promise<StopDeliveryStreamEncryptionOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "StopDeliveryStreamEncryption",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async tagDeliveryStream(
    {abortSignal, ...params}: RequestConfig & TagDeliveryStreamInput,
  ): Promise<TagDeliveryStreamOutput> {
    const body: JSONObject = {...params,
    Tags: params["Tags"]?.map(x => fromTag(x)),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagDeliveryStream",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async untagDeliveryStream(
    {abortSignal, ...params}: RequestConfig & UntagDeliveryStreamInput,
  ): Promise<UntagDeliveryStreamOutput> {
    const body: JSONObject = {...params,
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UntagDeliveryStream",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async updateDestination(
    {abortSignal, ...params}: RequestConfig & UpdateDestinationInput,
  ): Promise<UpdateDestinationOutput> {
    const body: JSONObject = {...params,
    S3DestinationUpdate: fromS3DestinationUpdate(params["S3DestinationUpdate"]),
    ExtendedS3DestinationUpdate: fromExtendedS3DestinationUpdate(params["ExtendedS3DestinationUpdate"]),
    RedshiftDestinationUpdate: fromRedshiftDestinationUpdate(params["RedshiftDestinationUpdate"]),
    ElasticsearchDestinationUpdate: fromElasticsearchDestinationUpdate(params["ElasticsearchDestinationUpdate"]),
    SplunkDestinationUpdate: fromSplunkDestinationUpdate(params["SplunkDestinationUpdate"]),
    HttpEndpointDestinationUpdate: fromHttpEndpointDestinationUpdate(params["HttpEndpointDestinationUpdate"]),
  };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "UpdateDestination",
    });
    return prt.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
export interface CreateDeliveryStreamInput {
  DeliveryStreamName: string;
  DeliveryStreamType?: DeliveryStreamType | null;
  KinesisStreamSourceConfiguration?: KinesisStreamSourceConfiguration | null;
  DeliveryStreamEncryptionConfigurationInput?: DeliveryStreamEncryptionConfigurationInput | null;
  S3DestinationConfiguration?: S3DestinationConfiguration | null;
  ExtendedS3DestinationConfiguration?: ExtendedS3DestinationConfiguration | null;
  RedshiftDestinationConfiguration?: RedshiftDestinationConfiguration | null;
  ElasticsearchDestinationConfiguration?: ElasticsearchDestinationConfiguration | null;
  SplunkDestinationConfiguration?: SplunkDestinationConfiguration | null;
  HttpEndpointDestinationConfiguration?: HttpEndpointDestinationConfiguration | null;
  Tags?: Tag[] | null;
}

// refs: 1 - tags: named, input
export interface DeleteDeliveryStreamInput {
  DeliveryStreamName: string;
  AllowForceDelete?: boolean | null;
}

// refs: 1 - tags: named, input
export interface DescribeDeliveryStreamInput {
  DeliveryStreamName: string;
  Limit?: number | null;
  ExclusiveStartDestinationId?: string | null;
}

// refs: 1 - tags: named, input
export interface ListDeliveryStreamsInput {
  Limit?: number | null;
  DeliveryStreamType?: DeliveryStreamType | null;
  ExclusiveStartDeliveryStreamName?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForDeliveryStreamInput {
  DeliveryStreamName: string;
  ExclusiveStartTagKey?: string | null;
  Limit?: number | null;
}

// refs: 1 - tags: named, input
export interface PutRecordInput {
  DeliveryStreamName: string;
  Record: Record;
}

// refs: 1 - tags: named, input
export interface PutRecordBatchInput {
  DeliveryStreamName: string;
  Records: Record[];
}

// refs: 1 - tags: named, input
export interface StartDeliveryStreamEncryptionInput {
  DeliveryStreamName: string;
  DeliveryStreamEncryptionConfigurationInput?: DeliveryStreamEncryptionConfigurationInput | null;
}

// refs: 1 - tags: named, input
export interface StopDeliveryStreamEncryptionInput {
  DeliveryStreamName: string;
}

// refs: 1 - tags: named, input
export interface TagDeliveryStreamInput {
  DeliveryStreamName: string;
  Tags: Tag[];
}

// refs: 1 - tags: named, input
export interface UntagDeliveryStreamInput {
  DeliveryStreamName: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, input
export interface UpdateDestinationInput {
  DeliveryStreamName: string;
  CurrentDeliveryStreamVersionId: string;
  DestinationId: string;
  S3DestinationUpdate?: S3DestinationUpdate | null;
  ExtendedS3DestinationUpdate?: ExtendedS3DestinationUpdate | null;
  RedshiftDestinationUpdate?: RedshiftDestinationUpdate | null;
  ElasticsearchDestinationUpdate?: ElasticsearchDestinationUpdate | null;
  SplunkDestinationUpdate?: SplunkDestinationUpdate | null;
  HttpEndpointDestinationUpdate?: HttpEndpointDestinationUpdate | null;
}

// refs: 1 - tags: named, output
export interface CreateDeliveryStreamOutput {
  DeliveryStreamARN?: string | null;
}

// refs: 1 - tags: named, output
export interface DeleteDeliveryStreamOutput {
}

// refs: 1 - tags: named, output
export interface DescribeDeliveryStreamOutput {
  DeliveryStreamDescription: DeliveryStreamDescription;
}

// refs: 1 - tags: named, output
export interface ListDeliveryStreamsOutput {
  DeliveryStreamNames: string[];
  HasMoreDeliveryStreams: boolean;
}

// refs: 1 - tags: named, output
export interface ListTagsForDeliveryStreamOutput {
  Tags: Tag[];
  HasMoreTags: boolean;
}

// refs: 1 - tags: named, output
export interface PutRecordOutput {
  RecordId: string;
  Encrypted?: boolean | null;
}

// refs: 1 - tags: named, output
export interface PutRecordBatchOutput {
  FailedPutCount: number;
  Encrypted?: boolean | null;
  RequestResponses: PutRecordBatchResponseEntry[];
}

// refs: 1 - tags: named, output
export interface StartDeliveryStreamEncryptionOutput {
}

// refs: 1 - tags: named, output
export interface StopDeliveryStreamEncryptionOutput {
}

// refs: 1 - tags: named, output
export interface TagDeliveryStreamOutput {
}

// refs: 1 - tags: named, output
export interface UntagDeliveryStreamOutput {
}

// refs: 1 - tags: named, output
export interface UpdateDestinationOutput {
}

// refs: 3 - tags: input, named, enum, output
export type DeliveryStreamType =
| "DirectPut"
| "KinesisStreamAsSource"
;

function toDeliveryStreamType(root: JSONValue): DeliveryStreamType | null {
  return ( false
    || root == "DirectPut"
    || root == "KinesisStreamAsSource"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface KinesisStreamSourceConfiguration {
  KinesisStreamARN: string;
  RoleARN: string;
}
function fromKinesisStreamSourceConfiguration(input?: KinesisStreamSourceConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 2 - tags: input, named, interface
export interface DeliveryStreamEncryptionConfigurationInput {
  KeyARN?: string | null;
  KeyType: KeyType;
}
function fromDeliveryStreamEncryptionConfigurationInput(input?: DeliveryStreamEncryptionConfigurationInput | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, enum, output
export type KeyType =
| "AWS_OWNED_CMK"
| "CUSTOMER_MANAGED_CMK"
;

function toKeyType(root: JSONValue): KeyType | null {
  return ( false
    || root == "AWS_OWNED_CMK"
    || root == "CUSTOMER_MANAGED_CMK"
  ) ? root : null;
}

// refs: 7 - tags: input, named, interface
export interface S3DestinationConfiguration {
  RoleARN: string;
  BucketARN: string;
  Prefix?: string | null;
  ErrorOutputPrefix?: string | null;
  BufferingHints?: BufferingHints | null;
  CompressionFormat?: CompressionFormat | null;
  EncryptionConfiguration?: EncryptionConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function fromS3DestinationConfiguration(input?: S3DestinationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    BufferingHints: fromBufferingHints(input["BufferingHints"]),
    EncryptionConfiguration: fromEncryptionConfiguration(input["EncryptionConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
  }
}

// refs: 24 - tags: input, named, interface, output
export interface BufferingHints {
  SizeInMBs?: number | null;
  IntervalInSeconds?: number | null;
}
function fromBufferingHints(input?: BufferingHints | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toBufferingHints(root: JSONValue): BufferingHints {
  return prt.readObj({
    required: {},
    optional: {
      "SizeInMBs": "n",
      "IntervalInSeconds": "n",
    },
  }, root);
}

// refs: 24 - tags: input, named, enum, output
export type CompressionFormat =
| "UNCOMPRESSED"
| "GZIP"
| "ZIP"
| "Snappy"
| "HADOOP_SNAPPY"
;

function toCompressionFormat(root: JSONValue): CompressionFormat | null {
  return ( false
    || root == "UNCOMPRESSED"
    || root == "GZIP"
    || root == "ZIP"
    || root == "Snappy"
    || root == "HADOOP_SNAPPY"
  ) ? root : null;
}

// refs: 24 - tags: input, named, interface, output
export interface EncryptionConfiguration {
  NoEncryptionConfig?: NoEncryptionConfig | null;
  KMSEncryptionConfig?: KMSEncryptionConfig | null;
}
function fromEncryptionConfiguration(input?: EncryptionConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    KMSEncryptionConfig: fromKMSEncryptionConfig(input["KMSEncryptionConfig"]),
  }
}
function toEncryptionConfiguration(root: JSONValue): EncryptionConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "NoEncryptionConfig": toNoEncryptionConfig,
      "KMSEncryptionConfig": toKMSEncryptionConfig,
    },
  }, root);
}

// refs: 24 - tags: input, named, enum, output
export type NoEncryptionConfig =
| "NoEncryption"
;

function toNoEncryptionConfig(root: JSONValue): NoEncryptionConfig | null {
  return ( false
    || root == "NoEncryption"
  ) ? root : null;
}

// refs: 24 - tags: input, named, interface, output
export interface KMSEncryptionConfig {
  AWSKMSKeyARN: string;
}
function fromKMSEncryptionConfig(input?: KMSEncryptionConfig | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toKMSEncryptionConfig(root: JSONValue): KMSEncryptionConfig {
  return prt.readObj({
    required: {
      "AWSKMSKeyARN": "s",
    },
    optional: {},
  }, root);
}

// refs: 36 - tags: input, named, interface, output
export interface CloudWatchLoggingOptions {
  Enabled?: boolean | null;
  LogGroupName?: string | null;
  LogStreamName?: string | null;
}
function fromCloudWatchLoggingOptions(input?: CloudWatchLoggingOptions | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCloudWatchLoggingOptions(root: JSONValue): CloudWatchLoggingOptions {
  return prt.readObj({
    required: {},
    optional: {
      "Enabled": "b",
      "LogGroupName": "s",
      "LogStreamName": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface ExtendedS3DestinationConfiguration {
  RoleARN: string;
  BucketARN: string;
  Prefix?: string | null;
  ErrorOutputPrefix?: string | null;
  BufferingHints?: BufferingHints | null;
  CompressionFormat?: CompressionFormat | null;
  EncryptionConfiguration?: EncryptionConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  S3BackupMode?: S3BackupMode | null;
  S3BackupConfiguration?: S3DestinationConfiguration | null;
  DataFormatConversionConfiguration?: DataFormatConversionConfiguration | null;
}
function fromExtendedS3DestinationConfiguration(input?: ExtendedS3DestinationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    BufferingHints: fromBufferingHints(input["BufferingHints"]),
    EncryptionConfiguration: fromEncryptionConfiguration(input["EncryptionConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    S3BackupConfiguration: fromS3DestinationConfiguration(input["S3BackupConfiguration"]),
    DataFormatConversionConfiguration: fromDataFormatConversionConfiguration(input["DataFormatConversionConfiguration"]),
  }
}

// refs: 15 - tags: input, named, interface, output
export interface ProcessingConfiguration {
  Enabled?: boolean | null;
  Processors?: Processor[] | null;
}
function fromProcessingConfiguration(input?: ProcessingConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    Processors: input["Processors"]?.map(x => fromProcessor(x)),
  }
}
function toProcessingConfiguration(root: JSONValue): ProcessingConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "Enabled": "b",
      "Processors": [toProcessor],
    },
  }, root);
}

// refs: 15 - tags: input, named, interface, output
export interface Processor {
  Type: ProcessorType;
  Parameters?: ProcessorParameter[] | null;
}
function fromProcessor(input?: Processor | null): JSONValue {
  if (!input) return input;
  return {...input,
    Parameters: input["Parameters"]?.map(x => fromProcessorParameter(x)),
  }
}
function toProcessor(root: JSONValue): Processor {
  return prt.readObj({
    required: {
      "Type": toProcessorType,
    },
    optional: {
      "Parameters": [toProcessorParameter],
    },
  }, root);
}

// refs: 15 - tags: input, named, enum, output
export type ProcessorType =
| "Lambda"
;

function toProcessorType(root: JSONValue): ProcessorType | null {
  return ( false
    || root == "Lambda"
  ) ? root : null;
}

// refs: 15 - tags: input, named, interface, output
export interface ProcessorParameter {
  ParameterName: ProcessorParameterName;
  ParameterValue: string;
}
function fromProcessorParameter(input?: ProcessorParameter | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toProcessorParameter(root: JSONValue): ProcessorParameter {
  return prt.readObj({
    required: {
      "ParameterName": toProcessorParameterName,
      "ParameterValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 15 - tags: input, named, enum, output
export type ProcessorParameterName =
| "LambdaArn"
| "NumberOfRetries"
| "RoleArn"
| "BufferSizeInMBs"
| "BufferIntervalInSeconds"
;

function toProcessorParameterName(root: JSONValue): ProcessorParameterName | null {
  return ( false
    || root == "LambdaArn"
    || root == "NumberOfRetries"
    || root == "RoleArn"
    || root == "BufferSizeInMBs"
    || root == "BufferIntervalInSeconds"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type S3BackupMode =
| "Disabled"
| "Enabled"
;

function toS3BackupMode(root: JSONValue): S3BackupMode | null {
  return ( false
    || root == "Disabled"
    || root == "Enabled"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface DataFormatConversionConfiguration {
  SchemaConfiguration?: SchemaConfiguration | null;
  InputFormatConfiguration?: InputFormatConfiguration | null;
  OutputFormatConfiguration?: OutputFormatConfiguration | null;
  Enabled?: boolean | null;
}
function fromDataFormatConversionConfiguration(input?: DataFormatConversionConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    SchemaConfiguration: fromSchemaConfiguration(input["SchemaConfiguration"]),
    InputFormatConfiguration: fromInputFormatConfiguration(input["InputFormatConfiguration"]),
    OutputFormatConfiguration: fromOutputFormatConfiguration(input["OutputFormatConfiguration"]),
  }
}
function toDataFormatConversionConfiguration(root: JSONValue): DataFormatConversionConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "SchemaConfiguration": toSchemaConfiguration,
      "InputFormatConfiguration": toInputFormatConfiguration,
      "OutputFormatConfiguration": toOutputFormatConfiguration,
      "Enabled": "b",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface SchemaConfiguration {
  RoleARN?: string | null;
  CatalogId?: string | null;
  DatabaseName?: string | null;
  TableName?: string | null;
  Region?: string | null;
  VersionId?: string | null;
}
function fromSchemaConfiguration(input?: SchemaConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSchemaConfiguration(root: JSONValue): SchemaConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "RoleARN": "s",
      "CatalogId": "s",
      "DatabaseName": "s",
      "TableName": "s",
      "Region": "s",
      "VersionId": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface InputFormatConfiguration {
  Deserializer?: Deserializer | null;
}
function fromInputFormatConfiguration(input?: InputFormatConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    Deserializer: fromDeserializer(input["Deserializer"]),
  }
}
function toInputFormatConfiguration(root: JSONValue): InputFormatConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "Deserializer": toDeserializer,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Deserializer {
  OpenXJsonSerDe?: OpenXJsonSerDe | null;
  HiveJsonSerDe?: HiveJsonSerDe | null;
}
function fromDeserializer(input?: Deserializer | null): JSONValue {
  if (!input) return input;
  return {...input,
    OpenXJsonSerDe: fromOpenXJsonSerDe(input["OpenXJsonSerDe"]),
    HiveJsonSerDe: fromHiveJsonSerDe(input["HiveJsonSerDe"]),
  }
}
function toDeserializer(root: JSONValue): Deserializer {
  return prt.readObj({
    required: {},
    optional: {
      "OpenXJsonSerDe": toOpenXJsonSerDe,
      "HiveJsonSerDe": toHiveJsonSerDe,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OpenXJsonSerDe {
  ConvertDotsInJsonKeysToUnderscores?: boolean | null;
  CaseInsensitive?: boolean | null;
  ColumnToJsonKeyMappings?: { [key: string]: string } | null;
}
function fromOpenXJsonSerDe(input?: OpenXJsonSerDe | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toOpenXJsonSerDe(root: JSONValue): OpenXJsonSerDe {
  return prt.readObj({
    required: {},
    optional: {
      "ConvertDotsInJsonKeysToUnderscores": "b",
      "CaseInsensitive": "b",
      "ColumnToJsonKeyMappings": x => prt.readMap(String, String, x),
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface HiveJsonSerDe {
  TimestampFormats?: string[] | null;
}
function fromHiveJsonSerDe(input?: HiveJsonSerDe | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toHiveJsonSerDe(root: JSONValue): HiveJsonSerDe {
  return prt.readObj({
    required: {},
    optional: {
      "TimestampFormats": ["s"],
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface OutputFormatConfiguration {
  Serializer?: Serializer | null;
}
function fromOutputFormatConfiguration(input?: OutputFormatConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    Serializer: fromSerializer(input["Serializer"]),
  }
}
function toOutputFormatConfiguration(root: JSONValue): OutputFormatConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "Serializer": toSerializer,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface Serializer {
  ParquetSerDe?: ParquetSerDe | null;
  OrcSerDe?: OrcSerDe | null;
}
function fromSerializer(input?: Serializer | null): JSONValue {
  if (!input) return input;
  return {...input,
    ParquetSerDe: fromParquetSerDe(input["ParquetSerDe"]),
    OrcSerDe: fromOrcSerDe(input["OrcSerDe"]),
  }
}
function toSerializer(root: JSONValue): Serializer {
  return prt.readObj({
    required: {},
    optional: {
      "ParquetSerDe": toParquetSerDe,
      "OrcSerDe": toOrcSerDe,
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ParquetSerDe {
  BlockSizeBytes?: number | null;
  PageSizeBytes?: number | null;
  Compression?: ParquetCompression | null;
  EnableDictionaryCompression?: boolean | null;
  MaxPaddingBytes?: number | null;
  WriterVersion?: ParquetWriterVersion | null;
}
function fromParquetSerDe(input?: ParquetSerDe | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toParquetSerDe(root: JSONValue): ParquetSerDe {
  return prt.readObj({
    required: {},
    optional: {
      "BlockSizeBytes": "n",
      "PageSizeBytes": "n",
      "Compression": toParquetCompression,
      "EnableDictionaryCompression": "b",
      "MaxPaddingBytes": "n",
      "WriterVersion": toParquetWriterVersion,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ParquetCompression =
| "UNCOMPRESSED"
| "GZIP"
| "SNAPPY"
;

function toParquetCompression(root: JSONValue): ParquetCompression | null {
  return ( false
    || root == "UNCOMPRESSED"
    || root == "GZIP"
    || root == "SNAPPY"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type ParquetWriterVersion =
| "V1"
| "V2"
;

function toParquetWriterVersion(root: JSONValue): ParquetWriterVersion | null {
  return ( false
    || root == "V1"
    || root == "V2"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface OrcSerDe {
  StripeSizeBytes?: number | null;
  BlockSizeBytes?: number | null;
  RowIndexStride?: number | null;
  EnablePadding?: boolean | null;
  PaddingTolerance?: number | null;
  Compression?: OrcCompression | null;
  BloomFilterColumns?: string[] | null;
  BloomFilterFalsePositiveProbability?: number | null;
  DictionaryKeyThreshold?: number | null;
  FormatVersion?: OrcFormatVersion | null;
}
function fromOrcSerDe(input?: OrcSerDe | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toOrcSerDe(root: JSONValue): OrcSerDe {
  return prt.readObj({
    required: {},
    optional: {
      "StripeSizeBytes": "n",
      "BlockSizeBytes": "n",
      "RowIndexStride": "n",
      "EnablePadding": "b",
      "PaddingTolerance": "n",
      "Compression": toOrcCompression,
      "BloomFilterColumns": ["s"],
      "BloomFilterFalsePositiveProbability": "n",
      "DictionaryKeyThreshold": "n",
      "FormatVersion": toOrcFormatVersion,
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type OrcCompression =
| "NONE"
| "ZLIB"
| "SNAPPY"
;

function toOrcCompression(root: JSONValue): OrcCompression | null {
  return ( false
    || root == "NONE"
    || root == "ZLIB"
    || root == "SNAPPY"
  ) ? root : null;
}

// refs: 3 - tags: input, named, enum, output
export type OrcFormatVersion =
| "V0_11"
| "V0_12"
;

function toOrcFormatVersion(root: JSONValue): OrcFormatVersion | null {
  return ( false
    || root == "V0_11"
    || root == "V0_12"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface RedshiftDestinationConfiguration {
  RoleARN: string;
  ClusterJDBCURL: string;
  CopyCommand: CopyCommand;
  Username: string;
  Password: string;
  RetryOptions?: RedshiftRetryOptions | null;
  S3Configuration: S3DestinationConfiguration;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  S3BackupMode?: RedshiftS3BackupMode | null;
  S3BackupConfiguration?: S3DestinationConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function fromRedshiftDestinationConfiguration(input?: RedshiftDestinationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    CopyCommand: fromCopyCommand(input["CopyCommand"]),
    RetryOptions: fromRedshiftRetryOptions(input["RetryOptions"]),
    S3Configuration: fromS3DestinationConfiguration(input["S3Configuration"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    S3BackupConfiguration: fromS3DestinationConfiguration(input["S3BackupConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
  }
}

// refs: 3 - tags: input, named, interface, output
export interface CopyCommand {
  DataTableName: string;
  DataTableColumns?: string | null;
  CopyOptions?: string | null;
}
function fromCopyCommand(input?: CopyCommand | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toCopyCommand(root: JSONValue): CopyCommand {
  return prt.readObj({
    required: {
      "DataTableName": "s",
    },
    optional: {
      "DataTableColumns": "s",
      "CopyOptions": "s",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface RedshiftRetryOptions {
  DurationInSeconds?: number | null;
}
function fromRedshiftRetryOptions(input?: RedshiftRetryOptions | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toRedshiftRetryOptions(root: JSONValue): RedshiftRetryOptions {
  return prt.readObj({
    required: {},
    optional: {
      "DurationInSeconds": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type RedshiftS3BackupMode =
| "Disabled"
| "Enabled"
;

function toRedshiftS3BackupMode(root: JSONValue): RedshiftS3BackupMode | null {
  return ( false
    || root == "Disabled"
    || root == "Enabled"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface ElasticsearchDestinationConfiguration {
  RoleARN: string;
  DomainARN?: string | null;
  ClusterEndpoint?: string | null;
  IndexName: string;
  TypeName?: string | null;
  IndexRotationPeriod?: ElasticsearchIndexRotationPeriod | null;
  BufferingHints?: ElasticsearchBufferingHints | null;
  RetryOptions?: ElasticsearchRetryOptions | null;
  S3BackupMode?: ElasticsearchS3BackupMode | null;
  S3Configuration: S3DestinationConfiguration;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  VpcConfiguration?: VpcConfiguration | null;
}
function fromElasticsearchDestinationConfiguration(input?: ElasticsearchDestinationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    BufferingHints: fromElasticsearchBufferingHints(input["BufferingHints"]),
    RetryOptions: fromElasticsearchRetryOptions(input["RetryOptions"]),
    S3Configuration: fromS3DestinationConfiguration(input["S3Configuration"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
    VpcConfiguration: fromVpcConfiguration(input["VpcConfiguration"]),
  }
}

// refs: 3 - tags: input, named, enum, output
export type ElasticsearchIndexRotationPeriod =
| "NoRotation"
| "OneHour"
| "OneDay"
| "OneWeek"
| "OneMonth"
;

function toElasticsearchIndexRotationPeriod(root: JSONValue): ElasticsearchIndexRotationPeriod | null {
  return ( false
    || root == "NoRotation"
    || root == "OneHour"
    || root == "OneDay"
    || root == "OneWeek"
    || root == "OneMonth"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface ElasticsearchBufferingHints {
  IntervalInSeconds?: number | null;
  SizeInMBs?: number | null;
}
function fromElasticsearchBufferingHints(input?: ElasticsearchBufferingHints | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toElasticsearchBufferingHints(root: JSONValue): ElasticsearchBufferingHints {
  return prt.readObj({
    required: {},
    optional: {
      "IntervalInSeconds": "n",
      "SizeInMBs": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface ElasticsearchRetryOptions {
  DurationInSeconds?: number | null;
}
function fromElasticsearchRetryOptions(input?: ElasticsearchRetryOptions | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toElasticsearchRetryOptions(root: JSONValue): ElasticsearchRetryOptions {
  return prt.readObj({
    required: {},
    optional: {
      "DurationInSeconds": "n",
    },
  }, root);
}

// refs: 2 - tags: input, named, enum, output
export type ElasticsearchS3BackupMode =
| "FailedDocumentsOnly"
| "AllDocuments"
;

function toElasticsearchS3BackupMode(root: JSONValue): ElasticsearchS3BackupMode | null {
  return ( false
    || root == "FailedDocumentsOnly"
    || root == "AllDocuments"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface VpcConfiguration {
  SubnetIds: string[];
  RoleARN: string;
  SecurityGroupIds: string[];
}
function fromVpcConfiguration(input?: VpcConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 1 - tags: input, named, interface
export interface SplunkDestinationConfiguration {
  HECEndpoint: string;
  HECEndpointType: HECEndpointType;
  HECToken: string;
  HECAcknowledgmentTimeoutInSeconds?: number | null;
  RetryOptions?: SplunkRetryOptions | null;
  S3BackupMode?: SplunkS3BackupMode | null;
  S3Configuration: S3DestinationConfiguration;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function fromSplunkDestinationConfiguration(input?: SplunkDestinationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    RetryOptions: fromSplunkRetryOptions(input["RetryOptions"]),
    S3Configuration: fromS3DestinationConfiguration(input["S3Configuration"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
  }
}

// refs: 3 - tags: input, named, enum, output
export type HECEndpointType =
| "Raw"
| "Event"
;

function toHECEndpointType(root: JSONValue): HECEndpointType | null {
  return ( false
    || root == "Raw"
    || root == "Event"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface SplunkRetryOptions {
  DurationInSeconds?: number | null;
}
function fromSplunkRetryOptions(input?: SplunkRetryOptions | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toSplunkRetryOptions(root: JSONValue): SplunkRetryOptions {
  return prt.readObj({
    required: {},
    optional: {
      "DurationInSeconds": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type SplunkS3BackupMode =
| "FailedEventsOnly"
| "AllEvents"
;

function toSplunkS3BackupMode(root: JSONValue): SplunkS3BackupMode | null {
  return ( false
    || root == "FailedEventsOnly"
    || root == "AllEvents"
  ) ? root : null;
}

// refs: 1 - tags: input, named, interface
export interface HttpEndpointDestinationConfiguration {
  EndpointConfiguration: HttpEndpointConfiguration;
  BufferingHints?: HttpEndpointBufferingHints | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  RequestConfiguration?: HttpEndpointRequestConfiguration | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  RoleARN?: string | null;
  RetryOptions?: HttpEndpointRetryOptions | null;
  S3BackupMode?: HttpEndpointS3BackupMode | null;
  S3Configuration: S3DestinationConfiguration;
}
function fromHttpEndpointDestinationConfiguration(input?: HttpEndpointDestinationConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    EndpointConfiguration: fromHttpEndpointConfiguration(input["EndpointConfiguration"]),
    BufferingHints: fromHttpEndpointBufferingHints(input["BufferingHints"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
    RequestConfiguration: fromHttpEndpointRequestConfiguration(input["RequestConfiguration"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    RetryOptions: fromHttpEndpointRetryOptions(input["RetryOptions"]),
    S3Configuration: fromS3DestinationConfiguration(input["S3Configuration"]),
  }
}

// refs: 2 - tags: input, named, interface
export interface HttpEndpointConfiguration {
  Url: string;
  Name?: string | null;
  AccessKey?: string | null;
}
function fromHttpEndpointConfiguration(input?: HttpEndpointConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}

// refs: 3 - tags: input, named, interface, output
export interface HttpEndpointBufferingHints {
  SizeInMBs?: number | null;
  IntervalInSeconds?: number | null;
}
function fromHttpEndpointBufferingHints(input?: HttpEndpointBufferingHints | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toHttpEndpointBufferingHints(root: JSONValue): HttpEndpointBufferingHints {
  return prt.readObj({
    required: {},
    optional: {
      "SizeInMBs": "n",
      "IntervalInSeconds": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface HttpEndpointRequestConfiguration {
  ContentEncoding?: ContentEncoding | null;
  CommonAttributes?: HttpEndpointCommonAttribute[] | null;
}
function fromHttpEndpointRequestConfiguration(input?: HttpEndpointRequestConfiguration | null): JSONValue {
  if (!input) return input;
  return {...input,
    CommonAttributes: input["CommonAttributes"]?.map(x => fromHttpEndpointCommonAttribute(x)),
  }
}
function toHttpEndpointRequestConfiguration(root: JSONValue): HttpEndpointRequestConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "ContentEncoding": toContentEncoding,
      "CommonAttributes": [toHttpEndpointCommonAttribute],
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type ContentEncoding =
| "NONE"
| "GZIP"
;

function toContentEncoding(root: JSONValue): ContentEncoding | null {
  return ( false
    || root == "NONE"
    || root == "GZIP"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface HttpEndpointCommonAttribute {
  AttributeName: string;
  AttributeValue: string;
}
function fromHttpEndpointCommonAttribute(input?: HttpEndpointCommonAttribute | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toHttpEndpointCommonAttribute(root: JSONValue): HttpEndpointCommonAttribute {
  return prt.readObj({
    required: {
      "AttributeName": "s",
      "AttributeValue": "s",
    },
    optional: {},
  }, root);
}

// refs: 3 - tags: input, named, interface, output
export interface HttpEndpointRetryOptions {
  DurationInSeconds?: number | null;
}
function fromHttpEndpointRetryOptions(input?: HttpEndpointRetryOptions | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toHttpEndpointRetryOptions(root: JSONValue): HttpEndpointRetryOptions {
  return prt.readObj({
    required: {},
    optional: {
      "DurationInSeconds": "n",
    },
  }, root);
}

// refs: 3 - tags: input, named, enum, output
export type HttpEndpointS3BackupMode =
| "FailedDataOnly"
| "AllData"
;

function toHttpEndpointS3BackupMode(root: JSONValue): HttpEndpointS3BackupMode | null {
  return ( false
    || root == "FailedDataOnly"
    || root == "AllData"
  ) ? root : null;
}

// refs: 3 - tags: input, named, interface, output
export interface Tag {
  Key: string;
  Value?: string | null;
}
function fromTag(input?: Tag | null): JSONValue {
  if (!input) return input;
  return {...input,
  }
}
function toTag(root: JSONValue): Tag {
  return prt.readObj({
    required: {
      "Key": "s",
    },
    optional: {
      "Value": "s",
    },
  }, root);
}

// refs: 2 - tags: input, named, interface
export interface Record {
  Data: Uint8Array | string;
}
function fromRecord(input?: Record | null): JSONValue {
  if (!input) return input;
  return {...input,
    Data: prt.serializeBlob(input["Data"]),
  }
}

// refs: 7 - tags: input, named, interface
export interface S3DestinationUpdate {
  RoleARN?: string | null;
  BucketARN?: string | null;
  Prefix?: string | null;
  ErrorOutputPrefix?: string | null;
  BufferingHints?: BufferingHints | null;
  CompressionFormat?: CompressionFormat | null;
  EncryptionConfiguration?: EncryptionConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function fromS3DestinationUpdate(input?: S3DestinationUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    BufferingHints: fromBufferingHints(input["BufferingHints"]),
    EncryptionConfiguration: fromEncryptionConfiguration(input["EncryptionConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface ExtendedS3DestinationUpdate {
  RoleARN?: string | null;
  BucketARN?: string | null;
  Prefix?: string | null;
  ErrorOutputPrefix?: string | null;
  BufferingHints?: BufferingHints | null;
  CompressionFormat?: CompressionFormat | null;
  EncryptionConfiguration?: EncryptionConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  S3BackupMode?: S3BackupMode | null;
  S3BackupUpdate?: S3DestinationUpdate | null;
  DataFormatConversionConfiguration?: DataFormatConversionConfiguration | null;
}
function fromExtendedS3DestinationUpdate(input?: ExtendedS3DestinationUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    BufferingHints: fromBufferingHints(input["BufferingHints"]),
    EncryptionConfiguration: fromEncryptionConfiguration(input["EncryptionConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    S3BackupUpdate: fromS3DestinationUpdate(input["S3BackupUpdate"]),
    DataFormatConversionConfiguration: fromDataFormatConversionConfiguration(input["DataFormatConversionConfiguration"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface RedshiftDestinationUpdate {
  RoleARN?: string | null;
  ClusterJDBCURL?: string | null;
  CopyCommand?: CopyCommand | null;
  Username?: string | null;
  Password?: string | null;
  RetryOptions?: RedshiftRetryOptions | null;
  S3Update?: S3DestinationUpdate | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  S3BackupMode?: RedshiftS3BackupMode | null;
  S3BackupUpdate?: S3DestinationUpdate | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function fromRedshiftDestinationUpdate(input?: RedshiftDestinationUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    CopyCommand: fromCopyCommand(input["CopyCommand"]),
    RetryOptions: fromRedshiftRetryOptions(input["RetryOptions"]),
    S3Update: fromS3DestinationUpdate(input["S3Update"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    S3BackupUpdate: fromS3DestinationUpdate(input["S3BackupUpdate"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface ElasticsearchDestinationUpdate {
  RoleARN?: string | null;
  DomainARN?: string | null;
  ClusterEndpoint?: string | null;
  IndexName?: string | null;
  TypeName?: string | null;
  IndexRotationPeriod?: ElasticsearchIndexRotationPeriod | null;
  BufferingHints?: ElasticsearchBufferingHints | null;
  RetryOptions?: ElasticsearchRetryOptions | null;
  S3Update?: S3DestinationUpdate | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function fromElasticsearchDestinationUpdate(input?: ElasticsearchDestinationUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    BufferingHints: fromElasticsearchBufferingHints(input["BufferingHints"]),
    RetryOptions: fromElasticsearchRetryOptions(input["RetryOptions"]),
    S3Update: fromS3DestinationUpdate(input["S3Update"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface SplunkDestinationUpdate {
  HECEndpoint?: string | null;
  HECEndpointType?: HECEndpointType | null;
  HECToken?: string | null;
  HECAcknowledgmentTimeoutInSeconds?: number | null;
  RetryOptions?: SplunkRetryOptions | null;
  S3BackupMode?: SplunkS3BackupMode | null;
  S3Update?: S3DestinationUpdate | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function fromSplunkDestinationUpdate(input?: SplunkDestinationUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    RetryOptions: fromSplunkRetryOptions(input["RetryOptions"]),
    S3Update: fromS3DestinationUpdate(input["S3Update"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
  }
}

// refs: 1 - tags: input, named, interface
export interface HttpEndpointDestinationUpdate {
  EndpointConfiguration?: HttpEndpointConfiguration | null;
  BufferingHints?: HttpEndpointBufferingHints | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  RequestConfiguration?: HttpEndpointRequestConfiguration | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  RoleARN?: string | null;
  RetryOptions?: HttpEndpointRetryOptions | null;
  S3BackupMode?: HttpEndpointS3BackupMode | null;
  S3Update?: S3DestinationUpdate | null;
}
function fromHttpEndpointDestinationUpdate(input?: HttpEndpointDestinationUpdate | null): JSONValue {
  if (!input) return input;
  return {...input,
    EndpointConfiguration: fromHttpEndpointConfiguration(input["EndpointConfiguration"]),
    BufferingHints: fromHttpEndpointBufferingHints(input["BufferingHints"]),
    CloudWatchLoggingOptions: fromCloudWatchLoggingOptions(input["CloudWatchLoggingOptions"]),
    RequestConfiguration: fromHttpEndpointRequestConfiguration(input["RequestConfiguration"]),
    ProcessingConfiguration: fromProcessingConfiguration(input["ProcessingConfiguration"]),
    RetryOptions: fromHttpEndpointRetryOptions(input["RetryOptions"]),
    S3Update: fromS3DestinationUpdate(input["S3Update"]),
  }
}

// refs: 1 - tags: output, named, interface
export interface DeliveryStreamDescription {
  DeliveryStreamName: string;
  DeliveryStreamARN: string;
  DeliveryStreamStatus: DeliveryStreamStatus;
  FailureDescription?: FailureDescription | null;
  DeliveryStreamEncryptionConfiguration?: DeliveryStreamEncryptionConfiguration | null;
  DeliveryStreamType: DeliveryStreamType;
  VersionId: string;
  CreateTimestamp?: Date | number | null;
  LastUpdateTimestamp?: Date | number | null;
  Source?: SourceDescription | null;
  Destinations: DestinationDescription[];
  HasMoreDestinations: boolean;
}
function toDeliveryStreamDescription(root: JSONValue): DeliveryStreamDescription {
  return prt.readObj({
    required: {
      "DeliveryStreamName": "s",
      "DeliveryStreamARN": "s",
      "DeliveryStreamStatus": toDeliveryStreamStatus,
      "DeliveryStreamType": toDeliveryStreamType,
      "VersionId": "s",
      "Destinations": [toDestinationDescription],
      "HasMoreDestinations": "b",
    },
    optional: {
      "FailureDescription": toFailureDescription,
      "DeliveryStreamEncryptionConfiguration": toDeliveryStreamEncryptionConfiguration,
      "CreateTimestamp": "d",
      "LastUpdateTimestamp": "d",
      "Source": toSourceDescription,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DeliveryStreamStatus =
| "CREATING"
| "CREATING_FAILED"
| "DELETING"
| "DELETING_FAILED"
| "ACTIVE"
;
function toDeliveryStreamStatus(root: JSONValue): DeliveryStreamStatus | null {
  return ( false
    || root == "CREATING"
    || root == "CREATING_FAILED"
    || root == "DELETING"
    || root == "DELETING_FAILED"
    || root == "ACTIVE"
  ) ? root : null;
}

// refs: 2 - tags: output, named, interface
export interface FailureDescription {
  Type: DeliveryStreamFailureType;
  Details: string;
}
function toFailureDescription(root: JSONValue): FailureDescription {
  return prt.readObj({
    required: {
      "Type": toDeliveryStreamFailureType,
      "Details": "s",
    },
    optional: {},
  }, root);
}

// refs: 2 - tags: output, named, enum
export type DeliveryStreamFailureType =
| "RETIRE_KMS_GRANT_FAILED"
| "CREATE_KMS_GRANT_FAILED"
| "KMS_ACCESS_DENIED"
| "DISABLED_KMS_KEY"
| "INVALID_KMS_KEY"
| "KMS_KEY_NOT_FOUND"
| "KMS_OPT_IN_REQUIRED"
| "CREATE_ENI_FAILED"
| "DELETE_ENI_FAILED"
| "SUBNET_NOT_FOUND"
| "SECURITY_GROUP_NOT_FOUND"
| "ENI_ACCESS_DENIED"
| "SUBNET_ACCESS_DENIED"
| "SECURITY_GROUP_ACCESS_DENIED"
| "UNKNOWN_ERROR"
;
function toDeliveryStreamFailureType(root: JSONValue): DeliveryStreamFailureType | null {
  return ( false
    || root == "RETIRE_KMS_GRANT_FAILED"
    || root == "CREATE_KMS_GRANT_FAILED"
    || root == "KMS_ACCESS_DENIED"
    || root == "DISABLED_KMS_KEY"
    || root == "INVALID_KMS_KEY"
    || root == "KMS_KEY_NOT_FOUND"
    || root == "KMS_OPT_IN_REQUIRED"
    || root == "CREATE_ENI_FAILED"
    || root == "DELETE_ENI_FAILED"
    || root == "SUBNET_NOT_FOUND"
    || root == "SECURITY_GROUP_NOT_FOUND"
    || root == "ENI_ACCESS_DENIED"
    || root == "SUBNET_ACCESS_DENIED"
    || root == "SECURITY_GROUP_ACCESS_DENIED"
    || root == "UNKNOWN_ERROR"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface DeliveryStreamEncryptionConfiguration {
  KeyARN?: string | null;
  KeyType?: KeyType | null;
  Status?: DeliveryStreamEncryptionStatus | null;
  FailureDescription?: FailureDescription | null;
}
function toDeliveryStreamEncryptionConfiguration(root: JSONValue): DeliveryStreamEncryptionConfiguration {
  return prt.readObj({
    required: {},
    optional: {
      "KeyARN": "s",
      "KeyType": toKeyType,
      "Status": toDeliveryStreamEncryptionStatus,
      "FailureDescription": toFailureDescription,
    },
  }, root);
}

// refs: 1 - tags: output, named, enum
export type DeliveryStreamEncryptionStatus =
| "ENABLED"
| "ENABLING"
| "ENABLING_FAILED"
| "DISABLED"
| "DISABLING"
| "DISABLING_FAILED"
;
function toDeliveryStreamEncryptionStatus(root: JSONValue): DeliveryStreamEncryptionStatus | null {
  return ( false
    || root == "ENABLED"
    || root == "ENABLING"
    || root == "ENABLING_FAILED"
    || root == "DISABLED"
    || root == "DISABLING"
    || root == "DISABLING_FAILED"
  ) ? root : null;
}

// refs: 1 - tags: output, named, interface
export interface SourceDescription {
  KinesisStreamSourceDescription?: KinesisStreamSourceDescription | null;
}
function toSourceDescription(root: JSONValue): SourceDescription {
  return prt.readObj({
    required: {},
    optional: {
      "KinesisStreamSourceDescription": toKinesisStreamSourceDescription,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface KinesisStreamSourceDescription {
  KinesisStreamARN?: string | null;
  RoleARN?: string | null;
  DeliveryStartTimestamp?: Date | number | null;
}
function toKinesisStreamSourceDescription(root: JSONValue): KinesisStreamSourceDescription {
  return prt.readObj({
    required: {},
    optional: {
      "KinesisStreamARN": "s",
      "RoleARN": "s",
      "DeliveryStartTimestamp": "d",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface DestinationDescription {
  DestinationId: string;
  S3DestinationDescription?: S3DestinationDescription | null;
  ExtendedS3DestinationDescription?: ExtendedS3DestinationDescription | null;
  RedshiftDestinationDescription?: RedshiftDestinationDescription | null;
  ElasticsearchDestinationDescription?: ElasticsearchDestinationDescription | null;
  SplunkDestinationDescription?: SplunkDestinationDescription | null;
  HttpEndpointDestinationDescription?: HttpEndpointDestinationDescription | null;
}
function toDestinationDescription(root: JSONValue): DestinationDescription {
  return prt.readObj({
    required: {
      "DestinationId": "s",
    },
    optional: {
      "S3DestinationDescription": toS3DestinationDescription,
      "ExtendedS3DestinationDescription": toExtendedS3DestinationDescription,
      "RedshiftDestinationDescription": toRedshiftDestinationDescription,
      "ElasticsearchDestinationDescription": toElasticsearchDestinationDescription,
      "SplunkDestinationDescription": toSplunkDestinationDescription,
      "HttpEndpointDestinationDescription": toHttpEndpointDestinationDescription,
    },
  }, root);
}

// refs: 7 - tags: output, named, interface
export interface S3DestinationDescription {
  RoleARN: string;
  BucketARN: string;
  Prefix?: string | null;
  ErrorOutputPrefix?: string | null;
  BufferingHints: BufferingHints;
  CompressionFormat: CompressionFormat;
  EncryptionConfiguration: EncryptionConfiguration;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function toS3DestinationDescription(root: JSONValue): S3DestinationDescription {
  return prt.readObj({
    required: {
      "RoleARN": "s",
      "BucketARN": "s",
      "BufferingHints": toBufferingHints,
      "CompressionFormat": toCompressionFormat,
      "EncryptionConfiguration": toEncryptionConfiguration,
    },
    optional: {
      "Prefix": "s",
      "ErrorOutputPrefix": "s",
      "CloudWatchLoggingOptions": toCloudWatchLoggingOptions,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ExtendedS3DestinationDescription {
  RoleARN: string;
  BucketARN: string;
  Prefix?: string | null;
  ErrorOutputPrefix?: string | null;
  BufferingHints: BufferingHints;
  CompressionFormat: CompressionFormat;
  EncryptionConfiguration: EncryptionConfiguration;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  S3BackupMode?: S3BackupMode | null;
  S3BackupDescription?: S3DestinationDescription | null;
  DataFormatConversionConfiguration?: DataFormatConversionConfiguration | null;
}
function toExtendedS3DestinationDescription(root: JSONValue): ExtendedS3DestinationDescription {
  return prt.readObj({
    required: {
      "RoleARN": "s",
      "BucketARN": "s",
      "BufferingHints": toBufferingHints,
      "CompressionFormat": toCompressionFormat,
      "EncryptionConfiguration": toEncryptionConfiguration,
    },
    optional: {
      "Prefix": "s",
      "ErrorOutputPrefix": "s",
      "CloudWatchLoggingOptions": toCloudWatchLoggingOptions,
      "ProcessingConfiguration": toProcessingConfiguration,
      "S3BackupMode": toS3BackupMode,
      "S3BackupDescription": toS3DestinationDescription,
      "DataFormatConversionConfiguration": toDataFormatConversionConfiguration,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface RedshiftDestinationDescription {
  RoleARN: string;
  ClusterJDBCURL: string;
  CopyCommand: CopyCommand;
  Username: string;
  RetryOptions?: RedshiftRetryOptions | null;
  S3DestinationDescription: S3DestinationDescription;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  S3BackupMode?: RedshiftS3BackupMode | null;
  S3BackupDescription?: S3DestinationDescription | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function toRedshiftDestinationDescription(root: JSONValue): RedshiftDestinationDescription {
  return prt.readObj({
    required: {
      "RoleARN": "s",
      "ClusterJDBCURL": "s",
      "CopyCommand": toCopyCommand,
      "Username": "s",
      "S3DestinationDescription": toS3DestinationDescription,
    },
    optional: {
      "RetryOptions": toRedshiftRetryOptions,
      "ProcessingConfiguration": toProcessingConfiguration,
      "S3BackupMode": toRedshiftS3BackupMode,
      "S3BackupDescription": toS3DestinationDescription,
      "CloudWatchLoggingOptions": toCloudWatchLoggingOptions,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface ElasticsearchDestinationDescription {
  RoleARN?: string | null;
  DomainARN?: string | null;
  ClusterEndpoint?: string | null;
  IndexName?: string | null;
  TypeName?: string | null;
  IndexRotationPeriod?: ElasticsearchIndexRotationPeriod | null;
  BufferingHints?: ElasticsearchBufferingHints | null;
  RetryOptions?: ElasticsearchRetryOptions | null;
  S3BackupMode?: ElasticsearchS3BackupMode | null;
  S3DestinationDescription?: S3DestinationDescription | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  VpcConfigurationDescription?: VpcConfigurationDescription | null;
}
function toElasticsearchDestinationDescription(root: JSONValue): ElasticsearchDestinationDescription {
  return prt.readObj({
    required: {},
    optional: {
      "RoleARN": "s",
      "DomainARN": "s",
      "ClusterEndpoint": "s",
      "IndexName": "s",
      "TypeName": "s",
      "IndexRotationPeriod": toElasticsearchIndexRotationPeriod,
      "BufferingHints": toElasticsearchBufferingHints,
      "RetryOptions": toElasticsearchRetryOptions,
      "S3BackupMode": toElasticsearchS3BackupMode,
      "S3DestinationDescription": toS3DestinationDescription,
      "ProcessingConfiguration": toProcessingConfiguration,
      "CloudWatchLoggingOptions": toCloudWatchLoggingOptions,
      "VpcConfigurationDescription": toVpcConfigurationDescription,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface VpcConfigurationDescription {
  SubnetIds: string[];
  RoleARN: string;
  SecurityGroupIds: string[];
  VpcId: string;
}
function toVpcConfigurationDescription(root: JSONValue): VpcConfigurationDescription {
  return prt.readObj({
    required: {
      "SubnetIds": ["s"],
      "RoleARN": "s",
      "SecurityGroupIds": ["s"],
      "VpcId": "s",
    },
    optional: {},
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface SplunkDestinationDescription {
  HECEndpoint?: string | null;
  HECEndpointType?: HECEndpointType | null;
  HECToken?: string | null;
  HECAcknowledgmentTimeoutInSeconds?: number | null;
  RetryOptions?: SplunkRetryOptions | null;
  S3BackupMode?: SplunkS3BackupMode | null;
  S3DestinationDescription?: S3DestinationDescription | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
}
function toSplunkDestinationDescription(root: JSONValue): SplunkDestinationDescription {
  return prt.readObj({
    required: {},
    optional: {
      "HECEndpoint": "s",
      "HECEndpointType": toHECEndpointType,
      "HECToken": "s",
      "HECAcknowledgmentTimeoutInSeconds": "n",
      "RetryOptions": toSplunkRetryOptions,
      "S3BackupMode": toSplunkS3BackupMode,
      "S3DestinationDescription": toS3DestinationDescription,
      "ProcessingConfiguration": toProcessingConfiguration,
      "CloudWatchLoggingOptions": toCloudWatchLoggingOptions,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HttpEndpointDestinationDescription {
  EndpointConfiguration?: HttpEndpointDescription | null;
  BufferingHints?: HttpEndpointBufferingHints | null;
  CloudWatchLoggingOptions?: CloudWatchLoggingOptions | null;
  RequestConfiguration?: HttpEndpointRequestConfiguration | null;
  ProcessingConfiguration?: ProcessingConfiguration | null;
  RoleARN?: string | null;
  RetryOptions?: HttpEndpointRetryOptions | null;
  S3BackupMode?: HttpEndpointS3BackupMode | null;
  S3DestinationDescription?: S3DestinationDescription | null;
}
function toHttpEndpointDestinationDescription(root: JSONValue): HttpEndpointDestinationDescription {
  return prt.readObj({
    required: {},
    optional: {
      "EndpointConfiguration": toHttpEndpointDescription,
      "BufferingHints": toHttpEndpointBufferingHints,
      "CloudWatchLoggingOptions": toCloudWatchLoggingOptions,
      "RequestConfiguration": toHttpEndpointRequestConfiguration,
      "ProcessingConfiguration": toProcessingConfiguration,
      "RoleARN": "s",
      "RetryOptions": toHttpEndpointRetryOptions,
      "S3BackupMode": toHttpEndpointS3BackupMode,
      "S3DestinationDescription": toS3DestinationDescription,
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface HttpEndpointDescription {
  Url?: string | null;
  Name?: string | null;
}
function toHttpEndpointDescription(root: JSONValue): HttpEndpointDescription {
  return prt.readObj({
    required: {},
    optional: {
      "Url": "s",
      "Name": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PutRecordBatchResponseEntry {
  RecordId?: string | null;
  ErrorCode?: string | null;
  ErrorMessage?: string | null;
}
function toPutRecordBatchResponseEntry(root: JSONValue): PutRecordBatchResponseEntry {
  return prt.readObj({
    required: {},
    optional: {
      "RecordId": "s",
      "ErrorCode": "s",
      "ErrorMessage": "s",
    },
  }, root);
}
