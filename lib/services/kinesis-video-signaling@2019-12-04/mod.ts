// Autogenerated API client for: Amazon Kinesis Video Signaling Channels

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class KinesisVideoSignalingChannels {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(KinesisVideoSignalingChannels.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2019-12-04",
    "endpointPrefix": "kinesisvideo",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon Kinesis Video Signaling Channels",
    "serviceFullName": "Amazon Kinesis Video Signaling Channels",
    "serviceId": "Kinesis Video Signaling",
    "signatureVersion": "v4",
    "uid": "kinesis-video-signaling-2019-12-04"
  };

  async getIceServerConfig(
    {abortSignal, ...params}: RequestConfig & GetIceServerConfigRequest,
  ): Promise<GetIceServerConfigResponse> {
    const body: jsonP.JSONObject = params ? {
      ChannelARN: params["ChannelARN"],
      ClientId: params["ClientId"],
      Service: params["Service"],
      Username: params["Username"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "GetIceServerConfig",
      requestUri: "/v1/get-ice-server-config",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "IceServerList": [toIceServer],
        },
      }, await resp.json()),
  };
  }

  async sendAlexaOfferToMaster(
    {abortSignal, ...params}: RequestConfig & SendAlexaOfferToMasterRequest,
  ): Promise<SendAlexaOfferToMasterResponse> {
    const body: jsonP.JSONObject = params ? {
      ChannelARN: params["ChannelARN"],
      SenderClientId: params["SenderClientId"],
      MessagePayload: params["MessagePayload"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "SendAlexaOfferToMaster",
      requestUri: "/v1/send-alexa-offer-to-master",
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Answer": "s",
        },
      }, await resp.json()),
  };
  }

}

// refs: 1 - tags: named, input
export interface GetIceServerConfigRequest {
  ChannelARN: string;
  ClientId?: string | null;
  Service?: Service | null;
  Username?: string | null;
}

// refs: 1 - tags: named, input
export interface SendAlexaOfferToMasterRequest {
  ChannelARN: string;
  SenderClientId: string;
  MessagePayload: string;
}

// refs: 1 - tags: named, output
export interface GetIceServerConfigResponse {
  IceServerList?: IceServer[] | null;
}

// refs: 1 - tags: named, output
export interface SendAlexaOfferToMasterResponse {
  Answer?: string | null;
}

// refs: 1 - tags: input, named, enum
export type Service =
| "TURN"
| cmnP.UnexpectedEnumValue;

// refs: 1 - tags: output, named, interface
export interface IceServer {
  Uris?: string[] | null;
  Username?: string | null;
  Password?: string | null;
  Ttl?: number | null;
}
function toIceServer(root: jsonP.JSONValue): IceServer {
  return jsonP.readObj({
    required: {},
    optional: {
      "Uris": ["s"],
      "Username": "s",
      "Password": "s",
      "Ttl": "n",
    },
  }, root);
}
