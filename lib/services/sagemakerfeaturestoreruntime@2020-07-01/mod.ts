// Autogenerated API client for: Amazon SageMaker Feature Store Runtime

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as client from "../../client/common.ts";
import type * as s from "./structs.ts";
import * as jsonP from "../../encoding/json.ts";

export default class SageMakerFeatureStoreRuntime {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SageMakerFeatureStoreRuntime.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2020-07-01",
    "endpointPrefix": "featurestore-runtime.sagemaker",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon SageMaker Feature Store Runtime",
    "serviceId": "SageMaker FeatureStore Runtime",
    "signatureVersion": "v4",
    "signingName": "sagemaker",
    "uid": "sagemaker-featurestore-runtime-2020-07-01"
  };

  async deleteRecord(
    {abortSignal, ...params}: RequestConfig & s.DeleteRecordRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    query.set("RecordIdentifierValueAsString", params["RecordIdentifierValueAsString"]?.toString() ?? "");
    query.set("EventTime", params["EventTime"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "DeleteRecord",
      method: "DELETE",
      requestUri: cmnP.encodePath`/FeatureGroup/${params["FeatureGroupName"]}`,
    });
  }

  async getRecord(
    {abortSignal, ...params}: RequestConfig & s.GetRecordRequest,
  ): Promise<s.GetRecordResponse> {
    const query = new URLSearchParams;
    query.set("RecordIdentifierValueAsString", params["RecordIdentifierValueAsString"]?.toString() ?? "");
    for (const item of params["FeatureNames"] ?? []) {
      query.append("FeatureName", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "GetRecord",
      method: "GET",
      requestUri: cmnP.encodePath`/FeatureGroup/${params["FeatureGroupName"]}`,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Record": [toFeatureValue],
      },
    }, await resp.json());
  }

  async putRecord(
    {abortSignal, ...params}: RequestConfig & s.PutRecordRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      Record: params["Record"]?.map(x => fromFeatureValue(x)),
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutRecord",
      method: "PUT",
      requestUri: cmnP.encodePath`/FeatureGroup/${params["FeatureGroupName"]}`,
    });
  }

}

function fromFeatureValue(input?: s.FeatureValue | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    FeatureName: input["FeatureName"],
    ValueAsString: input["ValueAsString"],
  }
}
function toFeatureValue(root: jsonP.JSONValue): s.FeatureValue {
  return jsonP.readObj({
    required: {
      "FeatureName": "s",
      "ValueAsString": "s",
    },
    optional: {},
  }, root);
}
