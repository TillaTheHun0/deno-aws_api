// Autogenerated API client for: AWS MediaTailor

import type { ServiceClient, ApiFactory, ApiMetadata } from '../../client/common.ts';
interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";

export default class MediaTailor {
  #client: ServiceClient;
  constructor(apiFactory: ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MediaTailor.ApiMetadata);
  }

  static ApiMetadata: ApiMetadata = {
    "apiVersion": "2018-04-23",
    "endpointPrefix": "api.mediatailor",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "MediaTailor",
    "serviceFullName": "AWS MediaTailor",
    "serviceId": "MediaTailor",
    "signatureVersion": "v4",
    "signingName": "mediatailor",
    "uid": "mediatailor-2018-04-23"
  };

  async deletePlaybackConfiguration(
    {abortSignal, ...params}: RequestConfig & DeletePlaybackConfigurationRequest,
  ): Promise<DeletePlaybackConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePlaybackConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/playbackConfiguration/${params["Name"]}`,
      responseCode: 204,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {},
      }, await resp.json()),
  };
  }

  async getPlaybackConfiguration(
    {abortSignal, ...params}: RequestConfig & GetPlaybackConfigurationRequest,
  ): Promise<GetPlaybackConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPlaybackConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/playbackConfiguration/${params["Name"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "AdDecisionServerUrl": "s",
          "AvailSuppression": toAvailSuppression,
          "Bumper": toBumper,
          "CdnConfiguration": toCdnConfiguration,
          "DashConfiguration": toDashConfiguration,
          "HlsConfiguration": toHlsConfiguration,
          "LivePreRollConfiguration": toLivePreRollConfiguration,
          "ManifestProcessingRules": toManifestProcessingRules,
          "Name": "s",
          "PersonalizationThresholdSeconds": "n",
          "PlaybackConfigurationArn": "s",
          "PlaybackEndpointPrefix": "s",
          "SessionInitializationEndpointPrefix": "s",
          "SlateAdUrl": "s",
          "Tags": x => jsonP.readMap(String, String, x),
          "TranscodeProfileName": "s",
          "VideoContentSourceUrl": "s",
        },
      }, await resp.json()),
  };
  }

  async listPlaybackConfigurations(
    {abortSignal, ...params}: RequestConfig & ListPlaybackConfigurationsRequest = {},
  ): Promise<ListPlaybackConfigurationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPlaybackConfigurations",
      method: "GET",
      requestUri: "/playbackConfigurations",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Items": [toPlaybackConfiguration],
          "NextToken": "s",
        },
      }, await resp.json()),
  };
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & ListTagsForResourceRequest,
  ): Promise<ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "Tags": x => jsonP.readMap(String, String, x),
        },
      }, await resp.json()),
  };
  }

  async putPlaybackConfiguration(
    {abortSignal, ...params}: RequestConfig & PutPlaybackConfigurationRequest = {},
  ): Promise<PutPlaybackConfigurationResponse> {
    const body: jsonP.JSONObject = params ? {
      AdDecisionServerUrl: params["AdDecisionServerUrl"],
      AvailSuppression: fromAvailSuppression(params["AvailSuppression"]),
      Bumper: fromBumper(params["Bumper"]),
      CdnConfiguration: fromCdnConfiguration(params["CdnConfiguration"]),
      DashConfiguration: fromDashConfigurationForPut(params["DashConfiguration"]),
      LivePreRollConfiguration: fromLivePreRollConfiguration(params["LivePreRollConfiguration"]),
      ManifestProcessingRules: fromManifestProcessingRules(params["ManifestProcessingRules"]),
      Name: params["Name"],
      PersonalizationThresholdSeconds: params["PersonalizationThresholdSeconds"],
      SlateAdUrl: params["SlateAdUrl"],
      tags: params["Tags"],
      TranscodeProfileName: params["TranscodeProfileName"],
      VideoContentSourceUrl: params["VideoContentSourceUrl"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPlaybackConfiguration",
      method: "PUT",
      requestUri: "/playbackConfiguration",
      responseCode: 200,
    });
  return {
    ...jsonP.readObj({
        required: {},
        optional: {
          "AdDecisionServerUrl": "s",
          "AvailSuppression": toAvailSuppression,
          "Bumper": toBumper,
          "CdnConfiguration": toCdnConfiguration,
          "DashConfiguration": toDashConfiguration,
          "HlsConfiguration": toHlsConfiguration,
          "LivePreRollConfiguration": toLivePreRollConfiguration,
          "ManifestProcessingRules": toManifestProcessingRules,
          "Name": "s",
          "PersonalizationThresholdSeconds": "n",
          "PlaybackConfigurationArn": "s",
          "PlaybackEndpointPrefix": "s",
          "SessionInitializationEndpointPrefix": "s",
          "SlateAdUrl": "s",
          "Tags": x => jsonP.readMap(String, String, x),
          "TranscodeProfileName": "s",
          "VideoContentSourceUrl": "s",
        },
      }, await resp.json()),
  };
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = params ? {
      tags: params["Tags"],
    } : {};
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

}

// refs: 1 - tags: named, input
export interface DeletePlaybackConfigurationRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface GetPlaybackConfigurationRequest {
  Name: string;
}

// refs: 1 - tags: named, input
export interface ListPlaybackConfigurationsRequest {
  MaxResults?: number | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, input
export interface ListTagsForResourceRequest {
  ResourceArn: string;
}

// refs: 1 - tags: named, input
export interface PutPlaybackConfigurationRequest {
  AdDecisionServerUrl?: string | null;
  AvailSuppression?: AvailSuppression | null;
  Bumper?: Bumper | null;
  CdnConfiguration?: CdnConfiguration | null;
  DashConfiguration?: DashConfigurationForPut | null;
  LivePreRollConfiguration?: LivePreRollConfiguration | null;
  ManifestProcessingRules?: ManifestProcessingRules | null;
  Name?: string | null;
  PersonalizationThresholdSeconds?: number | null;
  SlateAdUrl?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  TranscodeProfileName?: string | null;
  VideoContentSourceUrl?: string | null;
}

// refs: 1 - tags: named, input
export interface TagResourceRequest {
  ResourceArn: string;
  Tags: { [key: string]: string | null | undefined };
}

// refs: 1 - tags: named, input
export interface UntagResourceRequest {
  ResourceArn: string;
  TagKeys: string[];
}

// refs: 1 - tags: named, output
export interface DeletePlaybackConfigurationResponse {
}

// refs: 1 - tags: named, output
export interface GetPlaybackConfigurationResponse {
  AdDecisionServerUrl?: string | null;
  AvailSuppression?: AvailSuppression | null;
  Bumper?: Bumper | null;
  CdnConfiguration?: CdnConfiguration | null;
  DashConfiguration?: DashConfiguration | null;
  HlsConfiguration?: HlsConfiguration | null;
  LivePreRollConfiguration?: LivePreRollConfiguration | null;
  ManifestProcessingRules?: ManifestProcessingRules | null;
  Name?: string | null;
  PersonalizationThresholdSeconds?: number | null;
  PlaybackConfigurationArn?: string | null;
  PlaybackEndpointPrefix?: string | null;
  SessionInitializationEndpointPrefix?: string | null;
  SlateAdUrl?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  TranscodeProfileName?: string | null;
  VideoContentSourceUrl?: string | null;
}

// refs: 1 - tags: named, output
export interface ListPlaybackConfigurationsResponse {
  Items?: PlaybackConfiguration[] | null;
  NextToken?: string | null;
}

// refs: 1 - tags: named, output
export interface ListTagsForResourceResponse {
  Tags?: { [key: string]: string | null | undefined } | null;
}

// refs: 1 - tags: named, output
export interface PutPlaybackConfigurationResponse {
  AdDecisionServerUrl?: string | null;
  AvailSuppression?: AvailSuppression | null;
  Bumper?: Bumper | null;
  CdnConfiguration?: CdnConfiguration | null;
  DashConfiguration?: DashConfiguration | null;
  HlsConfiguration?: HlsConfiguration | null;
  LivePreRollConfiguration?: LivePreRollConfiguration | null;
  ManifestProcessingRules?: ManifestProcessingRules | null;
  Name?: string | null;
  PersonalizationThresholdSeconds?: number | null;
  PlaybackConfigurationArn?: string | null;
  PlaybackEndpointPrefix?: string | null;
  SessionInitializationEndpointPrefix?: string | null;
  SlateAdUrl?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  TranscodeProfileName?: string | null;
  VideoContentSourceUrl?: string | null;
}

// refs: 4 - tags: input, named, interface, output
export interface AvailSuppression {
  Mode?: Mode | null;
  Value?: string | null;
}
function fromAvailSuppression(input?: AvailSuppression | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Mode: input["Mode"],
    Value: input["Value"],
  }
}
function toAvailSuppression(root: jsonP.JSONValue): AvailSuppression {
  return jsonP.readObj({
    required: {},
    optional: {
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<Mode>(x),
      "Value": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, enum, output
export type Mode =
| "OFF"
| "BEHIND_LIVE_EDGE"
| cmnP.UnexpectedEnumValue;

// refs: 4 - tags: input, named, interface, output
export interface Bumper {
  EndUrl?: string | null;
  StartUrl?: string | null;
}
function fromBumper(input?: Bumper | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EndUrl: input["EndUrl"],
    StartUrl: input["StartUrl"],
  }
}
function toBumper(root: jsonP.JSONValue): Bumper {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndUrl": "s",
      "StartUrl": "s",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface CdnConfiguration {
  AdSegmentUrlPrefix?: string | null;
  ContentSegmentUrlPrefix?: string | null;
}
function fromCdnConfiguration(input?: CdnConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdSegmentUrlPrefix: input["AdSegmentUrlPrefix"],
    ContentSegmentUrlPrefix: input["ContentSegmentUrlPrefix"],
  }
}
function toCdnConfiguration(root: jsonP.JSONValue): CdnConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdSegmentUrlPrefix": "s",
      "ContentSegmentUrlPrefix": "s",
    },
  }, root);
}

// refs: 1 - tags: input, named, interface
export interface DashConfigurationForPut {
  MpdLocation?: string | null;
  OriginManifestType?: OriginManifestType | null;
}
function fromDashConfigurationForPut(input?: DashConfigurationForPut | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MpdLocation: input["MpdLocation"],
    OriginManifestType: input["OriginManifestType"],
  }
}

// refs: 4 - tags: input, named, enum, output
export type OriginManifestType =
| "SINGLE_PERIOD"
| "MULTI_PERIOD"
| cmnP.UnexpectedEnumValue;

// refs: 3 - tags: input, named, interface, output
export interface LivePreRollConfiguration {
  AdDecisionServerUrl?: string | null;
  MaxDurationSeconds?: number | null;
}
function fromLivePreRollConfiguration(input?: LivePreRollConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdDecisionServerUrl: input["AdDecisionServerUrl"],
    MaxDurationSeconds: input["MaxDurationSeconds"],
  }
}
function toLivePreRollConfiguration(root: jsonP.JSONValue): LivePreRollConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdDecisionServerUrl": "s",
      "MaxDurationSeconds": "n",
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface ManifestProcessingRules {
  AdMarkerPassthrough?: AdMarkerPassthrough | null;
}
function fromManifestProcessingRules(input?: ManifestProcessingRules | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdMarkerPassthrough: fromAdMarkerPassthrough(input["AdMarkerPassthrough"]),
  }
}
function toManifestProcessingRules(root: jsonP.JSONValue): ManifestProcessingRules {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdMarkerPassthrough": toAdMarkerPassthrough,
    },
  }, root);
}

// refs: 4 - tags: input, named, interface, output
export interface AdMarkerPassthrough {
  Enabled?: boolean | null;
}
function fromAdMarkerPassthrough(input?: AdMarkerPassthrough | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
  }
}
function toAdMarkerPassthrough(root: jsonP.JSONValue): AdMarkerPassthrough {
  return jsonP.readObj({
    required: {},
    optional: {
      "Enabled": "b",
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface DashConfiguration {
  ManifestEndpointPrefix?: string | null;
  MpdLocation?: string | null;
  OriginManifestType?: OriginManifestType | null;
}
function toDashConfiguration(root: jsonP.JSONValue): DashConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ManifestEndpointPrefix": "s",
      "MpdLocation": "s",
      "OriginManifestType": (x: jsonP.JSONValue) => cmnP.readEnum<OriginManifestType>(x),
    },
  }, root);
}

// refs: 3 - tags: output, named, interface
export interface HlsConfiguration {
  ManifestEndpointPrefix?: string | null;
}
function toHlsConfiguration(root: jsonP.JSONValue): HlsConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ManifestEndpointPrefix": "s",
    },
  }, root);
}

// refs: 1 - tags: output, named, interface
export interface PlaybackConfiguration {
  AdDecisionServerUrl?: string | null;
  AvailSuppression?: AvailSuppression | null;
  Bumper?: Bumper | null;
  CdnConfiguration?: CdnConfiguration | null;
  DashConfiguration?: DashConfiguration | null;
  HlsConfiguration?: HlsConfiguration | null;
  ManifestProcessingRules?: ManifestProcessingRules | null;
  Name?: string | null;
  PlaybackConfigurationArn?: string | null;
  PlaybackEndpointPrefix?: string | null;
  SessionInitializationEndpointPrefix?: string | null;
  SlateAdUrl?: string | null;
  Tags?: { [key: string]: string | null | undefined } | null;
  TranscodeProfileName?: string | null;
  PersonalizationThresholdSeconds?: number | null;
  VideoContentSourceUrl?: string | null;
}
function toPlaybackConfiguration(root: jsonP.JSONValue): PlaybackConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdDecisionServerUrl": "s",
      "AvailSuppression": toAvailSuppression,
      "Bumper": toBumper,
      "CdnConfiguration": toCdnConfiguration,
      "DashConfiguration": toDashConfiguration,
      "HlsConfiguration": toHlsConfiguration,
      "ManifestProcessingRules": toManifestProcessingRules,
      "Name": "s",
      "PlaybackConfigurationArn": "s",
      "PlaybackEndpointPrefix": "s",
      "SessionInitializationEndpointPrefix": "s",
      "SlateAdUrl": "s",
      "Tags": x => jsonP.readMap(String, String, x),
      "TranscodeProfileName": "s",
      "PersonalizationThresholdSeconds": "n",
      "VideoContentSourceUrl": "s",
    },
  }, root);
}
