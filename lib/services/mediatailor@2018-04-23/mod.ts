// Autogenerated API client for: AWS MediaTailor

interface RequestConfig {
  abortSignal?: AbortSignal;
}

import * as client from "../../client/common.ts";
import * as cmnP from "../../encoding/common.ts";
import * as jsonP from "../../encoding/json.ts";
import type * as s from "./structs.ts";

export default class MediaTailor {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(MediaTailor.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2018-04-23",
    "endpointPrefix": "api.mediatailor",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "MediaTailor",
    "serviceFullName": "AWS MediaTailor",
    "serviceId": "MediaTailor",
    "signatureVersion": "v4",
    "signingName": "mediatailor",
    "uid": "mediatailor-2018-04-23"
  };

  async deletePlaybackConfiguration(
    {abortSignal, ...params}: RequestConfig & s.DeletePlaybackConfigurationRequest,
  ): Promise<s.DeletePlaybackConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "DeletePlaybackConfiguration",
      method: "DELETE",
      requestUri: cmnP.encodePath`/playbackConfiguration/${params["Name"]}`,
      responseCode: 204,
    });
    return jsonP.readObj({
      required: {},
      optional: {},
    }, await resp.json());
  }

  async getPlaybackConfiguration(
    {abortSignal, ...params}: RequestConfig & s.GetPlaybackConfigurationRequest,
  ): Promise<s.GetPlaybackConfigurationResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "GetPlaybackConfiguration",
      method: "GET",
      requestUri: cmnP.encodePath`/playbackConfiguration/${params["Name"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AdDecisionServerUrl": "s",
        "AvailSuppression": toAvailSuppression,
        "Bumper": toBumper,
        "CdnConfiguration": toCdnConfiguration,
        "DashConfiguration": toDashConfiguration,
        "HlsConfiguration": toHlsConfiguration,
        "LivePreRollConfiguration": toLivePreRollConfiguration,
        "ManifestProcessingRules": toManifestProcessingRules,
        "Name": "s",
        "PersonalizationThresholdSeconds": "n",
        "PlaybackConfigurationArn": "s",
        "PlaybackEndpointPrefix": "s",
        "SessionInitializationEndpointPrefix": "s",
        "SlateAdUrl": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "TranscodeProfileName": "s",
        "VideoContentSourceUrl": "s",
      },
    }, await resp.json());
  }

  async listPlaybackConfigurations(
    {abortSignal, ...params}: RequestConfig & s.ListPlaybackConfigurationsRequest = {},
  ): Promise<s.ListPlaybackConfigurationsResponse> {
    const query = new URLSearchParams;
    if (params["MaxResults"] != null) query.set("MaxResults", params["MaxResults"]?.toString() ?? "");
    if (params["NextToken"] != null) query.set("NextToken", params["NextToken"]?.toString() ?? "");
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "ListPlaybackConfigurations",
      method: "GET",
      requestUri: "/playbackConfigurations",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Items": [toPlaybackConfiguration],
        "NextToken": "s",
      },
    }, await resp.json());
  }

  async listTagsForResource(
    {abortSignal, ...params}: RequestConfig & s.ListTagsForResourceRequest,
  ): Promise<s.ListTagsForResourceResponse> {

    const resp = await this.#client.performRequest({
      abortSignal,
      action: "ListTagsForResource",
      method: "GET",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "Tags": x => jsonP.readMap(String, String, x),
      },
    }, await resp.json());
  }

  async putPlaybackConfiguration(
    {abortSignal, ...params}: RequestConfig & s.PutPlaybackConfigurationRequest = {},
  ): Promise<s.PutPlaybackConfigurationResponse> {
    const body: jsonP.JSONObject = {
      AdDecisionServerUrl: params["AdDecisionServerUrl"],
      AvailSuppression: fromAvailSuppression(params["AvailSuppression"]),
      Bumper: fromBumper(params["Bumper"]),
      CdnConfiguration: fromCdnConfiguration(params["CdnConfiguration"]),
      DashConfiguration: fromDashConfigurationForPut(params["DashConfiguration"]),
      LivePreRollConfiguration: fromLivePreRollConfiguration(params["LivePreRollConfiguration"]),
      ManifestProcessingRules: fromManifestProcessingRules(params["ManifestProcessingRules"]),
      Name: params["Name"],
      PersonalizationThresholdSeconds: params["PersonalizationThresholdSeconds"],
      SlateAdUrl: params["SlateAdUrl"],
      tags: params["Tags"],
      TranscodeProfileName: params["TranscodeProfileName"],
      VideoContentSourceUrl: params["VideoContentSourceUrl"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "PutPlaybackConfiguration",
      method: "PUT",
      requestUri: "/playbackConfiguration",
      responseCode: 200,
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "AdDecisionServerUrl": "s",
        "AvailSuppression": toAvailSuppression,
        "Bumper": toBumper,
        "CdnConfiguration": toCdnConfiguration,
        "DashConfiguration": toDashConfiguration,
        "HlsConfiguration": toHlsConfiguration,
        "LivePreRollConfiguration": toLivePreRollConfiguration,
        "ManifestProcessingRules": toManifestProcessingRules,
        "Name": "s",
        "PersonalizationThresholdSeconds": "n",
        "PlaybackConfigurationArn": "s",
        "PlaybackEndpointPrefix": "s",
        "SessionInitializationEndpointPrefix": "s",
        "SlateAdUrl": "s",
        "Tags": x => jsonP.readMap(String, String, x),
        "TranscodeProfileName": "s",
        "VideoContentSourceUrl": "s",
      },
    }, await resp.json());
  }

  async tagResource(
    {abortSignal, ...params}: RequestConfig & s.TagResourceRequest,
  ): Promise<void> {
    const body: jsonP.JSONObject = {
      tags: params["Tags"],
    };
    const resp = await this.#client.performRequest({
      abortSignal, body,
      action: "TagResource",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

  async untagResource(
    {abortSignal, ...params}: RequestConfig & s.UntagResourceRequest,
  ): Promise<void> {
    const query = new URLSearchParams;
    for (const item of params["TagKeys"]) {
      query.append("tagKeys", item?.toString() ?? "");
    }
    const resp = await this.#client.performRequest({
      abortSignal, query,
      action: "UntagResource",
      method: "DELETE",
      requestUri: cmnP.encodePath`/tags/${params["ResourceArn"]}`,
      responseCode: 204,
    });
  }

}

function fromAvailSuppression(input?: s.AvailSuppression | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Mode: input["Mode"],
    Value: input["Value"],
  }
}
function toAvailSuppression(root: jsonP.JSONValue): s.AvailSuppression {
  return jsonP.readObj({
    required: {},
    optional: {
      "Mode": (x: jsonP.JSONValue) => cmnP.readEnum<s.Mode>(x),
      "Value": "s",
    },
  }, root);
}

function fromBumper(input?: s.Bumper | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    EndUrl: input["EndUrl"],
    StartUrl: input["StartUrl"],
  }
}
function toBumper(root: jsonP.JSONValue): s.Bumper {
  return jsonP.readObj({
    required: {},
    optional: {
      "EndUrl": "s",
      "StartUrl": "s",
    },
  }, root);
}

function fromCdnConfiguration(input?: s.CdnConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdSegmentUrlPrefix: input["AdSegmentUrlPrefix"],
    ContentSegmentUrlPrefix: input["ContentSegmentUrlPrefix"],
  }
}
function toCdnConfiguration(root: jsonP.JSONValue): s.CdnConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdSegmentUrlPrefix": "s",
      "ContentSegmentUrlPrefix": "s",
    },
  }, root);
}

function fromDashConfigurationForPut(input?: s.DashConfigurationForPut | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    MpdLocation: input["MpdLocation"],
    OriginManifestType: input["OriginManifestType"],
  }
}

function fromLivePreRollConfiguration(input?: s.LivePreRollConfiguration | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdDecisionServerUrl: input["AdDecisionServerUrl"],
    MaxDurationSeconds: input["MaxDurationSeconds"],
  }
}
function toLivePreRollConfiguration(root: jsonP.JSONValue): s.LivePreRollConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdDecisionServerUrl": "s",
      "MaxDurationSeconds": "n",
    },
  }, root);
}

function fromManifestProcessingRules(input?: s.ManifestProcessingRules | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    AdMarkerPassthrough: fromAdMarkerPassthrough(input["AdMarkerPassthrough"]),
  }
}
function toManifestProcessingRules(root: jsonP.JSONValue): s.ManifestProcessingRules {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdMarkerPassthrough": toAdMarkerPassthrough,
    },
  }, root);
}

function fromAdMarkerPassthrough(input?: s.AdMarkerPassthrough | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Enabled: input["Enabled"],
  }
}
function toAdMarkerPassthrough(root: jsonP.JSONValue): s.AdMarkerPassthrough {
  return jsonP.readObj({
    required: {},
    optional: {
      "Enabled": "b",
    },
  }, root);
}

function toDashConfiguration(root: jsonP.JSONValue): s.DashConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ManifestEndpointPrefix": "s",
      "MpdLocation": "s",
      "OriginManifestType": (x: jsonP.JSONValue) => cmnP.readEnum<s.OriginManifestType>(x),
    },
  }, root);
}

function toHlsConfiguration(root: jsonP.JSONValue): s.HlsConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "ManifestEndpointPrefix": "s",
    },
  }, root);
}

function toPlaybackConfiguration(root: jsonP.JSONValue): s.PlaybackConfiguration {
  return jsonP.readObj({
    required: {},
    optional: {
      "AdDecisionServerUrl": "s",
      "AvailSuppression": toAvailSuppression,
      "Bumper": toBumper,
      "CdnConfiguration": toCdnConfiguration,
      "DashConfiguration": toDashConfiguration,
      "HlsConfiguration": toHlsConfiguration,
      "ManifestProcessingRules": toManifestProcessingRules,
      "Name": "s",
      "PlaybackConfigurationArn": "s",
      "PlaybackEndpointPrefix": "s",
      "SessionInitializationEndpointPrefix": "s",
      "SlateAdUrl": "s",
      "Tags": x => jsonP.readMap(String, String, x),
      "TranscodeProfileName": "s",
      "PersonalizationThresholdSeconds": "n",
      "VideoContentSourceUrl": "s",
    },
  }, root);
}
