import type * as Schema from './sdk-schema.ts';
import ProtocolQueryCodegen from './protocol-query.ts';
import ShapeLibrary, { KnownShape } from './shape-library.ts';
// import type { ApiParamSpecMap, ApiParamSpec } from './../deno-client/common.ts';

export default class ServiceCodeGen {
  apiSpec: Schema.Api;
  pagersSpec?: Schema.Pagination;
  waitersSpec?: Schema.Waiters;

  shapes: ShapeLibrary;
  protocol: ProtocolQueryCodegen; // TODO: others too

  constructor(specs: {
    api: Schema.Api,
    pagers?: Schema.Pagination,
    waiters?: Schema.Waiters,
  }) {
    this.apiSpec = specs.api;
    this.pagersSpec = specs.pagers;
    this.waitersSpec = specs.waiters;

    const inputShapes = new Set<string>();
    const outputShapes = new Set<string>();
    for (const op of Object.values(specs.api.operations)) {
      if (op.input) inputShapes.add(op.input.shape);
      if (op.output) outputShapes.add(op.output.shape);
    }

    this.shapes = new ShapeLibrary({
      shapeSpecs: specs.api.shapes,
      inputNames: Array.from(inputShapes),
      outputNames: Array.from(outputShapes),
    });

    switch (specs.api.metadata.protocol) {
      case 'ec2':
        this.protocol = new ProtocolQueryCodegen(this.shapes, {ec2: true});
        break;
      case 'query':
        this.protocol = new ProtocolQueryCodegen(this.shapes);
        break;
      default: throw new Error(
        `TODO: unimpl protocol ${specs.api.metadata.protocol}`);
    }

  }

  // #namedShapes = new Set<string>();
  // #singleRefShapes = new Set<string>();

  generateTypescript(): string {
    // this.#namedShapes.clear();
    // this.#singleRefShapes.clear();

    // console.log(wholeSpec.metadata)
    const apiCamelName = this.apiSpec.metadata.serviceId.split(' ').map(x => x[0].toUpperCase()+x.slice(1)).join('');

    const allMethods = new Set(Object.values(this.apiSpec.operations).map(x => x.http?.method ?? 'POST'));

    const chunks = new Array<string>();
    chunks.push(`// Autogenerated API client for: ${this.apiSpec.metadata.serviceFullName}`);

    // type LocationMap = { [param: string]: {
    //   location: "uri" | "querystring" | "header" | "headers" | "statusCode";
    //   name?: string;
    // }};

    chunks.push(`
// The HTTP contract put forth by aws-typescript-client/core/mod.ts
interface ApiRequestConfig {
  // fixed per operation
  action: string;
  method?: ${Array.from(allMethods).map(x => JSON.stringify(x)).join(' | ')};
  requestUri?: string;
  responseCode?: number;
  hostPrefix?: string;
  // "endpointdiscovery"?: {} // only in dynamodb
// dynamic per call
  headers?: Headers;
  query?: URLSearchParams;
  body?: ${this.protocol.requestBodyTypeName};
  abortSignal?: AbortSignal;
}
export type ApiResponse = Response & {
  xml(resultWrapper?: string): Promise<XmlNode>;
}
// Things that JSON can handle directly
// export type ApiWireStructure = {
//   [param: string]: string | number | boolean | null | ApiWireStructure;
// };
interface ApiFactory {
  buildServiceClient(apiMetadata: Object): ServiceClient;
}
interface ServiceClient {
  performRequest(request: ApiRequestConfig): Promise<ApiResponse>;
  // TODO: runWaiter(, abortSignal: AbortSignal?)
}
interface RequestConfig {
  abortSignal?: AbortSignal;
}
export interface XmlNode {
  name: string;
  attributes: {[key: string]: string};
  content?: string;
  children: XmlNode[];

  first(name: string, required: true): XmlNode;
  first<T>(name: string, required: true, accessor: (node: XmlNode) => T): T;
  first(name: string, required?: false): XmlNode | undefined;
  first<T>(name: string, required: false, accessor: (node: XmlNode) => T): T | undefined;
  getList(...namePath: string[]): XmlNode[]; // you can just map this
  strings<R extends {[key: string]: true}, O extends {[key: string]: true}>(
    opts: { required?: R, optional?: O }
  ): { [key in keyof R]: string } & { [key in keyof O]: string | undefined };
}

`);
    chunks.push(this.protocol.globalHelpers);

    chunks.push(`export default class ${apiCamelName} {`);
    chunks.push(`  #client: ServiceClient;`);
    chunks.push(`  constructor(apiFactory: ApiFactory) {`);
    chunks.push(`    this.#client = apiFactory.buildServiceClient(${apiCamelName}.ApiMetadata);`);
    chunks.push(`  }\n`);
    chunks.push(`  static ApiMetadata: Object = ${JSON.stringify(this.apiSpec.metadata, null, 2).replace(/\n/g, `\n  `)};\n`);

    for (const operation of Object.values(this.apiSpec.operations)) {
      const inputShape =  operation.input ? this.shapes.get(operation.input) : null;
      const outputShape = operation.output ? this.shapes.get(operation.output) : null;

      let signature = `(\n    {abortSignal, ...params}: RequestConfig`;
      if (inputShape?.spec.type === 'structure' && operation.input) {
        signature += ' & ' + this.specifyShapeType(operation.input);
        if (!inputShape.spec.required?.length) {
          signature += ' = {}';
        }
      } else if (inputShape) {
        throw new Error(`TODO: ${inputShape.spec.type} input`);
      } else {
        signature += ' = {}';
      }

      signature += `,\n  ): Promise<`;
      if (outputShape?.spec.type === 'structure' && operation.output) {
        // signature += 'string';
        signature += this.specifyShapeType(operation.output);
      } else if (outputShape) {
        throw new Error(`TODO: ${outputShape.spec.type} output`);
      } else {
        // signature += 'string';
        signature += 'void';
      }
      signature += '>';

      const lowerCamelName = operation.name[0].toLowerCase() + operation.name.slice(1);
      chunks.push(`  async ${lowerCamelName}${signature} {`);
      const pathParts = new Map;
      const referencedInputs = new Set(['abortSignal']);
      if (inputShape?.spec.type === 'structure') {
        const {inputParsingCode, inputVariables} = this.protocol
          .generateOperationInputParsingTypescript(inputShape.spec);
        chunks.push(inputParsingCode);
        inputVariables.forEach(x => referencedInputs.add(x));
      } else {
        referencedInputs.add(`body: new URLSearchParams()`);
      }

      chunks.push(`    const resp = await this.#client.performRequest({`);
      chunks.push(`      ${Array.from(referencedInputs).join(', ')},`);
      chunks.push(`      action: ${JSON.stringify(operation.name)},`);
      if (operation.http?.method && operation.http.method !== 'POST') {
        chunks.push(`      method: ${JSON.stringify(operation.http.method)},`);
      }
      if (operation.http?.requestUri && operation.http.requestUri !== '/') {
        const formattedPath = operation.http?.requestUri?.includes('{')
          ? ('encodePath`'+operation.http.requestUri
              .replace(/{[^}]+}/g, x => pathParts.get(x)||x)
            +'`').replace(/\+encodePath``/g, '')
          : JSON.stringify(operation.http?.requestUri || '/');
        chunks.push(`      requestUri: ${formattedPath},`);
      }
      if (operation.http?.responseCode) {
        chunks.push(`      responseCode: ${JSON.stringify(operation.http.responseCode)},`);
      }
      if (operation.endpoint?.hostPrefix) {
        const templatedPrefix = operation.endpoint.hostPrefix.replace(/{/g, '${params.');
        chunks.push(`      hostPrefix: \`${templatedPrefix}\`,`);
      }
      chunks.push(`    });`);

      /////
      // OVERALL TODO: Detect 'framing' shapes (e.g. for s3 headers) and treat them specially

      if (outputShape?.spec.type === 'structure') {
        chunks.push(`    const xml = await resp.xml(${JSON.stringify(operation.output?.resultWrapper ?? undefined)});`);
        if (outputShape.refCount > 1) {
          chunks.push(`    return ${outputShape.censoredName}_Parse(xml);`);
        } else {
          const {outputParsingCode, outputVariables} = this.protocol
            .generateOperationOutputParsingTypescript(outputShape.spec);
          chunks.push(outputParsingCode);
        }

        // // chunks.push(`    const [fields] = xml.mapChildren({});`);
        // chunks.push(`    return {`);

        // // Basic strings can be passed directly from the xml module
        // // TODO: support for locationName and maybe even enums, as further strings() arguments
        // const reqStrings: {[key: string]: true} = {};
        // let hasRequiredStrs = false;
        // const optStrings: {[key: string]: true} = {};
        // let hasOptionalStrs = false;
        // const specials: Array<[string, Schema.StructureFieldDetails, KnownShape]> = [];
        // for (const [field, spec] of Object.entries(outputShape?.members)) {
        //   const fieldShape = this.shapes.get(spec);
        //   if (fieldShape.spec.type == 'string' && !fieldShape.spec.enum && !spec.locationName && !fieldShape.spec.locationName) {
        //     if (outputShape.required?.includes(field)) {
        //       reqStrings[field] = true;
        //       hasRequiredStrs = true;
        //     } else {
        //       optStrings[field] = true;
        //       hasOptionalStrs = true;
        //     }
        //   } else {
        //     specials.push([field, spec, fieldShape]);
        //   }
        // }
        // if (hasOptionalStrs || hasRequiredStrs) {
        //   chunks.push(`      ...xml.strings({`);
        //   if (hasRequiredStrs) chunks.push(`        required: ${JSON.stringify(reqStrings)},`);
        //   if (hasOptionalStrs) chunks.push(`        optional: ${JSON.stringify(optStrings)},`);
        //   chunks.push(`      }),`);
        // }

        // for (const [field, spec, fieldShape] of specials) {
        //   const locationName = spec.locationName ?? fieldShape.spec.locationName ?? field;
        //   switch (fieldShape.spec.type) {
        //     // case 'string':
        //     //   if (fieldShape.spec.enum) {
        //     //     // TODO: is there a better way of mapping freetext into enums?
        //     //     chunks.push(`      ${field}: fields[${JSON.stringify(locationName)}]?.content as ${fieldShape.spec.enum.map(x => JSON.stringify(x)).join(' | ')},`);
        //     //   } else {
        //     //     chunks.push(`      ${field}: fields[${JSON.stringify(locationName)}]?.content,`);
        //     //   }
        //     //   break;
        //     default:
        //       chunks.push(`      // TODO: ${field} (${fieldShape.spec.type})`);
        //   }
        // }
        // chunks.push(`    };`);
      }

      // const xml = await resp.xml("GetCallerIdentityResult");
      // return {
      //   ...xml.strings({
      //     required: {
      //       "UserId": true,
      //       "Account": true,
      //       "Arn": true,
      //     },
      //   }),
      // };

      chunks.push(`  }\n`);
    }

    if (this.waitersSpec) {
      chunks.push(`  // Resource State Waiters\n`);

      for (const [waiter, spec] of Object.entries(this.waitersSpec.waiters)) {
        if (spec.description) {
          chunks.push(`  /**\n   * ${spec.description}\n   */`);
        }
        chunks.push(`  waitFor${waiter}(): Promise<any> {`);
        chunks.push(`    return Promise.reject("TODO");`);
        // chunks.push(`    // ${JSON.stringify(spec)}`);
        chunks.push(`  }\n`);
      }
    }

    chunks.push(`}\n`);

    for (const shape of this.shapes.allNamedShapes) {
      if (!shape.tags.has('named')) continue;

      chunks.push(`// refs: ${shape.refCount
        } - tags: ${Array.from(shape.tags).join(', ')}`);

      if (shape.spec.type === 'structure') {
        // if (this.#singleRefShapes.has(shape.name)) {
        //   chunks.push(`// TODO: can be inlined (only used once)`);
        // }
        chunks.push(`interface ${shape.censoredName} ${
          this.formatStructureType(shape.spec)}`);
        // Maybe include input reading (prep for wire)
        if (!(this.shapes.inputShapes.includes(shape) && shape.refCount === 1) && shape.tags.has('input')) {
          chunks.push(this.protocol.generateShapeInputParsingTypescript(
            shape.censoredName, shape.spec,
          ).inputParsingFunction);
        }
        // Maybe include output reading (post-wire enriching)
        if (!(this.shapes.outputShapes.includes(shape) && shape.refCount === 1) && shape.tags.has('output')) {
          chunks.push(this.protocol.generateShapeOutputParsingTypescript(
            shape.censoredName, shape.spec,
          ).outputParsingFunction);
        }
        chunks.push('');

      } else if (shape.spec.type === 'string' && shape.spec.enum) {
        chunks.push(`type ${shape.censoredName} =`);
        for (const value of shape.spec.enum) {
          chunks.push(`| ${JSON.stringify(value)}`);
        }
        chunks.push(`;\n`);

      } else {
        chunks.push(`// TODO: forgotten shape ${shape.name} of type ${shape.spec.type}\n`);
      }
    }

    return chunks.join('\n');
  }

  formatStructureType(shape: Schema.ShapeStructure): string {
    const required = new Set(shape.required?.map(x => x.toLowerCase()) || []);
    return ['{',
      ...Object.entries(shape.members).map(([key, spec]) =>
        `  ${key}${required.has(key.toLowerCase()) ? '' : '?'}: ${this.specifyShapeType(spec)};`),
    '}'].join('\n');
  }

  // TODO: enums as a map key type should become an object instead
  specifyShapeType(spec: Schema.ShapeRef, isDictKey = false): string {
    const shape = this.shapes.get(spec);
    if (shape.tags.has('named') && !isDictKey) {
      return censorShapeName(spec.shape);
    }

    switch (shape.spec.type) {
      case 'string':
        if (shape.spec.enum && !isDictKey) {
          return shape.spec.enum.map(x => JSON.stringify(x)).join(' | ');
        }
      case 'boolean':
        return shape.spec.type;
      case 'character':
        return 'string';
      case 'double':
      case 'float':
      case 'long':
      case 'integer':
        return 'number';
      case 'list':
        return `Array<${this.specifyShapeType(shape.spec.member)}>`;
      case 'map':
        return `{ [key: ${this.specifyShapeType(shape.spec.key, true)}]: ${this.specifyShapeType(shape.spec.value)} }`;
      case 'structure':
        return this.formatStructureType(shape.spec).replace(/\n/g, '\n  ');
      case 'timestamp':
        return 'Date | number';
      case 'blob':
        return 'Uint8Array | string'; // TODO
      default:
        console.log(shape);
        throw new Error(`TODO: unimpl shape type ${(shape as any).spec.type}`);
    }
  }

}

function censorShapeName(name: string): string {
  if (['Object', 'Date', 'String'].includes(name)) {
    return '_'+name;
  }
  return name;
}
